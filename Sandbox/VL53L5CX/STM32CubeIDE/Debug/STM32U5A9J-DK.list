
STM32U5A9J-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a6a4  0800026c  0800026c  0001026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003058  0802a910  0802a910  0003a910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0802d968  0802d968  0003d968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0802d980  0802d980  0003d980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   0000001c  0802d988  0802d988  0003d988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000008  0802d9a4  0802d9a4  0003d9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000012c  20000000  0802d9ac  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 TouchGFX_Framebuffer 00151800  2000012c  0802dad8  0004012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000470d4  20151930  0817f2d8  00191930  2**3
                  ALLOC
 10 ._user_heap_stack 00001804  20198a04  0817f2d8  00198a04  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  001a01b8  2**0
                  CONTENTS, READONLY
 12 FontFlashSection 000001a8  90000000  90000000  001a0000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 TextFlashSection 00000010  900001a8  900001a8  001a01a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 ExtFlashSection 00000000  900001b8  900001b8  001a01ee  2**0
                  CONTENTS
 15 .debug_info   000b6244  00000000  00000000  001a01ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00015c9c  00000000  00000000  00256432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003a60  00000000  00000000  0026c0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00003dd0  00000000  00000000  0026fb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00053131  00000000  00000000  00273900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000611a7  00000000  00000000  002c6a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001b5939  00000000  00000000  00327bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000cf  00000000  00000000  004dd511  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000dc90  00000000  00000000  004dd5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    00006947  00000000  00000000  004eb270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	; (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <__do_global_dtors_aux+0x20>)
 800027a:	e000      	b.n	800027e <__do_global_dtors_aux+0x12>
 800027c:	bf00      	nop
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	20151930 	.word	0x20151930
 8000288:	00000000 	.word	0x00000000
 800028c:	0802a8f8 	.word	0x0802a8f8

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	; (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	; (80002a8 <frame_dummy+0x18>)
 800029a:	e000      	b.n	800029e <frame_dummy+0xe>
 800029c:	bf00      	nop
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	20151934 	.word	0x20151934
 80002a8:	0802a8f8 	.word	0x0802a8f8

080002ac <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 80002ac:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ae:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002b2:	4917      	ldr	r1, [pc, #92]	; (8000310 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 80002b4:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002b8:	4816      	ldr	r0, [pc, #88]	; (8000314 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 80002ba:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 80002bc:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002c0:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002c2:	4815      	ldr	r0, [pc, #84]	; (8000318 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002c4:	4912      	ldr	r1, [pc, #72]	; (8000310 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002c6:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002c8:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ca:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ce:	4913      	ldr	r1, [pc, #76]	; (800031c <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002d0:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002d2:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002d6:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002d8:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002dc:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002e0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002e4:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	490d      	ldr	r1, [pc, #52]	; (8000320 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ea:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ee:	4770      	bx	lr

080002f0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002f0:	f7ff bffe 	b.w	80002f0 <__tx_BadHandler>

080002f4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002f4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002f6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002fa:	4770      	bx	lr

080002fc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002fc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002fe:	f000 f89f 	bl	8000440 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 8000302:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 8000306:	4770      	bx	lr

08000308 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000308:	f7ff bffe 	b.w	8000308 <__tx_NMIHandler>

0800030c <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 800030c:	f7ff bffe 	b.w	800030c <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000310:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000314:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 8000318:	20197ee0 	.word	0x20197ee0
    LDR     r1, =SYSTICK_CYCLES
 800031c:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000320:	40ff0000 	.word	0x40ff0000

08000324 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000324:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000328:	4a31      	ldr	r2, [pc, #196]	; (80003f0 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800032a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800032c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000330:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000334:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000338:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800033a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800033e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000342:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000346:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800034a:	f3bf 8f6f 	isb	sy

0800034e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800034e:	e7fe      	b.n	800034e <__tx_wait_here>

08000350 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000350:	4828      	ldr	r0, [pc, #160]	; (80003f4 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000352:	4a29      	ldr	r2, [pc, #164]	; (80003f8 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000354:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000358:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800035a:	b191      	cbz	r1, 8000382 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800035c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800035e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000362:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000366:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800036a:	d101      	bne.n	8000370 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 800036c:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000370 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000370:	4c22      	ldr	r4, [pc, #136]	; (80003fc <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000372:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000376:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800037a:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 800037c:	b10d      	cbz	r5, 8000382 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800037e:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000380:	6023      	str	r3, [r4, #0]

08000382 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000382:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000384:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000386:	b1d1      	cbz	r1, 80003be <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000388:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800038a:	b662      	cpsie	i

0800038c <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800038c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800038e:	4c1b      	ldr	r4, [pc, #108]	; (80003fc <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000390:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000392:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000396:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000398:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800039a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800039e:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003a2:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003a6:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003aa:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003ae:	d101      	bne.n	80003b4 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003b0:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003b4 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003b4:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003b8:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 80003bc:	4770      	bx	lr

080003be <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003c0:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003c2:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003c4:	b949      	cbnz	r1, 80003da <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 80003c6:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 80003c8:	f002 fabe 	bl	8002948 <tx_low_power_enter>
    POP     {r0-r3}
 80003cc:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 80003ce:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 80003d0:	f002 fac4 	bl	800295c <tx_low_power_exit>
    POP     {r0-r3}
 80003d4:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003d6:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003d8:	e7f1      	b.n	80003be <__tx_ts_wait>

080003da <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003da:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003de:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003e2:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003e6:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003e8:	e7d0      	b.n	800038c <__tx_ts_restore>
 80003ea:	bf00      	nop

080003ec <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003ec:	4770      	bx	lr
 80003ee:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003f0:	20197f7c 	.word	0x20197f7c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003f4:	20197ee4 	.word	0x20197ee4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003f8:	20197ee8 	.word	0x20197ee8
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003fc:	201984e8 	.word	0x201984e8

08000400 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000400:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000402:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000406:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 800040a:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 800040e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000410:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000414:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000416:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000418:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800041a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800041c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800041e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000420:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000422:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000424:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000426:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000428:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800042c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800042e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000432:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000434:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000436:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800043a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800043c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800043e:	4770      	bx	lr

08000440 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000440:	4922      	ldr	r1, [pc, #136]	; (80004cc <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000442:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000444:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000448:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800044a:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800044c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800044e:	b13a      	cbz	r2, 8000460 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000450:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000454:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000456:	b91a      	cbnz	r2, 8000460 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000458:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800045a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800045e:	6018      	str	r0, [r3, #0]

08000460 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000460:	491d      	ldr	r1, [pc, #116]	; (80004d8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000462:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000464:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000466:	b122      	cbz	r2, 8000472 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000468:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800046a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800046e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000470:	e008      	b.n	8000484 <__tx_timer_done>

08000472 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000472:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000476:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000478:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800047a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800047c:	d101      	bne.n	8000482 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800047e:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000480:	6818      	ldr	r0, [r3, #0]

08000482 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000482:	6008      	str	r0, [r1, #0]

08000484 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000486:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000488:	b912      	cbnz	r2, 8000490 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800048a:	4914      	ldr	r1, [pc, #80]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800048c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800048e:	b1c8      	cbz	r0, 80004c4 <__tx_timer_nothing_expired>

08000490 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000490:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000492:	4912      	ldr	r1, [pc, #72]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000494:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000496:	b108      	cbz	r0, 800049c <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000498:	f015 fcb2 	bl	8015e00 <_tx_timer_expiration_process>

0800049c <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800049c:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800049e:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004a0:	b172      	cbz	r2, 80004c0 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004a2:	f015 fc1f 	bl	8015ce4 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a6:	4810      	ldr	r0, [pc, #64]	; (80004e8 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004a8:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004aa:	b949      	cbnz	r1, 80004c0 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ac:	480f      	ldr	r0, [pc, #60]	; (80004ec <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004ae:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004b0:	4a0f      	ldr	r2, [pc, #60]	; (80004f0 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004b2:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004b4:	480f      	ldr	r0, [pc, #60]	; (80004f4 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004ba:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004bc:	d000      	beq.n	80004c0 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004be:	6002      	str	r2, [r0, #0]

080004c0 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 80004c0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004c4 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004c4:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004c8:	4770      	bx	lr
 80004ca:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004cc:	20197f88 	.word	0x20197f88
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004d0:	201984e8 	.word	0x201984e8
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004d4:	20197f8c 	.word	0x20197f8c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004d8:	20198018 	.word	0x20198018
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004dc:	2019801c 	.word	0x2019801c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004e0:	20198014 	.word	0x20198014
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004e4:	20198010 	.word	0x20198010
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004e8:	20197f7c 	.word	0x20197f7c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ec:	20197ee4 	.word	0x20197ee4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004f0:	20197ee8 	.word	0x20197ee8
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004f4:	e000ed04 	.word	0xe000ed04

080004f8 <__aeabi_uldivmod>:
 80004f8:	b953      	cbnz	r3, 8000510 <__aeabi_uldivmod+0x18>
 80004fa:	b94a      	cbnz	r2, 8000510 <__aeabi_uldivmod+0x18>
 80004fc:	2900      	cmp	r1, #0
 80004fe:	bf08      	it	eq
 8000500:	2800      	cmpeq	r0, #0
 8000502:	bf1c      	itt	ne
 8000504:	f04f 31ff 	movne.w	r1, #4294967295
 8000508:	f04f 30ff 	movne.w	r0, #4294967295
 800050c:	f000 b982 	b.w	8000814 <__aeabi_idiv0>
 8000510:	f1ad 0c08 	sub.w	ip, sp, #8
 8000514:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000518:	f000 f806 	bl	8000528 <__udivmoddi4>
 800051c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000524:	b004      	add	sp, #16
 8000526:	4770      	bx	lr

08000528 <__udivmoddi4>:
 8000528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800052c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800052e:	4604      	mov	r4, r0
 8000530:	460f      	mov	r7, r1
 8000532:	2b00      	cmp	r3, #0
 8000534:	d148      	bne.n	80005c8 <__udivmoddi4+0xa0>
 8000536:	428a      	cmp	r2, r1
 8000538:	4694      	mov	ip, r2
 800053a:	d961      	bls.n	8000600 <__udivmoddi4+0xd8>
 800053c:	fab2 f382 	clz	r3, r2
 8000540:	b143      	cbz	r3, 8000554 <__udivmoddi4+0x2c>
 8000542:	f1c3 0120 	rsb	r1, r3, #32
 8000546:	409f      	lsls	r7, r3
 8000548:	fa02 fc03 	lsl.w	ip, r2, r3
 800054c:	409c      	lsls	r4, r3
 800054e:	fa20 f101 	lsr.w	r1, r0, r1
 8000552:	430f      	orrs	r7, r1
 8000554:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	0c22      	lsrs	r2, r4, #16
 800055e:	fbb7 f6f1 	udiv	r6, r7, r1
 8000562:	fb01 7716 	mls	r7, r1, r6, r7
 8000566:	fb06 f00e 	mul.w	r0, r6, lr
 800056a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800056e:	4290      	cmp	r0, r2
 8000570:	d908      	bls.n	8000584 <__udivmoddi4+0x5c>
 8000572:	eb1c 0202 	adds.w	r2, ip, r2
 8000576:	f106 37ff 	add.w	r7, r6, #4294967295
 800057a:	d202      	bcs.n	8000582 <__udivmoddi4+0x5a>
 800057c:	4290      	cmp	r0, r2
 800057e:	f200 8137 	bhi.w	80007f0 <__udivmoddi4+0x2c8>
 8000582:	463e      	mov	r6, r7
 8000584:	1a12      	subs	r2, r2, r0
 8000586:	b2a4      	uxth	r4, r4
 8000588:	fbb2 f0f1 	udiv	r0, r2, r1
 800058c:	fb01 2210 	mls	r2, r1, r0, r2
 8000590:	fb00 fe0e 	mul.w	lr, r0, lr
 8000594:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000598:	45a6      	cmp	lr, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x86>
 800059c:	eb1c 0404 	adds.w	r4, ip, r4
 80005a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80005a4:	d202      	bcs.n	80005ac <__udivmoddi4+0x84>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f200 811c 	bhi.w	80007e4 <__udivmoddi4+0x2bc>
 80005ac:	4610      	mov	r0, r2
 80005ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	2600      	movs	r6, #0
 80005b8:	b11d      	cbz	r5, 80005c2 <__udivmoddi4+0x9a>
 80005ba:	40dc      	lsrs	r4, r3
 80005bc:	2300      	movs	r3, #0
 80005be:	e9c5 4300 	strd	r4, r3, [r5]
 80005c2:	4631      	mov	r1, r6
 80005c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005c8:	428b      	cmp	r3, r1
 80005ca:	d909      	bls.n	80005e0 <__udivmoddi4+0xb8>
 80005cc:	2d00      	cmp	r5, #0
 80005ce:	f000 80fd 	beq.w	80007cc <__udivmoddi4+0x2a4>
 80005d2:	2600      	movs	r6, #0
 80005d4:	e9c5 0100 	strd	r0, r1, [r5]
 80005d8:	4630      	mov	r0, r6
 80005da:	4631      	mov	r1, r6
 80005dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005e0:	fab3 f683 	clz	r6, r3
 80005e4:	2e00      	cmp	r6, #0
 80005e6:	d14b      	bne.n	8000680 <__udivmoddi4+0x158>
 80005e8:	428b      	cmp	r3, r1
 80005ea:	f0c0 80f2 	bcc.w	80007d2 <__udivmoddi4+0x2aa>
 80005ee:	4282      	cmp	r2, r0
 80005f0:	f240 80ef 	bls.w	80007d2 <__udivmoddi4+0x2aa>
 80005f4:	4630      	mov	r0, r6
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	d0e3      	beq.n	80005c2 <__udivmoddi4+0x9a>
 80005fa:	e9c5 4700 	strd	r4, r7, [r5]
 80005fe:	e7e0      	b.n	80005c2 <__udivmoddi4+0x9a>
 8000600:	b902      	cbnz	r2, 8000604 <__udivmoddi4+0xdc>
 8000602:	deff      	udf	#255	; 0xff
 8000604:	fab2 f382 	clz	r3, r2
 8000608:	2b00      	cmp	r3, #0
 800060a:	f040 809d 	bne.w	8000748 <__udivmoddi4+0x220>
 800060e:	1a89      	subs	r1, r1, r2
 8000610:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000614:	b297      	uxth	r7, r2
 8000616:	2601      	movs	r6, #1
 8000618:	0c20      	lsrs	r0, r4, #16
 800061a:	fbb1 f2fe 	udiv	r2, r1, lr
 800061e:	fb0e 1112 	mls	r1, lr, r2, r1
 8000622:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000626:	fb07 f002 	mul.w	r0, r7, r2
 800062a:	4288      	cmp	r0, r1
 800062c:	d90f      	bls.n	800064e <__udivmoddi4+0x126>
 800062e:	eb1c 0101 	adds.w	r1, ip, r1
 8000632:	f102 38ff 	add.w	r8, r2, #4294967295
 8000636:	bf2c      	ite	cs
 8000638:	f04f 0901 	movcs.w	r9, #1
 800063c:	f04f 0900 	movcc.w	r9, #0
 8000640:	4288      	cmp	r0, r1
 8000642:	d903      	bls.n	800064c <__udivmoddi4+0x124>
 8000644:	f1b9 0f00 	cmp.w	r9, #0
 8000648:	f000 80cf 	beq.w	80007ea <__udivmoddi4+0x2c2>
 800064c:	4642      	mov	r2, r8
 800064e:	1a09      	subs	r1, r1, r0
 8000650:	b2a4      	uxth	r4, r4
 8000652:	fbb1 f0fe 	udiv	r0, r1, lr
 8000656:	fb0e 1110 	mls	r1, lr, r0, r1
 800065a:	fb00 f707 	mul.w	r7, r0, r7
 800065e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000662:	42a7      	cmp	r7, r4
 8000664:	d908      	bls.n	8000678 <__udivmoddi4+0x150>
 8000666:	eb1c 0404 	adds.w	r4, ip, r4
 800066a:	f100 31ff 	add.w	r1, r0, #4294967295
 800066e:	d202      	bcs.n	8000676 <__udivmoddi4+0x14e>
 8000670:	42a7      	cmp	r7, r4
 8000672:	f200 80b4 	bhi.w	80007de <__udivmoddi4+0x2b6>
 8000676:	4608      	mov	r0, r1
 8000678:	1be4      	subs	r4, r4, r7
 800067a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800067e:	e79b      	b.n	80005b8 <__udivmoddi4+0x90>
 8000680:	f1c6 0720 	rsb	r7, r6, #32
 8000684:	40b3      	lsls	r3, r6
 8000686:	fa01 f406 	lsl.w	r4, r1, r6
 800068a:	fa22 fc07 	lsr.w	ip, r2, r7
 800068e:	40f9      	lsrs	r1, r7
 8000690:	40b2      	lsls	r2, r6
 8000692:	ea4c 0c03 	orr.w	ip, ip, r3
 8000696:	fa20 f307 	lsr.w	r3, r0, r7
 800069a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800069e:	431c      	orrs	r4, r3
 80006a0:	fa1f fe8c 	uxth.w	lr, ip
 80006a4:	fa00 f306 	lsl.w	r3, r0, r6
 80006a8:	0c20      	lsrs	r0, r4, #16
 80006aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80006ae:	fb09 1118 	mls	r1, r9, r8, r1
 80006b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006b6:	fb08 f00e 	mul.w	r0, r8, lr
 80006ba:	4288      	cmp	r0, r1
 80006bc:	d90f      	bls.n	80006de <__udivmoddi4+0x1b6>
 80006be:	eb1c 0101 	adds.w	r1, ip, r1
 80006c2:	f108 3aff 	add.w	sl, r8, #4294967295
 80006c6:	bf2c      	ite	cs
 80006c8:	f04f 0b01 	movcs.w	fp, #1
 80006cc:	f04f 0b00 	movcc.w	fp, #0
 80006d0:	4288      	cmp	r0, r1
 80006d2:	d903      	bls.n	80006dc <__udivmoddi4+0x1b4>
 80006d4:	f1bb 0f00 	cmp.w	fp, #0
 80006d8:	f000 808d 	beq.w	80007f6 <__udivmoddi4+0x2ce>
 80006dc:	46d0      	mov	r8, sl
 80006de:	1a09      	subs	r1, r1, r0
 80006e0:	b2a4      	uxth	r4, r4
 80006e2:	fbb1 f0f9 	udiv	r0, r1, r9
 80006e6:	fb09 1110 	mls	r1, r9, r0, r1
 80006ea:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ee:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006f2:	458e      	cmp	lr, r1
 80006f4:	d907      	bls.n	8000706 <__udivmoddi4+0x1de>
 80006f6:	eb1c 0101 	adds.w	r1, ip, r1
 80006fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80006fe:	d201      	bcs.n	8000704 <__udivmoddi4+0x1dc>
 8000700:	458e      	cmp	lr, r1
 8000702:	d87f      	bhi.n	8000804 <__udivmoddi4+0x2dc>
 8000704:	4620      	mov	r0, r4
 8000706:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800070a:	eba1 010e 	sub.w	r1, r1, lr
 800070e:	fba0 9802 	umull	r9, r8, r0, r2
 8000712:	4541      	cmp	r1, r8
 8000714:	464c      	mov	r4, r9
 8000716:	46c6      	mov	lr, r8
 8000718:	d302      	bcc.n	8000720 <__udivmoddi4+0x1f8>
 800071a:	d106      	bne.n	800072a <__udivmoddi4+0x202>
 800071c:	454b      	cmp	r3, r9
 800071e:	d204      	bcs.n	800072a <__udivmoddi4+0x202>
 8000720:	3801      	subs	r0, #1
 8000722:	ebb9 0402 	subs.w	r4, r9, r2
 8000726:	eb68 0e0c 	sbc.w	lr, r8, ip
 800072a:	2d00      	cmp	r5, #0
 800072c:	d070      	beq.n	8000810 <__udivmoddi4+0x2e8>
 800072e:	1b1a      	subs	r2, r3, r4
 8000730:	eb61 010e 	sbc.w	r1, r1, lr
 8000734:	fa22 f306 	lsr.w	r3, r2, r6
 8000738:	fa01 f707 	lsl.w	r7, r1, r7
 800073c:	40f1      	lsrs	r1, r6
 800073e:	2600      	movs	r6, #0
 8000740:	431f      	orrs	r7, r3
 8000742:	e9c5 7100 	strd	r7, r1, [r5]
 8000746:	e73c      	b.n	80005c2 <__udivmoddi4+0x9a>
 8000748:	fa02 fc03 	lsl.w	ip, r2, r3
 800074c:	f1c3 0020 	rsb	r0, r3, #32
 8000750:	fa01 f203 	lsl.w	r2, r1, r3
 8000754:	fa21 f600 	lsr.w	r6, r1, r0
 8000758:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800075c:	fa24 f100 	lsr.w	r1, r4, r0
 8000760:	fa1f f78c 	uxth.w	r7, ip
 8000764:	409c      	lsls	r4, r3
 8000766:	4311      	orrs	r1, r2
 8000768:	fbb6 f0fe 	udiv	r0, r6, lr
 800076c:	0c0a      	lsrs	r2, r1, #16
 800076e:	fb0e 6610 	mls	r6, lr, r0, r6
 8000772:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000776:	fb00 f607 	mul.w	r6, r0, r7
 800077a:	4296      	cmp	r6, r2
 800077c:	d90e      	bls.n	800079c <__udivmoddi4+0x274>
 800077e:	eb1c 0202 	adds.w	r2, ip, r2
 8000782:	f100 38ff 	add.w	r8, r0, #4294967295
 8000786:	bf2c      	ite	cs
 8000788:	f04f 0901 	movcs.w	r9, #1
 800078c:	f04f 0900 	movcc.w	r9, #0
 8000790:	4296      	cmp	r6, r2
 8000792:	d902      	bls.n	800079a <__udivmoddi4+0x272>
 8000794:	f1b9 0f00 	cmp.w	r9, #0
 8000798:	d031      	beq.n	80007fe <__udivmoddi4+0x2d6>
 800079a:	4640      	mov	r0, r8
 800079c:	1b92      	subs	r2, r2, r6
 800079e:	b289      	uxth	r1, r1
 80007a0:	fbb2 f6fe 	udiv	r6, r2, lr
 80007a4:	fb0e 2216 	mls	r2, lr, r6, r2
 80007a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80007ac:	fb06 f207 	mul.w	r2, r6, r7
 80007b0:	428a      	cmp	r2, r1
 80007b2:	d907      	bls.n	80007c4 <__udivmoddi4+0x29c>
 80007b4:	eb1c 0101 	adds.w	r1, ip, r1
 80007b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80007bc:	d201      	bcs.n	80007c2 <__udivmoddi4+0x29a>
 80007be:	428a      	cmp	r2, r1
 80007c0:	d823      	bhi.n	800080a <__udivmoddi4+0x2e2>
 80007c2:	4646      	mov	r6, r8
 80007c4:	1a89      	subs	r1, r1, r2
 80007c6:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007ca:	e725      	b.n	8000618 <__udivmoddi4+0xf0>
 80007cc:	462e      	mov	r6, r5
 80007ce:	4628      	mov	r0, r5
 80007d0:	e6f7      	b.n	80005c2 <__udivmoddi4+0x9a>
 80007d2:	1a84      	subs	r4, r0, r2
 80007d4:	eb61 0303 	sbc.w	r3, r1, r3
 80007d8:	2001      	movs	r0, #1
 80007da:	461f      	mov	r7, r3
 80007dc:	e70b      	b.n	80005f6 <__udivmoddi4+0xce>
 80007de:	4464      	add	r4, ip
 80007e0:	3802      	subs	r0, #2
 80007e2:	e749      	b.n	8000678 <__udivmoddi4+0x150>
 80007e4:	4464      	add	r4, ip
 80007e6:	3802      	subs	r0, #2
 80007e8:	e6e1      	b.n	80005ae <__udivmoddi4+0x86>
 80007ea:	3a02      	subs	r2, #2
 80007ec:	4461      	add	r1, ip
 80007ee:	e72e      	b.n	800064e <__udivmoddi4+0x126>
 80007f0:	3e02      	subs	r6, #2
 80007f2:	4462      	add	r2, ip
 80007f4:	e6c6      	b.n	8000584 <__udivmoddi4+0x5c>
 80007f6:	f1a8 0802 	sub.w	r8, r8, #2
 80007fa:	4461      	add	r1, ip
 80007fc:	e76f      	b.n	80006de <__udivmoddi4+0x1b6>
 80007fe:	3802      	subs	r0, #2
 8000800:	4462      	add	r2, ip
 8000802:	e7cb      	b.n	800079c <__udivmoddi4+0x274>
 8000804:	3802      	subs	r0, #2
 8000806:	4461      	add	r1, ip
 8000808:	e77d      	b.n	8000706 <__udivmoddi4+0x1de>
 800080a:	3e02      	subs	r6, #2
 800080c:	4461      	add	r1, ip
 800080e:	e7d9      	b.n	80007c4 <__udivmoddi4+0x29c>
 8000810:	462e      	mov	r6, r5
 8000812:	e6d6      	b.n	80005c2 <__udivmoddi4+0x9a>

08000814 <__aeabi_idiv0>:
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop

08000818 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af02      	add	r7, sp, #8
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000824:	2334      	movs	r3, #52	; 0x34
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082c:	4a13      	ldr	r2, [pc, #76]	; (800087c <tx_application_define+0x64>)
 800082e:	4914      	ldr	r1, [pc, #80]	; (8000880 <tx_application_define+0x68>)
 8000830:	4814      	ldr	r0, [pc, #80]	; (8000884 <tx_application_define+0x6c>)
 8000832:	f015 fd8f 	bl	8016354 <_txe_byte_pool_create>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d109      	bne.n	8000850 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <tx_application_define+0x6c>)
 800083e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000840:	68b8      	ldr	r0, [r7, #8]
 8000842:	f000 f827 	bl	8000894 <App_ThreadX_Init>
 8000846:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d000      	beq.n	8000850 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800084e:	e7fe      	b.n	800084e <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&touchgfx_app_byte_pool, "TouchGFX App memory pool", touchgfx_byte_pool_buffer, TOUCHGFX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000850:	2334      	movs	r3, #52	; 0x34
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <tx_application_define+0x70>)
 800085a:	490c      	ldr	r1, [pc, #48]	; (800088c <tx_application_define+0x74>)
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <tx_application_define+0x78>)
 800085e:	f015 fd79 	bl	8016354 <_txe_byte_pool_create>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d104      	bne.n	8000872 <tx_application_define+0x5a>
  {
    /* USER CODE BEGIN TouchGFX_Byte_Pool_Success */

    /* USER CODE END TouchGFX_Byte_Pool_Success */

    memory_ptr = (VOID *)&touchgfx_app_byte_pool;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <tx_application_define+0x78>)
 800086a:	60bb      	str	r3, [r7, #8]
    if (MX_TouchGFX_Init(memory_ptr) != TX_SUCCESS)
 800086c:	68b8      	ldr	r0, [r7, #8]
 800086e:	f001 fda7 	bl	80023c0 <MX_TouchGFX_Init>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2015194c 	.word	0x2015194c
 8000880:	0802a910 	.word	0x0802a910
 8000884:	20151d4c 	.word	0x20151d4c
 8000888:	20151d80 	.word	0x20151d80
 800088c:	0802a924 	.word	0x0802a924
 8000890:	20152d80 	.word	0x20152d80

08000894 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80008b2:	f014 f879 	bl	80149a8 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c0:	f007 f93a 	bl	8007b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c4:	f000 f854 	bl	8000970 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008c8:	f000 f8b1 	bl	8000a2e <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80008cc:	f000 f8e4 	bl	8000a98 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f000 ff38 	bl	8001744 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80008d4:	f000 fb52 	bl	8000f7c <MX_ICACHE_Init>
  MX_CRC_Init();
 80008d8:	f000 f8ec 	bl	8000ab4 <MX_CRC_Init>
  MX_TIM8_Init();
 80008dc:	f000 fe36 	bl	800154c <MX_TIM8_Init>
  MX_DMA2D_Init();
 80008e0:	f000 f946 	bl	8000b70 <MX_DMA2D_Init>
  MX_GPU2D_Init();
 80008e4:	f000 fab6 	bl	8000e54 <MX_GPU2D_Init>
  MX_DSIHOST_DSI_Init();
 80008e8:	f000 f966 	bl	8000bb8 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 80008ec:	f000 fb5a 	bl	8000fa4 <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 80008f0:	f000 fde4 	bl	80014bc <MX_OCTOSPI1_Init>
  MX_HSPI1_Init();
 80008f4:	f000 fac2 	bl	8000e7c <MX_HSPI1_Init>
  MX_DCACHE1_Init();
 80008f8:	f000 f8fe 	bl	8000af8 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80008fc:	f000 f91a 	bl	8000b34 <MX_DCACHE2_Init>
  MX_USART1_UART_Init();
 8000900:	f000 fed4 	bl	80016ac <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8000904:	f000 fafa 	bl	8000efc <MX_I2C3_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000908:	f001 fd51 	bl	80023ae <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  printf("Hello VL53L5CX\r\n" );
 800090c:	4811      	ldr	r0, [pc, #68]	; (8000954 <main+0x98>)
 800090e:	f029 fb51 	bl	8029fb4 <puts>
  //~~~ VL53L5CX ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Dev.platform.address = VL53L5CX_DEFAULT_I2C_ADDRESS;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <main+0x9c>)
 8000914:	2252      	movs	r2, #82	; 0x52
 8000916:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(VL_LPn_GPIO_Port, VL_LPn_Pin, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091e:	480f      	ldr	r0, [pc, #60]	; (800095c <main+0xa0>)
 8000920:	f009 feaa 	bl	800a678 <HAL_GPIO_WritePin>
  status = vl53l5cx_is_alive(&Dev, &isAlive);
 8000924:	490e      	ldr	r1, [pc, #56]	; (8000960 <main+0xa4>)
 8000926:	480c      	ldr	r0, [pc, #48]	; (8000958 <main+0x9c>)
 8000928:	f003 fb96 	bl	8004058 <vl53l5cx_is_alive>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <main+0xa8>)
 8000932:	601a      	str	r2, [r3, #0]
  if(!isAlive){
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <main+0xa4>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d105      	bne.n	8000948 <main+0x8c>
    printf("VL53L5CXV0 not detected at requested address (0x%x)\n", Dev.platform.address);
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <main+0x9c>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	4809      	ldr	r0, [pc, #36]	; (8000968 <main+0xac>)
 8000944:	f029 fab0 	bl	8029ea8 <iprintf>
  }
  printf("Sensor OK\n");
 8000948:	4808      	ldr	r0, [pc, #32]	; (800096c <main+0xb0>)
 800094a:	f029 fb33 	bl	8029fb4 <puts>
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800094e:	f7ff ffae 	bl	80008ae <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x96>
 8000954:	0802a940 	.word	0x0802a940
 8000958:	201530a0 	.word	0x201530a0
 800095c:	42021000 	.word	0x42021000
 8000960:	20153b50 	.word	0x20153b50
 8000964:	2015309c 	.word	0x2015309c
 8000968:	0802a950 	.word	0x0802a950
 800096c:	0802a988 	.word	0x0802a988

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09e      	sub	sp, #120	; 0x78
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0318 	add.w	r3, r7, #24
 800097a:	2260      	movs	r2, #96	; 0x60
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f028 feba 	bl	80296f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	463b      	mov	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
 8000992:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000994:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000998:	f00b fc70 	bl	800c27c <HAL_PWREx_ControlVoltageScaling>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80009a2:	f001 f80d 	bl	80019c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
 80009a6:	2311      	movs	r3, #17
 80009a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009b0:	2301      	movs	r3, #1
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009b4:	2310      	movs	r3, #16
 80009b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80009b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009be:	2302      	movs	r3, #2
 80009c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009c2:	2301      	movs	r3, #1
 80009c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ca:	2301      	movs	r3, #1
 80009cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80009ce:	2350      	movs	r3, #80	; 0x50
 80009d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009d6:	2302      	movs	r3, #2
 80009d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009da:	2302      	movs	r3, #2
 80009dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80009de:	2300      	movs	r3, #0
 80009e0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	4618      	mov	r0, r3
 80009ec:	f00b fd42 	bl	800c474 <HAL_RCC_OscConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009f6:	f000 ffe3 	bl	80019c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fa:	231f      	movs	r3, #31
 80009fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fe:	2303      	movs	r3, #3
 8000a00:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a12:	463b      	mov	r3, r7
 8000a14:	2104      	movs	r1, #4
 8000a16:	4618      	mov	r0, r3
 8000a18:	f00c fc08 	bl	800d22c <HAL_RCC_ClockConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a22:	f000 ffcd 	bl	80019c0 <Error_Handler>
  }
}
 8000a26:	bf00      	nop
 8000a28:	3778      	adds	r7, #120	; 0x78
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b0b8      	sub	sp, #224	; 0xe0
 8000a32:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a34:	463b      	mov	r3, r7
 8000a36:	22e0      	movs	r2, #224	; 0xe0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f028 fe5c 	bl	80296f8 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_DSI;
 8000a40:	f04f 0200 	mov.w	r2, #0
 8000a44:	f04f 0306 	mov.w	r3, #6
 8000a48:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_PLL3;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 8000a52:	2300      	movs	r3, #0
 8000a54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLL3.PLL3M = 4;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLL3.PLL3N = 125;
 8000a60:	237d      	movs	r3, #125	; 0x7d
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLL3.PLL3P = 8;
 8000a64:	2308      	movs	r3, #8
 8000a66:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.PLL3.PLL3Q = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.PLL3.PLL3R = 24;
 8000a6c:	2318      	movs	r3, #24
 8000a6e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLL3.PLL3FRACN = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVP|RCC_PLL3_DIVR;
 8000a78:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4618      	mov	r0, r3
 8000a82:	f00c ffe1 	bl	800da48 <HAL_RCCEx_PeriphCLKConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <PeriphCommonClock_Config+0x62>
  {
    Error_Handler();
 8000a8c:	f000 ff98 	bl	80019c0 <Error_Handler>
  }
}
 8000a90:	bf00      	nop
 8000a92:	37e0      	adds	r7, #224	; 0xe0
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a9c:	f00b fcda 	bl	800c454 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f00b fc77 	bl	800c394 <HAL_PWREx_ConfigSupply>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000aac:	f000 ff88 	bl	80019c0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <MX_CRC_Init+0x3c>)
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <MX_CRC_Init+0x40>)
 8000abc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_CRC_Init+0x3c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <MX_CRC_Init+0x3c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_CRC_Init+0x3c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <MX_CRC_Init+0x3c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_CRC_Init+0x3c>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000adc:	4804      	ldr	r0, [pc, #16]	; (8000af0 <MX_CRC_Init+0x3c>)
 8000ade:	f007 f97d 	bl	8007ddc <HAL_CRC_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000ae8:	f000 ff6a 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20152db4 	.word	0x20152db4
 8000af4:	40023000 	.word	0x40023000

08000af8 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_DCACHE1_Init+0x34>)
 8000afe:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <MX_DCACHE1_Init+0x38>)
 8000b00:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_INCR;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_DCACHE1_Init+0x34>)
 8000b04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000b08:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000b0a:	4808      	ldr	r0, [pc, #32]	; (8000b2c <MX_DCACHE1_Init+0x34>)
 8000b0c:	f007 fa58 	bl	8007fc0 <HAL_DCACHE_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_DCACHE1_Init+0x22>
  {
    Error_Handler();
 8000b16:	f000 ff53 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */
  HAL_DCACHE_Enable(&hdcache1);
 8000b1a:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_DCACHE1_Init+0x34>)
 8000b1c:	f007 faa2 	bl	8008064 <HAL_DCACHE_Enable>
  HAL_DCACHE_Invalidate(&hdcache1);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <MX_DCACHE1_Init+0x34>)
 8000b22:	f007 fac6 	bl	80080b2 <HAL_DCACHE_Invalidate>
  /* USER CODE END DCACHE1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20152dd8 	.word	0x20152dd8
 8000b30:	40031400 	.word	0x40031400

08000b34 <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_DCACHE2_Init+0x34>)
 8000b3a:	4a0c      	ldr	r2, [pc, #48]	; (8000b6c <MX_DCACHE2_Init+0x38>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_INCR;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <MX_DCACHE2_Init+0x34>)
 8000b40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000b44:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 8000b46:	4808      	ldr	r0, [pc, #32]	; (8000b68 <MX_DCACHE2_Init+0x34>)
 8000b48:	f007 fa3a 	bl	8007fc0 <HAL_DCACHE_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_DCACHE2_Init+0x22>
  {
    Error_Handler();
 8000b52:	f000 ff35 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */
  HAL_DCACHE_Enable(&hdcache2);
 8000b56:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_DCACHE2_Init+0x34>)
 8000b58:	f007 fa84 	bl	8008064 <HAL_DCACHE_Enable>
  HAL_DCACHE_Invalidate(&hdcache2);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <MX_DCACHE2_Init+0x34>)
 8000b5e:	f007 faa8 	bl	80080b2 <HAL_DCACHE_Invalidate>
  /* USER CODE END DCACHE2_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20152e04 	.word	0x20152e04
 8000b6c:	40031800 	.word	0x40031800

08000b70 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_DMA2D_Init+0x40>)
 8000b76:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <MX_DMA2D_Init+0x44>)
 8000b78:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <MX_DMA2D_Init+0x40>)
 8000b7c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b80:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_DMA2D_Init+0x40>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_DMA2D_Init+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_DMA2D_Init+0x40>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_DMA2D_Init+0x40>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_DMA2D_Init+0x40>)
 8000b9c:	f007 ff42 	bl	8008a24 <HAL_DMA2D_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_DMA2D_Init+0x3a>
  {
    Error_Handler();
 8000ba6:	f000 ff0b 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20152e30 	.word	0x20152e30
 8000bb4:	4002b000 	.word	0x4002b000

08000bb8 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0e8      	sub	sp, #416	; 0x1a0
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2120      	movs	r1, #32
 8000bc2:	48a1      	ldr	r0, [pc, #644]	; (8000e48 <MX_DSIHOST_DSI_Init+0x290>)
 8000bc4:	f009 fd58 	bl	800a678 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000bc8:	2005      	movs	r0, #5
 8000bca:	f007 f803 	bl	8007bd4 <HAL_Delay>
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	489d      	ldr	r0, [pc, #628]	; (8000e48 <MX_DSIHOST_DSI_Init+0x290>)
 8000bd4:	f009 fd50 	bl	800a678 <HAL_GPIO_WritePin>
  HAL_Delay(11);
 8000bd8:	200b      	movs	r0, #11
 8000bda:	f006 fffb 	bl	8007bd4 <HAL_Delay>
  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000bde:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
 8000bee:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000bf0:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000bf4:	2224      	movs	r2, #36	; 0x24
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f028 fd7d 	bl	80296f8 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000bfe:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
 8000c0e:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000c10:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000c14:	226c      	movs	r2, #108	; 0x6c
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f028 fd6d 	bl	80296f8 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000c1e:	4b8b      	ldr	r3, [pc, #556]	; (8000e4c <MX_DSIHOST_DSI_Init+0x294>)
 8000c20:	4a8b      	ldr	r2, [pc, #556]	; (8000e50 <MX_DSIHOST_DSI_Init+0x298>)
 8000c22:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000c24:	4b89      	ldr	r3, [pc, #548]	; (8000e4c <MX_DSIHOST_DSI_Init+0x294>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000c2a:	4b88      	ldr	r3, [pc, #544]	; (8000e4c <MX_DSIHOST_DSI_Init+0x294>)
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000c30:	4b86      	ldr	r3, [pc, #536]	; (8000e4c <MX_DSIHOST_DSI_Init+0x294>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 8000c36:	4b85      	ldr	r3, [pc, #532]	; (8000e4c <MX_DSIHOST_DSI_Init+0x294>)
 8000c38:	2208      	movs	r2, #8
 8000c3a:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 8000c3c:	4b83      	ldr	r3, [pc, #524]	; (8000e4c <MX_DSIHOST_DSI_Init+0x294>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 8000c42:	237d      	movs	r3, #125	; 0x7d
 8000c44:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 8000c54:	2301      	movs	r3, #1
 8000c56:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000c66:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4877      	ldr	r0, [pc, #476]	; (8000e4c <MX_DSIHOST_DSI_Init+0x294>)
 8000c6e:	f008 f99b 	bl	8008fa8 <HAL_DSI_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_DSIHOST_DSI_Init+0xc4>
  {
    Error_Handler();
 8000c78:	f000 fea2 	bl	80019c0 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  HostTimeouts.LowPowerReadTimeout = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  HostTimeouts.BTATimeout = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000cb2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4864      	ldr	r0, [pc, #400]	; (8000e4c <MX_DSIHOST_DSI_Init+0x294>)
 8000cba:	f008 fe06 	bl	80098ca <HAL_DSI_ConfigHostTimeouts>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000cc4:	f000 fe7c 	bl	80019c0 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 11;
 8000cc8:	230b      	movs	r3, #11
 8000cca:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  PhyTimings.ClockLaneLP2HSTime = 40;
 8000cce:	2328      	movs	r3, #40	; 0x28
 8000cd0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  PhyTimings.DataLaneHS2LPTime = 12;
 8000cd4:	230c      	movs	r3, #12
 8000cd6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  PhyTimings.DataLaneLP2HSTime = 23;
 8000cda:	2317      	movs	r3, #23
 8000cdc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  PhyTimings.DataLaneMaxReadTime = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  PhyTimings.StopWaitTime = 7;
 8000ce6:	2307      	movs	r3, #7
 8000ce8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000cec:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4856      	ldr	r0, [pc, #344]	; (8000e4c <MX_DSIHOST_DSI_Init+0x294>)
 8000cf4:	f008 fd53 	bl	800979e <HAL_DSI_ConfigPhyTimer>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_DSIHOST_DSI_Init+0x14a>
  {
    Error_Handler();
 8000cfe:	f000 fe5f 	bl	80019c0 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000d02:	2104      	movs	r1, #4
 8000d04:	4851      	ldr	r0, [pc, #324]	; (8000e4c <MX_DSIHOST_DSI_Init+0x294>)
 8000d06:	f008 fd22 	bl	800974e <HAL_DSI_ConfigFlowControl>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_DSIHOST_DSI_Init+0x15c>
  {
    Error_Handler();
 8000d10:	f000 fe56 	bl	80019c0 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	484d      	ldr	r0, [pc, #308]	; (8000e4c <MX_DSIHOST_DSI_Init+0x294>)
 8000d18:	f008 fa1a 	bl	8009150 <HAL_DSI_ConfigErrorMonitor>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_DSIHOST_DSI_Init+0x16e>
  {
    Error_Handler();
 8000d22:	f000 fe4d 	bl	80019c0 <Error_Handler>
  }
  VidCfg.ColorCoding = DSI_RGB888;
 8000d26:	2305      	movs	r3, #5
 8000d28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8000d32:	2302      	movs	r3, #2
 8000d34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  VidCfg.PacketSize = 480;
 8000d38:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000d3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  VidCfg.NumberOfChunks = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  VidCfg.NullPacketSize = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  VidCfg.HorizontalSyncActive = 6;
 8000d5e:	2306      	movs	r3, #6
 8000d60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  VidCfg.HorizontalBackPorch = 3;
 8000d64:	2303      	movs	r3, #3
 8000d66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  VidCfg.HorizontalLine = 1452;
 8000d6a:	f240 53ac 	movw	r3, #1452	; 0x5ac
 8000d6e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  VidCfg.VerticalSyncActive = 20;
 8000d72:	2314      	movs	r3, #20
 8000d74:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  VidCfg.VerticalBackPorch = 12;
 8000d78:	230c      	movs	r3, #12
 8000d7a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  VidCfg.VerticalFrontPorch = 200;
 8000d7e:	23c8      	movs	r3, #200	; 0xc8
 8000d80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  VidCfg.VerticalActive = 481;
 8000d84:	f240 13e1 	movw	r3, #481	; 0x1e1
 8000d88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000d8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  VidCfg.LPLargestPacketSize = 64;
 8000d94:	2340      	movs	r3, #64	; 0x40
 8000d96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  VidCfg.LPVACTLargestPacketSize = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000db0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000db4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dbc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dcc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_ENABLE;
 8000dd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dd4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000dd8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	481b      	ldr	r0, [pc, #108]	; (8000e4c <MX_DSIHOST_DSI_Init+0x294>)
 8000de0:	f008 faad 	bl	800933e <HAL_DSI_ConfigVideoMode>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_DSIHOST_DSI_Init+0x236>
  {
    Error_Handler();
 8000dea:	f000 fde9 	bl	80019c0 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000dee:	2100      	movs	r1, #0
 8000df0:	4816      	ldr	r0, [pc, #88]	; (8000e4c <MX_DSIHOST_DSI_Init+0x294>)
 8000df2:	f008 fa79 	bl	80092e8 <HAL_DSI_SetGenericVCID>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_DSIHOST_DSI_Init+0x248>
  {
    Error_Handler();
 8000dfc:	f000 fde0 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  // Start DSI
  if (HAL_DSI_Start(&hdsi) != HAL_OK)
 8000e00:	4812      	ldr	r0, [pc, #72]	; (8000e4c <MX_DSIHOST_DSI_Init+0x294>)
 8000e02:	f008 fe28 	bl	8009a56 <HAL_DSI_Start>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_DSIHOST_DSI_Init+0x258>
  {
    Error_Handler();
 8000e0c:	f000 fdd8 	bl	80019c0 <Error_Handler>
  }

  /* Switch to DSI PHY PLL clock */
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000e10:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000e14:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	f04f 0304 	mov.w	r3, #4
 8000e20:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.DsiClockSelection    = RCC_DSICLKSOURCE_DSIPHY;
 8000e24:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000e28:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000e2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e30:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000e34:	463b      	mov	r3, r7
 8000e36:	4618      	mov	r0, r3
 8000e38:	f00c fe06 	bl	800da48 <HAL_RCCEx_PeriphCLKConfig>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	42022000 	.word	0x42022000
 8000e4c:	20152e90 	.word	0x20152e90
 8000e50:	40016c00 	.word	0x40016c00

08000e54 <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_GPU2D_Init+0x20>)
 8000e5a:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <MX_GPU2D_Init+0x24>)
 8000e5c:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_GPU2D_Init+0x20>)
 8000e60:	f009 fcc7 	bl	800a7f2 <HAL_GPU2D_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 8000e6a:	f000 fda9 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20152eb4 	.word	0x20152eb4
 8000e78:	4002f000 	.word	0x4002f000

08000e7c <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN HSPI1_Init 2 */
#endif
  BSP_HSPI_RAM_Cfg_t sHSPI_Init;

  sHSPI_Init.LatencyType      = BSP_HSPI_RAM_FIXED_LATENCY;
 8000e82:	2320      	movs	r3, #32
 8000e84:	703b      	strb	r3, [r7, #0]
  sHSPI_Init.BurstType        = BSP_HSPI_RAM_LINEAR_BURST;
 8000e86:	2300      	movs	r3, #0
 8000e88:	70fb      	strb	r3, [r7, #3]
  sHSPI_Init.BurstLength      = BSP_HSPI_RAM_BURST_16_BYTES;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	713b      	strb	r3, [r7, #4]
  sHSPI_Init.ReadLatencyCode  = BSP_HSPI_RAM_READ_LATENCY_6;
 8000e8e:	230c      	movs	r3, #12
 8000e90:	707b      	strb	r3, [r7, #1]
  sHSPI_Init.WriteLatencyCode = BSP_HSPI_RAM_WRITE_LATENCY_6;
 8000e92:	23c0      	movs	r3, #192	; 0xc0
 8000e94:	70bb      	strb	r3, [r7, #2]
  sHSPI_Init.IOMode           = BSP_HSPI_RAM_IO_X16_MODE;
 8000e96:	2340      	movs	r3, #64	; 0x40
 8000e98:	717b      	strb	r3, [r7, #5]

  if (BSP_HSPI_RAM_Init(0, &sHSPI_Init) != BSP_ERROR_NONE)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f004 fdda 	bl	8005a58 <BSP_HSPI_RAM_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00a      	beq.n	8000ec0 <MX_HSPI1_Init+0x44>
  {
    printf("\r\nHSPI RAM Initialization : Failed");
 8000eaa:	4810      	ldr	r0, [pc, #64]	; (8000eec <MX_HSPI1_Init+0x70>)
 8000eac:	f028 fffc 	bl	8029ea8 <iprintf>
    printf("\r\nHSPI RAM Test Aborted");
 8000eb0:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <MX_HSPI1_Init+0x74>)
 8000eb2:	f028 fff9 	bl	8029ea8 <iprintf>
    printf("\r\n");
 8000eb6:	480f      	ldr	r0, [pc, #60]	; (8000ef4 <MX_HSPI1_Init+0x78>)
 8000eb8:	f029 f87c 	bl	8029fb4 <puts>
    Error_Handler();
 8000ebc:	f000 fd80 	bl	80019c0 <Error_Handler>
  }

  if(BSP_HSPI_RAM_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f004 fecd 	bl	8005c60 <BSP_HSPI_RAM_EnableMemoryMappedMode>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d00a      	beq.n	8000ee2 <MX_HSPI1_Init+0x66>
  {
    printf("\r\nHSPI RAM Mem-Mapped Cfg : Failed");
 8000ecc:	480a      	ldr	r0, [pc, #40]	; (8000ef8 <MX_HSPI1_Init+0x7c>)
 8000ece:	f028 ffeb 	bl	8029ea8 <iprintf>
    printf("\r\nHSPI RAM Test Aborted");
 8000ed2:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <MX_HSPI1_Init+0x74>)
 8000ed4:	f028 ffe8 	bl	8029ea8 <iprintf>
    printf("\r\n");
 8000ed8:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <MX_HSPI1_Init+0x78>)
 8000eda:	f029 f86b 	bl	8029fb4 <puts>
    Error_Handler();
 8000ede:	f000 fd6f 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE END HSPI1_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	0802a994 	.word	0x0802a994
 8000ef0:	0802a9b8 	.word	0x0802a9b8
 8000ef4:	0802a9d0 	.word	0x0802a9d0
 8000ef8:	0802a9d4 	.word	0x0802a9d4

08000efc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f02:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <MX_I2C3_Init+0x78>)
 8000f04:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <MX_I2C3_Init+0x7c>)
 8000f0a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f38:	f009 fce1 	bl	800a8fe <HAL_I2C_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f42:	f000 fd3d 	bl	80019c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f46:	2100      	movs	r1, #0
 8000f48:	4809      	ldr	r0, [pc, #36]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f4a:	f00a fd03 	bl	800b954 <HAL_I2CEx_ConfigAnalogFilter>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f54:	f000 fd34 	bl	80019c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_I2C3_Init+0x74>)
 8000f5c:	f00a fd45 	bl	800b9ea <HAL_I2CEx_ConfigDigitalFilter>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f66:	f000 fd2b 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20152ec0 	.word	0x20152ec0
 8000f74:	46002800 	.word	0x46002800
 8000f78:	30909dec 	.word	0x30909dec

08000f7c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000f80:	2000      	movs	r0, #0
 8000f82:	f00a fd7f 	bl	800ba84 <HAL_ICACHE_ConfigAssociativityMode>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000f8c:	f000 fd18 	bl	80019c0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f90:	f00a fd98 	bl	800bac4 <HAL_ICACHE_Enable>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000f9a:	f000 fd11 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000fa4:	b5b0      	push	{r4, r5, r7, lr}
 8000fa6:	b0e4      	sub	sp, #400	; 0x190
 8000fa8:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000faa:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000fae:	2234      	movs	r2, #52	; 0x34
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f028 fba0 	bl	80296f8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000fb8:	4bc1      	ldr	r3, [pc, #772]	; (80012c0 <MX_LTDC_Init+0x31c>)
 8000fba:	4ac2      	ldr	r2, [pc, #776]	; (80012c4 <MX_LTDC_Init+0x320>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000fbe:	4bc0      	ldr	r3, [pc, #768]	; (80012c0 <MX_LTDC_Init+0x31c>)
 8000fc0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000fc4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000fc6:	4bbe      	ldr	r3, [pc, #760]	; (80012c0 <MX_LTDC_Init+0x31c>)
 8000fc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fcc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fce:	4bbc      	ldr	r3, [pc, #752]	; (80012c0 <MX_LTDC_Init+0x31c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fd4:	4bba      	ldr	r3, [pc, #744]	; (80012c0 <MX_LTDC_Init+0x31c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8000fda:	4bb9      	ldr	r3, [pc, #740]	; (80012c0 <MX_LTDC_Init+0x31c>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 19;
 8000fe0:	4bb7      	ldr	r3, [pc, #732]	; (80012c0 <MX_LTDC_Init+0x31c>)
 8000fe2:	2213      	movs	r2, #19
 8000fe4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 2;
 8000fe6:	4bb6      	ldr	r3, [pc, #728]	; (80012c0 <MX_LTDC_Init+0x31c>)
 8000fe8:	2202      	movs	r2, #2
 8000fea:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 31;
 8000fec:	4bb4      	ldr	r3, [pc, #720]	; (80012c0 <MX_LTDC_Init+0x31c>)
 8000fee:	221f      	movs	r2, #31
 8000ff0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 482;
 8000ff2:	4bb3      	ldr	r3, [pc, #716]	; (80012c0 <MX_LTDC_Init+0x31c>)
 8000ff4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 512;
 8000ffa:	4bb1      	ldr	r3, [pc, #708]	; (80012c0 <MX_LTDC_Init+0x31c>)
 8000ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 483;
 8001002:	4baf      	ldr	r3, [pc, #700]	; (80012c0 <MX_LTDC_Init+0x31c>)
 8001004:	f240 12e3 	movw	r2, #483	; 0x1e3
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 712;
 800100a:	4bad      	ldr	r3, [pc, #692]	; (80012c0 <MX_LTDC_Init+0x31c>)
 800100c:	f44f 7232 	mov.w	r2, #712	; 0x2c8
 8001010:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001012:	4bab      	ldr	r3, [pc, #684]	; (80012c0 <MX_LTDC_Init+0x31c>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800101a:	4ba9      	ldr	r3, [pc, #676]	; (80012c0 <MX_LTDC_Init+0x31c>)
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001022:	4ba7      	ldr	r3, [pc, #668]	; (80012c0 <MX_LTDC_Init+0x31c>)
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800102a:	48a5      	ldr	r0, [pc, #660]	; (80012c0 <MX_LTDC_Init+0x31c>)
 800102c:	f00a fd5a 	bl	800bae4 <HAL_LTDC_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_LTDC_Init+0x96>
  {
    Error_Handler();
 8001036:	f000 fcc3 	bl	80019c0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  pLayerCfg.WindowX1 = 480;
 8001040:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001044:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  pLayerCfg.WindowY0 = 1;
 8001048:	2301      	movs	r3, #1
 800104a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  pLayerCfg.WindowY1 = 481;
 800104e:	f240 13e1 	movw	r3, #481	; 0x1e1
 8001052:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001056:	2301      	movs	r3, #1
 8001058:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  pLayerCfg.Alpha = 255;
 800105c:	23ff      	movs	r3, #255	; 0xff
 800105e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  pLayerCfg.Alpha0 = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001068:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800106c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001070:	2307      	movs	r3, #7
 8001072:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  pLayerCfg.FBStartAdress = 0x0;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  pLayerCfg.ImageWidth = 480;
 800107c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001080:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  pLayerCfg.ImageHeight = 480;
 8001084:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001088:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  pLayerCfg.Backcolor.Blue = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
  pLayerCfg.Backcolor.Green = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
  pLayerCfg.Backcolor.Red = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800109e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80010a2:	2200      	movs	r2, #0
 80010a4:	4619      	mov	r1, r3
 80010a6:	4886      	ldr	r0, [pc, #536]	; (80012c0 <MX_LTDC_Init+0x31c>)
 80010a8:	f00a fea4 	bl	800bdf4 <HAL_LTDC_ConfigLayer>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_LTDC_Init+0x112>
  {
    Error_Handler();
 80010b2:	f000 fc85 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  HAL_Delay(10);
 80010b6:	200a      	movs	r0, #10
 80010b8:	f006 fd8c 	bl	8007bd4 <HAL_Delay>
  HAL_DSI_EnterULPM(&hdsi);
 80010bc:	4882      	ldr	r0, [pc, #520]	; (80012c8 <MX_LTDC_Init+0x324>)
 80010be:	f008 fdbf 	bl	8009c40 <HAL_DSI_EnterULPM>
  HAL_Delay(10);
 80010c2:	200a      	movs	r0, #10
 80010c4:	f006 fd86 	bl	8007bd4 <HAL_Delay>

  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2120      	movs	r1, #32
 80010cc:	487f      	ldr	r0, [pc, #508]	; (80012cc <MX_LTDC_Init+0x328>)
 80010ce:	f009 fad3 	bl	800a678 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80010d2:	200a      	movs	r0, #10
 80010d4:	f006 fd7e 	bl	8007bd4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2120      	movs	r1, #32
 80010dc:	487b      	ldr	r0, [pc, #492]	; (80012cc <MX_LTDC_Init+0x328>)
 80010de:	f009 facb 	bl	800a678 <HAL_GPIO_WritePin>
  HAL_Delay(150);
 80010e2:	2096      	movs	r0, #150	; 0x96
 80010e4:	f006 fd76 	bl	8007bd4 <HAL_Delay>

  HAL_DSI_ExitULPM(&hdsi);
 80010e8:	4877      	ldr	r0, [pc, #476]	; (80012c8 <MX_LTDC_Init+0x324>)
 80010ea:	f008 fec1 	bl	8009e70 <HAL_DSI_ExitULPM>
  HAL_Delay(10);
 80010ee:	200a      	movs	r0, #10
 80010f0:	f006 fd70 	bl	8007bd4 <HAL_Delay>

  // CMD Mode
  uint8_t InitParam1[3] = {0xFF ,0x83 , 0x79};
 80010f4:	4a76      	ldr	r2, [pc, #472]	; (80012d0 <MX_LTDC_Init+0x32c>)
 80010f6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80010fa:	6812      	ldr	r2, [r2, #0]
 80010fc:	4611      	mov	r1, r2
 80010fe:	8019      	strh	r1, [r3, #0]
 8001100:	3302      	adds	r3, #2
 8001102:	0c12      	lsrs	r2, r2, #16
 8001104:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB9, InitParam1) != HAL_OK)
 8001106:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	23b9      	movs	r3, #185	; 0xb9
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2303      	movs	r3, #3
 8001112:	2239      	movs	r2, #57	; 0x39
 8001114:	2100      	movs	r1, #0
 8001116:	486c      	ldr	r0, [pc, #432]	; (80012c8 <MX_LTDC_Init+0x324>)
 8001118:	f008 fcfb 	bl	8009b12 <HAL_DSI_LongWrite>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_LTDC_Init+0x182>
  {
    Error_Handler();
 8001122:	f000 fc4d 	bl	80019c0 <Error_Handler>
  }

  // SETPOWER
  uint8_t InitParam3[16] = {0x44,0x1C,0x1C,0x37,0x57,0x90,0xD0,0xE2,0x58,0x80,0x38,0x38,0xF8,0x33,0x34,0x42};
 8001126:	4b6b      	ldr	r3, [pc, #428]	; (80012d4 <MX_LTDC_Init+0x330>)
 8001128:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800112c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800112e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 16, 0xB1, InitParam3) != HAL_OK)
 8001132:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	23b1      	movs	r3, #177	; 0xb1
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2310      	movs	r3, #16
 800113e:	2239      	movs	r2, #57	; 0x39
 8001140:	2100      	movs	r1, #0
 8001142:	4861      	ldr	r0, [pc, #388]	; (80012c8 <MX_LTDC_Init+0x324>)
 8001144:	f008 fce5 	bl	8009b12 <HAL_DSI_LongWrite>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_LTDC_Init+0x1ae>
  {
    Error_Handler();
 800114e:	f000 fc37 	bl	80019c0 <Error_Handler>
  }

  // SETDISP
  uint8_t InitParam4[9] = {0x80,0x14,0x0C,0x30,0x20,0x50,0x11,0x42,0x1D};
 8001152:	4a61      	ldr	r2, [pc, #388]	; (80012d8 <MX_LTDC_Init+0x334>)
 8001154:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001158:	ca07      	ldmia	r2, {r0, r1, r2}
 800115a:	c303      	stmia	r3!, {r0, r1}
 800115c:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xB2, InitParam4) != HAL_OK)
 800115e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	23b2      	movs	r3, #178	; 0xb2
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2309      	movs	r3, #9
 800116a:	2239      	movs	r2, #57	; 0x39
 800116c:	2100      	movs	r1, #0
 800116e:	4856      	ldr	r0, [pc, #344]	; (80012c8 <MX_LTDC_Init+0x324>)
 8001170:	f008 fccf 	bl	8009b12 <HAL_DSI_LongWrite>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_LTDC_Init+0x1da>
  {
    Error_Handler();
 800117a:	f000 fc21 	bl	80019c0 <Error_Handler>
  }

  // Set display cycle timing
  uint8_t InitParam5[10] = {0x01,0xAA,0x01,0xAF,0x01,0xAF,0x10,0xEA,0x1C,0xEA};
 800117e:	4a57      	ldr	r2, [pc, #348]	; (80012dc <MX_LTDC_Init+0x338>)
 8001180:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001184:	ca07      	ldmia	r2, {r0, r1, r2}
 8001186:	c303      	stmia	r3!, {r0, r1}
 8001188:	801a      	strh	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xB4, InitParam5) != HAL_OK)
 800118a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	23b4      	movs	r3, #180	; 0xb4
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	230a      	movs	r3, #10
 8001196:	2239      	movs	r2, #57	; 0x39
 8001198:	2100      	movs	r1, #0
 800119a:	484b      	ldr	r0, [pc, #300]	; (80012c8 <MX_LTDC_Init+0x324>)
 800119c:	f008 fcb9 	bl	8009b12 <HAL_DSI_LongWrite>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_LTDC_Init+0x206>
  {
    Error_Handler();
 80011a6:	f000 fc0b 	bl	80019c0 <Error_Handler>
  }

  // SETVCOM
  uint8_t InitParam60[4] = {00,00,00,0xC0};
 80011aa:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80011ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xC7, InitParam60) != HAL_OK)
 80011b2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	23c7      	movs	r3, #199	; 0xc7
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2304      	movs	r3, #4
 80011be:	2239      	movs	r2, #57	; 0x39
 80011c0:	2100      	movs	r1, #0
 80011c2:	4841      	ldr	r0, [pc, #260]	; (80012c8 <MX_LTDC_Init+0x324>)
 80011c4:	f008 fca5 	bl	8009b12 <HAL_DSI_LongWrite>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_LTDC_Init+0x22e>
  {
    Error_Handler();
 80011ce:	f000 fbf7 	bl	80019c0 <Error_Handler>
  }

  // Set Panel Related Registers
  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xCC, 0x02) != HAL_OK)
 80011d2:	2302      	movs	r3, #2
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	23cc      	movs	r3, #204	; 0xcc
 80011d8:	2215      	movs	r2, #21
 80011da:	2100      	movs	r1, #0
 80011dc:	483a      	ldr	r0, [pc, #232]	; (80012c8 <MX_LTDC_Init+0x324>)
 80011de:	f008 fc76 	bl	8009ace <HAL_DSI_ShortWrite>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_LTDC_Init+0x248>
  {
    Error_Handler();
 80011e8:	f000 fbea 	bl	80019c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xD2, 0x77) != HAL_OK)
 80011ec:	2377      	movs	r3, #119	; 0x77
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	23d2      	movs	r3, #210	; 0xd2
 80011f2:	2215      	movs	r2, #21
 80011f4:	2100      	movs	r1, #0
 80011f6:	4834      	ldr	r0, [pc, #208]	; (80012c8 <MX_LTDC_Init+0x324>)
 80011f8:	f008 fc69 	bl	8009ace <HAL_DSI_ShortWrite>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_LTDC_Init+0x262>
  {
    Error_Handler();
 8001202:	f000 fbdd 	bl	80019c0 <Error_Handler>
  }

  uint8_t InitParam50[37] = {
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <MX_LTDC_Init+0x33c>)
 8001208:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 800120c:	461d      	mov	r5, r3
 800120e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001216:	e895 0003 	ldmia.w	r5, {r0, r1}
 800121a:	6020      	str	r0, [r4, #0]
 800121c:	3404      	adds	r4, #4
 800121e:	7021      	strb	r1, [r4, #0]
    0x00,0x07,0x00,0x00,0x00,0x08,0x08,0x32,0x10,0x01,0x00,0x01,0x03,0x72,0x03,0x72,0x00,0x08,0x00,
    0x08,0x33,0x33,0x05,0x05,0x37,0x05,0x05,0x37,0x0A,0x00,0x00,0x00,0x0A,0x00,0x01,0x00,0x0E
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 37, 0xD3, InitParam50) != HAL_OK)
 8001220:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	23d3      	movs	r3, #211	; 0xd3
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2325      	movs	r3, #37	; 0x25
 800122c:	2239      	movs	r2, #57	; 0x39
 800122e:	2100      	movs	r1, #0
 8001230:	4825      	ldr	r0, [pc, #148]	; (80012c8 <MX_LTDC_Init+0x324>)
 8001232:	f008 fc6e 	bl	8009b12 <HAL_DSI_LongWrite>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_LTDC_Init+0x29c>
  {
    Error_Handler();
 800123c:	f000 fbc0 	bl	80019c0 <Error_Handler>
  }

  uint8_t InitParam51[34] = {
 8001240:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <MX_LTDC_Init+0x340>)
 8001242:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8001246:	461d      	mov	r5, r3
 8001248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800124c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	8023      	strh	r3, [r4, #0]
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x19,0x19,0x18,0x18,0x18,0x18,0x19,0x19,0x01,0x00,
    0x03,0x02,0x05,0x04,0x07,0x06,0x23,0x22,0x21,0x20,0x18,0x18,0x18,0x18,0x00,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 34, 0xD5, InitParam51) != HAL_OK)
 8001254:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	23d5      	movs	r3, #213	; 0xd5
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2322      	movs	r3, #34	; 0x22
 8001260:	2239      	movs	r2, #57	; 0x39
 8001262:	2100      	movs	r1, #0
 8001264:	4818      	ldr	r0, [pc, #96]	; (80012c8 <MX_LTDC_Init+0x324>)
 8001266:	f008 fc54 	bl	8009b12 <HAL_DSI_LongWrite>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_LTDC_Init+0x2d0>
  {
    Error_Handler();
 8001270:	f000 fba6 	bl	80019c0 <Error_Handler>
  }

  uint8_t InitParam52[35] = {
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <MX_LTDC_Init+0x344>)
 8001276:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 800127a:	461d      	mov	r5, r3
 800127c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800127e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001284:	682b      	ldr	r3, [r5, #0]
 8001286:	7023      	strb	r3, [r4, #0]
 8001288:	f107 03d5 	add.w	r3, r7, #213	; 0xd5
 800128c:	2200      	movs	r2, #0
 800128e:	801a      	strh	r2, [r3, #0]
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x19,0x19,0x18,0x18,0x19,0x19,0x18,0x18,0x06,0x07,
    0x04,0x05,0x02,0x03,0x00,0x01,0x20,0x21,0x22,0x23,0x18,0x18,0x18,0x18
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 35, 0xD6, InitParam52) != HAL_OK)
 8001290:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	23d6      	movs	r3, #214	; 0xd6
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2323      	movs	r3, #35	; 0x23
 800129c:	2239      	movs	r2, #57	; 0x39
 800129e:	2100      	movs	r1, #0
 80012a0:	4809      	ldr	r0, [pc, #36]	; (80012c8 <MX_LTDC_Init+0x324>)
 80012a2:	f008 fc36 	bl	8009b12 <HAL_DSI_LongWrite>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_LTDC_Init+0x30c>
  {
    Error_Handler();
 80012ac:	f000 fb88 	bl	80019c0 <Error_Handler>
  }

  // SET GAMMA
  uint8_t InitParam8[42] = {
 80012b0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80012b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80012b8:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <MX_LTDC_Init+0x348>)
 80012ba:	461c      	mov	r4, r3
 80012bc:	4615      	mov	r5, r2
 80012be:	e017      	b.n	80012f0 <MX_LTDC_Init+0x34c>
 80012c0:	20152f14 	.word	0x20152f14
 80012c4:	40016800 	.word	0x40016800
 80012c8:	20152e90 	.word	0x20152e90
 80012cc:	42020c00 	.word	0x42020c00
 80012d0:	0802a9f8 	.word	0x0802a9f8
 80012d4:	0802a9fc 	.word	0x0802a9fc
 80012d8:	0802aa0c 	.word	0x0802aa0c
 80012dc:	0802aa18 	.word	0x0802aa18
 80012e0:	0802aa24 	.word	0x0802aa24
 80012e4:	0802aa4c 	.word	0x0802aa4c
 80012e8:	0802aa70 	.word	0x0802aa70
 80012ec:	0802aa94 	.word	0x0802aa94
 80012f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012fc:	c403      	stmia	r4!, {r0, r1}
 80012fe:	8022      	strh	r2, [r4, #0]
    0x00,0x16,0x1B,0x30,0x36,0x3F,0x24,0x40,0x09,0x0D,0x0F,0x18,0x0E,0x11,0x12,0x11,0x14,0x07,
    0x12,0x13,0x18,0x00,0x17,0x1C,0x30,0x36,0x3F,0x24,0x40,0x09,0x0C,0x0F,0x18,0x0E,0x11,0x14,
    0x11,0x12,0x07,0x12,0x14,0x18
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xE0, InitParam8) != HAL_OK)
 8001300:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	23e0      	movs	r3, #224	; 0xe0
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	232a      	movs	r3, #42	; 0x2a
 800130c:	2239      	movs	r2, #57	; 0x39
 800130e:	2100      	movs	r1, #0
 8001310:	4865      	ldr	r0, [pc, #404]	; (80014a8 <MX_LTDC_Init+0x504>)
 8001312:	f008 fbfe 	bl	8009b12 <HAL_DSI_LongWrite>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_LTDC_Init+0x37c>
  {
    Error_Handler();
 800131c:	f000 fb50 	bl	80019c0 <Error_Handler>
  }

  uint8_t InitParam44[3] = {0x2C,0x2C,00};
 8001320:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001328:	4a60      	ldr	r2, [pc, #384]	; (80014ac <MX_LTDC_Init+0x508>)
 800132a:	6812      	ldr	r2, [r2, #0]
 800132c:	4611      	mov	r1, r2
 800132e:	8019      	strh	r1, [r3, #0]
 8001330:	3302      	adds	r3, #2
 8001332:	0c12      	lsrs	r2, r2, #16
 8001334:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, InitParam44) != HAL_OK)
 8001336:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	23b6      	movs	r3, #182	; 0xb6
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2303      	movs	r3, #3
 8001342:	2239      	movs	r2, #57	; 0x39
 8001344:	2100      	movs	r1, #0
 8001346:	4858      	ldr	r0, [pc, #352]	; (80014a8 <MX_LTDC_Init+0x504>)
 8001348:	f008 fbe3 	bl	8009b12 <HAL_DSI_LongWrite>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_LTDC_Init+0x3b2>
  {
    Error_Handler();
 8001352:	f000 fb35 	bl	80019c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x00) != HAL_OK)
 8001356:	2300      	movs	r3, #0
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	23bd      	movs	r3, #189	; 0xbd
 800135c:	2215      	movs	r2, #21
 800135e:	2100      	movs	r1, #0
 8001360:	4851      	ldr	r0, [pc, #324]	; (80014a8 <MX_LTDC_Init+0x504>)
 8001362:	f008 fbb4 	bl	8009ace <HAL_DSI_ShortWrite>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_LTDC_Init+0x3cc>
  {
    Error_Handler();
 800136c:	f000 fb28 	bl	80019c0 <Error_Handler>
  }

  uint8_t InitParam14[] = {
 8001370:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001378:	4a4d      	ldr	r2, [pc, #308]	; (80014b0 <MX_LTDC_Init+0x50c>)
 800137a:	461c      	mov	r4, r3
 800137c:	4615      	mov	r5, r2
 800137e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001386:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800138a:	c403      	stmia	r4!, {r0, r1}
 800138c:	8022      	strh	r2, [r4, #0]
 800138e:	3402      	adds	r4, #2
 8001390:	0c13      	lsrs	r3, r2, #16
 8001392:	7023      	strb	r3, [r4, #0]
    0x01,0x00,0x07,0x0F,0x16,0x1F,0x27,0x30,0x38,0x40,0x47,0x4E,0x56,0x5D,0x65,0x6D,0x74,0x7D,
    0x84,0x8A,0x90,0x99,0xA1,0xA9,0xB0,0xB6,0xBD,0xC4,0xCD,0xD4,0xDD,0xE5,0xEC,0xF3,0x36,0x07,
    0x1C,0xC0,0x1B,0x01,0xF1,0x34,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam14) != HAL_OK)
 8001394:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	23c1      	movs	r3, #193	; 0xc1
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	232a      	movs	r3, #42	; 0x2a
 80013a0:	2239      	movs	r2, #57	; 0x39
 80013a2:	2100      	movs	r1, #0
 80013a4:	4840      	ldr	r0, [pc, #256]	; (80014a8 <MX_LTDC_Init+0x504>)
 80013a6:	f008 fbb4 	bl	8009b12 <HAL_DSI_LongWrite>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_LTDC_Init+0x410>
  {
    Error_Handler();
 80013b0:	f000 fb06 	bl	80019c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x01) != HAL_OK)
 80013b4:	2301      	movs	r3, #1
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	23bd      	movs	r3, #189	; 0xbd
 80013ba:	2215      	movs	r2, #21
 80013bc:	2100      	movs	r1, #0
 80013be:	483a      	ldr	r0, [pc, #232]	; (80014a8 <MX_LTDC_Init+0x504>)
 80013c0:	f008 fb85 	bl	8009ace <HAL_DSI_ShortWrite>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_LTDC_Init+0x42a>
  {
    Error_Handler();
 80013ca:	f000 faf9 	bl	80019c0 <Error_Handler>
  }

  uint8_t InitParam15[] = {
 80013ce:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80013d2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80013d6:	4a37      	ldr	r2, [pc, #220]	; (80014b4 <MX_LTDC_Init+0x510>)
 80013d8:	461c      	mov	r4, r3
 80013da:	4615      	mov	r5, r2
 80013dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013e8:	c403      	stmia	r4!, {r0, r1}
 80013ea:	8022      	strh	r2, [r4, #0]
    0x00,0x08,0x0F,0x16,0x1F,0x28,0x31,0x39,0x41,0x48,0x51,0x59,0x60,0x68,0x70,0x78,0x7F,0x87,
    0x8D,0x94,0x9C,0xA3,0xAB,0xB3,0xB9,0xC1,0xC8,0xD0,0xD8,0xE0,0xE8,0xEE,0xF5,0x3B,0x1A,0xB6,
    0xA0,0x07,0x45,0xC5,0x37,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam15) != HAL_OK)
 80013ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	23c1      	movs	r3, #193	; 0xc1
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	232a      	movs	r3, #42	; 0x2a
 80013f8:	2239      	movs	r2, #57	; 0x39
 80013fa:	2100      	movs	r1, #0
 80013fc:	482a      	ldr	r0, [pc, #168]	; (80014a8 <MX_LTDC_Init+0x504>)
 80013fe:	f008 fb88 	bl	8009b12 <HAL_DSI_LongWrite>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_LTDC_Init+0x468>
  {
    Error_Handler();
 8001408:	f000 fada 	bl	80019c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x02) != HAL_OK)
 800140c:	2302      	movs	r3, #2
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	23bd      	movs	r3, #189	; 0xbd
 8001412:	2215      	movs	r2, #21
 8001414:	2100      	movs	r1, #0
 8001416:	4824      	ldr	r0, [pc, #144]	; (80014a8 <MX_LTDC_Init+0x504>)
 8001418:	f008 fb59 	bl	8009ace <HAL_DSI_ShortWrite>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_LTDC_Init+0x482>
  {
    Error_Handler();
 8001422:	f000 facd 	bl	80019c0 <Error_Handler>
  }

  uint8_t InitParam20[42] = {
 8001426:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800142a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800142e:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <MX_LTDC_Init+0x514>)
 8001430:	461c      	mov	r4, r3
 8001432:	4615      	mov	r5, r2
 8001434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001440:	c403      	stmia	r4!, {r0, r1}
 8001442:	8022      	strh	r2, [r4, #0]
    0x00,0x09,0x0F,0x18,0x21,0x2A,0x34,0x3C,0x45,0x4C,0x56,0x5E,0x66,0x6E,0x76,0x7E,0x87,0x8E,
    0x95,0x9D,0xA6,0xAF,0xB7,0xBD,0xC5,0xCE,0xD5,0xDF,0xE7,0xEE,0xF4,0xFA,0xFF,0x0C,0x31,0x83,
    0x3C,0x5B,0x56,0x1E,0x5A,0xFF
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam20) != HAL_OK)
 8001444:	463b      	mov	r3, r7
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	23c1      	movs	r3, #193	; 0xc1
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	232a      	movs	r3, #42	; 0x2a
 800144e:	2239      	movs	r2, #57	; 0x39
 8001450:	2100      	movs	r1, #0
 8001452:	4815      	ldr	r0, [pc, #84]	; (80014a8 <MX_LTDC_Init+0x504>)
 8001454:	f008 fb5d 	bl	8009b12 <HAL_DSI_LongWrite>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_LTDC_Init+0x4be>
  {
    Error_Handler();
 800145e:	f000 faaf 	bl	80019c0 <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x00) != HAL_OK)
 8001462:	2300      	movs	r3, #0
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	23bd      	movs	r3, #189	; 0xbd
 8001468:	2215      	movs	r2, #21
 800146a:	2100      	movs	r1, #0
 800146c:	480e      	ldr	r0, [pc, #56]	; (80014a8 <MX_LTDC_Init+0x504>)
 800146e:	f008 fb2e 	bl	8009ace <HAL_DSI_ShortWrite>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_LTDC_Init+0x4d8>
  {
    Error_Handler();
 8001478:	f000 faa2 	bl	80019c0 <Error_Handler>
  }

  // Exit Sleep Mode
  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, DSI_EXIT_SLEEP_MODE, 0x00) != HAL_OK)
 800147c:	2300      	movs	r3, #0
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2311      	movs	r3, #17
 8001482:	2205      	movs	r2, #5
 8001484:	2100      	movs	r1, #0
 8001486:	4808      	ldr	r0, [pc, #32]	; (80014a8 <MX_LTDC_Init+0x504>)
 8001488:	f008 fb21 	bl	8009ace <HAL_DSI_ShortWrite>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_LTDC_Init+0x4f2>
  {
    Error_Handler();
 8001492:	f000 fa95 	bl	80019c0 <Error_Handler>
  }

  HAL_Delay(120);
 8001496:	2078      	movs	r0, #120	; 0x78
 8001498:	f006 fb9c 	bl	8007bd4 <HAL_Delay>
  /* USER CODE END LTDC_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bdb0      	pop	{r4, r5, r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20152e90 	.word	0x20152e90
 80014ac:	0802aac0 	.word	0x0802aac0
 80014b0:	0802aac4 	.word	0x0802aac4
 80014b4:	0802aaf0 	.word	0x0802aaf0
 80014b8:	0802ab1c 	.word	0x0802ab1c

080014bc <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08c      	sub	sp, #48	; 0x30
 80014c0:	af00      	add	r7, sp, #0
  BSP_OSPI_NOR_Info_t sOSPI_NOR_Info;
  BSP_OSPI_NOR_Init_t sOSPI_NOR_Init;

  int32_t status;

  memset(&sOSPI_NOR_Info, 0, sizeof(sOSPI_NOR_Info));
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	2224      	movs	r2, #36	; 0x24
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f028 f914 	bl	80296f8 <memset>
  memset(&sOSPI_NOR_Init, 0, sizeof(sOSPI_NOR_Init));
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2202      	movs	r2, #2
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f028 f90e 	bl	80296f8 <memset>

  sOSPI_NOR_Init.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 80014dc:	2301      	movs	r3, #1
 80014de:	713b      	strb	r3, [r7, #4]
  sOSPI_NOR_Init.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 80014e0:	2301      	movs	r3, #1
 80014e2:	717b      	strb	r3, [r7, #5]

  status = BSP_OSPI_NOR_Init(0, &sOSPI_NOR_Init);
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	4619      	mov	r1, r3
 80014e8:	2000      	movs	r0, #0
 80014ea:	f005 f9eb 	bl	80068c4 <BSP_OSPI_NOR_Init>
 80014ee:	62f8      	str	r0, [r7, #44]	; 0x2c

  if (status != BSP_ERROR_NONE)
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d008      	beq.n	8001508 <MX_OCTOSPI1_Init+0x4c>
  {
    printf("\r\nOSPI NOR Initialization : Failed");
 80014f6:	4811      	ldr	r0, [pc, #68]	; (800153c <MX_OCTOSPI1_Init+0x80>)
 80014f8:	f028 fcd6 	bl	8029ea8 <iprintf>
    printf("\r\nOSPI NOR Test Aborted");
 80014fc:	4810      	ldr	r0, [pc, #64]	; (8001540 <MX_OCTOSPI1_Init+0x84>)
 80014fe:	f028 fcd3 	bl	8029ea8 <iprintf>
    printf("\r\n");
 8001502:	4810      	ldr	r0, [pc, #64]	; (8001544 <MX_OCTOSPI1_Init+0x88>)
 8001504:	f028 fd56 	bl	8029fb4 <puts>
  }

  BSP_OSPI_NOR_GetInfo(0, &sOSPI_NOR_Info);
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	4619      	mov	r1, r3
 800150e:	2000      	movs	r0, #0
 8001510:	f005 face 	bl	8006ab0 <BSP_OSPI_NOR_GetInfo>

  if (BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8001514:	2000      	movs	r0, #0
 8001516:	f005 fae1 	bl	8006adc <BSP_OSPI_NOR_EnableMemoryMappedMode>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <MX_OCTOSPI1_Init+0x76>
  {
    printf("\r\nOSPI NOR Mem-Mapped Cfg : Failed");
 8001520:	4809      	ldr	r0, [pc, #36]	; (8001548 <MX_OCTOSPI1_Init+0x8c>)
 8001522:	f028 fcc1 	bl	8029ea8 <iprintf>
    printf("\r\nOSPI NOR Test Aborted");
 8001526:	4806      	ldr	r0, [pc, #24]	; (8001540 <MX_OCTOSPI1_Init+0x84>)
 8001528:	f028 fcbe 	bl	8029ea8 <iprintf>
    printf("\r\n");
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_OCTOSPI1_Init+0x88>)
 800152e:	f028 fd41 	bl	8029fb4 <puts>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	3730      	adds	r7, #48	; 0x30
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	0802ab48 	.word	0x0802ab48
 8001540:	0802ab6c 	.word	0x0802ab6c
 8001544:	0802a9d0 	.word	0x0802a9d0
 8001548:	0802ab84 	.word	0x0802ab84

0800154c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b09c      	sub	sp, #112	; 0x70
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001552:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001560:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
 800157c:	615a      	str	r2, [r3, #20]
 800157e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2234      	movs	r2, #52	; 0x34
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f028 f8b6 	bl	80296f8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800158c:	4b45      	ldr	r3, [pc, #276]	; (80016a4 <MX_TIM8_Init+0x158>)
 800158e:	4a46      	ldr	r2, [pc, #280]	; (80016a8 <MX_TIM8_Init+0x15c>)
 8001590:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 18;
 8001592:	4b44      	ldr	r3, [pc, #272]	; (80016a4 <MX_TIM8_Init+0x158>)
 8001594:	2212      	movs	r2, #18
 8001596:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001598:	4b42      	ldr	r3, [pc, #264]	; (80016a4 <MX_TIM8_Init+0x158>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 139;
 800159e:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <MX_TIM8_Init+0x158>)
 80015a0:	228b      	movs	r2, #139	; 0x8b
 80015a2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a4:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <MX_TIM8_Init+0x158>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015aa:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <MX_TIM8_Init+0x158>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b0:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <MX_TIM8_Init+0x158>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015b6:	483b      	ldr	r0, [pc, #236]	; (80016a4 <MX_TIM8_Init+0x158>)
 80015b8:	f00f fa6e 	bl	8010a98 <HAL_TIM_Base_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80015c2:	f000 f9fd 	bl	80019c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ca:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015d0:	4619      	mov	r1, r3
 80015d2:	4834      	ldr	r0, [pc, #208]	; (80016a4 <MX_TIM8_Init+0x158>)
 80015d4:	f00f ffa0 	bl	8011518 <HAL_TIM_ConfigClockSource>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80015de:	f000 f9ef 	bl	80019c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80015e2:	4830      	ldr	r0, [pc, #192]	; (80016a4 <MX_TIM8_Init+0x158>)
 80015e4:	f00f fb50 	bl	8010c88 <HAL_TIM_PWM_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80015ee:	f000 f9e7 	bl	80019c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001602:	4619      	mov	r1, r3
 8001604:	4827      	ldr	r0, [pc, #156]	; (80016a4 <MX_TIM8_Init+0x158>)
 8001606:	f010 fe43 	bl	8012290 <HAL_TIMEx_MasterConfigSynchronization>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001610:	f000 f9d6 	bl	80019c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001614:	2360      	movs	r3, #96	; 0x60
 8001616:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 100;
 8001618:	2364      	movs	r3, #100	; 0x64
 800161a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161c:	2300      	movs	r3, #0
 800161e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001620:	2300      	movs	r3, #0
 8001622:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001630:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001634:	2204      	movs	r2, #4
 8001636:	4619      	mov	r1, r3
 8001638:	481a      	ldr	r0, [pc, #104]	; (80016a4 <MX_TIM8_Init+0x158>)
 800163a:	f00f fe59 	bl	80112f0 <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8001644:	f000 f9bc 	bl	80019c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800165c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001660:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800166e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001678:	2300      	movs	r3, #0
 800167a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <MX_TIM8_Init+0x158>)
 8001686:	f010 fec5 	bl	8012414 <HAL_TIMEx_ConfigBreakDeadTime>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001690:	f000 f996 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001694:	4803      	ldr	r0, [pc, #12]	; (80016a4 <MX_TIM8_Init+0x158>)
 8001696:	f000 fc1d 	bl	8001ed4 <HAL_TIM_MspPostInit>

}
 800169a:	bf00      	nop
 800169c:	3770      	adds	r7, #112	; 0x70
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20152fbc 	.word	0x20152fbc
 80016a8:	40013400 	.word	0x40013400

080016ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <MX_USART1_UART_Init+0x90>)
 80016b2:	4a23      	ldr	r2, [pc, #140]	; (8001740 <MX_USART1_UART_Init+0x94>)
 80016b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016b6:	4b21      	ldr	r3, [pc, #132]	; (800173c <MX_USART1_UART_Init+0x90>)
 80016b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <MX_USART1_UART_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	; (800173c <MX_USART1_UART_Init+0x90>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <MX_USART1_UART_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <MX_USART1_UART_Init+0x90>)
 80016d2:	220c      	movs	r2, #12
 80016d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <MX_USART1_UART_Init+0x90>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <MX_USART1_UART_Init+0x90>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <MX_USART1_UART_Init+0x90>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <MX_USART1_UART_Init+0x90>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <MX_USART1_UART_Init+0x90>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016f4:	4811      	ldr	r0, [pc, #68]	; (800173c <MX_USART1_UART_Init+0x90>)
 80016f6:	f010 ff95 	bl	8012624 <HAL_UART_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001700:	f000 f95e 	bl	80019c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001704:	2100      	movs	r1, #0
 8001706:	480d      	ldr	r0, [pc, #52]	; (800173c <MX_USART1_UART_Init+0x90>)
 8001708:	f011 fc6a 	bl	8012fe0 <HAL_UARTEx_SetTxFifoThreshold>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001712:	f000 f955 	bl	80019c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001716:	2100      	movs	r1, #0
 8001718:	4808      	ldr	r0, [pc, #32]	; (800173c <MX_USART1_UART_Init+0x90>)
 800171a:	f011 fc9f 	bl	801305c <HAL_UARTEx_SetRxFifoThreshold>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001724:	f000 f94c 	bl	80019c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <MX_USART1_UART_Init+0x90>)
 800172a:	f011 fc20 	bl	8012f6e <HAL_UARTEx_DisableFifoMode>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001734:	f000 f944 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20153008 	.word	0x20153008
 8001740:	40013800 	.word	0x40013800

08001744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08e      	sub	sp, #56	; 0x38
 8001748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800175a:	4b80      	ldr	r3, [pc, #512]	; (800195c <MX_GPIO_Init+0x218>)
 800175c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001760:	4a7e      	ldr	r2, [pc, #504]	; (800195c <MX_GPIO_Init+0x218>)
 8001762:	f043 0310 	orr.w	r3, r3, #16
 8001766:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800176a:	4b7c      	ldr	r3, [pc, #496]	; (800195c <MX_GPIO_Init+0x218>)
 800176c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	623b      	str	r3, [r7, #32]
 8001776:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001778:	4b78      	ldr	r3, [pc, #480]	; (800195c <MX_GPIO_Init+0x218>)
 800177a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800177e:	4a77      	ldr	r2, [pc, #476]	; (800195c <MX_GPIO_Init+0x218>)
 8001780:	f043 0308 	orr.w	r3, r3, #8
 8001784:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001788:	4b74      	ldr	r3, [pc, #464]	; (800195c <MX_GPIO_Init+0x218>)
 800178a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	61fb      	str	r3, [r7, #28]
 8001794:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001796:	4b71      	ldr	r3, [pc, #452]	; (800195c <MX_GPIO_Init+0x218>)
 8001798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800179c:	4a6f      	ldr	r2, [pc, #444]	; (800195c <MX_GPIO_Init+0x218>)
 800179e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017a6:	4b6d      	ldr	r3, [pc, #436]	; (800195c <MX_GPIO_Init+0x218>)
 80017a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80017b4:	4b69      	ldr	r3, [pc, #420]	; (800195c <MX_GPIO_Init+0x218>)
 80017b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017ba:	4a68      	ldr	r2, [pc, #416]	; (800195c <MX_GPIO_Init+0x218>)
 80017bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017c4:	4b65      	ldr	r3, [pc, #404]	; (800195c <MX_GPIO_Init+0x218>)
 80017c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b62      	ldr	r3, [pc, #392]	; (800195c <MX_GPIO_Init+0x218>)
 80017d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017d8:	4a60      	ldr	r2, [pc, #384]	; (800195c <MX_GPIO_Init+0x218>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017e2:	4b5e      	ldr	r3, [pc, #376]	; (800195c <MX_GPIO_Init+0x218>)
 80017e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017f0:	4b5a      	ldr	r3, [pc, #360]	; (800195c <MX_GPIO_Init+0x218>)
 80017f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017f6:	4a59      	ldr	r2, [pc, #356]	; (800195c <MX_GPIO_Init+0x218>)
 80017f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001800:	4b56      	ldr	r3, [pc, #344]	; (800195c <MX_GPIO_Init+0x218>)
 8001802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	4b53      	ldr	r3, [pc, #332]	; (800195c <MX_GPIO_Init+0x218>)
 8001810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001814:	4a51      	ldr	r2, [pc, #324]	; (800195c <MX_GPIO_Init+0x218>)
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800181e:	4b4f      	ldr	r3, [pc, #316]	; (800195c <MX_GPIO_Init+0x218>)
 8001820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800182c:	4b4b      	ldr	r3, [pc, #300]	; (800195c <MX_GPIO_Init+0x218>)
 800182e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001832:	4a4a      	ldr	r2, [pc, #296]	; (800195c <MX_GPIO_Init+0x218>)
 8001834:	f043 0320 	orr.w	r3, r3, #32
 8001838:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800183c:	4b47      	ldr	r3, [pc, #284]	; (800195c <MX_GPIO_Init+0x218>)
 800183e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001842:	f003 0320 	and.w	r3, r3, #32
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_RED_Pin|VL_LPn_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f244 0103 	movw	r1, #16387	; 0x4003
 8001850:	4843      	ldr	r0, [pc, #268]	; (8001960 <MX_GPIO_Init+0x21c>)
 8001852:	f008 ff11 	bl	800a678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8001856:	2201      	movs	r2, #1
 8001858:	2120      	movs	r1, #32
 800185a:	4842      	ldr	r0, [pc, #264]	; (8001964 <MX_GPIO_Init+0x220>)
 800185c:	f008 ff0c 	bl	800a678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	2120      	movs	r1, #32
 8001864:	4840      	ldr	r0, [pc, #256]	; (8001968 <MX_GPIO_Init+0x224>)
 8001866:	f008 ff07 	bl	800a678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VSYNC_FREQ_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	2103      	movs	r1, #3
 800186e:	483d      	ldr	r0, [pc, #244]	; (8001964 <MX_GPIO_Init+0x220>)
 8001870:	f008 ff02 	bl	800a678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MCU_ACTIVE_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800187a:	483c      	ldr	r0, [pc, #240]	; (800196c <MX_GPIO_Init+0x228>)
 800187c:	f008 fefc 	bl	800a678 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001880:	2303      	movs	r3, #3
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001894:	4619      	mov	r1, r3
 8001896:	4832      	ldr	r0, [pc, #200]	; (8001960 <MX_GPIO_Init+0x21c>)
 8001898:	f008 fc20 	bl	800a0dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin VSYNC_FREQ_Pin RENDER_TIME_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|VSYNC_FREQ_Pin|RENDER_TIME_Pin;
 800189c:	2323      	movs	r3, #35	; 0x23
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a8:	2302      	movs	r3, #2
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b0:	4619      	mov	r1, r3
 80018b2:	482c      	ldr	r0, [pc, #176]	; (8001964 <MX_GPIO_Init+0x220>)
 80018b4:	f008 fc12 	bl	800a0dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_PWR_ON_Pin */
  GPIO_InitStruct.Pin = DSI_PWR_ON_Pin;
 80018b8:	2320      	movs	r3, #32
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018bc:	2301      	movs	r3, #1
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DSI_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018cc:	4619      	mov	r1, r3
 80018ce:	4826      	ldr	r0, [pc, #152]	; (8001968 <MX_GPIO_Init+0x224>)
 80018d0:	f008 fc04 	bl	800a0dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80018d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e6:	4619      	mov	r1, r3
 80018e8:	4821      	ldr	r0, [pc, #132]	; (8001970 <MX_GPIO_Init+0x22c>)
 80018ea:	f008 fbf7 	bl	800a0dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = DSI_TOUCH_INT_Pin;
 80018ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <MX_GPIO_Init+0x230>)
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f8:	2301      	movs	r3, #1
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DSI_TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001900:	4619      	mov	r1, r3
 8001902:	4817      	ldr	r0, [pc, #92]	; (8001960 <MX_GPIO_Init+0x21c>)
 8001904:	f008 fbea 	bl	800a0dc <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_ACTIVE_Pin FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin|FRAME_RATE_Pin;
 8001908:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001916:	2302      	movs	r3, #2
 8001918:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800191a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191e:	4619      	mov	r1, r3
 8001920:	4812      	ldr	r0, [pc, #72]	; (800196c <MX_GPIO_Init+0x228>)
 8001922:	f008 fbdb 	bl	800a0dc <HAL_GPIO_Init>

  /*Configure GPIO pin : VL_LPn_Pin */
  GPIO_InitStruct.Pin = VL_LPn_Pin;
 8001926:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192c:	2301      	movs	r3, #1
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(VL_LPn_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193c:	4619      	mov	r1, r3
 800193e:	4808      	ldr	r0, [pc, #32]	; (8001960 <MX_GPIO_Init+0x21c>)
 8001940:	f008 fbcc 	bl	800a0dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI8_IRQn, 10, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	210a      	movs	r1, #10
 8001948:	2013      	movs	r0, #19
 800194a:	f006 fa1f 	bl	8007d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 800194e:	2013      	movs	r0, #19
 8001950:	f006 fa36 	bl	8007dc0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001954:	bf00      	nop
 8001956:	3738      	adds	r7, #56	; 0x38
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	46020c00 	.word	0x46020c00
 8001960:	42021000 	.word	0x42021000
 8001964:	42020c00 	.word	0x42020c00
 8001968:	42022000 	.word	0x42022000
 800196c:	42021400 	.word	0x42021400
 8001970:	42020800 	.word	0x42020800
 8001974:	10210000 	.word	0x10210000

08001978 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001980:	1d39      	adds	r1, r7, #4
 8001982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001986:	2201      	movs	r2, #1
 8001988:	4803      	ldr	r0, [pc, #12]	; (8001998 <__io_putchar+0x20>)
 800198a:	f010 fe9b 	bl	80126c4 <HAL_UART_Transmit>

  return ch;
 800198e:	687b      	ldr	r3, [r7, #4]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20153008 	.word	0x20153008

0800199c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ae:	f006 f8f1 	bl	8007b94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40001000 	.word	0x40001000

080019c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c4:	b672      	cpsid	i
}
 80019c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <Error_Handler+0x8>
	...

080019cc <RdByte>:

uint8_t RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	460b      	mov	r3, r1
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	817b      	strh	r3, [r7, #10]
	uint8_t status = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	75fb      	strb	r3, [r7, #23]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 80019de:	897b      	ldrh	r3, [r7, #10]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	753b      	strb	r3, [r7, #20]
	data_write[1] = RegisterAdress & 0xFF;
 80019e8:	897b      	ldrh	r3, [r7, #10]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Master_Transmit(&hi2c3, p_platform->address, data_write, 2, 100);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8819      	ldrh	r1, [r3, #0]
 80019f2:	f107 0214 	add.w	r2, r7, #20
 80019f6:	2364      	movs	r3, #100	; 0x64
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2302      	movs	r3, #2
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <RdByte+0x64>)
 80019fe:	f009 f83d 	bl	800aa7c <HAL_I2C_Master_Transmit>
 8001a02:	4603      	mov	r3, r0
 8001a04:	75fb      	strb	r3, [r7, #23]
	status = HAL_I2C_Master_Receive(&hi2c3, p_platform->address, data_read, 1, 100);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8819      	ldrh	r1, [r3, #0]
 8001a0a:	f107 0210 	add.w	r2, r7, #16
 8001a0e:	2364      	movs	r3, #100	; 0x64
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2301      	movs	r3, #1
 8001a14:	4806      	ldr	r0, [pc, #24]	; (8001a30 <RdByte+0x64>)
 8001a16:	f009 f925 	bl	800ac64 <HAL_I2C_Master_Receive>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	75fb      	strb	r3, [r7, #23]
	*p_value = data_read[0];
 8001a1e:	7c3a      	ldrb	r2, [r7, #16]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	701a      	strb	r2, [r3, #0]
  
	return status;
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20152ec0 	.word	0x20152ec0

08001a34 <WrByte>:

uint8_t WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af02      	add	r7, sp, #8
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
 8001a40:	4613      	mov	r3, r2
 8001a42:	707b      	strb	r3, [r7, #1]
	uint8_t data_write[3];
	uint8_t status = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8001a48:	887b      	ldrh	r3, [r7, #2]
 8001a4a:	0a1b      	lsrs	r3, r3, #8
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 8001a58:	787b      	ldrb	r3, [r7, #1]
 8001a5a:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c3,p_platform->address, data_write, 3, 100);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	8819      	ldrh	r1, [r3, #0]
 8001a60:	f107 020c 	add.w	r2, r7, #12
 8001a64:	2364      	movs	r3, #100	; 0x64
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2303      	movs	r3, #3
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <WrByte+0x4c>)
 8001a6c:	f009 f806 	bl	800aa7c <HAL_I2C_Master_Transmit>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]

	return status;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20152ec0 	.word	0x20152ec0

08001a84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_MspInit+0x30>)
 8001a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a90:	4a08      	ldr	r2, [pc, #32]	; (8001ab4 <HAL_MspInit+0x30>)
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_MspInit+0x30>)
 8001a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	46020c00 	.word	0x46020c00

08001ab8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <HAL_CRC_MspInit+0x3c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_CRC_MspInit+0x40>)
 8001acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad0:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <HAL_CRC_MspInit+0x40>)
 8001ad2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <HAL_CRC_MspInit+0x40>)
 8001adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	40023000 	.word	0x40023000
 8001af8:	46020c00 	.word	0x46020c00

08001afc <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a16      	ldr	r2, [pc, #88]	; (8001b64 <HAL_DCACHE_MspInit+0x68>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10f      	bne.n	8001b2e <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8001b0e:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <HAL_DCACHE_MspInit+0x6c>)
 8001b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b14:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <HAL_DCACHE_MspInit+0x6c>)
 8001b16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_DCACHE_MspInit+0x6c>)
 8001b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 8001b2c:	e013      	b.n	8001b56 <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <HAL_DCACHE_MspInit+0x70>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d10e      	bne.n	8001b56 <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_DCACHE_MspInit+0x6c>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_DCACHE_MspInit+0x6c>)
 8001b40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_DCACHE_MspInit+0x6c>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40031400 	.word	0x40031400
 8001b68:	46020c00 	.word	0x46020c00
 8001b6c:	40031800 	.word	0x40031800

08001b70 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <HAL_DMA2D_MspInit+0x48>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d116      	bne.n	8001bb0 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_DMA2D_MspInit+0x4c>)
 8001b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b88:	4a0c      	ldr	r2, [pc, #48]	; (8001bbc <HAL_DMA2D_MspInit+0x4c>)
 8001b8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_DMA2D_MspInit+0x4c>)
 8001b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2107      	movs	r1, #7
 8001ba4:	2076      	movs	r0, #118	; 0x76
 8001ba6:	f006 f8f1 	bl	8007d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001baa:	2076      	movs	r0, #118	; 0x76
 8001bac:	f006 f908 	bl	8007dc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	4002b000 	.word	0x4002b000
 8001bbc:	46020c00 	.word	0x46020c00

08001bc0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <HAL_DSI_MspInit+0x3c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d10e      	bne.n	8001bf0 <HAL_DSI_MspInit+0x30>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_DSI_MspInit+0x40>)
 8001bd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001bd8:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_DSI_MspInit+0x40>)
 8001bda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bde:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <HAL_DSI_MspInit+0x40>)
 8001be4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40016c00 	.word	0x40016c00
 8001c00:	46020c00 	.word	0x46020c00

08001c04 <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a24      	ldr	r2, [pc, #144]	; (8001ca4 <HAL_GPU2D_MspInit+0xa0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d142      	bne.n	8001c9c <HAL_GPU2D_MspInit+0x98>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 8001c16:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_GPU2D_MspInit+0xa4>)
 8001c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1c:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <HAL_GPU2D_MspInit+0xa4>)
 8001c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001c26:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <HAL_GPU2D_MspInit+0xa4>)
 8001c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001c34:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <HAL_GPU2D_MspInit+0xa4>)
 8001c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <HAL_GPU2D_MspInit+0xa4>)
 8001c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001c44:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <HAL_GPU2D_MspInit+0xa4>)
 8001c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 7, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2107      	movs	r1, #7
 8001c56:	2084      	movs	r0, #132	; 0x84
 8001c58:	f006 f898 	bl	8007d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 8001c5c:	2084      	movs	r0, #132	; 0x84
 8001c5e:	f006 f8af 	bl	8007dc0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 7, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2107      	movs	r1, #7
 8001c66:	2085      	movs	r0, #133	; 0x85
 8001c68:	f006 f890 	bl	8007d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 8001c6c:	2085      	movs	r0, #133	; 0x85
 8001c6e:	f006 f8a7 	bl	8007dc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_GPU2D_MspInit+0xa4>)
 8001c74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001c78:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <HAL_GPU2D_MspInit+0xa4>)
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_GPU2D_MspInit+0xa4>)
 8001c84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
    SYSCFG->CFGR1 &= ~(1L << 28);
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_GPU2D_MspInit+0xa8>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a05      	ldr	r2, [pc, #20]	; (8001cac <HAL_GPU2D_MspInit+0xa8>)
 8001c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	6053      	str	r3, [r2, #4]
  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 8001c9c:	bf00      	nop
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	4002f000 	.word	0x4002f000
 8001ca8:	46020c00 	.word	0x46020c00
 8001cac:	46000400 	.word	0x46000400

08001cb0 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0c0      	sub	sp, #256	; 0x100
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc8:	f107 0308 	add.w	r3, r7, #8
 8001ccc:	22e0      	movs	r2, #224	; 0xe0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f027 fd11 	bl	80296f8 <memset>
  /* USER CODE BEGIN HSPI1_MspInit 1 */
#endif
  /* USER CODE END HSPI1_MspInit 1 */
  }

}
 8001cd6:	bf00      	nop
 8001cd8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_XSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspDeInit(XSPI_HandleTypeDef* hxspi)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HSPI1_MspDeInit 1 */
#endif
  /* USER CODE END HSPI1_MspDeInit 1 */
  }

}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b0c2      	sub	sp, #264	; 0x108
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d02:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d14:	f107 0310 	add.w	r3, r7, #16
 8001d18:	22e0      	movs	r2, #224	; 0xe0
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f027 fceb 	bl	80296f8 <memset>
  if(hi2c->Instance==I2C3)
 8001d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a2b      	ldr	r2, [pc, #172]	; (8001ddc <HAL_I2C_MspInit+0xe8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d14e      	bne.n	8001dd2 <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d46:	f107 0310 	add.w	r3, r7, #16
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f00b fe7c 	bl	800da48 <HAL_RCCEx_PeriphCLKConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001d56:	f7ff fe33 	bl	80019c0 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <HAL_I2C_MspInit+0xec>)
 8001d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d60:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <HAL_I2C_MspInit+0xec>)
 8001d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_I2C_MspInit+0xec>)
 8001d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001d78:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d80:	2312      	movs	r3, #18
 8001d82:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d92:	2304      	movs	r3, #4
 8001d94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d98:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4811      	ldr	r0, [pc, #68]	; (8001de4 <HAL_I2C_MspInit+0xf0>)
 8001da0:	f008 f99c 	bl	800a0dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001da4:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_I2C_MspInit+0xec>)
 8001da6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001daa:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <HAL_I2C_MspInit+0xec>)
 8001dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_I2C_MspInit+0xec>)
 8001db6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001dba:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8001dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dc2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dcc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001dd0:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001dd2:	bf00      	nop
 8001dd4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	46002800 	.word	0x46002800
 8001de0:	46020c00 	.word	0x46020c00
 8001de4:	42021c00 	.word	0x42021c00

08001de8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <HAL_I2C_MspDeInit+0x3c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d110      	bne.n	8001e1c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_I2C_MspDeInit+0x40>)
 8001dfc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001e00:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <HAL_I2C_MspDeInit+0x40>)
 8001e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e06:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	4807      	ldr	r0, [pc, #28]	; (8001e2c <HAL_I2C_MspDeInit+0x44>)
 8001e0e:	f008 fb3d 	bl	800a48c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 8001e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <HAL_I2C_MspDeInit+0x44>)
 8001e18:	f008 fb38 	bl	800a48c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	46002800 	.word	0x46002800
 8001e28:	46020c00 	.word	0x46020c00
 8001e2c:	42021c00 	.word	0x42021c00

08001e30 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a12      	ldr	r2, [pc, #72]	; (8001e88 <HAL_LTDC_MspInit+0x58>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d11e      	bne.n	8001e80 <HAL_LTDC_MspInit+0x50>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_LTDC_MspInit+0x5c>)
 8001e44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e48:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <HAL_LTDC_MspInit+0x5c>)
 8001e4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e4e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_LTDC_MspInit+0x5c>)
 8001e54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2107      	movs	r1, #7
 8001e64:	2087      	movs	r0, #135	; 0x87
 8001e66:	f005 ff91 	bl	8007d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001e6a:	2087      	movs	r0, #135	; 0x87
 8001e6c:	f005 ffa8 	bl	8007dc0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 7, 0);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2107      	movs	r1, #7
 8001e74:	2088      	movs	r0, #136	; 0x88
 8001e76:	f005 ff89 	bl	8007d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001e7a:	2088      	movs	r0, #136	; 0x88
 8001e7c:	f005 ffa0 	bl	8007dc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40016800 	.word	0x40016800
 8001e8c:	46020c00 	.word	0x46020c00

08001e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <HAL_TIM_Base_MspInit+0x3c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_TIM_Base_MspInit+0x40>)
 8001ea4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001ea8:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <HAL_TIM_Base_MspInit+0x40>)
 8001eaa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001eae:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <HAL_TIM_Base_MspInit+0x40>)
 8001eb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	40013400 	.word	0x40013400
 8001ed0:	46020c00 	.word	0x46020c00

08001ed4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <HAL_TIM_MspPostInit+0x68>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d11e      	bne.n	8001f34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_TIM_MspPostInit+0x6c>)
 8001ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001efc:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <HAL_TIM_MspPostInit+0x6c>)
 8001efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_TIM_MspPostInit+0x6c>)
 8001f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PI6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = DSI_BL_CTRL_Pin;
 8001f14:	2340      	movs	r3, #64	; 0x40
 8001f16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f20:	2302      	movs	r3, #2
 8001f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001f24:	2303      	movs	r3, #3
 8001f26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DSI_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4805      	ldr	r0, [pc, #20]	; (8001f44 <HAL_TIM_MspPostInit+0x70>)
 8001f30:	f008 f8d4 	bl	800a0dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001f34:	bf00      	nop
 8001f36:	3720      	adds	r7, #32
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40013400 	.word	0x40013400
 8001f40:	46020c00 	.word	0x46020c00
 8001f44:	42022000 	.word	0x42022000

08001f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b0c2      	sub	sp, #264	; 0x108
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f56:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f68:	f107 0310 	add.w	r3, r7, #16
 8001f6c:	22e0      	movs	r2, #224	; 0xe0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f027 fbc1 	bl	80296f8 <memset>
  if(huart->Instance==USART1)
 8001f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a2b      	ldr	r2, [pc, #172]	; (8002030 <HAL_UART_MspInit+0xe8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d14d      	bne.n	8002024 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f88:	f04f 0201 	mov.w	r2, #1
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f94:	2300      	movs	r3, #0
 8001f96:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f00b fd53 	bl	800da48 <HAL_RCCEx_PeriphCLKConfig>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8001fa8:	f7ff fd0a 	bl	80019c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fac:	4b21      	ldr	r3, [pc, #132]	; (8002034 <HAL_UART_MspInit+0xec>)
 8001fae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001fb2:	4a20      	ldr	r2, [pc, #128]	; (8002034 <HAL_UART_MspInit+0xec>)
 8001fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_UART_MspInit+0xec>)
 8001fbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <HAL_UART_MspInit+0xec>)
 8001fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fd0:	4a18      	ldr	r2, [pc, #96]	; (8002034 <HAL_UART_MspInit+0xec>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <HAL_UART_MspInit+0xec>)
 8001fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fe0:	f003 0201 	and.w	r2, r3, #1
 8001fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fe8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ff2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ff6:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001ff8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ffc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002012:	2307      	movs	r3, #7
 8002014:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002018:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800201c:	4619      	mov	r1, r3
 800201e:	4806      	ldr	r0, [pc, #24]	; (8002038 <HAL_UART_MspInit+0xf0>)
 8002020:	f008 f85c 	bl	800a0dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002024:	bf00      	nop
 8002026:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40013800 	.word	0x40013800
 8002034:	46020c00 	.word	0x46020c00
 8002038:	42020000 	.word	0x42020000

0800203c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08e      	sub	sp, #56	; 0x38
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800204c:	4b2e      	ldr	r3, [pc, #184]	; (8002108 <HAL_InitTick+0xcc>)
 800204e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002052:	4a2d      	ldr	r2, [pc, #180]	; (8002108 <HAL_InitTick+0xcc>)
 8002054:	f043 0310 	orr.w	r3, r3, #16
 8002058:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800205c:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <HAL_InitTick+0xcc>)
 800205e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800206a:	f107 0210 	add.w	r2, r7, #16
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f00b fc29 	bl	800d8cc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800207a:	f00b fbeb 	bl	800d854 <HAL_RCC_GetPCLK1Freq>
 800207e:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002082:	4a22      	ldr	r2, [pc, #136]	; (800210c <HAL_InitTick+0xd0>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	0c9b      	lsrs	r3, r3, #18
 800208a:	3b01      	subs	r3, #1
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <HAL_InitTick+0xd4>)
 8002090:	4a20      	ldr	r2, [pc, #128]	; (8002114 <HAL_InitTick+0xd8>)
 8002092:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002094:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <HAL_InitTick+0xd4>)
 8002096:	f240 32e7 	movw	r2, #999	; 0x3e7
 800209a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800209c:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_InitTick+0xd4>)
 800209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_InitTick+0xd4>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_InitTick+0xd4>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80020ae:	4818      	ldr	r0, [pc, #96]	; (8002110 <HAL_InitTick+0xd4>)
 80020b0:	f00e fcf2 	bl	8010a98 <HAL_TIM_Base_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80020ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d118      	bne.n	80020f4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80020c2:	4813      	ldr	r0, [pc, #76]	; (8002110 <HAL_InitTick+0xd4>)
 80020c4:	f00e fd40 	bl	8010b48 <HAL_TIM_Base_Start_IT>
 80020c8:	4603      	mov	r3, r0
 80020ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80020ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10e      	bne.n	80020f4 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b0f      	cmp	r3, #15
 80020da:	d808      	bhi.n	80020ee <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80020dc:	2200      	movs	r2, #0
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	2031      	movs	r0, #49	; 0x31
 80020e2:	f005 fe53 	bl	8007d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020e6:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <HAL_InitTick+0xdc>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	e002      	b.n	80020f4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80020f4:	2031      	movs	r0, #49	; 0x31
 80020f6:	f005 fe63 	bl	8007dc0 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80020fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3738      	adds	r7, #56	; 0x38
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	46020c00 	.word	0x46020c00
 800210c:	431bde83 	.word	0x431bde83
 8002110:	20153b54 	.word	0x20153b54
 8002114:	40001000 	.word	0x40001000
 8002118:	2000004c 	.word	0x2000004c

0800211c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <NMI_Handler+0x4>

08002122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002126:	e7fe      	b.n	8002126 <HardFault_Handler+0x4>

08002128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800212c:	e7fe      	b.n	800212c <MemManage_Handler+0x4>

0800212e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002132:	e7fe      	b.n	8002132 <BusFault_Handler+0x4>

08002134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <UsageFault_Handler+0x4>

0800213a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DSI_TOUCH_INT_Pin);
 800214c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002150:	f008 fb1e 	bl	800a790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}

08002158 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <TIM6_IRQHandler+0x10>)
 800215e:	f00e ff47 	bl	8010ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20153b54 	.word	0x20153b54

0800216c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <DMA2D_IRQHandler+0x10>)
 8002172:	f006 fcb8 	bl	8008ae6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20152e30 	.word	0x20152e30

08002180 <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <GPU2D_IRQHandler+0x10>)
 8002186:	f008 fb84 	bl	800a892 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20152eb4 	.word	0x20152eb4

08002194 <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <GPU2D_ER_IRQHandler+0x10>)
 800219a:	f008 fba0 	bl	800a8de <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20152eb4 	.word	0x20152eb4

080021a8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <LTDC_IRQHandler+0x10>)
 80021ae:	f009 fd69 	bl	800bc84 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20152f14 	.word	0x20152f14

080021bc <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LCD-TFT Error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <LTDC_ER_IRQHandler+0x10>)
 80021c2:	f009 fd5f 	bl	800bc84 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20152f14 	.word	0x20152f14

080021d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return 1;
 80021d4:	2301      	movs	r3, #1
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <_kill>:

int _kill(int pid, int sig)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021ea:	f027 fa39 	bl	8029660 <__errno>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2216      	movs	r2, #22
 80021f2:	601a      	str	r2, [r3, #0]
  return -1;
 80021f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <_exit>:

void _exit (int status)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002208:	f04f 31ff 	mov.w	r1, #4294967295
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ffe7 	bl	80021e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002212:	e7fe      	b.n	8002212 <_exit+0x12>

08002214 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	e00a      	b.n	800223c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002226:	e000      	b.n	800222a <_read+0x16>
 8002228:	bf00      	nop
 800222a:	4601      	mov	r1, r0
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	60ba      	str	r2, [r7, #8]
 8002232:	b2ca      	uxtb	r2, r1
 8002234:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3301      	adds	r3, #1
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	429a      	cmp	r2, r3
 8002242:	dbf0      	blt.n	8002226 <_read+0x12>
  }

  return len;
 8002244:	687b      	ldr	r3, [r7, #4]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	e009      	b.n	8002274 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	60ba      	str	r2, [r7, #8]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fb85 	bl	8001978 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	3301      	adds	r3, #1
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	429a      	cmp	r2, r3
 800227a:	dbf1      	blt.n	8002260 <_write+0x12>
  }
  return len;
 800227c:	687b      	ldr	r3, [r7, #4]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <_close>:

int _close(int file)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ae:	605a      	str	r2, [r3, #4]
  return 0;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <_isatty>:

int _isatty(int file)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022c6:	2301      	movs	r3, #1
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022f8:	4a14      	ldr	r2, [pc, #80]	; (800234c <_sbrk+0x5c>)
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <_sbrk+0x60>)
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <_sbrk+0x64>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <_sbrk+0x64>)
 800230e:	4a12      	ldr	r2, [pc, #72]	; (8002358 <_sbrk+0x68>)
 8002310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <_sbrk+0x64>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	429a      	cmp	r2, r3
 800231e:	d207      	bcs.n	8002330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002320:	f027 f99e 	bl	8029660 <__errno>
 8002324:	4603      	mov	r3, r0
 8002326:	220c      	movs	r2, #12
 8002328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	e009      	b.n	8002344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <_sbrk+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002336:	4b07      	ldr	r3, [pc, #28]	; (8002354 <_sbrk+0x64>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <_sbrk+0x64>)
 8002340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002342:	68fb      	ldr	r3, [r7, #12]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20270000 	.word	0x20270000
 8002350:	00001000 	.word	0x00001000
 8002354:	20153ba0 	.word	0x20153ba0
 8002358:	20198a08 	.word	0x20198a08

0800235c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800235c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002394 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002360:	f005 fbb2 	bl	8007ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002364:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002366:	e003      	b.n	8002370 <LoopCopyDataInit>

08002368 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800236a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800236c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800236e:	3104      	adds	r1, #4

08002370 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002370:	480a      	ldr	r0, [pc, #40]	; (800239c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002374:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002376:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002378:	d3f6      	bcc.n	8002368 <CopyDataInit>
	ldr	r2, =_sbss
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800237c:	e002      	b.n	8002384 <LoopFillZerobss>

0800237e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800237e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002380:	f842 3b04 	str.w	r3, [r2], #4

08002384 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <LoopForever+0x16>)
	cmp	r2, r3
 8002386:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002388:	d3f9      	bcc.n	800237e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800238a:	f027 f981 	bl	8029690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800238e:	f7fe fa95 	bl	80008bc <main>

08002392 <LoopForever>:

LoopForever:
    b LoopForever
 8002392:	e7fe      	b.n	8002392 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002394:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8002398:	0802d9ac 	.word	0x0802d9ac
	ldr	r0, =_sdata
 800239c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023a0:	2000012c 	.word	0x2000012c
	ldr	r2, =_sbss
 80023a4:	20151930 	.word	0x20151930
	ldr	r3, = _ebss
 80023a8:	20198a04 	.word	0x20198a04

080023ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023ac:	e7fe      	b.n	80023ac <ADC1_2_IRQHandler>

080023ae <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 80023b2:	f000 fe65 	bl	8003080 <touchgfx_components_init>
  touchgfx_init();
 80023b6:	f000 fdeb 	bl	8002f90 <touchgfx_init>
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <MX_TouchGFX_Init>:

/**
 * Create TouchGFX Thread
 */
UINT MX_TouchGFX_Init(VOID *memory_ptr)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08c      	sub	sp, #48	; 0x30
 80023c4:	af08      	add	r7, sp, #32
 80023c6:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
  CHAR *pointer = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]

  /* Allocate the stack for TouchGFX Thread.  */
  if (tx_byte_allocate((TX_BYTE_POOL*)memory_ptr, (VOID **) &pointer,
 80023d0:	f107 0108 	add.w	r1, r7, #8
 80023d4:	2300      	movs	r3, #0
 80023d6:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f013 ff46 	bl	801626c <_txe_byte_allocate>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <MX_TouchGFX_Init+0x2c>
                       TOUCHGFX_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    ret = TX_POOL_ERROR;
 80023e6:	2302      	movs	r3, #2
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	e019      	b.n	8002420 <MX_TouchGFX_Init+0x60>
  }

  /* Create TouchGFX Thread */
  else if (tx_thread_create(&TouchGFXThread, (CHAR *)"TouchGFX", TouchGFX_Task, 0,
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	22b0      	movs	r2, #176	; 0xb0
 80023f0:	9206      	str	r2, [sp, #24]
 80023f2:	2201      	movs	r2, #1
 80023f4:	9205      	str	r2, [sp, #20]
 80023f6:	2200      	movs	r2, #0
 80023f8:	9204      	str	r2, [sp, #16]
 80023fa:	2205      	movs	r2, #5
 80023fc:	9203      	str	r2, [sp, #12]
 80023fe:	2205      	movs	r2, #5
 8002400:	9202      	str	r2, [sp, #8]
 8002402:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8002406:	9201      	str	r2, [sp, #4]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2300      	movs	r3, #0
 800240c:	4a07      	ldr	r2, [pc, #28]	; (800242c <MX_TouchGFX_Init+0x6c>)
 800240e:	4908      	ldr	r1, [pc, #32]	; (8002430 <MX_TouchGFX_Init+0x70>)
 8002410:	4808      	ldr	r0, [pc, #32]	; (8002434 <MX_TouchGFX_Init+0x74>)
 8002412:	f014 fa79 	bl	8016908 <_txe_thread_create>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TouchGFX_Init+0x60>
                       pointer, TOUCHGFX_STACK_SIZE,
                       5, 5,
                       TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
  {
    ret = TX_THREAD_ERROR;
 800241c:	230e      	movs	r3, #14
 800241e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002420:	68fb      	ldr	r3, [r7, #12]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	08002439 	.word	0x08002439
 8002430:	0802aba8 	.word	0x0802aba8
 8002434:	20153ba4 	.word	0x20153ba4

08002438 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(unsigned long thread_input)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8002440:	f000 fe28 	bl	8003094 <touchgfx_taskEntry>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <_ZN8touchgfx7Buttons4initEv>:
    BUTTON_USER  = '5',
} JOYState_TypeDef;

void Buttons::init()
{
}
 800244c:	4770      	bx	lr
	...

08002450 <_ZN8touchgfx7Buttons6sampleEv>:

unsigned int Buttons::sample()
{
    unsigned int buttonValue = BUTTON_NONE;

    if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET)
 8002450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{
 8002454:	b508      	push	{r3, lr}
    if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET)
 8002456:	4804      	ldr	r0, [pc, #16]	; (8002468 <_ZN8touchgfx7Buttons6sampleEv+0x18>)
 8002458:	f008 f8f6 	bl	800a648 <HAL_GPIO_ReadPin>
        buttonValue = BUTTON_USER;
    }

    if (buttonValue == BUTTON_NONE)
    {
        return 0;
 800245c:	2801      	cmp	r0, #1
    }

    return static_cast<unsigned int>(buttonValue);
}
 800245e:	bf0c      	ite	eq
 8002460:	2035      	moveq	r0, #53	; 0x35
 8002462:	2000      	movne	r0, #0
 8002464:	bd08      	pop	{r3, pc}
 8002466:	bf00      	nop
 8002468:	42020800 	.word	0x42020800

0800246c <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800246c:	6840      	ldr	r0, [r0, #4]
    }
 800246e:	4770      	bx	lr

08002470 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8002470:	6041      	str	r1, [r0, #4]
    }
 8002472:	4770      	bx	lr

08002474 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8002474:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002478:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 800247c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002480:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8002486:	4a06      	ldr	r2, [pc, #24]	; (80024a0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8002488:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 800248c:	430a      	orrs	r2, r1
 800248e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
}
 800249a:	4770      	bx	lr
 800249c:	e0001000 	.word	0xe0001000
 80024a0:	c5acce55 	.word	0xc5acce55

080024a4 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80024a4:	1a51      	subs	r1, r2, r1
 80024a6:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 80024aa:	fbb1 f0f3 	udiv	r0, r1, r3
 80024ae:	4770      	bx	lr

080024b0 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 80024b0:	4b01      	ldr	r3, [pc, #4]	; (80024b8 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 80024b2:	6858      	ldr	r0, [r3, #4]
}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e0001000 	.word	0xe0001000

080024bc <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80024bc:	4770      	bx	lr

080024be <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80024be:	b510      	push	{r4, lr}
 80024c0:	4604      	mov	r4, r0
 80024c2:	210c      	movs	r1, #12
 80024c4:	f027 f86d 	bl	80295a2 <_ZdlPvj>
 80024c8:	4620      	mov	r0, r4
 80024ca:	bd10      	pop	{r4, pc}

080024cc <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80024cc:	6803      	ldr	r3, [r0, #0]
{
 80024ce:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80024d0:	691b      	ldr	r3, [r3, #16]
{
 80024d2:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80024d4:	b131      	cbz	r1, 80024e4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80024d6:	4798      	blx	r3
 80024d8:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 80024da:	6863      	ldr	r3, [r4, #4]
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	4418      	add	r0, r3
 80024e0:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80024e2:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80024e4:	4798      	blx	r3
 80024e6:	60a0      	str	r0, [r4, #8]
}
 80024e8:	e7fb      	b.n	80024e2 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

080024ea <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 80024ea:	4770      	bx	lr

080024ec <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 80024ec:	4770      	bx	lr

080024ee <_ZN8touchgfx10KeySampler4initEv>:

using namespace touchgfx;

void KeySampler::init()
{
    previousState = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	7103      	strb	r3, [r0, #4]
    Buttons::init();
 80024f2:	f7ff bfab 	b.w	800244c <_ZN8touchgfx7Buttons4initEv>
	...

080024f8 <_ZN8touchgfx10KeySampler6sampleERh>:
}

bool KeySampler::sample(uint8_t& key)
{
 80024f8:	b570      	push	{r4, r5, r6, lr}
 80024fa:	4604      	mov	r4, r0
 80024fc:	460d      	mov	r5, r1
    static uint32_t last_time = 0;

    if ((HAL_GetTick() - last_time) > 800)
 80024fe:	f005 fb5d 	bl	8007bbc <HAL_GetTick>
 8002502:	4e0b      	ldr	r6, [pc, #44]	; (8002530 <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
 8002504:	6833      	ldr	r3, [r6, #0]
 8002506:	1ac0      	subs	r0, r0, r3
 8002508:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 800250c:	d904      	bls.n	8002518 <_ZN8touchgfx10KeySampler6sampleERh+0x20>
    {
        last_time = HAL_GetTick();
 800250e:	f005 fb55 	bl	8007bbc <HAL_GetTick>
        previousState = 0;
 8002512:	2300      	movs	r3, #0
        last_time = HAL_GetTick();
 8002514:	6030      	str	r0, [r6, #0]
        previousState = 0;
 8002516:	7123      	strb	r3, [r4, #4]
    }

    key = static_cast<uint8_t>(Buttons::sample());
 8002518:	f7ff ff9a 	bl	8002450 <_ZN8touchgfx7Buttons6sampleEv>
 800251c:	b2c0      	uxtb	r0, r0
 800251e:	7028      	strb	r0, [r5, #0]

    //User key
    if (key && (key != previousState))
 8002520:	b128      	cbz	r0, 800252e <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 8002522:	7922      	ldrb	r2, [r4, #4]
 8002524:	4282      	cmp	r2, r0
    {
        previousState = key;
 8002526:	bf16      	itet	ne
 8002528:	7120      	strbne	r0, [r4, #4]
        return true;
    }

    return false;
 800252a:	2000      	moveq	r0, #0
        return true;
 800252c:	2001      	movne	r0, #1
}
 800252e:	bd70      	pop	{r4, r5, r6, pc}
 8002530:	20153c54 	.word	0x20153c54

08002534 <_ZN8touchgfx10KeySamplerD0Ev>:
 8002534:	b510      	push	{r4, lr}
 8002536:	4604      	mov	r4, r0
 8002538:	2108      	movs	r1, #8
 800253a:	f027 f832 	bl	80295a2 <_ZdlPvj>
 800253e:	4620      	mov	r0, r4
 8002540:	bd10      	pop	{r4, pc}

08002542 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8002542:	4770      	bx	lr

08002544 <_ZN20STM32TouchControllerD0Ev>:
 8002544:	b510      	push	{r4, lr}
 8002546:	4604      	mov	r4, r0
 8002548:	2104      	movs	r1, #4
 800254a:	f027 f82a 	bl	80295a2 <_ZdlPvj>
 800254e:	4620      	mov	r0, r4
 8002550:	bd10      	pop	{r4, pc}
	...

08002554 <_ZN20STM32TouchController11sampleTouchERlS0_>:
    }
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
    if (_initialized)
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1c>)
{
 8002556:	b510      	push	{r4, lr}
    if (_initialized)
 8002558:	7818      	ldrb	r0, [r3, #0]
 800255a:	b130      	cbz	r0, 800256a <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
    {
        if (state.TouchDetected)
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>)
 800255e:	681c      	ldr	r4, [r3, #0]
 8002560:	b124      	cbz	r4, 800256c <_ZN20STM32TouchController11sampleTouchERlS0_+0x18>
        {
            x = state.TouchX;
 8002562:	685c      	ldr	r4, [r3, #4]
 8002564:	600c      	str	r4, [r1, #0]
            y = state.TouchY;
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	6013      	str	r3, [r2, #0]
            return true;
        }
    }

    return false;
}
 800256a:	bd10      	pop	{r4, pc}
    return false;
 800256c:	4620      	mov	r0, r4
 800256e:	e7fc      	b.n	800256a <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
 8002570:	20153c58 	.word	0x20153c58
 8002574:	20153c5c 	.word	0x20153c5c

08002578 <_ZN20STM32TouchController4initEv>:
{
 8002578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (!_initialized)
 800257a:	4c09      	ldr	r4, [pc, #36]	; (80025a0 <_ZN20STM32TouchController4initEv+0x28>)
 800257c:	7820      	ldrb	r0, [r4, #0]
 800257e:	b968      	cbnz	r0, 800259c <_ZN20STM32TouchController4initEv+0x24>
        TsInit.Width = HAL::DISPLAY_WIDTH;
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <_ZN20STM32TouchController4initEv+0x2c>)
        if (BSP_TS_Init(0, &TsInit) == BSP_ERROR_NONE)
 8002582:	4669      	mov	r1, sp
        TsInit.Width = HAL::DISPLAY_WIDTH;
 8002584:	881b      	ldrh	r3, [r3, #0]
        TsInit.Accuracy = 0;
 8002586:	9003      	str	r0, [sp, #12]
        TsInit.Width = HAL::DISPLAY_WIDTH;
 8002588:	9300      	str	r3, [sp, #0]
        TsInit.Height = HAL::DISPLAY_HEIGHT;
 800258a:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <_ZN20STM32TouchController4initEv+0x30>)
 800258c:	881b      	ldrh	r3, [r3, #0]
        TsInit.Orientation = TS_ORIENTATION_PORTRAIT;
 800258e:	e9cd 3001 	strd	r3, r0, [sp, #4]
        if (BSP_TS_Init(0, &TsInit) == BSP_ERROR_NONE)
 8002592:	f005 f8a3 	bl	80076dc <BSP_TS_Init>
 8002596:	b908      	cbnz	r0, 800259c <_ZN20STM32TouchController4initEv+0x24>
            _initialized = true;
 8002598:	2301      	movs	r3, #1
 800259a:	7023      	strb	r3, [r4, #0]
}
 800259c:	b004      	add	sp, #16
 800259e:	bd10      	pop	{r4, pc}
 80025a0:	20153c58 	.word	0x20153c58
 80025a4:	201984ec 	.word	0x201984ec
 80025a8:	201984ee 	.word	0x201984ee

080025ac <HAL_GPIO_EXTI_Falling_Callback>:
    if (GPIO_Pin == TS_INT_PIN)
 80025ac:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 80025b0:	b508      	push	{r3, lr}
    if (GPIO_Pin == TS_INT_PIN)
 80025b2:	d10d      	bne.n	80025d0 <HAL_GPIO_EXTI_Falling_Callback+0x24>
        if (_initialized)
 80025b4:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <HAL_GPIO_EXTI_Falling_Callback+0x28>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b153      	cbz	r3, 80025d0 <HAL_GPIO_EXTI_Falling_Callback+0x24>
            if (BSP_TS_GetState(0, &state) != BSP_ERROR_NONE)
 80025ba:	2000      	movs	r0, #0
 80025bc:	4906      	ldr	r1, [pc, #24]	; (80025d8 <HAL_GPIO_EXTI_Falling_Callback+0x2c>)
 80025be:	f005 f929 	bl	8007814 <BSP_TS_GetState>
 80025c2:	b128      	cbz	r0, 80025d0 <HAL_GPIO_EXTI_Falling_Callback+0x24>
                assert(0 && "Failed to read TS state");
 80025c4:	213b      	movs	r1, #59	; 0x3b
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 80025c8:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <HAL_GPIO_EXTI_Falling_Callback+0x34>)
 80025ca:	4806      	ldr	r0, [pc, #24]	; (80025e4 <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 80025cc:	f027 f816 	bl	80295fc <__assert_func>
}
 80025d0:	bd08      	pop	{r3, pc}
 80025d2:	bf00      	nop
 80025d4:	20153c58 	.word	0x20153c58
 80025d8:	20153c5c 	.word	0x20153c5c
 80025dc:	0802ad4c 	.word	0x0802ad4c
 80025e0:	0802ad6b 	.word	0x0802ad6b
 80025e4:	0802ad99 	.word	0x0802ad99

080025e8 <_ZN8touchgfx4GPIO4initEv>:
 * Perform configuration of IO pins.
 */
void GPIO::init()
{

}
 80025e8:	4770      	bx	lr
	...

080025ec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 80025ec:	2803      	cmp	r0, #3
 80025ee:	d814      	bhi.n	800261a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2e>
 80025f0:	e8df f000 	tbb	[pc, r0]
 80025f4:	0f0a0702 	.word	0x0f0a0702
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 80025f8:	2201      	movs	r2, #1
 80025fa:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 80025fc:	4807      	ldr	r0, [pc, #28]	; (800261c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x30>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 80025fe:	f008 b83b 	b.w	800a678 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 8002602:	2201      	movs	r2, #1
 8002604:	4611      	mov	r1, r2
 8002606:	e7f9      	b.n	80025fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x10>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 8002608:	2201      	movs	r2, #1
 800260a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 800260e:	4804      	ldr	r0, [pc, #16]	; (8002620 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x34>)
 8002610:	e7f5      	b.n	80025fe <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x12>
 8002612:	2201      	movs	r2, #1
 8002614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002618:	e7f9      	b.n	800260e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x22>
#endif
        break;
    }
}
 800261a:	4770      	bx	lr
 800261c:	42020c00 	.word	0x42020c00
 8002620:	42021400 	.word	0x42021400

08002624 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8002624:	2803      	cmp	r0, #3
 8002626:	d814      	bhi.n	8002652 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2e>
 8002628:	e8df f000 	tbb	[pc, r0]
 800262c:	0f0a0702 	.word	0x0f0a0702
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8002630:	2200      	movs	r2, #0
 8002632:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 8002634:	4807      	ldr	r0, [pc, #28]	; (8002654 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8002636:	f008 b81f 	b.w	800a678 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 800263a:	2200      	movs	r2, #0
 800263c:	2101      	movs	r1, #1
 800263e:	e7f9      	b.n	8002634 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x10>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8002640:	2200      	movs	r2, #0
 8002642:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8002646:	4804      	ldr	r0, [pc, #16]	; (8002658 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x34>)
 8002648:	e7f5      	b.n	8002636 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x12>
 800264a:	2200      	movs	r2, #0
 800264c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002650:	e7f9      	b.n	8002646 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x22>
#endif
        break;
    }
}
 8002652:	4770      	bx	lr
 8002654:	42020c00 	.word	0x42020c00
 8002658:	42021400 	.word	0x42021400

0800265c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 800265c:	2803      	cmp	r0, #3
 800265e:	d810      	bhi.n	8002682 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x26>
 8002660:	e8df f000 	tbb	[pc, r0]
 8002664:	0c080602 	.word	0x0c080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8002668:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800266a:	4806      	ldr	r0, [pc, #24]	; (8002684 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800266c:	f008 b81c 	b.w	800a6a8 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8002670:	2101      	movs	r1, #1
 8002672:	e7fa      	b.n	800266a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8002674:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8002678:	4803      	ldr	r0, [pc, #12]	; (8002688 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 800267a:	e7f7      	b.n	800266c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 800267c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002680:	e7fa      	b.n	8002678 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x1c>
#endif
        break;
    }
}
 8002682:	4770      	bx	lr
 8002684:	42020c00 	.word	0x42020c00
 8002688:	42021400 	.word	0x42021400

0800268c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 800268c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 800268e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8002692:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8002696:	4770      	bx	lr

08002698 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8002698:	2000      	movs	r0, #0
 800269a:	4770      	bx	lr

0800269c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800269c:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800269e:	3900      	subs	r1, #0
 80026a0:	bf18      	it	ne
 80026a2:	2101      	movne	r1, #1
 80026a4:	4b01      	ldr	r3, [pc, #4]	; (80026ac <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 80026a6:	7019      	strb	r1, [r3, #0]
    }
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	201984f7 	.word	0x201984f7

080026b0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80026b0:	2000      	movs	r0, #0
 80026b2:	4770      	bx	lr

080026b4 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80026b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80026b6:	b10b      	cbz	r3, 80026bc <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80026b8:	4608      	mov	r0, r1
 80026ba:	4718      	bx	r3
        }
    }
 80026bc:	4770      	bx	lr

080026be <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80026be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026c2:	4770      	bx	lr

080026c4 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80026c4:	6840      	ldr	r0, [r0, #4]
 80026c6:	6803      	ldr	r3, [r0, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	4718      	bx	r3

080026cc <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 80026cc:	4770      	bx	lr

080026ce <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 80026ce:	4770      	bx	lr

080026d0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80026d0:	4770      	bx	lr
	...

080026d4 <_ZN11TouchGFXHAL10initializeEv>:
using namespace touchgfx;

KeySampler btnctrl;

void TouchGFXHAL::initialize()
{
 80026d4:	b538      	push	{r3, r4, r5, lr}
 80026d6:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80026d8:	f000 fd4e 	bl	8003178 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        buttonController = btnCtrl;
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <_ZN11TouchGFXHAL10initializeEv+0x2c>)
    setButtonController(&btnctrl);
    lockDMAToFrontPorch(false);
    GPIO::init();
    instrumentation.init();
 80026de:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
 80026e2:	6163      	str	r3, [r4, #20]
        lockDMAToPorch = enableLock;
 80026e4:	2300      	movs	r3, #0
 80026e6:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
    GPIO::init();
 80026ea:	f7ff ff7d 	bl	80025e8 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 80026ee:	4628      	mov	r0, r5
 80026f0:	f7ff fec0 	bl	8002474 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 80026f4:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 80026f6:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 80026f8:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 80026fc:	bd38      	pop	{r3, r4, r5, pc}
 80026fe:	bf00      	nop
 8002700:	20153c6c 	.word	0x20153c6c

08002704 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8002704:	f000 bd2a 	b.w	800315c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08002708 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8002708:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 800270a:	2500      	movs	r5, #0
 800270c:	4c10      	ldr	r4, [pc, #64]	; (8002750 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt+0x48>)
 800270e:	9500      	str	r5, [sp, #0]
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002716:	f022 0208 	bic.w	r2, r2, #8
 800271a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800271e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	9b00      	ldr	r3, [sp, #0]
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800272a:	f000 fd1d 	bl	8003168 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
    __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	9501      	str	r5, [sp, #4]
 8002732:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002736:	f042 0208 	orr.w	r2, r2, #8
 800273a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800273e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	9b01      	ldr	r3, [sp, #4]
}
 800274a:	b003      	add	sp, #12
 800274c:	bd30      	pop	{r4, r5, pc}
 800274e:	bf00      	nop
 8002750:	20152e90 	.word	0x20152e90

08002754 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8002754:	f000 bd38 	b.w	80031c8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08002758 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:
}

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8002758:	f000 bd38 	b.w	80031cc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

0800275c <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800275c:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    TouchGFXGeneratedHAL::configureInterrupts();
 800275e:	f000 fcd7 	bl	8003110 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002762:	2290      	movs	r2, #144	; 0x90
 8002764:	4b01      	ldr	r3, [pc, #4]	; (800276c <_ZN11TouchGFXHAL19configureInterruptsEv+0x10>)
 8002766:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
    NVIC_SetPriority(DSI_IRQn, 9);
}
 800276a:	bd08      	pop	{r3, pc}
 800276c:	e000e100 	.word	0xe000e100

08002770 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8002770:	f000 bcda 	b.w	8003128 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08002774 <_ZN11TouchGFXHAL10beginFrameEv>:
}

bool TouchGFXHAL::beginFrame()
{
    return TouchGFXGeneratedHAL::beginFrame();
 8002774:	f000 bd1c 	b.w	80031b0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>

08002778 <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
    if (!display_on)
 8002778:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <_ZN11TouchGFXHAL8endFrameEv+0x38>)
{
 800277a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!display_on)
 800277c:	7819      	ldrb	r1, [r3, #0]
{
 800277e:	4604      	mov	r4, r0
    if (!display_on)
 8002780:	b979      	cbnz	r1, 80027a2 <_ZN11TouchGFXHAL8endFrameEv+0x2a>
    {
        display_on = true;
 8002782:	2201      	movs	r2, #1
        /* Enable the LCD, Send Display on DCS command to display */
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, DSI_SET_DISPLAY_ON, 0x00);
        /* Start PWM Timer channel */
        (void)HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002784:	4d0b      	ldr	r5, [pc, #44]	; (80027b4 <_ZN11TouchGFXHAL8endFrameEv+0x3c>)
        display_on = true;
 8002786:	701a      	strb	r2, [r3, #0]
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, DSI_SET_DISPLAY_ON, 0x00);
 8002788:	480b      	ldr	r0, [pc, #44]	; (80027b8 <_ZN11TouchGFXHAL8endFrameEv+0x40>)
 800278a:	2329      	movs	r3, #41	; 0x29
 800278c:	2215      	movs	r2, #21
 800278e:	9100      	str	r1, [sp, #0]
 8002790:	f007 f99d 	bl	8009ace <HAL_DSI_ShortWrite>
        (void)HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002794:	2104      	movs	r1, #4
 8002796:	4628      	mov	r0, r5
 8002798:	f00e fad8 	bl	8010d4c <HAL_TIM_PWM_Start>
        /* Enable Backlight by setting Brightness to 100% */
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 2U * 100);
 800279c:	22c8      	movs	r2, #200	; 0xc8
 800279e:	682b      	ldr	r3, [r5, #0]
 80027a0:	639a      	str	r2, [r3, #56]	; 0x38
    }

    TouchGFXGeneratedHAL::endFrame();
 80027a2:	4620      	mov	r0, r4
}
 80027a4:	b003      	add	sp, #12
 80027a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    TouchGFXGeneratedHAL::endFrame();
 80027aa:	f000 bd03 	b.w	80031b4 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
 80027ae:	bf00      	nop
 80027b0:	20153c68 	.word	0x20153c68
 80027b4:	20152fbc 	.word	0x20152fbc
 80027b8:	20152e90 	.word	0x20152e90

080027bc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80027bc:	b510      	push	{r4, lr}
 80027be:	4604      	mov	r4, r0
        swapFrameBuffers();
 80027c0:	f015 fa14 	bl	8017bec <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	4620      	mov	r0, r4
    }
 80027c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 80027cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80027d0:	4718      	bx	r3

080027d2 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 80027d2:	f014 bc55 	b.w	8017080 <_ZN8touchgfx3HAL16flushFrameBufferEv>

080027d6 <_ZN11TouchGFXHALD0Ev>:
 80027d6:	b510      	push	{r4, lr}
 80027d8:	4604      	mov	r4, r0
 80027da:	21b4      	movs	r1, #180	; 0xb4
 80027dc:	f026 fee1 	bl	80295a2 <_ZdlPvj>
 80027e0:	4620      	mov	r0, r4
 80027e2:	bd10      	pop	{r4, pc}

080027e4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 80027e4:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 80027e8:	b11b      	cbz	r3, 80027f2 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 80027ea:	6840      	ldr	r0, [r0, #4]
 80027ec:	6803      	ldr	r3, [r0, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4718      	bx	r3
    }
 80027f2:	4618      	mov	r0, r3
 80027f4:	4770      	bx	lr
	...

080027f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 80027f8:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80027fa:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 80027fe:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8002802:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 8002804:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 8002806:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8002808:	d009      	beq.n	800281e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 800280a:	b93a      	cbnz	r2, 800281c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                const uint16_t tmp = DISPLAY_HEIGHT;
 800280c:	490a      	ldr	r1, [pc, #40]	; (8002838 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800280e:	4a0b      	ldr	r2, [pc, #44]	; (800283c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002810:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002812:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8002814:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8002816:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002818:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 800281a:	701a      	strb	r2, [r3, #0]
    }
 800281c:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 800281e:	2a00      	cmp	r2, #0
 8002820:	d0fc      	beq.n	800281c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002822:	4a06      	ldr	r2, [pc, #24]	; (800283c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002824:	4904      	ldr	r1, [pc, #16]	; (8002838 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002826:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002828:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800282a:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 800282c:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800282e:	2200      	movs	r2, #0
 8002830:	e7f3      	b.n	800281a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8002832:	bf00      	nop
 8002834:	201984f0 	.word	0x201984f0
 8002838:	201984ee 	.word	0x201984ee
 800283c:	201984ec 	.word	0x201984ec

08002840 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8002840:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	428b      	cmp	r3, r1
 8002848:	d803      	bhi.n	8002852 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	4293      	cmp	r3, r2
 8002850:	d905      	bls.n	800285e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8002852:	219e      	movs	r1, #158	; 0x9e
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8002856:	4a07      	ldr	r2, [pc, #28]	; (8002874 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8002858:	4807      	ldr	r0, [pc, #28]	; (8002878 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800285a:	f026 fecf 	bl	80295fc <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002860:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8002862:	4b07      	ldr	r3, [pc, #28]	; (8002880 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8002864:	801a      	strh	r2, [r3, #0]
    }
 8002866:	bd08      	pop	{r3, pc}
 8002868:	201984ec 	.word	0x201984ec
 800286c:	201984ee 	.word	0x201984ee
 8002870:	0802ae00 	.word	0x0802ae00
 8002874:	0802ae63 	.word	0x0802ae63
 8002878:	0802aea6 	.word	0x0802aea6
 800287c:	201984f2 	.word	0x201984f2
 8002880:	201984f4 	.word	0x201984f4

08002884 <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 8002884:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 8002886:	f000 fcc3 	bl	8003210 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800288e:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <_ZN11TouchGFXHAL17disableInterruptsEv+0x1c>)
 8002890:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002894:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002898:	f3bf 8f6f 	isb	sy
}
 800289c:	bd08      	pop	{r3, pc}
 800289e:	bf00      	nop
 80028a0:	e000e100 	.word	0xe000e100

080028a4 <_ZN11TouchGFXHAL16enableInterruptsEv>:
{
 80028a4:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::enableInterrupts();
 80028a6:	f000 fccd 	bl	8003244 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ae:	4b01      	ldr	r3, [pc, #4]	; (80028b4 <_ZN11TouchGFXHAL16enableInterruptsEv+0x10>)
 80028b0:	611a      	str	r2, [r3, #16]
}
 80028b2:	bd08      	pop	{r3, pc}
 80028b4:	e000e100 	.word	0xe000e100

080028b8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 80028b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80028ba:	460c      	mov	r4, r1
 80028bc:	b931      	cbnz	r1, 80028cc <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x14>
 80028be:	f240 21d2 	movw	r1, #722	; 0x2d2
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x78>)
 80028c4:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x7c>)
 80028c6:	481c      	ldr	r0, [pc, #112]	; (8002938 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x80>)
 80028c8:	f026 fe98 	bl	80295fc <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80028cc:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80028d0:	3a00      	subs	r2, #0
 80028d2:	bf18      	it	ne
 80028d4:	2201      	movne	r2, #1
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 80028d6:	2500      	movs	r5, #0
 80028d8:	4918      	ldr	r1, [pc, #96]	; (800293c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x84>)
 80028da:	4e19      	ldr	r6, [pc, #100]	; (8002940 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x88>)
 80028dc:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 80028de:	6802      	ldr	r2, [r0, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80028e6:	4790      	blx	r2
 80028e8:	6833      	ldr	r3, [r6, #0]
 80028ea:	9500      	str	r5, [sp, #0]
 80028ec:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 80028f0:	4621      	mov	r1, r4
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 80028f2:	f022 0208 	bic.w	r2, r2, #8
 80028f6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80028fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 80028fe:	462a      	mov	r2, r5
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	9300      	str	r3, [sp, #0]
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 8002906:	480f      	ldr	r0, [pc, #60]	; (8002944 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x8c>)
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 8002908:	9b00      	ldr	r3, [sp, #0]
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 800290a:	f009 fab1 	bl	800be70 <HAL_LTDC_SetAddress>
    __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 800290e:	6833      	ldr	r3, [r6, #0]
 8002910:	9501      	str	r5, [sp, #4]
 8002912:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002916:	f042 0208 	orr.w	r2, r2, #8
 800291a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800291e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	9b01      	ldr	r3, [sp, #4]
}
 800292a:	b002      	add	sp, #8
 800292c:	bd70      	pop	{r4, r5, r6, pc}
 800292e:	bf00      	nop
 8002930:	0802aeeb 	.word	0x0802aeeb
 8002934:	0802af23 	.word	0x0802af23
 8002938:	0802aea6 	.word	0x0802aea6
 800293c:	201984f6 	.word	0x201984f6
 8002940:	20152e90 	.word	0x20152e90
 8002944:	20152f14 	.word	0x20152f14

08002948 <tx_low_power_enter>:
#ifdef TX_LOW_POWER
extern "C"
{

    void tx_low_power_enter()
    {
 8002948:	b508      	push	{r3, lr}
        // tgfx task going to sleep
        touchgfx::HAL::getInstance()->setMCUActive(false);
 800294a:	4b03      	ldr	r3, [pc, #12]	; (8002958 <tx_low_power_enter+0x10>)
 800294c:	2100      	movs	r1, #0
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	f015 f966 	bl	8017c20 <_ZN8touchgfx3HAL12setMCUActiveEb>
        __WFI();
 8002954:	bf30      	wfi
    }
 8002956:	bd08      	pop	{r3, pc}
 8002958:	201984f8 	.word	0x201984f8

0800295c <tx_low_power_exit>:
    void tx_low_power_exit()
    {

        // tgfx task waking up
        touchgfx::HAL::getInstance()->setMCUActive(true);
 800295c:	4b02      	ldr	r3, [pc, #8]	; (8002968 <tx_low_power_exit+0xc>)
 800295e:	2101      	movs	r1, #1
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	f015 b95d 	b.w	8017c20 <_ZN8touchgfx3HAL12setMCUActiveEb>
 8002966:	bf00      	nop
 8002968:	201984f8 	.word	0x201984f8

0800296c <_GLOBAL__sub_I_btnctrl>:
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 800296c:	4802      	ldr	r0, [pc, #8]	; (8002978 <_GLOBAL__sub_I_btnctrl+0xc>)
 800296e:	4b03      	ldr	r3, [pc, #12]	; (800297c <_GLOBAL__sub_I_btnctrl+0x10>)
 8002970:	6003      	str	r3, [r0, #0]
        init();
 8002972:	f7ff bdbc 	b.w	80024ee <_ZN8touchgfx10KeySampler4initEv>
 8002976:	bf00      	nop
 8002978:	20153c6c 	.word	0x20153c6c
 800297c:	0802ad38 	.word	0x0802ad38

08002980 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    CHAR* pointer;

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 8002982:	2334      	movs	r3, #52	; 0x34
 8002984:	4a1a      	ldr	r2, [pc, #104]	; (80029f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x70>)
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	491a      	ldr	r1, [pc, #104]	; (80029f4 <_ZN8touchgfx10OSWrappers10initializeEv+0x74>)
 800298a:	2364      	movs	r3, #100	; 0x64
 800298c:	481a      	ldr	r0, [pc, #104]	; (80029f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x78>)
 800298e:	f013 fce1 	bl	8016354 <_txe_byte_pool_create>
 8002992:	4603      	mov	r3, r0
 8002994:	b128      	cbz	r0, 80029a2 <_ZN8touchgfx10OSWrappers10initializeEv+0x22>
                            OSWRAPPER_BYTE_POOL_SIZE) != TX_SUCCESS)
    {
        assert(0 && "Failed to create OSWrapper Pool memory!");
 8002996:	2138      	movs	r1, #56	; 0x38
 8002998:	4b18      	ldr	r3, [pc, #96]	; (80029fc <_ZN8touchgfx10OSWrappers10initializeEv+0x7c>)
 800299a:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)

    /* Allocate the vsync_q.  */
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
                         OSWRAPPER_QUEUE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
    {
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 800299c:	4819      	ldr	r0, [pc, #100]	; (8002a04 <_ZN8touchgfx10OSWrappers10initializeEv+0x84>)
 800299e:	f026 fe2d 	bl	80295fc <__assert_func>
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 80029a2:	2204      	movs	r2, #4
 80029a4:	4814      	ldr	r0, [pc, #80]	; (80029f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x78>)
 80029a6:	a903      	add	r1, sp, #12
 80029a8:	f013 fc60 	bl	801626c <_txe_byte_allocate>
 80029ac:	b118      	cbz	r0, 80029b6 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 80029ae:	213f      	movs	r1, #63	; 0x3f
 80029b0:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <_ZN8touchgfx10OSWrappers10initializeEv+0x88>)
 80029b2:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 80029b4:	e7f2      	b.n	800299c <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }

    // Create a queue of length 1
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 80029b6:	2304      	movs	r3, #4
 80029b8:	2238      	movs	r2, #56	; 0x38
 80029ba:	4914      	ldr	r1, [pc, #80]	; (8002a0c <_ZN8touchgfx10OSWrappers10initializeEv+0x8c>)
 80029bc:	e9cd 3200 	strd	r3, r2, [sp]
 80029c0:	4813      	ldr	r0, [pc, #76]	; (8002a10 <_ZN8touchgfx10OSWrappers10initializeEv+0x90>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	9b03      	ldr	r3, [sp, #12]
 80029c6:	f013 fd65 	bl	8016494 <_txe_queue_create>
 80029ca:	b118      	cbz	r0, 80029d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>
                        pointer, OSWRAPPER_QUEUE_SIZE) != TX_SUCCESS)
    {
        assert(0 && "Failed to create Vsync Message Queue!");
 80029cc:	2146      	movs	r1, #70	; 0x46
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <_ZN8touchgfx10OSWrappers10initializeEv+0x94>)
 80029d0:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 80029d2:	e7e3      	b.n	800299c <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }

    // Create the Framebuffer Semaphore (Binary)
    if (tx_semaphore_create(&frame_buffer_sem, (CHAR*) "FrameBuffer Semaphore", 1) != TX_SUCCESS)
 80029d4:	231c      	movs	r3, #28
 80029d6:	2201      	movs	r2, #1
 80029d8:	490f      	ldr	r1, [pc, #60]	; (8002a18 <_ZN8touchgfx10OSWrappers10initializeEv+0x98>)
 80029da:	4810      	ldr	r0, [pc, #64]	; (8002a1c <_ZN8touchgfx10OSWrappers10initializeEv+0x9c>)
 80029dc:	f013 fe9e 	bl	801671c <_txe_semaphore_create>
 80029e0:	b118      	cbz	r0, 80029ea <_ZN8touchgfx10OSWrappers10initializeEv+0x6a>
    {
        assert(0 && "Failed to create FrameBuffer Semaphore!");
 80029e2:	214c      	movs	r1, #76	; 0x4c
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <_ZN8touchgfx10OSWrappers10initializeEv+0xa0>)
 80029e6:	4a06      	ldr	r2, [pc, #24]	; (8002a00 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 80029e8:	e7d8      	b.n	800299c <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }
}
 80029ea:	b005      	add	sp, #20
 80029ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80029f0:	20153c90 	.word	0x20153c90
 80029f4:	0802b04c 	.word	0x0802b04c
 80029f8:	20153cf4 	.word	0x20153cf4
 80029fc:	0802b060 	.word	0x0802b060
 8002a00:	0802b08f 	.word	0x0802b08f
 8002a04:	0802b0be 	.word	0x0802b0be
 8002a08:	0802b10d 	.word	0x0802b10d
 8002a0c:	0802b14b 	.word	0x0802b14b
 8002a10:	20153d28 	.word	0x20153d28
 8002a14:	0802b15f 	.word	0x0802b15f
 8002a18:	0802b18c 	.word	0x0802b18c
 8002a1c:	20153c74 	.word	0x20153c74
 8002a20:	0802b1a2 	.word	0x0802b1a2

08002a24 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8002a24:	b508      	push	{r3, lr}
    if (tx_semaphore_get(&frame_buffer_sem, TX_WAIT_FOREVER) != TX_SUCCESS)
 8002a26:	f04f 31ff 	mov.w	r1, #4294967295
 8002a2a:	4805      	ldr	r0, [pc, #20]	; (8002a40 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x1c>)
 8002a2c:	f013 ff0c 	bl	8016848 <_txe_semaphore_get>
 8002a30:	b128      	cbz	r0, 8002a3e <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x1a>
    {
        assert(0 && "Failed to get FrameBuffer Semaphore!");
 8002a32:	2157      	movs	r1, #87	; 0x57
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x20>)
 8002a36:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x24>)
 8002a38:	4804      	ldr	r0, [pc, #16]	; (8002a4c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 8002a3a:	f026 fddf 	bl	80295fc <__assert_func>
    }
}
 8002a3e:	bd08      	pop	{r3, pc}
 8002a40:	20153c74 	.word	0x20153c74
 8002a44:	0802b1d1 	.word	0x0802b1d1
 8002a48:	0802b1fd 	.word	0x0802b1fd
 8002a4c:	0802b0be 	.word	0x0802b0be

08002a50 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    if (!frame_buffer_sem.tx_semaphore_count)
 8002a50:	4806      	ldr	r0, [pc, #24]	; (8002a6c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1c>)
{
 8002a52:	b508      	push	{r3, lr}
    if (!frame_buffer_sem.tx_semaphore_count)
 8002a54:	6883      	ldr	r3, [r0, #8]
 8002a56:	b943      	cbnz	r3, 8002a6a <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1a>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 8002a58:	f013 ff38 	bl	80168cc <_txe_semaphore_put>
 8002a5c:	b128      	cbz	r0, 8002a6a <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1a>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 8002a5e:	2164      	movs	r1, #100	; 0x64
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x20>)
 8002a62:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x24>)
 8002a64:	4804      	ldr	r0, [pc, #16]	; (8002a78 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 8002a66:	f026 fdc9 	bl	80295fc <__assert_func>
        }
    }
}
 8002a6a:	bd08      	pop	{r3, pc}
 8002a6c:	20153c74 	.word	0x20153c74
 8002a70:	0802b23a 	.word	0x0802b23a
 8002a74:	0802b266 	.word	0x0802b266
 8002a78:	0802b0be 	.word	0x0802b0be

08002a7c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    if (tx_semaphore_get(&frame_buffer_sem, TX_NO_WAIT) != TX_SUCCESS)
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4801      	ldr	r0, [pc, #4]	; (8002a84 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x8>)
 8002a80:	f013 bee2 	b.w	8016848 <_txe_semaphore_get>
 8002a84:	20153c74 	.word	0x20153c74

08002a88 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8002a88:	b538      	push	{r3, r4, r5, lr}
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002a8a:	f3ef 8510 	mrs	r5, PRIMASK
    int_posture = __get_interrupt_posture();

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8002a8e:	b672      	cpsid	i
    TX_INTERRUPT_SAVE_AREA
    TX_DISABLE;
    _tx_thread_preempt_disable++;
 8002a90:	4c0c      	ldr	r4, [pc, #48]	; (8002ac4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
    if (!frame_buffer_sem.tx_semaphore_count)
 8002a92:	480d      	ldr	r0, [pc, #52]	; (8002ac8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x40>)
    _tx_thread_preempt_disable++;
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	3301      	adds	r3, #1
 8002a98:	6023      	str	r3, [r4, #0]
    if (!frame_buffer_sem.tx_semaphore_count)
 8002a9a:	6883      	ldr	r3, [r0, #8]
 8002a9c:	b943      	cbnz	r3, 8002ab0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 8002a9e:	f013 ff15 	bl	80168cc <_txe_semaphore_put>
 8002aa2:	b128      	cbz	r0, 8002ab0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 8002aa4:	218a      	movs	r1, #138	; 0x8a
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x44>)
 8002aa8:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x48>)
 8002aaa:	480a      	ldr	r0, [pc, #40]	; (8002ad4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4c>)
 8002aac:	f026 fda6 	bl	80295fc <__assert_func>
        }
    }
    _tx_thread_preempt_disable--;
 8002ab0:	6823      	ldr	r3, [r4, #0]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	6023      	str	r3, [r4, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002ab6:	f385 8810 	msr	PRIMASK, r5
    TX_RESTORE;
    _tx_thread_system_preempt_check();
}
 8002aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _tx_thread_system_preempt_check();
 8002abe:	f012 bebf 	b.w	8015840 <_tx_thread_system_preempt_check>
 8002ac2:	bf00      	nop
 8002ac4:	20197f7c 	.word	0x20197f7c
 8002ac8:	20153c74 	.word	0x20153c74
 8002acc:	0802b23a 	.word	0x0802b23a
 8002ad0:	0802b2a3 	.word	0x0802b2a3
 8002ad4:	0802b0be 	.word	0x0802b0be

08002ad8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
    UINT ret;

    // Send the message only if the queue is empty.
    // This call is from ISR, so no need to re-send
    // the message if not yet consumed by threads
    if (vsync_q.tx_queue_enqueued == 0)
 8002ad8:	4807      	ldr	r0, [pc, #28]	; (8002af8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
{
 8002ada:	b508      	push	{r3, lr}
    if (vsync_q.tx_queue_enqueued == 0)
 8002adc:	6902      	ldr	r2, [r0, #16]
 8002ade:	b94a      	cbnz	r2, 8002af4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>
    {
        // This is supposed to be called from Vsync Interrupt Handler
        // So wait_option should be equal to TX_NO_WAIT
        ret = tx_queue_send(&vsync_q, &dummy_msg, TX_NO_WAIT);
 8002ae0:	4906      	ldr	r1, [pc, #24]	; (8002afc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x24>)
 8002ae2:	f013 fdd1 	bl	8016688 <_txe_queue_send>
        if (ret != TX_SUCCESS)
 8002ae6:	b128      	cbz	r0, 8002af4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>
        {
            assert(0 && "Failed to Signal Vsync!");
 8002ae8:	21a6      	movs	r1, #166	; 0xa6
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x28>)
 8002aec:	4a05      	ldr	r2, [pc, #20]	; (8002b04 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>)
 8002aee:	4806      	ldr	r0, [pc, #24]	; (8002b08 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x30>)
 8002af0:	f026 fd84 	bl	80295fc <__assert_func>
        }
    }
}
 8002af4:	bd08      	pop	{r3, pc}
 8002af6:	bf00      	nop
 8002af8:	20153d28 	.word	0x20153d28
 8002afc:	20000004 	.word	0x20000004
 8002b00:	0802b2e7 	.word	0x0802b2e7
 8002b04:	0802b306 	.word	0x0802b306
 8002b08:	0802b0be 	.word	0x0802b0be

08002b0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002b0c:	b508      	push	{r3, lr}
    UINT ret;

    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_NO_WAIT);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	490a      	ldr	r1, [pc, #40]	; (8002b3c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 8002b12:	480b      	ldr	r0, [pc, #44]	; (8002b40 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 8002b14:	f013 fd6e 	bl	80165f4 <_txe_queue_receive>

    if ((ret == TX_SUCCESS) || (ret == TX_QUEUE_EMPTY))
 8002b18:	b138      	cbz	r0, 8002b2a <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
 8002b1a:	280a      	cmp	r0, #10
 8002b1c:	d005      	beq.n	8002b2a <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
    }

    if (ret != TX_SUCCESS)
    {
        assert(0 && "Failed to Wait for Vsync!");
 8002b1e:	21c9      	movs	r1, #201	; 0xc9
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x38>)
 8002b22:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x3c>)
 8002b24:	4809      	ldr	r0, [pc, #36]	; (8002b4c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x40>)
 8002b26:	f026 fd69 	bl	80295fc <__assert_func>
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
 8002b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2e:	4903      	ldr	r1, [pc, #12]	; (8002b3c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 8002b30:	4803      	ldr	r0, [pc, #12]	; (8002b40 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 8002b32:	f013 fd5f 	bl	80165f4 <_txe_queue_receive>
    if (ret != TX_SUCCESS)
 8002b36:	2800      	cmp	r0, #0
 8002b38:	d1f1      	bne.n	8002b1e <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x12>
    }
}
 8002b3a:	bd08      	pop	{r3, pc}
 8002b3c:	20000004 	.word	0x20000004
 8002b40:	20153d28 	.word	0x20153d28
 8002b44:	0802b336 	.word	0x0802b336
 8002b48:	0802b357 	.word	0x0802b357
 8002b4c:	0802b0be 	.word	0x0802b0be

08002b50 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8002b50:	6803      	ldr	r3, [r0, #0]
 8002b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b54:	4718      	bx	r3

08002b56 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002b56:	2001      	movs	r0, #1
 8002b58:	4770      	bx	lr

08002b5a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8002b5a:	6803      	ldr	r3, [r0, #0]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	4718      	bx	r3

08002b60 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002b60:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8002b64:	4770      	bx	lr
	...

08002b68 <_ZN8STM32DMAD1Ev>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
STM32DMA::~STM32DMA()
 8002b6c:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <_ZN8STM32DMAD1Ev+0x18>)
 8002b6e:	6003      	str	r3, [r0, #0]
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <_ZN8STM32DMAD1Ev+0x1c>)
 8002b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 8002b76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b7a:	f3bf 8f6f 	isb	sy
}
 8002b7e:	4770      	bx	lr
 8002b80:	0802b4e8 	.word	0x0802b4e8
 8002b84:	e000e100 	.word	0xe000e100

08002b88 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002b88:	b510      	push	{r4, lr}
 8002b8a:	4604      	mov	r4, r0
}
 8002b8c:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8002b90:	f7ff ffea 	bl	8002b68 <_ZN8STM32DMAD1Ev>
 8002b94:	4620      	mov	r0, r4
 8002b96:	f026 fd04 	bl	80295a2 <_ZdlPvj>
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	bd10      	pop	{r4, pc}
	...

08002ba0 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <_ZN8STM32DMA10initializeEv+0x40>)
{
 8002ba2:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ba4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ba8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002bb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002bb4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002bb8:	9201      	str	r2, [sp, #4]
 8002bba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002bbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bbe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002bc2:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002bc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <_ZN8STM32DMA10initializeEv+0x44>)
 8002bce:	4a06      	ldr	r2, [pc, #24]	; (8002be8 <_ZN8STM32DMA10initializeEv+0x48>)
 8002bd0:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <_ZN8STM32DMA10initializeEv+0x4c>)
 8002bd8:	60da      	str	r2, [r3, #12]
}
 8002bda:	b002      	add	sp, #8
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	46020c00 	.word	0x46020c00
 8002be4:	20152e30 	.word	0x20152e30
 8002be8:	08002bf1 	.word	0x08002bf1
 8002bec:	e000e100 	.word	0xe000e100

08002bf0 <DMA2D_XferCpltCallback>:
        return instance;
 8002bf0:	4b02      	ldr	r3, [pc, #8]	; (8002bfc <DMA2D_XferCpltCallback+0xc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002bf6:	6803      	ldr	r3, [r0, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	4718      	bx	r3
 8002bfc:	201984f8 	.word	0x201984f8

08002c00 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002c00:	b570      	push	{r4, r5, r6, lr}
 8002c02:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002c04:	2600      	movs	r6, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002c06:	4625      	mov	r5, r4
 8002c08:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <_ZN8STM32DMAC1Ev+0x30>)
 8002c0a:	300c      	adds	r0, #12
 8002c0c:	6060      	str	r0, [r4, #4]
 8002c0e:	7226      	strb	r6, [r4, #8]
 8002c10:	7266      	strb	r6, [r4, #9]
 8002c12:	f845 3b20 	str.w	r3, [r5], #32
 8002c16:	2260      	movs	r2, #96	; 0x60
 8002c18:	4629      	mov	r1, r5
 8002c1a:	f015 f93f 	bl	8017e9c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002c1e:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8002c22:	60ee      	str	r6, [r5, #12]
 8002c24:	3524      	adds	r5, #36	; 0x24
 8002c26:	42ab      	cmp	r3, r5
 8002c28:	d1fb      	bne.n	8002c22 <_ZN8STM32DMAC1Ev+0x22>
}
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	bd70      	pop	{r4, r5, r6, pc}
 8002c2e:	bf00      	nop
 8002c30:	0802b4e8 	.word	0x0802b4e8

08002c34 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8002c34:	b508      	push	{r3, lr}
    switch (format)
 8002c36:	290b      	cmp	r1, #11
 8002c38:	d80b      	bhi.n	8002c52 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8002c3a:	e8df f001 	tbb	[pc, r1]
 8002c3e:	0612      	.short	0x0612
 8002c40:	0a0a0a10 	.word	0x0a0a0a10
 8002c44:	0808080a 	.word	0x0808080a
 8002c48:	0808      	.short	0x0808
 8002c4a:	2001      	movs	r0, #1
}
 8002c4c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002c4e:	2005      	movs	r0, #5
        break;
 8002c50:	e7fc      	b.n	8002c4c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8002c52:	2166      	movs	r1, #102	; 0x66
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8002c56:	4a05      	ldr	r2, [pc, #20]	; (8002c6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002c58:	4805      	ldr	r0, [pc, #20]	; (8002c70 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8002c5a:	f026 fccf 	bl	80295fc <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002c5e:	2000      	movs	r0, #0
 8002c60:	e7f4      	b.n	8002c4c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002c62:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002c64:	e7f2      	b.n	8002c4c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8002c66:	bf00      	nop
 8002c68:	0802b388 	.word	0x0802b388
 8002c6c:	0802b3a3 	.word	0x0802b3a3
 8002c70:	0802b3ed 	.word	0x0802b3ed

08002c74 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8002c74:	b508      	push	{r3, lr}
    switch (format)
 8002c76:	290a      	cmp	r1, #10
 8002c78:	d809      	bhi.n	8002c8e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8002c7a:	e8df f001 	tbb	[pc, r1]
 8002c7e:	0610      	.short	0x0610
 8002c80:	0808080e 	.word	0x0808080e
 8002c84:	06060608 	.word	0x06060608
 8002c88:	06          	.byte	0x06
 8002c89:	00          	.byte	0x00
 8002c8a:	2001      	movs	r0, #1
}
 8002c8c:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002c8e:	2187      	movs	r1, #135	; 0x87
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8002c92:	4a05      	ldr	r2, [pc, #20]	; (8002ca8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8002c94:	4805      	ldr	r0, [pc, #20]	; (8002cac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002c96:	f026 fcb1 	bl	80295fc <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	e7f6      	b.n	8002c8c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002c9e:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002ca0:	e7f4      	b.n	8002c8c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8002ca2:	bf00      	nop
 8002ca4:	0802b388 	.word	0x0802b388
 8002ca8:	0802b43a 	.word	0x0802b43a
 8002cac:	0802b3ed 	.word	0x0802b3ed

08002cb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002cb4:	7f4f      	ldrb	r7, [r1, #29]
{
 8002cb6:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002cb8:	4639      	mov	r1, r7
{
 8002cba:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002cbc:	f7ff ffba 	bl	8002c34 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002cc0:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002cc4:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002cc6:	4641      	mov	r1, r8
 8002cc8:	4648      	mov	r0, r9
 8002cca:	f7ff ffb3 	bl	8002c34 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002cce:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002cd0:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002cd2:	4648      	mov	r0, r9
 8002cd4:	f7ff ffce 	bl	8002c74 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cd8:	8aa1      	ldrh	r1, [r4, #20]
 8002cda:	8b62      	ldrh	r2, [r4, #26]
 8002cdc:	4b42      	ldr	r3, [pc, #264]	; (8002de8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002cde:	1a52      	subs	r2, r2, r1
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ce2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002ce4:	8b22      	ldrh	r2, [r4, #24]
 8002ce6:	1a52      	subs	r2, r2, r1
 8002ce8:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002cea:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002cec:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002cee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002cf2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cf4:	6920      	ldr	r0, [r4, #16]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002cf6:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cf8:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002cfa:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002cfc:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cfe:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 8002d02:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d04:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 8002d08:	d026      	beq.n	8002d58 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8002d0a:	d810      	bhi.n	8002d2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 8002d0c:	2920      	cmp	r1, #32
 8002d0e:	ea45 0402 	orr.w	r4, r5, r2
 8002d12:	d061      	beq.n	8002dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8002d14:	2940      	cmp	r1, #64	; 0x40
 8002d16:	d05f      	beq.n	8002dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8002d18:	2904      	cmp	r1, #4
 8002d1a:	d05d      	beq.n	8002dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d1c:	4b32      	ldr	r3, [pc, #200]	; (8002de8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002d1e:	432a      	orrs	r2, r5
 8002d20:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002d24:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d26:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002d28:	d05a      	beq.n	8002de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002d2a:	4a30      	ldr	r2, [pc, #192]	; (8002dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8002d2c:	e040      	b.n	8002db0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002d2e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002d32:	d007      	beq.n	8002d44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 8002d34:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002d38:	d1f0      	bne.n	8002d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d3a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002d3e:	f042 0209 	orr.w	r2, r2, #9
 8002d42:	e003      	b.n	8002d4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d44:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002d48:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d4c:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8002d4e:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002d50:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002d52:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002d54:	6158      	str	r0, [r3, #20]
 8002d56:	e02a      	b.n	8002dae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002d58:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d5a:	432a      	orrs	r2, r5
 8002d5c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002d60:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002d62:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002d64:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002d66:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002d68:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002d6a:	7822      	ldrb	r2, [r4, #0]
 8002d6c:	b142      	cbz	r2, 8002d80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002d6e:	2a01      	cmp	r2, #1
 8002d70:	d021      	beq.n	8002db6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002d72:	f240 1101 	movw	r1, #257	; 0x101
 8002d76:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8002d78:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d7a:	481f      	ldr	r0, [pc, #124]	; (8002df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002d7c:	f026 fc3e 	bl	80295fc <__assert_func>
            bool blend = true;
 8002d80:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	8861      	ldrh	r1, [r4, #2]
 8002d86:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002d8a:	3901      	subs	r1, #1
 8002d8c:	f022 0210 	bic.w	r2, r2, #16
 8002d90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d94:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	f042 0220 	orr.w	r2, r2, #32
 8002d9e:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	0692      	lsls	r2, r2, #26
 8002da4:	d4fc      	bmi.n	8002da0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002da6:	2210      	movs	r2, #16
 8002da8:	609a      	str	r2, [r3, #8]
            if(blend)
 8002daa:	2800      	cmp	r0, #0
 8002dac:	d0bd      	beq.n	8002d2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002dae:	4a13      	ldr	r2, [pc, #76]	; (8002dfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002db0:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 8002db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002db6:	8862      	ldrh	r2, [r4, #2]
 8002db8:	69d9      	ldr	r1, [r3, #28]
 8002dba:	1e54      	subs	r4, r2, #1
 8002dbc:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8002dc0:	f022 0210 	bic.w	r2, r2, #16
 8002dc4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
                if(blitOp.alpha == 255)
 8002dc8:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002dcc:	f042 0210 	orr.w	r2, r2, #16
                if(blitOp.alpha == 255)
 8002dd0:	bf18      	it	ne
 8002dd2:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002dd4:	61da      	str	r2, [r3, #28]
                break;
 8002dd6:	e7de      	b.n	8002d96 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002dd8:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8002ddc:	61dc      	str	r4, [r3, #28]
 8002dde:	e7b8      	b.n	8002d52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002de0:	f240 2201 	movw	r2, #513	; 0x201
 8002de4:	e7e4      	b.n	8002db0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002de6:	bf00      	nop
 8002de8:	4002b000 	.word	0x4002b000
 8002dec:	00010201 	.word	0x00010201
 8002df0:	0802b485 	.word	0x0802b485
 8002df4:	0802b49f 	.word	0x0802b49f
 8002df8:	0802b3ed 	.word	0x0802b3ed
 8002dfc:	00020201 	.word	0x00020201

08002e00 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002e00:	b570      	push	{r4, r5, r6, lr}
 8002e02:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002e04:	7f89      	ldrb	r1, [r1, #30]
 8002e06:	f7ff ff35 	bl	8002c74 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002e0a:	8aa5      	ldrh	r5, [r4, #20]
 8002e0c:	8ae1      	ldrh	r1, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002e0e:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002e10:	ea41 4105 	orr.w	r1, r1, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002e14:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002e16:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002e18:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e1a:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002e1c:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e1e:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002e22:	6826      	ldr	r6, [r4, #0]
 8002e24:	68e5      	ldr	r5, [r4, #12]
 8002e26:	2e08      	cmp	r6, #8
 8002e28:	d10d      	bne.n	8002e46 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002e2a:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002e2c:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002e2e:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002e30:	7f20      	ldrb	r0, [r4, #28]
 8002e32:	4a09      	ldr	r2, [pc, #36]	; (8002e58 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002e34:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002e38:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002e3a:	4a08      	ldr	r2, [pc, #32]	; (8002e5c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002e3c:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e3e:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e40:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002e42:	601a      	str	r2, [r3, #0]
    }
}
 8002e44:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002e46:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002e48:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002e4a:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002e4c:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002e4e:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002e50:	e7f7      	b.n	8002e42 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002e52:	bf00      	nop
 8002e54:	4002b000 	.word	0x4002b000
 8002e58:	00010009 	.word	0x00010009
 8002e5c:	00020201 	.word	0x00020201
 8002e60:	00030201 	.word	0x00030201

08002e64 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002e64:	2001      	movs	r0, #1
 8002e66:	4770      	bx	lr

08002e68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002e68:	200c      	movs	r0, #12
 8002e6a:	4770      	bx	lr

08002e6c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002e6c:	230c      	movs	r3, #12
 8002e6e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002e72:	3008      	adds	r0, #8
 8002e74:	4770      	bx	lr

08002e76 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002e76:	230c      	movs	r3, #12
 8002e78:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002e7c:	3008      	adds	r0, #8
 8002e7e:	4770      	bx	lr

08002e80 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002e80:	2001      	movs	r0, #1
 8002e82:	4770      	bx	lr

08002e84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002e84:	f246 3098 	movw	r0, #25496	; 0x6398
 8002e88:	4770      	bx	lr

08002e8a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002e8a:	f246 3398 	movw	r3, #25496	; 0x6398
 8002e8e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002e92:	3008      	adds	r0, #8
 8002e94:	4770      	bx	lr

08002e96 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002e96:	f246 3398 	movw	r3, #25496	; 0x6398
 8002e9a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002e9e:	3008      	adds	r0, #8
 8002ea0:	4770      	bx	lr

08002ea2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002ea2:	2001      	movs	r0, #1
 8002ea4:	4770      	bx	lr

08002ea6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002ea6:	2010      	movs	r0, #16
 8002ea8:	4770      	bx	lr

08002eaa <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002eaa:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002eae:	3008      	adds	r0, #8
 8002eb0:	4770      	bx	lr

08002eb2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002eb2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002eb6:	3008      	adds	r0, #8
 8002eb8:	4770      	bx	lr

08002eba <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002eba:	4608      	mov	r0, r1
 8002ebc:	f000 bce0 	b.w	8003880 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002ec0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002ec0:	b510      	push	{r4, lr}
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	4b02      	ldr	r3, [pc, #8]	; (8002ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002ec6:	6003      	str	r3, [r0, #0]
 8002ec8:	f013 fe33 	bl	8016b32 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002ecc:	4620      	mov	r0, r4
 8002ece:	bd10      	pop	{r4, pc}
 8002ed0:	0802b5a0 	.word	0x0802b5a0

08002ed4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002ed4:	b510      	push	{r4, lr}
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	f7ff fff2 	bl	8002ec0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002edc:	4620      	mov	r0, r4
 8002ede:	2114      	movs	r1, #20
 8002ee0:	f026 fb5f 	bl	80295a2 <_ZdlPvj>
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	bd10      	pop	{r4, pc}

08002ee8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002ee8:	b510      	push	{r4, lr}
 8002eea:	4604      	mov	r4, r0
 8002eec:	4b02      	ldr	r3, [pc, #8]	; (8002ef8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002eee:	6003      	str	r3, [r0, #0]
 8002ef0:	f013 fe1f 	bl	8016b32 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	bd10      	pop	{r4, pc}
 8002ef8:	0802b56c 	.word	0x0802b56c

08002efc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002efc:	b510      	push	{r4, lr}
 8002efe:	4604      	mov	r4, r0
 8002f00:	f7ff fff2 	bl	8002ee8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002f04:	4620      	mov	r0, r4
 8002f06:	f246 31a0 	movw	r1, #25504	; 0x63a0
 8002f0a:	f026 fb4a 	bl	80295a2 <_ZdlPvj>
 8002f0e:	4620      	mov	r0, r4
 8002f10:	bd10      	pop	{r4, pc}
	...

08002f14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002f14:	b510      	push	{r4, lr}
 8002f16:	4604      	mov	r4, r0
 8002f18:	4b02      	ldr	r3, [pc, #8]	; (8002f24 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002f1a:	6003      	str	r3, [r0, #0]
 8002f1c:	f013 fe09 	bl	8016b32 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002f20:	4620      	mov	r0, r4
 8002f22:	bd10      	pop	{r4, pc}
 8002f24:	0802b538 	.word	0x0802b538

08002f28 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	f7ff fff2 	bl	8002f14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002f30:	4620      	mov	r0, r4
 8002f32:	2118      	movs	r1, #24
 8002f34:	f026 fb35 	bl	80295a2 <_ZdlPvj>
 8002f38:	4620      	mov	r0, r4
 8002f3a:	bd10      	pop	{r4, pc}

08002f3c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002f3c:	b510      	push	{r4, lr}
 8002f3e:	4604      	mov	r4, r0
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <_ZN12FrontendHeapD1Ev+0x28>)
 8002f42:	6003      	str	r3, [r0, #0]
 8002f44:	f500 40c7 	add.w	r0, r0, #25472	; 0x6380
 8002f48:	304c      	adds	r0, #76	; 0x4c
 8002f4a:	f7ff ffb9 	bl	8002ec0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002f4e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002f52:	f7ff ffc9 	bl	8002ee8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002f56:	f104 0014 	add.w	r0, r4, #20
 8002f5a:	f7ff ffdb 	bl	8002f14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002f5e:	4620      	mov	r0, r4
 8002f60:	bd10      	pop	{r4, pc}
 8002f62:	bf00      	nop
 8002f64:	0802b5d4 	.word	0x0802b5d4

08002f68 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002f68:	b508      	push	{r3, lr}
 8002f6a:	4802      	ldr	r0, [pc, #8]	; (8002f74 <__tcf_0+0xc>)
 8002f6c:	f7ff ffe6 	bl	8002f3c <_ZN12FrontendHeapD1Ev>
 8002f70:	bd08      	pop	{r3, pc}
 8002f72:	bf00      	nop
 8002f74:	20153d64 	.word	0x20153d64

08002f78 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002f78:	b510      	push	{r4, lr}
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	f7ff ffde 	bl	8002f3c <_ZN12FrontendHeapD1Ev>
 8002f80:	4620      	mov	r0, r4
 8002f82:	f246 5140 	movw	r1, #25920	; 0x6540
 8002f86:	f026 fb0c 	bl	80295a2 <_ZdlPvj>
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	bd10      	pop	{r4, pc}
	...

08002f90 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 480);

void touchgfx_init()
{
 8002f90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002f94:	f000 fb14 	bl	80035c0 <_ZN14BitmapDatabase11getInstanceEv>
 8002f98:	2400      	movs	r4, #0
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	f000 fb14 	bl	80035c8 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002fa0:	4623      	mov	r3, r4
 8002fa2:	4601      	mov	r1, r0
 8002fa4:	4622      	mov	r2, r4
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	9400      	str	r4, [sp, #0]
 8002faa:	f018 fc13 	bl	801b7d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002fae:	4b27      	ldr	r3, [pc, #156]	; (800304c <touchgfx_init+0xbc>)
 8002fb0:	4a27      	ldr	r2, [pc, #156]	; (8003050 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	f000 fe61 	bl	8003c7c <_ZN8touchgfx5Texts11setLanguageEt>

    display.setFrameBufferFormat(Bitmap::RGB888);
 8002fba:	2101      	movs	r1, #1
 8002fbc:	4825      	ldr	r0, [pc, #148]	; (8003054 <touchgfx_init+0xc4>)
 8002fbe:	f01f fb85 	bl	80226cc <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE>

    FontManager::setFontProvider(&fontProvider);
 8002fc2:	4825      	ldr	r0, [pc, #148]	; (8003058 <touchgfx_init+0xc8>)
 8002fc4:	f018 fb6e 	bl	801b6a4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 8002fc8:	4d24      	ldr	r5, [pc, #144]	; (800305c <touchgfx_init+0xcc>)
 8002fca:	e8d5 3f8f 	ldab	r3, [r5]
 8002fce:	07db      	lsls	r3, r3, #31
 8002fd0:	d436      	bmi.n	8003040 <touchgfx_init+0xb0>
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	f026 fae7 	bl	80295a6 <__cxa_guard_acquire>
 8002fd8:	b390      	cbz	r0, 8003040 <touchgfx_init+0xb0>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002fda:	4c21      	ldr	r4, [pc, #132]	; (8003060 <touchgfx_init+0xd0>)
 8002fdc:	4f21      	ldr	r7, [pc, #132]	; (8003064 <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <touchgfx_init+0xd8>)
 8002fe0:	f107 0618 	add.w	r6, r7, #24
 8002fe4:	f104 0014 	add.w	r0, r4, #20
 8002fe8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002fec:	6023      	str	r3, [r4, #0]
 8002fee:	6060      	str	r0, [r4, #4]
 8002ff0:	f8c4 8008 	str.w	r8, [r4, #8]
 8002ff4:	60e7      	str	r7, [r4, #12]
 8002ff6:	6126      	str	r6, [r4, #16]
 8002ff8:	f013 fd9c 	bl	8016b34 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	; (800306c <touchgfx_init+0xdc>)
 8002ffe:	4640      	mov	r0, r8
 8003000:	6163      	str	r3, [r4, #20]
 8003002:	f013 fd97 	bl	8016b34 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003006:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <touchgfx_init+0xe0>)
 8003008:	4638      	mov	r0, r7
 800300a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800300c:	f013 fd92 	bl	8016b34 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003010:	4a18      	ldr	r2, [pc, #96]	; (8003074 <touchgfx_init+0xe4>)
 8003012:	f504 43c0 	add.w	r3, r4, #24576	; 0x6000
 8003016:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 800301a:	f503 7078 	add.w	r0, r3, #992	; 0x3e0
 800301e:	f000 fe9b 	bl	8003d58 <_ZN5ModelC1Ev>
 8003022:	4622      	mov	r2, r4
 8003024:	f107 0114 	add.w	r1, r7, #20
 8003028:	4630      	mov	r0, r6
 800302a:	f000 fe8b 	bl	8003d44 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800302e:	4630      	mov	r0, r6
 8003030:	f000 fc26 	bl	8003880 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8003034:	4810      	ldr	r0, [pc, #64]	; (8003078 <touchgfx_init+0xe8>)
 8003036:	f026 faff 	bl	8029638 <atexit>
 800303a:	4628      	mov	r0, r5
 800303c:	f026 fabf 	bl	80295be <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003040:	480e      	ldr	r0, [pc, #56]	; (800307c <touchgfx_init+0xec>)
}
 8003042:	b002      	add	sp, #8
 8003044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8003048:	f7ff bb44 	b.w	80026d4 <_ZN11TouchGFXHAL10initializeEv>
 800304c:	20198554 	.word	0x20198554
 8003050:	2015b0fc 	.word	0x2015b0fc
 8003054:	2015b100 	.word	0x2015b100
 8003058:	20000008 	.word	0x20000008
 800305c:	20153d60 	.word	0x20153d60
 8003060:	20153d64 	.word	0x20153d64
 8003064:	2015a130 	.word	0x2015a130
 8003068:	0802b5d4 	.word	0x0802b5d4
 800306c:	0802b538 	.word	0x0802b538
 8003070:	0802b56c 	.word	0x0802b56c
 8003074:	0802b5a0 	.word	0x0802b5a0
 8003078:	08002f69 	.word	0x08002f69
 800307c:	2015b048 	.word	0x2015b048

08003080 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8003080:	b508      	push	{r3, lr}
    nema_init();
 8003082:	f019 f821 	bl	801c0c8 <nema_init>
    nema_vg_init(480, 480);
}
 8003086:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nema_vg_init(480, 480);
 800308a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800308e:	4608      	mov	r0, r1
 8003090:	f01a b8dc 	b.w	801d24c <nema_vg_init>

08003094 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003094:	4801      	ldr	r0, [pc, #4]	; (800309c <touchgfx_taskEntry+0x8>)
 8003096:	f014 b85c 	b.w	8017152 <_ZN8touchgfx3HAL9taskEntryEv>
 800309a:	bf00      	nop
 800309c:	2015b048 	.word	0x2015b048

080030a0 <_GLOBAL__sub_I_touchgfx_init>:
}
 80030a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
static STM32DMA dma;
 80030a2:	4911      	ldr	r1, [pc, #68]	; (80030e8 <_GLOBAL__sub_I_touchgfx_init+0x48>)
{
public:

    STM32TouchController() {}
 80030a4:	4b11      	ldr	r3, [pc, #68]	; (80030ec <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80030a6:	4d12      	ldr	r5, [pc, #72]	; (80030f0 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 80030a8:	4608      	mov	r0, r1
 80030aa:	602b      	str	r3, [r5, #0]
 80030ac:	f7ff fda8 	bl	8002c00 <_ZN8STM32DMAC1Ev>
static LCDGPU2D display;
 80030b0:	4a10      	ldr	r2, [pc, #64]	; (80030f4 <_GLOBAL__sub_I_touchgfx_init+0x54>)
        touchgfx::HALGPU2D(dma, display, tc, width, height)
 80030b2:	4c11      	ldr	r4, [pc, #68]	; (80030f8 <_GLOBAL__sub_I_touchgfx_init+0x58>)
 80030b4:	4610      	mov	r0, r2
 80030b6:	f01f fafd 	bl	80226b4 <_ZN8touchgfx8LCDGPU2DC1Ev>
 80030ba:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80030be:	4620      	mov	r0, r4
 80030c0:	e9cd 3300 	strd	r3, r3, [sp]
 80030c4:	4a0b      	ldr	r2, [pc, #44]	; (80030f4 <_GLOBAL__sub_I_touchgfx_init+0x54>)
 80030c6:	462b      	mov	r3, r5
 80030c8:	4907      	ldr	r1, [pc, #28]	; (80030e8 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80030ca:	f01b fab1 	bl	801e630 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80030ce:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <_GLOBAL__sub_I_touchgfx_init+0x5c>)
 80030d0:	6023      	str	r3, [r4, #0]
          cc_in(0)
 80030d2:	2300      	movs	r3, #0
 80030d4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80030d8:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 80030dc:	4b08      	ldr	r3, [pc, #32]	; (8003100 <_GLOBAL__sub_I_touchgfx_init+0x60>)
 80030de:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
 80030e2:	b003      	add	sp, #12
 80030e4:	bd30      	pop	{r4, r5, pc}
 80030e6:	bf00      	nop
 80030e8:	2015a2a8 	.word	0x2015a2a8
 80030ec:	0802adf0 	.word	0x0802adf0
 80030f0:	2015a2a4 	.word	0x2015a2a4
 80030f4:	2015b100 	.word	0x2015b100
 80030f8:	2015b048 	.word	0x2015b048
 80030fc:	0802af7c 	.word	0x0802af7c
 8003100:	0802ad10 	.word	0x0802ad10

08003104 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8003104:	4801      	ldr	r0, [pc, #4]	; (800310c <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8003106:	f7ff bd2f 	b.w	8002b68 <_ZN8STM32DMAD1Ev>
 800310a:	bf00      	nop
 800310c:	2015a2a8 	.word	0x2015a2a8

08003110 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003110:	2290      	movs	r2, #144	; 0x90
 8003112:	4b04      	ldr	r3, [pc, #16]	; (8003124 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x14>)
 8003114:	f883 2376 	strb.w	r2, [r3, #886]	; 0x376
 8003118:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
 800311c:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
    NVIC_SetPriority(GPU2D_IRQn, 9);
}
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	e000e100 	.word	0xe000e100

08003128 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(GPU2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003128:	4a09      	ldr	r2, [pc, #36]	; (8003150 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800312a:	490a      	ldr	r1, [pc, #40]	; (8003154 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 800312c:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800312e:	480a      	ldr	r0, [pc, #40]	; (8003158 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003134:	3b01      	subs	r3, #1
 8003136:	b29b      	uxth	r3, r3
 8003138:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800313a:	6911      	ldr	r1, [r2, #16]
 800313c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8003140:	3901      	subs	r1, #1
 8003142:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8003144:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8003146:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800314e:	4770      	bx	lr
 8003150:	40016800 	.word	0x40016800
 8003154:	2015b110 	.word	0x2015b110
 8003158:	2015b10e 	.word	0x2015b10e

0800315c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HALGPU2D::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800315c:	4b01      	ldr	r3, [pc, #4]	; (8003164 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 800315e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8003162:	4770      	bx	lr
 8003164:	40016800 	.word	0x40016800

08003168 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8003168:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800316a:	4b02      	ldr	r3, [pc, #8]	; (8003174 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 800316c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8003170:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003172:	4770      	bx	lr
 8003174:	40016800 	.word	0x40016800

08003178 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	4604      	mov	r4, r0
    HALGPU2D::initialize(8192);
 800317c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003180:	f01b fabe 	bl	801e700 <_ZN8touchgfx8HALGPU2D10initializeEi>
    registerEventListener(*(Application::getInstance()));
 8003184:	6823      	ldr	r3, [r4, #0]
 8003186:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8003188:	f015 fef0 	bl	8018f6c <_ZN8touchgfx11Application11getInstanceEv>
 800318c:	4601      	mov	r1, r0
 800318e:	4620      	mov	r0, r4
 8003190:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	4620      	mov	r0, r4
 8003196:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800319a:	4a03      	ldr	r2, [pc, #12]	; (80031a8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 800319c:	46ac      	mov	ip, r5
}
 800319e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80031a2:	2300      	movs	r3, #0
 80031a4:	4901      	ldr	r1, [pc, #4]	; (80031ac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x34>)
 80031a6:	4760      	bx	ip
 80031a8:	200a8d2c 	.word	0x200a8d2c
 80031ac:	2000012c 	.word	0x2000012c

080031b0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HALGPU2D::beginFrame();
 80031b0:	f01b b9ee 	b.w	801e590 <_ZN8touchgfx8HALGPU2D10beginFrameEv>

080031b4 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 80031b4:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 80031b8:	b113      	cbz	r3, 80031c0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 80031ba:	2201      	movs	r2, #1
 80031bc:	4b01      	ldr	r3, [pc, #4]	; (80031c4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 80031be:	701a      	strb	r2, [r3, #0]
    HALGPU2D::endFrame();
 80031c0:	f01b b9f8 	b.w	801e5b4 <_ZN8touchgfx8HALGPU2D8endFrameEv>
 80031c4:	2015b10c 	.word	0x2015b10c

080031c8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HALGPU2D::flushFrameBuffer(rect);
 80031c8:	f013 bf60 	b.w	801708c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080031cc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HALGPU2D::blockCopy(dest, src, numBytes);
 80031cc:	f014 b8c9 	b.w	8017362 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080031d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80031d0:	b570      	push	{r4, r5, r6, lr}
 80031d2:	460d      	mov	r5, r1
 80031d4:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80031d6:	b935      	cbnz	r5, 80031e6 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 80031d8:	f240 21d2 	movw	r1, #722	; 0x2d2
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80031e0:	4809      	ldr	r0, [pc, #36]	; (8003208 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80031e2:	f026 fa0b 	bl	80295fc <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80031e6:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
    }
 80031ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80031ee:	3a00      	subs	r2, #0
 80031f0:	bf18      	it	ne
 80031f2:	2201      	movne	r2, #1
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 80031f6:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80031f8:	6803      	ldr	r3, [r0, #0]
 80031fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031fe:	4718      	bx	r3
 8003200:	0802aeeb 	.word	0x0802aeeb
 8003204:	0802af23 	.word	0x0802af23
 8003208:	0802aea6 	.word	0x0802aea6
 800320c:	201984f6 	.word	0x201984f6

08003210 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003210:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003214:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x30>)
 8003216:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 800321a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	2280      	movs	r2, #128	; 0x80
 8003224:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __ASM volatile ("dsb 0xF":::"memory");
 8003228:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	2210      	movs	r2, #16
 8003232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __ASM volatile ("dsb 0xF":::"memory");
 8003236:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800323a:	f3bf 8f6f 	isb	sy
}
 800323e:	4770      	bx	lr
 8003240:	e000e100 	.word	0xe000e100

08003244 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003244:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003248:	4b03      	ldr	r3, [pc, #12]	; (8003258 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x14>)
 800324a:	60da      	str	r2, [r3, #12]
 800324c:	2280      	movs	r2, #128	; 0x80
 800324e:	611a      	str	r2, [r3, #16]
 8003250:	2210      	movs	r2, #16
 8003252:	611a      	str	r2, [r3, #16]
}
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	e000e100 	.word	0xe000e100

0800325c <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800325c:	b510      	push	{r4, lr}
        return instance;
 800325e:	4c14      	ldr	r4, [pc, #80]	; (80032b0 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	b323      	cbz	r3, 80032ae <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8003264:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <HAL_LTDC_LineEventCallback+0x58>)
 8003266:	4a14      	ldr	r2, [pc, #80]	; (80032b8 <HAL_LTDC_LineEventCallback+0x5c>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	8811      	ldrh	r1, [r2, #0]
 800326c:	428b      	cmp	r3, r1
 800326e:	d113      	bne.n	8003298 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003270:	4b12      	ldr	r3, [pc, #72]	; (80032bc <HAL_LTDC_LineEventCallback+0x60>)
 8003272:	8819      	ldrh	r1, [r3, #0]
 8003274:	f008 fe32 	bl	800bedc <HAL_LTDC_ProgramLineEvent>
 8003278:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 800327a:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 800327e:	3301      	adds	r3, #1
 8003280:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8003284:	f7ff fc28 	bl	8002ad8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003288:	6820      	ldr	r0, [r4, #0]
 800328a:	f014 fcaf 	bl	8017bec <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 800328e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8003292:	2000      	movs	r0, #0
 8003294:	f7ff b9aa 	b.w	80025ec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003298:	f008 fe20 	bl	800bedc <HAL_LTDC_ProgramLineEvent>
        return instance;
 800329c:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 800329e:	6803      	ldr	r3, [r0, #0]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	4798      	blx	r3
    }
 80032a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80032a8:	2000      	movs	r0, #0
 80032aa:	f7ff b9bb 	b.w	8002624 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 80032ae:	bd10      	pop	{r4, pc}
 80032b0:	201984f8 	.word	0x201984f8
 80032b4:	40016800 	.word	0x40016800
 80032b8:	2015b110 	.word	0x2015b110
 80032bc:	2015b10e 	.word	0x2015b10e

080032c0 <HAL_GPU2D_CommandListCpltCallback>:
#if (USE_HAL_GPU2D_REGISTER_CALLBACKS == 1)
static void GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hgpu2d);

    last_cl_id = CmdListID;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <HAL_GPU2D_CommandListCpltCallback+0x20>)
 80032ce:	6013      	str	r3, [r2, #0]

    /* Return a token back to a semaphore */
    tx_semaphore_put(&nema_irq_sem);
 80032d0:	4804      	ldr	r0, [pc, #16]	; (80032e4 <HAL_GPU2D_CommandListCpltCallback+0x24>)
 80032d2:	f013 fafb 	bl	80168cc <_txe_semaphore_put>
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	2000000c 	.word	0x2000000c
 80032e4:	20197030 	.word	0x20197030

080032e8 <nema_sys_init>:

int32_t nema_sys_init(void)
{
 80032e8:	b590      	push	{r4, r7, lr}
 80032ea:	b089      	sub	sp, #36	; 0x24
 80032ec:	af02      	add	r7, sp, #8
    int error_code = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
    /* Register Command List Comlete Callback */
    HAL_GPU2D_RegisterCommandListCpltCallback(&hgpu2d, GPU2D_CommandListCpltCallback);
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Create IRQ semaphore */
    error_code = tx_semaphore_create(&nema_irq_sem, "nema sema irq", 0);
 80032f2:	231c      	movs	r3, #28
 80032f4:	2200      	movs	r2, #0
 80032f6:	4924      	ldr	r1, [pc, #144]	; (8003388 <nema_sys_init+0xa0>)
 80032f8:	4824      	ldr	r0, [pc, #144]	; (800338c <nema_sys_init+0xa4>)
 80032fa:	f013 fa0f 	bl	801671c <_txe_semaphore_create>
 80032fe:	4603      	mov	r3, r0
 8003300:	617b      	str	r3, [r7, #20]
    assert(error_code == TX_SUCCESS);
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <nema_sys_init+0x2c>
 8003308:	4b21      	ldr	r3, [pc, #132]	; (8003390 <nema_sys_init+0xa8>)
 800330a:	4a22      	ldr	r2, [pc, #136]	; (8003394 <nema_sys_init+0xac>)
 800330c:	2150      	movs	r1, #80	; 0x50
 800330e:	4822      	ldr	r0, [pc, #136]	; (8003398 <nema_sys_init+0xb0>)
 8003310:	f026 f974 	bl	80295fc <__assert_func>

    /* Initialise Mem Space */
    error_code = tsi_malloc_init_pool(0, (void*)nemagfx_pool_mem, (uintptr_t)nemagfx_pool_mem, NEMAGFX_BYTE_POOL_SIZE, 1);
 8003314:	4a21      	ldr	r2, [pc, #132]	; (800339c <nema_sys_init+0xb4>)
 8003316:	2301      	movs	r3, #1
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <nema_sys_init+0xb8>)
 800331c:	491f      	ldr	r1, [pc, #124]	; (800339c <nema_sys_init+0xb4>)
 800331e:	2000      	movs	r0, #0
 8003320:	f01a f91a 	bl	801d558 <tsi_malloc_init_pool>
 8003324:	6178      	str	r0, [r7, #20]
    assert(error_code == 0);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <nema_sys_init+0x50>
 800332c:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <nema_sys_init+0xbc>)
 800332e:	4a19      	ldr	r2, [pc, #100]	; (8003394 <nema_sys_init+0xac>)
 8003330:	2154      	movs	r1, #84	; 0x54
 8003332:	4819      	ldr	r0, [pc, #100]	; (8003398 <nema_sys_init+0xb0>)
 8003334:	f026 f962 	bl	80295fc <__assert_func>

    /* Allocate ring_buffer memory */
    ring_buffer_str.bo = nema_buffer_create(RING_SIZE);
 8003338:	4c1b      	ldr	r4, [pc, #108]	; (80033a8 <nema_sys_init+0xc0>)
 800333a:	463b      	mov	r3, r7
 800333c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003340:	4618      	mov	r0, r3
 8003342:	f000 f891 	bl	8003468 <nema_buffer_create>
 8003346:	463b      	mov	r3, r7
 8003348:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800334a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    assert(ring_buffer_str.bo.base_virt);
 800334e:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <nema_sys_init+0xc0>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <nema_sys_init+0x7a>
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <nema_sys_init+0xc4>)
 8003358:	4a0e      	ldr	r2, [pc, #56]	; (8003394 <nema_sys_init+0xac>)
 800335a:	2158      	movs	r1, #88	; 0x58
 800335c:	480e      	ldr	r0, [pc, #56]	; (8003398 <nema_sys_init+0xb0>)
 800335e:	f026 f94d 	bl	80295fc <__assert_func>

    /* Initialize Ring Buffer */
    error_code = nema_rb_init(&ring_buffer_str, 1);
 8003362:	2101      	movs	r1, #1
 8003364:	4810      	ldr	r0, [pc, #64]	; (80033a8 <nema_sys_init+0xc0>)
 8003366:	f018 fc71 	bl	801bc4c <nema_rb_init>
 800336a:	6178      	str	r0, [r7, #20]
    if (error_code < 0)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	da01      	bge.n	8003376 <nema_sys_init+0x8e>
    {
        return error_code;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	e003      	b.n	800337e <nema_sys_init+0x96>
    }

    /* Reset last_cl_id counter */
    last_cl_id = 0;
 8003376:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <nema_sys_init+0xc8>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

    return error_code;
 800337c:	697b      	ldr	r3, [r7, #20]
}
 800337e:	4618      	mov	r0, r3
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	bd90      	pop	{r4, r7, pc}
 8003386:	bf00      	nop
 8003388:	0802abb4 	.word	0x0802abb4
 800338c:	20197030 	.word	0x20197030
 8003390:	0802abc4 	.word	0x0802abc4
 8003394:	0802b5e0 	.word	0x0802b5e0
 8003398:	0802abe0 	.word	0x0802abe0
 800339c:	2015b118 	.word	0x2015b118
 80033a0:	0003bf00 	.word	0x0003bf00
 80033a4:	0802ac2c 	.word	0x0802ac2c
 80033a8:	20197018 	.word	0x20197018
 80033ac:	0802ac3c 	.word	0x0802ac3c
 80033b0:	2000000c 	.word	0x2000000c

080033b4 <nema_reg_read>:

uint32_t nema_reg_read(uint32_t reg)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
    return HAL_GPU2D_ReadRegister(&hgpu2d, reg);
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4804      	ldr	r0, [pc, #16]	; (80033d0 <nema_reg_read+0x1c>)
 80033c0:	f007 fa41 	bl	800a846 <HAL_GPU2D_ReadRegister>
 80033c4:	4603      	mov	r3, r0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20152eb4 	.word	0x20152eb4

080033d4 <nema_reg_write>:

void nema_reg_write(uint32_t reg, uint32_t value)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
    HAL_GPU2D_WriteRegister(&hgpu2d, reg, value);
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4803      	ldr	r0, [pc, #12]	; (80033f0 <nema_reg_write+0x1c>)
 80033e4:	f007 fa41 	bl	800a86a <HAL_GPU2D_WriteRegister>
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20152eb4 	.word	0x20152eb4

080033f4 <nema_wait_irq>:

int nema_wait_irq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
    /* Wait indefinitely for a free semaphore */
    tx_semaphore_get(&nema_irq_sem, TX_WAIT_FOREVER);
 80033f8:	f04f 31ff 	mov.w	r1, #4294967295
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <nema_wait_irq+0x14>)
 80033fe:	f013 fa23 	bl	8016848 <_txe_semaphore_get>

    return 0;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20197030 	.word	0x20197030

0800340c <nema_wait_irq_cl>:

int nema_wait_irq_cl(int cl_id)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
    while (last_cl_id < cl_id)
 8003414:	e001      	b.n	800341a <nema_wait_irq_cl+0xe>
    {
        (void)nema_wait_irq();
 8003416:	f7ff ffed 	bl	80033f4 <nema_wait_irq>
    while (last_cl_id < cl_id)
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <nema_wait_irq_cl+0x24>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	429a      	cmp	r2, r3
 8003422:	dcf8      	bgt.n	8003416 <nema_wait_irq_cl+0xa>
    }

    return 0;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	2000000c 	.word	0x2000000c

08003434 <nema_host_free>:

    return 0;
}

void nema_host_free(void *ptr)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
    tsi_free(ptr);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f01a f8f3 	bl	801d628 <tsi_free>
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <nema_host_malloc>:

void *nema_host_malloc(unsigned size)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
    return tsi_malloc(size);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4619      	mov	r1, r3
 8003456:	2000      	movs	r0, #0
 8003458:	f01a f8a6 	bl	801d5a8 <tsi_malloc_pool>
 800345c:	4603      	mov	r3, r0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <nema_buffer_create>:

nema_buffer_t nema_buffer_create(int size)
{
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
    nema_buffer_t bo;
    memset(&bo, 0, sizeof(bo));
 8003472:	f107 0308 	add.w	r3, r7, #8
 8003476:	2210      	movs	r2, #16
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f026 f93c 	bl	80296f8 <memset>
    bo.base_virt = tsi_malloc(size);
 8003480:	6839      	ldr	r1, [r7, #0]
 8003482:	2000      	movs	r0, #0
 8003484:	f01a f890 	bl	801d5a8 <tsi_malloc_pool>
 8003488:	4603      	mov	r3, r0
 800348a:	613b      	str	r3, [r7, #16]
    bo.base_phys = (uint32_t)bo.base_virt;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	617b      	str	r3, [r7, #20]
    bo.size      = size;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	60bb      	str	r3, [r7, #8]
    assert(bo.base_virt != 0 && "Unable to allocate memory in nema_buffer_create");
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d105      	bne.n	80034a6 <nema_buffer_create+0x3e>
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <nema_buffer_create+0x54>)
 800349c:	4a08      	ldr	r2, [pc, #32]	; (80034c0 <nema_buffer_create+0x58>)
 800349e:	219e      	movs	r1, #158	; 0x9e
 80034a0:	4808      	ldr	r0, [pc, #32]	; (80034c4 <nema_buffer_create+0x5c>)
 80034a2:	f026 f8ab 	bl	80295fc <__assert_func>

    return bo;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	461c      	mov	r4, r3
 80034aa:	f107 0308 	add.w	r3, r7, #8
 80034ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	371c      	adds	r7, #28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd90      	pop	{r4, r7, pc}
 80034bc:	0802ac5c 	.word	0x0802ac5c
 80034c0:	0802b5f0 	.word	0x0802b5f0
 80034c4:	0802abe0 	.word	0x0802abe0

080034c8 <nema_buffer_create_pool>:

nema_buffer_t nema_buffer_create_pool(int pool, int size)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(pool);

    return nema_buffer_create(size);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ffc5 	bl	8003468 <nema_buffer_create>
}
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <nema_buffer_map>:

void *nema_buffer_map(nema_buffer_t *bo)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
    return bo->base_virt;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <nema_buffer_destroy>:
    /* Prevent unused argument(s) compilation warning */
    UNUSED(bo);
}

void nema_buffer_destroy(nema_buffer_t *bo)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
    if (bo->fd == -1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350e:	d012      	beq.n	8003536 <nema_buffer_destroy+0x38>
    {
        return; /* Buffer weren't allocated! */
    }

    tsi_free(bo->base_virt);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4618      	mov	r0, r3
 8003516:	f01a f887 	bl	801d628 <tsi_free>

    bo->base_virt = (void *)0;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	609a      	str	r2, [r3, #8]
    bo->base_phys = 0;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	60da      	str	r2, [r3, #12]
    bo->size      = 0;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
    bo->fd        = -1; /* Buffer not allocated */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f04f 32ff 	mov.w	r2, #4294967295
 8003532:	605a      	str	r2, [r3, #4]
 8003534:	e000      	b.n	8003538 <nema_buffer_destroy+0x3a>
        return; /* Buffer weren't allocated! */
 8003536:	bf00      	nop
}
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <nema_buffer_flush>:
{
    return bo->base_phys;
}

void nema_buffer_flush(nema_buffer_t * bo)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(bo);
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <nema_mutex_lock>:

int nema_mutex_lock(int mutex_id)
{
 8003552:	b480      	push	{r7}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
    int retval = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
/* USER CODE BEGIN nema_mutex_lock */
    /* Prevent unused argument(s) compilation warning */
    UNUSED(mutex_id);
/* USER CODE END nema_mutex_lock */

    return retval;
 800355e:	68fb      	ldr	r3, [r7, #12]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <nema_mutex_unlock>:

int nema_mutex_unlock(int mutex_id)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
    int retval = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
/* USER CODE BEGIN nema_mutex_unlock */
    /* Prevent unused argument(s) compilation warning */
    UNUSED(mutex_id);
/* USER CODE END nema_mutex_unlock */

    return retval;
 8003578:	68fb      	ldr	r3, [r7, #12]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003586:	4770      	bx	lr

08003588 <_ZN23ApplicationFontProviderD0Ev>:
 8003588:	b510      	push	{r4, lr}
 800358a:	4604      	mov	r4, r0
 800358c:	2104      	movs	r1, #4
 800358e:	f026 f808 	bl	80295a2 <_ZdlPvj>
 8003592:	4620      	mov	r0, r4
 8003594:	bd10      	pop	{r4, pc}

08003596 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8003596:	2901      	cmp	r1, #1
{
 8003598:	b508      	push	{r3, lr}
    switch (typography)
 800359a:	d006      	beq.n	80035aa <_ZN23ApplicationFontProvider7getFontEt+0x14>
 800359c:	2902      	cmp	r1, #2
 800359e:	d008      	beq.n	80035b2 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 80035a0:	b959      	cbnz	r1, 80035ba <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80035a2:	f000 fba9 	bl	8003cf8 <_ZN17TypedTextDatabase8getFontsEv>
 80035a6:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 80035a8:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80035aa:	f000 fba5 	bl	8003cf8 <_ZN17TypedTextDatabase8getFontsEv>
 80035ae:	6840      	ldr	r0, [r0, #4]
 80035b0:	e7fa      	b.n	80035a8 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80035b2:	f000 fba1 	bl	8003cf8 <_ZN17TypedTextDatabase8getFontsEv>
 80035b6:	6880      	ldr	r0, [r0, #8]
 80035b8:	e7f6      	b.n	80035a8 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 80035ba:	2000      	movs	r0, #0
 80035bc:	e7f4      	b.n	80035a8 <_ZN23ApplicationFontProvider7getFontEt+0x12>
	...

080035c0 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80035c0:	4800      	ldr	r0, [pc, #0]	; (80035c4 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80035c2:	4770      	bx	lr
 80035c4:	0802b618 	.word	0x0802b618

080035c8 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80035c8:	2001      	movs	r0, #1
 80035ca:	4770      	bx	lr

080035cc <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80035cc:	b513      	push	{r0, r1, r4, lr}
 80035ce:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80035d0:	b151      	cbz	r1, 80035e8 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80035d2:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 80035d4:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80035d6:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80035da:	aa01      	add	r2, sp, #4
 80035dc:	689c      	ldr	r4, [r3, #8]
 80035de:	f10d 0303 	add.w	r3, sp, #3
 80035e2:	47a0      	blx	r4
        return glyph;
    }
 80035e4:	b002      	add	sp, #8
 80035e6:	bd10      	pop	{r4, pc}
            return 0;
 80035e8:	4608      	mov	r0, r1
 80035ea:	e7fb      	b.n	80035e4 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080035ec <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80035ec:	89c0      	ldrh	r0, [r0, #14]
 80035ee:	4770      	bx	lr

080035f0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80035f0:	8a00      	ldrh	r0, [r0, #16]
 80035f2:	4770      	bx	lr

080035f4 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 80035f4:	88c0      	ldrh	r0, [r0, #6]
 80035f6:	4770      	bx	lr

080035f8 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 80035f8:	8880      	ldrh	r0, [r0, #4]
 80035fa:	4770      	bx	lr

080035fc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80035fc:	7a80      	ldrb	r0, [r0, #10]
    }
 80035fe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003602:	4770      	bx	lr

08003604 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003604:	7a80      	ldrb	r0, [r0, #10]
    }
 8003606:	09c0      	lsrs	r0, r0, #7
 8003608:	4770      	bx	lr

0800360a <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 800360a:	4770      	bx	lr

0800360c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 800360c:	4770      	bx	lr

0800360e <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 800360e:	f500 7398 	add.w	r3, r0, #304	; 0x130
 8003612:	6808      	ldr	r0, [r1, #0]
 8003614:	6849      	ldr	r1, [r1, #4]
 8003616:	c303      	stmia	r3!, {r0, r1}
    }
 8003618:	4770      	bx	lr

0800361a <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 800361a:	4770      	bx	lr

0800361c <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 800361c:	4770      	bx	lr

0800361e <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 800361e:	6041      	str	r1, [r0, #4]
    }
 8003620:	4770      	bx	lr

08003622 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003622:	4770      	bx	lr

08003624 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003626:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 800362a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 800362e:	2300      	movs	r3, #0
 8003630:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003634:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8003638:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	080036e5 	.word	0x080036e5

08003644 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003644:	2301      	movs	r3, #1
 8003646:	7203      	strb	r3, [r0, #8]
    }
 8003648:	4770      	bx	lr

0800364a <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800364a:	4770      	bx	lr

0800364c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 800364c:	4770      	bx	lr

0800364e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800364e:	4603      	mov	r3, r0
 8003650:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003652:	6841      	ldr	r1, [r0, #4]
 8003654:	68c2      	ldr	r2, [r0, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	1054      	asrs	r4, r2, #1
 800365a:	eb01 0062 	add.w	r0, r1, r2, asr #1
 800365e:	07d2      	lsls	r2, r2, #31
 8003660:	bf48      	it	mi
 8003662:	590a      	ldrmi	r2, [r1, r4]
    }
 8003664:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003668:	bf48      	it	mi
 800366a:	58d3      	ldrmi	r3, [r2, r3]
 800366c:	4718      	bx	r3

0800366e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 800366e:	6843      	ldr	r3, [r0, #4]
 8003670:	b12b      	cbz	r3, 800367e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8003672:	6883      	ldr	r3, [r0, #8]
 8003674:	b92b      	cbnz	r3, 8003682 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003676:	68c0      	ldr	r0, [r0, #12]
 8003678:	f000 0001 	and.w	r0, r0, #1
 800367c:	4770      	bx	lr
 800367e:	4618      	mov	r0, r3
 8003680:	4770      	bx	lr
 8003682:	2001      	movs	r0, #1
    }
 8003684:	4770      	bx	lr

08003686 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003686:	b510      	push	{r4, lr}
 8003688:	4604      	mov	r4, r0
 800368a:	210c      	movs	r1, #12
 800368c:	f025 ff89 	bl	80295a2 <_ZdlPvj>
 8003690:	4620      	mov	r0, r4
 8003692:	bd10      	pop	{r4, pc}

08003694 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003694:	b510      	push	{r4, lr}
 8003696:	4604      	mov	r4, r0
 8003698:	2110      	movs	r1, #16
 800369a:	f025 ff82 	bl	80295a2 <_ZdlPvj>
 800369e:	4620      	mov	r0, r4
 80036a0:	bd10      	pop	{r4, pc}

080036a2 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80036a2:	b510      	push	{r4, lr}
 80036a4:	4604      	mov	r4, r0
 80036a6:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80036aa:	f025 ff7a 	bl	80295a2 <_ZdlPvj>
 80036ae:	4620      	mov	r0, r4
 80036b0:	bd10      	pop	{r4, pc}

080036b2 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80036b2:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 80036b4:	f015 fc5a 	bl	8018f6c <_ZN8touchgfx11Application11getInstanceEv>
    }
 80036b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 80036bc:	f016 b89e 	b.w	80197fc <_ZN8touchgfx11Application10invalidateEv>

080036c0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80036c0:	b510      	push	{r4, lr}
 80036c2:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80036c4:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 80036c8:	b158      	cbz	r0, 80036e2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80036ca:	6803      	ldr	r3, [r0, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	4798      	blx	r3
 80036d0:	b138      	cbz	r0, 80036e2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80036d2:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 80036d6:	6803      	ldr	r3, [r0, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 80036e2:	bd10      	pop	{r4, pc}

080036e4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80036e4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80036e8:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 80036ec:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80036ee:	68a8      	ldr	r0, [r5, #8]
 80036f0:	6803      	ldr	r3, [r0, #0]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	4798      	blx	r3
 80036f6:	f246 3397 	movw	r3, #25495	; 0x6397
 80036fa:	4298      	cmp	r0, r3
 80036fc:	d805      	bhi.n	800370a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 80036fe:	21a3      	movs	r1, #163	; 0xa3
 8003700:	4b45      	ldr	r3, [pc, #276]	; (8003818 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003702:	4a46      	ldr	r2, [pc, #280]	; (800381c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003704:	4846      	ldr	r0, [pc, #280]	; (8003820 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003706:	f025 ff79 	bl	80295fc <__assert_func>
 800370a:	6868      	ldr	r0, [r5, #4]
 800370c:	6803      	ldr	r3, [r0, #0]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	4798      	blx	r3
 8003712:	280f      	cmp	r0, #15
 8003714:	d803      	bhi.n	800371e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 8003716:	21a4      	movs	r1, #164	; 0xa4
 8003718:	4b42      	ldr	r3, [pc, #264]	; (8003824 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 800371a:	4a40      	ldr	r2, [pc, #256]	; (800381c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 800371c:	e7f2      	b.n	8003704 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800371e:	68e8      	ldr	r0, [r5, #12]
 8003720:	6803      	ldr	r3, [r0, #0]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	4798      	blx	r3
 8003726:	280b      	cmp	r0, #11
 8003728:	d803      	bhi.n	8003732 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 800372a:	21a5      	movs	r1, #165	; 0xa5
 800372c:	4b3e      	ldr	r3, [pc, #248]	; (8003828 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 800372e:	4a3b      	ldr	r2, [pc, #236]	; (800381c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003730:	e7e8      	b.n	8003704 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 8003732:	f015 fc1b 	bl	8018f6c <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8003736:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8003830 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 800373a:	3004      	adds	r0, #4
 800373c:	f015 fc3b 	bl	8018fb6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8003740:	f8d9 0000 	ldr.w	r0, [r9]
 8003744:	b110      	cbz	r0, 800374c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8003746:	6803      	ldr	r3, [r0, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	4798      	blx	r3
    if (*currentTrans)
 800374c:	f8d9 0000 	ldr.w	r0, [r9]
 8003750:	b110      	cbz	r0, 8003758 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8003752:	6803      	ldr	r3, [r0, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4798      	blx	r3
    if (*currentScreen)
 8003758:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8003834 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x150>
 800375c:	f8d8 0000 	ldr.w	r0, [r8]
 8003760:	b110      	cbz	r0, 8003768 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8003762:	6803      	ldr	r3, [r0, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	4798      	blx	r3
    if (*currentPresenter)
 8003768:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800376c:	b110      	cbz	r0, 8003774 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 800376e:	6803      	ldr	r3, [r0, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4798      	blx	r3
    if (*currentScreen)
 8003774:	f8d8 0000 	ldr.w	r0, [r8]
 8003778:	b110      	cbz	r0, 8003780 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 800377a:	6803      	ldr	r3, [r0, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4798      	blx	r3
    if (*currentPresenter)
 8003780:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8003784:	b110      	cbz	r0, 800378c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8003786:	6803      	ldr	r3, [r0, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800378c:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 800378e:	2100      	movs	r1, #0
 8003790:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
 8003792:	f04f 0b00 	mov.w	fp, #0
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	4798      	blx	r3
 800379a:	4b24      	ldr	r3, [pc, #144]	; (800382c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>)
 800379c:	4604      	mov	r4, r0
 800379e:	6003      	str	r3, [r0, #0]
 80037a0:	f8c0 b004 	str.w	fp, [r0, #4]
 80037a4:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80037a8:	68a8      	ldr	r0, [r5, #8]
 80037aa:	4659      	mov	r1, fp
 80037ac:	6803      	ldr	r3, [r0, #0]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	4798      	blx	r3
 80037b2:	4606      	mov	r6, r0
 80037b4:	f000 fbd8 	bl	8003f68 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80037b8:	6868      	ldr	r0, [r5, #4]
 80037ba:	4659      	mov	r1, fp
 80037bc:	6803      	ldr	r3, [r0, #0]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	4798      	blx	r3
 80037c2:	4605      	mov	r5, r0
 80037c4:	4631      	mov	r1, r6
 80037c6:	f000 fad9 	bl	8003d7c <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 80037ca:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80037ce:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 80037d2:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 80037d6:	b1e5      	cbz	r5, 8003812 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
 80037d8:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80037da:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80037de:	6833      	ldr	r3, [r6, #0]
 80037e0:	4630      	mov	r0, r6
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80037e2:	f8c5 a008 	str.w	sl, [r5, #8]
 80037e6:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 80037e8:	63f5      	str	r5, [r6, #60]	; 0x3c
 80037ea:	4798      	blx	r3
    newPresenter->activate();
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	4628      	mov	r0, r5
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80037f4:	4621      	mov	r1, r4
 80037f6:	4630      	mov	r0, r6
 80037f8:	f017 f850 	bl	801a89c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	4620      	mov	r0, r4
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	4798      	blx	r3
    newTransition->invalidate();
 8003804:	4620      	mov	r0, r4
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
}
 800380a:	b001      	add	sp, #4
 800380c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003810:	4718      	bx	r3
    model->bind(newPresenter);
 8003812:	462b      	mov	r3, r5
 8003814:	e7e1      	b.n	80037da <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf6>
 8003816:	bf00      	nop
 8003818:	0802b62c 	.word	0x0802b62c
 800381c:	0802b6ba 	.word	0x0802b6ba
 8003820:	0802b7be 	.word	0x0802b7be
 8003824:	0802b805 	.word	0x0802b805
 8003828:	0802b8a8 	.word	0x0802b8a8
 800382c:	0802b9b8 	.word	0x0802b9b8
 8003830:	20198538 	.word	0x20198538
 8003834:	20198534 	.word	0x20198534

08003838 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003838:	b570      	push	{r4, r5, r6, lr}
 800383a:	4604      	mov	r4, r0
 800383c:	460d      	mov	r5, r1
 800383e:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 8003840:	f015 fc56 	bl	80190f0 <_ZN8touchgfx11ApplicationC1Ev>
 8003844:	2100      	movs	r1, #0
        instance = this;
 8003846:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x38>)
        : pobject(0), pmemfun(0)
 8003848:	e9c4 1153 	strd	r1, r1, [r4, #332]	; 0x14c
 800384c:	601c      	str	r4, [r3, #0]
      model(m)
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x3c>)
          pendingScreenTransitionCallback(0)
 8003850:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
 8003854:	6023      	str	r3, [r4, #0]
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x40>)
 8003858:	e9c4 6555 	strd	r6, r5, [r4, #340]	; 0x154
 800385c:	e9c4 3151 	strd	r3, r1, [r4, #324]	; 0x144
        return instance;
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x44>)
 8003862:	6818      	ldr	r0, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003864:	6803      	ldr	r3, [r0, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4798      	blx	r3
}
 800386a:	4620      	mov	r0, r4
 800386c:	bd70      	pop	{r4, r5, r6, pc}
 800386e:	bf00      	nop
 8003870:	20198544 	.word	0x20198544
 8003874:	0802b96c 	.word	0x0802b96c
 8003878:	0802b954 	.word	0x0802b954
 800387c:	201984f8 	.word	0x201984f8

08003880 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8003882:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8003886:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 800388a:	2300      	movs	r3, #0
 800388c:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003890:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8003894:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	080036e5 	.word	0x080036e5

080038a0 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80038a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80038a2:	4770      	bx	lr

080038a4 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80038a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80038a6:	4770      	bx	lr

080038a8 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80038a8:	4770      	bx	lr

080038aa <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80038aa:	888b      	ldrh	r3, [r1, #4]
 80038ac:	69c0      	ldr	r0, [r0, #28]
 80038ae:	0adb      	lsrs	r3, r3, #11
 80038b0:	680a      	ldr	r2, [r1, #0]
 80038b2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80038b6:	4410      	add	r0, r2
 80038b8:	4770      	bx	lr

080038ba <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80038ba:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 80038bc:	b1c2      	cbz	r2, 80038f0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80038be:	7b13      	ldrb	r3, [r2, #12]
 80038c0:	b1b3      	cbz	r3, 80038f0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80038c2:	7b54      	ldrb	r4, [r2, #13]
 80038c4:	7ad2      	ldrb	r2, [r2, #11]
 80038c6:	0224      	lsls	r4, r4, #8
 80038c8:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80038cc:	4314      	orrs	r4, r2
 80038ce:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80038d0:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80038d2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 80038d6:	8813      	ldrh	r3, [r2, #0]
 80038d8:	428b      	cmp	r3, r1
 80038da:	d102      	bne.n	80038e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80038dc:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 80038e0:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80038e2:	d805      	bhi.n	80038f0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80038e4:	3801      	subs	r0, #1
 80038e6:	b280      	uxth	r0, r0
 80038e8:	3204      	adds	r2, #4
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d1f3      	bne.n	80038d6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80038ee:	e7f7      	b.n	80038e0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80038f0:	2000      	movs	r0, #0
 80038f2:	e7f5      	b.n	80038e0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080038f4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80038f4:	b510      	push	{r4, lr}
 80038f6:	4604      	mov	r4, r0
 80038f8:	212c      	movs	r1, #44	; 0x2c
 80038fa:	f025 fe52 	bl	80295a2 <_ZdlPvj>
 80038fe:	4620      	mov	r0, r4
 8003900:	bd10      	pop	{r4, pc}
	...

08003904 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003904:	b530      	push	{r4, r5, lr}
 8003906:	4604      	mov	r4, r0
 8003908:	b08b      	sub	sp, #44	; 0x2c
      arabicTable(formsTable)
 800390a:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 800390e:	9508      	str	r5, [sp, #32]
 8003910:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8003914:	9507      	str	r5, [sp, #28]
 8003916:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800391a:	9506      	str	r5, [sp, #24]
 800391c:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8003920:	9505      	str	r5, [sp, #20]
 8003922:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8003926:	9504      	str	r5, [sp, #16]
 8003928:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800392c:	9503      	str	r5, [sp, #12]
 800392e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8003932:	9502      	str	r5, [sp, #8]
 8003934:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003938:	9501      	str	r5, [sp, #4]
 800393a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800393e:	9500      	str	r5, [sp, #0]
 8003940:	f016 fc06 	bl	801a150 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
}
 8003944:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800394c:	61e3      	str	r3, [r4, #28]
 800394e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003950:	6223      	str	r3, [r4, #32]
 8003952:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003954:	6263      	str	r3, [r4, #36]	; 0x24
 8003956:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003958:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800395a:	b00b      	add	sp, #44	; 0x2c
 800395c:	bd30      	pop	{r4, r5, pc}
 800395e:	bf00      	nop
 8003960:	0802b9dc 	.word	0x0802b9dc

08003964 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003964:	2000      	movs	r0, #0
 8003966:	4770      	bx	lr

08003968 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003968:	8081      	strh	r1, [r0, #4]
    }
 800396a:	4770      	bx	lr

0800396c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800396c:	80c1      	strh	r1, [r0, #6]
    }
 800396e:	4770      	bx	lr

08003970 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003970:	8101      	strh	r1, [r0, #8]
    }
 8003972:	4770      	bx	lr

08003974 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003974:	8141      	strh	r1, [r0, #10]
    }
 8003976:	4770      	bx	lr

08003978 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003978:	4770      	bx	lr

0800397a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800397a:	4770      	bx	lr

0800397c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 800397c:	4770      	bx	lr

0800397e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800397e:	4770      	bx	lr

08003980 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003980:	4770      	bx	lr

08003982 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003982:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003984:	88c4      	ldrh	r4, [r0, #6]
 8003986:	6803      	ldr	r3, [r0, #0]
 8003988:	1b12      	subs	r2, r2, r4
 800398a:	8884      	ldrh	r4, [r0, #4]
 800398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398e:	1b09      	subs	r1, r1, r4
 8003990:	b212      	sxth	r2, r2
    }
 8003992:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8003996:	b209      	sxth	r1, r1
 8003998:	4718      	bx	r3

0800399a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800399a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800399e:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80039a0:	f04f 33ff 	mov.w	r3, #4294967295
 80039a4:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80039a6:	6813      	ldr	r3, [r2, #0]
 80039a8:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80039aa:	6010      	str	r0, [r2, #0]
    }
 80039ac:	4770      	bx	lr

080039ae <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80039ae:	4770      	bx	lr

080039b0 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80039b0:	4770      	bx	lr

080039b2 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80039b2:	4770      	bx	lr

080039b4 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80039b4:	4770      	bx	lr

080039b6 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80039b6:	4770      	bx	lr

080039b8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80039b8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80039bc:	b11a      	cbz	r2, 80039c6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80039be:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80039c2:	b102      	cbz	r2, 80039c6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80039c4:	6018      	str	r0, [r3, #0]
        }
    }
 80039c6:	4770      	bx	lr

080039c8 <_ZN15Screen1ViewBase9tick_funcEv>:
     * Virtual Action Handlers
     */
    virtual void tick_func()
    {
        // Override and implement this function in Screen1
    }
 80039c8:	4770      	bx	lr

080039ca <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 80039ca:	4770      	bx	lr

080039cc <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 80039cc:	4770      	bx	lr

080039ce <_ZN15Screen1ViewBase15handleTickEventEv>:
void Screen1ViewBase::handleTickEvent()
{
    //tick_func
    //When every N tick call virtual function
    //Call tick_func
    tick_func();
 80039ce:	6803      	ldr	r3, [r0, #0]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	4718      	bx	r3

080039d4 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80039d4:	b510      	push	{r4, lr}
 80039d6:	4604      	mov	r4, r0
}
 80039d8:	216c      	movs	r1, #108	; 0x6c
 80039da:	f025 fde2 	bl	80295a2 <_ZdlPvj>
 80039de:	4620      	mov	r0, r4
 80039e0:	bd10      	pop	{r4, pc}

080039e2 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80039e2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80039e6:	b112      	cbz	r2, 80039ee <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80039e8:	6803      	ldr	r3, [r0, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	4718      	bx	r3
    }
 80039ee:	4770      	bx	lr

080039f0 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 80039f0:	b538      	push	{r3, r4, r5, lr}
 80039f2:	4604      	mov	r4, r0
        : presenter(0)
 80039f4:	f016 fda6 	bl	801a544 <_ZN8touchgfx6ScreenC1Ev>
 80039f8:	4625      	mov	r5, r4
 80039fa:	2300      	movs	r3, #0
 80039fc:	4a14      	ldr	r2, [pc, #80]	; (8003a50 <_ZN15Screen1ViewBaseC1Ev+0x60>)
 80039fe:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003a00:	f845 2b40 	str.w	r2, [r5], #64
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8003a04:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8003a08:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
          visible(true)
 8003a0c:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8003a10:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
        : color(col)
 8003a14:	66a3      	str	r3, [r4, #104]	; 0x68
 8003a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a1a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003a1e:	23ff      	movs	r3, #255	; 0xff
 8003a20:	4a0c      	ldr	r2, [pc, #48]	; (8003a54 <_ZN15Screen1ViewBaseC1Ev+0x64>)
 8003a22:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 8003a26:	6422      	str	r2, [r4, #64]	; 0x40
        setWidth(width);
 8003a28:	4628      	mov	r0, r5
 8003a2a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003a2e:	f7ff ff9f 	bl	8003970 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8003a32:	4628      	mov	r0, r5
 8003a34:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003a38:	f7ff ff9c 	bl	8003974 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003a3c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003a40:	1d20      	adds	r0, r4, #4
 8003a42:	4629      	mov	r1, r5
 8003a44:	66a3      	str	r3, [r4, #104]	; 0x68
 8003a46:	f013 f889 	bl	8016b5c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	bd38      	pop	{r3, r4, r5, pc}
 8003a4e:	bf00      	nop
 8003a50:	0802ba3c 	.word	0x0802ba3c
 8003a54:	0802bf78 	.word	0x0802bf78

08003a58 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003a58:	4770      	bx	lr
	...

08003a5c <_Z23getFont_verdana_10_4bppv>:
{
 8003a5c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003a5e:	4d15      	ldr	r5, [pc, #84]	; (8003ab4 <_Z23getFont_verdana_10_4bppv+0x58>)
{
 8003a60:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003a62:	e8d5 4f8f 	ldab	r4, [r5]
 8003a66:	f014 0401 	ands.w	r4, r4, #1
 8003a6a:	d120      	bne.n	8003aae <_Z23getFont_verdana_10_4bppv+0x52>
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f025 fd9a 	bl	80295a6 <__cxa_guard_acquire>
 8003a72:	b1e0      	cbz	r0, 8003aae <_Z23getFont_verdana_10_4bppv+0x52>
 8003a74:	233f      	movs	r3, #63	; 0x3f
 8003a76:	9309      	str	r3, [sp, #36]	; 0x24
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	9308      	str	r3, [sp, #32]
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <_Z23getFont_verdana_10_4bppv+0x60>)
 8003a80:	490f      	ldr	r1, [pc, #60]	; (8003ac0 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003a82:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003a86:	2304      	movs	r3, #4
 8003a88:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003a8c:	230a      	movs	r3, #10
 8003a8e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003a98:	480a      	ldr	r0, [pc, #40]	; (8003ac4 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003a9a:	940a      	str	r4, [sp, #40]	; 0x28
 8003a9c:	9405      	str	r4, [sp, #20]
 8003a9e:	f7ff ff31 	bl	8003904 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003aa2:	4809      	ldr	r0, [pc, #36]	; (8003ac8 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003aa4:	f025 fdc8 	bl	8029638 <atexit>
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	f025 fd88 	bl	80295be <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8003aae:	4805      	ldr	r0, [pc, #20]	; (8003ac4 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003ab0:	b00f      	add	sp, #60	; 0x3c
 8003ab2:	bd30      	pop	{r4, r5, pc}
 8003ab4:	2019704c 	.word	0x2019704c
 8003ab8:	0802d968 	.word	0x0802d968
 8003abc:	0802d974 	.word	0x0802d974
 8003ac0:	90000178 	.word	0x90000178
 8003ac4:	20197050 	.word	0x20197050
 8003ac8:	08003a59 	.word	0x08003a59

08003acc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003acc:	4770      	bx	lr
	...

08003ad0 <_Z23getFont_verdana_20_4bppv>:
{
 8003ad0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003ad2:	4d15      	ldr	r5, [pc, #84]	; (8003b28 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 8003ad4:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003ad6:	e8d5 4f8f 	ldab	r4, [r5]
 8003ada:	f014 0401 	ands.w	r4, r4, #1
 8003ade:	d120      	bne.n	8003b22 <_Z23getFont_verdana_20_4bppv+0x52>
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	f025 fd60 	bl	80295a6 <__cxa_guard_acquire>
 8003ae6:	b1e0      	cbz	r0, 8003b22 <_Z23getFont_verdana_20_4bppv+0x52>
 8003ae8:	233f      	movs	r3, #63	; 0x3f
 8003aea:	9309      	str	r3, [sp, #36]	; 0x24
 8003aec:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <_Z23getFont_verdana_20_4bppv+0x5c>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	9308      	str	r3, [sp, #32]
 8003af2:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003af4:	490f      	ldr	r1, [pc, #60]	; (8003b34 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003af6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003afa:	2304      	movs	r3, #4
 8003afc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003b00:	2314      	movs	r3, #20
 8003b02:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003b0c:	480a      	ldr	r0, [pc, #40]	; (8003b38 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003b0e:	940a      	str	r4, [sp, #40]	; 0x28
 8003b10:	9405      	str	r4, [sp, #20]
 8003b12:	f7ff fef7 	bl	8003904 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003b16:	4809      	ldr	r0, [pc, #36]	; (8003b3c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003b18:	f025 fd8e 	bl	8029638 <atexit>
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	f025 fd4e 	bl	80295be <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8003b22:	4805      	ldr	r0, [pc, #20]	; (8003b38 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003b24:	b00f      	add	sp, #60	; 0x3c
 8003b26:	bd30      	pop	{r4, r5, pc}
 8003b28:	2019707c 	.word	0x2019707c
 8003b2c:	0802d96c 	.word	0x0802d96c
 8003b30:	0802d978 	.word	0x0802d978
 8003b34:	90000188 	.word	0x90000188
 8003b38:	20197080 	.word	0x20197080
 8003b3c:	08003acd 	.word	0x08003acd

08003b40 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003b40:	4770      	bx	lr
	...

08003b44 <_Z23getFont_verdana_40_4bppv>:
{
 8003b44:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003b46:	4d15      	ldr	r5, [pc, #84]	; (8003b9c <_Z23getFont_verdana_40_4bppv+0x58>)
{
 8003b48:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003b4a:	e8d5 4f8f 	ldab	r4, [r5]
 8003b4e:	f014 0401 	ands.w	r4, r4, #1
 8003b52:	d120      	bne.n	8003b96 <_Z23getFont_verdana_40_4bppv+0x52>
 8003b54:	4628      	mov	r0, r5
 8003b56:	f025 fd26 	bl	80295a6 <__cxa_guard_acquire>
 8003b5a:	b1e0      	cbz	r0, 8003b96 <_Z23getFont_verdana_40_4bppv+0x52>
 8003b5c:	233f      	movs	r3, #63	; 0x3f
 8003b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b60:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	9308      	str	r3, [sp, #32]
 8003b66:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003b68:	490f      	ldr	r1, [pc, #60]	; (8003ba8 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003b6a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003b6e:	2304      	movs	r3, #4
 8003b70:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003b74:	2328      	movs	r3, #40	; 0x28
 8003b76:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003b80:	480a      	ldr	r0, [pc, #40]	; (8003bac <_Z23getFont_verdana_40_4bppv+0x68>)
 8003b82:	940a      	str	r4, [sp, #40]	; 0x28
 8003b84:	9405      	str	r4, [sp, #20]
 8003b86:	f7ff febd 	bl	8003904 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003b8a:	4809      	ldr	r0, [pc, #36]	; (8003bb0 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003b8c:	f025 fd54 	bl	8029638 <atexit>
 8003b90:	4628      	mov	r0, r5
 8003b92:	f025 fd14 	bl	80295be <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8003b96:	4805      	ldr	r0, [pc, #20]	; (8003bac <_Z23getFont_verdana_40_4bppv+0x68>)
 8003b98:	b00f      	add	sp, #60	; 0x3c
 8003b9a:	bd30      	pop	{r4, r5, pc}
 8003b9c:	201970ac 	.word	0x201970ac
 8003ba0:	0802d970 	.word	0x0802d970
 8003ba4:	0802d97c 	.word	0x0802d97c
 8003ba8:	90000198 	.word	0x90000198
 8003bac:	201970b0 	.word	0x201970b0
 8003bb0:	08003b41 	.word	0x08003b41

08003bb4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	4770      	bx	lr

08003bb8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8003bb8:	2000      	movs	r0, #0
 8003bba:	4770      	bx	lr

08003bbc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003bbc:	b40e      	push	{r1, r2, r3}
 8003bbe:	b503      	push	{r0, r1, lr}
 8003bc0:	ab03      	add	r3, sp, #12
 8003bc2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003bc6:	2100      	movs	r1, #0
    va_start(pArg, text);
 8003bc8:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003bca:	f016 f8e9 	bl	8019da0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003bce:	b002      	add	sp, #8
 8003bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bd4:	b003      	add	sp, #12
 8003bd6:	4770      	bx	lr

08003bd8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003bd8:	b40c      	push	{r2, r3}
 8003bda:	b507      	push	{r0, r1, r2, lr}
 8003bdc:	ab04      	add	r3, sp, #16
 8003bde:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003be2:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003be4:	f016 f8dc 	bl	8019da0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003be8:	b003      	add	sp, #12
 8003bea:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bee:	b002      	add	sp, #8
 8003bf0:	4770      	bx	lr
	...

08003bf4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003bf4:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8003bf6:	b510      	push	{r4, lr}
 8003bf8:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003bfa:	b373      	cbz	r3, 8003c5a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003bfc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003bfe:	b92b      	cbnz	r3, 8003c0c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003c00:	21c5      	movs	r1, #197	; 0xc5
 8003c02:	4b18      	ldr	r3, [pc, #96]	; (8003c64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003c04:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003c06:	4819      	ldr	r0, [pc, #100]	; (8003c6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003c08:	f025 fcf8 	bl	80295fc <__assert_func>
            return buffer[pos];
 8003c0c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003c0e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003c12:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003c14:	b30b      	cbz	r3, 8003c5a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003c16:	f017 fb08 	bl	801b22a <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003c1a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d803      	bhi.n	8003c28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003c20:	21cb      	movs	r1, #203	; 0xcb
 8003c22:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003c24:	4a13      	ldr	r2, [pc, #76]	; (8003c74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003c26:	e7ee      	b.n	8003c06 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003c28:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003c2a:	f640 103f 	movw	r0, #2367	; 0x93f
 8003c2e:	1c53      	adds	r3, r2, #1
 8003c30:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003c32:	4619      	mov	r1, r3
 8003c34:	2b09      	cmp	r3, #9
 8003c36:	bf88      	it	hi
 8003c38:	f1a3 010a 	subhi.w	r1, r3, #10
 8003c3c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003c40:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8003c42:	4281      	cmp	r1, r0
 8003c44:	d109      	bne.n	8003c5a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8003c46:	2b0a      	cmp	r3, #10
 8003c48:	bf28      	it	cs
 8003c4a:	2300      	movcs	r3, #0
 8003c4c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
            return buffer[pos];
 8003c50:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003c52:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003c56:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8003c58:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003c5a:	4620      	mov	r0, r4
}
 8003c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003c60:	f017 b9e6 	b.w	801b030 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003c64:	0802ba6c 	.word	0x0802ba6c
 8003c68:	0802ba75 	.word	0x0802ba75
 8003c6c:	0802bb20 	.word	0x0802bb20
 8003c70:	0802bb6a 	.word	0x0802bb6a
 8003c74:	0802bb78 	.word	0x0802bb78

08003c78 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003c78:	f017 b9a1 	b.w	801afbe <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003c7c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003c7c:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003c7e:	bb18      	cbnz	r0, 8003cc8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003c80:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003c82:	4813      	ldr	r0, [pc, #76]	; (8003cd0 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4913      	ldr	r1, [pc, #76]	; (8003cd4 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003c88:	b1b3      	cbz	r3, 8003cb8 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003c8a:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003c8c:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003c8e:	441a      	add	r2, r3
 8003c90:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003c92:	685a      	ldr	r2, [r3, #4]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003c94:	441c      	add	r4, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003c96:	441a      	add	r2, r3
 8003c98:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003c9e:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003ca0:	f000 f82a 	bl	8003cf8 <_ZN17TypedTextDatabase8getFontsEv>
 8003ca4:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003ca6:	f000 f825 	bl	8003cf4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003caa:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003cac:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003cae:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003cb0:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003cb4:	8018      	strh	r0, [r3, #0]
    }
}
 8003cb6:	e007      	b.n	8003cc8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003cba:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003cbe:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003cc2:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003cc4:	2c00      	cmp	r4, #0
 8003cc6:	d1e8      	bne.n	8003c9a <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003cc8:	bd38      	pop	{r3, r4, r5, pc}
 8003cca:	bf00      	nop
 8003ccc:	201970dc 	.word	0x201970dc
 8003cd0:	201970e0 	.word	0x201970e0
 8003cd4:	201970e4 	.word	0x201970e4
 8003cd8:	201970e8 	.word	0x201970e8
 8003cdc:	20198548 	.word	0x20198548
 8003ce0:	20198550 	.word	0x20198550
 8003ce4:	2019854c 	.word	0x2019854c
 8003ce8:	900001ac 	.word	0x900001ac
 8003cec:	900001a8 	.word	0x900001a8
 8003cf0:	900001b4 	.word	0x900001b4

08003cf4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	4770      	bx	lr

08003cf8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003cf8:	4800      	ldr	r0, [pc, #0]	; (8003cfc <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003cfa:	4770      	bx	lr
 8003cfc:	201970ec 	.word	0x201970ec

08003d00 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003d00:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 8003d02:	f7ff fee5 	bl	8003ad0 <_Z23getFont_verdana_20_4bppv>
};
 8003d06:	4c04      	ldr	r4, [pc, #16]	; (8003d18 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
 8003d08:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003d0a:	f7ff ff1b 	bl	8003b44 <_Z23getFont_verdana_40_4bppv>
};
 8003d0e:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003d10:	f7ff fea4 	bl	8003a5c <_Z23getFont_verdana_10_4bppv>
};
 8003d14:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8003d16:	bd10      	pop	{r4, pc}
 8003d18:	201970ec 	.word	0x201970ec

08003d1c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003d1c:	4770      	bx	lr

08003d1e <_ZN19FrontendApplicationD0Ev>:
 8003d1e:	b510      	push	{r4, lr}
 8003d20:	4604      	mov	r4, r0
 8003d22:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003d26:	f025 fc3c 	bl	80295a2 <_ZdlPvj>
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	bd10      	pop	{r4, pc}

08003d2e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003d2e:	b510      	push	{r4, lr}
 8003d30:	4604      	mov	r4, r0
    {
        model.tick();
 8003d32:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8003d36:	f000 f812 	bl	8003d5e <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003d3a:	4620      	mov	r0, r4
    }
 8003d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003d40:	f015 b996 	b.w	8019070 <_ZN8touchgfx11Application15handleTickEventEv>

08003d44 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003d44:	b510      	push	{r4, lr}
 8003d46:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003d48:	f7ff fd76 	bl	8003838 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003d4c:	4b01      	ldr	r3, [pc, #4]	; (8003d54 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8003d4e:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8003d50:	6023      	str	r3, [r4, #0]
}
 8003d52:	bd10      	pop	{r4, pc}
 8003d54:	0802bc54 	.word	0x0802bc54

08003d58 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	6002      	str	r2, [r0, #0]
{

}
 8003d5c:	4770      	bx	lr

08003d5e <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8003d5e:	4770      	bx	lr

08003d60 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8003d60:	4770      	bx	lr

08003d62 <_ZThn4_N16Screen1PresenterD1Ev>:
 8003d62:	3804      	subs	r0, #4
 8003d64:	4770      	bx	lr

08003d66 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8003d66:	4770      	bx	lr

08003d68 <_ZN16Screen1PresenterD0Ev>:
 8003d68:	b510      	push	{r4, lr}
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	2110      	movs	r1, #16
 8003d6e:	f025 fc18 	bl	80295a2 <_ZdlPvj>
 8003d72:	4620      	mov	r0, r4
 8003d74:	bd10      	pop	{r4, pc}

08003d76 <_ZThn4_N16Screen1PresenterD0Ev>:
 8003d76:	f1a0 0004 	sub.w	r0, r0, #4
 8003d7a:	e7f5      	b.n	8003d68 <_ZN16Screen1PresenterD0Ev>

08003d7c <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003d7c:	2200      	movs	r2, #0
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8003d7e:	b510      	push	{r4, lr}
 8003d80:	6082      	str	r2, [r0, #8]
    : view(v)
 8003d82:	4a04      	ldr	r2, [pc, #16]	; (8003d94 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
 8003d84:	60c1      	str	r1, [r0, #12]
 8003d86:	f102 0408 	add.w	r4, r2, #8
 8003d8a:	3220      	adds	r2, #32
 8003d8c:	6004      	str	r4, [r0, #0]
 8003d8e:	6042      	str	r2, [r0, #4]
}
 8003d90:	bd10      	pop	{r4, pc}
 8003d92:	bf00      	nop
 8003d94:	0802bc98 	.word	0x0802bc98

08003d98 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8003d98:	4770      	bx	lr
	...

08003d9c <_ZN11Screen1View9tick_funcEv>:

void Screen1View::tick_func(){
 8003d9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da0:	4f55      	ldr	r7, [pc, #340]	; (8003ef8 <_ZN11Screen1View9tick_funcEv+0x15c>)
 8003da2:	4606      	mov	r6, r0
 8003da4:	46b8      	mov	r8, r7
 8003da6:	2408      	movs	r4, #8
			if( grid[c][r] > 0 ){
				if( rand()%20 != 0 ){
					grid[c][r]--;
				}
			}else{
				grid[c][r] = 160;
 8003da8:	f04f 0ba0 	mov.w	fp, #160	; 0xa0
				if( rand()%20 != 0 ){
 8003dac:	f04f 0a14 	mov.w	sl, #20
void Screen1View::tick_func(){
 8003db0:	4645      	mov	r5, r8
 8003db2:	f04f 0900 	mov.w	r9, #0
			if( grid[c][r] > 0 ){
 8003db6:	682b      	ldr	r3, [r5, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	dd68      	ble.n	8003e8e <_ZN11Screen1View9tick_funcEv+0xf2>
				if( rand()%20 != 0 ){
 8003dbc:	f026 f902 	bl	8029fc4 <rand>
 8003dc0:	fb90 f3fa 	sdiv	r3, r0, sl
 8003dc4:	fb03 001a 	mls	r0, r3, sl, r0
 8003dc8:	b110      	cbz	r0, 8003dd0 <_ZN11Screen1View9tick_funcEv+0x34>
					grid[c][r]--;
 8003dca:	682b      	ldr	r3, [r5, #0]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	602b      	str	r3, [r5, #0]
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003dd0:	f109 0908 	add.w	r9, r9, #8
 8003dd4:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8003dd8:	f105 0520 	add.w	r5, r5, #32
 8003ddc:	d1eb      	bne.n	8003db6 <_ZN11Screen1View9tick_funcEv+0x1a>
	for(uint8_t r = 0; r < ROWS; r ++ ){
 8003dde:	3c01      	subs	r4, #1
 8003de0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003de4:	f108 0804 	add.w	r8, r8, #4
 8003de8:	d1e2      	bne.n	8003db0 <_ZN11Screen1View9tick_funcEv+0x14>
        {
            red = green = blue = value;
            return;
        }

        const uint8_t region = (hue * 6) >> 8;
 8003dea:	f04f 0806 	mov.w	r8, #6
			}
		}
	}

	//Draw cells
	uint16_t index = 0;
 8003dee:	2500      	movs	r5, #0
        const int next_region_start = ((((region + 1) << 8) + 5) / 6); // Can go up to 256, uint8_t not enough
        const uint8_t region_size = next_region_start - (((region << 8) + 5) / 6);
 8003df0:	f06f 0905 	mvn.w	r9, #5
	for(uint8_t r = 0; r < ROWS; r ++ ){
		for(uint8_t c = 0; c < COLS; c ++ ){
			//box[index].setColor(touchgfx::Color::getColorFromRGB(0, 119, 178));
			box[index].setColor(touchgfx::Color::getColorFromHSV(grid[c][r], 255, 255));
 8003df4:	016b      	lsls	r3, r5, #5
 8003df6:	5cf9      	ldrb	r1, [r7, r3]
 8003df8:	1960      	adds	r0, r4, r5
        const uint8_t region = (hue * 6) >> 8;
 8003dfa:	fb08 f201 	mul.w	r2, r8, r1
        const int next_region_start = ((((region + 1) << 8) + 5) / 6); // Can go up to 256, uint8_t not enough
 8003dfe:	f402 63e0 	and.w	r3, r2, #1792	; 0x700
 8003e02:	f203 1305 	addw	r3, r3, #261	; 0x105
 8003e06:	fbb3 fef8 	udiv	lr, r3, r8
        const uint8_t region_size = next_region_start - (((region << 8) + 5) / 6);
 8003e0a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8003e0e:	3305      	adds	r3, #5
 8003e10:	fb93 f3f9 	sdiv	r3, r3, r9
        const uint8_t remainder = 255 - (next_region_start - hue) * 255 / region_size;
 8003e14:	ebae 0101 	sub.w	r1, lr, r1
        const uint8_t region_size = next_region_start - (((region << 8) + 5) / 6);
 8003e18:	4473      	add	r3, lr
        const uint8_t remainder = 255 - (next_region_start - hue) * 255 / region_size;
 8003e1a:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	fb91 f3f3 	sdiv	r3, r1, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	b2db      	uxtb	r3, r3

        const uint8_t p = LCD::div255(value * (255 - saturation));
        const uint8_t q = LCD::div255(value * (255 - LCD::div255(saturation * remainder)));
 8003e28:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
 8003e2c:	b289      	uxth	r1, r1
        const uint8_t region = (hue * 6) >> 8;
 8003e2e:	ea4f 2c22 	mov.w	ip, r2, asr #8
     *
     * @return The result of a division by 255.
     */
    FORCE_INLINE_FUNCTION static uint8_t div255(uint16_t num)
    {
        return (num + 1 + (num >> 8)) >> 8;
 8003e32:	1c4a      	adds	r2, r1, #1
 8003e34:	0a09      	lsrs	r1, r1, #8
 8003e36:	fa11 f282 	uxtah	r2, r1, r2
 8003e3a:	1212      	asrs	r2, r2, #8
        const uint8_t q = LCD::div255(value * (255 - LCD::div255(saturation * remainder)));
 8003e3c:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8003e40:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8003e44:	b292      	uxth	r2, r2
        const uint8_t t = LCD::div255(value * (255 - LCD::div255(saturation * (255 - remainder))));
 8003e46:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003e4a:	1c51      	adds	r1, r2, #1
 8003e4c:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 8003e50:	0a12      	lsrs	r2, r2, #8
 8003e52:	fa12 f281 	uxtah	r2, r2, r1
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	0a1b      	lsrs	r3, r3, #8
 8003e60:	fa13 f282 	uxtah	r2, r3, r2
 8003e64:	1212      	asrs	r2, r2, #8
 8003e66:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8003e6a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8003e6e:	b292      	uxth	r2, r2
 8003e70:	1c53      	adds	r3, r2, #1
 8003e72:	0a12      	lsrs	r2, r2, #8
 8003e74:	fa12 f383 	uxtah	r3, r2, r3
 8003e78:	b280      	uxth	r0, r0
 8003e7a:	f3c3 2307 	ubfx	r3, r3, #8, #8

        switch (region)
 8003e7e:	f1bc 0f04 	cmp.w	ip, #4
 8003e82:	d832      	bhi.n	8003eea <_ZN11Screen1View9tick_funcEv+0x14e>
 8003e84:	e8df f00c 	tbb	[pc, ip]
 8003e88:	29260635 	.word	0x29260635
 8003e8c:	2e          	.byte	0x2e
 8003e8d:	00          	.byte	0x00
				grid[c][r] = 160;
 8003e8e:	f8c5 b000 	str.w	fp, [r5]
 8003e92:	e79d      	b.n	8003dd0 <_ZN11Screen1View9tick_funcEv+0x34>
 8003e94:	f04f 0c00 	mov.w	ip, #0
            green = value;
            blue = p;
            break;
        case 2:
            red = p;
            green = value;
 8003e98:	23ff      	movs	r3, #255	; 0xff
 8003e9a:	222c      	movs	r2, #44	; 0x2c
 8003e9c:	4350      	muls	r0, r2
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003ea4:	ea43 030c 	orr.w	r3, r3, ip
 8003ea8:	1832      	adds	r2, r6, r0
 8003eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eae:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
			box[index].invalidate();
 8003eb2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003eb6:	3098      	adds	r0, #152	; 0x98
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	4430      	add	r0, r6
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003ebc:	3501      	adds	r5, #1
			box[index].invalidate();
 8003ebe:	4798      	blx	r3
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003ec0:	2d08      	cmp	r5, #8
 8003ec2:	d197      	bne.n	8003df4 <_ZN11Screen1View9tick_funcEv+0x58>
			index++;
 8003ec4:	3408      	adds	r4, #8
 8003ec6:	b2a4      	uxth	r4, r4
	for(uint8_t r = 0; r < ROWS; r ++ ){
 8003ec8:	2c40      	cmp	r4, #64	; 0x40
 8003eca:	f107 0704 	add.w	r7, r7, #4
 8003ece:	d18e      	bne.n	8003dee <_ZN11Screen1View9tick_funcEv+0x52>
		}
	}
}
 8003ed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blue = t;
 8003ed4:	469c      	mov	ip, r3
            red = p;
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	e7de      	b.n	8003e98 <_ZN11Screen1View9tick_funcEv+0xfc>
            break;
        case 3:
            red = p;
            green = q;
 8003eda:	460b      	mov	r3, r1
            red = p;
 8003edc:	2100      	movs	r1, #0
            blue = value;
            break;
        case 4:
            red = t;
            green = p;
            blue = value;
 8003ede:	f04f 0cff 	mov.w	ip, #255	; 0xff
            break;
 8003ee2:	e7da      	b.n	8003e9a <_ZN11Screen1View9tick_funcEv+0xfe>
            red = t;
 8003ee4:	4619      	mov	r1, r3
            green = p;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e7f9      	b.n	8003ede <_ZN11Screen1View9tick_funcEv+0x142>
        default:
            red = value;
            green = p;
            blue = q;
 8003eea:	468c      	mov	ip, r1
            green = p;
 8003eec:	2300      	movs	r3, #0
            red = value;
 8003eee:	21ff      	movs	r1, #255	; 0xff
 8003ef0:	e7d3      	b.n	8003e9a <_ZN11Screen1View9tick_funcEv+0xfe>
            blue = p;
 8003ef2:	f04f 0c00 	mov.w	ip, #0
 8003ef6:	e7fa      	b.n	8003eee <_ZN11Screen1View9tick_funcEv+0x152>
 8003ef8:	201970f8 	.word	0x201970f8

08003efc <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4604      	mov	r4, r0
 8003f00:	f246 356c 	movw	r5, #25452	; 0x636c
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <_ZN11Screen1ViewD1Ev+0x24>)
 8003f06:	6003      	str	r3, [r0, #0]
 8003f08:	5963      	ldr	r3, [r4, r5]
 8003f0a:	1960      	adds	r0, r4, r5
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3d2c      	subs	r5, #44	; 0x2c
 8003f10:	4798      	blx	r3
 8003f12:	2d6c      	cmp	r5, #108	; 0x6c
 8003f14:	d1f8      	bne.n	8003f08 <_ZN11Screen1ViewD1Ev+0xc>
 8003f16:	4620      	mov	r0, r4
 8003f18:	f7ff fd57 	bl	80039ca <_ZN15Screen1ViewBaseD1Ev>
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	bd38      	pop	{r3, r4, r5, pc}
 8003f20:	0802bcc8 	.word	0x0802bcc8

08003f24 <_ZN11Screen1ViewD0Ev>:
 8003f24:	b510      	push	{r4, lr}
 8003f26:	4604      	mov	r4, r0
 8003f28:	f7ff ffe8 	bl	8003efc <_ZN11Screen1ViewD1Ev>
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	f246 3198 	movw	r1, #25496	; 0x6398
 8003f32:	f025 fb36 	bl	80295a2 <_ZdlPvj>
 8003f36:	4620      	mov	r0, r4
 8003f38:	bd10      	pop	{r4, pc}
	...

08003f3c <_ZN8touchgfx3BoxC1Ev>:
          visible(true)
 8003f3c:	f44f 7180 	mov.w	r1, #256	; 0x100
        : Widget(), alpha(255), color(0)
 8003f40:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <_ZN8touchgfx3BoxC1Ev+0x28>)
 8003f42:	8481      	strh	r1, [r0, #36]	; 0x24
 8003f44:	6002      	str	r2, [r0, #0]
 8003f46:	21ff      	movs	r1, #255	; 0xff
        : x(0), y(0), width(0), height(0)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8003f4e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003f52:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8003f56:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003f5a:	e9c0 2207 	strd	r2, r2, [r0, #28]
        : color(col)
 8003f5e:	6282      	str	r2, [r0, #40]	; 0x28
    }
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	0802bf78 	.word	0x0802bf78

08003f68 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003f68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	f7ff fd3f 	bl	80039f0 <_ZN15Screen1ViewBaseC1Ev>
 8003f72:	4630      	mov	r0, r6
 8003f74:	4b34      	ldr	r3, [pc, #208]	; (8004048 <_ZN11Screen1ViewC1Ev+0xe0>)
 8003f76:	f506 45c7 	add.w	r5, r6, #25472	; 0x6380
 8003f7a:	f840 3b6c 	str.w	r3, [r0], #108
 8003f7e:	f7ff ffdd 	bl	8003f3c <_ZN8touchgfx3BoxC1Ev>
 8003f82:	f106 0498 	add.w	r4, r6, #152	; 0x98
 8003f86:	3518      	adds	r5, #24
 8003f88:	4620      	mov	r0, r4
 8003f8a:	342c      	adds	r4, #44	; 0x2c
 8003f8c:	f7ff ffd6 	bl	8003f3c <_ZN8touchgfx3BoxC1Ev>
 8003f90:	42ac      	cmp	r4, r5
 8003f92:	d1f9      	bne.n	8003f88 <_ZN11Screen1ViewC1Ev+0x20>
 8003f94:	2408      	movs	r4, #8
			grid[c][r] = 140+rand()%20;
 8003f96:	f04f 0814 	mov.w	r8, #20
 8003f9a:	4f2c      	ldr	r7, [pc, #176]	; (800404c <_ZN11Screen1ViewC1Ev+0xe4>)
Screen1View::Screen1View()
 8003f9c:	2500      	movs	r5, #0
			grid[c][r] = 140+rand()%20;
 8003f9e:	f026 f811 	bl	8029fc4 <rand>
 8003fa2:	fb90 f3f8 	sdiv	r3, r0, r8
 8003fa6:	fb03 0018 	mls	r0, r3, r8, r0
 8003faa:	308c      	adds	r0, #140	; 0x8c
 8003fac:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003fb0:	3508      	adds	r5, #8
 8003fb2:	2d40      	cmp	r5, #64	; 0x40
 8003fb4:	d1f3      	bne.n	8003f9e <_ZN11Screen1ViewC1Ev+0x36>
	for(uint8_t r = 0; r < ROWS; r ++ ){
 8003fb6:	3c01      	subs	r4, #1
 8003fb8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003fbc:	f107 0704 	add.w	r7, r7, #4
 8003fc0:	d1ec      	bne.n	8003f9c <_ZN11Screen1ViewC1Ev+0x34>
			box[index].setPosition(80+c*40, 80+r*40, 39, 39);
 8003fc2:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
	uint16_t index = 0;
 8003fc6:	46a0      	mov	r8, r4
 8003fc8:	f04f 0b50 	mov.w	fp, #80	; 0x50
 8003fcc:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003fd0:	3150      	adds	r1, #80	; 0x50
 8003fd2:	fa0f f981 	sxth.w	r9, r1
			box[index].setPosition(80+c*40, 80+r*40, 39, 39);
 8003fd6:	fb0a f508 	mul.w	r5, sl, r8
 8003fda:	f105 0798 	add.w	r7, r5, #152	; 0x98
        setX(x);
 8003fde:	4435      	add	r5, r6
 8003fe0:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003fe4:	4437      	add	r7, r6
 8003fe6:	fa0f f18b 	sxth.w	r1, fp
 8003fea:	4638      	mov	r0, r7
 8003fec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003fee:	4790      	blx	r2
        setY(y);
 8003ff0:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	4638      	mov	r0, r7
 8003ff8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ffa:	4790      	blx	r2
        setWidth(width);
 8003ffc:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8004000:	2127      	movs	r1, #39	; 0x27
 8004002:	4638      	mov	r0, r7
 8004004:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004006:	4790      	blx	r2
        setHeight(height);
 8004008:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 800400c:	2127      	movs	r1, #39	; 0x27
 800400e:	4638      	mov	r0, r7
 8004010:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004012:	4790      	blx	r2
        color = newColor;
 8004014:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <_ZN11Screen1ViewC1Ev+0xe8>)
		for(uint8_t c = 0; c < COLS; c ++ ){
 8004016:	f10b 0b28 	add.w	fp, fp, #40	; 0x28
 800401a:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800401e:	4639      	mov	r1, r7
 8004020:	1d30      	adds	r0, r6, #4
 8004022:	fa1f fb8b 	uxth.w	fp, fp
 8004026:	f012 fd99 	bl	8016b5c <_ZN8touchgfx9Container3addERNS_8DrawableE>
			index++;
 800402a:	f108 0301 	add.w	r3, r8, #1
		for(uint8_t c = 0; c < COLS; c ++ ){
 800402e:	f5bb 7fc8 	cmp.w	fp, #400	; 0x190
			index++;
 8004032:	fa1f f883 	uxth.w	r8, r3
		for(uint8_t c = 0; c < COLS; c ++ ){
 8004036:	d1ce      	bne.n	8003fd6 <_ZN11Screen1ViewC1Ev+0x6e>
			index++;
 8004038:	3408      	adds	r4, #8
 800403a:	b2a4      	uxth	r4, r4
	for(uint8_t r = 0; r < ROWS; r ++ ){
 800403c:	2c40      	cmp	r4, #64	; 0x40
 800403e:	d1c2      	bne.n	8003fc6 <_ZN11Screen1ViewC1Ev+0x5e>
}
 8004040:	4630      	mov	r0, r6
 8004042:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004046:	bf00      	nop
 8004048:	0802bcc8 	.word	0x0802bcc8
 800404c:	201970f8 	.word	0x201970f8
 8004050:	ff0077b2 	.word	0xff0077b2

08004054 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8004054:	f7ff bcba 	b.w	80039cc <_ZN15Screen1ViewBase11setupScreenEv>

08004058 <vl53l5cx_is_alive>:
}

uint8_t vl53l5cx_is_alive(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_is_alive)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
	uint8_t device_id, revision_id;

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800406e:	4618      	mov	r0, r3
 8004070:	f7fd fce0 	bl	8001a34 <WrByte>
 8004074:	4603      	mov	r3, r0
 8004076:	461a      	mov	r2, r3
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	4313      	orrs	r3, r2
 800407c:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0, &device_id);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f107 020e 	add.w	r2, r7, #14
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f7fd fca0 	bl	80019cc <RdByte>
 800408c:	4603      	mov	r3, r0
 800408e:	461a      	mov	r2, r3
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	4313      	orrs	r3, r2
 8004094:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 1, &revision_id);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f107 020d 	add.w	r2, r7, #13
 800409c:	2101      	movs	r1, #1
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fd fc94 	bl	80019cc <RdByte>
 80040a4:	4603      	mov	r3, r0
 80040a6:	461a      	mov	r2, r3
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2202      	movs	r2, #2
 80040b2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fd fcbc 	bl	8001a34 <WrByte>
 80040bc:	4603      	mov	r3, r0
 80040be:	461a      	mov	r2, r3
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	73fb      	strb	r3, [r7, #15]

	if((device_id == (uint8_t)0xF0) && (revision_id == (uint8_t)0x02))
 80040c6:	7bbb      	ldrb	r3, [r7, #14]
 80040c8:	2bf0      	cmp	r3, #240	; 0xf0
 80040ca:	d106      	bne.n	80040da <vl53l5cx_is_alive+0x82>
 80040cc:	7b7b      	ldrb	r3, [r7, #13]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d103      	bne.n	80040da <vl53l5cx_is_alive+0x82>
	{
		*p_is_alive = 1;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	e002      	b.n	80040e0 <vl53l5cx_is_alive+0x88>
	}
	else
	{
		*p_is_alive = 0;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <APS512XX_EnableMemoryMappedMode>:
  * @param  BurstType Type of burst used for the access
  * @retval Memory status
  */
int32_t APS512XX_EnableMemoryMappedMode(XSPI_HandleTypeDef *Ctx, uint32_t ReadLatencyCode, uint32_t WriteLatencyCode,
                                        uint32_t IOMode, uint32_t BurstType)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b09a      	sub	sp, #104	; 0x68
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	603b      	str	r3, [r7, #0]
  XSPI_RegularCmdTypeDef   sCommand = {0};
 80040f8:	f107 0318 	add.w	r3, r7, #24
 80040fc:	2250      	movs	r2, #80	; 0x50
 80040fe:	2100      	movs	r1, #0
 8004100:	4618      	mov	r0, r3
 8004102:	f025 faf9 	bl	80296f8 <memset>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8004106:	f107 0310 	add.w	r3, r7, #16
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	605a      	str	r2, [r3, #4]

  /* Initialize the write command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_WRITE_CFG;
 8004110:	2302      	movs	r3, #2
 8004112:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 8004114:	2304      	movs	r3, #4
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 8004118:	2300      	movs	r3, #0
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800411c:	2300      	movs	r3, #0
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction         = ((BurstType == 0U) ? APS512XX_WRITE_LINEAR_BURST_CMD : APS512XX_WRITE_CMD);
 8004120:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <APS512XX_EnableMemoryMappedMode+0x40>
 8004126:	23a0      	movs	r3, #160	; 0xa0
 8004128:	e000      	b.n	800412c <APS512XX_EnableMemoryMappedMode+0x42>
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 800412e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004132:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 8004134:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004138:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 800413a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800413e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 8004140:	2300      	movs	r3, #0
 8004142:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode            = ((IOMode == 0U) ? HAL_XSPI_DATA_8_LINES : HAL_XSPI_DATA_16_LINES);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d102      	bne.n	8004150 <APS512XX_EnableMemoryMappedMode+0x66>
 800414a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800414e:	e001      	b.n	8004154 <APS512XX_EnableMemoryMappedMode+0x6a>
 8004150:	f04f 63a0 	mov.w	r3, #83886080	; 0x5000000
 8004154:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 8004156:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800415a:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3b01      	subs	r3, #1
 8004160:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
 8004162:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004166:	663b      	str	r3, [r7, #96]	; 0x60
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8004168:	2300      	movs	r3, #0
 800416a:	667b      	str	r3, [r7, #100]	; 0x64
#endif

  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800416c:	f107 0318 	add.w	r3, r7, #24
 8004170:	f241 3288 	movw	r2, #5000	; 0x1388
 8004174:	4619      	mov	r1, r3
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f00f f990 	bl	801349c <HAL_XSPI_Command>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <APS512XX_EnableMemoryMappedMode+0x9e>
  {
    return APS512XX_ERROR;
 8004182:	f04f 33ff 	mov.w	r3, #4294967295
 8004186:	e028      	b.n	80041da <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  /* Initialize the read command */
  sCommand.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
 8004188:	2301      	movs	r3, #1
 800418a:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction   = ((BurstType == 0U) ? APS512XX_READ_LINEAR_BURST_CMD : APS512XX_READ_CMD);
 800418c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <APS512XX_EnableMemoryMappedMode+0xac>
 8004192:	2320      	movs	r3, #32
 8004194:	e000      	b.n	8004198 <APS512XX_EnableMemoryMappedMode+0xae>
 8004196:	2300      	movs	r3, #0
 8004198:	623b      	str	r3, [r7, #32]
  sCommand.DummyCycles   = (ReadLatencyCode - 1U);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	3b01      	subs	r3, #1
 800419e:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041a0:	f107 0318 	add.w	r3, r7, #24
 80041a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a8:	4619      	mov	r1, r3
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f00f f976 	bl	801349c <HAL_XSPI_Command>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <APS512XX_EnableMemoryMappedMode+0xd2>
  {
    return APS512XX_ERROR;
 80041b6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ba:	e00e      	b.n	80041da <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  /* Activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]

  if (HAL_XSPI_MemoryMapped(Ctx, &sMemMappedCfg) != HAL_OK)
 80041c0:	f107 0310 	add.w	r3, r7, #16
 80041c4:	4619      	mov	r1, r3
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f00f fbf4 	bl	80139b4 <HAL_XSPI_MemoryMapped>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <APS512XX_EnableMemoryMappedMode+0xee>
  {
    return APS512XX_ERROR;
 80041d2:	f04f 33ff 	mov.w	r3, #4294967295
 80041d6:	e000      	b.n	80041da <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  return APS512XX_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3768      	adds	r7, #104	; 0x68
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <APS512XX_ReadReg>:
  * @param  Value Register value pointer
  * @param  LatencyCode Latency used for the access
  * @retval error status
  */
int32_t APS512XX_ReadReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t *Value, uint32_t LatencyCode)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b098      	sub	sp, #96	; 0x60
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
 80041ee:	603b      	str	r3, [r7, #0]
  XSPI_RegularCmdTypeDef sCommand = {0};
 80041f0:	f107 0310 	add.w	r3, r7, #16
 80041f4:	2250      	movs	r2, #80	; 0x50
 80041f6:	2100      	movs	r1, #0
 80041f8:	4618      	mov	r0, r3
 80041fa:	f025 fa7d 	bl	80296f8 <memset>

  /* Initialize the read register command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_COMMON_CFG;
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 8004202:	2304      	movs	r3, #4
 8004204:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 8004206:	2300      	movs	r3, #0
 8004208:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800420a:	2300      	movs	r3, #0
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction         = APS512XX_READ_REG_CMD;
 800420e:	2340      	movs	r3, #64	; 0x40
 8004210:	61bb      	str	r3, [r7, #24]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 8004212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004216:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 8004218:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800421c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 800421e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004222:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.Address             = Address;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 8004228:	2300      	movs	r3, #0
 800422a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
 800422c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004230:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 8004232:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004236:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataLength          = 2;
 8004238:	2302      	movs	r3, #2
 800423a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DummyCycles         = (LatencyCode - 1U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	3b01      	subs	r3, #1
 8004240:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
 8004242:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004246:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8004248:	2300      	movs	r3, #0
 800424a:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800424c:	f107 0310 	add.w	r3, r7, #16
 8004250:	f241 3288 	movw	r2, #5000	; 0x1388
 8004254:	4619      	mov	r1, r3
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f00f f920 	bl	801349c <HAL_XSPI_Command>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <APS512XX_ReadReg+0x86>
  {
    return APS512XX_ERROR;
 8004262:	f04f 33ff 	mov.w	r3, #4294967295
 8004266:	e00c      	b.n	8004282 <APS512XX_ReadReg+0xa0>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, (uint8_t *)Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004268:	f241 3288 	movw	r2, #5000	; 0x1388
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f00f fa73 	bl	801375a <HAL_XSPI_Receive>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <APS512XX_ReadReg+0x9e>
  {
    return APS512XX_ERROR;
 800427a:	f04f 33ff 	mov.w	r3, #4294967295
 800427e:	e000      	b.n	8004282 <APS512XX_ReadReg+0xa0>
  }

  return APS512XX_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3760      	adds	r7, #96	; 0x60
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <APS512XX_WriteReg>:
  * @param  Address Register address
  * @param  Value Value to write to register
  * @retval error status
  */
int32_t APS512XX_WriteReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t Value)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b098      	sub	sp, #96	; 0x60
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	4613      	mov	r3, r2
 8004296:	71fb      	strb	r3, [r7, #7]
  XSPI_RegularCmdTypeDef sCommand = {0};
 8004298:	f107 0310 	add.w	r3, r7, #16
 800429c:	2250      	movs	r2, #80	; 0x50
 800429e:	2100      	movs	r1, #0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f025 fa29 	bl	80296f8 <memset>

  /* Initialize the write register command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_COMMON_CFG;
 80042a6:	2300      	movs	r3, #0
 80042a8:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 80042aa:	2304      	movs	r3, #4
 80042ac:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 80042ae:	2300      	movs	r3, #0
 80042b0:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction         = APS512XX_WRITE_REG_CMD;
 80042b6:	23c0      	movs	r3, #192	; 0xc0
 80042b8:	61bb      	str	r3, [r7, #24]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 80042ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 80042c0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80042c4:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 80042c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042ca:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.Address             = Address;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 80042d0:	2300      	movs	r3, #0
 80042d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
 80042d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80042d8:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 80042da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042de:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataLength          = 2;
 80042e0:	2302      	movs	r3, #2
 80042e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DummyCycles         = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode             = HAL_XSPI_DQS_DISABLE;
 80042e8:	2300      	movs	r3, #0
 80042ea:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80042ec:	2300      	movs	r3, #0
 80042ee:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042f0:	f107 0310 	add.w	r3, r7, #16
 80042f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f8:	4619      	mov	r1, r3
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f00f f8ce 	bl	801349c <HAL_XSPI_Command>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <APS512XX_WriteReg+0x82>
  {
    return APS512XX_ERROR;
 8004306:	f04f 33ff 	mov.w	r3, #4294967295
 800430a:	e00d      	b.n	8004328 <APS512XX_WriteReg+0x9e>
  }

  /* Transmission of the data */
  if (HAL_XSPI_Transmit(Ctx, (uint8_t *)(&Value), HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800430c:	1dfb      	adds	r3, r7, #7
 800430e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004312:	4619      	mov	r1, r3
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f00f f9ad 	bl	8013674 <HAL_XSPI_Transmit>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <APS512XX_WriteReg+0x9c>
  {
    return APS512XX_ERROR;
 8004320:	f04f 33ff 	mov.w	r3, #4294967295
 8004324:	e000      	b.n	8004328 <APS512XX_WriteReg+0x9e>
  }

  return APS512XX_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3760      	adds	r7, #96	; 0x60
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <APS512XX_Reset>:
  * @brief  Reset the memory
  * @param  Ctx Component object pointer
  * @retval error status
  */
int32_t APS512XX_Reset(XSPI_HandleTypeDef *Ctx)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b096      	sub	sp, #88	; 0x58
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  XSPI_RegularCmdTypeDef sCommand = {0};
 8004338:	f107 0308 	add.w	r3, r7, #8
 800433c:	2250      	movs	r2, #80	; 0x50
 800433e:	2100      	movs	r1, #0
 8004340:	4618      	mov	r0, r3
 8004342:	f025 f9d9 	bl	80296f8 <memset>

  /* Initialize the command */
  sCommand.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
  sCommand.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 800434a:	2304      	movs	r3, #4
 800434c:	617b      	str	r3, [r7, #20]
  sCommand.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
 800434e:	2300      	movs	r3, #0
 8004350:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
  sCommand.Instruction        = APS512XX_RESET_CMD;
 8004356:	23ff      	movs	r3, #255	; 0xff
 8004358:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 800435a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressWidth       = HAL_XSPI_ADDRESS_24_BITS;
 8004360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004364:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8004366:	2300      	movs	r3, #0
 8004368:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Address            = 0;
 800436a:	2300      	movs	r3, #0
 800436c:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 800436e:	2300      	movs	r3, #0
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_XSPI_DATA_NONE;
 8004372:	2300      	movs	r3, #0
 8004374:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataLength         = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles        = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_XSPI_DQS_DISABLE;
 800437e:	2300      	movs	r3, #0
 8004380:	653b      	str	r3, [r7, #80]	; 0x50
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8004382:	2300      	movs	r3, #0
 8004384:	657b      	str	r3, [r7, #84]	; 0x54
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004386:	f107 0308 	add.w	r3, r7, #8
 800438a:	f241 3288 	movw	r2, #5000	; 0x1388
 800438e:	4619      	mov	r1, r3
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f00f f883 	bl	801349c <HAL_XSPI_Command>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <APS512XX_Reset+0x72>
  {
    return APS512XX_ERROR;
 800439c:	f04f 33ff 	mov.w	r3, #4294967295
 80043a0:	e003      	b.n	80043aa <APS512XX_Reset+0x7a>
  }

  /* Need to wait tRST */
  HAL_Delay(1);
 80043a2:	2001      	movs	r0, #1
 80043a4:	f003 fc16 	bl	8007bd4 <HAL_Delay>
  return 0/*APS512XX_OK*/;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3758      	adds	r7, #88	; 0x58
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <MX25UM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25UM51245G_GetFlashInfo(MX25UM51245G_Info_t *pInfo)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25UM51245G_FLASH_SIZE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80043c0:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25UM51245G_SECTOR_64K;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043c8:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SECTOR_64K);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043d0:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25UM51245G_SUBSECTOR_4K;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043d8:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043e0:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043e8:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043f0:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25UM51245G_PAGE_SIZE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043f8:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004400:	621a      	str	r2, [r3, #32]

  return MX25UM51245G_OK;
 8004402:	2300      	movs	r3, #0
};
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <MX25UM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25UM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                         MX25UM51245G_Transfer_t Rate)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b09c      	sub	sp, #112	; 0x70
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	70fb      	strb	r3, [r7, #3]
 800441c:	4613      	mov	r3, r2
 800441e:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef  s_command = {0};
 8004420:	f107 0320 	add.w	r3, r7, #32
 8004424:	2250      	movs	r2, #80	; 0x50
 8004426:	2100      	movs	r1, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f025 f965 	bl	80296f8 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
 800442e:	f107 030c 	add.w	r3, r7, #12
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	605a      	str	r2, [r3, #4]
 8004438:	609a      	str	r2, [r3, #8]
 800443a:	60da      	str	r2, [r3, #12]
 800443c:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d105      	bne.n	8004450 <MX25UM51245G_AutoPollingMemReady+0x40>
 8004444:	78bb      	ldrb	r3, [r7, #2]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d102      	bne.n	8004450 <MX25UM51245G_AutoPollingMemReady+0x40>
  {
    return MX25UM51245G_ERROR;
 800444a:	f04f 33ff 	mov.w	r3, #4294967295
 800444e:	e08d      	b.n	800456c <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004450:	2300      	movs	r3, #0
 8004452:	623b      	str	r3, [r7, #32]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004454:	2300      	movs	r3, #0
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <MX25UM51245G_AutoPollingMemReady+0x52>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <MX25UM51245G_AutoPollingMemReady+0x54>
 8004462:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8004464:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8004466:	78bb      	ldrb	r3, [r7, #2]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <MX25UM51245G_AutoPollingMemReady+0x60>
 800446c:	2308      	movs	r3, #8
 800446e:	e000      	b.n	8004472 <MX25UM51245G_AutoPollingMemReady+0x62>
 8004470:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004472:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <MX25UM51245G_AutoPollingMemReady+0x6e>
 800447a:	2300      	movs	r3, #0
 800447c:	e000      	b.n	8004480 <MX25UM51245G_AutoPollingMemReady+0x70>
 800447e:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004480:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_STATUS_REG_CMD
                                 : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <MX25UM51245G_AutoPollingMemReady+0x7c>
 8004488:	2305      	movs	r3, #5
 800448a:	e001      	b.n	8004490 <MX25UM51245G_AutoPollingMemReady+0x80>
 800448c:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004490:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
 8004492:	78fb      	ldrb	r3, [r7, #3]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <MX25UM51245G_AutoPollingMemReady+0x8c>
 8004498:	2300      	movs	r3, #0
 800449a:	e001      	b.n	80044a0 <MX25UM51245G_AutoPollingMemReady+0x90>
 800449c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 80044a2:	78bb      	ldrb	r3, [r7, #2]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d102      	bne.n	80044ae <MX25UM51245G_AutoPollingMemReady+0x9e>
 80044a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044ac:	e000      	b.n	80044b0 <MX25UM51245G_AutoPollingMemReady+0xa0>
 80044ae:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 80044b0:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 80044b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80044b6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80044bc:	2300      	movs	r3, #0
 80044be:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d102      	bne.n	80044cc <MX25UM51245G_AutoPollingMemReady+0xbc>
 80044c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044ca:	e001      	b.n	80044d0 <MX25UM51245G_AutoPollingMemReady+0xc0>
 80044cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80044d0:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 80044d2:	78bb      	ldrb	r3, [r7, #2]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d102      	bne.n	80044de <MX25UM51245G_AutoPollingMemReady+0xce>
 80044d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044dc:	e000      	b.n	80044e0 <MX25UM51245G_AutoPollingMemReady+0xd0>
 80044de:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 80044e0:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
 80044e2:	78fb      	ldrb	r3, [r7, #3]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d006      	beq.n	80044f6 <MX25UM51245G_AutoPollingMemReady+0xe6>
 80044e8:	78bb      	ldrb	r3, [r7, #2]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <MX25UM51245G_AutoPollingMemReady+0xe2>
 80044ee:	2305      	movs	r3, #5
 80044f0:	e002      	b.n	80044f8 <MX25UM51245G_AutoPollingMemReady+0xe8>
 80044f2:	2304      	movs	r3, #4
 80044f4:	e000      	b.n	80044f8 <MX25UM51245G_AutoPollingMemReady+0xe8>
 80044f6:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
 80044f8:	667b      	str	r3, [r7, #100]	; 0x64
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 80044fa:	78bb      	ldrb	r3, [r7, #2]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <MX25UM51245G_AutoPollingMemReady+0xf4>
 8004500:	2302      	movs	r3, #2
 8004502:	e000      	b.n	8004506 <MX25UM51245G_AutoPollingMemReady+0xf6>
 8004504:	2301      	movs	r3, #1
 8004506:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 8004508:	78bb      	ldrb	r3, [r7, #2]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d102      	bne.n	8004514 <MX25UM51245G_AutoPollingMemReady+0x104>
 800450e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004512:	e000      	b.n	8004516 <MX25UM51245G_AutoPollingMemReady+0x106>
 8004514:	2300      	movs	r3, #0
 8004516:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8004518:	2300      	movs	r3, #0
 800451a:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.MatchValue    = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
 8004520:	2301      	movs	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_XSPI_MATCH_MODE_AND;
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
  s_config.IntervalTime  = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
 8004528:	2310      	movs	r3, #16
 800452a:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 800452c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004530:	61bb      	str	r3, [r7, #24]

  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004532:	f107 0320 	add.w	r3, r7, #32
 8004536:	f241 3288 	movw	r2, #5000	; 0x1388
 800453a:	4619      	mov	r1, r3
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f00e ffad 	bl	801349c <HAL_XSPI_Command>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <MX25UM51245G_AutoPollingMemReady+0x13e>
  {
    return MX25UM51245G_ERROR;
 8004548:	f04f 33ff 	mov.w	r3, #4294967295
 800454c:	e00e      	b.n	800456c <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800454e:	f107 030c 	add.w	r3, r7, #12
 8004552:	f241 3288 	movw	r2, #5000	; 0x1388
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f00f f9a1 	bl	80138a0 <HAL_XSPI_AutoPolling>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <MX25UM51245G_AutoPollingMemReady+0x15a>
  {
    return MX25UM51245G_ERROR;
 8004564:	f04f 33ff 	mov.w	r3, #4294967295
 8004568:	e000      	b.n	800456c <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  return MX25UM51245G_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3770      	adds	r7, #112	; 0x70
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <MX25UM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                               MX25UM51245G_AddressSize_t AddressSize)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b098      	sub	sp, #96	; 0x60
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
 8004580:	4613      	mov	r3, r2
 8004582:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef      s_command = {0};
 8004584:	f107 0310 	add.w	r3, r7, #16
 8004588:	2250      	movs	r2, #80	; 0x50
 800458a:	2100      	movs	r1, #0
 800458c:	4618      	mov	r0, r3
 800458e:	f025 f8b3 	bl	80296f8 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8004592:	f107 0308 	add.w	r3, r7, #8
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d105      	bne.n	80045ae <MX25UM51245G_EnableSTRMemoryMappedMode+0x3a>
 80045a2:	78bb      	ldrb	r3, [r7, #2]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d102      	bne.n	80045ae <MX25UM51245G_EnableSTRMemoryMappedMode+0x3a>
  {
    return MX25UM51245G_ERROR;
 80045a8:	f04f 33ff 	mov.w	r3, #4294967295
 80045ac:	e088      	b.n	80046c0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
 80045ae:	2301      	movs	r3, #1
 80045b0:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 80045b6:	78fb      	ldrb	r3, [r7, #3]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x4c>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <MX25UM51245G_EnableSTRMemoryMappedMode+0x4e>
 80045c0:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 80045c2:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80045c4:	2300      	movs	r3, #0
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 80045c8:	78fb      	ldrb	r3, [r7, #3]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <MX25UM51245G_EnableSTRMemoryMappedMode+0x5e>
 80045ce:	2300      	movs	r3, #0
 80045d0:	e000      	b.n	80045d4 <MX25UM51245G_EnableSTRMemoryMappedMode+0x60>
 80045d2:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 80045d4:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_FAST_READ_CMD
                                    : MX25UM51245G_4_BYTE_ADDR_FAST_READ_CMD)
                                 : MX25UM51245G_OCTA_READ_CMD;
 80045d6:	78fb      	ldrb	r3, [r7, #3]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d106      	bne.n	80045ea <MX25UM51245G_EnableSTRMemoryMappedMode+0x76>
 80045dc:	78bb      	ldrb	r3, [r7, #2]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <MX25UM51245G_EnableSTRMemoryMappedMode+0x72>
 80045e2:	230b      	movs	r3, #11
 80045e4:	e003      	b.n	80045ee <MX25UM51245G_EnableSTRMemoryMappedMode+0x7a>
 80045e6:	230c      	movs	r3, #12
 80045e8:	e001      	b.n	80045ee <MX25UM51245G_EnableSTRMemoryMappedMode+0x7a>
 80045ea:	f64e 4313 	movw	r3, #60435	; 0xec13
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 80045ee:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d102      	bne.n	80045fc <MX25UM51245G_EnableSTRMemoryMappedMode+0x88>
 80045f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045fa:	e001      	b.n	8004600 <MX25UM51245G_EnableSTRMemoryMappedMode+0x8c>
 80045fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004600:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8004602:	2300      	movs	r3, #0
 8004604:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
                                 ? HAL_XSPI_ADDRESS_24_BITS
                                 : HAL_XSPI_ADDRESS_32_BITS;
 8004606:	78bb      	ldrb	r3, [r7, #2]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d102      	bne.n	8004612 <MX25UM51245G_EnableSTRMemoryMappedMode+0x9e>
 800460c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004610:	e001      	b.n	8004616 <MX25UM51245G_EnableSTRMemoryMappedMode+0xa2>
 8004612:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
 8004616:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8004618:	2300      	movs	r3, #0
 800461a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d102      	bne.n	8004628 <MX25UM51245G_EnableSTRMemoryMappedMode+0xb4>
 8004622:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004626:	e001      	b.n	800462c <MX25UM51245G_EnableSTRMemoryMappedMode+0xb8>
 8004628:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800462c:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
 800462e:	2300      	movs	r3, #0
 8004630:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8004632:	78fb      	ldrb	r3, [r7, #3]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <MX25UM51245G_EnableSTRMemoryMappedMode+0xc8>
 8004638:	2308      	movs	r3, #8
 800463a:	e000      	b.n	800463e <MX25UM51245G_EnableSTRMemoryMappedMode+0xca>
 800463c:	2306      	movs	r3, #6
 800463e:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8004640:	2300      	movs	r3, #0
 8004642:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8004644:	2300      	movs	r3, #0
 8004646:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004648:	f107 0310 	add.w	r3, r7, #16
 800464c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004650:	4619      	mov	r1, r3
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f00e ff22 	bl	801349c <HAL_XSPI_Command>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <MX25UM51245G_EnableSTRMemoryMappedMode+0xf0>
  {
    return MX25UM51245G_ERROR;
 800465e:	f04f 33ff 	mov.w	r3, #4294967295
 8004662:	e02d      	b.n	80046c0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
 8004664:	2302      	movs	r3, #2
 8004666:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_PAGE_PROG_CMD
                                    : MX25UM51245G_4_BYTE_PAGE_PROG_CMD)
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <MX25UM51245G_EnableSTRMemoryMappedMode+0x108>
 800466e:	78bb      	ldrb	r3, [r7, #2]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <MX25UM51245G_EnableSTRMemoryMappedMode+0x104>
 8004674:	2302      	movs	r3, #2
 8004676:	e003      	b.n	8004680 <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
 8004678:	2312      	movs	r3, #18
 800467a:	e001      	b.n	8004680 <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
 800467c:	f241 23ed 	movw	r3, #4845	; 0x12ed
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004680:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004686:	f107 0310 	add.w	r3, r7, #16
 800468a:	f241 3288 	movw	r2, #5000	; 0x1388
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f00e ff03 	bl	801349c <HAL_XSPI_Command>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <MX25UM51245G_EnableSTRMemoryMappedMode+0x12e>
  {
    return MX25UM51245G_ERROR;
 800469c:	f04f 33ff 	mov.w	r3, #4294967295
 80046a0:	e00e      	b.n	80046c0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80046a6:	f107 0308 	add.w	r3, r7, #8
 80046aa:	4619      	mov	r1, r3
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f00f f981 	bl	80139b4 <HAL_XSPI_MemoryMapped>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <MX25UM51245G_EnableSTRMemoryMappedMode+0x14a>
  {
    return MX25UM51245G_ERROR;
 80046b8:	f04f 33ff 	mov.w	r3, #4294967295
 80046bc:	e000      	b.n	80046c0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  return MX25UM51245G_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3760      	adds	r7, #96	; 0x60
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <MX25UM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b098      	sub	sp, #96	; 0x60
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef      s_command = {0};
 80046d4:	f107 0310 	add.w	r3, r7, #16
 80046d8:	2250      	movs	r2, #80	; 0x50
 80046da:	2100      	movs	r1, #0
 80046dc:	4618      	mov	r0, r3
 80046de:	f025 f80b 	bl	80296f8 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80046e2:	f107 0308 	add.w	r3, r7, #8
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
 80046ec:	2301      	movs	r3, #1
 80046ee:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 80046f4:	2304      	movs	r3, #4
 80046f6:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 80046f8:	2308      	movs	r3, #8
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = HAL_XSPI_INSTRUCTION_16_BITS;
 80046fc:	2310      	movs	r3, #16
 80046fe:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25UM51245G_OCTA_READ_DTR_CMD;
 8004700:	f64e 6311 	movw	r3, #60945	; 0xee11
 8004704:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8004706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 800470c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004710:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8004712:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004716:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8004718:	2300      	movs	r3, #0
 800471a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
 800471c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004720:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 8004722:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004726:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8004728:	2306      	movs	r3, #6
 800472a:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
 800472c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004730:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8004732:	2300      	movs	r3, #0
 8004734:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004736:	f107 0310 	add.w	r3, r7, #16
 800473a:	f241 3288 	movw	r2, #5000	; 0x1388
 800473e:	4619      	mov	r1, r3
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f00e feab 	bl	801349c <HAL_XSPI_Command>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <MX25UM51245G_EnableDTRMemoryMappedMode+0x8a>
  {
    return MX25UM51245G_ERROR;
 800474c:	f04f 33ff 	mov.w	r3, #4294967295
 8004750:	e025      	b.n	800479e <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
 8004752:	2302      	movs	r3, #2
 8004754:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
 8004756:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800475a:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_XSPI_DQS_DISABLE;
 8004760:	2300      	movs	r3, #0
 8004762:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004764:	f107 0310 	add.w	r3, r7, #16
 8004768:	f241 3288 	movw	r2, #5000	; 0x1388
 800476c:	4619      	mov	r1, r3
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f00e fe94 	bl	801349c <HAL_XSPI_Command>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <MX25UM51245G_EnableDTRMemoryMappedMode+0xb8>
  {
    return MX25UM51245G_ERROR;
 800477a:	f04f 33ff 	mov.w	r3, #4294967295
 800477e:	e00e      	b.n	800479e <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 8004780:	2300      	movs	r3, #0
 8004782:	60bb      	str	r3, [r7, #8]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8004784:	f107 0308 	add.w	r3, r7, #8
 8004788:	4619      	mov	r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f00f f912 	bl	80139b4 <HAL_XSPI_MemoryMapped>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <MX25UM51245G_EnableDTRMemoryMappedMode+0xd4>
  {
    return MX25UM51245G_ERROR;
 8004796:	f04f 33ff 	mov.w	r3, #4294967295
 800479a:	e000      	b.n	800479e <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  return MX25UM51245G_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3760      	adds	r7, #96	; 0x60
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <MX25UM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b09c      	sub	sp, #112	; 0x70
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	460b      	mov	r3, r1
 80047b0:	70fb      	strb	r3, [r7, #3]
 80047b2:	4613      	mov	r3, r2
 80047b4:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef     s_command = {0};
 80047b6:	f107 0320 	add.w	r3, r7, #32
 80047ba:	2250      	movs	r2, #80	; 0x50
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f024 ff9a 	bl	80296f8 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
 80047c4:	f107 030c 	add.w	r3, r7, #12
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	605a      	str	r2, [r3, #4]
 80047ce:	609a      	str	r2, [r3, #8]
 80047d0:	60da      	str	r2, [r3, #12]
 80047d2:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d105      	bne.n	80047e6 <MX25UM51245G_WriteEnable+0x40>
 80047da:	78bb      	ldrb	r3, [r7, #2]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d102      	bne.n	80047e6 <MX25UM51245G_WriteEnable+0x40>
  {
    return MX25UM51245G_ERROR;
 80047e0:	f04f 33ff 	mov.w	r3, #4294967295
 80047e4:	e0ab      	b.n	800493e <MX25UM51245G_WriteEnable+0x198>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 80047e6:	2300      	movs	r3, #0
 80047e8:	623b      	str	r3, [r7, #32]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <MX25UM51245G_WriteEnable+0x52>
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <MX25UM51245G_WriteEnable+0x54>
 80047f8:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80047fc:	78bb      	ldrb	r3, [r7, #2]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <MX25UM51245G_WriteEnable+0x60>
 8004802:	2308      	movs	r3, #8
 8004804:	e000      	b.n	8004808 <MX25UM51245G_WriteEnable+0x62>
 8004806:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004808:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <MX25UM51245G_WriteEnable+0x6e>
 8004810:	2300      	movs	r3, #0
 8004812:	e000      	b.n	8004816 <MX25UM51245G_WriteEnable+0x70>
 8004814:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004816:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_ENABLE_CMD
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <MX25UM51245G_WriteEnable+0x7c>
 800481e:	2306      	movs	r3, #6
 8004820:	e001      	b.n	8004826 <MX25UM51245G_WriteEnable+0x80>
 8004822:	f240 63f9 	movw	r3, #1785	; 0x6f9
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8004828:	2300      	movs	r3, #0
 800482a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 800482c:	2300      	movs	r3, #0
 800482e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 8004830:	2300      	movs	r3, #0
 8004832:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8004838:	2300      	movs	r3, #0
 800483a:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 800483c:	2300      	movs	r3, #0
 800483e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004840:	f107 0320 	add.w	r3, r7, #32
 8004844:	f241 3288 	movw	r2, #5000	; 0x1388
 8004848:	4619      	mov	r1, r3
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f00e fe26 	bl	801349c <HAL_XSPI_Command>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <MX25UM51245G_WriteEnable+0xb6>
  {
    return MX25UM51245G_ERROR;
 8004856:	f04f 33ff 	mov.w	r3, #4294967295
 800485a:	e070      	b.n	800493e <MX25UM51245G_WriteEnable+0x198>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
                             ? MX25UM51245G_READ_STATUS_REG_CMD
                             : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <MX25UM51245G_WriteEnable+0xc0>
 8004862:	2305      	movs	r3, #5
 8004864:	e001      	b.n	800486a <MX25UM51245G_WriteEnable+0xc4>
 8004866:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
 800486c:	78fb      	ldrb	r3, [r7, #3]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <MX25UM51245G_WriteEnable+0xd0>
 8004872:	2300      	movs	r3, #0
 8004874:	e001      	b.n	800487a <MX25UM51245G_WriteEnable+0xd4>
 8004876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800487a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                             ? HAL_XSPI_ADDRESS_DTR_ENABLE
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
 800487c:	78bb      	ldrb	r3, [r7, #2]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d102      	bne.n	8004888 <MX25UM51245G_WriteEnable+0xe2>
 8004882:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004886:	e000      	b.n	800488a <MX25UM51245G_WriteEnable+0xe4>
 8004888:	2300      	movs	r3, #0
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 800488a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
 800488c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004890:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8004896:	78fb      	ldrb	r3, [r7, #3]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d102      	bne.n	80048a2 <MX25UM51245G_WriteEnable+0xfc>
 800489c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048a0:	e001      	b.n	80048a6 <MX25UM51245G_WriteEnable+0x100>
 80048a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80048a6:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDTRMode    = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
 80048a8:	78bb      	ldrb	r3, [r7, #2]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d102      	bne.n	80048b4 <MX25UM51245G_WriteEnable+0x10e>
 80048ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048b2:	e000      	b.n	80048b6 <MX25UM51245G_WriteEnable+0x110>
 80048b4:	2300      	movs	r3, #0
 80048b6:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
                             ? 0U
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d006      	beq.n	80048cc <MX25UM51245G_WriteEnable+0x126>
 80048be:	78bb      	ldrb	r3, [r7, #2]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <MX25UM51245G_WriteEnable+0x122>
 80048c4:	2305      	movs	r3, #5
 80048c6:	e002      	b.n	80048ce <MX25UM51245G_WriteEnable+0x128>
 80048c8:	2304      	movs	r3, #4
 80048ca:	e000      	b.n	80048ce <MX25UM51245G_WriteEnable+0x128>
 80048cc:	2300      	movs	r3, #0
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
 80048ce:	667b      	str	r3, [r7, #100]	; 0x64
                                ? DUMMY_CYCLES_REG_OCTAL_DTR
                                : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 80048d0:	78bb      	ldrb	r3, [r7, #2]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <MX25UM51245G_WriteEnable+0x134>
 80048d6:	2302      	movs	r3, #2
 80048d8:	e000      	b.n	80048dc <MX25UM51245G_WriteEnable+0x136>
 80048da:	2301      	movs	r3, #1
 80048dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 80048de:	78bb      	ldrb	r3, [r7, #2]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d102      	bne.n	80048ea <MX25UM51245G_WriteEnable+0x144>
 80048e4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80048e8:	e000      	b.n	80048ec <MX25UM51245G_WriteEnable+0x146>
 80048ea:	2300      	movs	r3, #0
 80048ec:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048ee:	f107 0320 	add.w	r3, r7, #32
 80048f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f6:	4619      	mov	r1, r3
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f00e fdcf 	bl	801349c <HAL_XSPI_Command>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <MX25UM51245G_WriteEnable+0x164>
  {
    return MX25UM51245G_ERROR;
 8004904:	f04f 33ff 	mov.w	r3, #4294967295
 8004908:	e019      	b.n	800493e <MX25UM51245G_WriteEnable+0x198>
  }

  s_config.MatchValue      = 2U;
 800490a:	2302      	movs	r3, #2
 800490c:	60fb      	str	r3, [r7, #12]
  s_config.MatchMask       = 2U;
 800490e:	2302      	movs	r3, #2
 8004910:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
  s_config.IntervalTime    = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
 8004916:	2310      	movs	r3, #16
 8004918:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 800491a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800491e:	61bb      	str	r3, [r7, #24]

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004920:	f107 030c 	add.w	r3, r7, #12
 8004924:	f241 3288 	movw	r2, #5000	; 0x1388
 8004928:	4619      	mov	r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f00e ffb8 	bl	80138a0 <HAL_XSPI_AutoPolling>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <MX25UM51245G_WriteEnable+0x196>
  {
    return MX25UM51245G_ERROR;
 8004936:	f04f 33ff 	mov.w	r3, #4294967295
 800493a:	e000      	b.n	800493e <MX25UM51245G_WriteEnable+0x198>
  }

  return MX25UM51245G_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3770      	adds	r7, #112	; 0x70
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <MX25UM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25UM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                       MX25UM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b098      	sub	sp, #96	; 0x60
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	607b      	str	r3, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	72fb      	strb	r3, [r7, #11]
 8004954:	4613      	mov	r3, r2
 8004956:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 8004958:	f107 0310 	add.w	r3, r7, #16
 800495c:	2250      	movs	r2, #80	; 0x50
 800495e:	2100      	movs	r1, #0
 8004960:	4618      	mov	r0, r3
 8004962:	f024 fec9 	bl	80296f8 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8004966:	7afb      	ldrb	r3, [r7, #11]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d105      	bne.n	8004978 <MX25UM51245G_WriteCfg2Register+0x32>
 800496c:	7abb      	ldrb	r3, [r7, #10]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d102      	bne.n	8004978 <MX25UM51245G_WriteCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
 8004972:	f04f 33ff 	mov.w	r3, #4294967295
 8004976:	e077      	b.n	8004a68 <MX25UM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004978:	2300      	movs	r3, #0
 800497a:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 800497c:	2300      	movs	r3, #0
 800497e:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004980:	7afb      	ldrb	r3, [r7, #11]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <MX25UM51245G_WriteCfg2Register+0x44>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <MX25UM51245G_WriteCfg2Register+0x46>
 800498a:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 800498c:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800498e:	7abb      	ldrb	r3, [r7, #10]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <MX25UM51245G_WriteCfg2Register+0x52>
 8004994:	2308      	movs	r3, #8
 8004996:	e000      	b.n	800499a <MX25UM51245G_WriteCfg2Register+0x54>
 8004998:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 800499c:	7afb      	ldrb	r3, [r7, #11]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <MX25UM51245G_WriteCfg2Register+0x60>
 80049a2:	2300      	movs	r3, #0
 80049a4:	e000      	b.n	80049a8 <MX25UM51245G_WriteCfg2Register+0x62>
 80049a6:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 80049a8:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_WRITE_CFG_REG2_CMD;
 80049aa:	7afb      	ldrb	r3, [r7, #11]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <MX25UM51245G_WriteCfg2Register+0x6e>
 80049b0:	2372      	movs	r3, #114	; 0x72
 80049b2:	e001      	b.n	80049b8 <MX25UM51245G_WriteCfg2Register+0x72>
 80049b4:	f247 238d 	movw	r3, #29325	; 0x728d
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 80049b8:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 80049ba:	7afb      	ldrb	r3, [r7, #11]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d102      	bne.n	80049c6 <MX25UM51245G_WriteCfg2Register+0x80>
 80049c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049c4:	e001      	b.n	80049ca <MX25UM51245G_WriteCfg2Register+0x84>
 80049c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 80049cc:	7abb      	ldrb	r3, [r7, #10]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d102      	bne.n	80049d8 <MX25UM51245G_WriteCfg2Register+0x92>
 80049d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049d6:	e000      	b.n	80049da <MX25UM51245G_WriteCfg2Register+0x94>
 80049d8:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 80049da:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 80049dc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80049e0:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 80049ea:	7afb      	ldrb	r3, [r7, #11]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d102      	bne.n	80049f6 <MX25UM51245G_WriteCfg2Register+0xb0>
 80049f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049f4:	e001      	b.n	80049fa <MX25UM51245G_WriteCfg2Register+0xb4>
 80049f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80049fa:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 80049fc:	7abb      	ldrb	r3, [r7, #10]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d102      	bne.n	8004a08 <MX25UM51245G_WriteCfg2Register+0xc2>
 8004a02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a06:	e000      	b.n	8004a0a <MX25UM51245G_WriteCfg2Register+0xc4>
 8004a08:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004a0a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
 8004a10:	7afb      	ldrb	r3, [r7, #11]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d006      	beq.n	8004a24 <MX25UM51245G_WriteCfg2Register+0xde>
 8004a16:	7abb      	ldrb	r3, [r7, #10]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <MX25UM51245G_WriteCfg2Register+0xda>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e002      	b.n	8004a26 <MX25UM51245G_WriteCfg2Register+0xe0>
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <MX25UM51245G_WriteCfg2Register+0xe0>
 8004a24:	2301      	movs	r3, #1
 8004a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a30:	f107 0310 	add.w	r3, r7, #16
 8004a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a38:	4619      	mov	r1, r3
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f00e fd2e 	bl	801349c <HAL_XSPI_Command>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <MX25UM51245G_WriteCfg2Register+0x106>
  {
    return MX25UM51245G_ERROR;
 8004a46:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4a:	e00d      	b.n	8004a68 <MX25UM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a50:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f00e fe0d 	bl	8013674 <HAL_XSPI_Transmit>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <MX25UM51245G_WriteCfg2Register+0x120>
  {
    return MX25UM51245G_ERROR;
 8004a60:	f04f 33ff 	mov.w	r3, #4294967295
 8004a64:	e000      	b.n	8004a68 <MX25UM51245G_WriteCfg2Register+0x122>
  }

  return MX25UM51245G_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3760      	adds	r7, #96	; 0x60
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <MX25UM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25UM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                      MX25UM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b098      	sub	sp, #96	; 0x60
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	607b      	str	r3, [r7, #4]
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	72fb      	strb	r3, [r7, #11]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 8004a82:	f107 0310 	add.w	r3, r7, #16
 8004a86:	2250      	movs	r2, #80	; 0x50
 8004a88:	2100      	movs	r1, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f024 fe34 	bl	80296f8 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8004a90:	7afb      	ldrb	r3, [r7, #11]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d105      	bne.n	8004aa2 <MX25UM51245G_ReadCfg2Register+0x32>
 8004a96:	7abb      	ldrb	r3, [r7, #10]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d102      	bne.n	8004aa2 <MX25UM51245G_ReadCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
 8004a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa0:	e081      	b.n	8004ba6 <MX25UM51245G_ReadCfg2Register+0x136>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004aaa:	7afb      	ldrb	r3, [r7, #11]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <MX25UM51245G_ReadCfg2Register+0x44>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <MX25UM51245G_ReadCfg2Register+0x46>
 8004ab4:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8004ab6:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8004ab8:	7abb      	ldrb	r3, [r7, #10]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <MX25UM51245G_ReadCfg2Register+0x52>
 8004abe:	2308      	movs	r3, #8
 8004ac0:	e000      	b.n	8004ac4 <MX25UM51245G_ReadCfg2Register+0x54>
 8004ac2:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8004ac6:	7afb      	ldrb	r3, [r7, #11]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <MX25UM51245G_ReadCfg2Register+0x60>
 8004acc:	2300      	movs	r3, #0
 8004ace:	e000      	b.n	8004ad2 <MX25UM51245G_ReadCfg2Register+0x62>
 8004ad0:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004ad2:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_READ_CFG_REG2_CMD;
 8004ad4:	7afb      	ldrb	r3, [r7, #11]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <MX25UM51245G_ReadCfg2Register+0x6e>
 8004ada:	2371      	movs	r3, #113	; 0x71
 8004adc:	e001      	b.n	8004ae2 <MX25UM51245G_ReadCfg2Register+0x72>
 8004ade:	f247 138e 	movw	r3, #29070	; 0x718e
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004ae2:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 8004ae4:	7afb      	ldrb	r3, [r7, #11]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d102      	bne.n	8004af0 <MX25UM51245G_ReadCfg2Register+0x80>
 8004aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004aee:	e001      	b.n	8004af4 <MX25UM51245G_ReadCfg2Register+0x84>
 8004af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 8004af6:	7abb      	ldrb	r3, [r7, #10]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d102      	bne.n	8004b02 <MX25UM51245G_ReadCfg2Register+0x92>
 8004afc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b00:	e000      	b.n	8004b04 <MX25UM51245G_ReadCfg2Register+0x94>
 8004b02:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004b04:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8004b06:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004b0a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8004b14:	7afb      	ldrb	r3, [r7, #11]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d102      	bne.n	8004b20 <MX25UM51245G_ReadCfg2Register+0xb0>
 8004b1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b1e:	e001      	b.n	8004b24 <MX25UM51245G_ReadCfg2Register+0xb4>
 8004b20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004b24:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 8004b26:	7abb      	ldrb	r3, [r7, #10]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d102      	bne.n	8004b32 <MX25UM51245G_ReadCfg2Register+0xc2>
 8004b2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b30:	e000      	b.n	8004b34 <MX25UM51245G_ReadCfg2Register+0xc4>
 8004b32:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004b34:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
 8004b36:	7afb      	ldrb	r3, [r7, #11]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d006      	beq.n	8004b4a <MX25UM51245G_ReadCfg2Register+0xda>
 8004b3c:	7abb      	ldrb	r3, [r7, #10]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <MX25UM51245G_ReadCfg2Register+0xd6>
 8004b42:	2305      	movs	r3, #5
 8004b44:	e002      	b.n	8004b4c <MX25UM51245G_ReadCfg2Register+0xdc>
 8004b46:	2304      	movs	r3, #4
 8004b48:	e000      	b.n	8004b4c <MX25UM51245G_ReadCfg2Register+0xdc>
 8004b4a:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
 8004b4c:	657b      	str	r3, [r7, #84]	; 0x54
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 8004b4e:	7abb      	ldrb	r3, [r7, #10]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <MX25UM51245G_ReadCfg2Register+0xe8>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e000      	b.n	8004b5a <MX25UM51245G_ReadCfg2Register+0xea>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 8004b5c:	7abb      	ldrb	r3, [r7, #10]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d102      	bne.n	8004b68 <MX25UM51245G_ReadCfg2Register+0xf8>
 8004b62:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004b66:	e000      	b.n	8004b6a <MX25UM51245G_ReadCfg2Register+0xfa>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b70:	f107 0310 	add.w	r3, r7, #16
 8004b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b78:	4619      	mov	r1, r3
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f00e fc8e 	bl	801349c <HAL_XSPI_Command>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <MX25UM51245G_ReadCfg2Register+0x11c>
  {
    return MX25UM51245G_ERROR;
 8004b86:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8a:	e00c      	b.n	8004ba6 <MX25UM51245G_ReadCfg2Register+0x136>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b90:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f00e fde1 	bl	801375a <HAL_XSPI_Receive>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <MX25UM51245G_ReadCfg2Register+0x134>
  {
    return MX25UM51245G_ERROR;
 8004b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba2:	e000      	b.n	8004ba6 <MX25UM51245G_ReadCfg2Register+0x136>
  }

  return MX25UM51245G_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3760      	adds	r7, #96	; 0x60
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <MX25UM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b096      	sub	sp, #88	; 0x58
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	70fb      	strb	r3, [r7, #3]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
 8004bbe:	f107 0308 	add.w	r3, r7, #8
 8004bc2:	2250      	movs	r2, #80	; 0x50
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f024 fd96 	bl	80296f8 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d105      	bne.n	8004bde <MX25UM51245G_ResetEnable+0x30>
 8004bd2:	78bb      	ldrb	r3, [r7, #2]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d102      	bne.n	8004bde <MX25UM51245G_ResetEnable+0x30>
  {
    return MX25UM51245G_ERROR;
 8004bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bdc:	e03b      	b.n	8004c56 <MX25UM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <MX25UM51245G_ResetEnable+0x42>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <MX25UM51245G_ResetEnable+0x44>
 8004bf0:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8004bf2:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8004bf4:	78bb      	ldrb	r3, [r7, #2]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <MX25UM51245G_ResetEnable+0x50>
 8004bfa:	2308      	movs	r3, #8
 8004bfc:	e000      	b.n	8004c00 <MX25UM51245G_ResetEnable+0x52>
 8004bfe:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004c00:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <MX25UM51245G_ResetEnable+0x5e>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	e000      	b.n	8004c0e <MX25UM51245G_ResetEnable+0x60>
 8004c0c:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004c0e:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_ENABLE_CMD
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <MX25UM51245G_ResetEnable+0x6c>
 8004c16:	2366      	movs	r3, #102	; 0x66
 8004c18:	e001      	b.n	8004c1e <MX25UM51245G_ResetEnable+0x70>
 8004c1a:	f246 6399 	movw	r3, #26265	; 0x6699
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004c1e:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8004c20:	2300      	movs	r3, #0
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8004c24:	2300      	movs	r3, #0
 8004c26:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8004c30:	2300      	movs	r3, #0
 8004c32:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8004c34:	2300      	movs	r3, #0
 8004c36:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c38:	f107 0308 	add.w	r3, r7, #8
 8004c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f00e fc2a 	bl	801349c <HAL_XSPI_Command>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <MX25UM51245G_ResetEnable+0xa6>
  {
    return MX25UM51245G_ERROR;
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c52:	e000      	b.n	8004c56 <MX25UM51245G_ResetEnable+0xa8>
  }

  return MX25UM51245G_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3758      	adds	r7, #88	; 0x58
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <MX25UM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b096      	sub	sp, #88	; 0x58
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	460b      	mov	r3, r1
 8004c68:	70fb      	strb	r3, [r7, #3]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
 8004c6e:	f107 0308 	add.w	r3, r7, #8
 8004c72:	2250      	movs	r2, #80	; 0x50
 8004c74:	2100      	movs	r1, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f024 fd3e 	bl	80296f8 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d105      	bne.n	8004c8e <MX25UM51245G_ResetMemory+0x30>
 8004c82:	78bb      	ldrb	r3, [r7, #2]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d102      	bne.n	8004c8e <MX25UM51245G_ResetMemory+0x30>
  {
    return MX25UM51245G_ERROR;
 8004c88:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8c:	e03b      	b.n	8004d06 <MX25UM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004c96:	78fb      	ldrb	r3, [r7, #3]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <MX25UM51245G_ResetMemory+0x42>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <MX25UM51245G_ResetMemory+0x44>
 8004ca0:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8004ca2:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8004ca4:	78bb      	ldrb	r3, [r7, #2]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <MX25UM51245G_ResetMemory+0x50>
 8004caa:	2308      	movs	r3, #8
 8004cac:	e000      	b.n	8004cb0 <MX25UM51245G_ResetMemory+0x52>
 8004cae:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004cb0:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8004cb2:	78fb      	ldrb	r3, [r7, #3]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <MX25UM51245G_ResetMemory+0x5e>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e000      	b.n	8004cbe <MX25UM51245G_ResetMemory+0x60>
 8004cbc:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004cbe:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_MEMORY_CMD
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <MX25UM51245G_ResetMemory+0x6c>
 8004cc6:	2399      	movs	r3, #153	; 0x99
 8004cc8:	e001      	b.n	8004cce <MX25UM51245G_ResetMemory+0x70>
 8004cca:	f649 1366 	movw	r3, #39270	; 0x9966
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004cce:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ce8:	f107 0308 	add.w	r3, r7, #8
 8004cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f00e fbd2 	bl	801349c <HAL_XSPI_Command>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <MX25UM51245G_ResetMemory+0xa6>
  {
    return MX25UM51245G_ERROR;
 8004cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004d02:	e000      	b.n	8004d06 <MX25UM51245G_ResetMemory+0xa8>
  }

  return MX25UM51245G_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3758      	adds	r7, #88	; 0x58
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <SITRONIX_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t SITRONIX_RegisterBusIO(SITRONIX_Object_t *pObj, SITRONIX_IO_t *pIO)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d103      	bne.n	8004d28 <SITRONIX_RegisterBusIO+0x18>
  {
    ret = SITRONIX_ERROR;
 8004d20:	f04f 33ff 	mov.w	r3, #4294967295
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e033      	b.n	8004d90 <SITRONIX_RegisterBusIO+0x80>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	891a      	ldrh	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadData  = pIO->ReadData;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	699a      	ldr	r2, [r3, #24]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a0e      	ldr	r2, [pc, #56]	; (8004d9c <SITRONIX_RegisterBusIO+0x8c>)
 8004d64:	621a      	str	r2, [r3, #32]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a0d      	ldr	r2, [pc, #52]	; (8004da0 <SITRONIX_RegisterBusIO+0x90>)
 8004d6a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.ReadData = ReadDataWrap;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a0d      	ldr	r2, [pc, #52]	; (8004da4 <SITRONIX_RegisterBusIO+0x94>)
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.handle   = pObj;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	629a      	str	r2, [r3, #40]	; 0x28

    if (pObj->IO.Init != NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d004      	beq.n	8004d8a <SITRONIX_RegisterBusIO+0x7a>
    {
      ret = pObj->IO.Init();
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4798      	blx	r3
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	e002      	b.n	8004d90 <SITRONIX_RegisterBusIO+0x80>
    }
    else
    {
      ret = SITRONIX_ERROR;
 8004d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004d90:	68fb      	ldr	r3, [r7, #12]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	0800504b 	.word	0x0800504b
 8004da0:	0800507f 	.word	0x0800507f
 8004da4:	080050b3 	.word	0x080050b3

08004da8 <SITRONIX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to SITRONIX sensor capabilities
  * @retval Component status
  */
int32_t SITRONIX_GetCapabilities(SITRONIX_Object_t *pObj, SITRONIX_Capabilities_t *Capabilities)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2201      	movs	r2, #1
 8004db6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = SITRONIX_MAX_DETECTABLE_TOUCH;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	220a      	movs	r2, #10
 8004dc2:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = SITRONIX_MAX_X_LENGTH;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004dca:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = SITRONIX_MAX_Y_LENGTH;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004dd2:	609a      	str	r2, [r3, #8]

  return SITRONIX_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <SITRONIX_Init>:
  *         from MCU to SITRONIX : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_Init(SITRONIX_Object_t *pObj)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b08a      	sub	sp, #40	; 0x28
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]

  int32_t ret = SITRONIX_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t data[28U];

  if (pObj->IsInitialized == 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d114      	bne.n	8004e22 <SITRONIX_Init+0x40>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4798      	blx	r3

    if (sitronix_read_data(&pObj->Ctx, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	331c      	adds	r3, #28
 8004e02:	f107 0108 	add.w	r1, r7, #8
 8004e06:	221c      	movs	r2, #28
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 f97e 	bl	800510a <sitronix_read_data>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <SITRONIX_Init+0x38>
    {
      ret = SITRONIX_ERROR;
 8004e14:	f04f 33ff 	mov.w	r3, #4294967295
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
    }

    pObj->IsInitialized = 1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  if (ret != SITRONIX_OK)
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <SITRONIX_Init+0x4c>
  {
    ret = SITRONIX_ERROR;
 8004e28:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3728      	adds	r7, #40	; 0x28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <SITRONIX_DeInit>:
  *         from MCU to SITRONIX : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_DeInit(SITRONIX_Object_t *pObj)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d103      	bne.n	8004e52 <SITRONIX_DeInit+0x1a>
  {
    pObj->IsInitialized = 0;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  return SITRONIX_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <SITRONIX_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval Component status
  */
int32_t SITRONIX_GestureConfig(SITRONIX_Object_t *pObj, SITRONIX_Gesture_Init_t *GestureInit)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  return SITRONIX_ERROR;
 8004e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <SITRONIX_ReadID>:
  * @param  pObj Component object pointer
  * @param  Id Pointer to component's ID
  * @retval Component status
  */
int32_t SITRONIX_ReadID(SITRONIX_Object_t *pObj, uint32_t *Id)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b08c      	sub	sp, #48	; 0x30
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t data[28];
  uint8_t trial = 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  for (trial = 0; trial < 10; trial++)
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e94:	e01c      	b.n	8004ed0 <SITRONIX_ReadID+0x56>
  {
    if (sitronix_read_data(&pObj->Ctx, data, 28) != SITRONIX_OK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	331c      	adds	r3, #28
 8004e9a:	f107 010c 	add.w	r1, r7, #12
 8004e9e:	221c      	movs	r2, #28
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 f932 	bl	800510a <sitronix_read_data>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <SITRONIX_ReadID+0x3a>
    {
      ret = SITRONIX_ERROR;
 8004eac:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eb2:	e008      	b.n	8004ec6 <SITRONIX_ReadID+0x4c>
    }
    else
    {
      if ((uint32_t)data[0] == SITRONIX_ID)
 8004eb4:	7b3b      	ldrb	r3, [r7, #12]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d105      	bne.n	8004ec6 <SITRONIX_ReadID+0x4c>
      {
        *Id = (uint32_t)data[0];
 8004eba:	7b3b      	ldrb	r3, [r7, #12]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	601a      	str	r2, [r3, #0]
        return ret;
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec4:	e009      	b.n	8004eda <SITRONIX_ReadID+0x60>
  for (trial = 0; trial < 10; trial++)
 8004ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004eca:	3301      	adds	r3, #1
 8004ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ed0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ed4:	2b09      	cmp	r3, #9
 8004ed6:	d9de      	bls.n	8004e96 <SITRONIX_ReadID+0x1c>
      }
    }
  }
  return ret;
 8004ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3730      	adds	r7, #48	; 0x30
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <SITRONIX_GetState>:
  * @param  pObj Component object pointer
  * @param  State Single Touch structure pointer
  * @retval Component status.
  */
int32_t SITRONIX_GetState(SITRONIX_Object_t *pObj, SITRONIX_State_t *State)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b086      	sub	sp, #24
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
  uint8_t data[5];

  if (sitronix_read_data(&pObj->Ctx, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	331c      	adds	r3, #28
 8004ef4:	f107 010c 	add.w	r1, r7, #12
 8004ef8:	2205      	movs	r2, #5
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 f905 	bl	800510a <sitronix_read_data>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <SITRONIX_GetState+0x2c>
  {
    ret = SITRONIX_ERROR;
 8004f06:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	e017      	b.n	8004f3e <SITRONIX_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = ((((uint32_t)data[2] & SITRONIX_TOUCH_POS_LSB_MASK) << 4) | ((uint32_t)data[3]));
 8004f0e:	7bbb      	ldrb	r3, [r7, #14]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f16:	7bfa      	ldrb	r2, [r7, #15]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & SITRONIX_TOUCH_POS_MSB_MASK) << 8) | ((uint32_t)data[4]);
 8004f1e:	7bbb      	ldrb	r3, [r7, #14]
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f26:	7c3a      	ldrb	r2, [r7, #16]
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	609a      	str	r2, [r3, #8]
	
    State->TouchDetected = ((data[2] & 0x80) == 0x80 ? 1 : 0);
 8004f2e:	7bbb      	ldrb	r3, [r7, #14]
 8004f30:	b25b      	sxtb	r3, r3
 8004f32:	11db      	asrs	r3, r3, #7
 8004f34:	b25b      	sxtb	r3, r3
 8004f36:	f003 0201 	and.w	r2, r3, #1
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8004f3e:	697b      	ldr	r3, [r7, #20]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <SITRONIX_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval Component status.
  */
int32_t SITRONIX_GetMultiTouchState(SITRONIX_Object_t *pObj, SITRONIX_MultiTouch_State_t *State)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	; 0x28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t  data[28];

  State->TouchDetected = (uint32_t)SITRONIX_DetectTouch(pObj);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f855 	bl	8005006 <SITRONIX_DetectTouch>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	461a      	mov	r2, r3
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	601a      	str	r2, [r3, #0]

  if (sitronix_read_reg(&pObj->Ctx, SITRONIX_P1_XH_REG, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f103 001c 	add.w	r0, r3, #28
 8004f6a:	f107 0208 	add.w	r2, r7, #8
 8004f6e:	231c      	movs	r3, #28
 8004f70:	2109      	movs	r1, #9
 8004f72:	f000 f8b3 	bl	80050dc <sitronix_read_reg>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <SITRONIX_GetMultiTouchState+0x3a>
  {
    ret = SITRONIX_ERROR;
 8004f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
  else
  {
    /* To be implemented */
  }

  return ret;
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3728      	adds	r7, #40	; 0x28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <SITRONIX_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId gesture ID
  * @retval Component status
  */
int32_t SITRONIX_GetGesture(SITRONIX_Object_t *pObj, uint8_t *GestureId)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <SITRONIX_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_EnableIT(SITRONIX_Object_t *pObj)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004fae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <SITRONIX_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_DisableIT(SITRONIX_Object_t *pObj)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004fc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <SITRONIX_ITStatus>:
  *         @note : This feature is not supported by SITRONIX.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_ITStatus(SITRONIX_Object_t *pObj)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004fde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <SITRONIX_ClearIT>:
  *         @note : This feature is not supported by SITRONIX.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_ClearIT(SITRONIX_Object_t *pObj)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <SITRONIX_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be between 0 and10) or SITRONIX_ERROR
  *         in case of error
  */
static int32_t SITRONIX_DetectTouch(SITRONIX_Object_t *pObj)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b08c      	sub	sp, #48	; 0x30
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t data[28];

  if (sitronix_read_data(&pObj->Ctx, (uint8_t *)&data, 28) != SITRONIX_OK)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	331c      	adds	r3, #28
 8005018:	f107 010c 	add.w	r1, r7, #12
 800501c:	221c      	movs	r2, #28
 800501e:	4618      	mov	r0, r3
 8005020:	f000 f873 	bl	800510a <sitronix_read_data>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <SITRONIX_DetectTouch+0x2c>
  {
    ret = SITRONIX_ERROR;
 800502a:	f04f 33ff 	mov.w	r3, #4294967295
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005030:	e006      	b.n	8005040 <SITRONIX_DetectTouch+0x3a>
  }
  else
  {
    nb_touch = ((data[2] & 0x80) == 0x80 ? 1 : 0);
 8005032:	7bbb      	ldrb	r3, [r7, #14]
 8005034:	09db      	lsrs	r3, r3, #7
 8005036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    ret = (int32_t)nb_touch;
 800503a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  return ret;
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005042:	4618      	mov	r0, r3
 8005044:	3730      	adds	r7, #48	; 0x30
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800504a:	b590      	push	{r4, r7, lr}
 800504c:	b087      	sub	sp, #28
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	461a      	mov	r2, r3
 8005056:	460b      	mov	r3, r1
 8005058:	72fb      	strb	r3, [r7, #11]
 800505a:	4613      	mov	r3, r2
 800505c:	813b      	strh	r3, [r7, #8]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	691c      	ldr	r4, [r3, #16]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	8918      	ldrh	r0, [r3, #8]
 800506a:	7afb      	ldrb	r3, [r7, #11]
 800506c:	b299      	uxth	r1, r3
 800506e:	893b      	ldrh	r3, [r7, #8]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	47a0      	blx	r4
 8005074:	4603      	mov	r3, r0
}
 8005076:	4618      	mov	r0, r3
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	bd90      	pop	{r4, r7, pc}

0800507e <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800507e:	b590      	push	{r4, r7, lr}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	461a      	mov	r2, r3
 800508a:	460b      	mov	r3, r1
 800508c:	72fb      	strb	r3, [r7, #11]
 800508e:	4613      	mov	r3, r2
 8005090:	813b      	strh	r3, [r7, #8]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	68dc      	ldr	r4, [r3, #12]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	8918      	ldrh	r0, [r3, #8]
 800509e:	7afb      	ldrb	r3, [r7, #11]
 80050a0:	b299      	uxth	r1, r3
 80050a2:	893b      	ldrh	r3, [r7, #8]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	47a0      	blx	r4
 80050a8:	4603      	mov	r3, r0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd90      	pop	{r4, r7, pc}

080050b2 <ReadDataWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadDataWrap(void *handle, uint8_t *pData, uint16_t Length)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b086      	sub	sp, #24
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	4613      	mov	r3, r2
 80050be:	80fb      	strh	r3, [r7, #6]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadData(pObj->IO.Address, pData, Length);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	8910      	ldrh	r0, [r2, #8]
 80050cc:	88fa      	ldrh	r2, [r7, #6]
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	4798      	blx	r3
 80050d2:	4603      	mov	r3, r0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <sitronix_read_reg>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : pdata Read
  *******************************************************************************/
int32_t sitronix_read_reg(sitronix_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80050dc:	b590      	push	{r4, r7, lr}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	461a      	mov	r2, r3
 80050e8:	460b      	mov	r3, r1
 80050ea:	72fb      	strb	r3, [r7, #11]
 80050ec:	4613      	mov	r3, r2
 80050ee:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	685c      	ldr	r4, [r3, #4]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68d8      	ldr	r0, [r3, #12]
 80050f8:	893b      	ldrh	r3, [r7, #8]
 80050fa:	7af9      	ldrb	r1, [r7, #11]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	47a0      	blx	r4
 8005100:	4603      	mov	r3, r0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	bd90      	pop	{r4, r7, pc}

0800510a <sitronix_read_data>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : pdata Read
  *******************************************************************************/
int32_t sitronix_read_data(sitronix_ctx_t *ctx, uint8_t *pdata, uint16_t length)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	4613      	mov	r3, r2
 8005116:	80fb      	strh	r3, [r7, #6]
  return ctx->ReadData(ctx->handle, pdata, length);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	68d0      	ldr	r0, [r2, #12]
 8005120:	88fa      	ldrh	r2, [r7, #6]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	4798      	blx	r3
 8005126:	4603      	mov	r3, r0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <BSP_I2C5_Init>:
/**
  * @brief  Initializes I2C5 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C5_Init(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8005136:	2300      	movs	r3, #0
 8005138:	607b      	str	r3, [r7, #4]

  hbus_i2c5.Instance = BUS_I2C5;
 800513a:	4b16      	ldr	r3, [pc, #88]	; (8005194 <BSP_I2C5_Init+0x64>)
 800513c:	4a16      	ldr	r2, [pc, #88]	; (8005198 <BSP_I2C5_Init+0x68>)
 800513e:	601a      	str	r2, [r3, #0]

  if (I2c5InitCounter == 0U)
 8005140:	4b16      	ldr	r3, [pc, #88]	; (800519c <BSP_I2C5_Init+0x6c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d11f      	bne.n	8005188 <BSP_I2C5_Init+0x58>
  {
    I2c5InitCounter++;
 8005148:	4b14      	ldr	r3, [pc, #80]	; (800519c <BSP_I2C5_Init+0x6c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3301      	adds	r3, #1
 800514e:	4a13      	ldr	r2, [pc, #76]	; (800519c <BSP_I2C5_Init+0x6c>)
 8005150:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c5) == HAL_I2C_STATE_RESET)
 8005152:	4810      	ldr	r0, [pc, #64]	; (8005194 <BSP_I2C5_Init+0x64>)
 8005154:	f006 f8aa 	bl	800b2ac <HAL_I2C_GetState>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d114      	bne.n	8005188 <BSP_I2C5_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C5 Msp */
      I2C5_MspInit(&hbus_i2c5);
 800515e:	480d      	ldr	r0, [pc, #52]	; (8005194 <BSP_I2C5_Init+0x64>)
 8005160:	f000 fb88 	bl	8005874 <I2C5_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */
      if (MX_I2C5_Init(&hbus_i2c5, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C5_FREQUENCY)) != HAL_OK)
 8005164:	f008 fb76 	bl	800d854 <HAL_RCC_GetPCLK1Freq>
 8005168:	4603      	mov	r3, r0
 800516a:	490d      	ldr	r1, [pc, #52]	; (80051a0 <BSP_I2C5_Init+0x70>)
 800516c:	4618      	mov	r0, r3
 800516e:	f000 f90b 	bl	8005388 <I2C_GetTiming>
 8005172:	4603      	mov	r3, r0
 8005174:	4619      	mov	r1, r3
 8005176:	4807      	ldr	r0, [pc, #28]	; (8005194 <BSP_I2C5_Init+0x64>)
 8005178:	f000 f838 	bl	80051ec <MX_I2C5_Init>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <BSP_I2C5_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8005182:	f06f 0307 	mvn.w	r3, #7
 8005186:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS > 0) */
  }
}
return ret;
 8005188:	687b      	ldr	r3, [r7, #4]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20197c00 	.word	0x20197c00
 8005198:	40009800 	.word	0x40009800
 800519c:	201971f8 	.word	0x201971f8
 80051a0:	00061a80 	.word	0x00061a80

080051a4 <BSP_I2C5_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C5_DeInit(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80051aa:	2300      	movs	r3, #0
 80051ac:	607b      	str	r3, [r7, #4]

  I2c5InitCounter--;
 80051ae:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <BSP_I2C5_DeInit+0x40>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	4a0b      	ldr	r2, [pc, #44]	; (80051e4 <BSP_I2C5_DeInit+0x40>)
 80051b6:	6013      	str	r3, [r2, #0]

  if (I2c5InitCounter == 0U)
 80051b8:	4b0a      	ldr	r3, [pc, #40]	; (80051e4 <BSP_I2C5_DeInit+0x40>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10b      	bne.n	80051d8 <BSP_I2C5_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C5_MspDeInit(&hbus_i2c5);
 80051c0:	4809      	ldr	r0, [pc, #36]	; (80051e8 <BSP_I2C5_DeInit+0x44>)
 80051c2:	f000 fbbd 	bl	8005940 <I2C5_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c5) != HAL_OK)
 80051c6:	4808      	ldr	r0, [pc, #32]	; (80051e8 <BSP_I2C5_DeInit+0x44>)
 80051c8:	f005 fc28 	bl	800aa1c <HAL_I2C_DeInit>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <BSP_I2C5_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80051d2:	f06f 0307 	mvn.w	r3, #7
 80051d6:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80051d8:	687b      	ldr	r3, [r7, #4]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	201971f8 	.word	0x201971f8
 80051e8:	20197c00 	.word	0x20197c00

080051ec <MX_I2C5_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C5_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f005 fb67 	bl	800a8fe <HAL_I2C_Init>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <MX_I2C5_Init+0x50>
  {
    status = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	73fb      	strb	r3, [r7, #15]
 800523a:	e014      	b.n	8005266 <MX_I2C5_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800523c:	2300      	movs	r3, #0
 800523e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f006 fb86 	bl	800b954 <HAL_I2CEx_ConfigAnalogFilter>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <MX_I2C5_Init+0x68>
    {
      status = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	73fb      	strb	r3, [r7, #15]
 8005252:	e008      	b.n	8005266 <MX_I2C5_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8005254:	2100      	movs	r1, #0
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f006 fbc7 	bl	800b9ea <HAL_I2CEx_ConfigDigitalFilter>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <MX_I2C5_Init+0x7a>
      {
        status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8005266:	7bfb      	ldrb	r3, [r7, #15]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <BSP_I2C5_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C5_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af02      	add	r7, sp, #8
 8005276:	60ba      	str	r2, [r7, #8]
 8005278:	461a      	mov	r2, r3
 800527a:	4603      	mov	r3, r0
 800527c:	81fb      	strh	r3, [r7, #14]
 800527e:	460b      	mov	r3, r1
 8005280:	81bb      	strh	r3, [r7, #12]
 8005282:	4613      	mov	r3, r2
 8005284:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8005286:	89b9      	ldrh	r1, [r7, #12]
 8005288:	89f8      	ldrh	r0, [r7, #14]
 800528a:	88fb      	ldrh	r3, [r7, #6]
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2201      	movs	r2, #1
 8005292:	f000 fb77 	bl	8005984 <I2C5_WriteReg>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d102      	bne.n	80052a2 <BSP_I2C5_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	e00c      	b.n	80052bc <BSP_I2C5_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 80052a2:	4809      	ldr	r0, [pc, #36]	; (80052c8 <BSP_I2C5_WriteReg+0x58>)
 80052a4:	f006 f810 	bl	800b2c8 <HAL_I2C_GetError>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d103      	bne.n	80052b6 <BSP_I2C5_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80052ae:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	e002      	b.n	80052bc <BSP_I2C5_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80052b6:	f06f 0303 	mvn.w	r3, #3
 80052ba:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 80052bc:	697b      	ldr	r3, [r7, #20]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20197c00 	.word	0x20197c00

080052cc <BSP_I2C5_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C5_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60ba      	str	r2, [r7, #8]
 80052d4:	461a      	mov	r2, r3
 80052d6:	4603      	mov	r3, r0
 80052d8:	81fb      	strh	r3, [r7, #14]
 80052da:	460b      	mov	r3, r1
 80052dc:	81bb      	strh	r3, [r7, #12]
 80052de:	4613      	mov	r3, r2
 80052e0:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80052e2:	89b9      	ldrh	r1, [r7, #12]
 80052e4:	89f8      	ldrh	r0, [r7, #14]
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f000 fb6f 	bl	80059d0 <I2C5_ReadReg>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d102      	bne.n	80052fe <BSP_I2C5_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	e00c      	b.n	8005318 <BSP_I2C5_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 80052fe:	4809      	ldr	r0, [pc, #36]	; (8005324 <BSP_I2C5_ReadReg+0x58>)
 8005300:	f005 ffe2 	bl	800b2c8 <HAL_I2C_GetError>
 8005304:	4603      	mov	r3, r0
 8005306:	2b04      	cmp	r3, #4
 8005308:	d103      	bne.n	8005312 <BSP_I2C5_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800530a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	e002      	b.n	8005318 <BSP_I2C5_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005312:	f06f 0303 	mvn.w	r3, #3
 8005316:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8005318:	697b      	ldr	r3, [r7, #20]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20197c00 	.word	0x20197c00

08005328 <BSP_I2C5_Recv>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C5_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	6039      	str	r1, [r7, #0]
 8005332:	80fb      	strh	r3, [r7, #6]
 8005334:	4613      	mov	r3, r2
 8005336:	80bb      	strh	r3, [r7, #4]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_Recv(DevAddr, pData, Length) == 0)
 8005338:	88ba      	ldrh	r2, [r7, #4]
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	6839      	ldr	r1, [r7, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fb6c 	bl	8005a1c <I2C5_Recv>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d102      	bne.n	8005350 <BSP_I2C5_Recv+0x28>
  {
    ret = BSP_ERROR_NONE;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	e00c      	b.n	800536a <BSP_I2C5_Recv+0x42>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 8005350:	4808      	ldr	r0, [pc, #32]	; (8005374 <BSP_I2C5_Recv+0x4c>)
 8005352:	f005 ffb9 	bl	800b2c8 <HAL_I2C_GetError>
 8005356:	4603      	mov	r3, r0
 8005358:	2b04      	cmp	r3, #4
 800535a:	d103      	bne.n	8005364 <BSP_I2C5_Recv+0x3c>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800535c:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	e002      	b.n	800536a <BSP_I2C5_Recv+0x42>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005364:	f06f 0303 	mvn.w	r3, #3
 8005368:	60fb      	str	r3, [r7, #12]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 800536a:	68fb      	ldr	r3, [r7, #12]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20197c00 	.word	0x20197c00

08005378 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800537c:	f002 fc1e 	bl	8007bbc <HAL_GetTick>
 8005380:	4603      	mov	r3, r0
}
 8005382:	4618      	mov	r0, r3
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d06b      	beq.n	8005474 <I2C_GetTiming+0xec>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d068      	beq.n	8005474 <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80053a2:	2300      	movs	r3, #0
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	e060      	b.n	800546a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80053a8:	4a35      	ldr	r2, [pc, #212]	; (8005480 <I2C_GetTiming+0xf8>)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	212c      	movs	r1, #44	; 0x2c
 80053ae:	fb01 f303 	mul.w	r3, r1, r3
 80053b2:	4413      	add	r3, r2
 80053b4:	3304      	adds	r3, #4
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d352      	bcc.n	8005464 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80053be:	4a30      	ldr	r2, [pc, #192]	; (8005480 <I2C_GetTiming+0xf8>)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	212c      	movs	r1, #44	; 0x2c
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	4413      	add	r3, r2
 80053ca:	3308      	adds	r3, #8
 80053cc:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d847      	bhi.n	8005464 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80053d4:	6939      	ldr	r1, [r7, #16]
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f856 	bl	8005488 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80053dc:	6939      	ldr	r1, [r7, #16]
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f940 	bl	8005664 <I2C_Compute_SCLL_SCLH>
 80053e4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b7f      	cmp	r3, #127	; 0x7f
 80053ea:	d842      	bhi.n	8005472 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 80053ec:	4925      	ldr	r1, [pc, #148]	; (8005484 <I2C_GetTiming+0xfc>)
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 80053fe:	4821      	ldr	r0, [pc, #132]	; (8005484 <I2C_GetTiming+0xfc>)
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4613      	mov	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4403      	add	r3, r0
 800540c:	3304      	adds	r3, #4
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	051b      	lsls	r3, r3, #20
 8005412:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8005416:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8005418:	481a      	ldr	r0, [pc, #104]	; (8005484 <I2C_GetTiming+0xfc>)
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4403      	add	r3, r0
 8005426:	3308      	adds	r3, #8
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	041b      	lsls	r3, r3, #16
 800542c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8005430:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 8005432:	4814      	ldr	r0, [pc, #80]	; (8005484 <I2C_GetTiming+0xfc>)
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4613      	mov	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4403      	add	r3, r0
 8005440:	330c      	adds	r3, #12
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	021b      	lsls	r3, r3, #8
 8005446:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8005448:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800544a:	480e      	ldr	r0, [pc, #56]	; (8005484 <I2C_GetTiming+0xfc>)
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4613      	mov	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4403      	add	r3, r0
 8005458:	3310      	adds	r3, #16
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 800545e:	430b      	orrs	r3, r1
 8005460:	617b      	str	r3, [r7, #20]
        }
        break;
 8005462:	e006      	b.n	8005472 <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	3301      	adds	r3, #1
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d99b      	bls.n	80053a8 <I2C_GetTiming+0x20>
 8005470:	e000      	b.n	8005474 <I2C_GetTiming+0xec>
        break;
 8005472:	bf00      	nop
      }
    }
  }

  return ret;
 8005474:	697b      	ldr	r3, [r7, #20]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	0802bcf8 	.word	0x0802bcf8
 8005484:	201971fc 	.word	0x201971fc

08005488 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8005488:	b480      	push	{r7}
 800548a:	b08f      	sub	sp, #60	; 0x3c
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8005492:	2310      	movs	r3, #16
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t presc;
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	085a      	lsrs	r2, r3, #1
 800549a:	4b6e      	ldr	r3, [pc, #440]	; (8005654 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800549c:	4413      	add	r3, r2
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80054a4:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80054a6:	2332      	movs	r3, #50	; 0x32
 80054a8:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80054aa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80054ae:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80054b0:	4a69      	ldr	r2, [pc, #420]	; (8005658 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	212c      	movs	r1, #44	; 0x2c
 80054b6:	fb01 f303 	mul.w	r3, r1, r3
 80054ba:	4413      	add	r3, r2
 80054bc:	3324      	adds	r3, #36	; 0x24
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	4a65      	ldr	r2, [pc, #404]	; (8005658 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	212c      	movs	r1, #44	; 0x2c
 80054c8:	fb01 f303 	mul.w	r3, r1, r3
 80054cc:	4413      	add	r3, r2
 80054ce:	330c      	adds	r3, #12
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80054d4:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80054d6:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80054d8:	495f      	ldr	r1, [pc, #380]	; (8005658 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	202c      	movs	r0, #44	; 0x2c
 80054de:	fb00 f303 	mul.w	r3, r0, r3
 80054e2:	440b      	add	r3, r1
 80054e4:	3328      	adds	r3, #40	; 0x28
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3303      	adds	r3, #3
 80054ea:	69f9      	ldr	r1, [r7, #28]
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80054f4:	4a58      	ldr	r2, [pc, #352]	; (8005658 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	212c      	movs	r1, #44	; 0x2c
 80054fa:	fb01 f303 	mul.w	r3, r1, r3
 80054fe:	4413      	add	r3, r2
 8005500:	3310      	adds	r3, #16
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4618      	mov	r0, r3
 8005506:	4a54      	ldr	r2, [pc, #336]	; (8005658 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	212c      	movs	r1, #44	; 0x2c
 800550c:	fb01 f303 	mul.w	r3, r1, r3
 8005510:	4413      	add	r3, r2
 8005512:	3320      	adds	r3, #32
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8005518:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800551a:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800551c:	494e      	ldr	r1, [pc, #312]	; (8005658 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	202c      	movs	r0, #44	; 0x2c
 8005522:	fb00 f303 	mul.w	r3, r0, r3
 8005526:	440b      	add	r3, r1
 8005528:	3328      	adds	r3, #40	; 0x28
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3304      	adds	r3, #4
 800552e:	69f9      	ldr	r1, [r7, #28]
 8005530:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8005538:	4a47      	ldr	r2, [pc, #284]	; (8005658 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	212c      	movs	r1, #44	; 0x2c
 800553e:	fb01 f303 	mul.w	r3, r1, r3
 8005542:	4413      	add	r3, r2
 8005544:	3320      	adds	r3, #32
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	4a43      	ldr	r2, [pc, #268]	; (8005658 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	212c      	movs	r1, #44	; 0x2c
 8005550:	fb01 f303 	mul.w	r3, r1, r3
 8005554:	4413      	add	r3, r2
 8005556:	3314      	adds	r3, #20
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4403      	add	r3, r0
 800555c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	2b00      	cmp	r3, #0
 8005562:	dc01      	bgt.n	8005568 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8005564:	2300      	movs	r3, #0
 8005566:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8005568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556a:	2b00      	cmp	r3, #0
 800556c:	dc01      	bgt.n	8005572 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005572:	2300      	movs	r3, #0
 8005574:	62bb      	str	r3, [r7, #40]	; 0x28
 8005576:	e062      	b.n	800563e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005578:	2300      	movs	r3, #0
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
 800557c:	e059      	b.n	8005632 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	3301      	adds	r3, #1
 8005582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005584:	3201      	adds	r2, #1
 8005586:	fb03 f202 	mul.w	r2, r3, r2
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	fb02 f303 	mul.w	r3, r2, r3
 8005590:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	429a      	cmp	r2, r3
 8005598:	d348      	bcc.n	800562c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800559a:	2300      	movs	r3, #0
 800559c:	623b      	str	r3, [r7, #32]
 800559e:	e042      	b.n	8005626 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	3301      	adds	r3, #1
 80055a4:	6a3a      	ldr	r2, [r7, #32]
 80055a6:	fb03 f202 	mul.w	r2, r3, r2
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	fb02 f303 	mul.w	r3, r2, r3
 80055b0:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d332      	bcc.n	8005620 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d82e      	bhi.n	8005620 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 80055c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d02a      	beq.n	8005620 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80055ca:	4b24      	ldr	r3, [pc, #144]	; (800565c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	4924      	ldr	r1, [pc, #144]	; (8005660 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	440b      	add	r3, r1
 80055da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055dc:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80055de:	4b1f      	ldr	r3, [pc, #124]	; (800565c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	491f      	ldr	r1, [pc, #124]	; (8005660 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80055e4:	4613      	mov	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	3304      	adds	r3, #4
 80055f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f2:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80055f4:	4b19      	ldr	r3, [pc, #100]	; (800565c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4919      	ldr	r1, [pc, #100]	; (8005660 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	3308      	adds	r3, #8
 8005606:	6a3a      	ldr	r2, [r7, #32]
 8005608:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800560e:	4b13      	ldr	r3, [pc, #76]	; (800565c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3301      	adds	r3, #1
 8005614:	4a11      	ldr	r2, [pc, #68]	; (800565c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005616:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005618:	4b10      	ldr	r3, [pc, #64]	; (800565c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b7f      	cmp	r3, #127	; 0x7f
 800561e:	d812      	bhi.n	8005646 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	3301      	adds	r3, #1
 8005624:	623b      	str	r3, [r7, #32]
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	2b0f      	cmp	r3, #15
 800562a:	d9b9      	bls.n	80055a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	3301      	adds	r3, #1
 8005630:	627b      	str	r3, [r7, #36]	; 0x24
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	2b0f      	cmp	r3, #15
 8005636:	d9a2      	bls.n	800557e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	3301      	adds	r3, #1
 800563c:	62bb      	str	r3, [r7, #40]	; 0x28
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	2b0f      	cmp	r3, #15
 8005642:	d999      	bls.n	8005578 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8005644:	e000      	b.n	8005648 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8005646:	bf00      	nop
          }
        }
      }
    }
  }
}
 8005648:	373c      	adds	r7, #60	; 0x3c
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	3b9aca00 	.word	0x3b9aca00
 8005658:	0802bcf8 	.word	0x0802bcf8
 800565c:	20197bfc 	.word	0x20197bfc
 8005660:	201971fc 	.word	0x201971fc

08005664 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8005664:	b480      	push	{r7}
 8005666:	b093      	sub	sp, #76	; 0x4c
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 800566e:	f04f 33ff 	mov.w	r3, #4294967295
 8005672:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	085a      	lsrs	r2, r3, #1
 8005678:	4b7a      	ldr	r3, [pc, #488]	; (8005864 <I2C_Compute_SCLL_SCLH+0x200>)
 800567a:	4413      	add	r3, r2
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005682:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 8005684:	4a78      	ldr	r2, [pc, #480]	; (8005868 <I2C_Compute_SCLL_SCLH+0x204>)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	212c      	movs	r1, #44	; 0x2c
 800568a:	fb01 f303 	mul.w	r3, r1, r3
 800568e:	4413      	add	r3, r2
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	085a      	lsrs	r2, r3, #1
 8005694:	4b73      	ldr	r3, [pc, #460]	; (8005864 <I2C_Compute_SCLL_SCLH+0x200>)
 8005696:	4413      	add	r3, r2
 8005698:	4973      	ldr	r1, [pc, #460]	; (8005868 <I2C_Compute_SCLL_SCLH+0x204>)
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	202c      	movs	r0, #44	; 0x2c
 800569e:	fb00 f202 	mul.w	r2, r0, r2
 80056a2:	440a      	add	r2, r1
 80056a4:	6812      	ldr	r2, [r2, #0]
 80056a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80056aa:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80056ac:	2332      	movs	r3, #50	; 0x32
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80056b0:	4a6d      	ldr	r2, [pc, #436]	; (8005868 <I2C_Compute_SCLL_SCLH+0x204>)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	212c      	movs	r1, #44	; 0x2c
 80056b6:	fb01 f303 	mul.w	r3, r1, r3
 80056ba:	4413      	add	r3, r2
 80056bc:	3328      	adds	r3, #40	; 0x28
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	fb02 f303 	mul.w	r3, r2, r3
 80056c6:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80056c8:	4a67      	ldr	r2, [pc, #412]	; (8005868 <I2C_Compute_SCLL_SCLH+0x204>)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	212c      	movs	r1, #44	; 0x2c
 80056ce:	fb01 f303 	mul.w	r3, r1, r3
 80056d2:	4413      	add	r3, r2
 80056d4:	3304      	adds	r3, #4
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a62      	ldr	r2, [pc, #392]	; (8005864 <I2C_Compute_SCLL_SCLH+0x200>)
 80056da:	fbb2 f3f3 	udiv	r3, r2, r3
 80056de:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80056e0:	4a61      	ldr	r2, [pc, #388]	; (8005868 <I2C_Compute_SCLL_SCLH+0x204>)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	212c      	movs	r1, #44	; 0x2c
 80056e6:	fb01 f303 	mul.w	r3, r1, r3
 80056ea:	4413      	add	r3, r2
 80056ec:	3308      	adds	r3, #8
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a5c      	ldr	r2, [pc, #368]	; (8005864 <I2C_Compute_SCLL_SCLH+0x200>)
 80056f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f6:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80056fc:	2300      	movs	r3, #0
 80056fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005700:	e0a3      	b.n	800584a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005702:	495a      	ldr	r1, [pc, #360]	; (800586c <I2C_Compute_SCLL_SCLH+0x208>)
 8005704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005706:	4613      	mov	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	440b      	add	r3, r1
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005716:	fb02 f303 	mul.w	r3, r2, r3
 800571a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800571c:	2300      	movs	r3, #0
 800571e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005720:	e08c      	b.n	800583c <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	441a      	add	r2, r3
 8005728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572a:	3301      	adds	r3, #1
 800572c:	6979      	ldr	r1, [r7, #20]
 800572e:	fb03 f101 	mul.w	r1, r3, r1
 8005732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	440b      	add	r3, r1
 8005738:	4413      	add	r3, r2
 800573a:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800573c:	4a4a      	ldr	r2, [pc, #296]	; (8005868 <I2C_Compute_SCLL_SCLH+0x204>)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	212c      	movs	r1, #44	; 0x2c
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	4413      	add	r3, r2
 8005748:	3318      	adds	r3, #24
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	429a      	cmp	r2, r3
 8005750:	d971      	bls.n	8005836 <I2C_Compute_SCLL_SCLH+0x1d2>
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	1ad2      	subs	r2, r2, r3
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	089b      	lsrs	r3, r3, #2
 800575e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005760:	429a      	cmp	r2, r3
 8005762:	d268      	bcs.n	8005836 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005764:	2300      	movs	r3, #0
 8005766:	63bb      	str	r3, [r7, #56]	; 0x38
 8005768:	e062      	b.n	8005830 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800576a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	441a      	add	r2, r3
 8005770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005772:	3301      	adds	r3, #1
 8005774:	6979      	ldr	r1, [r7, #20]
 8005776:	fb03 f101 	mul.w	r1, r3, r1
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	440b      	add	r3, r1
 8005780:	4413      	add	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	441a      	add	r2, r3
 800578a:	4937      	ldr	r1, [pc, #220]	; (8005868 <I2C_Compute_SCLL_SCLH+0x204>)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	202c      	movs	r0, #44	; 0x2c
 8005790:	fb00 f303 	mul.w	r3, r0, r3
 8005794:	440b      	add	r3, r1
 8005796:	3320      	adds	r3, #32
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	441a      	add	r2, r3
 800579c:	4932      	ldr	r1, [pc, #200]	; (8005868 <I2C_Compute_SCLL_SCLH+0x204>)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	202c      	movs	r0, #44	; 0x2c
 80057a2:	fb00 f303 	mul.w	r3, r0, r3
 80057a6:	440b      	add	r3, r1
 80057a8:	3324      	adds	r3, #36	; 0x24
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4413      	add	r3, r2
 80057ae:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && \
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d338      	bcc.n	800582a <I2C_Compute_SCLL_SCLH+0x1c6>
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d834      	bhi.n	800582a <I2C_Compute_SCLL_SCLH+0x1c6>
 80057c0:	4a29      	ldr	r2, [pc, #164]	; (8005868 <I2C_Compute_SCLL_SCLH+0x204>)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	212c      	movs	r1, #44	; 0x2c
 80057c6:	fb01 f303 	mul.w	r3, r1, r3
 80057ca:	4413      	add	r3, r2
 80057cc:	331c      	adds	r3, #28
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d329      	bcc.n	800582a <I2C_Compute_SCLL_SCLH+0x1c6>
 80057d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d225      	bcs.n	800582a <I2C_Compute_SCLL_SCLH+0x1c6>
              (ti2cclk < tscl_h))
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	da02      	bge.n	80057f2 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	425b      	negs	r3, r3
 80057f0:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d917      	bls.n	800582a <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80057fe:	491b      	ldr	r1, [pc, #108]	; (800586c <I2C_Compute_SCLL_SCLH+0x208>)
 8005800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	3310      	adds	r3, #16
 800580e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005810:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8005812:	4916      	ldr	r1, [pc, #88]	; (800586c <I2C_Compute_SCLL_SCLH+0x208>)
 8005814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	330c      	adds	r3, #12
 8005822:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005824:	601a      	str	r2, [r3, #0]
              ret = count;
 8005826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005828:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	3301      	adds	r3, #1
 800582e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005832:	2bff      	cmp	r3, #255	; 0xff
 8005834:	d999      	bls.n	800576a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005838:	3301      	adds	r3, #1
 800583a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800583c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583e:	2bff      	cmp	r3, #255	; 0xff
 8005840:	f67f af6f 	bls.w	8005722 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005846:	3301      	adds	r3, #1
 8005848:	637b      	str	r3, [r7, #52]	; 0x34
 800584a:	4b09      	ldr	r3, [pc, #36]	; (8005870 <I2C_Compute_SCLL_SCLH+0x20c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005850:	429a      	cmp	r2, r3
 8005852:	f4ff af56 	bcc.w	8005702 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8005856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005858:	4618      	mov	r0, r3
 800585a:	374c      	adds	r7, #76	; 0x4c
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	3b9aca00 	.word	0x3b9aca00
 8005868:	0802bcf8 	.word	0x0802bcf8
 800586c:	201971fc 	.word	0x201971fc
 8005870:	20197bfc 	.word	0x20197bfc

08005874 <I2C5_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C5_MspInit(I2C_HandleTypeDef *hI2c)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	; 0x28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C5_SCL_GPIO_CLK_ENABLE();
 800587c:	4b2e      	ldr	r3, [pc, #184]	; (8005938 <I2C5_MspInit+0xc4>)
 800587e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005882:	4a2d      	ldr	r2, [pc, #180]	; (8005938 <I2C5_MspInit+0xc4>)
 8005884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005888:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800588c:	4b2a      	ldr	r3, [pc, #168]	; (8005938 <I2C5_MspInit+0xc4>)
 800588e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C5_SDA_GPIO_CLK_ENABLE();
 800589a:	4b27      	ldr	r3, [pc, #156]	; (8005938 <I2C5_MspInit+0xc4>)
 800589c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058a0:	4a25      	ldr	r2, [pc, #148]	; (8005938 <I2C5_MspInit+0xc4>)
 80058a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80058aa:	4b23      	ldr	r3, [pc, #140]	; (8005938 <I2C5_MspInit+0xc4>)
 80058ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C5_SCL_PIN;
 80058b8:	2320      	movs	r3, #32
 80058ba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 80058bc:	2312      	movs	r3, #18
 80058be:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 80058c0:	2301      	movs	r3, #1
 80058c2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 80058c4:	2302      	movs	r3, #2
 80058c6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C5_SCL_AF;
 80058c8:	2302      	movs	r3, #2
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C5_SCL_GPIO_PORT, &gpio_init_structure);
 80058cc:	f107 0314 	add.w	r3, r7, #20
 80058d0:	4619      	mov	r1, r3
 80058d2:	481a      	ldr	r0, [pc, #104]	; (800593c <I2C5_MspInit+0xc8>)
 80058d4:	f004 fc02 	bl	800a0dc <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C5_SDA_PIN;
 80058d8:	2310      	movs	r3, #16
 80058da:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 80058dc:	2312      	movs	r3, #18
 80058de:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 80058e0:	2301      	movs	r3, #1
 80058e2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 80058e4:	2302      	movs	r3, #2
 80058e6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C5_SDA_AF;
 80058e8:	2302      	movs	r3, #2
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C5_SDA_GPIO_PORT, &gpio_init_structure);
 80058ec:	f107 0314 	add.w	r3, r7, #20
 80058f0:	4619      	mov	r1, r3
 80058f2:	4812      	ldr	r0, [pc, #72]	; (800593c <I2C5_MspInit+0xc8>)
 80058f4:	f004 fbf2 	bl	800a0dc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C5_CLK_ENABLE();
 80058f8:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <I2C5_MspInit+0xc4>)
 80058fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80058fe:	4a0e      	ldr	r2, [pc, #56]	; (8005938 <I2C5_MspInit+0xc4>)
 8005900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005904:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8005908:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <I2C5_MspInit+0xc4>)
 800590a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800590e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005912:	60bb      	str	r3, [r7, #8]
 8005914:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C5_FORCE_RESET();
 8005916:	4b08      	ldr	r3, [pc, #32]	; (8005938 <I2C5_MspInit+0xc4>)
 8005918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800591a:	4a07      	ldr	r2, [pc, #28]	; (8005938 <I2C5_MspInit+0xc4>)
 800591c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005920:	6793      	str	r3, [r2, #120]	; 0x78

  /* Release the I2C peripheral clock reset */
  BUS_I2C5_RELEASE_RESET();
 8005922:	4b05      	ldr	r3, [pc, #20]	; (8005938 <I2C5_MspInit+0xc4>)
 8005924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005926:	4a04      	ldr	r2, [pc, #16]	; (8005938 <I2C5_MspInit+0xc4>)
 8005928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800592c:	6793      	str	r3, [r2, #120]	; 0x78
}
 800592e:	bf00      	nop
 8005930:	3728      	adds	r7, #40	; 0x28
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	46020c00 	.word	0x46020c00
 800593c:	42021c00 	.word	0x42021c00

08005940 <I2C5_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C5_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C5_SCL_PIN;
 8005948:	2320      	movs	r3, #32
 800594a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C5_SCL_GPIO_PORT, gpio_init_structure.Pin);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4619      	mov	r1, r3
 8005950:	480a      	ldr	r0, [pc, #40]	; (800597c <I2C5_MspDeInit+0x3c>)
 8005952:	f004 fd9b 	bl	800a48c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C5_SDA_PIN;
 8005956:	2310      	movs	r3, #16
 8005958:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C5_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4619      	mov	r1, r3
 800595e:	4807      	ldr	r0, [pc, #28]	; (800597c <I2C5_MspDeInit+0x3c>)
 8005960:	f004 fd94 	bl	800a48c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C5_CLK_DISABLE();
 8005964:	4b06      	ldr	r3, [pc, #24]	; (8005980 <I2C5_MspDeInit+0x40>)
 8005966:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800596a:	4a05      	ldr	r2, [pc, #20]	; (8005980 <I2C5_MspDeInit+0x40>)
 800596c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005970:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
}
 8005974:	bf00      	nop
 8005976:	3720      	adds	r7, #32
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	42021c00 	.word	0x42021c00
 8005980:	46020c00 	.word	0x46020c00

08005984 <I2C5_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af04      	add	r7, sp, #16
 800598a:	607b      	str	r3, [r7, #4]
 800598c:	4603      	mov	r3, r0
 800598e:	81fb      	strh	r3, [r7, #14]
 8005990:	460b      	mov	r3, r1
 8005992:	81bb      	strh	r3, [r7, #12]
 8005994:	4613      	mov	r3, r2
 8005996:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c5, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8005998:	8978      	ldrh	r0, [r7, #10]
 800599a:	89ba      	ldrh	r2, [r7, #12]
 800599c:	89f9      	ldrh	r1, [r7, #14]
 800599e:	f242 7310 	movw	r3, #10000	; 0x2710
 80059a2:	9302      	str	r3, [sp, #8]
 80059a4:	8b3b      	ldrh	r3, [r7, #24]
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	4603      	mov	r3, r0
 80059ae:	4807      	ldr	r0, [pc, #28]	; (80059cc <I2C5_WriteReg+0x48>)
 80059b0:	f005 fa4e 	bl	800ae50 <HAL_I2C_Mem_Write>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <I2C5_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80059ba:	2300      	movs	r3, #0
 80059bc:	e001      	b.n	80059c2 <I2C5_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80059be:	f06f 0307 	mvn.w	r3, #7
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20197c00 	.word	0x20197c00

080059d0 <I2C5_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af04      	add	r7, sp, #16
 80059d6:	607b      	str	r3, [r7, #4]
 80059d8:	4603      	mov	r3, r0
 80059da:	81fb      	strh	r3, [r7, #14]
 80059dc:	460b      	mov	r3, r1
 80059de:	81bb      	strh	r3, [r7, #12]
 80059e0:	4613      	mov	r3, r2
 80059e2:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c5, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80059e4:	8978      	ldrh	r0, [r7, #10]
 80059e6:	89ba      	ldrh	r2, [r7, #12]
 80059e8:	89f9      	ldrh	r1, [r7, #14]
 80059ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80059ee:	9302      	str	r3, [sp, #8]
 80059f0:	8b3b      	ldrh	r3, [r7, #24]
 80059f2:	9301      	str	r3, [sp, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	4603      	mov	r3, r0
 80059fa:	4807      	ldr	r0, [pc, #28]	; (8005a18 <I2C5_ReadReg+0x48>)
 80059fc:	f005 fb3c 	bl	800b078 <HAL_I2C_Mem_Read>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <I2C5_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e001      	b.n	8005a0e <I2C5_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8005a0a:	f06f 0307 	mvn.w	r3, #7
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20197c00 	.word	0x20197c00

08005a1c <I2C5_Recv>:
  * @param  pData      The target register value to be received
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	4603      	mov	r3, r0
 8005a24:	6039      	str	r1, [r7, #0]
 8005a26:	80fb      	strh	r3, [r7, #6]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	80bb      	strh	r3, [r7, #4]
  if (HAL_I2C_Master_Receive(&hbus_i2c5, DevAddr, pData, Length, 10000) == HAL_OK)
 8005a2c:	88bb      	ldrh	r3, [r7, #4]
 8005a2e:	88f9      	ldrh	r1, [r7, #6]
 8005a30:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a34:	9200      	str	r2, [sp, #0]
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	4806      	ldr	r0, [pc, #24]	; (8005a54 <I2C5_Recv+0x38>)
 8005a3a:	f005 f913 	bl	800ac64 <HAL_I2C_Master_Receive>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <I2C5_Recv+0x2c>
  {
    return BSP_ERROR_NONE;
 8005a44:	2300      	movs	r3, #0
 8005a46:	e001      	b.n	8005a4c <I2C5_Recv+0x30>
  }

  return BSP_ERROR_BUS_FAILURE;
 8005a48:	f06f 0307 	mvn.w	r3, #7
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	20197c00 	.word	0x20197c00

08005a58 <BSP_HSPI_RAM_Init>:
  * @param  Instance   HSPI Instance
  * @param  Init       HSPI Init structure
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_Init(uint32_t Instance, BSP_HSPI_RAM_Cfg_t *Init)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08a      	sub	sp, #40	; 0x28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  int32_t ret;
  MX_HSPI_InitTypeDef hspi_init;

  /* Check if the instance is supported */
  if (Instance >= HSPI_RAM_INSTANCES_NUMBER)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <BSP_HSPI_RAM_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005a68:	f06f 0301 	mvn.w	r3, #1
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6e:	e066      	b.n	8005b3e <BSP_HSPI_RAM_Init+0xe6>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)
 8005a70:	4935      	ldr	r1, [pc, #212]	; (8005b48 <BSP_HSPI_RAM_Init+0xf0>)
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	4613      	mov	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	440b      	add	r3, r1
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d15b      	bne.n	8005b3a <BSP_HSPI_RAM_Init+0xe2>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp HSPI initialization */
      HSPI_RAM_MspInit(&hhspi_ram[Instance]);
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	4613      	mov	r3, r2
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	4413      	add	r3, r2
 8005a8a:	015b      	lsls	r3, r3, #5
 8005a8c:	4a2f      	ldr	r2, [pc, #188]	; (8005b4c <BSP_HSPI_RAM_Init+0xf4>)
 8005a8e:	4413      	add	r3, r2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 fbab 	bl	80061ec <HSPI_RAM_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Fill config structure */
      hspi_init.ClockPrescaler = 0; /* HSPI clock = 160MHz / ClockPrescaler = 160MHz */
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005a9e:	61fb      	str	r3, [r7, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	fa93 f3a3 	rbit	r3, r3
 8005aa6:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	623b      	str	r3, [r7, #32]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <BSP_HSPI_RAM_Init+0x5e>
  {
    return 32U;
 8005ab2:	2320      	movs	r3, #32
 8005ab4:	e003      	b.n	8005abe <BSP_HSPI_RAM_Init+0x66>
  }
  return __builtin_clz(value);
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	fab3 f383 	clz	r3, r3
 8005abc:	b2db      	uxtb	r3, r3
      hspi_init.MemorySize     = (uint32_t)POSITION_VAL(APS512XX_RAM_SIZE);
 8005abe:	60bb      	str	r3, [r7, #8]
      hspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	613b      	str	r3, [r7, #16]

      /* STM32 HSPI interface initialization */
      if (MX_HSPI_RAM_Init(&hhspi_ram[Instance], &hspi_init) != HAL_OK)
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	4413      	add	r3, r2
 8005acc:	015b      	lsls	r3, r3, #5
 8005ace:	4a1f      	ldr	r2, [pc, #124]	; (8005b4c <BSP_HSPI_RAM_Init+0xf4>)
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f107 0208 	add.w	r2, r7, #8
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 f867 	bl	8005bac <MX_HSPI_RAM_Init>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <BSP_HSPI_RAM_Init+0x94>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005ae4:	f06f 0303 	mvn.w	r3, #3
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aea:	e028      	b.n	8005b3e <BSP_HSPI_RAM_Init+0xe6>
      }
      /* Reset the memory */
      else if (APS512XX_Reset(&hhspi_ram[Instance]) != 0)/*APS512XX_OK*/
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	4613      	mov	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4413      	add	r3, r2
 8005af4:	015b      	lsls	r3, r3, #5
 8005af6:	4a15      	ldr	r2, [pc, #84]	; (8005b4c <BSP_HSPI_RAM_Init+0xf4>)
 8005af8:	4413      	add	r3, r2
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fe fc18 	bl	8004330 <APS512XX_Reset>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <BSP_HSPI_RAM_Init+0xb6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b06:	f06f 0304 	mvn.w	r3, #4
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0c:	e017      	b.n	8005b3e <BSP_HSPI_RAM_Init+0xe6>
      }
      /* Configure the memory */
      else if (BSP_HSPI_RAM_Config16BitsOctalRAM(Instance, Init) != BSP_ERROR_NONE)
 8005b0e:	6839      	ldr	r1, [r7, #0]
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f957 	bl	8005dc4 <BSP_HSPI_RAM_Config16BitsOctalRAM>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <BSP_HSPI_RAM_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b1c:	f06f 0304 	mvn.w	r3, #4
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
 8005b22:	e00c      	b.n	8005b3e <BSP_HSPI_RAM_Init+0xe6>
      }
      else
      {
        Hspi_Ram_Ctx[Instance].IsInitialized = HSPI_ACCESS_INDIRECT;
 8005b24:	4908      	ldr	r1, [pc, #32]	; (8005b48 <BSP_HSPI_RAM_Init+0xf0>)
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	440b      	add	r3, r1
 8005b30:	2201      	movs	r2, #1
 8005b32:	701a      	strb	r2, [r3, #0]
        ret = BSP_ERROR_NONE;
 8005b34:	2300      	movs	r3, #0
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
 8005b38:	e001      	b.n	8005b3e <BSP_HSPI_RAM_Init+0xe6>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  /* Return BSP status */
  return ret;
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3728      	adds	r7, #40	; 0x28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20000040 	.word	0x20000040
 8005b4c:	20197c54 	.word	0x20197c54

08005b50 <Tuning_HSPI_Write>:
  * @brief  Tuning the HSPI write.
  * @param  hhspi          HSPI handle
  * @retval BSP status
  */
static int32_t Tuning_HSPI_Write(XSPI_HandleTypeDef *hhspi)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61fb      	str	r3, [r7, #28]
  XSPI_HSCalTypeDef sCfg;

  hhspi->Instance = HSPI1;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a12      	ldr	r2, [pc, #72]	; (8005ba8 <Tuning_HSPI_Write+0x58>)
 8005b60:	601a      	str	r2, [r3, #0]
  hhspi->State    = HAL_XSPI_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2202      	movs	r2, #2
 8005b66:	655a      	str	r2, [r3, #84]	; 0x54

  sCfg.DelayValueType        = HAL_XSPI_CAL_DATA_OUTPUT_DELAY;
 8005b68:	2302      	movs	r3, #2
 8005b6a:	60fb      	str	r3, [r7, #12]
  sCfg.FineCalibrationUnit   = 0x11;
 8005b6c:	2311      	movs	r3, #17
 8005b6e:	613b      	str	r3, [r7, #16]
  sCfg.CoarseCalibrationUnit = 0x05;
 8005b70:	2305      	movs	r3, #5
 8005b72:	617b      	str	r3, [r7, #20]
  sCfg.MaxCalibration        = HAL_XSPI_MAXCAL_REACHED;
 8005b74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b78:	61bb      	str	r3, [r7, #24]
  if (HAL_XSPI_SetDelayValue(hhspi, &sCfg) != HAL_OK)
 8005b7a:	f107 030c 	add.w	r3, r7, #12
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f00e f8cf 	bl	8013d24 <HAL_XSPI_SetDelayValue>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d007      	beq.n	8005b9c <Tuning_HSPI_Write+0x4c>
  {
    if (hhspi->Instance == HSPI1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a05      	ldr	r2, [pc, #20]	; (8005ba8 <Tuning_HSPI_Write+0x58>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d102      	bne.n	8005b9c <Tuning_HSPI_Write+0x4c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005b96:	f06f 0303 	mvn.w	r3, #3
 8005b9a:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return BSP status */
  return ret;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3720      	adds	r7, #32
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	420d3400 	.word	0x420d3400

08005bac <MX_HSPI_RAM_Init>:
  * @param  hhspi          HSPI handle
  * @param  Init           HSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_HSPI_RAM_Init(XSPI_HandleTypeDef *hhspi, MX_HSPI_InitTypeDef *Init)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t hspi_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_HSPI);
 8005bb6:	f04f 0000 	mov.w	r0, #0
 8005bba:	f04f 0101 	mov.w	r1, #1
 8005bbe:	f009 fab3 	bl	800f128 <HAL_RCCEx_GetPeriphCLKFreq>
 8005bc2:	60f8      	str	r0, [r7, #12]

  /* HSPI initialization */
  hhspi->Instance = HSPI1;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a24      	ldr	r2, [pc, #144]	; (8005c58 <MX_HSPI_RAM_Init+0xac>)
 8005bc8:	601a      	str	r2, [r3, #0]

  hhspi->Init.FifoThresholdByte       = 2U;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	605a      	str	r2, [r3, #4]
  hhspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	609a      	str	r2, [r3, #8]
  hhspi->Init.MemoryType              = HAL_XSPI_MEMTYPE_APMEM_16BITS;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005bdc:	60da      	str	r2, [r3, #12]
  hhspi->Init.MemorySize              = Init->MemorySize;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	611a      	str	r2, [r3, #16]
  hhspi->Init.ChipSelectHighTimeCycle = 1U;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	615a      	str	r2, [r3, #20]
  hhspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	619a      	str	r2, [r3, #24]
  hhspi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	61da      	str	r2, [r3, #28]
  hhspi->Init.WrapSize                = HAL_XSPI_WRAP_32_BYTES;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005bfe:	621a      	str	r2, [r3, #32]
  hhspi->Init.ClockPrescaler          = Init->ClockPrescaler;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	625a      	str	r2, [r3, #36]	; 0x24
  hhspi->Init.SampleShifting          = Init->SampleShifting;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	629a      	str	r2, [r3, #40]	; 0x28
  hhspi->Init.DelayHoldQuarterCycle   = HAL_XSPI_DHQC_DISABLE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	62da      	str	r2, [r3, #44]	; 0x2c
  hhspi->Init.ChipSelectBoundary      = 11U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	220b      	movs	r2, #11
 8005c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hhspi->Init.DelayBlockBypass        = HAL_XSPI_DELAY_BLOCK_ON;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	635a      	str	r2, [r3, #52]	; 0x34
  /* tCEM = 2 us max => REFRESH+4 clock cycles for read */
  hhspi->Init.Refresh                 = ((2U * (hspi_clk / (Init->ClockPrescaler + 1))) / 1000000U) - 4U;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	3301      	adds	r3, #1
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	4a0a      	ldr	r2, [pc, #40]	; (8005c5c <MX_HSPI_RAM_Init+0xb0>)
 8005c32:	fba2 2303 	umull	r2, r3, r2, r3
 8005c36:	0c9b      	lsrs	r3, r3, #18
 8005c38:	1f1a      	subs	r2, r3, #4
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hhspi->Init.MaxTran                 = 0U;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	639a      	str	r2, [r3, #56]	; 0x38

  status = HAL_XSPI_Init(hhspi);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f00d fab5 	bl	80131b4 <HAL_XSPI_Init>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8005c4e:	7afb      	ldrb	r3, [r7, #11]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	420d3400 	.word	0x420d3400
 8005c5c:	431bde83 	.word	0x431bde83

08005c60 <BSP_HSPI_RAM_EnableMemoryMappedMode>:
  * @brief  Configure the HSPI in memory-mapped mode
  * @param  Instance  HSPI instance
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_EnableMemoryMappedMode(uint32_t Instance)
{
 8005c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af02      	add	r7, sp, #8
 8005c66:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= HSPI_RAM_INSTANCES_NUMBER)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <BSP_HSPI_RAM_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005c72:	f06f 0301 	mvn.w	r3, #1
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	e09a      	b.n	8005db0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
  }
  else
  {
    if (Tuning_HSPI_Write(&hhspi_ram[Instance]) != 0UL)
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	4413      	add	r3, r2
 8005c82:	015b      	lsls	r3, r3, #5
 8005c84:	4a4d      	ldr	r2, [pc, #308]	; (8005dbc <BSP_HSPI_RAM_EnableMemoryMappedMode+0x15c>)
 8005c86:	4413      	add	r3, r2
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff ff61 	bl	8005b50 <Tuning_HSPI_Write>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <BSP_HSPI_RAM_EnableMemoryMappedMode+0x3c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005c94:	f06f 0303 	mvn.w	r3, #3
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	e089      	b.n	8005db0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
    }
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	4413      	add	r3, r2
 8005ca4:	015b      	lsls	r3, r3, #5
 8005ca6:	4a45      	ldr	r2, [pc, #276]	; (8005dbc <BSP_HSPI_RAM_EnableMemoryMappedMode+0x15c>)
 8005ca8:	189c      	adds	r4, r3, r2
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 8005caa:	4945      	ldr	r1, [pc, #276]	; (8005dc0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	1a9b      	subs	r3, r3, r2
 8005cb4:	440b      	add	r3, r1
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	f003 0320 	and.w	r3, r3, #32
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10c      	bne.n	8005cdc <BSP_HSPI_RAM_EnableMemoryMappedMode+0x7c>
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 8005cc2:	493f      	ldr	r1, [pc, #252]	; (8005dc0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	440b      	add	r3, r1
 8005cce:	3302      	adds	r3, #2
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	089b      	lsrs	r3, r3, #2
 8005cd4:	f003 0307 	and.w	r3, r3, #7
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005cd8:	1cd9      	adds	r1, r3, #3
 8005cda:	e00c      	b.n	8005cf6 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x96>
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 8005cdc:	4938      	ldr	r1, [pc, #224]	; (8005dc0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	1a9b      	subs	r3, r3, r2
 8005ce6:	440b      	add	r3, r1
 8005ce8:	3302      	adds	r3, #2
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	089b      	lsrs	r3, r3, #2
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	3303      	adds	r3, #3
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005cf4:	0059      	lsls	r1, r3, #1
                                                                             (uint32_t)(Hspi_Ram_Ctx[Instance].LatencyType)),
                                             APS512XX_WRITE_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].WriteLatencyCode)),
 8005cf6:	4832      	ldr	r0, [pc, #200]	; (8005dc0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	1a9b      	subs	r3, r3, r2
 8005d00:	4403      	add	r3, r0
 8005d02:	3303      	adds	r3, #3
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d02a      	beq.n	8005d64 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x104>
                                             APS512XX_WRITE_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].WriteLatencyCode)),
 8005d0e:	482c      	ldr	r0, [pc, #176]	; (8005dc0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	4613      	mov	r3, r2
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	1a9b      	subs	r3, r3, r2
 8005d18:	4403      	add	r3, r0
 8005d1a:	3303      	adds	r3, #3
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	f003 0320 	and.w	r3, r3, #32
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d11c      	bne.n	8005d60 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x100>
 8005d26:	4826      	ldr	r0, [pc, #152]	; (8005dc0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	1a9b      	subs	r3, r3, r2
 8005d30:	4403      	add	r3, r0
 8005d32:	3303      	adds	r3, #3
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00e      	beq.n	8005d5c <BSP_HSPI_RAM_EnableMemoryMappedMode+0xfc>
 8005d3e:	4820      	ldr	r0, [pc, #128]	; (8005dc0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	4613      	mov	r3, r2
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	1a9b      	subs	r3, r3, r2
 8005d48:	4403      	add	r3, r0
 8005d4a:	3303      	adds	r3, #3
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	b25b      	sxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	db01      	blt.n	8005d58 <BSP_HSPI_RAM_EnableMemoryMappedMode+0xf8>
 8005d54:	2205      	movs	r2, #5
 8005d56:	e006      	b.n	8005d66 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 8005d58:	2206      	movs	r2, #6
 8005d5a:	e004      	b.n	8005d66 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 8005d5c:	2204      	movs	r2, #4
 8005d5e:	e002      	b.n	8005d66 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 8005d60:	2207      	movs	r2, #7
 8005d62:	e000      	b.n	8005d66 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005d64:	2203      	movs	r2, #3
                                             (uint32_t)(Hspi_Ram_Ctx[Instance].IOMode),
 8005d66:	4d16      	ldr	r5, [pc, #88]	; (8005dc0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	1a1b      	subs	r3, r3, r0
 8005d70:	442b      	add	r3, r5
 8005d72:	3306      	adds	r3, #6
 8005d74:	781b      	ldrb	r3, [r3, #0]
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005d76:	461e      	mov	r6, r3
                                             (uint32_t)(Hspi_Ram_Ctx[Instance].BurstType)) != (int32_t)APS512XX_OK)
 8005d78:	4d11      	ldr	r5, [pc, #68]	; (8005dc0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	1a1b      	subs	r3, r3, r0
 8005d82:	442b      	add	r3, r5
 8005d84:	3304      	adds	r3, #4
 8005d86:	781b      	ldrb	r3, [r3, #0]
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	4633      	mov	r3, r6
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f7fe f9ac 	bl	80040ea <APS512XX_EnableMemoryMappedMode>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x140>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d98:	f06f 0304 	mvn.w	r3, #4
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	e007      	b.n	8005db0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
    }
    else /* Update HSPI context if all operations are well done */
    {
      Hspi_Ram_Ctx[Instance].IsInitialized = HSPI_ACCESS_MMP;
 8005da0:	4907      	ldr	r1, [pc, #28]	; (8005dc0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	4613      	mov	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	1a9b      	subs	r3, r3, r2
 8005daa:	440b      	add	r3, r1
 8005dac:	2202      	movs	r2, #2
 8005dae:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return BSP status */
  return ret;
 8005db0:	68fb      	ldr	r3, [r7, #12]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20197c54 	.word	0x20197c54
 8005dc0:	20000040 	.word	0x20000040

08005dc4 <BSP_HSPI_RAM_Config16BitsOctalRAM>:
  * @param  Instance    HSPI instance
  * @param  Cfg         pointer to the RAM config
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_Config16BitsOctalRAM(uint32_t Instance, BSP_HSPI_RAM_Cfg_t *Cfg)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if ((Instance >= HSPI_RAM_INSTANCES_NUMBER)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d103      	bne.n	8005de0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1c>
      || (Cfg->BurstLength == (BSP_HSPI_RAM_BurstLength_t)APS512XX_MR8_BL_2K_BYTES))
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	791b      	ldrb	r3, [r3, #4]
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d103      	bne.n	8005de8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005de0:	f06f 0301 	mvn.w	r3, #1
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	e1f7      	b.n	80061d8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
  }
  else
  {
    /* Check if MMP mode locked ***********************************************/
    if (Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_MMP)
 8005de8:	49a9      	ldr	r1, [pc, #676]	; (8006090 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	4613      	mov	r3, r2
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	1a9b      	subs	r3, r3, r2
 8005df2:	440b      	add	r3, r1
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d103      	bne.n	8005e02 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x3e>
    {
      ret = BSP_ERROR_HSPI_MMP_LOCK_FAILURE;
 8005dfa:	f06f 031f 	mvn.w	r3, #31
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	e1ea      	b.n	80061d8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
    }
    else
    {
      if ((Hspi_Ram_Ctx[Instance].IsInitialized  == HSPI_ACCESS_NONE) ||
 8005e02:	49a3      	ldr	r1, [pc, #652]	; (8006090 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	1a9b      	subs	r3, r3, r2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d017      	beq.n	8005e44 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x80>
          (Hspi_Ram_Ctx[Instance].LatencyType     != Cfg->LatencyType)  ||
 8005e14:	499e      	ldr	r1, [pc, #632]	; (8006090 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	1a9b      	subs	r3, r3, r2
 8005e1e:	440b      	add	r3, r1
 8005e20:	3301      	adds	r3, #1
 8005e22:	781a      	ldrb	r2, [r3, #0]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
      if ((Hspi_Ram_Ctx[Instance].IsInitialized  == HSPI_ACCESS_NONE) ||
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d10b      	bne.n	8005e44 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x80>
          (Hspi_Ram_Ctx[Instance].ReadLatencyCode != Cfg->ReadLatencyCode))
 8005e2c:	4998      	ldr	r1, [pc, #608]	; (8006090 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	4613      	mov	r3, r2
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	440b      	add	r3, r1
 8005e38:	3302      	adds	r3, #2
 8005e3a:	781a      	ldrb	r2, [r3, #0]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	785b      	ldrb	r3, [r3, #1]
          (Hspi_Ram_Ctx[Instance].LatencyType     != Cfg->LatencyType)  ||
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d040      	beq.n	8005ec6 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
      {
        /* Reading the configuration of Mode Register 0 ***********************/
        if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg,
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	4413      	add	r3, r2
 8005e4c:	015b      	lsls	r3, r3, #5
 8005e4e:	4a91      	ldr	r2, [pc, #580]	; (8006094 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005e50:	1898      	adds	r0, r3, r2
                             (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != \
 8005e52:	498f      	ldr	r1, [pc, #572]	; (8006090 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	4613      	mov	r3, r2
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	1a9b      	subs	r3, r3, r2
 8005e5c:	440b      	add	r3, r1
 8005e5e:	3302      	adds	r3, #2
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	089b      	lsrs	r3, r3, #2
 8005e64:	f003 0307 	and.w	r3, r3, #7
        if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg,
 8005e68:	3303      	adds	r3, #3
 8005e6a:	f107 0208 	add.w	r2, r7, #8
 8005e6e:	2100      	movs	r1, #0
 8005e70:	f7fe f9b7 	bl	80041e2 <APS512XX_ReadReg>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <BSP_HSPI_RAM_Config16BitsOctalRAM+0xbe>
            (int32_t)APS512XX_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e7a:	f06f 0304 	mvn.w	r3, #4
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	e021      	b.n	8005ec6 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
        }
        else
        {
          /* Configure the 16-bits Octal RAM memory ***************************/
          MODIFY_REG(reg[0], ((uint32_t)APS512XX_MR0_LATENCY_TYPE | (uint32_t)APS512XX_MR0_READ_LATENCY_CODE |
 8005e82:	7a3b      	ldrb	r3, [r7, #8]
 8005e84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	7819      	ldrb	r1, [r3, #0]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	430b      	orrs	r3, r1
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	4313      	orrs	r3, r2
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	723b      	strb	r3, [r7, #8]
                              (uint32_t)APS512XX_MR0_DRIVE_STRENGTH),
                     ((uint32_t)(Cfg->LatencyType) | (uint32_t)(Cfg->ReadLatencyCode) | (uint32_t)CONF_HSPI_DS));

          if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg[0]) != APS512XX_OK)
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	4413      	add	r3, r2
 8005eaa:	015b      	lsls	r3, r3, #5
 8005eac:	4a79      	ldr	r2, [pc, #484]	; (8006094 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005eae:	4413      	add	r3, r2
 8005eb0:	7a3a      	ldrb	r2, [r7, #8]
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fe f9e8 	bl	800428a <APS512XX_WriteReg>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ec0:	f06f 0304 	mvn.w	r3, #4
 8005ec4:	60fb      	str	r3, [r7, #12]
          }
          /* Configure the peripheral *****************************************/
        }
      }

      if (ret == BSP_ERROR_NONE)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d148      	bne.n	8005f5e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
      {
        if ((Hspi_Ram_Ctx[Instance].IsInitialized   == HSPI_ACCESS_NONE) ||
 8005ecc:	4970      	ldr	r1, [pc, #448]	; (8006090 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	1a9b      	subs	r3, r3, r2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00b      	beq.n	8005ef6 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x132>
            (Hspi_Ram_Ctx[Instance].WriteLatencyCode != Cfg->WriteLatencyCode))
 8005ede:	496c      	ldr	r1, [pc, #432]	; (8006090 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	440b      	add	r3, r1
 8005eea:	3303      	adds	r3, #3
 8005eec:	781a      	ldrb	r2, [r3, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	789b      	ldrb	r3, [r3, #2]
        if ((Hspi_Ram_Ctx[Instance].IsInitialized   == HSPI_ACCESS_NONE) ||
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d033      	beq.n	8005f5e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
        {
          /* Reading the configuration of Mode Register 4 ***********************/
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg,
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	4413      	add	r3, r2
 8005efe:	015b      	lsls	r3, r3, #5
 8005f00:	4a64      	ldr	r2, [pc, #400]	; (8006094 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005f02:	1898      	adds	r0, r3, r2
                               (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != (int32_t)APS512XX_OK)
 8005f04:	4962      	ldr	r1, [pc, #392]	; (8006090 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	1a9b      	subs	r3, r3, r2
 8005f0e:	440b      	add	r3, r1
 8005f10:	3302      	adds	r3, #2
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	089b      	lsrs	r3, r3, #2
 8005f16:	f003 0307 	and.w	r3, r3, #7
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg,
 8005f1a:	3303      	adds	r3, #3
 8005f1c:	f107 0208 	add.w	r2, r7, #8
 8005f20:	2104      	movs	r1, #4
 8005f22:	f7fe f95e 	bl	80041e2 <APS512XX_ReadReg>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x170>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f2c:	f06f 0304 	mvn.w	r3, #4
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	e014      	b.n	8005f5e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
          }
          else
          {
            /* Configure the 16-bits Octal RAM memory ***************************/
            MODIFY_REG(reg[0], (APS512XX_MR4_WRITE_LATENCY_CODE | APS512XX_MR4_RF_RATE | APS512XX_MR4_PASR),
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	789b      	ldrb	r3, [r3, #2]
 8005f38:	723b      	strb	r3, [r7, #8]
                       (Cfg->WriteLatencyCode | CONF_HSPI_RF | CONF_HSPI_PASR));

            if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg[0]) != APS512XX_OK)
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	4413      	add	r3, r2
 8005f42:	015b      	lsls	r3, r3, #5
 8005f44:	4a53      	ldr	r2, [pc, #332]	; (8006094 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005f46:	4413      	add	r3, r2
 8005f48:	7a3a      	ldrb	r2, [r7, #8]
 8005f4a:	2104      	movs	r1, #4
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fe f99c 	bl	800428a <APS512XX_WriteReg>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f58:	f06f 0304 	mvn.w	r3, #4
 8005f5c:	60fb      	str	r3, [r7, #12]
            }
          }
        }
      }

      if (ret == BSP_ERROR_NONE)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f040 80ec 	bne.w	800613e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
      {
        if ((Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)  ||
 8005f66:	494a      	ldr	r1, [pc, #296]	; (8006090 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	1a9b      	subs	r3, r3, r2
 8005f70:	440b      	add	r3, r1
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d024      	beq.n	8005fc2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].BurstType      != Cfg->BurstType)   ||
 8005f78:	4945      	ldr	r1, [pc, #276]	; (8006090 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	1a9b      	subs	r3, r3, r2
 8005f82:	440b      	add	r3, r1
 8005f84:	3304      	adds	r3, #4
 8005f86:	781a      	ldrb	r2, [r3, #0]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	78db      	ldrb	r3, [r3, #3]
        if ((Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)  ||
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d118      	bne.n	8005fc2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].BurstLength    != Cfg->BurstLength) ||
 8005f90:	493f      	ldr	r1, [pc, #252]	; (8006090 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	4613      	mov	r3, r2
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	1a9b      	subs	r3, r3, r2
 8005f9a:	440b      	add	r3, r1
 8005f9c:	3305      	adds	r3, #5
 8005f9e:	781a      	ldrb	r2, [r3, #0]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	791b      	ldrb	r3, [r3, #4]
            (Hspi_Ram_Ctx[Instance].BurstType      != Cfg->BurstType)   ||
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d10c      	bne.n	8005fc2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].IOMode         != Cfg->IOMode))
 8005fa8:	4939      	ldr	r1, [pc, #228]	; (8006090 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	4613      	mov	r3, r2
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	1a9b      	subs	r3, r3, r2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	3306      	adds	r3, #6
 8005fb6:	781a      	ldrb	r2, [r3, #0]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	795b      	ldrb	r3, [r3, #5]
            (Hspi_Ram_Ctx[Instance].BurstLength    != Cfg->BurstLength) ||
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	f000 80be 	beq.w	800613e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
        {
          /* Reading the configuration of Mode Register 8 ***********************/
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg,
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	4413      	add	r3, r2
 8005fca:	015b      	lsls	r3, r3, #5
 8005fcc:	4a31      	ldr	r2, [pc, #196]	; (8006094 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005fce:	1898      	adds	r0, r3, r2
                               (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != (int32_t)APS512XX_OK)
 8005fd0:	492f      	ldr	r1, [pc, #188]	; (8006090 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	1a9b      	subs	r3, r3, r2
 8005fda:	440b      	add	r3, r1
 8005fdc:	3302      	adds	r3, #2
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	089b      	lsrs	r3, r3, #2
 8005fe2:	f003 0307 	and.w	r3, r3, #7
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg,
 8005fe6:	3303      	adds	r3, #3
 8005fe8:	f107 0208 	add.w	r2, r7, #8
 8005fec:	2108      	movs	r1, #8
 8005fee:	f7fe f8f8 	bl	80041e2 <APS512XX_ReadReg>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x23c>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ff8:	f06f 0304 	mvn.w	r3, #4
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	e09e      	b.n	800613e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
          }
          else
          {
            /* Configure the 16-bits Octal RAM memory ***************************/
            MODIFY_REG(reg[0], ((uint32_t)APS512XX_MR8_X8_X16 | (uint32_t)APS512XX_MR8_BL),
 8006000:	7a3b      	ldrb	r3, [r7, #8]
 8006002:	f023 0343 	bic.w	r3, r3, #67	; 0x43
 8006006:	b2da      	uxtb	r2, r3
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	7959      	ldrb	r1, [r3, #5]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	791b      	ldrb	r3, [r3, #4]
 8006010:	430b      	orrs	r3, r1
 8006012:	b2db      	uxtb	r3, r3
 8006014:	4313      	orrs	r3, r2
 8006016:	b2db      	uxtb	r3, r3
 8006018:	723b      	strb	r3, [r7, #8]
                       ((uint32_t)(Cfg->IOMode) | (uint32_t)(Cfg->BurstLength)));

            if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg[0]) != APS512XX_OK)
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	4613      	mov	r3, r2
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	4413      	add	r3, r2
 8006022:	015b      	lsls	r3, r3, #5
 8006024:	4a1b      	ldr	r2, [pc, #108]	; (8006094 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8006026:	4413      	add	r3, r2
 8006028:	7a3a      	ldrb	r2, [r7, #8]
 800602a:	2108      	movs	r1, #8
 800602c:	4618      	mov	r0, r3
 800602e:	f7fe f92c 	bl	800428a <APS512XX_WriteReg>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d003      	beq.n	8006040 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x27c>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8006038:	f06f 0304 	mvn.w	r3, #4
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	e07e      	b.n	800613e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
            }
            else
            {
              /* Configure the peripheral *****************************************/
              if (Cfg->BurstType == BSP_HSPI_RAM_HYBRID_BURST)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	78db      	ldrb	r3, [r3, #3]
 8006044:	2b04      	cmp	r3, #4
 8006046:	d133      	bne.n	80060b0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2ec>
              {
                switch (Cfg->BurstLength)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	791b      	ldrb	r3, [r3, #4]
 800604c:	2b02      	cmp	r3, #2
 800604e:	d023      	beq.n	8006098 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d4>
 8006050:	2b02      	cmp	r3, #2
 8006052:	dc38      	bgt.n	80060c6 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x302>
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x29a>
 8006058:	2b01      	cmp	r3, #1
 800605a:	d00c      	beq.n	8006076 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2b2>
                    break;
                  case APS512XX_MR8_BL_64_BYTES :
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_64_BYTES;
                    break;
                  default :
                    break;
 800605c:	e033      	b.n	80060c6 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x302>
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_16_BYTES;
 800605e:	490d      	ldr	r1, [pc, #52]	; (8006094 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	4613      	mov	r3, r2
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	4413      	add	r3, r2
 8006068:	015b      	lsls	r3, r3, #5
 800606a:	440b      	add	r3, r1
 800606c:	3320      	adds	r3, #32
 800606e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006072:	601a      	str	r2, [r3, #0]
                    break;
 8006074:	e028      	b.n	80060c8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_32_BYTES;
 8006076:	4907      	ldr	r1, [pc, #28]	; (8006094 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	4613      	mov	r3, r2
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	4413      	add	r3, r2
 8006080:	015b      	lsls	r3, r3, #5
 8006082:	440b      	add	r3, r1
 8006084:	3320      	adds	r3, #32
 8006086:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800608a:	601a      	str	r2, [r3, #0]
                    break;
 800608c:	e01c      	b.n	80060c8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
 800608e:	bf00      	nop
 8006090:	20000040 	.word	0x20000040
 8006094:	20197c54 	.word	0x20197c54
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_64_BYTES;
 8006098:	4952      	ldr	r1, [pc, #328]	; (80061e4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	4613      	mov	r3, r2
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	4413      	add	r3, r2
 80060a2:	015b      	lsls	r3, r3, #5
 80060a4:	440b      	add	r3, r1
 80060a6:	3320      	adds	r3, #32
 80060a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80060ac:	601a      	str	r2, [r3, #0]
                    break;
 80060ae:	e00b      	b.n	80060c8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                }
              }
              else
              {
                hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 80060b0:	494c      	ldr	r1, [pc, #304]	; (80061e4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	4613      	mov	r3, r2
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	4413      	add	r3, r2
 80060ba:	015b      	lsls	r3, r3, #5
 80060bc:	440b      	add	r3, r1
 80060be:	3320      	adds	r3, #32
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	e000      	b.n	80060c8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                    break;
 80060c6:	bf00      	nop
              }

              if (Cfg->IOMode == BSP_HSPI_RAM_IO_X16_MODE)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	795b      	ldrb	r3, [r3, #5]
 80060cc:	2b40      	cmp	r3, #64	; 0x40
 80060ce:	d10b      	bne.n	80060e8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x324>
              {
                hhspi_ram[Instance].Init.MemoryType = HAL_XSPI_MEMTYPE_APMEM_16BITS;
 80060d0:	4944      	ldr	r1, [pc, #272]	; (80061e4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	4613      	mov	r3, r2
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	4413      	add	r3, r2
 80060da:	015b      	lsls	r3, r3, #5
 80060dc:	440b      	add	r3, r1
 80060de:	330c      	adds	r3, #12
 80060e0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	e00a      	b.n	80060fe <BSP_HSPI_RAM_Config16BitsOctalRAM+0x33a>
              }
              else
              {
                hhspi_ram[Instance].Init.MemoryType = HAL_XSPI_MEMTYPE_APMEM;
 80060e8:	493e      	ldr	r1, [pc, #248]	; (80061e4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	4613      	mov	r3, r2
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	4413      	add	r3, r2
 80060f2:	015b      	lsls	r3, r3, #5
 80060f4:	440b      	add	r3, r1
 80060f6:	330c      	adds	r3, #12
 80060f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060fc:	601a      	str	r2, [r3, #0]
              }

              if (HAL_XSPI_DeInit(&hhspi_ram[Instance]) != HAL_OK)
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	4613      	mov	r3, r2
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	4413      	add	r3, r2
 8006106:	015b      	lsls	r3, r3, #5
 8006108:	4a36      	ldr	r2, [pc, #216]	; (80061e4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 800610a:	4413      	add	r3, r2
 800610c:	4618      	mov	r0, r3
 800610e:	f00d f99d 	bl	801344c <HAL_XSPI_DeInit>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x35a>
              {
                ret = BSP_ERROR_PERIPH_FAILURE;
 8006118:	f06f 0303 	mvn.w	r3, #3
 800611c:	60fb      	str	r3, [r7, #12]
              }

              if (HAL_XSPI_Init(&hhspi_ram[Instance]) != HAL_OK)
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	4613      	mov	r3, r2
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	4413      	add	r3, r2
 8006126:	015b      	lsls	r3, r3, #5
 8006128:	4a2e      	ldr	r2, [pc, #184]	; (80061e4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 800612a:	4413      	add	r3, r2
 800612c:	4618      	mov	r0, r3
 800612e:	f00d f841 	bl	80131b4 <HAL_XSPI_Init>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
              {
                ret = BSP_ERROR_PERIPH_FAILURE;
 8006138:	f06f 0303 	mvn.w	r3, #3
 800613c:	60fb      	str	r3, [r7, #12]
          }
        }
      }

      /* Update HSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d149      	bne.n	80061d8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
      {
        /* Update current status parameter *****************************************/
        Hspi_Ram_Ctx[Instance].IsInitialized    = HSPI_ACCESS_INDIRECT;
 8006144:	4928      	ldr	r1, [pc, #160]	; (80061e8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	4613      	mov	r3, r2
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	1a9b      	subs	r3, r3, r2
 800614e:	440b      	add	r3, r1
 8006150:	2201      	movs	r2, #1
 8006152:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].LatencyType      = Cfg->LatencyType;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	7818      	ldrb	r0, [r3, #0]
 8006158:	4923      	ldr	r1, [pc, #140]	; (80061e8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4613      	mov	r3, r2
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	1a9b      	subs	r3, r3, r2
 8006162:	440b      	add	r3, r1
 8006164:	3301      	adds	r3, #1
 8006166:	4602      	mov	r2, r0
 8006168:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].ReadLatencyCode  = Cfg->ReadLatencyCode;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	7858      	ldrb	r0, [r3, #1]
 800616e:	491e      	ldr	r1, [pc, #120]	; (80061e8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	4613      	mov	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	1a9b      	subs	r3, r3, r2
 8006178:	440b      	add	r3, r1
 800617a:	3302      	adds	r3, #2
 800617c:	4602      	mov	r2, r0
 800617e:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].WriteLatencyCode = Cfg->WriteLatencyCode;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	7898      	ldrb	r0, [r3, #2]
 8006184:	4918      	ldr	r1, [pc, #96]	; (80061e8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	4613      	mov	r3, r2
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	1a9b      	subs	r3, r3, r2
 800618e:	440b      	add	r3, r1
 8006190:	3303      	adds	r3, #3
 8006192:	4602      	mov	r2, r0
 8006194:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].BurstType        = Cfg->BurstType;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	78d8      	ldrb	r0, [r3, #3]
 800619a:	4913      	ldr	r1, [pc, #76]	; (80061e8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	4613      	mov	r3, r2
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	1a9b      	subs	r3, r3, r2
 80061a4:	440b      	add	r3, r1
 80061a6:	3304      	adds	r3, #4
 80061a8:	4602      	mov	r2, r0
 80061aa:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].BurstLength      = Cfg->BurstLength;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	7918      	ldrb	r0, [r3, #4]
 80061b0:	490d      	ldr	r1, [pc, #52]	; (80061e8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	1a9b      	subs	r3, r3, r2
 80061ba:	440b      	add	r3, r1
 80061bc:	3305      	adds	r3, #5
 80061be:	4602      	mov	r2, r0
 80061c0:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].IOMode           = Cfg->IOMode;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	7958      	ldrb	r0, [r3, #5]
 80061c6:	4908      	ldr	r1, [pc, #32]	; (80061e8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	4613      	mov	r3, r2
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	1a9b      	subs	r3, r3, r2
 80061d0:	440b      	add	r3, r1
 80061d2:	3306      	adds	r3, #6
 80061d4:	4602      	mov	r2, r0
 80061d6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80061d8:	68fb      	ldr	r3, [r7, #12]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20197c54 	.word	0x20197c54
 80061e8:	20000040 	.word	0x20000040

080061ec <HSPI_RAM_MspInit>:
  * @brief  Initializes the HSPI MSP.
  * @param  hhspi HSPI handle
  * @retval None
  */
static void HSPI_RAM_MspInit(XSPI_HandleTypeDef *hhspi)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b0a0      	sub	sp, #128	; 0x80
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdmatx, hdmarx;
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80061f4:	4bbe      	ldr	r3, [pc, #760]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80061f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061fa:	4abd      	ldr	r2, [pc, #756]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80061fc:	f043 0304 	orr.w	r3, r3, #4
 8006200:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006204:	4bba      	ldr	r3, [pc, #744]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8006212:	4bb8      	ldr	r3, [pc, #736]	; (80064f4 <HSPI_RAM_MspInit+0x308>)
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	4ab7      	ldr	r2, [pc, #732]	; (80064f4 <HSPI_RAM_MspInit+0x308>)
 8006218:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800621c:	6113      	str	r3, [r2, #16]

  /* Enable the HSPI memory interface, DMA and GPIO clocks */
  HSPI_CLK_ENABLE();
 800621e:	4bb4      	ldr	r3, [pc, #720]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006224:	4ab2      	ldr	r2, [pc, #712]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006226:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800622a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800622e:	4bb0      	ldr	r3, [pc, #704]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006238:	667b      	str	r3, [r7, #100]	; 0x64
 800623a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  HSPI_RAM_DMAx_CLK_ENABLE();
 800623c:	4bac      	ldr	r3, [pc, #688]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800623e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006242:	4aab      	ldr	r2, [pc, #684]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006244:	f043 0301 	orr.w	r3, r3, #1
 8006248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800624c:	4ba8      	ldr	r3, [pc, #672]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800624e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	663b      	str	r3, [r7, #96]	; 0x60
 8006258:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  HSPI_CLK_GPIO_CLK_ENABLE();
 800625a:	4ba5      	ldr	r3, [pc, #660]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800625c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006260:	4aa3      	ldr	r2, [pc, #652]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006266:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800626a:	4ba1      	ldr	r3, [pc, #644]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800626c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006274:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  HSPI_DQS0_GPIO_CLK_ENABLE();
 8006278:	4b9d      	ldr	r3, [pc, #628]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800627a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800627e:	4a9c      	ldr	r2, [pc, #624]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006284:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006288:	4b99      	ldr	r3, [pc, #612]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800628a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800628e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006292:	65bb      	str	r3, [r7, #88]	; 0x58
 8006294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  HSPI_DQS1_GPIO_CLK_ENABLE();
 8006296:	4b96      	ldr	r3, [pc, #600]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800629c:	4a94      	ldr	r2, [pc, #592]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800629e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062a6:	4b92      	ldr	r3, [pc, #584]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80062a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b0:	657b      	str	r3, [r7, #84]	; 0x54
 80062b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  HSPI_CS_GPIO_CLK_ENABLE();
 80062b4:	4b8e      	ldr	r3, [pc, #568]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80062b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ba:	4a8d      	ldr	r2, [pc, #564]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80062bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062c4:	4b8a      	ldr	r3, [pc, #552]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80062c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ce:	653b      	str	r3, [r7, #80]	; 0x50
 80062d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  HSPI_D0_GPIO_CLK_ENABLE();
 80062d2:	4b87      	ldr	r3, [pc, #540]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80062d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062d8:	4a85      	ldr	r2, [pc, #532]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80062da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062e2:	4b83      	ldr	r3, [pc, #524]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80062e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  HSPI_D1_GPIO_CLK_ENABLE();
 80062f0:	4b7f      	ldr	r3, [pc, #508]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80062f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062f6:	4a7e      	ldr	r2, [pc, #504]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80062f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006300:	4b7b      	ldr	r3, [pc, #492]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630a:	64bb      	str	r3, [r7, #72]	; 0x48
 800630c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  HSPI_D2_GPIO_CLK_ENABLE();
 800630e:	4b78      	ldr	r3, [pc, #480]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006314:	4a76      	ldr	r2, [pc, #472]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800631e:	4b74      	ldr	r3, [pc, #464]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006328:	647b      	str	r3, [r7, #68]	; 0x44
 800632a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  HSPI_D3_GPIO_CLK_ENABLE();
 800632c:	4b70      	ldr	r3, [pc, #448]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800632e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006332:	4a6f      	ldr	r2, [pc, #444]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006338:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800633c:	4b6c      	ldr	r3, [pc, #432]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800633e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006346:	643b      	str	r3, [r7, #64]	; 0x40
 8006348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  HSPI_D4_GPIO_CLK_ENABLE();
 800634a:	4b69      	ldr	r3, [pc, #420]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800634c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006350:	4a67      	ldr	r2, [pc, #412]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006356:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800635a:	4b65      	ldr	r3, [pc, #404]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800635c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006364:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  HSPI_D5_GPIO_CLK_ENABLE();
 8006368:	4b61      	ldr	r3, [pc, #388]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800636a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800636e:	4a60      	ldr	r2, [pc, #384]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006374:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006378:	4b5d      	ldr	r3, [pc, #372]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800637a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800637e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006382:	63bb      	str	r3, [r7, #56]	; 0x38
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  HSPI_D6_GPIO_CLK_ENABLE();
 8006386:	4b5a      	ldr	r3, [pc, #360]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800638c:	4a58      	ldr	r2, [pc, #352]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800638e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006392:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006396:	4b56      	ldr	r3, [pc, #344]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800639c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a0:	637b      	str	r3, [r7, #52]	; 0x34
 80063a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  HSPI_D7_GPIO_CLK_ENABLE();
 80063a4:	4b52      	ldr	r3, [pc, #328]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80063a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063aa:	4a51      	ldr	r2, [pc, #324]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80063ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80063b4:	4b4e      	ldr	r3, [pc, #312]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80063b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063be:	633b      	str	r3, [r7, #48]	; 0x30
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  HSPI_D8_GPIO_CLK_ENABLE();
 80063c2:	4b4b      	ldr	r3, [pc, #300]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80063c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063c8:	4a49      	ldr	r2, [pc, #292]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80063ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80063d2:	4b47      	ldr	r3, [pc, #284]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80063d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  HSPI_D9_GPIO_CLK_ENABLE();
 80063e0:	4b43      	ldr	r3, [pc, #268]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80063e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063e6:	4a42      	ldr	r2, [pc, #264]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80063e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80063f0:	4b3f      	ldr	r3, [pc, #252]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80063f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  HSPI_D10_GPIO_CLK_ENABLE();
 80063fe:	4b3c      	ldr	r3, [pc, #240]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006404:	4a3a      	ldr	r2, [pc, #232]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800640a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800640e:	4b38      	ldr	r3, [pc, #224]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  HSPI_D11_GPIO_CLK_ENABLE();
 800641c:	4b34      	ldr	r3, [pc, #208]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800641e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006422:	4a33      	ldr	r2, [pc, #204]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006428:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800642c:	4b30      	ldr	r3, [pc, #192]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800642e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006436:	623b      	str	r3, [r7, #32]
 8006438:	6a3b      	ldr	r3, [r7, #32]
  HSPI_D12_GPIO_CLK_ENABLE();
 800643a:	4b2d      	ldr	r3, [pc, #180]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800643c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006440:	4a2b      	ldr	r2, [pc, #172]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006446:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800644a:	4b29      	ldr	r3, [pc, #164]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800644c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006454:	61fb      	str	r3, [r7, #28]
 8006456:	69fb      	ldr	r3, [r7, #28]
  HSPI_D13_GPIO_CLK_ENABLE();
 8006458:	4b25      	ldr	r3, [pc, #148]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800645a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800645e:	4a24      	ldr	r2, [pc, #144]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006464:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006468:	4b21      	ldr	r3, [pc, #132]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800646a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800646e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006472:	61bb      	str	r3, [r7, #24]
 8006474:	69bb      	ldr	r3, [r7, #24]
  HSPI_D14_GPIO_CLK_ENABLE();
 8006476:	4b1e      	ldr	r3, [pc, #120]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800647c:	4a1c      	ldr	r2, [pc, #112]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800647e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006482:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006486:	4b1a      	ldr	r3, [pc, #104]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800648c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	697b      	ldr	r3, [r7, #20]
  HSPI_D15_GPIO_CLK_ENABLE();
 8006494:	4b16      	ldr	r3, [pc, #88]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 8006496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800649a:	4a15      	ldr	r2, [pc, #84]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 800649c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80064a4:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <HSPI_RAM_MspInit+0x304>)
 80064a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ae:	613b      	str	r3, [r7, #16]
 80064b0:	693b      	ldr	r3, [r7, #16]

  /*  Activate HSLV  */
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_CS_GPIO_PORT, HSPI_CS_PIN);
 80064b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064b6:	4810      	ldr	r0, [pc, #64]	; (80064f8 <HSPI_RAM_MspInit+0x30c>)
 80064b8:	f004 f910 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_DQS0_GPIO_PORT, HSPI_DQS0_PIN);
 80064bc:	2104      	movs	r1, #4
 80064be:	480f      	ldr	r0, [pc, #60]	; (80064fc <HSPI_RAM_MspInit+0x310>)
 80064c0:	f004 f90c 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_DQS1_GPIO_PORT, HSPI_DQS1_PIN);
 80064c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064c8:	480c      	ldr	r0, [pc, #48]	; (80064fc <HSPI_RAM_MspInit+0x310>)
 80064ca:	f004 f907 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_CLK_GPIO_PORT, HSPI_CLK_PIN);
 80064ce:	2108      	movs	r1, #8
 80064d0:	480a      	ldr	r0, [pc, #40]	; (80064fc <HSPI_RAM_MspInit+0x310>)
 80064d2:	f004 f903 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_NCLK_GPIO_PORT, HSPI_NCLK_PIN);
 80064d6:	2110      	movs	r1, #16
 80064d8:	4808      	ldr	r0, [pc, #32]	; (80064fc <HSPI_RAM_MspInit+0x310>)
 80064da:	f004 f8ff 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>

  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D0_GPIO_PORT, HSPI_D0_PIN);
 80064de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064e2:	4805      	ldr	r0, [pc, #20]	; (80064f8 <HSPI_RAM_MspInit+0x30c>)
 80064e4:	f004 f8fa 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D1_GPIO_PORT, HSPI_D1_PIN);
 80064e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064ec:	e008      	b.n	8006500 <HSPI_RAM_MspInit+0x314>
 80064ee:	bf00      	nop
 80064f0:	46020c00 	.word	0x46020c00
 80064f4:	46020800 	.word	0x46020800
 80064f8:	42021c00 	.word	0x42021c00
 80064fc:	42022000 	.word	0x42022000
 8006500:	48bf      	ldr	r0, [pc, #764]	; (8006800 <HSPI_RAM_MspInit+0x614>)
 8006502:	f004 f8eb 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D2_GPIO_PORT, HSPI_D2_PIN);
 8006506:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800650a:	48bd      	ldr	r0, [pc, #756]	; (8006800 <HSPI_RAM_MspInit+0x614>)
 800650c:	f004 f8e6 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D3_GPIO_PORT, HSPI_D3_PIN);
 8006510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006514:	48ba      	ldr	r0, [pc, #744]	; (8006800 <HSPI_RAM_MspInit+0x614>)
 8006516:	f004 f8e1 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D4_GPIO_PORT, HSPI_D4_PIN);
 800651a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800651e:	48b8      	ldr	r0, [pc, #736]	; (8006800 <HSPI_RAM_MspInit+0x614>)
 8006520:	f004 f8dc 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D5_GPIO_PORT, HSPI_D5_PIN);
 8006524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006528:	48b5      	ldr	r0, [pc, #724]	; (8006800 <HSPI_RAM_MspInit+0x614>)
 800652a:	f004 f8d7 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D6_GPIO_PORT, HSPI_D6_PIN);
 800652e:	2101      	movs	r1, #1
 8006530:	48b4      	ldr	r0, [pc, #720]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 8006532:	f004 f8d3 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D7_GPIO_PORT, HSPI_D7_PIN);
 8006536:	2102      	movs	r1, #2
 8006538:	48b2      	ldr	r0, [pc, #712]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 800653a:	f004 f8cf 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>

  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D8_GPIO_PORT, HSPI_D8_PIN);
 800653e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006542:	48b0      	ldr	r0, [pc, #704]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 8006544:	f004 f8ca 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D9_GPIO_PORT, HSPI_D9_PIN);
 8006548:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800654c:	48ad      	ldr	r0, [pc, #692]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 800654e:	f004 f8c5 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D10_GPIO_PORT, HSPI_D10_PIN);
 8006552:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006556:	48ab      	ldr	r0, [pc, #684]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 8006558:	f004 f8c0 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D11_GPIO_PORT, HSPI_D11_PIN);
 800655c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006560:	48a8      	ldr	r0, [pc, #672]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 8006562:	f004 f8bb 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D12_GPIO_PORT, HSPI_D12_PIN);
 8006566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800656a:	48a6      	ldr	r0, [pc, #664]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 800656c:	f004 f8b6 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D13_GPIO_PORT, HSPI_D13_PIN);
 8006570:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006574:	48a3      	ldr	r0, [pc, #652]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 8006576:	f004 f8b1 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D14_GPIO_PORT, HSPI_D14_PIN);
 800657a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800657e:	48a1      	ldr	r0, [pc, #644]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 8006580:	f004 f8ac 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D15_GPIO_PORT, HSPI_D15_PIN);
 8006584:	2101      	movs	r1, #1
 8006586:	48a0      	ldr	r0, [pc, #640]	; (8006808 <HSPI_RAM_MspInit+0x61c>)
 8006588:	f004 f8a8 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>

  /* Reset the HSPI memory interface */
  HSPI_FORCE_RESET();
 800658c:	4b9f      	ldr	r3, [pc, #636]	; (800680c <HSPI_RAM_MspInit+0x620>)
 800658e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006590:	4a9e      	ldr	r2, [pc, #632]	; (800680c <HSPI_RAM_MspInit+0x620>)
 8006592:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006596:	6693      	str	r3, [r2, #104]	; 0x68
  HSPI_RELEASE_RESET();
 8006598:	4b9c      	ldr	r3, [pc, #624]	; (800680c <HSPI_RAM_MspInit+0x620>)
 800659a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800659c:	4a9b      	ldr	r2, [pc, #620]	; (800680c <HSPI_RAM_MspInit+0x620>)
 800659e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065a2:	6693      	str	r3, [r2, #104]	; 0x68

  /* HSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_CS_PIN;
 80065a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80065aa:	2302      	movs	r3, #2
 80065ac:	673b      	str	r3, [r7, #112]	; 0x70
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	677b      	str	r3, [r7, #116]	; 0x74
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80065b2:	2302      	movs	r3, #2
 80065b4:	67bb      	str	r3, [r7, #120]	; 0x78
  GPIO_InitStruct.Alternate = HSPI_CS_PIN_AF;
 80065b6:	2308      	movs	r3, #8
 80065b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 80065ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80065be:	4619      	mov	r1, r3
 80065c0:	488f      	ldr	r0, [pc, #572]	; (8006800 <HSPI_RAM_MspInit+0x614>)
 80065c2:	f003 fd8b 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI DQS0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_DQS0_PIN;
 80065c6:	2304      	movs	r3, #4
 80065c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_DQS0_PIN_AF;
 80065ca:	2308      	movs	r3, #8
 80065cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_DQS0_GPIO_PORT, &GPIO_InitStruct);
 80065ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80065d2:	4619      	mov	r1, r3
 80065d4:	488b      	ldr	r0, [pc, #556]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 80065d6:	f003 fd81 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI DQS1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_DQS1_PIN;
 80065da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065de:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_DQS1_PIN_AF;
 80065e0:	2308      	movs	r3, #8
 80065e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_DQS1_GPIO_PORT, &GPIO_InitStruct);
 80065e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80065e8:	4619      	mov	r1, r3
 80065ea:	4886      	ldr	r0, [pc, #536]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 80065ec:	f003 fd76 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_CLK_PIN;
 80065f0:	2308      	movs	r3, #8
 80065f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_CLK_PIN_AF;
 80065f4:	2308      	movs	r3, #8
 80065f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 80065f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80065fc:	4619      	mov	r1, r3
 80065fe:	4881      	ldr	r0, [pc, #516]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 8006600:	f003 fd6c 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D0_PIN;
 8006604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006608:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D0_PIN_AF;
 800660a:	2308      	movs	r3, #8
 800660c:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800660e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006612:	4619      	mov	r1, r3
 8006614:	487a      	ldr	r0, [pc, #488]	; (8006800 <HSPI_RAM_MspInit+0x614>)
 8006616:	f003 fd61 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D1_PIN;
 800661a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800661e:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D1_PIN_AF;
 8006620:	2308      	movs	r3, #8
 8006622:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8006624:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006628:	4619      	mov	r1, r3
 800662a:	4875      	ldr	r0, [pc, #468]	; (8006800 <HSPI_RAM_MspInit+0x614>)
 800662c:	f003 fd56 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D2_PIN;
 8006630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006634:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D2_PIN_AF;
 8006636:	2308      	movs	r3, #8
 8006638:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 800663a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800663e:	4619      	mov	r1, r3
 8006640:	486f      	ldr	r0, [pc, #444]	; (8006800 <HSPI_RAM_MspInit+0x614>)
 8006642:	f003 fd4b 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D3_PIN;
 8006646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800664a:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D3_PIN_AF;
 800664c:	2308      	movs	r3, #8
 800664e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8006650:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006654:	4619      	mov	r1, r3
 8006656:	486a      	ldr	r0, [pc, #424]	; (8006800 <HSPI_RAM_MspInit+0x614>)
 8006658:	f003 fd40 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D4_PIN;
 800665c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006660:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D4_PIN_AF;
 8006662:	2308      	movs	r3, #8
 8006664:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8006666:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800666a:	4619      	mov	r1, r3
 800666c:	4864      	ldr	r0, [pc, #400]	; (8006800 <HSPI_RAM_MspInit+0x614>)
 800666e:	f003 fd35 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D5_PIN;
 8006672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006676:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D5_PIN_AF;
 8006678:	2308      	movs	r3, #8
 800667a:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 800667c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006680:	4619      	mov	r1, r3
 8006682:	485f      	ldr	r0, [pc, #380]	; (8006800 <HSPI_RAM_MspInit+0x614>)
 8006684:	f003 fd2a 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D6_PIN;
 8006688:	2301      	movs	r3, #1
 800668a:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D6_PIN_AF;
 800668c:	2308      	movs	r3, #8
 800668e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8006690:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006694:	4619      	mov	r1, r3
 8006696:	485b      	ldr	r0, [pc, #364]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 8006698:	f003 fd20 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D7_PIN;
 800669c:	2302      	movs	r3, #2
 800669e:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D7_PIN_AF;
 80066a0:	2308      	movs	r3, #8
 80066a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 80066a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80066a8:	4619      	mov	r1, r3
 80066aa:	4856      	ldr	r0, [pc, #344]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 80066ac:	f003 fd16 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI D8 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D8_PIN;
 80066b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D8_PIN_AF;
 80066b6:	2308      	movs	r3, #8
 80066b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D8_GPIO_PORT, &GPIO_InitStruct);
 80066ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80066be:	4619      	mov	r1, r3
 80066c0:	4850      	ldr	r0, [pc, #320]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 80066c2:	f003 fd0b 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI D9 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D9_PIN;
 80066c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D9_PIN_AF;
 80066cc:	2308      	movs	r3, #8
 80066ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D9_GPIO_PORT, &GPIO_InitStruct);
 80066d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80066d4:	4619      	mov	r1, r3
 80066d6:	484b      	ldr	r0, [pc, #300]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 80066d8:	f003 fd00 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI D10 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D10_PIN;
 80066dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80066e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D10_PIN_AF;
 80066e2:	2308      	movs	r3, #8
 80066e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D10_GPIO_PORT, &GPIO_InitStruct);
 80066e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80066ea:	4619      	mov	r1, r3
 80066ec:	4845      	ldr	r0, [pc, #276]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 80066ee:	f003 fcf5 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI D11 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D11_PIN;
 80066f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D11_PIN_AF;
 80066f8:	2308      	movs	r3, #8
 80066fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D11_GPIO_PORT, &GPIO_InitStruct);
 80066fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006700:	4619      	mov	r1, r3
 8006702:	4840      	ldr	r0, [pc, #256]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 8006704:	f003 fcea 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI D12 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D12_PIN;
 8006708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800670c:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D12_PIN_AF;
 800670e:	2308      	movs	r3, #8
 8006710:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D12_GPIO_PORT, &GPIO_InitStruct);
 8006712:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006716:	4619      	mov	r1, r3
 8006718:	483a      	ldr	r0, [pc, #232]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 800671a:	f003 fcdf 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI D13 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D13_PIN;
 800671e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006722:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D13_PIN_AF;
 8006724:	2308      	movs	r3, #8
 8006726:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D13_GPIO_PORT, &GPIO_InitStruct);
 8006728:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800672c:	4619      	mov	r1, r3
 800672e:	4835      	ldr	r0, [pc, #212]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 8006730:	f003 fcd4 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI D14 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D14_PIN;
 8006734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006738:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D14_PIN_AF;
 800673a:	2308      	movs	r3, #8
 800673c:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D14_GPIO_PORT, &GPIO_InitStruct);
 800673e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006742:	4619      	mov	r1, r3
 8006744:	482f      	ldr	r0, [pc, #188]	; (8006804 <HSPI_RAM_MspInit+0x618>)
 8006746:	f003 fcc9 	bl	800a0dc <HAL_GPIO_Init>

  /* HSPI D15 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D15_PIN;
 800674a:	2301      	movs	r3, #1
 800674c:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D15_PIN_AF;
 800674e:	2308      	movs	r3, #8
 8006750:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D15_GPIO_PORT, &GPIO_InitStruct);
 8006752:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006756:	4619      	mov	r1, r3
 8006758:	482b      	ldr	r0, [pc, #172]	; (8006808 <HSPI_RAM_MspInit+0x61c>)
 800675a:	f003 fcbf 	bl	800a0dc <HAL_GPIO_Init>

  hdmatx.Init.Request = GPDMA1_REQUEST_HSPI1;
 800675e:	4b2c      	ldr	r3, [pc, #176]	; (8006810 <HSPI_RAM_MspInit+0x624>)
 8006760:	2272      	movs	r2, #114	; 0x72
 8006762:	605a      	str	r2, [r3, #4]
  hdmatx.Instance = GPDMA1_Channel12;
 8006764:	4b2a      	ldr	r3, [pc, #168]	; (8006810 <HSPI_RAM_MspInit+0x624>)
 8006766:	4a2b      	ldr	r2, [pc, #172]	; (8006814 <HSPI_RAM_MspInit+0x628>)
 8006768:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0x00, 0);
 800676a:	2200      	movs	r2, #0
 800676c:	2100      	movs	r1, #0
 800676e:	2054      	movs	r0, #84	; 0x54
 8006770:	f001 fb0c 	bl	8007d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 8006774:	2054      	movs	r0, #84	; 0x54
 8006776:	f001 fb23 	bl	8007dc0 <HAL_NVIC_EnableIRQ>

  /* Configure the HSPI DMA transmit */
  hdmatx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800677a:	4b25      	ldr	r3, [pc, #148]	; (8006810 <HSPI_RAM_MspInit+0x624>)
 800677c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006780:	60da      	str	r2, [r3, #12]
  hdmatx.Init.SrcInc              = DMA_SINC_INCREMENTED;
 8006782:	4b23      	ldr	r3, [pc, #140]	; (8006810 <HSPI_RAM_MspInit+0x624>)
 8006784:	2208      	movs	r2, #8
 8006786:	611a      	str	r2, [r3, #16]
  hdmatx.Init.DestInc             = DMA_DINC_FIXED;
 8006788:	4b21      	ldr	r3, [pc, #132]	; (8006810 <HSPI_RAM_MspInit+0x624>)
 800678a:	2200      	movs	r2, #0
 800678c:	615a      	str	r2, [r3, #20]
  hdmatx.Init.Priority            = DMA_HIGH_PRIORITY;
 800678e:	4b20      	ldr	r3, [pc, #128]	; (8006810 <HSPI_RAM_MspInit+0x624>)
 8006790:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006794:	621a      	str	r2, [r3, #32]
  hdmatx.Init.SrcBurstLength      = 1;
 8006796:	4b1e      	ldr	r3, [pc, #120]	; (8006810 <HSPI_RAM_MspInit+0x624>)
 8006798:	2201      	movs	r2, #1
 800679a:	625a      	str	r2, [r3, #36]	; 0x24
  hdmatx.Init.DestBurstLength     = 1;
 800679c:	4b1c      	ldr	r3, [pc, #112]	; (8006810 <HSPI_RAM_MspInit+0x624>)
 800679e:	2201      	movs	r2, #1
 80067a0:	629a      	str	r2, [r3, #40]	; 0x28
  hdmatx.Init.TransferEventMode   = DMA_TCEM_BLOCK_TRANSFER;
 80067a2:	4b1b      	ldr	r3, [pc, #108]	; (8006810 <HSPI_RAM_MspInit+0x624>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	631a      	str	r2, [r3, #48]	; 0x30
  hdmatx.Init.SrcDataWidth        = DMA_SRC_DATAWIDTH_WORD ;
 80067a8:	4b19      	ldr	r3, [pc, #100]	; (8006810 <HSPI_RAM_MspInit+0x624>)
 80067aa:	2202      	movs	r2, #2
 80067ac:	619a      	str	r2, [r3, #24]
  hdmatx.Init.DestDataWidth       = DMA_DEST_DATAWIDTH_WORD  ;
 80067ae:	4b18      	ldr	r3, [pc, #96]	; (8006810 <HSPI_RAM_MspInit+0x624>)
 80067b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80067b4:	61da      	str	r2, [r3, #28]

  /* Enable the GPDMA clock */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80067b6:	4b15      	ldr	r3, [pc, #84]	; (800680c <HSPI_RAM_MspInit+0x620>)
 80067b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067bc:	4a13      	ldr	r2, [pc, #76]	; (800680c <HSPI_RAM_MspInit+0x620>)
 80067be:	f043 0301 	orr.w	r3, r3, #1
 80067c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80067c6:	4b11      	ldr	r3, [pc, #68]	; (800680c <HSPI_RAM_MspInit+0x620>)
 80067c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	68fb      	ldr	r3, [r7, #12]

  /* Initialize the DMA channel */
  __HAL_LINKDMA(hhspi, hdmatx, hdmatx);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a0e      	ldr	r2, [pc, #56]	; (8006810 <HSPI_RAM_MspInit+0x624>)
 80067d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80067da:	4a0d      	ldr	r2, [pc, #52]	; (8006810 <HSPI_RAM_MspInit+0x624>)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_DMA_Init(&hdmatx);
 80067e0:	480b      	ldr	r0, [pc, #44]	; (8006810 <HSPI_RAM_MspInit+0x624>)
 80067e2:	f001 fcf1 	bl	80081c8 <HAL_DMA_Init>

  hdmarx.Init.Request = GPDMA1_REQUEST_HSPI1;
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <HSPI_RAM_MspInit+0x62c>)
 80067e8:	2272      	movs	r2, #114	; 0x72
 80067ea:	605a      	str	r2, [r3, #4]
  hdmarx.Instance = GPDMA1_Channel7;
 80067ec:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <HSPI_RAM_MspInit+0x62c>)
 80067ee:	4a0b      	ldr	r2, [pc, #44]	; (800681c <HSPI_RAM_MspInit+0x630>)
 80067f0:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(GPDMA1_Channel7_IRQn, 0x00, 0);
 80067f2:	2200      	movs	r2, #0
 80067f4:	2100      	movs	r1, #0
 80067f6:	2024      	movs	r0, #36	; 0x24
 80067f8:	f001 fac8 	bl	8007d8c <HAL_NVIC_SetPriority>
 80067fc:	e010      	b.n	8006820 <HSPI_RAM_MspInit+0x634>
 80067fe:	bf00      	nop
 8006800:	42021c00 	.word	0x42021c00
 8006804:	42022000 	.word	0x42022000
 8006808:	42022400 	.word	0x42022400
 800680c:	46020c00 	.word	0x46020c00
 8006810:	20197cb4 	.word	0x20197cb4
 8006814:	40020650 	.word	0x40020650
 8006818:	20197d2c 	.word	0x20197d2c
 800681c:	400203d0 	.word	0x400203d0
  HAL_NVIC_EnableIRQ(GPDMA1_Channel7_IRQn);
 8006820:	2024      	movs	r0, #36	; 0x24
 8006822:	f001 facd 	bl	8007dc0 <HAL_NVIC_EnableIRQ>

  /* Configure the HSPI DMA receive */
  hdmarx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006826:	4b25      	ldr	r3, [pc, #148]	; (80068bc <HSPI_RAM_MspInit+0x6d0>)
 8006828:	2200      	movs	r2, #0
 800682a:	60da      	str	r2, [r3, #12]
  hdmarx.Init.SrcInc              = DMA_SINC_FIXED;
 800682c:	4b23      	ldr	r3, [pc, #140]	; (80068bc <HSPI_RAM_MspInit+0x6d0>)
 800682e:	2200      	movs	r2, #0
 8006830:	611a      	str	r2, [r3, #16]
  hdmarx.Init.DestInc             = DMA_DINC_INCREMENTED;
 8006832:	4b22      	ldr	r3, [pc, #136]	; (80068bc <HSPI_RAM_MspInit+0x6d0>)
 8006834:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006838:	615a      	str	r2, [r3, #20]
  hdmarx.Init.Priority            = DMA_HIGH_PRIORITY;
 800683a:	4b20      	ldr	r3, [pc, #128]	; (80068bc <HSPI_RAM_MspInit+0x6d0>)
 800683c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006840:	621a      	str	r2, [r3, #32]
  hdmarx.Init.SrcBurstLength      = 1;
 8006842:	4b1e      	ldr	r3, [pc, #120]	; (80068bc <HSPI_RAM_MspInit+0x6d0>)
 8006844:	2201      	movs	r2, #1
 8006846:	625a      	str	r2, [r3, #36]	; 0x24
  hdmarx.Init.DestBurstLength     = 1;
 8006848:	4b1c      	ldr	r3, [pc, #112]	; (80068bc <HSPI_RAM_MspInit+0x6d0>)
 800684a:	2201      	movs	r2, #1
 800684c:	629a      	str	r2, [r3, #40]	; 0x28
  hdmarx.Init.TransferEventMode   = DMA_TCEM_BLOCK_TRANSFER;
 800684e:	4b1b      	ldr	r3, [pc, #108]	; (80068bc <HSPI_RAM_MspInit+0x6d0>)
 8006850:	2200      	movs	r2, #0
 8006852:	631a      	str	r2, [r3, #48]	; 0x30
  hdmarx.Init.SrcDataWidth        = DMA_SRC_DATAWIDTH_WORD ;
 8006854:	4b19      	ldr	r3, [pc, #100]	; (80068bc <HSPI_RAM_MspInit+0x6d0>)
 8006856:	2202      	movs	r2, #2
 8006858:	619a      	str	r2, [r3, #24]
  hdmarx.Init.DestDataWidth       = DMA_DEST_DATAWIDTH_WORD  ;
 800685a:	4b18      	ldr	r3, [pc, #96]	; (80068bc <HSPI_RAM_MspInit+0x6d0>)
 800685c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006860:	61da      	str	r2, [r3, #28]

  /* Enable the GPDMA clock */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8006862:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <HSPI_RAM_MspInit+0x6d4>)
 8006864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006868:	4a15      	ldr	r2, [pc, #84]	; (80068c0 <HSPI_RAM_MspInit+0x6d4>)
 800686a:	f043 0301 	orr.w	r3, r3, #1
 800686e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8006872:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <HSPI_RAM_MspInit+0x6d4>)
 8006874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	60bb      	str	r3, [r7, #8]
 800687e:	68bb      	ldr	r3, [r7, #8]

  /* Initialize the DMA channel */
  __HAL_LINKDMA(hhspi, hdmarx, hdmarx);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a0e      	ldr	r2, [pc, #56]	; (80068bc <HSPI_RAM_MspInit+0x6d0>)
 8006884:	651a      	str	r2, [r3, #80]	; 0x50
 8006886:	4a0d      	ldr	r2, [pc, #52]	; (80068bc <HSPI_RAM_MspInit+0x6d0>)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_DMA_Init(&hdmarx);
 800688c:	480b      	ldr	r0, [pc, #44]	; (80068bc <HSPI_RAM_MspInit+0x6d0>)
 800688e:	f001 fc9b 	bl	80081c8 <HAL_DMA_Init>

  /* Enable and set priority of the HSPI and DMA interrupts */
  HAL_NVIC_SetPriority(HSPI1_IRQn, BSP_HSPI_RAM_IT_PRIORITY, 0);
 8006892:	2200      	movs	r2, #0
 8006894:	210f      	movs	r1, #15
 8006896:	2083      	movs	r0, #131	; 0x83
 8006898:	f001 fa78 	bl	8007d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(HSPI_RAM_DMAx_IRQn, BSP_HSPI_RAM_DMA_IT_PRIORITY, 0);
 800689c:	2200      	movs	r2, #0
 800689e:	210f      	movs	r1, #15
 80068a0:	201f      	movs	r0, #31
 80068a2:	f001 fa73 	bl	8007d8c <HAL_NVIC_SetPriority>

  HAL_NVIC_EnableIRQ(HSPI1_IRQn);
 80068a6:	2083      	movs	r0, #131	; 0x83
 80068a8:	f001 fa8a 	bl	8007dc0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(HSPI_RAM_DMAx_IRQn);
 80068ac:	201f      	movs	r0, #31
 80068ae:	f001 fa87 	bl	8007dc0 <HAL_NVIC_EnableIRQ>
}
 80068b2:	bf00      	nop
 80068b4:	3780      	adds	r7, #128	; 0x80
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	20197d2c 	.word	0x20197d2c
 80068c0:	46020c00 	.word	0x46020c00

080068c4 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 80068c4:	b590      	push	{r4, r7, lr}
 80068c6:	b095      	sub	sp, #84	; 0x54
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_InitTypeDef ospi_init;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <BSP_OSPI_NOR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80068d4:	f06f 0301 	mvn.w	r3, #1
 80068d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068da:	e095      	b.n	8006a08 <BSP_OSPI_NOR_Init+0x144>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 80068dc:	494d      	ldr	r1, [pc, #308]	; (8006a14 <BSP_OSPI_NOR_Init+0x150>)
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	4613      	mov	r3, r2
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	4413      	add	r3, r2
 80068e6:	440b      	add	r3, r1
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f040 808a 	bne.w	8006a04 <BSP_OSPI_NOR_Init+0x140>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	4413      	add	r3, r2
 80068f8:	015b      	lsls	r3, r3, #5
 80068fa:	4a47      	ldr	r2, [pc, #284]	; (8006a18 <BSP_OSPI_NOR_Init+0x154>)
 80068fc:	4413      	add	r3, r2
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fa26 	bl	8006d50 <OSPI_NOR_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Get Flash information of one memory */
      (void)MX25UM51245G_GetFlashInfo(&pInfo);
 8006904:	f107 031c 	add.w	r3, r7, #28
 8006908:	4618      	mov	r0, r3
 800690a:	f7fd fd52 	bl	80043b2 <MX25UM51245G_GetFlashInfo>

      /* Fill config structure */
      ospi_init.ClockPrescaler = 1;
 800690e:	2301      	movs	r3, #1
 8006910:	613b      	str	r3, [r7, #16]
      ospi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006918:	fa93 f3a3 	rbit	r3, r3
 800691c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800691e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006920:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <BSP_OSPI_NOR_Init+0x68>
    return 32U;
 8006928:	2320      	movs	r3, #32
 800692a:	e003      	b.n	8006934 <BSP_OSPI_NOR_Init+0x70>
  return __builtin_clz(value);
 800692c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800692e:	fab3 f383 	clz	r3, r3
 8006932:	b2db      	uxtb	r3, r3
 8006934:	60fb      	str	r3, [r7, #12]
      ospi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8006936:	2300      	movs	r3, #0
 8006938:	617b      	str	r3, [r7, #20]
      ospi_init.TransferRate   = (uint32_t) Init->TransferRate;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	785b      	ldrb	r3, [r3, #1]
 800693e:	61bb      	str	r3, [r7, #24]

      /* STM32 OSPI interface initialization */
      if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_init) != HAL_OK)
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	4613      	mov	r3, r2
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	4413      	add	r3, r2
 8006948:	015b      	lsls	r3, r3, #5
 800694a:	4a33      	ldr	r2, [pc, #204]	; (8006a18 <BSP_OSPI_NOR_Init+0x154>)
 800694c:	4413      	add	r3, r2
 800694e:	f107 020c 	add.w	r2, r7, #12
 8006952:	4611      	mov	r1, r2
 8006954:	4618      	mov	r0, r3
 8006956:	f000 f861 	bl	8006a1c <MX_OSPI_NOR_Init>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <BSP_OSPI_NOR_Init+0xa4>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006960:	f06f 0303 	mvn.w	r3, #3
 8006964:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006966:	e04f      	b.n	8006a08 <BSP_OSPI_NOR_Init+0x144>
      }
      /* OSPI Delay Block enable */
      else if (OSPI_DLYB_Enable(&hospi_nor[Instance]) != BSP_ERROR_NONE)
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	4613      	mov	r3, r2
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	4413      	add	r3, r2
 8006970:	015b      	lsls	r3, r3, #5
 8006972:	4a29      	ldr	r2, [pc, #164]	; (8006a18 <BSP_OSPI_NOR_Init+0x154>)
 8006974:	4413      	add	r3, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f000 f9a0 	bl	8006cbc <OSPI_DLYB_Enable>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <BSP_OSPI_NOR_Init+0xc6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006982:	f06f 0304 	mvn.w	r3, #4
 8006986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006988:	e03e      	b.n	8006a08 <BSP_OSPI_NOR_Init+0x144>
      }
      /* OSPI memory reset */
      else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fb72 	bl	8007074 <OSPI_NOR_ResetMemory>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <BSP_OSPI_NOR_Init+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006996:	f06f 0304 	mvn.w	r3, #4
 800699a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800699c:	e034      	b.n	8006a08 <BSP_OSPI_NOR_Init+0x144>
      }
      /* Check if memory is ready */
      else if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	4613      	mov	r3, r2
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	4413      	add	r3, r2
 80069a6:	015b      	lsls	r3, r3, #5
 80069a8:	4a1b      	ldr	r2, [pc, #108]	; (8006a18 <BSP_OSPI_NOR_Init+0x154>)
 80069aa:	1898      	adds	r0, r3, r2
 80069ac:	4919      	ldr	r1, [pc, #100]	; (8006a14 <BSP_OSPI_NOR_Init+0x150>)
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	4613      	mov	r3, r2
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	4413      	add	r3, r2
 80069b6:	440b      	add	r3, r1
 80069b8:	3301      	adds	r3, #1
 80069ba:	7819      	ldrb	r1, [r3, #0]
 80069bc:	4c15      	ldr	r4, [pc, #84]	; (8006a14 <BSP_OSPI_NOR_Init+0x150>)
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	4613      	mov	r3, r2
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	4413      	add	r3, r2
 80069c6:	4423      	add	r3, r4
 80069c8:	3302      	adds	r3, #2
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	f7fd fd1f 	bl	8004410 <MX25UM51245G_AutoPollingMemReady>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <BSP_OSPI_NOR_Init+0x11c>
                                                Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80069d8:	f06f 0304 	mvn.w	r3, #4
 80069dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069de:	e013      	b.n	8006a08 <BSP_OSPI_NOR_Init+0x144>
      }
      /* Configure the memory */
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	7819      	ldrb	r1, [r3, #0]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	785b      	ldrb	r3, [r3, #1]
 80069e8:	461a      	mov	r2, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f8da 	bl	8006ba4 <BSP_OSPI_NOR_ConfigFlash>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <BSP_OSPI_NOR_Init+0x13a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80069f6:	f06f 0304 	mvn.w	r3, #4
 80069fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069fc:	e004      	b.n	8006a08 <BSP_OSPI_NOR_Init+0x144>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80069fe:	2300      	movs	r3, #0
 8006a00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a02:	e001      	b.n	8006a08 <BSP_OSPI_NOR_Init+0x144>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8006a04:	2300      	movs	r3, #0
 8006a06:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  /* Return BSP status */
  return ret;
 8006a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3754      	adds	r7, #84	; 0x54
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd90      	pop	{r4, r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20197e04 	.word	0x20197e04
 8006a18:	20197da4 	.word	0x20197da4

08006a1c <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Init           OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(XSPI_HandleTypeDef *hospi, MX_OSPI_InitTypeDef *Init)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a20      	ldr	r2, [pc, #128]	; (8006aac <MX_OSPI_NOR_Init+0x90>)
 8006a2a:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThresholdByte       = 4;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2204      	movs	r2, #4
 8006a30:	605a      	str	r2, [r3, #4]
  hospi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	609a      	str	r2, [r3, #8]
  hospi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTimeCycle = 2;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler          = Init->ClockPrescaler;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting          = Init->SampleShifting;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary      = 0;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass        = HAL_XSPI_DELAY_BLOCK_ON;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	635a      	str	r2, [r3, #52]	; 0x34

  if (Init->TransferRate == (uint32_t) BSP_OSPI_NOR_DTR_TRANSFER)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d108      	bne.n	8006a8e <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a82:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8006a8c:	e005      	b.n	8006a9a <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_XSPI_Init(hospi);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f00c fb8a 	bl	80131b4 <HAL_XSPI_Init>
 8006aa0:	4603      	mov	r3, r0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	420d1400 	.word	0x420d1400

08006ab0 <BSP_OSPI_NOR_GetInfo>:
  * @param  Instance  OSPI instance
  * @param  pInfo     pointer on the configuration structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_GetInfo(uint32_t Instance, BSP_OSPI_NOR_Info_t *pInfo)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <BSP_OSPI_NOR_GetInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006ac4:	f06f 0301 	mvn.w	r3, #1
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	e002      	b.n	8006ad2 <BSP_OSPI_NOR_GetInfo+0x22>
  }
  else
  {
    (void)MX25UM51245G_GetFlashInfo(pInfo);
 8006acc:	6838      	ldr	r0, [r7, #0]
 8006ace:	f7fd fc70 	bl	80043b2 <MX25UM51245G_GetFlashInfo>
  }

  /* Return BSP status */
  return ret;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006aee:	f06f 0301 	mvn.w	r3, #1
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	e04d      	b.n	8006b92 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
  }
  else
  {
    if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8006af6:	4929      	ldr	r1, [pc, #164]	; (8006b9c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	4613      	mov	r3, r2
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	4413      	add	r3, r2
 8006b00:	440b      	add	r3, r1
 8006b02:	3302      	adds	r3, #2
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d122      	bne.n	8006b50 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x74>
    {
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	4413      	add	r3, r2
 8006b12:	015b      	lsls	r3, r3, #5
 8006b14:	4a22      	ldr	r2, [pc, #136]	; (8006ba0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc4>)
 8006b16:	1898      	adds	r0, r3, r2
 8006b18:	4920      	ldr	r1, [pc, #128]	; (8006b9c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	4413      	add	r3, r2
 8006b22:	440b      	add	r3, r1
 8006b24:	3301      	adds	r3, #1
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	f7fd fd22 	bl	8004574 <MX25UM51245G_EnableSTRMemoryMappedMode>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x62>
                                                 MX25UM51245G_4BYTES_SIZE) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b36:	f06f 0304 	mvn.w	r3, #4
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	e029      	b.n	8006b92 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8006b3e:	4917      	ldr	r1, [pc, #92]	; (8006b9c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	4613      	mov	r3, r2
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	4413      	add	r3, r2
 8006b48:	440b      	add	r3, r1
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	701a      	strb	r2, [r3, #0]
 8006b4e:	e020      	b.n	8006b92 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
    }
    else
    {
      if (MX25UM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance],
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	4613      	mov	r3, r2
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	4413      	add	r3, r2
 8006b58:	015b      	lsls	r3, r3, #5
 8006b5a:	4a11      	ldr	r2, [pc, #68]	; (8006ba0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc4>)
 8006b5c:	1898      	adds	r0, r3, r2
 8006b5e:	490f      	ldr	r1, [pc, #60]	; (8006b9c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	4613      	mov	r3, r2
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	4413      	add	r3, r2
 8006b68:	440b      	add	r3, r1
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	4619      	mov	r1, r3
 8006b70:	f7fd fdaa 	bl	80046c8 <MX25UM51245G_EnableDTRMemoryMappedMode>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa6>
                                                 Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b7a:	f06f 0304 	mvn.w	r3, #4
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	e007      	b.n	8006b92 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8006b82:	4906      	ldr	r1, [pc, #24]	; (8006b9c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	4413      	add	r3, r2
 8006b8c:	440b      	add	r3, r1
 8006b8e:	2202      	movs	r2, #2
 8006b90:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006b92:	68fb      	ldr	r3, [r7, #12]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	20197e04 	.word	0x20197e04
 8006ba0:	20197da4 	.word	0x20197da4

08006ba4 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	70fb      	strb	r3, [r7, #3]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006bbe:	f06f 0301 	mvn.w	r3, #1
 8006bc2:	60fb      	str	r3, [r7, #12]
 8006bc4:	e072      	b.n	8006cac <BSP_OSPI_NOR_ConfigFlash+0x108>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8006bc6:	493c      	ldr	r1, [pc, #240]	; (8006cb8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	4413      	add	r3, r2
 8006bd0:	440b      	add	r3, r1
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d103      	bne.n	8006be0 <BSP_OSPI_NOR_ConfigFlash+0x3c>
    {
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8006bd8:	f06f 0315 	mvn.w	r3, #21
 8006bdc:	60fb      	str	r3, [r7, #12]
 8006bde:	e065      	b.n	8006cac <BSP_OSPI_NOR_ConfigFlash+0x108>
    }
    else
    {
      /* Setup Flash interface ***************************************************/
      switch (Ospi_Nor_Ctx[Instance].InterfaceMode)
 8006be0:	4935      	ldr	r1, [pc, #212]	; (8006cb8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	4613      	mov	r3, r2
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	4413      	add	r3, r2
 8006bea:	440b      	add	r3, r1
 8006bec:	3301      	adds	r3, #1
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d12b      	bne.n	8006c4c <BSP_OSPI_NOR_ConfigFlash+0xa8>
      {
        case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
          if ((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d10a      	bne.n	8006c10 <BSP_OSPI_NOR_ConfigFlash+0x6c>
 8006bfa:	492f      	ldr	r1, [pc, #188]	; (8006cb8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	4413      	add	r3, r2
 8006c04:	440b      	add	r3, r1
 8006c06:	3302      	adds	r3, #2
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	78ba      	ldrb	r2, [r7, #2]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d02d      	beq.n	8006c6c <BSP_OSPI_NOR_ConfigFlash+0xc8>
          {
            /* Exit OPI mode */
            ret = OSPI_NOR_ExitOPIMode(Instance);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fca1 	bl	8007558 <OSPI_NOR_ExitOPIMode>
 8006c16:	60f8      	str	r0, [r7, #12]

            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d126      	bne.n	8006c6c <BSP_OSPI_NOR_ConfigFlash+0xc8>
 8006c1e:	78fb      	ldrb	r3, [r7, #3]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d123      	bne.n	8006c6c <BSP_OSPI_NOR_ConfigFlash+0xc8>
            {

              if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8006c24:	4924      	ldr	r1, [pc, #144]	; (8006cb8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	4413      	add	r3, r2
 8006c2e:	440b      	add	r3, r1
 8006c30:	3302      	adds	r3, #2
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d104      	bne.n	8006c42 <BSP_OSPI_NOR_ConfigFlash+0x9e>
              {
                /* Enter DTR OPI mode */
                ret = OSPI_NOR_EnterDOPIMode(Instance);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fac1 	bl	80071c0 <OSPI_NOR_EnterDOPIMode>
 8006c3e:	60f8      	str	r0, [r7, #12]
                /* Enter STR OPI mode */
                ret = OSPI_NOR_EnterSOPIMode(Instance);
              }
            }
          }
          break;
 8006c40:	e014      	b.n	8006c6c <BSP_OSPI_NOR_ConfigFlash+0xc8>
                ret = OSPI_NOR_EnterSOPIMode(Instance);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fbb6 	bl	80073b4 <OSPI_NOR_EnterSOPIMode>
 8006c48:	60f8      	str	r0, [r7, #12]
          break;
 8006c4a:	e00f      	b.n	8006c6c <BSP_OSPI_NOR_ConfigFlash+0xc8>

        case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
        default :
          if (Mode == BSP_OSPI_NOR_OPI_MODE)
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d10e      	bne.n	8006c70 <BSP_OSPI_NOR_ConfigFlash+0xcc>
          {
            if (Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8006c52:	78bb      	ldrb	r3, [r7, #2]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d104      	bne.n	8006c62 <BSP_OSPI_NOR_ConfigFlash+0xbe>
            {
              /* Enter STR OPI mode */
              ret = OSPI_NOR_EnterSOPIMode(Instance);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fbab 	bl	80073b4 <OSPI_NOR_EnterSOPIMode>
 8006c5e:	60f8      	str	r0, [r7, #12]
            {
              /* Enter DTR OPI mode */
              ret = OSPI_NOR_EnterDOPIMode(Instance);
            }
          }
          break;
 8006c60:	e006      	b.n	8006c70 <BSP_OSPI_NOR_ConfigFlash+0xcc>
              ret = OSPI_NOR_EnterDOPIMode(Instance);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 faac 	bl	80071c0 <OSPI_NOR_EnterDOPIMode>
 8006c68:	60f8      	str	r0, [r7, #12]
          break;
 8006c6a:	e001      	b.n	8006c70 <BSP_OSPI_NOR_ConfigFlash+0xcc>
          break;
 8006c6c:	bf00      	nop
 8006c6e:	e000      	b.n	8006c72 <BSP_OSPI_NOR_ConfigFlash+0xce>
          break;
 8006c70:	bf00      	nop
      }

      /* Update OSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d119      	bne.n	8006cac <BSP_OSPI_NOR_ConfigFlash+0x108>
      {
        /* Update current status parameter *****************************************/
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8006c78:	490f      	ldr	r1, [pc, #60]	; (8006cb8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	005b      	lsls	r3, r3, #1
 8006c80:	4413      	add	r3, r2
 8006c82:	440b      	add	r3, r1
 8006c84:	2201      	movs	r2, #1
 8006c86:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8006c88:	490b      	ldr	r1, [pc, #44]	; (8006cb8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	4413      	add	r3, r2
 8006c92:	440b      	add	r3, r1
 8006c94:	3301      	adds	r3, #1
 8006c96:	78fa      	ldrb	r2, [r7, #3]
 8006c98:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8006c9a:	4907      	ldr	r1, [pc, #28]	; (8006cb8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	4413      	add	r3, r2
 8006ca4:	440b      	add	r3, r1
 8006ca6:	3302      	adds	r3, #2
 8006ca8:	78ba      	ldrb	r2, [r7, #2]
 8006caa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006cac:	68fb      	ldr	r3, [r7, #12]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20197e04 	.word	0x20197e04

08006cbc <OSPI_DLYB_Enable>:
  * @brief  This function enables delay block.
  * @param  hospi OSPI handle
  * @retval BSP status
  */
static int32_t OSPI_DLYB_Enable(XSPI_HandleTypeDef *hospi)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  LL_DLYB_CfgTypeDef dlyb_cfg, dlyb_cfg_test;
  int32_t ret = BSP_ERROR_NONE;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	61fb      	str	r3, [r7, #28]
  uint32_t div_value = 4;
 8006cc8:	2304      	movs	r3, #4
 8006cca:	61bb      	str	r3, [r7, #24]

  /* Delay block configuration ------------------------------------------------ */
  if (HAL_XSPI_DLYB_GetClockPeriod(hospi, &dlyb_cfg) != HAL_OK)
 8006ccc:	f107 0310 	add.w	r3, r7, #16
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f00c ffcc 	bl	8013c70 <HAL_XSPI_DLYB_GetClockPeriod>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <OSPI_DLYB_Enable+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8006cde:	f06f 0303 	mvn.w	r3, #3
 8006ce2:	61fb      	str	r3, [r7, #28]
  }

  /* PhaseSel is divided by 4 (emperic value)*/
  dlyb_cfg.PhaseSel /= div_value;
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cec:	617b      	str	r3, [r7, #20]

  /* save the present configuration for check*/
  dlyb_cfg_test = dlyb_cfg;
 8006cee:	f107 0308 	add.w	r3, r7, #8
 8006cf2:	f107 0210 	add.w	r2, r7, #16
 8006cf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cfa:	e883 0003 	stmia.w	r3, {r0, r1}

  /*set delay block configuration*/
  if (HAL_XSPI_DLYB_SetConfig(hospi, &dlyb_cfg) != HAL_OK)
 8006cfe:	f107 0310 	add.w	r3, r7, #16
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f00c ff33 	bl	8013b70 <HAL_XSPI_DLYB_SetConfig>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <OSPI_DLYB_Enable+0x5a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8006d10:	f06f 0303 	mvn.w	r3, #3
 8006d14:	61fb      	str	r3, [r7, #28]
  }

  /*check the set value*/
  if (HAL_XSPI_DLYB_GetConfig(hospi, &dlyb_cfg) != HAL_OK)
 8006d16:	f107 0310 	add.w	r3, r7, #16
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f00c ff75 	bl	8013c0c <HAL_XSPI_DLYB_GetConfig>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d002      	beq.n	8006d2e <OSPI_DLYB_Enable+0x72>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8006d28:	f06f 0303 	mvn.w	r3, #3
 8006d2c:	61fb      	str	r3, [r7, #28]
  }

  if ((dlyb_cfg.PhaseSel != dlyb_cfg_test.PhaseSel) || (dlyb_cfg.Units != dlyb_cfg_test.Units))
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d103      	bne.n	8006d3e <OSPI_DLYB_Enable+0x82>
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d002      	beq.n	8006d44 <OSPI_DLYB_Enable+0x88>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8006d3e:	f06f 0303 	mvn.w	r3, #3
 8006d42:	61fb      	str	r3, [r7, #28]
  }

  /* Return BSP status */
  return ret;
 8006d44:	69fb      	ldr	r3, [r7, #28]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3720      	adds	r7, #32
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
	...

08006d50 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(XSPI_HandleTypeDef *hospi)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b094      	sub	sp, #80	; 0x50
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 8006d58:	4bc1      	ldr	r3, [pc, #772]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5e:	4ac0      	ldr	r2, [pc, #768]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006d60:	f043 0310 	orr.w	r3, r3, #16
 8006d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d68:	4bbd      	ldr	r3, [pc, #756]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6e:	f003 0310 	and.w	r3, r3, #16
 8006d72:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  __HAL_RCC_PWR_CLK_ENABLE();
 8006d76:	4bba      	ldr	r3, [pc, #744]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d7c:	4ab8      	ldr	r2, [pc, #736]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006d7e:	f043 0304 	orr.w	r3, r3, #4
 8006d82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006d86:	4bb6      	ldr	r3, [pc, #728]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	637b      	str	r3, [r7, #52]	; 0x34
 8006d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  /* Enable VDDIO2 supply */
  HAL_PWREx_EnableVddIO2();
 8006d94:	f005 fb4e 	bl	800c434 <HAL_PWREx_EnableVddIO2>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8006d98:	4bb1      	ldr	r3, [pc, #708]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d9c:	4ab0      	ldr	r2, [pc, #704]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006d9e:	f043 0310 	orr.w	r3, r3, #16
 8006da2:	6693      	str	r3, [r2, #104]	; 0x68
  OSPI_RELEASE_RESET();
 8006da4:	4bae      	ldr	r3, [pc, #696]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006da8:	4aad      	ldr	r2, [pc, #692]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006daa:	f023 0310 	bic.w	r3, r3, #16
 8006dae:	6693      	str	r3, [r2, #104]	; 0x68

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8006db0:	4bab      	ldr	r3, [pc, #684]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db6:	4aaa      	ldr	r2, [pc, #680]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006db8:	f043 0320 	orr.w	r3, r3, #32
 8006dbc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006dc0:	4ba7      	ldr	r3, [pc, #668]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dc6:	f003 0320 	and.w	r3, r3, #32
 8006dca:	633b      	str	r3, [r7, #48]	; 0x30
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_DQS_GPIO_CLK_ENABLE();
 8006dce:	4ba4      	ldr	r3, [pc, #656]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dd4:	4aa2      	ldr	r2, [pc, #648]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006dd6:	f043 0301 	orr.w	r3, r3, #1
 8006dda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006dde:	4ba0      	ldr	r3, [pc, #640]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_CS_GPIO_CLK_ENABLE();
 8006dec:	4b9c      	ldr	r3, [pc, #624]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006df2:	4a9b      	ldr	r2, [pc, #620]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006df4:	f043 0301 	orr.w	r3, r3, #1
 8006df8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006dfc:	4b98      	ldr	r3, [pc, #608]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D0_GPIO_CLK_ENABLE();
 8006e0a:	4b95      	ldr	r3, [pc, #596]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e10:	4a93      	ldr	r2, [pc, #588]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006e12:	f043 0320 	orr.w	r3, r3, #32
 8006e16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006e1a:	4b91      	ldr	r3, [pc, #580]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e20:	f003 0320 	and.w	r3, r3, #32
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D1_GPIO_CLK_ENABLE();
 8006e28:	4b8d      	ldr	r3, [pc, #564]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e2e:	4a8c      	ldr	r2, [pc, #560]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006e30:	f043 0320 	orr.w	r3, r3, #32
 8006e34:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006e38:	4b89      	ldr	r3, [pc, #548]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e3e:	f003 0320 	and.w	r3, r3, #32
 8006e42:	623b      	str	r3, [r7, #32]
 8006e44:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D2_GPIO_CLK_ENABLE();
 8006e46:	4b86      	ldr	r3, [pc, #536]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e4c:	4a84      	ldr	r2, [pc, #528]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006e4e:	f043 0320 	orr.w	r3, r3, #32
 8006e52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006e56:	4b82      	ldr	r3, [pc, #520]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e5c:	f003 0320 	and.w	r3, r3, #32
 8006e60:	61fb      	str	r3, [r7, #28]
 8006e62:	69fb      	ldr	r3, [r7, #28]
  OSPI_D3_GPIO_CLK_ENABLE();
 8006e64:	4b7e      	ldr	r3, [pc, #504]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e6a:	4a7d      	ldr	r2, [pc, #500]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006e6c:	f043 0320 	orr.w	r3, r3, #32
 8006e70:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006e74:	4b7a      	ldr	r3, [pc, #488]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e7a:	f003 0320 	and.w	r3, r3, #32
 8006e7e:	61bb      	str	r3, [r7, #24]
 8006e80:	69bb      	ldr	r3, [r7, #24]
  OSPI_D4_GPIO_CLK_ENABLE();
 8006e82:	4b77      	ldr	r3, [pc, #476]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e88:	4a75      	ldr	r2, [pc, #468]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006e8a:	f043 0304 	orr.w	r3, r3, #4
 8006e8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006e92:	4b73      	ldr	r3, [pc, #460]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e98:	f003 0304 	and.w	r3, r3, #4
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	697b      	ldr	r3, [r7, #20]
  OSPI_D5_GPIO_CLK_ENABLE();
 8006ea0:	4b6f      	ldr	r3, [pc, #444]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ea6:	4a6e      	ldr	r2, [pc, #440]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006ea8:	f043 0304 	orr.w	r3, r3, #4
 8006eac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006eb0:	4b6b      	ldr	r3, [pc, #428]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	613b      	str	r3, [r7, #16]
 8006ebc:	693b      	ldr	r3, [r7, #16]
  OSPI_D6_GPIO_CLK_ENABLE();
 8006ebe:	4b68      	ldr	r3, [pc, #416]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ec4:	4a66      	ldr	r2, [pc, #408]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006ec6:	f043 0304 	orr.w	r3, r3, #4
 8006eca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006ece:	4b64      	ldr	r3, [pc, #400]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	68fb      	ldr	r3, [r7, #12]
  OSPI_D7_GPIO_CLK_ENABLE();
 8006edc:	4b60      	ldr	r3, [pc, #384]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ee2:	4a5f      	ldr	r2, [pc, #380]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006ee4:	f043 0304 	orr.w	r3, r3, #4
 8006ee8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006eec:	4b5c      	ldr	r3, [pc, #368]	; (8007060 <OSPI_NOR_MspInit+0x310>)
 8006eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ef2:	f003 0304 	and.w	r3, r3, #4
 8006ef6:	60bb      	str	r3, [r7, #8]
 8006ef8:	68bb      	ldr	r3, [r7, #8]

  /* Enable HSLV GPIOs */
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 8006efa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006efe:	4859      	ldr	r0, [pc, #356]	; (8007064 <OSPI_NOR_MspInit+0x314>)
 8006f00:	f003 fbec 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8006f04:	2104      	movs	r1, #4
 8006f06:	4858      	ldr	r0, [pc, #352]	; (8007068 <OSPI_NOR_MspInit+0x318>)
 8006f08:	f003 fbe8 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 8006f0c:	2102      	movs	r1, #2
 8006f0e:	4856      	ldr	r0, [pc, #344]	; (8007068 <OSPI_NOR_MspInit+0x318>)
 8006f10:	f003 fbe4 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 8006f14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f18:	4852      	ldr	r0, [pc, #328]	; (8007064 <OSPI_NOR_MspInit+0x314>)
 8006f1a:	f003 fbdf 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 8006f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f22:	4850      	ldr	r0, [pc, #320]	; (8007064 <OSPI_NOR_MspInit+0x314>)
 8006f24:	f003 fbda 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8006f28:	2180      	movs	r1, #128	; 0x80
 8006f2a:	484e      	ldr	r0, [pc, #312]	; (8007064 <OSPI_NOR_MspInit+0x314>)
 8006f2c:	f003 fbd6 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 8006f30:	2140      	movs	r1, #64	; 0x40
 8006f32:	484c      	ldr	r0, [pc, #304]	; (8007064 <OSPI_NOR_MspInit+0x314>)
 8006f34:	f003 fbd2 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8006f38:	2102      	movs	r1, #2
 8006f3a:	484c      	ldr	r0, [pc, #304]	; (800706c <OSPI_NOR_MspInit+0x31c>)
 8006f3c:	f003 fbce 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 8006f40:	2104      	movs	r1, #4
 8006f42:	484a      	ldr	r0, [pc, #296]	; (800706c <OSPI_NOR_MspInit+0x31c>)
 8006f44:	f003 fbca 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 8006f48:	2108      	movs	r1, #8
 8006f4a:	4848      	ldr	r0, [pc, #288]	; (800706c <OSPI_NOR_MspInit+0x31c>)
 8006f4c:	f003 fbc6 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8006f50:	2101      	movs	r1, #1
 8006f52:	4846      	ldr	r0, [pc, #280]	; (800706c <OSPI_NOR_MspInit+0x31c>)
 8006f54:	f003 fbc2 	bl	800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 8006f58:	2304      	movs	r3, #4
 8006f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006f60:	2301      	movs	r3, #1
 8006f62:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f64:	2303      	movs	r3, #3
 8006f66:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 8006f68:	230a      	movs	r3, #10
 8006f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8006f6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006f70:	4619      	mov	r1, r3
 8006f72:	483d      	ldr	r0, [pc, #244]	; (8007068 <OSPI_NOR_MspInit+0x318>)
 8006f74:	f003 f8b2 	bl	800a0dc <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8006f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 8006f82:	2303      	movs	r3, #3
 8006f84:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8006f86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4835      	ldr	r0, [pc, #212]	; (8007064 <OSPI_NOR_MspInit+0x314>)
 8006f8e:	f003 f8a5 	bl	800a0dc <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8006f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 8006f98:	230a      	movs	r3, #10
 8006f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8006f9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4830      	ldr	r0, [pc, #192]	; (8007064 <OSPI_NOR_MspInit+0x314>)
 8006fa4:	f003 f89a 	bl	800a0dc <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 8006fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 8006fae:	230a      	movs	r3, #10
 8006fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8006fb2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	482a      	ldr	r0, [pc, #168]	; (8007064 <OSPI_NOR_MspInit+0x314>)
 8006fba:	f003 f88f 	bl	800a0dc <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 8006fbe:	2380      	movs	r3, #128	; 0x80
 8006fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 8006fc2:	230a      	movs	r3, #10
 8006fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8006fc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4825      	ldr	r0, [pc, #148]	; (8007064 <OSPI_NOR_MspInit+0x314>)
 8006fce:	f003 f885 	bl	800a0dc <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8006fd2:	2340      	movs	r3, #64	; 0x40
 8006fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 8006fd6:	230a      	movs	r3, #10
 8006fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8006fda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006fde:	4619      	mov	r1, r3
 8006fe0:	4820      	ldr	r0, [pc, #128]	; (8007064 <OSPI_NOR_MspInit+0x314>)
 8006fe2:	f003 f87b 	bl	800a0dc <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 8006fea:	230a      	movs	r3, #10
 8006fec:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8006fee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	481d      	ldr	r0, [pc, #116]	; (800706c <OSPI_NOR_MspInit+0x31c>)
 8006ff6:	f003 f871 	bl	800a0dc <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 8006ffa:	2304      	movs	r3, #4
 8006ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 8006ffe:	230a      	movs	r3, #10
 8007000:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 8007002:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007006:	4619      	mov	r1, r3
 8007008:	4818      	ldr	r0, [pc, #96]	; (800706c <OSPI_NOR_MspInit+0x31c>)
 800700a:	f003 f867 	bl	800a0dc <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 800700e:	2308      	movs	r3, #8
 8007010:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 8007012:	230a      	movs	r3, #10
 8007014:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8007016:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800701a:	4619      	mov	r1, r3
 800701c:	4813      	ldr	r0, [pc, #76]	; (800706c <OSPI_NOR_MspInit+0x31c>)
 800701e:	f003 f85d 	bl	800a0dc <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 8007022:	2301      	movs	r3, #1
 8007024:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 8007026:	2303      	movs	r3, #3
 8007028:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 800702a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800702e:	4619      	mov	r1, r3
 8007030:	480e      	ldr	r0, [pc, #56]	; (800706c <OSPI_NOR_MspInit+0x31c>)
 8007032:	f003 f853 	bl	800a0dc <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 8007036:	2302      	movs	r3, #2
 8007038:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 800703a:	230a      	movs	r3, #10
 800703c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 800703e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007042:	4619      	mov	r1, r3
 8007044:	4808      	ldr	r0, [pc, #32]	; (8007068 <OSPI_NOR_MspInit+0x318>)
 8007046:	f003 f849 	bl	800a0dc <HAL_GPIO_Init>

  /* Configure the NVIC for OSPI */
  /* NVIC configuration for OSPI interrupt */
  HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0x0F, 0);
 800704a:	2200      	movs	r2, #0
 800704c:	210f      	movs	r1, #15
 800704e:	204c      	movs	r0, #76	; 0x4c
 8007050:	f000 fe9c 	bl	8007d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8007054:	204c      	movs	r0, #76	; 0x4c
 8007056:	f000 feb3 	bl	8007dc0 <HAL_NVIC_EnableIRQ>
}
 800705a:	bf00      	nop
 800705c:	3750      	adds	r7, #80	; 0x50
 800705e:	e007      	b.n	8007070 <OSPI_NOR_MspInit+0x320>
 8007060:	46020c00 	.word	0x46020c00
 8007064:	42021400 	.word	0x42021400
 8007068:	42020000 	.word	0x42020000
 800706c:	42020800 	.word	0x42020800
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory(uint32_t Instance)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d003      	beq.n	800708e <OSPI_NOR_ResetMemory+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007086:	f06f 0301 	mvn.w	r3, #1
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	e08e      	b.n	80071ac <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	4613      	mov	r3, r2
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	4413      	add	r3, r2
 8007096:	015b      	lsls	r3, r3, #5
 8007098:	4a47      	ldr	r2, [pc, #284]	; (80071b8 <OSPI_NOR_ResetMemory+0x144>)
 800709a:	4413      	add	r3, r2
 800709c:	2200      	movs	r2, #0
 800709e:	2100      	movs	r1, #0
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fd fd84 	bl	8004bae <MX25UM51245G_ResetEnable>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <OSPI_NOR_ResetMemory+0x40>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80070ac:	f06f 0304 	mvn.w	r3, #4
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	e07b      	b.n	80071ac <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	005b      	lsls	r3, r3, #1
 80070ba:	4413      	add	r3, r2
 80070bc:	015b      	lsls	r3, r3, #5
 80070be:	4a3e      	ldr	r2, [pc, #248]	; (80071b8 <OSPI_NOR_ResetMemory+0x144>)
 80070c0:	4413      	add	r3, r2
 80070c2:	2200      	movs	r2, #0
 80070c4:	2100      	movs	r1, #0
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fd fdc9 	bl	8004c5e <MX25UM51245G_ResetMemory>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <OSPI_NOR_ResetMemory+0x66>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80070d2:	f06f 0304 	mvn.w	r3, #4
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	e068      	b.n	80071ac <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	4613      	mov	r3, r2
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	4413      	add	r3, r2
 80070e2:	015b      	lsls	r3, r3, #5
 80070e4:	4a34      	ldr	r2, [pc, #208]	; (80071b8 <OSPI_NOR_ResetMemory+0x144>)
 80070e6:	4413      	add	r3, r2
 80070e8:	2200      	movs	r2, #0
 80070ea:	2101      	movs	r1, #1
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fd fd5e 	bl	8004bae <MX25UM51245G_ResetEnable>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <OSPI_NOR_ResetMemory+0x8c>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80070f8:	f06f 0304 	mvn.w	r3, #4
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	e055      	b.n	80071ac <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	4613      	mov	r3, r2
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	4413      	add	r3, r2
 8007108:	015b      	lsls	r3, r3, #5
 800710a:	4a2b      	ldr	r2, [pc, #172]	; (80071b8 <OSPI_NOR_ResetMemory+0x144>)
 800710c:	4413      	add	r3, r2
 800710e:	2200      	movs	r2, #0
 8007110:	2101      	movs	r1, #1
 8007112:	4618      	mov	r0, r3
 8007114:	f7fd fda3 	bl	8004c5e <MX25UM51245G_ResetMemory>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <OSPI_NOR_ResetMemory+0xb2>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800711e:	f06f 0304 	mvn.w	r3, #4
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	e042      	b.n	80071ac <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	4613      	mov	r3, r2
 800712a:	005b      	lsls	r3, r3, #1
 800712c:	4413      	add	r3, r2
 800712e:	015b      	lsls	r3, r3, #5
 8007130:	4a21      	ldr	r2, [pc, #132]	; (80071b8 <OSPI_NOR_ResetMemory+0x144>)
 8007132:	4413      	add	r3, r2
 8007134:	2201      	movs	r2, #1
 8007136:	2101      	movs	r1, #1
 8007138:	4618      	mov	r0, r3
 800713a:	f7fd fd38 	bl	8004bae <MX25UM51245G_ResetEnable>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <OSPI_NOR_ResetMemory+0xd8>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007144:	f06f 0304 	mvn.w	r3, #4
 8007148:	60fb      	str	r3, [r7, #12]
 800714a:	e02f      	b.n	80071ac <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	4613      	mov	r3, r2
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	4413      	add	r3, r2
 8007154:	015b      	lsls	r3, r3, #5
 8007156:	4a18      	ldr	r2, [pc, #96]	; (80071b8 <OSPI_NOR_ResetMemory+0x144>)
 8007158:	4413      	add	r3, r2
 800715a:	2201      	movs	r2, #1
 800715c:	2101      	movs	r1, #1
 800715e:	4618      	mov	r0, r3
 8007160:	f7fd fd7d 	bl	8004c5e <MX25UM51245G_ResetMemory>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <OSPI_NOR_ResetMemory+0xfe>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800716a:	f06f 0304 	mvn.w	r3, #4
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	e01c      	b.n	80071ac <OSPI_NOR_ResetMemory+0x138>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access  */
 8007172:	4912      	ldr	r1, [pc, #72]	; (80071bc <OSPI_NOR_ResetMemory+0x148>)
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	4613      	mov	r3, r2
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	4413      	add	r3, r2
 800717c:	440b      	add	r3, r1
 800717e:	2201      	movs	r2, #1
 8007180:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;     /* After reset H/W back to SPI mode by default */
 8007182:	490e      	ldr	r1, [pc, #56]	; (80071bc <OSPI_NOR_ResetMemory+0x148>)
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	4613      	mov	r3, r2
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	4413      	add	r3, r2
 800718c:	440b      	add	r3, r1
 800718e:	3301      	adds	r3, #1
 8007190:	2200      	movs	r2, #0
 8007192:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode         */
 8007194:	4909      	ldr	r1, [pc, #36]	; (80071bc <OSPI_NOR_ResetMemory+0x148>)
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	4613      	mov	r3, r2
 800719a:	005b      	lsls	r3, r3, #1
 800719c:	4413      	add	r3, r2
 800719e:	440b      	add	r3, r1
 80071a0:	3302      	adds	r3, #2
 80071a2:	2200      	movs	r2, #0
 80071a4:	701a      	strb	r2, [r3, #0]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
 80071a6:	2064      	movs	r0, #100	; 0x64
 80071a8:	f000 fd14 	bl	8007bd4 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 80071ac:	68fb      	ldr	r3, [r7, #12]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	20197da4 	.word	0x20197da4
 80071bc:	20197e04 	.word	0x20197e04

080071c0 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 80071c0:	b590      	push	{r4, r7, lr}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <OSPI_NOR_EnterDOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80071ce:	f06f 0301 	mvn.w	r3, #1
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	e0e4      	b.n	80073a0 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	4613      	mov	r3, r2
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	4413      	add	r3, r2
 80071de:	015b      	lsls	r3, r3, #5
 80071e0:	4a72      	ldr	r2, [pc, #456]	; (80073ac <OSPI_NOR_EnterDOPIMode+0x1ec>)
 80071e2:	1898      	adds	r0, r3, r2
 80071e4:	4972      	ldr	r1, [pc, #456]	; (80073b0 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	4613      	mov	r3, r2
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	4413      	add	r3, r2
 80071ee:	440b      	add	r3, r1
 80071f0:	3301      	adds	r3, #1
 80071f2:	7819      	ldrb	r1, [r3, #0]
 80071f4:	4c6e      	ldr	r4, [pc, #440]	; (80073b0 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	4613      	mov	r3, r2
 80071fa:	005b      	lsls	r3, r3, #1
 80071fc:	4413      	add	r3, r2
 80071fe:	4423      	add	r3, r4
 8007200:	3302      	adds	r3, #2
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	f7fd face 	bl	80047a6 <MX25UM51245G_WriteEnable>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d003      	beq.n	8007218 <OSPI_NOR_EnterDOPIMode+0x58>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007210:	f06f 0304 	mvn.w	r3, #4
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	e0c3      	b.n	80073a0 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	4613      	mov	r3, r2
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	4413      	add	r3, r2
 8007220:	015b      	lsls	r3, r3, #5
 8007222:	4a62      	ldr	r2, [pc, #392]	; (80073ac <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8007224:	1898      	adds	r0, r3, r2
 8007226:	4962      	ldr	r1, [pc, #392]	; (80073b0 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	4613      	mov	r3, r2
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	4413      	add	r3, r2
 8007230:	440b      	add	r3, r1
 8007232:	3301      	adds	r3, #1
 8007234:	7819      	ldrb	r1, [r3, #0]
 8007236:	4c5e      	ldr	r4, [pc, #376]	; (80073b0 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	4613      	mov	r3, r2
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	4413      	add	r3, r2
 8007240:	4423      	add	r3, r4
 8007242:	3302      	adds	r3, #2
 8007244:	781a      	ldrb	r2, [r3, #0]
 8007246:	2307      	movs	r3, #7
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800724e:	f7fd fb7a 	bl	8004946 <MX25UM51245G_WriteCfg2Register>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <OSPI_NOR_EnterDOPIMode+0xa0>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_6_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007258:	f06f 0304 	mvn.w	r3, #4
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	e09f      	b.n	80073a0 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	4613      	mov	r3, r2
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	4413      	add	r3, r2
 8007268:	015b      	lsls	r3, r3, #5
 800726a:	4a50      	ldr	r2, [pc, #320]	; (80073ac <OSPI_NOR_EnterDOPIMode+0x1ec>)
 800726c:	1898      	adds	r0, r3, r2
 800726e:	4950      	ldr	r1, [pc, #320]	; (80073b0 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	4613      	mov	r3, r2
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	4413      	add	r3, r2
 8007278:	440b      	add	r3, r1
 800727a:	3301      	adds	r3, #1
 800727c:	7819      	ldrb	r1, [r3, #0]
 800727e:	4c4c      	ldr	r4, [pc, #304]	; (80073b0 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	4413      	add	r3, r2
 8007288:	4423      	add	r3, r4
 800728a:	3302      	adds	r3, #2
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	f7fd fa89 	bl	80047a6 <MX25UM51245G_WriteEnable>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <OSPI_NOR_EnterDOPIMode+0xe2>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800729a:	f06f 0304 	mvn.w	r3, #4
 800729e:	60fb      	str	r3, [r7, #12]
 80072a0:	e07e      	b.n	80073a0 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	4613      	mov	r3, r2
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	4413      	add	r3, r2
 80072aa:	015b      	lsls	r3, r3, #5
 80072ac:	4a3f      	ldr	r2, [pc, #252]	; (80073ac <OSPI_NOR_EnterDOPIMode+0x1ec>)
 80072ae:	1898      	adds	r0, r3, r2
 80072b0:	493f      	ldr	r1, [pc, #252]	; (80073b0 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	4613      	mov	r3, r2
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	4413      	add	r3, r2
 80072ba:	440b      	add	r3, r1
 80072bc:	3301      	adds	r3, #1
 80072be:	7819      	ldrb	r1, [r3, #0]
 80072c0:	4c3b      	ldr	r4, [pc, #236]	; (80073b0 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	4613      	mov	r3, r2
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	4413      	add	r3, r2
 80072ca:	4423      	add	r3, r4
 80072cc:	3302      	adds	r3, #2
 80072ce:	781a      	ldrb	r2, [r3, #0]
 80072d0:	2302      	movs	r3, #2
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	2300      	movs	r3, #0
 80072d6:	f7fd fb36 	bl	8004946 <MX25UM51245G_WriteCfg2Register>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <OSPI_NOR_EnterDOPIMode+0x128>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_DOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80072e0:	f06f 0304 	mvn.w	r3, #4
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	e05b      	b.n	80073a0 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 80072e8:	2028      	movs	r0, #40	; 0x28
 80072ea:	f000 fc73 	bl	8007bd4 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
 80072ee:	492f      	ldr	r1, [pc, #188]	; (80073ac <OSPI_NOR_EnterDOPIMode+0x1ec>)
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	4613      	mov	r3, r2
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	4413      	add	r3, r2
 80072f8:	015b      	lsls	r3, r3, #5
 80072fa:	440b      	add	r3, r1
 80072fc:	330c      	adds	r3, #12
 80072fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007302:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8007304:	4929      	ldr	r1, [pc, #164]	; (80073ac <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	4613      	mov	r3, r2
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	4413      	add	r3, r2
 800730e:	015b      	lsls	r3, r3, #5
 8007310:	440b      	add	r3, r1
 8007312:	332c      	adds	r3, #44	; 0x2c
 8007314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007318:	601a      	str	r2, [r3, #0]
    if (HAL_XSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	4613      	mov	r3, r2
 800731e:	005b      	lsls	r3, r3, #1
 8007320:	4413      	add	r3, r2
 8007322:	015b      	lsls	r3, r3, #5
 8007324:	4a21      	ldr	r2, [pc, #132]	; (80073ac <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8007326:	4413      	add	r3, r2
 8007328:	4618      	mov	r0, r3
 800732a:	f00b ff43 	bl	80131b4 <HAL_XSPI_Init>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <OSPI_NOR_EnterDOPIMode+0x17c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007334:	f06f 0303 	mvn.w	r3, #3
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	e031      	b.n	80073a0 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    /* Check Flash busy ? */
    else if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	4613      	mov	r3, r2
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	4413      	add	r3, r2
 8007344:	015b      	lsls	r3, r3, #5
 8007346:	4a19      	ldr	r2, [pc, #100]	; (80073ac <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8007348:	4413      	add	r3, r2
 800734a:	2201      	movs	r2, #1
 800734c:	2101      	movs	r1, #1
 800734e:	4618      	mov	r0, r3
 8007350:	f7fd f85e 	bl	8004410 <MX25UM51245G_AutoPollingMemReady>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <OSPI_NOR_EnterDOPIMode+0x1a2>
                                              BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800735a:	f06f 0304 	mvn.w	r3, #4
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	e01e      	b.n	80073a0 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER,
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	4613      	mov	r3, r2
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	4413      	add	r3, r2
 800736a:	015b      	lsls	r3, r3, #5
 800736c:	4a0f      	ldr	r2, [pc, #60]	; (80073ac <OSPI_NOR_EnterDOPIMode+0x1ec>)
 800736e:	1898      	adds	r0, r3, r2
 8007370:	f107 0308 	add.w	r3, r7, #8
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	2300      	movs	r3, #0
 8007378:	2201      	movs	r2, #1
 800737a:	2101      	movs	r1, #1
 800737c:	f7fd fb78 	bl	8004a70 <MX25UM51245G_ReadCfg2Register>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <OSPI_NOR_EnterDOPIMode+0x1ce>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007386:	f06f 0304 	mvn.w	r3, #4
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	e008      	b.n	80073a0 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    else if (reg[0] != MX25UM51245G_CR2_DOPI)
 800738e:	7a3b      	ldrb	r3, [r7, #8]
 8007390:	2b02      	cmp	r3, #2
 8007392:	d003      	beq.n	800739c <OSPI_NOR_EnterDOPIMode+0x1dc>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007394:	f06f 0304 	mvn.w	r3, #4
 8007398:	60fb      	str	r3, [r7, #12]
 800739a:	e001      	b.n	80073a0 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 80073a0:	68fb      	ldr	r3, [r7, #12]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd90      	pop	{r4, r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20197da4 	.word	0x20197da4
 80073b0:	20197e04 	.word	0x20197e04

080073b4 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 80073b4:	b590      	push	{r4, r7, lr}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af02      	add	r7, sp, #8
 80073ba:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <OSPI_NOR_EnterSOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80073c2:	f06f 0301 	mvn.w	r3, #1
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	e0bd      	b.n	8007546 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	4613      	mov	r3, r2
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	4413      	add	r3, r2
 80073d2:	015b      	lsls	r3, r3, #5
 80073d4:	4a5e      	ldr	r2, [pc, #376]	; (8007550 <OSPI_NOR_EnterSOPIMode+0x19c>)
 80073d6:	1898      	adds	r0, r3, r2
 80073d8:	495e      	ldr	r1, [pc, #376]	; (8007554 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	4613      	mov	r3, r2
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	4413      	add	r3, r2
 80073e2:	440b      	add	r3, r1
 80073e4:	3301      	adds	r3, #1
 80073e6:	7819      	ldrb	r1, [r3, #0]
 80073e8:	4c5a      	ldr	r4, [pc, #360]	; (8007554 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	4613      	mov	r3, r2
 80073ee:	005b      	lsls	r3, r3, #1
 80073f0:	4413      	add	r3, r2
 80073f2:	4423      	add	r3, r4
 80073f4:	3302      	adds	r3, #2
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	461a      	mov	r2, r3
 80073fa:	f7fd f9d4 	bl	80047a6 <MX25UM51245G_WriteEnable>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <OSPI_NOR_EnterSOPIMode+0x58>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007404:	f06f 0304 	mvn.w	r3, #4
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	e09c      	b.n	8007546 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	4613      	mov	r3, r2
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	4413      	add	r3, r2
 8007414:	015b      	lsls	r3, r3, #5
 8007416:	4a4e      	ldr	r2, [pc, #312]	; (8007550 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8007418:	1898      	adds	r0, r3, r2
 800741a:	494e      	ldr	r1, [pc, #312]	; (8007554 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	4413      	add	r3, r2
 8007424:	440b      	add	r3, r1
 8007426:	3301      	adds	r3, #1
 8007428:	7819      	ldrb	r1, [r3, #0]
 800742a:	4c4a      	ldr	r4, [pc, #296]	; (8007554 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	4613      	mov	r3, r2
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	4413      	add	r3, r2
 8007434:	4423      	add	r3, r4
 8007436:	3302      	adds	r3, #2
 8007438:	781a      	ldrb	r2, [r3, #0]
 800743a:	2307      	movs	r3, #7
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007442:	f7fd fa80 	bl	8004946 <MX25UM51245G_WriteCfg2Register>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <OSPI_NOR_EnterSOPIMode+0xa0>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_6_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800744c:	f06f 0304 	mvn.w	r3, #4
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	e078      	b.n	8007546 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	4613      	mov	r3, r2
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	4413      	add	r3, r2
 800745c:	015b      	lsls	r3, r3, #5
 800745e:	4a3c      	ldr	r2, [pc, #240]	; (8007550 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8007460:	1898      	adds	r0, r3, r2
 8007462:	493c      	ldr	r1, [pc, #240]	; (8007554 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	4613      	mov	r3, r2
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	4413      	add	r3, r2
 800746c:	440b      	add	r3, r1
 800746e:	3301      	adds	r3, #1
 8007470:	7819      	ldrb	r1, [r3, #0]
 8007472:	4c38      	ldr	r4, [pc, #224]	; (8007554 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	4613      	mov	r3, r2
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	4413      	add	r3, r2
 800747c:	4423      	add	r3, r4
 800747e:	3302      	adds	r3, #2
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	f7fd f98f 	bl	80047a6 <MX25UM51245G_WriteEnable>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <OSPI_NOR_EnterSOPIMode+0xe2>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800748e:	f06f 0304 	mvn.w	r3, #4
 8007492:	60fb      	str	r3, [r7, #12]
 8007494:	e057      	b.n	8007546 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	4613      	mov	r3, r2
 800749a:	005b      	lsls	r3, r3, #1
 800749c:	4413      	add	r3, r2
 800749e:	015b      	lsls	r3, r3, #5
 80074a0:	4a2b      	ldr	r2, [pc, #172]	; (8007550 <OSPI_NOR_EnterSOPIMode+0x19c>)
 80074a2:	1898      	adds	r0, r3, r2
 80074a4:	492b      	ldr	r1, [pc, #172]	; (8007554 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	4613      	mov	r3, r2
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	4413      	add	r3, r2
 80074ae:	440b      	add	r3, r1
 80074b0:	3301      	adds	r3, #1
 80074b2:	7819      	ldrb	r1, [r3, #0]
 80074b4:	4c27      	ldr	r4, [pc, #156]	; (8007554 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	4613      	mov	r3, r2
 80074ba:	005b      	lsls	r3, r3, #1
 80074bc:	4413      	add	r3, r2
 80074be:	4423      	add	r3, r4
 80074c0:	3302      	adds	r3, #2
 80074c2:	781a      	ldrb	r2, [r3, #0]
 80074c4:	2301      	movs	r3, #1
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	2300      	movs	r3, #0
 80074ca:	f7fd fa3c 	bl	8004946 <MX25UM51245G_WriteCfg2Register>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <OSPI_NOR_EnterSOPIMode+0x128>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_SOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80074d4:	f06f 0304 	mvn.w	r3, #4
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	e034      	b.n	8007546 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 80074dc:	2028      	movs	r0, #40	; 0x28
 80074de:	f000 fb79 	bl	8007bd4 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	4613      	mov	r3, r2
 80074e6:	005b      	lsls	r3, r3, #1
 80074e8:	4413      	add	r3, r2
 80074ea:	015b      	lsls	r3, r3, #5
 80074ec:	4a18      	ldr	r2, [pc, #96]	; (8007550 <OSPI_NOR_EnterSOPIMode+0x19c>)
 80074ee:	4413      	add	r3, r2
 80074f0:	2200      	movs	r2, #0
 80074f2:	2101      	movs	r1, #1
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fc ff8b 	bl	8004410 <MX25UM51245G_AutoPollingMemReady>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <OSPI_NOR_EnterSOPIMode+0x154>
                                         BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007500:	f06f 0304 	mvn.w	r3, #4
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	e01e      	b.n	8007546 <OSPI_NOR_EnterSOPIMode+0x192>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	4613      	mov	r3, r2
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	4413      	add	r3, r2
 8007510:	015b      	lsls	r3, r3, #5
 8007512:	4a0f      	ldr	r2, [pc, #60]	; (8007550 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8007514:	1898      	adds	r0, r3, r2
 8007516:	f107 0308 	add.w	r3, r7, #8
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	2300      	movs	r3, #0
 800751e:	2200      	movs	r2, #0
 8007520:	2101      	movs	r1, #1
 8007522:	f7fd faa5 	bl	8004a70 <MX25UM51245G_ReadCfg2Register>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <OSPI_NOR_EnterSOPIMode+0x180>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800752c:	f06f 0304 	mvn.w	r3, #4
 8007530:	60fb      	str	r3, [r7, #12]
 8007532:	e008      	b.n	8007546 <OSPI_NOR_EnterSOPIMode+0x192>
    }
    else if (reg[0] != MX25UM51245G_CR2_SOPI)
 8007534:	7a3b      	ldrb	r3, [r7, #8]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d003      	beq.n	8007542 <OSPI_NOR_EnterSOPIMode+0x18e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800753a:	f06f 0304 	mvn.w	r3, #4
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	e001      	b.n	8007546 <OSPI_NOR_EnterSOPIMode+0x192>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8007542:	2300      	movs	r3, #0
 8007544:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8007546:	68fb      	ldr	r3, [r7, #12]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	bd90      	pop	{r4, r7, pc}
 8007550:	20197da4 	.word	0x20197da4
 8007554:	20197e04 	.word	0x20197e04

08007558 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode(uint32_t Instance)
{
 8007558:	b590      	push	{r4, r7, lr}
 800755a:	b087      	sub	sp, #28
 800755c:	af02      	add	r7, sp, #8
 800755e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8007560:	2300      	movs	r3, #0
 8007562:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <OSPI_NOR_ExitOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800756a:	f06f 0301 	mvn.w	r3, #1
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	e0aa      	b.n	80076c8 <OSPI_NOR_ExitOPIMode+0x170>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	4613      	mov	r3, r2
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	4413      	add	r3, r2
 800757a:	015b      	lsls	r3, r3, #5
 800757c:	4a55      	ldr	r2, [pc, #340]	; (80076d4 <OSPI_NOR_ExitOPIMode+0x17c>)
 800757e:	1898      	adds	r0, r3, r2
 8007580:	4955      	ldr	r1, [pc, #340]	; (80076d8 <OSPI_NOR_ExitOPIMode+0x180>)
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	4613      	mov	r3, r2
 8007586:	005b      	lsls	r3, r3, #1
 8007588:	4413      	add	r3, r2
 800758a:	440b      	add	r3, r1
 800758c:	3301      	adds	r3, #1
 800758e:	7819      	ldrb	r1, [r3, #0]
 8007590:	4c51      	ldr	r4, [pc, #324]	; (80076d8 <OSPI_NOR_ExitOPIMode+0x180>)
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	4613      	mov	r3, r2
 8007596:	005b      	lsls	r3, r3, #1
 8007598:	4413      	add	r3, r2
 800759a:	4423      	add	r3, r4
 800759c:	3302      	adds	r3, #2
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	461a      	mov	r2, r3
 80075a2:	f7fd f900 	bl	80047a6 <MX25UM51245G_WriteEnable>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <OSPI_NOR_ExitOPIMode+0x5c>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80075ac:	f06f 0304 	mvn.w	r3, #4
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	e089      	b.n	80076c8 <OSPI_NOR_ExitOPIMode+0x170>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 80075b4:	2300      	movs	r3, #0
 80075b6:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	727b      	strb	r3, [r7, #9]
    if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	4613      	mov	r3, r2
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	4413      	add	r3, r2
 80075c4:	015b      	lsls	r3, r3, #5
 80075c6:	4a43      	ldr	r2, [pc, #268]	; (80076d4 <OSPI_NOR_ExitOPIMode+0x17c>)
 80075c8:	1898      	adds	r0, r3, r2
 80075ca:	4943      	ldr	r1, [pc, #268]	; (80076d8 <OSPI_NOR_ExitOPIMode+0x180>)
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	4613      	mov	r3, r2
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	4413      	add	r3, r2
 80075d4:	440b      	add	r3, r1
 80075d6:	3301      	adds	r3, #1
 80075d8:	7819      	ldrb	r1, [r3, #0]
 80075da:	4c3f      	ldr	r4, [pc, #252]	; (80076d8 <OSPI_NOR_ExitOPIMode+0x180>)
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	4613      	mov	r3, r2
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	4413      	add	r3, r2
 80075e4:	4423      	add	r3, r4
 80075e6:	3302      	adds	r3, #2
 80075e8:	781a      	ldrb	r2, [r3, #0]
 80075ea:	7a3b      	ldrb	r3, [r7, #8]
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	2300      	movs	r3, #0
 80075f0:	f7fd f9a9 	bl	8004946 <MX25UM51245G_WriteCfg2Register>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <OSPI_NOR_ExitOPIMode+0xaa>
                                       Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                       reg[0]) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80075fa:	f06f 0304 	mvn.w	r3, #4
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	e062      	b.n	80076c8 <OSPI_NOR_ExitOPIMode+0x170>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 8007602:	2028      	movs	r0, #40	; 0x28
 8007604:	f000 fae6 	bl	8007bd4 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8007608:	4933      	ldr	r1, [pc, #204]	; (80076d8 <OSPI_NOR_ExitOPIMode+0x180>)
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	4613      	mov	r3, r2
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	4413      	add	r3, r2
 8007612:	440b      	add	r3, r1
 8007614:	3302      	adds	r3, #2
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d123      	bne.n	8007664 <OSPI_NOR_ExitOPIMode+0x10c>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
 800761c:	492d      	ldr	r1, [pc, #180]	; (80076d4 <OSPI_NOR_ExitOPIMode+0x17c>)
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	4613      	mov	r3, r2
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	4413      	add	r3, r2
 8007626:	015b      	lsls	r3, r3, #5
 8007628:	440b      	add	r3, r1
 800762a:	330c      	adds	r3, #12
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8007630:	4928      	ldr	r1, [pc, #160]	; (80076d4 <OSPI_NOR_ExitOPIMode+0x17c>)
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	4613      	mov	r3, r2
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	4413      	add	r3, r2
 800763a:	015b      	lsls	r3, r3, #5
 800763c:	440b      	add	r3, r1
 800763e:	332c      	adds	r3, #44	; 0x2c
 8007640:	2200      	movs	r2, #0
 8007642:	601a      	str	r2, [r3, #0]
        if (HAL_XSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4613      	mov	r3, r2
 8007648:	005b      	lsls	r3, r3, #1
 800764a:	4413      	add	r3, r2
 800764c:	015b      	lsls	r3, r3, #5
 800764e:	4a21      	ldr	r2, [pc, #132]	; (80076d4 <OSPI_NOR_ExitOPIMode+0x17c>)
 8007650:	4413      	add	r3, r2
 8007652:	4618      	mov	r0, r3
 8007654:	f00b fdae 	bl	80131b4 <HAL_XSPI_Init>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <OSPI_NOR_ExitOPIMode+0x10c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800765e:	f06f 0303 	mvn.w	r3, #3
 8007662:	60fb      	str	r3, [r7, #12]
        }
      }

      if (ret == BSP_ERROR_NONE)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d12e      	bne.n	80076c8 <OSPI_NOR_ExitOPIMode+0x170>
      {
        /* Check Flash busy ? */
        if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	4613      	mov	r3, r2
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	4413      	add	r3, r2
 8007672:	015b      	lsls	r3, r3, #5
 8007674:	4a17      	ldr	r2, [pc, #92]	; (80076d4 <OSPI_NOR_ExitOPIMode+0x17c>)
 8007676:	4413      	add	r3, r2
 8007678:	2200      	movs	r2, #0
 800767a:	2100      	movs	r1, #0
 800767c:	4618      	mov	r0, r3
 800767e:	f7fc fec7 	bl	8004410 <MX25UM51245G_AutoPollingMemReady>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <OSPI_NOR_ExitOPIMode+0x138>
                                             BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8007688:	f06f 0304 	mvn.w	r3, #4
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	e01b      	b.n	80076c8 <OSPI_NOR_ExitOPIMode+0x170>
        }
        /* Check the configuration has been correctly done */
        else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	4613      	mov	r3, r2
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	4413      	add	r3, r2
 8007698:	015b      	lsls	r3, r3, #5
 800769a:	4a0e      	ldr	r2, [pc, #56]	; (80076d4 <OSPI_NOR_ExitOPIMode+0x17c>)
 800769c:	1898      	adds	r0, r3, r2
 800769e:	f107 0308 	add.w	r3, r7, #8
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	2300      	movs	r3, #0
 80076a6:	2200      	movs	r2, #0
 80076a8:	2100      	movs	r1, #0
 80076aa:	f7fd f9e1 	bl	8004a70 <MX25UM51245G_ReadCfg2Register>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <OSPI_NOR_ExitOPIMode+0x164>
                                               MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80076b4:	f06f 0304 	mvn.w	r3, #4
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	e005      	b.n	80076c8 <OSPI_NOR_ExitOPIMode+0x170>
        }
        else if (reg[0] != 0U)
 80076bc:	7a3b      	ldrb	r3, [r7, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <OSPI_NOR_ExitOPIMode+0x170>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80076c2:	f06f 0304 	mvn.w	r3, #4
 80076c6:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80076c8:	68fb      	ldr	r3, [r7, #12]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd90      	pop	{r4, r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20197da4 	.word	0x20197da4
 80076d8:	20197e04 	.word	0x20197e04

080076dc <BSP_TS_Init>:
  * @param  Instance TS Instance.
  * @param  TS_Init  Pointer to TS initialization structure.
  * @retval BSP status.
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	61fb      	str	r3, [r7, #28]

  if ((TS_Init == NULL) || (Instance >= TS_INSTANCES_NBR))
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <BSP_TS_Init+0x1a>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <BSP_TS_Init+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80076f6:	f06f 0301 	mvn.w	r3, #1
 80076fa:	61fb      	str	r3, [r7, #28]
 80076fc:	e07f      	b.n	80077fe <BSP_TS_Init+0x122>
  }
  else
  {
    /* Probe the TS driver */
    if (SITRONIX_Probe(Instance) != BSP_ERROR_NONE)
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f98c 	bl	8007a1c <SITRONIX_Probe>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <BSP_TS_Init+0x36>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800770a:	f06f 0304 	mvn.w	r3, #4
 800770e:	61fb      	str	r3, [r7, #28]
 8007710:	e075      	b.n	80077fe <BSP_TS_Init+0x122>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t          i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	493c      	ldr	r1, [pc, #240]	; (8007808 <BSP_TS_Init+0x12c>)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2068      	movs	r0, #104	; 0x68
 800771c:	fb00 f303 	mul.w	r3, r0, r3
 8007720:	440b      	add	r3, r1
 8007722:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	4937      	ldr	r1, [pc, #220]	; (8007808 <BSP_TS_Init+0x12c>)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2068      	movs	r0, #104	; 0x68
 800772e:	fb00 f303 	mul.w	r3, r0, r3
 8007732:	440b      	add	r3, r1
 8007734:	3304      	adds	r3, #4
 8007736:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	4932      	ldr	r1, [pc, #200]	; (8007808 <BSP_TS_Init+0x12c>)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2068      	movs	r0, #104	; 0x68
 8007742:	fb00 f303 	mul.w	r3, r0, r3
 8007746:	440b      	add	r3, r1
 8007748:	3308      	adds	r3, #8
 800774a:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	492d      	ldr	r1, [pc, #180]	; (8007808 <BSP_TS_Init+0x12c>)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2068      	movs	r0, #104	; 0x68
 8007756:	fb00 f303 	mul.w	r3, r0, r3
 800775a:	440b      	add	r3, r1
 800775c:	330c      	adds	r3, #12
 800775e:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv[Instance]->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8007760:	4a2a      	ldr	r2, [pc, #168]	; (800780c <BSP_TS_Init+0x130>)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	4929      	ldr	r1, [pc, #164]	; (8007810 <BSP_TS_Init+0x134>)
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007772:	f107 010c 	add.w	r1, r7, #12
 8007776:	4610      	mov	r0, r2
 8007778:	4798      	blx	r3
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	da03      	bge.n	8007788 <BSP_TS_Init+0xac>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8007780:	f06f 0304 	mvn.w	r3, #4
 8007784:	61fb      	str	r3, [r7, #28]
 8007786:	e03a      	b.n	80077fe <BSP_TS_Init+0x122>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	491f      	ldr	r1, [pc, #124]	; (8007808 <BSP_TS_Init+0x12c>)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2068      	movs	r0, #104	; 0x68
 8007790:	fb00 f303 	mul.w	r3, r0, r3
 8007794:	440b      	add	r3, r1
 8007796:	3310      	adds	r3, #16
 8007798:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	491a      	ldr	r1, [pc, #104]	; (8007808 <BSP_TS_Init+0x12c>)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2068      	movs	r0, #104	; 0x68
 80077a2:	fb00 f303 	mul.w	r3, r0, r3
 80077a6:	440b      	add	r3, r1
 80077a8:	3314      	adds	r3, #20
 80077aa:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for (i = 0; i < TS_TOUCH_NBR; i++)
 80077ac:	2300      	movs	r3, #0
 80077ae:	61bb      	str	r3, [r7, #24]
 80077b0:	e022      	b.n	80077f8 <BSP_TS_Init+0x11c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	1c5a      	adds	r2, r3, #1
 80077be:	4812      	ldr	r0, [pc, #72]	; (8007808 <BSP_TS_Init+0x12c>)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	211a      	movs	r1, #26
 80077c4:	fb03 f101 	mul.w	r1, r3, r1
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	440b      	add	r3, r1
 80077cc:	3306      	adds	r3, #6
 80077ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	4413      	add	r3, r2
 80077dc:	1c5a      	adds	r2, r3, #1
 80077de:	480a      	ldr	r0, [pc, #40]	; (8007808 <BSP_TS_Init+0x12c>)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	211a      	movs	r1, #26
 80077e4:	fb03 f101 	mul.w	r1, r3, r1
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	440b      	add	r3, r1
 80077ec:	3310      	adds	r3, #16
 80077ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for (i = 0; i < TS_TOUCH_NBR; i++)
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	3301      	adds	r3, #1
 80077f6:	61bb      	str	r3, [r7, #24]
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	2b09      	cmp	r3, #9
 80077fc:	d9d9      	bls.n	80077b2 <BSP_TS_Init+0xd6>
        }
      }
    }
  }

  return status;
 80077fe:	69fb      	ldr	r3, [r7, #28]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3720      	adds	r7, #32
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	20197e10 	.word	0x20197e10
 800780c:	20197e0c 	.word	0x20197e0c
 8007810:	20197e08 	.word	0x20197e08

08007814 <BSP_TS_GetState>:
  * @param  Instance TS Instance.
  * @param  TS_State Pointer to single touch structure.
  * @retval BSP status.
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08a      	sub	sp, #40	; 0x28
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 800781e:	2300      	movs	r3, #0
 8007820:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented;
  uint32_t y_oriented;
  uint32_t x_diff;
  uint32_t y_diff;

  if (Instance >= TS_INSTANCES_NBR)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <BSP_TS_GetState+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8007828:	f06f 0301 	mvn.w	r3, #1
 800782c:	627b      	str	r3, [r7, #36]	; 0x24
 800782e:	e0ea      	b.n	8007a06 <BSP_TS_GetState+0x1f2>
  else
  {
    SITRONIX_State_t state;

    /* Get each touch coordinates */
    if (Ts_Drv[Instance]->GetState(Ts_CompObj[Instance], &state) < 0)
 8007830:	4a77      	ldr	r2, [pc, #476]	; (8007a10 <BSP_TS_GetState+0x1fc>)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	4976      	ldr	r1, [pc, #472]	; (8007a14 <BSP_TS_GetState+0x200>)
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007842:	f107 0108 	add.w	r1, r7, #8
 8007846:	4610      	mov	r0, r2
 8007848:	4798      	blx	r3
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	da03      	bge.n	8007858 <BSP_TS_GetState+0x44>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8007850:	f06f 0304 	mvn.w	r3, #4
 8007854:	627b      	str	r3, [r7, #36]	; 0x24
 8007856:	e0d6      	b.n	8007a06 <BSP_TS_GetState+0x1f2>
    }/* Check and update the number of touches active detected */
    else if (state.TouchDetected != 0U)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 80bc 	beq.w	80079d8 <BSP_TS_GetState+0x1c4>
    {
      x_oriented = /*Ts_Ctx[Instance].MaxX -*/ state.TouchX;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	623b      	str	r3, [r7, #32]
      y_oriented = /*Ts_Ctx[Instance].MaxY -*/ state.TouchY;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	61fb      	str	r3, [r7, #28]

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / (Ts_Ctx[Instance].MaxX);
 8007868:	4a6b      	ldr	r2, [pc, #428]	; (8007a18 <BSP_TS_GetState+0x204>)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2168      	movs	r1, #104	; 0x68
 800786e:	fb01 f303 	mul.w	r3, r1, r3
 8007872:	4413      	add	r3, r2
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6a3a      	ldr	r2, [r7, #32]
 8007878:	fb03 f202 	mul.w	r2, r3, r2
 800787c:	4966      	ldr	r1, [pc, #408]	; (8007a18 <BSP_TS_GetState+0x204>)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2068      	movs	r0, #104	; 0x68
 8007882:	fb00 f303 	mul.w	r3, r0, r3
 8007886:	440b      	add	r3, r1
 8007888:	3310      	adds	r3, #16
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / (Ts_Ctx[Instance].MaxY);
 8007894:	4a60      	ldr	r2, [pc, #384]	; (8007a18 <BSP_TS_GetState+0x204>)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2168      	movs	r1, #104	; 0x68
 800789a:	fb01 f303 	mul.w	r3, r1, r3
 800789e:	4413      	add	r3, r2
 80078a0:	3304      	adds	r3, #4
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69fa      	ldr	r2, [r7, #28]
 80078a6:	fb03 f202 	mul.w	r2, r3, r2
 80078aa:	495b      	ldr	r1, [pc, #364]	; (8007a18 <BSP_TS_GetState+0x204>)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2068      	movs	r0, #104	; 0x68
 80078b0:	fb00 f303 	mul.w	r3, r0, r3
 80078b4:	440b      	add	r3, r1
 80078b6:	3314      	adds	r3, #20
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0]) ?
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	4952      	ldr	r1, [pc, #328]	; (8007a18 <BSP_TS_GetState+0x204>)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2068      	movs	r0, #104	; 0x68
 80078d2:	fb00 f303 	mul.w	r3, r0, r3
 80078d6:	440b      	add	r3, r1
 80078d8:	3318      	adds	r3, #24
 80078da:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]) :
 80078dc:	429a      	cmp	r2, r3
 80078de:	d90b      	bls.n	80078f8 <BSP_TS_GetState+0xe4>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	494c      	ldr	r1, [pc, #304]	; (8007a18 <BSP_TS_GetState+0x204>)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2068      	movs	r0, #104	; 0x68
 80078ea:	fb00 f303 	mul.w	r3, r0, r3
 80078ee:	440b      	add	r3, r1
 80078f0:	3318      	adds	r3, #24
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	e00a      	b.n	800790e <BSP_TS_GetState+0xfa>
               (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 80078f8:	4a47      	ldr	r2, [pc, #284]	; (8007a18 <BSP_TS_GetState+0x204>)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2168      	movs	r1, #104	; 0x68
 80078fe:	fb01 f303 	mul.w	r3, r1, r3
 8007902:	4413      	add	r3, r2
 8007904:	3318      	adds	r3, #24
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]) :
 800790c:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0]) ?
 800790e:	61bb      	str	r3, [r7, #24]

      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0]) ?
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	689a      	ldr	r2, [r3, #8]
 8007914:	4940      	ldr	r1, [pc, #256]	; (8007a18 <BSP_TS_GetState+0x204>)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2068      	movs	r0, #104	; 0x68
 800791a:	fb00 f303 	mul.w	r3, r0, r3
 800791e:	440b      	add	r3, r1
 8007920:	3340      	adds	r3, #64	; 0x40
 8007922:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]) :
 8007924:	429a      	cmp	r2, r3
 8007926:	d90b      	bls.n	8007940 <BSP_TS_GetState+0x12c>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	493a      	ldr	r1, [pc, #232]	; (8007a18 <BSP_TS_GetState+0x204>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2068      	movs	r0, #104	; 0x68
 8007932:	fb00 f303 	mul.w	r3, r0, r3
 8007936:	440b      	add	r3, r1
 8007938:	3340      	adds	r3, #64	; 0x40
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	e00a      	b.n	8007956 <BSP_TS_GetState+0x142>
               (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8007940:	4a35      	ldr	r2, [pc, #212]	; (8007a18 <BSP_TS_GetState+0x204>)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2168      	movs	r1, #104	; 0x68
 8007946:	fb01 f303 	mul.w	r3, r1, r3
 800794a:	4413      	add	r3, r2
 800794c:	3340      	adds	r3, #64	; 0x40
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	689b      	ldr	r3, [r3, #8]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]) :
 8007954:	1ad3      	subs	r3, r2, r3
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0]) ?
 8007956:	617b      	str	r3, [r7, #20]

      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8007958:	4a2f      	ldr	r2, [pc, #188]	; (8007a18 <BSP_TS_GetState+0x204>)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2168      	movs	r1, #104	; 0x68
 800795e:	fb01 f303 	mul.w	r3, r1, r3
 8007962:	4413      	add	r3, r2
 8007964:	330c      	adds	r3, #12
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	429a      	cmp	r2, r3
 800796c:	d80a      	bhi.n	8007984 <BSP_TS_GetState+0x170>
 800796e:	4a2a      	ldr	r2, [pc, #168]	; (8007a18 <BSP_TS_GetState+0x204>)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2168      	movs	r1, #104	; 0x68
 8007974:	fb01 f303 	mul.w	r3, r1, r3
 8007978:	4413      	add	r3, r2
 800797a:	330c      	adds	r3, #12
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	429a      	cmp	r2, r3
 8007982:	d914      	bls.n	80079ae <BSP_TS_GetState+0x19a>
      {
        /* New touch detected */
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	4923      	ldr	r1, [pc, #140]	; (8007a18 <BSP_TS_GetState+0x204>)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2068      	movs	r0, #104	; 0x68
 800798e:	fb00 f303 	mul.w	r3, r0, r3
 8007992:	440b      	add	r3, r1
 8007994:	3318      	adds	r3, #24
 8007996:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	491e      	ldr	r1, [pc, #120]	; (8007a18 <BSP_TS_GetState+0x204>)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2068      	movs	r0, #104	; 0x68
 80079a2:	fb00 f303 	mul.w	r3, r0, r3
 80079a6:	440b      	add	r3, r1
 80079a8:	3340      	adds	r3, #64	; 0x40
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	e02b      	b.n	8007a06 <BSP_TS_GetState+0x1f2>
      }
      else
      {
        TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80079ae:	4a1a      	ldr	r2, [pc, #104]	; (8007a18 <BSP_TS_GetState+0x204>)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2168      	movs	r1, #104	; 0x68
 80079b4:	fb01 f303 	mul.w	r3, r1, r3
 80079b8:	4413      	add	r3, r2
 80079ba:	3318      	adds	r3, #24
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	605a      	str	r2, [r3, #4]
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80079c2:	4a15      	ldr	r2, [pc, #84]	; (8007a18 <BSP_TS_GetState+0x204>)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2168      	movs	r1, #104	; 0x68
 80079c8:	fb01 f303 	mul.w	r3, r1, r3
 80079cc:	4413      	add	r3, r2
 80079ce:	3340      	adds	r3, #64	; 0x40
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	609a      	str	r2, [r3, #8]
 80079d6:	e016      	b.n	8007a06 <BSP_TS_GetState+0x1f2>
      }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80079de:	4a0e      	ldr	r2, [pc, #56]	; (8007a18 <BSP_TS_GetState+0x204>)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2168      	movs	r1, #104	; 0x68
 80079e4:	fb01 f303 	mul.w	r3, r1, r3
 80079e8:	4413      	add	r3, r2
 80079ea:	3318      	adds	r3, #24
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80079f2:	4a09      	ldr	r2, [pc, #36]	; (8007a18 <BSP_TS_GetState+0x204>)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2168      	movs	r1, #104	; 0x68
 80079f8:	fb01 f303 	mul.w	r3, r1, r3
 80079fc:	4413      	add	r3, r2
 80079fe:	3340      	adds	r3, #64	; 0x40
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	609a      	str	r2, [r3, #8]
    }
  }

  return status;
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3728      	adds	r7, #40	; 0x28
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	20197e0c 	.word	0x20197e0c
 8007a14:	20197e08 	.word	0x20197e08
 8007a18:	20197e10 	.word	0x20197e10

08007a1c <SITRONIX_Probe>:
  * @brief  Probe the SITRONIX TS driver.
  * @param  Instance TS Instance.
  * @retval BSP status.
  */
static int32_t SITRONIX_Probe(uint32_t Instance)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08a      	sub	sp, #40	; 0x28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  int32_t                  status;
  SITRONIX_IO_t              IOCtx;
  static SITRONIX_Object_t SITRONIXObj;

  /* Configure the TS driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8007a24:	23e0      	movs	r3, #224	; 0xe0
 8007a26:	823b      	strh	r3, [r7, #16]
  IOCtx.Init        = BSP_I2C5_Init;
 8007a28:	4b1d      	ldr	r3, [pc, #116]	; (8007aa0 <SITRONIX_Probe+0x84>)
 8007a2a:	60bb      	str	r3, [r7, #8]
  IOCtx.DeInit      = BSP_I2C5_DeInit;
 8007a2c:	4b1d      	ldr	r3, [pc, #116]	; (8007aa4 <SITRONIX_Probe+0x88>)
 8007a2e:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg     = BSP_I2C5_ReadReg;
 8007a30:	4b1d      	ldr	r3, [pc, #116]	; (8007aa8 <SITRONIX_Probe+0x8c>)
 8007a32:	61bb      	str	r3, [r7, #24]
  IOCtx.WriteReg    = BSP_I2C5_WriteReg;
 8007a34:	4b1d      	ldr	r3, [pc, #116]	; (8007aac <SITRONIX_Probe+0x90>)
 8007a36:	617b      	str	r3, [r7, #20]
  IOCtx.ReadData    = BSP_I2C5_Recv;
 8007a38:	4b1d      	ldr	r3, [pc, #116]	; (8007ab0 <SITRONIX_Probe+0x94>)
 8007a3a:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8007a3c:	4b1d      	ldr	r3, [pc, #116]	; (8007ab4 <SITRONIX_Probe+0x98>)
 8007a3e:	623b      	str	r3, [r7, #32]

  if (SITRONIX_RegisterBusIO(&SITRONIXObj, &IOCtx) != SITRONIX_OK)
 8007a40:	f107 0308 	add.w	r3, r7, #8
 8007a44:	4619      	mov	r1, r3
 8007a46:	481c      	ldr	r0, [pc, #112]	; (8007ab8 <SITRONIX_Probe+0x9c>)
 8007a48:	f7fd f962 	bl	8004d10 <SITRONIX_RegisterBusIO>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <SITRONIX_Probe+0x3e>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8007a52:	f06f 0307 	mvn.w	r3, #7
 8007a56:	627b      	str	r3, [r7, #36]	; 0x24
 8007a58:	e01d      	b.n	8007a96 <SITRONIX_Probe+0x7a>
  }
  else
  {
    Ts_CompObj[Instance] = &SITRONIXObj;
 8007a5a:	4a18      	ldr	r2, [pc, #96]	; (8007abc <SITRONIX_Probe+0xa0>)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4916      	ldr	r1, [pc, #88]	; (8007ab8 <SITRONIX_Probe+0x9c>)
 8007a60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv[Instance]     = (TS_Drv_t *) &SITRONIX_TS_Driver;
 8007a64:	4a16      	ldr	r2, [pc, #88]	; (8007ac0 <SITRONIX_Probe+0xa4>)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4916      	ldr	r1, [pc, #88]	; (8007ac4 <SITRONIX_Probe+0xa8>)
 8007a6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (Ts_Drv[Instance]->Init(Ts_CompObj[Instance]) < 0)
 8007a6e:	4a14      	ldr	r2, [pc, #80]	; (8007ac0 <SITRONIX_Probe+0xa4>)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4910      	ldr	r1, [pc, #64]	; (8007abc <SITRONIX_Probe+0xa0>)
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007a80:	4610      	mov	r0, r2
 8007a82:	4798      	blx	r3
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	da03      	bge.n	8007a92 <SITRONIX_Probe+0x76>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8007a8a:	f06f 0304 	mvn.w	r3, #4
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a90:	e001      	b.n	8007a96 <SITRONIX_Probe+0x7a>
    }
    else
    {
      status = BSP_ERROR_NONE;
 8007a92:	2300      	movs	r3, #0
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return status;
 8007a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3728      	adds	r7, #40	; 0x28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	08005131 	.word	0x08005131
 8007aa4:	080051a5 	.word	0x080051a5
 8007aa8:	080052cd 	.word	0x080052cd
 8007aac:	08005271 	.word	0x08005271
 8007ab0:	08005329 	.word	0x08005329
 8007ab4:	08005379 	.word	0x08005379
 8007ab8:	20197e78 	.word	0x20197e78
 8007abc:	20197e08 	.word	0x20197e08
 8007ac0:	20197e0c 	.word	0x20197e0c
 8007ac4:	20000010 	.word	0x20000010

08007ac8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007acc:	4b18      	ldr	r3, [pc, #96]	; (8007b30 <SystemInit+0x68>)
 8007ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad2:	4a17      	ldr	r2, [pc, #92]	; (8007b30 <SystemInit+0x68>)
 8007ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8007adc:	4b15      	ldr	r3, [pc, #84]	; (8007b34 <SystemInit+0x6c>)
 8007ade:	2201      	movs	r2, #1
 8007ae0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8007ae2:	4b14      	ldr	r3, [pc, #80]	; (8007b34 <SystemInit+0x6c>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8007ae8:	4b12      	ldr	r3, [pc, #72]	; (8007b34 <SystemInit+0x6c>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8007aee:	4b11      	ldr	r3, [pc, #68]	; (8007b34 <SystemInit+0x6c>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8007af4:	4b0f      	ldr	r3, [pc, #60]	; (8007b34 <SystemInit+0x6c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a0e      	ldr	r2, [pc, #56]	; (8007b34 <SystemInit+0x6c>)
 8007afa:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007afe:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007b02:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8007b04:	4b0b      	ldr	r3, [pc, #44]	; (8007b34 <SystemInit+0x6c>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8007b0a:	4b0a      	ldr	r3, [pc, #40]	; (8007b34 <SystemInit+0x6c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a09      	ldr	r2, [pc, #36]	; (8007b34 <SystemInit+0x6c>)
 8007b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b14:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8007b16:	4b07      	ldr	r3, [pc, #28]	; (8007b34 <SystemInit+0x6c>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007b1c:	4b04      	ldr	r3, [pc, #16]	; (8007b30 <SystemInit+0x68>)
 8007b1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007b22:	609a      	str	r2, [r3, #8]
  #endif
}
 8007b24:	bf00      	nop
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	e000ed00 	.word	0xe000ed00
 8007b34:	46020c00 	.word	0x46020c00

08007b38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007b3c:	4b11      	ldr	r3, [pc, #68]	; (8007b84 <HAL_Init+0x4c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a10      	ldr	r2, [pc, #64]	; (8007b84 <HAL_Init+0x4c>)
 8007b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b48:	2003      	movs	r0, #3
 8007b4a:	f000 f914 	bl	8007d76 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007b4e:	f005 fd5f 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 8007b52:	4602      	mov	r2, r0
 8007b54:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <HAL_Init+0x50>)
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	f003 030f 	and.w	r3, r3, #15
 8007b5c:	490b      	ldr	r1, [pc, #44]	; (8007b8c <HAL_Init+0x54>)
 8007b5e:	5ccb      	ldrb	r3, [r1, r3]
 8007b60:	fa22 f303 	lsr.w	r3, r2, r3
 8007b64:	4a0a      	ldr	r2, [pc, #40]	; (8007b90 <HAL_Init+0x58>)
 8007b66:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007b68:	2000      	movs	r0, #0
 8007b6a:	f7fa fa67 	bl	800203c <HAL_InitTick>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e002      	b.n	8007b7e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007b78:	f7f9 ff84 	bl	8001a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	40022000 	.word	0x40022000
 8007b88:	46020c00 	.word	0x46020c00
 8007b8c:	0802bd7c 	.word	0x0802bd7c
 8007b90:	20000048 	.word	0x20000048

08007b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b94:	b480      	push	{r7}
 8007b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007b98:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <HAL_IncTick+0x20>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	4b06      	ldr	r3, [pc, #24]	; (8007bb8 <HAL_IncTick+0x24>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	4a04      	ldr	r2, [pc, #16]	; (8007bb8 <HAL_IncTick+0x24>)
 8007ba6:	6013      	str	r3, [r2, #0]
}
 8007ba8:	bf00      	nop
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	20000050 	.word	0x20000050
 8007bb8:	20197ea8 	.word	0x20197ea8

08007bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8007bc0:	4b03      	ldr	r3, [pc, #12]	; (8007bd0 <HAL_GetTick+0x14>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	20197ea8 	.word	0x20197ea8

08007bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007bdc:	f7ff ffee 	bl	8007bbc <HAL_GetTick>
 8007be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bec:	d005      	beq.n	8007bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007bee:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <HAL_Delay+0x44>)
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007bfa:	bf00      	nop
 8007bfc:	f7ff ffde 	bl	8007bbc <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d8f7      	bhi.n	8007bfc <HAL_Delay+0x28>
  {
  }
}
 8007c0c:	bf00      	nop
 8007c0e:	bf00      	nop
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20000050 	.word	0x20000050

08007c1c <__NVIC_SetPriorityGrouping>:
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c2c:	4b0c      	ldr	r3, [pc, #48]	; (8007c60 <__NVIC_SetPriorityGrouping+0x44>)
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007c38:	4013      	ands	r3, r2
 8007c3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c4e:	4a04      	ldr	r2, [pc, #16]	; (8007c60 <__NVIC_SetPriorityGrouping+0x44>)
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	60d3      	str	r3, [r2, #12]
}
 8007c54:	bf00      	nop
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	e000ed00 	.word	0xe000ed00

08007c64 <__NVIC_GetPriorityGrouping>:
{
 8007c64:	b480      	push	{r7}
 8007c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c68:	4b04      	ldr	r3, [pc, #16]	; (8007c7c <__NVIC_GetPriorityGrouping+0x18>)
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	0a1b      	lsrs	r3, r3, #8
 8007c6e:	f003 0307 	and.w	r3, r3, #7
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	e000ed00 	.word	0xe000ed00

08007c80 <__NVIC_EnableIRQ>:
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	4603      	mov	r3, r0
 8007c88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	db0b      	blt.n	8007caa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c92:	88fb      	ldrh	r3, [r7, #6]
 8007c94:	f003 021f 	and.w	r2, r3, #31
 8007c98:	4907      	ldr	r1, [pc, #28]	; (8007cb8 <__NVIC_EnableIRQ+0x38>)
 8007c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c9e:	095b      	lsrs	r3, r3, #5
 8007ca0:	2001      	movs	r0, #1
 8007ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007caa:	bf00      	nop
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	e000e100 	.word	0xe000e100

08007cbc <__NVIC_SetPriority>:
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	6039      	str	r1, [r7, #0]
 8007cc6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	db0a      	blt.n	8007ce6 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	490c      	ldr	r1, [pc, #48]	; (8007d08 <__NVIC_SetPriority+0x4c>)
 8007cd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007cda:	0112      	lsls	r2, r2, #4
 8007cdc:	b2d2      	uxtb	r2, r2
 8007cde:	440b      	add	r3, r1
 8007ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ce4:	e00a      	b.n	8007cfc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	4908      	ldr	r1, [pc, #32]	; (8007d0c <__NVIC_SetPriority+0x50>)
 8007cec:	88fb      	ldrh	r3, [r7, #6]
 8007cee:	f003 030f 	and.w	r3, r3, #15
 8007cf2:	3b04      	subs	r3, #4
 8007cf4:	0112      	lsls	r2, r2, #4
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	761a      	strb	r2, [r3, #24]
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	e000e100 	.word	0xe000e100
 8007d0c:	e000ed00 	.word	0xe000ed00

08007d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b089      	sub	sp, #36	; 0x24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f003 0307 	and.w	r3, r3, #7
 8007d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	f1c3 0307 	rsb	r3, r3, #7
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	bf28      	it	cs
 8007d2e:	2304      	movcs	r3, #4
 8007d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	3304      	adds	r3, #4
 8007d36:	2b06      	cmp	r3, #6
 8007d38:	d902      	bls.n	8007d40 <NVIC_EncodePriority+0x30>
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	3b03      	subs	r3, #3
 8007d3e:	e000      	b.n	8007d42 <NVIC_EncodePriority+0x32>
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d44:	f04f 32ff 	mov.w	r2, #4294967295
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4e:	43da      	mvns	r2, r3
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	401a      	ands	r2, r3
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d58:	f04f 31ff 	mov.w	r1, #4294967295
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d62:	43d9      	mvns	r1, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d68:	4313      	orrs	r3, r2
         );
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3724      	adds	r7, #36	; 0x24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7ff ff4c 	bl	8007c1c <__NVIC_SetPriorityGrouping>
}
 8007d84:	bf00      	nop
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
 8007d98:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007d9a:	f7ff ff63 	bl	8007c64 <__NVIC_GetPriorityGrouping>
 8007d9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	68b9      	ldr	r1, [r7, #8]
 8007da4:	6978      	ldr	r0, [r7, #20]
 8007da6:	f7ff ffb3 	bl	8007d10 <NVIC_EncodePriority>
 8007daa:	4602      	mov	r2, r0
 8007dac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007db0:	4611      	mov	r1, r2
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7ff ff82 	bl	8007cbc <__NVIC_SetPriority>
}
 8007db8:	bf00      	nop
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff ff56 	bl	8007c80 <__NVIC_EnableIRQ>
}
 8007dd4:	bf00      	nop
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e054      	b.n	8007e98 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	7f5b      	ldrb	r3, [r3, #29]
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d105      	bne.n	8007e04 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7f9 fe5a 	bl	8001ab8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	791b      	ldrb	r3, [r3, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10c      	bne.n	8007e2c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a22      	ldr	r2, [pc, #136]	; (8007ea0 <HAL_CRC_Init+0xc4>)
 8007e18:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689a      	ldr	r2, [r3, #8]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f022 0218 	bic.w	r2, r2, #24
 8007e28:	609a      	str	r2, [r3, #8]
 8007e2a:	e00c      	b.n	8007e46 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6899      	ldr	r1, [r3, #8]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	461a      	mov	r2, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f834 	bl	8007ea4 <HAL_CRCEx_Polynomial_Set>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e028      	b.n	8007e98 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	795b      	ldrb	r3, [r3, #5]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d105      	bne.n	8007e5a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f04f 32ff 	mov.w	r2, #4294967295
 8007e56:	611a      	str	r2, [r3, #16]
 8007e58:	e004      	b.n	8007e64 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	6912      	ldr	r2, [r2, #16]
 8007e62:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	695a      	ldr	r2, [r3, #20]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	699a      	ldr	r2, [r3, #24]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	04c11db7 	.word	0x04c11db7

08007ea4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007eb4:	231f      	movs	r3, #31
 8007eb6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d102      	bne.n	8007ec8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	75fb      	strb	r3, [r7, #23]
 8007ec6:	e063      	b.n	8007f90 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007ec8:	bf00      	nop
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	1e5a      	subs	r2, r3, #1
 8007ece:	613a      	str	r2, [r7, #16]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d009      	beq.n	8007ee8 <HAL_CRCEx_Polynomial_Set+0x44>
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f003 031f 	and.w	r3, r3, #31
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d0f0      	beq.n	8007eca <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b18      	cmp	r3, #24
 8007eec:	d846      	bhi.n	8007f7c <HAL_CRCEx_Polynomial_Set+0xd8>
 8007eee:	a201      	add	r2, pc, #4	; (adr r2, 8007ef4 <HAL_CRCEx_Polynomial_Set+0x50>)
 8007ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef4:	08007f83 	.word	0x08007f83
 8007ef8:	08007f7d 	.word	0x08007f7d
 8007efc:	08007f7d 	.word	0x08007f7d
 8007f00:	08007f7d 	.word	0x08007f7d
 8007f04:	08007f7d 	.word	0x08007f7d
 8007f08:	08007f7d 	.word	0x08007f7d
 8007f0c:	08007f7d 	.word	0x08007f7d
 8007f10:	08007f7d 	.word	0x08007f7d
 8007f14:	08007f71 	.word	0x08007f71
 8007f18:	08007f7d 	.word	0x08007f7d
 8007f1c:	08007f7d 	.word	0x08007f7d
 8007f20:	08007f7d 	.word	0x08007f7d
 8007f24:	08007f7d 	.word	0x08007f7d
 8007f28:	08007f7d 	.word	0x08007f7d
 8007f2c:	08007f7d 	.word	0x08007f7d
 8007f30:	08007f7d 	.word	0x08007f7d
 8007f34:	08007f65 	.word	0x08007f65
 8007f38:	08007f7d 	.word	0x08007f7d
 8007f3c:	08007f7d 	.word	0x08007f7d
 8007f40:	08007f7d 	.word	0x08007f7d
 8007f44:	08007f7d 	.word	0x08007f7d
 8007f48:	08007f7d 	.word	0x08007f7d
 8007f4c:	08007f7d 	.word	0x08007f7d
 8007f50:	08007f7d 	.word	0x08007f7d
 8007f54:	08007f59 	.word	0x08007f59
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	2b06      	cmp	r3, #6
 8007f5c:	d913      	bls.n	8007f86 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007f62:	e010      	b.n	8007f86 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	2b07      	cmp	r3, #7
 8007f68:	d90f      	bls.n	8007f8a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007f6e:	e00c      	b.n	8007f8a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	2b0f      	cmp	r3, #15
 8007f74:	d90b      	bls.n	8007f8e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007f7a:	e008      	b.n	8007f8e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	75fb      	strb	r3, [r7, #23]
        break;
 8007f80:	e006      	b.n	8007f90 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007f82:	bf00      	nop
 8007f84:	e004      	b.n	8007f90 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007f86:	bf00      	nop
 8007f88:	e002      	b.n	8007f90 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007f8a:	bf00      	nop
 8007f8c:	e000      	b.n	8007f90 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007f8e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10d      	bne.n	8007fb2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f023 0118 	bic.w	r1, r3, #24
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	371c      	adds	r7, #28
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e037      	b.n	8008042 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d119      	bne.n	8008012 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a1a      	ldr	r2, [pc, #104]	; (800804c <HAL_DCACHE_Init+0x8c>)
 8007fe2:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a1a      	ldr	r2, [pc, #104]	; (8008050 <HAL_DCACHE_Init+0x90>)
 8007fe8:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a19      	ldr	r2, [pc, #100]	; (8008054 <HAL_DCACHE_Init+0x94>)
 8007fee:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a19      	ldr	r2, [pc, #100]	; (8008058 <HAL_DCACHE_Init+0x98>)
 8007ff4:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a18      	ldr	r2, [pc, #96]	; (800805c <HAL_DCACHE_Init+0x9c>)
 8007ffa:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d102      	bne.n	800800a <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a16      	ldr	r2, [pc, #88]	; (8008060 <HAL_DCACHE_Init+0xa0>)
 8008008:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	430a      	orrs	r2, r1
 8008034:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f814 	bl	8008064 <HAL_DCACHE_Enable>
 800803c:	4603      	mov	r3, r0
 800803e:	73fb      	strb	r3, [r7, #15]

  return status;
 8008040:	7bfb      	ldrb	r3, [r7, #15]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	080081b3 	.word	0x080081b3
 8008050:	08008163 	.word	0x08008163
 8008054:	08008177 	.word	0x08008177
 8008058:	0800819f 	.word	0x0800819f
 800805c:	0800818b 	.word	0x0800818b
 8008060:	08001afd 	.word	0x08001afd

08008064 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e015      	b.n	80080a6 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f003 0309 	and.w	r3, r3, #9
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8008088:	2302      	movs	r3, #2
 800808a:	73fb      	strb	r3, [r7, #15]
 800808c:	e00a      	b.n	80080a4 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f042 0201 	orr.w	r2, r2, #1
 80080a2:	601a      	str	r2, [r3, #0]
  }

  return status;
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <HAL_DCACHE_Invalidate>:
  *                 the configuration information for the specified DCACHEx peripheral.
  * @note   This function waits for end of full cache invalidation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Invalidate(DCACHE_HandleTypeDef *hdcache)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <HAL_DCACHE_Invalidate+0x16>
  {
    return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e048      	b.n	800815a <HAL_DCACHE_Invalidate+0xa8>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f003 0309 	and.w	r3, r3, #9
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <HAL_DCACHE_Invalidate+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 80080d6:	2302      	movs	r3, #2
 80080d8:	73fb      	strb	r3, [r7, #15]
 80080da:	e03d      	b.n	8008158 <HAL_DCACHE_Invalidate+0xa6>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Change DCACHE Handle state */
    hdcache->State = HAL_DCACHE_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Make sure flags are reset */
    WRITE_REG(hdcache->Instance->FCR, (DCACHE_FCR_CBSYENDF | DCACHE_FCR_CCMDENDF));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2212      	movs	r2, #18
 80080f0:	60da      	str	r2, [r3, #12]

    /* Set no operation on address range */
    MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_CACHECMD, 0U);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008100:	601a      	str	r2, [r3, #0]

    /* Launch cache invalidation */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_CACHEINV);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f042 0202 	orr.w	r2, r2, #2
 8008110:	601a      	str	r2, [r3, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();
 8008112:	f7ff fd53 	bl	8007bbc <HAL_GetTick>
 8008116:	60b8      	str	r0, [r7, #8]

    /* Wait for end of cache invalidation */
    while (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 8008118:	e017      	b.n	800814a <HAL_DCACHE_Invalidate+0x98>
    {
      if ((HAL_GetTick() - tickstart) > DCACHE_COMMAND_TIMEOUT_VALUE)
 800811a:	f7ff fd4f 	bl	8007bbc <HAL_GetTick>
 800811e:	4602      	mov	r2, r0
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	2bc8      	cmp	r3, #200	; 0xc8
 8008126:	d910      	bls.n	800814a <HAL_DCACHE_Invalidate+0x98>
      {
        if (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	2b00      	cmp	r3, #0
 8008134:	d009      	beq.n	800814a <HAL_DCACHE_Invalidate+0x98>
        {
          /* Update error code */
          hdcache->ErrorCode = HAL_DCACHE_ERROR_TIMEOUT;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2210      	movs	r2, #16
 800813a:	629a      	str	r2, [r3, #40]	; 0x28

          /* Change the DCACHE state */
          hdcache->State = HAL_DCACHE_STATE_ERROR;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2206      	movs	r2, #6
 8008140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          /* Return error status */
          status =  HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	73fb      	strb	r3, [r7, #15]
          break;
 8008148:	e006      	b.n	8008158 <HAL_DCACHE_Invalidate+0xa6>
    while (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1e0      	bne.n	800811a <HAL_DCACHE_Invalidate+0x68>
        }
      }
    }
  }

  return status;
 8008158:	7bfb      	ldrb	r3, [r7, #15]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8008162:	b480      	push	{r7}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 800816a:	bf00      	nop
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8008176:	b480      	push	{r7}
 8008178:	b083      	sub	sp, #12
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 800817e:	bf00      	nop
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800818a:	b480      	push	{r7}
 800818c:	b083      	sub	sp, #12
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8008192:	bf00      	nop
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 800819e:	b480      	push	{r7}
 80081a0:	b083      	sub	sp, #12
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 80081a6:	bf00      	nop
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b083      	sub	sp, #12
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 80081ba:	bf00      	nop
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
	...

080081c8 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80081d0:	f7ff fcf4 	bl	8007bbc <HAL_GetTick>
 80081d4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d101      	bne.n	80081e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e0e0      	b.n	80083a2 <HAL_DMA_Init+0x1da>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a6f      	ldr	r2, [pc, #444]	; (80083ac <HAL_DMA_Init+0x1e4>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	f000 809f 	beq.w	8008332 <HAL_DMA_Init+0x16a>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a6d      	ldr	r2, [pc, #436]	; (80083b0 <HAL_DMA_Init+0x1e8>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	f000 8099 	beq.w	8008332 <HAL_DMA_Init+0x16a>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a6b      	ldr	r2, [pc, #428]	; (80083b4 <HAL_DMA_Init+0x1ec>)
 8008206:	4293      	cmp	r3, r2
 8008208:	f000 8093 	beq.w	8008332 <HAL_DMA_Init+0x16a>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a69      	ldr	r2, [pc, #420]	; (80083b8 <HAL_DMA_Init+0x1f0>)
 8008212:	4293      	cmp	r3, r2
 8008214:	f000 808d 	beq.w	8008332 <HAL_DMA_Init+0x16a>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a67      	ldr	r2, [pc, #412]	; (80083bc <HAL_DMA_Init+0x1f4>)
 800821e:	4293      	cmp	r3, r2
 8008220:	f000 8087 	beq.w	8008332 <HAL_DMA_Init+0x16a>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a65      	ldr	r2, [pc, #404]	; (80083c0 <HAL_DMA_Init+0x1f8>)
 800822a:	4293      	cmp	r3, r2
 800822c:	f000 8081 	beq.w	8008332 <HAL_DMA_Init+0x16a>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a63      	ldr	r2, [pc, #396]	; (80083c4 <HAL_DMA_Init+0x1fc>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d07b      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a62      	ldr	r2, [pc, #392]	; (80083c8 <HAL_DMA_Init+0x200>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d076      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a60      	ldr	r2, [pc, #384]	; (80083cc <HAL_DMA_Init+0x204>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d071      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a5f      	ldr	r2, [pc, #380]	; (80083d0 <HAL_DMA_Init+0x208>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d06c      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a5d      	ldr	r2, [pc, #372]	; (80083d4 <HAL_DMA_Init+0x20c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d067      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a5c      	ldr	r2, [pc, #368]	; (80083d8 <HAL_DMA_Init+0x210>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d062      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a5a      	ldr	r2, [pc, #360]	; (80083dc <HAL_DMA_Init+0x214>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d05d      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a59      	ldr	r2, [pc, #356]	; (80083e0 <HAL_DMA_Init+0x218>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d058      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a57      	ldr	r2, [pc, #348]	; (80083e4 <HAL_DMA_Init+0x21c>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d053      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a56      	ldr	r2, [pc, #344]	; (80083e8 <HAL_DMA_Init+0x220>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d04e      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a54      	ldr	r2, [pc, #336]	; (80083ec <HAL_DMA_Init+0x224>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d049      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a53      	ldr	r2, [pc, #332]	; (80083f0 <HAL_DMA_Init+0x228>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d044      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a51      	ldr	r2, [pc, #324]	; (80083f4 <HAL_DMA_Init+0x22c>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d03f      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a50      	ldr	r2, [pc, #320]	; (80083f8 <HAL_DMA_Init+0x230>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d03a      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a4e      	ldr	r2, [pc, #312]	; (80083fc <HAL_DMA_Init+0x234>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d035      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a4d      	ldr	r2, [pc, #308]	; (8008400 <HAL_DMA_Init+0x238>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d030      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a4b      	ldr	r2, [pc, #300]	; (8008404 <HAL_DMA_Init+0x23c>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d02b      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a4a      	ldr	r2, [pc, #296]	; (8008408 <HAL_DMA_Init+0x240>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d026      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a48      	ldr	r2, [pc, #288]	; (800840c <HAL_DMA_Init+0x244>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d021      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a47      	ldr	r2, [pc, #284]	; (8008410 <HAL_DMA_Init+0x248>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d01c      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a45      	ldr	r2, [pc, #276]	; (8008414 <HAL_DMA_Init+0x24c>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d017      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a44      	ldr	r2, [pc, #272]	; (8008418 <HAL_DMA_Init+0x250>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d012      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a42      	ldr	r2, [pc, #264]	; (800841c <HAL_DMA_Init+0x254>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d00d      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a41      	ldr	r2, [pc, #260]	; (8008420 <HAL_DMA_Init+0x258>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d008      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a3f      	ldr	r2, [pc, #252]	; (8008424 <HAL_DMA_Init+0x25c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d003      	beq.n	8008332 <HAL_DMA_Init+0x16a>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a3e      	ldr	r2, [pc, #248]	; (8008428 <HAL_DMA_Init+0x260>)
 8008330:	4293      	cmp	r3, r2
 8008332:	bf00      	nop
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	695a      	ldr	r2, [r3, #20]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f042 0206 	orr.w	r2, r2, #6
 8008352:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008354:	e00f      	b.n	8008376 <HAL_DMA_Init+0x1ae>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8008356:	f7ff fc31 	bl	8007bbc <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	2b05      	cmp	r3, #5
 8008362:	d908      	bls.n	8008376 <HAL_DMA_Init+0x1ae>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2210      	movs	r2, #16
 8008368:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2203      	movs	r2, #3
 800836e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e015      	b.n	80083a2 <HAL_DMA_Init+0x1da>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1e8      	bne.n	8008356 <HAL_DMA_Init+0x18e>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f8cd 	bl	8008524 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	40020050 	.word	0x40020050
 80083b0:	50020050 	.word	0x50020050
 80083b4:	400200d0 	.word	0x400200d0
 80083b8:	500200d0 	.word	0x500200d0
 80083bc:	40020150 	.word	0x40020150
 80083c0:	50020150 	.word	0x50020150
 80083c4:	400201d0 	.word	0x400201d0
 80083c8:	500201d0 	.word	0x500201d0
 80083cc:	40020250 	.word	0x40020250
 80083d0:	50020250 	.word	0x50020250
 80083d4:	400202d0 	.word	0x400202d0
 80083d8:	500202d0 	.word	0x500202d0
 80083dc:	40020350 	.word	0x40020350
 80083e0:	50020350 	.word	0x50020350
 80083e4:	400203d0 	.word	0x400203d0
 80083e8:	500203d0 	.word	0x500203d0
 80083ec:	40020450 	.word	0x40020450
 80083f0:	50020450 	.word	0x50020450
 80083f4:	400204d0 	.word	0x400204d0
 80083f8:	500204d0 	.word	0x500204d0
 80083fc:	40020550 	.word	0x40020550
 8008400:	50020550 	.word	0x50020550
 8008404:	400205d0 	.word	0x400205d0
 8008408:	500205d0 	.word	0x500205d0
 800840c:	40020650 	.word	0x40020650
 8008410:	50020650 	.word	0x50020650
 8008414:	400206d0 	.word	0x400206d0
 8008418:	500206d0 	.word	0x500206d0
 800841c:	40020750 	.word	0x40020750
 8008420:	50020750 	.word	0x50020750
 8008424:	400207d0 	.word	0x400207d0
 8008428:	500207d0 	.word	0x500207d0

0800842c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8008434:	f7ff fbc2 	bl	8007bbc <HAL_GetTick>
 8008438:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e06b      	b.n	800851c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b02      	cmp	r3, #2
 800844e:	d008      	beq.n	8008462 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2220      	movs	r2, #32
 8008454:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e05c      	b.n	800851c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	695a      	ldr	r2, [r3, #20]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f042 0204 	orr.w	r2, r2, #4
 8008470:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2205      	movs	r2, #5
 8008476:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800847a:	e020      	b.n	80084be <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800847c:	f7ff fb9e 	bl	8007bbc <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	2b05      	cmp	r3, #5
 8008488:	d919      	bls.n	80084be <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800848e:	f043 0210 	orr.w	r2, r3, #16
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2203      	movs	r2, #3
 800849a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ae:	2201      	movs	r2, #1
 80084b0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e02e      	b.n	800851c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d0d7      	beq.n	800847c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	695a      	ldr	r2, [r3, #20]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f042 0202 	orr.w	r2, r2, #2
 80084da:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2204      	movs	r2, #4
 80084e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80084ec:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d007      	beq.n	8008512 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008506:	2201      	movs	r2, #1
 8008508:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2200      	movs	r2, #0
 8008510:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	430a      	orrs	r2, r1
 8008544:	615a      	str	r2, [r3, #20]


  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	695a      	ldr	r2, [r3, #20]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	431a      	orrs	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	431a      	orrs	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	4313      	orrs	r3, r2
 800855c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a53      	ldr	r2, [pc, #332]	; (80086b0 <DMA_Init+0x18c>)
 8008564:	4293      	cmp	r3, r2
 8008566:	f000 80a0 	beq.w	80086aa <DMA_Init+0x186>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a51      	ldr	r2, [pc, #324]	; (80086b4 <DMA_Init+0x190>)
 8008570:	4293      	cmp	r3, r2
 8008572:	f000 809a 	beq.w	80086aa <DMA_Init+0x186>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a4f      	ldr	r2, [pc, #316]	; (80086b8 <DMA_Init+0x194>)
 800857c:	4293      	cmp	r3, r2
 800857e:	f000 8094 	beq.w	80086aa <DMA_Init+0x186>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a4d      	ldr	r2, [pc, #308]	; (80086bc <DMA_Init+0x198>)
 8008588:	4293      	cmp	r3, r2
 800858a:	f000 808e 	beq.w	80086aa <DMA_Init+0x186>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a4b      	ldr	r2, [pc, #300]	; (80086c0 <DMA_Init+0x19c>)
 8008594:	4293      	cmp	r3, r2
 8008596:	f000 8088 	beq.w	80086aa <DMA_Init+0x186>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a49      	ldr	r2, [pc, #292]	; (80086c4 <DMA_Init+0x1a0>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	f000 8082 	beq.w	80086aa <DMA_Init+0x186>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a47      	ldr	r2, [pc, #284]	; (80086c8 <DMA_Init+0x1a4>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d07c      	beq.n	80086aa <DMA_Init+0x186>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a45      	ldr	r2, [pc, #276]	; (80086cc <DMA_Init+0x1a8>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d077      	beq.n	80086aa <DMA_Init+0x186>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a44      	ldr	r2, [pc, #272]	; (80086d0 <DMA_Init+0x1ac>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d072      	beq.n	80086aa <DMA_Init+0x186>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a42      	ldr	r2, [pc, #264]	; (80086d4 <DMA_Init+0x1b0>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d06d      	beq.n	80086aa <DMA_Init+0x186>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a41      	ldr	r2, [pc, #260]	; (80086d8 <DMA_Init+0x1b4>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d068      	beq.n	80086aa <DMA_Init+0x186>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a3f      	ldr	r2, [pc, #252]	; (80086dc <DMA_Init+0x1b8>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d063      	beq.n	80086aa <DMA_Init+0x186>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a3e      	ldr	r2, [pc, #248]	; (80086e0 <DMA_Init+0x1bc>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d05e      	beq.n	80086aa <DMA_Init+0x186>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a3c      	ldr	r2, [pc, #240]	; (80086e4 <DMA_Init+0x1c0>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d059      	beq.n	80086aa <DMA_Init+0x186>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a3b      	ldr	r2, [pc, #236]	; (80086e8 <DMA_Init+0x1c4>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d054      	beq.n	80086aa <DMA_Init+0x186>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a39      	ldr	r2, [pc, #228]	; (80086ec <DMA_Init+0x1c8>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d04f      	beq.n	80086aa <DMA_Init+0x186>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a38      	ldr	r2, [pc, #224]	; (80086f0 <DMA_Init+0x1cc>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d04a      	beq.n	80086aa <DMA_Init+0x186>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a36      	ldr	r2, [pc, #216]	; (80086f4 <DMA_Init+0x1d0>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d045      	beq.n	80086aa <DMA_Init+0x186>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a35      	ldr	r2, [pc, #212]	; (80086f8 <DMA_Init+0x1d4>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d040      	beq.n	80086aa <DMA_Init+0x186>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a33      	ldr	r2, [pc, #204]	; (80086fc <DMA_Init+0x1d8>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d03b      	beq.n	80086aa <DMA_Init+0x186>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a32      	ldr	r2, [pc, #200]	; (8008700 <DMA_Init+0x1dc>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d036      	beq.n	80086aa <DMA_Init+0x186>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a30      	ldr	r2, [pc, #192]	; (8008704 <DMA_Init+0x1e0>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d031      	beq.n	80086aa <DMA_Init+0x186>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a2f      	ldr	r2, [pc, #188]	; (8008708 <DMA_Init+0x1e4>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d02c      	beq.n	80086aa <DMA_Init+0x186>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a2d      	ldr	r2, [pc, #180]	; (800870c <DMA_Init+0x1e8>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d027      	beq.n	80086aa <DMA_Init+0x186>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a2c      	ldr	r2, [pc, #176]	; (8008710 <DMA_Init+0x1ec>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d022      	beq.n	80086aa <DMA_Init+0x186>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a2a      	ldr	r2, [pc, #168]	; (8008714 <DMA_Init+0x1f0>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d01d      	beq.n	80086aa <DMA_Init+0x186>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a29      	ldr	r2, [pc, #164]	; (8008718 <DMA_Init+0x1f4>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d018      	beq.n	80086aa <DMA_Init+0x186>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a27      	ldr	r2, [pc, #156]	; (800871c <DMA_Init+0x1f8>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d013      	beq.n	80086aa <DMA_Init+0x186>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a26      	ldr	r2, [pc, #152]	; (8008720 <DMA_Init+0x1fc>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d00e      	beq.n	80086aa <DMA_Init+0x186>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a24      	ldr	r2, [pc, #144]	; (8008724 <DMA_Init+0x200>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d009      	beq.n	80086aa <DMA_Init+0x186>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a23      	ldr	r2, [pc, #140]	; (8008728 <DMA_Init+0x204>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d004      	beq.n	80086aa <DMA_Init+0x186>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a21      	ldr	r2, [pc, #132]	; (800872c <DMA_Init+0x208>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d142      	bne.n	8008730 <DMA_Init+0x20c>
 80086aa:	2301      	movs	r3, #1
 80086ac:	e041      	b.n	8008732 <DMA_Init+0x20e>
 80086ae:	bf00      	nop
 80086b0:	40020050 	.word	0x40020050
 80086b4:	50020050 	.word	0x50020050
 80086b8:	400200d0 	.word	0x400200d0
 80086bc:	500200d0 	.word	0x500200d0
 80086c0:	40020150 	.word	0x40020150
 80086c4:	50020150 	.word	0x50020150
 80086c8:	400201d0 	.word	0x400201d0
 80086cc:	500201d0 	.word	0x500201d0
 80086d0:	40020250 	.word	0x40020250
 80086d4:	50020250 	.word	0x50020250
 80086d8:	400202d0 	.word	0x400202d0
 80086dc:	500202d0 	.word	0x500202d0
 80086e0:	40020350 	.word	0x40020350
 80086e4:	50020350 	.word	0x50020350
 80086e8:	400203d0 	.word	0x400203d0
 80086ec:	500203d0 	.word	0x500203d0
 80086f0:	40020450 	.word	0x40020450
 80086f4:	50020450 	.word	0x50020450
 80086f8:	400204d0 	.word	0x400204d0
 80086fc:	500204d0 	.word	0x500204d0
 8008700:	40020550 	.word	0x40020550
 8008704:	50020550 	.word	0x50020550
 8008708:	400205d0 	.word	0x400205d0
 800870c:	500205d0 	.word	0x500205d0
 8008710:	40020650 	.word	0x40020650
 8008714:	50020650 	.word	0x50020650
 8008718:	400206d0 	.word	0x400206d0
 800871c:	500206d0 	.word	0x500206d0
 8008720:	40020750 	.word	0x40020750
 8008724:	50020750 	.word	0x50020750
 8008728:	400207d0 	.word	0x400207d0
 800872c:	500207d0 	.word	0x500207d0
 8008730:	2300      	movs	r3, #0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d012      	beq.n	800875c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873e:	3b01      	subs	r3, #1
 8008740:	051b      	lsls	r3, r3, #20
 8008742:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008746:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	3b01      	subs	r3, #1
 800874e:	011b      	lsls	r3, r3, #4
 8008750:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8008754:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008762:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	430a      	orrs	r2, r1
 800876e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	689a      	ldr	r2, [r3, #8]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800877c:	431a      	orrs	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008782:	4313      	orrs	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800878e:	f040 80b0 	bne.w	80088f2 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a82      	ldr	r2, [pc, #520]	; (80089a0 <DMA_Init+0x47c>)
 8008798:	4293      	cmp	r3, r2
 800879a:	f000 80a0 	beq.w	80088de <DMA_Init+0x3ba>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a80      	ldr	r2, [pc, #512]	; (80089a4 <DMA_Init+0x480>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	f000 809a 	beq.w	80088de <DMA_Init+0x3ba>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a7e      	ldr	r2, [pc, #504]	; (80089a8 <DMA_Init+0x484>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	f000 8094 	beq.w	80088de <DMA_Init+0x3ba>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a7c      	ldr	r2, [pc, #496]	; (80089ac <DMA_Init+0x488>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	f000 808e 	beq.w	80088de <DMA_Init+0x3ba>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a7a      	ldr	r2, [pc, #488]	; (80089b0 <DMA_Init+0x48c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	f000 8088 	beq.w	80088de <DMA_Init+0x3ba>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a78      	ldr	r2, [pc, #480]	; (80089b4 <DMA_Init+0x490>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	f000 8082 	beq.w	80088de <DMA_Init+0x3ba>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a76      	ldr	r2, [pc, #472]	; (80089b8 <DMA_Init+0x494>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d07c      	beq.n	80088de <DMA_Init+0x3ba>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a74      	ldr	r2, [pc, #464]	; (80089bc <DMA_Init+0x498>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d077      	beq.n	80088de <DMA_Init+0x3ba>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a73      	ldr	r2, [pc, #460]	; (80089c0 <DMA_Init+0x49c>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d072      	beq.n	80088de <DMA_Init+0x3ba>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a71      	ldr	r2, [pc, #452]	; (80089c4 <DMA_Init+0x4a0>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d06d      	beq.n	80088de <DMA_Init+0x3ba>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a70      	ldr	r2, [pc, #448]	; (80089c8 <DMA_Init+0x4a4>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d068      	beq.n	80088de <DMA_Init+0x3ba>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a6e      	ldr	r2, [pc, #440]	; (80089cc <DMA_Init+0x4a8>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d063      	beq.n	80088de <DMA_Init+0x3ba>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a6d      	ldr	r2, [pc, #436]	; (80089d0 <DMA_Init+0x4ac>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d05e      	beq.n	80088de <DMA_Init+0x3ba>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a6b      	ldr	r2, [pc, #428]	; (80089d4 <DMA_Init+0x4b0>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d059      	beq.n	80088de <DMA_Init+0x3ba>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a6a      	ldr	r2, [pc, #424]	; (80089d8 <DMA_Init+0x4b4>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d054      	beq.n	80088de <DMA_Init+0x3ba>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a68      	ldr	r2, [pc, #416]	; (80089dc <DMA_Init+0x4b8>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d04f      	beq.n	80088de <DMA_Init+0x3ba>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a67      	ldr	r2, [pc, #412]	; (80089e0 <DMA_Init+0x4bc>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d04a      	beq.n	80088de <DMA_Init+0x3ba>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a65      	ldr	r2, [pc, #404]	; (80089e4 <DMA_Init+0x4c0>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d045      	beq.n	80088de <DMA_Init+0x3ba>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a64      	ldr	r2, [pc, #400]	; (80089e8 <DMA_Init+0x4c4>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d040      	beq.n	80088de <DMA_Init+0x3ba>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a62      	ldr	r2, [pc, #392]	; (80089ec <DMA_Init+0x4c8>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d03b      	beq.n	80088de <DMA_Init+0x3ba>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a61      	ldr	r2, [pc, #388]	; (80089f0 <DMA_Init+0x4cc>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d036      	beq.n	80088de <DMA_Init+0x3ba>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a5f      	ldr	r2, [pc, #380]	; (80089f4 <DMA_Init+0x4d0>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d031      	beq.n	80088de <DMA_Init+0x3ba>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a5e      	ldr	r2, [pc, #376]	; (80089f8 <DMA_Init+0x4d4>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d02c      	beq.n	80088de <DMA_Init+0x3ba>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a5c      	ldr	r2, [pc, #368]	; (80089fc <DMA_Init+0x4d8>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d027      	beq.n	80088de <DMA_Init+0x3ba>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a5b      	ldr	r2, [pc, #364]	; (8008a00 <DMA_Init+0x4dc>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d022      	beq.n	80088de <DMA_Init+0x3ba>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a59      	ldr	r2, [pc, #356]	; (8008a04 <DMA_Init+0x4e0>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d01d      	beq.n	80088de <DMA_Init+0x3ba>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a58      	ldr	r2, [pc, #352]	; (8008a08 <DMA_Init+0x4e4>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d018      	beq.n	80088de <DMA_Init+0x3ba>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a56      	ldr	r2, [pc, #344]	; (8008a0c <DMA_Init+0x4e8>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d013      	beq.n	80088de <DMA_Init+0x3ba>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a55      	ldr	r2, [pc, #340]	; (8008a10 <DMA_Init+0x4ec>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d00e      	beq.n	80088de <DMA_Init+0x3ba>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a53      	ldr	r2, [pc, #332]	; (8008a14 <DMA_Init+0x4f0>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d009      	beq.n	80088de <DMA_Init+0x3ba>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a52      	ldr	r2, [pc, #328]	; (8008a18 <DMA_Init+0x4f4>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d004      	beq.n	80088de <DMA_Init+0x3ba>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a50      	ldr	r2, [pc, #320]	; (8008a1c <DMA_Init+0x4f8>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d101      	bne.n	80088e2 <DMA_Init+0x3be>
 80088de:	2301      	movs	r3, #1
 80088e0:	e000      	b.n	80088e4 <DMA_Init+0x3c0>
 80088e2:	2300      	movs	r3, #0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00d      	beq.n	8008904 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80088ee:	60fb      	str	r3, [r7, #12]
 80088f0:	e008      	b.n	8008904 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088fa:	d103      	bne.n	8008904 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008902:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800890a:	4b45      	ldr	r3, [pc, #276]	; (8008a20 <DMA_Init+0x4fc>)
 800890c:	4013      	ands	r3, r2
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	6812      	ldr	r2, [r2, #0]
 8008912:	68f9      	ldr	r1, [r7, #12]
 8008914:	430b      	orrs	r3, r1
 8008916:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2200      	movs	r2, #0
 800891e:	649a      	str	r2, [r3, #72]	; 0x48


  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a36      	ldr	r2, [pc, #216]	; (8008a00 <DMA_Init+0x4dc>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d022      	beq.n	8008970 <DMA_Init+0x44c>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a35      	ldr	r2, [pc, #212]	; (8008a04 <DMA_Init+0x4e0>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d01d      	beq.n	8008970 <DMA_Init+0x44c>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a33      	ldr	r2, [pc, #204]	; (8008a08 <DMA_Init+0x4e4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d018      	beq.n	8008970 <DMA_Init+0x44c>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a32      	ldr	r2, [pc, #200]	; (8008a0c <DMA_Init+0x4e8>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d013      	beq.n	8008970 <DMA_Init+0x44c>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a30      	ldr	r2, [pc, #192]	; (8008a10 <DMA_Init+0x4ec>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d00e      	beq.n	8008970 <DMA_Init+0x44c>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a2f      	ldr	r2, [pc, #188]	; (8008a14 <DMA_Init+0x4f0>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d009      	beq.n	8008970 <DMA_Init+0x44c>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a2d      	ldr	r2, [pc, #180]	; (8008a18 <DMA_Init+0x4f4>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d004      	beq.n	8008970 <DMA_Init+0x44c>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a2c      	ldr	r2, [pc, #176]	; (8008a1c <DMA_Init+0x4f8>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d101      	bne.n	8008974 <DMA_Init+0x450>
 8008970:	2301      	movs	r3, #1
 8008972:	e000      	b.n	8008976 <DMA_Init+0x452>
 8008974:	2300      	movs	r3, #0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d007      	beq.n	800898a <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2200      	movs	r2, #0
 8008980:	655a      	str	r2, [r3, #84]	; 0x54


    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2200      	movs	r2, #0
 8008988:	659a      	str	r2, [r3, #88]	; 0x58
  }


  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2200      	movs	r2, #0
 8008990:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008992:	bf00      	nop
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	40020050 	.word	0x40020050
 80089a4:	50020050 	.word	0x50020050
 80089a8:	400200d0 	.word	0x400200d0
 80089ac:	500200d0 	.word	0x500200d0
 80089b0:	40020150 	.word	0x40020150
 80089b4:	50020150 	.word	0x50020150
 80089b8:	400201d0 	.word	0x400201d0
 80089bc:	500201d0 	.word	0x500201d0
 80089c0:	40020250 	.word	0x40020250
 80089c4:	50020250 	.word	0x50020250
 80089c8:	400202d0 	.word	0x400202d0
 80089cc:	500202d0 	.word	0x500202d0
 80089d0:	40020350 	.word	0x40020350
 80089d4:	50020350 	.word	0x50020350
 80089d8:	400203d0 	.word	0x400203d0
 80089dc:	500203d0 	.word	0x500203d0
 80089e0:	40020450 	.word	0x40020450
 80089e4:	50020450 	.word	0x50020450
 80089e8:	400204d0 	.word	0x400204d0
 80089ec:	500204d0 	.word	0x500204d0
 80089f0:	40020550 	.word	0x40020550
 80089f4:	50020550 	.word	0x50020550
 80089f8:	400205d0 	.word	0x400205d0
 80089fc:	500205d0 	.word	0x500205d0
 8008a00:	40020650 	.word	0x40020650
 8008a04:	50020650 	.word	0x50020650
 8008a08:	400206d0 	.word	0x400206d0
 8008a0c:	500206d0 	.word	0x500206d0
 8008a10:	40020750 	.word	0x40020750
 8008a14:	50020750 	.word	0x50020750
 8008a18:	400207d0 	.word	0x400207d0
 8008a1c:	500207d0 	.word	0x500207d0
 8008a20:	3cc03180 	.word	0x3cc03180

08008a24 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e053      	b.n	8008ade <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d106      	bne.n	8008a50 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7f9 f890 	bl	8001b70 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2202      	movs	r2, #2
 8008a54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	6851      	ldr	r1, [r2, #4]
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	69d2      	ldr	r2, [r2, #28]
 8008a6e:	4311      	orrs	r1, r2
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	6812      	ldr	r2, [r2, #0]
 8008a74:	430b      	orrs	r3, r1
 8008a76:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7e:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 8008a82:	f023 0301 	bic.w	r3, r3, #1
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	6891      	ldr	r1, [r2, #8]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6992      	ldr	r2, [r2, #24]
 8008a8e:	4311      	orrs	r1, r2
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	6812      	ldr	r2, [r2, #0]
 8008a94:	430b      	orrs	r3, r1
 8008a96:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9e:	0c1b      	lsrs	r3, r3, #16
 8008aa0:	041b      	lsls	r3, r3, #16
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	68d1      	ldr	r1, [r2, #12]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	6812      	ldr	r2, [r2, #0]
 8008aaa:	430b      	orrs	r3, r1
 8008aac:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	051a      	lsls	r2, r3, #20
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	055b      	lsls	r3, r3, #21
 8008ac4:	431a      	orrs	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b084      	sub	sp, #16
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d026      	beq.n	8008b56 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d021      	beq.n	8008b56 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b20:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b26:	f043 0201 	orr.w	r2, r3, #1
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2201      	movs	r2, #1
 8008b34:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2204      	movs	r2, #4
 8008b3a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d003      	beq.n	8008b56 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f003 0320 	and.w	r3, r3, #32
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d026      	beq.n	8008bae <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d021      	beq.n	8008bae <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b78:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2220      	movs	r2, #32
 8008b80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b86:	f043 0202 	orr.w	r2, r3, #2
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2204      	movs	r2, #4
 8008b92:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f003 0308 	and.w	r3, r3, #8
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d026      	beq.n	8008c06 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d021      	beq.n	8008c06 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bd0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2208      	movs	r2, #8
 8008bd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bde:	f043 0204 	orr.w	r2, r3, #4
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2204      	movs	r2, #4
 8008bea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f003 0304 	and.w	r3, r3, #4
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d013      	beq.n	8008c38 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00e      	beq.n	8008c38 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c28:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2204      	movs	r2, #4
 8008c30:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f853 	bl	8008cde <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d024      	beq.n	8008c8c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d01f      	beq.n	8008c8c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008c5a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2202      	movs	r2, #2
 8008c62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferCpltCallback != NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d003      	beq.n	8008c8c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a1b      	ldr	r3, [r3, #32]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f003 0310 	and.w	r3, r3, #16
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d01f      	beq.n	8008cd6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01a      	beq.n	8008cd6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008cae:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2210      	movs	r2, #16
 8008cb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f80e 	bl	8008cf2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8008cd6:	bf00      	nop
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b083      	sub	sp, #12
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8008ce6:	bf00      	nop
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b083      	sub	sp, #12
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8008cfa:	bf00      	nop
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b085      	sub	sp, #20
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	60f8      	str	r0, [r7, #12]
 8008d0e:	60b9      	str	r1, [r7, #8]
 8008d10:	607a      	str	r2, [r7, #4]
 8008d12:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	019a      	lsls	r2, r3, #6
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	431a      	orrs	r2, r3
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	021b      	lsls	r3, r3, #8
 8008d20:	431a      	orrs	r2, r3
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	041b      	lsls	r3, r3, #16
 8008d26:	431a      	orrs	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008d2c:	bf00      	nop
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d46:	f7fe ff39 	bl	8007bbc <HAL_GetTick>
 8008d4a:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008d4c:	e008      	b.n	8008d60 <DSI_ShortWrite+0x28>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008d4e:	f7fe ff35 	bl	8007bbc <HAL_GetTick>
 8008d52:	4602      	mov	r2, r0
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	2b64      	cmp	r3, #100	; 0x64
 8008d5a:	d901      	bls.n	8008d60 <DSI_ShortWrite+0x28>
    {
      return HAL_TIMEOUT;
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	e015      	b.n	8008d8c <DSI_ShortWrite+0x54>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0ef      	beq.n	8008d4e <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	019a      	lsls	r2, r3, #6
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	431a      	orrs	r2, r3
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	021b      	lsls	r3, r3, #8
 8008d7a:	ea42 0103 	orr.w	r1, r2, r3
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	041a      	lsls	r2, r3, #16
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	430a      	orrs	r2, r1
 8008d88:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8008dac:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	; 0xc04
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	00da      	lsls	r2, r3, #3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	430a      	orrs	r2, r1
 8008dc4:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	220e      	movs	r2, #14
 8008dce:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	; 0xc70
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f022 021f 	bic.w	r2, r2, #31
 8008de2:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	6912      	ldr	r2, [r2, #16]
 8008dee:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	220e      	movs	r2, #14
 8008df8:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	; 0xd08
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f022 021f 	bic.w	r2, r2, #31
 8008e0c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	6912      	ldr	r2, [r2, #16]
 8008e18:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	220e      	movs	r2, #14
 8008e22:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	; 0xc5c
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008e36:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008e4a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d007      	beq.n	8008e66 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d003      	beq.n	8008e66 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8008e62:	2b05      	cmp	r3, #5
 8008e64:	d10a      	bne.n	8008e7c <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8008e7a:	e02c      	b.n	8008ed6 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00b      	beq.n	8008e9c <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d007      	beq.n	8008e9c <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d003      	beq.n	8008e9c <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8008e98:	2b06      	cmp	r3, #6
 8008e9a:	d10a      	bne.n	8008eb2 <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2210      	movs	r2, #16
 8008ea2:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2210      	movs	r2, #16
 8008eac:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8008eb0:	e011      	b.n	8008ed6 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	2b07      	cmp	r3, #7
 8008eb8:	d003      	beq.n	8008ec2 <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8008ebe:	2b08      	cmp	r3, #8
 8008ec0:	d109      	bne.n	8008ed6 <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2220      	movs	r2, #32
 8008ed2:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f022 020f 	bic.w	r2, r2, #15
 8008ee6:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	; 0xcf8
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f022 020f 	bic.w	r2, r2, #15
 8008efa:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	6952      	ldr	r2, [r2, #20]
 8008f06:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	6952      	ldr	r2, [r2, #20]
 8008f12:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

}
 8008f16:	bf00      	nop
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b083      	sub	sp, #12
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8008f3c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	075a      	lsls	r2, r3, #29
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	430a      	orrs	r2, r1
 8008f54:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8008f68:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	031a      	lsls	r2, r3, #12
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	021a      	lsls	r2, r3, #8
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	430a      	orrs	r2, r1
 8008f98:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d101      	bne.n	8008fbc <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e0c3      	b.n	8009144 <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	7e5b      	ldrb	r3, [r3, #25]
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d102      	bne.n	8008fcc <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f7f8 fdfa 	bl	8001bc0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2203      	movs	r2, #3
 8008fd0:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fe2:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 8008fe6:	2002      	movs	r0, #2
 8008fe8:	f7fe fdf4 	bl	8007bd4 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	4b54      	ldr	r3, [pc, #336]	; (800914c <HAL_DSI_Init+0x1a4>)
 8008ffa:	400b      	ands	r3, r1
 8008ffc:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8009014:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800901c:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	430a      	orrs	r2, r1
 8009024:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7ff feb3 	bl	8008d94 <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7ff ff76 	bl	8008f22 <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8009036:	2300      	movs	r3, #0
 8009038:	60bb      	str	r3, [r7, #8]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f042 0201 	orr.w	r2, r2, #1
 800904a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	60bb      	str	r3, [r7, #8]
 800905c:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800905e:	2001      	movs	r0, #1
 8009060:	f7fe fdb8 	bl	8007bd4 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8009064:	f7fe fdaa 	bl	8007bbc <HAL_GetTick>
 8009068:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800906a:	e008      	b.n	800907e <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800906c:	f7fe fda6 	bl	8007bbc <HAL_GetTick>
 8009070:	4602      	mov	r2, r0
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	2b64      	cmp	r3, #100	; 0x64
 8009078:	d901      	bls.n	800907e <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e062      	b.n	8009144 <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800908a:	2b00      	cmp	r3, #0
 800908c:	d0ee      	beq.n	800906c <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f042 0206 	orr.w	r2, r2, #6
 800909e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f022 0203 	bic.w	r2, r2, #3
 80090b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	431a      	orrs	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f042 0201 	orr.w	r2, r2, #1
 80090cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f022 0203 	bic.w	r2, r2, #3
 80090e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68da      	ldr	r2, [r3, #12]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	430a      	orrs	r2, r1
 80090f6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	689a      	ldr	r2, [r3, #8]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009108:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	6899      	ldr	r1, [r3, #8]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	689a      	ldr	r2, [r3, #8]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	430a      	orrs	r2, r1
 800911a:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2200      	movs	r2, #0
 8009122:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2200      	movs	r2, #0
 800912c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	e0000003 	.word	0xe0000003

08009150 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	7e1b      	ldrb	r3, [r3, #24]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d101      	bne.n	8009166 <HAL_DSI_ConfigErrorMonitor+0x16>
 8009162:	2302      	movs	r3, #2
 8009164:	e0ba      	b.n	80092dc <HAL_DSI_ConfigErrorMonitor+0x18c>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2200      	movs	r2, #0
 8009172:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2200      	movs	r2, #0
 800917c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	f003 0301 	and.w	r3, r3, #1
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00b      	beq.n	80091a8 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	6812      	ldr	r2, [r2, #0]
 800919c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80091a0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80091a4:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d009      	beq.n	80091c6 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80091c2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	f003 0304 	and.w	r3, r3, #4
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d009      	beq.n	80091e4 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f042 0201 	orr.w	r2, r2, #1
 80091e0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	f003 0308 	and.w	r3, r3, #8
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d009      	beq.n	8009202 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f042 0202 	orr.w	r2, r2, #2
 80091fe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	f003 0310 	and.w	r3, r3, #16
 8009208:	2b00      	cmp	r3, #0
 800920a:	d009      	beq.n	8009220 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f042 020c 	orr.w	r2, r2, #12
 800921c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	f003 0320 	and.w	r3, r3, #32
 8009226:	2b00      	cmp	r3, #0
 8009228:	d009      	beq.n	800923e <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f042 0210 	orr.w	r2, r2, #16
 800923a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009244:	2b00      	cmp	r3, #0
 8009246:	d009      	beq.n	800925c <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f042 0220 	orr.w	r2, r2, #32
 8009258:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009262:	2b00      	cmp	r3, #0
 8009264:	d009      	beq.n	800927a <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009276:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009280:	2b00      	cmp	r3, #0
 8009282:	d009      	beq.n	8009298 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009294:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d009      	beq.n	80092b6 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80092b2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d009      	beq.n	80092d4 <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80092d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	7e1b      	ldrb	r3, [r3, #24]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d101      	bne.n	80092fe <HAL_DSI_SetGenericVCID+0x16>
 80092fa:	2302      	movs	r3, #2
 80092fc:	e019      	b.n	8009332 <HAL_DSI_SetGenericVCID+0x4a>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2201      	movs	r2, #1
 8009302:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 8009312:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6b19      	ldr	r1, [r3, #48]	; 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	431a      	orrs	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	430a      	orrs	r2, r1
 8009328:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800933e:	b480      	push	{r7}
 8009340:	b083      	sub	sp, #12
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	7e1b      	ldrb	r3, [r3, #24]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d101      	bne.n	8009354 <HAL_DSI_ConfigVideoMode+0x16>
 8009350:	2302      	movs	r3, #2
 8009352:	e1f6      	b.n	8009742 <HAL_DSI_ConfigVideoMode+0x404>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	761a      	strb	r2, [r3, #24]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f022 0201 	bic.w	r2, r2, #1
 8009368:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f022 0201 	bic.w	r2, r2, #1
 800937a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f022 0203 	bic.w	r2, r2, #3
 800938c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	68da      	ldr	r2, [r3, #12]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	430a      	orrs	r2, r1
 800939e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	6812      	ldr	r2, [r2, #0]
 80093aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80093ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80093b2:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	691a      	ldr	r2, [r3, #16]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	430a      	orrs	r2, r1
 80093c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	6812      	ldr	r2, [r2, #0]
 80093d0:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80093d4:	f023 031f 	bic.w	r3, r3, #31
 80093d8:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	695a      	ldr	r2, [r3, #20]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	430a      	orrs	r2, r1
 80093ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	6812      	ldr	r2, [r2, #0]
 80093f6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80093fa:	f023 031f 	bic.w	r3, r3, #31
 80093fe:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	699a      	ldr	r2, [r3, #24]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	430a      	orrs	r2, r1
 8009410:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f022 0203 	bic.w	r2, r2, #3
 8009420:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68d9      	ldr	r1, [r3, #12]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	430a      	orrs	r2, r1
 8009432:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	695a      	ldr	r2, [r3, #20]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f022 0207 	bic.w	r2, r2, #7
 8009442:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6959      	ldr	r1, [r3, #20]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	431a      	orrs	r2, r3
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	431a      	orrs	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	430a      	orrs	r2, r1
 8009460:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	691a      	ldr	r2, [r3, #16]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f022 020f 	bic.w	r2, r2, #15
 8009470:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6919      	ldr	r1, [r3, #16]
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	430a      	orrs	r2, r1
 8009482:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f022 020e 	bic.w	r2, r2, #14
 8009494:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	005a      	lsls	r2, r3, #1
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	2b03      	cmp	r3, #3
 80094b6:	d110      	bne.n	80094da <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	691a      	ldr	r2, [r3, #16]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094c6:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6919      	ldr	r1, [r3, #16]
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	689a      	ldr	r2, [r3, #8]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	6812      	ldr	r2, [r2, #0]
 80094e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80094e8:	f023 030f 	bic.w	r3, r3, #15
 80094ec:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	430a      	orrs	r2, r1
 80094fe:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	6812      	ldr	r2, [r2, #0]
 800950a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800950e:	f023 030f 	bic.w	r3, r3, #15
 8009512:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	430a      	orrs	r2, r1
 8009524:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	6812      	ldr	r2, [r2, #0]
 8009530:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009534:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009538:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	430a      	orrs	r2, r1
 800954a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	6812      	ldr	r2, [r2, #0]
 8009556:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800955a:	f023 0303 	bic.w	r3, r3, #3
 800955e:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	430a      	orrs	r2, r1
 8009570:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	6812      	ldr	r2, [r2, #0]
 800957c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009580:	f023 0303 	bic.w	r3, r3, #3
 8009584:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	430a      	orrs	r2, r1
 8009596:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	6812      	ldr	r2, [r2, #0]
 80095a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80095a6:	f023 0303 	bic.w	r3, r3, #3
 80095aa:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	430a      	orrs	r2, r1
 80095bc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	6812      	ldr	r2, [r2, #0]
 80095c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80095cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80095d0:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	430a      	orrs	r2, r1
 80095e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80095f2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	430a      	orrs	r2, r1
 8009604:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	699a      	ldr	r2, [r3, #24]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8009614:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6999      	ldr	r1, [r3, #24]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009620:	041a      	lsls	r2, r3, #16
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	430a      	orrs	r2, r1
 8009628:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	699a      	ldr	r2, [r3, #24]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009638:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	6999      	ldr	r1, [r3, #24]
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	430a      	orrs	r2, r1
 800964a:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800965a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	430a      	orrs	r2, r1
 800966c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800967c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	430a      	orrs	r2, r1
 800968e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800969e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	430a      	orrs	r2, r1
 80096b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096c0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	430a      	orrs	r2, r1
 80096d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80096e2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	430a      	orrs	r2, r1
 80096f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009704:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	430a      	orrs	r2, r1
 8009716:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009726:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	430a      	orrs	r2, r1
 8009738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr

0800974e <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800974e:	b480      	push	{r7}
 8009750:	b083      	sub	sp, #12
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	7e1b      	ldrb	r3, [r3, #24]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d101      	bne.n	8009764 <HAL_DSI_ConfigFlowControl+0x16>
 8009760:	2302      	movs	r3, #2
 8009762:	e016      	b.n	8009792 <HAL_DSI_ConfigFlowControl+0x44>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8009778:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	430a      	orrs	r2, r1
 8009788:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	370c      	adds	r7, #12
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr

0800979e <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800979e:	b480      	push	{r7}
 80097a0:	b085      	sub	sp, #20
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	7e1b      	ldrb	r3, [r3, #24]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d101      	bne.n	80097b4 <HAL_DSI_ConfigPhyTimer+0x16>
 80097b0:	2302      	movs	r3, #2
 80097b2:	e084      	b.n	80098be <HAL_DSI_ConfigPhyTimer+0x120>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	441a      	add	r2, r3
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	6859      	ldr	r1, [r3, #4]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	695a      	ldr	r2, [r3, #20]
 80097d0:	4613      	mov	r3, r2
 80097d2:	005b      	lsls	r3, r3, #1
 80097d4:	4413      	add	r3, r2
 80097d6:	18ca      	adds	r2, r1, r3
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	68da      	ldr	r2, [r3, #12]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	005b      	lsls	r3, r3, #1
 80097e6:	441a      	add	r2, r3
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	4293      	cmp	r3, r2
 80097f6:	bf38      	it	cc
 80097f8:	4613      	movcc	r3, r2
 80097fa:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800980c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	041a      	lsls	r2, r3, #16
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	431a      	orrs	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	430a      	orrs	r2, r1
 8009826:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800983a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	68da      	ldr	r2, [r3, #12]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	041b      	lsls	r3, r3, #16
 8009850:	431a      	orrs	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	430a      	orrs	r2, r1
 8009858:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	6812      	ldr	r2, [r2, #0]
 8009868:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800986c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009870:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	691a      	ldr	r2, [r3, #16]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	430a      	orrs	r2, r1
 8009886:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800989a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	021a      	lsls	r2, r3, #8
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	430a      	orrs	r2, r1
 80098b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80098ca:	b480      	push	{r7}
 80098cc:	b083      	sub	sp, #12
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	7e1b      	ldrb	r3, [r3, #24]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d101      	bne.n	80098e0 <HAL_DSI_ConfigHostTimeouts+0x16>
 80098dc:	2302      	movs	r3, #2
 80098de:	e0b4      	b.n	8009a4a <HAL_DSI_ConfigHostTimeouts+0x180>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	689a      	ldr	r2, [r3, #8]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80098f4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6899      	ldr	r1, [r3, #8]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	021a      	lsls	r2, r3, #8
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	430a      	orrs	r2, r1
 8009908:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	b292      	uxth	r2, r2
 8009916:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	041a      	lsls	r2, r3, #16
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	430a      	orrs	r2, r1
 800992a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	6812      	ldr	r2, [r2, #0]
 8009936:	0c1b      	lsrs	r3, r3, #16
 8009938:	041b      	lsls	r3, r3, #16
 800993a:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	689a      	ldr	r2, [r3, #8]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	430a      	orrs	r2, r1
 800994c:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	6812      	ldr	r2, [r2, #0]
 8009958:	0c1b      	lsrs	r3, r3, #16
 800995a:	041b      	lsls	r3, r3, #16
 800995c:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	68da      	ldr	r2, [r3, #12]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	430a      	orrs	r2, r1
 800996e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	6812      	ldr	r2, [r2, #0]
 800997c:	0c1b      	lsrs	r3, r3, #16
 800997e:	041b      	lsls	r3, r3, #16
 8009980:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	691a      	ldr	r2, [r3, #16]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	430a      	orrs	r2, r1
 8009996:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	6812      	ldr	r2, [r2, #0]
 80099a6:	0c1b      	lsrs	r3, r3, #16
 80099a8:	041b      	lsls	r3, r3, #16
 80099aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	695a      	ldr	r2, [r3, #20]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80099d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	699a      	ldr	r2, [r3, #24]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	430a      	orrs	r2, r1
 80099ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	6812      	ldr	r2, [r2, #0]
 80099fa:	0c1b      	lsrs	r3, r3, #16
 80099fc:	041b      	lsls	r3, r3, #16
 80099fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	69da      	ldr	r2, [r3, #28]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	430a      	orrs	r2, r1
 8009a14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	6812      	ldr	r2, [r2, #0]
 8009a24:	0c1b      	lsrs	r3, r3, #16
 8009a26:	041b      	lsls	r3, r3, #16
 8009a28:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	6a1a      	ldr	r2, [r3, #32]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	430a      	orrs	r2, r1
 8009a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b085      	sub	sp, #20
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	7e1b      	ldrb	r3, [r3, #24]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d101      	bne.n	8009a6a <HAL_DSI_Start+0x14>
 8009a66:	2302      	movs	r3, #2
 8009a68:	e02b      	b.n	8009ac2 <HAL_DSI_Start+0x6c>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	761a      	strb	r2, [r3, #24]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8009a70:	2300      	movs	r3, #0
 8009a72:	60fb      	str	r3, [r7, #12]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685a      	ldr	r2, [r3, #4]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f042 0201 	orr.w	r2, r2, #1
 8009a82:	605a      	str	r2, [r3, #4]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	60fb      	str	r3, [r7, #12]
 8009a90:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8009a92:	2300      	movs	r3, #0
 8009a94:	60bb      	str	r3, [r7, #8]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f042 0208 	orr.w	r2, r2, #8
 8009aa6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ab2:	f003 0308 	and.w	r3, r3, #8
 8009ab6:	60bb      	str	r3, [r7, #8]
 8009ab8:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3714      	adds	r7, #20
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b088      	sub	sp, #32
 8009ad2:	af02      	add	r7, sp, #8
 8009ad4:	60f8      	str	r0, [r7, #12]
 8009ad6:	60b9      	str	r1, [r7, #8]
 8009ad8:	607a      	str	r2, [r7, #4]
 8009ada:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	7e1b      	ldrb	r3, [r3, #24]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d101      	bne.n	8009ae8 <HAL_DSI_ShortWrite+0x1a>
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	e010      	b.n	8009b0a <HAL_DSI_ShortWrite+0x3c>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2201      	movs	r2, #1
 8009aec:	761a      	strb	r2, [r3, #24]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8009aee:	6a3b      	ldr	r3, [r7, #32]
 8009af0:	9300      	str	r3, [sp, #0]
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	68b9      	ldr	r1, [r7, #8]
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f7ff f91d 	bl	8008d38 <DSI_ShortWrite>
 8009afe:	4603      	mov	r3, r0
 8009b00:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	761a      	strb	r2, [r3, #24]

  return status;
 8009b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b08c      	sub	sp, #48	; 0x30
 8009b16:	af02      	add	r7, sp, #8
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	60b9      	str	r1, [r7, #8]
 8009b1c:	607a      	str	r2, [r7, #4]
 8009b1e:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8009b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b22:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	7e1b      	ldrb	r3, [r3, #24]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d101      	bne.n	8009b30 <HAL_DSI_LongWrite+0x1e>
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	e083      	b.n	8009c38 <HAL_DSI_LongWrite+0x126>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2201      	movs	r2, #1
 8009b34:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b36:	f7fe f841 	bl	8007bbc <HAL_GetTick>
 8009b3a:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8009b3c:	e00b      	b.n	8009b56 <HAL_DSI_LongWrite+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009b3e:	f7fe f83d 	bl	8007bbc <HAL_GetTick>
 8009b42:	4602      	mov	r2, r0
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	1ad3      	subs	r3, r2, r3
 8009b48:	2b64      	cmp	r3, #100	; 0x64
 8009b4a:	d904      	bls.n	8009b56 <HAL_DSI_LongWrite+0x44>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e070      	b.n	8009c38 <HAL_DSI_LongWrite+0x126>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b5c:	f003 0301 	and.w	r3, r3, #1
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d0ec      	beq.n	8009b3e <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8009b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b66:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	bf28      	it	cs
 8009b6e:	2303      	movcs	r3, #3
 8009b70:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8009b72:	2300      	movs	r3, #0
 8009b74:	623b      	str	r3, [r7, #32]
 8009b76:	e00f      	b.n	8009b98 <HAL_DSI_LongWrite+0x86>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	461a      	mov	r2, r3
 8009b82:	6a3b      	ldr	r3, [r7, #32]
 8009b84:	3301      	adds	r3, #1
 8009b86:	00db      	lsls	r3, r3, #3
 8009b88:	fa02 f303 	lsl.w	r3, r2, r3
 8009b8c:	69fa      	ldr	r2, [r7, #28]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	3301      	adds	r3, #1
 8009b96:	623b      	str	r3, [r7, #32]
 8009b98:	6a3a      	ldr	r2, [r7, #32]
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d3eb      	bcc.n	8009b78 <HAL_DSI_LongWrite+0x66>
  }
  hdsi->Instance->GPDR = fifoword;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	69fa      	ldr	r2, [r7, #28]
 8009ba6:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8009bb0:	69ba      	ldr	r2, [r7, #24]
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8009bb8:	e028      	b.n	8009c0c <HAL_DSI_LongWrite+0xfa>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbc:	2b04      	cmp	r3, #4
 8009bbe:	bf28      	it	cs
 8009bc0:	2304      	movcs	r3, #4
 8009bc2:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8009bc8:	2300      	movs	r3, #0
 8009bca:	623b      	str	r3, [r7, #32]
 8009bcc:	e00e      	b.n	8009bec <HAL_DSI_LongWrite+0xda>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009bce:	69ba      	ldr	r2, [r7, #24]
 8009bd0:	6a3b      	ldr	r3, [r7, #32]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	00db      	lsls	r3, r3, #3
 8009bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8009be0:	69fa      	ldr	r2, [r7, #28]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	3301      	adds	r3, #1
 8009bea:	623b      	str	r3, [r7, #32]
 8009bec:	6a3a      	ldr	r2, [r7, #32]
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d3ec      	bcc.n	8009bce <HAL_DSI_LongWrite+0xbc>
    }
    hdsi->Instance->GPDR = fifoword;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	69fa      	ldr	r2, [r7, #28]
 8009bfa:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8009bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8009c04:	69ba      	ldr	r2, [r7, #24]
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	4413      	add	r3, r2
 8009c0a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1d3      	bne.n	8009bba <HAL_DSI_LongWrite+0xa8>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8009c1a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	4613      	mov	r3, r2
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	68b9      	ldr	r1, [r7, #8]
 8009c2c:	f7ff f86b 	bl	8008d06 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2200      	movs	r2, #0
 8009c34:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3728      	adds	r7, #40	; 0x28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <HAL_DSI_EnterULPM>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_EnterULPM(DSI_HandleTypeDef *hdsi)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	7e1b      	ldrb	r3, [r3, #24]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d101      	bne.n	8009c54 <HAL_DSI_EnterULPM+0x14>
 8009c50:	2302      	movs	r3, #2
 8009c52:	e106      	b.n	8009e62 <HAL_DSI_EnterULPM+0x222>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2201      	movs	r2, #1
 8009c58:	761a      	strb	r2, [r3, #24]

  /* Verify the initial status of the DSI Host */

  /* Verify that the clock lane and the digital section of the D-PHY are enabled */
  if ((hdsi->Instance->PCTLR & (DSI_PCTLR_CKE | DSI_PCTLR_DEN)) != (DSI_PCTLR_CKE | DSI_PCTLR_DEN))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c62:	f003 0306 	and.w	r3, r3, #6
 8009c66:	2b06      	cmp	r3, #6
 8009c68:	d004      	beq.n	8009c74 <HAL_DSI_EnterULPM+0x34>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e0f6      	b.n	8009e62 <HAL_DSI_EnterULPM+0x222>
  }

  /* Verify that the D-PHY PLL and the reference bias are enabled */
  if ((hdsi->Instance->WRPCR & DSI_WRPCR_PLLEN) != DSI_WRPCR_PLLEN)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8009c7c:	f003 0301 	and.w	r3, r3, #1
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d004      	beq.n	8009c8e <HAL_DSI_EnterULPM+0x4e>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e0e9      	b.n	8009e62 <HAL_DSI_EnterULPM+0x222>
  }
  else if ((hdsi->Instance->BCFGR  & DSI_BCFGR_PWRUP) != DSI_BCFGR_PWRUP)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8009c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c9a:	2b40      	cmp	r3, #64	; 0x40
 8009c9c:	d004      	beq.n	8009ca8 <HAL_DSI_EnterULPM+0x68>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e0dc      	b.n	8009e62 <HAL_DSI_EnterULPM+0x222>
  {
    /* Nothing to do */
  }

  /* Verify that there are no ULPS exit or request on both data and clock lanes */
  if ((hdsi->Instance->PUCR & (DSI_PUCR_UEDL | DSI_PUCR_URDL | DSI_PUCR_UECL | DSI_PUCR_URCL)) != 0U)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009cb0:	f003 030f 	and.w	r3, r3, #15
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d004      	beq.n	8009cc2 <HAL_DSI_EnterULPM+0x82>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e0cf      	b.n	8009e62 <HAL_DSI_EnterULPM+0x222>
  }

  /* Verify that there are no Transmission trigger */
  if ((hdsi->Instance->PTTCR & DSI_PTTCR_TX_TRIG) != 0U)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009cca:	f003 030f 	and.w	r3, r3, #15
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d004      	beq.n	8009cdc <HAL_DSI_EnterULPM+0x9c>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e0c2      	b.n	8009e62 <HAL_DSI_EnterULPM+0x222>
  }

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8009cdc:	2001      	movs	r0, #1
 8009cde:	f7fd ff79 	bl	8007bd4 <HAL_Delay>

  /* Verify that D-PHY PLL is locked */
  tickstart = HAL_GetTick();
 8009ce2:	f7fd ff6b 	bl	8007bbc <HAL_GetTick>
 8009ce6:	60f8      	str	r0, [r7, #12]

  while ((__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U))
 8009ce8:	e00b      	b.n	8009d02 <HAL_DSI_EnterULPM+0xc2>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009cea:	f7fd ff67 	bl	8007bbc <HAL_GetTick>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	2b64      	cmp	r3, #100	; 0x64
 8009cf6:	d904      	bls.n	8009d02 <HAL_DSI_EnterULPM+0xc2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	e0af      	b.n	8009e62 <HAL_DSI_EnterULPM+0x222>
  while ((__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d0eb      	beq.n	8009cea <HAL_DSI_EnterULPM+0xaa>
    }
  }

  /* Verify that all active lanes are in Stop state */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d1a:	f003 0303 	and.w	r3, r3, #3
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10c      	bne.n	8009d3c <HAL_DSI_EnterULPM+0xfc>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0))
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009d2e:	2b30      	cmp	r3, #48	; 0x30
 8009d30:	d01f      	beq.n	8009d72 <HAL_DSI_EnterULPM+0x132>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e092      	b.n	8009e62 <HAL_DSI_EnterULPM+0x222>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d44:	f003 0303 	and.w	r3, r3, #3
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d10d      	bne.n	8009d68 <HAL_DSI_EnterULPM+0x128>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | \
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d54:	f403 73d8 	and.w	r3, r3, #432	; 0x1b0
 8009d58:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8009d5c:	d009      	beq.n	8009d72 <HAL_DSI_EnterULPM+0x132>
                                DSI_PSR_UAN1)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_UAN1))
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	e07c      	b.n	8009e62 <HAL_DSI_EnterULPM+0x222>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e077      	b.n	8009e62 <HAL_DSI_EnterULPM+0x222>
  }

  /* Clock lane configuration: no more HS request */
  hdsi->Instance->CLCR &= ~DSI_CLCR_DPCC;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f022 0201 	bic.w	r2, r2, #1
 8009d82:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Use system PLL as byte lane clock source before stopping DSIPHY clock source */
  __HAL_RCC_DSI_CONFIG(RCC_DSICLKSOURCE_PLL3);
 8009d86:	4b39      	ldr	r3, [pc, #228]	; (8009e6c <HAL_DSI_EnterULPM+0x22c>)
 8009d88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009d8c:	4a37      	ldr	r2, [pc, #220]	; (8009e6c <HAL_DSI_EnterULPM+0x22c>)
 8009d8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d92:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4

  /* ULPS Request on Clock and Data Lanes */
  hdsi->Instance->PUCR |= (DSI_PUCR_URCL | DSI_PUCR_URDL);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f042 0205 	orr.w	r2, r2, #5
 8009da6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Get tick */
  tickstart = HAL_GetTick();
 8009daa:	f7fd ff07 	bl	8007bbc <HAL_GetTick>
 8009dae:	60f8      	str	r0, [r7, #12]

  /* Wait until all active lanes enter ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009db8:	f003 0303 	and.w	r3, r3, #3
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d115      	bne.n	8009dec <HAL_DSI_EnterULPM+0x1ac>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != 0U)
 8009dc0:	e00b      	b.n	8009dda <HAL_DSI_EnterULPM+0x19a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009dc2:	f7fd fefb 	bl	8007bbc <HAL_GetTick>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	1ad3      	subs	r3, r2, r3
 8009dcc:	2b64      	cmp	r3, #100	; 0x64
 8009dce:	d904      	bls.n	8009dda <HAL_DSI_EnterULPM+0x19a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	e043      	b.n	8009e62 <HAL_DSI_EnterULPM+0x222>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != 0U)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009de2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1eb      	bne.n	8009dc2 <HAL_DSI_EnterULPM+0x182>
 8009dea:	e022      	b.n	8009e32 <HAL_DSI_EnterULPM+0x1f2>
      }
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009df4:	f003 0303 	and.w	r3, r3, #3
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d115      	bne.n	8009e28 <HAL_DSI_EnterULPM+0x1e8>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != 0U)
 8009dfc:	e00b      	b.n	8009e16 <HAL_DSI_EnterULPM+0x1d6>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009dfe:	f7fd fedd 	bl	8007bbc <HAL_GetTick>
 8009e02:	4602      	mov	r2, r0
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	2b64      	cmp	r3, #100	; 0x64
 8009e0a:	d904      	bls.n	8009e16 <HAL_DSI_EnterULPM+0x1d6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009e12:	2303      	movs	r3, #3
 8009e14:	e025      	b.n	8009e62 <HAL_DSI_EnterULPM+0x222>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != 0U)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e1e:	f403 7394 	and.w	r3, r3, #296	; 0x128
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1eb      	bne.n	8009dfe <HAL_DSI_EnterULPM+0x1be>
 8009e26:	e004      	b.n	8009e32 <HAL_DSI_EnterULPM+0x1f2>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e017      	b.n	8009e62 <HAL_DSI_EnterULPM+0x222>
  }

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8009e32:	2300      	movs	r3, #0
 8009e34:	60bb      	str	r3, [r7, #8]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f022 0201 	bic.w	r2, r2, #1
 8009e46:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8009e52:	f003 0301 	and.w	r3, r3, #1
 8009e56:	60bb      	str	r3, [r7, #8]
 8009e58:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	46020c00 	.word	0x46020c00

08009e70 <HAL_DSI_ExitULPM>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ExitULPM(DSI_HandleTypeDef *hdsi)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	7e1b      	ldrb	r3, [r3, #24]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d101      	bne.n	8009e84 <HAL_DSI_ExitULPM+0x14>
 8009e80:	2302      	movs	r3, #2
 8009e82:	e125      	b.n	800a0d0 <HAL_DSI_ExitULPM+0x260>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	761a      	strb	r2, [r3, #24]

  /* Verify that all active lanes are in ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e92:	f003 0303 	and.w	r3, r3, #3
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10c      	bne.n	8009eb4 <HAL_DSI_ExitULPM+0x44>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_RUE0 | DSI_PSR_UAN0 | DSI_PSR_PSS0 | \
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ea2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d01e      	beq.n	8009ee8 <HAL_DSI_ExitULPM+0x78>
                                DSI_PSR_UANC | DSI_PSR_PSSC | DSI_PSR_PD)) != 0U)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	761a      	strb	r2, [r3, #24]

      return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e10d      	b.n	800a0d0 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009ebc:	f003 0303 	and.w	r3, r3, #3
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d10c      	bne.n	8009ede <HAL_DSI_ExitULPM+0x6e>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_RUE0 | DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_UAN1 | \
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ecc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d009      	beq.n	8009ee8 <HAL_DSI_ExitULPM+0x78>
                                DSI_PSR_PSS1 | DSI_PSR_UANC | DSI_PSR_PSSC | DSI_PSR_PD)) != 0U)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	761a      	strb	r2, [r3, #24]

      return HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	e0f8      	b.n	800a0d0 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e0f3      	b.n	800a0d0 <HAL_DSI_ExitULPM+0x260>
  }

  /* Turn on the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8009ee8:	2300      	movs	r3, #0
 8009eea:	60bb      	str	r3, [r7, #8]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f042 0201 	orr.w	r2, r2, #1
 8009efc:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8009f08:	f003 0301 	and.w	r3, r3, #1
 8009f0c:	60bb      	str	r3, [r7, #8]
 8009f0e:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8009f10:	2001      	movs	r0, #1
 8009f12:	f7fd fe5f 	bl	8007bd4 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f16:	f7fd fe51 	bl	8007bbc <HAL_GetTick>
 8009f1a:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8009f1c:	e00b      	b.n	8009f36 <HAL_DSI_ExitULPM+0xc6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009f1e:	f7fd fe4d 	bl	8007bbc <HAL_GetTick>
 8009f22:	4602      	mov	r2, r0
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	2b64      	cmp	r3, #100	; 0x64
 8009f2a:	d904      	bls.n	8009f36 <HAL_DSI_ExitULPM+0xc6>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e0cc      	b.n	800a0d0 <HAL_DSI_ExitULPM+0x260>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d0eb      	beq.n	8009f1e <HAL_DSI_ExitULPM+0xae>
    }
  }

  /* Exit ULPS on Clock and Data Lanes */
  hdsi->Instance->PUCR |= (DSI_PUCR_UECL | DSI_PUCR_UEDL);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f042 020a 	orr.w	r2, r2, #10
 8009f56:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f5a:	f7fd fe2f 	bl	8007bbc <HAL_GetTick>
 8009f5e:	60f8      	str	r0, [r7, #12]

  /* Wait until all active lanes exit ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f68:	f003 0303 	and.w	r3, r3, #3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d115      	bne.n	8009f9c <HAL_DSI_ExitULPM+0x12c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UANC))
 8009f70:	e00b      	b.n	8009f8a <HAL_DSI_ExitULPM+0x11a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009f72:	f7fd fe23 	bl	8007bbc <HAL_GetTick>
 8009f76:	4602      	mov	r2, r0
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	1ad3      	subs	r3, r2, r3
 8009f7c:	2b64      	cmp	r3, #100	; 0x64
 8009f7e:	d904      	bls.n	8009f8a <HAL_DSI_ExitULPM+0x11a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009f86:	2303      	movs	r3, #3
 8009f88:	e0a2      	b.n	800a0d0 <HAL_DSI_ExitULPM+0x260>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UANC))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009f92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009f96:	2b28      	cmp	r3, #40	; 0x28
 8009f98:	d1eb      	bne.n	8009f72 <HAL_DSI_ExitULPM+0x102>
 8009f9a:	e023      	b.n	8009fe4 <HAL_DSI_ExitULPM+0x174>
      }
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009fa4:	f003 0303 	and.w	r3, r3, #3
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d116      	bne.n	8009fda <HAL_DSI_ExitULPM+0x16a>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UAN1 |
 8009fac:	e00b      	b.n	8009fc6 <HAL_DSI_ExitULPM+0x156>
                                                                                    DSI_PSR_UANC))
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009fae:	f7fd fe05 	bl	8007bbc <HAL_GetTick>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	2b64      	cmp	r3, #100	; 0x64
 8009fba:	d904      	bls.n	8009fc6 <HAL_DSI_ExitULPM+0x156>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	e084      	b.n	800a0d0 <HAL_DSI_ExitULPM+0x260>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UAN1 |
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009fce:	f403 7394 	and.w	r3, r3, #296	; 0x128
 8009fd2:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8009fd6:	d1ea      	bne.n	8009fae <HAL_DSI_ExitULPM+0x13e>
 8009fd8:	e004      	b.n	8009fe4 <HAL_DSI_ExitULPM+0x174>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e075      	b.n	800a0d0 <HAL_DSI_ExitULPM+0x260>
  }

  /* wait for 1 ms */
  HAL_Delay(1U);
 8009fe4:	2001      	movs	r0, #1
 8009fe6:	f7fd fdf5 	bl	8007bd4 <HAL_Delay>

  /* De-assert the ULPM requests and the ULPM exit bits */
  hdsi->Instance->PUCR = 0U;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Switch the lane byte clock source in the RCC from system PLL to D-PHY */
  __HAL_RCC_DSI_CONFIG(RCC_DSICLKSOURCE_DSIPHY);
 8009ff4:	4b38      	ldr	r3, [pc, #224]	; (800a0d8 <HAL_DSI_ExitULPM+0x268>)
 8009ff6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009ffa:	4a37      	ldr	r2, [pc, #220]	; (800a0d8 <HAL_DSI_ExitULPM+0x268>)
 8009ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a000:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4

  /* Restore clock lane configuration to HS */
  hdsi->Instance->CLCR |= DSI_CLCR_DPCC;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f042 0201 	orr.w	r2, r2, #1
 800a014:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Verify that D-PHY PLL is enabled */
  if ((hdsi->Instance->WRPCR & DSI_WRPCR_PLLEN) != DSI_WRPCR_PLLEN)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800a020:	f003 0301 	and.w	r3, r3, #1
 800a024:	2b01      	cmp	r3, #1
 800a026:	d004      	beq.n	800a032 <HAL_DSI_ExitULPM+0x1c2>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e04e      	b.n	800a0d0 <HAL_DSI_ExitULPM+0x260>
  }

  /* Verify that all active lanes are in Stop state */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a03a:	f003 0303 	and.w	r3, r3, #3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10c      	bne.n	800a05c <HAL_DSI_ExitULPM+0x1ec>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a04a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a04e:	2b30      	cmp	r3, #48	; 0x30
 800a050:	d01f      	beq.n	800a092 <HAL_DSI_ExitULPM+0x222>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e039      	b.n	800a0d0 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a064:	f003 0303 	and.w	r3, r3, #3
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d10d      	bne.n	800a088 <HAL_DSI_ExitULPM+0x218>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | \
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a074:	f403 73d8 	and.w	r3, r3, #432	; 0x1b0
 800a078:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800a07c:	d009      	beq.n	800a092 <HAL_DSI_ExitULPM+0x222>
                                DSI_PSR_UAN1)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_UAN1))
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	e023      	b.n	800a0d0 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e01e      	b.n	800a0d0 <HAL_DSI_ExitULPM+0x260>
  }

  /* Verify that D-PHY PLL is locked */
  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800a092:	2001      	movs	r0, #1
 800a094:	f7fd fd9e 	bl	8007bd4 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 800a098:	f7fd fd90 	bl	8007bbc <HAL_GetTick>
 800a09c:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800a09e:	e00b      	b.n	800a0b8 <HAL_DSI_ExitULPM+0x248>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800a0a0:	f7fd fd8c 	bl	8007bbc <HAL_GetTick>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	2b64      	cmp	r3, #100	; 0x64
 800a0ac:	d904      	bls.n	800a0b8 <HAL_DSI_ExitULPM+0x248>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	e00b      	b.n	800a0d0 <HAL_DSI_ExitULPM+0x260>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800a0c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d0eb      	beq.n	800a0a0 <HAL_DSI_ExitULPM+0x230>
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	46020c00 	.word	0x46020c00

0800a0dc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b089      	sub	sp, #36	; 0x24
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a0ee:	e1ba      	b.n	800a466 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	f000 81aa 	beq.w	800a460 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a55      	ldr	r2, [pc, #340]	; (800a264 <HAL_GPIO_Init+0x188>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d15d      	bne.n	800a1d0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800a11a:	2201      	movs	r2, #1
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	fa02 f303 	lsl.w	r3, r2, r3
 800a122:	43db      	mvns	r3, r3
 800a124:	69fa      	ldr	r2, [r7, #28]
 800a126:	4013      	ands	r3, r2
 800a128:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	f003 0201 	and.w	r2, r3, #1
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	fa02 f303 	lsl.w	r3, r2, r3
 800a138:	69fa      	ldr	r2, [r7, #28]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	69fa      	ldr	r2, [r7, #28]
 800a142:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800a144:	4a48      	ldr	r2, [pc, #288]	; (800a268 <HAL_GPIO_Init+0x18c>)
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a14c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800a14e:	4a46      	ldr	r2, [pc, #280]	; (800a268 <HAL_GPIO_Init+0x18c>)
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	00db      	lsls	r3, r3, #3
 800a154:	4413      	add	r3, r2
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	08da      	lsrs	r2, r3, #3
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	3208      	adds	r2, #8
 800a162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a166:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	f003 0307 	and.w	r3, r3, #7
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	220f      	movs	r2, #15
 800a172:	fa02 f303 	lsl.w	r3, r2, r3
 800a176:	43db      	mvns	r3, r3
 800a178:	69fa      	ldr	r2, [r7, #28]
 800a17a:	4013      	ands	r3, r2
 800a17c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	f003 0307 	and.w	r3, r3, #7
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	220b      	movs	r2, #11
 800a188:	fa02 f303 	lsl.w	r3, r2, r3
 800a18c:	69fa      	ldr	r2, [r7, #28]
 800a18e:	4313      	orrs	r3, r2
 800a190:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	08da      	lsrs	r2, r3, #3
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	3208      	adds	r2, #8
 800a19a:	69f9      	ldr	r1, [r7, #28]
 800a19c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	005b      	lsls	r3, r3, #1
 800a1aa:	2203      	movs	r2, #3
 800a1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b0:	43db      	mvns	r3, r3
 800a1b2:	69fa      	ldr	r2, [r7, #28]
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	005b      	lsls	r3, r3, #1
 800a1bc:	2202      	movs	r2, #2
 800a1be:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c2:	69fa      	ldr	r2, [r7, #28]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	69fa      	ldr	r2, [r7, #28]
 800a1cc:	601a      	str	r2, [r3, #0]
 800a1ce:	e067      	b.n	800a2a0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d003      	beq.n	800a1e0 <HAL_GPIO_Init+0x104>
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	2b12      	cmp	r3, #18
 800a1de:	d145      	bne.n	800a26c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	08da      	lsrs	r2, r3, #3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	3208      	adds	r2, #8
 800a1e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f003 0307 	and.w	r3, r3, #7
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	220f      	movs	r2, #15
 800a1f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1fc:	43db      	mvns	r3, r3
 800a1fe:	69fa      	ldr	r2, [r7, #28]
 800a200:	4013      	ands	r3, r2
 800a202:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	f003 020f 	and.w	r2, r3, #15
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	f003 0307 	and.w	r3, r3, #7
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	fa02 f303 	lsl.w	r3, r2, r3
 800a218:	69fa      	ldr	r2, [r7, #28]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	08da      	lsrs	r2, r3, #3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	3208      	adds	r2, #8
 800a226:	69f9      	ldr	r1, [r7, #28]
 800a228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	005b      	lsls	r3, r3, #1
 800a236:	2203      	movs	r2, #3
 800a238:	fa02 f303 	lsl.w	r3, r2, r3
 800a23c:	43db      	mvns	r3, r3
 800a23e:	69fa      	ldr	r2, [r7, #28]
 800a240:	4013      	ands	r3, r2
 800a242:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	f003 0203 	and.w	r2, r3, #3
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	005b      	lsls	r3, r3, #1
 800a250:	fa02 f303 	lsl.w	r3, r2, r3
 800a254:	69fa      	ldr	r2, [r7, #28]
 800a256:	4313      	orrs	r3, r2
 800a258:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	69fa      	ldr	r2, [r7, #28]
 800a25e:	601a      	str	r2, [r3, #0]
 800a260:	e01e      	b.n	800a2a0 <HAL_GPIO_Init+0x1c4>
 800a262:	bf00      	nop
 800a264:	46020000 	.word	0x46020000
 800a268:	0802bdd4 	.word	0x0802bdd4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	005b      	lsls	r3, r3, #1
 800a276:	2203      	movs	r2, #3
 800a278:	fa02 f303 	lsl.w	r3, r2, r3
 800a27c:	43db      	mvns	r3, r3
 800a27e:	69fa      	ldr	r2, [r7, #28]
 800a280:	4013      	ands	r3, r2
 800a282:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	f003 0203 	and.w	r2, r3, #3
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	005b      	lsls	r3, r3, #1
 800a290:	fa02 f303 	lsl.w	r3, r2, r3
 800a294:	69fa      	ldr	r2, [r7, #28]
 800a296:	4313      	orrs	r3, r2
 800a298:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	69fa      	ldr	r2, [r7, #28]
 800a29e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d00b      	beq.n	800a2c0 <HAL_GPIO_Init+0x1e4>
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d007      	beq.n	800a2c0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a2b4:	2b11      	cmp	r3, #17
 800a2b6:	d003      	beq.n	800a2c0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	2b12      	cmp	r3, #18
 800a2be:	d130      	bne.n	800a322 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	005b      	lsls	r3, r3, #1
 800a2ca:	2203      	movs	r2, #3
 800a2cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d0:	43db      	mvns	r3, r3
 800a2d2:	69fa      	ldr	r2, [r7, #28]
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	68da      	ldr	r2, [r3, #12]
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	005b      	lsls	r3, r3, #1
 800a2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e4:	69fa      	ldr	r2, [r7, #28]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	69fa      	ldr	r2, [r7, #28]
 800a2ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a2fe:	43db      	mvns	r3, r3
 800a300:	69fa      	ldr	r2, [r7, #28]
 800a302:	4013      	ands	r3, r2
 800a304:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	091b      	lsrs	r3, r3, #4
 800a30c:	f003 0201 	and.w	r2, r3, #1
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	fa02 f303 	lsl.w	r3, r2, r3
 800a316:	69fa      	ldr	r2, [r7, #28]
 800a318:	4313      	orrs	r3, r2
 800a31a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	69fa      	ldr	r2, [r7, #28]
 800a320:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	2b03      	cmp	r3, #3
 800a328:	d017      	beq.n	800a35a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	005b      	lsls	r3, r3, #1
 800a334:	2203      	movs	r2, #3
 800a336:	fa02 f303 	lsl.w	r3, r2, r3
 800a33a:	43db      	mvns	r3, r3
 800a33c:	69fa      	ldr	r2, [r7, #28]
 800a33e:	4013      	ands	r3, r2
 800a340:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	689a      	ldr	r2, [r3, #8]
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	005b      	lsls	r3, r3, #1
 800a34a:	fa02 f303 	lsl.w	r3, r2, r3
 800a34e:	69fa      	ldr	r2, [r7, #28]
 800a350:	4313      	orrs	r3, r2
 800a352:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	69fa      	ldr	r2, [r7, #28]
 800a358:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a362:	2b00      	cmp	r3, #0
 800a364:	d07c      	beq.n	800a460 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800a366:	4a47      	ldr	r2, [pc, #284]	; (800a484 <HAL_GPIO_Init+0x3a8>)
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	089b      	lsrs	r3, r3, #2
 800a36c:	3318      	adds	r3, #24
 800a36e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a372:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	f003 0303 	and.w	r3, r3, #3
 800a37a:	00db      	lsls	r3, r3, #3
 800a37c:	220f      	movs	r2, #15
 800a37e:	fa02 f303 	lsl.w	r3, r2, r3
 800a382:	43db      	mvns	r3, r3
 800a384:	69fa      	ldr	r2, [r7, #28]
 800a386:	4013      	ands	r3, r2
 800a388:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	0a9a      	lsrs	r2, r3, #10
 800a38e:	4b3e      	ldr	r3, [pc, #248]	; (800a488 <HAL_GPIO_Init+0x3ac>)
 800a390:	4013      	ands	r3, r2
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	f002 0203 	and.w	r2, r2, #3
 800a398:	00d2      	lsls	r2, r2, #3
 800a39a:	4093      	lsls	r3, r2
 800a39c:	69fa      	ldr	r2, [r7, #28]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800a3a2:	4938      	ldr	r1, [pc, #224]	; (800a484 <HAL_GPIO_Init+0x3a8>)
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	089b      	lsrs	r3, r3, #2
 800a3a8:	3318      	adds	r3, #24
 800a3aa:	69fa      	ldr	r2, [r7, #28]
 800a3ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800a3b0:	4b34      	ldr	r3, [pc, #208]	; (800a484 <HAL_GPIO_Init+0x3a8>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	43db      	mvns	r3, r3
 800a3ba:	69fa      	ldr	r2, [r7, #28]
 800a3bc:	4013      	ands	r3, r2
 800a3be:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d003      	beq.n	800a3d4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800a3cc:	69fa      	ldr	r2, [r7, #28]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800a3d4:	4a2b      	ldr	r2, [pc, #172]	; (800a484 <HAL_GPIO_Init+0x3a8>)
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800a3da:	4b2a      	ldr	r3, [pc, #168]	; (800a484 <HAL_GPIO_Init+0x3a8>)
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	43db      	mvns	r3, r3
 800a3e4:	69fa      	ldr	r2, [r7, #28]
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d003      	beq.n	800a3fe <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800a3f6:	69fa      	ldr	r2, [r7, #28]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800a3fe:	4a21      	ldr	r2, [pc, #132]	; (800a484 <HAL_GPIO_Init+0x3a8>)
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800a404:	4b1f      	ldr	r3, [pc, #124]	; (800a484 <HAL_GPIO_Init+0x3a8>)
 800a406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a40a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	43db      	mvns	r3, r3
 800a410:	69fa      	ldr	r2, [r7, #28]
 800a412:	4013      	ands	r3, r2
 800a414:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d003      	beq.n	800a42a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800a422:	69fa      	ldr	r2, [r7, #28]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	4313      	orrs	r3, r2
 800a428:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800a42a:	4a16      	ldr	r2, [pc, #88]	; (800a484 <HAL_GPIO_Init+0x3a8>)
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800a432:	4b14      	ldr	r3, [pc, #80]	; (800a484 <HAL_GPIO_Init+0x3a8>)
 800a434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a438:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	43db      	mvns	r3, r3
 800a43e:	69fa      	ldr	r2, [r7, #28]
 800a440:	4013      	ands	r3, r2
 800a442:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d003      	beq.n	800a458 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800a450:	69fa      	ldr	r2, [r7, #28]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	4313      	orrs	r3, r2
 800a456:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800a458:	4a0a      	ldr	r2, [pc, #40]	; (800a484 <HAL_GPIO_Init+0x3a8>)
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	3301      	adds	r3, #1
 800a464:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	fa22 f303 	lsr.w	r3, r2, r3
 800a470:	2b00      	cmp	r3, #0
 800a472:	f47f ae3d 	bne.w	800a0f0 <HAL_GPIO_Init+0x14>
  }
}
 800a476:	bf00      	nop
 800a478:	bf00      	nop
 800a47a:	3724      	adds	r7, #36	; 0x24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	46022000 	.word	0x46022000
 800a488:	002f7f7f 	.word	0x002f7f7f

0800a48c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b089      	sub	sp, #36	; 0x24
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a496:	2300      	movs	r3, #0
 800a498:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800a49e:	e0bc      	b.n	800a61a <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a8:	683a      	ldr	r2, [r7, #0]
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f000 80ad 	beq.w	800a614 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a5e      	ldr	r2, [pc, #376]	; (800a638 <HAL_GPIO_DeInit+0x1ac>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d115      	bne.n	800a4ee <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 800a4c2:	4a5e      	ldr	r2, [pc, #376]	; (800a63c <HAL_GPIO_DeInit+0x1b0>)
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4ca:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800a4cc:	4a5b      	ldr	r2, [pc, #364]	; (800a63c <HAL_GPIO_DeInit+0x1b0>)
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	00db      	lsls	r3, r3, #3
 800a4d2:	4413      	add	r3, r2
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 800a4d8:	4b57      	ldr	r3, [pc, #348]	; (800a638 <HAL_GPIO_DeInit+0x1ac>)
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	2101      	movs	r1, #1
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a4e4:	43db      	mvns	r3, r3
 800a4e6:	4954      	ldr	r1, [pc, #336]	; (800a638 <HAL_GPIO_DeInit+0x1ac>)
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	600b      	str	r3, [r1, #0]
 800a4ec:	e053      	b.n	800a596 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 800a4ee:	4a54      	ldr	r2, [pc, #336]	; (800a640 <HAL_GPIO_DeInit+0x1b4>)
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	089b      	lsrs	r3, r3, #2
 800a4f4:	3318      	adds	r3, #24
 800a4f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4fa:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	f003 0303 	and.w	r3, r3, #3
 800a502:	00db      	lsls	r3, r3, #3
 800a504:	220f      	movs	r2, #15
 800a506:	fa02 f303 	lsl.w	r3, r2, r3
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	4013      	ands	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	0a9a      	lsrs	r2, r3, #10
 800a514:	4b4b      	ldr	r3, [pc, #300]	; (800a644 <HAL_GPIO_DeInit+0x1b8>)
 800a516:	4013      	ands	r3, r2
 800a518:	69ba      	ldr	r2, [r7, #24]
 800a51a:	f002 0203 	and.w	r2, r2, #3
 800a51e:	00d2      	lsls	r2, r2, #3
 800a520:	4093      	lsls	r3, r2
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	429a      	cmp	r2, r3
 800a526:	d136      	bne.n	800a596 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 800a528:	4b45      	ldr	r3, [pc, #276]	; (800a640 <HAL_GPIO_DeInit+0x1b4>)
 800a52a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	43db      	mvns	r3, r3
 800a532:	4943      	ldr	r1, [pc, #268]	; (800a640 <HAL_GPIO_DeInit+0x1b4>)
 800a534:	4013      	ands	r3, r2
 800a536:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800a53a:	4b41      	ldr	r3, [pc, #260]	; (800a640 <HAL_GPIO_DeInit+0x1b4>)
 800a53c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	43db      	mvns	r3, r3
 800a544:	493e      	ldr	r1, [pc, #248]	; (800a640 <HAL_GPIO_DeInit+0x1b4>)
 800a546:	4013      	ands	r3, r2
 800a548:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 800a54c:	4b3c      	ldr	r3, [pc, #240]	; (800a640 <HAL_GPIO_DeInit+0x1b4>)
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	43db      	mvns	r3, r3
 800a554:	493a      	ldr	r1, [pc, #232]	; (800a640 <HAL_GPIO_DeInit+0x1b4>)
 800a556:	4013      	ands	r3, r2
 800a558:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800a55a:	4b39      	ldr	r3, [pc, #228]	; (800a640 <HAL_GPIO_DeInit+0x1b4>)
 800a55c:	685a      	ldr	r2, [r3, #4]
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	43db      	mvns	r3, r3
 800a562:	4937      	ldr	r1, [pc, #220]	; (800a640 <HAL_GPIO_DeInit+0x1b4>)
 800a564:	4013      	ands	r3, r2
 800a566:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	f003 0303 	and.w	r3, r3, #3
 800a56e:	00db      	lsls	r3, r3, #3
 800a570:	220f      	movs	r2, #15
 800a572:	fa02 f303 	lsl.w	r3, r2, r3
 800a576:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 800a578:	4a31      	ldr	r2, [pc, #196]	; (800a640 <HAL_GPIO_DeInit+0x1b4>)
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	089b      	lsrs	r3, r3, #2
 800a57e:	3318      	adds	r3, #24
 800a580:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	43da      	mvns	r2, r3
 800a588:	482d      	ldr	r0, [pc, #180]	; (800a640 <HAL_GPIO_DeInit+0x1b4>)
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	089b      	lsrs	r3, r3, #2
 800a58e:	400a      	ands	r2, r1
 800a590:	3318      	adds	r3, #24
 800a592:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	005b      	lsls	r3, r3, #1
 800a59e:	2103      	movs	r1, #3
 800a5a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5a4:	431a      	orrs	r2, r3
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	08da      	lsrs	r2, r3, #3
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	3208      	adds	r2, #8
 800a5b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	f003 0307 	and.w	r3, r3, #7
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	220f      	movs	r2, #15
 800a5c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c4:	43db      	mvns	r3, r3
 800a5c6:	69fa      	ldr	r2, [r7, #28]
 800a5c8:	08d2      	lsrs	r2, r2, #3
 800a5ca:	4019      	ands	r1, r3
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	3208      	adds	r2, #8
 800a5d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	689a      	ldr	r2, [r3, #8]
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	005b      	lsls	r3, r3, #1
 800a5dc:	2103      	movs	r1, #3
 800a5de:	fa01 f303 	lsl.w	r3, r1, r3
 800a5e2:	43db      	mvns	r3, r3
 800a5e4:	401a      	ands	r2, r3
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	2101      	movs	r1, #1
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a5f6:	43db      	mvns	r3, r3
 800a5f8:	401a      	ands	r2, r3
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	68da      	ldr	r2, [r3, #12]
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	005b      	lsls	r3, r3, #1
 800a606:	2103      	movs	r1, #3
 800a608:	fa01 f303 	lsl.w	r3, r1, r3
 800a60c:	43db      	mvns	r3, r3
 800a60e:	401a      	ands	r2, r3
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	3301      	adds	r3, #1
 800a618:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800a61a:	683a      	ldr	r2, [r7, #0]
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	fa22 f303 	lsr.w	r3, r2, r3
 800a622:	2b00      	cmp	r3, #0
 800a624:	f47f af3c 	bne.w	800a4a0 <HAL_GPIO_DeInit+0x14>
  }
}
 800a628:	bf00      	nop
 800a62a:	bf00      	nop
 800a62c:	3724      	adds	r7, #36	; 0x24
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	46020000 	.word	0x46020000
 800a63c:	0802bdd4 	.word	0x0802bdd4
 800a640:	46022000 	.word	0x46022000
 800a644:	002f7f7f 	.word	0x002f7f7f

0800a648 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	460b      	mov	r3, r1
 800a652:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	691a      	ldr	r2, [r3, #16]
 800a658:	887b      	ldrh	r3, [r7, #2]
 800a65a:	4013      	ands	r3, r2
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d002      	beq.n	800a666 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a660:	2301      	movs	r3, #1
 800a662:	73fb      	strb	r3, [r7, #15]
 800a664:	e001      	b.n	800a66a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a666:	2300      	movs	r3, #0
 800a668:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800a66a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3714      	adds	r7, #20
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	460b      	mov	r3, r1
 800a682:	807b      	strh	r3, [r7, #2]
 800a684:	4613      	mov	r3, r2
 800a686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a688:	787b      	ldrb	r3, [r7, #1]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d003      	beq.n	800a696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a68e:	887a      	ldrh	r2, [r7, #2]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800a694:	e002      	b.n	800a69c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800a696:	887a      	ldrh	r2, [r7, #2]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	695b      	ldr	r3, [r3, #20]
 800a6b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a6ba:	887a      	ldrh	r2, [r7, #2]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	4013      	ands	r3, r2
 800a6c0:	041a      	lsls	r2, r3, #16
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	43d9      	mvns	r1, r3
 800a6c6:	887b      	ldrh	r3, [r7, #2]
 800a6c8:	400b      	ands	r3, r1
 800a6ca:	431a      	orrs	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	619a      	str	r2, [r3, #24]
}
 800a6d0:	bf00      	nop
 800a6d2:	3714      	adds	r7, #20
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <HAL_GPIO_EnableHighSPeedLowVoltage>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_EnableHighSPeedLowVoltage(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b08b      	sub	sp, #44	; 0x2c
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	807b      	strh	r3, [r7, #2]
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800a6f0:	e03c      	b.n	800a76c <HAL_GPIO_EnableHighSPeedLowVoltage+0x90>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 800a6f2:	887a      	ldrh	r2, [r7, #2]
 800a6f4:	2101      	movs	r1, #1
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d02f      	beq.n	800a766 <HAL_GPIO_EnableHighSPeedLowVoltage+0x8a>
    {
      /* In case of LPGPIO Port */
      if (GPIOx == LPGPIO1)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a1f      	ldr	r2, [pc, #124]	; (800a788 <HAL_GPIO_EnableHighSPeedLowVoltage+0xac>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d120      	bne.n	800a750 <HAL_GPIO_EnableHighSPeedLowVoltage+0x74>
      {
        /* Get GPIO pin position */
        position = POSITION_VAL(GPIO_Pin);
 800a70e:	887b      	ldrh	r3, [r7, #2]
 800a710:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	fa93 f3a3 	rbit	r3, r3
 800a718:	60fb      	str	r3, [r7, #12]
  return result;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d101      	bne.n	800a728 <HAL_GPIO_EnableHighSPeedLowVoltage+0x4c>
    return 32U;
 800a724:	2320      	movs	r3, #32
 800a726:	e003      	b.n	800a730 <HAL_GPIO_EnableHighSPeedLowVoltage+0x54>
  return __builtin_clz(value);
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	fab3 f383 	clz	r3, r3
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	623b      	str	r3, [r7, #32]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800a732:	4a16      	ldr	r2, [pc, #88]	; (800a78c <HAL_GPIO_EnableHighSPeedLowVoltage+0xb0>)
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a73a:	61fb      	str	r3, [r7, #28]
        pin_position = (1UL << (LPGPIO_Map[position].Pin_Pos));
 800a73c:	4a13      	ldr	r2, [pc, #76]	; (800a78c <HAL_GPIO_EnableHighSPeedLowVoltage+0xb0>)
 800a73e:	6a3b      	ldr	r3, [r7, #32]
 800a740:	00db      	lsls	r3, r3, #3
 800a742:	4413      	add	r3, r2
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	fa02 f303 	lsl.w	r3, r2, r3
 800a74c:	627b      	str	r3, [r7, #36]	; 0x24
 800a74e:	e004      	b.n	800a75a <HAL_GPIO_EnableHighSPeedLowVoltage+0x7e>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Save GPIO pin pos */
        pin_position = (1UL << position);
 800a750:	2201      	movs	r2, #1
 800a752:	6a3b      	ldr	r3, [r7, #32]
 800a754:	fa02 f303 	lsl.w	r3, r2, r3
 800a758:	627b      	str	r3, [r7, #36]	; 0x24
      }
      /* Set HSLVR gpio pin */
      SET_BIT(p_gpio->HSLVR, pin_position);
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a760:	431a      	orrs	r2, r3
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    position++;
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	3301      	adds	r3, #1
 800a76a:	623b      	str	r3, [r7, #32]
  while ((GPIO_Pin >> position) != 0U)
 800a76c:	887a      	ldrh	r2, [r7, #2]
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	fa42 f303 	asr.w	r3, r2, r3
 800a774:	2b00      	cmp	r3, #0
 800a776:	d1bc      	bne.n	800a6f2 <HAL_GPIO_EnableHighSPeedLowVoltage+0x16>
  }
}
 800a778:	bf00      	nop
 800a77a:	bf00      	nop
 800a77c:	372c      	adds	r7, #44	; 0x2c
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	46020000 	.word	0x46020000
 800a78c:	0802bdd4 	.word	0x0802bdd4

0800a790 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	4603      	mov	r3, r0
 800a798:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800a79a:	4b0f      	ldr	r3, [pc, #60]	; (800a7d8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a79c:	68da      	ldr	r2, [r3, #12]
 800a79e:	88fb      	ldrh	r3, [r7, #6]
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d006      	beq.n	800a7b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800a7a6:	4a0c      	ldr	r2, [pc, #48]	; (800a7d8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a7a8:	88fb      	ldrh	r3, [r7, #6]
 800a7aa:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800a7ac:	88fb      	ldrh	r3, [r7, #6]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 f814 	bl	800a7dc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800a7b4:	4b08      	ldr	r3, [pc, #32]	; (800a7d8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a7b6:	691a      	ldr	r2, [r3, #16]
 800a7b8:	88fb      	ldrh	r3, [r7, #6]
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d006      	beq.n	800a7ce <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800a7c0:	4a05      	ldr	r2, [pc, #20]	; (800a7d8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a7c2:	88fb      	ldrh	r3, [r7, #6]
 800a7c4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800a7c6:	88fb      	ldrh	r3, [r7, #6]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7f7 feef 	bl	80025ac <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800a7ce:	bf00      	nop
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	46022000 	.word	0x46022000

0800a7dc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800a7e6:	bf00      	nop
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr

0800a7f2 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b082      	sub	sp, #8
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d101      	bne.n	800a804 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	e01c      	b.n	800a83e <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	795b      	ldrb	r3, [r3, #5]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d105      	bne.n	800a818 <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f7f7 f9f9 	bl	8001c04 <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	791b      	ldrb	r3, [r3, #4]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d101      	bne.n	800a824 <HAL_GPU2D_Init+0x32>
 800a820:	2302      	movs	r3, #2
 800a822:	e00c      	b.n	800a83e <HAL_GPU2D_Init+0x4c>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3708      	adds	r7, #8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}

0800a846 <HAL_GPU2D_ReadRegister>:
  *                   the configuration information for the GPU2D.
  * @param  offset    The register offset from GPU2D base address to read.
  * @retval Register value
  */
uint32_t HAL_GPU2D_ReadRegister(GPU2D_HandleTypeDef *hgpu2d, uint32_t offset)
{
 800a846:	b480      	push	{r7}
 800a848:	b085      	sub	sp, #20
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
 800a84e:	6039      	str	r1, [r7, #0]
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
  assert_param(IS_GPU2D_OFFSET(offset));

  /* No locking is required since reading a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  value = GPU2D_ReadReg(hgpu2d->Instance, offset);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	4413      	add	r3, r2
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	60fb      	str	r3, [r7, #12]

  return value;
 800a85c:	68fb      	ldr	r3, [r7, #12]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <HAL_GPU2D_WriteRegister>:
  * @param  offset    The register offset from GPU2D base address to write.
  * @param  value     The value to be written to provided register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_WriteRegister(GPU2D_HandleTypeDef *hgpu2d, uint32_t offset, uint32_t value)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b085      	sub	sp, #20
 800a86e:	af00      	add	r7, sp, #0
 800a870:	60f8      	str	r0, [r7, #12]
 800a872:	60b9      	str	r1, [r7, #8]
 800a874:	607a      	str	r2, [r7, #4]
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
  assert_param(IS_GPU2D_OFFSET(offset));

  /* No locking is required since writing a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  GPU2D_WriteReg(hgpu2d->Instance, offset, value);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	4413      	add	r3, r2
 800a87e:	461a      	mov	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b086      	sub	sp, #24
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	33f8      	adds	r3, #248	; 0xf8
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	f003 0301 	and.w	r3, r3, #1
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d013      	beq.n	800a8d6 <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	33f8      	adds	r3, #248	; 0xf8
 800a8b4:	613b      	str	r3, [r7, #16]
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f023 0201 	bic.w	r2, r3, #1
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 800a8ce:	68f9      	ldr	r1, [r7, #12]
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7f8 fcf5 	bl	80032c0 <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 800a8d6:	bf00      	nop
 800a8d8:	3718      	adds	r7, #24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b082      	sub	sp, #8
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f804 	bl	800a8f4 <HAL_GPU2D_ErrorCallback>
}
 800a8ec:	bf00      	nop
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 800a8fc:	e7fe      	b.n	800a8fc <HAL_GPU2D_ErrorCallback+0x8>

0800a8fe <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b082      	sub	sp, #8
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d101      	bne.n	800a910 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	e081      	b.n	800aa14 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d106      	bne.n	800a92a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f7f7 f9e5 	bl	8001cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2224      	movs	r2, #36	; 0x24
 800a92e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f022 0201 	bic.w	r2, r2, #1
 800a940:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	685a      	ldr	r2, [r3, #4]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a94e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	689a      	ldr	r2, [r3, #8]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a95e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d107      	bne.n	800a978 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	689a      	ldr	r2, [r3, #8]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a974:	609a      	str	r2, [r3, #8]
 800a976:	e006      	b.n	800a986 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	689a      	ldr	r2, [r3, #8]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a984:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d104      	bne.n	800a998 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a996:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	6812      	ldr	r2, [r2, #0]
 800a9a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a9a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9aa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68da      	ldr	r2, [r3, #12]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a9ba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	691a      	ldr	r2, [r3, #16]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	695b      	ldr	r3, [r3, #20]
 800a9c4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	699b      	ldr	r3, [r3, #24]
 800a9cc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	430a      	orrs	r2, r1
 800a9d4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	69d9      	ldr	r1, [r3, #28]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a1a      	ldr	r2, [r3, #32]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	430a      	orrs	r2, r1
 800a9e4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f042 0201 	orr.w	r2, r2, #1
 800a9f4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2220      	movs	r2, #32
 800aa00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d101      	bne.n	800aa2e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e021      	b.n	800aa72 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2224      	movs	r2, #36	; 0x24
 800aa32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f022 0201 	bic.w	r2, r2, #1
 800aa44:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7f7 f9ce 	bl	8001de8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
	...

0800aa7c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af02      	add	r7, sp, #8
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	607a      	str	r2, [r7, #4]
 800aa86:	461a      	mov	r2, r3
 800aa88:	460b      	mov	r3, r1
 800aa8a:	817b      	strh	r3, [r7, #10]
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b20      	cmp	r3, #32
 800aa9a:	f040 80da 	bne.w	800ac52 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d101      	bne.n	800aaac <HAL_I2C_Master_Transmit+0x30>
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	e0d3      	b.n	800ac54 <HAL_I2C_Master_Transmit+0x1d8>
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2201      	movs	r2, #1
 800aab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aab4:	f7fd f882 	bl	8007bbc <HAL_GetTick>
 800aab8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	2319      	movs	r3, #25
 800aac0:	2201      	movs	r2, #1
 800aac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	f000 fcd6 	bl	800b478 <I2C_WaitOnFlagUntilTimeout>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d001      	beq.n	800aad6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e0be      	b.n	800ac54 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2221      	movs	r2, #33	; 0x21
 800aada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2210      	movs	r2, #16
 800aae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	893a      	ldrh	r2, [r7, #8]
 800aaf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	2bff      	cmp	r3, #255	; 0xff
 800ab06:	d90e      	bls.n	800ab26 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	22ff      	movs	r2, #255	; 0xff
 800ab0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab12:	b2da      	uxtb	r2, r3
 800ab14:	8979      	ldrh	r1, [r7, #10]
 800ab16:	4b51      	ldr	r3, [pc, #324]	; (800ac5c <HAL_I2C_Master_Transmit+0x1e0>)
 800ab18:	9300      	str	r3, [sp, #0]
 800ab1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f000 fee6 	bl	800b8f0 <I2C_TransferConfig>
 800ab24:	e06c      	b.n	800ac00 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	8979      	ldrh	r1, [r7, #10]
 800ab38:	4b48      	ldr	r3, [pc, #288]	; (800ac5c <HAL_I2C_Master_Transmit+0x1e0>)
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f000 fed5 	bl	800b8f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800ab46:	e05b      	b.n	800ac00 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab48:	697a      	ldr	r2, [r7, #20]
 800ab4a:	6a39      	ldr	r1, [r7, #32]
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f000 fce2 	bl	800b516 <I2C_WaitOnTXISFlagUntilTimeout>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d001      	beq.n	800ab5c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e07b      	b.n	800ac54 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab60:	781a      	ldrb	r2, [r3, #0]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6c:	1c5a      	adds	r2, r3, #1
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab84:	3b01      	subs	r3, #1
 800ab86:	b29a      	uxth	r2, r3
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d034      	beq.n	800ac00 <HAL_I2C_Master_Transmit+0x184>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d130      	bne.n	800ac00 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	9300      	str	r3, [sp, #0]
 800aba2:	6a3b      	ldr	r3, [r7, #32]
 800aba4:	2200      	movs	r2, #0
 800aba6:	2180      	movs	r1, #128	; 0x80
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f000 fc65 	bl	800b478 <I2C_WaitOnFlagUntilTimeout>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d001      	beq.n	800abb8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e04d      	b.n	800ac54 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	2bff      	cmp	r3, #255	; 0xff
 800abc0:	d90e      	bls.n	800abe0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	22ff      	movs	r2, #255	; 0xff
 800abc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abcc:	b2da      	uxtb	r2, r3
 800abce:	8979      	ldrh	r1, [r7, #10]
 800abd0:	2300      	movs	r3, #0
 800abd2:	9300      	str	r3, [sp, #0]
 800abd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f000 fe89 	bl	800b8f0 <I2C_TransferConfig>
 800abde:	e00f      	b.n	800ac00 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abe4:	b29a      	uxth	r2, r3
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abee:	b2da      	uxtb	r2, r3
 800abf0:	8979      	ldrh	r1, [r7, #10]
 800abf2:	2300      	movs	r3, #0
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f000 fe78 	bl	800b8f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d19e      	bne.n	800ab48 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac0a:	697a      	ldr	r2, [r7, #20]
 800ac0c:	6a39      	ldr	r1, [r7, #32]
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f000 fcc8 	bl	800b5a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e01a      	b.n	800ac54 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2220      	movs	r2, #32
 800ac24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	6859      	ldr	r1, [r3, #4]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	4b0b      	ldr	r3, [pc, #44]	; (800ac60 <HAL_I2C_Master_Transmit+0x1e4>)
 800ac32:	400b      	ands	r3, r1
 800ac34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2220      	movs	r2, #32
 800ac3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	e000      	b.n	800ac54 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800ac52:	2302      	movs	r3, #2
  }
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3718      	adds	r7, #24
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	80002000 	.word	0x80002000
 800ac60:	fe00e800 	.word	0xfe00e800

0800ac64 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b088      	sub	sp, #32
 800ac68:	af02      	add	r7, sp, #8
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	607a      	str	r2, [r7, #4]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	460b      	mov	r3, r1
 800ac72:	817b      	strh	r3, [r7, #10]
 800ac74:	4613      	mov	r3, r2
 800ac76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b20      	cmp	r3, #32
 800ac82:	f040 80db 	bne.w	800ae3c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d101      	bne.n	800ac94 <HAL_I2C_Master_Receive+0x30>
 800ac90:	2302      	movs	r3, #2
 800ac92:	e0d4      	b.n	800ae3e <HAL_I2C_Master_Receive+0x1da>
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2201      	movs	r2, #1
 800ac98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ac9c:	f7fc ff8e 	bl	8007bbc <HAL_GetTick>
 800aca0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	2319      	movs	r3, #25
 800aca8:	2201      	movs	r2, #1
 800acaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f000 fbe2 	bl	800b478 <I2C_WaitOnFlagUntilTimeout>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	e0bf      	b.n	800ae3e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2222      	movs	r2, #34	; 0x22
 800acc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2210      	movs	r2, #16
 800acca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2200      	movs	r2, #0
 800acd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	893a      	ldrh	r2, [r7, #8]
 800acde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2200      	movs	r2, #0
 800ace4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acea:	b29b      	uxth	r3, r3
 800acec:	2bff      	cmp	r3, #255	; 0xff
 800acee:	d90e      	bls.n	800ad0e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	22ff      	movs	r2, #255	; 0xff
 800acf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	8979      	ldrh	r1, [r7, #10]
 800acfe:	4b52      	ldr	r3, [pc, #328]	; (800ae48 <HAL_I2C_Master_Receive+0x1e4>)
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f000 fdf2 	bl	800b8f0 <I2C_TransferConfig>
 800ad0c:	e06d      	b.n	800adea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	8979      	ldrh	r1, [r7, #10]
 800ad20:	4b49      	ldr	r3, [pc, #292]	; (800ae48 <HAL_I2C_Master_Receive+0x1e4>)
 800ad22:	9300      	str	r3, [sp, #0]
 800ad24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f000 fde1 	bl	800b8f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800ad2e:	e05c      	b.n	800adea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad30:	697a      	ldr	r2, [r7, #20]
 800ad32:	6a39      	ldr	r1, [r7, #32]
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f000 fc79 	bl	800b62c <I2C_WaitOnRXNEFlagUntilTimeout>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d001      	beq.n	800ad44 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	e07c      	b.n	800ae3e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4e:	b2d2      	uxtb	r2, r2
 800ad50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad56:	1c5a      	adds	r2, r3, #1
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad60:	3b01      	subs	r3, #1
 800ad62:	b29a      	uxth	r2, r3
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d034      	beq.n	800adea <HAL_I2C_Master_Receive+0x186>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d130      	bne.n	800adea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2180      	movs	r1, #128	; 0x80
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f000 fb70 	bl	800b478 <I2C_WaitOnFlagUntilTimeout>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d001      	beq.n	800ada2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e04d      	b.n	800ae3e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	2bff      	cmp	r3, #255	; 0xff
 800adaa:	d90e      	bls.n	800adca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	22ff      	movs	r2, #255	; 0xff
 800adb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	8979      	ldrh	r1, [r7, #10]
 800adba:	2300      	movs	r3, #0
 800adbc:	9300      	str	r3, [sp, #0]
 800adbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f000 fd94 	bl	800b8f0 <I2C_TransferConfig>
 800adc8:	e00f      	b.n	800adea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adce:	b29a      	uxth	r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800add8:	b2da      	uxtb	r2, r3
 800adda:	8979      	ldrh	r1, [r7, #10]
 800addc:	2300      	movs	r3, #0
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f000 fd83 	bl	800b8f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adee:	b29b      	uxth	r3, r3
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d19d      	bne.n	800ad30 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	6a39      	ldr	r1, [r7, #32]
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f000 fbd3 	bl	800b5a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d001      	beq.n	800ae08 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	e01a      	b.n	800ae3e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2220      	movs	r2, #32
 800ae0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	6859      	ldr	r1, [r3, #4]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	4b0c      	ldr	r3, [pc, #48]	; (800ae4c <HAL_I2C_Master_Receive+0x1e8>)
 800ae1c:	400b      	ands	r3, r1
 800ae1e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2220      	movs	r2, #32
 800ae24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	e000      	b.n	800ae3e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800ae3c:	2302      	movs	r3, #2
  }
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3718      	adds	r7, #24
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	80002400 	.word	0x80002400
 800ae4c:	fe00e800 	.word	0xfe00e800

0800ae50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b088      	sub	sp, #32
 800ae54:	af02      	add	r7, sp, #8
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	4608      	mov	r0, r1
 800ae5a:	4611      	mov	r1, r2
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	4603      	mov	r3, r0
 800ae60:	817b      	strh	r3, [r7, #10]
 800ae62:	460b      	mov	r3, r1
 800ae64:	813b      	strh	r3, [r7, #8]
 800ae66:	4613      	mov	r3, r2
 800ae68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	2b20      	cmp	r3, #32
 800ae74:	f040 80f9 	bne.w	800b06a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae78:	6a3b      	ldr	r3, [r7, #32]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d002      	beq.n	800ae84 <HAL_I2C_Mem_Write+0x34>
 800ae7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d105      	bne.n	800ae90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e0ed      	b.n	800b06c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d101      	bne.n	800ae9e <HAL_I2C_Mem_Write+0x4e>
 800ae9a:	2302      	movs	r3, #2
 800ae9c:	e0e6      	b.n	800b06c <HAL_I2C_Mem_Write+0x21c>
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aea6:	f7fc fe89 	bl	8007bbc <HAL_GetTick>
 800aeaa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	2319      	movs	r3, #25
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f000 fadd 	bl	800b478 <I2C_WaitOnFlagUntilTimeout>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d001      	beq.n	800aec8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e0d1      	b.n	800b06c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2221      	movs	r2, #33	; 0x21
 800aecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2240      	movs	r2, #64	; 0x40
 800aed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	6a3a      	ldr	r2, [r7, #32]
 800aee2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aef0:	88f8      	ldrh	r0, [r7, #6]
 800aef2:	893a      	ldrh	r2, [r7, #8]
 800aef4:	8979      	ldrh	r1, [r7, #10]
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	9301      	str	r3, [sp, #4]
 800aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	4603      	mov	r3, r0
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f000 f9ed 	bl	800b2e0 <I2C_RequestMemoryWrite>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d005      	beq.n	800af18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	e0a9      	b.n	800b06c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	2bff      	cmp	r3, #255	; 0xff
 800af20:	d90e      	bls.n	800af40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	22ff      	movs	r2, #255	; 0xff
 800af26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af2c:	b2da      	uxtb	r2, r3
 800af2e:	8979      	ldrh	r1, [r7, #10]
 800af30:	2300      	movs	r3, #0
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	f000 fcd9 	bl	800b8f0 <I2C_TransferConfig>
 800af3e:	e00f      	b.n	800af60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af44:	b29a      	uxth	r2, r3
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	8979      	ldrh	r1, [r7, #10]
 800af52:	2300      	movs	r3, #0
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f000 fcc8 	bl	800b8f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af60:	697a      	ldr	r2, [r7, #20]
 800af62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f000 fad6 	bl	800b516 <I2C_WaitOnTXISFlagUntilTimeout>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d001      	beq.n	800af74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	e07b      	b.n	800b06c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af78:	781a      	ldrb	r2, [r3, #0]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af84:	1c5a      	adds	r2, r3, #1
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af8e:	b29b      	uxth	r3, r3
 800af90:	3b01      	subs	r3, #1
 800af92:	b29a      	uxth	r2, r3
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af9c:	3b01      	subs	r3, #1
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d034      	beq.n	800b018 <HAL_I2C_Mem_Write+0x1c8>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d130      	bne.n	800b018 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	9300      	str	r3, [sp, #0]
 800afba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbc:	2200      	movs	r2, #0
 800afbe:	2180      	movs	r1, #128	; 0x80
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f000 fa59 	bl	800b478 <I2C_WaitOnFlagUntilTimeout>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d001      	beq.n	800afd0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	e04d      	b.n	800b06c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	2bff      	cmp	r3, #255	; 0xff
 800afd8:	d90e      	bls.n	800aff8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	22ff      	movs	r2, #255	; 0xff
 800afde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afe4:	b2da      	uxtb	r2, r3
 800afe6:	8979      	ldrh	r1, [r7, #10]
 800afe8:	2300      	movs	r3, #0
 800afea:	9300      	str	r3, [sp, #0]
 800afec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f000 fc7d 	bl	800b8f0 <I2C_TransferConfig>
 800aff6:	e00f      	b.n	800b018 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800affc:	b29a      	uxth	r2, r3
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b006:	b2da      	uxtb	r2, r3
 800b008:	8979      	ldrh	r1, [r7, #10]
 800b00a:	2300      	movs	r3, #0
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f000 fc6c 	bl	800b8f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d19e      	bne.n	800af60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b022:	697a      	ldr	r2, [r7, #20]
 800b024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f000 fabc 	bl	800b5a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d001      	beq.n	800b036 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e01a      	b.n	800b06c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2220      	movs	r2, #32
 800b03c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	6859      	ldr	r1, [r3, #4]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	4b0a      	ldr	r3, [pc, #40]	; (800b074 <HAL_I2C_Mem_Write+0x224>)
 800b04a:	400b      	ands	r3, r1
 800b04c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2220      	movs	r2, #32
 800b052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b066:	2300      	movs	r3, #0
 800b068:	e000      	b.n	800b06c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b06a:	2302      	movs	r3, #2
  }
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3718      	adds	r7, #24
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	fe00e800 	.word	0xfe00e800

0800b078 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b088      	sub	sp, #32
 800b07c:	af02      	add	r7, sp, #8
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	4608      	mov	r0, r1
 800b082:	4611      	mov	r1, r2
 800b084:	461a      	mov	r2, r3
 800b086:	4603      	mov	r3, r0
 800b088:	817b      	strh	r3, [r7, #10]
 800b08a:	460b      	mov	r3, r1
 800b08c:	813b      	strh	r3, [r7, #8]
 800b08e:	4613      	mov	r3, r2
 800b090:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	2b20      	cmp	r3, #32
 800b09c:	f040 80fd 	bne.w	800b29a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0a0:	6a3b      	ldr	r3, [r7, #32]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d002      	beq.n	800b0ac <HAL_I2C_Mem_Read+0x34>
 800b0a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d105      	bne.n	800b0b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e0f1      	b.n	800b29c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d101      	bne.n	800b0c6 <HAL_I2C_Mem_Read+0x4e>
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	e0ea      	b.n	800b29c <HAL_I2C_Mem_Read+0x224>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b0ce:	f7fc fd75 	bl	8007bbc <HAL_GetTick>
 800b0d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	2319      	movs	r3, #25
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f000 f9c9 	bl	800b478 <I2C_WaitOnFlagUntilTimeout>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d001      	beq.n	800b0f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e0d5      	b.n	800b29c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2222      	movs	r2, #34	; 0x22
 800b0f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2240      	movs	r2, #64	; 0x40
 800b0fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2200      	movs	r2, #0
 800b104:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6a3a      	ldr	r2, [r7, #32]
 800b10a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b110:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b118:	88f8      	ldrh	r0, [r7, #6]
 800b11a:	893a      	ldrh	r2, [r7, #8]
 800b11c:	8979      	ldrh	r1, [r7, #10]
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	9301      	str	r3, [sp, #4]
 800b122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	4603      	mov	r3, r0
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	f000 f92d 	bl	800b388 <I2C_RequestMemoryRead>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d005      	beq.n	800b140 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2200      	movs	r2, #0
 800b138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e0ad      	b.n	800b29c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b144:	b29b      	uxth	r3, r3
 800b146:	2bff      	cmp	r3, #255	; 0xff
 800b148:	d90e      	bls.n	800b168 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	22ff      	movs	r2, #255	; 0xff
 800b14e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b154:	b2da      	uxtb	r2, r3
 800b156:	8979      	ldrh	r1, [r7, #10]
 800b158:	4b52      	ldr	r3, [pc, #328]	; (800b2a4 <HAL_I2C_Mem_Read+0x22c>)
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	f000 fbc5 	bl	800b8f0 <I2C_TransferConfig>
 800b166:	e00f      	b.n	800b188 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b176:	b2da      	uxtb	r2, r3
 800b178:	8979      	ldrh	r1, [r7, #10]
 800b17a:	4b4a      	ldr	r3, [pc, #296]	; (800b2a4 <HAL_I2C_Mem_Read+0x22c>)
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f000 fbb4 	bl	800b8f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18e:	2200      	movs	r2, #0
 800b190:	2104      	movs	r1, #4
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f000 f970 	bl	800b478 <I2C_WaitOnFlagUntilTimeout>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d001      	beq.n	800b1a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e07c      	b.n	800b29c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ac:	b2d2      	uxtb	r2, r2
 800b1ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b4:	1c5a      	adds	r2, r3, #1
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	b29a      	uxth	r2, r3
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d034      	beq.n	800b248 <HAL_I2C_Mem_Read+0x1d0>
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d130      	bne.n	800b248 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	9300      	str	r3, [sp, #0]
 800b1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	2180      	movs	r1, #128	; 0x80
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f000 f941 	bl	800b478 <I2C_WaitOnFlagUntilTimeout>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d001      	beq.n	800b200 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e04d      	b.n	800b29c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b204:	b29b      	uxth	r3, r3
 800b206:	2bff      	cmp	r3, #255	; 0xff
 800b208:	d90e      	bls.n	800b228 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	22ff      	movs	r2, #255	; 0xff
 800b20e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b214:	b2da      	uxtb	r2, r3
 800b216:	8979      	ldrh	r1, [r7, #10]
 800b218:	2300      	movs	r3, #0
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f000 fb65 	bl	800b8f0 <I2C_TransferConfig>
 800b226:	e00f      	b.n	800b248 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b236:	b2da      	uxtb	r2, r3
 800b238:	8979      	ldrh	r1, [r7, #10]
 800b23a:	2300      	movs	r3, #0
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f000 fb54 	bl	800b8f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d19a      	bne.n	800b188 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b252:	697a      	ldr	r2, [r7, #20]
 800b254:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f000 f9a4 	bl	800b5a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	e01a      	b.n	800b29c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2220      	movs	r2, #32
 800b26c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	6859      	ldr	r1, [r3, #4]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	4b0b      	ldr	r3, [pc, #44]	; (800b2a8 <HAL_I2C_Mem_Read+0x230>)
 800b27a:	400b      	ands	r3, r1
 800b27c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2220      	movs	r2, #32
 800b282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2200      	movs	r2, #0
 800b292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	e000      	b.n	800b29c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b29a:	2302      	movs	r3, #2
  }
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3718      	adds	r7, #24
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	80002400 	.word	0x80002400
 800b2a8:	fe00e800 	.word	0xfe00e800

0800b2ac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2ba:	b2db      	uxtb	r3, r3
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af02      	add	r7, sp, #8
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	4608      	mov	r0, r1
 800b2ea:	4611      	mov	r1, r2
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	817b      	strh	r3, [r7, #10]
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	813b      	strh	r3, [r7, #8]
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b2fa:	88fb      	ldrh	r3, [r7, #6]
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	8979      	ldrh	r1, [r7, #10]
 800b300:	4b20      	ldr	r3, [pc, #128]	; (800b384 <I2C_RequestMemoryWrite+0xa4>)
 800b302:	9300      	str	r3, [sp, #0]
 800b304:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b308:	68f8      	ldr	r0, [r7, #12]
 800b30a:	f000 faf1 	bl	800b8f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b30e:	69fa      	ldr	r2, [r7, #28]
 800b310:	69b9      	ldr	r1, [r7, #24]
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f000 f8ff 	bl	800b516 <I2C_WaitOnTXISFlagUntilTimeout>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d001      	beq.n	800b322 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	e02c      	b.n	800b37c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b322:	88fb      	ldrh	r3, [r7, #6]
 800b324:	2b01      	cmp	r3, #1
 800b326:	d105      	bne.n	800b334 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b328:	893b      	ldrh	r3, [r7, #8]
 800b32a:	b2da      	uxtb	r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	629a      	str	r2, [r3, #40]	; 0x28
 800b332:	e015      	b.n	800b360 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b334:	893b      	ldrh	r3, [r7, #8]
 800b336:	0a1b      	lsrs	r3, r3, #8
 800b338:	b29b      	uxth	r3, r3
 800b33a:	b2da      	uxtb	r2, r3
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b342:	69fa      	ldr	r2, [r7, #28]
 800b344:	69b9      	ldr	r1, [r7, #24]
 800b346:	68f8      	ldr	r0, [r7, #12]
 800b348:	f000 f8e5 	bl	800b516 <I2C_WaitOnTXISFlagUntilTimeout>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d001      	beq.n	800b356 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	e012      	b.n	800b37c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b356:	893b      	ldrh	r3, [r7, #8]
 800b358:	b2da      	uxtb	r2, r3
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	2200      	movs	r2, #0
 800b368:	2180      	movs	r1, #128	; 0x80
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f000 f884 	bl	800b478 <I2C_WaitOnFlagUntilTimeout>
 800b370:	4603      	mov	r3, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d001      	beq.n	800b37a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e000      	b.n	800b37c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	80002000 	.word	0x80002000

0800b388 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af02      	add	r7, sp, #8
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	4608      	mov	r0, r1
 800b392:	4611      	mov	r1, r2
 800b394:	461a      	mov	r2, r3
 800b396:	4603      	mov	r3, r0
 800b398:	817b      	strh	r3, [r7, #10]
 800b39a:	460b      	mov	r3, r1
 800b39c:	813b      	strh	r3, [r7, #8]
 800b39e:	4613      	mov	r3, r2
 800b3a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b3a2:	88fb      	ldrh	r3, [r7, #6]
 800b3a4:	b2da      	uxtb	r2, r3
 800b3a6:	8979      	ldrh	r1, [r7, #10]
 800b3a8:	4b20      	ldr	r3, [pc, #128]	; (800b42c <I2C_RequestMemoryRead+0xa4>)
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f000 fa9e 	bl	800b8f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b3b4:	69fa      	ldr	r2, [r7, #28]
 800b3b6:	69b9      	ldr	r1, [r7, #24]
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f000 f8ac 	bl	800b516 <I2C_WaitOnTXISFlagUntilTimeout>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d001      	beq.n	800b3c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e02c      	b.n	800b422 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b3c8:	88fb      	ldrh	r3, [r7, #6]
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d105      	bne.n	800b3da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b3ce:	893b      	ldrh	r3, [r7, #8]
 800b3d0:	b2da      	uxtb	r2, r3
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	629a      	str	r2, [r3, #40]	; 0x28
 800b3d8:	e015      	b.n	800b406 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b3da:	893b      	ldrh	r3, [r7, #8]
 800b3dc:	0a1b      	lsrs	r3, r3, #8
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	b2da      	uxtb	r2, r3
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b3e8:	69fa      	ldr	r2, [r7, #28]
 800b3ea:	69b9      	ldr	r1, [r7, #24]
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f000 f892 	bl	800b516 <I2C_WaitOnTXISFlagUntilTimeout>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d001      	beq.n	800b3fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e012      	b.n	800b422 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b3fc:	893b      	ldrh	r3, [r7, #8]
 800b3fe:	b2da      	uxtb	r2, r3
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	2200      	movs	r2, #0
 800b40e:	2140      	movs	r1, #64	; 0x40
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f000 f831 	bl	800b478 <I2C_WaitOnFlagUntilTimeout>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d001      	beq.n	800b420 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b41c:	2301      	movs	r3, #1
 800b41e:	e000      	b.n	800b422 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	80002000 	.word	0x80002000

0800b430 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	699b      	ldr	r3, [r3, #24]
 800b43e:	f003 0302 	and.w	r3, r3, #2
 800b442:	2b02      	cmp	r3, #2
 800b444:	d103      	bne.n	800b44e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2200      	movs	r2, #0
 800b44c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	699b      	ldr	r3, [r3, #24]
 800b454:	f003 0301 	and.w	r3, r3, #1
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d007      	beq.n	800b46c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	699a      	ldr	r2, [r3, #24]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f042 0201 	orr.w	r2, r2, #1
 800b46a:	619a      	str	r2, [r3, #24]
  }
}
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	603b      	str	r3, [r7, #0]
 800b484:	4613      	mov	r3, r2
 800b486:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b488:	e031      	b.n	800b4ee <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b490:	d02d      	beq.n	800b4ee <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b492:	f7fc fb93 	bl	8007bbc <HAL_GetTick>
 800b496:	4602      	mov	r2, r0
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	1ad3      	subs	r3, r2, r3
 800b49c:	683a      	ldr	r2, [r7, #0]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d302      	bcc.n	800b4a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d122      	bne.n	800b4ee <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	699a      	ldr	r2, [r3, #24]
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	bf0c      	ite	eq
 800b4b8:	2301      	moveq	r3, #1
 800b4ba:	2300      	movne	r3, #0
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	461a      	mov	r2, r3
 800b4c0:	79fb      	ldrb	r3, [r7, #7]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d113      	bne.n	800b4ee <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ca:	f043 0220 	orr.w	r2, r3, #32
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2220      	movs	r2, #32
 800b4d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e00f      	b.n	800b50e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	699a      	ldr	r2, [r3, #24]
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	4013      	ands	r3, r2
 800b4f8:	68ba      	ldr	r2, [r7, #8]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	bf0c      	ite	eq
 800b4fe:	2301      	moveq	r3, #1
 800b500:	2300      	movne	r3, #0
 800b502:	b2db      	uxtb	r3, r3
 800b504:	461a      	mov	r2, r3
 800b506:	79fb      	ldrb	r3, [r7, #7]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d0be      	beq.n	800b48a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b084      	sub	sp, #16
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	60f8      	str	r0, [r7, #12]
 800b51e:	60b9      	str	r1, [r7, #8]
 800b520:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b522:	e033      	b.n	800b58c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	68b9      	ldr	r1, [r7, #8]
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f000 f901 	bl	800b730 <I2C_IsErrorOccurred>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d001      	beq.n	800b538 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b534:	2301      	movs	r3, #1
 800b536:	e031      	b.n	800b59c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b53e:	d025      	beq.n	800b58c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b540:	f7fc fb3c 	bl	8007bbc <HAL_GetTick>
 800b544:	4602      	mov	r2, r0
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	1ad3      	subs	r3, r2, r3
 800b54a:	68ba      	ldr	r2, [r7, #8]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d302      	bcc.n	800b556 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d11a      	bne.n	800b58c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	699b      	ldr	r3, [r3, #24]
 800b55c:	f003 0302 	and.w	r3, r3, #2
 800b560:	2b02      	cmp	r3, #2
 800b562:	d013      	beq.n	800b58c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b568:	f043 0220 	orr.w	r2, r3, #32
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2220      	movs	r2, #32
 800b574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2200      	movs	r2, #0
 800b584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	e007      	b.n	800b59c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	699b      	ldr	r3, [r3, #24]
 800b592:	f003 0302 	and.w	r3, r3, #2
 800b596:	2b02      	cmp	r3, #2
 800b598:	d1c4      	bne.n	800b524 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b59a:	2300      	movs	r3, #0
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3710      	adds	r7, #16
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b5b0:	e02f      	b.n	800b612 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	68b9      	ldr	r1, [r7, #8]
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f000 f8ba 	bl	800b730 <I2C_IsErrorOccurred>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d001      	beq.n	800b5c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e02d      	b.n	800b622 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5c6:	f7fc faf9 	bl	8007bbc <HAL_GetTick>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	1ad3      	subs	r3, r2, r3
 800b5d0:	68ba      	ldr	r2, [r7, #8]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d302      	bcc.n	800b5dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d11a      	bne.n	800b612 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	699b      	ldr	r3, [r3, #24]
 800b5e2:	f003 0320 	and.w	r3, r3, #32
 800b5e6:	2b20      	cmp	r3, #32
 800b5e8:	d013      	beq.n	800b612 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5ee:	f043 0220 	orr.w	r2, r3, #32
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2220      	movs	r2, #32
 800b5fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2200      	movs	r2, #0
 800b602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	e007      	b.n	800b622 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	699b      	ldr	r3, [r3, #24]
 800b618:	f003 0320 	and.w	r3, r3, #32
 800b61c:	2b20      	cmp	r3, #32
 800b61e:	d1c8      	bne.n	800b5b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
	...

0800b62c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b638:	e06b      	b.n	800b712 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	68b9      	ldr	r1, [r7, #8]
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f000 f876 	bl	800b730 <I2C_IsErrorOccurred>
 800b644:	4603      	mov	r3, r0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d001      	beq.n	800b64e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e069      	b.n	800b722 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	699b      	ldr	r3, [r3, #24]
 800b654:	f003 0320 	and.w	r3, r3, #32
 800b658:	2b20      	cmp	r3, #32
 800b65a:	d138      	bne.n	800b6ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	699b      	ldr	r3, [r3, #24]
 800b662:	f003 0304 	and.w	r3, r3, #4
 800b666:	2b04      	cmp	r3, #4
 800b668:	d105      	bne.n	800b676 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d001      	beq.n	800b676 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800b672:	2300      	movs	r3, #0
 800b674:	e055      	b.n	800b722 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	699b      	ldr	r3, [r3, #24]
 800b67c:	f003 0310 	and.w	r3, r3, #16
 800b680:	2b10      	cmp	r3, #16
 800b682:	d107      	bne.n	800b694 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2210      	movs	r2, #16
 800b68a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2204      	movs	r2, #4
 800b690:	645a      	str	r2, [r3, #68]	; 0x44
 800b692:	e002      	b.n	800b69a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2200      	movs	r2, #0
 800b698:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2220      	movs	r2, #32
 800b6a0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	6859      	ldr	r1, [r3, #4]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	4b1f      	ldr	r3, [pc, #124]	; (800b72c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800b6ae:	400b      	ands	r3, r1
 800b6b0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2220      	movs	r2, #32
 800b6b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e029      	b.n	800b722 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6ce:	f7fc fa75 	bl	8007bbc <HAL_GetTick>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d302      	bcc.n	800b6e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d116      	bne.n	800b712 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	699b      	ldr	r3, [r3, #24]
 800b6ea:	f003 0304 	and.w	r3, r3, #4
 800b6ee:	2b04      	cmp	r3, #4
 800b6f0:	d00f      	beq.n	800b712 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6f6:	f043 0220 	orr.w	r2, r3, #32
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2220      	movs	r2, #32
 800b702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2200      	movs	r2, #0
 800b70a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	e007      	b.n	800b722 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	699b      	ldr	r3, [r3, #24]
 800b718:	f003 0304 	and.w	r3, r3, #4
 800b71c:	2b04      	cmp	r3, #4
 800b71e:	d18c      	bne.n	800b63a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b720:	2300      	movs	r3, #0
}
 800b722:	4618      	mov	r0, r3
 800b724:	3710      	adds	r7, #16
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	fe00e800 	.word	0xfe00e800

0800b730 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b08a      	sub	sp, #40	; 0x28
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b73c:	2300      	movs	r3, #0
 800b73e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b74a:	2300      	movs	r3, #0
 800b74c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	f003 0310 	and.w	r3, r3, #16
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d068      	beq.n	800b82e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2210      	movs	r2, #16
 800b762:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b764:	e049      	b.n	800b7fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76c:	d045      	beq.n	800b7fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b76e:	f7fc fa25 	bl	8007bbc <HAL_GetTick>
 800b772:	4602      	mov	r2, r0
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	1ad3      	subs	r3, r2, r3
 800b778:	68ba      	ldr	r2, [r7, #8]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d302      	bcc.n	800b784 <I2C_IsErrorOccurred+0x54>
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d13a      	bne.n	800b7fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b78e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b796:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	699b      	ldr	r3, [r3, #24]
 800b79e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7a6:	d121      	bne.n	800b7ec <I2C_IsErrorOccurred+0xbc>
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7ae:	d01d      	beq.n	800b7ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b7b0:	7cfb      	ldrb	r3, [r7, #19]
 800b7b2:	2b20      	cmp	r3, #32
 800b7b4:	d01a      	beq.n	800b7ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	685a      	ldr	r2, [r3, #4]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b7c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b7c6:	f7fc f9f9 	bl	8007bbc <HAL_GetTick>
 800b7ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b7cc:	e00e      	b.n	800b7ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b7ce:	f7fc f9f5 	bl	8007bbc <HAL_GetTick>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	2b19      	cmp	r3, #25
 800b7da:	d907      	bls.n	800b7ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b7dc:	6a3b      	ldr	r3, [r7, #32]
 800b7de:	f043 0320 	orr.w	r3, r3, #32
 800b7e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800b7ea:	e006      	b.n	800b7fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	f003 0320 	and.w	r3, r3, #32
 800b7f6:	2b20      	cmp	r3, #32
 800b7f8:	d1e9      	bne.n	800b7ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	699b      	ldr	r3, [r3, #24]
 800b800:	f003 0320 	and.w	r3, r3, #32
 800b804:	2b20      	cmp	r3, #32
 800b806:	d003      	beq.n	800b810 <I2C_IsErrorOccurred+0xe0>
 800b808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d0aa      	beq.n	800b766 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b814:	2b00      	cmp	r3, #0
 800b816:	d103      	bne.n	800b820 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2220      	movs	r2, #32
 800b81e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b820:	6a3b      	ldr	r3, [r7, #32]
 800b822:	f043 0304 	orr.w	r3, r3, #4
 800b826:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	699b      	ldr	r3, [r3, #24]
 800b834:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00b      	beq.n	800b858 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b840:	6a3b      	ldr	r3, [r7, #32]
 800b842:	f043 0301 	orr.w	r3, r3, #1
 800b846:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b850:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b852:	2301      	movs	r3, #1
 800b854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00b      	beq.n	800b87a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b862:	6a3b      	ldr	r3, [r7, #32]
 800b864:	f043 0308 	orr.w	r3, r3, #8
 800b868:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b872:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00b      	beq.n	800b89c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b884:	6a3b      	ldr	r3, [r7, #32]
 800b886:	f043 0302 	orr.w	r3, r3, #2
 800b88a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b894:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b896:	2301      	movs	r3, #1
 800b898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b89c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d01c      	beq.n	800b8de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f7ff fdc3 	bl	800b430 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	6859      	ldr	r1, [r3, #4]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	4b0d      	ldr	r3, [pc, #52]	; (800b8ec <I2C_IsErrorOccurred+0x1bc>)
 800b8b6:	400b      	ands	r3, r1
 800b8b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8be:	6a3b      	ldr	r3, [r7, #32]
 800b8c0:	431a      	orrs	r2, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2220      	movs	r2, #32
 800b8ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b8de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3728      	adds	r7, #40	; 0x28
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	fe00e800 	.word	0xfe00e800

0800b8f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b087      	sub	sp, #28
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	607b      	str	r3, [r7, #4]
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	817b      	strh	r3, [r7, #10]
 800b8fe:	4613      	mov	r3, r2
 800b900:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b902:	897b      	ldrh	r3, [r7, #10]
 800b904:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b908:	7a7b      	ldrb	r3, [r7, #9]
 800b90a:	041b      	lsls	r3, r3, #16
 800b90c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b910:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b916:	6a3b      	ldr	r3, [r7, #32]
 800b918:	4313      	orrs	r3, r2
 800b91a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b91e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	685a      	ldr	r2, [r3, #4]
 800b926:	6a3b      	ldr	r3, [r7, #32]
 800b928:	0d5b      	lsrs	r3, r3, #21
 800b92a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b92e:	4b08      	ldr	r3, [pc, #32]	; (800b950 <I2C_TransferConfig+0x60>)
 800b930:	430b      	orrs	r3, r1
 800b932:	43db      	mvns	r3, r3
 800b934:	ea02 0103 	and.w	r1, r2, r3
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	697a      	ldr	r2, [r7, #20]
 800b93e:	430a      	orrs	r2, r1
 800b940:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b942:	bf00      	nop
 800b944:	371c      	adds	r7, #28
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr
 800b94e:	bf00      	nop
 800b950:	03ff63ff 	.word	0x03ff63ff

0800b954 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b964:	b2db      	uxtb	r3, r3
 800b966:	2b20      	cmp	r3, #32
 800b968:	d138      	bne.n	800b9dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b970:	2b01      	cmp	r3, #1
 800b972:	d101      	bne.n	800b978 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b974:	2302      	movs	r3, #2
 800b976:	e032      	b.n	800b9de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2224      	movs	r2, #36	; 0x24
 800b984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f022 0201 	bic.w	r2, r2, #1
 800b996:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b9a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6819      	ldr	r1, [r3, #0]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	683a      	ldr	r2, [r7, #0]
 800b9b4:	430a      	orrs	r2, r1
 800b9b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f042 0201 	orr.w	r2, r2, #1
 800b9c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2220      	movs	r2, #32
 800b9cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	e000      	b.n	800b9de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b9dc:	2302      	movs	r3, #2
  }
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	370c      	adds	r7, #12
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr

0800b9ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b9ea:	b480      	push	{r7}
 800b9ec:	b085      	sub	sp, #20
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
 800b9f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	2b20      	cmp	r3, #32
 800b9fe:	d139      	bne.n	800ba74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d101      	bne.n	800ba0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ba0a:	2302      	movs	r3, #2
 800ba0c:	e033      	b.n	800ba76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2224      	movs	r2, #36	; 0x24
 800ba1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f022 0201 	bic.w	r2, r2, #1
 800ba2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ba3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	021b      	lsls	r3, r3, #8
 800ba42:	68fa      	ldr	r2, [r7, #12]
 800ba44:	4313      	orrs	r3, r2
 800ba46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f042 0201 	orr.w	r2, r2, #1
 800ba5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2220      	movs	r2, #32
 800ba64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ba70:	2300      	movs	r3, #0
 800ba72:	e000      	b.n	800ba76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ba74:	2302      	movs	r3, #2
  }
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3714      	adds	r7, #20
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
	...

0800ba84 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800ba90:	4b0b      	ldr	r3, [pc, #44]	; (800bac0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f003 0301 	and.w	r3, r3, #1
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d002      	beq.n	800baa2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	73fb      	strb	r3, [r7, #15]
 800baa0:	e007      	b.n	800bab2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800baa2:	4b07      	ldr	r3, [pc, #28]	; (800bac0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f023 0204 	bic.w	r2, r3, #4
 800baaa:	4905      	ldr	r1, [pc, #20]	; (800bac0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4313      	orrs	r3, r2
 800bab0:	600b      	str	r3, [r1, #0]
  }

  return status;
 800bab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3714      	adds	r7, #20
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr
 800bac0:	40030400 	.word	0x40030400

0800bac4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800bac4:	b480      	push	{r7}
 800bac6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800bac8:	4b05      	ldr	r3, [pc, #20]	; (800bae0 <HAL_ICACHE_Enable+0x1c>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a04      	ldr	r2, [pc, #16]	; (800bae0 <HAL_ICACHE_Enable+0x1c>)
 800bace:	f043 0301 	orr.w	r3, r3, #1
 800bad2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr
 800bae0:	40030400 	.word	0x40030400

0800bae4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d101      	bne.n	800baf6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e0bf      	b.n	800bc76 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d106      	bne.n	800bb10 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f7f6 f990 	bl	8001e30 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2202      	movs	r2, #2
 800bb14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	699a      	ldr	r2, [r3, #24]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800bb26:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	6999      	ldr	r1, [r3, #24]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	685a      	ldr	r2, [r3, #4]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bb3c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	691b      	ldr	r3, [r3, #16]
 800bb42:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	430a      	orrs	r2, r1
 800bb4a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	6899      	ldr	r1, [r3, #8]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	4b4a      	ldr	r3, [pc, #296]	; (800bc80 <HAL_LTDC_Init+0x19c>)
 800bb58:	400b      	ands	r3, r1
 800bb5a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	695b      	ldr	r3, [r3, #20]
 800bb60:	041b      	lsls	r3, r3, #16
 800bb62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	6899      	ldr	r1, [r3, #8]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	699a      	ldr	r2, [r3, #24]
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	431a      	orrs	r2, r3
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	430a      	orrs	r2, r1
 800bb78:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	68d9      	ldr	r1, [r3, #12]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	4b3e      	ldr	r3, [pc, #248]	; (800bc80 <HAL_LTDC_Init+0x19c>)
 800bb86:	400b      	ands	r3, r1
 800bb88:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	69db      	ldr	r3, [r3, #28]
 800bb8e:	041b      	lsls	r3, r3, #16
 800bb90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	68d9      	ldr	r1, [r3, #12]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a1a      	ldr	r2, [r3, #32]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	431a      	orrs	r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	430a      	orrs	r2, r1
 800bba6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	6919      	ldr	r1, [r3, #16]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	4b33      	ldr	r3, [pc, #204]	; (800bc80 <HAL_LTDC_Init+0x19c>)
 800bbb4:	400b      	ands	r3, r1
 800bbb6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbc:	041b      	lsls	r3, r3, #16
 800bbbe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6919      	ldr	r1, [r3, #16]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	431a      	orrs	r2, r3
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	430a      	orrs	r2, r1
 800bbd4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	6959      	ldr	r1, [r3, #20]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	4b27      	ldr	r3, [pc, #156]	; (800bc80 <HAL_LTDC_Init+0x19c>)
 800bbe2:	400b      	ands	r3, r1
 800bbe4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbea:	041b      	lsls	r3, r3, #16
 800bbec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	6959      	ldr	r1, [r3, #20]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	431a      	orrs	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	430a      	orrs	r2, r1
 800bc02:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bc0a:	021b      	lsls	r3, r3, #8
 800bc0c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800bc14:	041b      	lsls	r3, r3, #16
 800bc16:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800bc26:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bc2e:	68ba      	ldr	r2, [r7, #8]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800bc3a:	431a      	orrs	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	430a      	orrs	r2, r1
 800bc42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f042 0206 	orr.w	r2, r2, #6
 800bc52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	699a      	ldr	r2, [r3, #24]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f042 0201 	orr.w	r2, r2, #1
 800bc62:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	f000f800 	.word	0xf000f800

0800bc84 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc92:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc9a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f003 0304 	and.w	r3, r3, #4
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d023      	beq.n	800bcee <HAL_LTDC_IRQHandler+0x6a>
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	f003 0304 	and.w	r3, r3, #4
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d01e      	beq.n	800bcee <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f022 0204 	bic.w	r2, r2, #4
 800bcbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2204      	movs	r2, #4
 800bcc6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bcce:	f043 0201 	orr.w	r2, r3, #1
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2204      	movs	r2, #4
 800bcdc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 f86f 	bl	800bdcc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f003 0302 	and.w	r3, r3, #2
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d023      	beq.n	800bd40 <HAL_LTDC_IRQHandler+0xbc>
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	f003 0302 	and.w	r3, r3, #2
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d01e      	beq.n	800bd40 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f022 0202 	bic.w	r2, r2, #2
 800bd10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2202      	movs	r2, #2
 800bd18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bd20:	f043 0202 	orr.w	r2, r3, #2
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2204      	movs	r2, #4
 800bd2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 f846 	bl	800bdcc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f003 0301 	and.w	r3, r3, #1
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d01b      	beq.n	800bd82 <HAL_LTDC_IRQHandler+0xfe>
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	f003 0301 	and.w	r3, r3, #1
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d016      	beq.n	800bd82 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f022 0201 	bic.w	r2, r2, #1
 800bd62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2200      	movs	r2, #0
 800bd78:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f7f7 fa6d 	bl	800325c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f003 0308 	and.w	r3, r3, #8
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d01b      	beq.n	800bdc4 <HAL_LTDC_IRQHandler+0x140>
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	f003 0308 	and.w	r3, r3, #8
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d016      	beq.n	800bdc4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f022 0208 	bic.w	r2, r2, #8
 800bda4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2208      	movs	r2, #8
 800bdac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 f80e 	bl	800bde0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800bdc4:	bf00      	nop
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800bdd4:	bf00      	nop
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800bde8:	bf00      	nop
 800bdea:	370c      	adds	r7, #12
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800bdf4:	b5b0      	push	{r4, r5, r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800be06:	2b01      	cmp	r3, #1
 800be08:	d101      	bne.n	800be0e <HAL_LTDC_ConfigLayer+0x1a>
 800be0a:	2302      	movs	r3, #2
 800be0c:	e02c      	b.n	800be68 <HAL_LTDC_ConfigLayer+0x74>
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2201      	movs	r2, #1
 800be12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2202      	movs	r2, #2
 800be1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2134      	movs	r1, #52	; 0x34
 800be24:	fb01 f303 	mul.w	r3, r1, r3
 800be28:	4413      	add	r3, r2
 800be2a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	4614      	mov	r4, r2
 800be32:	461d      	mov	r5, r3
 800be34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be40:	682b      	ldr	r3, [r5, #0]
 800be42:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	68b9      	ldr	r1, [r7, #8]
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	f000 f87f 	bl	800bf4c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2201      	movs	r2, #1
 800be54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2201      	movs	r2, #1
 800be5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3710      	adds	r7, #16
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bdb0      	pop	{r4, r5, r7, pc}

0800be70 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b086      	sub	sp, #24
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800be82:	2b01      	cmp	r3, #1
 800be84:	d101      	bne.n	800be8a <HAL_LTDC_SetAddress+0x1a>
 800be86:	2302      	movs	r3, #2
 800be88:	e024      	b.n	800bed4 <HAL_LTDC_SetAddress+0x64>
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2201      	movs	r2, #1
 800be8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2202      	movs	r2, #2
 800be96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2234      	movs	r2, #52	; 0x34
 800be9e:	fb02 f303 	mul.w	r3, r2, r3
 800bea2:	3338      	adds	r3, #56	; 0x38
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	4413      	add	r3, r2
 800bea8:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	68ba      	ldr	r2, [r7, #8]
 800beae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	6979      	ldr	r1, [r7, #20]
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	f000 f849 	bl	800bf4c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	2201      	movs	r2, #1
 800bec0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2201      	movs	r2, #1
 800bec6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3718      	adds	r7, #24
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800beec:	2b01      	cmp	r3, #1
 800beee:	d101      	bne.n	800bef4 <HAL_LTDC_ProgramLineEvent+0x18>
 800bef0:	2302      	movs	r3, #2
 800bef2:	e023      	b.n	800bf3c <HAL_LTDC_ProgramLineEvent+0x60>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2202      	movs	r2, #2
 800bf00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f022 0201 	bic.w	r2, r2, #1
 800bf12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800bf14:	4a0c      	ldr	r2, [pc, #48]	; (800bf48 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f042 0201 	orr.w	r2, r2, #1
 800bf28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr
 800bf48:	40016800 	.word	0x40016800

0800bf4c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b089      	sub	sp, #36	; 0x24
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	0c1b      	lsrs	r3, r3, #16
 800bf64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf68:	4413      	add	r3, r2
 800bf6a:	041b      	lsls	r3, r3, #16
 800bf6c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	461a      	mov	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	01db      	lsls	r3, r3, #7
 800bf78:	4413      	add	r3, r2
 800bf7a:	3384      	adds	r3, #132	; 0x84
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	6812      	ldr	r2, [r2, #0]
 800bf82:	4611      	mov	r1, r2
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	01d2      	lsls	r2, r2, #7
 800bf88:	440a      	add	r2, r1
 800bf8a:	3284      	adds	r2, #132	; 0x84
 800bf8c:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800bf90:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	0c1b      	lsrs	r3, r3, #16
 800bf9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800bfa2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800bfa4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4619      	mov	r1, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	01db      	lsls	r3, r3, #7
 800bfb0:	440b      	add	r3, r1
 800bfb2:	3384      	adds	r3, #132	; 0x84
 800bfb4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800bfb6:	69fb      	ldr	r3, [r7, #28]
 800bfb8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800bfba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	68da      	ldr	r2, [r3, #12]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfca:	4413      	add	r3, r2
 800bfcc:	041b      	lsls	r3, r3, #16
 800bfce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	01db      	lsls	r3, r3, #7
 800bfda:	4413      	add	r3, r2
 800bfdc:	3384      	adds	r3, #132	; 0x84
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	6812      	ldr	r2, [r2, #0]
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	687a      	ldr	r2, [r7, #4]
 800bfe8:	01d2      	lsls	r2, r2, #7
 800bfea:	440a      	add	r2, r1
 800bfec:	3284      	adds	r2, #132	; 0x84
 800bfee:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800bff2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	689a      	ldr	r2, [r3, #8]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c002:	4413      	add	r3, r2
 800c004:	1c5a      	adds	r2, r3, #1
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4619      	mov	r1, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	01db      	lsls	r3, r3, #7
 800c010:	440b      	add	r3, r1
 800c012:	3384      	adds	r3, #132	; 0x84
 800c014:	4619      	mov	r1, r3
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	4313      	orrs	r3, r2
 800c01a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	461a      	mov	r2, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	01db      	lsls	r3, r3, #7
 800c026:	4413      	add	r3, r2
 800c028:	3384      	adds	r3, #132	; 0x84
 800c02a:	691b      	ldr	r3, [r3, #16]
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	6812      	ldr	r2, [r2, #0]
 800c030:	4611      	mov	r1, r2
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	01d2      	lsls	r2, r2, #7
 800c036:	440a      	add	r2, r1
 800c038:	3284      	adds	r2, #132	; 0x84
 800c03a:	f023 0307 	bic.w	r3, r3, #7
 800c03e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	461a      	mov	r2, r3
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	01db      	lsls	r3, r3, #7
 800c04a:	4413      	add	r3, r2
 800c04c:	3384      	adds	r3, #132	; 0x84
 800c04e:	461a      	mov	r2, r3
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	691b      	ldr	r3, [r3, #16]
 800c054:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c05c:	021b      	lsls	r3, r3, #8
 800c05e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c066:	041b      	lsls	r3, r3, #16
 800c068:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	699b      	ldr	r3, [r3, #24]
 800c06e:	061b      	lsls	r3, r3, #24
 800c070:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	461a      	mov	r2, r3
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	01db      	lsls	r3, r3, #7
 800c07c:	4413      	add	r3, r2
 800c07e:	3384      	adds	r3, #132	; 0x84
 800c080:	699b      	ldr	r3, [r3, #24]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	461a      	mov	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	01db      	lsls	r3, r3, #7
 800c08c:	4413      	add	r3, r2
 800c08e:	3384      	adds	r3, #132	; 0x84
 800c090:	461a      	mov	r2, r3
 800c092:	2300      	movs	r3, #0
 800c094:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c09c:	461a      	mov	r2, r3
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	431a      	orrs	r2, r3
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	431a      	orrs	r2, r3
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	01db      	lsls	r3, r3, #7
 800c0b0:	440b      	add	r3, r1
 800c0b2:	3384      	adds	r3, #132	; 0x84
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	01db      	lsls	r3, r3, #7
 800c0c6:	4413      	add	r3, r2
 800c0c8:	3384      	adds	r3, #132	; 0x84
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	6812      	ldr	r2, [r2, #0]
 800c0d0:	4611      	mov	r1, r2
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	01d2      	lsls	r2, r2, #7
 800c0d6:	440a      	add	r2, r1
 800c0d8:	3284      	adds	r2, #132	; 0x84
 800c0da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c0de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	01db      	lsls	r3, r3, #7
 800c0ea:	4413      	add	r3, r2
 800c0ec:	3384      	adds	r3, #132	; 0x84
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	01db      	lsls	r3, r3, #7
 800c100:	4413      	add	r3, r2
 800c102:	3384      	adds	r3, #132	; 0x84
 800c104:	69db      	ldr	r3, [r3, #28]
 800c106:	68fa      	ldr	r2, [r7, #12]
 800c108:	6812      	ldr	r2, [r2, #0]
 800c10a:	4611      	mov	r1, r2
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	01d2      	lsls	r2, r2, #7
 800c110:	440a      	add	r2, r1
 800c112:	3284      	adds	r2, #132	; 0x84
 800c114:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c118:	f023 0307 	bic.w	r3, r3, #7
 800c11c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	69da      	ldr	r2, [r3, #28]
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	6a1b      	ldr	r3, [r3, #32]
 800c126:	68f9      	ldr	r1, [r7, #12]
 800c128:	6809      	ldr	r1, [r1, #0]
 800c12a:	4608      	mov	r0, r1
 800c12c:	6879      	ldr	r1, [r7, #4]
 800c12e:	01c9      	lsls	r1, r1, #7
 800c130:	4401      	add	r1, r0
 800c132:	3184      	adds	r1, #132	; 0x84
 800c134:	4313      	orrs	r3, r2
 800c136:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	461a      	mov	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	01db      	lsls	r3, r3, #7
 800c142:	4413      	add	r3, r2
 800c144:	3384      	adds	r3, #132	; 0x84
 800c146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	461a      	mov	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	01db      	lsls	r3, r3, #7
 800c152:	4413      	add	r3, r2
 800c154:	3384      	adds	r3, #132	; 0x84
 800c156:	461a      	mov	r2, r3
 800c158:	2300      	movs	r3, #0
 800c15a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	461a      	mov	r2, r3
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	01db      	lsls	r3, r3, #7
 800c166:	4413      	add	r3, r2
 800c168:	3384      	adds	r3, #132	; 0x84
 800c16a:	461a      	mov	r2, r3
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c170:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	691b      	ldr	r3, [r3, #16]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d102      	bne.n	800c180 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800c17a:	2304      	movs	r3, #4
 800c17c:	61fb      	str	r3, [r7, #28]
 800c17e:	e01b      	b.n	800c1b8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	691b      	ldr	r3, [r3, #16]
 800c184:	2b01      	cmp	r3, #1
 800c186:	d102      	bne.n	800c18e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800c188:	2303      	movs	r3, #3
 800c18a:	61fb      	str	r3, [r7, #28]
 800c18c:	e014      	b.n	800c1b8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	691b      	ldr	r3, [r3, #16]
 800c192:	2b04      	cmp	r3, #4
 800c194:	d00b      	beq.n	800c1ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c19a:	2b02      	cmp	r3, #2
 800c19c:	d007      	beq.n	800c1ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c1a2:	2b03      	cmp	r3, #3
 800c1a4:	d003      	beq.n	800c1ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c1aa:	2b07      	cmp	r3, #7
 800c1ac:	d102      	bne.n	800c1b4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800c1ae:	2302      	movs	r3, #2
 800c1b0:	61fb      	str	r3, [r7, #28]
 800c1b2:	e001      	b.n	800c1b8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	461a      	mov	r2, r3
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	01db      	lsls	r3, r3, #7
 800c1c2:	4413      	add	r3, r2
 800c1c4:	3384      	adds	r3, #132	; 0x84
 800c1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	6812      	ldr	r2, [r2, #0]
 800c1cc:	4611      	mov	r1, r2
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	01d2      	lsls	r2, r2, #7
 800c1d2:	440a      	add	r2, r1
 800c1d4:	3284      	adds	r2, #132	; 0x84
 800c1d6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800c1da:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1e0:	69fa      	ldr	r2, [r7, #28]
 800c1e2:	fb02 f303 	mul.w	r3, r2, r3
 800c1e6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	6859      	ldr	r1, [r3, #4]
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	1acb      	subs	r3, r1, r3
 800c1f2:	69f9      	ldr	r1, [r7, #28]
 800c1f4:	fb01 f303 	mul.w	r3, r1, r3
 800c1f8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800c1fa:	68f9      	ldr	r1, [r7, #12]
 800c1fc:	6809      	ldr	r1, [r1, #0]
 800c1fe:	4608      	mov	r0, r1
 800c200:	6879      	ldr	r1, [r7, #4]
 800c202:	01c9      	lsls	r1, r1, #7
 800c204:	4401      	add	r1, r0
 800c206:	3184      	adds	r1, #132	; 0x84
 800c208:	4313      	orrs	r3, r2
 800c20a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	461a      	mov	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	01db      	lsls	r3, r3, #7
 800c216:	4413      	add	r3, r2
 800c218:	3384      	adds	r3, #132	; 0x84
 800c21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	6812      	ldr	r2, [r2, #0]
 800c220:	4611      	mov	r1, r2
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	01d2      	lsls	r2, r2, #7
 800c226:	440a      	add	r2, r1
 800c228:	3284      	adds	r2, #132	; 0x84
 800c22a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c22e:	f023 0307 	bic.w	r3, r3, #7
 800c232:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	461a      	mov	r2, r3
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	01db      	lsls	r3, r3, #7
 800c23e:	4413      	add	r3, r2
 800c240:	3384      	adds	r3, #132	; 0x84
 800c242:	461a      	mov	r2, r3
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c248:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	461a      	mov	r2, r3
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	01db      	lsls	r3, r3, #7
 800c254:	4413      	add	r3, r2
 800c256:	3384      	adds	r3, #132	; 0x84
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	68fa      	ldr	r2, [r7, #12]
 800c25c:	6812      	ldr	r2, [r2, #0]
 800c25e:	4611      	mov	r1, r2
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	01d2      	lsls	r2, r2, #7
 800c264:	440a      	add	r2, r1
 800c266:	3284      	adds	r2, #132	; 0x84
 800c268:	f043 0301 	orr.w	r3, r3, #1
 800c26c:	6013      	str	r3, [r2, #0]
}
 800c26e:	bf00      	nop
 800c270:	3724      	adds	r7, #36	; 0x24
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr
	...

0800c27c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b085      	sub	sp, #20
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800c284:	4b39      	ldr	r3, [pc, #228]	; (800c36c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c288:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c28c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	429a      	cmp	r2, r3
 800c294:	d10b      	bne.n	800c2ae <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c29c:	d905      	bls.n	800c2aa <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800c29e:	4b33      	ldr	r3, [pc, #204]	; (800c36c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	4a32      	ldr	r2, [pc, #200]	; (800c36c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c2a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c2a8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	e057      	b.n	800c35e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2b4:	d90a      	bls.n	800c2cc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800c2b6:	4b2d      	ldr	r3, [pc, #180]	; (800c36c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	4a2a      	ldr	r2, [pc, #168]	; (800c36c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c2c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c2c8:	60d3      	str	r3, [r2, #12]
 800c2ca:	e007      	b.n	800c2dc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800c2cc:	4b27      	ldr	r3, [pc, #156]	; (800c36c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c2d4:	4925      	ldr	r1, [pc, #148]	; (800c36c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c2dc:	4b24      	ldr	r3, [pc, #144]	; (800c370 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a24      	ldr	r2, [pc, #144]	; (800c374 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e6:	099b      	lsrs	r3, r3, #6
 800c2e8:	2232      	movs	r2, #50	; 0x32
 800c2ea:	fb02 f303 	mul.w	r3, r2, r3
 800c2ee:	4a21      	ldr	r2, [pc, #132]	; (800c374 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c2f0:	fba2 2303 	umull	r2, r3, r2, r3
 800c2f4:	099b      	lsrs	r3, r3, #6
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800c2fa:	e002      	b.n	800c302 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	3b01      	subs	r3, #1
 800c300:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800c302:	4b1a      	ldr	r3, [pc, #104]	; (800c36c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d102      	bne.n	800c314 <HAL_PWREx_ControlVoltageScaling+0x98>
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d1f3      	bne.n	800c2fc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d01b      	beq.n	800c352 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c31a:	4b15      	ldr	r3, [pc, #84]	; (800c370 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a15      	ldr	r2, [pc, #84]	; (800c374 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c320:	fba2 2303 	umull	r2, r3, r2, r3
 800c324:	099b      	lsrs	r3, r3, #6
 800c326:	2232      	movs	r2, #50	; 0x32
 800c328:	fb02 f303 	mul.w	r3, r2, r3
 800c32c:	4a11      	ldr	r2, [pc, #68]	; (800c374 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800c32e:	fba2 2303 	umull	r2, r3, r2, r3
 800c332:	099b      	lsrs	r3, r3, #6
 800c334:	3301      	adds	r3, #1
 800c336:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800c338:	e002      	b.n	800c340 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	3b01      	subs	r3, #1
 800c33e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800c340:	4b0a      	ldr	r3, [pc, #40]	; (800c36c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800c342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d102      	bne.n	800c352 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1f3      	bne.n	800c33a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d101      	bne.n	800c35c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800c358:	2303      	movs	r3, #3
 800c35a:	e000      	b.n	800c35e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3714      	adds	r7, #20
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	46020800 	.word	0x46020800
 800c370:	20000048 	.word	0x20000048
 800c374:	10624dd3 	.word	0x10624dd3

0800c378 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c378:	b480      	push	{r7}
 800c37a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800c37c:	4b04      	ldr	r3, [pc, #16]	; (800c390 <HAL_PWREx_GetVoltageRange+0x18>)
 800c37e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c380:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800c384:	4618      	mov	r0, r3
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop
 800c390:	46020800 	.word	0x46020800

0800c394 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800c394:	b480      	push	{r7}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800c39c:	4b22      	ldr	r3, [pc, #136]	; (800c428 <HAL_PWREx_ConfigSupply+0x94>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a22      	ldr	r2, [pc, #136]	; (800c42c <HAL_PWREx_ConfigSupply+0x98>)
 800c3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3a6:	099b      	lsrs	r3, r3, #6
 800c3a8:	2232      	movs	r2, #50	; 0x32
 800c3aa:	fb02 f303 	mul.w	r3, r2, r3
 800c3ae:	4a1f      	ldr	r2, [pc, #124]	; (800c42c <HAL_PWREx_ConfigSupply+0x98>)
 800c3b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c3b4:	099b      	lsrs	r3, r3, #6
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d113      	bne.n	800c3e8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800c3c0:	4b1b      	ldr	r3, [pc, #108]	; (800c430 <HAL_PWREx_ConfigSupply+0x9c>)
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	4a1a      	ldr	r2, [pc, #104]	; (800c430 <HAL_PWREx_ConfigSupply+0x9c>)
 800c3c6:	f023 0302 	bic.w	r3, r3, #2
 800c3ca:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800c3cc:	e002      	b.n	800c3d4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800c3d4:	4b16      	ldr	r3, [pc, #88]	; (800c430 <HAL_PWREx_ConfigSupply+0x9c>)
 800c3d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3d8:	f003 0302 	and.w	r3, r3, #2
 800c3dc:	2b02      	cmp	r3, #2
 800c3de:	d116      	bne.n	800c40e <HAL_PWREx_ConfigSupply+0x7a>
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d1f3      	bne.n	800c3ce <HAL_PWREx_ConfigSupply+0x3a>
 800c3e6:	e012      	b.n	800c40e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800c3e8:	4b11      	ldr	r3, [pc, #68]	; (800c430 <HAL_PWREx_ConfigSupply+0x9c>)
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	4a10      	ldr	r2, [pc, #64]	; (800c430 <HAL_PWREx_ConfigSupply+0x9c>)
 800c3ee:	f043 0302 	orr.w	r3, r3, #2
 800c3f2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800c3f4:	e002      	b.n	800c3fc <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800c3fc:	4b0c      	ldr	r3, [pc, #48]	; (800c430 <HAL_PWREx_ConfigSupply+0x9c>)
 800c3fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c400:	f003 0302 	and.w	r3, r3, #2
 800c404:	2b00      	cmp	r3, #0
 800c406:	d102      	bne.n	800c40e <HAL_PWREx_ConfigSupply+0x7a>
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1f3      	bne.n	800c3f6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d101      	bne.n	800c418 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800c414:	2303      	movs	r3, #3
 800c416:	e000      	b.n	800c41a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3714      	adds	r7, #20
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop
 800c428:	20000048 	.word	0x20000048
 800c42c:	10624dd3 	.word	0x10624dd3
 800c430:	46020800 	.word	0x46020800

0800c434 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800c434:	b480      	push	{r7}
 800c436:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800c438:	4b05      	ldr	r3, [pc, #20]	; (800c450 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	4a04      	ldr	r2, [pc, #16]	; (800c450 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c43e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c442:	6113      	str	r3, [r2, #16]
}
 800c444:	bf00      	nop
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
 800c44e:	bf00      	nop
 800c450:	46020800 	.word	0x46020800

0800c454 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800c454:	b480      	push	{r7}
 800c456:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800c458:	4b05      	ldr	r3, [pc, #20]	; (800c470 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45c:	4a04      	ldr	r2, [pc, #16]	; (800c470 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c45e:	f043 0301 	orr.w	r3, r3, #1
 800c462:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800c464:	bf00      	nop
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	46020800 	.word	0x46020800

0800c474 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b08e      	sub	sp, #56	; 0x38
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800c47c:	2300      	movs	r3, #0
 800c47e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d102      	bne.n	800c48e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800c488:	2301      	movs	r3, #1
 800c48a:	f000 bec8 	b.w	800d21e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c48e:	4b99      	ldr	r3, [pc, #612]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c490:	69db      	ldr	r3, [r3, #28]
 800c492:	f003 030c 	and.w	r3, r3, #12
 800c496:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c498:	4b96      	ldr	r3, [pc, #600]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c49c:	f003 0303 	and.w	r3, r3, #3
 800c4a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f003 0310 	and.w	r3, r3, #16
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f000 816c 	beq.w	800c788 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d007      	beq.n	800c4c6 <HAL_RCC_OscConfig+0x52>
 800c4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b8:	2b0c      	cmp	r3, #12
 800c4ba:	f040 80de 	bne.w	800c67a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	f040 80da 	bne.w	800c67a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	69db      	ldr	r3, [r3, #28]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d102      	bne.n	800c4d4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	f000 bea5 	b.w	800d21e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4d8:	4b86      	ldr	r3, [pc, #536]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d004      	beq.n	800c4ee <HAL_RCC_OscConfig+0x7a>
 800c4e4:	4b83      	ldr	r3, [pc, #524]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c4ec:	e005      	b.n	800c4fa <HAL_RCC_OscConfig+0x86>
 800c4ee:	4b81      	ldr	r3, [pc, #516]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c4f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c4f4:	041b      	lsls	r3, r3, #16
 800c4f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d255      	bcs.n	800c5aa <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c500:	2b00      	cmp	r3, #0
 800c502:	d10a      	bne.n	800c51a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c508:	4618      	mov	r0, r3
 800c50a:	f001 fa17 	bl	800d93c <RCC_SetFlashLatencyFromMSIRange>
 800c50e:	4603      	mov	r3, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	d002      	beq.n	800c51a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800c514:	2301      	movs	r3, #1
 800c516:	f000 be82 	b.w	800d21e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c51a:	4b76      	ldr	r3, [pc, #472]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	4a75      	ldr	r2, [pc, #468]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c520:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c524:	6093      	str	r3, [r2, #8]
 800c526:	4b73      	ldr	r3, [pc, #460]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c532:	4970      	ldr	r1, [pc, #448]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c534:	4313      	orrs	r3, r2
 800c536:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c53c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c540:	d309      	bcc.n	800c556 <HAL_RCC_OscConfig+0xe2>
 800c542:	4b6c      	ldr	r3, [pc, #432]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c544:	68db      	ldr	r3, [r3, #12]
 800c546:	f023 021f 	bic.w	r2, r3, #31
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6a1b      	ldr	r3, [r3, #32]
 800c54e:	4969      	ldr	r1, [pc, #420]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c550:	4313      	orrs	r3, r2
 800c552:	60cb      	str	r3, [r1, #12]
 800c554:	e07e      	b.n	800c654 <HAL_RCC_OscConfig+0x1e0>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	da0a      	bge.n	800c574 <HAL_RCC_OscConfig+0x100>
 800c55e:	4b65      	ldr	r3, [pc, #404]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6a1b      	ldr	r3, [r3, #32]
 800c56a:	015b      	lsls	r3, r3, #5
 800c56c:	4961      	ldr	r1, [pc, #388]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c56e:	4313      	orrs	r3, r2
 800c570:	60cb      	str	r3, [r1, #12]
 800c572:	e06f      	b.n	800c654 <HAL_RCC_OscConfig+0x1e0>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c57c:	d30a      	bcc.n	800c594 <HAL_RCC_OscConfig+0x120>
 800c57e:	4b5d      	ldr	r3, [pc, #372]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6a1b      	ldr	r3, [r3, #32]
 800c58a:	029b      	lsls	r3, r3, #10
 800c58c:	4959      	ldr	r1, [pc, #356]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c58e:	4313      	orrs	r3, r2
 800c590:	60cb      	str	r3, [r1, #12]
 800c592:	e05f      	b.n	800c654 <HAL_RCC_OscConfig+0x1e0>
 800c594:	4b57      	ldr	r3, [pc, #348]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6a1b      	ldr	r3, [r3, #32]
 800c5a0:	03db      	lsls	r3, r3, #15
 800c5a2:	4954      	ldr	r1, [pc, #336]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	60cb      	str	r3, [r1, #12]
 800c5a8:	e054      	b.n	800c654 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c5aa:	4b52      	ldr	r3, [pc, #328]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c5ac:	689b      	ldr	r3, [r3, #8]
 800c5ae:	4a51      	ldr	r2, [pc, #324]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c5b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c5b4:	6093      	str	r3, [r2, #8]
 800c5b6:	4b4f      	ldr	r3, [pc, #316]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c2:	494c      	ldr	r1, [pc, #304]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5cc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c5d0:	d309      	bcc.n	800c5e6 <HAL_RCC_OscConfig+0x172>
 800c5d2:	4b48      	ldr	r3, [pc, #288]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	f023 021f 	bic.w	r2, r3, #31
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6a1b      	ldr	r3, [r3, #32]
 800c5de:	4945      	ldr	r1, [pc, #276]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	60cb      	str	r3, [r1, #12]
 800c5e4:	e028      	b.n	800c638 <HAL_RCC_OscConfig+0x1c4>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	da0a      	bge.n	800c604 <HAL_RCC_OscConfig+0x190>
 800c5ee:	4b41      	ldr	r3, [pc, #260]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a1b      	ldr	r3, [r3, #32]
 800c5fa:	015b      	lsls	r3, r3, #5
 800c5fc:	493d      	ldr	r1, [pc, #244]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c5fe:	4313      	orrs	r3, r2
 800c600:	60cb      	str	r3, [r1, #12]
 800c602:	e019      	b.n	800c638 <HAL_RCC_OscConfig+0x1c4>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c60c:	d30a      	bcc.n	800c624 <HAL_RCC_OscConfig+0x1b0>
 800c60e:	4b39      	ldr	r3, [pc, #228]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6a1b      	ldr	r3, [r3, #32]
 800c61a:	029b      	lsls	r3, r3, #10
 800c61c:	4935      	ldr	r1, [pc, #212]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c61e:	4313      	orrs	r3, r2
 800c620:	60cb      	str	r3, [r1, #12]
 800c622:	e009      	b.n	800c638 <HAL_RCC_OscConfig+0x1c4>
 800c624:	4b33      	ldr	r3, [pc, #204]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6a1b      	ldr	r3, [r3, #32]
 800c630:	03db      	lsls	r3, r3, #15
 800c632:	4930      	ldr	r1, [pc, #192]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c634:	4313      	orrs	r3, r2
 800c636:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d10a      	bne.n	800c654 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c642:	4618      	mov	r0, r3
 800c644:	f001 f97a 	bl	800d93c <RCC_SetFlashLatencyFromMSIRange>
 800c648:	4603      	mov	r3, r0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d002      	beq.n	800c654 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800c64e:	2301      	movs	r3, #1
 800c650:	f000 bde5 	b.w	800d21e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800c654:	f001 f8e4 	bl	800d820 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c658:	4b27      	ldr	r3, [pc, #156]	; (800c6f8 <HAL_RCC_OscConfig+0x284>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7f5 fced 	bl	800203c <HAL_InitTick>
 800c662:	4603      	mov	r3, r0
 800c664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800c668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f000 808a 	beq.w	800c786 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800c672:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c676:	f000 bdd2 	b.w	800d21e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	69db      	ldr	r3, [r3, #28]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d066      	beq.n	800c750 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800c682:	4b1c      	ldr	r3, [pc, #112]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4a1b      	ldr	r2, [pc, #108]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c688:	f043 0301 	orr.w	r3, r3, #1
 800c68c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c68e:	f7fb fa95 	bl	8007bbc <HAL_GetTick>
 800c692:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c694:	e009      	b.n	800c6aa <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c696:	f7fb fa91 	bl	8007bbc <HAL_GetTick>
 800c69a:	4602      	mov	r2, r0
 800c69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69e:	1ad3      	subs	r3, r2, r3
 800c6a0:	2b02      	cmp	r3, #2
 800c6a2:	d902      	bls.n	800c6aa <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800c6a4:	2303      	movs	r3, #3
 800c6a6:	f000 bdba 	b.w	800d21e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c6aa:	4b12      	ldr	r3, [pc, #72]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f003 0304 	and.w	r3, r3, #4
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d0ef      	beq.n	800c696 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c6b6:	4b0f      	ldr	r3, [pc, #60]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	4a0e      	ldr	r2, [pc, #56]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c6bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c6c0:	6093      	str	r3, [r2, #8]
 800c6c2:	4b0c      	ldr	r3, [pc, #48]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ce:	4909      	ldr	r1, [pc, #36]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c6dc:	d30e      	bcc.n	800c6fc <HAL_RCC_OscConfig+0x288>
 800c6de:	4b05      	ldr	r3, [pc, #20]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c6e0:	68db      	ldr	r3, [r3, #12]
 800c6e2:	f023 021f 	bic.w	r2, r3, #31
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6a1b      	ldr	r3, [r3, #32]
 800c6ea:	4902      	ldr	r1, [pc, #8]	; (800c6f4 <HAL_RCC_OscConfig+0x280>)
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	60cb      	str	r3, [r1, #12]
 800c6f0:	e04a      	b.n	800c788 <HAL_RCC_OscConfig+0x314>
 800c6f2:	bf00      	nop
 800c6f4:	46020c00 	.word	0x46020c00
 800c6f8:	2000004c 	.word	0x2000004c
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c700:	2b00      	cmp	r3, #0
 800c702:	da0a      	bge.n	800c71a <HAL_RCC_OscConfig+0x2a6>
 800c704:	4b98      	ldr	r3, [pc, #608]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6a1b      	ldr	r3, [r3, #32]
 800c710:	015b      	lsls	r3, r3, #5
 800c712:	4995      	ldr	r1, [pc, #596]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c714:	4313      	orrs	r3, r2
 800c716:	60cb      	str	r3, [r1, #12]
 800c718:	e036      	b.n	800c788 <HAL_RCC_OscConfig+0x314>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c71e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c722:	d30a      	bcc.n	800c73a <HAL_RCC_OscConfig+0x2c6>
 800c724:	4b90      	ldr	r3, [pc, #576]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a1b      	ldr	r3, [r3, #32]
 800c730:	029b      	lsls	r3, r3, #10
 800c732:	498d      	ldr	r1, [pc, #564]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c734:	4313      	orrs	r3, r2
 800c736:	60cb      	str	r3, [r1, #12]
 800c738:	e026      	b.n	800c788 <HAL_RCC_OscConfig+0x314>
 800c73a:	4b8b      	ldr	r3, [pc, #556]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6a1b      	ldr	r3, [r3, #32]
 800c746:	03db      	lsls	r3, r3, #15
 800c748:	4987      	ldr	r1, [pc, #540]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c74a:	4313      	orrs	r3, r2
 800c74c:	60cb      	str	r3, [r1, #12]
 800c74e:	e01b      	b.n	800c788 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800c750:	4b85      	ldr	r3, [pc, #532]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a84      	ldr	r2, [pc, #528]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c756:	f023 0301 	bic.w	r3, r3, #1
 800c75a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c75c:	f7fb fa2e 	bl	8007bbc <HAL_GetTick>
 800c760:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c762:	e009      	b.n	800c778 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c764:	f7fb fa2a 	bl	8007bbc <HAL_GetTick>
 800c768:	4602      	mov	r2, r0
 800c76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76c:	1ad3      	subs	r3, r2, r3
 800c76e:	2b02      	cmp	r3, #2
 800c770:	d902      	bls.n	800c778 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800c772:	2303      	movs	r3, #3
 800c774:	f000 bd53 	b.w	800d21e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c778:	4b7b      	ldr	r3, [pc, #492]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f003 0304 	and.w	r3, r3, #4
 800c780:	2b00      	cmp	r3, #0
 800c782:	d1ef      	bne.n	800c764 <HAL_RCC_OscConfig+0x2f0>
 800c784:	e000      	b.n	800c788 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c786:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f003 0301 	and.w	r3, r3, #1
 800c790:	2b00      	cmp	r3, #0
 800c792:	f000 808b 	beq.w	800c8ac <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c798:	2b08      	cmp	r3, #8
 800c79a:	d005      	beq.n	800c7a8 <HAL_RCC_OscConfig+0x334>
 800c79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79e:	2b0c      	cmp	r3, #12
 800c7a0:	d109      	bne.n	800c7b6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a4:	2b03      	cmp	r3, #3
 800c7a6:	d106      	bne.n	800c7b6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d17d      	bne.n	800c8ac <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	f000 bd34 	b.w	800d21e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7be:	d106      	bne.n	800c7ce <HAL_RCC_OscConfig+0x35a>
 800c7c0:	4b69      	ldr	r3, [pc, #420]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a68      	ldr	r2, [pc, #416]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c7c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7ca:	6013      	str	r3, [r2, #0]
 800c7cc:	e041      	b.n	800c852 <HAL_RCC_OscConfig+0x3de>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7d6:	d112      	bne.n	800c7fe <HAL_RCC_OscConfig+0x38a>
 800c7d8:	4b63      	ldr	r3, [pc, #396]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a62      	ldr	r2, [pc, #392]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c7de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c7e2:	6013      	str	r3, [r2, #0]
 800c7e4:	4b60      	ldr	r3, [pc, #384]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4a5f      	ldr	r2, [pc, #380]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c7ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c7ee:	6013      	str	r3, [r2, #0]
 800c7f0:	4b5d      	ldr	r3, [pc, #372]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a5c      	ldr	r2, [pc, #368]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c7f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7fa:	6013      	str	r3, [r2, #0]
 800c7fc:	e029      	b.n	800c852 <HAL_RCC_OscConfig+0x3de>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800c806:	d112      	bne.n	800c82e <HAL_RCC_OscConfig+0x3ba>
 800c808:	4b57      	ldr	r3, [pc, #348]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a56      	ldr	r2, [pc, #344]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c80e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c812:	6013      	str	r3, [r2, #0]
 800c814:	4b54      	ldr	r3, [pc, #336]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a53      	ldr	r2, [pc, #332]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c81a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c81e:	6013      	str	r3, [r2, #0]
 800c820:	4b51      	ldr	r3, [pc, #324]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4a50      	ldr	r2, [pc, #320]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c82a:	6013      	str	r3, [r2, #0]
 800c82c:	e011      	b.n	800c852 <HAL_RCC_OscConfig+0x3de>
 800c82e:	4b4e      	ldr	r3, [pc, #312]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a4d      	ldr	r2, [pc, #308]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c838:	6013      	str	r3, [r2, #0]
 800c83a:	4b4b      	ldr	r3, [pc, #300]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4a4a      	ldr	r2, [pc, #296]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c844:	6013      	str	r3, [r2, #0]
 800c846:	4b48      	ldr	r3, [pc, #288]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a47      	ldr	r2, [pc, #284]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c84c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c850:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d014      	beq.n	800c884 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800c85a:	f7fb f9af 	bl	8007bbc <HAL_GetTick>
 800c85e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c860:	e009      	b.n	800c876 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c862:	f7fb f9ab 	bl	8007bbc <HAL_GetTick>
 800c866:	4602      	mov	r2, r0
 800c868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86a:	1ad3      	subs	r3, r2, r3
 800c86c:	2b64      	cmp	r3, #100	; 0x64
 800c86e:	d902      	bls.n	800c876 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800c870:	2303      	movs	r3, #3
 800c872:	f000 bcd4 	b.w	800d21e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c876:	4b3c      	ldr	r3, [pc, #240]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d0ef      	beq.n	800c862 <HAL_RCC_OscConfig+0x3ee>
 800c882:	e013      	b.n	800c8ac <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800c884:	f7fb f99a 	bl	8007bbc <HAL_GetTick>
 800c888:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c88a:	e009      	b.n	800c8a0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c88c:	f7fb f996 	bl	8007bbc <HAL_GetTick>
 800c890:	4602      	mov	r2, r0
 800c892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	2b64      	cmp	r3, #100	; 0x64
 800c898:	d902      	bls.n	800c8a0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c89a:	2303      	movs	r3, #3
 800c89c:	f000 bcbf 	b.w	800d21e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c8a0:	4b31      	ldr	r3, [pc, #196]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1ef      	bne.n	800c88c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 0302 	and.w	r3, r3, #2
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d05f      	beq.n	800c978 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ba:	2b04      	cmp	r3, #4
 800c8bc:	d005      	beq.n	800c8ca <HAL_RCC_OscConfig+0x456>
 800c8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c0:	2b0c      	cmp	r3, #12
 800c8c2:	d114      	bne.n	800c8ee <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	d111      	bne.n	800c8ee <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d102      	bne.n	800c8d8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	f000 bca3 	b.w	800d21e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800c8d8:	4b23      	ldr	r3, [pc, #140]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c8da:	691b      	ldr	r3, [r3, #16]
 800c8dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	041b      	lsls	r3, r3, #16
 800c8e6:	4920      	ldr	r1, [pc, #128]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c8ec:	e044      	b.n	800c978 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d024      	beq.n	800c940 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800c8f6:	4b1c      	ldr	r3, [pc, #112]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a1b      	ldr	r2, [pc, #108]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c8fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c900:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c902:	f7fb f95b 	bl	8007bbc <HAL_GetTick>
 800c906:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c908:	e009      	b.n	800c91e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c90a:	f7fb f957 	bl	8007bbc <HAL_GetTick>
 800c90e:	4602      	mov	r2, r0
 800c910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c912:	1ad3      	subs	r3, r2, r3
 800c914:	2b02      	cmp	r3, #2
 800c916:	d902      	bls.n	800c91e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c918:	2303      	movs	r3, #3
 800c91a:	f000 bc80 	b.w	800d21e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c91e:	4b12      	ldr	r3, [pc, #72]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c926:	2b00      	cmp	r3, #0
 800c928:	d0ef      	beq.n	800c90a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800c92a:	4b0f      	ldr	r3, [pc, #60]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c92c:	691b      	ldr	r3, [r3, #16]
 800c92e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	041b      	lsls	r3, r3, #16
 800c938:	490b      	ldr	r1, [pc, #44]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c93a:	4313      	orrs	r3, r2
 800c93c:	610b      	str	r3, [r1, #16]
 800c93e:	e01b      	b.n	800c978 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800c940:	4b09      	ldr	r3, [pc, #36]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a08      	ldr	r2, [pc, #32]	; (800c968 <HAL_RCC_OscConfig+0x4f4>)
 800c946:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c94a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c94c:	f7fb f936 	bl	8007bbc <HAL_GetTick>
 800c950:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c952:	e00b      	b.n	800c96c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c954:	f7fb f932 	bl	8007bbc <HAL_GetTick>
 800c958:	4602      	mov	r2, r0
 800c95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	2b02      	cmp	r3, #2
 800c960:	d904      	bls.n	800c96c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800c962:	2303      	movs	r3, #3
 800c964:	f000 bc5b 	b.w	800d21e <HAL_RCC_OscConfig+0xdaa>
 800c968:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c96c:	4baf      	ldr	r3, [pc, #700]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c974:	2b00      	cmp	r3, #0
 800c976:	d1ed      	bne.n	800c954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f003 0308 	and.w	r3, r3, #8
 800c980:	2b00      	cmp	r3, #0
 800c982:	f000 80c8 	beq.w	800cb16 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800c986:	2300      	movs	r3, #0
 800c988:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c98c:	4ba7      	ldr	r3, [pc, #668]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800c98e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c992:	f003 0304 	and.w	r3, r3, #4
 800c996:	2b00      	cmp	r3, #0
 800c998:	d111      	bne.n	800c9be <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c99a:	4ba4      	ldr	r3, [pc, #656]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800c99c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9a0:	4aa2      	ldr	r2, [pc, #648]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800c9a2:	f043 0304 	orr.w	r3, r3, #4
 800c9a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c9aa:	4ba0      	ldr	r3, [pc, #640]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800c9ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9b0:	f003 0304 	and.w	r3, r3, #4
 800c9b4:	617b      	str	r3, [r7, #20]
 800c9b6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c9be:	4b9c      	ldr	r3, [pc, #624]	; (800cc30 <HAL_RCC_OscConfig+0x7bc>)
 800c9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c2:	f003 0301 	and.w	r3, r3, #1
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d119      	bne.n	800c9fe <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c9ca:	4b99      	ldr	r3, [pc, #612]	; (800cc30 <HAL_RCC_OscConfig+0x7bc>)
 800c9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ce:	4a98      	ldr	r2, [pc, #608]	; (800cc30 <HAL_RCC_OscConfig+0x7bc>)
 800c9d0:	f043 0301 	orr.w	r3, r3, #1
 800c9d4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c9d6:	f7fb f8f1 	bl	8007bbc <HAL_GetTick>
 800c9da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c9dc:	e009      	b.n	800c9f2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c9de:	f7fb f8ed 	bl	8007bbc <HAL_GetTick>
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e6:	1ad3      	subs	r3, r2, r3
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	d902      	bls.n	800c9f2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800c9ec:	2303      	movs	r3, #3
 800c9ee:	f000 bc16 	b.w	800d21e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c9f2:	4b8f      	ldr	r3, [pc, #572]	; (800cc30 <HAL_RCC_OscConfig+0x7bc>)
 800c9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f6:	f003 0301 	and.w	r3, r3, #1
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d0ef      	beq.n	800c9de <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	695b      	ldr	r3, [r3, #20]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d05f      	beq.n	800cac6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800ca06:	4b89      	ldr	r3, [pc, #548]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800ca08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca0c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	699a      	ldr	r2, [r3, #24]
 800ca12:	6a3b      	ldr	r3, [r7, #32]
 800ca14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d037      	beq.n	800ca8c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800ca1c:	6a3b      	ldr	r3, [r7, #32]
 800ca1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d006      	beq.n	800ca34 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800ca26:	6a3b      	ldr	r3, [r7, #32]
 800ca28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d101      	bne.n	800ca34 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800ca30:	2301      	movs	r3, #1
 800ca32:	e3f4      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800ca34:	6a3b      	ldr	r3, [r7, #32]
 800ca36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d01b      	beq.n	800ca76 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800ca3e:	4b7b      	ldr	r3, [pc, #492]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800ca40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca44:	4a79      	ldr	r2, [pc, #484]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800ca46:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800ca4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800ca4e:	f7fb f8b5 	bl	8007bbc <HAL_GetTick>
 800ca52:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800ca54:	e008      	b.n	800ca68 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ca56:	f7fb f8b1 	bl	8007bbc <HAL_GetTick>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5e:	1ad3      	subs	r3, r2, r3
 800ca60:	2b05      	cmp	r3, #5
 800ca62:	d901      	bls.n	800ca68 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800ca64:	2303      	movs	r3, #3
 800ca66:	e3da      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800ca68:	4b70      	ldr	r3, [pc, #448]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800ca6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1ef      	bne.n	800ca56 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800ca76:	4b6d      	ldr	r3, [pc, #436]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800ca78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca7c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	699b      	ldr	r3, [r3, #24]
 800ca84:	4969      	ldr	r1, [pc, #420]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800ca86:	4313      	orrs	r3, r2
 800ca88:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800ca8c:	4b67      	ldr	r3, [pc, #412]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800ca8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca92:	4a66      	ldr	r2, [pc, #408]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800ca94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ca98:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800ca9c:	f7fb f88e 	bl	8007bbc <HAL_GetTick>
 800caa0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800caa2:	e008      	b.n	800cab6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800caa4:	f7fb f88a 	bl	8007bbc <HAL_GetTick>
 800caa8:	4602      	mov	r2, r0
 800caaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caac:	1ad3      	subs	r3, r2, r3
 800caae:	2b05      	cmp	r3, #5
 800cab0:	d901      	bls.n	800cab6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800cab2:	2303      	movs	r3, #3
 800cab4:	e3b3      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800cab6:	4b5d      	ldr	r3, [pc, #372]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cabc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d0ef      	beq.n	800caa4 <HAL_RCC_OscConfig+0x630>
 800cac4:	e01b      	b.n	800cafe <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800cac6:	4b59      	ldr	r3, [pc, #356]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cacc:	4a57      	ldr	r2, [pc, #348]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cace:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800cad2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800cad6:	f7fb f871 	bl	8007bbc <HAL_GetTick>
 800cada:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800cadc:	e008      	b.n	800caf0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cade:	f7fb f86d 	bl	8007bbc <HAL_GetTick>
 800cae2:	4602      	mov	r2, r0
 800cae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae6:	1ad3      	subs	r3, r2, r3
 800cae8:	2b05      	cmp	r3, #5
 800caea:	d901      	bls.n	800caf0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800caec:	2303      	movs	r3, #3
 800caee:	e396      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800caf0:	4b4e      	ldr	r3, [pc, #312]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800caf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800caf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d1ef      	bne.n	800cade <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cafe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d107      	bne.n	800cb16 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cb06:	4b49      	ldr	r3, [pc, #292]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cb08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb0c:	4a47      	ldr	r2, [pc, #284]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cb0e:	f023 0304 	bic.w	r3, r3, #4
 800cb12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f003 0304 	and.w	r3, r3, #4
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	f000 8111 	beq.w	800cd46 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800cb24:	2300      	movs	r3, #0
 800cb26:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cb2a:	4b40      	ldr	r3, [pc, #256]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cb2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb30:	f003 0304 	and.w	r3, r3, #4
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d111      	bne.n	800cb5c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cb38:	4b3c      	ldr	r3, [pc, #240]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cb3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb3e:	4a3b      	ldr	r2, [pc, #236]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cb40:	f043 0304 	orr.w	r3, r3, #4
 800cb44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800cb48:	4b38      	ldr	r3, [pc, #224]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cb4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cb4e:	f003 0304 	and.w	r3, r3, #4
 800cb52:	613b      	str	r3, [r7, #16]
 800cb54:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800cb56:	2301      	movs	r3, #1
 800cb58:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cb5c:	4b34      	ldr	r3, [pc, #208]	; (800cc30 <HAL_RCC_OscConfig+0x7bc>)
 800cb5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb60:	f003 0301 	and.w	r3, r3, #1
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d118      	bne.n	800cb9a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800cb68:	4b31      	ldr	r3, [pc, #196]	; (800cc30 <HAL_RCC_OscConfig+0x7bc>)
 800cb6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb6c:	4a30      	ldr	r2, [pc, #192]	; (800cc30 <HAL_RCC_OscConfig+0x7bc>)
 800cb6e:	f043 0301 	orr.w	r3, r3, #1
 800cb72:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cb74:	f7fb f822 	bl	8007bbc <HAL_GetTick>
 800cb78:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cb7a:	e008      	b.n	800cb8e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cb7c:	f7fb f81e 	bl	8007bbc <HAL_GetTick>
 800cb80:	4602      	mov	r2, r0
 800cb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb84:	1ad3      	subs	r3, r2, r3
 800cb86:	2b02      	cmp	r3, #2
 800cb88:	d901      	bls.n	800cb8e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800cb8a:	2303      	movs	r3, #3
 800cb8c:	e347      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800cb8e:	4b28      	ldr	r3, [pc, #160]	; (800cc30 <HAL_RCC_OscConfig+0x7bc>)
 800cb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb92:	f003 0301 	and.w	r3, r3, #1
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d0f0      	beq.n	800cb7c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	f003 0301 	and.w	r3, r3, #1
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d01f      	beq.n	800cbe6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	689b      	ldr	r3, [r3, #8]
 800cbaa:	f003 0304 	and.w	r3, r3, #4
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d010      	beq.n	800cbd4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800cbb2:	4b1e      	ldr	r3, [pc, #120]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cbb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cbb8:	4a1c      	ldr	r2, [pc, #112]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cbba:	f043 0304 	orr.w	r3, r3, #4
 800cbbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cbc2:	4b1a      	ldr	r3, [pc, #104]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cbc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cbc8:	4a18      	ldr	r2, [pc, #96]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cbca:	f043 0301 	orr.w	r3, r3, #1
 800cbce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800cbd2:	e018      	b.n	800cc06 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cbd4:	4b15      	ldr	r3, [pc, #84]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cbd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cbda:	4a14      	ldr	r2, [pc, #80]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cbdc:	f043 0301 	orr.w	r3, r3, #1
 800cbe0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800cbe4:	e00f      	b.n	800cc06 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cbe6:	4b11      	ldr	r3, [pc, #68]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cbe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cbec:	4a0f      	ldr	r2, [pc, #60]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cbee:	f023 0301 	bic.w	r3, r3, #1
 800cbf2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800cbf6:	4b0d      	ldr	r3, [pc, #52]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cbf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cbfc:	4a0b      	ldr	r2, [pc, #44]	; (800cc2c <HAL_RCC_OscConfig+0x7b8>)
 800cbfe:	f023 0304 	bic.w	r3, r3, #4
 800cc02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	689b      	ldr	r3, [r3, #8]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d057      	beq.n	800ccbe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800cc0e:	f7fa ffd5 	bl	8007bbc <HAL_GetTick>
 800cc12:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cc14:	e00e      	b.n	800cc34 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc16:	f7fa ffd1 	bl	8007bbc <HAL_GetTick>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1e:	1ad3      	subs	r3, r2, r3
 800cc20:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d905      	bls.n	800cc34 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800cc28:	2303      	movs	r3, #3
 800cc2a:	e2f8      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
 800cc2c:	46020c00 	.word	0x46020c00
 800cc30:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cc34:	4b9c      	ldr	r3, [pc, #624]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cc36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cc3a:	f003 0302 	and.w	r3, r3, #2
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d0e9      	beq.n	800cc16 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	689b      	ldr	r3, [r3, #8]
 800cc46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d01b      	beq.n	800cc86 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800cc4e:	4b96      	ldr	r3, [pc, #600]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cc50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cc54:	4a94      	ldr	r2, [pc, #592]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cc56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800cc5e:	e00a      	b.n	800cc76 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc60:	f7fa ffac 	bl	8007bbc <HAL_GetTick>
 800cc64:	4602      	mov	r2, r0
 800cc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc68:	1ad3      	subs	r3, r2, r3
 800cc6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d901      	bls.n	800cc76 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800cc72:	2303      	movs	r3, #3
 800cc74:	e2d3      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800cc76:	4b8c      	ldr	r3, [pc, #560]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cc78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cc7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d0ed      	beq.n	800cc60 <HAL_RCC_OscConfig+0x7ec>
 800cc84:	e053      	b.n	800cd2e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800cc86:	4b88      	ldr	r3, [pc, #544]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cc88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cc8c:	4a86      	ldr	r2, [pc, #536]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cc8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800cc96:	e00a      	b.n	800ccae <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc98:	f7fa ff90 	bl	8007bbc <HAL_GetTick>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca0:	1ad3      	subs	r3, r2, r3
 800cca2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d901      	bls.n	800ccae <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800ccaa:	2303      	movs	r3, #3
 800ccac:	e2b7      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ccae:	4b7e      	ldr	r3, [pc, #504]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800ccb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ccb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1ed      	bne.n	800cc98 <HAL_RCC_OscConfig+0x824>
 800ccbc:	e037      	b.n	800cd2e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800ccbe:	f7fa ff7d 	bl	8007bbc <HAL_GetTick>
 800ccc2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ccc4:	e00a      	b.n	800ccdc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ccc6:	f7fa ff79 	bl	8007bbc <HAL_GetTick>
 800ccca:	4602      	mov	r2, r0
 800cccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccce:	1ad3      	subs	r3, r2, r3
 800ccd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d901      	bls.n	800ccdc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800ccd8:	2303      	movs	r3, #3
 800ccda:	e2a0      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ccdc:	4b72      	ldr	r3, [pc, #456]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800ccde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cce2:	f003 0302 	and.w	r3, r3, #2
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d1ed      	bne.n	800ccc6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800ccea:	4b6f      	ldr	r3, [pc, #444]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800ccec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ccf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d01a      	beq.n	800cd2e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ccf8:	4b6b      	ldr	r3, [pc, #428]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800ccfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ccfe:	4a6a      	ldr	r2, [pc, #424]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cd00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800cd08:	e00a      	b.n	800cd20 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd0a:	f7fa ff57 	bl	8007bbc <HAL_GetTick>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd12:	1ad3      	subs	r3, r2, r3
 800cd14:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d901      	bls.n	800cd20 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800cd1c:	2303      	movs	r3, #3
 800cd1e:	e27e      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800cd20:	4b61      	ldr	r3, [pc, #388]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cd22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cd26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1ed      	bne.n	800cd0a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cd2e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800cd32:	2b01      	cmp	r3, #1
 800cd34:	d107      	bne.n	800cd46 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd36:	4b5c      	ldr	r3, [pc, #368]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cd38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd3c:	4a5a      	ldr	r2, [pc, #360]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cd3e:	f023 0304 	bic.w	r3, r3, #4
 800cd42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f003 0320 	and.w	r3, r3, #32
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d036      	beq.n	800cdc0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d019      	beq.n	800cd8e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800cd5a:	4b53      	ldr	r3, [pc, #332]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4a52      	ldr	r2, [pc, #328]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cd60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cd64:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cd66:	f7fa ff29 	bl	8007bbc <HAL_GetTick>
 800cd6a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800cd6c:	e008      	b.n	800cd80 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cd6e:	f7fa ff25 	bl	8007bbc <HAL_GetTick>
 800cd72:	4602      	mov	r2, r0
 800cd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd76:	1ad3      	subs	r3, r2, r3
 800cd78:	2b02      	cmp	r3, #2
 800cd7a:	d901      	bls.n	800cd80 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800cd7c:	2303      	movs	r3, #3
 800cd7e:	e24e      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800cd80:	4b49      	ldr	r3, [pc, #292]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d0f0      	beq.n	800cd6e <HAL_RCC_OscConfig+0x8fa>
 800cd8c:	e018      	b.n	800cdc0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800cd8e:	4b46      	ldr	r3, [pc, #280]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a45      	ldr	r2, [pc, #276]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cd94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd98:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cd9a:	f7fa ff0f 	bl	8007bbc <HAL_GetTick>
 800cd9e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800cda0:	e008      	b.n	800cdb4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cda2:	f7fa ff0b 	bl	8007bbc <HAL_GetTick>
 800cda6:	4602      	mov	r2, r0
 800cda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdaa:	1ad3      	subs	r3, r2, r3
 800cdac:	2b02      	cmp	r3, #2
 800cdae:	d901      	bls.n	800cdb4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800cdb0:	2303      	movs	r3, #3
 800cdb2:	e234      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800cdb4:	4b3c      	ldr	r3, [pc, #240]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d1f0      	bne.n	800cda2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d036      	beq.n	800ce3a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d019      	beq.n	800ce08 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800cdd4:	4b34      	ldr	r3, [pc, #208]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a33      	ldr	r2, [pc, #204]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cdda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cdde:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cde0:	f7fa feec 	bl	8007bbc <HAL_GetTick>
 800cde4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800cde6:	e008      	b.n	800cdfa <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800cde8:	f7fa fee8 	bl	8007bbc <HAL_GetTick>
 800cdec:	4602      	mov	r2, r0
 800cdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	2b02      	cmp	r3, #2
 800cdf4:	d901      	bls.n	800cdfa <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800cdf6:	2303      	movs	r3, #3
 800cdf8:	e211      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800cdfa:	4b2b      	ldr	r3, [pc, #172]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d0f0      	beq.n	800cde8 <HAL_RCC_OscConfig+0x974>
 800ce06:	e018      	b.n	800ce3a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800ce08:	4b27      	ldr	r3, [pc, #156]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a26      	ldr	r2, [pc, #152]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800ce0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce12:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ce14:	f7fa fed2 	bl	8007bbc <HAL_GetTick>
 800ce18:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800ce1a:	e008      	b.n	800ce2e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800ce1c:	f7fa fece 	bl	8007bbc <HAL_GetTick>
 800ce20:	4602      	mov	r2, r0
 800ce22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce24:	1ad3      	subs	r3, r2, r3
 800ce26:	2b02      	cmp	r3, #2
 800ce28:	d901      	bls.n	800ce2e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	e1f7      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800ce2e:	4b1e      	ldr	r3, [pc, #120]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d1f0      	bne.n	800ce1c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d07f      	beq.n	800cf46 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d062      	beq.n	800cf14 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800ce4e:	4b16      	ldr	r3, [pc, #88]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800ce50:	689b      	ldr	r3, [r3, #8]
 800ce52:	4a15      	ldr	r2, [pc, #84]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800ce54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ce58:	6093      	str	r3, [r2, #8]
 800ce5a:	4b13      	ldr	r3, [pc, #76]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce66:	4910      	ldr	r1, [pc, #64]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce70:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800ce74:	d309      	bcc.n	800ce8a <HAL_RCC_OscConfig+0xa16>
 800ce76:	4b0c      	ldr	r3, [pc, #48]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	f023 021f 	bic.w	r2, r3, #31
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a1b      	ldr	r3, [r3, #32]
 800ce82:	4909      	ldr	r1, [pc, #36]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800ce84:	4313      	orrs	r3, r2
 800ce86:	60cb      	str	r3, [r1, #12]
 800ce88:	e02a      	b.n	800cee0 <HAL_RCC_OscConfig+0xa6c>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	da0c      	bge.n	800ceac <HAL_RCC_OscConfig+0xa38>
 800ce92:	4b05      	ldr	r3, [pc, #20]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6a1b      	ldr	r3, [r3, #32]
 800ce9e:	015b      	lsls	r3, r3, #5
 800cea0:	4901      	ldr	r1, [pc, #4]	; (800cea8 <HAL_RCC_OscConfig+0xa34>)
 800cea2:	4313      	orrs	r3, r2
 800cea4:	60cb      	str	r3, [r1, #12]
 800cea6:	e01b      	b.n	800cee0 <HAL_RCC_OscConfig+0xa6c>
 800cea8:	46020c00 	.word	0x46020c00
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ceb4:	d30a      	bcc.n	800cecc <HAL_RCC_OscConfig+0xa58>
 800ceb6:	4ba1      	ldr	r3, [pc, #644]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6a1b      	ldr	r3, [r3, #32]
 800cec2:	029b      	lsls	r3, r3, #10
 800cec4:	499d      	ldr	r1, [pc, #628]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cec6:	4313      	orrs	r3, r2
 800cec8:	60cb      	str	r3, [r1, #12]
 800ceca:	e009      	b.n	800cee0 <HAL_RCC_OscConfig+0xa6c>
 800cecc:	4b9b      	ldr	r3, [pc, #620]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6a1b      	ldr	r3, [r3, #32]
 800ced8:	03db      	lsls	r3, r3, #15
 800ceda:	4998      	ldr	r1, [pc, #608]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cedc:	4313      	orrs	r3, r2
 800cede:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800cee0:	4b96      	ldr	r3, [pc, #600]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a95      	ldr	r2, [pc, #596]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cee6:	f043 0310 	orr.w	r3, r3, #16
 800ceea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ceec:	f7fa fe66 	bl	8007bbc <HAL_GetTick>
 800cef0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800cef2:	e008      	b.n	800cf06 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800cef4:	f7fa fe62 	bl	8007bbc <HAL_GetTick>
 800cef8:	4602      	mov	r2, r0
 800cefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	2b02      	cmp	r3, #2
 800cf00:	d901      	bls.n	800cf06 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800cf02:	2303      	movs	r3, #3
 800cf04:	e18b      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800cf06:	4b8d      	ldr	r3, [pc, #564]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f003 0320 	and.w	r3, r3, #32
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d0f0      	beq.n	800cef4 <HAL_RCC_OscConfig+0xa80>
 800cf12:	e018      	b.n	800cf46 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800cf14:	4b89      	ldr	r3, [pc, #548]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4a88      	ldr	r2, [pc, #544]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cf1a:	f023 0310 	bic.w	r3, r3, #16
 800cf1e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cf20:	f7fa fe4c 	bl	8007bbc <HAL_GetTick>
 800cf24:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800cf26:	e008      	b.n	800cf3a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800cf28:	f7fa fe48 	bl	8007bbc <HAL_GetTick>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf30:	1ad3      	subs	r3, r2, r3
 800cf32:	2b02      	cmp	r3, #2
 800cf34:	d901      	bls.n	800cf3a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800cf36:	2303      	movs	r3, #3
 800cf38:	e171      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800cf3a:	4b80      	ldr	r3, [pc, #512]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f003 0320 	and.w	r3, r3, #32
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d1f0      	bne.n	800cf28 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	f000 8166 	beq.w	800d21c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800cf50:	2300      	movs	r3, #0
 800cf52:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cf56:	4b79      	ldr	r3, [pc, #484]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cf58:	69db      	ldr	r3, [r3, #28]
 800cf5a:	f003 030c 	and.w	r3, r3, #12
 800cf5e:	2b0c      	cmp	r3, #12
 800cf60:	f000 80f2 	beq.w	800d148 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	f040 80c5 	bne.w	800d0f8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800cf6e:	4b73      	ldr	r3, [pc, #460]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4a72      	ldr	r2, [pc, #456]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cf74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cf78:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cf7a:	f7fa fe1f 	bl	8007bbc <HAL_GetTick>
 800cf7e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800cf80:	e008      	b.n	800cf94 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf82:	f7fa fe1b 	bl	8007bbc <HAL_GetTick>
 800cf86:	4602      	mov	r2, r0
 800cf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8a:	1ad3      	subs	r3, r2, r3
 800cf8c:	2b02      	cmp	r3, #2
 800cf8e:	d901      	bls.n	800cf94 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800cf90:	2303      	movs	r3, #3
 800cf92:	e144      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800cf94:	4b69      	ldr	r3, [pc, #420]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d1f0      	bne.n	800cf82 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cfa0:	4b66      	ldr	r3, [pc, #408]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cfa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfa6:	f003 0304 	and.w	r3, r3, #4
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d111      	bne.n	800cfd2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800cfae:	4b63      	ldr	r3, [pc, #396]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cfb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfb4:	4a61      	ldr	r2, [pc, #388]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cfb6:	f043 0304 	orr.w	r3, r3, #4
 800cfba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800cfbe:	4b5f      	ldr	r3, [pc, #380]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cfc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfc4:	f003 0304 	and.w	r3, r3, #4
 800cfc8:	60fb      	str	r3, [r7, #12]
 800cfca:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800cfd2:	4b5b      	ldr	r3, [pc, #364]	; (800d140 <HAL_RCC_OscConfig+0xccc>)
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cfda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cfde:	d102      	bne.n	800cfe6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800cfe6:	4b56      	ldr	r3, [pc, #344]	; (800d140 <HAL_RCC_OscConfig+0xccc>)
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	4a55      	ldr	r2, [pc, #340]	; (800d140 <HAL_RCC_OscConfig+0xccc>)
 800cfec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cff0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800cff2:	4b52      	ldr	r3, [pc, #328]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800cff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cffa:	f023 0303 	bic.w	r3, r3, #3
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d006:	3a01      	subs	r2, #1
 800d008:	0212      	lsls	r2, r2, #8
 800d00a:	4311      	orrs	r1, r2
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d010:	430a      	orrs	r2, r1
 800d012:	494a      	ldr	r1, [pc, #296]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d014:	4313      	orrs	r3, r2
 800d016:	628b      	str	r3, [r1, #40]	; 0x28
 800d018:	4b48      	ldr	r3, [pc, #288]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d01a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d01c:	4b49      	ldr	r3, [pc, #292]	; (800d144 <HAL_RCC_OscConfig+0xcd0>)
 800d01e:	4013      	ands	r3, r2
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d024:	3a01      	subs	r2, #1
 800d026:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d02e:	3a01      	subs	r2, #1
 800d030:	0252      	lsls	r2, r2, #9
 800d032:	b292      	uxth	r2, r2
 800d034:	4311      	orrs	r1, r2
 800d036:	687a      	ldr	r2, [r7, #4]
 800d038:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d03a:	3a01      	subs	r2, #1
 800d03c:	0412      	lsls	r2, r2, #16
 800d03e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800d042:	4311      	orrs	r1, r2
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d048:	3a01      	subs	r2, #1
 800d04a:	0612      	lsls	r2, r2, #24
 800d04c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800d050:	430a      	orrs	r2, r1
 800d052:	493a      	ldr	r1, [pc, #232]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d054:	4313      	orrs	r3, r2
 800d056:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800d058:	4b38      	ldr	r3, [pc, #224]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d05c:	4a37      	ldr	r2, [pc, #220]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d05e:	f023 0310 	bic.w	r3, r3, #16
 800d062:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d068:	4a34      	ldr	r2, [pc, #208]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d06a:	00db      	lsls	r3, r3, #3
 800d06c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800d06e:	4b33      	ldr	r3, [pc, #204]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d072:	4a32      	ldr	r2, [pc, #200]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d074:	f043 0310 	orr.w	r3, r3, #16
 800d078:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800d07a:	4b30      	ldr	r3, [pc, #192]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d07e:	f023 020c 	bic.w	r2, r3, #12
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d086:	492d      	ldr	r1, [pc, #180]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d088:	4313      	orrs	r3, r2
 800d08a:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800d08c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d090:	2b01      	cmp	r3, #1
 800d092:	d105      	bne.n	800d0a0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800d094:	4b2a      	ldr	r3, [pc, #168]	; (800d140 <HAL_RCC_OscConfig+0xccc>)
 800d096:	68db      	ldr	r3, [r3, #12]
 800d098:	4a29      	ldr	r2, [pc, #164]	; (800d140 <HAL_RCC_OscConfig+0xccc>)
 800d09a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d09e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800d0a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d107      	bne.n	800d0b8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800d0a8:	4b24      	ldr	r3, [pc, #144]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d0aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d0ae:	4a23      	ldr	r2, [pc, #140]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d0b0:	f023 0304 	bic.w	r3, r3, #4
 800d0b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d0b8:	4b20      	ldr	r3, [pc, #128]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0bc:	4a1f      	ldr	r2, [pc, #124]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d0be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d0c2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800d0c4:	4b1d      	ldr	r3, [pc, #116]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a1c      	ldr	r2, [pc, #112]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d0ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d0ce:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d0d0:	f7fa fd74 	bl	8007bbc <HAL_GetTick>
 800d0d4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d0d6:	e008      	b.n	800d0ea <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d0d8:	f7fa fd70 	bl	8007bbc <HAL_GetTick>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	2b02      	cmp	r3, #2
 800d0e4:	d901      	bls.n	800d0ea <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800d0e6:	2303      	movs	r3, #3
 800d0e8:	e099      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d0ea:	4b14      	ldr	r3, [pc, #80]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d0f0      	beq.n	800d0d8 <HAL_RCC_OscConfig+0xc64>
 800d0f6:	e091      	b.n	800d21c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800d0f8:	4b10      	ldr	r3, [pc, #64]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a0f      	ldr	r2, [pc, #60]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d0fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d102:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800d104:	f7fa fd5a 	bl	8007bbc <HAL_GetTick>
 800d108:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d10a:	e008      	b.n	800d11e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d10c:	f7fa fd56 	bl	8007bbc <HAL_GetTick>
 800d110:	4602      	mov	r2, r0
 800d112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d114:	1ad3      	subs	r3, r2, r3
 800d116:	2b02      	cmp	r3, #2
 800d118:	d901      	bls.n	800d11e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800d11a:	2303      	movs	r3, #3
 800d11c:	e07f      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800d11e:	4b07      	ldr	r3, [pc, #28]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d126:	2b00      	cmp	r3, #0
 800d128:	d1f0      	bne.n	800d10c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800d12a:	4b04      	ldr	r3, [pc, #16]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d12e:	4a03      	ldr	r2, [pc, #12]	; (800d13c <HAL_RCC_OscConfig+0xcc8>)
 800d130:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800d134:	f023 0303 	bic.w	r3, r3, #3
 800d138:	6293      	str	r3, [r2, #40]	; 0x28
 800d13a:	e06f      	b.n	800d21c <HAL_RCC_OscConfig+0xda8>
 800d13c:	46020c00 	.word	0x46020c00
 800d140:	46020800 	.word	0x46020800
 800d144:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800d148:	4b37      	ldr	r3, [pc, #220]	; (800d228 <HAL_RCC_OscConfig+0xdb4>)
 800d14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d14c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d14e:	4b36      	ldr	r3, [pc, #216]	; (800d228 <HAL_RCC_OscConfig+0xdb4>)
 800d150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d152:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d039      	beq.n	800d1d0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800d15c:	69fb      	ldr	r3, [r7, #28]
 800d15e:	f003 0203 	and.w	r2, r3, #3
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d166:	429a      	cmp	r2, r3
 800d168:	d132      	bne.n	800d1d0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	0a1b      	lsrs	r3, r3, #8
 800d16e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d176:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800d178:	429a      	cmp	r2, r3
 800d17a:	d129      	bne.n	800d1d0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800d186:	429a      	cmp	r2, r3
 800d188:	d122      	bne.n	800d1d0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d18a:	69bb      	ldr	r3, [r7, #24]
 800d18c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d194:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800d196:	429a      	cmp	r2, r3
 800d198:	d11a      	bne.n	800d1d0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	0a5b      	lsrs	r3, r3, #9
 800d19e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d111      	bne.n	800d1d0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800d1ac:	69bb      	ldr	r3, [r7, #24]
 800d1ae:	0c1b      	lsrs	r3, r3, #16
 800d1b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1b8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d108      	bne.n	800d1d0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800d1be:	69bb      	ldr	r3, [r7, #24]
 800d1c0:	0e1b      	lsrs	r3, r3, #24
 800d1c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1ca:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d001      	beq.n	800d1d4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e024      	b.n	800d21e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800d1d4:	4b14      	ldr	r3, [pc, #80]	; (800d228 <HAL_RCC_OscConfig+0xdb4>)
 800d1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d8:	08db      	lsrs	r3, r3, #3
 800d1da:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d01a      	beq.n	800d21c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800d1e6:	4b10      	ldr	r3, [pc, #64]	; (800d228 <HAL_RCC_OscConfig+0xdb4>)
 800d1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ea:	4a0f      	ldr	r2, [pc, #60]	; (800d228 <HAL_RCC_OscConfig+0xdb4>)
 800d1ec:	f023 0310 	bic.w	r3, r3, #16
 800d1f0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1f2:	f7fa fce3 	bl	8007bbc <HAL_GetTick>
 800d1f6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800d1f8:	bf00      	nop
 800d1fa:	f7fa fcdf 	bl	8007bbc <HAL_GetTick>
 800d1fe:	4602      	mov	r2, r0
 800d200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d202:	4293      	cmp	r3, r2
 800d204:	d0f9      	beq.n	800d1fa <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d20a:	4a07      	ldr	r2, [pc, #28]	; (800d228 <HAL_RCC_OscConfig+0xdb4>)
 800d20c:	00db      	lsls	r3, r3, #3
 800d20e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800d210:	4b05      	ldr	r3, [pc, #20]	; (800d228 <HAL_RCC_OscConfig+0xdb4>)
 800d212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d214:	4a04      	ldr	r2, [pc, #16]	; (800d228 <HAL_RCC_OscConfig+0xdb4>)
 800d216:	f043 0310 	orr.w	r3, r3, #16
 800d21a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3738      	adds	r7, #56	; 0x38
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	46020c00 	.word	0x46020c00

0800d22c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b086      	sub	sp, #24
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d101      	bne.n	800d240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d23c:	2301      	movs	r3, #1
 800d23e:	e1d9      	b.n	800d5f4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d240:	4b9b      	ldr	r3, [pc, #620]	; (800d4b0 <HAL_RCC_ClockConfig+0x284>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f003 030f 	and.w	r3, r3, #15
 800d248:	683a      	ldr	r2, [r7, #0]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d910      	bls.n	800d270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d24e:	4b98      	ldr	r3, [pc, #608]	; (800d4b0 <HAL_RCC_ClockConfig+0x284>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f023 020f 	bic.w	r2, r3, #15
 800d256:	4996      	ldr	r1, [pc, #600]	; (800d4b0 <HAL_RCC_ClockConfig+0x284>)
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	4313      	orrs	r3, r2
 800d25c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d25e:	4b94      	ldr	r3, [pc, #592]	; (800d4b0 <HAL_RCC_ClockConfig+0x284>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f003 030f 	and.w	r3, r3, #15
 800d266:	683a      	ldr	r2, [r7, #0]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d001      	beq.n	800d270 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d26c:	2301      	movs	r3, #1
 800d26e:	e1c1      	b.n	800d5f4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f003 0310 	and.w	r3, r3, #16
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d010      	beq.n	800d29e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	695a      	ldr	r2, [r3, #20]
 800d280:	4b8c      	ldr	r3, [pc, #560]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d284:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d288:	429a      	cmp	r2, r3
 800d28a:	d908      	bls.n	800d29e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800d28c:	4b89      	ldr	r3, [pc, #548]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d290:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	695b      	ldr	r3, [r3, #20]
 800d298:	4986      	ldr	r1, [pc, #536]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d29a:	4313      	orrs	r3, r2
 800d29c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f003 0308 	and.w	r3, r3, #8
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d012      	beq.n	800d2d0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	691a      	ldr	r2, [r3, #16]
 800d2ae:	4b81      	ldr	r3, [pc, #516]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d2b0:	6a1b      	ldr	r3, [r3, #32]
 800d2b2:	091b      	lsrs	r3, r3, #4
 800d2b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d909      	bls.n	800d2d0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800d2bc:	4b7d      	ldr	r3, [pc, #500]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d2be:	6a1b      	ldr	r3, [r3, #32]
 800d2c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	691b      	ldr	r3, [r3, #16]
 800d2c8:	011b      	lsls	r3, r3, #4
 800d2ca:	497a      	ldr	r1, [pc, #488]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f003 0304 	and.w	r3, r3, #4
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d010      	beq.n	800d2fe <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	68da      	ldr	r2, [r3, #12]
 800d2e0:	4b74      	ldr	r3, [pc, #464]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d2e2:	6a1b      	ldr	r3, [r3, #32]
 800d2e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d908      	bls.n	800d2fe <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800d2ec:	4b71      	ldr	r3, [pc, #452]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d2ee:	6a1b      	ldr	r3, [r3, #32]
 800d2f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	496e      	ldr	r1, [pc, #440]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f003 0302 	and.w	r3, r3, #2
 800d306:	2b00      	cmp	r3, #0
 800d308:	d010      	beq.n	800d32c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	689a      	ldr	r2, [r3, #8]
 800d30e:	4b69      	ldr	r3, [pc, #420]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d310:	6a1b      	ldr	r3, [r3, #32]
 800d312:	f003 030f 	and.w	r3, r3, #15
 800d316:	429a      	cmp	r2, r3
 800d318:	d908      	bls.n	800d32c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800d31a:	4b66      	ldr	r3, [pc, #408]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d31c:	6a1b      	ldr	r3, [r3, #32]
 800d31e:	f023 020f 	bic.w	r2, r3, #15
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	689b      	ldr	r3, [r3, #8]
 800d326:	4963      	ldr	r1, [pc, #396]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d328:	4313      	orrs	r3, r2
 800d32a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f003 0301 	and.w	r3, r3, #1
 800d334:	2b00      	cmp	r3, #0
 800d336:	f000 80d2 	beq.w	800d4de <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800d33a:	2300      	movs	r3, #0
 800d33c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	2b03      	cmp	r3, #3
 800d344:	d143      	bne.n	800d3ce <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d346:	4b5b      	ldr	r3, [pc, #364]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d34c:	f003 0304 	and.w	r3, r3, #4
 800d350:	2b00      	cmp	r3, #0
 800d352:	d110      	bne.n	800d376 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800d354:	4b57      	ldr	r3, [pc, #348]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d35a:	4a56      	ldr	r2, [pc, #344]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d35c:	f043 0304 	orr.w	r3, r3, #4
 800d360:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d364:	4b53      	ldr	r3, [pc, #332]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d36a:	f003 0304 	and.w	r3, r3, #4
 800d36e:	60bb      	str	r3, [r7, #8]
 800d370:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800d372:	2301      	movs	r3, #1
 800d374:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800d376:	f7fa fc21 	bl	8007bbc <HAL_GetTick>
 800d37a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800d37c:	4b4e      	ldr	r3, [pc, #312]	; (800d4b8 <HAL_RCC_ClockConfig+0x28c>)
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d384:	2b00      	cmp	r3, #0
 800d386:	d00f      	beq.n	800d3a8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800d388:	e008      	b.n	800d39c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800d38a:	f7fa fc17 	bl	8007bbc <HAL_GetTick>
 800d38e:	4602      	mov	r2, r0
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	1ad3      	subs	r3, r2, r3
 800d394:	2b02      	cmp	r3, #2
 800d396:	d901      	bls.n	800d39c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800d398:	2303      	movs	r3, #3
 800d39a:	e12b      	b.n	800d5f4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800d39c:	4b46      	ldr	r3, [pc, #280]	; (800d4b8 <HAL_RCC_ClockConfig+0x28c>)
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d0f0      	beq.n	800d38a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800d3a8:	7dfb      	ldrb	r3, [r7, #23]
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d107      	bne.n	800d3be <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800d3ae:	4b41      	ldr	r3, [pc, #260]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d3b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d3b4:	4a3f      	ldr	r2, [pc, #252]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d3b6:	f023 0304 	bic.w	r3, r3, #4
 800d3ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d3be:	4b3d      	ldr	r3, [pc, #244]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d121      	bne.n	800d40e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	e112      	b.n	800d5f4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	d107      	bne.n	800d3e6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d3d6:	4b37      	ldr	r3, [pc, #220]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d115      	bne.n	800d40e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e106      	b.n	800d5f4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d107      	bne.n	800d3fe <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800d3ee:	4b31      	ldr	r3, [pc, #196]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f003 0304 	and.w	r3, r3, #4
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d109      	bne.n	800d40e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	e0fa      	b.n	800d5f4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d3fe:	4b2d      	ldr	r3, [pc, #180]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d406:	2b00      	cmp	r3, #0
 800d408:	d101      	bne.n	800d40e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d40a:	2301      	movs	r3, #1
 800d40c:	e0f2      	b.n	800d5f4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800d40e:	4b29      	ldr	r3, [pc, #164]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d410:	69db      	ldr	r3, [r3, #28]
 800d412:	f023 0203 	bic.w	r2, r3, #3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	685b      	ldr	r3, [r3, #4]
 800d41a:	4926      	ldr	r1, [pc, #152]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d41c:	4313      	orrs	r3, r2
 800d41e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800d420:	f7fa fbcc 	bl	8007bbc <HAL_GetTick>
 800d424:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	2b03      	cmp	r3, #3
 800d42c:	d112      	bne.n	800d454 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d42e:	e00a      	b.n	800d446 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d430:	f7fa fbc4 	bl	8007bbc <HAL_GetTick>
 800d434:	4602      	mov	r2, r0
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	1ad3      	subs	r3, r2, r3
 800d43a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d43e:	4293      	cmp	r3, r2
 800d440:	d901      	bls.n	800d446 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800d442:	2303      	movs	r3, #3
 800d444:	e0d6      	b.n	800d5f4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d446:	4b1b      	ldr	r3, [pc, #108]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d448:	69db      	ldr	r3, [r3, #28]
 800d44a:	f003 030c 	and.w	r3, r3, #12
 800d44e:	2b0c      	cmp	r3, #12
 800d450:	d1ee      	bne.n	800d430 <HAL_RCC_ClockConfig+0x204>
 800d452:	e044      	b.n	800d4de <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	2b02      	cmp	r3, #2
 800d45a:	d112      	bne.n	800d482 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d45c:	e00a      	b.n	800d474 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d45e:	f7fa fbad 	bl	8007bbc <HAL_GetTick>
 800d462:	4602      	mov	r2, r0
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	1ad3      	subs	r3, r2, r3
 800d468:	f241 3288 	movw	r2, #5000	; 0x1388
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d901      	bls.n	800d474 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d470:	2303      	movs	r3, #3
 800d472:	e0bf      	b.n	800d5f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d474:	4b0f      	ldr	r3, [pc, #60]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d476:	69db      	ldr	r3, [r3, #28]
 800d478:	f003 030c 	and.w	r3, r3, #12
 800d47c:	2b08      	cmp	r3, #8
 800d47e:	d1ee      	bne.n	800d45e <HAL_RCC_ClockConfig+0x232>
 800d480:	e02d      	b.n	800d4de <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d123      	bne.n	800d4d2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d48a:	e00a      	b.n	800d4a2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d48c:	f7fa fb96 	bl	8007bbc <HAL_GetTick>
 800d490:	4602      	mov	r2, r0
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	1ad3      	subs	r3, r2, r3
 800d496:	f241 3288 	movw	r2, #5000	; 0x1388
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d901      	bls.n	800d4a2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800d49e:	2303      	movs	r3, #3
 800d4a0:	e0a8      	b.n	800d5f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d4a2:	4b04      	ldr	r3, [pc, #16]	; (800d4b4 <HAL_RCC_ClockConfig+0x288>)
 800d4a4:	69db      	ldr	r3, [r3, #28]
 800d4a6:	f003 030c 	and.w	r3, r3, #12
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d1ee      	bne.n	800d48c <HAL_RCC_ClockConfig+0x260>
 800d4ae:	e016      	b.n	800d4de <HAL_RCC_ClockConfig+0x2b2>
 800d4b0:	40022000 	.word	0x40022000
 800d4b4:	46020c00 	.word	0x46020c00
 800d4b8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d4bc:	f7fa fb7e 	bl	8007bbc <HAL_GetTick>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	1ad3      	subs	r3, r2, r3
 800d4c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d901      	bls.n	800d4d2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800d4ce:	2303      	movs	r3, #3
 800d4d0:	e090      	b.n	800d5f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d4d2:	4b4a      	ldr	r3, [pc, #296]	; (800d5fc <HAL_RCC_ClockConfig+0x3d0>)
 800d4d4:	69db      	ldr	r3, [r3, #28]
 800d4d6:	f003 030c 	and.w	r3, r3, #12
 800d4da:	2b04      	cmp	r3, #4
 800d4dc:	d1ee      	bne.n	800d4bc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f003 0302 	and.w	r3, r3, #2
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d010      	beq.n	800d50c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	689a      	ldr	r2, [r3, #8]
 800d4ee:	4b43      	ldr	r3, [pc, #268]	; (800d5fc <HAL_RCC_ClockConfig+0x3d0>)
 800d4f0:	6a1b      	ldr	r3, [r3, #32]
 800d4f2:	f003 030f 	and.w	r3, r3, #15
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d208      	bcs.n	800d50c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800d4fa:	4b40      	ldr	r3, [pc, #256]	; (800d5fc <HAL_RCC_ClockConfig+0x3d0>)
 800d4fc:	6a1b      	ldr	r3, [r3, #32]
 800d4fe:	f023 020f 	bic.w	r2, r3, #15
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	689b      	ldr	r3, [r3, #8]
 800d506:	493d      	ldr	r1, [pc, #244]	; (800d5fc <HAL_RCC_ClockConfig+0x3d0>)
 800d508:	4313      	orrs	r3, r2
 800d50a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d50c:	4b3c      	ldr	r3, [pc, #240]	; (800d600 <HAL_RCC_ClockConfig+0x3d4>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f003 030f 	and.w	r3, r3, #15
 800d514:	683a      	ldr	r2, [r7, #0]
 800d516:	429a      	cmp	r2, r3
 800d518:	d210      	bcs.n	800d53c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d51a:	4b39      	ldr	r3, [pc, #228]	; (800d600 <HAL_RCC_ClockConfig+0x3d4>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f023 020f 	bic.w	r2, r3, #15
 800d522:	4937      	ldr	r1, [pc, #220]	; (800d600 <HAL_RCC_ClockConfig+0x3d4>)
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	4313      	orrs	r3, r2
 800d528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d52a:	4b35      	ldr	r3, [pc, #212]	; (800d600 <HAL_RCC_ClockConfig+0x3d4>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f003 030f 	and.w	r3, r3, #15
 800d532:	683a      	ldr	r2, [r7, #0]
 800d534:	429a      	cmp	r2, r3
 800d536:	d001      	beq.n	800d53c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800d538:	2301      	movs	r3, #1
 800d53a:	e05b      	b.n	800d5f4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f003 0304 	and.w	r3, r3, #4
 800d544:	2b00      	cmp	r3, #0
 800d546:	d010      	beq.n	800d56a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	68da      	ldr	r2, [r3, #12]
 800d54c:	4b2b      	ldr	r3, [pc, #172]	; (800d5fc <HAL_RCC_ClockConfig+0x3d0>)
 800d54e:	6a1b      	ldr	r3, [r3, #32]
 800d550:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d554:	429a      	cmp	r2, r3
 800d556:	d208      	bcs.n	800d56a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800d558:	4b28      	ldr	r3, [pc, #160]	; (800d5fc <HAL_RCC_ClockConfig+0x3d0>)
 800d55a:	6a1b      	ldr	r3, [r3, #32]
 800d55c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	68db      	ldr	r3, [r3, #12]
 800d564:	4925      	ldr	r1, [pc, #148]	; (800d5fc <HAL_RCC_ClockConfig+0x3d0>)
 800d566:	4313      	orrs	r3, r2
 800d568:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f003 0308 	and.w	r3, r3, #8
 800d572:	2b00      	cmp	r3, #0
 800d574:	d012      	beq.n	800d59c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	691a      	ldr	r2, [r3, #16]
 800d57a:	4b20      	ldr	r3, [pc, #128]	; (800d5fc <HAL_RCC_ClockConfig+0x3d0>)
 800d57c:	6a1b      	ldr	r3, [r3, #32]
 800d57e:	091b      	lsrs	r3, r3, #4
 800d580:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d584:	429a      	cmp	r2, r3
 800d586:	d209      	bcs.n	800d59c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800d588:	4b1c      	ldr	r3, [pc, #112]	; (800d5fc <HAL_RCC_ClockConfig+0x3d0>)
 800d58a:	6a1b      	ldr	r3, [r3, #32]
 800d58c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	691b      	ldr	r3, [r3, #16]
 800d594:	011b      	lsls	r3, r3, #4
 800d596:	4919      	ldr	r1, [pc, #100]	; (800d5fc <HAL_RCC_ClockConfig+0x3d0>)
 800d598:	4313      	orrs	r3, r2
 800d59a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f003 0310 	and.w	r3, r3, #16
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d010      	beq.n	800d5ca <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	695a      	ldr	r2, [r3, #20]
 800d5ac:	4b13      	ldr	r3, [pc, #76]	; (800d5fc <HAL_RCC_ClockConfig+0x3d0>)
 800d5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d208      	bcs.n	800d5ca <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800d5b8:	4b10      	ldr	r3, [pc, #64]	; (800d5fc <HAL_RCC_ClockConfig+0x3d0>)
 800d5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	695b      	ldr	r3, [r3, #20]
 800d5c4:	490d      	ldr	r1, [pc, #52]	; (800d5fc <HAL_RCC_ClockConfig+0x3d0>)
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d5ca:	f000 f821 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	4b0a      	ldr	r3, [pc, #40]	; (800d5fc <HAL_RCC_ClockConfig+0x3d0>)
 800d5d2:	6a1b      	ldr	r3, [r3, #32]
 800d5d4:	f003 030f 	and.w	r3, r3, #15
 800d5d8:	490a      	ldr	r1, [pc, #40]	; (800d604 <HAL_RCC_ClockConfig+0x3d8>)
 800d5da:	5ccb      	ldrb	r3, [r1, r3]
 800d5dc:	fa22 f303 	lsr.w	r3, r2, r3
 800d5e0:	4a09      	ldr	r2, [pc, #36]	; (800d608 <HAL_RCC_ClockConfig+0x3dc>)
 800d5e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d5e4:	4b09      	ldr	r3, [pc, #36]	; (800d60c <HAL_RCC_ClockConfig+0x3e0>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7f4 fd27 	bl	800203c <HAL_InitTick>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	73fb      	strb	r3, [r7, #15]

  return status;
 800d5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3718      	adds	r7, #24
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	46020c00 	.word	0x46020c00
 800d600:	40022000 	.word	0x40022000
 800d604:	0802bd7c 	.word	0x0802bd7c
 800d608:	20000048 	.word	0x20000048
 800d60c:	2000004c 	.word	0x2000004c

0800d610 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d610:	b480      	push	{r7}
 800d612:	b08b      	sub	sp, #44	; 0x2c
 800d614:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800d616:	2300      	movs	r3, #0
 800d618:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800d61a:	2300      	movs	r3, #0
 800d61c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d61e:	4b7b      	ldr	r3, [pc, #492]	; (800d80c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d620:	69db      	ldr	r3, [r3, #28]
 800d622:	f003 030c 	and.w	r3, r3, #12
 800d626:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d628:	4b78      	ldr	r3, [pc, #480]	; (800d80c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d62c:	f003 0303 	and.w	r3, r3, #3
 800d630:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d632:	69bb      	ldr	r3, [r7, #24]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d005      	beq.n	800d644 <HAL_RCC_GetSysClockFreq+0x34>
 800d638:	69bb      	ldr	r3, [r7, #24]
 800d63a:	2b0c      	cmp	r3, #12
 800d63c:	d121      	bne.n	800d682 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	2b01      	cmp	r3, #1
 800d642:	d11e      	bne.n	800d682 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800d644:	4b71      	ldr	r3, [pc, #452]	; (800d80c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d107      	bne.n	800d660 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800d650:	4b6e      	ldr	r3, [pc, #440]	; (800d80c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d652:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d656:	0b1b      	lsrs	r3, r3, #12
 800d658:	f003 030f 	and.w	r3, r3, #15
 800d65c:	627b      	str	r3, [r7, #36]	; 0x24
 800d65e:	e005      	b.n	800d66c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800d660:	4b6a      	ldr	r3, [pc, #424]	; (800d80c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d662:	689b      	ldr	r3, [r3, #8]
 800d664:	0f1b      	lsrs	r3, r3, #28
 800d666:	f003 030f 	and.w	r3, r3, #15
 800d66a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d66c:	4a68      	ldr	r2, [pc, #416]	; (800d810 <HAL_RCC_GetSysClockFreq+0x200>)
 800d66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d674:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d110      	bne.n	800d69e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d680:	e00d      	b.n	800d69e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d682:	4b62      	ldr	r3, [pc, #392]	; (800d80c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d684:	69db      	ldr	r3, [r3, #28]
 800d686:	f003 030c 	and.w	r3, r3, #12
 800d68a:	2b04      	cmp	r3, #4
 800d68c:	d102      	bne.n	800d694 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d68e:	4b61      	ldr	r3, [pc, #388]	; (800d814 <HAL_RCC_GetSysClockFreq+0x204>)
 800d690:	623b      	str	r3, [r7, #32]
 800d692:	e004      	b.n	800d69e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	2b08      	cmp	r3, #8
 800d698:	d101      	bne.n	800d69e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d69a:	4b5e      	ldr	r3, [pc, #376]	; (800d814 <HAL_RCC_GetSysClockFreq+0x204>)
 800d69c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d69e:	69bb      	ldr	r3, [r7, #24]
 800d6a0:	2b0c      	cmp	r3, #12
 800d6a2:	f040 80ac 	bne.w	800d7fe <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800d6a6:	4b59      	ldr	r3, [pc, #356]	; (800d80c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6aa:	f003 0303 	and.w	r3, r3, #3
 800d6ae:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800d6b0:	4b56      	ldr	r3, [pc, #344]	; (800d80c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6b4:	0a1b      	lsrs	r3, r3, #8
 800d6b6:	f003 030f 	and.w	r3, r3, #15
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800d6be:	4b53      	ldr	r3, [pc, #332]	; (800d80c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6c2:	091b      	lsrs	r3, r3, #4
 800d6c4:	f003 0301 	and.w	r3, r3, #1
 800d6c8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800d6ca:	4b50      	ldr	r3, [pc, #320]	; (800d80c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ce:	08db      	lsrs	r3, r3, #3
 800d6d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6d4:	68ba      	ldr	r2, [r7, #8]
 800d6d6:	fb02 f303 	mul.w	r3, r2, r3
 800d6da:	ee07 3a90 	vmov	s15, r3
 800d6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6e2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f000 8086 	beq.w	800d7fa <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	2b02      	cmp	r3, #2
 800d6f2:	d003      	beq.n	800d6fc <HAL_RCC_GetSysClockFreq+0xec>
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	2b03      	cmp	r3, #3
 800d6f8:	d022      	beq.n	800d740 <HAL_RCC_GetSysClockFreq+0x130>
 800d6fa:	e043      	b.n	800d784 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	ee07 3a90 	vmov	s15, r3
 800d702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d706:	eddf 6a44 	vldr	s13, [pc, #272]	; 800d818 <HAL_RCC_GetSysClockFreq+0x208>
 800d70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d70e:	4b3f      	ldr	r3, [pc, #252]	; (800d80c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d716:	ee07 3a90 	vmov	s15, r3
 800d71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d71e:	ed97 6a01 	vldr	s12, [r7, #4]
 800d722:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800d81c <HAL_RCC_GetSysClockFreq+0x20c>
 800d726:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d72e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d732:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d73a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800d73e:	e046      	b.n	800d7ce <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	ee07 3a90 	vmov	s15, r3
 800d746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d74a:	eddf 6a33 	vldr	s13, [pc, #204]	; 800d818 <HAL_RCC_GetSysClockFreq+0x208>
 800d74e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d752:	4b2e      	ldr	r3, [pc, #184]	; (800d80c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d75a:	ee07 3a90 	vmov	s15, r3
 800d75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d762:	ed97 6a01 	vldr	s12, [r7, #4]
 800d766:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800d81c <HAL_RCC_GetSysClockFreq+0x20c>
 800d76a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d76e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d776:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d77a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d77e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800d782:	e024      	b.n	800d7ce <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d786:	ee07 3a90 	vmov	s15, r3
 800d78a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	ee07 3a90 	vmov	s15, r3
 800d794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d79c:	4b1b      	ldr	r3, [pc, #108]	; (800d80c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7a4:	ee07 3a90 	vmov	s15, r3
 800d7a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d7ac:	ed97 6a01 	vldr	s12, [r7, #4]
 800d7b0:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800d81c <HAL_RCC_GetSysClockFreq+0x20c>
 800d7b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d7b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d7bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d7c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7c8:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800d7cc:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800d7ce:	4b0f      	ldr	r3, [pc, #60]	; (800d80c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d2:	0e1b      	lsrs	r3, r3, #24
 800d7d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7d8:	3301      	adds	r3, #1
 800d7da:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	ee07 3a90 	vmov	s15, r3
 800d7e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d7e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7f2:	ee17 3a90 	vmov	r3, s15
 800d7f6:	623b      	str	r3, [r7, #32]
 800d7f8:	e001      	b.n	800d7fe <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800d7fe:	6a3b      	ldr	r3, [r7, #32]
}
 800d800:	4618      	mov	r0, r3
 800d802:	372c      	adds	r7, #44	; 0x2c
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr
 800d80c:	46020c00 	.word	0x46020c00
 800d810:	0802bd94 	.word	0x0802bd94
 800d814:	00f42400 	.word	0x00f42400
 800d818:	4b742400 	.word	0x4b742400
 800d81c:	46000000 	.word	0x46000000

0800d820 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d824:	f7ff fef4 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 800d828:	4602      	mov	r2, r0
 800d82a:	4b07      	ldr	r3, [pc, #28]	; (800d848 <HAL_RCC_GetHCLKFreq+0x28>)
 800d82c:	6a1b      	ldr	r3, [r3, #32]
 800d82e:	f003 030f 	and.w	r3, r3, #15
 800d832:	4906      	ldr	r1, [pc, #24]	; (800d84c <HAL_RCC_GetHCLKFreq+0x2c>)
 800d834:	5ccb      	ldrb	r3, [r1, r3]
 800d836:	fa22 f303 	lsr.w	r3, r2, r3
 800d83a:	4a05      	ldr	r2, [pc, #20]	; (800d850 <HAL_RCC_GetHCLKFreq+0x30>)
 800d83c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800d83e:	4b04      	ldr	r3, [pc, #16]	; (800d850 <HAL_RCC_GetHCLKFreq+0x30>)
 800d840:	681b      	ldr	r3, [r3, #0]
}
 800d842:	4618      	mov	r0, r3
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	46020c00 	.word	0x46020c00
 800d84c:	0802bd7c 	.word	0x0802bd7c
 800d850:	20000048 	.word	0x20000048

0800d854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800d858:	f7ff ffe2 	bl	800d820 <HAL_RCC_GetHCLKFreq>
 800d85c:	4602      	mov	r2, r0
 800d85e:	4b05      	ldr	r3, [pc, #20]	; (800d874 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d860:	6a1b      	ldr	r3, [r3, #32]
 800d862:	091b      	lsrs	r3, r3, #4
 800d864:	f003 0307 	and.w	r3, r3, #7
 800d868:	4903      	ldr	r1, [pc, #12]	; (800d878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d86a:	5ccb      	ldrb	r3, [r1, r3]
 800d86c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d870:	4618      	mov	r0, r3
 800d872:	bd80      	pop	{r7, pc}
 800d874:	46020c00 	.word	0x46020c00
 800d878:	0802bd8c 	.word	0x0802bd8c

0800d87c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800d880:	f7ff ffce 	bl	800d820 <HAL_RCC_GetHCLKFreq>
 800d884:	4602      	mov	r2, r0
 800d886:	4b05      	ldr	r3, [pc, #20]	; (800d89c <HAL_RCC_GetPCLK2Freq+0x20>)
 800d888:	6a1b      	ldr	r3, [r3, #32]
 800d88a:	0a1b      	lsrs	r3, r3, #8
 800d88c:	f003 0307 	and.w	r3, r3, #7
 800d890:	4903      	ldr	r1, [pc, #12]	; (800d8a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d892:	5ccb      	ldrb	r3, [r1, r3]
 800d894:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d898:	4618      	mov	r0, r3
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	46020c00 	.word	0x46020c00
 800d8a0:	0802bd8c 	.word	0x0802bd8c

0800d8a4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800d8a8:	f7ff ffba 	bl	800d820 <HAL_RCC_GetHCLKFreq>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	4b05      	ldr	r3, [pc, #20]	; (800d8c4 <HAL_RCC_GetPCLK3Freq+0x20>)
 800d8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b2:	091b      	lsrs	r3, r3, #4
 800d8b4:	f003 0307 	and.w	r3, r3, #7
 800d8b8:	4903      	ldr	r1, [pc, #12]	; (800d8c8 <HAL_RCC_GetPCLK3Freq+0x24>)
 800d8ba:	5ccb      	ldrb	r3, [r1, r3]
 800d8bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	bd80      	pop	{r7, pc}
 800d8c4:	46020c00 	.word	0x46020c00
 800d8c8:	0802bd8c 	.word	0x0802bd8c

0800d8cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	221f      	movs	r2, #31
 800d8da:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800d8dc:	4b15      	ldr	r3, [pc, #84]	; (800d934 <HAL_RCC_GetClockConfig+0x68>)
 800d8de:	69db      	ldr	r3, [r3, #28]
 800d8e0:	f003 0203 	and.w	r2, r3, #3
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800d8e8:	4b12      	ldr	r3, [pc, #72]	; (800d934 <HAL_RCC_GetClockConfig+0x68>)
 800d8ea:	6a1b      	ldr	r3, [r3, #32]
 800d8ec:	f003 020f 	and.w	r2, r3, #15
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800d8f4:	4b0f      	ldr	r3, [pc, #60]	; (800d934 <HAL_RCC_GetClockConfig+0x68>)
 800d8f6:	6a1b      	ldr	r3, [r3, #32]
 800d8f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800d900:	4b0c      	ldr	r3, [pc, #48]	; (800d934 <HAL_RCC_GetClockConfig+0x68>)
 800d902:	6a1b      	ldr	r3, [r3, #32]
 800d904:	091b      	lsrs	r3, r3, #4
 800d906:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800d90e:	4b09      	ldr	r3, [pc, #36]	; (800d934 <HAL_RCC_GetClockConfig+0x68>)
 800d910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d912:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d91a:	4b07      	ldr	r3, [pc, #28]	; (800d938 <HAL_RCC_GetClockConfig+0x6c>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f003 020f 	and.w	r2, r3, #15
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	601a      	str	r2, [r3, #0]
}
 800d926:	bf00      	nop
 800d928:	370c      	adds	r7, #12
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop
 800d934:	46020c00 	.word	0x46020c00
 800d938:	40022000 	.word	0x40022000

0800d93c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b086      	sub	sp, #24
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d944:	4b3e      	ldr	r3, [pc, #248]	; (800da40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d94a:	f003 0304 	and.w	r3, r3, #4
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d003      	beq.n	800d95a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d952:	f7fe fd11 	bl	800c378 <HAL_PWREx_GetVoltageRange>
 800d956:	6178      	str	r0, [r7, #20]
 800d958:	e019      	b.n	800d98e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d95a:	4b39      	ldr	r3, [pc, #228]	; (800da40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d95c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d960:	4a37      	ldr	r2, [pc, #220]	; (800da40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d962:	f043 0304 	orr.w	r3, r3, #4
 800d966:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d96a:	4b35      	ldr	r3, [pc, #212]	; (800da40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d96c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d970:	f003 0304 	and.w	r3, r3, #4
 800d974:	60fb      	str	r3, [r7, #12]
 800d976:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d978:	f7fe fcfe 	bl	800c378 <HAL_PWREx_GetVoltageRange>
 800d97c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d97e:	4b30      	ldr	r3, [pc, #192]	; (800da40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d984:	4a2e      	ldr	r2, [pc, #184]	; (800da40 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d986:	f023 0304 	bic.w	r3, r3, #4
 800d98a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d994:	d003      	beq.n	800d99e <RCC_SetFlashLatencyFromMSIRange+0x62>
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d99c:	d109      	bne.n	800d9b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d9a4:	d202      	bcs.n	800d9ac <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800d9aa:	e033      	b.n	800da14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800d9b0:	e030      	b.n	800da14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d9b8:	d208      	bcs.n	800d9cc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9c0:	d102      	bne.n	800d9c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800d9c2:	2303      	movs	r3, #3
 800d9c4:	613b      	str	r3, [r7, #16]
 800d9c6:	e025      	b.n	800da14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	e035      	b.n	800da38 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d9d2:	d90f      	bls.n	800d9f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d109      	bne.n	800d9ee <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d9e0:	d902      	bls.n	800d9e8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	613b      	str	r3, [r7, #16]
 800d9e6:	e015      	b.n	800da14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	613b      	str	r3, [r7, #16]
 800d9ec:	e012      	b.n	800da14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	613b      	str	r3, [r7, #16]
 800d9f2:	e00f      	b.n	800da14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d9fa:	d109      	bne.n	800da10 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da02:	d102      	bne.n	800da0a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800da04:	2301      	movs	r3, #1
 800da06:	613b      	str	r3, [r7, #16]
 800da08:	e004      	b.n	800da14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800da0a:	2302      	movs	r3, #2
 800da0c:	613b      	str	r3, [r7, #16]
 800da0e:	e001      	b.n	800da14 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800da10:	2301      	movs	r3, #1
 800da12:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800da14:	4b0b      	ldr	r3, [pc, #44]	; (800da44 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f023 020f 	bic.w	r2, r3, #15
 800da1c:	4909      	ldr	r1, [pc, #36]	; (800da44 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	4313      	orrs	r3, r2
 800da22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800da24:	4b07      	ldr	r3, [pc, #28]	; (800da44 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f003 030f 	and.w	r3, r3, #15
 800da2c:	693a      	ldr	r2, [r7, #16]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d001      	beq.n	800da36 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800da32:	2301      	movs	r3, #1
 800da34:	e000      	b.n	800da38 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800da36:	2300      	movs	r3, #0
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3718      	adds	r7, #24
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	46020c00 	.word	0x46020c00
 800da44:	40022000 	.word	0x40022000

0800da48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800da48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da4c:	b0c8      	sub	sp, #288	; 0x120
 800da4e:	af00      	add	r7, sp, #0
 800da50:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800da54:	2300      	movs	r3, #0
 800da56:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800da5a:	2300      	movs	r3, #0
 800da5c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800da60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da68:	f002 0401 	and.w	r4, r2, #1
 800da6c:	2500      	movs	r5, #0
 800da6e:	ea54 0305 	orrs.w	r3, r4, r5
 800da72:	d00b      	beq.n	800da8c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800da74:	4bd5      	ldr	r3, [pc, #852]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800da76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800da7a:	f023 0103 	bic.w	r1, r3, #3
 800da7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da84:	4ad1      	ldr	r2, [pc, #836]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800da86:	430b      	orrs	r3, r1
 800da88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800da8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da94:	f002 0802 	and.w	r8, r2, #2
 800da98:	f04f 0900 	mov.w	r9, #0
 800da9c:	ea58 0309 	orrs.w	r3, r8, r9
 800daa0:	d00b      	beq.n	800daba <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800daa2:	4bca      	ldr	r3, [pc, #808]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800daa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800daa8:	f023 010c 	bic.w	r1, r3, #12
 800daac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dab2:	4ac6      	ldr	r2, [pc, #792]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dab4:	430b      	orrs	r3, r1
 800dab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800daba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac2:	f002 0a04 	and.w	sl, r2, #4
 800dac6:	f04f 0b00 	mov.w	fp, #0
 800daca:	ea5a 030b 	orrs.w	r3, sl, fp
 800dace:	d00b      	beq.n	800dae8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800dad0:	4bbe      	ldr	r3, [pc, #760]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dad6:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800dada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dae0:	4aba      	ldr	r2, [pc, #744]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dae2:	430b      	orrs	r3, r1
 800dae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800daec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf0:	f002 0308 	and.w	r3, r2, #8
 800daf4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800daf8:	2300      	movs	r3, #0
 800dafa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800dafe:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800db02:	460b      	mov	r3, r1
 800db04:	4313      	orrs	r3, r2
 800db06:	d00b      	beq.n	800db20 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800db08:	4bb0      	ldr	r3, [pc, #704]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800db0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800db12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db18:	4aac      	ldr	r2, [pc, #688]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800db1a:	430b      	orrs	r3, r1
 800db1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800db20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db28:	f002 0310 	and.w	r3, r2, #16
 800db2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800db30:	2300      	movs	r3, #0
 800db32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800db36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800db3a:	460b      	mov	r3, r1
 800db3c:	4313      	orrs	r3, r2
 800db3e:	d00b      	beq.n	800db58 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800db40:	4ba2      	ldr	r3, [pc, #648]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800db42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800db4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db50:	4a9e      	ldr	r2, [pc, #632]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800db52:	430b      	orrs	r3, r1
 800db54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800db58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db60:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800db64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800db68:	2300      	movs	r3, #0
 800db6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800db6e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800db72:	460b      	mov	r3, r1
 800db74:	4313      	orrs	r3, r2
 800db76:	d00b      	beq.n	800db90 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800db78:	4b94      	ldr	r3, [pc, #592]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800db7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800db7e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800db82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db88:	4a90      	ldr	r2, [pc, #576]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800db8a:	430b      	orrs	r3, r1
 800db8c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800db90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db98:	f002 0320 	and.w	r3, r2, #32
 800db9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dba0:	2300      	movs	r3, #0
 800dba2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800dba6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800dbaa:	460b      	mov	r3, r1
 800dbac:	4313      	orrs	r3, r2
 800dbae:	d00b      	beq.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800dbb0:	4b86      	ldr	r3, [pc, #536]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dbb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dbb6:	f023 0107 	bic.w	r1, r3, #7
 800dbba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbc0:	4a82      	ldr	r2, [pc, #520]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dbc2:	430b      	orrs	r3, r1
 800dbc4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dbc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800dbd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dbd8:	2300      	movs	r3, #0
 800dbda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dbde:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	d00b      	beq.n	800dc00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800dbe8:	4b78      	ldr	r3, [pc, #480]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dbea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dbee:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800dbf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbf8:	4a74      	ldr	r2, [pc, #464]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dbfa:	430b      	orrs	r3, r1
 800dbfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dc00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc08:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800dc0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dc10:	2300      	movs	r3, #0
 800dc12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800dc16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	4313      	orrs	r3, r2
 800dc1e:	d00b      	beq.n	800dc38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800dc20:	4b6a      	ldr	r3, [pc, #424]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dc22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dc26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dc2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc30:	4a66      	ldr	r2, [pc, #408]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dc32:	430b      	orrs	r3, r1
 800dc34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dc38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc40:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800dc44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dc48:	2300      	movs	r3, #0
 800dc4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800dc4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800dc52:	460b      	mov	r3, r1
 800dc54:	4313      	orrs	r3, r2
 800dc56:	d00b      	beq.n	800dc70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800dc58:	4b5c      	ldr	r3, [pc, #368]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dc5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dc5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800dc62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc68:	4a58      	ldr	r2, [pc, #352]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dc6a:	430b      	orrs	r3, r1
 800dc6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dc70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc78:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800dc7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dc80:	2300      	movs	r3, #0
 800dc82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dc86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	4313      	orrs	r3, r2
 800dc8e:	d00b      	beq.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800dc90:	4b4e      	ldr	r3, [pc, #312]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dc92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dc96:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800dc9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dca0:	4a4a      	ldr	r2, [pc, #296]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dca2:	430b      	orrs	r3, r1
 800dca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800dca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800dcb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dcb8:	2300      	movs	r3, #0
 800dcba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dcbe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	d00b      	beq.n	800dce0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800dcc8:	4b40      	ldr	r3, [pc, #256]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dcca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dcce:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800dcd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcd8:	4a3c      	ldr	r2, [pc, #240]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dcda:	430b      	orrs	r3, r1
 800dcdc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800dce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800dcec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800dcf6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	4313      	orrs	r3, r2
 800dcfe:	d00c      	beq.n	800dd1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800dd00:	4b32      	ldr	r3, [pc, #200]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dd02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dd06:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800dd0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd12:	4a2e      	ldr	r2, [pc, #184]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dd14:	430b      	orrs	r3, r1
 800dd16:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800dd1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd22:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800dd26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dd30:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800dd34:	460b      	mov	r3, r1
 800dd36:	4313      	orrs	r3, r2
 800dd38:	d00c      	beq.n	800dd54 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800dd3a:	4b24      	ldr	r3, [pc, #144]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dd3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dd40:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800dd44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd4c:	4a1f      	ldr	r2, [pc, #124]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dd4e:	430b      	orrs	r3, r1
 800dd50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800dd54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800dd60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dd64:	2300      	movs	r3, #0
 800dd66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dd6a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800dd6e:	460b      	mov	r3, r1
 800dd70:	4313      	orrs	r3, r2
 800dd72:	d00c      	beq.n	800dd8e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800dd74:	4b15      	ldr	r3, [pc, #84]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dd76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dd7a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800dd7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd86:	4a11      	ldr	r2, [pc, #68]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800dd88:	430b      	orrs	r3, r1
 800dd8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800dd8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd96:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800dd9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dd9e:	2300      	movs	r3, #0
 800dda0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dda4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800dda8:	460b      	mov	r3, r1
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	d010      	beq.n	800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800ddae:	4b07      	ldr	r3, [pc, #28]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ddb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ddb4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ddb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddc0:	4a02      	ldr	r2, [pc, #8]	; (800ddcc <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800ddc2:	430b      	orrs	r3, r1
 800ddc4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ddc8:	e002      	b.n	800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800ddca:	bf00      	nop
 800ddcc:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ddd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd8:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800dddc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dde0:	2300      	movs	r3, #0
 800dde2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dde6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800ddea:	460b      	mov	r3, r1
 800ddec:	4313      	orrs	r3, r2
 800ddee:	d04c      	beq.n	800de8a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800ddf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ddf8:	2b80      	cmp	r3, #128	; 0x80
 800ddfa:	d02d      	beq.n	800de58 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800ddfc:	2b80      	cmp	r3, #128	; 0x80
 800ddfe:	d827      	bhi.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800de00:	2b60      	cmp	r3, #96	; 0x60
 800de02:	d02b      	beq.n	800de5c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800de04:	2b60      	cmp	r3, #96	; 0x60
 800de06:	d823      	bhi.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800de08:	2b40      	cmp	r3, #64	; 0x40
 800de0a:	d006      	beq.n	800de1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800de0c:	2b40      	cmp	r3, #64	; 0x40
 800de0e:	d81f      	bhi.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800de10:	2b00      	cmp	r3, #0
 800de12:	d009      	beq.n	800de28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800de14:	2b20      	cmp	r3, #32
 800de16:	d011      	beq.n	800de3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800de18:	e01a      	b.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800de1a:	4bc0      	ldr	r3, [pc, #768]	; (800e11c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800de1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de1e:	4abf      	ldr	r2, [pc, #764]	; (800e11c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800de20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de24:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800de26:	e01a      	b.n	800de5e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800de28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de2c:	3308      	adds	r3, #8
 800de2e:	4618      	mov	r0, r3
 800de30:	f002 fd02 	bl	8010838 <RCCEx_PLL2_Config>
 800de34:	4603      	mov	r3, r0
 800de36:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800de3a:	e010      	b.n	800de5e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800de3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de40:	332c      	adds	r3, #44	; 0x2c
 800de42:	4618      	mov	r0, r3
 800de44:	f002 fd90 	bl	8010968 <RCCEx_PLL3_Config>
 800de48:	4603      	mov	r3, r0
 800de4a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800de4e:	e006      	b.n	800de5e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800de50:	2301      	movs	r3, #1
 800de52:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800de56:	e002      	b.n	800de5e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800de58:	bf00      	nop
 800de5a:	e000      	b.n	800de5e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800de5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de5e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800de62:	2b00      	cmp	r3, #0
 800de64:	d10d      	bne.n	800de82 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800de66:	4bad      	ldr	r3, [pc, #692]	; (800e11c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800de68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800de6c:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800de70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800de78:	4aa8      	ldr	r2, [pc, #672]	; (800e11c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800de7a:	430b      	orrs	r3, r1
 800de7c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800de80:	e003      	b.n	800de8a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de82:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800de86:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800de8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de92:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800de96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800de9a:	2300      	movs	r3, #0
 800de9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dea0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800dea4:	460b      	mov	r3, r1
 800dea6:	4313      	orrs	r3, r2
 800dea8:	d053      	beq.n	800df52 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800deaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800deae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800deb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800deb6:	d033      	beq.n	800df20 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800deb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800debc:	d82c      	bhi.n	800df18 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800debe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dec2:	d02f      	beq.n	800df24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800dec4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dec8:	d826      	bhi.n	800df18 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800deca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dece:	d008      	beq.n	800dee2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800ded0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ded4:	d820      	bhi.n	800df18 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d00a      	beq.n	800def0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800deda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dede:	d011      	beq.n	800df04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800dee0:	e01a      	b.n	800df18 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dee2:	4b8e      	ldr	r3, [pc, #568]	; (800e11c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dee6:	4a8d      	ldr	r2, [pc, #564]	; (800e11c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800deec:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800deee:	e01a      	b.n	800df26 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800def0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800def4:	3308      	adds	r3, #8
 800def6:	4618      	mov	r0, r3
 800def8:	f002 fc9e 	bl	8010838 <RCCEx_PLL2_Config>
 800defc:	4603      	mov	r3, r0
 800defe:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800df02:	e010      	b.n	800df26 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800df04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df08:	332c      	adds	r3, #44	; 0x2c
 800df0a:	4618      	mov	r0, r3
 800df0c:	f002 fd2c 	bl	8010968 <RCCEx_PLL3_Config>
 800df10:	4603      	mov	r3, r0
 800df12:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800df16:	e006      	b.n	800df26 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800df18:	2301      	movs	r3, #1
 800df1a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800df1e:	e002      	b.n	800df26 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800df20:	bf00      	nop
 800df22:	e000      	b.n	800df26 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800df24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df26:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d10d      	bne.n	800df4a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800df2e:	4b7b      	ldr	r3, [pc, #492]	; (800e11c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800df30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800df34:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800df38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800df40:	4a76      	ldr	r2, [pc, #472]	; (800e11c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800df42:	430b      	orrs	r3, r1
 800df44:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800df48:	e003      	b.n	800df52 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df4a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800df4e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800df52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800df5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800df62:	2300      	movs	r3, #0
 800df64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800df68:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800df6c:	460b      	mov	r3, r1
 800df6e:	4313      	orrs	r3, r2
 800df70:	d046      	beq.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800df72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800df7a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800df7e:	d028      	beq.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800df80:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800df84:	d821      	bhi.n	800dfca <HAL_RCCEx_PeriphCLKConfig+0x582>
 800df86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df8a:	d022      	beq.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800df8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df90:	d81b      	bhi.n	800dfca <HAL_RCCEx_PeriphCLKConfig+0x582>
 800df92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800df96:	d01c      	beq.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800df98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800df9c:	d815      	bhi.n	800dfca <HAL_RCCEx_PeriphCLKConfig+0x582>
 800df9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfa2:	d008      	beq.n	800dfb6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800dfa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfa8:	d80f      	bhi.n	800dfca <HAL_RCCEx_PeriphCLKConfig+0x582>
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d011      	beq.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800dfae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfb2:	d00e      	beq.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800dfb4:	e009      	b.n	800dfca <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dfb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfba:	3308      	adds	r3, #8
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f002 fc3b 	bl	8010838 <RCCEx_PLL2_Config>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dfc8:	e004      	b.n	800dfd4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800dfca:	2301      	movs	r3, #1
 800dfcc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dfd0:	e000      	b.n	800dfd4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800dfd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dfd4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d10d      	bne.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800dfdc:	4b4f      	ldr	r3, [pc, #316]	; (800e11c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dfde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dfe2:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800dfe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dfee:	4a4b      	ldr	r2, [pc, #300]	; (800e11c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dff0:	430b      	orrs	r3, r1
 800dff2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800dff6:	e003      	b.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dff8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dffc:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800e000:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e008:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800e00c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e010:	2300      	movs	r3, #0
 800e012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e016:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800e01a:	460b      	mov	r3, r1
 800e01c:	4313      	orrs	r3, r2
 800e01e:	d03f      	beq.n	800e0a0 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800e020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e028:	2b04      	cmp	r3, #4
 800e02a:	d81e      	bhi.n	800e06a <HAL_RCCEx_PeriphCLKConfig+0x622>
 800e02c:	a201      	add	r2, pc, #4	; (adr r2, 800e034 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800e02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e032:	bf00      	nop
 800e034:	0800e073 	.word	0x0800e073
 800e038:	0800e049 	.word	0x0800e049
 800e03c:	0800e057 	.word	0x0800e057
 800e040:	0800e073 	.word	0x0800e073
 800e044:	0800e073 	.word	0x0800e073
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e048:	4b34      	ldr	r3, [pc, #208]	; (800e11c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e04a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e04c:	4a33      	ldr	r2, [pc, #204]	; (800e11c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e04e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e052:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800e054:	e00e      	b.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e056:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e05a:	332c      	adds	r3, #44	; 0x2c
 800e05c:	4618      	mov	r0, r3
 800e05e:	f002 fc83 	bl	8010968 <RCCEx_PLL3_Config>
 800e062:	4603      	mov	r3, r0
 800e064:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e068:	e004      	b.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e070:	e000      	b.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800e072:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e074:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10d      	bne.n	800e098 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800e07c:	4b27      	ldr	r3, [pc, #156]	; (800e11c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e07e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e082:	f023 0107 	bic.w	r1, r3, #7
 800e086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e08a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e08e:	4a23      	ldr	r2, [pc, #140]	; (800e11c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e090:	430b      	orrs	r3, r1
 800e092:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800e096:	e003      	b.n	800e0a0 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e098:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e09c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800e0a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800e0ac:	67bb      	str	r3, [r7, #120]	; 0x78
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e0b2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	4313      	orrs	r3, r2
 800e0ba:	d04c      	beq.n	800e156 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800e0bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e0c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e0c8:	d02a      	beq.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800e0ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e0ce:	d821      	bhi.n	800e114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800e0d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e0d4:	d026      	beq.n	800e124 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800e0d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e0da:	d81b      	bhi.n	800e114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800e0dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e0e0:	d00e      	beq.n	800e100 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800e0e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e0e6:	d815      	bhi.n	800e114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d01d      	beq.n	800e128 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800e0ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0f0:	d110      	bne.n	800e114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e0f2:	4b0a      	ldr	r3, [pc, #40]	; (800e11c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0f6:	4a09      	ldr	r2, [pc, #36]	; (800e11c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800e0f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e0fc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800e0fe:	e014      	b.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e104:	332c      	adds	r3, #44	; 0x2c
 800e106:	4618      	mov	r0, r3
 800e108:	f002 fc2e 	bl	8010968 <RCCEx_PLL3_Config>
 800e10c:	4603      	mov	r3, r0
 800e10e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e112:	e00a      	b.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e114:	2301      	movs	r3, #1
 800e116:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e11a:	e006      	b.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800e11c:	46020c00 	.word	0x46020c00
        break;
 800e120:	bf00      	nop
 800e122:	e002      	b.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800e124:	bf00      	nop
 800e126:	e000      	b.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800e128:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e12a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d10d      	bne.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800e132:	4baf      	ldr	r3, [pc, #700]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e138:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800e13c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e140:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e144:	4aaa      	ldr	r2, [pc, #680]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e146:	430b      	orrs	r3, r1
 800e148:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e14c:	e003      	b.n	800e156 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e14e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e152:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800e162:	673b      	str	r3, [r7, #112]	; 0x70
 800e164:	2300      	movs	r3, #0
 800e166:	677b      	str	r3, [r7, #116]	; 0x74
 800e168:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800e16c:	460b      	mov	r3, r1
 800e16e:	4313      	orrs	r3, r2
 800e170:	f000 80b5 	beq.w	800e2de <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e174:	2300      	movs	r3, #0
 800e176:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e17a:	4b9d      	ldr	r3, [pc, #628]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e17c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e180:	f003 0304 	and.w	r3, r3, #4
 800e184:	2b00      	cmp	r3, #0
 800e186:	d113      	bne.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e188:	4b99      	ldr	r3, [pc, #612]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e18a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e18e:	4a98      	ldr	r2, [pc, #608]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e190:	f043 0304 	orr.w	r3, r3, #4
 800e194:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800e198:	4b95      	ldr	r3, [pc, #596]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e19a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e19e:	f003 0304 	and.w	r3, r3, #4
 800e1a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800e1a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
      pwrclkchanged = SET;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800e1b0:	4b90      	ldr	r3, [pc, #576]	; (800e3f4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800e1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1b4:	4a8f      	ldr	r2, [pc, #572]	; (800e3f4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800e1b6:	f043 0301 	orr.w	r3, r3, #1
 800e1ba:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e1bc:	f7f9 fcfe 	bl	8007bbc <HAL_GetTick>
 800e1c0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800e1c4:	e00b      	b.n	800e1de <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e1c6:	f7f9 fcf9 	bl	8007bbc <HAL_GetTick>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	2b02      	cmp	r3, #2
 800e1d4:	d903      	bls.n	800e1de <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800e1d6:	2303      	movs	r3, #3
 800e1d8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e1dc:	e005      	b.n	800e1ea <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800e1de:	4b85      	ldr	r3, [pc, #532]	; (800e3f4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800e1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1e2:	f003 0301 	and.w	r3, r3, #1
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d0ed      	beq.n	800e1c6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800e1ea:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d165      	bne.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e1f2:	4b7f      	ldr	r3, [pc, #508]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e1f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e1f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e1fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800e200:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e204:	2b00      	cmp	r3, #0
 800e206:	d023      	beq.n	800e250 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800e208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e20c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800e210:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e214:	4293      	cmp	r3, r2
 800e216:	d01b      	beq.n	800e250 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e218:	4b75      	ldr	r3, [pc, #468]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e21a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e21e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e222:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e226:	4b72      	ldr	r3, [pc, #456]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e22c:	4a70      	ldr	r2, [pc, #448]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e22e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e232:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e236:	4b6e      	ldr	r3, [pc, #440]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e23c:	4a6c      	ldr	r2, [pc, #432]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e23e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e242:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e246:	4a6a      	ldr	r2, [pc, #424]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e248:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e24c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e250:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e254:	f003 0301 	and.w	r3, r3, #1
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d019      	beq.n	800e290 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e25c:	f7f9 fcae 	bl	8007bbc <HAL_GetTick>
 800e260:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e264:	e00d      	b.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e266:	f7f9 fca9 	bl	8007bbc <HAL_GetTick>
 800e26a:	4602      	mov	r2, r0
 800e26c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e270:	1ad2      	subs	r2, r2, r3
 800e272:	f241 3388 	movw	r3, #5000	; 0x1388
 800e276:	429a      	cmp	r2, r3
 800e278:	d903      	bls.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800e27a:	2303      	movs	r3, #3
 800e27c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
            break;
 800e280:	e006      	b.n	800e290 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e282:	4b5b      	ldr	r3, [pc, #364]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e288:	f003 0302 	and.w	r3, r3, #2
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d0ea      	beq.n	800e266 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800e290:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e294:	2b00      	cmp	r3, #0
 800e296:	d10d      	bne.n	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800e298:	4b55      	ldr	r3, [pc, #340]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e29a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e29e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e2a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2a6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e2aa:	4a51      	ldr	r2, [pc, #324]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e2ac:	430b      	orrs	r3, r1
 800e2ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800e2b2:	e008      	b.n	800e2c6 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e2b4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e2b8:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 800e2bc:	e003      	b.n	800e2c6 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2be:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e2c2:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e2c6:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 800e2ca:	2b01      	cmp	r3, #1
 800e2cc:	d107      	bne.n	800e2de <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e2ce:	4b48      	ldr	r3, [pc, #288]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e2d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e2d4:	4a46      	ldr	r2, [pc, #280]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e2d6:	f023 0304 	bic.w	r3, r3, #4
 800e2da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800e2de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e6:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800e2ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e2f0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	d042      	beq.n	800e380 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800e2fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e302:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e306:	d022      	beq.n	800e34e <HAL_RCCEx_PeriphCLKConfig+0x906>
 800e308:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800e30c:	d81b      	bhi.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800e30e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e312:	d011      	beq.n	800e338 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800e314:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e318:	d815      	bhi.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d019      	beq.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800e31e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e322:	d110      	bne.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e324:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e328:	3308      	adds	r3, #8
 800e32a:	4618      	mov	r0, r3
 800e32c:	f002 fa84 	bl	8010838 <RCCEx_PLL2_Config>
 800e330:	4603      	mov	r3, r0
 800e332:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e336:	e00d      	b.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e338:	4b2d      	ldr	r3, [pc, #180]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e33c:	4a2c      	ldr	r2, [pc, #176]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e33e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e342:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800e344:	e006      	b.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800e346:	2301      	movs	r3, #1
 800e348:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e34c:	e002      	b.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800e34e:	bf00      	nop
 800e350:	e000      	b.n	800e354 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800e352:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e354:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d10d      	bne.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800e35c:	4b24      	ldr	r3, [pc, #144]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e35e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e362:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800e366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e36a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e36e:	4a20      	ldr	r2, [pc, #128]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e370:	430b      	orrs	r3, r1
 800e372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e376:	e003      	b.n	800e380 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e378:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e37c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e388:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800e38c:	663b      	str	r3, [r7, #96]	; 0x60
 800e38e:	2300      	movs	r3, #0
 800e390:	667b      	str	r3, [r7, #100]	; 0x64
 800e392:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800e396:	460b      	mov	r3, r1
 800e398:	4313      	orrs	r3, r2
 800e39a:	d031      	beq.n	800e400 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800e39c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e3a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3a8:	d00b      	beq.n	800e3c2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800e3aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e3ae:	d804      	bhi.n	800e3ba <HAL_RCCEx_PeriphCLKConfig+0x972>
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d008      	beq.n	800e3c6 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800e3b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3b8:	d007      	beq.n	800e3ca <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e3c0:	e004      	b.n	800e3cc <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800e3c2:	bf00      	nop
 800e3c4:	e002      	b.n	800e3cc <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800e3c6:	bf00      	nop
 800e3c8:	e000      	b.n	800e3cc <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800e3ca:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e3cc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d111      	bne.n	800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800e3d4:	4b06      	ldr	r3, [pc, #24]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e3d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e3da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e3de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e3e6:	4a02      	ldr	r2, [pc, #8]	; (800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e3e8:	430b      	orrs	r3, r1
 800e3ea:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800e3ee:	e007      	b.n	800e400 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800e3f0:	46020c00 	.word	0x46020c00
 800e3f4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3f8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e3fc:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800e400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e408:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800e40c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e40e:	2300      	movs	r3, #0
 800e410:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e412:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800e416:	460b      	mov	r3, r1
 800e418:	4313      	orrs	r3, r2
 800e41a:	d00c      	beq.n	800e436 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800e41c:	4bb2      	ldr	r3, [pc, #712]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e41e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e422:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800e426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e42a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e42e:	4aae      	ldr	r2, [pc, #696]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e430:	430b      	orrs	r3, r1
 800e432:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800e436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e43e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800e442:	653b      	str	r3, [r7, #80]	; 0x50
 800e444:	2300      	movs	r3, #0
 800e446:	657b      	str	r3, [r7, #84]	; 0x54
 800e448:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e44c:	460b      	mov	r3, r1
 800e44e:	4313      	orrs	r3, r2
 800e450:	d019      	beq.n	800e486 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800e452:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e456:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e45a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e45e:	d105      	bne.n	800e46c <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e460:	4ba1      	ldr	r3, [pc, #644]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e464:	4aa0      	ldr	r2, [pc, #640]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e46a:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800e46c:	4b9e      	ldr	r3, [pc, #632]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e46e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e472:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800e476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e47a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e47e:	4a9a      	ldr	r2, [pc, #616]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e480:	430b      	orrs	r3, r1
 800e482:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800e486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800e492:	64bb      	str	r3, [r7, #72]	; 0x48
 800e494:	2300      	movs	r3, #0
 800e496:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e498:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800e49c:	460b      	mov	r3, r1
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	d00c      	beq.n	800e4bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800e4a2:	4b91      	ldr	r3, [pc, #580]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e4a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e4a8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800e4ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e4b4:	4a8c      	ldr	r2, [pc, #560]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e4b6:	430b      	orrs	r3, r1
 800e4b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800e4bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800e4c8:	643b      	str	r3, [r7, #64]	; 0x40
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	647b      	str	r3, [r7, #68]	; 0x44
 800e4ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	4313      	orrs	r3, r2
 800e4d6:	d00c      	beq.n	800e4f2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800e4d8:	4b83      	ldr	r3, [pc, #524]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e4da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e4de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800e4e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e4ea:	4a7f      	ldr	r2, [pc, #508]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e4ec:	430b      	orrs	r3, r1
 800e4ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800e4f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fa:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800e4fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800e500:	2300      	movs	r3, #0
 800e502:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e504:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e508:	460b      	mov	r3, r1
 800e50a:	4313      	orrs	r3, r2
 800e50c:	d00c      	beq.n	800e528 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800e50e:	4b76      	ldr	r3, [pc, #472]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e510:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e514:	f023 0118 	bic.w	r1, r3, #24
 800e518:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e51c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e520:	4a71      	ldr	r2, [pc, #452]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e522:	430b      	orrs	r3, r1
 800e524:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e528:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e530:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800e534:	633b      	str	r3, [r7, #48]	; 0x30
 800e536:	2300      	movs	r3, #0
 800e538:	637b      	str	r3, [r7, #52]	; 0x34
 800e53a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800e53e:	460b      	mov	r3, r1
 800e540:	4313      	orrs	r3, r2
 800e542:	d032      	beq.n	800e5aa <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800e544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e548:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e54c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e550:	d105      	bne.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e552:	4b65      	ldr	r3, [pc, #404]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e556:	4a64      	ldr	r2, [pc, #400]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e55c:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800e55e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e562:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e566:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e56a:	d108      	bne.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e56c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e570:	3308      	adds	r3, #8
 800e572:	4618      	mov	r0, r3
 800e574:	f002 f960 	bl	8010838 <RCCEx_PLL2_Config>
 800e578:	4603      	mov	r3, r0
 800e57a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }
    if (ret == HAL_OK)
 800e57e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e582:	2b00      	cmp	r3, #0
 800e584:	d10d      	bne.n	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800e586:	4b58      	ldr	r3, [pc, #352]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e588:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e58c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800e590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e594:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e598:	4a53      	ldr	r2, [pc, #332]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e59a:	430b      	orrs	r3, r1
 800e59c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800e5a0:	e003      	b.n	800e5aa <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5a2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e5a6:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800e5aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b2:	2100      	movs	r1, #0
 800e5b4:	62b9      	str	r1, [r7, #40]	; 0x28
 800e5b6:	f003 0301 	and.w	r3, r3, #1
 800e5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	4313      	orrs	r3, r2
 800e5c4:	d04a      	beq.n	800e65c <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800e5c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e5ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e5ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800e5d2:	d01e      	beq.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800e5d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800e5d8:	d825      	bhi.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800e5da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e5de:	d00e      	beq.n	800e5fe <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800e5e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e5e4:	d81f      	bhi.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d021      	beq.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800e5ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e5ee:	d11a      	bne.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e5f0:	4b3d      	ldr	r3, [pc, #244]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5f4:	4a3c      	ldr	r2, [pc, #240]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e5f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e5fa:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800e5fc:	e018      	b.n	800e630 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e5fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e602:	3308      	adds	r3, #8
 800e604:	4618      	mov	r0, r3
 800e606:	f002 f917 	bl	8010838 <RCCEx_PLL2_Config>
 800e60a:	4603      	mov	r3, r0
 800e60c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800e610:	e00e      	b.n	800e630 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e616:	332c      	adds	r3, #44	; 0x2c
 800e618:	4618      	mov	r0, r3
 800e61a:	f002 f9a5 	bl	8010968 <RCCEx_PLL3_Config>
 800e61e:	4603      	mov	r3, r0
 800e620:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800e624:	e004      	b.n	800e630 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800e626:	2301      	movs	r3, #1
 800e628:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e62c:	e000      	b.n	800e630 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800e62e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e630:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e634:	2b00      	cmp	r3, #0
 800e636:	d10d      	bne.n	800e654 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800e638:	4b2b      	ldr	r3, [pc, #172]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e63a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e63e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e646:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e64a:	4927      	ldr	r1, [pc, #156]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e64c:	4313      	orrs	r3, r2
 800e64e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800e652:	e003      	b.n	800e65c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e654:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e658:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800e65c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e664:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800e668:	623b      	str	r3, [r7, #32]
 800e66a:	2300      	movs	r3, #0
 800e66c:	627b      	str	r3, [r7, #36]	; 0x24
 800e66e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e672:	460b      	mov	r3, r1
 800e674:	4313      	orrs	r3, r2
 800e676:	d03d      	beq.n	800e6f4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800e678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e67c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e680:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e684:	d00e      	beq.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800e686:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e68a:	d815      	bhi.n	800e6b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d017      	beq.n	800e6c0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800e690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e694:	d110      	bne.n	800e6b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e696:	4b14      	ldr	r3, [pc, #80]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e69a:	4a13      	ldr	r2, [pc, #76]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e69c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e6a0:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e6a2:	e00e      	b.n	800e6c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e6a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6a8:	3308      	adds	r3, #8
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f002 f8c4 	bl	8010838 <RCCEx_PLL2_Config>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e6b6:	e004      	b.n	800e6c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e6be:	e000      	b.n	800e6c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e6c0:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e6c2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d110      	bne.n	800e6ec <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800e6ca:	4b07      	ldr	r3, [pc, #28]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e6cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e6d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e6d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6dc:	4902      	ldr	r1, [pc, #8]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800e6e4:	e006      	b.n	800e6f4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800e6e6:	bf00      	nop
 800e6e8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6ec:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e6f0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800e6f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800e700:	61bb      	str	r3, [r7, #24]
 800e702:	2300      	movs	r3, #0
 800e704:	61fb      	str	r3, [r7, #28]
 800e706:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e70a:	460b      	mov	r3, r1
 800e70c:	4313      	orrs	r3, r2
 800e70e:	d00c      	beq.n	800e72a <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800e710:	4b68      	ldr	r3, [pc, #416]	; (800e8b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e712:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e716:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800e71a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e71e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e722:	4964      	ldr	r1, [pc, #400]	; (800e8b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e724:	4313      	orrs	r3, r2
 800e726:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e72a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e732:	2100      	movs	r1, #0
 800e734:	6139      	str	r1, [r7, #16]
 800e736:	f003 0302 	and.w	r3, r3, #2
 800e73a:	617b      	str	r3, [r7, #20]
 800e73c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e740:	460b      	mov	r3, r1
 800e742:	4313      	orrs	r3, r2
 800e744:	d036      	beq.n	800e7b4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800e746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e74a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d00c      	beq.n	800e76c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800e752:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e756:	d113      	bne.n	800e780 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e75c:	3308      	adds	r3, #8
 800e75e:	4618      	mov	r0, r3
 800e760:	f002 f86a 	bl	8010838 <RCCEx_PLL2_Config>
 800e764:	4603      	mov	r3, r0
 800e766:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800e76a:	e00d      	b.n	800e788 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e76c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e770:	332c      	adds	r3, #44	; 0x2c
 800e772:	4618      	mov	r0, r3
 800e774:	f002 f8f8 	bl	8010968 <RCCEx_PLL3_Config>
 800e778:	4603      	mov	r3, r0
 800e77a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800e77e:	e003      	b.n	800e788 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800e780:	2301      	movs	r3, #1
 800e782:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e786:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e788:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d10d      	bne.n	800e7ac <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800e790:	4b48      	ldr	r3, [pc, #288]	; (800e8b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e792:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e796:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e79a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e79e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e7a2:	4944      	ldr	r1, [pc, #272]	; (800e8b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800e7aa:	e003      	b.n	800e7b4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7ac:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e7b0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800e7b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7bc:	2100      	movs	r1, #0
 800e7be:	60b9      	str	r1, [r7, #8]
 800e7c0:	f003 0304 	and.w	r3, r3, #4
 800e7c4:	60fb      	str	r3, [r7, #12]
 800e7c6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	d024      	beq.n	800e81a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800e7d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e7d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d108      	bne.n	800e7ee <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e7dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e7e0:	332c      	adds	r3, #44	; 0x2c
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f002 f8c0 	bl	8010968 <RCCEx_PLL3_Config>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }

    if (ret == HAL_OK)
 800e7ee:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d10d      	bne.n	800e812 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800e7f6:	4b2f      	ldr	r3, [pc, #188]	; (800e8b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e7f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e7fc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800e800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e804:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e808:	492a      	ldr	r1, [pc, #168]	; (800e8b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e80a:	4313      	orrs	r3, r2
 800e80c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800e810:	e003      	b.n	800e81a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e812:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e816:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800e81a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e822:	2100      	movs	r1, #0
 800e824:	6039      	str	r1, [r7, #0]
 800e826:	f003 0308 	and.w	r3, r3, #8
 800e82a:	607b      	str	r3, [r7, #4]
 800e82c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e830:	460b      	mov	r3, r1
 800e832:	4313      	orrs	r3, r2
 800e834:	d036      	beq.n	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800e836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e83a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800e83e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800e842:	d00d      	beq.n	800e860 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800e844:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800e848:	d811      	bhi.n	800e86e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800e84a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e84e:	d012      	beq.n	800e876 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800e850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e854:	d80b      	bhi.n	800e86e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800e856:	2b00      	cmp	r3, #0
 800e858:	d00d      	beq.n	800e876 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800e85a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e85e:	d106      	bne.n	800e86e <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e860:	4b14      	ldr	r3, [pc, #80]	; (800e8b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e864:	4a13      	ldr	r2, [pc, #76]	; (800e8b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e86a:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800e86c:	e004      	b.n	800e878 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800e86e:	2301      	movs	r3, #1
 800e870:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e874:	e000      	b.n	800e878 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800e876:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e878:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d10d      	bne.n	800e89c <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800e880:	4b0c      	ldr	r3, [pc, #48]	; (800e8b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e882:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e886:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800e88a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e88e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800e892:	4908      	ldr	r1, [pc, #32]	; (800e8b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e894:	4313      	orrs	r3, r2
 800e896:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800e89a:	e003      	b.n	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e89c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e8a0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800e8a4:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e8b4:	46020c00 	.word	0x46020c00

0800e8b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b089      	sub	sp, #36	; 0x24
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800e8c0:	4bad      	ldr	r3, [pc, #692]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8c8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800e8ca:	4bab      	ldr	r3, [pc, #684]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ce:	f003 0303 	and.w	r3, r3, #3
 800e8d2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800e8d4:	4ba8      	ldr	r3, [pc, #672]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e8d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8d8:	0a1b      	lsrs	r3, r3, #8
 800e8da:	f003 030f 	and.w	r3, r3, #15
 800e8de:	3301      	adds	r3, #1
 800e8e0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800e8e2:	4ba5      	ldr	r3, [pc, #660]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8e6:	091b      	lsrs	r3, r3, #4
 800e8e8:	f003 0301 	and.w	r3, r3, #1
 800e8ec:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800e8ee:	4ba2      	ldr	r3, [pc, #648]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8f2:	08db      	lsrs	r3, r3, #3
 800e8f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8f8:	68fa      	ldr	r2, [r7, #12]
 800e8fa:	fb02 f303 	mul.w	r3, r2, r3
 800e8fe:	ee07 3a90 	vmov	s15, r3
 800e902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e906:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	f000 8123 	beq.w	800eb58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	2b03      	cmp	r3, #3
 800e916:	d062      	beq.n	800e9de <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	2b03      	cmp	r3, #3
 800e91c:	f200 8081 	bhi.w	800ea22 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	2b01      	cmp	r3, #1
 800e924:	d024      	beq.n	800e970 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	2b02      	cmp	r3, #2
 800e92a:	d17a      	bne.n	800ea22 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	ee07 3a90 	vmov	s15, r3
 800e932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e936:	eddf 6a91 	vldr	s13, [pc, #580]	; 800eb7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800e93a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e93e:	4b8e      	ldr	r3, [pc, #568]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e946:	ee07 3a90 	vmov	s15, r3
 800e94a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e94e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e952:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800eb80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e956:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e95a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e95e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e962:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e96a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e96e:	e08f      	b.n	800ea90 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e970:	4b81      	ldr	r3, [pc, #516]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d005      	beq.n	800e988 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 800e97c:	4b7e      	ldr	r3, [pc, #504]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e97e:	689b      	ldr	r3, [r3, #8]
 800e980:	0f1b      	lsrs	r3, r3, #28
 800e982:	f003 030f 	and.w	r3, r3, #15
 800e986:	e006      	b.n	800e996 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 800e988:	4b7b      	ldr	r3, [pc, #492]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e98a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e98e:	041b      	lsls	r3, r3, #16
 800e990:	0f1b      	lsrs	r3, r3, #28
 800e992:	f003 030f 	and.w	r3, r3, #15
 800e996:	4a7b      	ldr	r2, [pc, #492]	; (800eb84 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800e998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e99c:	ee07 3a90 	vmov	s15, r3
 800e9a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	ee07 3a90 	vmov	s15, r3
 800e9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	ee07 3a90 	vmov	s15, r3
 800e9b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9bc:	ed97 6a02 	vldr	s12, [r7, #8]
 800e9c0:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800eb80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e9c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e9d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e9dc:	e058      	b.n	800ea90 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	ee07 3a90 	vmov	s15, r3
 800e9e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9e8:	eddf 6a64 	vldr	s13, [pc, #400]	; 800eb7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800e9ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9f0:	4b61      	ldr	r3, [pc, #388]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9f8:	ee07 3a90 	vmov	s15, r3
 800e9fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800ea00:	ed97 6a02 	vldr	s12, [r7, #8]
 800ea04:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800eb80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800ea08:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ea0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800ea10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea14:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ea18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea20:	e036      	b.n	800ea90 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ea22:	4b55      	ldr	r3, [pc, #340]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ea24:	689b      	ldr	r3, [r3, #8]
 800ea26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d005      	beq.n	800ea3a <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 800ea2e:	4b52      	ldr	r3, [pc, #328]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ea30:	689b      	ldr	r3, [r3, #8]
 800ea32:	0f1b      	lsrs	r3, r3, #28
 800ea34:	f003 030f 	and.w	r3, r3, #15
 800ea38:	e006      	b.n	800ea48 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 800ea3a:	4b4f      	ldr	r3, [pc, #316]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ea3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ea40:	041b      	lsls	r3, r3, #16
 800ea42:	0f1b      	lsrs	r3, r3, #28
 800ea44:	f003 030f 	and.w	r3, r3, #15
 800ea48:	4a4e      	ldr	r2, [pc, #312]	; (800eb84 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800ea4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea4e:	ee07 3a90 	vmov	s15, r3
 800ea52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	ee07 3a90 	vmov	s15, r3
 800ea5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ea64:	69bb      	ldr	r3, [r7, #24]
 800ea66:	ee07 3a90 	vmov	s15, r3
 800ea6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea6e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ea72:	eddf 5a43 	vldr	s11, [pc, #268]	; 800eb80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800ea76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea82:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ea86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ea8e:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800ea90:	4b39      	ldr	r3, [pc, #228]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ea92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d017      	beq.n	800eacc <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ea9c:	4b36      	ldr	r3, [pc, #216]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ea9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaa0:	0a5b      	lsrs	r3, r3, #9
 800eaa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eaa6:	ee07 3a90 	vmov	s15, r3
 800eaaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800eaae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eab2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800eab6:	edd7 6a07 	vldr	s13, [r7, #28]
 800eaba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eabe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eac2:	ee17 2a90 	vmov	r2, s15
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	601a      	str	r2, [r3, #0]
 800eaca:	e002      	b.n	800ead2 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2200      	movs	r2, #0
 800ead0:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800ead2:	4b29      	ldr	r3, [pc, #164]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ead4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ead6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d017      	beq.n	800eb0e <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800eade:	4b26      	ldr	r3, [pc, #152]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800eae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eae2:	0c1b      	lsrs	r3, r3, #16
 800eae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eae8:	ee07 3a90 	vmov	s15, r3
 800eaec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800eaf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eaf4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800eaf8:	edd7 6a07 	vldr	s13, [r7, #28]
 800eafc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb04:	ee17 2a90 	vmov	r2, s15
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	605a      	str	r2, [r3, #4]
 800eb0c:	e002      	b.n	800eb14 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2200      	movs	r2, #0
 800eb12:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800eb14:	4b18      	ldr	r3, [pc, #96]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800eb16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d017      	beq.n	800eb50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800eb20:	4b15      	ldr	r3, [pc, #84]	; (800eb78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800eb22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb24:	0e1b      	lsrs	r3, r3, #24
 800eb26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb2a:	ee07 3a90 	vmov	s15, r3
 800eb2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800eb32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eb36:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800eb3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb46:	ee17 2a90 	vmov	r2, s15
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800eb4e:	e00c      	b.n	800eb6a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2200      	movs	r2, #0
 800eb54:	609a      	str	r2, [r3, #8]
}
 800eb56:	e008      	b.n	800eb6a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2200      	movs	r2, #0
 800eb62:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	609a      	str	r2, [r3, #8]
}
 800eb6a:	bf00      	nop
 800eb6c:	3724      	adds	r7, #36	; 0x24
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop
 800eb78:	46020c00 	.word	0x46020c00
 800eb7c:	4b742400 	.word	0x4b742400
 800eb80:	46000000 	.word	0x46000000
 800eb84:	0802bd94 	.word	0x0802bd94

0800eb88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b089      	sub	sp, #36	; 0x24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800eb90:	4bad      	ldr	r3, [pc, #692]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800eb92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb98:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800eb9a:	4bab      	ldr	r3, [pc, #684]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800eb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb9e:	f003 0303 	and.w	r3, r3, #3
 800eba2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800eba4:	4ba8      	ldr	r3, [pc, #672]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800eba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eba8:	0a1b      	lsrs	r3, r3, #8
 800ebaa:	f003 030f 	and.w	r3, r3, #15
 800ebae:	3301      	adds	r3, #1
 800ebb0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800ebb2:	4ba5      	ldr	r3, [pc, #660]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ebb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb6:	091b      	lsrs	r3, r3, #4
 800ebb8:	f003 0301 	and.w	r3, r3, #1
 800ebbc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800ebbe:	4ba2      	ldr	r3, [pc, #648]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ebc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebc2:	08db      	lsrs	r3, r3, #3
 800ebc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebc8:	68fa      	ldr	r2, [r7, #12]
 800ebca:	fb02 f303 	mul.w	r3, r2, r3
 800ebce:	ee07 3a90 	vmov	s15, r3
 800ebd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebd6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	f000 8123 	beq.w	800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	2b03      	cmp	r3, #3
 800ebe6:	d062      	beq.n	800ecae <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	2b03      	cmp	r3, #3
 800ebec:	f200 8081 	bhi.w	800ecf2 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d024      	beq.n	800ec40 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	2b02      	cmp	r3, #2
 800ebfa:	d17a      	bne.n	800ecf2 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	ee07 3a90 	vmov	s15, r3
 800ec02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec06:	eddf 6a91 	vldr	s13, [pc, #580]	; 800ee4c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800ec0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec0e:	4b8e      	ldr	r3, [pc, #568]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ec10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec16:	ee07 3a90 	vmov	s15, r3
 800ec1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec1e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec22:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800ee50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800ec26:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ec2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec32:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ec36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec3e:	e08f      	b.n	800ed60 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800ec40:	4b81      	ldr	r3, [pc, #516]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ec42:	689b      	ldr	r3, [r3, #8]
 800ec44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d005      	beq.n	800ec58 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 800ec4c:	4b7e      	ldr	r3, [pc, #504]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ec4e:	689b      	ldr	r3, [r3, #8]
 800ec50:	0f1b      	lsrs	r3, r3, #28
 800ec52:	f003 030f 	and.w	r3, r3, #15
 800ec56:	e006      	b.n	800ec66 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 800ec58:	4b7b      	ldr	r3, [pc, #492]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ec5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ec5e:	041b      	lsls	r3, r3, #16
 800ec60:	0f1b      	lsrs	r3, r3, #28
 800ec62:	f003 030f 	and.w	r3, r3, #15
 800ec66:	4a7b      	ldr	r2, [pc, #492]	; (800ee54 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800ec68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec6c:	ee07 3a90 	vmov	s15, r3
 800ec70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	ee07 3a90 	vmov	s15, r3
 800ec7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	ee07 3a90 	vmov	s15, r3
 800ec88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec8c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec90:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800ee50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800ec94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800eca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eca8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ecac:	e058      	b.n	800ed60 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	ee07 3a90 	vmov	s15, r3
 800ecb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecb8:	eddf 6a64 	vldr	s13, [pc, #400]	; 800ee4c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800ecbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecc0:	4b61      	ldr	r3, [pc, #388]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ecc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecc8:	ee07 3a90 	vmov	s15, r3
 800eccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800ecd0:	ed97 6a02 	vldr	s12, [r7, #8]
 800ecd4:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800ee50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800ecd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ecdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800ece0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ece4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ece8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ecf0:	e036      	b.n	800ed60 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ecf2:	4b55      	ldr	r3, [pc, #340]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ecf4:	689b      	ldr	r3, [r3, #8]
 800ecf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d005      	beq.n	800ed0a <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 800ecfe:	4b52      	ldr	r3, [pc, #328]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ed00:	689b      	ldr	r3, [r3, #8]
 800ed02:	0f1b      	lsrs	r3, r3, #28
 800ed04:	f003 030f 	and.w	r3, r3, #15
 800ed08:	e006      	b.n	800ed18 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 800ed0a:	4b4f      	ldr	r3, [pc, #316]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ed0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ed10:	041b      	lsls	r3, r3, #16
 800ed12:	0f1b      	lsrs	r3, r3, #28
 800ed14:	f003 030f 	and.w	r3, r3, #15
 800ed18:	4a4e      	ldr	r2, [pc, #312]	; (800ee54 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800ed1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed1e:	ee07 3a90 	vmov	s15, r3
 800ed22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	ee07 3a90 	vmov	s15, r3
 800ed2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ed34:	69bb      	ldr	r3, [r7, #24]
 800ed36:	ee07 3a90 	vmov	s15, r3
 800ed3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed3e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ed42:	eddf 5a43 	vldr	s11, [pc, #268]	; 800ee50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800ed46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed52:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ed56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed5e:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800ed60:	4b39      	ldr	r3, [pc, #228]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ed62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d017      	beq.n	800ed9c <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ed6c:	4b36      	ldr	r3, [pc, #216]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ed6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed70:	0a5b      	lsrs	r3, r3, #9
 800ed72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed76:	ee07 3a90 	vmov	s15, r3
 800ed7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800ed7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed82:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ed86:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed92:	ee17 2a90 	vmov	r2, s15
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	601a      	str	r2, [r3, #0]
 800ed9a:	e002      	b.n	800eda2 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800eda2:	4b29      	ldr	r3, [pc, #164]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800eda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eda6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d017      	beq.n	800edde <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800edae:	4b26      	ldr	r3, [pc, #152]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800edb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edb2:	0c1b      	lsrs	r3, r3, #16
 800edb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edb8:	ee07 3a90 	vmov	s15, r3
 800edbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800edc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800edc4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800edc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800edcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800edd4:	ee17 2a90 	vmov	r2, s15
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	605a      	str	r2, [r3, #4]
 800eddc:	e002      	b.n	800ede4 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2200      	movs	r2, #0
 800ede2:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800ede4:	4b18      	ldr	r3, [pc, #96]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ede6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ede8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800edec:	2b00      	cmp	r3, #0
 800edee:	d017      	beq.n	800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800edf0:	4b15      	ldr	r3, [pc, #84]	; (800ee48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800edf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edf4:	0e1b      	lsrs	r3, r3, #24
 800edf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edfa:	ee07 3a90 	vmov	s15, r3
 800edfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800ee02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ee06:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ee0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ee0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ee16:	ee17 2a90 	vmov	r2, s15
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ee1e:	e00c      	b.n	800ee3a <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	609a      	str	r2, [r3, #8]
}
 800ee26:	e008      	b.n	800ee3a <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2200      	movs	r2, #0
 800ee32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2200      	movs	r2, #0
 800ee38:	609a      	str	r2, [r3, #8]
}
 800ee3a:	bf00      	nop
 800ee3c:	3724      	adds	r7, #36	; 0x24
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee44:	4770      	bx	lr
 800ee46:	bf00      	nop
 800ee48:	46020c00 	.word	0x46020c00
 800ee4c:	4b742400 	.word	0x4b742400
 800ee50:	46000000 	.word	0x46000000
 800ee54:	0802bd94 	.word	0x0802bd94

0800ee58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b089      	sub	sp, #36	; 0x24
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800ee60:	4bad      	ldr	r3, [pc, #692]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ee62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee68:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800ee6a:	4bab      	ldr	r3, [pc, #684]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ee6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee6e:	f003 0303 	and.w	r3, r3, #3
 800ee72:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800ee74:	4ba8      	ldr	r3, [pc, #672]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ee76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee78:	0a1b      	lsrs	r3, r3, #8
 800ee7a:	f003 030f 	and.w	r3, r3, #15
 800ee7e:	3301      	adds	r3, #1
 800ee80:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800ee82:	4ba5      	ldr	r3, [pc, #660]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ee84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee86:	091b      	lsrs	r3, r3, #4
 800ee88:	f003 0301 	and.w	r3, r3, #1
 800ee8c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800ee8e:	4ba2      	ldr	r3, [pc, #648]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ee90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee92:	08db      	lsrs	r3, r3, #3
 800ee94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee98:	68fa      	ldr	r2, [r7, #12]
 800ee9a:	fb02 f303 	mul.w	r3, r2, r3
 800ee9e:	ee07 3a90 	vmov	s15, r3
 800eea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eea6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800eeaa:	693b      	ldr	r3, [r7, #16]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	f000 8123 	beq.w	800f0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	2b03      	cmp	r3, #3
 800eeb6:	d062      	beq.n	800ef7e <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	2b03      	cmp	r3, #3
 800eebc:	f200 8081 	bhi.w	800efc2 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	d024      	beq.n	800ef10 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	2b02      	cmp	r3, #2
 800eeca:	d17a      	bne.n	800efc2 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	ee07 3a90 	vmov	s15, r3
 800eed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eed6:	eddf 6a91 	vldr	s13, [pc, #580]	; 800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800eeda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eede:	4b8e      	ldr	r3, [pc, #568]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eee6:	ee07 3a90 	vmov	s15, r3
 800eeea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800eeee:	ed97 6a02 	vldr	s12, [r7, #8]
 800eef2:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800f120 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800eef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800eefa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800eefe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef02:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ef06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef0a:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800ef0e:	e08f      	b.n	800f030 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ef10:	4b81      	ldr	r3, [pc, #516]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ef12:	689b      	ldr	r3, [r3, #8]
 800ef14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d005      	beq.n	800ef28 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 800ef1c:	4b7e      	ldr	r3, [pc, #504]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	0f1b      	lsrs	r3, r3, #28
 800ef22:	f003 030f 	and.w	r3, r3, #15
 800ef26:	e006      	b.n	800ef36 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 800ef28:	4b7b      	ldr	r3, [pc, #492]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ef2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ef2e:	041b      	lsls	r3, r3, #16
 800ef30:	0f1b      	lsrs	r3, r3, #28
 800ef32:	f003 030f 	and.w	r3, r3, #15
 800ef36:	4a7b      	ldr	r2, [pc, #492]	; (800f124 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800ef38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef3c:	ee07 3a90 	vmov	s15, r3
 800ef40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	ee07 3a90 	vmov	s15, r3
 800ef4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	ee07 3a90 	vmov	s15, r3
 800ef58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef5c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ef60:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800f120 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ef64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef70:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ef74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef7c:	e058      	b.n	800f030 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	ee07 3a90 	vmov	s15, r3
 800ef84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef88:	eddf 6a64 	vldr	s13, [pc, #400]	; 800f11c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800ef8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef90:	4b61      	ldr	r3, [pc, #388]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ef92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef98:	ee07 3a90 	vmov	s15, r3
 800ef9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800efa0:	ed97 6a02 	vldr	s12, [r7, #8]
 800efa4:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800f120 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800efa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800efac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800efb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800efb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800efb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800efc0:	e036      	b.n	800f030 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800efc2:	4b55      	ldr	r3, [pc, #340]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800efc4:	689b      	ldr	r3, [r3, #8]
 800efc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d005      	beq.n	800efda <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 800efce:	4b52      	ldr	r3, [pc, #328]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800efd0:	689b      	ldr	r3, [r3, #8]
 800efd2:	0f1b      	lsrs	r3, r3, #28
 800efd4:	f003 030f 	and.w	r3, r3, #15
 800efd8:	e006      	b.n	800efe8 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 800efda:	4b4f      	ldr	r3, [pc, #316]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800efdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800efe0:	041b      	lsls	r3, r3, #16
 800efe2:	0f1b      	lsrs	r3, r3, #28
 800efe4:	f003 030f 	and.w	r3, r3, #15
 800efe8:	4a4e      	ldr	r2, [pc, #312]	; (800f124 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800efea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efee:	ee07 3a90 	vmov	s15, r3
 800eff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	ee07 3a90 	vmov	s15, r3
 800effc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f004:	69bb      	ldr	r3, [r7, #24]
 800f006:	ee07 3a90 	vmov	s15, r3
 800f00a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f00e:	ed97 6a02 	vldr	s12, [r7, #8]
 800f012:	eddf 5a43 	vldr	s11, [pc, #268]	; 800f120 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800f016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f01a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f01e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f022:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800f026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f02a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f02e:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800f030:	4b39      	ldr	r3, [pc, #228]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d017      	beq.n	800f06c <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f03c:	4b36      	ldr	r3, [pc, #216]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f03e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f040:	0a5b      	lsrs	r3, r3, #9
 800f042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f046:	ee07 3a90 	vmov	s15, r3
 800f04a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800f04e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f052:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f056:	edd7 6a07 	vldr	s13, [r7, #28]
 800f05a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f05e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f062:	ee17 2a90 	vmov	r2, s15
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	601a      	str	r2, [r3, #0]
 800f06a:	e002      	b.n	800f072 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2200      	movs	r2, #0
 800f070:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800f072:	4b29      	ldr	r3, [pc, #164]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d017      	beq.n	800f0ae <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f07e:	4b26      	ldr	r3, [pc, #152]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f082:	0c1b      	lsrs	r3, r3, #16
 800f084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f088:	ee07 3a90 	vmov	s15, r3
 800f08c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800f090:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f094:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f098:	edd7 6a07 	vldr	s13, [r7, #28]
 800f09c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0a4:	ee17 2a90 	vmov	r2, s15
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	605a      	str	r2, [r3, #4]
 800f0ac:	e002      	b.n	800f0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800f0b4:	4b18      	ldr	r3, [pc, #96]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d017      	beq.n	800f0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f0c0:	4b15      	ldr	r3, [pc, #84]	; (800f118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800f0c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0c4:	0e1b      	lsrs	r3, r3, #24
 800f0c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0ca:	ee07 3a90 	vmov	s15, r3
 800f0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800f0d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f0d6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800f0da:	edd7 6a07 	vldr	s13, [r7, #28]
 800f0de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0e6:	ee17 2a90 	vmov	r2, s15
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800f0ee:	e00c      	b.n	800f10a <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	609a      	str	r2, [r3, #8]
}
 800f0f6:	e008      	b.n	800f10a <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2200      	movs	r2, #0
 800f102:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2200      	movs	r2, #0
 800f108:	609a      	str	r2, [r3, #8]
}
 800f10a:	bf00      	nop
 800f10c:	3724      	adds	r7, #36	; 0x24
 800f10e:	46bd      	mov	sp, r7
 800f110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f114:	4770      	bx	lr
 800f116:	bf00      	nop
 800f118:	46020c00 	.word	0x46020c00
 800f11c:	4b742400 	.word	0x4b742400
 800f120:	46000000 	.word	0x46000000
 800f124:	0802bd94 	.word	0x0802bd94

0800f128 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b08e      	sub	sp, #56	; 0x38
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800f132:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f136:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800f13a:	430b      	orrs	r3, r1
 800f13c:	d145      	bne.n	800f1ca <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800f13e:	4ba7      	ldr	r3, [pc, #668]	; (800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f148:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800f14a:	4ba4      	ldr	r3, [pc, #656]	; (800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f14c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f150:	f003 0302 	and.w	r3, r3, #2
 800f154:	2b02      	cmp	r3, #2
 800f156:	d108      	bne.n	800f16a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800f158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f15a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f15e:	d104      	bne.n	800f16a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800f160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f164:	637b      	str	r3, [r7, #52]	; 0x34
 800f166:	f001 bb58 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800f16a:	4b9c      	ldr	r3, [pc, #624]	; (800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f16c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f178:	d114      	bne.n	800f1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800f17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f180:	d110      	bne.n	800f1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f182:	4b96      	ldr	r3, [pc, #600]	; (800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f18c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f190:	d103      	bne.n	800f19a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800f192:	23fa      	movs	r3, #250	; 0xfa
 800f194:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f196:	f001 bb40 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800f19a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800f19e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800f1a0:	f001 bb3b 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800f1a4:	4b8d      	ldr	r3, [pc, #564]	; (800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f1b0:	d107      	bne.n	800f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800f1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f1b8:	d103      	bne.n	800f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800f1ba:	4b89      	ldr	r3, [pc, #548]	; (800f3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800f1bc:	637b      	str	r3, [r7, #52]	; 0x34
 800f1be:	f001 bb2c 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	637b      	str	r3, [r7, #52]	; 0x34
 800f1c6:	f001 bb28 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f1ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1ce:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800f1d2:	430b      	orrs	r3, r1
 800f1d4:	d151      	bne.n	800f27a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800f1d6:	4b81      	ldr	r3, [pc, #516]	; (800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f1d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f1dc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800f1e0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e4:	2b80      	cmp	r3, #128	; 0x80
 800f1e6:	d035      	beq.n	800f254 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800f1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ea:	2b80      	cmp	r3, #128	; 0x80
 800f1ec:	d841      	bhi.n	800f272 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800f1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f0:	2b60      	cmp	r3, #96	; 0x60
 800f1f2:	d02a      	beq.n	800f24a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800f1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f6:	2b60      	cmp	r3, #96	; 0x60
 800f1f8:	d83b      	bhi.n	800f272 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800f1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fc:	2b40      	cmp	r3, #64	; 0x40
 800f1fe:	d009      	beq.n	800f214 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f202:	2b40      	cmp	r3, #64	; 0x40
 800f204:	d835      	bhi.n	800f272 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800f206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d00c      	beq.n	800f226 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800f20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20e:	2b20      	cmp	r3, #32
 800f210:	d012      	beq.n	800f238 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800f212:	e02e      	b.n	800f272 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f218:	4618      	mov	r0, r3
 800f21a:	f7ff fb4d 	bl	800e8b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f220:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f222:	f001 bafa 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f226:	f107 0318 	add.w	r3, r7, #24
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7ff fcac 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800f230:	69bb      	ldr	r3, [r7, #24]
 800f232:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f234:	f001 baf1 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f238:	f107 030c 	add.w	r3, r7, #12
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7ff fe0b 	bl	800ee58 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f246:	f001 bae8 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f24a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f24e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f250:	f001 bae3 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f254:	4b61      	ldr	r3, [pc, #388]	; (800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f25c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f260:	d103      	bne.n	800f26a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800f262:	4b60      	ldr	r3, [pc, #384]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800f264:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f266:	f001 bad8 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f26a:	2300      	movs	r3, #0
 800f26c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f26e:	f001 bad4 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :
      {
        frequency = 0U;
 800f272:	2300      	movs	r3, #0
 800f274:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f276:	f001 bad0 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800f27a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f27e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800f282:	430b      	orrs	r3, r1
 800f284:	d158      	bne.n	800f338 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800f286:	4b55      	ldr	r3, [pc, #340]	; (800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f288:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f28c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f290:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f298:	d03b      	beq.n	800f312 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800f29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f2a0:	d846      	bhi.n	800f330 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800f2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f2a8:	d02e      	beq.n	800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800f2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f2b0:	d83e      	bhi.n	800f330 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800f2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2b8:	d00b      	beq.n	800f2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800f2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2c0:	d836      	bhi.n	800f330 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800f2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d00d      	beq.n	800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800f2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f2ce:	d012      	beq.n	800f2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800f2d0:	e02e      	b.n	800f330 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f2d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7ff faee 	bl	800e8b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f2e0:	f001 ba9b 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2e4:	f107 0318 	add.w	r3, r7, #24
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7ff fc4d 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800f2ee:	69bb      	ldr	r3, [r7, #24]
 800f2f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f2f2:	f001 ba92 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f2f6:	f107 030c 	add.w	r3, r7, #12
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7ff fdac 	bl	800ee58 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f304:	f001 ba89 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f308:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f30c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f30e:	f001 ba84 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f312:	4b32      	ldr	r3, [pc, #200]	; (800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f31a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f31e:	d103      	bne.n	800f328 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800f320:	4b30      	ldr	r3, [pc, #192]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800f322:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f324:	f001 ba79 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f328:	2300      	movs	r3, #0
 800f32a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f32c:	f001 ba75 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :

        frequency = 0U;
 800f330:	2300      	movs	r3, #0
 800f332:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f334:	f001 ba71 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800f338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f33c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800f340:	430b      	orrs	r3, r1
 800f342:	d126      	bne.n	800f392 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800f344:	4b25      	ldr	r3, [pc, #148]	; (800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f346:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f34a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f34e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800f350:	4b22      	ldr	r3, [pc, #136]	; (800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f35c:	d106      	bne.n	800f36c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800f35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f360:	2b00      	cmp	r3, #0
 800f362:	d103      	bne.n	800f36c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800f364:	4b1f      	ldr	r3, [pc, #124]	; (800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800f366:	637b      	str	r3, [r7, #52]	; 0x34
 800f368:	f001 ba57 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800f36c:	4b1b      	ldr	r3, [pc, #108]	; (800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f378:	d107      	bne.n	800f38a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800f37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f380:	d103      	bne.n	800f38a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800f382:	4b19      	ldr	r3, [pc, #100]	; (800f3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800f384:	637b      	str	r3, [r7, #52]	; 0x34
 800f386:	f001 ba48 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800f38a:	2300      	movs	r3, #0
 800f38c:	637b      	str	r3, [r7, #52]	; 0x34
 800f38e:	f001 ba44 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800f392:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f396:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800f39a:	430b      	orrs	r3, r1
 800f39c:	d16e      	bne.n	800f47c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800f39e:	4b0f      	ldr	r3, [pc, #60]	; (800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800f3a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3a4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800f3a8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f3b0:	d03d      	beq.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800f3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f3b8:	d85c      	bhi.n	800f474 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800f3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f3c0:	d014      	beq.n	800f3ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800f3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f3c8:	d854      	bhi.n	800f474 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800f3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d01f      	beq.n	800f410 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800f3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f3d6:	d012      	beq.n	800f3fe <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800f3d8:	e04c      	b.n	800f474 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800f3da:	bf00      	nop
 800f3dc:	46020c00 	.word	0x46020c00
 800f3e0:	0007a120 	.word	0x0007a120
 800f3e4:	00f42400 	.word	0x00f42400
 800f3e8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f3ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7ff fa61 	bl	800e8b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800f3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f3fa:	f001 ba0e 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3fe:	f107 0318 	add.w	r3, r7, #24
 800f402:	4618      	mov	r0, r3
 800f404:	f7ff fbc0 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800f408:	69fb      	ldr	r3, [r7, #28]
 800f40a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f40c:	f001 ba05 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800f410:	4ba7      	ldr	r3, [pc, #668]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f41c:	d103      	bne.n	800f426 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800f41e:	4ba5      	ldr	r3, [pc, #660]	; (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800f420:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f422:	f001 b9fa 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f426:	2300      	movs	r3, #0
 800f428:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f42a:	f001 b9f6 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f42e:	4ba0      	ldr	r3, [pc, #640]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f003 0320 	and.w	r3, r3, #32
 800f436:	2b20      	cmp	r3, #32
 800f438:	d118      	bne.n	800f46c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f43a:	4b9d      	ldr	r3, [pc, #628]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f43c:	689b      	ldr	r3, [r3, #8]
 800f43e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f442:	2b00      	cmp	r3, #0
 800f444:	d005      	beq.n	800f452 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800f446:	4b9a      	ldr	r3, [pc, #616]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f448:	689b      	ldr	r3, [r3, #8]
 800f44a:	0e1b      	lsrs	r3, r3, #24
 800f44c:	f003 030f 	and.w	r3, r3, #15
 800f450:	e006      	b.n	800f460 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800f452:	4b97      	ldr	r3, [pc, #604]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f454:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f458:	041b      	lsls	r3, r3, #16
 800f45a:	0e1b      	lsrs	r3, r3, #24
 800f45c:	f003 030f 	and.w	r3, r3, #15
 800f460:	4a95      	ldr	r2, [pc, #596]	; (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800f462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f466:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f468:	f001 b9d7 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f46c:	2300      	movs	r3, #0
 800f46e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f470:	f001 b9d3 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :

        frequency = 0U;
 800f474:	2300      	movs	r3, #0
 800f476:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f478:	f001 b9cf 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f47c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f480:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800f484:	430b      	orrs	r3, r1
 800f486:	d17f      	bne.n	800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f488:	4b89      	ldr	r3, [pc, #548]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f48a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f48e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f492:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800f494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f496:	2b00      	cmp	r3, #0
 800f498:	d165      	bne.n	800f566 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800f49a:	4b85      	ldr	r3, [pc, #532]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f49c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f4a0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800f4a4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800f4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f4ac:	d034      	beq.n	800f518 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800f4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f4b4:	d853      	bhi.n	800f55e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800f4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f4bc:	d00b      	beq.n	800f4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800f4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f4c4:	d84b      	bhi.n	800f55e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800f4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d016      	beq.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800f4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f4d2:	d009      	beq.n	800f4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800f4d4:	e043      	b.n	800f55e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f4d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7ff f9ec 	bl	800e8b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f4e4:	f001 b999 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4e8:	f107 0318 	add.w	r3, r7, #24
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7ff fb4b 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f4f2:	69fb      	ldr	r3, [r7, #28]
 800f4f4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f4f6:	f001 b990 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800f4fa:	4b6d      	ldr	r3, [pc, #436]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f506:	d103      	bne.n	800f510 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800f508:	4b6a      	ldr	r3, [pc, #424]	; (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800f50a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800f50c:	f001 b985 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
            frequency = 0U;
 800f510:	2300      	movs	r3, #0
 800f512:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f514:	f001 b981 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f518:	4b65      	ldr	r3, [pc, #404]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	f003 0320 	and.w	r3, r3, #32
 800f520:	2b20      	cmp	r3, #32
 800f522:	d118      	bne.n	800f556 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f524:	4b62      	ldr	r3, [pc, #392]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f526:	689b      	ldr	r3, [r3, #8]
 800f528:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d005      	beq.n	800f53c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800f530:	4b5f      	ldr	r3, [pc, #380]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f532:	689b      	ldr	r3, [r3, #8]
 800f534:	0e1b      	lsrs	r3, r3, #24
 800f536:	f003 030f 	and.w	r3, r3, #15
 800f53a:	e006      	b.n	800f54a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800f53c:	4b5c      	ldr	r3, [pc, #368]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f53e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f542:	041b      	lsls	r3, r3, #16
 800f544:	0e1b      	lsrs	r3, r3, #24
 800f546:	f003 030f 	and.w	r3, r3, #15
 800f54a:	4a5b      	ldr	r2, [pc, #364]	; (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800f54c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f550:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800f552:	f001 b962 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
            frequency = 0U;
 800f556:	2300      	movs	r3, #0
 800f558:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f55a:	f001 b95e 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        default :
        {
          frequency = 0U;
 800f55e:	2300      	movs	r3, #0
 800f560:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f562:	f001 b95a 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800f566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f56c:	d108      	bne.n	800f580 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f56e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f572:	4618      	mov	r0, r3
 800f574:	f7ff f9a0 	bl	800e8b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800f578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57a:	637b      	str	r3, [r7, #52]	; 0x34
 800f57c:	f001 b94d 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else
    {
      frequency = 0U;
 800f580:	2300      	movs	r3, #0
 800f582:	637b      	str	r3, [r7, #52]	; 0x34
 800f584:	f001 b949 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800f588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f58c:	1e51      	subs	r1, r2, #1
 800f58e:	430b      	orrs	r3, r1
 800f590:	d136      	bne.n	800f600 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800f592:	4b47      	ldr	r3, [pc, #284]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f598:	f003 0303 	and.w	r3, r3, #3
 800f59c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800f59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d104      	bne.n	800f5ae <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800f5a4:	f7fe f96a 	bl	800d87c <HAL_RCC_GetPCLK2Freq>
 800f5a8:	6378      	str	r0, [r7, #52]	; 0x34
 800f5aa:	f001 b936 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800f5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d104      	bne.n	800f5be <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f5b4:	f7fe f82c 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 800f5b8:	6378      	str	r0, [r7, #52]	; 0x34
 800f5ba:	f001 b92e 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800f5be:	4b3c      	ldr	r3, [pc, #240]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f5c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5ca:	d106      	bne.n	800f5da <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800f5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ce:	2b02      	cmp	r3, #2
 800f5d0:	d103      	bne.n	800f5da <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800f5d2:	4b3a      	ldr	r3, [pc, #232]	; (800f6bc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800f5d4:	637b      	str	r3, [r7, #52]	; 0x34
 800f5d6:	f001 b920 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800f5da:	4b35      	ldr	r3, [pc, #212]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f5dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f5e0:	f003 0302 	and.w	r3, r3, #2
 800f5e4:	2b02      	cmp	r3, #2
 800f5e6:	d107      	bne.n	800f5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800f5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ea:	2b03      	cmp	r3, #3
 800f5ec:	d104      	bne.n	800f5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800f5ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f5f2:	637b      	str	r3, [r7, #52]	; 0x34
 800f5f4:	f001 b911 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	637b      	str	r3, [r7, #52]	; 0x34
 800f5fc:	f001 b90d 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800f600:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f604:	1e91      	subs	r1, r2, #2
 800f606:	430b      	orrs	r3, r1
 800f608:	d136      	bne.n	800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800f60a:	4b29      	ldr	r3, [pc, #164]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f60c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f610:	f003 030c 	and.w	r3, r3, #12
 800f614:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800f616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d104      	bne.n	800f626 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f61c:	f7fe f91a 	bl	800d854 <HAL_RCC_GetPCLK1Freq>
 800f620:	6378      	str	r0, [r7, #52]	; 0x34
 800f622:	f001 b8fa 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800f626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f628:	2b04      	cmp	r3, #4
 800f62a:	d104      	bne.n	800f636 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f62c:	f7fd fff0 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 800f630:	6378      	str	r0, [r7, #52]	; 0x34
 800f632:	f001 b8f2 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800f636:	4b1e      	ldr	r3, [pc, #120]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f63e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f642:	d106      	bne.n	800f652 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800f644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f646:	2b08      	cmp	r3, #8
 800f648:	d103      	bne.n	800f652 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800f64a:	4b1c      	ldr	r3, [pc, #112]	; (800f6bc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800f64c:	637b      	str	r3, [r7, #52]	; 0x34
 800f64e:	f001 b8e4 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800f652:	4b17      	ldr	r3, [pc, #92]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f658:	f003 0302 	and.w	r3, r3, #2
 800f65c:	2b02      	cmp	r3, #2
 800f65e:	d107      	bne.n	800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800f660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f662:	2b0c      	cmp	r3, #12
 800f664:	d104      	bne.n	800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800f666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f66a:	637b      	str	r3, [r7, #52]	; 0x34
 800f66c:	f001 b8d5 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800f670:	2300      	movs	r3, #0
 800f672:	637b      	str	r3, [r7, #52]	; 0x34
 800f674:	f001 b8d1 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800f678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f67c:	1f11      	subs	r1, r2, #4
 800f67e:	430b      	orrs	r3, r1
 800f680:	d13f      	bne.n	800f702 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800f682:	4b0b      	ldr	r3, [pc, #44]	; (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f688:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f68c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800f68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f690:	2b00      	cmp	r3, #0
 800f692:	d104      	bne.n	800f69e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f694:	f7fe f8de 	bl	800d854 <HAL_RCC_GetPCLK1Freq>
 800f698:	6378      	str	r0, [r7, #52]	; 0x34
 800f69a:	f001 b8be 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800f69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a0:	2b10      	cmp	r3, #16
 800f6a2:	d10d      	bne.n	800f6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f6a4:	f7fd ffb4 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 800f6a8:	6378      	str	r0, [r7, #52]	; 0x34
 800f6aa:	f001 b8b6 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800f6ae:	bf00      	nop
 800f6b0:	46020c00 	.word	0x46020c00
 800f6b4:	02dc6c00 	.word	0x02dc6c00
 800f6b8:	0802bd94 	.word	0x0802bd94
 800f6bc:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800f6c0:	4ba8      	ldr	r3, [pc, #672]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f6c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f6cc:	d106      	bne.n	800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800f6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d0:	2b20      	cmp	r3, #32
 800f6d2:	d103      	bne.n	800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800f6d4:	4ba4      	ldr	r3, [pc, #656]	; (800f968 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f6d6:	637b      	str	r3, [r7, #52]	; 0x34
 800f6d8:	f001 b89f 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800f6dc:	4ba1      	ldr	r3, [pc, #644]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f6de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f6e2:	f003 0302 	and.w	r3, r3, #2
 800f6e6:	2b02      	cmp	r3, #2
 800f6e8:	d107      	bne.n	800f6fa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800f6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ec:	2b30      	cmp	r3, #48	; 0x30
 800f6ee:	d104      	bne.n	800f6fa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800f6f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f6f4:	637b      	str	r3, [r7, #52]	; 0x34
 800f6f6:	f001 b890 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	637b      	str	r3, [r7, #52]	; 0x34
 800f6fe:	f001 b88c 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800f702:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f706:	f1a2 0108 	sub.w	r1, r2, #8
 800f70a:	430b      	orrs	r3, r1
 800f70c:	d136      	bne.n	800f77c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800f70e:	4b95      	ldr	r3, [pc, #596]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f714:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f718:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800f71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d104      	bne.n	800f72a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f720:	f7fe f898 	bl	800d854 <HAL_RCC_GetPCLK1Freq>
 800f724:	6378      	str	r0, [r7, #52]	; 0x34
 800f726:	f001 b878 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800f72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72c:	2b40      	cmp	r3, #64	; 0x40
 800f72e:	d104      	bne.n	800f73a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f730:	f7fd ff6e 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 800f734:	6378      	str	r0, [r7, #52]	; 0x34
 800f736:	f001 b870 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800f73a:	4b8a      	ldr	r3, [pc, #552]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f746:	d106      	bne.n	800f756 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800f748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74a:	2b80      	cmp	r3, #128	; 0x80
 800f74c:	d103      	bne.n	800f756 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800f74e:	4b86      	ldr	r3, [pc, #536]	; (800f968 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f750:	637b      	str	r3, [r7, #52]	; 0x34
 800f752:	f001 b862 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800f756:	4b83      	ldr	r3, [pc, #524]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f75c:	f003 0302 	and.w	r3, r3, #2
 800f760:	2b02      	cmp	r3, #2
 800f762:	d107      	bne.n	800f774 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800f764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f766:	2bc0      	cmp	r3, #192	; 0xc0
 800f768:	d104      	bne.n	800f774 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800f76a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f76e:	637b      	str	r3, [r7, #52]	; 0x34
 800f770:	f001 b853 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800f774:	2300      	movs	r3, #0
 800f776:	637b      	str	r3, [r7, #52]	; 0x34
 800f778:	f001 b84f 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800f77c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f780:	f1a2 0110 	sub.w	r1, r2, #16
 800f784:	430b      	orrs	r3, r1
 800f786:	d139      	bne.n	800f7fc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800f788:	4b76      	ldr	r3, [pc, #472]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f78a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f78e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f792:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800f794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f796:	2b00      	cmp	r3, #0
 800f798:	d104      	bne.n	800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f79a:	f7fe f85b 	bl	800d854 <HAL_RCC_GetPCLK1Freq>
 800f79e:	6378      	str	r0, [r7, #52]	; 0x34
 800f7a0:	f001 b83b 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800f7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7aa:	d104      	bne.n	800f7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f7ac:	f7fd ff30 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 800f7b0:	6378      	str	r0, [r7, #52]	; 0x34
 800f7b2:	f001 b832 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800f7b6:	4b6b      	ldr	r3, [pc, #428]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f7be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7c2:	d107      	bne.n	800f7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800f7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7ca:	d103      	bne.n	800f7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800f7cc:	4b66      	ldr	r3, [pc, #408]	; (800f968 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f7ce:	637b      	str	r3, [r7, #52]	; 0x34
 800f7d0:	f001 b823 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800f7d4:	4b63      	ldr	r3, [pc, #396]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f7d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f7da:	f003 0302 	and.w	r3, r3, #2
 800f7de:	2b02      	cmp	r3, #2
 800f7e0:	d108      	bne.n	800f7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800f7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f7e8:	d104      	bne.n	800f7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800f7ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7ee:	637b      	str	r3, [r7, #52]	; 0x34
 800f7f0:	f001 b813 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	637b      	str	r3, [r7, #52]	; 0x34
 800f7f8:	f001 b80f 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800f7fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f800:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800f804:	430b      	orrs	r3, r1
 800f806:	d139      	bne.n	800f87c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800f808:	4b56      	ldr	r3, [pc, #344]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f80a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f80e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f812:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800f814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f816:	2b00      	cmp	r3, #0
 800f818:	d104      	bne.n	800f824 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f81a:	f7fe f81b 	bl	800d854 <HAL_RCC_GetPCLK1Freq>
 800f81e:	6378      	str	r0, [r7, #52]	; 0x34
 800f820:	f000 bffb 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800f824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f82a:	d104      	bne.n	800f836 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f82c:	f7fd fef0 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 800f830:	6378      	str	r0, [r7, #52]	; 0x34
 800f832:	f000 bff2 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800f836:	4b4b      	ldr	r3, [pc, #300]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f83e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f842:	d107      	bne.n	800f854 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800f844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f846:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f84a:	d103      	bne.n	800f854 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800f84c:	4b46      	ldr	r3, [pc, #280]	; (800f968 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f84e:	637b      	str	r3, [r7, #52]	; 0x34
 800f850:	f000 bfe3 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800f854:	4b43      	ldr	r3, [pc, #268]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f85a:	f003 0302 	and.w	r3, r3, #2
 800f85e:	2b02      	cmp	r3, #2
 800f860:	d108      	bne.n	800f874 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800f862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f864:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f868:	d104      	bne.n	800f874 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800f86a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f86e:	637b      	str	r3, [r7, #52]	; 0x34
 800f870:	f000 bfd3 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800f874:	2300      	movs	r3, #0
 800f876:	637b      	str	r3, [r7, #52]	; 0x34
 800f878:	f000 bfcf 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800f87c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f880:	f1a2 0120 	sub.w	r1, r2, #32
 800f884:	430b      	orrs	r3, r1
 800f886:	d158      	bne.n	800f93a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800f888:	4b36      	ldr	r3, [pc, #216]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f88a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f88e:	f003 0307 	and.w	r3, r3, #7
 800f892:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800f894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f896:	2b00      	cmp	r3, #0
 800f898:	d104      	bne.n	800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800f89a:	f7fe f803 	bl	800d8a4 <HAL_RCC_GetPCLK3Freq>
 800f89e:	6378      	str	r0, [r7, #52]	; 0x34
 800f8a0:	f000 bfbb 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800f8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a6:	2b01      	cmp	r3, #1
 800f8a8:	d104      	bne.n	800f8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f8aa:	f7fd feb1 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 800f8ae:	6378      	str	r0, [r7, #52]	; 0x34
 800f8b0:	f000 bfb3 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800f8b4:	4b2b      	ldr	r3, [pc, #172]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f8bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f8c0:	d106      	bne.n	800f8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800f8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c4:	2b02      	cmp	r3, #2
 800f8c6:	d103      	bne.n	800f8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800f8c8:	4b27      	ldr	r3, [pc, #156]	; (800f968 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f8ca:	637b      	str	r3, [r7, #52]	; 0x34
 800f8cc:	f000 bfa5 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800f8d0:	4b24      	ldr	r3, [pc, #144]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f8d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f8d6:	f003 0302 	and.w	r3, r3, #2
 800f8da:	2b02      	cmp	r3, #2
 800f8dc:	d107      	bne.n	800f8ee <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800f8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e0:	2b03      	cmp	r3, #3
 800f8e2:	d104      	bne.n	800f8ee <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800f8e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f8e8:	637b      	str	r3, [r7, #52]	; 0x34
 800f8ea:	f000 bf96 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800f8ee:	4b1d      	ldr	r3, [pc, #116]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	f003 0320 	and.w	r3, r3, #32
 800f8f6:	2b20      	cmp	r3, #32
 800f8f8:	d11b      	bne.n	800f932 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800f8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fc:	2b04      	cmp	r3, #4
 800f8fe:	d118      	bne.n	800f932 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f900:	4b18      	ldr	r3, [pc, #96]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f902:	689b      	ldr	r3, [r3, #8]
 800f904:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d005      	beq.n	800f918 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800f90c:	4b15      	ldr	r3, [pc, #84]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f90e:	689b      	ldr	r3, [r3, #8]
 800f910:	0e1b      	lsrs	r3, r3, #24
 800f912:	f003 030f 	and.w	r3, r3, #15
 800f916:	e006      	b.n	800f926 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800f918:	4b12      	ldr	r3, [pc, #72]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f91a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f91e:	041b      	lsls	r3, r3, #16
 800f920:	0e1b      	lsrs	r3, r3, #24
 800f922:	f003 030f 	and.w	r3, r3, #15
 800f926:	4a11      	ldr	r2, [pc, #68]	; (800f96c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f92c:	637b      	str	r3, [r7, #52]	; 0x34
 800f92e:	f000 bf74 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800f932:	2300      	movs	r3, #0
 800f934:	637b      	str	r3, [r7, #52]	; 0x34
 800f936:	f000 bf70 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800f93a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f93e:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800f942:	430b      	orrs	r3, r1
 800f944:	d172      	bne.n	800fa2c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800f946:	4b07      	ldr	r3, [pc, #28]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f94c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f950:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800f952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f958:	d10a      	bne.n	800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f95a:	f7fd fe59 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 800f95e:	6378      	str	r0, [r7, #52]	; 0x34
 800f960:	f000 bf5b 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800f964:	46020c00 	.word	0x46020c00
 800f968:	00f42400 	.word	0x00f42400
 800f96c:	0802bd94 	.word	0x0802bd94
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800f970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f976:	d108      	bne.n	800f98a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f978:	f107 0318 	add.w	r3, r7, #24
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7ff f903 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800f982:	6a3b      	ldr	r3, [r7, #32]
 800f984:	637b      	str	r3, [r7, #52]	; 0x34
 800f986:	f000 bf48 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800f98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d104      	bne.n	800f99a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800f990:	f7fd ff46 	bl	800d820 <HAL_RCC_GetHCLKFreq>
 800f994:	6378      	str	r0, [r7, #52]	; 0x34
 800f996:	f000 bf40 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800f99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800f9a0:	d122      	bne.n	800f9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f9a2:	4baa      	ldr	r3, [pc, #680]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	f003 0320 	and.w	r3, r3, #32
 800f9aa:	2b20      	cmp	r3, #32
 800f9ac:	d118      	bne.n	800f9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f9ae:	4ba7      	ldr	r3, [pc, #668]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f9b0:	689b      	ldr	r3, [r3, #8]
 800f9b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d005      	beq.n	800f9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800f9ba:	4ba4      	ldr	r3, [pc, #656]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f9bc:	689b      	ldr	r3, [r3, #8]
 800f9be:	0e1b      	lsrs	r3, r3, #24
 800f9c0:	f003 030f 	and.w	r3, r3, #15
 800f9c4:	e006      	b.n	800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800f9c6:	4ba1      	ldr	r3, [pc, #644]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f9c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f9cc:	041b      	lsls	r3, r3, #16
 800f9ce:	0e1b      	lsrs	r3, r3, #24
 800f9d0:	f003 030f 	and.w	r3, r3, #15
 800f9d4:	4a9e      	ldr	r2, [pc, #632]	; (800fc50 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800f9d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9da:	637b      	str	r3, [r7, #52]	; 0x34
 800f9dc:	f000 bf1d 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	637b      	str	r3, [r7, #52]	; 0x34
 800f9e4:	f000 bf19 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800f9e8:	4b98      	ldr	r3, [pc, #608]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f9f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9f4:	d107      	bne.n	800fa06 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800f9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f9fc:	d103      	bne.n	800fa06 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800f9fe:	4b95      	ldr	r3, [pc, #596]	; (800fc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800fa00:	637b      	str	r3, [r7, #52]	; 0x34
 800fa02:	f000 bf0a 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800fa06:	4b91      	ldr	r3, [pc, #580]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fa0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa12:	d107      	bne.n	800fa24 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800fa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fa1a:	d103      	bne.n	800fa24 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800fa1c:	4b8d      	ldr	r3, [pc, #564]	; (800fc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800fa1e:	637b      	str	r3, [r7, #52]	; 0x34
 800fa20:	f000 befb 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800fa24:	2300      	movs	r3, #0
 800fa26:	637b      	str	r3, [r7, #52]	; 0x34
 800fa28:	f000 bef7 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800fa2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa30:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800fa34:	430b      	orrs	r3, r1
 800fa36:	d158      	bne.n	800faea <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800fa38:	4b84      	ldr	r3, [pc, #528]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800fa3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fa3e:	f003 0307 	and.w	r3, r3, #7
 800fa42:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800fa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa46:	2b04      	cmp	r3, #4
 800fa48:	d84b      	bhi.n	800fae2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800fa4a:	a201      	add	r2, pc, #4	; (adr r2, 800fa50 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800fa4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa50:	0800fa89 	.word	0x0800fa89
 800fa54:	0800fa65 	.word	0x0800fa65
 800fa58:	0800fa77 	.word	0x0800fa77
 800fa5c:	0800fa93 	.word	0x0800fa93
 800fa60:	0800fa9d 	.word	0x0800fa9d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fa64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f7fe ff25 	bl	800e8b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800fa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa72:	f000 bed2 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa76:	f107 030c 	add.w	r3, r7, #12
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7ff f9ec 	bl	800ee58 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa84:	f000 bec9 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800fa88:	f7fd feca 	bl	800d820 <HAL_RCC_GetHCLKFreq>
 800fa8c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fa8e:	f000 bec4 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800fa92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800fa96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa98:	f000 bebf 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fa9c:	4b6b      	ldr	r3, [pc, #428]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	f003 0320 	and.w	r3, r3, #32
 800faa4:	2b20      	cmp	r3, #32
 800faa6:	d118      	bne.n	800fada <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800faa8:	4b68      	ldr	r3, [pc, #416]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d005      	beq.n	800fac0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800fab4:	4b65      	ldr	r3, [pc, #404]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800fab6:	689b      	ldr	r3, [r3, #8]
 800fab8:	0e1b      	lsrs	r3, r3, #24
 800faba:	f003 030f 	and.w	r3, r3, #15
 800fabe:	e006      	b.n	800face <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800fac0:	4b62      	ldr	r3, [pc, #392]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800fac2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fac6:	041b      	lsls	r3, r3, #16
 800fac8:	0e1b      	lsrs	r3, r3, #24
 800faca:	f003 030f 	and.w	r3, r3, #15
 800face:	4a60      	ldr	r2, [pc, #384]	; (800fc50 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800fad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fad4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fad6:	f000 bea0 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fada:	2300      	movs	r3, #0
 800fadc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fade:	f000 be9c 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fae2:	2300      	movs	r3, #0
 800fae4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fae6:	f000 be98 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800faea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800faee:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800faf2:	430b      	orrs	r3, r1
 800faf4:	d167      	bne.n	800fbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800faf6:	4b55      	ldr	r3, [pc, #340]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800faf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fafc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800fb00:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800fb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fb08:	d036      	beq.n	800fb78 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800fb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fb10:	d855      	bhi.n	800fbbe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800fb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800fb18:	d029      	beq.n	800fb6e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800fb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800fb20:	d84d      	bhi.n	800fbbe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800fb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb28:	d013      	beq.n	800fb52 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800fb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb30:	d845      	bhi.n	800fbbe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800fb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d015      	beq.n	800fb64 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800fb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb3e:	d13e      	bne.n	800fbbe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fb40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7fe feb7 	bl	800e8b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800fb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb4e:	f000 be64 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb52:	f107 030c 	add.w	r3, r7, #12
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7ff f97e 	bl	800ee58 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb60:	f000 be5b 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800fb64:	f7fd fe5c 	bl	800d820 <HAL_RCC_GetHCLKFreq>
 800fb68:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fb6a:	f000 be56 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800fb6e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800fb72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fb74:	f000 be51 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fb78:	4b34      	ldr	r3, [pc, #208]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f003 0320 	and.w	r3, r3, #32
 800fb80:	2b20      	cmp	r3, #32
 800fb82:	d118      	bne.n	800fbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fb84:	4b31      	ldr	r3, [pc, #196]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800fb86:	689b      	ldr	r3, [r3, #8]
 800fb88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d005      	beq.n	800fb9c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800fb90:	4b2e      	ldr	r3, [pc, #184]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800fb92:	689b      	ldr	r3, [r3, #8]
 800fb94:	0e1b      	lsrs	r3, r3, #24
 800fb96:	f003 030f 	and.w	r3, r3, #15
 800fb9a:	e006      	b.n	800fbaa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800fb9c:	4b2b      	ldr	r3, [pc, #172]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800fb9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fba2:	041b      	lsls	r3, r3, #16
 800fba4:	0e1b      	lsrs	r3, r3, #24
 800fba6:	f003 030f 	and.w	r3, r3, #15
 800fbaa:	4a29      	ldr	r2, [pc, #164]	; (800fc50 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800fbac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbb0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fbb2:	f000 be32 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fbba:	f000 be2e 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fbc2:	f000 be2a 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800fbc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbca:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800fbce:	430b      	orrs	r3, r1
 800fbd0:	d153      	bne.n	800fc7a <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800fbd2:	4b1e      	ldr	r3, [pc, #120]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800fbd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fbdc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800fbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d104      	bne.n	800fbee <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fbe4:	f7fd fe36 	bl	800d854 <HAL_RCC_GetPCLK1Freq>
 800fbe8:	6378      	str	r0, [r7, #52]	; 0x34
 800fbea:	f000 be16 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800fbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fbf4:	d104      	bne.n	800fc00 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fbf6:	f7fd fd0b 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 800fbfa:	6378      	str	r0, [r7, #52]	; 0x34
 800fbfc:	f000 be0d 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800fc00:	4b12      	ldr	r3, [pc, #72]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fc08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc0c:	d107      	bne.n	800fc1e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800fc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fc14:	d103      	bne.n	800fc1e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800fc16:	4b0f      	ldr	r3, [pc, #60]	; (800fc54 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800fc18:	637b      	str	r3, [r7, #52]	; 0x34
 800fc1a:	f000 bdfe 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800fc1e:	4b0b      	ldr	r3, [pc, #44]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f003 0320 	and.w	r3, r3, #32
 800fc26:	2b20      	cmp	r3, #32
 800fc28:	d123      	bne.n	800fc72 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800fc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fc30:	d11f      	bne.n	800fc72 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fc32:	4b06      	ldr	r3, [pc, #24]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800fc34:	689b      	ldr	r3, [r3, #8]
 800fc36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d00c      	beq.n	800fc58 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800fc3e:	4b03      	ldr	r3, [pc, #12]	; (800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800fc40:	689b      	ldr	r3, [r3, #8]
 800fc42:	0e1b      	lsrs	r3, r3, #24
 800fc44:	f003 030f 	and.w	r3, r3, #15
 800fc48:	e00d      	b.n	800fc66 <HAL_RCCEx_GetPeriphCLKFreq+0xb3e>
 800fc4a:	bf00      	nop
 800fc4c:	46020c00 	.word	0x46020c00
 800fc50:	0802bd94 	.word	0x0802bd94
 800fc54:	00f42400 	.word	0x00f42400
 800fc58:	4ba0      	ldr	r3, [pc, #640]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fc5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fc5e:	041b      	lsls	r3, r3, #16
 800fc60:	0e1b      	lsrs	r3, r3, #24
 800fc62:	f003 030f 	and.w	r3, r3, #15
 800fc66:	4a9e      	ldr	r2, [pc, #632]	; (800fee0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800fc68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc6c:	637b      	str	r3, [r7, #52]	; 0x34
 800fc6e:	f000 bdd4 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800fc72:	2300      	movs	r3, #0
 800fc74:	637b      	str	r3, [r7, #52]	; 0x34
 800fc76:	f000 bdd0 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800fc7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc7e:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800fc82:	430b      	orrs	r3, r1
 800fc84:	d14c      	bne.n	800fd20 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800fc86:	4b95      	ldr	r3, [pc, #596]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fc88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc8c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800fc90:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800fc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d104      	bne.n	800fca2 <HAL_RCCEx_GetPeriphCLKFreq+0xb7a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fc98:	f7fd fddc 	bl	800d854 <HAL_RCC_GetPCLK1Freq>
 800fc9c:	6378      	str	r0, [r7, #52]	; 0x34
 800fc9e:	f000 bdbc 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800fca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fca8:	d104      	bne.n	800fcb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fcaa:	f7fd fcb1 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 800fcae:	6378      	str	r0, [r7, #52]	; 0x34
 800fcb0:	f000 bdb3 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800fcb4:	4b89      	ldr	r3, [pc, #548]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fcbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fcc0:	d107      	bne.n	800fcd2 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800fcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fcc8:	d103      	bne.n	800fcd2 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
    {
      frequency = HSI_VALUE;
 800fcca:	4b86      	ldr	r3, [pc, #536]	; (800fee4 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800fccc:	637b      	str	r3, [r7, #52]	; 0x34
 800fcce:	f000 bda4 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800fcd2:	4b82      	ldr	r3, [pc, #520]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	f003 0320 	and.w	r3, r3, #32
 800fcda:	2b20      	cmp	r3, #32
 800fcdc:	d11c      	bne.n	800fd18 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
 800fcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800fce4:	d118      	bne.n	800fd18 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fce6:	4b7d      	ldr	r3, [pc, #500]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fce8:	689b      	ldr	r3, [r3, #8]
 800fcea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d005      	beq.n	800fcfe <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 800fcf2:	4b7a      	ldr	r3, [pc, #488]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fcf4:	689b      	ldr	r3, [r3, #8]
 800fcf6:	0e1b      	lsrs	r3, r3, #24
 800fcf8:	f003 030f 	and.w	r3, r3, #15
 800fcfc:	e006      	b.n	800fd0c <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 800fcfe:	4b77      	ldr	r3, [pc, #476]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fd00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fd04:	041b      	lsls	r3, r3, #16
 800fd06:	0e1b      	lsrs	r3, r3, #24
 800fd08:	f003 030f 	and.w	r3, r3, #15
 800fd0c:	4a74      	ldr	r2, [pc, #464]	; (800fee0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800fd0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd12:	637b      	str	r3, [r7, #52]	; 0x34
 800fd14:	f000 bd81 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	637b      	str	r3, [r7, #52]	; 0x34
 800fd1c:	f000 bd7d 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800fd20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd24:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800fd28:	430b      	orrs	r3, r1
 800fd2a:	d158      	bne.n	800fdde <HAL_RCCEx_GetPeriphCLKFreq+0xcb6>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800fd2c:	4b6b      	ldr	r3, [pc, #428]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fd2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fd32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fd36:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800fd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3a:	2bc0      	cmp	r3, #192	; 0xc0
 800fd3c:	d028      	beq.n	800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 800fd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd40:	2bc0      	cmp	r3, #192	; 0xc0
 800fd42:	d848      	bhi.n	800fdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
 800fd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd46:	2b80      	cmp	r3, #128	; 0x80
 800fd48:	d00e      	beq.n	800fd68 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
 800fd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4c:	2b80      	cmp	r3, #128	; 0x80
 800fd4e:	d842      	bhi.n	800fdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
 800fd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d003      	beq.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 800fd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd58:	2b40      	cmp	r3, #64	; 0x40
 800fd5a:	d014      	beq.n	800fd86 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
 800fd5c:	e03b      	b.n	800fdd6 <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800fd5e:	f7fd fda1 	bl	800d8a4 <HAL_RCC_GetPCLK3Freq>
 800fd62:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fd64:	f000 bd59 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fd68:	4b5c      	ldr	r3, [pc, #368]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fd70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd74:	d103      	bne.n	800fd7e <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
        {
          frequency = HSI_VALUE;
 800fd76:	4b5b      	ldr	r3, [pc, #364]	; (800fee4 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800fd78:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fd7a:	f000 bd4e 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fd82:	f000 bd4a 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800fd86:	f7fd fc43 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 800fd8a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fd8c:	f000 bd45 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fd90:	4b52      	ldr	r3, [pc, #328]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	f003 0320 	and.w	r3, r3, #32
 800fd98:	2b20      	cmp	r3, #32
 800fd9a:	d118      	bne.n	800fdce <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fd9c:	4b4f      	ldr	r3, [pc, #316]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fd9e:	689b      	ldr	r3, [r3, #8]
 800fda0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d005      	beq.n	800fdb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
 800fda8:	4b4c      	ldr	r3, [pc, #304]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fdaa:	689b      	ldr	r3, [r3, #8]
 800fdac:	0e1b      	lsrs	r3, r3, #24
 800fdae:	f003 030f 	and.w	r3, r3, #15
 800fdb2:	e006      	b.n	800fdc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800fdb4:	4b49      	ldr	r3, [pc, #292]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fdb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fdba:	041b      	lsls	r3, r3, #16
 800fdbc:	0e1b      	lsrs	r3, r3, #24
 800fdbe:	f003 030f 	and.w	r3, r3, #15
 800fdc2:	4a47      	ldr	r2, [pc, #284]	; (800fee0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800fdc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdc8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fdca:	f000 bd26 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fdd2:	f000 bd22 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      default:
      {
        frequency = 0U;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fdda:	f000 bd1e 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800fdde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fde2:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800fde6:	430b      	orrs	r3, r1
 800fde8:	d14c      	bne.n	800fe84 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800fdea:	4b3c      	ldr	r3, [pc, #240]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fdec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fdf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fdf4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800fdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d104      	bne.n	800fe06 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fdfc:	f7fd fd2a 	bl	800d854 <HAL_RCC_GetPCLK1Freq>
 800fe00:	6378      	str	r0, [r7, #52]	; 0x34
 800fe02:	f000 bd0a 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800fe06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fe0c:	d104      	bne.n	800fe18 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fe0e:	f7fd fbff 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 800fe12:	6378      	str	r0, [r7, #52]	; 0x34
 800fe14:	f000 bd01 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800fe18:	4b30      	ldr	r3, [pc, #192]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe24:	d107      	bne.n	800fe36 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 800fe26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe2c:	d103      	bne.n	800fe36 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
    {
      frequency = HSI_VALUE;
 800fe2e:	4b2d      	ldr	r3, [pc, #180]	; (800fee4 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800fe30:	637b      	str	r3, [r7, #52]	; 0x34
 800fe32:	f000 bcf2 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800fe36:	4b29      	ldr	r3, [pc, #164]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f003 0320 	and.w	r3, r3, #32
 800fe3e:	2b20      	cmp	r3, #32
 800fe40:	d11c      	bne.n	800fe7c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800fe42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fe48:	d118      	bne.n	800fe7c <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fe4a:	4b24      	ldr	r3, [pc, #144]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fe4c:	689b      	ldr	r3, [r3, #8]
 800fe4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d005      	beq.n	800fe62 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800fe56:	4b21      	ldr	r3, [pc, #132]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fe58:	689b      	ldr	r3, [r3, #8]
 800fe5a:	0e1b      	lsrs	r3, r3, #24
 800fe5c:	f003 030f 	and.w	r3, r3, #15
 800fe60:	e006      	b.n	800fe70 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 800fe62:	4b1e      	ldr	r3, [pc, #120]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fe64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fe68:	041b      	lsls	r3, r3, #16
 800fe6a:	0e1b      	lsrs	r3, r3, #24
 800fe6c:	f003 030f 	and.w	r3, r3, #15
 800fe70:	4a1b      	ldr	r2, [pc, #108]	; (800fee0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800fe72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe76:	637b      	str	r3, [r7, #52]	; 0x34
 800fe78:	f000 bccf 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	637b      	str	r3, [r7, #52]	; 0x34
 800fe80:	f000 bccb 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800fe84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe88:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800fe8c:	430b      	orrs	r3, r1
 800fe8e:	d152      	bne.n	800ff36 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800fe90:	4b12      	ldr	r3, [pc, #72]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fe92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fe96:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800fe9a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800fe9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d104      	bne.n	800feac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fea2:	f7fd fcd7 	bl	800d854 <HAL_RCC_GetPCLK1Freq>
 800fea6:	6378      	str	r0, [r7, #52]	; 0x34
 800fea8:	f000 bcb7 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800feac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800feb2:	d104      	bne.n	800febe <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800feb4:	f7fd fbac 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 800feb8:	6378      	str	r0, [r7, #52]	; 0x34
 800feba:	f000 bcae 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800febe:	4b07      	ldr	r3, [pc, #28]	; (800fedc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800feca:	d10d      	bne.n	800fee8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
 800fecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fece:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fed2:	d109      	bne.n	800fee8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
    {
      frequency = HSI_VALUE;
 800fed4:	4b03      	ldr	r3, [pc, #12]	; (800fee4 <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800fed6:	637b      	str	r3, [r7, #52]	; 0x34
 800fed8:	f000 bc9f 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800fedc:	46020c00 	.word	0x46020c00
 800fee0:	0802bd94 	.word	0x0802bd94
 800fee4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800fee8:	4ba6      	ldr	r3, [pc, #664]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f003 0320 	and.w	r3, r3, #32
 800fef0:	2b20      	cmp	r3, #32
 800fef2:	d11c      	bne.n	800ff2e <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
 800fef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800fefa:	d118      	bne.n	800ff2e <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fefc:	4ba1      	ldr	r3, [pc, #644]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fefe:	689b      	ldr	r3, [r3, #8]
 800ff00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d005      	beq.n	800ff14 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800ff08:	4b9e      	ldr	r3, [pc, #632]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800ff0a:	689b      	ldr	r3, [r3, #8]
 800ff0c:	0e1b      	lsrs	r3, r3, #24
 800ff0e:	f003 030f 	and.w	r3, r3, #15
 800ff12:	e006      	b.n	800ff22 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
 800ff14:	4b9b      	ldr	r3, [pc, #620]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800ff16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ff1a:	041b      	lsls	r3, r3, #16
 800ff1c:	0e1b      	lsrs	r3, r3, #24
 800ff1e:	f003 030f 	and.w	r3, r3, #15
 800ff22:	4a99      	ldr	r2, [pc, #612]	; (8010188 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800ff24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff28:	637b      	str	r3, [r7, #52]	; 0x34
 800ff2a:	f000 bc76 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	637b      	str	r3, [r7, #52]	; 0x34
 800ff32:	f000 bc72 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800ff36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff3a:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800ff3e:	430b      	orrs	r3, r1
 800ff40:	d14c      	bne.n	800ffdc <HAL_RCCEx_GetPeriphCLKFreq+0xeb4>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800ff42:	4b90      	ldr	r3, [pc, #576]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800ff44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ff48:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800ff4c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800ff4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d104      	bne.n	800ff5e <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ff54:	f7fd fc7e 	bl	800d854 <HAL_RCC_GetPCLK1Freq>
 800ff58:	6378      	str	r0, [r7, #52]	; 0x34
 800ff5a:	f000 bc5e 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800ff5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ff64:	d104      	bne.n	800ff70 <HAL_RCCEx_GetPeriphCLKFreq+0xe48>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ff66:	f7fd fb53 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 800ff6a:	6378      	str	r0, [r7, #52]	; 0x34
 800ff6c:	f000 bc55 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800ff70:	4b84      	ldr	r3, [pc, #528]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ff78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ff7c:	d107      	bne.n	800ff8e <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
 800ff7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ff84:	d103      	bne.n	800ff8e <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
    {
      frequency = HSI_VALUE;
 800ff86:	4b81      	ldr	r3, [pc, #516]	; (801018c <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 800ff88:	637b      	str	r3, [r7, #52]	; 0x34
 800ff8a:	f000 bc46 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800ff8e:	4b7d      	ldr	r3, [pc, #500]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f003 0320 	and.w	r3, r3, #32
 800ff96:	2b20      	cmp	r3, #32
 800ff98:	d11c      	bne.n	800ffd4 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 800ff9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ffa0:	d118      	bne.n	800ffd4 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ffa2:	4b78      	ldr	r3, [pc, #480]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800ffa4:	689b      	ldr	r3, [r3, #8]
 800ffa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d005      	beq.n	800ffba <HAL_RCCEx_GetPeriphCLKFreq+0xe92>
 800ffae:	4b75      	ldr	r3, [pc, #468]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800ffb0:	689b      	ldr	r3, [r3, #8]
 800ffb2:	0e1b      	lsrs	r3, r3, #24
 800ffb4:	f003 030f 	and.w	r3, r3, #15
 800ffb8:	e006      	b.n	800ffc8 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 800ffba:	4b72      	ldr	r3, [pc, #456]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800ffbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ffc0:	041b      	lsls	r3, r3, #16
 800ffc2:	0e1b      	lsrs	r3, r3, #24
 800ffc4:	f003 030f 	and.w	r3, r3, #15
 800ffc8:	4a6f      	ldr	r2, [pc, #444]	; (8010188 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800ffca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffce:	637b      	str	r3, [r7, #52]	; 0x34
 800ffd0:	f000 bc23 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	637b      	str	r3, [r7, #52]	; 0x34
 800ffd8:	f000 bc1f 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800ffdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffe0:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ffe4:	430b      	orrs	r3, r1
 800ffe6:	d164      	bne.n	80100b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf8a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800ffe8:	4b66      	ldr	r3, [pc, #408]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800ffea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ffee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fff2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800fff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d120      	bne.n	801003c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fffa:	4b62      	ldr	r3, [pc, #392]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	f003 0320 	and.w	r3, r3, #32
 8010002:	2b20      	cmp	r3, #32
 8010004:	d117      	bne.n	8010036 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010006:	4b5f      	ldr	r3, [pc, #380]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8010008:	689b      	ldr	r3, [r3, #8]
 801000a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801000e:	2b00      	cmp	r3, #0
 8010010:	d005      	beq.n	801001e <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
 8010012:	4b5c      	ldr	r3, [pc, #368]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8010014:	689b      	ldr	r3, [r3, #8]
 8010016:	0e1b      	lsrs	r3, r3, #24
 8010018:	f003 030f 	and.w	r3, r3, #15
 801001c:	e006      	b.n	801002c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 801001e:	4b59      	ldr	r3, [pc, #356]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8010020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010024:	041b      	lsls	r3, r3, #16
 8010026:	0e1b      	lsrs	r3, r3, #24
 8010028:	f003 030f 	and.w	r3, r3, #15
 801002c:	4a56      	ldr	r2, [pc, #344]	; (8010188 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 801002e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010032:	637b      	str	r3, [r7, #52]	; 0x34
 8010034:	e3f1      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 8010036:	2300      	movs	r3, #0
 8010038:	637b      	str	r3, [r7, #52]	; 0x34
 801003a:	e3ee      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 801003c:	4b51      	ldr	r3, [pc, #324]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 801003e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010042:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010046:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801004a:	d112      	bne.n	8010072 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 801004c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801004e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010052:	d10e      	bne.n	8010072 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010054:	4b4b      	ldr	r3, [pc, #300]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8010056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801005a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801005e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010062:	d102      	bne.n	801006a <HAL_RCCEx_GetPeriphCLKFreq+0xf42>
      {
        frequency = LSI_VALUE / 128U;
 8010064:	23fa      	movs	r3, #250	; 0xfa
 8010066:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010068:	e3d7      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 801006a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 801006e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010070:	e3d3      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8010072:	4b44      	ldr	r3, [pc, #272]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801007a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801007e:	d106      	bne.n	801008e <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 8010080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010086:	d102      	bne.n	801008e <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
    {
      frequency = HSI_VALUE;
 8010088:	4b40      	ldr	r3, [pc, #256]	; (801018c <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 801008a:	637b      	str	r3, [r7, #52]	; 0x34
 801008c:	e3c5      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 801008e:	4b3d      	ldr	r3, [pc, #244]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8010090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010094:	f003 0302 	and.w	r3, r3, #2
 8010098:	2b02      	cmp	r3, #2
 801009a:	d107      	bne.n	80100ac <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
 801009c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80100a2:	d103      	bne.n	80100ac <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
    {
      frequency = LSE_VALUE;
 80100a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80100a8:	637b      	str	r3, [r7, #52]	; 0x34
 80100aa:	e3b6      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80100ac:	2300      	movs	r3, #0
 80100ae:	637b      	str	r3, [r7, #52]	; 0x34
 80100b0:	e3b3      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80100b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100b6:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80100ba:	430b      	orrs	r3, r1
 80100bc:	d16b      	bne.n	8010196 <HAL_RCCEx_GetPeriphCLKFreq+0x106e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80100be:	4b31      	ldr	r3, [pc, #196]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 80100c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80100c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80100c8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80100ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d120      	bne.n	8010112 <HAL_RCCEx_GetPeriphCLKFreq+0xfea>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80100d0:	4b2c      	ldr	r3, [pc, #176]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	f003 0320 	and.w	r3, r3, #32
 80100d8:	2b20      	cmp	r3, #32
 80100da:	d117      	bne.n	801010c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80100dc:	4b29      	ldr	r3, [pc, #164]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 80100de:	689b      	ldr	r3, [r3, #8]
 80100e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d005      	beq.n	80100f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 80100e8:	4b26      	ldr	r3, [pc, #152]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 80100ea:	689b      	ldr	r3, [r3, #8]
 80100ec:	0e1b      	lsrs	r3, r3, #24
 80100ee:	f003 030f 	and.w	r3, r3, #15
 80100f2:	e006      	b.n	8010102 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
 80100f4:	4b23      	ldr	r3, [pc, #140]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 80100f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80100fa:	041b      	lsls	r3, r3, #16
 80100fc:	0e1b      	lsrs	r3, r3, #24
 80100fe:	f003 030f 	and.w	r3, r3, #15
 8010102:	4a21      	ldr	r2, [pc, #132]	; (8010188 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 8010104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010108:	637b      	str	r3, [r7, #52]	; 0x34
 801010a:	e386      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 801010c:	2300      	movs	r3, #0
 801010e:	637b      	str	r3, [r7, #52]	; 0x34
 8010110:	e383      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8010112:	4b1c      	ldr	r3, [pc, #112]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8010114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801011c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010120:	d112      	bne.n	8010148 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
 8010122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010128:	d10e      	bne.n	8010148 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801012a:	4b16      	ldr	r3, [pc, #88]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 801012c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010134:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010138:	d102      	bne.n	8010140 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
      {
        frequency = LSI_VALUE / 128U;
 801013a:	23fa      	movs	r3, #250	; 0xfa
 801013c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801013e:	e36c      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 8010140:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8010144:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010146:	e368      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8010148:	4b0e      	ldr	r3, [pc, #56]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010154:	d106      	bne.n	8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>
 8010156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801015c:	d102      	bne.n	8010164 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>
    {
      frequency = HSI_VALUE;
 801015e:	4b0b      	ldr	r3, [pc, #44]	; (801018c <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 8010160:	637b      	str	r3, [r7, #52]	; 0x34
 8010162:	e35a      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8010164:	4b07      	ldr	r3, [pc, #28]	; (8010184 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8010166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801016a:	f003 0302 	and.w	r3, r3, #2
 801016e:	2b02      	cmp	r3, #2
 8010170:	d10e      	bne.n	8010190 <HAL_RCCEx_GetPeriphCLKFreq+0x1068>
 8010172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010174:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010178:	d10a      	bne.n	8010190 <HAL_RCCEx_GetPeriphCLKFreq+0x1068>
    {
      frequency = LSE_VALUE;
 801017a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801017e:	637b      	str	r3, [r7, #52]	; 0x34
 8010180:	e34b      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 8010182:	bf00      	nop
 8010184:	46020c00 	.word	0x46020c00
 8010188:	0802bd94 	.word	0x0802bd94
 801018c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8010190:	2300      	movs	r3, #0
 8010192:	637b      	str	r3, [r7, #52]	; 0x34
 8010194:	e341      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8010196:	e9d7 2300 	ldrd	r2, r3, [r7]
 801019a:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 801019e:	430b      	orrs	r3, r1
 80101a0:	d147      	bne.n	8010232 <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80101a2:	4b9b      	ldr	r3, [pc, #620]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 80101a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80101a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80101ac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80101ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d103      	bne.n	80101bc <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80101b4:	f7fd fb4e 	bl	800d854 <HAL_RCC_GetPCLK1Freq>
 80101b8:	6378      	str	r0, [r7, #52]	; 0x34
 80101ba:	e32e      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80101bc:	4b94      	ldr	r3, [pc, #592]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 80101be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80101c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80101c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80101ca:	d112      	bne.n	80101f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
 80101cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80101d2:	d10e      	bne.n	80101f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80101d4:	4b8e      	ldr	r3, [pc, #568]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 80101d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80101da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80101de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80101e2:	d102      	bne.n	80101ea <HAL_RCCEx_GetPeriphCLKFreq+0x10c2>
      {
        frequency = LSI_VALUE / 128U;
 80101e4:	23fa      	movs	r3, #250	; 0xfa
 80101e6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80101e8:	e317      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 80101ea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80101ee:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80101f0:	e313      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80101f2:	4b87      	ldr	r3, [pc, #540]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80101fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80101fe:	d106      	bne.n	801020e <HAL_RCCEx_GetPeriphCLKFreq+0x10e6>
 8010200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010202:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010206:	d102      	bne.n	801020e <HAL_RCCEx_GetPeriphCLKFreq+0x10e6>
    {
      frequency = HSI_VALUE;
 8010208:	4b82      	ldr	r3, [pc, #520]	; (8010414 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 801020a:	637b      	str	r3, [r7, #52]	; 0x34
 801020c:	e305      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 801020e:	4b80      	ldr	r3, [pc, #512]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 8010210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010214:	f003 0302 	and.w	r3, r3, #2
 8010218:	2b02      	cmp	r3, #2
 801021a:	d107      	bne.n	801022c <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
 801021c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801021e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8010222:	d103      	bne.n	801022c <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
    {
      frequency = LSE_VALUE;
 8010224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010228:	637b      	str	r3, [r7, #52]	; 0x34
 801022a:	e2f6      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 801022c:	2300      	movs	r3, #0
 801022e:	637b      	str	r3, [r7, #52]	; 0x34
 8010230:	e2f3      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8010232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010236:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 801023a:	430b      	orrs	r3, r1
 801023c:	d12d      	bne.n	801029a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 801023e:	4b74      	ldr	r3, [pc, #464]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 8010240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010244:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8010248:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 801024a:	4b71      	ldr	r3, [pc, #452]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010256:	d105      	bne.n	8010264 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8010258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801025a:	2b00      	cmp	r3, #0
 801025c:	d102      	bne.n	8010264 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
    {
      frequency = HSE_VALUE;
 801025e:	4b6d      	ldr	r3, [pc, #436]	; (8010414 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8010260:	637b      	str	r3, [r7, #52]	; 0x34
 8010262:	e2da      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8010264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010266:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801026a:	d107      	bne.n	801027c <HAL_RCCEx_GetPeriphCLKFreq+0x1154>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801026c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010270:	4618      	mov	r0, r3
 8010272:	f7fe fb21 	bl	800e8b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8010276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010278:	637b      	str	r3, [r7, #52]	; 0x34
 801027a:	e2ce      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 801027c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801027e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010282:	d107      	bne.n	8010294 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010284:	f107 0318 	add.w	r3, r7, #24
 8010288:	4618      	mov	r0, r3
 801028a:	f7fe fc7d 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 801028e:	69bb      	ldr	r3, [r7, #24]
 8010290:	637b      	str	r3, [r7, #52]	; 0x34
 8010292:	e2c2      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8010294:	2300      	movs	r3, #0
 8010296:	637b      	str	r3, [r7, #52]	; 0x34
 8010298:	e2bf      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 801029a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801029e:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80102a2:	430b      	orrs	r3, r1
 80102a4:	d156      	bne.n	8010354 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80102a6:	4b5a      	ldr	r3, [pc, #360]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 80102a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80102ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80102b0:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80102b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80102b8:	d028      	beq.n	801030c <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
 80102ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80102c0:	d845      	bhi.n	801034e <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
 80102c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80102c8:	d013      	beq.n	80102f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11ca>
 80102ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80102d0:	d83d      	bhi.n	801034e <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
 80102d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d004      	beq.n	80102e2 <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
 80102d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80102de:	d004      	beq.n	80102ea <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>
 80102e0:	e035      	b.n	801034e <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80102e2:	f7fd facb 	bl	800d87c <HAL_RCC_GetPCLK2Freq>
 80102e6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80102e8:	e297      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80102ea:	f7fd f991 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 80102ee:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80102f0:	e293      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80102f2:	4b47      	ldr	r3, [pc, #284]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80102fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80102fe:	d102      	bne.n	8010306 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        {
          frequency = HSI_VALUE;
 8010300:	4b44      	ldr	r3, [pc, #272]	; (8010414 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8010302:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010304:	e289      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 8010306:	2300      	movs	r3, #0
 8010308:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801030a:	e286      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 801030c:	4b40      	ldr	r3, [pc, #256]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	f003 0320 	and.w	r3, r3, #32
 8010314:	2b20      	cmp	r3, #32
 8010316:	d117      	bne.n	8010348 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010318:	4b3d      	ldr	r3, [pc, #244]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 801031a:	689b      	ldr	r3, [r3, #8]
 801031c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010320:	2b00      	cmp	r3, #0
 8010322:	d005      	beq.n	8010330 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8010324:	4b3a      	ldr	r3, [pc, #232]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 8010326:	689b      	ldr	r3, [r3, #8]
 8010328:	0e1b      	lsrs	r3, r3, #24
 801032a:	f003 030f 	and.w	r3, r3, #15
 801032e:	e006      	b.n	801033e <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8010330:	4b37      	ldr	r3, [pc, #220]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 8010332:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010336:	041b      	lsls	r3, r3, #16
 8010338:	0e1b      	lsrs	r3, r3, #24
 801033a:	f003 030f 	and.w	r3, r3, #15
 801033e:	4a36      	ldr	r2, [pc, #216]	; (8010418 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8010340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010344:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010346:	e268      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 8010348:	2300      	movs	r3, #0
 801034a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801034c:	e265      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 801034e:	2300      	movs	r3, #0
 8010350:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010352:	e262      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8010354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010358:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 801035c:	430b      	orrs	r3, r1
 801035e:	d15d      	bne.n	801041c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8010360:	4b2b      	ldr	r3, [pc, #172]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 8010362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010366:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801036a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 801036c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801036e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010372:	d028      	beq.n	80103c6 <HAL_RCCEx_GetPeriphCLKFreq+0x129e>
 8010374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010376:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801037a:	d845      	bhi.n	8010408 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
 801037c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801037e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010382:	d013      	beq.n	80103ac <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
 8010384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010386:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801038a:	d83d      	bhi.n	8010408 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
 801038c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801038e:	2b00      	cmp	r3, #0
 8010390:	d004      	beq.n	801039c <HAL_RCCEx_GetPeriphCLKFreq+0x1274>
 8010392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010398:	d004      	beq.n	80103a4 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>
 801039a:	e035      	b.n	8010408 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 801039c:	f7fd fa5a 	bl	800d854 <HAL_RCC_GetPCLK1Freq>
 80103a0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80103a2:	e23a      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80103a4:	f7fd f934 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 80103a8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80103aa:	e236      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80103ac:	4b18      	ldr	r3, [pc, #96]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80103b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80103b8:	d102      	bne.n	80103c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
        {
          frequency = HSI_VALUE;
 80103ba:	4b16      	ldr	r3, [pc, #88]	; (8010414 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80103bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80103be:	e22c      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 80103c0:	2300      	movs	r3, #0
 80103c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80103c4:	e229      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80103c6:	4b12      	ldr	r3, [pc, #72]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	f003 0320 	and.w	r3, r3, #32
 80103ce:	2b20      	cmp	r3, #32
 80103d0:	d117      	bne.n	8010402 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80103d2:	4b0f      	ldr	r3, [pc, #60]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 80103d4:	689b      	ldr	r3, [r3, #8]
 80103d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d005      	beq.n	80103ea <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 80103de:	4b0c      	ldr	r3, [pc, #48]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 80103e0:	689b      	ldr	r3, [r3, #8]
 80103e2:	0e1b      	lsrs	r3, r3, #24
 80103e4:	f003 030f 	and.w	r3, r3, #15
 80103e8:	e006      	b.n	80103f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
 80103ea:	4b09      	ldr	r3, [pc, #36]	; (8010410 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 80103ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80103f0:	041b      	lsls	r3, r3, #16
 80103f2:	0e1b      	lsrs	r3, r3, #24
 80103f4:	f003 030f 	and.w	r3, r3, #15
 80103f8:	4a07      	ldr	r2, [pc, #28]	; (8010418 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80103fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103fe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010400:	e20b      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 8010402:	2300      	movs	r3, #0
 8010404:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010406:	e208      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 8010408:	2300      	movs	r3, #0
 801040a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801040c:	e205      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 801040e:	bf00      	nop
 8010410:	46020c00 	.word	0x46020c00
 8010414:	00f42400 	.word	0x00f42400
 8010418:	0802bd94 	.word	0x0802bd94
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 801041c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010420:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8010424:	430b      	orrs	r3, r1
 8010426:	d176      	bne.n	8010516 <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8010428:	4ba6      	ldr	r3, [pc, #664]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 801042a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801042e:	f003 0318 	and.w	r3, r3, #24
 8010432:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8010434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010436:	2b18      	cmp	r3, #24
 8010438:	d86a      	bhi.n	8010510 <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 801043a:	a201      	add	r2, pc, #4	; (adr r2, 8010440 <HAL_RCCEx_GetPeriphCLKFreq+0x1318>)
 801043c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010440:	080104a5 	.word	0x080104a5
 8010444:	08010511 	.word	0x08010511
 8010448:	08010511 	.word	0x08010511
 801044c:	08010511 	.word	0x08010511
 8010450:	08010511 	.word	0x08010511
 8010454:	08010511 	.word	0x08010511
 8010458:	08010511 	.word	0x08010511
 801045c:	08010511 	.word	0x08010511
 8010460:	080104ad 	.word	0x080104ad
 8010464:	08010511 	.word	0x08010511
 8010468:	08010511 	.word	0x08010511
 801046c:	08010511 	.word	0x08010511
 8010470:	08010511 	.word	0x08010511
 8010474:	08010511 	.word	0x08010511
 8010478:	08010511 	.word	0x08010511
 801047c:	08010511 	.word	0x08010511
 8010480:	080104b5 	.word	0x080104b5
 8010484:	08010511 	.word	0x08010511
 8010488:	08010511 	.word	0x08010511
 801048c:	08010511 	.word	0x08010511
 8010490:	08010511 	.word	0x08010511
 8010494:	08010511 	.word	0x08010511
 8010498:	08010511 	.word	0x08010511
 801049c:	08010511 	.word	0x08010511
 80104a0:	080104cf 	.word	0x080104cf
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80104a4:	f7fd f9fe 	bl	800d8a4 <HAL_RCC_GetPCLK3Freq>
 80104a8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80104aa:	e1b6      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80104ac:	f7fd f8b0 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 80104b0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80104b2:	e1b2      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80104b4:	4b83      	ldr	r3, [pc, #524]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80104bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80104c0:	d102      	bne.n	80104c8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 80104c2:	4b81      	ldr	r3, [pc, #516]	; (80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15a0>)
 80104c4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80104c6:	e1a8      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 80104c8:	2300      	movs	r3, #0
 80104ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80104cc:	e1a5      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80104ce:	4b7d      	ldr	r3, [pc, #500]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	f003 0320 	and.w	r3, r3, #32
 80104d6:	2b20      	cmp	r3, #32
 80104d8:	d117      	bne.n	801050a <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80104da:	4b7a      	ldr	r3, [pc, #488]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 80104dc:	689b      	ldr	r3, [r3, #8]
 80104de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d005      	beq.n	80104f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 80104e6:	4b77      	ldr	r3, [pc, #476]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 80104e8:	689b      	ldr	r3, [r3, #8]
 80104ea:	0e1b      	lsrs	r3, r3, #24
 80104ec:	f003 030f 	and.w	r3, r3, #15
 80104f0:	e006      	b.n	8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 80104f2:	4b74      	ldr	r3, [pc, #464]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 80104f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80104f8:	041b      	lsls	r3, r3, #16
 80104fa:	0e1b      	lsrs	r3, r3, #24
 80104fc:	f003 030f 	and.w	r3, r3, #15
 8010500:	4a72      	ldr	r2, [pc, #456]	; (80106cc <HAL_RCCEx_GetPeriphCLKFreq+0x15a4>)
 8010502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010506:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010508:	e187      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 801050a:	2300      	movs	r3, #0
 801050c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801050e:	e184      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 8010510:	2300      	movs	r3, #0
 8010512:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010514:	e181      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8010516:	e9d7 2300 	ldrd	r2, r3, [r7]
 801051a:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 801051e:	430b      	orrs	r3, r1
 8010520:	d155      	bne.n	80105ce <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8010522:	4b68      	ldr	r3, [pc, #416]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 8010524:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010528:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 801052c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 801052e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010530:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010534:	d013      	beq.n	801055e <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 8010536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010538:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801053c:	d844      	bhi.n	80105c8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 801053e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010540:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010544:	d013      	beq.n	801056e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 8010546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010548:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801054c:	d83c      	bhi.n	80105c8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 801054e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010550:	2b00      	cmp	r3, #0
 8010552:	d014      	beq.n	801057e <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8010554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801055a:	d014      	beq.n	8010586 <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 801055c:	e034      	b.n	80105c8 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801055e:	f107 0318 	add.w	r3, r7, #24
 8010562:	4618      	mov	r0, r3
 8010564:	f7fe fb10 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801056c:	e155      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801056e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010572:	4618      	mov	r0, r3
 8010574:	f7fe f9a0 	bl	800e8b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8010578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801057a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801057c:	e14d      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 801057e:	f7fd f847 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 8010582:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8010584:	e149      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8010586:	4b4f      	ldr	r3, [pc, #316]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f003 0320 	and.w	r3, r3, #32
 801058e:	2b20      	cmp	r3, #32
 8010590:	d117      	bne.n	80105c2 <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010592:	4b4c      	ldr	r3, [pc, #304]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 8010594:	689b      	ldr	r3, [r3, #8]
 8010596:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801059a:	2b00      	cmp	r3, #0
 801059c:	d005      	beq.n	80105aa <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 801059e:	4b49      	ldr	r3, [pc, #292]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 80105a0:	689b      	ldr	r3, [r3, #8]
 80105a2:	0e1b      	lsrs	r3, r3, #24
 80105a4:	f003 030f 	and.w	r3, r3, #15
 80105a8:	e006      	b.n	80105b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 80105aa:	4b46      	ldr	r3, [pc, #280]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 80105ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80105b0:	041b      	lsls	r3, r3, #16
 80105b2:	0e1b      	lsrs	r3, r3, #24
 80105b4:	f003 030f 	and.w	r3, r3, #15
 80105b8:	4a44      	ldr	r2, [pc, #272]	; (80106cc <HAL_RCCEx_GetPeriphCLKFreq+0x15a4>)
 80105ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105be:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80105c0:	e12b      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 80105c2:	2300      	movs	r3, #0
 80105c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80105c6:	e128      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 80105c8:	2300      	movs	r3, #0
 80105ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80105cc:	e125      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 80105ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105d2:	1e59      	subs	r1, r3, #1
 80105d4:	ea52 0301 	orrs.w	r3, r2, r1
 80105d8:	d13c      	bne.n	8010654 <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 80105da:	4b3a      	ldr	r3, [pc, #232]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 80105dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80105e0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80105e4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80105e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80105ec:	d027      	beq.n	801063e <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80105ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80105f4:	d82b      	bhi.n	801064e <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 80105f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80105fc:	d017      	beq.n	801062e <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 80105fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010600:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010604:	d823      	bhi.n	801064e <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 8010606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010608:	2b00      	cmp	r3, #0
 801060a:	d004      	beq.n	8010616 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 801060c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801060e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010612:	d004      	beq.n	801061e <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 8010614:	e01b      	b.n	801064e <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8010616:	f7fc fffb 	bl	800d610 <HAL_RCC_GetSysClockFreq>
 801061a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 801061c:	e0fd      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801061e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010622:	4618      	mov	r0, r3
 8010624:	f7fe f948 	bl	800e8b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8010628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801062a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801062c:	e0f5      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801062e:	f107 0318 	add.w	r3, r7, #24
 8010632:	4618      	mov	r0, r3
 8010634:	f7fe faa8 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8010638:	69fb      	ldr	r3, [r7, #28]
 801063a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801063c:	e0ed      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801063e:	f107 030c 	add.w	r3, r7, #12
 8010642:	4618      	mov	r0, r3
 8010644:	f7fe fc08 	bl	800ee58 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8010648:	697b      	ldr	r3, [r7, #20]
 801064a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801064c:	e0e5      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 801064e:	2300      	movs	r3, #0
 8010650:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010652:	e0e2      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8010654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010658:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 801065c:	430b      	orrs	r3, r1
 801065e:	d137      	bne.n	80106d0 <HAL_RCCEx_GetPeriphCLKFreq+0x15a8>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8010660:	4b18      	ldr	r3, [pc, #96]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 8010662:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8010666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801066a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 801066c:	4b15      	ldr	r3, [pc, #84]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 801066e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8010672:	f003 0302 	and.w	r3, r3, #2
 8010676:	2b02      	cmp	r3, #2
 8010678:	d106      	bne.n	8010688 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 801067a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801067c:	2b00      	cmp	r3, #0
 801067e:	d103      	bne.n	8010688 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 8010680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010684:	637b      	str	r3, [r7, #52]	; 0x34
 8010686:	e0c8      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8010688:	4b0e      	ldr	r3, [pc, #56]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 801068a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801068e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010696:	d112      	bne.n	80106be <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 8010698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801069a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801069e:	d10e      	bne.n	80106be <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80106a0:	4b08      	ldr	r3, [pc, #32]	; (80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 80106a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80106a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80106aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80106ae:	d102      	bne.n	80106b6 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 80106b0:	23fa      	movs	r3, #250	; 0xfa
 80106b2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80106b4:	e0b1      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 80106b6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80106ba:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80106bc:	e0ad      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80106be:	2300      	movs	r3, #0
 80106c0:	637b      	str	r3, [r7, #52]	; 0x34
 80106c2:	e0aa      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 80106c4:	46020c00 	.word	0x46020c00
 80106c8:	00f42400 	.word	0x00f42400
 80106cc:	0802bd94 	.word	0x0802bd94
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80106d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106d4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80106d8:	430b      	orrs	r3, r1
 80106da:	d131      	bne.n	8010740 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80106dc:	4b51      	ldr	r3, [pc, #324]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 80106de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80106e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80106e6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80106e8:	4b4e      	ldr	r3, [pc, #312]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80106f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80106f4:	d105      	bne.n	8010702 <HAL_RCCEx_GetPeriphCLKFreq+0x15da>
 80106f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d102      	bne.n	8010702 <HAL_RCCEx_GetPeriphCLKFreq+0x15da>
    {
      frequency = HSI48_VALUE;
 80106fc:	4b4a      	ldr	r3, [pc, #296]	; (8010828 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 80106fe:	637b      	str	r3, [r7, #52]	; 0x34
 8010700:	e08b      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8010702:	4b48      	ldr	r3, [pc, #288]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801070a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801070e:	d106      	bne.n	801071e <HAL_RCCEx_GetPeriphCLKFreq+0x15f6>
 8010710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010716:	d102      	bne.n	801071e <HAL_RCCEx_GetPeriphCLKFreq+0x15f6>
    {
      frequency = HSI48_VALUE >> 1U ;
 8010718:	4b44      	ldr	r3, [pc, #272]	; (801082c <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 801071a:	637b      	str	r3, [r7, #52]	; 0x34
 801071c:	e07d      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 801071e:	4b41      	ldr	r3, [pc, #260]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801072a:	d106      	bne.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
 801072c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801072e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010732:	d102      	bne.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
    {
      frequency = HSI_VALUE;
 8010734:	4b3e      	ldr	r3, [pc, #248]	; (8010830 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 8010736:	637b      	str	r3, [r7, #52]	; 0x34
 8010738:	e06f      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 801073a:	2300      	movs	r3, #0
 801073c:	637b      	str	r3, [r7, #52]	; 0x34
 801073e:	e06c      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 8010740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010744:	1e99      	subs	r1, r3, #2
 8010746:	ea52 0301 	orrs.w	r3, r2, r1
 801074a:	d120      	bne.n	801078e <HAL_RCCEx_GetPeriphCLKFreq+0x1666>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 801074c:	4b35      	ldr	r3, [pc, #212]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 801074e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010756:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8010758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801075a:	2b00      	cmp	r3, #0
 801075c:	d004      	beq.n	8010768 <HAL_RCCEx_GetPeriphCLKFreq+0x1640>
 801075e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010760:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010764:	d008      	beq.n	8010778 <HAL_RCCEx_GetPeriphCLKFreq+0x1650>
 8010766:	e00f      	b.n	8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x1660>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010768:	f107 030c 	add.w	r3, r7, #12
 801076c:	4618      	mov	r0, r3
 801076e:	f7fe fb73 	bl	800ee58 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010776:	e050      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010778:	f107 0318 	add.w	r3, r7, #24
 801077c:	4618      	mov	r0, r3
 801077e:	f7fe fa03 	bl	800eb88 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 8010782:	6a3b      	ldr	r3, [r7, #32]
 8010784:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010786:	e048      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 8010788:	2300      	movs	r3, #0
 801078a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801078c:	e045      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 801078e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010792:	f1a3 0108 	sub.w	r1, r3, #8
 8010796:	ea52 0301 	orrs.w	r3, r2, r1
 801079a:	d13c      	bne.n	8010816 <HAL_RCCEx_GetPeriphCLKFreq+0x16ee>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 801079c:	4b21      	ldr	r3, [pc, #132]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 801079e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80107a2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80107a6:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 80107a8:	4b1e      	ldr	r3, [pc, #120]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80107b4:	d105      	bne.n	80107c2 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
 80107b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d102      	bne.n	80107c2 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      frequency = HSE_VALUE;
 80107bc:	4b1c      	ldr	r3, [pc, #112]	; (8010830 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 80107be:	637b      	str	r3, [r7, #52]	; 0x34
 80107c0:	e02b      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 80107c2:	4b18      	ldr	r3, [pc, #96]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80107ce:	d106      	bne.n	80107de <HAL_RCCEx_GetPeriphCLKFreq+0x16b6>
 80107d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80107d6:	d102      	bne.n	80107de <HAL_RCCEx_GetPeriphCLKFreq+0x16b6>
    {
      frequency = HSE_VALUE >> 1U ;
 80107d8:	4b16      	ldr	r3, [pc, #88]	; (8010834 <HAL_RCCEx_GetPeriphCLKFreq+0x170c>)
 80107da:	637b      	str	r3, [r7, #52]	; 0x34
 80107dc:	e01d      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 80107de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80107e4:	d107      	bne.n	80107f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16ce>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80107e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fe f864 	bl	800e8b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80107f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f2:	637b      	str	r3, [r7, #52]	; 0x34
 80107f4:	e011      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 80107f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80107fc:	d108      	bne.n	8010810 <HAL_RCCEx_GetPeriphCLKFreq+0x16e8>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80107fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010802:	4618      	mov	r0, r3
 8010804:	f7fe f858 	bl	800e8b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8010808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801080a:	085b      	lsrs	r3, r3, #1
 801080c:	637b      	str	r3, [r7, #52]	; 0x34
 801080e:	e004      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8010810:	2300      	movs	r3, #0
 8010812:	637b      	str	r3, [r7, #52]	; 0x34
 8010814:	e001      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8010816:	2300      	movs	r3, #0
 8010818:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 801081a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801081c:	4618      	mov	r0, r3
 801081e:	3738      	adds	r7, #56	; 0x38
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}
 8010824:	46020c00 	.word	0x46020c00
 8010828:	02dc6c00 	.word	0x02dc6c00
 801082c:	016e3600 	.word	0x016e3600
 8010830:	00f42400 	.word	0x00f42400
 8010834:	007a1200 	.word	0x007a1200

08010838 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b084      	sub	sp, #16
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8010840:	4b47      	ldr	r3, [pc, #284]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	4a46      	ldr	r2, [pc, #280]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 8010846:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801084a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801084c:	f7f7 f9b6 	bl	8007bbc <HAL_GetTick>
 8010850:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010852:	e008      	b.n	8010866 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010854:	f7f7 f9b2 	bl	8007bbc <HAL_GetTick>
 8010858:	4602      	mov	r2, r0
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	1ad3      	subs	r3, r2, r3
 801085e:	2b02      	cmp	r3, #2
 8010860:	d901      	bls.n	8010866 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8010862:	2303      	movs	r3, #3
 8010864:	e077      	b.n	8010956 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010866:	4b3e      	ldr	r3, [pc, #248]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801086e:	2b00      	cmp	r3, #0
 8010870:	d1f0      	bne.n	8010854 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8010872:	4b3b      	ldr	r3, [pc, #236]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 8010874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010876:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801087a:	f023 0303 	bic.w	r3, r3, #3
 801087e:	687a      	ldr	r2, [r7, #4]
 8010880:	6811      	ldr	r1, [r2, #0]
 8010882:	687a      	ldr	r2, [r7, #4]
 8010884:	6852      	ldr	r2, [r2, #4]
 8010886:	3a01      	subs	r2, #1
 8010888:	0212      	lsls	r2, r2, #8
 801088a:	430a      	orrs	r2, r1
 801088c:	4934      	ldr	r1, [pc, #208]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 801088e:	4313      	orrs	r3, r2
 8010890:	62cb      	str	r3, [r1, #44]	; 0x2c
 8010892:	4b33      	ldr	r3, [pc, #204]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 8010894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010896:	4b33      	ldr	r3, [pc, #204]	; (8010964 <RCCEx_PLL2_Config+0x12c>)
 8010898:	4013      	ands	r3, r2
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	6892      	ldr	r2, [r2, #8]
 801089e:	3a01      	subs	r2, #1
 80108a0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80108a4:	687a      	ldr	r2, [r7, #4]
 80108a6:	68d2      	ldr	r2, [r2, #12]
 80108a8:	3a01      	subs	r2, #1
 80108aa:	0252      	lsls	r2, r2, #9
 80108ac:	b292      	uxth	r2, r2
 80108ae:	4311      	orrs	r1, r2
 80108b0:	687a      	ldr	r2, [r7, #4]
 80108b2:	6912      	ldr	r2, [r2, #16]
 80108b4:	3a01      	subs	r2, #1
 80108b6:	0412      	lsls	r2, r2, #16
 80108b8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80108bc:	4311      	orrs	r1, r2
 80108be:	687a      	ldr	r2, [r7, #4]
 80108c0:	6952      	ldr	r2, [r2, #20]
 80108c2:	3a01      	subs	r2, #1
 80108c4:	0612      	lsls	r2, r2, #24
 80108c6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80108ca:	430a      	orrs	r2, r1
 80108cc:	4924      	ldr	r1, [pc, #144]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 80108ce:	4313      	orrs	r3, r2
 80108d0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80108d2:	4b23      	ldr	r3, [pc, #140]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 80108d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108d6:	f023 020c 	bic.w	r2, r3, #12
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	699b      	ldr	r3, [r3, #24]
 80108de:	4920      	ldr	r1, [pc, #128]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 80108e0:	4313      	orrs	r3, r2
 80108e2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80108e4:	4b1e      	ldr	r3, [pc, #120]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 80108e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6a1b      	ldr	r3, [r3, #32]
 80108ec:	491c      	ldr	r1, [pc, #112]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 80108ee:	4313      	orrs	r3, r2
 80108f0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80108f2:	4b1b      	ldr	r3, [pc, #108]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 80108f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108f6:	4a1a      	ldr	r2, [pc, #104]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 80108f8:	f023 0310 	bic.w	r3, r3, #16
 80108fc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80108fe:	4b18      	ldr	r3, [pc, #96]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 8010900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010906:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801090a:	687a      	ldr	r2, [r7, #4]
 801090c:	69d2      	ldr	r2, [r2, #28]
 801090e:	00d2      	lsls	r2, r2, #3
 8010910:	4913      	ldr	r1, [pc, #76]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 8010912:	4313      	orrs	r3, r2
 8010914:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8010916:	4b12      	ldr	r3, [pc, #72]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 8010918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801091a:	4a11      	ldr	r2, [pc, #68]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 801091c:	f043 0310 	orr.w	r3, r3, #16
 8010920:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8010922:	4b0f      	ldr	r3, [pc, #60]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	4a0e      	ldr	r2, [pc, #56]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 8010928:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801092c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801092e:	f7f7 f945 	bl	8007bbc <HAL_GetTick>
 8010932:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010934:	e008      	b.n	8010948 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010936:	f7f7 f941 	bl	8007bbc <HAL_GetTick>
 801093a:	4602      	mov	r2, r0
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	1ad3      	subs	r3, r2, r3
 8010940:	2b02      	cmp	r3, #2
 8010942:	d901      	bls.n	8010948 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8010944:	2303      	movs	r3, #3
 8010946:	e006      	b.n	8010956 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010948:	4b05      	ldr	r3, [pc, #20]	; (8010960 <RCCEx_PLL2_Config+0x128>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010950:	2b00      	cmp	r3, #0
 8010952:	d0f0      	beq.n	8010936 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8010954:	2300      	movs	r3, #0

}
 8010956:	4618      	mov	r0, r3
 8010958:	3710      	adds	r7, #16
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
 801095e:	bf00      	nop
 8010960:	46020c00 	.word	0x46020c00
 8010964:	80800000 	.word	0x80800000

08010968 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b084      	sub	sp, #16
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8010970:	4b47      	ldr	r3, [pc, #284]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	4a46      	ldr	r2, [pc, #280]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 8010976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801097a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801097c:	f7f7 f91e 	bl	8007bbc <HAL_GetTick>
 8010980:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010982:	e008      	b.n	8010996 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010984:	f7f7 f91a 	bl	8007bbc <HAL_GetTick>
 8010988:	4602      	mov	r2, r0
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	1ad3      	subs	r3, r2, r3
 801098e:	2b02      	cmp	r3, #2
 8010990:	d901      	bls.n	8010996 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8010992:	2303      	movs	r3, #3
 8010994:	e077      	b.n	8010a86 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010996:	4b3e      	ldr	r3, [pc, #248]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d1f0      	bne.n	8010984 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80109a2:	4b3b      	ldr	r3, [pc, #236]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 80109a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80109aa:	f023 0303 	bic.w	r3, r3, #3
 80109ae:	687a      	ldr	r2, [r7, #4]
 80109b0:	6811      	ldr	r1, [r2, #0]
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	6852      	ldr	r2, [r2, #4]
 80109b6:	3a01      	subs	r2, #1
 80109b8:	0212      	lsls	r2, r2, #8
 80109ba:	430a      	orrs	r2, r1
 80109bc:	4934      	ldr	r1, [pc, #208]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 80109be:	4313      	orrs	r3, r2
 80109c0:	630b      	str	r3, [r1, #48]	; 0x30
 80109c2:	4b33      	ldr	r3, [pc, #204]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 80109c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80109c6:	4b33      	ldr	r3, [pc, #204]	; (8010a94 <RCCEx_PLL3_Config+0x12c>)
 80109c8:	4013      	ands	r3, r2
 80109ca:	687a      	ldr	r2, [r7, #4]
 80109cc:	6892      	ldr	r2, [r2, #8]
 80109ce:	3a01      	subs	r2, #1
 80109d0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80109d4:	687a      	ldr	r2, [r7, #4]
 80109d6:	68d2      	ldr	r2, [r2, #12]
 80109d8:	3a01      	subs	r2, #1
 80109da:	0252      	lsls	r2, r2, #9
 80109dc:	b292      	uxth	r2, r2
 80109de:	4311      	orrs	r1, r2
 80109e0:	687a      	ldr	r2, [r7, #4]
 80109e2:	6912      	ldr	r2, [r2, #16]
 80109e4:	3a01      	subs	r2, #1
 80109e6:	0412      	lsls	r2, r2, #16
 80109e8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80109ec:	4311      	orrs	r1, r2
 80109ee:	687a      	ldr	r2, [r7, #4]
 80109f0:	6952      	ldr	r2, [r2, #20]
 80109f2:	3a01      	subs	r2, #1
 80109f4:	0612      	lsls	r2, r2, #24
 80109f6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80109fa:	430a      	orrs	r2, r1
 80109fc:	4924      	ldr	r1, [pc, #144]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 80109fe:	4313      	orrs	r3, r2
 8010a00:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8010a02:	4b23      	ldr	r3, [pc, #140]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 8010a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a06:	f023 020c 	bic.w	r2, r3, #12
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	699b      	ldr	r3, [r3, #24]
 8010a0e:	4920      	ldr	r1, [pc, #128]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 8010a10:	4313      	orrs	r3, r2
 8010a12:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8010a14:	4b1e      	ldr	r3, [pc, #120]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 8010a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6a1b      	ldr	r3, [r3, #32]
 8010a1c:	491c      	ldr	r1, [pc, #112]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8010a22:	4b1b      	ldr	r3, [pc, #108]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 8010a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a26:	4a1a      	ldr	r2, [pc, #104]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 8010a28:	f023 0310 	bic.w	r3, r3, #16
 8010a2c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010a2e:	4b18      	ldr	r3, [pc, #96]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 8010a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010a36:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8010a3a:	687a      	ldr	r2, [r7, #4]
 8010a3c:	69d2      	ldr	r2, [r2, #28]
 8010a3e:	00d2      	lsls	r2, r2, #3
 8010a40:	4913      	ldr	r1, [pc, #76]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 8010a42:	4313      	orrs	r3, r2
 8010a44:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8010a46:	4b12      	ldr	r3, [pc, #72]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 8010a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a4a:	4a11      	ldr	r2, [pc, #68]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 8010a4c:	f043 0310 	orr.w	r3, r3, #16
 8010a50:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8010a52:	4b0f      	ldr	r3, [pc, #60]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	4a0e      	ldr	r2, [pc, #56]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 8010a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a5c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010a5e:	f7f7 f8ad 	bl	8007bbc <HAL_GetTick>
 8010a62:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010a64:	e008      	b.n	8010a78 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010a66:	f7f7 f8a9 	bl	8007bbc <HAL_GetTick>
 8010a6a:	4602      	mov	r2, r0
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	1ad3      	subs	r3, r2, r3
 8010a70:	2b02      	cmp	r3, #2
 8010a72:	d901      	bls.n	8010a78 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8010a74:	2303      	movs	r3, #3
 8010a76:	e006      	b.n	8010a86 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010a78:	4b05      	ldr	r3, [pc, #20]	; (8010a90 <RCCEx_PLL3_Config+0x128>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d0f0      	beq.n	8010a66 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8010a84:	2300      	movs	r3, #0
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3710      	adds	r7, #16
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}
 8010a8e:	bf00      	nop
 8010a90:	46020c00 	.word	0x46020c00
 8010a94:	80800000 	.word	0x80800000

08010a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b082      	sub	sp, #8
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d101      	bne.n	8010aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	e049      	b.n	8010b3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010ab0:	b2db      	uxtb	r3, r3
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d106      	bne.n	8010ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f7f1 f9e6 	bl	8001e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2202      	movs	r2, #2
 8010ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681a      	ldr	r2, [r3, #0]
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	3304      	adds	r3, #4
 8010ad4:	4619      	mov	r1, r3
 8010ad6:	4610      	mov	r0, r2
 8010ad8:	f000 fe48 	bl	801176c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2201      	movs	r2, #1
 8010ae0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2201      	movs	r2, #1
 8010af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2201      	movs	r2, #1
 8010af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2201      	movs	r2, #1
 8010b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2201      	movs	r2, #1
 8010b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2201      	movs	r2, #1
 8010b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2201      	movs	r2, #1
 8010b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2201      	movs	r2, #1
 8010b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2201      	movs	r2, #1
 8010b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2201      	movs	r2, #1
 8010b30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2201      	movs	r2, #1
 8010b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010b3c:	2300      	movs	r3, #0
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3708      	adds	r7, #8
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
	...

08010b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010b48:	b480      	push	{r7}
 8010b4a:	b085      	sub	sp, #20
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010b56:	b2db      	uxtb	r3, r3
 8010b58:	2b01      	cmp	r3, #1
 8010b5a:	d001      	beq.n	8010b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	e072      	b.n	8010c46 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2202      	movs	r2, #2
 8010b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	68da      	ldr	r2, [r3, #12]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	f042 0201 	orr.w	r2, r2, #1
 8010b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	4a35      	ldr	r2, [pc, #212]	; (8010c54 <HAL_TIM_Base_Start_IT+0x10c>)
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	d040      	beq.n	8010c04 <HAL_TIM_Base_Start_IT+0xbc>
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	4a34      	ldr	r2, [pc, #208]	; (8010c58 <HAL_TIM_Base_Start_IT+0x110>)
 8010b88:	4293      	cmp	r3, r2
 8010b8a:	d03b      	beq.n	8010c04 <HAL_TIM_Base_Start_IT+0xbc>
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b94:	d036      	beq.n	8010c04 <HAL_TIM_Base_Start_IT+0xbc>
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010b9e:	d031      	beq.n	8010c04 <HAL_TIM_Base_Start_IT+0xbc>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	4a2d      	ldr	r2, [pc, #180]	; (8010c5c <HAL_TIM_Base_Start_IT+0x114>)
 8010ba6:	4293      	cmp	r3, r2
 8010ba8:	d02c      	beq.n	8010c04 <HAL_TIM_Base_Start_IT+0xbc>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	4a2c      	ldr	r2, [pc, #176]	; (8010c60 <HAL_TIM_Base_Start_IT+0x118>)
 8010bb0:	4293      	cmp	r3, r2
 8010bb2:	d027      	beq.n	8010c04 <HAL_TIM_Base_Start_IT+0xbc>
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	4a2a      	ldr	r2, [pc, #168]	; (8010c64 <HAL_TIM_Base_Start_IT+0x11c>)
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	d022      	beq.n	8010c04 <HAL_TIM_Base_Start_IT+0xbc>
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	4a29      	ldr	r2, [pc, #164]	; (8010c68 <HAL_TIM_Base_Start_IT+0x120>)
 8010bc4:	4293      	cmp	r3, r2
 8010bc6:	d01d      	beq.n	8010c04 <HAL_TIM_Base_Start_IT+0xbc>
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	4a27      	ldr	r2, [pc, #156]	; (8010c6c <HAL_TIM_Base_Start_IT+0x124>)
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	d018      	beq.n	8010c04 <HAL_TIM_Base_Start_IT+0xbc>
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	4a26      	ldr	r2, [pc, #152]	; (8010c70 <HAL_TIM_Base_Start_IT+0x128>)
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d013      	beq.n	8010c04 <HAL_TIM_Base_Start_IT+0xbc>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	4a24      	ldr	r2, [pc, #144]	; (8010c74 <HAL_TIM_Base_Start_IT+0x12c>)
 8010be2:	4293      	cmp	r3, r2
 8010be4:	d00e      	beq.n	8010c04 <HAL_TIM_Base_Start_IT+0xbc>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	4a23      	ldr	r2, [pc, #140]	; (8010c78 <HAL_TIM_Base_Start_IT+0x130>)
 8010bec:	4293      	cmp	r3, r2
 8010bee:	d009      	beq.n	8010c04 <HAL_TIM_Base_Start_IT+0xbc>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	4a21      	ldr	r2, [pc, #132]	; (8010c7c <HAL_TIM_Base_Start_IT+0x134>)
 8010bf6:	4293      	cmp	r3, r2
 8010bf8:	d004      	beq.n	8010c04 <HAL_TIM_Base_Start_IT+0xbc>
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	4a20      	ldr	r2, [pc, #128]	; (8010c80 <HAL_TIM_Base_Start_IT+0x138>)
 8010c00:	4293      	cmp	r3, r2
 8010c02:	d115      	bne.n	8010c30 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	689a      	ldr	r2, [r3, #8]
 8010c0a:	4b1e      	ldr	r3, [pc, #120]	; (8010c84 <HAL_TIM_Base_Start_IT+0x13c>)
 8010c0c:	4013      	ands	r3, r2
 8010c0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	2b06      	cmp	r3, #6
 8010c14:	d015      	beq.n	8010c42 <HAL_TIM_Base_Start_IT+0xfa>
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c1c:	d011      	beq.n	8010c42 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	681a      	ldr	r2, [r3, #0]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	f042 0201 	orr.w	r2, r2, #1
 8010c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c2e:	e008      	b.n	8010c42 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	681a      	ldr	r2, [r3, #0]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	f042 0201 	orr.w	r2, r2, #1
 8010c3e:	601a      	str	r2, [r3, #0]
 8010c40:	e000      	b.n	8010c44 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010c44:	2300      	movs	r3, #0
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3714      	adds	r7, #20
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop
 8010c54:	40012c00 	.word	0x40012c00
 8010c58:	50012c00 	.word	0x50012c00
 8010c5c:	40000400 	.word	0x40000400
 8010c60:	50000400 	.word	0x50000400
 8010c64:	40000800 	.word	0x40000800
 8010c68:	50000800 	.word	0x50000800
 8010c6c:	40000c00 	.word	0x40000c00
 8010c70:	50000c00 	.word	0x50000c00
 8010c74:	40013400 	.word	0x40013400
 8010c78:	50013400 	.word	0x50013400
 8010c7c:	40014000 	.word	0x40014000
 8010c80:	50014000 	.word	0x50014000
 8010c84:	00010007 	.word	0x00010007

08010c88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b082      	sub	sp, #8
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d101      	bne.n	8010c9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010c96:	2301      	movs	r3, #1
 8010c98:	e049      	b.n	8010d2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010ca0:	b2db      	uxtb	r3, r3
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d106      	bne.n	8010cb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	2200      	movs	r2, #0
 8010caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f000 f841 	bl	8010d36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2202      	movs	r2, #2
 8010cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681a      	ldr	r2, [r3, #0]
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	3304      	adds	r3, #4
 8010cc4:	4619      	mov	r1, r3
 8010cc6:	4610      	mov	r0, r2
 8010cc8:	f000 fd50 	bl	801176c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2201      	movs	r2, #1
 8010cd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2201      	movs	r2, #1
 8010cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2201      	movs	r2, #1
 8010ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2201      	movs	r2, #1
 8010ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2201      	movs	r2, #1
 8010cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2201      	movs	r2, #1
 8010cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2201      	movs	r2, #1
 8010d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2201      	movs	r2, #1
 8010d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2201      	movs	r2, #1
 8010d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2201      	movs	r2, #1
 8010d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2201      	movs	r2, #1
 8010d20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2201      	movs	r2, #1
 8010d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010d2c:	2300      	movs	r3, #0
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3708      	adds	r7, #8
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}

08010d36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010d36:	b480      	push	{r7}
 8010d38:	b083      	sub	sp, #12
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010d3e:	bf00      	nop
 8010d40:	370c      	adds	r7, #12
 8010d42:	46bd      	mov	sp, r7
 8010d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d48:	4770      	bx	lr
	...

08010d4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b084      	sub	sp, #16
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
 8010d54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d109      	bne.n	8010d70 <HAL_TIM_PWM_Start+0x24>
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010d62:	b2db      	uxtb	r3, r3
 8010d64:	2b01      	cmp	r3, #1
 8010d66:	bf14      	ite	ne
 8010d68:	2301      	movne	r3, #1
 8010d6a:	2300      	moveq	r3, #0
 8010d6c:	b2db      	uxtb	r3, r3
 8010d6e:	e03c      	b.n	8010dea <HAL_TIM_PWM_Start+0x9e>
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	2b04      	cmp	r3, #4
 8010d74:	d109      	bne.n	8010d8a <HAL_TIM_PWM_Start+0x3e>
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010d7c:	b2db      	uxtb	r3, r3
 8010d7e:	2b01      	cmp	r3, #1
 8010d80:	bf14      	ite	ne
 8010d82:	2301      	movne	r3, #1
 8010d84:	2300      	moveq	r3, #0
 8010d86:	b2db      	uxtb	r3, r3
 8010d88:	e02f      	b.n	8010dea <HAL_TIM_PWM_Start+0x9e>
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	2b08      	cmp	r3, #8
 8010d8e:	d109      	bne.n	8010da4 <HAL_TIM_PWM_Start+0x58>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d96:	b2db      	uxtb	r3, r3
 8010d98:	2b01      	cmp	r3, #1
 8010d9a:	bf14      	ite	ne
 8010d9c:	2301      	movne	r3, #1
 8010d9e:	2300      	moveq	r3, #0
 8010da0:	b2db      	uxtb	r3, r3
 8010da2:	e022      	b.n	8010dea <HAL_TIM_PWM_Start+0x9e>
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	2b0c      	cmp	r3, #12
 8010da8:	d109      	bne.n	8010dbe <HAL_TIM_PWM_Start+0x72>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010db0:	b2db      	uxtb	r3, r3
 8010db2:	2b01      	cmp	r3, #1
 8010db4:	bf14      	ite	ne
 8010db6:	2301      	movne	r3, #1
 8010db8:	2300      	moveq	r3, #0
 8010dba:	b2db      	uxtb	r3, r3
 8010dbc:	e015      	b.n	8010dea <HAL_TIM_PWM_Start+0x9e>
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	2b10      	cmp	r3, #16
 8010dc2:	d109      	bne.n	8010dd8 <HAL_TIM_PWM_Start+0x8c>
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	2b01      	cmp	r3, #1
 8010dce:	bf14      	ite	ne
 8010dd0:	2301      	movne	r3, #1
 8010dd2:	2300      	moveq	r3, #0
 8010dd4:	b2db      	uxtb	r3, r3
 8010dd6:	e008      	b.n	8010dea <HAL_TIM_PWM_Start+0x9e>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010dde:	b2db      	uxtb	r3, r3
 8010de0:	2b01      	cmp	r3, #1
 8010de2:	bf14      	ite	ne
 8010de4:	2301      	movne	r3, #1
 8010de6:	2300      	moveq	r3, #0
 8010de8:	b2db      	uxtb	r3, r3
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d001      	beq.n	8010df2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010dee:	2301      	movs	r3, #1
 8010df0:	e0d8      	b.n	8010fa4 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d104      	bne.n	8010e02 <HAL_TIM_PWM_Start+0xb6>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2202      	movs	r2, #2
 8010dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010e00:	e023      	b.n	8010e4a <HAL_TIM_PWM_Start+0xfe>
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	2b04      	cmp	r3, #4
 8010e06:	d104      	bne.n	8010e12 <HAL_TIM_PWM_Start+0xc6>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2202      	movs	r2, #2
 8010e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010e10:	e01b      	b.n	8010e4a <HAL_TIM_PWM_Start+0xfe>
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	2b08      	cmp	r3, #8
 8010e16:	d104      	bne.n	8010e22 <HAL_TIM_PWM_Start+0xd6>
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2202      	movs	r2, #2
 8010e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010e20:	e013      	b.n	8010e4a <HAL_TIM_PWM_Start+0xfe>
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	2b0c      	cmp	r3, #12
 8010e26:	d104      	bne.n	8010e32 <HAL_TIM_PWM_Start+0xe6>
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2202      	movs	r2, #2
 8010e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010e30:	e00b      	b.n	8010e4a <HAL_TIM_PWM_Start+0xfe>
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	2b10      	cmp	r3, #16
 8010e36:	d104      	bne.n	8010e42 <HAL_TIM_PWM_Start+0xf6>
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2202      	movs	r2, #2
 8010e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010e40:	e003      	b.n	8010e4a <HAL_TIM_PWM_Start+0xfe>
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2202      	movs	r2, #2
 8010e46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	2201      	movs	r2, #1
 8010e50:	6839      	ldr	r1, [r7, #0]
 8010e52:	4618      	mov	r0, r3
 8010e54:	f001 f9f6 	bl	8012244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	4a53      	ldr	r2, [pc, #332]	; (8010fac <HAL_TIM_PWM_Start+0x260>)
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d02c      	beq.n	8010ebc <HAL_TIM_PWM_Start+0x170>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	4a52      	ldr	r2, [pc, #328]	; (8010fb0 <HAL_TIM_PWM_Start+0x264>)
 8010e68:	4293      	cmp	r3, r2
 8010e6a:	d027      	beq.n	8010ebc <HAL_TIM_PWM_Start+0x170>
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	4a50      	ldr	r2, [pc, #320]	; (8010fb4 <HAL_TIM_PWM_Start+0x268>)
 8010e72:	4293      	cmp	r3, r2
 8010e74:	d022      	beq.n	8010ebc <HAL_TIM_PWM_Start+0x170>
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	4a4f      	ldr	r2, [pc, #316]	; (8010fb8 <HAL_TIM_PWM_Start+0x26c>)
 8010e7c:	4293      	cmp	r3, r2
 8010e7e:	d01d      	beq.n	8010ebc <HAL_TIM_PWM_Start+0x170>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	4a4d      	ldr	r2, [pc, #308]	; (8010fbc <HAL_TIM_PWM_Start+0x270>)
 8010e86:	4293      	cmp	r3, r2
 8010e88:	d018      	beq.n	8010ebc <HAL_TIM_PWM_Start+0x170>
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	4a4c      	ldr	r2, [pc, #304]	; (8010fc0 <HAL_TIM_PWM_Start+0x274>)
 8010e90:	4293      	cmp	r3, r2
 8010e92:	d013      	beq.n	8010ebc <HAL_TIM_PWM_Start+0x170>
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	4a4a      	ldr	r2, [pc, #296]	; (8010fc4 <HAL_TIM_PWM_Start+0x278>)
 8010e9a:	4293      	cmp	r3, r2
 8010e9c:	d00e      	beq.n	8010ebc <HAL_TIM_PWM_Start+0x170>
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	4a49      	ldr	r2, [pc, #292]	; (8010fc8 <HAL_TIM_PWM_Start+0x27c>)
 8010ea4:	4293      	cmp	r3, r2
 8010ea6:	d009      	beq.n	8010ebc <HAL_TIM_PWM_Start+0x170>
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	4a47      	ldr	r2, [pc, #284]	; (8010fcc <HAL_TIM_PWM_Start+0x280>)
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	d004      	beq.n	8010ebc <HAL_TIM_PWM_Start+0x170>
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	4a46      	ldr	r2, [pc, #280]	; (8010fd0 <HAL_TIM_PWM_Start+0x284>)
 8010eb8:	4293      	cmp	r3, r2
 8010eba:	d101      	bne.n	8010ec0 <HAL_TIM_PWM_Start+0x174>
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	e000      	b.n	8010ec2 <HAL_TIM_PWM_Start+0x176>
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d007      	beq.n	8010ed6 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010ed4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	4a34      	ldr	r2, [pc, #208]	; (8010fac <HAL_TIM_PWM_Start+0x260>)
 8010edc:	4293      	cmp	r3, r2
 8010ede:	d040      	beq.n	8010f62 <HAL_TIM_PWM_Start+0x216>
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	4a32      	ldr	r2, [pc, #200]	; (8010fb0 <HAL_TIM_PWM_Start+0x264>)
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	d03b      	beq.n	8010f62 <HAL_TIM_PWM_Start+0x216>
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010ef2:	d036      	beq.n	8010f62 <HAL_TIM_PWM_Start+0x216>
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010efc:	d031      	beq.n	8010f62 <HAL_TIM_PWM_Start+0x216>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	4a34      	ldr	r2, [pc, #208]	; (8010fd4 <HAL_TIM_PWM_Start+0x288>)
 8010f04:	4293      	cmp	r3, r2
 8010f06:	d02c      	beq.n	8010f62 <HAL_TIM_PWM_Start+0x216>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	4a32      	ldr	r2, [pc, #200]	; (8010fd8 <HAL_TIM_PWM_Start+0x28c>)
 8010f0e:	4293      	cmp	r3, r2
 8010f10:	d027      	beq.n	8010f62 <HAL_TIM_PWM_Start+0x216>
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4a31      	ldr	r2, [pc, #196]	; (8010fdc <HAL_TIM_PWM_Start+0x290>)
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	d022      	beq.n	8010f62 <HAL_TIM_PWM_Start+0x216>
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	4a2f      	ldr	r2, [pc, #188]	; (8010fe0 <HAL_TIM_PWM_Start+0x294>)
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d01d      	beq.n	8010f62 <HAL_TIM_PWM_Start+0x216>
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	4a2e      	ldr	r2, [pc, #184]	; (8010fe4 <HAL_TIM_PWM_Start+0x298>)
 8010f2c:	4293      	cmp	r3, r2
 8010f2e:	d018      	beq.n	8010f62 <HAL_TIM_PWM_Start+0x216>
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	4a2c      	ldr	r2, [pc, #176]	; (8010fe8 <HAL_TIM_PWM_Start+0x29c>)
 8010f36:	4293      	cmp	r3, r2
 8010f38:	d013      	beq.n	8010f62 <HAL_TIM_PWM_Start+0x216>
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	4a1d      	ldr	r2, [pc, #116]	; (8010fb4 <HAL_TIM_PWM_Start+0x268>)
 8010f40:	4293      	cmp	r3, r2
 8010f42:	d00e      	beq.n	8010f62 <HAL_TIM_PWM_Start+0x216>
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	4a1b      	ldr	r2, [pc, #108]	; (8010fb8 <HAL_TIM_PWM_Start+0x26c>)
 8010f4a:	4293      	cmp	r3, r2
 8010f4c:	d009      	beq.n	8010f62 <HAL_TIM_PWM_Start+0x216>
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	4a1a      	ldr	r2, [pc, #104]	; (8010fbc <HAL_TIM_PWM_Start+0x270>)
 8010f54:	4293      	cmp	r3, r2
 8010f56:	d004      	beq.n	8010f62 <HAL_TIM_PWM_Start+0x216>
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	4a18      	ldr	r2, [pc, #96]	; (8010fc0 <HAL_TIM_PWM_Start+0x274>)
 8010f5e:	4293      	cmp	r3, r2
 8010f60:	d115      	bne.n	8010f8e <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	689a      	ldr	r2, [r3, #8]
 8010f68:	4b20      	ldr	r3, [pc, #128]	; (8010fec <HAL_TIM_PWM_Start+0x2a0>)
 8010f6a:	4013      	ands	r3, r2
 8010f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	2b06      	cmp	r3, #6
 8010f72:	d015      	beq.n	8010fa0 <HAL_TIM_PWM_Start+0x254>
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f7a:	d011      	beq.n	8010fa0 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	681a      	ldr	r2, [r3, #0]
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	f042 0201 	orr.w	r2, r2, #1
 8010f8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f8c:	e008      	b.n	8010fa0 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	681a      	ldr	r2, [r3, #0]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	f042 0201 	orr.w	r2, r2, #1
 8010f9c:	601a      	str	r2, [r3, #0]
 8010f9e:	e000      	b.n	8010fa2 <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010fa0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010fa2:	2300      	movs	r3, #0
}
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3710      	adds	r7, #16
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}
 8010fac:	40012c00 	.word	0x40012c00
 8010fb0:	50012c00 	.word	0x50012c00
 8010fb4:	40013400 	.word	0x40013400
 8010fb8:	50013400 	.word	0x50013400
 8010fbc:	40014000 	.word	0x40014000
 8010fc0:	50014000 	.word	0x50014000
 8010fc4:	40014400 	.word	0x40014400
 8010fc8:	50014400 	.word	0x50014400
 8010fcc:	40014800 	.word	0x40014800
 8010fd0:	50014800 	.word	0x50014800
 8010fd4:	40000400 	.word	0x40000400
 8010fd8:	50000400 	.word	0x50000400
 8010fdc:	40000800 	.word	0x40000800
 8010fe0:	50000800 	.word	0x50000800
 8010fe4:	40000c00 	.word	0x40000c00
 8010fe8:	50000c00 	.word	0x50000c00
 8010fec:	00010007 	.word	0x00010007

08010ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b082      	sub	sp, #8
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	691b      	ldr	r3, [r3, #16]
 8010ffe:	f003 0302 	and.w	r3, r3, #2
 8011002:	2b02      	cmp	r3, #2
 8011004:	d122      	bne.n	801104c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	68db      	ldr	r3, [r3, #12]
 801100c:	f003 0302 	and.w	r3, r3, #2
 8011010:	2b02      	cmp	r3, #2
 8011012:	d11b      	bne.n	801104c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	f06f 0202 	mvn.w	r2, #2
 801101c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	2201      	movs	r2, #1
 8011022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	699b      	ldr	r3, [r3, #24]
 801102a:	f003 0303 	and.w	r3, r3, #3
 801102e:	2b00      	cmp	r3, #0
 8011030:	d003      	beq.n	801103a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f000 fb7c 	bl	8011730 <HAL_TIM_IC_CaptureCallback>
 8011038:	e005      	b.n	8011046 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f000 fb6e 	bl	801171c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f000 fb7f 	bl	8011744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2200      	movs	r2, #0
 801104a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	691b      	ldr	r3, [r3, #16]
 8011052:	f003 0304 	and.w	r3, r3, #4
 8011056:	2b04      	cmp	r3, #4
 8011058:	d122      	bne.n	80110a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	68db      	ldr	r3, [r3, #12]
 8011060:	f003 0304 	and.w	r3, r3, #4
 8011064:	2b04      	cmp	r3, #4
 8011066:	d11b      	bne.n	80110a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	f06f 0204 	mvn.w	r2, #4
 8011070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	2202      	movs	r2, #2
 8011076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	699b      	ldr	r3, [r3, #24]
 801107e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011082:	2b00      	cmp	r3, #0
 8011084:	d003      	beq.n	801108e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f000 fb52 	bl	8011730 <HAL_TIM_IC_CaptureCallback>
 801108c:	e005      	b.n	801109a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f000 fb44 	bl	801171c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f000 fb55 	bl	8011744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2200      	movs	r2, #0
 801109e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	691b      	ldr	r3, [r3, #16]
 80110a6:	f003 0308 	and.w	r3, r3, #8
 80110aa:	2b08      	cmp	r3, #8
 80110ac:	d122      	bne.n	80110f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	f003 0308 	and.w	r3, r3, #8
 80110b8:	2b08      	cmp	r3, #8
 80110ba:	d11b      	bne.n	80110f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	f06f 0208 	mvn.w	r2, #8
 80110c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	2204      	movs	r2, #4
 80110ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	69db      	ldr	r3, [r3, #28]
 80110d2:	f003 0303 	and.w	r3, r3, #3
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d003      	beq.n	80110e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f000 fb28 	bl	8011730 <HAL_TIM_IC_CaptureCallback>
 80110e0:	e005      	b.n	80110ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f000 fb1a 	bl	801171c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f000 fb2b 	bl	8011744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2200      	movs	r2, #0
 80110f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	691b      	ldr	r3, [r3, #16]
 80110fa:	f003 0310 	and.w	r3, r3, #16
 80110fe:	2b10      	cmp	r3, #16
 8011100:	d122      	bne.n	8011148 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	68db      	ldr	r3, [r3, #12]
 8011108:	f003 0310 	and.w	r3, r3, #16
 801110c:	2b10      	cmp	r3, #16
 801110e:	d11b      	bne.n	8011148 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	f06f 0210 	mvn.w	r2, #16
 8011118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2208      	movs	r2, #8
 801111e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	69db      	ldr	r3, [r3, #28]
 8011126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801112a:	2b00      	cmp	r3, #0
 801112c:	d003      	beq.n	8011136 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f000 fafe 	bl	8011730 <HAL_TIM_IC_CaptureCallback>
 8011134:	e005      	b.n	8011142 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f000 faf0 	bl	801171c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f000 fb01 	bl	8011744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2200      	movs	r2, #0
 8011146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	691b      	ldr	r3, [r3, #16]
 801114e:	f003 0301 	and.w	r3, r3, #1
 8011152:	2b01      	cmp	r3, #1
 8011154:	d10e      	bne.n	8011174 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	68db      	ldr	r3, [r3, #12]
 801115c:	f003 0301 	and.w	r3, r3, #1
 8011160:	2b01      	cmp	r3, #1
 8011162:	d107      	bne.n	8011174 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f06f 0201 	mvn.w	r2, #1
 801116c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801116e:	6878      	ldr	r0, [r7, #4]
 8011170:	f7f0 fc14 	bl	800199c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	691b      	ldr	r3, [r3, #16]
 801117a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801117e:	2b80      	cmp	r3, #128	; 0x80
 8011180:	d10e      	bne.n	80111a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	68db      	ldr	r3, [r3, #12]
 8011188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801118c:	2b80      	cmp	r3, #128	; 0x80
 801118e:	d107      	bne.n	80111a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f001 fa06 	bl	80125ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	691b      	ldr	r3, [r3, #16]
 80111a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80111aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80111ae:	d10e      	bne.n	80111ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	68db      	ldr	r3, [r3, #12]
 80111b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111ba:	2b80      	cmp	r3, #128	; 0x80
 80111bc:	d107      	bne.n	80111ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80111c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f001 f9f9 	bl	80125c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	691b      	ldr	r3, [r3, #16]
 80111d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111d8:	2b40      	cmp	r3, #64	; 0x40
 80111da:	d10e      	bne.n	80111fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	68db      	ldr	r3, [r3, #12]
 80111e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111e6:	2b40      	cmp	r3, #64	; 0x40
 80111e8:	d107      	bne.n	80111fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80111f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f000 faaf 	bl	8011758 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	691b      	ldr	r3, [r3, #16]
 8011200:	f003 0320 	and.w	r3, r3, #32
 8011204:	2b20      	cmp	r3, #32
 8011206:	d10e      	bne.n	8011226 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	68db      	ldr	r3, [r3, #12]
 801120e:	f003 0320 	and.w	r3, r3, #32
 8011212:	2b20      	cmp	r3, #32
 8011214:	d107      	bne.n	8011226 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	f06f 0220 	mvn.w	r2, #32
 801121e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f001 f9b9 	bl	8012598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	691b      	ldr	r3, [r3, #16]
 801122c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011234:	d10f      	bne.n	8011256 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	68db      	ldr	r3, [r3, #12]
 801123c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011244:	d107      	bne.n	8011256 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801124e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8011250:	6878      	ldr	r0, [r7, #4]
 8011252:	f001 f9bf 	bl	80125d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	691b      	ldr	r3, [r3, #16]
 801125c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011260:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011264:	d10f      	bne.n	8011286 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	68db      	ldr	r3, [r3, #12]
 801126c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011270:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011274:	d107      	bne.n	8011286 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801127e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f001 f9b1 	bl	80125e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	691b      	ldr	r3, [r3, #16]
 801128c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011294:	d10f      	bne.n	80112b6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	68db      	ldr	r3, [r3, #12]
 801129c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80112a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80112a4:	d107      	bne.n	80112b6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80112ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f001 f9a3 	bl	80125fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	691b      	ldr	r3, [r3, #16]
 80112bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80112c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80112c4:	d10f      	bne.n	80112e6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	68db      	ldr	r3, [r3, #12]
 80112cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80112d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80112d4:	d107      	bne.n	80112e6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80112de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f001 f995 	bl	8012610 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80112e6:	bf00      	nop
 80112e8:	3708      	adds	r7, #8
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}
	...

080112f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b086      	sub	sp, #24
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	60f8      	str	r0, [r7, #12]
 80112f8:	60b9      	str	r1, [r7, #8]
 80112fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80112fc:	2300      	movs	r3, #0
 80112fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011306:	2b01      	cmp	r3, #1
 8011308:	d101      	bne.n	801130e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801130a:	2302      	movs	r3, #2
 801130c:	e0ff      	b.n	801150e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	2201      	movs	r2, #1
 8011312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2b14      	cmp	r3, #20
 801131a:	f200 80f0 	bhi.w	80114fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 801131e:	a201      	add	r2, pc, #4	; (adr r2, 8011324 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011324:	08011379 	.word	0x08011379
 8011328:	080114ff 	.word	0x080114ff
 801132c:	080114ff 	.word	0x080114ff
 8011330:	080114ff 	.word	0x080114ff
 8011334:	080113b9 	.word	0x080113b9
 8011338:	080114ff 	.word	0x080114ff
 801133c:	080114ff 	.word	0x080114ff
 8011340:	080114ff 	.word	0x080114ff
 8011344:	080113fb 	.word	0x080113fb
 8011348:	080114ff 	.word	0x080114ff
 801134c:	080114ff 	.word	0x080114ff
 8011350:	080114ff 	.word	0x080114ff
 8011354:	0801143b 	.word	0x0801143b
 8011358:	080114ff 	.word	0x080114ff
 801135c:	080114ff 	.word	0x080114ff
 8011360:	080114ff 	.word	0x080114ff
 8011364:	0801147d 	.word	0x0801147d
 8011368:	080114ff 	.word	0x080114ff
 801136c:	080114ff 	.word	0x080114ff
 8011370:	080114ff 	.word	0x080114ff
 8011374:	080114bd 	.word	0x080114bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	68b9      	ldr	r1, [r7, #8]
 801137e:	4618      	mov	r0, r3
 8011380:	f000 faee 	bl	8011960 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	699a      	ldr	r2, [r3, #24]
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	f042 0208 	orr.w	r2, r2, #8
 8011392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	699a      	ldr	r2, [r3, #24]
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	f022 0204 	bic.w	r2, r2, #4
 80113a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	6999      	ldr	r1, [r3, #24]
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	691a      	ldr	r2, [r3, #16]
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	430a      	orrs	r2, r1
 80113b4:	619a      	str	r2, [r3, #24]
      break;
 80113b6:	e0a5      	b.n	8011504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	68b9      	ldr	r1, [r7, #8]
 80113be:	4618      	mov	r0, r3
 80113c0:	f000 fb90 	bl	8011ae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	699a      	ldr	r2, [r3, #24]
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80113d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	699a      	ldr	r2, [r3, #24]
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80113e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	6999      	ldr	r1, [r3, #24]
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	691b      	ldr	r3, [r3, #16]
 80113ee:	021a      	lsls	r2, r3, #8
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	430a      	orrs	r2, r1
 80113f6:	619a      	str	r2, [r3, #24]
      break;
 80113f8:	e084      	b.n	8011504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	68b9      	ldr	r1, [r7, #8]
 8011400:	4618      	mov	r0, r3
 8011402:	f000 fc1f 	bl	8011c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	69da      	ldr	r2, [r3, #28]
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	f042 0208 	orr.w	r2, r2, #8
 8011414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	69da      	ldr	r2, [r3, #28]
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	f022 0204 	bic.w	r2, r2, #4
 8011424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	69d9      	ldr	r1, [r3, #28]
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	691a      	ldr	r2, [r3, #16]
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	430a      	orrs	r2, r1
 8011436:	61da      	str	r2, [r3, #28]
      break;
 8011438:	e064      	b.n	8011504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	68b9      	ldr	r1, [r7, #8]
 8011440:	4618      	mov	r0, r3
 8011442:	f000 fcad 	bl	8011da0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	69da      	ldr	r2, [r3, #28]
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	69da      	ldr	r2, [r3, #28]
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	69d9      	ldr	r1, [r3, #28]
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	691b      	ldr	r3, [r3, #16]
 8011470:	021a      	lsls	r2, r3, #8
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	430a      	orrs	r2, r1
 8011478:	61da      	str	r2, [r3, #28]
      break;
 801147a:	e043      	b.n	8011504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	68b9      	ldr	r1, [r7, #8]
 8011482:	4618      	mov	r0, r3
 8011484:	f000 fd3c 	bl	8011f00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	f042 0208 	orr.w	r2, r2, #8
 8011496:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	f022 0204 	bic.w	r2, r2, #4
 80114a6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	691a      	ldr	r2, [r3, #16]
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	430a      	orrs	r2, r1
 80114b8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80114ba:	e023      	b.n	8011504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	68b9      	ldr	r1, [r7, #8]
 80114c2:	4618      	mov	r0, r3
 80114c4:	f000 fd9e 	bl	8012004 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80114d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80114e6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	691b      	ldr	r3, [r3, #16]
 80114f2:	021a      	lsls	r2, r3, #8
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	430a      	orrs	r2, r1
 80114fa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80114fc:	e002      	b.n	8011504 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80114fe:	2301      	movs	r3, #1
 8011500:	75fb      	strb	r3, [r7, #23]
      break;
 8011502:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	2200      	movs	r2, #0
 8011508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801150c:	7dfb      	ldrb	r3, [r7, #23]
}
 801150e:	4618      	mov	r0, r3
 8011510:	3718      	adds	r7, #24
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
 8011516:	bf00      	nop

08011518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b084      	sub	sp, #16
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011522:	2300      	movs	r3, #0
 8011524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801152c:	2b01      	cmp	r3, #1
 801152e:	d101      	bne.n	8011534 <HAL_TIM_ConfigClockSource+0x1c>
 8011530:	2302      	movs	r3, #2
 8011532:	e0e6      	b.n	8011702 <HAL_TIM_ConfigClockSource+0x1ea>
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2201      	movs	r2, #1
 8011538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2202      	movs	r2, #2
 8011540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	689b      	ldr	r3, [r3, #8]
 801154a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8011552:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8011556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801155e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	68ba      	ldr	r2, [r7, #8]
 8011566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	4a67      	ldr	r2, [pc, #412]	; (801170c <HAL_TIM_ConfigClockSource+0x1f4>)
 801156e:	4293      	cmp	r3, r2
 8011570:	f000 80b1 	beq.w	80116d6 <HAL_TIM_ConfigClockSource+0x1be>
 8011574:	4a65      	ldr	r2, [pc, #404]	; (801170c <HAL_TIM_ConfigClockSource+0x1f4>)
 8011576:	4293      	cmp	r3, r2
 8011578:	f200 80b6 	bhi.w	80116e8 <HAL_TIM_ConfigClockSource+0x1d0>
 801157c:	4a64      	ldr	r2, [pc, #400]	; (8011710 <HAL_TIM_ConfigClockSource+0x1f8>)
 801157e:	4293      	cmp	r3, r2
 8011580:	f000 80a9 	beq.w	80116d6 <HAL_TIM_ConfigClockSource+0x1be>
 8011584:	4a62      	ldr	r2, [pc, #392]	; (8011710 <HAL_TIM_ConfigClockSource+0x1f8>)
 8011586:	4293      	cmp	r3, r2
 8011588:	f200 80ae 	bhi.w	80116e8 <HAL_TIM_ConfigClockSource+0x1d0>
 801158c:	4a61      	ldr	r2, [pc, #388]	; (8011714 <HAL_TIM_ConfigClockSource+0x1fc>)
 801158e:	4293      	cmp	r3, r2
 8011590:	f000 80a1 	beq.w	80116d6 <HAL_TIM_ConfigClockSource+0x1be>
 8011594:	4a5f      	ldr	r2, [pc, #380]	; (8011714 <HAL_TIM_ConfigClockSource+0x1fc>)
 8011596:	4293      	cmp	r3, r2
 8011598:	f200 80a6 	bhi.w	80116e8 <HAL_TIM_ConfigClockSource+0x1d0>
 801159c:	4a5e      	ldr	r2, [pc, #376]	; (8011718 <HAL_TIM_ConfigClockSource+0x200>)
 801159e:	4293      	cmp	r3, r2
 80115a0:	f000 8099 	beq.w	80116d6 <HAL_TIM_ConfigClockSource+0x1be>
 80115a4:	4a5c      	ldr	r2, [pc, #368]	; (8011718 <HAL_TIM_ConfigClockSource+0x200>)
 80115a6:	4293      	cmp	r3, r2
 80115a8:	f200 809e 	bhi.w	80116e8 <HAL_TIM_ConfigClockSource+0x1d0>
 80115ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80115b0:	f000 8091 	beq.w	80116d6 <HAL_TIM_ConfigClockSource+0x1be>
 80115b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80115b8:	f200 8096 	bhi.w	80116e8 <HAL_TIM_ConfigClockSource+0x1d0>
 80115bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115c0:	f000 8089 	beq.w	80116d6 <HAL_TIM_ConfigClockSource+0x1be>
 80115c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115c8:	f200 808e 	bhi.w	80116e8 <HAL_TIM_ConfigClockSource+0x1d0>
 80115cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80115d0:	d03e      	beq.n	8011650 <HAL_TIM_ConfigClockSource+0x138>
 80115d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80115d6:	f200 8087 	bhi.w	80116e8 <HAL_TIM_ConfigClockSource+0x1d0>
 80115da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115de:	f000 8086 	beq.w	80116ee <HAL_TIM_ConfigClockSource+0x1d6>
 80115e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115e6:	d87f      	bhi.n	80116e8 <HAL_TIM_ConfigClockSource+0x1d0>
 80115e8:	2b70      	cmp	r3, #112	; 0x70
 80115ea:	d01a      	beq.n	8011622 <HAL_TIM_ConfigClockSource+0x10a>
 80115ec:	2b70      	cmp	r3, #112	; 0x70
 80115ee:	d87b      	bhi.n	80116e8 <HAL_TIM_ConfigClockSource+0x1d0>
 80115f0:	2b60      	cmp	r3, #96	; 0x60
 80115f2:	d050      	beq.n	8011696 <HAL_TIM_ConfigClockSource+0x17e>
 80115f4:	2b60      	cmp	r3, #96	; 0x60
 80115f6:	d877      	bhi.n	80116e8 <HAL_TIM_ConfigClockSource+0x1d0>
 80115f8:	2b50      	cmp	r3, #80	; 0x50
 80115fa:	d03c      	beq.n	8011676 <HAL_TIM_ConfigClockSource+0x15e>
 80115fc:	2b50      	cmp	r3, #80	; 0x50
 80115fe:	d873      	bhi.n	80116e8 <HAL_TIM_ConfigClockSource+0x1d0>
 8011600:	2b40      	cmp	r3, #64	; 0x40
 8011602:	d058      	beq.n	80116b6 <HAL_TIM_ConfigClockSource+0x19e>
 8011604:	2b40      	cmp	r3, #64	; 0x40
 8011606:	d86f      	bhi.n	80116e8 <HAL_TIM_ConfigClockSource+0x1d0>
 8011608:	2b30      	cmp	r3, #48	; 0x30
 801160a:	d064      	beq.n	80116d6 <HAL_TIM_ConfigClockSource+0x1be>
 801160c:	2b30      	cmp	r3, #48	; 0x30
 801160e:	d86b      	bhi.n	80116e8 <HAL_TIM_ConfigClockSource+0x1d0>
 8011610:	2b20      	cmp	r3, #32
 8011612:	d060      	beq.n	80116d6 <HAL_TIM_ConfigClockSource+0x1be>
 8011614:	2b20      	cmp	r3, #32
 8011616:	d867      	bhi.n	80116e8 <HAL_TIM_ConfigClockSource+0x1d0>
 8011618:	2b00      	cmp	r3, #0
 801161a:	d05c      	beq.n	80116d6 <HAL_TIM_ConfigClockSource+0x1be>
 801161c:	2b10      	cmp	r3, #16
 801161e:	d05a      	beq.n	80116d6 <HAL_TIM_ConfigClockSource+0x1be>
 8011620:	e062      	b.n	80116e8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	6818      	ldr	r0, [r3, #0]
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	6899      	ldr	r1, [r3, #8]
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	685a      	ldr	r2, [r3, #4]
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	68db      	ldr	r3, [r3, #12]
 8011632:	f000 fde7 	bl	8012204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	689b      	ldr	r3, [r3, #8]
 801163c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011644:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	68ba      	ldr	r2, [r7, #8]
 801164c:	609a      	str	r2, [r3, #8]
      break;
 801164e:	e04f      	b.n	80116f0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	6818      	ldr	r0, [r3, #0]
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	6899      	ldr	r1, [r3, #8]
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	685a      	ldr	r2, [r3, #4]
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	68db      	ldr	r3, [r3, #12]
 8011660:	f000 fdd0 	bl	8012204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	689a      	ldr	r2, [r3, #8]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011672:	609a      	str	r2, [r3, #8]
      break;
 8011674:	e03c      	b.n	80116f0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	6818      	ldr	r0, [r3, #0]
 801167a:	683b      	ldr	r3, [r7, #0]
 801167c:	6859      	ldr	r1, [r3, #4]
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	68db      	ldr	r3, [r3, #12]
 8011682:	461a      	mov	r2, r3
 8011684:	f000 fd42 	bl	801210c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	2150      	movs	r1, #80	; 0x50
 801168e:	4618      	mov	r0, r3
 8011690:	f000 fd9b 	bl	80121ca <TIM_ITRx_SetConfig>
      break;
 8011694:	e02c      	b.n	80116f0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6818      	ldr	r0, [r3, #0]
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	6859      	ldr	r1, [r3, #4]
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	68db      	ldr	r3, [r3, #12]
 80116a2:	461a      	mov	r2, r3
 80116a4:	f000 fd61 	bl	801216a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	2160      	movs	r1, #96	; 0x60
 80116ae:	4618      	mov	r0, r3
 80116b0:	f000 fd8b 	bl	80121ca <TIM_ITRx_SetConfig>
      break;
 80116b4:	e01c      	b.n	80116f0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	6818      	ldr	r0, [r3, #0]
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	6859      	ldr	r1, [r3, #4]
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	68db      	ldr	r3, [r3, #12]
 80116c2:	461a      	mov	r2, r3
 80116c4:	f000 fd22 	bl	801210c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	2140      	movs	r1, #64	; 0x40
 80116ce:	4618      	mov	r0, r3
 80116d0:	f000 fd7b 	bl	80121ca <TIM_ITRx_SetConfig>
      break;
 80116d4:	e00c      	b.n	80116f0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681a      	ldr	r2, [r3, #0]
 80116da:	683b      	ldr	r3, [r7, #0]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	4619      	mov	r1, r3
 80116e0:	4610      	mov	r0, r2
 80116e2:	f000 fd72 	bl	80121ca <TIM_ITRx_SetConfig>
      break;
 80116e6:	e003      	b.n	80116f0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 80116e8:	2301      	movs	r3, #1
 80116ea:	73fb      	strb	r3, [r7, #15]
      break;
 80116ec:	e000      	b.n	80116f0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 80116ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2201      	movs	r2, #1
 80116f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2200      	movs	r2, #0
 80116fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011700:	7bfb      	ldrb	r3, [r7, #15]
}
 8011702:	4618      	mov	r0, r3
 8011704:	3710      	adds	r7, #16
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}
 801170a:	bf00      	nop
 801170c:	00100070 	.word	0x00100070
 8011710:	00100040 	.word	0x00100040
 8011714:	00100030 	.word	0x00100030
 8011718:	00100020 	.word	0x00100020

0801171c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801171c:	b480      	push	{r7}
 801171e:	b083      	sub	sp, #12
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011724:	bf00      	nop
 8011726:	370c      	adds	r7, #12
 8011728:	46bd      	mov	sp, r7
 801172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172e:	4770      	bx	lr

08011730 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011730:	b480      	push	{r7}
 8011732:	b083      	sub	sp, #12
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011738:	bf00      	nop
 801173a:	370c      	adds	r7, #12
 801173c:	46bd      	mov	sp, r7
 801173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011742:	4770      	bx	lr

08011744 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011744:	b480      	push	{r7}
 8011746:	b083      	sub	sp, #12
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801174c:	bf00      	nop
 801174e:	370c      	adds	r7, #12
 8011750:	46bd      	mov	sp, r7
 8011752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011756:	4770      	bx	lr

08011758 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011758:	b480      	push	{r7}
 801175a:	b083      	sub	sp, #12
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011760:	bf00      	nop
 8011762:	370c      	adds	r7, #12
 8011764:	46bd      	mov	sp, r7
 8011766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176a:	4770      	bx	lr

0801176c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801176c:	b480      	push	{r7}
 801176e:	b085      	sub	sp, #20
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
 8011774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	4a68      	ldr	r2, [pc, #416]	; (8011920 <TIM_Base_SetConfig+0x1b4>)
 8011780:	4293      	cmp	r3, r2
 8011782:	d02b      	beq.n	80117dc <TIM_Base_SetConfig+0x70>
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	4a67      	ldr	r2, [pc, #412]	; (8011924 <TIM_Base_SetConfig+0x1b8>)
 8011788:	4293      	cmp	r3, r2
 801178a:	d027      	beq.n	80117dc <TIM_Base_SetConfig+0x70>
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011792:	d023      	beq.n	80117dc <TIM_Base_SetConfig+0x70>
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801179a:	d01f      	beq.n	80117dc <TIM_Base_SetConfig+0x70>
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	4a62      	ldr	r2, [pc, #392]	; (8011928 <TIM_Base_SetConfig+0x1bc>)
 80117a0:	4293      	cmp	r3, r2
 80117a2:	d01b      	beq.n	80117dc <TIM_Base_SetConfig+0x70>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	4a61      	ldr	r2, [pc, #388]	; (801192c <TIM_Base_SetConfig+0x1c0>)
 80117a8:	4293      	cmp	r3, r2
 80117aa:	d017      	beq.n	80117dc <TIM_Base_SetConfig+0x70>
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	4a60      	ldr	r2, [pc, #384]	; (8011930 <TIM_Base_SetConfig+0x1c4>)
 80117b0:	4293      	cmp	r3, r2
 80117b2:	d013      	beq.n	80117dc <TIM_Base_SetConfig+0x70>
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	4a5f      	ldr	r2, [pc, #380]	; (8011934 <TIM_Base_SetConfig+0x1c8>)
 80117b8:	4293      	cmp	r3, r2
 80117ba:	d00f      	beq.n	80117dc <TIM_Base_SetConfig+0x70>
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	4a5e      	ldr	r2, [pc, #376]	; (8011938 <TIM_Base_SetConfig+0x1cc>)
 80117c0:	4293      	cmp	r3, r2
 80117c2:	d00b      	beq.n	80117dc <TIM_Base_SetConfig+0x70>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	4a5d      	ldr	r2, [pc, #372]	; (801193c <TIM_Base_SetConfig+0x1d0>)
 80117c8:	4293      	cmp	r3, r2
 80117ca:	d007      	beq.n	80117dc <TIM_Base_SetConfig+0x70>
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	4a5c      	ldr	r2, [pc, #368]	; (8011940 <TIM_Base_SetConfig+0x1d4>)
 80117d0:	4293      	cmp	r3, r2
 80117d2:	d003      	beq.n	80117dc <TIM_Base_SetConfig+0x70>
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	4a5b      	ldr	r2, [pc, #364]	; (8011944 <TIM_Base_SetConfig+0x1d8>)
 80117d8:	4293      	cmp	r3, r2
 80117da:	d108      	bne.n	80117ee <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	685b      	ldr	r3, [r3, #4]
 80117e8:	68fa      	ldr	r2, [r7, #12]
 80117ea:	4313      	orrs	r3, r2
 80117ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	4a4b      	ldr	r2, [pc, #300]	; (8011920 <TIM_Base_SetConfig+0x1b4>)
 80117f2:	4293      	cmp	r3, r2
 80117f4:	d043      	beq.n	801187e <TIM_Base_SetConfig+0x112>
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	4a4a      	ldr	r2, [pc, #296]	; (8011924 <TIM_Base_SetConfig+0x1b8>)
 80117fa:	4293      	cmp	r3, r2
 80117fc:	d03f      	beq.n	801187e <TIM_Base_SetConfig+0x112>
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011804:	d03b      	beq.n	801187e <TIM_Base_SetConfig+0x112>
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801180c:	d037      	beq.n	801187e <TIM_Base_SetConfig+0x112>
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	4a45      	ldr	r2, [pc, #276]	; (8011928 <TIM_Base_SetConfig+0x1bc>)
 8011812:	4293      	cmp	r3, r2
 8011814:	d033      	beq.n	801187e <TIM_Base_SetConfig+0x112>
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	4a44      	ldr	r2, [pc, #272]	; (801192c <TIM_Base_SetConfig+0x1c0>)
 801181a:	4293      	cmp	r3, r2
 801181c:	d02f      	beq.n	801187e <TIM_Base_SetConfig+0x112>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	4a43      	ldr	r2, [pc, #268]	; (8011930 <TIM_Base_SetConfig+0x1c4>)
 8011822:	4293      	cmp	r3, r2
 8011824:	d02b      	beq.n	801187e <TIM_Base_SetConfig+0x112>
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	4a42      	ldr	r2, [pc, #264]	; (8011934 <TIM_Base_SetConfig+0x1c8>)
 801182a:	4293      	cmp	r3, r2
 801182c:	d027      	beq.n	801187e <TIM_Base_SetConfig+0x112>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	4a41      	ldr	r2, [pc, #260]	; (8011938 <TIM_Base_SetConfig+0x1cc>)
 8011832:	4293      	cmp	r3, r2
 8011834:	d023      	beq.n	801187e <TIM_Base_SetConfig+0x112>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	4a40      	ldr	r2, [pc, #256]	; (801193c <TIM_Base_SetConfig+0x1d0>)
 801183a:	4293      	cmp	r3, r2
 801183c:	d01f      	beq.n	801187e <TIM_Base_SetConfig+0x112>
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	4a3f      	ldr	r2, [pc, #252]	; (8011940 <TIM_Base_SetConfig+0x1d4>)
 8011842:	4293      	cmp	r3, r2
 8011844:	d01b      	beq.n	801187e <TIM_Base_SetConfig+0x112>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	4a3e      	ldr	r2, [pc, #248]	; (8011944 <TIM_Base_SetConfig+0x1d8>)
 801184a:	4293      	cmp	r3, r2
 801184c:	d017      	beq.n	801187e <TIM_Base_SetConfig+0x112>
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	4a3d      	ldr	r2, [pc, #244]	; (8011948 <TIM_Base_SetConfig+0x1dc>)
 8011852:	4293      	cmp	r3, r2
 8011854:	d013      	beq.n	801187e <TIM_Base_SetConfig+0x112>
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	4a3c      	ldr	r2, [pc, #240]	; (801194c <TIM_Base_SetConfig+0x1e0>)
 801185a:	4293      	cmp	r3, r2
 801185c:	d00f      	beq.n	801187e <TIM_Base_SetConfig+0x112>
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	4a3b      	ldr	r2, [pc, #236]	; (8011950 <TIM_Base_SetConfig+0x1e4>)
 8011862:	4293      	cmp	r3, r2
 8011864:	d00b      	beq.n	801187e <TIM_Base_SetConfig+0x112>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	4a3a      	ldr	r2, [pc, #232]	; (8011954 <TIM_Base_SetConfig+0x1e8>)
 801186a:	4293      	cmp	r3, r2
 801186c:	d007      	beq.n	801187e <TIM_Base_SetConfig+0x112>
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	4a39      	ldr	r2, [pc, #228]	; (8011958 <TIM_Base_SetConfig+0x1ec>)
 8011872:	4293      	cmp	r3, r2
 8011874:	d003      	beq.n	801187e <TIM_Base_SetConfig+0x112>
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	4a38      	ldr	r2, [pc, #224]	; (801195c <TIM_Base_SetConfig+0x1f0>)
 801187a:	4293      	cmp	r3, r2
 801187c:	d108      	bne.n	8011890 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	68db      	ldr	r3, [r3, #12]
 801188a:	68fa      	ldr	r2, [r7, #12]
 801188c:	4313      	orrs	r3, r2
 801188e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	695b      	ldr	r3, [r3, #20]
 801189a:	4313      	orrs	r3, r2
 801189c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	68fa      	ldr	r2, [r7, #12]
 80118a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	689a      	ldr	r2, [r3, #8]
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	4a1a      	ldr	r2, [pc, #104]	; (8011920 <TIM_Base_SetConfig+0x1b4>)
 80118b8:	4293      	cmp	r3, r2
 80118ba:	d023      	beq.n	8011904 <TIM_Base_SetConfig+0x198>
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	4a19      	ldr	r2, [pc, #100]	; (8011924 <TIM_Base_SetConfig+0x1b8>)
 80118c0:	4293      	cmp	r3, r2
 80118c2:	d01f      	beq.n	8011904 <TIM_Base_SetConfig+0x198>
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	4a1e      	ldr	r2, [pc, #120]	; (8011940 <TIM_Base_SetConfig+0x1d4>)
 80118c8:	4293      	cmp	r3, r2
 80118ca:	d01b      	beq.n	8011904 <TIM_Base_SetConfig+0x198>
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	4a1d      	ldr	r2, [pc, #116]	; (8011944 <TIM_Base_SetConfig+0x1d8>)
 80118d0:	4293      	cmp	r3, r2
 80118d2:	d017      	beq.n	8011904 <TIM_Base_SetConfig+0x198>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	4a1c      	ldr	r2, [pc, #112]	; (8011948 <TIM_Base_SetConfig+0x1dc>)
 80118d8:	4293      	cmp	r3, r2
 80118da:	d013      	beq.n	8011904 <TIM_Base_SetConfig+0x198>
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	4a1b      	ldr	r2, [pc, #108]	; (801194c <TIM_Base_SetConfig+0x1e0>)
 80118e0:	4293      	cmp	r3, r2
 80118e2:	d00f      	beq.n	8011904 <TIM_Base_SetConfig+0x198>
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	4a1a      	ldr	r2, [pc, #104]	; (8011950 <TIM_Base_SetConfig+0x1e4>)
 80118e8:	4293      	cmp	r3, r2
 80118ea:	d00b      	beq.n	8011904 <TIM_Base_SetConfig+0x198>
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	4a19      	ldr	r2, [pc, #100]	; (8011954 <TIM_Base_SetConfig+0x1e8>)
 80118f0:	4293      	cmp	r3, r2
 80118f2:	d007      	beq.n	8011904 <TIM_Base_SetConfig+0x198>
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	4a18      	ldr	r2, [pc, #96]	; (8011958 <TIM_Base_SetConfig+0x1ec>)
 80118f8:	4293      	cmp	r3, r2
 80118fa:	d003      	beq.n	8011904 <TIM_Base_SetConfig+0x198>
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	4a17      	ldr	r2, [pc, #92]	; (801195c <TIM_Base_SetConfig+0x1f0>)
 8011900:	4293      	cmp	r3, r2
 8011902:	d103      	bne.n	801190c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	691a      	ldr	r2, [r3, #16]
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2201      	movs	r2, #1
 8011910:	615a      	str	r2, [r3, #20]
}
 8011912:	bf00      	nop
 8011914:	3714      	adds	r7, #20
 8011916:	46bd      	mov	sp, r7
 8011918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191c:	4770      	bx	lr
 801191e:	bf00      	nop
 8011920:	40012c00 	.word	0x40012c00
 8011924:	50012c00 	.word	0x50012c00
 8011928:	40000400 	.word	0x40000400
 801192c:	50000400 	.word	0x50000400
 8011930:	40000800 	.word	0x40000800
 8011934:	50000800 	.word	0x50000800
 8011938:	40000c00 	.word	0x40000c00
 801193c:	50000c00 	.word	0x50000c00
 8011940:	40013400 	.word	0x40013400
 8011944:	50013400 	.word	0x50013400
 8011948:	40014000 	.word	0x40014000
 801194c:	50014000 	.word	0x50014000
 8011950:	40014400 	.word	0x40014400
 8011954:	50014400 	.word	0x50014400
 8011958:	40014800 	.word	0x40014800
 801195c:	50014800 	.word	0x50014800

08011960 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011960:	b480      	push	{r7}
 8011962:	b087      	sub	sp, #28
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
 8011968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6a1b      	ldr	r3, [r3, #32]
 801196e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6a1b      	ldr	r3, [r3, #32]
 8011974:	f023 0201 	bic.w	r2, r3, #1
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	685b      	ldr	r3, [r3, #4]
 8011980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	699b      	ldr	r3, [r3, #24]
 8011986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801198e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	f023 0303 	bic.w	r3, r3, #3
 801199a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	68fa      	ldr	r2, [r7, #12]
 80119a2:	4313      	orrs	r3, r2
 80119a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	f023 0302 	bic.w	r3, r3, #2
 80119ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	689b      	ldr	r3, [r3, #8]
 80119b2:	697a      	ldr	r2, [r7, #20]
 80119b4:	4313      	orrs	r3, r2
 80119b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	4a40      	ldr	r2, [pc, #256]	; (8011abc <TIM_OC1_SetConfig+0x15c>)
 80119bc:	4293      	cmp	r3, r2
 80119be:	d023      	beq.n	8011a08 <TIM_OC1_SetConfig+0xa8>
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	4a3f      	ldr	r2, [pc, #252]	; (8011ac0 <TIM_OC1_SetConfig+0x160>)
 80119c4:	4293      	cmp	r3, r2
 80119c6:	d01f      	beq.n	8011a08 <TIM_OC1_SetConfig+0xa8>
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	4a3e      	ldr	r2, [pc, #248]	; (8011ac4 <TIM_OC1_SetConfig+0x164>)
 80119cc:	4293      	cmp	r3, r2
 80119ce:	d01b      	beq.n	8011a08 <TIM_OC1_SetConfig+0xa8>
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	4a3d      	ldr	r2, [pc, #244]	; (8011ac8 <TIM_OC1_SetConfig+0x168>)
 80119d4:	4293      	cmp	r3, r2
 80119d6:	d017      	beq.n	8011a08 <TIM_OC1_SetConfig+0xa8>
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	4a3c      	ldr	r2, [pc, #240]	; (8011acc <TIM_OC1_SetConfig+0x16c>)
 80119dc:	4293      	cmp	r3, r2
 80119de:	d013      	beq.n	8011a08 <TIM_OC1_SetConfig+0xa8>
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	4a3b      	ldr	r2, [pc, #236]	; (8011ad0 <TIM_OC1_SetConfig+0x170>)
 80119e4:	4293      	cmp	r3, r2
 80119e6:	d00f      	beq.n	8011a08 <TIM_OC1_SetConfig+0xa8>
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	4a3a      	ldr	r2, [pc, #232]	; (8011ad4 <TIM_OC1_SetConfig+0x174>)
 80119ec:	4293      	cmp	r3, r2
 80119ee:	d00b      	beq.n	8011a08 <TIM_OC1_SetConfig+0xa8>
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	4a39      	ldr	r2, [pc, #228]	; (8011ad8 <TIM_OC1_SetConfig+0x178>)
 80119f4:	4293      	cmp	r3, r2
 80119f6:	d007      	beq.n	8011a08 <TIM_OC1_SetConfig+0xa8>
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	4a38      	ldr	r2, [pc, #224]	; (8011adc <TIM_OC1_SetConfig+0x17c>)
 80119fc:	4293      	cmp	r3, r2
 80119fe:	d003      	beq.n	8011a08 <TIM_OC1_SetConfig+0xa8>
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	4a37      	ldr	r2, [pc, #220]	; (8011ae0 <TIM_OC1_SetConfig+0x180>)
 8011a04:	4293      	cmp	r3, r2
 8011a06:	d10c      	bne.n	8011a22 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	f023 0308 	bic.w	r3, r3, #8
 8011a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	68db      	ldr	r3, [r3, #12]
 8011a14:	697a      	ldr	r2, [r7, #20]
 8011a16:	4313      	orrs	r3, r2
 8011a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	f023 0304 	bic.w	r3, r3, #4
 8011a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	4a25      	ldr	r2, [pc, #148]	; (8011abc <TIM_OC1_SetConfig+0x15c>)
 8011a26:	4293      	cmp	r3, r2
 8011a28:	d023      	beq.n	8011a72 <TIM_OC1_SetConfig+0x112>
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	4a24      	ldr	r2, [pc, #144]	; (8011ac0 <TIM_OC1_SetConfig+0x160>)
 8011a2e:	4293      	cmp	r3, r2
 8011a30:	d01f      	beq.n	8011a72 <TIM_OC1_SetConfig+0x112>
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	4a23      	ldr	r2, [pc, #140]	; (8011ac4 <TIM_OC1_SetConfig+0x164>)
 8011a36:	4293      	cmp	r3, r2
 8011a38:	d01b      	beq.n	8011a72 <TIM_OC1_SetConfig+0x112>
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	4a22      	ldr	r2, [pc, #136]	; (8011ac8 <TIM_OC1_SetConfig+0x168>)
 8011a3e:	4293      	cmp	r3, r2
 8011a40:	d017      	beq.n	8011a72 <TIM_OC1_SetConfig+0x112>
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	4a21      	ldr	r2, [pc, #132]	; (8011acc <TIM_OC1_SetConfig+0x16c>)
 8011a46:	4293      	cmp	r3, r2
 8011a48:	d013      	beq.n	8011a72 <TIM_OC1_SetConfig+0x112>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	4a20      	ldr	r2, [pc, #128]	; (8011ad0 <TIM_OC1_SetConfig+0x170>)
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d00f      	beq.n	8011a72 <TIM_OC1_SetConfig+0x112>
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	4a1f      	ldr	r2, [pc, #124]	; (8011ad4 <TIM_OC1_SetConfig+0x174>)
 8011a56:	4293      	cmp	r3, r2
 8011a58:	d00b      	beq.n	8011a72 <TIM_OC1_SetConfig+0x112>
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	4a1e      	ldr	r2, [pc, #120]	; (8011ad8 <TIM_OC1_SetConfig+0x178>)
 8011a5e:	4293      	cmp	r3, r2
 8011a60:	d007      	beq.n	8011a72 <TIM_OC1_SetConfig+0x112>
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	4a1d      	ldr	r2, [pc, #116]	; (8011adc <TIM_OC1_SetConfig+0x17c>)
 8011a66:	4293      	cmp	r3, r2
 8011a68:	d003      	beq.n	8011a72 <TIM_OC1_SetConfig+0x112>
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	4a1c      	ldr	r2, [pc, #112]	; (8011ae0 <TIM_OC1_SetConfig+0x180>)
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	d111      	bne.n	8011a96 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	695b      	ldr	r3, [r3, #20]
 8011a86:	693a      	ldr	r2, [r7, #16]
 8011a88:	4313      	orrs	r3, r2
 8011a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	699b      	ldr	r3, [r3, #24]
 8011a90:	693a      	ldr	r2, [r7, #16]
 8011a92:	4313      	orrs	r3, r2
 8011a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	693a      	ldr	r2, [r7, #16]
 8011a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	68fa      	ldr	r2, [r7, #12]
 8011aa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	685a      	ldr	r2, [r3, #4]
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	697a      	ldr	r2, [r7, #20]
 8011aae:	621a      	str	r2, [r3, #32]
}
 8011ab0:	bf00      	nop
 8011ab2:	371c      	adds	r7, #28
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aba:	4770      	bx	lr
 8011abc:	40012c00 	.word	0x40012c00
 8011ac0:	50012c00 	.word	0x50012c00
 8011ac4:	40013400 	.word	0x40013400
 8011ac8:	50013400 	.word	0x50013400
 8011acc:	40014000 	.word	0x40014000
 8011ad0:	50014000 	.word	0x50014000
 8011ad4:	40014400 	.word	0x40014400
 8011ad8:	50014400 	.word	0x50014400
 8011adc:	40014800 	.word	0x40014800
 8011ae0:	50014800 	.word	0x50014800

08011ae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011ae4:	b480      	push	{r7}
 8011ae6:	b087      	sub	sp, #28
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6a1b      	ldr	r3, [r3, #32]
 8011af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6a1b      	ldr	r3, [r3, #32]
 8011af8:	f023 0210 	bic.w	r2, r3, #16
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	685b      	ldr	r3, [r3, #4]
 8011b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	699b      	ldr	r3, [r3, #24]
 8011b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	021b      	lsls	r3, r3, #8
 8011b26:	68fa      	ldr	r2, [r7, #12]
 8011b28:	4313      	orrs	r3, r2
 8011b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	f023 0320 	bic.w	r3, r3, #32
 8011b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	689b      	ldr	r3, [r3, #8]
 8011b38:	011b      	lsls	r3, r3, #4
 8011b3a:	697a      	ldr	r2, [r7, #20]
 8011b3c:	4313      	orrs	r3, r2
 8011b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	4a36      	ldr	r2, [pc, #216]	; (8011c1c <TIM_OC2_SetConfig+0x138>)
 8011b44:	4293      	cmp	r3, r2
 8011b46:	d00b      	beq.n	8011b60 <TIM_OC2_SetConfig+0x7c>
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	4a35      	ldr	r2, [pc, #212]	; (8011c20 <TIM_OC2_SetConfig+0x13c>)
 8011b4c:	4293      	cmp	r3, r2
 8011b4e:	d007      	beq.n	8011b60 <TIM_OC2_SetConfig+0x7c>
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	4a34      	ldr	r2, [pc, #208]	; (8011c24 <TIM_OC2_SetConfig+0x140>)
 8011b54:	4293      	cmp	r3, r2
 8011b56:	d003      	beq.n	8011b60 <TIM_OC2_SetConfig+0x7c>
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	4a33      	ldr	r2, [pc, #204]	; (8011c28 <TIM_OC2_SetConfig+0x144>)
 8011b5c:	4293      	cmp	r3, r2
 8011b5e:	d10d      	bne.n	8011b7c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	68db      	ldr	r3, [r3, #12]
 8011b6c:	011b      	lsls	r3, r3, #4
 8011b6e:	697a      	ldr	r2, [r7, #20]
 8011b70:	4313      	orrs	r3, r2
 8011b72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011b7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	4a27      	ldr	r2, [pc, #156]	; (8011c1c <TIM_OC2_SetConfig+0x138>)
 8011b80:	4293      	cmp	r3, r2
 8011b82:	d023      	beq.n	8011bcc <TIM_OC2_SetConfig+0xe8>
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	4a26      	ldr	r2, [pc, #152]	; (8011c20 <TIM_OC2_SetConfig+0x13c>)
 8011b88:	4293      	cmp	r3, r2
 8011b8a:	d01f      	beq.n	8011bcc <TIM_OC2_SetConfig+0xe8>
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	4a25      	ldr	r2, [pc, #148]	; (8011c24 <TIM_OC2_SetConfig+0x140>)
 8011b90:	4293      	cmp	r3, r2
 8011b92:	d01b      	beq.n	8011bcc <TIM_OC2_SetConfig+0xe8>
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	4a24      	ldr	r2, [pc, #144]	; (8011c28 <TIM_OC2_SetConfig+0x144>)
 8011b98:	4293      	cmp	r3, r2
 8011b9a:	d017      	beq.n	8011bcc <TIM_OC2_SetConfig+0xe8>
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	4a23      	ldr	r2, [pc, #140]	; (8011c2c <TIM_OC2_SetConfig+0x148>)
 8011ba0:	4293      	cmp	r3, r2
 8011ba2:	d013      	beq.n	8011bcc <TIM_OC2_SetConfig+0xe8>
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	4a22      	ldr	r2, [pc, #136]	; (8011c30 <TIM_OC2_SetConfig+0x14c>)
 8011ba8:	4293      	cmp	r3, r2
 8011baa:	d00f      	beq.n	8011bcc <TIM_OC2_SetConfig+0xe8>
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	4a21      	ldr	r2, [pc, #132]	; (8011c34 <TIM_OC2_SetConfig+0x150>)
 8011bb0:	4293      	cmp	r3, r2
 8011bb2:	d00b      	beq.n	8011bcc <TIM_OC2_SetConfig+0xe8>
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	4a20      	ldr	r2, [pc, #128]	; (8011c38 <TIM_OC2_SetConfig+0x154>)
 8011bb8:	4293      	cmp	r3, r2
 8011bba:	d007      	beq.n	8011bcc <TIM_OC2_SetConfig+0xe8>
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	4a1f      	ldr	r2, [pc, #124]	; (8011c3c <TIM_OC2_SetConfig+0x158>)
 8011bc0:	4293      	cmp	r3, r2
 8011bc2:	d003      	beq.n	8011bcc <TIM_OC2_SetConfig+0xe8>
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	4a1e      	ldr	r2, [pc, #120]	; (8011c40 <TIM_OC2_SetConfig+0x15c>)
 8011bc8:	4293      	cmp	r3, r2
 8011bca:	d113      	bne.n	8011bf4 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011bcc:	693b      	ldr	r3, [r7, #16]
 8011bce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	695b      	ldr	r3, [r3, #20]
 8011be0:	009b      	lsls	r3, r3, #2
 8011be2:	693a      	ldr	r2, [r7, #16]
 8011be4:	4313      	orrs	r3, r2
 8011be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	699b      	ldr	r3, [r3, #24]
 8011bec:	009b      	lsls	r3, r3, #2
 8011bee:	693a      	ldr	r2, [r7, #16]
 8011bf0:	4313      	orrs	r3, r2
 8011bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	693a      	ldr	r2, [r7, #16]
 8011bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	68fa      	ldr	r2, [r7, #12]
 8011bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	685a      	ldr	r2, [r3, #4]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	697a      	ldr	r2, [r7, #20]
 8011c0c:	621a      	str	r2, [r3, #32]
}
 8011c0e:	bf00      	nop
 8011c10:	371c      	adds	r7, #28
 8011c12:	46bd      	mov	sp, r7
 8011c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c18:	4770      	bx	lr
 8011c1a:	bf00      	nop
 8011c1c:	40012c00 	.word	0x40012c00
 8011c20:	50012c00 	.word	0x50012c00
 8011c24:	40013400 	.word	0x40013400
 8011c28:	50013400 	.word	0x50013400
 8011c2c:	40014000 	.word	0x40014000
 8011c30:	50014000 	.word	0x50014000
 8011c34:	40014400 	.word	0x40014400
 8011c38:	50014400 	.word	0x50014400
 8011c3c:	40014800 	.word	0x40014800
 8011c40:	50014800 	.word	0x50014800

08011c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b087      	sub	sp, #28
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6a1b      	ldr	r3, [r3, #32]
 8011c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6a1b      	ldr	r3, [r3, #32]
 8011c58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	685b      	ldr	r3, [r3, #4]
 8011c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	69db      	ldr	r3, [r3, #28]
 8011c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	f023 0303 	bic.w	r3, r3, #3
 8011c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	68fa      	ldr	r2, [r7, #12]
 8011c86:	4313      	orrs	r3, r2
 8011c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011c8a:	697b      	ldr	r3, [r7, #20]
 8011c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	689b      	ldr	r3, [r3, #8]
 8011c96:	021b      	lsls	r3, r3, #8
 8011c98:	697a      	ldr	r2, [r7, #20]
 8011c9a:	4313      	orrs	r3, r2
 8011c9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	4a35      	ldr	r2, [pc, #212]	; (8011d78 <TIM_OC3_SetConfig+0x134>)
 8011ca2:	4293      	cmp	r3, r2
 8011ca4:	d00b      	beq.n	8011cbe <TIM_OC3_SetConfig+0x7a>
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	4a34      	ldr	r2, [pc, #208]	; (8011d7c <TIM_OC3_SetConfig+0x138>)
 8011caa:	4293      	cmp	r3, r2
 8011cac:	d007      	beq.n	8011cbe <TIM_OC3_SetConfig+0x7a>
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	4a33      	ldr	r2, [pc, #204]	; (8011d80 <TIM_OC3_SetConfig+0x13c>)
 8011cb2:	4293      	cmp	r3, r2
 8011cb4:	d003      	beq.n	8011cbe <TIM_OC3_SetConfig+0x7a>
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	4a32      	ldr	r2, [pc, #200]	; (8011d84 <TIM_OC3_SetConfig+0x140>)
 8011cba:	4293      	cmp	r3, r2
 8011cbc:	d10d      	bne.n	8011cda <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	68db      	ldr	r3, [r3, #12]
 8011cca:	021b      	lsls	r3, r3, #8
 8011ccc:	697a      	ldr	r2, [r7, #20]
 8011cce:	4313      	orrs	r3, r2
 8011cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	4a26      	ldr	r2, [pc, #152]	; (8011d78 <TIM_OC3_SetConfig+0x134>)
 8011cde:	4293      	cmp	r3, r2
 8011ce0:	d023      	beq.n	8011d2a <TIM_OC3_SetConfig+0xe6>
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	4a25      	ldr	r2, [pc, #148]	; (8011d7c <TIM_OC3_SetConfig+0x138>)
 8011ce6:	4293      	cmp	r3, r2
 8011ce8:	d01f      	beq.n	8011d2a <TIM_OC3_SetConfig+0xe6>
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	4a24      	ldr	r2, [pc, #144]	; (8011d80 <TIM_OC3_SetConfig+0x13c>)
 8011cee:	4293      	cmp	r3, r2
 8011cf0:	d01b      	beq.n	8011d2a <TIM_OC3_SetConfig+0xe6>
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	4a23      	ldr	r2, [pc, #140]	; (8011d84 <TIM_OC3_SetConfig+0x140>)
 8011cf6:	4293      	cmp	r3, r2
 8011cf8:	d017      	beq.n	8011d2a <TIM_OC3_SetConfig+0xe6>
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	4a22      	ldr	r2, [pc, #136]	; (8011d88 <TIM_OC3_SetConfig+0x144>)
 8011cfe:	4293      	cmp	r3, r2
 8011d00:	d013      	beq.n	8011d2a <TIM_OC3_SetConfig+0xe6>
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	4a21      	ldr	r2, [pc, #132]	; (8011d8c <TIM_OC3_SetConfig+0x148>)
 8011d06:	4293      	cmp	r3, r2
 8011d08:	d00f      	beq.n	8011d2a <TIM_OC3_SetConfig+0xe6>
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	4a20      	ldr	r2, [pc, #128]	; (8011d90 <TIM_OC3_SetConfig+0x14c>)
 8011d0e:	4293      	cmp	r3, r2
 8011d10:	d00b      	beq.n	8011d2a <TIM_OC3_SetConfig+0xe6>
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	4a1f      	ldr	r2, [pc, #124]	; (8011d94 <TIM_OC3_SetConfig+0x150>)
 8011d16:	4293      	cmp	r3, r2
 8011d18:	d007      	beq.n	8011d2a <TIM_OC3_SetConfig+0xe6>
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	4a1e      	ldr	r2, [pc, #120]	; (8011d98 <TIM_OC3_SetConfig+0x154>)
 8011d1e:	4293      	cmp	r3, r2
 8011d20:	d003      	beq.n	8011d2a <TIM_OC3_SetConfig+0xe6>
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	4a1d      	ldr	r2, [pc, #116]	; (8011d9c <TIM_OC3_SetConfig+0x158>)
 8011d26:	4293      	cmp	r3, r2
 8011d28:	d113      	bne.n	8011d52 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011d2a:	693b      	ldr	r3, [r7, #16]
 8011d2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	695b      	ldr	r3, [r3, #20]
 8011d3e:	011b      	lsls	r3, r3, #4
 8011d40:	693a      	ldr	r2, [r7, #16]
 8011d42:	4313      	orrs	r3, r2
 8011d44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	699b      	ldr	r3, [r3, #24]
 8011d4a:	011b      	lsls	r3, r3, #4
 8011d4c:	693a      	ldr	r2, [r7, #16]
 8011d4e:	4313      	orrs	r3, r2
 8011d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	693a      	ldr	r2, [r7, #16]
 8011d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	68fa      	ldr	r2, [r7, #12]
 8011d5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	685a      	ldr	r2, [r3, #4]
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	697a      	ldr	r2, [r7, #20]
 8011d6a:	621a      	str	r2, [r3, #32]
}
 8011d6c:	bf00      	nop
 8011d6e:	371c      	adds	r7, #28
 8011d70:	46bd      	mov	sp, r7
 8011d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d76:	4770      	bx	lr
 8011d78:	40012c00 	.word	0x40012c00
 8011d7c:	50012c00 	.word	0x50012c00
 8011d80:	40013400 	.word	0x40013400
 8011d84:	50013400 	.word	0x50013400
 8011d88:	40014000 	.word	0x40014000
 8011d8c:	50014000 	.word	0x50014000
 8011d90:	40014400 	.word	0x40014400
 8011d94:	50014400 	.word	0x50014400
 8011d98:	40014800 	.word	0x40014800
 8011d9c:	50014800 	.word	0x50014800

08011da0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011da0:	b480      	push	{r7}
 8011da2:	b087      	sub	sp, #28
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6a1b      	ldr	r3, [r3, #32]
 8011dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6a1b      	ldr	r3, [r3, #32]
 8011db4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	69db      	ldr	r3, [r3, #28]
 8011dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	021b      	lsls	r3, r3, #8
 8011de2:	68fa      	ldr	r2, [r7, #12]
 8011de4:	4313      	orrs	r3, r2
 8011de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011dee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	689b      	ldr	r3, [r3, #8]
 8011df4:	031b      	lsls	r3, r3, #12
 8011df6:	697a      	ldr	r2, [r7, #20]
 8011df8:	4313      	orrs	r3, r2
 8011dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	4a36      	ldr	r2, [pc, #216]	; (8011ed8 <TIM_OC4_SetConfig+0x138>)
 8011e00:	4293      	cmp	r3, r2
 8011e02:	d00b      	beq.n	8011e1c <TIM_OC4_SetConfig+0x7c>
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	4a35      	ldr	r2, [pc, #212]	; (8011edc <TIM_OC4_SetConfig+0x13c>)
 8011e08:	4293      	cmp	r3, r2
 8011e0a:	d007      	beq.n	8011e1c <TIM_OC4_SetConfig+0x7c>
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	4a34      	ldr	r2, [pc, #208]	; (8011ee0 <TIM_OC4_SetConfig+0x140>)
 8011e10:	4293      	cmp	r3, r2
 8011e12:	d003      	beq.n	8011e1c <TIM_OC4_SetConfig+0x7c>
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	4a33      	ldr	r2, [pc, #204]	; (8011ee4 <TIM_OC4_SetConfig+0x144>)
 8011e18:	4293      	cmp	r3, r2
 8011e1a:	d10d      	bne.n	8011e38 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8011e1c:	697b      	ldr	r3, [r7, #20]
 8011e1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	68db      	ldr	r3, [r3, #12]
 8011e28:	031b      	lsls	r3, r3, #12
 8011e2a:	697a      	ldr	r2, [r7, #20]
 8011e2c:	4313      	orrs	r3, r2
 8011e2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8011e30:	697b      	ldr	r3, [r7, #20]
 8011e32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011e36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	4a27      	ldr	r2, [pc, #156]	; (8011ed8 <TIM_OC4_SetConfig+0x138>)
 8011e3c:	4293      	cmp	r3, r2
 8011e3e:	d023      	beq.n	8011e88 <TIM_OC4_SetConfig+0xe8>
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	4a26      	ldr	r2, [pc, #152]	; (8011edc <TIM_OC4_SetConfig+0x13c>)
 8011e44:	4293      	cmp	r3, r2
 8011e46:	d01f      	beq.n	8011e88 <TIM_OC4_SetConfig+0xe8>
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	4a25      	ldr	r2, [pc, #148]	; (8011ee0 <TIM_OC4_SetConfig+0x140>)
 8011e4c:	4293      	cmp	r3, r2
 8011e4e:	d01b      	beq.n	8011e88 <TIM_OC4_SetConfig+0xe8>
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	4a24      	ldr	r2, [pc, #144]	; (8011ee4 <TIM_OC4_SetConfig+0x144>)
 8011e54:	4293      	cmp	r3, r2
 8011e56:	d017      	beq.n	8011e88 <TIM_OC4_SetConfig+0xe8>
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	4a23      	ldr	r2, [pc, #140]	; (8011ee8 <TIM_OC4_SetConfig+0x148>)
 8011e5c:	4293      	cmp	r3, r2
 8011e5e:	d013      	beq.n	8011e88 <TIM_OC4_SetConfig+0xe8>
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	4a22      	ldr	r2, [pc, #136]	; (8011eec <TIM_OC4_SetConfig+0x14c>)
 8011e64:	4293      	cmp	r3, r2
 8011e66:	d00f      	beq.n	8011e88 <TIM_OC4_SetConfig+0xe8>
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	4a21      	ldr	r2, [pc, #132]	; (8011ef0 <TIM_OC4_SetConfig+0x150>)
 8011e6c:	4293      	cmp	r3, r2
 8011e6e:	d00b      	beq.n	8011e88 <TIM_OC4_SetConfig+0xe8>
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	4a20      	ldr	r2, [pc, #128]	; (8011ef4 <TIM_OC4_SetConfig+0x154>)
 8011e74:	4293      	cmp	r3, r2
 8011e76:	d007      	beq.n	8011e88 <TIM_OC4_SetConfig+0xe8>
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	4a1f      	ldr	r2, [pc, #124]	; (8011ef8 <TIM_OC4_SetConfig+0x158>)
 8011e7c:	4293      	cmp	r3, r2
 8011e7e:	d003      	beq.n	8011e88 <TIM_OC4_SetConfig+0xe8>
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	4a1e      	ldr	r2, [pc, #120]	; (8011efc <TIM_OC4_SetConfig+0x15c>)
 8011e84:	4293      	cmp	r3, r2
 8011e86:	d113      	bne.n	8011eb0 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011e88:	693b      	ldr	r3, [r7, #16]
 8011e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011e8e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011e96:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	695b      	ldr	r3, [r3, #20]
 8011e9c:	019b      	lsls	r3, r3, #6
 8011e9e:	693a      	ldr	r2, [r7, #16]
 8011ea0:	4313      	orrs	r3, r2
 8011ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	699b      	ldr	r3, [r3, #24]
 8011ea8:	019b      	lsls	r3, r3, #6
 8011eaa:	693a      	ldr	r2, [r7, #16]
 8011eac:	4313      	orrs	r3, r2
 8011eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	693a      	ldr	r2, [r7, #16]
 8011eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	68fa      	ldr	r2, [r7, #12]
 8011eba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	685a      	ldr	r2, [r3, #4]
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	697a      	ldr	r2, [r7, #20]
 8011ec8:	621a      	str	r2, [r3, #32]
}
 8011eca:	bf00      	nop
 8011ecc:	371c      	adds	r7, #28
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed4:	4770      	bx	lr
 8011ed6:	bf00      	nop
 8011ed8:	40012c00 	.word	0x40012c00
 8011edc:	50012c00 	.word	0x50012c00
 8011ee0:	40013400 	.word	0x40013400
 8011ee4:	50013400 	.word	0x50013400
 8011ee8:	40014000 	.word	0x40014000
 8011eec:	50014000 	.word	0x50014000
 8011ef0:	40014400 	.word	0x40014400
 8011ef4:	50014400 	.word	0x50014400
 8011ef8:	40014800 	.word	0x40014800
 8011efc:	50014800 	.word	0x50014800

08011f00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011f00:	b480      	push	{r7}
 8011f02:	b087      	sub	sp, #28
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	6a1b      	ldr	r3, [r3, #32]
 8011f0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6a1b      	ldr	r3, [r3, #32]
 8011f14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	685b      	ldr	r3, [r3, #4]
 8011f20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	68fa      	ldr	r2, [r7, #12]
 8011f3a:	4313      	orrs	r3, r2
 8011f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011f3e:	693b      	ldr	r3, [r7, #16]
 8011f40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011f44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	689b      	ldr	r3, [r3, #8]
 8011f4a:	041b      	lsls	r3, r3, #16
 8011f4c:	693a      	ldr	r2, [r7, #16]
 8011f4e:	4313      	orrs	r3, r2
 8011f50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	4a21      	ldr	r2, [pc, #132]	; (8011fdc <TIM_OC5_SetConfig+0xdc>)
 8011f56:	4293      	cmp	r3, r2
 8011f58:	d023      	beq.n	8011fa2 <TIM_OC5_SetConfig+0xa2>
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	4a20      	ldr	r2, [pc, #128]	; (8011fe0 <TIM_OC5_SetConfig+0xe0>)
 8011f5e:	4293      	cmp	r3, r2
 8011f60:	d01f      	beq.n	8011fa2 <TIM_OC5_SetConfig+0xa2>
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	4a1f      	ldr	r2, [pc, #124]	; (8011fe4 <TIM_OC5_SetConfig+0xe4>)
 8011f66:	4293      	cmp	r3, r2
 8011f68:	d01b      	beq.n	8011fa2 <TIM_OC5_SetConfig+0xa2>
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	4a1e      	ldr	r2, [pc, #120]	; (8011fe8 <TIM_OC5_SetConfig+0xe8>)
 8011f6e:	4293      	cmp	r3, r2
 8011f70:	d017      	beq.n	8011fa2 <TIM_OC5_SetConfig+0xa2>
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	4a1d      	ldr	r2, [pc, #116]	; (8011fec <TIM_OC5_SetConfig+0xec>)
 8011f76:	4293      	cmp	r3, r2
 8011f78:	d013      	beq.n	8011fa2 <TIM_OC5_SetConfig+0xa2>
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	4a1c      	ldr	r2, [pc, #112]	; (8011ff0 <TIM_OC5_SetConfig+0xf0>)
 8011f7e:	4293      	cmp	r3, r2
 8011f80:	d00f      	beq.n	8011fa2 <TIM_OC5_SetConfig+0xa2>
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	4a1b      	ldr	r2, [pc, #108]	; (8011ff4 <TIM_OC5_SetConfig+0xf4>)
 8011f86:	4293      	cmp	r3, r2
 8011f88:	d00b      	beq.n	8011fa2 <TIM_OC5_SetConfig+0xa2>
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	4a1a      	ldr	r2, [pc, #104]	; (8011ff8 <TIM_OC5_SetConfig+0xf8>)
 8011f8e:	4293      	cmp	r3, r2
 8011f90:	d007      	beq.n	8011fa2 <TIM_OC5_SetConfig+0xa2>
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	4a19      	ldr	r2, [pc, #100]	; (8011ffc <TIM_OC5_SetConfig+0xfc>)
 8011f96:	4293      	cmp	r3, r2
 8011f98:	d003      	beq.n	8011fa2 <TIM_OC5_SetConfig+0xa2>
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	4a18      	ldr	r2, [pc, #96]	; (8012000 <TIM_OC5_SetConfig+0x100>)
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	d109      	bne.n	8011fb6 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011faa:	683b      	ldr	r3, [r7, #0]
 8011fac:	695b      	ldr	r3, [r3, #20]
 8011fae:	021b      	lsls	r3, r3, #8
 8011fb0:	697a      	ldr	r2, [r7, #20]
 8011fb2:	4313      	orrs	r3, r2
 8011fb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	697a      	ldr	r2, [r7, #20]
 8011fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	68fa      	ldr	r2, [r7, #12]
 8011fc0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	685a      	ldr	r2, [r3, #4]
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	693a      	ldr	r2, [r7, #16]
 8011fce:	621a      	str	r2, [r3, #32]
}
 8011fd0:	bf00      	nop
 8011fd2:	371c      	adds	r7, #28
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fda:	4770      	bx	lr
 8011fdc:	40012c00 	.word	0x40012c00
 8011fe0:	50012c00 	.word	0x50012c00
 8011fe4:	40013400 	.word	0x40013400
 8011fe8:	50013400 	.word	0x50013400
 8011fec:	40014000 	.word	0x40014000
 8011ff0:	50014000 	.word	0x50014000
 8011ff4:	40014400 	.word	0x40014400
 8011ff8:	50014400 	.word	0x50014400
 8011ffc:	40014800 	.word	0x40014800
 8012000:	50014800 	.word	0x50014800

08012004 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012004:	b480      	push	{r7}
 8012006:	b087      	sub	sp, #28
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
 801200c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6a1b      	ldr	r3, [r3, #32]
 8012012:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	6a1b      	ldr	r3, [r3, #32]
 8012018:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801202a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	021b      	lsls	r3, r3, #8
 801203e:	68fa      	ldr	r2, [r7, #12]
 8012040:	4313      	orrs	r3, r2
 8012042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012044:	693b      	ldr	r3, [r7, #16]
 8012046:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801204a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	689b      	ldr	r3, [r3, #8]
 8012050:	051b      	lsls	r3, r3, #20
 8012052:	693a      	ldr	r2, [r7, #16]
 8012054:	4313      	orrs	r3, r2
 8012056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	4a22      	ldr	r2, [pc, #136]	; (80120e4 <TIM_OC6_SetConfig+0xe0>)
 801205c:	4293      	cmp	r3, r2
 801205e:	d023      	beq.n	80120a8 <TIM_OC6_SetConfig+0xa4>
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	4a21      	ldr	r2, [pc, #132]	; (80120e8 <TIM_OC6_SetConfig+0xe4>)
 8012064:	4293      	cmp	r3, r2
 8012066:	d01f      	beq.n	80120a8 <TIM_OC6_SetConfig+0xa4>
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	4a20      	ldr	r2, [pc, #128]	; (80120ec <TIM_OC6_SetConfig+0xe8>)
 801206c:	4293      	cmp	r3, r2
 801206e:	d01b      	beq.n	80120a8 <TIM_OC6_SetConfig+0xa4>
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	4a1f      	ldr	r2, [pc, #124]	; (80120f0 <TIM_OC6_SetConfig+0xec>)
 8012074:	4293      	cmp	r3, r2
 8012076:	d017      	beq.n	80120a8 <TIM_OC6_SetConfig+0xa4>
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	4a1e      	ldr	r2, [pc, #120]	; (80120f4 <TIM_OC6_SetConfig+0xf0>)
 801207c:	4293      	cmp	r3, r2
 801207e:	d013      	beq.n	80120a8 <TIM_OC6_SetConfig+0xa4>
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	4a1d      	ldr	r2, [pc, #116]	; (80120f8 <TIM_OC6_SetConfig+0xf4>)
 8012084:	4293      	cmp	r3, r2
 8012086:	d00f      	beq.n	80120a8 <TIM_OC6_SetConfig+0xa4>
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	4a1c      	ldr	r2, [pc, #112]	; (80120fc <TIM_OC6_SetConfig+0xf8>)
 801208c:	4293      	cmp	r3, r2
 801208e:	d00b      	beq.n	80120a8 <TIM_OC6_SetConfig+0xa4>
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	4a1b      	ldr	r2, [pc, #108]	; (8012100 <TIM_OC6_SetConfig+0xfc>)
 8012094:	4293      	cmp	r3, r2
 8012096:	d007      	beq.n	80120a8 <TIM_OC6_SetConfig+0xa4>
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	4a1a      	ldr	r2, [pc, #104]	; (8012104 <TIM_OC6_SetConfig+0x100>)
 801209c:	4293      	cmp	r3, r2
 801209e:	d003      	beq.n	80120a8 <TIM_OC6_SetConfig+0xa4>
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	4a19      	ldr	r2, [pc, #100]	; (8012108 <TIM_OC6_SetConfig+0x104>)
 80120a4:	4293      	cmp	r3, r2
 80120a6:	d109      	bne.n	80120bc <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80120ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	695b      	ldr	r3, [r3, #20]
 80120b4:	029b      	lsls	r3, r3, #10
 80120b6:	697a      	ldr	r2, [r7, #20]
 80120b8:	4313      	orrs	r3, r2
 80120ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	697a      	ldr	r2, [r7, #20]
 80120c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	68fa      	ldr	r2, [r7, #12]
 80120c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	685a      	ldr	r2, [r3, #4]
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	693a      	ldr	r2, [r7, #16]
 80120d4:	621a      	str	r2, [r3, #32]
}
 80120d6:	bf00      	nop
 80120d8:	371c      	adds	r7, #28
 80120da:	46bd      	mov	sp, r7
 80120dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e0:	4770      	bx	lr
 80120e2:	bf00      	nop
 80120e4:	40012c00 	.word	0x40012c00
 80120e8:	50012c00 	.word	0x50012c00
 80120ec:	40013400 	.word	0x40013400
 80120f0:	50013400 	.word	0x50013400
 80120f4:	40014000 	.word	0x40014000
 80120f8:	50014000 	.word	0x50014000
 80120fc:	40014400 	.word	0x40014400
 8012100:	50014400 	.word	0x50014400
 8012104:	40014800 	.word	0x40014800
 8012108:	50014800 	.word	0x50014800

0801210c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801210c:	b480      	push	{r7}
 801210e:	b087      	sub	sp, #28
 8012110:	af00      	add	r7, sp, #0
 8012112:	60f8      	str	r0, [r7, #12]
 8012114:	60b9      	str	r1, [r7, #8]
 8012116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	6a1b      	ldr	r3, [r3, #32]
 801211c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	6a1b      	ldr	r3, [r3, #32]
 8012122:	f023 0201 	bic.w	r2, r3, #1
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	699b      	ldr	r3, [r3, #24]
 801212e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	011b      	lsls	r3, r3, #4
 801213c:	693a      	ldr	r2, [r7, #16]
 801213e:	4313      	orrs	r3, r2
 8012140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012142:	697b      	ldr	r3, [r7, #20]
 8012144:	f023 030a 	bic.w	r3, r3, #10
 8012148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801214a:	697a      	ldr	r2, [r7, #20]
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	4313      	orrs	r3, r2
 8012150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	693a      	ldr	r2, [r7, #16]
 8012156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	697a      	ldr	r2, [r7, #20]
 801215c:	621a      	str	r2, [r3, #32]
}
 801215e:	bf00      	nop
 8012160:	371c      	adds	r7, #28
 8012162:	46bd      	mov	sp, r7
 8012164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012168:	4770      	bx	lr

0801216a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801216a:	b480      	push	{r7}
 801216c:	b087      	sub	sp, #28
 801216e:	af00      	add	r7, sp, #0
 8012170:	60f8      	str	r0, [r7, #12]
 8012172:	60b9      	str	r1, [r7, #8]
 8012174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	6a1b      	ldr	r3, [r3, #32]
 801217a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	6a1b      	ldr	r3, [r3, #32]
 8012180:	f023 0210 	bic.w	r2, r3, #16
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	699b      	ldr	r3, [r3, #24]
 801218c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	031b      	lsls	r3, r3, #12
 801219a:	693a      	ldr	r2, [r7, #16]
 801219c:	4313      	orrs	r3, r2
 801219e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80121a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80121a8:	68bb      	ldr	r3, [r7, #8]
 80121aa:	011b      	lsls	r3, r3, #4
 80121ac:	697a      	ldr	r2, [r7, #20]
 80121ae:	4313      	orrs	r3, r2
 80121b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	693a      	ldr	r2, [r7, #16]
 80121b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	697a      	ldr	r2, [r7, #20]
 80121bc:	621a      	str	r2, [r3, #32]
}
 80121be:	bf00      	nop
 80121c0:	371c      	adds	r7, #28
 80121c2:	46bd      	mov	sp, r7
 80121c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c8:	4770      	bx	lr

080121ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80121ca:	b480      	push	{r7}
 80121cc:	b085      	sub	sp, #20
 80121ce:	af00      	add	r7, sp, #0
 80121d0:	6078      	str	r0, [r7, #4]
 80121d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	689b      	ldr	r3, [r3, #8]
 80121d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80121e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80121e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80121e6:	683a      	ldr	r2, [r7, #0]
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	4313      	orrs	r3, r2
 80121ec:	f043 0307 	orr.w	r3, r3, #7
 80121f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	68fa      	ldr	r2, [r7, #12]
 80121f6:	609a      	str	r2, [r3, #8]
}
 80121f8:	bf00      	nop
 80121fa:	3714      	adds	r7, #20
 80121fc:	46bd      	mov	sp, r7
 80121fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012202:	4770      	bx	lr

08012204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012204:	b480      	push	{r7}
 8012206:	b087      	sub	sp, #28
 8012208:	af00      	add	r7, sp, #0
 801220a:	60f8      	str	r0, [r7, #12]
 801220c:	60b9      	str	r1, [r7, #8]
 801220e:	607a      	str	r2, [r7, #4]
 8012210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	689b      	ldr	r3, [r3, #8]
 8012216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801221e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	021a      	lsls	r2, r3, #8
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	431a      	orrs	r2, r3
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	4313      	orrs	r3, r2
 801222c:	697a      	ldr	r2, [r7, #20]
 801222e:	4313      	orrs	r3, r2
 8012230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	697a      	ldr	r2, [r7, #20]
 8012236:	609a      	str	r2, [r3, #8]
}
 8012238:	bf00      	nop
 801223a:	371c      	adds	r7, #28
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr

08012244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012244:	b480      	push	{r7}
 8012246:	b087      	sub	sp, #28
 8012248:	af00      	add	r7, sp, #0
 801224a:	60f8      	str	r0, [r7, #12]
 801224c:	60b9      	str	r1, [r7, #8]
 801224e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012250:	68bb      	ldr	r3, [r7, #8]
 8012252:	f003 031f 	and.w	r3, r3, #31
 8012256:	2201      	movs	r2, #1
 8012258:	fa02 f303 	lsl.w	r3, r2, r3
 801225c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	6a1a      	ldr	r2, [r3, #32]
 8012262:	697b      	ldr	r3, [r7, #20]
 8012264:	43db      	mvns	r3, r3
 8012266:	401a      	ands	r2, r3
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	6a1a      	ldr	r2, [r3, #32]
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	f003 031f 	and.w	r3, r3, #31
 8012276:	6879      	ldr	r1, [r7, #4]
 8012278:	fa01 f303 	lsl.w	r3, r1, r3
 801227c:	431a      	orrs	r2, r3
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	621a      	str	r2, [r3, #32]
}
 8012282:	bf00      	nop
 8012284:	371c      	adds	r7, #28
 8012286:	46bd      	mov	sp, r7
 8012288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228c:	4770      	bx	lr
	...

08012290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012290:	b480      	push	{r7}
 8012292:	b085      	sub	sp, #20
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80122a0:	2b01      	cmp	r3, #1
 80122a2:	d101      	bne.n	80122a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80122a4:	2302      	movs	r3, #2
 80122a6:	e097      	b.n	80123d8 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2201      	movs	r2, #1
 80122ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2202      	movs	r2, #2
 80122b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	685b      	ldr	r3, [r3, #4]
 80122be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	689b      	ldr	r3, [r3, #8]
 80122c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	4a45      	ldr	r2, [pc, #276]	; (80123e4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80122ce:	4293      	cmp	r3, r2
 80122d0:	d00e      	beq.n	80122f0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	4a44      	ldr	r2, [pc, #272]	; (80123e8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80122d8:	4293      	cmp	r3, r2
 80122da:	d009      	beq.n	80122f0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	4a42      	ldr	r2, [pc, #264]	; (80123ec <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80122e2:	4293      	cmp	r3, r2
 80122e4:	d004      	beq.n	80122f0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	4a41      	ldr	r2, [pc, #260]	; (80123f0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80122ec:	4293      	cmp	r3, r2
 80122ee:	d108      	bne.n	8012302 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80122f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80122f8:	683b      	ldr	r3, [r7, #0]
 80122fa:	685b      	ldr	r3, [r3, #4]
 80122fc:	68fa      	ldr	r2, [r7, #12]
 80122fe:	4313      	orrs	r3, r2
 8012300:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8012308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801230c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	68fa      	ldr	r2, [r7, #12]
 8012314:	4313      	orrs	r3, r2
 8012316:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	68fa      	ldr	r2, [r7, #12]
 801231e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	4a2f      	ldr	r2, [pc, #188]	; (80123e4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8012326:	4293      	cmp	r3, r2
 8012328:	d040      	beq.n	80123ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	4a2e      	ldr	r2, [pc, #184]	; (80123e8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8012330:	4293      	cmp	r3, r2
 8012332:	d03b      	beq.n	80123ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801233c:	d036      	beq.n	80123ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012346:	d031      	beq.n	80123ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	4a29      	ldr	r2, [pc, #164]	; (80123f4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 801234e:	4293      	cmp	r3, r2
 8012350:	d02c      	beq.n	80123ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	4a28      	ldr	r2, [pc, #160]	; (80123f8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8012358:	4293      	cmp	r3, r2
 801235a:	d027      	beq.n	80123ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	4a26      	ldr	r2, [pc, #152]	; (80123fc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8012362:	4293      	cmp	r3, r2
 8012364:	d022      	beq.n	80123ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	4a25      	ldr	r2, [pc, #148]	; (8012400 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 801236c:	4293      	cmp	r3, r2
 801236e:	d01d      	beq.n	80123ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	4a23      	ldr	r2, [pc, #140]	; (8012404 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8012376:	4293      	cmp	r3, r2
 8012378:	d018      	beq.n	80123ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	4a22      	ldr	r2, [pc, #136]	; (8012408 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8012380:	4293      	cmp	r3, r2
 8012382:	d013      	beq.n	80123ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	4a18      	ldr	r2, [pc, #96]	; (80123ec <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 801238a:	4293      	cmp	r3, r2
 801238c:	d00e      	beq.n	80123ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	4a17      	ldr	r2, [pc, #92]	; (80123f0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8012394:	4293      	cmp	r3, r2
 8012396:	d009      	beq.n	80123ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	4a1b      	ldr	r2, [pc, #108]	; (801240c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 801239e:	4293      	cmp	r3, r2
 80123a0:	d004      	beq.n	80123ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	4a1a      	ldr	r2, [pc, #104]	; (8012410 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80123a8:	4293      	cmp	r3, r2
 80123aa:	d10c      	bne.n	80123c6 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80123b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	689b      	ldr	r3, [r3, #8]
 80123b8:	68ba      	ldr	r2, [r7, #8]
 80123ba:	4313      	orrs	r3, r2
 80123bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	68ba      	ldr	r2, [r7, #8]
 80123c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	2201      	movs	r2, #1
 80123ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2200      	movs	r2, #0
 80123d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80123d6:	2300      	movs	r3, #0
}
 80123d8:	4618      	mov	r0, r3
 80123da:	3714      	adds	r7, #20
 80123dc:	46bd      	mov	sp, r7
 80123de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e2:	4770      	bx	lr
 80123e4:	40012c00 	.word	0x40012c00
 80123e8:	50012c00 	.word	0x50012c00
 80123ec:	40013400 	.word	0x40013400
 80123f0:	50013400 	.word	0x50013400
 80123f4:	40000400 	.word	0x40000400
 80123f8:	50000400 	.word	0x50000400
 80123fc:	40000800 	.word	0x40000800
 8012400:	50000800 	.word	0x50000800
 8012404:	40000c00 	.word	0x40000c00
 8012408:	50000c00 	.word	0x50000c00
 801240c:	40014000 	.word	0x40014000
 8012410:	50014000 	.word	0x50014000

08012414 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012414:	b480      	push	{r7}
 8012416:	b085      	sub	sp, #20
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801241e:	2300      	movs	r3, #0
 8012420:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012428:	2b01      	cmp	r3, #1
 801242a:	d101      	bne.n	8012430 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801242c:	2302      	movs	r3, #2
 801242e:	e0a5      	b.n	801257c <HAL_TIMEx_ConfigBreakDeadTime+0x168>
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	2201      	movs	r2, #1
 8012434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	68db      	ldr	r3, [r3, #12]
 8012442:	4313      	orrs	r3, r2
 8012444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	689b      	ldr	r3, [r3, #8]
 8012450:	4313      	orrs	r3, r2
 8012452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	4313      	orrs	r3, r2
 8012460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	4313      	orrs	r3, r2
 801246e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	691b      	ldr	r3, [r3, #16]
 801247a:	4313      	orrs	r3, r2
 801247c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012484:	683b      	ldr	r3, [r7, #0]
 8012486:	695b      	ldr	r3, [r3, #20]
 8012488:	4313      	orrs	r3, r2
 801248a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012496:	4313      	orrs	r3, r2
 8012498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	699b      	ldr	r3, [r3, #24]
 80124a4:	041b      	lsls	r3, r3, #16
 80124a6:	4313      	orrs	r3, r2
 80124a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	4a36      	ldr	r2, [pc, #216]	; (8012588 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 80124b0:	4293      	cmp	r3, r2
 80124b2:	d00e      	beq.n	80124d2 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	4a34      	ldr	r2, [pc, #208]	; (801258c <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 80124ba:	4293      	cmp	r3, r2
 80124bc:	d009      	beq.n	80124d2 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	4a33      	ldr	r2, [pc, #204]	; (8012590 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 80124c4:	4293      	cmp	r3, r2
 80124c6:	d004      	beq.n	80124d2 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	4a31      	ldr	r2, [pc, #196]	; (8012594 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d106      	bne.n	80124e0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	69db      	ldr	r3, [r3, #28]
 80124dc:	4313      	orrs	r3, r2
 80124de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	4a28      	ldr	r2, [pc, #160]	; (8012588 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 80124e6:	4293      	cmp	r3, r2
 80124e8:	d00e      	beq.n	8012508 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	4a27      	ldr	r2, [pc, #156]	; (801258c <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 80124f0:	4293      	cmp	r3, r2
 80124f2:	d009      	beq.n	8012508 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	4a25      	ldr	r2, [pc, #148]	; (8012590 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 80124fa:	4293      	cmp	r3, r2
 80124fc:	d004      	beq.n	8012508 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	4a24      	ldr	r2, [pc, #144]	; (8012594 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8012504:	4293      	cmp	r3, r2
 8012506:	d130      	bne.n	801256a <HAL_TIMEx_ConfigBreakDeadTime+0x156>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012512:	051b      	lsls	r3, r3, #20
 8012514:	4313      	orrs	r3, r2
 8012516:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	6a1b      	ldr	r3, [r3, #32]
 8012522:	4313      	orrs	r3, r2
 8012524:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012530:	4313      	orrs	r3, r2
 8012532:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	4a13      	ldr	r2, [pc, #76]	; (8012588 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 801253a:	4293      	cmp	r3, r2
 801253c:	d00e      	beq.n	801255c <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	4a12      	ldr	r2, [pc, #72]	; (801258c <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8012544:	4293      	cmp	r3, r2
 8012546:	d009      	beq.n	801255c <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	4a10      	ldr	r2, [pc, #64]	; (8012590 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 801254e:	4293      	cmp	r3, r2
 8012550:	d004      	beq.n	801255c <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	4a0f      	ldr	r2, [pc, #60]	; (8012594 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8012558:	4293      	cmp	r3, r2
 801255a:	d106      	bne.n	801256a <HAL_TIMEx_ConfigBreakDeadTime+0x156>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012566:	4313      	orrs	r3, r2
 8012568:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	68fa      	ldr	r2, [r7, #12]
 8012570:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2200      	movs	r2, #0
 8012576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801257a:	2300      	movs	r3, #0
}
 801257c:	4618      	mov	r0, r3
 801257e:	3714      	adds	r7, #20
 8012580:	46bd      	mov	sp, r7
 8012582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012586:	4770      	bx	lr
 8012588:	40012c00 	.word	0x40012c00
 801258c:	50012c00 	.word	0x50012c00
 8012590:	40013400 	.word	0x40013400
 8012594:	50013400 	.word	0x50013400

08012598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012598:	b480      	push	{r7}
 801259a:	b083      	sub	sp, #12
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80125a0:	bf00      	nop
 80125a2:	370c      	adds	r7, #12
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr

080125ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80125ac:	b480      	push	{r7}
 80125ae:	b083      	sub	sp, #12
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80125b4:	bf00      	nop
 80125b6:	370c      	adds	r7, #12
 80125b8:	46bd      	mov	sp, r7
 80125ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125be:	4770      	bx	lr

080125c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80125c0:	b480      	push	{r7}
 80125c2:	b083      	sub	sp, #12
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80125c8:	bf00      	nop
 80125ca:	370c      	adds	r7, #12
 80125cc:	46bd      	mov	sp, r7
 80125ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d2:	4770      	bx	lr

080125d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80125d4:	b480      	push	{r7}
 80125d6:	b083      	sub	sp, #12
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80125dc:	bf00      	nop
 80125de:	370c      	adds	r7, #12
 80125e0:	46bd      	mov	sp, r7
 80125e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e6:	4770      	bx	lr

080125e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80125e8:	b480      	push	{r7}
 80125ea:	b083      	sub	sp, #12
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80125f0:	bf00      	nop
 80125f2:	370c      	adds	r7, #12
 80125f4:	46bd      	mov	sp, r7
 80125f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fa:	4770      	bx	lr

080125fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80125fc:	b480      	push	{r7}
 80125fe:	b083      	sub	sp, #12
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8012604:	bf00      	nop
 8012606:	370c      	adds	r7, #12
 8012608:	46bd      	mov	sp, r7
 801260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260e:	4770      	bx	lr

08012610 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8012610:	b480      	push	{r7}
 8012612:	b083      	sub	sp, #12
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8012618:	bf00      	nop
 801261a:	370c      	adds	r7, #12
 801261c:	46bd      	mov	sp, r7
 801261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012622:	4770      	bx	lr

08012624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b082      	sub	sp, #8
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d101      	bne.n	8012636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012632:	2301      	movs	r3, #1
 8012634:	e042      	b.n	80126bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801263c:	2b00      	cmp	r3, #0
 801263e:	d106      	bne.n	801264e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2200      	movs	r2, #0
 8012644:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f7ef fc7d 	bl	8001f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2224      	movs	r2, #36	; 0x24
 8012652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	681a      	ldr	r2, [r3, #0]
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	f022 0201 	bic.w	r2, r2, #1
 8012664:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f000 f8ba 	bl	80127e0 <UART_SetConfig>
 801266c:	4603      	mov	r3, r0
 801266e:	2b01      	cmp	r3, #1
 8012670:	d101      	bne.n	8012676 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012672:	2301      	movs	r3, #1
 8012674:	e022      	b.n	80126bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801267a:	2b00      	cmp	r3, #0
 801267c:	d002      	beq.n	8012684 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801267e:	6878      	ldr	r0, [r7, #4]
 8012680:	f000 fa5c 	bl	8012b3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	685a      	ldr	r2, [r3, #4]
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012692:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	689a      	ldr	r2, [r3, #8]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80126a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	681a      	ldr	r2, [r3, #0]
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	f042 0201 	orr.w	r2, r2, #1
 80126b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	f000 fae3 	bl	8012c80 <UART_CheckIdleState>
 80126ba:	4603      	mov	r3, r0
}
 80126bc:	4618      	mov	r0, r3
 80126be:	3708      	adds	r7, #8
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b08a      	sub	sp, #40	; 0x28
 80126c8:	af02      	add	r7, sp, #8
 80126ca:	60f8      	str	r0, [r7, #12]
 80126cc:	60b9      	str	r1, [r7, #8]
 80126ce:	603b      	str	r3, [r7, #0]
 80126d0:	4613      	mov	r3, r2
 80126d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80126da:	2b20      	cmp	r3, #32
 80126dc:	d17b      	bne.n	80127d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d002      	beq.n	80126ea <HAL_UART_Transmit+0x26>
 80126e4:	88fb      	ldrh	r3, [r7, #6]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d101      	bne.n	80126ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80126ea:	2301      	movs	r3, #1
 80126ec:	e074      	b.n	80127d8 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	2200      	movs	r2, #0
 80126f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	2221      	movs	r2, #33	; 0x21
 80126fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80126fe:	f7f5 fa5d 	bl	8007bbc <HAL_GetTick>
 8012702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	88fa      	ldrh	r2, [r7, #6]
 8012708:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	88fa      	ldrh	r2, [r7, #6]
 8012710:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	689b      	ldr	r3, [r3, #8]
 8012718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801271c:	d108      	bne.n	8012730 <HAL_UART_Transmit+0x6c>
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	691b      	ldr	r3, [r3, #16]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d104      	bne.n	8012730 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8012726:	2300      	movs	r3, #0
 8012728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	61bb      	str	r3, [r7, #24]
 801272e:	e003      	b.n	8012738 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012734:	2300      	movs	r3, #0
 8012736:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012738:	e030      	b.n	801279c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	9300      	str	r3, [sp, #0]
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	2200      	movs	r2, #0
 8012742:	2180      	movs	r1, #128	; 0x80
 8012744:	68f8      	ldr	r0, [r7, #12]
 8012746:	f000 fb45 	bl	8012dd4 <UART_WaitOnFlagUntilTimeout>
 801274a:	4603      	mov	r3, r0
 801274c:	2b00      	cmp	r3, #0
 801274e:	d005      	beq.n	801275c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	2220      	movs	r2, #32
 8012754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8012758:	2303      	movs	r3, #3
 801275a:	e03d      	b.n	80127d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801275c:	69fb      	ldr	r3, [r7, #28]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d10b      	bne.n	801277a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012762:	69bb      	ldr	r3, [r7, #24]
 8012764:	881b      	ldrh	r3, [r3, #0]
 8012766:	461a      	mov	r2, r3
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012770:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8012772:	69bb      	ldr	r3, [r7, #24]
 8012774:	3302      	adds	r3, #2
 8012776:	61bb      	str	r3, [r7, #24]
 8012778:	e007      	b.n	801278a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801277a:	69fb      	ldr	r3, [r7, #28]
 801277c:	781a      	ldrb	r2, [r3, #0]
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012784:	69fb      	ldr	r3, [r7, #28]
 8012786:	3301      	adds	r3, #1
 8012788:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012790:	b29b      	uxth	r3, r3
 8012792:	3b01      	subs	r3, #1
 8012794:	b29a      	uxth	r2, r3
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80127a2:	b29b      	uxth	r3, r3
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d1c8      	bne.n	801273a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	9300      	str	r3, [sp, #0]
 80127ac:	697b      	ldr	r3, [r7, #20]
 80127ae:	2200      	movs	r2, #0
 80127b0:	2140      	movs	r1, #64	; 0x40
 80127b2:	68f8      	ldr	r0, [r7, #12]
 80127b4:	f000 fb0e 	bl	8012dd4 <UART_WaitOnFlagUntilTimeout>
 80127b8:	4603      	mov	r3, r0
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d005      	beq.n	80127ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	2220      	movs	r2, #32
 80127c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80127c6:	2303      	movs	r3, #3
 80127c8:	e006      	b.n	80127d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	2220      	movs	r2, #32
 80127ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80127d2:	2300      	movs	r3, #0
 80127d4:	e000      	b.n	80127d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80127d6:	2302      	movs	r3, #2
  }
}
 80127d8:	4618      	mov	r0, r3
 80127da:	3720      	adds	r7, #32
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}

080127e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80127e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80127e4:	b094      	sub	sp, #80	; 0x50
 80127e6:	af00      	add	r7, sp, #0
 80127e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80127ea:	2300      	movs	r3, #0
 80127ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80127f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f2:	681a      	ldr	r2, [r3, #0]
 80127f4:	4b83      	ldr	r3, [pc, #524]	; (8012a04 <UART_SetConfig+0x224>)
 80127f6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80127f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127fa:	689a      	ldr	r2, [r3, #8]
 80127fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127fe:	691b      	ldr	r3, [r3, #16]
 8012800:	431a      	orrs	r2, r3
 8012802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012804:	695b      	ldr	r3, [r3, #20]
 8012806:	431a      	orrs	r2, r3
 8012808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801280a:	69db      	ldr	r3, [r3, #28]
 801280c:	4313      	orrs	r3, r2
 801280e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	497c      	ldr	r1, [pc, #496]	; (8012a08 <UART_SetConfig+0x228>)
 8012818:	4019      	ands	r1, r3
 801281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801281c:	681a      	ldr	r2, [r3, #0]
 801281e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012820:	430b      	orrs	r3, r1
 8012822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	685b      	ldr	r3, [r3, #4]
 801282a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012830:	68d9      	ldr	r1, [r3, #12]
 8012832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012834:	681a      	ldr	r2, [r3, #0]
 8012836:	ea40 0301 	orr.w	r3, r0, r1
 801283a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801283e:	699b      	ldr	r3, [r3, #24]
 8012840:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012844:	681a      	ldr	r2, [r3, #0]
 8012846:	4b6f      	ldr	r3, [pc, #444]	; (8012a04 <UART_SetConfig+0x224>)
 8012848:	429a      	cmp	r2, r3
 801284a:	d009      	beq.n	8012860 <UART_SetConfig+0x80>
 801284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801284e:	681a      	ldr	r2, [r3, #0]
 8012850:	4b6e      	ldr	r3, [pc, #440]	; (8012a0c <UART_SetConfig+0x22c>)
 8012852:	429a      	cmp	r2, r3
 8012854:	d004      	beq.n	8012860 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012858:	6a1a      	ldr	r2, [r3, #32]
 801285a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801285c:	4313      	orrs	r3, r2
 801285e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	689b      	ldr	r3, [r3, #8]
 8012866:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 801286a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 801286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012870:	681a      	ldr	r2, [r3, #0]
 8012872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012874:	430b      	orrs	r3, r1
 8012876:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801287e:	f023 000f 	bic.w	r0, r3, #15
 8012882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012884:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012888:	681a      	ldr	r2, [r3, #0]
 801288a:	ea40 0301 	orr.w	r3, r0, r1
 801288e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012892:	681a      	ldr	r2, [r3, #0]
 8012894:	4b5e      	ldr	r3, [pc, #376]	; (8012a10 <UART_SetConfig+0x230>)
 8012896:	429a      	cmp	r2, r3
 8012898:	d102      	bne.n	80128a0 <UART_SetConfig+0xc0>
 801289a:	2301      	movs	r3, #1
 801289c:	64bb      	str	r3, [r7, #72]	; 0x48
 801289e:	e032      	b.n	8012906 <UART_SetConfig+0x126>
 80128a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a2:	681a      	ldr	r2, [r3, #0]
 80128a4:	4b5b      	ldr	r3, [pc, #364]	; (8012a14 <UART_SetConfig+0x234>)
 80128a6:	429a      	cmp	r2, r3
 80128a8:	d102      	bne.n	80128b0 <UART_SetConfig+0xd0>
 80128aa:	2302      	movs	r3, #2
 80128ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80128ae:	e02a      	b.n	8012906 <UART_SetConfig+0x126>
 80128b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b2:	681a      	ldr	r2, [r3, #0]
 80128b4:	4b58      	ldr	r3, [pc, #352]	; (8012a18 <UART_SetConfig+0x238>)
 80128b6:	429a      	cmp	r2, r3
 80128b8:	d102      	bne.n	80128c0 <UART_SetConfig+0xe0>
 80128ba:	2304      	movs	r3, #4
 80128bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80128be:	e022      	b.n	8012906 <UART_SetConfig+0x126>
 80128c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128c2:	681a      	ldr	r2, [r3, #0]
 80128c4:	4b55      	ldr	r3, [pc, #340]	; (8012a1c <UART_SetConfig+0x23c>)
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d102      	bne.n	80128d0 <UART_SetConfig+0xf0>
 80128ca:	2308      	movs	r3, #8
 80128cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80128ce:	e01a      	b.n	8012906 <UART_SetConfig+0x126>
 80128d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d2:	681a      	ldr	r2, [r3, #0]
 80128d4:	4b52      	ldr	r3, [pc, #328]	; (8012a20 <UART_SetConfig+0x240>)
 80128d6:	429a      	cmp	r2, r3
 80128d8:	d102      	bne.n	80128e0 <UART_SetConfig+0x100>
 80128da:	2310      	movs	r3, #16
 80128dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80128de:	e012      	b.n	8012906 <UART_SetConfig+0x126>
 80128e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128e2:	681a      	ldr	r2, [r3, #0]
 80128e4:	4b4f      	ldr	r3, [pc, #316]	; (8012a24 <UART_SetConfig+0x244>)
 80128e6:	429a      	cmp	r2, r3
 80128e8:	d103      	bne.n	80128f2 <UART_SetConfig+0x112>
 80128ea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80128ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80128f0:	e009      	b.n	8012906 <UART_SetConfig+0x126>
 80128f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f4:	681a      	ldr	r2, [r3, #0]
 80128f6:	4b43      	ldr	r3, [pc, #268]	; (8012a04 <UART_SetConfig+0x224>)
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d102      	bne.n	8012902 <UART_SetConfig+0x122>
 80128fc:	2320      	movs	r3, #32
 80128fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8012900:	e001      	b.n	8012906 <UART_SetConfig+0x126>
 8012902:	2300      	movs	r3, #0
 8012904:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	4b3e      	ldr	r3, [pc, #248]	; (8012a04 <UART_SetConfig+0x224>)
 801290c:	429a      	cmp	r2, r3
 801290e:	d005      	beq.n	801291c <UART_SetConfig+0x13c>
 8012910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012912:	681a      	ldr	r2, [r3, #0]
 8012914:	4b3d      	ldr	r3, [pc, #244]	; (8012a0c <UART_SetConfig+0x22c>)
 8012916:	429a      	cmp	r2, r3
 8012918:	f040 8088 	bne.w	8012a2c <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801291c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801291e:	2200      	movs	r2, #0
 8012920:	623b      	str	r3, [r7, #32]
 8012922:	627a      	str	r2, [r7, #36]	; 0x24
 8012924:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8012928:	f7fc fbfe 	bl	800f128 <HAL_RCCEx_GetPeriphCLKFreq>
 801292c:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 801292e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012930:	2b00      	cmp	r3, #0
 8012932:	f000 80eb 	beq.w	8012b0c <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801293a:	4a3b      	ldr	r2, [pc, #236]	; (8012a28 <UART_SetConfig+0x248>)
 801293c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012940:	461a      	mov	r2, r3
 8012942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012944:	fbb3 f3f2 	udiv	r3, r3, r2
 8012948:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801294c:	685a      	ldr	r2, [r3, #4]
 801294e:	4613      	mov	r3, r2
 8012950:	005b      	lsls	r3, r3, #1
 8012952:	4413      	add	r3, r2
 8012954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012956:	429a      	cmp	r2, r3
 8012958:	d305      	bcc.n	8012966 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801295c:	685b      	ldr	r3, [r3, #4]
 801295e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012962:	429a      	cmp	r2, r3
 8012964:	d903      	bls.n	801296e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8012966:	2301      	movs	r3, #1
 8012968:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801296c:	e048      	b.n	8012a00 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801296e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012970:	2200      	movs	r2, #0
 8012972:	61bb      	str	r3, [r7, #24]
 8012974:	61fa      	str	r2, [r7, #28]
 8012976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801297a:	4a2b      	ldr	r2, [pc, #172]	; (8012a28 <UART_SetConfig+0x248>)
 801297c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012980:	b29b      	uxth	r3, r3
 8012982:	2200      	movs	r2, #0
 8012984:	613b      	str	r3, [r7, #16]
 8012986:	617a      	str	r2, [r7, #20]
 8012988:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801298c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8012990:	f7ed fdb2 	bl	80004f8 <__aeabi_uldivmod>
 8012994:	4602      	mov	r2, r0
 8012996:	460b      	mov	r3, r1
 8012998:	4610      	mov	r0, r2
 801299a:	4619      	mov	r1, r3
 801299c:	f04f 0200 	mov.w	r2, #0
 80129a0:	f04f 0300 	mov.w	r3, #0
 80129a4:	020b      	lsls	r3, r1, #8
 80129a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80129aa:	0202      	lsls	r2, r0, #8
 80129ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80129ae:	6849      	ldr	r1, [r1, #4]
 80129b0:	0849      	lsrs	r1, r1, #1
 80129b2:	2000      	movs	r0, #0
 80129b4:	460c      	mov	r4, r1
 80129b6:	4605      	mov	r5, r0
 80129b8:	eb12 0804 	adds.w	r8, r2, r4
 80129bc:	eb43 0905 	adc.w	r9, r3, r5
 80129c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c2:	685b      	ldr	r3, [r3, #4]
 80129c4:	2200      	movs	r2, #0
 80129c6:	60bb      	str	r3, [r7, #8]
 80129c8:	60fa      	str	r2, [r7, #12]
 80129ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80129ce:	4640      	mov	r0, r8
 80129d0:	4649      	mov	r1, r9
 80129d2:	f7ed fd91 	bl	80004f8 <__aeabi_uldivmod>
 80129d6:	4602      	mov	r2, r0
 80129d8:	460b      	mov	r3, r1
 80129da:	4613      	mov	r3, r2
 80129dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80129de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80129e4:	d308      	bcc.n	80129f8 <UART_SetConfig+0x218>
 80129e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80129ec:	d204      	bcs.n	80129f8 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80129ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80129f4:	60da      	str	r2, [r3, #12]
 80129f6:	e003      	b.n	8012a00 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80129f8:	2301      	movs	r3, #1
 80129fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80129fe:	e085      	b.n	8012b0c <UART_SetConfig+0x32c>
 8012a00:	e084      	b.n	8012b0c <UART_SetConfig+0x32c>
 8012a02:	bf00      	nop
 8012a04:	46002400 	.word	0x46002400
 8012a08:	cfff69f3 	.word	0xcfff69f3
 8012a0c:	56002400 	.word	0x56002400
 8012a10:	40013800 	.word	0x40013800
 8012a14:	40004400 	.word	0x40004400
 8012a18:	40004800 	.word	0x40004800
 8012a1c:	40004c00 	.word	0x40004c00
 8012a20:	40005000 	.word	0x40005000
 8012a24:	40006400 	.word	0x40006400
 8012a28:	0802be54 	.word	0x0802be54
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a2e:	69db      	ldr	r3, [r3, #28]
 8012a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012a34:	d13c      	bne.n	8012ab0 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8012a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a38:	2200      	movs	r2, #0
 8012a3a:	603b      	str	r3, [r7, #0]
 8012a3c:	607a      	str	r2, [r7, #4]
 8012a3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012a42:	f7fc fb71 	bl	800f128 <HAL_RCCEx_GetPeriphCLKFreq>
 8012a46:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d05e      	beq.n	8012b0c <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a52:	4a39      	ldr	r2, [pc, #228]	; (8012b38 <UART_SetConfig+0x358>)
 8012a54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012a58:	461a      	mov	r2, r3
 8012a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a60:	005a      	lsls	r2, r3, #1
 8012a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a64:	685b      	ldr	r3, [r3, #4]
 8012a66:	085b      	lsrs	r3, r3, #1
 8012a68:	441a      	add	r2, r3
 8012a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a72:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a76:	2b0f      	cmp	r3, #15
 8012a78:	d916      	bls.n	8012aa8 <UART_SetConfig+0x2c8>
 8012a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a80:	d212      	bcs.n	8012aa8 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a84:	b29b      	uxth	r3, r3
 8012a86:	f023 030f 	bic.w	r3, r3, #15
 8012a8a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a8e:	085b      	lsrs	r3, r3, #1
 8012a90:	b29b      	uxth	r3, r3
 8012a92:	f003 0307 	and.w	r3, r3, #7
 8012a96:	b29a      	uxth	r2, r3
 8012a98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012a9a:	4313      	orrs	r3, r2
 8012a9c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8012a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012aa4:	60da      	str	r2, [r3, #12]
 8012aa6:	e031      	b.n	8012b0c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8012aa8:	2301      	movs	r3, #1
 8012aaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012aae:	e02d      	b.n	8012b0c <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8012ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	469a      	mov	sl, r3
 8012ab6:	4693      	mov	fp, r2
 8012ab8:	4650      	mov	r0, sl
 8012aba:	4659      	mov	r1, fp
 8012abc:	f7fc fb34 	bl	800f128 <HAL_RCCEx_GetPeriphCLKFreq>
 8012ac0:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8012ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d021      	beq.n	8012b0c <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012acc:	4a1a      	ldr	r2, [pc, #104]	; (8012b38 <UART_SetConfig+0x358>)
 8012ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ad6:	fbb3 f2f2 	udiv	r2, r3, r2
 8012ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012adc:	685b      	ldr	r3, [r3, #4]
 8012ade:	085b      	lsrs	r3, r3, #1
 8012ae0:	441a      	add	r2, r3
 8012ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae4:	685b      	ldr	r3, [r3, #4]
 8012ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8012aea:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aee:	2b0f      	cmp	r3, #15
 8012af0:	d909      	bls.n	8012b06 <UART_SetConfig+0x326>
 8012af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012af8:	d205      	bcs.n	8012b06 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012afc:	b29a      	uxth	r2, r3
 8012afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	60da      	str	r2, [r3, #12]
 8012b04:	e002      	b.n	8012b0c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8012b06:	2301      	movs	r3, #1
 8012b08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b0e:	2201      	movs	r2, #1
 8012b10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8012b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b16:	2201      	movs	r2, #1
 8012b18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b1e:	2200      	movs	r2, #0
 8012b20:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8012b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b24:	2200      	movs	r2, #0
 8012b26:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8012b28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3750      	adds	r7, #80	; 0x50
 8012b30:	46bd      	mov	sp, r7
 8012b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012b36:	bf00      	nop
 8012b38:	0802be54 	.word	0x0802be54

08012b3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012b3c:	b480      	push	{r7}
 8012b3e:	b083      	sub	sp, #12
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b48:	f003 0301 	and.w	r3, r3, #1
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d00a      	beq.n	8012b66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	685b      	ldr	r3, [r3, #4]
 8012b56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	430a      	orrs	r2, r1
 8012b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b6a:	f003 0302 	and.w	r3, r3, #2
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d00a      	beq.n	8012b88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	685b      	ldr	r3, [r3, #4]
 8012b78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	430a      	orrs	r2, r1
 8012b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b8c:	f003 0304 	and.w	r3, r3, #4
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d00a      	beq.n	8012baa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	685b      	ldr	r3, [r3, #4]
 8012b9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	430a      	orrs	r2, r1
 8012ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bae:	f003 0308 	and.w	r3, r3, #8
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d00a      	beq.n	8012bcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	685b      	ldr	r3, [r3, #4]
 8012bbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	430a      	orrs	r2, r1
 8012bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bd0:	f003 0310 	and.w	r3, r3, #16
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d00a      	beq.n	8012bee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	689b      	ldr	r3, [r3, #8]
 8012bde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	430a      	orrs	r2, r1
 8012bec:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bf2:	f003 0320 	and.w	r3, r3, #32
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d00a      	beq.n	8012c10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	689b      	ldr	r3, [r3, #8]
 8012c00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	430a      	orrs	r2, r1
 8012c0e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d01a      	beq.n	8012c52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	685b      	ldr	r3, [r3, #4]
 8012c22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	430a      	orrs	r2, r1
 8012c30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012c3a:	d10a      	bne.n	8012c52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	685b      	ldr	r3, [r3, #4]
 8012c42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	430a      	orrs	r2, r1
 8012c50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d00a      	beq.n	8012c74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	685b      	ldr	r3, [r3, #4]
 8012c64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	430a      	orrs	r2, r1
 8012c72:	605a      	str	r2, [r3, #4]
  }
}
 8012c74:	bf00      	nop
 8012c76:	370c      	adds	r7, #12
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7e:	4770      	bx	lr

08012c80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b098      	sub	sp, #96	; 0x60
 8012c84:	af02      	add	r7, sp, #8
 8012c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012c90:	f7f4 ff94 	bl	8007bbc <HAL_GetTick>
 8012c94:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	f003 0308 	and.w	r3, r3, #8
 8012ca0:	2b08      	cmp	r3, #8
 8012ca2:	d12f      	bne.n	8012d04 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012ca4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012ca8:	9300      	str	r3, [sp, #0]
 8012caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cac:	2200      	movs	r2, #0
 8012cae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f000 f88e 	bl	8012dd4 <UART_WaitOnFlagUntilTimeout>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d022      	beq.n	8012d04 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc6:	e853 3f00 	ldrex	r3, [r3]
 8012cca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012cd2:	653b      	str	r3, [r7, #80]	; 0x50
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	461a      	mov	r2, r3
 8012cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8012cde:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ce0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012ce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012ce4:	e841 2300 	strex	r3, r2, [r1]
 8012ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d1e6      	bne.n	8012cbe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2220      	movs	r2, #32
 8012cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012d00:	2303      	movs	r3, #3
 8012d02:	e063      	b.n	8012dcc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	f003 0304 	and.w	r3, r3, #4
 8012d0e:	2b04      	cmp	r3, #4
 8012d10:	d149      	bne.n	8012da6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012d12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012d16:	9300      	str	r3, [sp, #0]
 8012d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	f000 f857 	bl	8012dd4 <UART_WaitOnFlagUntilTimeout>
 8012d26:	4603      	mov	r3, r0
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d03c      	beq.n	8012da6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d34:	e853 3f00 	ldrex	r3, [r3]
 8012d38:	623b      	str	r3, [r7, #32]
   return(result);
 8012d3a:	6a3b      	ldr	r3, [r7, #32]
 8012d3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012d40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	461a      	mov	r2, r3
 8012d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8012d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d52:	e841 2300 	strex	r3, r2, [r1]
 8012d56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d1e6      	bne.n	8012d2c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	3308      	adds	r3, #8
 8012d64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d66:	693b      	ldr	r3, [r7, #16]
 8012d68:	e853 3f00 	ldrex	r3, [r3]
 8012d6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	f023 0301 	bic.w	r3, r3, #1
 8012d74:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	3308      	adds	r3, #8
 8012d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d7e:	61fa      	str	r2, [r7, #28]
 8012d80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d82:	69b9      	ldr	r1, [r7, #24]
 8012d84:	69fa      	ldr	r2, [r7, #28]
 8012d86:	e841 2300 	strex	r3, r2, [r1]
 8012d8a:	617b      	str	r3, [r7, #20]
   return(result);
 8012d8c:	697b      	ldr	r3, [r7, #20]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d1e5      	bne.n	8012d5e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	2220      	movs	r2, #32
 8012d96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012da2:	2303      	movs	r3, #3
 8012da4:	e012      	b.n	8012dcc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	2220      	movs	r2, #32
 8012daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	2220      	movs	r2, #32
 8012db2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	2200      	movs	r2, #0
 8012dba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012dca:	2300      	movs	r3, #0
}
 8012dcc:	4618      	mov	r0, r3
 8012dce:	3758      	adds	r7, #88	; 0x58
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd80      	pop	{r7, pc}

08012dd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b084      	sub	sp, #16
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	60f8      	str	r0, [r7, #12]
 8012ddc:	60b9      	str	r1, [r7, #8]
 8012dde:	603b      	str	r3, [r7, #0]
 8012de0:	4613      	mov	r3, r2
 8012de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012de4:	e049      	b.n	8012e7a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012de6:	69bb      	ldr	r3, [r7, #24]
 8012de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dec:	d045      	beq.n	8012e7a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012dee:	f7f4 fee5 	bl	8007bbc <HAL_GetTick>
 8012df2:	4602      	mov	r2, r0
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	1ad3      	subs	r3, r2, r3
 8012df8:	69ba      	ldr	r2, [r7, #24]
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d302      	bcc.n	8012e04 <UART_WaitOnFlagUntilTimeout+0x30>
 8012dfe:	69bb      	ldr	r3, [r7, #24]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d101      	bne.n	8012e08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012e04:	2303      	movs	r3, #3
 8012e06:	e048      	b.n	8012e9a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	f003 0304 	and.w	r3, r3, #4
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d031      	beq.n	8012e7a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	69db      	ldr	r3, [r3, #28]
 8012e1c:	f003 0308 	and.w	r3, r3, #8
 8012e20:	2b08      	cmp	r3, #8
 8012e22:	d110      	bne.n	8012e46 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	2208      	movs	r2, #8
 8012e2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012e2c:	68f8      	ldr	r0, [r7, #12]
 8012e2e:	f000 f838 	bl	8012ea2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	2208      	movs	r2, #8
 8012e36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8012e42:	2301      	movs	r3, #1
 8012e44:	e029      	b.n	8012e9a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	69db      	ldr	r3, [r3, #28]
 8012e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012e54:	d111      	bne.n	8012e7a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012e5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012e60:	68f8      	ldr	r0, [r7, #12]
 8012e62:	f000 f81e 	bl	8012ea2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	2220      	movs	r2, #32
 8012e6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	2200      	movs	r2, #0
 8012e72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012e76:	2303      	movs	r3, #3
 8012e78:	e00f      	b.n	8012e9a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	69da      	ldr	r2, [r3, #28]
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	4013      	ands	r3, r2
 8012e84:	68ba      	ldr	r2, [r7, #8]
 8012e86:	429a      	cmp	r2, r3
 8012e88:	bf0c      	ite	eq
 8012e8a:	2301      	moveq	r3, #1
 8012e8c:	2300      	movne	r3, #0
 8012e8e:	b2db      	uxtb	r3, r3
 8012e90:	461a      	mov	r2, r3
 8012e92:	79fb      	ldrb	r3, [r7, #7]
 8012e94:	429a      	cmp	r2, r3
 8012e96:	d0a6      	beq.n	8012de6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012e98:	2300      	movs	r3, #0
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3710      	adds	r7, #16
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}

08012ea2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012ea2:	b480      	push	{r7}
 8012ea4:	b095      	sub	sp, #84	; 0x54
 8012ea6:	af00      	add	r7, sp, #0
 8012ea8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eb2:	e853 3f00 	ldrex	r3, [r3]
 8012eb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8012eca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ecc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012ece:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012ed0:	e841 2300 	strex	r3, r2, [r1]
 8012ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d1e6      	bne.n	8012eaa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	3308      	adds	r3, #8
 8012ee2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ee4:	6a3b      	ldr	r3, [r7, #32]
 8012ee6:	e853 3f00 	ldrex	r3, [r3]
 8012eea:	61fb      	str	r3, [r7, #28]
   return(result);
 8012eec:	69fb      	ldr	r3, [r7, #28]
 8012eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012ef2:	f023 0301 	bic.w	r3, r3, #1
 8012ef6:	64bb      	str	r3, [r7, #72]	; 0x48
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	3308      	adds	r3, #8
 8012efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012f02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f08:	e841 2300 	strex	r3, r2, [r1]
 8012f0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d1e3      	bne.n	8012edc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f18:	2b01      	cmp	r3, #1
 8012f1a:	d118      	bne.n	8012f4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	e853 3f00 	ldrex	r3, [r3]
 8012f28:	60bb      	str	r3, [r7, #8]
   return(result);
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	f023 0310 	bic.w	r3, r3, #16
 8012f30:	647b      	str	r3, [r7, #68]	; 0x44
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	461a      	mov	r2, r3
 8012f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f3a:	61bb      	str	r3, [r7, #24]
 8012f3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f3e:	6979      	ldr	r1, [r7, #20]
 8012f40:	69ba      	ldr	r2, [r7, #24]
 8012f42:	e841 2300 	strex	r3, r2, [r1]
 8012f46:	613b      	str	r3, [r7, #16]
   return(result);
 8012f48:	693b      	ldr	r3, [r7, #16]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d1e6      	bne.n	8012f1c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	2220      	movs	r2, #32
 8012f52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	2200      	movs	r2, #0
 8012f5a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2200      	movs	r2, #0
 8012f60:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012f62:	bf00      	nop
 8012f64:	3754      	adds	r7, #84	; 0x54
 8012f66:	46bd      	mov	sp, r7
 8012f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6c:	4770      	bx	lr

08012f6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012f6e:	b480      	push	{r7}
 8012f70:	b085      	sub	sp, #20
 8012f72:	af00      	add	r7, sp, #0
 8012f74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	d101      	bne.n	8012f84 <HAL_UARTEx_DisableFifoMode+0x16>
 8012f80:	2302      	movs	r3, #2
 8012f82:	e027      	b.n	8012fd4 <HAL_UARTEx_DisableFifoMode+0x66>
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	2201      	movs	r2, #1
 8012f88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	2224      	movs	r2, #36	; 0x24
 8012f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	681a      	ldr	r2, [r3, #0]
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	f022 0201 	bic.w	r2, r2, #1
 8012faa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012fb2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	68fa      	ldr	r2, [r7, #12]
 8012fc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	2220      	movs	r2, #32
 8012fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2200      	movs	r2, #0
 8012fce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012fd2:	2300      	movs	r3, #0
}
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	3714      	adds	r7, #20
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fde:	4770      	bx	lr

08012fe0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b084      	sub	sp, #16
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
 8012fe8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012ff0:	2b01      	cmp	r3, #1
 8012ff2:	d101      	bne.n	8012ff8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012ff4:	2302      	movs	r3, #2
 8012ff6:	e02d      	b.n	8013054 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	2201      	movs	r2, #1
 8012ffc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	2224      	movs	r2, #36	; 0x24
 8013004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	681a      	ldr	r2, [r3, #0]
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	f022 0201 	bic.w	r2, r2, #1
 801301e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	689b      	ldr	r3, [r3, #8]
 8013026:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	683a      	ldr	r2, [r7, #0]
 8013030:	430a      	orrs	r2, r1
 8013032:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013034:	6878      	ldr	r0, [r7, #4]
 8013036:	f000 f84f 	bl	80130d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	68fa      	ldr	r2, [r7, #12]
 8013040:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	2220      	movs	r2, #32
 8013046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	2200      	movs	r2, #0
 801304e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013052:	2300      	movs	r3, #0
}
 8013054:	4618      	mov	r0, r3
 8013056:	3710      	adds	r7, #16
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}

0801305c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b084      	sub	sp, #16
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
 8013064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801306c:	2b01      	cmp	r3, #1
 801306e:	d101      	bne.n	8013074 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013070:	2302      	movs	r3, #2
 8013072:	e02d      	b.n	80130d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2201      	movs	r2, #1
 8013078:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	2224      	movs	r2, #36	; 0x24
 8013080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	681a      	ldr	r2, [r3, #0]
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	f022 0201 	bic.w	r2, r2, #1
 801309a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	689b      	ldr	r3, [r3, #8]
 80130a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	683a      	ldr	r2, [r7, #0]
 80130ac:	430a      	orrs	r2, r1
 80130ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f000 f811 	bl	80130d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	68fa      	ldr	r2, [r7, #12]
 80130bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2220      	movs	r2, #32
 80130c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	2200      	movs	r2, #0
 80130ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80130ce:	2300      	movs	r3, #0
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3710      	adds	r7, #16
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}

080130d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80130d8:	b480      	push	{r7}
 80130da:	b085      	sub	sp, #20
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d108      	bne.n	80130fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	2201      	movs	r2, #1
 80130ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	2201      	movs	r2, #1
 80130f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80130f8:	e031      	b.n	801315e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80130fa:	2308      	movs	r3, #8
 80130fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80130fe:	2308      	movs	r3, #8
 8013100:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	689b      	ldr	r3, [r3, #8]
 8013108:	0e5b      	lsrs	r3, r3, #25
 801310a:	b2db      	uxtb	r3, r3
 801310c:	f003 0307 	and.w	r3, r3, #7
 8013110:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	689b      	ldr	r3, [r3, #8]
 8013118:	0f5b      	lsrs	r3, r3, #29
 801311a:	b2db      	uxtb	r3, r3
 801311c:	f003 0307 	and.w	r3, r3, #7
 8013120:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013122:	7bbb      	ldrb	r3, [r7, #14]
 8013124:	7b3a      	ldrb	r2, [r7, #12]
 8013126:	4911      	ldr	r1, [pc, #68]	; (801316c <UARTEx_SetNbDataToProcess+0x94>)
 8013128:	5c8a      	ldrb	r2, [r1, r2]
 801312a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801312e:	7b3a      	ldrb	r2, [r7, #12]
 8013130:	490f      	ldr	r1, [pc, #60]	; (8013170 <UARTEx_SetNbDataToProcess+0x98>)
 8013132:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013134:	fb93 f3f2 	sdiv	r3, r3, r2
 8013138:	b29a      	uxth	r2, r3
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013140:	7bfb      	ldrb	r3, [r7, #15]
 8013142:	7b7a      	ldrb	r2, [r7, #13]
 8013144:	4909      	ldr	r1, [pc, #36]	; (801316c <UARTEx_SetNbDataToProcess+0x94>)
 8013146:	5c8a      	ldrb	r2, [r1, r2]
 8013148:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801314c:	7b7a      	ldrb	r2, [r7, #13]
 801314e:	4908      	ldr	r1, [pc, #32]	; (8013170 <UARTEx_SetNbDataToProcess+0x98>)
 8013150:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013152:	fb93 f3f2 	sdiv	r3, r3, r2
 8013156:	b29a      	uxth	r2, r3
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801315e:	bf00      	nop
 8013160:	3714      	adds	r7, #20
 8013162:	46bd      	mov	sp, r7
 8013164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013168:	4770      	bx	lr
 801316a:	bf00      	nop
 801316c:	0802be6c 	.word	0x0802be6c
 8013170:	0802be74 	.word	0x0802be74

08013174 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8013174:	b480      	push	{r7}
 8013176:	b083      	sub	sp, #12
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	f043 0201 	orr.w	r2, r3, #1
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	601a      	str	r2, [r3, #0]
}
 8013188:	bf00      	nop
 801318a:	370c      	adds	r7, #12
 801318c:	46bd      	mov	sp, r7
 801318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013192:	4770      	bx	lr

08013194 <LL_DLYB_Disable>:
  * @param  DLYBx DLYB Instance.
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Disable(DLYB_TypeDef *DLYBx)
{
 8013194:	b480      	push	{r7}
 8013196:	b083      	sub	sp, #12
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(DLYBx->CR, DLYB_CR_DEN);
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	f023 0201 	bic.w	r2, r3, #1
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	601a      	str	r2, [r3, #0]
}
 80131a8:	bf00      	nop
 80131aa:	370c      	adds	r7, #12
 80131ac:	46bd      	mov	sp, r7
 80131ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b2:	4770      	bx	lr

080131b4 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b086      	sub	sp, #24
 80131b8:	af02      	add	r7, sp, #8
 80131ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80131bc:	2300      	movs	r3, #0
 80131be:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80131c0:	f7f4 fcfc 	bl	8007bbc <HAL_GetTick>
 80131c4:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d102      	bne.n	80131d2 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80131cc:	2301      	movs	r3, #1
 80131ce:	73fb      	strb	r3, [r7, #15]
 80131d0:	e137      	b.n	8013442 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	4a76      	ldr	r2, [pc, #472]	; (80133b0 <HAL_XSPI_Init+0x1fc>)
 80131d8:	4293      	cmp	r3, r2
 80131da:	d008      	beq.n	80131ee <HAL_XSPI_Init+0x3a>
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	4a74      	ldr	r2, [pc, #464]	; (80133b4 <HAL_XSPI_Init+0x200>)
 80131e2:	4293      	cmp	r3, r2
 80131e4:	d003      	beq.n	80131ee <HAL_XSPI_Init+0x3a>
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	4a73      	ldr	r2, [pc, #460]	; (80133b8 <HAL_XSPI_Init+0x204>)
 80131ec:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	4a72      	ldr	r2, [pc, #456]	; (80133bc <HAL_XSPI_Init+0x208>)
 80131f4:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	4a6d      	ldr	r2, [pc, #436]	; (80133b0 <HAL_XSPI_Init+0x1fc>)
 80131fc:	4293      	cmp	r3, r2
 80131fe:	d008      	beq.n	8013212 <HAL_XSPI_Init+0x5e>
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	4a6b      	ldr	r2, [pc, #428]	; (80133b4 <HAL_XSPI_Init+0x200>)
 8013206:	4293      	cmp	r3, r2
 8013208:	d003      	beq.n	8013212 <HAL_XSPI_Init+0x5e>
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	4a6a      	ldr	r2, [pc, #424]	; (80133b8 <HAL_XSPI_Init+0x204>)
 8013210:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	4a66      	ldr	r2, [pc, #408]	; (80133b0 <HAL_XSPI_Init+0x1fc>)
 8013218:	4293      	cmp	r3, r2
 801321a:	d008      	beq.n	801322e <HAL_XSPI_Init+0x7a>
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	4a64      	ldr	r2, [pc, #400]	; (80133b4 <HAL_XSPI_Init+0x200>)
 8013222:	4293      	cmp	r3, r2
 8013224:	d003      	beq.n	801322e <HAL_XSPI_Init+0x7a>
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	4a63      	ldr	r2, [pc, #396]	; (80133b8 <HAL_XSPI_Init+0x204>)
 801322c:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	2200      	movs	r2, #0
 8013232:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013238:	2b00      	cmp	r3, #0
 801323a:	f040 8102 	bne.w	8013442 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 801323e:	6878      	ldr	r0, [r7, #4]
 8013240:	f7ee fd36 	bl	8001cb0 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8013244:	f241 3188 	movw	r1, #5000	; 0x1388
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f000 fc82 	bl	8013b52 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	689a      	ldr	r2, [r3, #8]
 8013254:	4b5a      	ldr	r3, [pc, #360]	; (80133c0 <HAL_XSPI_Init+0x20c>)
 8013256:	4013      	ands	r3, r2
 8013258:	687a      	ldr	r2, [r7, #4]
 801325a:	68d1      	ldr	r1, [r2, #12]
 801325c:	687a      	ldr	r2, [r7, #4]
 801325e:	6912      	ldr	r2, [r2, #16]
 8013260:	0412      	lsls	r2, r2, #16
 8013262:	4311      	orrs	r1, r2
 8013264:	687a      	ldr	r2, [r7, #4]
 8013266:	6952      	ldr	r2, [r2, #20]
 8013268:	3a01      	subs	r2, #1
 801326a:	0212      	lsls	r2, r2, #8
 801326c:	4311      	orrs	r1, r2
 801326e:	687a      	ldr	r2, [r7, #4]
 8013270:	69d2      	ldr	r2, [r2, #28]
 8013272:	4311      	orrs	r1, r2
 8013274:	687a      	ldr	r2, [r7, #4]
 8013276:	6812      	ldr	r2, [r2, #0]
 8013278:	430b      	orrs	r3, r1
 801327a:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	4a4b      	ldr	r2, [pc, #300]	; (80133b0 <HAL_XSPI_Init+0x1fc>)
 8013282:	4293      	cmp	r3, r2
 8013284:	d00e      	beq.n	80132a4 <HAL_XSPI_Init+0xf0>
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	4a4a      	ldr	r2, [pc, #296]	; (80133b4 <HAL_XSPI_Init+0x200>)
 801328c:	4293      	cmp	r3, r2
 801328e:	d009      	beq.n	80132a4 <HAL_XSPI_Init+0xf0>
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	4a48      	ldr	r2, [pc, #288]	; (80133b8 <HAL_XSPI_Init+0x204>)
 8013296:	4293      	cmp	r3, r2
 8013298:	d004      	beq.n	80132a4 <HAL_XSPI_Init+0xf0>
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	4a49      	ldr	r2, [pc, #292]	; (80133c4 <HAL_XSPI_Init+0x210>)
 80132a0:	4293      	cmp	r3, r2
 80132a2:	d10a      	bne.n	80132ba <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	689b      	ldr	r3, [r3, #8]
 80132aa:	f023 0108 	bic.w	r1, r3, #8
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	430a      	orrs	r2, r1
 80132b8:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	68db      	ldr	r3, [r3, #12]
 80132c0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6a1a      	ldr	r2, [r3, #32]
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	430a      	orrs	r2, r1
 80132ce:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	691b      	ldr	r3, [r3, #16]
 80132d6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132de:	041a      	lsls	r2, r3, #16
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	430a      	orrs	r2, r1
 80132e6:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	4a30      	ldr	r2, [pc, #192]	; (80133b0 <HAL_XSPI_Init+0x1fc>)
 80132ee:	4293      	cmp	r3, r2
 80132f0:	d00e      	beq.n	8013310 <HAL_XSPI_Init+0x15c>
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	4a2f      	ldr	r2, [pc, #188]	; (80133b4 <HAL_XSPI_Init+0x200>)
 80132f8:	4293      	cmp	r3, r2
 80132fa:	d009      	beq.n	8013310 <HAL_XSPI_Init+0x15c>
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	4a2d      	ldr	r2, [pc, #180]	; (80133b8 <HAL_XSPI_Init+0x204>)
 8013302:	4293      	cmp	r3, r2
 8013304:	d004      	beq.n	8013310 <HAL_XSPI_Init+0x15c>
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	4a2e      	ldr	r2, [pc, #184]	; (80133c4 <HAL_XSPI_Init+0x210>)
 801330c:	4293      	cmp	r3, r2
 801330e:	d10a      	bne.n	8013326 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	691b      	ldr	r3, [r3, #16]
 8013316:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	430a      	orrs	r2, r1
 8013324:	611a      	str	r2, [r3, #16]
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	687a      	ldr	r2, [r7, #4]
 801332c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801332e:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	685b      	ldr	r3, [r3, #4]
 801333e:	3b01      	subs	r3, #1
 8013340:	021a      	lsls	r2, r3, #8
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	430a      	orrs	r2, r1
 8013348:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801334e:	9300      	str	r3, [sp, #0]
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	2200      	movs	r2, #0
 8013354:	2120      	movs	r1, #32
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f000 fd60 	bl	8013e1c <XSPI_WaitFlagStateUntilTimeout>
 801335c:	4603      	mov	r3, r0
 801335e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8013360:	7bfb      	ldrb	r3, [r7, #15]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d16d      	bne.n	8013442 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	68db      	ldr	r3, [r3, #12]
 801336c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	430a      	orrs	r2, r1
 801337a:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	4a0e      	ldr	r2, [pc, #56]	; (80133bc <HAL_XSPI_Init+0x208>)
 8013382:	4293      	cmp	r3, r2
 8013384:	d004      	beq.n	8013390 <HAL_XSPI_Init+0x1dc>
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	4a0f      	ldr	r2, [pc, #60]	; (80133c8 <HAL_XSPI_Init+0x214>)
 801338c:	4293      	cmp	r3, r2
 801338e:	d11d      	bne.n	80133cc <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013394:	9300      	str	r3, [sp, #0]
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	2200      	movs	r2, #0
 801339a:	2120      	movs	r1, #32
 801339c:	6878      	ldr	r0, [r7, #4]
 801339e:	f000 fd3d 	bl	8013e1c <XSPI_WaitFlagStateUntilTimeout>
 80133a2:	4603      	mov	r3, r0
 80133a4:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 80133a6:	7bfb      	ldrb	r3, [r7, #15]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d00f      	beq.n	80133cc <HAL_XSPI_Init+0x218>
          {
            return status;
 80133ac:	7bfb      	ldrb	r3, [r7, #15]
 80133ae:	e049      	b.n	8013444 <HAL_XSPI_Init+0x290>
 80133b0:	420d1400 	.word	0x420d1400
 80133b4:	520d1400 	.word	0x520d1400
 80133b8:	420d2400 	.word	0x420d2400
 80133bc:	420d3400 	.word	0x420d3400
 80133c0:	f8e0c0fc 	.word	0xf8e0c0fc
 80133c4:	520d2400 	.word	0x520d2400
 80133c8:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	689a      	ldr	r2, [r3, #8]
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	430a      	orrs	r2, r1
 80133e0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80133ea:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133f6:	431a      	orrs	r2, r3
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	430a      	orrs	r2, r1
 80133fe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	681a      	ldr	r2, [r3, #0]
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	f042 0201 	orr.w	r2, r2, #1
 8013410:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	699b      	ldr	r3, [r3, #24]
 8013416:	2b02      	cmp	r3, #2
 8013418:	d107      	bne.n	801342a <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	689a      	ldr	r2, [r3, #8]
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	f042 0202 	orr.w	r2, r2, #2
 8013428:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	68db      	ldr	r3, [r3, #12]
 801342e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8013432:	d103      	bne.n	801343c <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2201      	movs	r2, #1
 8013438:	655a      	str	r2, [r3, #84]	; 0x54
 801343a:	e002      	b.n	8013442 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	2202      	movs	r2, #2
 8013440:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
  }
  return status;
 8013442:	7bfb      	ldrb	r3, [r7, #15]
}
 8013444:	4618      	mov	r0, r3
 8013446:	3710      	adds	r7, #16
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}

0801344c <HAL_XSPI_DeInit>:
  * @brief  De-Initialize the XSPI peripheral.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_DeInit(XSPI_HandleTypeDef *hxspi)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b084      	sub	sp, #16
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013454:	2300      	movs	r3, #0
 8013456:	73fb      	strb	r3, [r7, #15]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d102      	bne.n	8013464 <HAL_XSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 801345e:	2301      	movs	r3, #1
 8013460:	73fb      	strb	r3, [r7, #15]
 8013462:	e015      	b.n	8013490 <HAL_XSPI_DeInit+0x44>
    /* No error code can be set as the handler is null */
  }
  else
  {
    /* Disable XSPI */
    HAL_XSPI_DISABLE(hxspi);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	681a      	ldr	r2, [r3, #0]
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	f022 0201 	bic.w	r2, r2, #1
 8013472:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after XSPI disable */
    CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	689a      	ldr	r2, [r3, #8]
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	f022 0202 	bic.w	r2, r2, #2
 8013482:	609a      	str	r2, [r3, #8]

    /* De-initialize the low level hardware */
    hxspi->MspDeInitCallback(hxspi);
#else
    /* De-initialize the low-level hardware */
    HAL_XSPI_MspDeInit(hxspi);
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	f7ee fc2b 	bl	8001ce0 <HAL_XSPI_MspDeInit>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hxspi->State = HAL_XSPI_STATE_RESET;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	2200      	movs	r2, #0
 801348e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  return status;
 8013490:	7bfb      	ldrb	r3, [r7, #15]
}
 8013492:	4618      	mov	r0, r3
 8013494:	3710      	adds	r7, #16
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}
	...

0801349c <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b08a      	sub	sp, #40	; 0x28
 80134a0:	af02      	add	r7, sp, #8
 80134a2:	60f8      	str	r0, [r7, #12]
 80134a4:	60b9      	str	r1, [r7, #8]
 80134a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80134a8:	f7f4 fb88 	bl	8007bbc <HAL_GetTick>
 80134ac:	61b8      	str	r0, [r7, #24]

  /* Check the parameters of the command structure */
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	689b      	ldr	r3, [r3, #8]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d125      	bne.n	8013502 <HAL_XSPI_Command+0x66>
  {
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	4a68      	ldr	r2, [pc, #416]	; (801365c <HAL_XSPI_Command+0x1c0>)
 80134bc:	4293      	cmp	r3, r2
 80134be:	d020      	beq.n	8013502 <HAL_XSPI_Command+0x66>
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	4a66      	ldr	r2, [pc, #408]	; (8013660 <HAL_XSPI_Command+0x1c4>)
 80134c6:	4293      	cmp	r3, r2
 80134c8:	d01b      	beq.n	8013502 <HAL_XSPI_Command+0x66>
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	4a65      	ldr	r2, [pc, #404]	; (8013664 <HAL_XSPI_Command+0x1c8>)
 80134d0:	4293      	cmp	r3, r2
 80134d2:	d016      	beq.n	8013502 <HAL_XSPI_Command+0x66>
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	4a63      	ldr	r2, [pc, #396]	; (8013668 <HAL_XSPI_Command+0x1cc>)
 80134da:	4293      	cmp	r3, r2
 80134dc:	d011      	beq.n	8013502 <HAL_XSPI_Command+0x66>
    {
      assert_param(IS_OCTOSPI_IO_SELECT(pCmd->IOSelect));
    }
#if defined(HSPI1)
    else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	4a62      	ldr	r2, [pc, #392]	; (801366c <HAL_XSPI_Command+0x1d0>)
 80134e4:	4293      	cmp	r3, r2
 80134e6:	d00c      	beq.n	8013502 <HAL_XSPI_Command+0x66>
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	4a60      	ldr	r2, [pc, #384]	; (8013670 <HAL_XSPI_Command+0x1d4>)
 80134ee:	4293      	cmp	r3, r2
 80134f0:	d007      	beq.n	8013502 <HAL_XSPI_Command+0x66>
      assert_param(IS_HSPI_IO_SELECT(pCmd->IOSelect));
    }
#endif /* HSPI1 */
    else
    {
      hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80134f6:	f043 0208 	orr.w	r2, r3, #8
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80134fe:	2301      	movs	r3, #1
 8013500:	e0a8      	b.n	8013654 <HAL_XSPI_Command+0x1b8>
  {
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	4a55      	ldr	r2, [pc, #340]	; (801365c <HAL_XSPI_Command+0x1c0>)
 8013508:	4293      	cmp	r3, r2
 801350a:	d020      	beq.n	801354e <HAL_XSPI_Command+0xb2>
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	4a53      	ldr	r2, [pc, #332]	; (8013660 <HAL_XSPI_Command+0x1c4>)
 8013512:	4293      	cmp	r3, r2
 8013514:	d01b      	beq.n	801354e <HAL_XSPI_Command+0xb2>
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	4a52      	ldr	r2, [pc, #328]	; (8013664 <HAL_XSPI_Command+0x1c8>)
 801351c:	4293      	cmp	r3, r2
 801351e:	d016      	beq.n	801354e <HAL_XSPI_Command+0xb2>
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	4a50      	ldr	r2, [pc, #320]	; (8013668 <HAL_XSPI_Command+0x1cc>)
 8013526:	4293      	cmp	r3, r2
 8013528:	d011      	beq.n	801354e <HAL_XSPI_Command+0xb2>
  {
    assert_param(IS_OCTOSPI_DATA_MODE(pCmd->DataMode));
  }
#if defined(HSPI1)
  else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	4a4f      	ldr	r2, [pc, #316]	; (801366c <HAL_XSPI_Command+0x1d0>)
 8013530:	4293      	cmp	r3, r2
 8013532:	d00c      	beq.n	801354e <HAL_XSPI_Command+0xb2>
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	4a4d      	ldr	r2, [pc, #308]	; (8013670 <HAL_XSPI_Command+0x1d4>)
 801353a:	4293      	cmp	r3, r2
 801353c:	d007      	beq.n	801354e <HAL_XSPI_Command+0xb2>
    assert_param(IS_HSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
  }
#endif /* HSPI1 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013542:	f043 0208 	orr.w	r2, r3, #8
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	659a      	str	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 801354a:	2301      	movs	r3, #1
 801354c:	e082      	b.n	8013654 <HAL_XSPI_Command+0x1b8>
  }

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013552:	2b00      	cmp	r3, #0

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
  assert_param(IS_XSPI_SIOO_MODE(pCmd->SIOOMode));

  /* Check the state of the driver */
  state = hxspi->State;
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013558:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 801355a:	697b      	ldr	r3, [r7, #20]
 801355c:	2b02      	cmp	r3, #2
 801355e:	d104      	bne.n	801356a <HAL_XSPI_Command+0xce>
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	68db      	ldr	r3, [r3, #12]
 8013564:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8013568:	d115      	bne.n	8013596 <HAL_XSPI_Command+0xfa>
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	2b14      	cmp	r3, #20
 801356e:	d107      	bne.n	8013580 <HAL_XSPI_Command+0xe4>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	2b02      	cmp	r3, #2
 8013576:	d00e      	beq.n	8013596 <HAL_XSPI_Command+0xfa>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8013578:	68bb      	ldr	r3, [r7, #8]
 801357a:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 801357c:	2b03      	cmp	r3, #3
 801357e:	d00a      	beq.n	8013596 <HAL_XSPI_Command+0xfa>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 8013580:	697b      	ldr	r3, [r7, #20]
 8013582:	2b24      	cmp	r3, #36	; 0x24
 8013584:	d15e      	bne.n	8013644 <HAL_XSPI_Command+0x1a8>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 801358a:	2b01      	cmp	r3, #1
 801358c:	d003      	beq.n	8013596 <HAL_XSPI_Command+0xfa>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 8013592:	2b03      	cmp	r3, #3
 8013594:	d156      	bne.n	8013644 <HAL_XSPI_Command+0x1a8>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	9300      	str	r3, [sp, #0]
 801359a:	69bb      	ldr	r3, [r7, #24]
 801359c:	2200      	movs	r2, #0
 801359e:	2120      	movs	r1, #32
 80135a0:	68f8      	ldr	r0, [r7, #12]
 80135a2:	f000 fc3b 	bl	8013e1c <XSPI_WaitFlagStateUntilTimeout>
 80135a6:	4603      	mov	r3, r0
 80135a8:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80135aa:	7ffb      	ldrb	r3, [r7, #31]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d146      	bne.n	801363e <HAL_XSPI_Command+0x1a2>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	2200      	movs	r2, #0
 80135b4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 80135b6:	68b9      	ldr	r1, [r7, #8]
 80135b8:	68f8      	ldr	r0, [r7, #12]
 80135ba:	f000 fc67 	bl	8013e8c <XSPI_ConfigCmd>
 80135be:	4603      	mov	r3, r0
 80135c0:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80135c2:	7ffb      	ldrb	r3, [r7, #31]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d143      	bne.n	8013650 <HAL_XSPI_Command+0x1b4>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d10e      	bne.n	80135ee <HAL_XSPI_Command+0x152>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	9300      	str	r3, [sp, #0]
 80135d4:	69bb      	ldr	r3, [r7, #24]
 80135d6:	2201      	movs	r2, #1
 80135d8:	2102      	movs	r1, #2
 80135da:	68f8      	ldr	r0, [r7, #12]
 80135dc:	f000 fc1e 	bl	8013e1c <XSPI_WaitFlagStateUntilTimeout>
 80135e0:	4603      	mov	r3, r0
 80135e2:	77fb      	strb	r3, [r7, #31]

          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	2202      	movs	r2, #2
 80135ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80135ec:	e030      	b.n	8013650 <HAL_XSPI_Command+0x1b4>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d103      	bne.n	80135fe <HAL_XSPI_Command+0x162>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	2204      	movs	r2, #4
 80135fa:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80135fc:	e028      	b.n	8013650 <HAL_XSPI_Command+0x1b4>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 80135fe:	68bb      	ldr	r3, [r7, #8]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	2b01      	cmp	r3, #1
 8013604:	d10b      	bne.n	801361e <HAL_XSPI_Command+0x182>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801360a:	2b24      	cmp	r3, #36	; 0x24
 801360c:	d103      	bne.n	8013616 <HAL_XSPI_Command+0x17a>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	2204      	movs	r2, #4
 8013612:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8013614:	e01c      	b.n	8013650 <HAL_XSPI_Command+0x1b4>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	2214      	movs	r2, #20
 801361a:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 801361c:	e018      	b.n	8013650 <HAL_XSPI_Command+0x1b4>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	2b02      	cmp	r3, #2
 8013624:	d114      	bne.n	8013650 <HAL_XSPI_Command+0x1b4>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801362a:	2b14      	cmp	r3, #20
 801362c:	d103      	bne.n	8013636 <HAL_XSPI_Command+0x19a>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	2204      	movs	r2, #4
 8013632:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8013634:	e00c      	b.n	8013650 <HAL_XSPI_Command+0x1b4>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	2224      	movs	r2, #36	; 0x24
 801363a:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 801363c:	e008      	b.n	8013650 <HAL_XSPI_Command+0x1b4>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 801363e:	2302      	movs	r3, #2
 8013640:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 8013642:	e005      	b.n	8013650 <HAL_XSPI_Command+0x1b4>
    }
  }
  else
  {
    status = HAL_ERROR;
 8013644:	2301      	movs	r3, #1
 8013646:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	2210      	movs	r2, #16
 801364c:	659a      	str	r2, [r3, #88]	; 0x58
 801364e:	e000      	b.n	8013652 <HAL_XSPI_Command+0x1b6>
    if (status == HAL_OK)
 8013650:	bf00      	nop
  }

  return status;
 8013652:	7ffb      	ldrb	r3, [r7, #31]
}
 8013654:	4618      	mov	r0, r3
 8013656:	3720      	adds	r7, #32
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}
 801365c:	420d1400 	.word	0x420d1400
 8013660:	520d1400 	.word	0x520d1400
 8013664:	420d2400 	.word	0x420d2400
 8013668:	520d2400 	.word	0x520d2400
 801366c:	420d3400 	.word	0x420d3400
 8013670:	520d3400 	.word	0x520d3400

08013674 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b08a      	sub	sp, #40	; 0x28
 8013678:	af02      	add	r7, sp, #8
 801367a:	60f8      	str	r0, [r7, #12]
 801367c:	60b9      	str	r1, [r7, #8]
 801367e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013680:	f7f4 fa9c 	bl	8007bbc <HAL_GetTick>
 8013684:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	3350      	adds	r3, #80	; 0x50
 801368c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 801368e:	68bb      	ldr	r3, [r7, #8]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d105      	bne.n	80136a0 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8013694:	2301      	movs	r3, #1
 8013696:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	2208      	movs	r2, #8
 801369c:	659a      	str	r2, [r3, #88]	; 0x58
 801369e:	e057      	b.n	8013750 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136a4:	2b04      	cmp	r3, #4
 80136a6:	d14e      	bne.n	8013746 <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136ae:	1c5a      	adds	r2, r3, #1
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	649a      	str	r2, [r3, #72]	; 0x48
      hxspi->XferSize  = hxspi->XferCount;
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	645a      	str	r2, [r3, #68]	; 0x44
      hxspi->pBuffPtr  = pData;
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	68ba      	ldr	r2, [r7, #8]
 80136c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	681a      	ldr	r2, [r3, #0]
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80136d0:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	9300      	str	r3, [sp, #0]
 80136d6:	69bb      	ldr	r3, [r7, #24]
 80136d8:	2201      	movs	r2, #1
 80136da:	2104      	movs	r1, #4
 80136dc:	68f8      	ldr	r0, [r7, #12]
 80136de:	f000 fb9d 	bl	8013e1c <XSPI_WaitFlagStateUntilTimeout>
 80136e2:	4603      	mov	r3, r0
 80136e4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80136e6:	7ffb      	ldrb	r3, [r7, #31]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d113      	bne.n	8013714 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136f0:	781a      	ldrb	r2, [r3, #0]
 80136f2:	697b      	ldr	r3, [r7, #20]
 80136f4:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136fa:	1c5a      	adds	r2, r3, #1
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	641a      	str	r2, [r3, #64]	; 0x40
        hxspi->XferCount--;
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013704:	1e5a      	subs	r2, r3, #1
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hxspi->XferCount > 0U);
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801370e:	2b00      	cmp	r3, #0
 8013710:	d1df      	bne.n	80136d2 <HAL_XSPI_Transmit+0x5e>
 8013712:	e000      	b.n	8013716 <HAL_XSPI_Transmit+0xa2>
          break;
 8013714:	bf00      	nop

      if (status == HAL_OK)
 8013716:	7ffb      	ldrb	r3, [r7, #31]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d119      	bne.n	8013750 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	9300      	str	r3, [sp, #0]
 8013720:	69bb      	ldr	r3, [r7, #24]
 8013722:	2201      	movs	r2, #1
 8013724:	2102      	movs	r1, #2
 8013726:	68f8      	ldr	r0, [r7, #12]
 8013728:	f000 fb78 	bl	8013e1c <XSPI_WaitFlagStateUntilTimeout>
 801372c:	4603      	mov	r3, r0
 801372e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8013730:	7ffb      	ldrb	r3, [r7, #31]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d10c      	bne.n	8013750 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	2202      	movs	r2, #2
 801373c:	625a      	str	r2, [r3, #36]	; 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	2202      	movs	r2, #2
 8013742:	655a      	str	r2, [r3, #84]	; 0x54
 8013744:	e004      	b.n	8013750 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8013746:	2301      	movs	r3, #1
 8013748:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	2210      	movs	r2, #16
 801374e:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 8013750:	7ffb      	ldrb	r3, [r7, #31]
}
 8013752:	4618      	mov	r0, r3
 8013754:	3720      	adds	r7, #32
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}

0801375a <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 801375a:	b580      	push	{r7, lr}
 801375c:	b08c      	sub	sp, #48	; 0x30
 801375e:	af02      	add	r7, sp, #8
 8013760:	60f8      	str	r0, [r7, #12]
 8013762:	60b9      	str	r1, [r7, #8]
 8013764:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013766:	f7f4 fa29 	bl	8007bbc <HAL_GetTick>
 801376a:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	3350      	adds	r3, #80	; 0x50
 8013772:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801377a:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8013784:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8013786:	68bb      	ldr	r3, [r7, #8]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d106      	bne.n	801379a <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 801378c:	2301      	movs	r3, #1
 801378e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	2208      	movs	r2, #8
 8013796:	659a      	str	r2, [r3, #88]	; 0x58
 8013798:	e07c      	b.n	8013894 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801379e:	2b04      	cmp	r3, #4
 80137a0:	d172      	bne.n	8013888 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137a8:	1c5a      	adds	r2, r3, #1
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	649a      	str	r2, [r3, #72]	; 0x48
      hxspi->XferSize  = hxspi->XferCount;
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	645a      	str	r2, [r3, #68]	; 0x44
      hxspi->pBuffPtr  = pData;
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	68ba      	ldr	r2, [r7, #8]
 80137ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80137ce:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	68db      	ldr	r3, [r3, #12]
 80137d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80137d8:	d104      	bne.n	80137e4 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	69ba      	ldr	r2, [r7, #24]
 80137e0:	649a      	str	r2, [r3, #72]	; 0x48
 80137e2:	e011      	b.n	8013808 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80137ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d004      	beq.n	80137fe <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	69ba      	ldr	r2, [r7, #24]
 80137fa:	649a      	str	r2, [r3, #72]	; 0x48
 80137fc:	e004      	b.n	8013808 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	697a      	ldr	r2, [r7, #20]
 8013804:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	9300      	str	r3, [sp, #0]
 801380c:	6a3b      	ldr	r3, [r7, #32]
 801380e:	2201      	movs	r2, #1
 8013810:	2106      	movs	r1, #6
 8013812:	68f8      	ldr	r0, [r7, #12]
 8013814:	f000 fb02 	bl	8013e1c <XSPI_WaitFlagStateUntilTimeout>
 8013818:	4603      	mov	r3, r0
 801381a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 801381e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013822:	2b00      	cmp	r3, #0
 8013824:	d114      	bne.n	8013850 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801382a:	69fa      	ldr	r2, [r7, #28]
 801382c:	7812      	ldrb	r2, [r2, #0]
 801382e:	b2d2      	uxtb	r2, r2
 8013830:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013836:	1c5a      	adds	r2, r3, #1
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	641a      	str	r2, [r3, #64]	; 0x40
        hxspi->XferCount--;
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013840:	1e5a      	subs	r2, r3, #1
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hxspi->XferCount > 0U);
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801384a:	2b00      	cmp	r3, #0
 801384c:	d1dc      	bne.n	8013808 <HAL_XSPI_Receive+0xae>
 801384e:	e000      	b.n	8013852 <HAL_XSPI_Receive+0xf8>
          break;
 8013850:	bf00      	nop

      if (status == HAL_OK)
 8013852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013856:	2b00      	cmp	r3, #0
 8013858:	d11c      	bne.n	8013894 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	9300      	str	r3, [sp, #0]
 801385e:	6a3b      	ldr	r3, [r7, #32]
 8013860:	2201      	movs	r2, #1
 8013862:	2102      	movs	r1, #2
 8013864:	68f8      	ldr	r0, [r7, #12]
 8013866:	f000 fad9 	bl	8013e1c <XSPI_WaitFlagStateUntilTimeout>
 801386a:	4603      	mov	r3, r0
 801386c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8013870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013874:	2b00      	cmp	r3, #0
 8013876:	d10d      	bne.n	8013894 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	2202      	movs	r2, #2
 801387e:	625a      	str	r2, [r3, #36]	; 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	2202      	movs	r2, #2
 8013884:	655a      	str	r2, [r3, #84]	; 0x54
 8013886:	e005      	b.n	8013894 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8013888:	2301      	movs	r3, #1
 801388a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	2210      	movs	r2, #16
 8013892:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 8013894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013898:	4618      	mov	r0, r3
 801389a:	3728      	adds	r7, #40	; 0x28
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}

080138a0 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, XSPI_AutoPollingTypeDef *const pCfg,
                                       uint32_t Timeout)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b08a      	sub	sp, #40	; 0x28
 80138a4:	af02      	add	r7, sp, #8
 80138a6:	60f8      	str	r0, [r7, #12]
 80138a8:	60b9      	str	r1, [r7, #8]
 80138aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80138ac:	f7f4 f986 	bl	8007bbc <HAL_GetTick>
 80138b0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138b8:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80138c2:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138c8:	2b04      	cmp	r3, #4
 80138ca:	d167      	bne.n	801399c <HAL_XSPI_AutoPolling+0xfc>
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	68db      	ldr	r3, [r3, #12]
 80138d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80138d4:	d162      	bne.n	801399c <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	9300      	str	r3, [sp, #0]
 80138da:	69bb      	ldr	r3, [r7, #24]
 80138dc:	2200      	movs	r2, #0
 80138de:	2120      	movs	r1, #32
 80138e0:	68f8      	ldr	r0, [r7, #12]
 80138e2:	f000 fa9b 	bl	8013e1c <XSPI_WaitFlagStateUntilTimeout>
 80138e6:	4603      	mov	r3, r0
 80138e8:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80138ea:	7ffb      	ldrb	r3, [r7, #31]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d152      	bne.n	8013996 <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	68ba      	ldr	r2, [r7, #8]
 80138f6:	6812      	ldr	r2, [r2, #0]
 80138f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	68ba      	ldr	r2, [r7, #8]
 8013902:	6852      	ldr	r2, [r2, #4]
 8013904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	68ba      	ldr	r2, [r7, #8]
 801390e:	6912      	ldr	r2, [r2, #16]
 8013910:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	6899      	ldr	r1, [r3, #8]
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	68db      	ldr	r3, [r3, #12]
 8013926:	430b      	orrs	r3, r1
 8013928:	431a      	orrs	r2, r3
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8013932:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	68db      	ldr	r3, [r3, #12]
 8013938:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801393c:	d104      	bne.n	8013948 <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	697a      	ldr	r2, [r7, #20]
 8013944:	649a      	str	r2, [r3, #72]	; 0x48
 8013946:	e011      	b.n	801396c <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8013950:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013954:	2b00      	cmp	r3, #0
 8013956:	d004      	beq.n	8013962 <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	697a      	ldr	r2, [r7, #20]
 801395e:	649a      	str	r2, [r3, #72]	; 0x48
 8013960:	e004      	b.n	801396c <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	693a      	ldr	r2, [r7, #16]
 8013968:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	9300      	str	r3, [sp, #0]
 8013970:	69bb      	ldr	r3, [r7, #24]
 8013972:	2201      	movs	r2, #1
 8013974:	2108      	movs	r1, #8
 8013976:	68f8      	ldr	r0, [r7, #12]
 8013978:	f000 fa50 	bl	8013e1c <XSPI_WaitFlagStateUntilTimeout>
 801397c:	4603      	mov	r3, r0
 801397e:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8013980:	7ffb      	ldrb	r3, [r7, #31]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d110      	bne.n	80139a8 <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	2208      	movs	r2, #8
 801398c:	625a      	str	r2, [r3, #36]	; 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	2202      	movs	r2, #2
 8013992:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8013994:	e008      	b.n	80139a8 <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
 8013996:	2302      	movs	r3, #2
 8013998:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 801399a:	e005      	b.n	80139a8 <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
 801399c:	2301      	movs	r3, #1
 801399e:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	2210      	movs	r2, #16
 80139a4:	659a      	str	r2, [r3, #88]	; 0x58
 80139a6:	e000      	b.n	80139aa <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
 80139a8:	bf00      	nop
  }

  return status;
 80139aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80139ac:	4618      	mov	r0, r3
 80139ae:	3720      	adds	r7, #32
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}

080139b4 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, XSPI_MemoryMappedTypeDef *const pCfg)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b086      	sub	sp, #24
 80139b8:	af02      	add	r7, sp, #8
 80139ba:	6078      	str	r0, [r7, #4]
 80139bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80139be:	f7f4 f8fd 	bl	8007bbc <HAL_GetTick>
 80139c2:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139c8:	2b04      	cmp	r3, #4
 80139ca:	d136      	bne.n	8013a3a <HAL_XSPI_MemoryMapped+0x86>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80139d0:	9300      	str	r3, [sp, #0]
 80139d2:	68bb      	ldr	r3, [r7, #8]
 80139d4:	2200      	movs	r2, #0
 80139d6:	2120      	movs	r1, #32
 80139d8:	6878      	ldr	r0, [r7, #4]
 80139da:	f000 fa1f 	bl	8013e1c <XSPI_WaitFlagStateUntilTimeout>
 80139de:	4603      	mov	r3, r0
 80139e0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80139e2:	7bfb      	ldrb	r3, [r7, #15]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d12d      	bne.n	8013a44 <HAL_XSPI_MemoryMapped+0x90>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2288      	movs	r2, #136	; 0x88
 80139ec:	655a      	str	r2, [r3, #84]	; 0x54

      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
 80139ee:	683b      	ldr	r3, [r7, #0]
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	2b08      	cmp	r3, #8
 80139f4:	d111      	bne.n	8013a1a <HAL_XSPI_MemoryMapped+0x66>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	683a      	ldr	r2, [r7, #0]
 80139fc:	6852      	ldr	r2, [r2, #4]
 80139fe:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	2210      	movs	r2, #16
 8013a08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	681a      	ldr	r2, [r3, #0]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013a18:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8013a24:	f023 0308 	bic.w	r3, r3, #8
 8013a28:	683a      	ldr	r2, [r7, #0]
 8013a2a:	6812      	ldr	r2, [r2, #0]
 8013a2c:	431a      	orrs	r2, r3
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8013a36:	601a      	str	r2, [r3, #0]
 8013a38:	e004      	b.n	8013a44 <HAL_XSPI_MemoryMapped+0x90>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8013a3a:	2301      	movs	r3, #1
 8013a3c:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	2210      	movs	r2, #16
 8013a42:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 8013a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a46:	4618      	mov	r0, r3
 8013a48:	3710      	adds	r7, #16
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	bd80      	pop	{r7, pc}

08013a4e <HAL_XSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
 8013a4e:	b580      	push	{r7, lr}
 8013a50:	b088      	sub	sp, #32
 8013a52:	af02      	add	r7, sp, #8
 8013a54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013a56:	2300      	movs	r3, #0
 8013a58:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8013a5a:	f7f4 f8af 	bl	8007bbc <HAL_GetTick>
 8013a5e:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hxspi->State;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a64:	60fb      	str	r3, [r7, #12]
  if (((state & XSPI_BUSY_STATE_MASK) != 0U) || ((state & XSPI_CFG_STATE_MASK) != 0U))
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	f003 0308 	and.w	r3, r3, #8
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d104      	bne.n	8013a7a <HAL_XSPI_Abort+0x2c>
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	f003 0304 	and.w	r3, r3, #4
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d05f      	beq.n	8013b3a <HAL_XSPI_Abort+0xec>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	f003 0304 	and.w	r3, r3, #4
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d021      	beq.n	8013acc <HAL_XSPI_Abort+0x7e>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	681a      	ldr	r2, [r3, #0]
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	f022 0204 	bic.w	r2, r2, #4
 8013a96:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f7f4 fcc5 	bl	800842c <HAL_DMA_Abort>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8013aa6:	7dfb      	ldrb	r3, [r7, #23]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d002      	beq.n	8013ab2 <HAL_XSPI_Abort+0x64>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	2204      	movs	r2, #4
 8013ab0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7f4 fcb8 	bl	800842c <HAL_DMA_Abort>
 8013abc:	4603      	mov	r3, r0
 8013abe:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8013ac0:	7dfb      	ldrb	r3, [r7, #23]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d002      	beq.n	8013acc <HAL_XSPI_Abort+0x7e>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	2204      	movs	r2, #4
 8013aca:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	6a1b      	ldr	r3, [r3, #32]
 8013ad2:	f003 0320 	and.w	r3, r3, #32
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d02b      	beq.n	8013b32 <HAL_XSPI_Abort+0xe4>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	681a      	ldr	r2, [r3, #0]
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	f042 0202 	orr.w	r2, r2, #2
 8013ae8:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013aee:	9300      	str	r3, [sp, #0]
 8013af0:	693b      	ldr	r3, [r7, #16]
 8013af2:	2201      	movs	r2, #1
 8013af4:	2102      	movs	r1, #2
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	f000 f990 	bl	8013e1c <XSPI_WaitFlagStateUntilTimeout>
 8013afc:	4603      	mov	r3, r0
 8013afe:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8013b00:	7dfb      	ldrb	r3, [r7, #23]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d11f      	bne.n	8013b46 <HAL_XSPI_Abort+0xf8>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	2202      	movs	r2, #2
 8013b0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013b12:	9300      	str	r3, [sp, #0]
 8013b14:	693b      	ldr	r3, [r7, #16]
 8013b16:	2200      	movs	r2, #0
 8013b18:	2120      	movs	r1, #32
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f000 f97e 	bl	8013e1c <XSPI_WaitFlagStateUntilTimeout>
 8013b20:	4603      	mov	r3, r0
 8013b22:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8013b24:	7dfb      	ldrb	r3, [r7, #23]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d10d      	bne.n	8013b46 <HAL_XSPI_Abort+0xf8>
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	2202      	movs	r2, #2
 8013b2e:	655a      	str	r2, [r3, #84]	; 0x54
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 8013b30:	e009      	b.n	8013b46 <HAL_XSPI_Abort+0xf8>
        }
      }
    }
    else
    {
      hxspi->State = HAL_XSPI_STATE_READY;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	2202      	movs	r2, #2
 8013b36:	655a      	str	r2, [r3, #84]	; 0x54
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 8013b38:	e005      	b.n	8013b46 <HAL_XSPI_Abort+0xf8>
    }
  }
  else
  {
    status = HAL_ERROR;
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	75fb      	strb	r3, [r7, #23]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	2210      	movs	r2, #16
 8013b42:	659a      	str	r2, [r3, #88]	; 0x58
 8013b44:	e000      	b.n	8013b48 <HAL_XSPI_Abort+0xfa>
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 8013b46:	bf00      	nop
  }

  return status;
 8013b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	3718      	adds	r7, #24
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	bd80      	pop	{r7, pc}

08013b52 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8013b52:	b480      	push	{r7}
 8013b54:	b083      	sub	sp, #12
 8013b56:	af00      	add	r7, sp, #0
 8013b58:	6078      	str	r0, [r7, #4]
 8013b5a:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	683a      	ldr	r2, [r7, #0]
 8013b60:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 8013b62:	2300      	movs	r3, #0
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	370c      	adds	r7, #12
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6e:	4770      	bx	lr

08013b70 <HAL_XSPI_DLYB_SetConfig>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_SetConfig(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b084      	sub	sp, #16
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
 8013b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8013b7a:	2301      	movs	r3, #1
 8013b7c:	73fb      	strb	r3, [r7, #15]

  /* Enable XSPI Free Running Clock (mandatory) */
  SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	689a      	ldr	r2, [r3, #8]
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	f042 0202 	orr.w	r2, r2, #2
 8013b8c:	609a      	str	r2, [r3, #8]

  /* Update XSPI state */
  hxspi->State = HAL_XSPI_STATE_BUSY_CMD;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	2208      	movs	r2, #8
 8013b92:	655a      	str	r2, [r3, #84]	; 0x54

  if (hxspi->Instance == OCTOSPI1)
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	4a18      	ldr	r2, [pc, #96]	; (8013bfc <HAL_XSPI_DLYB_SetConfig+0x8c>)
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d109      	bne.n	8013bb2 <HAL_XSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8013b9e:	4818      	ldr	r0, [pc, #96]	; (8013c00 <HAL_XSPI_DLYB_SetConfig+0x90>)
 8013ba0:	f7ff fae8 	bl	8013174 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8013ba4:	6839      	ldr	r1, [r7, #0]
 8013ba6:	4816      	ldr	r0, [pc, #88]	; (8013c00 <HAL_XSPI_DLYB_SetConfig+0x90>)
 8013ba8:	f000 fb2e 	bl	8014208 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8013bac:	2300      	movs	r3, #0
 8013bae:	73fb      	strb	r3, [r7, #15]
 8013bb0:	e014      	b.n	8013bdc <HAL_XSPI_DLYB_SetConfig+0x6c>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	4a13      	ldr	r2, [pc, #76]	; (8013c04 <HAL_XSPI_DLYB_SetConfig+0x94>)
 8013bb8:	4293      	cmp	r3, r2
 8013bba:	d109      	bne.n	8013bd0 <HAL_XSPI_DLYB_SetConfig+0x60>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8013bbc:	4812      	ldr	r0, [pc, #72]	; (8013c08 <HAL_XSPI_DLYB_SetConfig+0x98>)
 8013bbe:	f7ff fad9 	bl	8013174 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8013bc2:	6839      	ldr	r1, [r7, #0]
 8013bc4:	4810      	ldr	r0, [pc, #64]	; (8013c08 <HAL_XSPI_DLYB_SetConfig+0x98>)
 8013bc6:	f000 fb1f 	bl	8014208 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8013bca:	2300      	movs	r3, #0
 8013bcc:	73fb      	strb	r3, [r7, #15]
 8013bce:	e005      	b.n	8013bdc <HAL_XSPI_DLYB_SetConfig+0x6c>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013bd4:	f043 0208 	orr.w	r2, r3, #8
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Abort the current XSPI operation if exist */
  (void)HAL_XSPI_Abort(hxspi);
 8013bdc:	6878      	ldr	r0, [r7, #4]
 8013bde:	f7ff ff36 	bl	8013a4e <HAL_XSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	689a      	ldr	r2, [r3, #8]
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	f022 0202 	bic.w	r2, r2, #2
 8013bf0:	609a      	str	r2, [r3, #8]

  return status;
 8013bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	3710      	adds	r7, #16
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd80      	pop	{r7, pc}
 8013bfc:	420d1400 	.word	0x420d1400
 8013c00:	420cf000 	.word	0x420cf000
 8013c04:	420d2400 	.word	0x420d2400
 8013c08:	420cf400 	.word	0x420cf400

08013c0c <HAL_XSPI_DLYB_GetConfig>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_GetConfig(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b084      	sub	sp, #16
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
 8013c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8013c16:	2301      	movs	r3, #1
 8013c18:	73fb      	strb	r3, [r7, #15]

  if (hxspi->Instance == OCTOSPI1)
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	4a10      	ldr	r2, [pc, #64]	; (8013c60 <HAL_XSPI_DLYB_GetConfig+0x54>)
 8013c20:	4293      	cmp	r3, r2
 8013c22:	d106      	bne.n	8013c32 <HAL_XSPI_DLYB_GetConfig+0x26>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8013c24:	6839      	ldr	r1, [r7, #0]
 8013c26:	480f      	ldr	r0, [pc, #60]	; (8013c64 <HAL_XSPI_DLYB_GetConfig+0x58>)
 8013c28:	f000 fb0d 	bl	8014246 <LL_DLYB_GetDelay>
    status = HAL_OK;
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	73fb      	strb	r3, [r7, #15]
 8013c30:	e011      	b.n	8013c56 <HAL_XSPI_DLYB_GetConfig+0x4a>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	4a0c      	ldr	r2, [pc, #48]	; (8013c68 <HAL_XSPI_DLYB_GetConfig+0x5c>)
 8013c38:	4293      	cmp	r3, r2
 8013c3a:	d106      	bne.n	8013c4a <HAL_XSPI_DLYB_GetConfig+0x3e>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8013c3c:	6839      	ldr	r1, [r7, #0]
 8013c3e:	480b      	ldr	r0, [pc, #44]	; (8013c6c <HAL_XSPI_DLYB_GetConfig+0x60>)
 8013c40:	f000 fb01 	bl	8014246 <LL_DLYB_GetDelay>
    status = HAL_OK;
 8013c44:	2300      	movs	r3, #0
 8013c46:	73fb      	strb	r3, [r7, #15]
 8013c48:	e005      	b.n	8013c56 <HAL_XSPI_DLYB_GetConfig+0x4a>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c4e:	f043 0208 	orr.w	r2, r3, #8
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 8013c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c58:	4618      	mov	r0, r3
 8013c5a:	3710      	adds	r7, #16
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}
 8013c60:	420d1400 	.word	0x420d1400
 8013c64:	420cf000 	.word	0x420cf000
 8013c68:	420d2400 	.word	0x420d2400
 8013c6c:	420cf400 	.word	0x420cf400

08013c70 <HAL_XSPI_DLYB_GetClockPeriod>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_GetClockPeriod(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b084      	sub	sp, #16
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8013c7a:	2301      	movs	r3, #1
 8013c7c:	73fb      	strb	r3, [r7, #15]

  /* Enable XSPI Free Running Clock (mandatory) */
  SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	689a      	ldr	r2, [r3, #8]
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	f042 0202 	orr.w	r2, r2, #2
 8013c8c:	609a      	str	r2, [r3, #8]

  /* Update XSPI state */
  hxspi->State = HAL_XSPI_STATE_BUSY_CMD;
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	2208      	movs	r2, #8
 8013c92:	655a      	str	r2, [r3, #84]	; 0x54

  if (hxspi->Instance == OCTOSPI1)
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	4a1e      	ldr	r2, [pc, #120]	; (8013d14 <HAL_XSPI_DLYB_GetClockPeriod+0xa4>)
 8013c9a:	4293      	cmp	r3, r2
 8013c9c:	d10f      	bne.n	8013cbe <HAL_XSPI_DLYB_GetClockPeriod+0x4e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8013c9e:	481e      	ldr	r0, [pc, #120]	; (8013d18 <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 8013ca0:	f7ff fa68 	bl	8013174 <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI1, pdlyb_cfg) == (uint32_t)SUCCESS)
 8013ca4:	6839      	ldr	r1, [r7, #0]
 8013ca6:	481c      	ldr	r0, [pc, #112]	; (8013d18 <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 8013ca8:	f000 fae6 	bl	8014278 <LL_DLYB_GetClockPeriod>
 8013cac:	4603      	mov	r3, r0
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d101      	bne.n	8013cb6 <HAL_XSPI_DLYB_GetClockPeriod+0x46>
    {
      status = HAL_OK;
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI1);
 8013cb6:	4818      	ldr	r0, [pc, #96]	; (8013d18 <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 8013cb8:	f7ff fa6c 	bl	8013194 <LL_DLYB_Disable>
 8013cbc:	e01a      	b.n	8013cf4 <HAL_XSPI_DLYB_GetClockPeriod+0x84>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	4a16      	ldr	r2, [pc, #88]	; (8013d1c <HAL_XSPI_DLYB_GetClockPeriod+0xac>)
 8013cc4:	4293      	cmp	r3, r2
 8013cc6:	d10f      	bne.n	8013ce8 <HAL_XSPI_DLYB_GetClockPeriod+0x78>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8013cc8:	4815      	ldr	r0, [pc, #84]	; (8013d20 <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 8013cca:	f7ff fa53 	bl	8013174 <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI2, pdlyb_cfg) == (uint32_t)SUCCESS)
 8013cce:	6839      	ldr	r1, [r7, #0]
 8013cd0:	4813      	ldr	r0, [pc, #76]	; (8013d20 <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 8013cd2:	f000 fad1 	bl	8014278 <LL_DLYB_GetClockPeriod>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d101      	bne.n	8013ce0 <HAL_XSPI_DLYB_GetClockPeriod+0x70>
    {
      status = HAL_OK;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI2);
 8013ce0:	480f      	ldr	r0, [pc, #60]	; (8013d20 <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 8013ce2:	f7ff fa57 	bl	8013194 <LL_DLYB_Disable>
 8013ce6:	e005      	b.n	8013cf4 <HAL_XSPI_DLYB_GetClockPeriod+0x84>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013cec:	f043 0208 	orr.w	r2, r3, #8
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Abort the current XSPI operation if exist */
  (void)HAL_XSPI_Abort(hxspi);
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f7ff feaa 	bl	8013a4e <HAL_XSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	689a      	ldr	r2, [r3, #8]
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	f022 0202 	bic.w	r2, r2, #2
 8013d08:	609a      	str	r2, [r3, #8]

  return status;
 8013d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	3710      	adds	r7, #16
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}
 8013d14:	420d1400 	.word	0x420d1400
 8013d18:	420cf000 	.word	0x420cf000
 8013d1c:	420d2400 	.word	0x420d2400
 8013d20:	420cf400 	.word	0x420cf400

08013d24 <HAL_XSPI_SetDelayValue>:
  * @param  hxspi : XSPI handle
  * @param  pCfg   : Configuration of delay value specified in DelayValueType field.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_SetDelayValue(XSPI_HandleTypeDef *hxspi, XSPI_HSCalTypeDef *const pCfg)
{
 8013d24:	b480      	push	{r7}
 8013d26:	b085      	sub	sp, #20
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
 8013d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013d2e:	2300      	movs	r3, #0
 8013d30:	73fb      	strb	r3, [r7, #15]

  if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	4a37      	ldr	r2, [pc, #220]	; (8013e14 <HAL_XSPI_SetDelayValue+0xf0>)
 8013d38:	4293      	cmp	r3, r2
 8013d3a:	d004      	beq.n	8013d46 <HAL_XSPI_SetDelayValue+0x22>
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	4a35      	ldr	r2, [pc, #212]	; (8013e18 <HAL_XSPI_SetDelayValue+0xf4>)
 8013d42:	4293      	cmp	r3, r2
 8013d44:	d159      	bne.n	8013dfa <HAL_XSPI_SetDelayValue+0xd6>
    assert_param(IS_XSPI_DELAY_TYPE(pCfg->DelayValueType));
    assert_param(IS_XSPI_FINECAL_VALUE(pCfg->FineCalibrationUnit));
    assert_param(IS_XSPI_COARSECAL_VALUE(pCfg->CoarseCalibrationUnit));

    /* Check if the state isn't in one of the busy states */
    if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d4a:	f003 0308 	and.w	r3, r3, #8
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d14c      	bne.n	8013dec <HAL_XSPI_SetDelayValue+0xc8>
    {
      switch (pCfg->DelayValueType)
 8013d52:	683b      	ldr	r3, [r7, #0]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	2b03      	cmp	r3, #3
 8013d58:	d02e      	beq.n	8013db8 <HAL_XSPI_SetDelayValue+0x94>
 8013d5a:	2b03      	cmp	r3, #3
 8013d5c:	d840      	bhi.n	8013de0 <HAL_XSPI_SetDelayValue+0xbc>
 8013d5e:	2b01      	cmp	r3, #1
 8013d60:	d002      	beq.n	8013d68 <HAL_XSPI_SetDelayValue+0x44>
 8013d62:	2b02      	cmp	r3, #2
 8013d64:	d014      	beq.n	8013d90 <HAL_XSPI_SetDelayValue+0x6c>
 8013d66:	e03b      	b.n	8013de0 <HAL_XSPI_SetDelayValue+0xbc>
      {
        case HAL_XSPI_CAL_FEEDBACK_CLK_DELAY:
          MODIFY_REG(hxspi->Instance->CALMR, (HSPI_CALMR_COARSE |  HSPI_CALMR_FINE),
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013d70:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8013d74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013d78:	683a      	ldr	r2, [r7, #0]
 8013d7a:	6851      	ldr	r1, [r2, #4]
 8013d7c:	683a      	ldr	r2, [r7, #0]
 8013d7e:	6892      	ldr	r2, [r2, #8]
 8013d80:	0412      	lsls	r2, r2, #16
 8013d82:	4311      	orrs	r1, r2
 8013d84:	687a      	ldr	r2, [r7, #4]
 8013d86:	6812      	ldr	r2, [r2, #0]
 8013d88:	430b      	orrs	r3, r1
 8013d8a:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALMR_COARSE_Pos)));
          break;
 8013d8e:	e033      	b.n	8013df8 <HAL_XSPI_SetDelayValue+0xd4>
        case HAL_XSPI_CAL_DATA_OUTPUT_DELAY:
          MODIFY_REG(hxspi->Instance->CALSOR, (HSPI_CALSOR_COARSE | HSPI_CALSOR_FINE),
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013d98:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8013d9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013da0:	683a      	ldr	r2, [r7, #0]
 8013da2:	6851      	ldr	r1, [r2, #4]
 8013da4:	683a      	ldr	r2, [r7, #0]
 8013da6:	6892      	ldr	r2, [r2, #8]
 8013da8:	0412      	lsls	r2, r2, #16
 8013daa:	4311      	orrs	r1, r2
 8013dac:	687a      	ldr	r2, [r7, #4]
 8013dae:	6812      	ldr	r2, [r2, #0]
 8013db0:	430b      	orrs	r3, r1
 8013db2:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALSOR_COARSE_Pos)));
          break;
 8013db6:	e01f      	b.n	8013df8 <HAL_XSPI_SetDelayValue+0xd4>
        case HAL_XSPI_CAL_DQS_INPUT_DELAY:
          MODIFY_REG(hxspi->Instance->CALSIR, (HSPI_CALSIR_COARSE | HSPI_CALSIR_FINE),
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8013dc0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8013dc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013dc8:	683a      	ldr	r2, [r7, #0]
 8013dca:	6851      	ldr	r1, [r2, #4]
 8013dcc:	683a      	ldr	r2, [r7, #0]
 8013dce:	6892      	ldr	r2, [r2, #8]
 8013dd0:	0412      	lsls	r2, r2, #16
 8013dd2:	4311      	orrs	r1, r2
 8013dd4:	687a      	ldr	r2, [r7, #4]
 8013dd6:	6812      	ldr	r2, [r2, #0]
 8013dd8:	430b      	orrs	r3, r1
 8013dda:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALSIR_COARSE_Pos)));
          break;
 8013dde:	e00b      	b.n	8013df8 <HAL_XSPI_SetDelayValue+0xd4>
        default:
          status = HAL_ERROR;
 8013de0:	2301      	movs	r3, #1
 8013de2:	73fb      	strb	r3, [r7, #15]
          hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	2208      	movs	r2, #8
 8013de8:	659a      	str	r2, [r3, #88]	; 0x58
          break;
 8013dea:	e005      	b.n	8013df8 <HAL_XSPI_SetDelayValue+0xd4>
      }
    }
    else
    {
      status = HAL_ERROR;
 8013dec:	2301      	movs	r3, #1
 8013dee:	73fb      	strb	r3, [r7, #15]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2210      	movs	r2, #16
 8013df4:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
 8013df6:	e005      	b.n	8013e04 <HAL_XSPI_SetDelayValue+0xe0>
 8013df8:	e004      	b.n	8013e04 <HAL_XSPI_SetDelayValue+0xe0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8013dfa:	2301      	movs	r3, #1
 8013dfc:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	2208      	movs	r2, #8
 8013e02:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 8013e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e06:	4618      	mov	r0, r3
 8013e08:	3714      	adds	r7, #20
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e10:	4770      	bx	lr
 8013e12:	bf00      	nop
 8013e14:	420d3400 	.word	0x420d3400
 8013e18:	520d3400 	.word	0x520d3400

08013e1c <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b084      	sub	sp, #16
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	60f8      	str	r0, [r7, #12]
 8013e24:	60b9      	str	r1, [r7, #8]
 8013e26:	603b      	str	r3, [r7, #0]
 8013e28:	4613      	mov	r3, r2
 8013e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8013e2c:	e01a      	b.n	8013e64 <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013e2e:	69bb      	ldr	r3, [r7, #24]
 8013e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e34:	d016      	beq.n	8013e64 <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013e36:	f7f3 fec1 	bl	8007bbc <HAL_GetTick>
 8013e3a:	4602      	mov	r2, r0
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	1ad3      	subs	r3, r2, r3
 8013e40:	69ba      	ldr	r2, [r7, #24]
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d302      	bcc.n	8013e4c <XSPI_WaitFlagStateUntilTimeout+0x30>
 8013e46:	69bb      	ldr	r3, [r7, #24]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d10b      	bne.n	8013e64 <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013e52:	655a      	str	r2, [r3, #84]	; 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e58:	f043 0201 	orr.w	r2, r3, #1
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8013e60:	2303      	movs	r3, #3
 8013e62:	e00e      	b.n	8013e82 <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	6a1a      	ldr	r2, [r3, #32]
 8013e6a:	68bb      	ldr	r3, [r7, #8]
 8013e6c:	4013      	ands	r3, r2
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	bf14      	ite	ne
 8013e72:	2301      	movne	r3, #1
 8013e74:	2300      	moveq	r3, #0
 8013e76:	b2db      	uxtb	r3, r3
 8013e78:	461a      	mov	r2, r3
 8013e7a:	79fb      	ldrb	r3, [r7, #7]
 8013e7c:	429a      	cmp	r2, r3
 8013e7e:	d1d6      	bne.n	8013e2e <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013e80:	2300      	movs	r3, #0
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3710      	adds	r7, #16
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
	...

08013e8c <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 8013e8c:	b480      	push	{r7}
 8013e8e:	b089      	sub	sp, #36	; 0x24
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]
 8013e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013e96:	2300      	movs	r3, #0
 8013e98:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	681a      	ldr	r2, [r3, #0]
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8013ea8:	601a      	str	r2, [r3, #0]

  if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	4a8f      	ldr	r2, [pc, #572]	; (80140ec <XSPI_ConfigCmd+0x260>)
 8013eb0:	4293      	cmp	r3, r2
 8013eb2:	d00e      	beq.n	8013ed2 <XSPI_ConfigCmd+0x46>
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	4a8d      	ldr	r2, [pc, #564]	; (80140f0 <XSPI_ConfigCmd+0x264>)
 8013eba:	4293      	cmp	r3, r2
 8013ebc:	d009      	beq.n	8013ed2 <XSPI_ConfigCmd+0x46>
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	4a8c      	ldr	r2, [pc, #560]	; (80140f4 <XSPI_ConfigCmd+0x268>)
 8013ec4:	4293      	cmp	r3, r2
 8013ec6:	d004      	beq.n	8013ed2 <XSPI_ConfigCmd+0x46>
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	4a8a      	ldr	r2, [pc, #552]	; (80140f8 <XSPI_ConfigCmd+0x26c>)
 8013ece:	4293      	cmp	r3, r2
 8013ed0:	d10f      	bne.n	8013ef2 <XSPI_ConfigCmd+0x66>
  {
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	689b      	ldr	r3, [r3, #8]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d12d      	bne.n	8013f36 <XSPI_ConfigCmd+0xaa>
    {
      assert_param(IS_OCTOSPI_IO_SELECT(pCmd->IOSelect));
      MODIFY_REG(hxspi->Instance->CR, OCTOSPI_CR_MSEL, pCmd->IOSelect);
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	685a      	ldr	r2, [r3, #4]
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	430a      	orrs	r2, r1
 8013eee:	601a      	str	r2, [r3, #0]
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8013ef0:	e021      	b.n	8013f36 <XSPI_ConfigCmd+0xaa>
    }
  }
#if defined(HSPI1)
  else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	4a81      	ldr	r2, [pc, #516]	; (80140fc <XSPI_ConfigCmd+0x270>)
 8013ef8:	4293      	cmp	r3, r2
 8013efa:	d004      	beq.n	8013f06 <XSPI_ConfigCmd+0x7a>
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	4a7f      	ldr	r2, [pc, #508]	; (8014100 <XSPI_ConfigCmd+0x274>)
 8013f02:	4293      	cmp	r3, r2
 8013f04:	d10f      	bne.n	8013f26 <XSPI_ConfigCmd+0x9a>
  {
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	689b      	ldr	r3, [r3, #8]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d113      	bne.n	8013f36 <XSPI_ConfigCmd+0xaa>
    {
      assert_param(IS_HSPI_IO_SELECT(pCmd->IOSelect));
      MODIFY_REG(hxspi->Instance->CR, HSPI_CR_MSEL, pCmd->IOSelect);
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8013f18:	683b      	ldr	r3, [r7, #0]
 8013f1a:	685a      	ldr	r2, [r3, #4]
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	430a      	orrs	r2, r1
 8013f22:	601a      	str	r2, [r3, #0]
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8013f24:	e007      	b.n	8013f36 <XSPI_ConfigCmd+0xaa>
    }
  }
#endif /* HSPI1 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f2a:	f043 0208 	orr.w	r2, r3, #8
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	659a      	str	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8013f32:	2301      	movs	r3, #1
 8013f34:	e162      	b.n	80141fc <XSPI_ConfigCmd+0x370>
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8013f36:	683b      	ldr	r3, [r7, #0]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	2b02      	cmp	r3, #2
 8013f3c:	d114      	bne.n	8013f68 <XSPI_ConfigCmd+0xdc>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8013f46:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8013f50:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8013f5a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8013f64:	60fb      	str	r3, [r7, #12]
 8013f66:	e02c      	b.n	8013fc2 <XSPI_ConfigCmd+0x136>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	2b03      	cmp	r3, #3
 8013f6e:	d114      	bne.n	8013f9a <XSPI_ConfigCmd+0x10e>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8013f78:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8013f82:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013f8c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013f96:	60fb      	str	r3, [r7, #12]
 8013f98:	e013      	b.n	8013fc2 <XSPI_ConfigCmd+0x136>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013fa2:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8013fac:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8013fb6:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8013fc0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (pCmd->DQSMode | pCmd->SIOOMode);
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013fca:	431a      	orrs	r2, r3
 8013fcc:	69bb      	ldr	r3, [r7, #24]
 8013fce:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d012      	beq.n	8013ffe <XSPI_ConfigCmd+0x172>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 8013fe0:	69bb      	ldr	r3, [r7, #24]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013fec:	683b      	ldr	r3, [r7, #0]
 8013fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ff0:	4319      	orrs	r1, r3
 8013ff2:	683b      	ldr	r3, [r7, #0]
 8013ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ff6:	430b      	orrs	r3, r1
 8013ff8:	431a      	orrs	r2, r3
 8013ffa:	69bb      	ldr	r3, [r7, #24]
 8013ffc:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 8013ffe:	697b      	ldr	r3, [r7, #20]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	f023 021f 	bic.w	r2, r3, #31
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801400a:	431a      	orrs	r2, r3
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014014:	2b00      	cmp	r3, #0
 8014016:	d009      	beq.n	801402c <XSPI_ConfigCmd+0x1a0>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8014018:	683b      	ldr	r3, [r7, #0]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d105      	bne.n	801402c <XSPI_ConfigCmd+0x1a0>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	3a01      	subs	r2, #1
 801402a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 801402c:	683b      	ldr	r3, [r7, #0]
 801402e:	68db      	ldr	r3, [r3, #12]
 8014030:	2b00      	cmp	r3, #0
 8014032:	f000 80a8 	beq.w	8014186 <XSPI_ConfigCmd+0x2fa>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	69db      	ldr	r3, [r3, #28]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d064      	beq.n	8014108 <XSPI_ConfigCmd+0x27c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014042:	2b00      	cmp	r3, #0
 8014044:	d01e      	beq.n	8014084 <XSPI_ConfigCmd+0x1f8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8014046:	69bb      	ldr	r3, [r7, #24]
 8014048:	681a      	ldr	r2, [r3, #0]
 801404a:	4b2e      	ldr	r3, [pc, #184]	; (8014104 <XSPI_ConfigCmd+0x278>)
 801404c:	4013      	ands	r3, r2
 801404e:	683a      	ldr	r2, [r7, #0]
 8014050:	68d1      	ldr	r1, [r2, #12]
 8014052:	683a      	ldr	r2, [r7, #0]
 8014054:	6952      	ldr	r2, [r2, #20]
 8014056:	4311      	orrs	r1, r2
 8014058:	683a      	ldr	r2, [r7, #0]
 801405a:	6912      	ldr	r2, [r2, #16]
 801405c:	4311      	orrs	r1, r2
 801405e:	683a      	ldr	r2, [r7, #0]
 8014060:	69d2      	ldr	r2, [r2, #28]
 8014062:	4311      	orrs	r1, r2
 8014064:	683a      	ldr	r2, [r7, #0]
 8014066:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014068:	4311      	orrs	r1, r2
 801406a:	683a      	ldr	r2, [r7, #0]
 801406c:	6a12      	ldr	r2, [r2, #32]
 801406e:	4311      	orrs	r1, r2
 8014070:	683a      	ldr	r2, [r7, #0]
 8014072:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8014074:	4311      	orrs	r1, r2
 8014076:	683a      	ldr	r2, [r7, #0]
 8014078:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801407a:	430a      	orrs	r2, r1
 801407c:	431a      	orrs	r2, r3
 801407e:	69bb      	ldr	r3, [r7, #24]
 8014080:	601a      	str	r2, [r3, #0]
 8014082:	e028      	b.n	80140d6 <XSPI_ConfigCmd+0x24a>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8014084:	69bb      	ldr	r3, [r7, #24]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801408c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8014090:	683a      	ldr	r2, [r7, #0]
 8014092:	68d1      	ldr	r1, [r2, #12]
 8014094:	683a      	ldr	r2, [r7, #0]
 8014096:	6952      	ldr	r2, [r2, #20]
 8014098:	4311      	orrs	r1, r2
 801409a:	683a      	ldr	r2, [r7, #0]
 801409c:	6912      	ldr	r2, [r2, #16]
 801409e:	4311      	orrs	r1, r2
 80140a0:	683a      	ldr	r2, [r7, #0]
 80140a2:	69d2      	ldr	r2, [r2, #28]
 80140a4:	4311      	orrs	r1, r2
 80140a6:	683a      	ldr	r2, [r7, #0]
 80140a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80140aa:	4311      	orrs	r1, r2
 80140ac:	683a      	ldr	r2, [r7, #0]
 80140ae:	6a12      	ldr	r2, [r2, #32]
 80140b0:	430a      	orrs	r2, r1
 80140b2:	431a      	orrs	r2, r3
 80140b4:	69bb      	ldr	r3, [r7, #24]
 80140b6:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80140c0:	d109      	bne.n	80140d6 <XSPI_ConfigCmd+0x24a>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 80140c6:	2b08      	cmp	r3, #8
 80140c8:	d105      	bne.n	80140d6 <XSPI_ConfigCmd+0x24a>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 80140ca:	69bb      	ldr	r3, [r7, #24]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80140d2:	69bb      	ldr	r3, [r7, #24]
 80140d4:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	689a      	ldr	r2, [r3, #8]
 80140da:	693b      	ldr	r3, [r7, #16]
 80140dc:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	683a      	ldr	r2, [r7, #0]
 80140e4:	6992      	ldr	r2, [r2, #24]
 80140e6:	649a      	str	r2, [r3, #72]	; 0x48
 80140e8:	e087      	b.n	80141fa <XSPI_ConfigCmd+0x36e>
 80140ea:	bf00      	nop
 80140ec:	420d1400 	.word	0x420d1400
 80140f0:	520d1400 	.word	0x520d1400
 80140f4:	420d2400 	.word	0x420d2400
 80140f8:	520d2400 	.word	0x520d2400
 80140fc:	420d3400 	.word	0x420d3400
 8014100:	520d3400 	.word	0x520d3400
 8014104:	f0ffc0c0 	.word	0xf0ffc0c0
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801410c:	2b00      	cmp	r3, #0
 801410e:	d017      	beq.n	8014140 <XSPI_ConfigCmd+0x2b4>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 8014110:	69bb      	ldr	r3, [r7, #24]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8014118:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801411c:	683a      	ldr	r2, [r7, #0]
 801411e:	68d1      	ldr	r1, [r2, #12]
 8014120:	683a      	ldr	r2, [r7, #0]
 8014122:	6952      	ldr	r2, [r2, #20]
 8014124:	4311      	orrs	r1, r2
 8014126:	683a      	ldr	r2, [r7, #0]
 8014128:	6912      	ldr	r2, [r2, #16]
 801412a:	4311      	orrs	r1, r2
 801412c:	683a      	ldr	r2, [r7, #0]
 801412e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8014130:	4311      	orrs	r1, r2
 8014132:	683a      	ldr	r2, [r7, #0]
 8014134:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8014136:	430a      	orrs	r2, r1
 8014138:	431a      	orrs	r2, r3
 801413a:	69bb      	ldr	r3, [r7, #24]
 801413c:	601a      	str	r2, [r3, #0]
 801413e:	e01d      	b.n	801417c <XSPI_ConfigCmd+0x2f0>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 8014140:	69bb      	ldr	r3, [r7, #24]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8014148:	683b      	ldr	r3, [r7, #0]
 801414a:	68d9      	ldr	r1, [r3, #12]
 801414c:	683b      	ldr	r3, [r7, #0]
 801414e:	695b      	ldr	r3, [r3, #20]
 8014150:	4319      	orrs	r1, r3
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	691b      	ldr	r3, [r3, #16]
 8014156:	430b      	orrs	r3, r1
 8014158:	431a      	orrs	r2, r3
 801415a:	69bb      	ldr	r3, [r7, #24]
 801415c:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014166:	d109      	bne.n	801417c <XSPI_ConfigCmd+0x2f0>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 801416c:	2b08      	cmp	r3, #8
 801416e:	d105      	bne.n	801417c <XSPI_ConfigCmd+0x2f0>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8014170:	69bb      	ldr	r3, [r7, #24]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8014178:	69bb      	ldr	r3, [r7, #24]
 801417a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 801417c:	683b      	ldr	r3, [r7, #0]
 801417e:	689a      	ldr	r2, [r3, #8]
 8014180:	693b      	ldr	r3, [r7, #16]
 8014182:	601a      	str	r2, [r3, #0]
 8014184:	e039      	b.n	80141fa <XSPI_ConfigCmd+0x36e>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	69db      	ldr	r3, [r3, #28]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d030      	beq.n	80141f0 <XSPI_ConfigCmd+0x364>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 801418e:	683b      	ldr	r3, [r7, #0]
 8014190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014192:	2b00      	cmp	r3, #0
 8014194:	d017      	beq.n	80141c6 <XSPI_ConfigCmd+0x33a>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 8014196:	69bb      	ldr	r3, [r7, #24]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 801419e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80141a2:	683a      	ldr	r2, [r7, #0]
 80141a4:	69d1      	ldr	r1, [r2, #28]
 80141a6:	683a      	ldr	r2, [r7, #0]
 80141a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80141aa:	4311      	orrs	r1, r2
 80141ac:	683a      	ldr	r2, [r7, #0]
 80141ae:	6a12      	ldr	r2, [r2, #32]
 80141b0:	4311      	orrs	r1, r2
 80141b2:	683a      	ldr	r2, [r7, #0]
 80141b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80141b6:	4311      	orrs	r1, r2
 80141b8:	683a      	ldr	r2, [r7, #0]
 80141ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80141bc:	430a      	orrs	r2, r1
 80141be:	431a      	orrs	r2, r3
 80141c0:	69bb      	ldr	r3, [r7, #24]
 80141c2:	601a      	str	r2, [r3, #0]
 80141c4:	e00e      	b.n	80141e4 <XSPI_ConfigCmd+0x358>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 80141c6:	69bb      	ldr	r3, [r7, #24]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80141ce:	683b      	ldr	r3, [r7, #0]
 80141d0:	69d9      	ldr	r1, [r3, #28]
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141d6:	4319      	orrs	r1, r3
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	6a1b      	ldr	r3, [r3, #32]
 80141dc:	430b      	orrs	r3, r1
 80141de:	431a      	orrs	r2, r3
 80141e0:	69bb      	ldr	r3, [r7, #24]
 80141e2:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	683a      	ldr	r2, [r7, #0]
 80141ea:	6992      	ldr	r2, [r2, #24]
 80141ec:	649a      	str	r2, [r3, #72]	; 0x48
 80141ee:	e004      	b.n	80141fa <XSPI_ConfigCmd+0x36e>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 80141f0:	2301      	movs	r3, #1
 80141f2:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	2208      	movs	r2, #8
 80141f8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 80141fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80141fc:	4618      	mov	r0, r3
 80141fe:	3724      	adds	r7, #36	; 0x24
 8014200:	46bd      	mov	sp, r7
 8014202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014206:	4770      	bx	lr

08014208 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8014208:	b480      	push	{r7}
 801420a:	b083      	sub	sp, #12
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
 8014210:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	f043 0202 	orr.w	r2, r3, #2
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 801421e:	683b      	ldr	r3, [r7, #0]
 8014220:	685a      	ldr	r2, [r3, #4]
 8014222:	683b      	ldr	r3, [r7, #0]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	021b      	lsls	r3, r3, #8
 8014228:	431a      	orrs	r2, r3
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	f023 0202 	bic.w	r2, r3, #2
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	601a      	str	r2, [r3, #0]
}
 801423a:	bf00      	nop
 801423c:	370c      	adds	r7, #12
 801423e:	46bd      	mov	sp, r7
 8014240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014244:	4770      	bx	lr

08014246 <LL_DLYB_GetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is received.
  *          - ERROR: the Delay value is not received.
  */
void LL_DLYB_GetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 8014246:	b480      	push	{r7}
 8014248:	b083      	sub	sp, #12
 801424a:	af00      	add	r7, sp, #0
 801424c:	6078      	str	r0, [r7, #4]
 801424e:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Fill the DelayBlock configuration structure with SEL and UNIT value */
  pdlyb_cfg->Units = ((DLYBx->CFGR & DLYB_CFGR_UNIT) >> DLYB_CFGR_UNIT_Pos);
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	685b      	ldr	r3, [r3, #4]
 8014254:	0a1b      	lsrs	r3, r3, #8
 8014256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801425a:	683b      	ldr	r3, [r7, #0]
 801425c:	601a      	str	r2, [r3, #0]
  pdlyb_cfg->PhaseSel = (DLYBx->CFGR & DLYB_CFGR_SEL);
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	685b      	ldr	r3, [r3, #4]
 8014262:	f003 020f 	and.w	r2, r3, #15
 8014266:	683b      	ldr	r3, [r7, #0]
 8014268:	605a      	str	r2, [r3, #4]
}
 801426a:	bf00      	nop
 801426c:	370c      	adds	r7, #12
 801426e:	46bd      	mov	sp, r7
 8014270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014274:	4770      	bx	lr
	...

08014278 <LL_DLYB_GetClockPeriod>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: there is a valid period detected and stored in pdlyb_cfg.
  *          - ERROR: there is no valid period detected.
  */
uint32_t LL_DLYB_GetClockPeriod(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b086      	sub	sp, #24
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
 8014280:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8014282:	2300      	movs	r3, #0
 8014284:	617b      	str	r3, [r7, #20]

  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	f043 0202 	orr.w	r2, r3, #2
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	601a      	str	r2, [r3, #0]

  /* Delay line length detection */
  while (i < DLYB_MAX_UNIT)
 8014292:	e02a      	b.n	80142ea <LL_DLYB_GetClockPeriod+0x72>
  {
    /* Set the Delay of the UNIT(s)*/
    DLYBx->CFGR = DLYB_MAX_SELECT | (i << DLYB_CFGR_UNIT_Pos);
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	021b      	lsls	r3, r3, #8
 8014298:	f043 020c 	orr.w	r2, r3, #12
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	605a      	str	r2, [r3, #4]

    /* Waiting for a LNG valid value */
    tickstart =  HAL_GetTick();
 80142a0:	f7f3 fc8c 	bl	8007bbc <HAL_GetTick>
 80142a4:	60f8      	str	r0, [r7, #12]
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 80142a6:	e00c      	b.n	80142c2 <LL_DLYB_GetClockPeriod+0x4a>
    {
      if ((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 80142a8:	f7f3 fc88 	bl	8007bbc <HAL_GetTick>
 80142ac:	4602      	mov	r2, r0
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	1ad3      	subs	r3, r2, r3
 80142b2:	2bfe      	cmp	r3, #254	; 0xfe
 80142b4:	d905      	bls.n	80142c2 <LL_DLYB_GetClockPeriod+0x4a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	685b      	ldr	r3, [r3, #4]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	db01      	blt.n	80142c2 <LL_DLYB_GetClockPeriod+0x4a>
        {
          return (uint32_t) HAL_TIMEOUT;
 80142be:	2303      	movs	r3, #3
 80142c0:	e042      	b.n	8014348 <LL_DLYB_GetClockPeriod+0xd0>
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	685b      	ldr	r3, [r3, #4]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	daee      	bge.n	80142a8 <LL_DLYB_GetClockPeriod+0x30>
        }
      }
    }

    if ((DLYBx->CFGR & DLYB_LNG_10_0_MASK) != 0U)
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	685a      	ldr	r2, [r3, #4]
 80142ce:	4b20      	ldr	r3, [pc, #128]	; (8014350 <LL_DLYB_GetClockPeriod+0xd8>)
 80142d0:	4013      	ands	r3, r2
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d006      	beq.n	80142e4 <LL_DLYB_GetClockPeriod+0x6c>
    {
      if ((DLYBx->CFGR & (DLYB_CFGR_LNG_11 | DLYB_CFGR_LNG_10)) != DLYB_LNG_11_10_MASK)
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	685b      	ldr	r3, [r3, #4]
 80142da:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80142de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80142e2:	d106      	bne.n	80142f2 <LL_DLYB_GetClockPeriod+0x7a>
      {
        /* Delay line length is configured to one input clock period*/
        break;
      }
    }
    i++;
 80142e4:	697b      	ldr	r3, [r7, #20]
 80142e6:	3301      	adds	r3, #1
 80142e8:	617b      	str	r3, [r7, #20]
  while (i < DLYB_MAX_UNIT)
 80142ea:	697b      	ldr	r3, [r7, #20]
 80142ec:	2b7f      	cmp	r3, #127	; 0x7f
 80142ee:	d9d1      	bls.n	8014294 <LL_DLYB_GetClockPeriod+0x1c>
 80142f0:	e000      	b.n	80142f4 <LL_DLYB_GetClockPeriod+0x7c>
        break;
 80142f2:	bf00      	nop
  }

  if (DLYB_MAX_UNIT != i)
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	2b80      	cmp	r3, #128	; 0x80
 80142f8:	d022      	beq.n	8014340 <LL_DLYB_GetClockPeriod+0xc8>
  {
    /* Determine how many unit delays (nb) span one input clock period */
    lng = (DLYBx->CFGR & DLYB_CFGR_LNG) >> 16U;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	685b      	ldr	r3, [r3, #4]
 80142fe:	0c1b      	lsrs	r3, r3, #16
 8014300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014304:	60bb      	str	r3, [r7, #8]
    nb = 10U;
 8014306:	230a      	movs	r3, #10
 8014308:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 801430a:	e002      	b.n	8014312 <LL_DLYB_GetClockPeriod+0x9a>
    {
      nb--;
 801430c:	693b      	ldr	r3, [r7, #16]
 801430e:	3b01      	subs	r3, #1
 8014310:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 8014312:	693b      	ldr	r3, [r7, #16]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d005      	beq.n	8014324 <LL_DLYB_GetClockPeriod+0xac>
 8014318:	68ba      	ldr	r2, [r7, #8]
 801431a:	693b      	ldr	r3, [r7, #16]
 801431c:	fa22 f303 	lsr.w	r3, r2, r3
 8014320:	2b00      	cmp	r3, #0
 8014322:	d0f3      	beq.n	801430c <LL_DLYB_GetClockPeriod+0x94>
    }
    if (nb != 0U)
 8014324:	693b      	ldr	r3, [r7, #16]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d00a      	beq.n	8014340 <LL_DLYB_GetClockPeriod+0xc8>
    {
      pdlyb_cfg->PhaseSel = nb ;
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	693a      	ldr	r2, [r7, #16]
 801432e:	605a      	str	r2, [r3, #4]
      pdlyb_cfg->Units = i ;
 8014330:	683b      	ldr	r3, [r7, #0]
 8014332:	697a      	ldr	r2, [r7, #20]
 8014334:	601a      	str	r2, [r3, #0]

      /* Disable the length sampling */
      DLYBx->CR = DLYB_CR_SEN;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2202      	movs	r2, #2
 801433a:	601a      	str	r2, [r3, #0]

      return (uint32_t)SUCCESS;
 801433c:	2300      	movs	r3, #0
 801433e:	e003      	b.n	8014348 <LL_DLYB_GetClockPeriod+0xd0>
    }
  }

  /* Disable the length sampling */
  DLYBx->CR = DLYB_CR_SEN;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2202      	movs	r2, #2
 8014344:	601a      	str	r2, [r3, #0]

  return (uint32_t)ERROR;
 8014346:	2301      	movs	r3, #1

}
 8014348:	4618      	mov	r0, r3
 801434a:	3718      	adds	r7, #24
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}
 8014350:	07ff0000 	.word	0x07ff0000

08014354 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b096      	sub	sp, #88	; 0x58
 8014358:	af00      	add	r7, sp, #0
 801435a:	60f8      	str	r0, [r7, #12]
 801435c:	60b9      	str	r1, [r7, #8]
 801435e:	607a      	str	r2, [r7, #4]
 8014360:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	3303      	adds	r3, #3
 8014366:	f023 0303 	bic.w	r3, r3, #3
 801436a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801436c:	f3ef 8310 	mrs	r3, PRIMASK
 8014370:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8014372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8014374:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8014376:	b672      	cpsid	i
#endif
    return(int_posture);
 8014378:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 801437a:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801437c:	4b55      	ldr	r3, [pc, #340]	; (80144d4 <_tx_byte_allocate+0x180>)
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8014382:	2300      	movs	r3, #0
 8014384:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801438a:	621a      	str	r2, [r3, #32]
 801438c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801438e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014392:	f383 8810 	msr	PRIMASK, r3
}
 8014396:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8014398:	6879      	ldr	r1, [r7, #4]
 801439a:	68f8      	ldr	r0, [r7, #12]
 801439c:	f000 f9b2 	bl	8014704 <_tx_byte_pool_search>
 80143a0:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80143a2:	f3ef 8310 	mrs	r3, PRIMASK
 80143a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80143a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80143aa:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80143ac:	b672      	cpsid	i
    return(int_posture);
 80143ae:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 80143b0:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 80143b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d002      	beq.n	80143be <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 80143b8:	2301      	movs	r3, #1
 80143ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80143bc:	e006      	b.n	80143cc <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	6a1b      	ldr	r3, [r3, #32]
 80143c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80143c4:	429a      	cmp	r2, r3
 80143c6:	d101      	bne.n	80143cc <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 80143c8:	2301      	movs	r3, #1
 80143ca:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 80143cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d0d9      	beq.n	8014386 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 80143d2:	68bb      	ldr	r3, [r7, #8]
 80143d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80143d6:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 80143d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d008      	beq.n	80143f0 <_tx_byte_allocate+0x9c>
 80143de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143e0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80143e2:	6a3b      	ldr	r3, [r7, #32]
 80143e4:	f383 8810 	msr	PRIMASK, r3
}
 80143e8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 80143ea:	2300      	movs	r3, #0
 80143ec:	653b      	str	r3, [r7, #80]	; 0x50
 80143ee:	e06c      	b.n	80144ca <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d061      	beq.n	80144ba <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80143f6:	4b38      	ldr	r3, [pc, #224]	; (80144d8 <_tx_byte_allocate+0x184>)
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d007      	beq.n	801440e <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 80143fe:	2310      	movs	r3, #16
 8014400:	653b      	str	r3, [r7, #80]	; 0x50
 8014402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014404:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014406:	69fb      	ldr	r3, [r7, #28]
 8014408:	f383 8810 	msr	PRIMASK, r3
}
 801440c:	e05d      	b.n	80144ca <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 801440e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014410:	4a32      	ldr	r2, [pc, #200]	; (80144dc <_tx_byte_allocate+0x188>)
 8014412:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8014414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014416:	68fa      	ldr	r2, [r7, #12]
 8014418:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 801441a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801441c:	68ba      	ldr	r2, [r7, #8]
 801441e:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8014420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014422:	687a      	ldr	r2, [r7, #4]
 8014424:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8014426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014428:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801442c:	1c5a      	adds	r2, r3, #1
 801442e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014430:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014438:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801443e:	1c5a      	adds	r2, r3, #1
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8014444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014446:	2b00      	cmp	r3, #0
 8014448:	d109      	bne.n	801445e <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801444e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8014450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014454:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8014456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801445a:	675a      	str	r2, [r3, #116]	; 0x74
 801445c:	e011      	b.n	8014482 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014462:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8014464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014466:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014468:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801446a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801446c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801446e:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8014470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014474:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8014476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801447a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801447c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801447e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014480:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8014482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014484:	2209      	movs	r2, #9
 8014486:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801448a:	2201      	movs	r2, #1
 801448c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801448e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014490:	683a      	ldr	r2, [r7, #0]
 8014492:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8014494:	4b10      	ldr	r3, [pc, #64]	; (80144d8 <_tx_byte_allocate+0x184>)
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	3301      	adds	r3, #1
 801449a:	4a0f      	ldr	r2, [pc, #60]	; (80144d8 <_tx_byte_allocate+0x184>)
 801449c:	6013      	str	r3, [r2, #0]
 801449e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80144a0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80144a2:	69bb      	ldr	r3, [r7, #24]
 80144a4:	f383 8810 	msr	PRIMASK, r3
}
 80144a8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80144aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80144ac:	f001 fb02 	bl	8015ab4 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80144b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80144b6:	653b      	str	r3, [r7, #80]	; 0x50
 80144b8:	e007      	b.n	80144ca <_tx_byte_allocate+0x176>
 80144ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80144bc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80144be:	697b      	ldr	r3, [r7, #20]
 80144c0:	f383 8810 	msr	PRIMASK, r3
}
 80144c4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 80144c6:	2310      	movs	r3, #16
 80144c8:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 80144ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80144cc:	4618      	mov	r0, r3
 80144ce:	3758      	adds	r7, #88	; 0x58
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}
 80144d4:	20197ee4 	.word	0x20197ee4
 80144d8:	20197f7c 	.word	0x20197f7c
 80144dc:	080144e1 	.word	0x080144e1

080144e0 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b08e      	sub	sp, #56	; 0x38
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80144ea:	f3ef 8310 	mrs	r3, PRIMASK
 80144ee:	623b      	str	r3, [r7, #32]
    return(posture);
 80144f0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80144f2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80144f4:	b672      	cpsid	i
    return(int_posture);
 80144f6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 80144f8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80144fe:	4a33      	ldr	r2, [pc, #204]	; (80145cc <_tx_byte_pool_cleanup+0xec>)
 8014500:	4293      	cmp	r3, r2
 8014502:	d158      	bne.n	80145b6 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801450a:	683a      	ldr	r2, [r7, #0]
 801450c:	429a      	cmp	r2, r3
 801450e:	d152      	bne.n	80145b6 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014514:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8014516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014518:	2b00      	cmp	r3, #0
 801451a:	d04c      	beq.n	80145b6 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 801451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	4a2b      	ldr	r2, [pc, #172]	; (80145d0 <_tx_byte_pool_cleanup+0xf0>)
 8014522:	4293      	cmp	r3, r2
 8014524:	d147      	bne.n	80145b6 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8014526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801452a:	2b00      	cmp	r3, #0
 801452c:	d043      	beq.n	80145b6 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	2200      	movs	r2, #0
 8014532:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8014534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014538:	1e5a      	subs	r2, r3, #1
 801453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801453c:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 801453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014542:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8014544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014546:	2b00      	cmp	r3, #0
 8014548:	d103      	bne.n	8014552 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 801454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801454c:	2200      	movs	r2, #0
 801454e:	625a      	str	r2, [r3, #36]	; 0x24
 8014550:	e013      	b.n	801457a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014556:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801455c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014562:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8014564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014568:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 801456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801456e:	687a      	ldr	r2, [r7, #4]
 8014570:	429a      	cmp	r2, r3
 8014572:	d102      	bne.n	801457a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8014574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014578:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801457e:	2b09      	cmp	r3, #9
 8014580:	d119      	bne.n	80145b6 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	2210      	movs	r2, #16
 8014586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801458a:	4b12      	ldr	r3, [pc, #72]	; (80145d4 <_tx_byte_pool_cleanup+0xf4>)
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	3301      	adds	r3, #1
 8014590:	4a10      	ldr	r2, [pc, #64]	; (80145d4 <_tx_byte_pool_cleanup+0xf4>)
 8014592:	6013      	str	r3, [r2, #0]
 8014594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014596:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014598:	693b      	ldr	r3, [r7, #16]
 801459a:	f383 8810 	msr	PRIMASK, r3
}
 801459e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80145a0:	6878      	ldr	r0, [r7, #4]
 80145a2:	f001 f987 	bl	80158b4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80145a6:	f3ef 8310 	mrs	r3, PRIMASK
 80145aa:	61bb      	str	r3, [r7, #24]
    return(posture);
 80145ac:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80145ae:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80145b0:	b672      	cpsid	i
    return(int_posture);
 80145b2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80145b4:	637b      	str	r3, [r7, #52]	; 0x34
 80145b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145b8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	f383 8810 	msr	PRIMASK, r3
}
 80145c0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80145c2:	bf00      	nop
 80145c4:	3738      	adds	r7, #56	; 0x38
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bd80      	pop	{r7, pc}
 80145ca:	bf00      	nop
 80145cc:	080144e1 	.word	0x080144e1
 80145d0:	42595445 	.word	0x42595445
 80145d4:	20197f7c 	.word	0x20197f7c

080145d8 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b08e      	sub	sp, #56	; 0x38
 80145dc:	af00      	add	r7, sp, #0
 80145de:	60f8      	str	r0, [r7, #12]
 80145e0:	60b9      	str	r1, [r7, #8]
 80145e2:	607a      	str	r2, [r7, #4]
 80145e4:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80145e6:	2234      	movs	r2, #52	; 0x34
 80145e8:	2100      	movs	r1, #0
 80145ea:	68f8      	ldr	r0, [r7, #12]
 80145ec:	f015 f884 	bl	80296f8 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80145f0:	683b      	ldr	r3, [r7, #0]
 80145f2:	f023 0303 	bic.w	r3, r3, #3
 80145f6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	68ba      	ldr	r2, [r7, #8]
 80145fc:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	687a      	ldr	r2, [r7, #4]
 8014602:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	683a      	ldr	r2, [r7, #0]
 8014608:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	687a      	ldr	r2, [r7, #4]
 801460e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	687a      	ldr	r2, [r7, #4]
 8014614:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8014616:	683b      	ldr	r3, [r7, #0]
 8014618:	f1a3 0208 	sub.w	r2, r3, #8
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	2202      	movs	r2, #2
 8014624:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 801462a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	4413      	add	r3, r2
 8014630:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8014632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014634:	3b04      	subs	r3, #4
 8014636:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 801463c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801463e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8014640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014644:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8014646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014648:	3b04      	subs	r3, #4
 801464a:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 801464c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801464e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8014650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014652:	687a      	ldr	r2, [r7, #4]
 8014654:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 801465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801465c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 801465e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014662:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8014668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801466a:	3304      	adds	r3, #4
 801466c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 801466e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014670:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8014672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014674:	4a1f      	ldr	r2, [pc, #124]	; (80146f4 <_tx_byte_pool_create+0x11c>)
 8014676:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	2200      	movs	r2, #0
 801467c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801467e:	f3ef 8310 	mrs	r3, PRIMASK
 8014682:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014684:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014686:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014688:	b672      	cpsid	i
    return(int_posture);
 801468a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 801468c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	4a19      	ldr	r2, [pc, #100]	; (80146f8 <_tx_byte_pool_create+0x120>)
 8014692:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8014694:	4b19      	ldr	r3, [pc, #100]	; (80146fc <_tx_byte_pool_create+0x124>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d109      	bne.n	80146b0 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 801469c:	4a18      	ldr	r2, [pc, #96]	; (8014700 <_tx_byte_pool_create+0x128>)
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	68fa      	ldr	r2, [r7, #12]
 80146a6:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	68fa      	ldr	r2, [r7, #12]
 80146ac:	631a      	str	r2, [r3, #48]	; 0x30
 80146ae:	e011      	b.n	80146d4 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80146b0:	4b13      	ldr	r3, [pc, #76]	; (8014700 <_tx_byte_pool_create+0x128>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80146b6:	6a3b      	ldr	r3, [r7, #32]
 80146b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146ba:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80146bc:	6a3b      	ldr	r3, [r7, #32]
 80146be:	68fa      	ldr	r2, [r7, #12]
 80146c0:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80146c2:	69fb      	ldr	r3, [r7, #28]
 80146c4:	68fa      	ldr	r2, [r7, #12]
 80146c6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	69fa      	ldr	r2, [r7, #28]
 80146cc:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	6a3a      	ldr	r2, [r7, #32]
 80146d2:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80146d4:	4b09      	ldr	r3, [pc, #36]	; (80146fc <_tx_byte_pool_create+0x124>)
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	3301      	adds	r3, #1
 80146da:	4a08      	ldr	r2, [pc, #32]	; (80146fc <_tx_byte_pool_create+0x124>)
 80146dc:	6013      	str	r3, [r2, #0]
 80146de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80146e2:	693b      	ldr	r3, [r7, #16]
 80146e4:	f383 8810 	msr	PRIMASK, r3
}
 80146e8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80146ea:	2300      	movs	r3, #0
}
 80146ec:	4618      	mov	r0, r3
 80146ee:	3738      	adds	r7, #56	; 0x38
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}
 80146f4:	ffffeeee 	.word	0xffffeeee
 80146f8:	42595445 	.word	0x42595445
 80146fc:	20197ed8 	.word	0x20197ed8
 8014700:	20197ed4 	.word	0x20197ed4

08014704 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8014704:	b480      	push	{r7}
 8014706:	b097      	sub	sp, #92	; 0x5c
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
 801470c:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 801470e:	2300      	movs	r3, #0
 8014710:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014712:	f3ef 8310 	mrs	r3, PRIMASK
 8014716:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8014718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801471a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801471c:	b672      	cpsid	i
    return(int_posture);
 801471e:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8014720:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	689a      	ldr	r2, [r3, #8]
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	68db      	ldr	r3, [r3, #12]
 801472a:	3b02      	subs	r3, #2
 801472c:	00db      	lsls	r3, r3, #3
 801472e:	4413      	add	r3, r2
 8014730:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8014732:	683a      	ldr	r2, [r7, #0]
 8014734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014736:	429a      	cmp	r2, r3
 8014738:	d308      	bcc.n	801474c <_tx_byte_pool_search+0x48>
 801473a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801473c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801473e:	69fb      	ldr	r3, [r7, #28]
 8014740:	f383 8810 	msr	PRIMASK, r3
}
 8014744:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8014746:	2300      	movs	r3, #0
 8014748:	653b      	str	r3, [r7, #80]	; 0x50
 801474a:	e0dd      	b.n	8014908 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801474c:	4b72      	ldr	r3, [pc, #456]	; (8014918 <_tx_byte_pool_search+0x214>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014756:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	695b      	ldr	r3, [r3, #20]
 801475c:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	68db      	ldr	r3, [r3, #12]
 8014762:	3301      	adds	r3, #1
 8014764:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8014766:	2300      	movs	r3, #0
 8014768:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801476a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801476c:	3304      	adds	r3, #4
 801476e:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8014770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014772:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8014774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	4a68      	ldr	r2, [pc, #416]	; (801491c <_tx_byte_pool_search+0x218>)
 801477a:	4293      	cmp	r3, r2
 801477c:	d143      	bne.n	8014806 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 801477e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014780:	2b00      	cmp	r3, #0
 8014782:	d104      	bne.n	801478e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014788:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 801478a:	2301      	movs	r3, #1
 801478c:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801478e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014790:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8014792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8014798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801479a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801479c:	1ad3      	subs	r3, r2, r3
 801479e:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80147a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147a2:	3b08      	subs	r3, #8
 80147a4:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 80147a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	429a      	cmp	r2, r3
 80147ac:	d257      	bcs.n	801485e <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 80147ae:	2300      	movs	r3, #0
 80147b0:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80147b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147b4:	3304      	adds	r3, #4
 80147b6:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80147b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ba:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80147bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	4a56      	ldr	r2, [pc, #344]	; (801491c <_tx_byte_pool_search+0x218>)
 80147c2:	4293      	cmp	r3, r2
 80147c4:	d113      	bne.n	80147ee <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80147c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147c8:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 80147ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147cc:	681a      	ldr	r2, [r3, #0]
 80147ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d0:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	68db      	ldr	r3, [r3, #12]
 80147d6:	1e5a      	subs	r2, r3, #1
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	695b      	ldr	r3, [r3, #20]
 80147e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147e2:	429a      	cmp	r2, r3
 80147e4:	d114      	bne.n	8014810 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80147ea:	615a      	str	r2, [r3, #20]
 80147ec:	e010      	b.n	8014810 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80147ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147f0:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 80147f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 80147f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d008      	beq.n	8014810 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 80147fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014800:	3b01      	subs	r3, #1
 8014802:	64bb      	str	r3, [r7, #72]	; 0x48
 8014804:	e004      	b.n	8014810 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8014806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014808:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 801480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8014810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014812:	2b00      	cmp	r3, #0
 8014814:	d002      	beq.n	801481c <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8014816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014818:	3b01      	subs	r3, #1
 801481a:	64bb      	str	r3, [r7, #72]	; 0x48
 801481c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801481e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	f383 8810 	msr	PRIMASK, r3
}
 8014826:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014828:	f3ef 8310 	mrs	r3, PRIMASK
 801482c:	61bb      	str	r3, [r7, #24]
    return(posture);
 801482e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014830:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014832:	b672      	cpsid	i
    return(int_posture);
 8014834:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8014836:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	6a1b      	ldr	r3, [r3, #32]
 801483c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801483e:	429a      	cmp	r2, r3
 8014840:	d009      	beq.n	8014856 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	695b      	ldr	r3, [r3, #20]
 8014846:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	68db      	ldr	r3, [r3, #12]
 801484c:	3301      	adds	r3, #1
 801484e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014854:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8014856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014858:	2b00      	cmp	r3, #0
 801485a:	d186      	bne.n	801476a <_tx_byte_pool_search+0x66>
 801485c:	e000      	b.n	8014860 <_tx_byte_pool_search+0x15c>
                    break;
 801485e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8014860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014862:	2b00      	cmp	r3, #0
 8014864:	d048      	beq.n	80148f8 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8014866:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	1ad3      	subs	r3, r2, r3
 801486c:	2b13      	cmp	r3, #19
 801486e:	d91e      	bls.n	80148ae <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	3308      	adds	r3, #8
 8014874:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014876:	4413      	add	r3, r2
 8014878:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801487a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801487c:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801487e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014880:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8014882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014884:	681a      	ldr	r2, [r3, #0]
 8014886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014888:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801488a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801488c:	3304      	adds	r3, #4
 801488e:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8014890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014892:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8014894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014896:	4a21      	ldr	r2, [pc, #132]	; (801491c <_tx_byte_pool_search+0x218>)
 8014898:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	68db      	ldr	r3, [r3, #12]
 801489e:	1c5a      	adds	r2, r3, #1
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 80148a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80148a8:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 80148aa:	683b      	ldr	r3, [r7, #0]
 80148ac:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80148ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148b0:	3304      	adds	r3, #4
 80148b2:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80148b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148b6:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80148b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ba:	687a      	ldr	r2, [r7, #4]
 80148bc:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	689a      	ldr	r2, [r3, #8]
 80148c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148c4:	1ad3      	subs	r3, r2, r3
 80148c6:	f1a3 0208 	sub.w	r2, r3, #8
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	695b      	ldr	r3, [r3, #20]
 80148d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80148d4:	429a      	cmp	r2, r3
 80148d6:	d105      	bne.n	80148e4 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80148d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148da:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 80148dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148de:	681a      	ldr	r2, [r3, #0]
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	615a      	str	r2, [r3, #20]
 80148e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148e6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	f383 8810 	msr	PRIMASK, r3
}
 80148ee:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80148f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148f2:	3308      	adds	r3, #8
 80148f4:	653b      	str	r3, [r7, #80]	; 0x50
 80148f6:	e007      	b.n	8014908 <_tx_byte_pool_search+0x204>
 80148f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148fa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80148fc:	68bb      	ldr	r3, [r7, #8]
 80148fe:	f383 8810 	msr	PRIMASK, r3
}
 8014902:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8014904:	2300      	movs	r3, #0
 8014906:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8014908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 801490a:	4618      	mov	r0, r3
 801490c:	375c      	adds	r7, #92	; 0x5c
 801490e:	46bd      	mov	sp, r7
 8014910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014914:	4770      	bx	lr
 8014916:	bf00      	nop
 8014918:	20197ee4 	.word	0x20197ee4
 801491c:	ffffeeee 	.word	0xffffeeee

08014920 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8014920:	b580      	push	{r7, lr}
 8014922:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8014924:	f000 ff04 	bl	8015730 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8014928:	f001 fa8c 	bl	8015e44 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 801492c:	4b12      	ldr	r3, [pc, #72]	; (8014978 <_tx_initialize_high_level+0x58>)
 801492e:	2200      	movs	r2, #0
 8014930:	601a      	str	r2, [r3, #0]
 8014932:	4b12      	ldr	r3, [pc, #72]	; (801497c <_tx_initialize_high_level+0x5c>)
 8014934:	2200      	movs	r2, #0
 8014936:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8014938:	4b11      	ldr	r3, [pc, #68]	; (8014980 <_tx_initialize_high_level+0x60>)
 801493a:	2200      	movs	r2, #0
 801493c:	601a      	str	r2, [r3, #0]
 801493e:	4b11      	ldr	r3, [pc, #68]	; (8014984 <_tx_initialize_high_level+0x64>)
 8014940:	2200      	movs	r2, #0
 8014942:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8014944:	4b10      	ldr	r3, [pc, #64]	; (8014988 <_tx_initialize_high_level+0x68>)
 8014946:	2200      	movs	r2, #0
 8014948:	601a      	str	r2, [r3, #0]
 801494a:	4b10      	ldr	r3, [pc, #64]	; (801498c <_tx_initialize_high_level+0x6c>)
 801494c:	2200      	movs	r2, #0
 801494e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8014950:	4b0f      	ldr	r3, [pc, #60]	; (8014990 <_tx_initialize_high_level+0x70>)
 8014952:	2200      	movs	r2, #0
 8014954:	601a      	str	r2, [r3, #0]
 8014956:	4b0f      	ldr	r3, [pc, #60]	; (8014994 <_tx_initialize_high_level+0x74>)
 8014958:	2200      	movs	r2, #0
 801495a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 801495c:	4b0e      	ldr	r3, [pc, #56]	; (8014998 <_tx_initialize_high_level+0x78>)
 801495e:	2200      	movs	r2, #0
 8014960:	601a      	str	r2, [r3, #0]
 8014962:	4b0e      	ldr	r3, [pc, #56]	; (801499c <_tx_initialize_high_level+0x7c>)
 8014964:	2200      	movs	r2, #0
 8014966:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8014968:	4b0d      	ldr	r3, [pc, #52]	; (80149a0 <_tx_initialize_high_level+0x80>)
 801496a:	2200      	movs	r2, #0
 801496c:	601a      	str	r2, [r3, #0]
 801496e:	4b0d      	ldr	r3, [pc, #52]	; (80149a4 <_tx_initialize_high_level+0x84>)
 8014970:	2200      	movs	r2, #0
 8014972:	601a      	str	r2, [r3, #0]
#endif
}
 8014974:	bf00      	nop
 8014976:	bd80      	pop	{r7, pc}
 8014978:	20197eac 	.word	0x20197eac
 801497c:	20197eb0 	.word	0x20197eb0
 8014980:	20197eb4 	.word	0x20197eb4
 8014984:	20197eb8 	.word	0x20197eb8
 8014988:	20197ebc 	.word	0x20197ebc
 801498c:	20197ec0 	.word	0x20197ec0
 8014990:	20197ecc 	.word	0x20197ecc
 8014994:	20197ed0 	.word	0x20197ed0
 8014998:	20197ed4 	.word	0x20197ed4
 801499c:	20197ed8 	.word	0x20197ed8
 80149a0:	20197ec4 	.word	0x20197ec4
 80149a4:	20197ec8 	.word	0x20197ec8

080149a8 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80149ac:	4b10      	ldr	r3, [pc, #64]	; (80149f0 <_tx_initialize_kernel_enter+0x48>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80149b4:	d00c      	beq.n	80149d0 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80149b6:	4b0e      	ldr	r3, [pc, #56]	; (80149f0 <_tx_initialize_kernel_enter+0x48>)
 80149b8:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80149bc:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80149be:	f7eb fc75 	bl	80002ac <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 80149c2:	f7ff ffad 	bl	8014920 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80149c6:	4b0b      	ldr	r3, [pc, #44]	; (80149f4 <_tx_initialize_kernel_enter+0x4c>)
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	3301      	adds	r3, #1
 80149cc:	4a09      	ldr	r2, [pc, #36]	; (80149f4 <_tx_initialize_kernel_enter+0x4c>)
 80149ce:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80149d0:	4b07      	ldr	r3, [pc, #28]	; (80149f0 <_tx_initialize_kernel_enter+0x48>)
 80149d2:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80149d6:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80149d8:	4b07      	ldr	r3, [pc, #28]	; (80149f8 <_tx_initialize_kernel_enter+0x50>)
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	4618      	mov	r0, r3
 80149de:	f7eb ff1b 	bl	8000818 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80149e2:	4b03      	ldr	r3, [pc, #12]	; (80149f0 <_tx_initialize_kernel_enter+0x48>)
 80149e4:	2200      	movs	r2, #0
 80149e6:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80149e8:	f7eb fc9c 	bl	8000324 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80149ec:	bf00      	nop
 80149ee:	bd80      	pop	{r7, pc}
 80149f0:	20000054 	.word	0x20000054
 80149f4:	20197f7c 	.word	0x20197f7c
 80149f8:	20197edc 	.word	0x20197edc

080149fc <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b08e      	sub	sp, #56	; 0x38
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014a06:	f3ef 8310 	mrs	r3, PRIMASK
 8014a0a:	623b      	str	r3, [r7, #32]
    return(posture);
 8014a0c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014a0e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014a10:	b672      	cpsid	i
    return(int_posture);
 8014a12:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 8014a14:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014a1a:	4a37      	ldr	r2, [pc, #220]	; (8014af8 <_tx_queue_cleanup+0xfc>)
 8014a1c:	4293      	cmp	r3, r2
 8014a1e:	d161      	bne.n	8014ae4 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014a26:	683a      	ldr	r2, [r7, #0]
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	d15b      	bne.n	8014ae4 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a30:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 8014a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d055      	beq.n	8014ae4 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 8014a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	4a2f      	ldr	r2, [pc, #188]	; (8014afc <_tx_queue_cleanup+0x100>)
 8014a3e:	4293      	cmp	r3, r2
 8014a40:	d150      	bne.n	8014ae4 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8014a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d04c      	beq.n	8014ae4 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8014a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a54:	1e5a      	subs	r2, r3, #1
 8014a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a58:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8014a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8014a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d103      	bne.n	8014a6e <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8014a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a68:	2200      	movs	r2, #0
 8014a6a:	629a      	str	r2, [r3, #40]	; 0x28
 8014a6c:	e013      	b.n	8014a96 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a72:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a78:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8014a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a7e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8014a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a84:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 8014a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a8a:	687a      	ldr	r2, [r7, #4]
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	d102      	bne.n	8014a96 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8014a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a94:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a9a:	2b05      	cmp	r3, #5
 8014a9c:	d122      	bne.n	8014ae4 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8014a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aa0:	691b      	ldr	r3, [r3, #16]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d004      	beq.n	8014ab0 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	220b      	movs	r2, #11
 8014aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8014aae:	e003      	b.n	8014ab8 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	220a      	movs	r2, #10
 8014ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8014ab8:	4b11      	ldr	r3, [pc, #68]	; (8014b00 <_tx_queue_cleanup+0x104>)
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	3301      	adds	r3, #1
 8014abe:	4a10      	ldr	r2, [pc, #64]	; (8014b00 <_tx_queue_cleanup+0x104>)
 8014ac0:	6013      	str	r3, [r2, #0]
 8014ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ac4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014ac6:	693b      	ldr	r3, [r7, #16]
 8014ac8:	f383 8810 	msr	PRIMASK, r3
}
 8014acc:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8014ace:	6878      	ldr	r0, [r7, #4]
 8014ad0:	f000 fef0 	bl	80158b4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8014ad8:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014ada:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014adc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014ade:	b672      	cpsid	i
    return(int_posture);
 8014ae0:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8014ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8014ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ae6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	f383 8810 	msr	PRIMASK, r3
}
 8014aee:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8014af0:	bf00      	nop
 8014af2:	3738      	adds	r7, #56	; 0x38
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}
 8014af8:	080149fd 	.word	0x080149fd
 8014afc:	51554555 	.word	0x51554555
 8014b00:	20197f7c 	.word	0x20197f7c

08014b04 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b08c      	sub	sp, #48	; 0x30
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	60f8      	str	r0, [r7, #12]
 8014b0c:	60b9      	str	r1, [r7, #8]
 8014b0e:	607a      	str	r2, [r7, #4]
 8014b10:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 8014b12:	2238      	movs	r2, #56	; 0x38
 8014b14:	2100      	movs	r1, #0
 8014b16:	68f8      	ldr	r0, [r7, #12]
 8014b18:	f014 fdee 	bl	80296f8 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	68ba      	ldr	r2, [r7, #8]
 8014b20:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	687a      	ldr	r2, [r7, #4]
 8014b26:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	009b      	lsls	r3, r3, #2
 8014b2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 8014b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b36:	687a      	ldr	r2, [r7, #4]
 8014b38:	fb02 f303 	mul.w	r3, r2, r3
 8014b3c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	683a      	ldr	r2, [r7, #0]
 8014b42:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	699a      	ldr	r2, [r3, #24]
 8014b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b4a:	009b      	lsls	r3, r3, #2
 8014b4c:	441a      	add	r2, r3
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	683a      	ldr	r2, [r7, #0]
 8014b56:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	683a      	ldr	r2, [r7, #0]
 8014b5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b62:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b68:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8014b6e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014b70:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014b72:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014b74:	b672      	cpsid	i
    return(int_posture);
 8014b76:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8014b78:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	4a18      	ldr	r2, [pc, #96]	; (8014be0 <_tx_queue_create+0xdc>)
 8014b7e:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8014b80:	4b18      	ldr	r3, [pc, #96]	; (8014be4 <_tx_queue_create+0xe0>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d109      	bne.n	8014b9c <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8014b88:	4a17      	ldr	r2, [pc, #92]	; (8014be8 <_tx_queue_create+0xe4>)
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	68fa      	ldr	r2, [r7, #12]
 8014b92:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	68fa      	ldr	r2, [r7, #12]
 8014b98:	635a      	str	r2, [r3, #52]	; 0x34
 8014b9a:	e011      	b.n	8014bc0 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8014b9c:	4b12      	ldr	r3, [pc, #72]	; (8014be8 <_tx_queue_create+0xe4>)
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 8014ba2:	6a3b      	ldr	r3, [r7, #32]
 8014ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ba6:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8014ba8:	6a3b      	ldr	r3, [r7, #32]
 8014baa:	68fa      	ldr	r2, [r7, #12]
 8014bac:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8014bae:	69fb      	ldr	r3, [r7, #28]
 8014bb0:	68fa      	ldr	r2, [r7, #12]
 8014bb2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	69fa      	ldr	r2, [r7, #28]
 8014bb8:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	6a3a      	ldr	r2, [r7, #32]
 8014bbe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8014bc0:	4b08      	ldr	r3, [pc, #32]	; (8014be4 <_tx_queue_create+0xe0>)
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	3301      	adds	r3, #1
 8014bc6:	4a07      	ldr	r2, [pc, #28]	; (8014be4 <_tx_queue_create+0xe0>)
 8014bc8:	6013      	str	r3, [r2, #0]
 8014bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bcc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014bce:	693b      	ldr	r3, [r7, #16]
 8014bd0:	f383 8810 	msr	PRIMASK, r3
}
 8014bd4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8014bd6:	2300      	movs	r3, #0
}
 8014bd8:	4618      	mov	r0, r3
 8014bda:	3730      	adds	r7, #48	; 0x30
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}
 8014be0:	51554555 	.word	0x51554555
 8014be4:	20197eb8 	.word	0x20197eb8
 8014be8:	20197eb4 	.word	0x20197eb4

08014bec <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b096      	sub	sp, #88	; 0x58
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	60f8      	str	r0, [r7, #12]
 8014bf4:	60b9      	str	r1, [r7, #8]
 8014bf6:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8014c00:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8014c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8014c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8014c06:	b672      	cpsid	i
    return(int_posture);
 8014c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 8014c0a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c10:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	691b      	ldr	r3, [r3, #16]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	f000 8136 	beq.w	8014e88 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8014c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d13c      	bne.n	8014c9c <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	6a1b      	ldr	r3, [r3, #32]
 8014c26:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8014c28:	68bb      	ldr	r3, [r7, #8]
 8014c2a:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	689b      	ldr	r3, [r3, #8]
 8014c30:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014c32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c34:	1d13      	adds	r3, r2, #4
 8014c36:	657b      	str	r3, [r7, #84]	; 0x54
 8014c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c3a:	1d19      	adds	r1, r3, #4
 8014c3c:	6539      	str	r1, [r7, #80]	; 0x50
 8014c3e:	6812      	ldr	r2, [r2, #0]
 8014c40:	601a      	str	r2, [r3, #0]
 8014c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c44:	2b01      	cmp	r3, #1
 8014c46:	d90e      	bls.n	8014c66 <_tx_queue_receive+0x7a>
 8014c48:	e007      	b.n	8014c5a <_tx_queue_receive+0x6e>
 8014c4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c4c:	1d13      	adds	r3, r2, #4
 8014c4e:	657b      	str	r3, [r7, #84]	; 0x54
 8014c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c52:	1d19      	adds	r1, r3, #4
 8014c54:	6539      	str	r1, [r7, #80]	; 0x50
 8014c56:	6812      	ldr	r2, [r2, #0]
 8014c58:	601a      	str	r2, [r3, #0]
 8014c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c5c:	3b01      	subs	r3, #1
 8014c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d1f1      	bne.n	8014c4a <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	69db      	ldr	r3, [r3, #28]
 8014c6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c6c:	429a      	cmp	r2, r3
 8014c6e:	d102      	bne.n	8014c76 <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	699b      	ldr	r3, [r3, #24]
 8014c74:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c7a:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	695b      	ldr	r3, [r3, #20]
 8014c80:	1c5a      	adds	r2, r3, #1
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	691b      	ldr	r3, [r3, #16]
 8014c8a:	1e5a      	subs	r2, r3, #1
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	611a      	str	r2, [r3, #16]
 8014c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c92:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c96:	f383 8810 	msr	PRIMASK, r3
}
 8014c9a:	e163      	b.n	8014f64 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ca0:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8014ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ca8:	2b01      	cmp	r3, #1
 8014caa:	d153      	bne.n	8014d54 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8014cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cb0:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8014cb2:	68bb      	ldr	r3, [r7, #8]
 8014cb4:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	689b      	ldr	r3, [r3, #8]
 8014cba:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014cbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014cbe:	1d13      	adds	r3, r2, #4
 8014cc0:	657b      	str	r3, [r7, #84]	; 0x54
 8014cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cc4:	1d19      	adds	r1, r3, #4
 8014cc6:	6539      	str	r1, [r7, #80]	; 0x50
 8014cc8:	6812      	ldr	r2, [r2, #0]
 8014cca:	601a      	str	r2, [r3, #0]
 8014ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cce:	2b01      	cmp	r3, #1
 8014cd0:	d90e      	bls.n	8014cf0 <_tx_queue_receive+0x104>
 8014cd2:	e007      	b.n	8014ce4 <_tx_queue_receive+0xf8>
 8014cd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014cd6:	1d13      	adds	r3, r2, #4
 8014cd8:	657b      	str	r3, [r7, #84]	; 0x54
 8014cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cdc:	1d19      	adds	r1, r3, #4
 8014cde:	6539      	str	r1, [r7, #80]	; 0x50
 8014ce0:	6812      	ldr	r2, [r2, #0]
 8014ce2:	601a      	str	r2, [r3, #0]
 8014ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ce6:	3b01      	subs	r3, #1
 8014ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d1f1      	bne.n	8014cd4 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8014cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cf2:	3b01      	subs	r3, #1
 8014cf4:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8014cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d103      	bne.n	8014d04 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	2200      	movs	r2, #0
 8014d00:	629a      	str	r2, [r3, #40]	; 0x28
 8014d02:	e00e      	b.n	8014d22 <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8014d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d08:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014d0e:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8014d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d14:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 8014d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d1a:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8014d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014d20:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014d26:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d2a:	2200      	movs	r2, #0
 8014d2c:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8014d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d30:	2200      	movs	r2, #0
 8014d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8014d36:	4b8e      	ldr	r3, [pc, #568]	; (8014f70 <_tx_queue_receive+0x384>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	4a8c      	ldr	r2, [pc, #560]	; (8014f70 <_tx_queue_receive+0x384>)
 8014d3e:	6013      	str	r3, [r2, #0]
 8014d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d42:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d46:	f383 8810 	msr	PRIMASK, r3
}
 8014d4a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8014d4c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014d4e:	f000 fdb1 	bl	80158b4 <_tx_thread_system_resume>
 8014d52:	e107      	b.n	8014f64 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	6a1b      	ldr	r3, [r3, #32]
 8014d58:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	689b      	ldr	r3, [r3, #8]
 8014d62:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014d64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014d66:	1d13      	adds	r3, r2, #4
 8014d68:	657b      	str	r3, [r7, #84]	; 0x54
 8014d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d6c:	1d19      	adds	r1, r3, #4
 8014d6e:	6539      	str	r1, [r7, #80]	; 0x50
 8014d70:	6812      	ldr	r2, [r2, #0]
 8014d72:	601a      	str	r2, [r3, #0]
 8014d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d76:	2b01      	cmp	r3, #1
 8014d78:	d90e      	bls.n	8014d98 <_tx_queue_receive+0x1ac>
 8014d7a:	e007      	b.n	8014d8c <_tx_queue_receive+0x1a0>
 8014d7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014d7e:	1d13      	adds	r3, r2, #4
 8014d80:	657b      	str	r3, [r7, #84]	; 0x54
 8014d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d84:	1d19      	adds	r1, r3, #4
 8014d86:	6539      	str	r1, [r7, #80]	; 0x50
 8014d88:	6812      	ldr	r2, [r2, #0]
 8014d8a:	601a      	str	r2, [r3, #0]
 8014d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d8e:	3b01      	subs	r3, #1
 8014d90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d1f1      	bne.n	8014d7c <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	69db      	ldr	r3, [r3, #28]
 8014d9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d102      	bne.n	8014da8 <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	699b      	ldr	r3, [r3, #24]
 8014da6:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014dac:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8014dae:	4b70      	ldr	r3, [pc, #448]	; (8014f70 <_tx_queue_receive+0x384>)
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	3301      	adds	r3, #1
 8014db4:	4a6e      	ldr	r2, [pc, #440]	; (8014f70 <_tx_queue_receive+0x384>)
 8014db6:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8014db8:	4b6d      	ldr	r3, [pc, #436]	; (8014f70 <_tx_queue_receive+0x384>)
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	3b01      	subs	r3, #1
 8014dbe:	4a6c      	ldr	r2, [pc, #432]	; (8014f70 <_tx_queue_receive+0x384>)
 8014dc0:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8014dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014dc6:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dcc:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	689b      	ldr	r3, [r3, #8]
 8014dd2:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014dd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014dd6:	1d13      	adds	r3, r2, #4
 8014dd8:	657b      	str	r3, [r7, #84]	; 0x54
 8014dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ddc:	1d19      	adds	r1, r3, #4
 8014dde:	6539      	str	r1, [r7, #80]	; 0x50
 8014de0:	6812      	ldr	r2, [r2, #0]
 8014de2:	601a      	str	r2, [r3, #0]
 8014de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014de6:	2b01      	cmp	r3, #1
 8014de8:	d90e      	bls.n	8014e08 <_tx_queue_receive+0x21c>
 8014dea:	e007      	b.n	8014dfc <_tx_queue_receive+0x210>
 8014dec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014dee:	1d13      	adds	r3, r2, #4
 8014df0:	657b      	str	r3, [r7, #84]	; 0x54
 8014df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014df4:	1d19      	adds	r1, r3, #4
 8014df6:	6539      	str	r1, [r7, #80]	; 0x50
 8014df8:	6812      	ldr	r2, [r2, #0]
 8014dfa:	601a      	str	r2, [r3, #0]
 8014dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dfe:	3b01      	subs	r3, #1
 8014e00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d1f1      	bne.n	8014dec <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	69db      	ldr	r3, [r3, #28]
 8014e0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014e0e:	429a      	cmp	r2, r3
 8014e10:	d102      	bne.n	8014e18 <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	699b      	ldr	r3, [r3, #24]
 8014e16:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014e1c:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e22:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8014e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e26:	3b01      	subs	r3, #1
 8014e28:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8014e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d103      	bne.n	8014e38 <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	2200      	movs	r2, #0
 8014e34:	629a      	str	r2, [r3, #40]	; 0x28
 8014e36:	e00e      	b.n	8014e56 <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8014e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e3c:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e42:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e48:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8014e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e4e:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 8014e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e54:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014e5a:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e5e:	2200      	movs	r2, #0
 8014e60:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8014e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e64:	2200      	movs	r2, #0
 8014e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8014e6a:	4b41      	ldr	r3, [pc, #260]	; (8014f70 <_tx_queue_receive+0x384>)
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	3301      	adds	r3, #1
 8014e70:	4a3f      	ldr	r2, [pc, #252]	; (8014f70 <_tx_queue_receive+0x384>)
 8014e72:	6013      	str	r3, [r2, #0]
 8014e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e76:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014e78:	6a3b      	ldr	r3, [r7, #32]
 8014e7a:	f383 8810 	msr	PRIMASK, r3
}
 8014e7e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8014e80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014e82:	f000 fd17 	bl	80158b4 <_tx_thread_system_resume>
 8014e86:	e06d      	b.n	8014f64 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d062      	beq.n	8014f54 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8014e8e:	4b38      	ldr	r3, [pc, #224]	; (8014f70 <_tx_queue_receive+0x384>)
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d008      	beq.n	8014ea8 <_tx_queue_receive+0x2bc>
 8014e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e98:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014e9a:	69fb      	ldr	r3, [r7, #28]
 8014e9c:	f383 8810 	msr	PRIMASK, r3
}
 8014ea0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 8014ea2:	230a      	movs	r3, #10
 8014ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8014ea6:	e05d      	b.n	8014f64 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014ea8:	4b32      	ldr	r3, [pc, #200]	; (8014f74 <_tx_queue_receive+0x388>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8014eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014eb0:	4a31      	ldr	r2, [pc, #196]	; (8014f78 <_tx_queue_receive+0x38c>)
 8014eb2:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8014eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014eb6:	68fa      	ldr	r2, [r7, #12]
 8014eb8:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 8014eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ebc:	68ba      	ldr	r2, [r7, #8]
 8014ebe:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8014ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8014ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014eca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014ece:	1c5a      	adds	r2, r3, #1
 8014ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ed2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8014ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d109      	bne.n	8014ef0 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014ee0:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8014ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014ee6:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8014ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014eea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014eec:	675a      	str	r2, [r3, #116]	; 0x74
 8014eee:	e011      	b.n	8014f14 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ef4:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8014ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014efa:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8014efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f00:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8014f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f06:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8014f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014f0c:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8014f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014f12:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8014f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f16:	1c5a      	adds	r2, r3, #1
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8014f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f1e:	2205      	movs	r2, #5
 8014f20:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f24:	2201      	movs	r2, #1
 8014f26:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8014f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f2a:	687a      	ldr	r2, [r7, #4]
 8014f2c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014f2e:	4b10      	ldr	r3, [pc, #64]	; (8014f70 <_tx_queue_receive+0x384>)
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	3301      	adds	r3, #1
 8014f34:	4a0e      	ldr	r2, [pc, #56]	; (8014f70 <_tx_queue_receive+0x384>)
 8014f36:	6013      	str	r3, [r2, #0]
 8014f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f3a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014f3c:	69bb      	ldr	r3, [r7, #24]
 8014f3e:	f383 8810 	msr	PRIMASK, r3
}
 8014f42:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8014f44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014f46:	f000 fdb5 	bl	8015ab4 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8014f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8014f52:	e007      	b.n	8014f64 <_tx_queue_receive+0x378>
 8014f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f56:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014f58:	697b      	ldr	r3, [r7, #20]
 8014f5a:	f383 8810 	msr	PRIMASK, r3
}
 8014f5e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 8014f60:	230a      	movs	r3, #10
 8014f62:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 8014f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8014f66:	4618      	mov	r0, r3
 8014f68:	3758      	adds	r7, #88	; 0x58
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}
 8014f6e:	bf00      	nop
 8014f70:	20197f7c 	.word	0x20197f7c
 8014f74:	20197ee4 	.word	0x20197ee4
 8014f78:	080149fd 	.word	0x080149fd

08014f7c <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b094      	sub	sp, #80	; 0x50
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	60f8      	str	r0, [r7, #12]
 8014f84:	60b9      	str	r1, [r7, #8]
 8014f86:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8014f88:	2300      	movs	r3, #0
 8014f8a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8014f90:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014f94:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8014f96:	b672      	cpsid	i
    return(int_posture);
 8014f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8014f9a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fa0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	695b      	ldr	r3, [r3, #20]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	f000 809b 	beq.w	80150e2 <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8014fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d13c      	bne.n	801502c <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	695b      	ldr	r3, [r3, #20]
 8014fb6:	1e5a      	subs	r2, r3, #1
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	691b      	ldr	r3, [r3, #16]
 8014fc0:	1c5a      	adds	r2, r3, #1
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8014fc6:	68bb      	ldr	r3, [r7, #8]
 8014fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fce:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	689b      	ldr	r3, [r3, #8]
 8014fd4:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014fd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014fd8:	1d13      	adds	r3, r2, #4
 8014fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014fde:	1d19      	adds	r1, r3, #4
 8014fe0:	64b9      	str	r1, [r7, #72]	; 0x48
 8014fe2:	6812      	ldr	r2, [r2, #0]
 8014fe4:	601a      	str	r2, [r3, #0]
 8014fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014fe8:	2b01      	cmp	r3, #1
 8014fea:	d90e      	bls.n	801500a <_tx_queue_send+0x8e>
 8014fec:	e007      	b.n	8014ffe <_tx_queue_send+0x82>
 8014fee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014ff0:	1d13      	adds	r3, r2, #4
 8014ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ff6:	1d19      	adds	r1, r3, #4
 8014ff8:	64b9      	str	r1, [r7, #72]	; 0x48
 8014ffa:	6812      	ldr	r2, [r2, #0]
 8014ffc:	601a      	str	r2, [r3, #0]
 8014ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015000:	3b01      	subs	r3, #1
 8015002:	647b      	str	r3, [r7, #68]	; 0x44
 8015004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015006:	2b00      	cmp	r3, #0
 8015008:	d1f1      	bne.n	8014fee <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	69db      	ldr	r3, [r3, #28]
 801500e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015010:	429a      	cmp	r2, r3
 8015012:	d102      	bne.n	801501a <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	699b      	ldr	r3, [r3, #24]
 8015018:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801501e:	625a      	str	r2, [r3, #36]	; 0x24
 8015020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015022:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015024:	6a3b      	ldr	r3, [r7, #32]
 8015026:	f383 8810 	msr	PRIMASK, r3
}
 801502a:	e0c8      	b.n	80151be <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015030:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8015032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015034:	3b01      	subs	r3, #1
 8015036:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8015038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801503a:	2b00      	cmp	r3, #0
 801503c:	d103      	bne.n	8015046 <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	2200      	movs	r2, #0
 8015042:	629a      	str	r2, [r3, #40]	; 0x28
 8015044:	e012      	b.n	801506c <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8015046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015048:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 801504e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015052:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015058:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801505a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801505c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801505e:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8015060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015064:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8015066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801506a:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015070:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8015072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015074:	2200      	movs	r2, #0
 8015076:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 801507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801507e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015080:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	689b      	ldr	r3, [r3, #8]
 8015086:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8015088:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801508a:	1d13      	adds	r3, r2, #4
 801508c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801508e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015090:	1d19      	adds	r1, r3, #4
 8015092:	64b9      	str	r1, [r7, #72]	; 0x48
 8015094:	6812      	ldr	r2, [r2, #0]
 8015096:	601a      	str	r2, [r3, #0]
 8015098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801509a:	2b01      	cmp	r3, #1
 801509c:	d90e      	bls.n	80150bc <_tx_queue_send+0x140>
 801509e:	e007      	b.n	80150b0 <_tx_queue_send+0x134>
 80150a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80150a2:	1d13      	adds	r3, r2, #4
 80150a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80150a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80150a8:	1d19      	adds	r1, r3, #4
 80150aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80150ac:	6812      	ldr	r2, [r2, #0]
 80150ae:	601a      	str	r2, [r3, #0]
 80150b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80150b2:	3b01      	subs	r3, #1
 80150b4:	647b      	str	r3, [r7, #68]	; 0x44
 80150b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d1f1      	bne.n	80150a0 <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80150bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150be:	2200      	movs	r2, #0
 80150c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80150c4:	4b40      	ldr	r3, [pc, #256]	; (80151c8 <_tx_queue_send+0x24c>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	3301      	adds	r3, #1
 80150ca:	4a3f      	ldr	r2, [pc, #252]	; (80151c8 <_tx_queue_send+0x24c>)
 80150cc:	6013      	str	r3, [r2, #0]
 80150ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150d0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80150d2:	69fb      	ldr	r3, [r7, #28]
 80150d4:	f383 8810 	msr	PRIMASK, r3
}
 80150d8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 80150da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80150dc:	f000 fbea 	bl	80158b4 <_tx_thread_system_resume>
 80150e0:	e06d      	b.n	80151be <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d062      	beq.n	80151ae <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80150e8:	4b37      	ldr	r3, [pc, #220]	; (80151c8 <_tx_queue_send+0x24c>)
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d008      	beq.n	8015102 <_tx_queue_send+0x186>
 80150f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150f2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80150f4:	69bb      	ldr	r3, [r7, #24]
 80150f6:	f383 8810 	msr	PRIMASK, r3
}
 80150fa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 80150fc:	230b      	movs	r3, #11
 80150fe:	643b      	str	r3, [r7, #64]	; 0x40
 8015100:	e05d      	b.n	80151be <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8015102:	4b32      	ldr	r3, [pc, #200]	; (80151cc <_tx_queue_send+0x250>)
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8015108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801510a:	4a31      	ldr	r2, [pc, #196]	; (80151d0 <_tx_queue_send+0x254>)
 801510c:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 801510e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015110:	68fa      	ldr	r2, [r7, #12]
 8015112:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8015114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015116:	68ba      	ldr	r2, [r7, #8]
 8015118:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 801511a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801511c:	2200      	movs	r2, #0
 801511e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8015122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015124:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015128:	1c5a      	adds	r2, r3, #1
 801512a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801512c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8015130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015132:	2b00      	cmp	r3, #0
 8015134:	d109      	bne.n	801514a <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801513a:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 801513c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801513e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015140:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8015142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015146:	675a      	str	r2, [r3, #116]	; 0x74
 8015148:	e011      	b.n	801516e <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801514e:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8015150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015154:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8015156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801515a:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801515c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801515e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015160:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8015162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015166:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8015168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801516a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801516c:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 801516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015170:	1c5a      	adds	r2, r3, #1
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8015176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015178:	2205      	movs	r2, #5
 801517a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801517c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801517e:	2201      	movs	r2, #1
 8015180:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8015182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015184:	687a      	ldr	r2, [r7, #4]
 8015186:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8015188:	4b0f      	ldr	r3, [pc, #60]	; (80151c8 <_tx_queue_send+0x24c>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	3301      	adds	r3, #1
 801518e:	4a0e      	ldr	r2, [pc, #56]	; (80151c8 <_tx_queue_send+0x24c>)
 8015190:	6013      	str	r3, [r2, #0]
 8015192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015194:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015196:	697b      	ldr	r3, [r7, #20]
 8015198:	f383 8810 	msr	PRIMASK, r3
}
 801519c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801519e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80151a0:	f000 fc88 	bl	8015ab4 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80151a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80151aa:	643b      	str	r3, [r7, #64]	; 0x40
 80151ac:	e007      	b.n	80151be <_tx_queue_send+0x242>
 80151ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80151b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	f383 8810 	msr	PRIMASK, r3
}
 80151b8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 80151ba:	230b      	movs	r3, #11
 80151bc:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 80151be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80151c0:	4618      	mov	r0, r3
 80151c2:	3750      	adds	r7, #80	; 0x50
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}
 80151c8:	20197f7c 	.word	0x20197f7c
 80151cc:	20197ee4 	.word	0x20197ee4
 80151d0:	080149fd 	.word	0x080149fd

080151d4 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b08e      	sub	sp, #56	; 0x38
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
 80151dc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80151de:	f3ef 8310 	mrs	r3, PRIMASK
 80151e2:	623b      	str	r3, [r7, #32]
    return(posture);
 80151e4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80151e6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80151e8:	b672      	cpsid	i
    return(int_posture);
 80151ea:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 80151ec:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80151f2:	4a33      	ldr	r2, [pc, #204]	; (80152c0 <_tx_semaphore_cleanup+0xec>)
 80151f4:	4293      	cmp	r3, r2
 80151f6:	d158      	bne.n	80152aa <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80151fe:	683a      	ldr	r2, [r7, #0]
 8015200:	429a      	cmp	r2, r3
 8015202:	d152      	bne.n	80152aa <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015208:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 801520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801520c:	2b00      	cmp	r3, #0
 801520e:	d04c      	beq.n	80152aa <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8015210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	4a2b      	ldr	r2, [pc, #172]	; (80152c4 <_tx_semaphore_cleanup+0xf0>)
 8015216:	4293      	cmp	r3, r2
 8015218:	d147      	bne.n	80152aa <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 801521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801521c:	691b      	ldr	r3, [r3, #16]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d043      	beq.n	80152aa <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	2200      	movs	r2, #0
 8015226:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8015228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801522a:	691b      	ldr	r3, [r3, #16]
 801522c:	1e5a      	subs	r2, r3, #1
 801522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015230:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8015232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015234:	691b      	ldr	r3, [r3, #16]
 8015236:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8015238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801523a:	2b00      	cmp	r3, #0
 801523c:	d103      	bne.n	8015246 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 801523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015240:	2200      	movs	r2, #0
 8015242:	60da      	str	r2, [r3, #12]
 8015244:	e013      	b.n	801526e <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801524a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015250:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8015252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015256:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8015258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801525a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801525c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 801525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015260:	68db      	ldr	r3, [r3, #12]
 8015262:	687a      	ldr	r2, [r7, #4]
 8015264:	429a      	cmp	r2, r3
 8015266:	d102      	bne.n	801526e <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8015268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801526a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801526c:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015272:	2b06      	cmp	r3, #6
 8015274:	d119      	bne.n	80152aa <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	220d      	movs	r2, #13
 801527a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801527e:	4b12      	ldr	r3, [pc, #72]	; (80152c8 <_tx_semaphore_cleanup+0xf4>)
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	3301      	adds	r3, #1
 8015284:	4a10      	ldr	r2, [pc, #64]	; (80152c8 <_tx_semaphore_cleanup+0xf4>)
 8015286:	6013      	str	r3, [r2, #0]
 8015288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801528a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801528c:	693b      	ldr	r3, [r7, #16]
 801528e:	f383 8810 	msr	PRIMASK, r3
}
 8015292:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8015294:	6878      	ldr	r0, [r7, #4]
 8015296:	f000 fb0d 	bl	80158b4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801529a:	f3ef 8310 	mrs	r3, PRIMASK
 801529e:	61bb      	str	r3, [r7, #24]
    return(posture);
 80152a0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80152a2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80152a4:	b672      	cpsid	i
    return(int_posture);
 80152a6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80152a8:	637b      	str	r3, [r7, #52]	; 0x34
 80152aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152ac:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	f383 8810 	msr	PRIMASK, r3
}
 80152b4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80152b6:	bf00      	nop
 80152b8:	3738      	adds	r7, #56	; 0x38
 80152ba:	46bd      	mov	sp, r7
 80152bc:	bd80      	pop	{r7, pc}
 80152be:	bf00      	nop
 80152c0:	080151d5 	.word	0x080151d5
 80152c4:	53454d41 	.word	0x53454d41
 80152c8:	20197f7c 	.word	0x20197f7c

080152cc <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b08a      	sub	sp, #40	; 0x28
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	60f8      	str	r0, [r7, #12]
 80152d4:	60b9      	str	r1, [r7, #8]
 80152d6:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 80152d8:	221c      	movs	r2, #28
 80152da:	2100      	movs	r1, #0
 80152dc:	68f8      	ldr	r0, [r7, #12]
 80152de:	f014 fa0b 	bl	80296f8 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	68ba      	ldr	r2, [r7, #8]
 80152e6:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	687a      	ldr	r2, [r7, #4]
 80152ec:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80152ee:	f3ef 8310 	mrs	r3, PRIMASK
 80152f2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80152f4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80152f6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80152f8:	b672      	cpsid	i
    return(int_posture);
 80152fa:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80152fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	4a18      	ldr	r2, [pc, #96]	; (8015364 <_tx_semaphore_create+0x98>)
 8015302:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8015304:	4b18      	ldr	r3, [pc, #96]	; (8015368 <_tx_semaphore_create+0x9c>)
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d109      	bne.n	8015320 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 801530c:	4a17      	ldr	r2, [pc, #92]	; (801536c <_tx_semaphore_create+0xa0>)
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	68fa      	ldr	r2, [r7, #12]
 8015316:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	68fa      	ldr	r2, [r7, #12]
 801531c:	619a      	str	r2, [r3, #24]
 801531e:	e011      	b.n	8015344 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8015320:	4b12      	ldr	r3, [pc, #72]	; (801536c <_tx_semaphore_create+0xa0>)
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8015326:	6a3b      	ldr	r3, [r7, #32]
 8015328:	699b      	ldr	r3, [r3, #24]
 801532a:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 801532c:	6a3b      	ldr	r3, [r7, #32]
 801532e:	68fa      	ldr	r2, [r7, #12]
 8015330:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8015332:	69fb      	ldr	r3, [r7, #28]
 8015334:	68fa      	ldr	r2, [r7, #12]
 8015336:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	69fa      	ldr	r2, [r7, #28]
 801533c:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	6a3a      	ldr	r2, [r7, #32]
 8015342:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8015344:	4b08      	ldr	r3, [pc, #32]	; (8015368 <_tx_semaphore_create+0x9c>)
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	3301      	adds	r3, #1
 801534a:	4a07      	ldr	r2, [pc, #28]	; (8015368 <_tx_semaphore_create+0x9c>)
 801534c:	6013      	str	r3, [r2, #0]
 801534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015350:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015352:	693b      	ldr	r3, [r7, #16]
 8015354:	f383 8810 	msr	PRIMASK, r3
}
 8015358:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801535a:	2300      	movs	r3, #0
}
 801535c:	4618      	mov	r0, r3
 801535e:	3728      	adds	r7, #40	; 0x28
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}
 8015364:	53454d41 	.word	0x53454d41
 8015368:	20197eb0 	.word	0x20197eb0
 801536c:	20197eac 	.word	0x20197eac

08015370 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b08e      	sub	sp, #56	; 0x38
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
 8015378:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 801537a:	2300      	movs	r3, #0
 801537c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801537e:	f3ef 8310 	mrs	r3, PRIMASK
 8015382:	623b      	str	r3, [r7, #32]
    return(posture);
 8015384:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015386:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015388:	b672      	cpsid	i
    return(int_posture);
 801538a:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 801538c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	689b      	ldr	r3, [r3, #8]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d00a      	beq.n	80153ac <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	689b      	ldr	r3, [r3, #8]
 801539a:	1e5a      	subs	r2, r3, #1
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	609a      	str	r2, [r3, #8]
 80153a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153a2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80153a4:	69bb      	ldr	r3, [r7, #24]
 80153a6:	f383 8810 	msr	PRIMASK, r3
}
 80153aa:	e068      	b.n	801547e <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80153ac:	683b      	ldr	r3, [r7, #0]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d05d      	beq.n	801546e <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80153b2:	4b35      	ldr	r3, [pc, #212]	; (8015488 <_tx_semaphore_get+0x118>)
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d008      	beq.n	80153cc <_tx_semaphore_get+0x5c>
 80153ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153bc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80153be:	697b      	ldr	r3, [r7, #20]
 80153c0:	f383 8810 	msr	PRIMASK, r3
}
 80153c4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 80153c6:	230d      	movs	r3, #13
 80153c8:	637b      	str	r3, [r7, #52]	; 0x34
 80153ca:	e058      	b.n	801547e <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80153cc:	4b2f      	ldr	r3, [pc, #188]	; (801548c <_tx_semaphore_get+0x11c>)
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 80153d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153d4:	4a2e      	ldr	r2, [pc, #184]	; (8015490 <_tx_semaphore_get+0x120>)
 80153d6:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 80153d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153da:	687a      	ldr	r2, [r7, #4]
 80153dc:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80153de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80153e4:	1c5a      	adds	r2, r3, #1
 80153e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153e8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	691b      	ldr	r3, [r3, #16]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d109      	bne.n	8015408 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80153f8:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 80153fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80153fe:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8015400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015404:	675a      	str	r2, [r3, #116]	; 0x74
 8015406:	e011      	b.n	801542c <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	68db      	ldr	r3, [r3, #12]
 801540c:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 801540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015412:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8015414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015418:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801541c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801541e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8015420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015424:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8015426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801542a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	691b      	ldr	r3, [r3, #16]
 8015430:	1c5a      	adds	r2, r3, #1
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8015436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015438:	2206      	movs	r2, #6
 801543a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801543e:	2201      	movs	r2, #1
 8015440:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8015442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015444:	683a      	ldr	r2, [r7, #0]
 8015446:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8015448:	4b0f      	ldr	r3, [pc, #60]	; (8015488 <_tx_semaphore_get+0x118>)
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	3301      	adds	r3, #1
 801544e:	4a0e      	ldr	r2, [pc, #56]	; (8015488 <_tx_semaphore_get+0x118>)
 8015450:	6013      	str	r3, [r2, #0]
 8015452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015454:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015456:	693b      	ldr	r3, [r7, #16]
 8015458:	f383 8810 	msr	PRIMASK, r3
}
 801545c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801545e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015460:	f000 fb28 	bl	8015ab4 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8015464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801546a:	637b      	str	r3, [r7, #52]	; 0x34
 801546c:	e007      	b.n	801547e <_tx_semaphore_get+0x10e>
 801546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015470:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	f383 8810 	msr	PRIMASK, r3
}
 8015478:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 801547a:	230d      	movs	r3, #13
 801547c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 801547e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015480:	4618      	mov	r0, r3
 8015482:	3738      	adds	r7, #56	; 0x38
 8015484:	46bd      	mov	sp, r7
 8015486:	bd80      	pop	{r7, pc}
 8015488:	20197f7c 	.word	0x20197f7c
 801548c:	20197ee4 	.word	0x20197ee4
 8015490:	080151d5 	.word	0x080151d5

08015494 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b08c      	sub	sp, #48	; 0x30
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801549c:	f3ef 8310 	mrs	r3, PRIMASK
 80154a0:	61bb      	str	r3, [r7, #24]
    return(posture);
 80154a2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80154a4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80154a6:	b672      	cpsid	i
    return(int_posture);
 80154a8:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 80154aa:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	691b      	ldr	r3, [r3, #16]
 80154b0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 80154b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d10a      	bne.n	80154ce <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	689b      	ldr	r3, [r3, #8]
 80154bc:	1c5a      	adds	r2, r3, #1
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	609a      	str	r2, [r3, #8]
 80154c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154c4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80154c6:	693b      	ldr	r3, [r7, #16]
 80154c8:	f383 8810 	msr	PRIMASK, r3
}
 80154cc:	e033      	b.n	8015536 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	68db      	ldr	r3, [r3, #12]
 80154d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 80154d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154d6:	3b01      	subs	r3, #1
 80154d8:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 80154da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d103      	bne.n	80154e8 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	2200      	movs	r2, #0
 80154e4:	60da      	str	r2, [r3, #12]
 80154e6:	e00e      	b.n	8015506 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 80154e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80154ec:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	6a3a      	ldr	r2, [r7, #32]
 80154f2:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80154f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80154f8:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80154fa:	6a3b      	ldr	r3, [r7, #32]
 80154fc:	69fa      	ldr	r2, [r7, #28]
 80154fe:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8015500:	69fb      	ldr	r3, [r7, #28]
 8015502:	6a3a      	ldr	r2, [r7, #32]
 8015504:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801550a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801550e:	2200      	movs	r2, #0
 8015510:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8015512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015514:	2200      	movs	r2, #0
 8015516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 801551a:	4b09      	ldr	r3, [pc, #36]	; (8015540 <_tx_semaphore_put+0xac>)
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	3301      	adds	r3, #1
 8015520:	4a07      	ldr	r2, [pc, #28]	; (8015540 <_tx_semaphore_put+0xac>)
 8015522:	6013      	str	r3, [r2, #0]
 8015524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015526:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	f383 8810 	msr	PRIMASK, r3
}
 801552e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8015530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015532:	f000 f9bf 	bl	80158b4 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8015536:	2300      	movs	r3, #0
}
 8015538:	4618      	mov	r0, r3
 801553a:	3730      	adds	r7, #48	; 0x30
 801553c:	46bd      	mov	sp, r7
 801553e:	bd80      	pop	{r7, pc}
 8015540:	20197f7c 	.word	0x20197f7c

08015544 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8015544:	b580      	push	{r7, lr}
 8015546:	b092      	sub	sp, #72	; 0x48
 8015548:	af00      	add	r7, sp, #0
 801554a:	60f8      	str	r0, [r7, #12]
 801554c:	60b9      	str	r1, [r7, #8]
 801554e:	607a      	str	r2, [r7, #4]
 8015550:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8015552:	2300      	movs	r3, #0
 8015554:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8015556:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015558:	21ef      	movs	r1, #239	; 0xef
 801555a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801555c:	f014 f8cc 	bl	80296f8 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8015560:	22b0      	movs	r2, #176	; 0xb0
 8015562:	2100      	movs	r1, #0
 8015564:	68f8      	ldr	r0, [r7, #12]
 8015566:	f014 f8c7 	bl	80296f8 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	68ba      	ldr	r2, [r7, #8]
 801556e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	687a      	ldr	r2, [r7, #4]
 8015574:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	683a      	ldr	r2, [r7, #0]
 801557a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015580:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015586:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801558c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015592:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801559a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80155a0:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	2220      	movs	r2, #32
 80155a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80155aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80155ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80155b0:	3b01      	subs	r3, #1
 80155b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80155b4:	4413      	add	r3, r2
 80155b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80155bc:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80155be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80155c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80155c2:	429a      	cmp	r2, r3
 80155c4:	d007      	beq.n	80155d6 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	2200      	movs	r2, #0
 80155ca:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	2200      	movs	r2, #0
 80155d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80155d4:	e006      	b.n	80155e4 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80155da:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80155e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	2203      	movs	r2, #3
 80155e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	4a48      	ldr	r2, [pc, #288]	; (8015710 <_tx_thread_create+0x1cc>)
 80155ee:	655a      	str	r2, [r3, #84]	; 0x54
 80155f0:	68fa      	ldr	r2, [r7, #12]
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80155f6:	4947      	ldr	r1, [pc, #284]	; (8015714 <_tx_thread_create+0x1d0>)
 80155f8:	68f8      	ldr	r0, [r7, #12]
 80155fa:	f7ea ff01 	bl	8000400 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80155fe:	f3ef 8310 	mrs	r3, PRIMASK
 8015602:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8015604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8015606:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8015608:	b672      	cpsid	i
    return(int_posture);
 801560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 801560c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	4a41      	ldr	r2, [pc, #260]	; (8015718 <_tx_thread_create+0x1d4>)
 8015612:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8015614:	4b41      	ldr	r3, [pc, #260]	; (801571c <_tx_thread_create+0x1d8>)
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d10b      	bne.n	8015634 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 801561c:	4a40      	ldr	r2, [pc, #256]	; (8015720 <_tx_thread_create+0x1dc>)
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	68fa      	ldr	r2, [r7, #12]
 8015626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	68fa      	ldr	r2, [r7, #12]
 801562e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8015632:	e016      	b.n	8015662 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8015634:	4b3a      	ldr	r3, [pc, #232]	; (8015720 <_tx_thread_create+0x1dc>)
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 801563a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801563c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015640:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8015642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015644:	68fa      	ldr	r2, [r7, #12]
 8015646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 801564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801564c:	68fa      	ldr	r2, [r7, #12]
 801564e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801565e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8015662:	4b2e      	ldr	r3, [pc, #184]	; (801571c <_tx_thread_create+0x1d8>)
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	3301      	adds	r3, #1
 8015668:	4a2c      	ldr	r2, [pc, #176]	; (801571c <_tx_thread_create+0x1d8>)
 801566a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801566c:	4b2d      	ldr	r3, [pc, #180]	; (8015724 <_tx_thread_create+0x1e0>)
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	3301      	adds	r3, #1
 8015672:	4a2c      	ldr	r2, [pc, #176]	; (8015724 <_tx_thread_create+0x1e0>)
 8015674:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8015676:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015678:	2b01      	cmp	r3, #1
 801567a:	d129      	bne.n	80156d0 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801567c:	f3ef 8305 	mrs	r3, IPSR
 8015680:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8015682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8015684:	4b28      	ldr	r3, [pc, #160]	; (8015728 <_tx_thread_create+0x1e4>)
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	4313      	orrs	r3, r2
 801568a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801568e:	d30d      	bcc.n	80156ac <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8015690:	4b26      	ldr	r3, [pc, #152]	; (801572c <_tx_thread_create+0x1e8>)
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8015696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015698:	2b00      	cmp	r3, #0
 801569a:	d009      	beq.n	80156b0 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 801569c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801569e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80156a0:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80156a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80156a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80156a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80156aa:	e001      	b.n	80156b0 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80156ac:	2300      	movs	r3, #0
 80156ae:	647b      	str	r3, [r7, #68]	; 0x44
 80156b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156b2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80156b4:	6a3b      	ldr	r3, [r7, #32]
 80156b6:	f383 8810 	msr	PRIMASK, r3
}
 80156ba:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80156bc:	68f8      	ldr	r0, [r7, #12]
 80156be:	f000 f8f9 	bl	80158b4 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80156c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d01e      	beq.n	8015706 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80156c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80156ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80156cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80156ce:	e01a      	b.n	8015706 <_tx_thread_create+0x1c2>
 80156d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156d2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80156d4:	693b      	ldr	r3, [r7, #16]
 80156d6:	f383 8810 	msr	PRIMASK, r3
}
 80156da:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80156dc:	f3ef 8310 	mrs	r3, PRIMASK
 80156e0:	61bb      	str	r3, [r7, #24]
    return(posture);
 80156e2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80156e4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80156e6:	b672      	cpsid	i
    return(int_posture);
 80156e8:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80156ea:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80156ec:	4b0d      	ldr	r3, [pc, #52]	; (8015724 <_tx_thread_create+0x1e0>)
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	3b01      	subs	r3, #1
 80156f2:	4a0c      	ldr	r2, [pc, #48]	; (8015724 <_tx_thread_create+0x1e0>)
 80156f4:	6013      	str	r3, [r2, #0]
 80156f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156f8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80156fa:	69fb      	ldr	r3, [r7, #28]
 80156fc:	f383 8810 	msr	PRIMASK, r3
}
 8015700:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8015702:	f000 f89d 	bl	8015840 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8015706:	2300      	movs	r3, #0
}
 8015708:	4618      	mov	r0, r3
 801570a:	3748      	adds	r7, #72	; 0x48
 801570c:	46bd      	mov	sp, r7
 801570e:	bd80      	pop	{r7, pc}
 8015710:	08015d89 	.word	0x08015d89
 8015714:	080157a9 	.word	0x080157a9
 8015718:	54485244 	.word	0x54485244
 801571c:	20197ef0 	.word	0x20197ef0
 8015720:	20197eec 	.word	0x20197eec
 8015724:	20197f7c 	.word	0x20197f7c
 8015728:	20000054 	.word	0x20000054
 801572c:	20197ee8 	.word	0x20197ee8

08015730 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8015734:	4b12      	ldr	r3, [pc, #72]	; (8015780 <_tx_thread_initialize+0x50>)
 8015736:	2200      	movs	r2, #0
 8015738:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 801573a:	4b12      	ldr	r3, [pc, #72]	; (8015784 <_tx_thread_initialize+0x54>)
 801573c:	2200      	movs	r2, #0
 801573e:	601a      	str	r2, [r3, #0]
 8015740:	4b11      	ldr	r3, [pc, #68]	; (8015788 <_tx_thread_initialize+0x58>)
 8015742:	2200      	movs	r2, #0
 8015744:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8015746:	4b11      	ldr	r3, [pc, #68]	; (801578c <_tx_thread_initialize+0x5c>)
 8015748:	2220      	movs	r2, #32
 801574a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 801574c:	2280      	movs	r2, #128	; 0x80
 801574e:	2100      	movs	r1, #0
 8015750:	480f      	ldr	r0, [pc, #60]	; (8015790 <_tx_thread_initialize+0x60>)
 8015752:	f013 ffd1 	bl	80296f8 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8015756:	4b0f      	ldr	r3, [pc, #60]	; (8015794 <_tx_thread_initialize+0x64>)
 8015758:	2200      	movs	r2, #0
 801575a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 801575c:	4b0e      	ldr	r3, [pc, #56]	; (8015798 <_tx_thread_initialize+0x68>)
 801575e:	2200      	movs	r2, #0
 8015760:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8015762:	4b0e      	ldr	r3, [pc, #56]	; (801579c <_tx_thread_initialize+0x6c>)
 8015764:	2200      	movs	r2, #0
 8015766:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8015768:	4b0d      	ldr	r3, [pc, #52]	; (80157a0 <_tx_thread_initialize+0x70>)
 801576a:	2200      	movs	r2, #0
 801576c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 801576e:	4b0d      	ldr	r3, [pc, #52]	; (80157a4 <_tx_thread_initialize+0x74>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8015776:	4a0b      	ldr	r2, [pc, #44]	; (80157a4 <_tx_thread_initialize+0x74>)
 8015778:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 801577a:	bf00      	nop
 801577c:	bd80      	pop	{r7, pc}
 801577e:	bf00      	nop
 8015780:	20197ee4 	.word	0x20197ee4
 8015784:	20197ee8 	.word	0x20197ee8
 8015788:	20197ef4 	.word	0x20197ef4
 801578c:	20197ef8 	.word	0x20197ef8
 8015790:	20197efc 	.word	0x20197efc
 8015794:	20197eec 	.word	0x20197eec
 8015798:	20197ef0 	.word	0x20197ef0
 801579c:	20197f7c 	.word	0x20197f7c
 80157a0:	20197f80 	.word	0x20197f80
 80157a4:	20197f84 	.word	0x20197f84

080157a8 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b088      	sub	sp, #32
 80157ac:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80157ae:	4b21      	ldr	r3, [pc, #132]	; (8015834 <_tx_thread_shell_entry+0x8c>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80157b4:	69fb      	ldr	r3, [r7, #28]
 80157b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80157b8:	69fa      	ldr	r2, [r7, #28]
 80157ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80157bc:	4610      	mov	r0, r2
 80157be:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80157c0:	4b1d      	ldr	r3, [pc, #116]	; (8015838 <_tx_thread_shell_entry+0x90>)
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d003      	beq.n	80157d0 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80157c8:	4b1b      	ldr	r3, [pc, #108]	; (8015838 <_tx_thread_shell_entry+0x90>)
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	69f8      	ldr	r0, [r7, #28]
 80157ce:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80157d0:	f3ef 8310 	mrs	r3, PRIMASK
 80157d4:	607b      	str	r3, [r7, #4]
    return(posture);
 80157d6:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80157d8:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80157da:	b672      	cpsid	i
    return(int_posture);
 80157dc:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80157de:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80157e0:	69fb      	ldr	r3, [r7, #28]
 80157e2:	2201      	movs	r2, #1
 80157e4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80157e6:	69fb      	ldr	r3, [r7, #28]
 80157e8:	2201      	movs	r2, #1
 80157ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80157ec:	69fb      	ldr	r3, [r7, #28]
 80157ee:	2200      	movs	r2, #0
 80157f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80157f2:	4b12      	ldr	r3, [pc, #72]	; (801583c <_tx_thread_shell_entry+0x94>)
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	3301      	adds	r3, #1
 80157f8:	4a10      	ldr	r2, [pc, #64]	; (801583c <_tx_thread_shell_entry+0x94>)
 80157fa:	6013      	str	r3, [r2, #0]
 80157fc:	69bb      	ldr	r3, [r7, #24]
 80157fe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	f383 8810 	msr	PRIMASK, r3
}
 8015806:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8015808:	f3ef 8314 	mrs	r3, CONTROL
 801580c:	60fb      	str	r3, [r7, #12]
    return(control_value);
 801580e:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8015810:	617b      	str	r3, [r7, #20]
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	f023 0304 	bic.w	r3, r3, #4
 8015818:	617b      	str	r3, [r7, #20]
 801581a:	697b      	ldr	r3, [r7, #20]
 801581c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 801581e:	693b      	ldr	r3, [r7, #16]
 8015820:	f383 8814 	msr	CONTROL, r3
}
 8015824:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8015826:	69f8      	ldr	r0, [r7, #28]
 8015828:	f000 f944 	bl	8015ab4 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 801582c:	bf00      	nop
 801582e:	3720      	adds	r7, #32
 8015830:	46bd      	mov	sp, r7
 8015832:	bd80      	pop	{r7, pc}
 8015834:	20197ee4 	.word	0x20197ee4
 8015838:	20197f80 	.word	0x20197f80
 801583c:	20197f7c 	.word	0x20197f7c

08015840 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8015840:	b480      	push	{r7}
 8015842:	b089      	sub	sp, #36	; 0x24
 8015844:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015846:	4b17      	ldr	r3, [pc, #92]	; (80158a4 <_tx_thread_system_preempt_check+0x64>)
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 801584c:	69fb      	ldr	r3, [r7, #28]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d121      	bne.n	8015896 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8015852:	4b15      	ldr	r3, [pc, #84]	; (80158a8 <_tx_thread_system_preempt_check+0x68>)
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8015858:	4b14      	ldr	r3, [pc, #80]	; (80158ac <_tx_thread_system_preempt_check+0x6c>)
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 801585e:	69ba      	ldr	r2, [r7, #24]
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	429a      	cmp	r2, r3
 8015864:	d017      	beq.n	8015896 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015866:	4b12      	ldr	r3, [pc, #72]	; (80158b0 <_tx_thread_system_preempt_check+0x70>)
 8015868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801586c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801586e:	f3ef 8305 	mrs	r3, IPSR
 8015872:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8015874:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 8015876:	2b00      	cmp	r3, #0
 8015878:	d10c      	bne.n	8015894 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801587a:	f3ef 8310 	mrs	r3, PRIMASK
 801587e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8015880:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8015882:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015884:	b662      	cpsie	i
}
 8015886:	bf00      	nop
 8015888:	68bb      	ldr	r3, [r7, #8]
 801588a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f383 8810 	msr	PRIMASK, r3
}
 8015892:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8015894:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8015896:	bf00      	nop
 8015898:	3724      	adds	r7, #36	; 0x24
 801589a:	46bd      	mov	sp, r7
 801589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a0:	4770      	bx	lr
 80158a2:	bf00      	nop
 80158a4:	20197f7c 	.word	0x20197f7c
 80158a8:	20197ee4 	.word	0x20197ee4
 80158ac:	20197ee8 	.word	0x20197ee8
 80158b0:	e000ed04 	.word	0xe000ed04

080158b4 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b096      	sub	sp, #88	; 0x58
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80158bc:	f3ef 8310 	mrs	r3, PRIMASK
 80158c0:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80158c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80158c4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80158c6:	b672      	cpsid	i
    return(int_posture);
 80158c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80158ca:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d005      	beq.n	80158e0 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	334c      	adds	r3, #76	; 0x4c
 80158d8:	4618      	mov	r0, r3
 80158da:	f000 fb91 	bl	8016000 <_tx_timer_system_deactivate>
 80158de:	e002      	b.n	80158e6 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	2200      	movs	r2, #0
 80158e4:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80158e6:	4b6c      	ldr	r3, [pc, #432]	; (8015a98 <_tx_thread_system_resume+0x1e4>)
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	3b01      	subs	r3, #1
 80158ec:	4a6a      	ldr	r2, [pc, #424]	; (8015a98 <_tx_thread_system_resume+0x1e4>)
 80158ee:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	f040 8083 	bne.w	8015a00 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158fe:	2b00      	cmp	r3, #0
 8015900:	f000 8097 	beq.w	8015a32 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015908:	2b00      	cmp	r3, #0
 801590a:	d172      	bne.n	80159f2 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	2200      	movs	r2, #0
 8015910:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015916:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8015918:	4a60      	ldr	r2, [pc, #384]	; (8015a9c <_tx_thread_system_resume+0x1e8>)
 801591a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801591c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015920:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8015922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015924:	2b00      	cmp	r3, #0
 8015926:	d154      	bne.n	80159d2 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8015928:	495c      	ldr	r1, [pc, #368]	; (8015a9c <_tx_thread_system_resume+0x1e8>)
 801592a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801592c:	687a      	ldr	r2, [r7, #4]
 801592e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	687a      	ldr	r2, [r7, #4]
 8015936:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	687a      	ldr	r2, [r7, #4]
 801593c:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 801593e:	2201      	movs	r2, #1
 8015940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015942:	fa02 f303 	lsl.w	r3, r2, r3
 8015946:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8015948:	4b55      	ldr	r3, [pc, #340]	; (8015aa0 <_tx_thread_system_resume+0x1ec>)
 801594a:	681a      	ldr	r2, [r3, #0]
 801594c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801594e:	4313      	orrs	r3, r2
 8015950:	4a53      	ldr	r2, [pc, #332]	; (8015aa0 <_tx_thread_system_resume+0x1ec>)
 8015952:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8015954:	4b53      	ldr	r3, [pc, #332]	; (8015aa4 <_tx_thread_system_resume+0x1f0>)
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801595a:	429a      	cmp	r2, r3
 801595c:	d269      	bcs.n	8015a32 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 801595e:	4a51      	ldr	r2, [pc, #324]	; (8015aa4 <_tx_thread_system_resume+0x1f0>)
 8015960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015962:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8015964:	4b50      	ldr	r3, [pc, #320]	; (8015aa8 <_tx_thread_system_resume+0x1f4>)
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 801596a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801596c:	2b00      	cmp	r3, #0
 801596e:	d103      	bne.n	8015978 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8015970:	4a4d      	ldr	r2, [pc, #308]	; (8015aa8 <_tx_thread_system_resume+0x1f4>)
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	6013      	str	r3, [r2, #0]
 8015976:	e05c      	b.n	8015a32 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8015978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801597a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801597c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801597e:	429a      	cmp	r2, r3
 8015980:	d257      	bcs.n	8015a32 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8015982:	4a49      	ldr	r2, [pc, #292]	; (8015aa8 <_tx_thread_system_resume+0x1f4>)
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	6013      	str	r3, [r2, #0]
 8015988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801598a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801598c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801598e:	f383 8810 	msr	PRIMASK, r3
}
 8015992:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015994:	4b40      	ldr	r3, [pc, #256]	; (8015a98 <_tx_thread_system_resume+0x1e4>)
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 801599a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801599c:	2b00      	cmp	r3, #0
 801599e:	d174      	bne.n	8015a8a <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80159a0:	4b42      	ldr	r3, [pc, #264]	; (8015aac <_tx_thread_system_resume+0x1f8>)
 80159a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159a6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80159a8:	f3ef 8305 	mrs	r3, IPSR
 80159ac:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80159ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d10c      	bne.n	80159ce <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80159b4:	f3ef 8310 	mrs	r3, PRIMASK
 80159b8:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80159ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 80159bc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80159be:	b662      	cpsie	i
}
 80159c0:	bf00      	nop
 80159c2:	6a3b      	ldr	r3, [r7, #32]
 80159c4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80159c6:	69fb      	ldr	r3, [r7, #28]
 80159c8:	f383 8810 	msr	PRIMASK, r3
}
 80159cc:	bf00      	nop
}
 80159ce:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 80159d0:	e05b      	b.n	8015a8a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80159d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159d6:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80159d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80159da:	687a      	ldr	r2, [r7, #4]
 80159dc:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80159de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159e0:	687a      	ldr	r2, [r7, #4]
 80159e2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80159e8:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80159ee:	621a      	str	r2, [r3, #32]
 80159f0:	e01f      	b.n	8015a32 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	2200      	movs	r2, #0
 80159f6:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	2203      	movs	r2, #3
 80159fc:	631a      	str	r2, [r3, #48]	; 0x30
 80159fe:	e018      	b.n	8015a32 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a04:	2b01      	cmp	r3, #1
 8015a06:	d014      	beq.n	8015a32 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a0c:	2b02      	cmp	r3, #2
 8015a0e:	d010      	beq.n	8015a32 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d106      	bne.n	8015a26 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	2200      	movs	r2, #0
 8015a22:	631a      	str	r2, [r3, #48]	; 0x30
 8015a24:	e005      	b.n	8015a32 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	2200      	movs	r2, #0
 8015a2a:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	2203      	movs	r2, #3
 8015a30:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8015a32:	4b1f      	ldr	r3, [pc, #124]	; (8015ab0 <_tx_thread_system_resume+0x1fc>)
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8015a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a3a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015a3c:	69bb      	ldr	r3, [r7, #24]
 8015a3e:	f383 8810 	msr	PRIMASK, r3
}
 8015a42:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8015a44:	4b18      	ldr	r3, [pc, #96]	; (8015aa8 <_tx_thread_system_resume+0x1f4>)
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	d020      	beq.n	8015a90 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015a4e:	4b12      	ldr	r3, [pc, #72]	; (8015a98 <_tx_thread_system_resume+0x1e4>)
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8015a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d11a      	bne.n	8015a90 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015a5a:	4b14      	ldr	r3, [pc, #80]	; (8015aac <_tx_thread_system_resume+0x1f8>)
 8015a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a60:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015a62:	f3ef 8305 	mrs	r3, IPSR
 8015a66:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015a68:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d10f      	bne.n	8015a8e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8015a72:	613b      	str	r3, [r7, #16]
    return(posture);
 8015a74:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8015a76:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015a78:	b662      	cpsie	i
}
 8015a7a:	bf00      	nop
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015a80:	68bb      	ldr	r3, [r7, #8]
 8015a82:	f383 8810 	msr	PRIMASK, r3
}
 8015a86:	bf00      	nop
}
 8015a88:	e001      	b.n	8015a8e <_tx_thread_system_resume+0x1da>
                                return;
 8015a8a:	bf00      	nop
 8015a8c:	e000      	b.n	8015a90 <_tx_thread_system_resume+0x1dc>
 8015a8e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8015a90:	3758      	adds	r7, #88	; 0x58
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}
 8015a96:	bf00      	nop
 8015a98:	20197f7c 	.word	0x20197f7c
 8015a9c:	20197efc 	.word	0x20197efc
 8015aa0:	20197ef4 	.word	0x20197ef4
 8015aa4:	20197ef8 	.word	0x20197ef8
 8015aa8:	20197ee8 	.word	0x20197ee8
 8015aac:	e000ed04 	.word	0xe000ed04
 8015ab0:	20197ee4 	.word	0x20197ee4

08015ab4 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b09e      	sub	sp, #120	; 0x78
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8015abc:	4b81      	ldr	r3, [pc, #516]	; (8015cc4 <_tx_thread_system_suspend+0x210>)
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8015ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8015ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8015aca:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8015acc:	b672      	cpsid	i
    return(int_posture);
 8015ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8015ad0:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8015ad2:	687a      	ldr	r2, [r7, #4]
 8015ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015ad6:	429a      	cmp	r2, r3
 8015ad8:	d112      	bne.n	8015b00 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015ade:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8015ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d008      	beq.n	8015af8 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8015ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015aec:	d004      	beq.n	8015af8 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	334c      	adds	r3, #76	; 0x4c
 8015af2:	4618      	mov	r0, r3
 8015af4:	f000 fa22 	bl	8015f3c <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	69db      	ldr	r3, [r3, #28]
 8015afc:	4a72      	ldr	r2, [pc, #456]	; (8015cc8 <_tx_thread_system_suspend+0x214>)
 8015afe:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8015b00:	4b72      	ldr	r3, [pc, #456]	; (8015ccc <_tx_thread_system_suspend+0x218>)
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	3b01      	subs	r3, #1
 8015b06:	4a71      	ldr	r2, [pc, #452]	; (8015ccc <_tx_thread_system_suspend+0x218>)
 8015b08:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b0e:	2b01      	cmp	r3, #1
 8015b10:	f040 80a6 	bne.w	8015c60 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	2200      	movs	r2, #0
 8015b18:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b1e:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	6a1b      	ldr	r3, [r3, #32]
 8015b24:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8015b26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	429a      	cmp	r2, r3
 8015b2c:	d015      	beq.n	8015b5a <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b32:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8015b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015b36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015b38:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8015b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015b3e:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8015b40:	4a63      	ldr	r2, [pc, #396]	; (8015cd0 <_tx_thread_system_suspend+0x21c>)
 8015b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015b48:	687a      	ldr	r2, [r7, #4]
 8015b4a:	429a      	cmp	r2, r3
 8015b4c:	d157      	bne.n	8015bfe <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8015b4e:	4960      	ldr	r1, [pc, #384]	; (8015cd0 <_tx_thread_system_suspend+0x21c>)
 8015b50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015b58:	e051      	b.n	8015bfe <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8015b5a:	4a5d      	ldr	r2, [pc, #372]	; (8015cd0 <_tx_thread_system_suspend+0x21c>)
 8015b5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b5e:	2100      	movs	r1, #0
 8015b60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8015b64:	2201      	movs	r2, #1
 8015b66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b68:	fa02 f303 	lsl.w	r3, r2, r3
 8015b6c:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8015b6e:	4b59      	ldr	r3, [pc, #356]	; (8015cd4 <_tx_thread_system_suspend+0x220>)
 8015b70:	681a      	ldr	r2, [r3, #0]
 8015b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015b74:	43db      	mvns	r3, r3
 8015b76:	4013      	ands	r3, r2
 8015b78:	4a56      	ldr	r2, [pc, #344]	; (8015cd4 <_tx_thread_system_suspend+0x220>)
 8015b7a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8015b80:	4b54      	ldr	r3, [pc, #336]	; (8015cd4 <_tx_thread_system_suspend+0x220>)
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8015b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d12b      	bne.n	8015be4 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8015b8c:	4b52      	ldr	r3, [pc, #328]	; (8015cd8 <_tx_thread_system_suspend+0x224>)
 8015b8e:	2220      	movs	r2, #32
 8015b90:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8015b92:	4b52      	ldr	r3, [pc, #328]	; (8015cdc <_tx_thread_system_suspend+0x228>)
 8015b94:	2200      	movs	r2, #0
 8015b96:	601a      	str	r2, [r3, #0]
 8015b98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015b9a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b9e:	f383 8810 	msr	PRIMASK, r3
}
 8015ba2:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015ba4:	4b49      	ldr	r3, [pc, #292]	; (8015ccc <_tx_thread_system_suspend+0x218>)
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8015baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	f040 8081 	bne.w	8015cb4 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015bb2:	4b4b      	ldr	r3, [pc, #300]	; (8015ce0 <_tx_thread_system_suspend+0x22c>)
 8015bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bb8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015bba:	f3ef 8305 	mrs	r3, IPSR
 8015bbe:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8015bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d10c      	bne.n	8015be0 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8015bca:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8015bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8015bce:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015bd0:	b662      	cpsie	i
}
 8015bd2:	bf00      	nop
 8015bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bd6:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bda:	f383 8810 	msr	PRIMASK, r3
}
 8015bde:	bf00      	nop
}
 8015be0:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8015be2:	e067      	b.n	8015cb4 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8015be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015be6:	fa93 f3a3 	rbit	r3, r3
 8015bea:	65bb      	str	r3, [r7, #88]	; 0x58
 8015bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015bee:	fab3 f383 	clz	r3, r3
 8015bf2:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8015bf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015bf8:	4413      	add	r3, r2
 8015bfa:	4a37      	ldr	r2, [pc, #220]	; (8015cd8 <_tx_thread_system_suspend+0x224>)
 8015bfc:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8015bfe:	4b37      	ldr	r3, [pc, #220]	; (8015cdc <_tx_thread_system_suspend+0x228>)
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	687a      	ldr	r2, [r7, #4]
 8015c04:	429a      	cmp	r2, r3
 8015c06:	d12b      	bne.n	8015c60 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8015c08:	4b33      	ldr	r3, [pc, #204]	; (8015cd8 <_tx_thread_system_suspend+0x224>)
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	4a30      	ldr	r2, [pc, #192]	; (8015cd0 <_tx_thread_system_suspend+0x21c>)
 8015c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015c12:	4a32      	ldr	r2, [pc, #200]	; (8015cdc <_tx_thread_system_suspend+0x228>)
 8015c14:	6013      	str	r3, [r2, #0]
 8015c16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015c18:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c1c:	f383 8810 	msr	PRIMASK, r3
}
 8015c20:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015c22:	4b2a      	ldr	r3, [pc, #168]	; (8015ccc <_tx_thread_system_suspend+0x218>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8015c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d144      	bne.n	8015cb8 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015c2e:	4b2c      	ldr	r3, [pc, #176]	; (8015ce0 <_tx_thread_system_suspend+0x22c>)
 8015c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c34:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015c36:	f3ef 8305 	mrs	r3, IPSR
 8015c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8015c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d10c      	bne.n	8015c5c <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015c42:	f3ef 8310 	mrs	r3, PRIMASK
 8015c46:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8015c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8015c4a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015c4c:	b662      	cpsie	i
}
 8015c4e:	bf00      	nop
 8015c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c52:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015c54:	6a3b      	ldr	r3, [r7, #32]
 8015c56:	f383 8810 	msr	PRIMASK, r3
}
 8015c5a:	bf00      	nop
}
 8015c5c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8015c5e:	e02b      	b.n	8015cb8 <_tx_thread_system_suspend+0x204>
 8015c60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015c62:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015c64:	69fb      	ldr	r3, [r7, #28]
 8015c66:	f383 8810 	msr	PRIMASK, r3
}
 8015c6a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8015c6c:	4b1b      	ldr	r3, [pc, #108]	; (8015cdc <_tx_thread_system_suspend+0x228>)
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015c72:	429a      	cmp	r2, r3
 8015c74:	d022      	beq.n	8015cbc <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015c76:	4b15      	ldr	r3, [pc, #84]	; (8015ccc <_tx_thread_system_suspend+0x218>)
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8015c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d11c      	bne.n	8015cbc <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015c82:	4b17      	ldr	r3, [pc, #92]	; (8015ce0 <_tx_thread_system_suspend+0x22c>)
 8015c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c88:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015c8a:	f3ef 8305 	mrs	r3, IPSR
 8015c8e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015c90:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d10c      	bne.n	8015cb0 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015c96:	f3ef 8310 	mrs	r3, PRIMASK
 8015c9a:	617b      	str	r3, [r7, #20]
    return(posture);
 8015c9c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8015c9e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015ca0:	b662      	cpsie	i
}
 8015ca2:	bf00      	nop
 8015ca4:	693b      	ldr	r3, [r7, #16]
 8015ca6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	f383 8810 	msr	PRIMASK, r3
}
 8015cae:	bf00      	nop
}
 8015cb0:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8015cb2:	e003      	b.n	8015cbc <_tx_thread_system_suspend+0x208>
                return;
 8015cb4:	bf00      	nop
 8015cb6:	e002      	b.n	8015cbe <_tx_thread_system_suspend+0x20a>
            return;
 8015cb8:	bf00      	nop
 8015cba:	e000      	b.n	8015cbe <_tx_thread_system_suspend+0x20a>
    return;
 8015cbc:	bf00      	nop
}
 8015cbe:	3778      	adds	r7, #120	; 0x78
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}
 8015cc4:	20197ee4 	.word	0x20197ee4
 8015cc8:	201984e8 	.word	0x201984e8
 8015ccc:	20197f7c 	.word	0x20197f7c
 8015cd0:	20197efc 	.word	0x20197efc
 8015cd4:	20197ef4 	.word	0x20197ef4
 8015cd8:	20197ef8 	.word	0x20197ef8
 8015cdc:	20197ee8 	.word	0x20197ee8
 8015ce0:	e000ed04 	.word	0xe000ed04

08015ce4 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8015ce4:	b480      	push	{r7}
 8015ce6:	b087      	sub	sp, #28
 8015ce8:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8015cea:	4b21      	ldr	r3, [pc, #132]	; (8015d70 <_tx_thread_time_slice+0x8c>)
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8015cf4:	60fb      	str	r3, [r7, #12]
    return(posture);
 8015cf6:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8015cf8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015cfa:	b672      	cpsid	i
    return(int_posture);
 8015cfc:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8015cfe:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8015d00:	4b1c      	ldr	r3, [pc, #112]	; (8015d74 <_tx_thread_time_slice+0x90>)
 8015d02:	2200      	movs	r2, #0
 8015d04:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8015d06:	697b      	ldr	r3, [r7, #20]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d024      	beq.n	8015d56 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8015d0c:	697b      	ldr	r3, [r7, #20]
 8015d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d120      	bne.n	8015d56 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8015d14:	697b      	ldr	r3, [r7, #20]
 8015d16:	69da      	ldr	r2, [r3, #28]
 8015d18:	697b      	ldr	r3, [r7, #20]
 8015d1a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8015d1c:	697b      	ldr	r3, [r7, #20]
 8015d1e:	699b      	ldr	r3, [r3, #24]
 8015d20:	4a15      	ldr	r2, [pc, #84]	; (8015d78 <_tx_thread_time_slice+0x94>)
 8015d22:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8015d24:	697b      	ldr	r3, [r7, #20]
 8015d26:	6a1b      	ldr	r3, [r3, #32]
 8015d28:	697a      	ldr	r2, [r7, #20]
 8015d2a:	429a      	cmp	r2, r3
 8015d2c:	d013      	beq.n	8015d56 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8015d2e:	697b      	ldr	r3, [r7, #20]
 8015d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d32:	697b      	ldr	r3, [r7, #20]
 8015d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d36:	429a      	cmp	r2, r3
 8015d38:	d10d      	bne.n	8015d56 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8015d3a:	697b      	ldr	r3, [r7, #20]
 8015d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d3e:	697a      	ldr	r2, [r7, #20]
 8015d40:	6a12      	ldr	r2, [r2, #32]
 8015d42:	490e      	ldr	r1, [pc, #56]	; (8015d7c <_tx_thread_time_slice+0x98>)
 8015d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8015d48:	4b0d      	ldr	r3, [pc, #52]	; (8015d80 <_tx_thread_time_slice+0x9c>)
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	4a0b      	ldr	r2, [pc, #44]	; (8015d7c <_tx_thread_time_slice+0x98>)
 8015d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d52:	4a0c      	ldr	r2, [pc, #48]	; (8015d84 <_tx_thread_time_slice+0xa0>)
 8015d54:	6013      	str	r3, [r2, #0]
 8015d56:	693b      	ldr	r3, [r7, #16]
 8015d58:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	f383 8810 	msr	PRIMASK, r3
}
 8015d60:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8015d62:	bf00      	nop
 8015d64:	371c      	adds	r7, #28
 8015d66:	46bd      	mov	sp, r7
 8015d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6c:	4770      	bx	lr
 8015d6e:	bf00      	nop
 8015d70:	20197ee4 	.word	0x20197ee4
 8015d74:	20197f8c 	.word	0x20197f8c
 8015d78:	201984e8 	.word	0x201984e8
 8015d7c:	20197efc 	.word	0x20197efc
 8015d80:	20197ef8 	.word	0x20197ef8
 8015d84:	20197ee8 	.word	0x20197ee8

08015d88 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b08a      	sub	sp, #40	; 0x28
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015d94:	f3ef 8310 	mrs	r3, PRIMASK
 8015d98:	617b      	str	r3, [r7, #20]
    return(posture);
 8015d9a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8015d9c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015d9e:	b672      	cpsid	i
    return(int_posture);
 8015da0:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8015da2:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8015da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015da8:	2b04      	cmp	r3, #4
 8015daa:	d10e      	bne.n	8015dca <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8015dac:	4b13      	ldr	r3, [pc, #76]	; (8015dfc <_tx_thread_timeout+0x74>)
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	3301      	adds	r3, #1
 8015db2:	4a12      	ldr	r2, [pc, #72]	; (8015dfc <_tx_thread_timeout+0x74>)
 8015db4:	6013      	str	r3, [r2, #0]
 8015db6:	6a3b      	ldr	r3, [r7, #32]
 8015db8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	f383 8810 	msr	PRIMASK, r3
}
 8015dc0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8015dc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015dc4:	f7ff fd76 	bl	80158b4 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8015dc8:	e013      	b.n	8015df2 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8015dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015dce:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8015dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015dd6:	61bb      	str	r3, [r7, #24]
 8015dd8:	6a3b      	ldr	r3, [r7, #32]
 8015dda:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015ddc:	68bb      	ldr	r3, [r7, #8]
 8015dde:	f383 8810 	msr	PRIMASK, r3
}
 8015de2:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8015de4:	69fb      	ldr	r3, [r7, #28]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d003      	beq.n	8015df2 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8015dea:	69fb      	ldr	r3, [r7, #28]
 8015dec:	69b9      	ldr	r1, [r7, #24]
 8015dee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015df0:	4798      	blx	r3
}
 8015df2:	bf00      	nop
 8015df4:	3728      	adds	r7, #40	; 0x28
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bd80      	pop	{r7, pc}
 8015dfa:	bf00      	nop
 8015dfc:	20197f7c 	.word	0x20197f7c

08015e00 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8015e00:	b580      	push	{r7, lr}
 8015e02:	b084      	sub	sp, #16
 8015e04:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015e06:	f3ef 8310 	mrs	r3, PRIMASK
 8015e0a:	607b      	str	r3, [r7, #4]
    return(posture);
 8015e0c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8015e0e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015e10:	b672      	cpsid	i
    return(int_posture);
 8015e12:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8015e14:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8015e16:	4b09      	ldr	r3, [pc, #36]	; (8015e3c <_tx_timer_expiration_process+0x3c>)
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	3301      	adds	r3, #1
 8015e1c:	4a07      	ldr	r2, [pc, #28]	; (8015e3c <_tx_timer_expiration_process+0x3c>)
 8015e1e:	6013      	str	r3, [r2, #0]
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015e24:	68bb      	ldr	r3, [r7, #8]
 8015e26:	f383 8810 	msr	PRIMASK, r3
}
 8015e2a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8015e2c:	4804      	ldr	r0, [pc, #16]	; (8015e40 <_tx_timer_expiration_process+0x40>)
 8015e2e:	f7ff fd41 	bl	80158b4 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8015e32:	bf00      	nop
 8015e34:	3710      	adds	r7, #16
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bd80      	pop	{r7, pc}
 8015e3a:	bf00      	nop
 8015e3c:	20197f7c 	.word	0x20197f7c
 8015e40:	2019802c 	.word	0x2019802c

08015e44 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8015e44:	b590      	push	{r4, r7, lr}
 8015e46:	b089      	sub	sp, #36	; 0x24
 8015e48:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8015e4a:	4b28      	ldr	r3, [pc, #160]	; (8015eec <_tx_timer_initialize+0xa8>)
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8015e50:	4b27      	ldr	r3, [pc, #156]	; (8015ef0 <_tx_timer_initialize+0xac>)
 8015e52:	2200      	movs	r2, #0
 8015e54:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8015e56:	4b27      	ldr	r3, [pc, #156]	; (8015ef4 <_tx_timer_initialize+0xb0>)
 8015e58:	2200      	movs	r2, #0
 8015e5a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8015e5c:	4b26      	ldr	r3, [pc, #152]	; (8015ef8 <_tx_timer_initialize+0xb4>)
 8015e5e:	2200      	movs	r2, #0
 8015e60:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8015e62:	4b26      	ldr	r3, [pc, #152]	; (8015efc <_tx_timer_initialize+0xb8>)
 8015e64:	2200      	movs	r2, #0
 8015e66:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8015e68:	2280      	movs	r2, #128	; 0x80
 8015e6a:	2100      	movs	r1, #0
 8015e6c:	4824      	ldr	r0, [pc, #144]	; (8015f00 <_tx_timer_initialize+0xbc>)
 8015e6e:	f013 fc43 	bl	80296f8 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8015e72:	4b24      	ldr	r3, [pc, #144]	; (8015f04 <_tx_timer_initialize+0xc0>)
 8015e74:	4a22      	ldr	r2, [pc, #136]	; (8015f00 <_tx_timer_initialize+0xbc>)
 8015e76:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8015e78:	4b23      	ldr	r3, [pc, #140]	; (8015f08 <_tx_timer_initialize+0xc4>)
 8015e7a:	4a21      	ldr	r2, [pc, #132]	; (8015f00 <_tx_timer_initialize+0xbc>)
 8015e7c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8015e7e:	4b23      	ldr	r3, [pc, #140]	; (8015f0c <_tx_timer_initialize+0xc8>)
 8015e80:	4a23      	ldr	r2, [pc, #140]	; (8015f10 <_tx_timer_initialize+0xcc>)
 8015e82:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8015e84:	4b21      	ldr	r3, [pc, #132]	; (8015f0c <_tx_timer_initialize+0xc8>)
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	3304      	adds	r3, #4
 8015e8a:	4a20      	ldr	r2, [pc, #128]	; (8015f0c <_tx_timer_initialize+0xc8>)
 8015e8c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8015e8e:	4b21      	ldr	r3, [pc, #132]	; (8015f14 <_tx_timer_initialize+0xd0>)
 8015e90:	4a21      	ldr	r2, [pc, #132]	; (8015f18 <_tx_timer_initialize+0xd4>)
 8015e92:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8015e94:	4b21      	ldr	r3, [pc, #132]	; (8015f1c <_tx_timer_initialize+0xd8>)
 8015e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015e9a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8015e9c:	4b20      	ldr	r3, [pc, #128]	; (8015f20 <_tx_timer_initialize+0xdc>)
 8015e9e:	2200      	movs	r2, #0
 8015ea0:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8015ea2:	4b1c      	ldr	r3, [pc, #112]	; (8015f14 <_tx_timer_initialize+0xd0>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	4a1d      	ldr	r2, [pc, #116]	; (8015f1c <_tx_timer_initialize+0xd8>)
 8015ea8:	6812      	ldr	r2, [r2, #0]
 8015eaa:	491d      	ldr	r1, [pc, #116]	; (8015f20 <_tx_timer_initialize+0xdc>)
 8015eac:	6809      	ldr	r1, [r1, #0]
 8015eae:	481c      	ldr	r0, [pc, #112]	; (8015f20 <_tx_timer_initialize+0xdc>)
 8015eb0:	6800      	ldr	r0, [r0, #0]
 8015eb2:	2400      	movs	r4, #0
 8015eb4:	9405      	str	r4, [sp, #20]
 8015eb6:	2400      	movs	r4, #0
 8015eb8:	9404      	str	r4, [sp, #16]
 8015eba:	9003      	str	r0, [sp, #12]
 8015ebc:	9102      	str	r1, [sp, #8]
 8015ebe:	9201      	str	r2, [sp, #4]
 8015ec0:	9300      	str	r3, [sp, #0]
 8015ec2:	4b18      	ldr	r3, [pc, #96]	; (8015f24 <_tx_timer_initialize+0xe0>)
 8015ec4:	4a18      	ldr	r2, [pc, #96]	; (8015f28 <_tx_timer_initialize+0xe4>)
 8015ec6:	4919      	ldr	r1, [pc, #100]	; (8015f2c <_tx_timer_initialize+0xe8>)
 8015ec8:	4819      	ldr	r0, [pc, #100]	; (8015f30 <_tx_timer_initialize+0xec>)
 8015eca:	f7ff fb3b 	bl	8015544 <_tx_thread_create>
 8015ece:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d1e5      	bne.n	8015ea2 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8015ed6:	4b17      	ldr	r3, [pc, #92]	; (8015f34 <_tx_timer_initialize+0xf0>)
 8015ed8:	2200      	movs	r2, #0
 8015eda:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8015edc:	4b16      	ldr	r3, [pc, #88]	; (8015f38 <_tx_timer_initialize+0xf4>)
 8015ede:	2200      	movs	r2, #0
 8015ee0:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8015ee2:	bf00      	nop
 8015ee4:	370c      	adds	r7, #12
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bd90      	pop	{r4, r7, pc}
 8015eea:	bf00      	nop
 8015eec:	20197f88 	.word	0x20197f88
 8015ef0:	201984e8 	.word	0x201984e8
 8015ef4:	20197f8c 	.word	0x20197f8c
 8015ef8:	2019801c 	.word	0x2019801c
 8015efc:	20198028 	.word	0x20198028
 8015f00:	20197f90 	.word	0x20197f90
 8015f04:	20198010 	.word	0x20198010
 8015f08:	20198018 	.word	0x20198018
 8015f0c:	20198014 	.word	0x20198014
 8015f10:	2019800c 	.word	0x2019800c
 8015f14:	201980dc 	.word	0x201980dc
 8015f18:	201980e8 	.word	0x201980e8
 8015f1c:	201980e0 	.word	0x201980e0
 8015f20:	201980e4 	.word	0x201980e4
 8015f24:	4154494d 	.word	0x4154494d
 8015f28:	08016071 	.word	0x08016071
 8015f2c:	0802aca4 	.word	0x0802aca4
 8015f30:	2019802c 	.word	0x2019802c
 8015f34:	20198020 	.word	0x20198020
 8015f38:	20198024 	.word	0x20198024

08015f3c <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8015f3c:	b480      	push	{r7}
 8015f3e:	b089      	sub	sp, #36	; 0x24
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8015f4a:	697b      	ldr	r3, [r7, #20]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d04a      	beq.n	8015fe6 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8015f50:	697b      	ldr	r3, [r7, #20]
 8015f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f56:	d046      	beq.n	8015fe6 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	699b      	ldr	r3, [r3, #24]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d142      	bne.n	8015fe6 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8015f60:	697b      	ldr	r3, [r7, #20]
 8015f62:	2b20      	cmp	r3, #32
 8015f64:	d902      	bls.n	8015f6c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8015f66:	231f      	movs	r3, #31
 8015f68:	61bb      	str	r3, [r7, #24]
 8015f6a:	e002      	b.n	8015f72 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8015f6c:	697b      	ldr	r3, [r7, #20]
 8015f6e:	3b01      	subs	r3, #1
 8015f70:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8015f72:	4b20      	ldr	r3, [pc, #128]	; (8015ff4 <_tx_timer_system_activate+0xb8>)
 8015f74:	681a      	ldr	r2, [r3, #0]
 8015f76:	69bb      	ldr	r3, [r7, #24]
 8015f78:	009b      	lsls	r3, r3, #2
 8015f7a:	4413      	add	r3, r2
 8015f7c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8015f7e:	4b1e      	ldr	r3, [pc, #120]	; (8015ff8 <_tx_timer_system_activate+0xbc>)
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	69fa      	ldr	r2, [r7, #28]
 8015f84:	429a      	cmp	r2, r3
 8015f86:	d30b      	bcc.n	8015fa0 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8015f88:	4b1b      	ldr	r3, [pc, #108]	; (8015ff8 <_tx_timer_system_activate+0xbc>)
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	69fa      	ldr	r2, [r7, #28]
 8015f8e:	1ad3      	subs	r3, r2, r3
 8015f90:	109b      	asrs	r3, r3, #2
 8015f92:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8015f94:	4b19      	ldr	r3, [pc, #100]	; (8015ffc <_tx_timer_system_activate+0xc0>)
 8015f96:	681a      	ldr	r2, [r3, #0]
 8015f98:	693b      	ldr	r3, [r7, #16]
 8015f9a:	009b      	lsls	r3, r3, #2
 8015f9c:	4413      	add	r3, r2
 8015f9e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8015fa0:	69fb      	ldr	r3, [r7, #28]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d109      	bne.n	8015fbc <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	687a      	ldr	r2, [r7, #4]
 8015fac:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	687a      	ldr	r2, [r7, #4]
 8015fb2:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8015fb4:	69fb      	ldr	r3, [r7, #28]
 8015fb6:	687a      	ldr	r2, [r7, #4]
 8015fb8:	601a      	str	r2, [r3, #0]
 8015fba:	e011      	b.n	8015fe0 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8015fbc:	69fb      	ldr	r3, [r7, #28]
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	695b      	ldr	r3, [r3, #20]
 8015fc6:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8015fc8:	68bb      	ldr	r3, [r7, #8]
 8015fca:	687a      	ldr	r2, [r7, #4]
 8015fcc:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	687a      	ldr	r2, [r7, #4]
 8015fd2:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	68fa      	ldr	r2, [r7, #12]
 8015fd8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	68ba      	ldr	r2, [r7, #8]
 8015fde:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	69fa      	ldr	r2, [r7, #28]
 8015fe4:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8015fe6:	bf00      	nop
 8015fe8:	3724      	adds	r7, #36	; 0x24
 8015fea:	46bd      	mov	sp, r7
 8015fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff0:	4770      	bx	lr
 8015ff2:	bf00      	nop
 8015ff4:	20198018 	.word	0x20198018
 8015ff8:	20198014 	.word	0x20198014
 8015ffc:	20198010 	.word	0x20198010

08016000 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8016000:	b480      	push	{r7}
 8016002:	b087      	sub	sp, #28
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	699b      	ldr	r3, [r3, #24]
 801600c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 801600e:	697b      	ldr	r3, [r7, #20]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d026      	beq.n	8016062 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	691b      	ldr	r3, [r3, #16]
 8016018:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 801601a:	687a      	ldr	r2, [r7, #4]
 801601c:	693b      	ldr	r3, [r7, #16]
 801601e:	429a      	cmp	r2, r3
 8016020:	d108      	bne.n	8016034 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8016022:	697b      	ldr	r3, [r7, #20]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	687a      	ldr	r2, [r7, #4]
 8016028:	429a      	cmp	r2, r3
 801602a:	d117      	bne.n	801605c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 801602c:	697b      	ldr	r3, [r7, #20]
 801602e:	2200      	movs	r2, #0
 8016030:	601a      	str	r2, [r3, #0]
 8016032:	e013      	b.n	801605c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	695b      	ldr	r3, [r3, #20]
 8016038:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801603a:	693b      	ldr	r3, [r7, #16]
 801603c:	68fa      	ldr	r2, [r7, #12]
 801603e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	693a      	ldr	r2, [r7, #16]
 8016044:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8016046:	697b      	ldr	r3, [r7, #20]
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	687a      	ldr	r2, [r7, #4]
 801604c:	429a      	cmp	r2, r3
 801604e:	d105      	bne.n	801605c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8016050:	693b      	ldr	r3, [r7, #16]
 8016052:	697a      	ldr	r2, [r7, #20]
 8016054:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8016056:	697b      	ldr	r3, [r7, #20]
 8016058:	693a      	ldr	r2, [r7, #16]
 801605a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	2200      	movs	r2, #0
 8016060:	619a      	str	r2, [r3, #24]
    }
}
 8016062:	bf00      	nop
 8016064:	371c      	adds	r7, #28
 8016066:	46bd      	mov	sp, r7
 8016068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801606c:	4770      	bx	lr
	...

08016070 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b098      	sub	sp, #96	; 0x60
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8016078:	2300      	movs	r3, #0
 801607a:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	4a73      	ldr	r2, [pc, #460]	; (801624c <_tx_timer_thread_entry+0x1dc>)
 8016080:	4293      	cmp	r3, r2
 8016082:	f040 80de 	bne.w	8016242 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016086:	f3ef 8310 	mrs	r3, PRIMASK
 801608a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 801608c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 801608e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8016090:	b672      	cpsid	i
    return(int_posture);
 8016092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8016094:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8016096:	4b6e      	ldr	r3, [pc, #440]	; (8016250 <_tx_timer_thread_entry+0x1e0>)
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d003      	beq.n	80160ac <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	f107 020c 	add.w	r2, r7, #12
 80160aa:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80160ac:	4b68      	ldr	r3, [pc, #416]	; (8016250 <_tx_timer_thread_entry+0x1e0>)
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	2200      	movs	r2, #0
 80160b2:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80160b4:	4b66      	ldr	r3, [pc, #408]	; (8016250 <_tx_timer_thread_entry+0x1e0>)
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	3304      	adds	r3, #4
 80160ba:	4a65      	ldr	r2, [pc, #404]	; (8016250 <_tx_timer_thread_entry+0x1e0>)
 80160bc:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80160be:	4b64      	ldr	r3, [pc, #400]	; (8016250 <_tx_timer_thread_entry+0x1e0>)
 80160c0:	681a      	ldr	r2, [r3, #0]
 80160c2:	4b64      	ldr	r3, [pc, #400]	; (8016254 <_tx_timer_thread_entry+0x1e4>)
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	429a      	cmp	r2, r3
 80160c8:	d103      	bne.n	80160d2 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80160ca:	4b63      	ldr	r3, [pc, #396]	; (8016258 <_tx_timer_thread_entry+0x1e8>)
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	4a60      	ldr	r2, [pc, #384]	; (8016250 <_tx_timer_thread_entry+0x1e0>)
 80160d0:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80160d2:	4b62      	ldr	r3, [pc, #392]	; (801625c <_tx_timer_thread_entry+0x1ec>)
 80160d4:	2200      	movs	r2, #0
 80160d6:	601a      	str	r2, [r3, #0]
 80160d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80160da:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80160dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160de:	f383 8810 	msr	PRIMASK, r3
}
 80160e2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80160e4:	f3ef 8310 	mrs	r3, PRIMASK
 80160e8:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80160ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80160ec:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80160ee:	b672      	cpsid	i
    return(int_posture);
 80160f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80160f2:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80160f4:	e07f      	b.n	80161f6 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	691b      	ldr	r3, [r3, #16]
 80160fe:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8016100:	2300      	movs	r3, #0
 8016102:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8016104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016108:	429a      	cmp	r2, r3
 801610a:	d102      	bne.n	8016112 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 801610c:	2300      	movs	r3, #0
 801610e:	60fb      	str	r3, [r7, #12]
 8016110:	e00e      	b.n	8016130 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8016112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016114:	695b      	ldr	r3, [r3, #20]
 8016116:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8016118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801611a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801611c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 801611e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016120:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016122:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8016124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016126:	f107 020c 	add.w	r2, r7, #12
 801612a:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 801612c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801612e:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8016130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	2b20      	cmp	r3, #32
 8016136:	d911      	bls.n	801615c <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8016138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8016140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016142:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8016144:	2300      	movs	r3, #0
 8016146:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8016148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801614a:	f107 0208 	add.w	r2, r7, #8
 801614e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8016150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016152:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016154:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8016156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016158:	60bb      	str	r3, [r7, #8]
 801615a:	e01a      	b.n	8016192 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 801615c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801615e:	689b      	ldr	r3, [r3, #8]
 8016160:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8016162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016164:	68db      	ldr	r3, [r3, #12]
 8016166:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8016168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801616a:	685a      	ldr	r2, [r3, #4]
 801616c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801616e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8016170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d009      	beq.n	801618c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8016178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801617a:	f107 0208 	add.w	r2, r7, #8
 801617e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8016180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016182:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016184:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8016186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016188:	60bb      	str	r3, [r7, #8]
 801618a:	e002      	b.n	8016192 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 801618c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801618e:	2200      	movs	r2, #0
 8016190:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8016192:	4a33      	ldr	r2, [pc, #204]	; (8016260 <_tx_timer_thread_entry+0x1f0>)
 8016194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016196:	6013      	str	r3, [r2, #0]
 8016198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801619a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801619e:	f383 8810 	msr	PRIMASK, r3
}
 80161a2:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80161a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d002      	beq.n	80161b0 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 80161aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80161ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80161ae:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80161b0:	f3ef 8310 	mrs	r3, PRIMASK
 80161b4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80161b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80161b8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80161ba:	b672      	cpsid	i
    return(int_posture);
 80161bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80161be:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80161c0:	4b27      	ldr	r3, [pc, #156]	; (8016260 <_tx_timer_thread_entry+0x1f0>)
 80161c2:	2200      	movs	r2, #0
 80161c4:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80161c6:	68bb      	ldr	r3, [r7, #8]
 80161c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80161ca:	429a      	cmp	r2, r3
 80161cc:	d105      	bne.n	80161da <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80161ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80161d0:	2200      	movs	r2, #0
 80161d2:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80161d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80161d6:	f7ff feb1 	bl	8015f3c <_tx_timer_system_activate>
 80161da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80161dc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80161de:	69bb      	ldr	r3, [r7, #24]
 80161e0:	f383 8810 	msr	PRIMASK, r3
}
 80161e4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80161e6:	f3ef 8310 	mrs	r3, PRIMASK
 80161ea:	623b      	str	r3, [r7, #32]
    return(posture);
 80161ec:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80161ee:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80161f0:	b672      	cpsid	i
    return(int_posture);
 80161f2:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80161f4:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	f47f af7c 	bne.w	80160f6 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80161fe:	4b17      	ldr	r3, [pc, #92]	; (801625c <_tx_timer_thread_entry+0x1ec>)
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d116      	bne.n	8016234 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8016206:	4b17      	ldr	r3, [pc, #92]	; (8016264 <_tx_timer_thread_entry+0x1f4>)
 8016208:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801620a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801620c:	2203      	movs	r2, #3
 801620e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8016210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016212:	2201      	movs	r2, #1
 8016214:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8016216:	4b14      	ldr	r3, [pc, #80]	; (8016268 <_tx_timer_thread_entry+0x1f8>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	3301      	adds	r3, #1
 801621c:	4a12      	ldr	r2, [pc, #72]	; (8016268 <_tx_timer_thread_entry+0x1f8>)
 801621e:	6013      	str	r3, [r2, #0]
 8016220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016222:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016224:	697b      	ldr	r3, [r7, #20]
 8016226:	f383 8810 	msr	PRIMASK, r3
}
 801622a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801622c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801622e:	f7ff fc41 	bl	8015ab4 <_tx_thread_system_suspend>
 8016232:	e728      	b.n	8016086 <_tx_timer_thread_entry+0x16>
 8016234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016236:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016238:	693b      	ldr	r3, [r7, #16]
 801623a:	f383 8810 	msr	PRIMASK, r3
}
 801623e:	bf00      	nop
            TX_DISABLE
 8016240:	e721      	b.n	8016086 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8016242:	bf00      	nop
 8016244:	3760      	adds	r7, #96	; 0x60
 8016246:	46bd      	mov	sp, r7
 8016248:	bd80      	pop	{r7, pc}
 801624a:	bf00      	nop
 801624c:	4154494d 	.word	0x4154494d
 8016250:	20198018 	.word	0x20198018
 8016254:	20198014 	.word	0x20198014
 8016258:	20198010 	.word	0x20198010
 801625c:	2019801c 	.word	0x2019801c
 8016260:	20198028 	.word	0x20198028
 8016264:	2019802c 	.word	0x2019802c
 8016268:	20197f7c 	.word	0x20197f7c

0801626c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 801626c:	b580      	push	{r7, lr}
 801626e:	b08a      	sub	sp, #40	; 0x28
 8016270:	af00      	add	r7, sp, #0
 8016272:	60f8      	str	r0, [r7, #12]
 8016274:	60b9      	str	r1, [r7, #8]
 8016276:	607a      	str	r2, [r7, #4]
 8016278:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801627a:	2300      	movs	r3, #0
 801627c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d102      	bne.n	801628a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8016284:	2302      	movs	r3, #2
 8016286:	627b      	str	r3, [r7, #36]	; 0x24
 8016288:	e029      	b.n	80162de <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	4a2d      	ldr	r2, [pc, #180]	; (8016344 <_txe_byte_allocate+0xd8>)
 8016290:	4293      	cmp	r3, r2
 8016292:	d002      	beq.n	801629a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8016294:	2302      	movs	r3, #2
 8016296:	627b      	str	r3, [r7, #36]	; 0x24
 8016298:	e021      	b.n	80162de <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d102      	bne.n	80162a6 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80162a0:	2303      	movs	r3, #3
 80162a2:	627b      	str	r3, [r7, #36]	; 0x24
 80162a4:	e01b      	b.n	80162de <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d102      	bne.n	80162b2 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80162ac:	2305      	movs	r3, #5
 80162ae:	627b      	str	r3, [r7, #36]	; 0x24
 80162b0:	e015      	b.n	80162de <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	69db      	ldr	r3, [r3, #28]
 80162b6:	687a      	ldr	r2, [r7, #4]
 80162b8:	429a      	cmp	r2, r3
 80162ba:	d902      	bls.n	80162c2 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80162bc:	2305      	movs	r3, #5
 80162be:	627b      	str	r3, [r7, #36]	; 0x24
 80162c0:	e00d      	b.n	80162de <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80162c2:	683b      	ldr	r3, [r7, #0]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d00a      	beq.n	80162de <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80162c8:	f3ef 8305 	mrs	r3, IPSR
 80162cc:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80162ce:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80162d0:	4b1d      	ldr	r3, [pc, #116]	; (8016348 <_txe_byte_allocate+0xdc>)
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	4313      	orrs	r3, r2
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d001      	beq.n	80162de <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80162da:	2304      	movs	r3, #4
 80162dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 80162de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d108      	bne.n	80162f6 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80162e4:	4b19      	ldr	r3, [pc, #100]	; (801634c <_txe_byte_allocate+0xe0>)
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80162ea:	6a3b      	ldr	r3, [r7, #32]
 80162ec:	4a18      	ldr	r2, [pc, #96]	; (8016350 <_txe_byte_allocate+0xe4>)
 80162ee:	4293      	cmp	r3, r2
 80162f0:	d101      	bne.n	80162f6 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80162f2:	2313      	movs	r3, #19
 80162f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80162f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d114      	bne.n	8016326 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80162fc:	f3ef 8305 	mrs	r3, IPSR
 8016300:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8016302:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016304:	4b10      	ldr	r3, [pc, #64]	; (8016348 <_txe_byte_allocate+0xdc>)
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	4313      	orrs	r3, r2
 801630a:	2b00      	cmp	r3, #0
 801630c:	d00b      	beq.n	8016326 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801630e:	f3ef 8305 	mrs	r3, IPSR
 8016312:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016314:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8016316:	4b0c      	ldr	r3, [pc, #48]	; (8016348 <_txe_byte_allocate+0xdc>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	4313      	orrs	r3, r2
 801631c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016320:	d201      	bcs.n	8016326 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8016322:	2313      	movs	r3, #19
 8016324:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016328:	2b00      	cmp	r3, #0
 801632a:	d106      	bne.n	801633a <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 801632c:	683b      	ldr	r3, [r7, #0]
 801632e:	687a      	ldr	r2, [r7, #4]
 8016330:	68b9      	ldr	r1, [r7, #8]
 8016332:	68f8      	ldr	r0, [r7, #12]
 8016334:	f7fe f80e 	bl	8014354 <_tx_byte_allocate>
 8016338:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 801633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801633c:	4618      	mov	r0, r3
 801633e:	3728      	adds	r7, #40	; 0x28
 8016340:	46bd      	mov	sp, r7
 8016342:	bd80      	pop	{r7, pc}
 8016344:	42595445 	.word	0x42595445
 8016348:	20000054 	.word	0x20000054
 801634c:	20197ee4 	.word	0x20197ee4
 8016350:	2019802c 	.word	0x2019802c

08016354 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b092      	sub	sp, #72	; 0x48
 8016358:	af00      	add	r7, sp, #0
 801635a:	60f8      	str	r0, [r7, #12]
 801635c:	60b9      	str	r1, [r7, #8]
 801635e:	607a      	str	r2, [r7, #4]
 8016360:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016362:	2300      	movs	r3, #0
 8016364:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d102      	bne.n	8016372 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801636c:	2302      	movs	r3, #2
 801636e:	647b      	str	r3, [r7, #68]	; 0x44
 8016370:	e075      	b.n	801645e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8016372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016374:	2b34      	cmp	r3, #52	; 0x34
 8016376:	d002      	beq.n	801637e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8016378:	2302      	movs	r3, #2
 801637a:	647b      	str	r3, [r7, #68]	; 0x44
 801637c:	e06f      	b.n	801645e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801637e:	f3ef 8310 	mrs	r3, PRIMASK
 8016382:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8016384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8016386:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8016388:	b672      	cpsid	i
    return(int_posture);
 801638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801638c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801638e:	4b3b      	ldr	r3, [pc, #236]	; (801647c <_txe_byte_pool_create+0x128>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	3301      	adds	r3, #1
 8016394:	4a39      	ldr	r2, [pc, #228]	; (801647c <_txe_byte_pool_create+0x128>)
 8016396:	6013      	str	r3, [r2, #0]
 8016398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801639a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801639e:	f383 8810 	msr	PRIMASK, r3
}
 80163a2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80163a4:	4b36      	ldr	r3, [pc, #216]	; (8016480 <_txe_byte_pool_create+0x12c>)
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80163aa:	2300      	movs	r3, #0
 80163ac:	643b      	str	r3, [r7, #64]	; 0x40
 80163ae:	e009      	b.n	80163c4 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80163b0:	68fa      	ldr	r2, [r7, #12]
 80163b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163b4:	429a      	cmp	r2, r3
 80163b6:	d00b      	beq.n	80163d0 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80163b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80163be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163c0:	3301      	adds	r3, #1
 80163c2:	643b      	str	r3, [r7, #64]	; 0x40
 80163c4:	4b2f      	ldr	r3, [pc, #188]	; (8016484 <_txe_byte_pool_create+0x130>)
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80163ca:	429a      	cmp	r2, r3
 80163cc:	d3f0      	bcc.n	80163b0 <_txe_byte_pool_create+0x5c>
 80163ce:	e000      	b.n	80163d2 <_txe_byte_pool_create+0x7e>
                break;
 80163d0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80163d2:	f3ef 8310 	mrs	r3, PRIMASK
 80163d6:	623b      	str	r3, [r7, #32]
    return(posture);
 80163d8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80163da:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80163dc:	b672      	cpsid	i
    return(int_posture);
 80163de:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80163e0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80163e2:	4b26      	ldr	r3, [pc, #152]	; (801647c <_txe_byte_pool_create+0x128>)
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	3b01      	subs	r3, #1
 80163e8:	4a24      	ldr	r2, [pc, #144]	; (801647c <_txe_byte_pool_create+0x128>)
 80163ea:	6013      	str	r3, [r2, #0]
 80163ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80163f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163f2:	f383 8810 	msr	PRIMASK, r3
}
 80163f6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80163f8:	f7ff fa22 	bl	8015840 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80163fc:	68fa      	ldr	r2, [r7, #12]
 80163fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016400:	429a      	cmp	r2, r3
 8016402:	d102      	bne.n	801640a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8016404:	2302      	movs	r3, #2
 8016406:	647b      	str	r3, [r7, #68]	; 0x44
 8016408:	e029      	b.n	801645e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d102      	bne.n	8016416 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8016410:	2303      	movs	r3, #3
 8016412:	647b      	str	r3, [r7, #68]	; 0x44
 8016414:	e023      	b.n	801645e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8016416:	683b      	ldr	r3, [r7, #0]
 8016418:	2b63      	cmp	r3, #99	; 0x63
 801641a:	d802      	bhi.n	8016422 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 801641c:	2305      	movs	r3, #5
 801641e:	647b      	str	r3, [r7, #68]	; 0x44
 8016420:	e01d      	b.n	801645e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8016422:	4b19      	ldr	r3, [pc, #100]	; (8016488 <_txe_byte_pool_create+0x134>)
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8016428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801642a:	4a18      	ldr	r2, [pc, #96]	; (801648c <_txe_byte_pool_create+0x138>)
 801642c:	4293      	cmp	r3, r2
 801642e:	d101      	bne.n	8016434 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8016430:	2313      	movs	r3, #19
 8016432:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016434:	f3ef 8305 	mrs	r3, IPSR
 8016438:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801643a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801643c:	4b14      	ldr	r3, [pc, #80]	; (8016490 <_txe_byte_pool_create+0x13c>)
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	4313      	orrs	r3, r2
 8016442:	2b00      	cmp	r3, #0
 8016444:	d00b      	beq.n	801645e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016446:	f3ef 8305 	mrs	r3, IPSR
 801644a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801644c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801644e:	4b10      	ldr	r3, [pc, #64]	; (8016490 <_txe_byte_pool_create+0x13c>)
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	4313      	orrs	r3, r2
 8016454:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016458:	d201      	bcs.n	801645e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801645a:	2313      	movs	r3, #19
 801645c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801645e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016460:	2b00      	cmp	r3, #0
 8016462:	d106      	bne.n	8016472 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8016464:	683b      	ldr	r3, [r7, #0]
 8016466:	687a      	ldr	r2, [r7, #4]
 8016468:	68b9      	ldr	r1, [r7, #8]
 801646a:	68f8      	ldr	r0, [r7, #12]
 801646c:	f7fe f8b4 	bl	80145d8 <_tx_byte_pool_create>
 8016470:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8016472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8016474:	4618      	mov	r0, r3
 8016476:	3748      	adds	r7, #72	; 0x48
 8016478:	46bd      	mov	sp, r7
 801647a:	bd80      	pop	{r7, pc}
 801647c:	20197f7c 	.word	0x20197f7c
 8016480:	20197ed4 	.word	0x20197ed4
 8016484:	20197ed8 	.word	0x20197ed8
 8016488:	20197ee4 	.word	0x20197ee4
 801648c:	2019802c 	.word	0x2019802c
 8016490:	20000054 	.word	0x20000054

08016494 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b094      	sub	sp, #80	; 0x50
 8016498:	af02      	add	r7, sp, #8
 801649a:	60f8      	str	r0, [r7, #12]
 801649c:	60b9      	str	r1, [r7, #8]
 801649e:	607a      	str	r2, [r7, #4]
 80164a0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80164a2:	2300      	movs	r3, #0
 80164a4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d102      	bne.n	80164b2 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80164ac:	2309      	movs	r3, #9
 80164ae:	647b      	str	r3, [r7, #68]	; 0x44
 80164b0:	e083      	b.n	80165ba <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 80164b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80164b4:	2b38      	cmp	r3, #56	; 0x38
 80164b6:	d002      	beq.n	80164be <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80164b8:	2309      	movs	r3, #9
 80164ba:	647b      	str	r3, [r7, #68]	; 0x44
 80164bc:	e07d      	b.n	80165ba <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80164be:	f3ef 8310 	mrs	r3, PRIMASK
 80164c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80164c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80164c6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80164c8:	b672      	cpsid	i
    return(int_posture);
 80164ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80164cc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80164ce:	4b43      	ldr	r3, [pc, #268]	; (80165dc <_txe_queue_create+0x148>)
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	3301      	adds	r3, #1
 80164d4:	4a41      	ldr	r2, [pc, #260]	; (80165dc <_txe_queue_create+0x148>)
 80164d6:	6013      	str	r3, [r2, #0]
 80164d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164da:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80164dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164de:	f383 8810 	msr	PRIMASK, r3
}
 80164e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 80164e4:	4b3e      	ldr	r3, [pc, #248]	; (80165e0 <_txe_queue_create+0x14c>)
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 80164ea:	2300      	movs	r3, #0
 80164ec:	643b      	str	r3, [r7, #64]	; 0x40
 80164ee:	e009      	b.n	8016504 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 80164f0:	68fa      	ldr	r2, [r7, #12]
 80164f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80164f4:	429a      	cmp	r2, r3
 80164f6:	d00b      	beq.n	8016510 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 80164f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80164fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 80164fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016500:	3301      	adds	r3, #1
 8016502:	643b      	str	r3, [r7, #64]	; 0x40
 8016504:	4b37      	ldr	r3, [pc, #220]	; (80165e4 <_txe_queue_create+0x150>)
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801650a:	429a      	cmp	r2, r3
 801650c:	d3f0      	bcc.n	80164f0 <_txe_queue_create+0x5c>
 801650e:	e000      	b.n	8016512 <_txe_queue_create+0x7e>
                break;
 8016510:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016512:	f3ef 8310 	mrs	r3, PRIMASK
 8016516:	623b      	str	r3, [r7, #32]
    return(posture);
 8016518:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801651a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801651c:	b672      	cpsid	i
    return(int_posture);
 801651e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8016520:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8016522:	4b2e      	ldr	r3, [pc, #184]	; (80165dc <_txe_queue_create+0x148>)
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	3b01      	subs	r3, #1
 8016528:	4a2c      	ldr	r2, [pc, #176]	; (80165dc <_txe_queue_create+0x148>)
 801652a:	6013      	str	r3, [r2, #0]
 801652c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801652e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016532:	f383 8810 	msr	PRIMASK, r3
}
 8016536:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8016538:	f7ff f982 	bl	8015840 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 801653c:	68fa      	ldr	r2, [r7, #12]
 801653e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016540:	429a      	cmp	r2, r3
 8016542:	d102      	bne.n	801654a <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 8016544:	2309      	movs	r3, #9
 8016546:	647b      	str	r3, [r7, #68]	; 0x44
 8016548:	e037      	b.n	80165ba <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 801654a:	683b      	ldr	r3, [r7, #0]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d102      	bne.n	8016556 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 8016550:	2303      	movs	r3, #3
 8016552:	647b      	str	r3, [r7, #68]	; 0x44
 8016554:	e031      	b.n	80165ba <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d102      	bne.n	8016562 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 801655c:	2305      	movs	r3, #5
 801655e:	647b      	str	r3, [r7, #68]	; 0x44
 8016560:	e02b      	b.n	80165ba <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	2b10      	cmp	r3, #16
 8016566:	d902      	bls.n	801656e <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8016568:	2305      	movs	r3, #5
 801656a:	647b      	str	r3, [r7, #68]	; 0x44
 801656c:	e025      	b.n	80165ba <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 801656e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016570:	089b      	lsrs	r3, r3, #2
 8016572:	687a      	ldr	r2, [r7, #4]
 8016574:	429a      	cmp	r2, r3
 8016576:	d902      	bls.n	801657e <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 8016578:	2305      	movs	r3, #5
 801657a:	647b      	str	r3, [r7, #68]	; 0x44
 801657c:	e01d      	b.n	80165ba <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801657e:	4b1a      	ldr	r3, [pc, #104]	; (80165e8 <_txe_queue_create+0x154>)
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8016584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016586:	4a19      	ldr	r2, [pc, #100]	; (80165ec <_txe_queue_create+0x158>)
 8016588:	4293      	cmp	r3, r2
 801658a:	d101      	bne.n	8016590 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801658c:	2313      	movs	r3, #19
 801658e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016590:	f3ef 8305 	mrs	r3, IPSR
 8016594:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8016596:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016598:	4b15      	ldr	r3, [pc, #84]	; (80165f0 <_txe_queue_create+0x15c>)
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	4313      	orrs	r3, r2
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d00b      	beq.n	80165ba <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80165a2:	f3ef 8305 	mrs	r3, IPSR
 80165a6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80165a8:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80165aa:	4b11      	ldr	r3, [pc, #68]	; (80165f0 <_txe_queue_create+0x15c>)
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	4313      	orrs	r3, r2
 80165b0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80165b4:	d201      	bcs.n	80165ba <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80165b6:	2313      	movs	r3, #19
 80165b8:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80165ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d108      	bne.n	80165d2 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 80165c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165c2:	9300      	str	r3, [sp, #0]
 80165c4:	683b      	ldr	r3, [r7, #0]
 80165c6:	687a      	ldr	r2, [r7, #4]
 80165c8:	68b9      	ldr	r1, [r7, #8]
 80165ca:	68f8      	ldr	r0, [r7, #12]
 80165cc:	f7fe fa9a 	bl	8014b04 <_tx_queue_create>
 80165d0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80165d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80165d4:	4618      	mov	r0, r3
 80165d6:	3748      	adds	r7, #72	; 0x48
 80165d8:	46bd      	mov	sp, r7
 80165da:	bd80      	pop	{r7, pc}
 80165dc:	20197f7c 	.word	0x20197f7c
 80165e0:	20197eb4 	.word	0x20197eb4
 80165e4:	20197eb8 	.word	0x20197eb8
 80165e8:	20197ee4 	.word	0x20197ee4
 80165ec:	2019802c 	.word	0x2019802c
 80165f0:	20000054 	.word	0x20000054

080165f4 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b088      	sub	sp, #32
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	60f8      	str	r0, [r7, #12]
 80165fc:	60b9      	str	r1, [r7, #8]
 80165fe:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016600:	2300      	movs	r3, #0
 8016602:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d102      	bne.n	8016610 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801660a:	2309      	movs	r3, #9
 801660c:	61fb      	str	r3, [r7, #28]
 801660e:	e025      	b.n	801665c <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	4a18      	ldr	r2, [pc, #96]	; (8016678 <_txe_queue_receive+0x84>)
 8016616:	4293      	cmp	r3, r2
 8016618:	d002      	beq.n	8016620 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801661a:	2309      	movs	r3, #9
 801661c:	61fb      	str	r3, [r7, #28]
 801661e:	e01d      	b.n	801665c <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 8016620:	68bb      	ldr	r3, [r7, #8]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d102      	bne.n	801662c <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8016626:	2303      	movs	r3, #3
 8016628:	61fb      	str	r3, [r7, #28]
 801662a:	e017      	b.n	801665c <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d014      	beq.n	801665c <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016632:	f3ef 8305 	mrs	r3, IPSR
 8016636:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016638:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801663a:	4b10      	ldr	r3, [pc, #64]	; (801667c <_txe_queue_receive+0x88>)
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	4313      	orrs	r3, r2
 8016640:	2b00      	cmp	r3, #0
 8016642:	d002      	beq.n	801664a <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8016644:	2304      	movs	r3, #4
 8016646:	61fb      	str	r3, [r7, #28]
 8016648:	e008      	b.n	801665c <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801664a:	4b0d      	ldr	r3, [pc, #52]	; (8016680 <_txe_queue_receive+0x8c>)
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8016650:	69bb      	ldr	r3, [r7, #24]
 8016652:	4a0c      	ldr	r2, [pc, #48]	; (8016684 <_txe_queue_receive+0x90>)
 8016654:	4293      	cmp	r3, r2
 8016656:	d101      	bne.n	801665c <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8016658:	2304      	movs	r3, #4
 801665a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801665c:	69fb      	ldr	r3, [r7, #28]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d105      	bne.n	801666e <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 8016662:	687a      	ldr	r2, [r7, #4]
 8016664:	68b9      	ldr	r1, [r7, #8]
 8016666:	68f8      	ldr	r0, [r7, #12]
 8016668:	f7fe fac0 	bl	8014bec <_tx_queue_receive>
 801666c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 801666e:	69fb      	ldr	r3, [r7, #28]
}
 8016670:	4618      	mov	r0, r3
 8016672:	3720      	adds	r7, #32
 8016674:	46bd      	mov	sp, r7
 8016676:	bd80      	pop	{r7, pc}
 8016678:	51554555 	.word	0x51554555
 801667c:	20000054 	.word	0x20000054
 8016680:	20197ee4 	.word	0x20197ee4
 8016684:	2019802c 	.word	0x2019802c

08016688 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b088      	sub	sp, #32
 801668c:	af00      	add	r7, sp, #0
 801668e:	60f8      	str	r0, [r7, #12]
 8016690:	60b9      	str	r1, [r7, #8]
 8016692:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016694:	2300      	movs	r3, #0
 8016696:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d102      	bne.n	80166a4 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801669e:	2309      	movs	r3, #9
 80166a0:	61fb      	str	r3, [r7, #28]
 80166a2:	e025      	b.n	80166f0 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	4a18      	ldr	r2, [pc, #96]	; (801670c <_txe_queue_send+0x84>)
 80166aa:	4293      	cmp	r3, r2
 80166ac:	d002      	beq.n	80166b4 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80166ae:	2309      	movs	r3, #9
 80166b0:	61fb      	str	r3, [r7, #28]
 80166b2:	e01d      	b.n	80166f0 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 80166b4:	68bb      	ldr	r3, [r7, #8]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d102      	bne.n	80166c0 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80166ba:	2303      	movs	r3, #3
 80166bc:	61fb      	str	r3, [r7, #28]
 80166be:	e017      	b.n	80166f0 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d014      	beq.n	80166f0 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80166c6:	f3ef 8305 	mrs	r3, IPSR
 80166ca:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80166cc:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80166ce:	4b10      	ldr	r3, [pc, #64]	; (8016710 <_txe_queue_send+0x88>)
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	4313      	orrs	r3, r2
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d002      	beq.n	80166de <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80166d8:	2304      	movs	r3, #4
 80166da:	61fb      	str	r3, [r7, #28]
 80166dc:	e008      	b.n	80166f0 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80166de:	4b0d      	ldr	r3, [pc, #52]	; (8016714 <_txe_queue_send+0x8c>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80166e4:	69bb      	ldr	r3, [r7, #24]
 80166e6:	4a0c      	ldr	r2, [pc, #48]	; (8016718 <_txe_queue_send+0x90>)
 80166e8:	4293      	cmp	r3, r2
 80166ea:	d101      	bne.n	80166f0 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80166ec:	2304      	movs	r3, #4
 80166ee:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80166f0:	69fb      	ldr	r3, [r7, #28]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d105      	bne.n	8016702 <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 80166f6:	687a      	ldr	r2, [r7, #4]
 80166f8:	68b9      	ldr	r1, [r7, #8]
 80166fa:	68f8      	ldr	r0, [r7, #12]
 80166fc:	f7fe fc3e 	bl	8014f7c <_tx_queue_send>
 8016700:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8016702:	69fb      	ldr	r3, [r7, #28]
}
 8016704:	4618      	mov	r0, r3
 8016706:	3720      	adds	r7, #32
 8016708:	46bd      	mov	sp, r7
 801670a:	bd80      	pop	{r7, pc}
 801670c:	51554555 	.word	0x51554555
 8016710:	20000054 	.word	0x20000054
 8016714:	20197ee4 	.word	0x20197ee4
 8016718:	2019802c 	.word	0x2019802c

0801671c <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b092      	sub	sp, #72	; 0x48
 8016720:	af00      	add	r7, sp, #0
 8016722:	60f8      	str	r0, [r7, #12]
 8016724:	60b9      	str	r1, [r7, #8]
 8016726:	607a      	str	r2, [r7, #4]
 8016728:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801672a:	2300      	movs	r3, #0
 801672c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d102      	bne.n	801673a <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016734:	230c      	movs	r3, #12
 8016736:	647b      	str	r3, [r7, #68]	; 0x44
 8016738:	e054      	b.n	80167e4 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 801673a:	683b      	ldr	r3, [r7, #0]
 801673c:	2b1c      	cmp	r3, #28
 801673e:	d002      	beq.n	8016746 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016740:	230c      	movs	r3, #12
 8016742:	647b      	str	r3, [r7, #68]	; 0x44
 8016744:	e04e      	b.n	80167e4 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016746:	f3ef 8310 	mrs	r3, PRIMASK
 801674a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801674e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8016750:	b672      	cpsid	i
    return(int_posture);
 8016752:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8016754:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8016756:	4b36      	ldr	r3, [pc, #216]	; (8016830 <_txe_semaphore_create+0x114>)
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	3301      	adds	r3, #1
 801675c:	4a34      	ldr	r2, [pc, #208]	; (8016830 <_txe_semaphore_create+0x114>)
 801675e:	6013      	str	r3, [r2, #0]
 8016760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016762:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016766:	f383 8810 	msr	PRIMASK, r3
}
 801676a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 801676c:	4b31      	ldr	r3, [pc, #196]	; (8016834 <_txe_semaphore_create+0x118>)
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8016772:	2300      	movs	r3, #0
 8016774:	643b      	str	r3, [r7, #64]	; 0x40
 8016776:	e009      	b.n	801678c <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8016778:	68fa      	ldr	r2, [r7, #12]
 801677a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801677c:	429a      	cmp	r2, r3
 801677e:	d00b      	beq.n	8016798 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8016780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016782:	695b      	ldr	r3, [r3, #20]
 8016784:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8016786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016788:	3301      	adds	r3, #1
 801678a:	643b      	str	r3, [r7, #64]	; 0x40
 801678c:	4b2a      	ldr	r3, [pc, #168]	; (8016838 <_txe_semaphore_create+0x11c>)
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016792:	429a      	cmp	r2, r3
 8016794:	d3f0      	bcc.n	8016778 <_txe_semaphore_create+0x5c>
 8016796:	e000      	b.n	801679a <_txe_semaphore_create+0x7e>
                break;
 8016798:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801679a:	f3ef 8310 	mrs	r3, PRIMASK
 801679e:	623b      	str	r3, [r7, #32]
    return(posture);
 80167a0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80167a2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80167a4:	b672      	cpsid	i
    return(int_posture);
 80167a6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80167a8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80167aa:	4b21      	ldr	r3, [pc, #132]	; (8016830 <_txe_semaphore_create+0x114>)
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	3b01      	subs	r3, #1
 80167b0:	4a1f      	ldr	r2, [pc, #124]	; (8016830 <_txe_semaphore_create+0x114>)
 80167b2:	6013      	str	r3, [r2, #0]
 80167b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167b6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80167b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ba:	f383 8810 	msr	PRIMASK, r3
}
 80167be:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80167c0:	f7ff f83e 	bl	8015840 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 80167c4:	68fa      	ldr	r2, [r7, #12]
 80167c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80167c8:	429a      	cmp	r2, r3
 80167ca:	d102      	bne.n	80167d2 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 80167cc:	230c      	movs	r3, #12
 80167ce:	647b      	str	r3, [r7, #68]	; 0x44
 80167d0:	e008      	b.n	80167e4 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80167d2:	4b1a      	ldr	r3, [pc, #104]	; (801683c <_txe_semaphore_create+0x120>)
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80167d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167da:	4a19      	ldr	r2, [pc, #100]	; (8016840 <_txe_semaphore_create+0x124>)
 80167dc:	4293      	cmp	r3, r2
 80167de:	d101      	bne.n	80167e4 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80167e0:	2313      	movs	r3, #19
 80167e2:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80167e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d114      	bne.n	8016814 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80167ea:	f3ef 8305 	mrs	r3, IPSR
 80167ee:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80167f0:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80167f2:	4b14      	ldr	r3, [pc, #80]	; (8016844 <_txe_semaphore_create+0x128>)
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	4313      	orrs	r3, r2
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d00b      	beq.n	8016814 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80167fc:	f3ef 8305 	mrs	r3, IPSR
 8016800:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016802:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8016804:	4b0f      	ldr	r3, [pc, #60]	; (8016844 <_txe_semaphore_create+0x128>)
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	4313      	orrs	r3, r2
 801680a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801680e:	d201      	bcs.n	8016814 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8016810:	2313      	movs	r3, #19
 8016812:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016816:	2b00      	cmp	r3, #0
 8016818:	d105      	bne.n	8016826 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 801681a:	687a      	ldr	r2, [r7, #4]
 801681c:	68b9      	ldr	r1, [r7, #8]
 801681e:	68f8      	ldr	r0, [r7, #12]
 8016820:	f7fe fd54 	bl	80152cc <_tx_semaphore_create>
 8016824:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8016826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8016828:	4618      	mov	r0, r3
 801682a:	3748      	adds	r7, #72	; 0x48
 801682c:	46bd      	mov	sp, r7
 801682e:	bd80      	pop	{r7, pc}
 8016830:	20197f7c 	.word	0x20197f7c
 8016834:	20197eac 	.word	0x20197eac
 8016838:	20197eb0 	.word	0x20197eb0
 801683c:	20197ee4 	.word	0x20197ee4
 8016840:	2019802c 	.word	0x2019802c
 8016844:	20000054 	.word	0x20000054

08016848 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8016848:	b580      	push	{r7, lr}
 801684a:	b086      	sub	sp, #24
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
 8016850:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016852:	2300      	movs	r3, #0
 8016854:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d102      	bne.n	8016862 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801685c:	230c      	movs	r3, #12
 801685e:	617b      	str	r3, [r7, #20]
 8016860:	e01f      	b.n	80168a2 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	4a15      	ldr	r2, [pc, #84]	; (80168bc <_txe_semaphore_get+0x74>)
 8016868:	4293      	cmp	r3, r2
 801686a:	d002      	beq.n	8016872 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801686c:	230c      	movs	r3, #12
 801686e:	617b      	str	r3, [r7, #20]
 8016870:	e017      	b.n	80168a2 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8016872:	683b      	ldr	r3, [r7, #0]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d014      	beq.n	80168a2 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016878:	f3ef 8305 	mrs	r3, IPSR
 801687c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801687e:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016880:	4b0f      	ldr	r3, [pc, #60]	; (80168c0 <_txe_semaphore_get+0x78>)
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	4313      	orrs	r3, r2
 8016886:	2b00      	cmp	r3, #0
 8016888:	d002      	beq.n	8016890 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801688a:	2304      	movs	r3, #4
 801688c:	617b      	str	r3, [r7, #20]
 801688e:	e008      	b.n	80168a2 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8016890:	4b0c      	ldr	r3, [pc, #48]	; (80168c4 <_txe_semaphore_get+0x7c>)
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8016896:	693b      	ldr	r3, [r7, #16]
 8016898:	4a0b      	ldr	r2, [pc, #44]	; (80168c8 <_txe_semaphore_get+0x80>)
 801689a:	4293      	cmp	r3, r2
 801689c:	d101      	bne.n	80168a2 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801689e:	2304      	movs	r3, #4
 80168a0:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80168a2:	697b      	ldr	r3, [r7, #20]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d104      	bne.n	80168b2 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 80168a8:	6839      	ldr	r1, [r7, #0]
 80168aa:	6878      	ldr	r0, [r7, #4]
 80168ac:	f7fe fd60 	bl	8015370 <_tx_semaphore_get>
 80168b0:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80168b2:	697b      	ldr	r3, [r7, #20]
}
 80168b4:	4618      	mov	r0, r3
 80168b6:	3718      	adds	r7, #24
 80168b8:	46bd      	mov	sp, r7
 80168ba:	bd80      	pop	{r7, pc}
 80168bc:	53454d41 	.word	0x53454d41
 80168c0:	20000054 	.word	0x20000054
 80168c4:	20197ee4 	.word	0x20197ee4
 80168c8:	2019802c 	.word	0x2019802c

080168cc <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80168cc:	b580      	push	{r7, lr}
 80168ce:	b084      	sub	sp, #16
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d102      	bne.n	80168e0 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80168da:	230c      	movs	r3, #12
 80168dc:	60fb      	str	r3, [r7, #12]
 80168de:	e00b      	b.n	80168f8 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	4a07      	ldr	r2, [pc, #28]	; (8016904 <_txe_semaphore_put+0x38>)
 80168e6:	4293      	cmp	r3, r2
 80168e8:	d002      	beq.n	80168f0 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80168ea:	230c      	movs	r3, #12
 80168ec:	60fb      	str	r3, [r7, #12]
 80168ee:	e003      	b.n	80168f8 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 80168f0:	6878      	ldr	r0, [r7, #4]
 80168f2:	f7fe fdcf 	bl	8015494 <_tx_semaphore_put>
 80168f6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80168f8:	68fb      	ldr	r3, [r7, #12]
}
 80168fa:	4618      	mov	r0, r3
 80168fc:	3710      	adds	r7, #16
 80168fe:	46bd      	mov	sp, r7
 8016900:	bd80      	pop	{r7, pc}
 8016902:	bf00      	nop
 8016904:	53454d41 	.word	0x53454d41

08016908 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8016908:	b580      	push	{r7, lr}
 801690a:	b09a      	sub	sp, #104	; 0x68
 801690c:	af06      	add	r7, sp, #24
 801690e:	60f8      	str	r0, [r7, #12]
 8016910:	60b9      	str	r1, [r7, #8]
 8016912:	607a      	str	r2, [r7, #4]
 8016914:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016916:	2300      	movs	r3, #0
 8016918:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d102      	bne.n	8016926 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8016920:	230e      	movs	r3, #14
 8016922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016924:	e0bb      	b.n	8016a9e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8016926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016928:	2bb0      	cmp	r3, #176	; 0xb0
 801692a:	d002      	beq.n	8016932 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801692c:	230e      	movs	r3, #14
 801692e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016930:	e0b5      	b.n	8016a9e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016932:	f3ef 8310 	mrs	r3, PRIMASK
 8016936:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8016938:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 801693a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801693c:	b672      	cpsid	i
    return(int_posture);
 801693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8016940:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8016942:	4b64      	ldr	r3, [pc, #400]	; (8016ad4 <_txe_thread_create+0x1cc>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	3301      	adds	r3, #1
 8016948:	4a62      	ldr	r2, [pc, #392]	; (8016ad4 <_txe_thread_create+0x1cc>)
 801694a:	6013      	str	r3, [r2, #0]
 801694c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801694e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016952:	f383 8810 	msr	PRIMASK, r3
}
 8016956:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8016958:	2300      	movs	r3, #0
 801695a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 801695c:	4b5e      	ldr	r3, [pc, #376]	; (8016ad8 <_txe_thread_create+0x1d0>)
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8016962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016964:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8016966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016968:	3b01      	subs	r3, #1
 801696a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801696c:	4413      	add	r3, r2
 801696e:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8016970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016972:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8016974:	2300      	movs	r3, #0
 8016976:	647b      	str	r3, [r7, #68]	; 0x44
 8016978:	e02b      	b.n	80169d2 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 801697a:	68fa      	ldr	r2, [r7, #12]
 801697c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801697e:	429a      	cmp	r2, r3
 8016980:	d101      	bne.n	8016986 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8016982:	2301      	movs	r3, #1
 8016984:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8016986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016988:	2b01      	cmp	r3, #1
 801698a:	d028      	beq.n	80169de <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 801698c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801698e:	68db      	ldr	r3, [r3, #12]
 8016990:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016992:	429a      	cmp	r2, r3
 8016994:	d308      	bcc.n	80169a8 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8016996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016998:	691b      	ldr	r3, [r3, #16]
 801699a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801699c:	429a      	cmp	r2, r3
 801699e:	d203      	bcs.n	80169a8 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80169a0:	2300      	movs	r3, #0
 80169a2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80169a4:	2301      	movs	r3, #1
 80169a6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 80169a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169aa:	68db      	ldr	r3, [r3, #12]
 80169ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80169ae:	429a      	cmp	r2, r3
 80169b0:	d308      	bcc.n	80169c4 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 80169b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169b4:	691b      	ldr	r3, [r3, #16]
 80169b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80169b8:	429a      	cmp	r2, r3
 80169ba:	d203      	bcs.n	80169c4 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80169bc:	2300      	movs	r3, #0
 80169be:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80169c0:	2301      	movs	r3, #1
 80169c2:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 80169c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80169ca:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80169cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169ce:	3301      	adds	r3, #1
 80169d0:	647b      	str	r3, [r7, #68]	; 0x44
 80169d2:	4b42      	ldr	r3, [pc, #264]	; (8016adc <_txe_thread_create+0x1d4>)
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80169d8:	429a      	cmp	r2, r3
 80169da:	d3ce      	bcc.n	801697a <_txe_thread_create+0x72>
 80169dc:	e000      	b.n	80169e0 <_txe_thread_create+0xd8>
                break;
 80169de:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80169e0:	f3ef 8310 	mrs	r3, PRIMASK
 80169e4:	61fb      	str	r3, [r7, #28]
    return(posture);
 80169e6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80169e8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80169ea:	b672      	cpsid	i
    return(int_posture);
 80169ec:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80169ee:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80169f0:	4b38      	ldr	r3, [pc, #224]	; (8016ad4 <_txe_thread_create+0x1cc>)
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	3b01      	subs	r3, #1
 80169f6:	4a37      	ldr	r2, [pc, #220]	; (8016ad4 <_txe_thread_create+0x1cc>)
 80169f8:	6013      	str	r3, [r2, #0]
 80169fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169fc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80169fe:	6a3b      	ldr	r3, [r7, #32]
 8016a00:	f383 8810 	msr	PRIMASK, r3
}
 8016a04:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8016a06:	f7fe ff1b 	bl	8015840 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8016a0a:	68fa      	ldr	r2, [r7, #12]
 8016a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a0e:	429a      	cmp	r2, r3
 8016a10:	d102      	bne.n	8016a18 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8016a12:	230e      	movs	r3, #14
 8016a14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016a16:	e042      	b.n	8016a9e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8016a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d102      	bne.n	8016a24 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8016a1e:	2303      	movs	r3, #3
 8016a20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016a22:	e03c      	b.n	8016a9e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d102      	bne.n	8016a30 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8016a2a:	2303      	movs	r3, #3
 8016a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016a2e:	e036      	b.n	8016a9e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8016a30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016a32:	2bc7      	cmp	r3, #199	; 0xc7
 8016a34:	d802      	bhi.n	8016a3c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8016a36:	2305      	movs	r3, #5
 8016a38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016a3a:	e030      	b.n	8016a9e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8016a3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016a3e:	2b1f      	cmp	r3, #31
 8016a40:	d902      	bls.n	8016a48 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8016a42:	230f      	movs	r3, #15
 8016a44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016a46:	e02a      	b.n	8016a9e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8016a48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016a4c:	429a      	cmp	r2, r3
 8016a4e:	d902      	bls.n	8016a56 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8016a50:	2318      	movs	r3, #24
 8016a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016a54:	e023      	b.n	8016a9e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8016a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a58:	2b01      	cmp	r3, #1
 8016a5a:	d902      	bls.n	8016a62 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8016a5c:	2310      	movs	r3, #16
 8016a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016a60:	e01d      	b.n	8016a9e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8016a62:	4b1f      	ldr	r3, [pc, #124]	; (8016ae0 <_txe_thread_create+0x1d8>)
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8016a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a6a:	4a1e      	ldr	r2, [pc, #120]	; (8016ae4 <_txe_thread_create+0x1dc>)
 8016a6c:	4293      	cmp	r3, r2
 8016a6e:	d101      	bne.n	8016a74 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8016a70:	2313      	movs	r3, #19
 8016a72:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016a74:	f3ef 8305 	mrs	r3, IPSR
 8016a78:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016a7a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016a7c:	4b1a      	ldr	r3, [pc, #104]	; (8016ae8 <_txe_thread_create+0x1e0>)
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	4313      	orrs	r3, r2
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d00b      	beq.n	8016a9e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016a86:	f3ef 8305 	mrs	r3, IPSR
 8016a8a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8016a8c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8016a8e:	4b16      	ldr	r3, [pc, #88]	; (8016ae8 <_txe_thread_create+0x1e0>)
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	4313      	orrs	r3, r2
 8016a94:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016a98:	d201      	bcs.n	8016a9e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8016a9a:	2313      	movs	r3, #19
 8016a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d112      	bne.n	8016aca <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8016aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016aa6:	9305      	str	r3, [sp, #20]
 8016aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016aaa:	9304      	str	r3, [sp, #16]
 8016aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016aae:	9303      	str	r3, [sp, #12]
 8016ab0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016ab2:	9302      	str	r3, [sp, #8]
 8016ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ab6:	9301      	str	r3, [sp, #4]
 8016ab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016aba:	9300      	str	r3, [sp, #0]
 8016abc:	683b      	ldr	r3, [r7, #0]
 8016abe:	687a      	ldr	r2, [r7, #4]
 8016ac0:	68b9      	ldr	r1, [r7, #8]
 8016ac2:	68f8      	ldr	r0, [r7, #12]
 8016ac4:	f7fe fd3e 	bl	8015544 <_tx_thread_create>
 8016ac8:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8016aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8016acc:	4618      	mov	r0, r3
 8016ace:	3750      	adds	r7, #80	; 0x50
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	bd80      	pop	{r7, pc}
 8016ad4:	20197f7c 	.word	0x20197f7c
 8016ad8:	20197eec 	.word	0x20197eec
 8016adc:	20197ef0 	.word	0x20197ef0
 8016ae0:	20197ee4 	.word	0x20197ee4
 8016ae4:	2019802c 	.word	0x2019802c
 8016ae8:	20000054 	.word	0x20000054

08016aec <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8016aec:	8880      	ldrh	r0, [r0, #4]
 8016aee:	4770      	bx	lr

08016af0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8016af0:	b570      	push	{r4, r5, r6, lr}
 8016af2:	6803      	ldr	r3, [r0, #0]
 8016af4:	4605      	mov	r5, r0
 8016af6:	460c      	mov	r4, r1
 8016af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016afa:	2100      	movs	r1, #0
 8016afc:	4798      	blx	r3
 8016afe:	682b      	ldr	r3, [r5, #0]
 8016b00:	4606      	mov	r6, r0
 8016b02:	6a1b      	ldr	r3, [r3, #32]
 8016b04:	4628      	mov	r0, r5
 8016b06:	4798      	blx	r3
 8016b08:	1ba4      	subs	r4, r4, r6
 8016b0a:	b2a4      	uxth	r4, r4
 8016b0c:	fbb4 f0f0 	udiv	r0, r4, r0
 8016b10:	bd70      	pop	{r4, r5, r6, pc}

08016b12 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8016b12:	2300      	movs	r3, #0
 8016b14:	8083      	strh	r3, [r0, #4]
 8016b16:	4770      	bx	lr

08016b18 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016b18:	b510      	push	{r4, lr}
 8016b1a:	4604      	mov	r4, r0
 8016b1c:	6803      	ldr	r3, [r0, #0]
 8016b1e:	8881      	ldrh	r1, [r0, #4]
 8016b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b22:	4798      	blx	r3
 8016b24:	88a3      	ldrh	r3, [r4, #4]
 8016b26:	3301      	adds	r3, #1
 8016b28:	80a3      	strh	r3, [r4, #4]
 8016b2a:	bd10      	pop	{r4, pc}

08016b2c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8016b2c:	6803      	ldr	r3, [r0, #0]
 8016b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b30:	4718      	bx	r3

08016b32 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8016b32:	4770      	bx	lr

08016b34 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8016b34:	4a02      	ldr	r2, [pc, #8]	; (8016b40 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8016b36:	6002      	str	r2, [r0, #0]
 8016b38:	2200      	movs	r2, #0
 8016b3a:	8082      	strh	r2, [r0, #4]
 8016b3c:	4770      	bx	lr
 8016b3e:	bf00      	nop
 8016b40:	0802be84 	.word	0x0802be84

08016b44 <_ZN8touchgfx9Container13getFirstChildEv>:
 8016b44:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016b46:	4770      	bx	lr

08016b48 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8016b48:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016b4a:	2000      	movs	r0, #0
 8016b4c:	b12b      	cbz	r3, 8016b5a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016b4e:	b920      	cbnz	r0, 8016b5a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016b50:	1a5a      	subs	r2, r3, r1
 8016b52:	4250      	negs	r0, r2
 8016b54:	4150      	adcs	r0, r2
 8016b56:	699b      	ldr	r3, [r3, #24]
 8016b58:	e7f8      	b.n	8016b4c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8016b5a:	4770      	bx	lr

08016b5c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	6148      	str	r0, [r1, #20]
 8016b60:	618b      	str	r3, [r1, #24]
 8016b62:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016b64:	b913      	cbnz	r3, 8016b6c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8016b66:	6281      	str	r1, [r0, #40]	; 0x28
 8016b68:	4770      	bx	lr
 8016b6a:	4613      	mov	r3, r2
 8016b6c:	699a      	ldr	r2, [r3, #24]
 8016b6e:	2a00      	cmp	r2, #0
 8016b70:	d1fb      	bne.n	8016b6a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8016b72:	6199      	str	r1, [r3, #24]
 8016b74:	4770      	bx	lr

08016b76 <_ZN8touchgfx9Container9removeAllEv>:
 8016b76:	2200      	movs	r2, #0
 8016b78:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016b7a:	b123      	cbz	r3, 8016b86 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8016b7c:	6999      	ldr	r1, [r3, #24]
 8016b7e:	6281      	str	r1, [r0, #40]	; 0x28
 8016b80:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8016b84:	e7f8      	b.n	8016b78 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8016b86:	4770      	bx	lr

08016b88 <_ZN8touchgfx9Container6unlinkEv>:
 8016b88:	2300      	movs	r3, #0
 8016b8a:	6283      	str	r3, [r0, #40]	; 0x28
 8016b8c:	4770      	bx	lr

08016b8e <_ZNK8touchgfx9Container12getSolidRectEv>:
 8016b8e:	2200      	movs	r2, #0
 8016b90:	8002      	strh	r2, [r0, #0]
 8016b92:	8042      	strh	r2, [r0, #2]
 8016b94:	8082      	strh	r2, [r0, #4]
 8016b96:	80c2      	strh	r2, [r0, #6]
 8016b98:	4770      	bx	lr

08016b9a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8016b9a:	b570      	push	{r4, r5, r6, lr}
 8016b9c:	460d      	mov	r5, r1
 8016b9e:	4616      	mov	r6, r2
 8016ba0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016ba2:	b13c      	cbz	r4, 8016bb4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8016ba4:	6823      	ldr	r3, [r4, #0]
 8016ba6:	4620      	mov	r0, r4
 8016ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016baa:	4632      	mov	r2, r6
 8016bac:	4629      	mov	r1, r5
 8016bae:	4798      	blx	r3
 8016bb0:	69a4      	ldr	r4, [r4, #24]
 8016bb2:	e7f6      	b.n	8016ba2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8016bb4:	bd70      	pop	{r4, r5, r6, pc}

08016bb6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8016bb6:	b538      	push	{r3, r4, r5, lr}
 8016bb8:	460d      	mov	r5, r1
 8016bba:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016bbc:	b134      	cbz	r4, 8016bcc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8016bbe:	682b      	ldr	r3, [r5, #0]
 8016bc0:	4621      	mov	r1, r4
 8016bc2:	689b      	ldr	r3, [r3, #8]
 8016bc4:	4628      	mov	r0, r5
 8016bc6:	4798      	blx	r3
 8016bc8:	69a4      	ldr	r4, [r4, #24]
 8016bca:	e7f7      	b.n	8016bbc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016bcc:	bd38      	pop	{r3, r4, r5, pc}

08016bce <_ZN8touchgfx9ContainerD1Ev>:
 8016bce:	4770      	bx	lr

08016bd0 <_ZN8touchgfx9ContainerD0Ev>:
 8016bd0:	b510      	push	{r4, lr}
 8016bd2:	4604      	mov	r4, r0
 8016bd4:	212c      	movs	r1, #44	; 0x2c
 8016bd6:	f012 fce4 	bl	80295a2 <_ZdlPvj>
 8016bda:	4620      	mov	r0, r4
 8016bdc:	bd10      	pop	{r4, pc}

08016bde <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8016bde:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016be0:	b19b      	cbz	r3, 8016c0a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016be2:	428b      	cmp	r3, r1
 8016be4:	d109      	bne.n	8016bfa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8016be6:	2100      	movs	r1, #0
 8016be8:	699a      	ldr	r2, [r3, #24]
 8016bea:	6159      	str	r1, [r3, #20]
 8016bec:	6282      	str	r2, [r0, #40]	; 0x28
 8016bee:	b902      	cbnz	r2, 8016bf2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016bf0:	4770      	bx	lr
 8016bf2:	6199      	str	r1, [r3, #24]
 8016bf4:	4770      	bx	lr
 8016bf6:	4613      	mov	r3, r2
 8016bf8:	b13a      	cbz	r2, 8016c0a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016bfa:	699a      	ldr	r2, [r3, #24]
 8016bfc:	428a      	cmp	r2, r1
 8016bfe:	d1fa      	bne.n	8016bf6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8016c00:	698a      	ldr	r2, [r1, #24]
 8016c02:	619a      	str	r2, [r3, #24]
 8016c04:	2300      	movs	r3, #0
 8016c06:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8016c0a:	4770      	bx	lr

08016c0c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8016c0c:	b410      	push	{r4}
 8016c0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016c10:	4604      	mov	r4, r0
 8016c12:	b92b      	cbnz	r3, 8016c20 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8016c14:	6803      	ldr	r3, [r0, #0]
 8016c16:	4611      	mov	r1, r2
 8016c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c1e:	4718      	bx	r3
 8016c20:	b941      	cbnz	r1, 8016c34 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8016c22:	6193      	str	r3, [r2, #24]
 8016c24:	6282      	str	r2, [r0, #40]	; 0x28
 8016c26:	6154      	str	r4, [r2, #20]
 8016c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c2c:	4770      	bx	lr
 8016c2e:	4603      	mov	r3, r0
 8016c30:	2800      	cmp	r0, #0
 8016c32:	d0f9      	beq.n	8016c28 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8016c34:	4299      	cmp	r1, r3
 8016c36:	6998      	ldr	r0, [r3, #24]
 8016c38:	d1f9      	bne.n	8016c2e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8016c3a:	6190      	str	r0, [r2, #24]
 8016c3c:	618a      	str	r2, [r1, #24]
 8016c3e:	e7f2      	b.n	8016c26 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08016c40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8016c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c44:	461f      	mov	r7, r3
 8016c46:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8016c4a:	460d      	mov	r5, r1
 8016c4c:	4616      	mov	r6, r2
 8016c4e:	b103      	cbz	r3, 8016c52 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8016c50:	6038      	str	r0, [r7, #0]
 8016c52:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016c54:	b314      	cbz	r4, 8016c9c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8016c56:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016c5a:	b1eb      	cbz	r3, 8016c98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016c5c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016c60:	428d      	cmp	r5, r1
 8016c62:	db19      	blt.n	8016c98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016c64:	8923      	ldrh	r3, [r4, #8]
 8016c66:	b289      	uxth	r1, r1
 8016c68:	440b      	add	r3, r1
 8016c6a:	b21b      	sxth	r3, r3
 8016c6c:	429d      	cmp	r5, r3
 8016c6e:	da13      	bge.n	8016c98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016c70:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016c74:	4296      	cmp	r6, r2
 8016c76:	db0f      	blt.n	8016c98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016c78:	8963      	ldrh	r3, [r4, #10]
 8016c7a:	b292      	uxth	r2, r2
 8016c7c:	4413      	add	r3, r2
 8016c7e:	b21b      	sxth	r3, r3
 8016c80:	429e      	cmp	r6, r3
 8016c82:	da09      	bge.n	8016c98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016c84:	6823      	ldr	r3, [r4, #0]
 8016c86:	1ab2      	subs	r2, r6, r2
 8016c88:	1a69      	subs	r1, r5, r1
 8016c8a:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8016c8e:	b212      	sxth	r2, r2
 8016c90:	463b      	mov	r3, r7
 8016c92:	b209      	sxth	r1, r1
 8016c94:	4620      	mov	r0, r4
 8016c96:	47c0      	blx	r8
 8016c98:	69a4      	ldr	r4, [r4, #24]
 8016c9a:	e7db      	b.n	8016c54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8016c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016ca0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8016ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ca4:	4c6c      	ldr	r4, [pc, #432]	; (8016e58 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 8016ca6:	b0a1      	sub	sp, #132	; 0x84
 8016ca8:	6824      	ldr	r4, [r4, #0]
 8016caa:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8016cac:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8016cb0:	2400      	movs	r4, #0
 8016cb2:	802c      	strh	r4, [r5, #0]
 8016cb4:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8016cb6:	4606      	mov	r6, r0
 8016cb8:	802c      	strh	r4, [r5, #0]
 8016cba:	601c      	str	r4, [r3, #0]
 8016cbc:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8016cc0:	9303      	str	r3, [sp, #12]
 8016cc2:	f7ff ffbd 	bl	8016c40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016cc6:	f1b9 0f03 	cmp.w	r9, #3
 8016cca:	f340 80bf 	ble.w	8016e4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 8016cce:	4631      	mov	r1, r6
 8016cd0:	a80c      	add	r0, sp, #48	; 0x30
 8016cd2:	f003 fa2b 	bl	801a12c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016cd6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8016cda:	9306      	str	r3, [sp, #24]
 8016cdc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016ce0:	9307      	str	r3, [sp, #28]
 8016ce2:	9b03      	ldr	r3, [sp, #12]
 8016ce4:	f8d3 a000 	ldr.w	sl, [r3]
 8016ce8:	f1ba 0f00 	cmp.w	sl, #0
 8016cec:	f000 80b1 	beq.w	8016e52 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8016cf0:	4651      	mov	r1, sl
 8016cf2:	a810      	add	r0, sp, #64	; 0x40
 8016cf4:	f003 fa1a 	bl	801a12c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016cf8:	2002      	movs	r0, #2
 8016cfa:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8016cfe:	9b01      	ldr	r3, [sp, #4]
 8016d00:	fb91 f1f0 	sdiv	r1, r1, r0
 8016d04:	9a06      	ldr	r2, [sp, #24]
 8016d06:	189d      	adds	r5, r3, r2
 8016d08:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8016d0c:	9a07      	ldr	r2, [sp, #28]
 8016d0e:	4419      	add	r1, r3
 8016d10:	9b02      	ldr	r3, [sp, #8]
 8016d12:	1a6d      	subs	r5, r5, r1
 8016d14:	4413      	add	r3, r2
 8016d16:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8016d1a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8016d1e:	fb92 f2f0 	sdiv	r2, r2, r0
 8016d22:	440a      	add	r2, r1
 8016d24:	1a9b      	subs	r3, r3, r2
 8016d26:	435b      	muls	r3, r3
 8016d28:	fb05 3505 	mla	r5, r5, r5, r3
 8016d2c:	4f4b      	ldr	r7, [pc, #300]	; (8016e5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8016d2e:	ac10      	add	r4, sp, #64	; 0x40
 8016d30:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d34:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d38:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d3c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8016d40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016d44:	2303      	movs	r3, #3
 8016d46:	f1b9 0f0c 	cmp.w	r9, #12
 8016d4a:	bfda      	itte	le
 8016d4c:	f109 32ff 	addle.w	r2, r9, #4294967295
 8016d50:	fb92 f8f3 	sdivle	r8, r2, r3
 8016d54:	4698      	movgt	r8, r3
 8016d56:	2400      	movs	r4, #0
 8016d58:	f8cd 9000 	str.w	r9, [sp]
 8016d5c:	1c63      	adds	r3, r4, #1
 8016d5e:	9308      	str	r3, [sp, #32]
 8016d60:	9b00      	ldr	r3, [sp, #0]
 8016d62:	f04f 0b00 	mov.w	fp, #0
 8016d66:	fb93 f3f8 	sdiv	r3, r3, r8
 8016d6a:	f004 0401 	and.w	r4, r4, #1
 8016d6e:	aa10      	add	r2, sp, #64	; 0x40
 8016d70:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8016d74:	b29b      	uxth	r3, r3
 8016d76:	3404      	adds	r4, #4
 8016d78:	9304      	str	r3, [sp, #16]
 8016d7a:	9a04      	ldr	r2, [sp, #16]
 8016d7c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016d80:	fb13 f302 	smulbb	r3, r3, r2
 8016d84:	9a01      	ldr	r2, [sp, #4]
 8016d86:	b29b      	uxth	r3, r3
 8016d88:	1899      	adds	r1, r3, r2
 8016d8a:	9305      	str	r3, [sp, #20]
 8016d8c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016d90:	b209      	sxth	r1, r1
 8016d92:	4299      	cmp	r1, r3
 8016d94:	db4d      	blt.n	8016e32 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8016d96:	8932      	ldrh	r2, [r6, #8]
 8016d98:	4413      	add	r3, r2
 8016d9a:	b21b      	sxth	r3, r3
 8016d9c:	4299      	cmp	r1, r3
 8016d9e:	da48      	bge.n	8016e32 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8016da0:	9b04      	ldr	r3, [sp, #16]
 8016da2:	6827      	ldr	r7, [r4, #0]
 8016da4:	fb17 f703 	smulbb	r7, r7, r3
 8016da8:	9b02      	ldr	r3, [sp, #8]
 8016daa:	b2bf      	uxth	r7, r7
 8016dac:	18fa      	adds	r2, r7, r3
 8016dae:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016db2:	b212      	sxth	r2, r2
 8016db4:	429a      	cmp	r2, r3
 8016db6:	db3c      	blt.n	8016e32 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8016db8:	8970      	ldrh	r0, [r6, #10]
 8016dba:	4403      	add	r3, r0
 8016dbc:	b21b      	sxth	r3, r3
 8016dbe:	429a      	cmp	r2, r3
 8016dc0:	da37      	bge.n	8016e32 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	4630      	mov	r0, r6
 8016dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8016dc8:	ab0b      	add	r3, sp, #44	; 0x2c
 8016dca:	f7ff ff39 	bl	8016c40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016dce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016dd0:	b37a      	cbz	r2, 8016e32 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8016dd2:	4552      	cmp	r2, sl
 8016dd4:	d02d      	beq.n	8016e32 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8016dd6:	4611      	mov	r1, r2
 8016dd8:	a80e      	add	r0, sp, #56	; 0x38
 8016dda:	9209      	str	r2, [sp, #36]	; 0x24
 8016ddc:	f003 f9a6 	bl	801a12c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016de0:	f04f 0e02 	mov.w	lr, #2
 8016de4:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8016de8:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8016dec:	fb91 f1fe 	sdiv	r1, r1, lr
 8016df0:	fb9c fcfe 	sdiv	ip, ip, lr
 8016df4:	9a06      	ldr	r2, [sp, #24]
 8016df6:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8016dfa:	9b01      	ldr	r3, [sp, #4]
 8016dfc:	4401      	add	r1, r0
 8016dfe:	4413      	add	r3, r2
 8016e00:	1a58      	subs	r0, r3, r1
 8016e02:	9a07      	ldr	r2, [sp, #28]
 8016e04:	9b02      	ldr	r3, [sp, #8]
 8016e06:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8016e0a:	4413      	add	r3, r2
 8016e0c:	448c      	add	ip, r1
 8016e0e:	eba3 030c 	sub.w	r3, r3, ip
 8016e12:	435b      	muls	r3, r3
 8016e14:	fb00 3300 	mla	r3, r0, r0, r3
 8016e18:	42ab      	cmp	r3, r5
 8016e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016e1c:	d208      	bcs.n	8016e30 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 8016e1e:	461d      	mov	r5, r3
 8016e20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e22:	9803      	ldr	r0, [sp, #12]
 8016e24:	6001      	str	r1, [r0, #0]
 8016e26:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8016e28:	9805      	ldr	r0, [sp, #20]
 8016e2a:	8008      	strh	r0, [r1, #0]
 8016e2c:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016e2e:	800f      	strh	r7, [r1, #0]
 8016e30:	4692      	mov	sl, r2
 8016e32:	f10b 0b01 	add.w	fp, fp, #1
 8016e36:	f1bb 0f04 	cmp.w	fp, #4
 8016e3a:	f104 0408 	add.w	r4, r4, #8
 8016e3e:	d19c      	bne.n	8016d7a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8016e40:	9b00      	ldr	r3, [sp, #0]
 8016e42:	9c08      	ldr	r4, [sp, #32]
 8016e44:	444b      	add	r3, r9
 8016e46:	4544      	cmp	r4, r8
 8016e48:	9300      	str	r3, [sp, #0]
 8016e4a:	d187      	bne.n	8016d5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 8016e4c:	b021      	add	sp, #132	; 0x84
 8016e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e52:	f04f 35ff 	mov.w	r5, #4294967295
 8016e56:	e769      	b.n	8016d2c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8016e58:	201984f8 	.word	0x201984f8
 8016e5c:	0802acb8 	.word	0x0802acb8

08016e60 <_ZN8touchgfx4RectaNERKS0_>:
 8016e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e64:	f9b1 7000 	ldrsh.w	r7, [r1]
 8016e68:	888c      	ldrh	r4, [r1, #4]
 8016e6a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016e6e:	443c      	add	r4, r7
 8016e70:	b2a4      	uxth	r4, r4
 8016e72:	fa0f f884 	sxth.w	r8, r4
 8016e76:	45c1      	cmp	r9, r8
 8016e78:	da2f      	bge.n	8016eda <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016e7a:	8882      	ldrh	r2, [r0, #4]
 8016e7c:	444a      	add	r2, r9
 8016e7e:	b292      	uxth	r2, r2
 8016e80:	fa0f fe82 	sxth.w	lr, r2
 8016e84:	4577      	cmp	r7, lr
 8016e86:	da28      	bge.n	8016eda <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016e88:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8016e8c:	88cb      	ldrh	r3, [r1, #6]
 8016e8e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8016e92:	442b      	add	r3, r5
 8016e94:	b21b      	sxth	r3, r3
 8016e96:	429e      	cmp	r6, r3
 8016e98:	da1f      	bge.n	8016eda <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016e9a:	88c3      	ldrh	r3, [r0, #6]
 8016e9c:	4433      	add	r3, r6
 8016e9e:	b29b      	uxth	r3, r3
 8016ea0:	fa0f fc83 	sxth.w	ip, r3
 8016ea4:	4565      	cmp	r5, ip
 8016ea6:	da18      	bge.n	8016eda <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016ea8:	454f      	cmp	r7, r9
 8016eaa:	bfb8      	it	lt
 8016eac:	464f      	movlt	r7, r9
 8016eae:	42b5      	cmp	r5, r6
 8016eb0:	bfb8      	it	lt
 8016eb2:	4635      	movlt	r5, r6
 8016eb4:	45f0      	cmp	r8, lr
 8016eb6:	bfd8      	it	le
 8016eb8:	4622      	movle	r2, r4
 8016eba:	1bd2      	subs	r2, r2, r7
 8016ebc:	8082      	strh	r2, [r0, #4]
 8016ebe:	884a      	ldrh	r2, [r1, #2]
 8016ec0:	88c9      	ldrh	r1, [r1, #6]
 8016ec2:	8007      	strh	r7, [r0, #0]
 8016ec4:	440a      	add	r2, r1
 8016ec6:	b292      	uxth	r2, r2
 8016ec8:	b211      	sxth	r1, r2
 8016eca:	458c      	cmp	ip, r1
 8016ecc:	bfa8      	it	ge
 8016ece:	4613      	movge	r3, r2
 8016ed0:	1b5b      	subs	r3, r3, r5
 8016ed2:	80c3      	strh	r3, [r0, #6]
 8016ed4:	8045      	strh	r5, [r0, #2]
 8016ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016eda:	2300      	movs	r3, #0
 8016edc:	8003      	strh	r3, [r0, #0]
 8016ede:	8043      	strh	r3, [r0, #2]
 8016ee0:	8083      	strh	r3, [r0, #4]
 8016ee2:	80c3      	strh	r3, [r0, #6]
 8016ee4:	e7f7      	b.n	8016ed6 <_ZN8touchgfx4RectaNERKS0_+0x76>

08016ee6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8016ee6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	dd06      	ble.n	8016efc <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8016eee:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8016ef2:	2800      	cmp	r0, #0
 8016ef4:	bfcc      	ite	gt
 8016ef6:	2000      	movgt	r0, #0
 8016ef8:	2001      	movle	r0, #1
 8016efa:	4770      	bx	lr
 8016efc:	2001      	movs	r0, #1
 8016efe:	4770      	bx	lr

08016f00 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8016f00:	2300      	movs	r3, #0
 8016f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f06:	4604      	mov	r4, r0
 8016f08:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8016f0a:	8003      	strh	r3, [r0, #0]
 8016f0c:	8043      	strh	r3, [r0, #2]
 8016f0e:	8083      	strh	r3, [r0, #4]
 8016f10:	80c3      	strh	r3, [r0, #6]
 8016f12:	2d00      	cmp	r5, #0
 8016f14:	d040      	beq.n	8016f98 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8016f16:	1d28      	adds	r0, r5, #4
 8016f18:	f7ff ffe5 	bl	8016ee6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016f1c:	b988      	cbnz	r0, 8016f42 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016f1e:	4620      	mov	r0, r4
 8016f20:	f7ff ffe1 	bl	8016ee6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016f24:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8016f28:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016f2c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8016f30:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8016f34:	b138      	cbz	r0, 8016f46 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8016f36:	8022      	strh	r2, [r4, #0]
 8016f38:	8063      	strh	r3, [r4, #2]
 8016f3a:	f8a4 e004 	strh.w	lr, [r4, #4]
 8016f3e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016f42:	69ad      	ldr	r5, [r5, #24]
 8016f44:	e7e5      	b.n	8016f12 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8016f46:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016f4a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016f4e:	4290      	cmp	r0, r2
 8016f50:	4607      	mov	r7, r0
 8016f52:	bfa8      	it	ge
 8016f54:	4617      	movge	r7, r2
 8016f56:	4299      	cmp	r1, r3
 8016f58:	460e      	mov	r6, r1
 8016f5a:	bfa8      	it	ge
 8016f5c:	461e      	movge	r6, r3
 8016f5e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8016f62:	4472      	add	r2, lr
 8016f64:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8016f68:	4440      	add	r0, r8
 8016f6a:	4471      	add	r1, lr
 8016f6c:	4463      	add	r3, ip
 8016f6e:	b200      	sxth	r0, r0
 8016f70:	b212      	sxth	r2, r2
 8016f72:	b209      	sxth	r1, r1
 8016f74:	b21b      	sxth	r3, r3
 8016f76:	4290      	cmp	r0, r2
 8016f78:	bfac      	ite	ge
 8016f7a:	ebc7 0200 	rsbge	r2, r7, r0
 8016f7e:	ebc7 0202 	rsblt	r2, r7, r2
 8016f82:	4299      	cmp	r1, r3
 8016f84:	bfac      	ite	ge
 8016f86:	ebc6 0301 	rsbge	r3, r6, r1
 8016f8a:	ebc6 0303 	rsblt	r3, r6, r3
 8016f8e:	8027      	strh	r7, [r4, #0]
 8016f90:	8066      	strh	r6, [r4, #2]
 8016f92:	80a2      	strh	r2, [r4, #4]
 8016f94:	80e3      	strh	r3, [r4, #6]
 8016f96:	e7d4      	b.n	8016f42 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016f98:	4620      	mov	r0, r4
 8016f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016f9e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8016f9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016fa2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016fa6:	b383      	cbz	r3, 801700a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016fa8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016faa:	b374      	cbz	r4, 801700a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016fac:	f9b1 5000 	ldrsh.w	r5, [r1]
 8016fb0:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8016fb4:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8016fb8:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016fbc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016fc0:	b303      	cbz	r3, 8017004 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016fc2:	4668      	mov	r0, sp
 8016fc4:	1d21      	adds	r1, r4, #4
 8016fc6:	f8ad 5000 	strh.w	r5, [sp]
 8016fca:	f8ad 6002 	strh.w	r6, [sp, #2]
 8016fce:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016fd2:	f8ad 8006 	strh.w	r8, [sp, #6]
 8016fd6:	f7ff ff43 	bl	8016e60 <_ZN8touchgfx4RectaNERKS0_>
 8016fda:	4668      	mov	r0, sp
 8016fdc:	f7ff ff83 	bl	8016ee6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016fe0:	b980      	cbnz	r0, 8017004 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016fe2:	f8bd 3000 	ldrh.w	r3, [sp]
 8016fe6:	88a2      	ldrh	r2, [r4, #4]
 8016fe8:	4669      	mov	r1, sp
 8016fea:	1a9b      	subs	r3, r3, r2
 8016fec:	f8ad 3000 	strh.w	r3, [sp]
 8016ff0:	88e2      	ldrh	r2, [r4, #6]
 8016ff2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016ff6:	4620      	mov	r0, r4
 8016ff8:	1a9b      	subs	r3, r3, r2
 8016ffa:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016ffe:	6823      	ldr	r3, [r4, #0]
 8017000:	689b      	ldr	r3, [r3, #8]
 8017002:	4798      	blx	r3
 8017004:	69a4      	ldr	r4, [r4, #24]
 8017006:	2c00      	cmp	r4, #0
 8017008:	d1d8      	bne.n	8016fbc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801700a:	b002      	add	sp, #8
 801700c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017010 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8017010:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017012:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017016:	460d      	mov	r5, r1
 8017018:	4616      	mov	r6, r2
 801701a:	b323      	cbz	r3, 8017066 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801701c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801701e:	b314      	cbz	r4, 8017066 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017020:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017024:	b1eb      	cbz	r3, 8017062 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017026:	466b      	mov	r3, sp
 8017028:	6828      	ldr	r0, [r5, #0]
 801702a:	6869      	ldr	r1, [r5, #4]
 801702c:	c303      	stmia	r3!, {r0, r1}
 801702e:	4668      	mov	r0, sp
 8017030:	1d21      	adds	r1, r4, #4
 8017032:	f7ff ff15 	bl	8016e60 <_ZN8touchgfx4RectaNERKS0_>
 8017036:	4668      	mov	r0, sp
 8017038:	f7ff ff55 	bl	8016ee6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801703c:	b988      	cbnz	r0, 8017062 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801703e:	f8bd 3000 	ldrh.w	r3, [sp]
 8017042:	88a2      	ldrh	r2, [r4, #4]
 8017044:	4669      	mov	r1, sp
 8017046:	1a9b      	subs	r3, r3, r2
 8017048:	f8ad 3000 	strh.w	r3, [sp]
 801704c:	88e2      	ldrh	r2, [r4, #6]
 801704e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017052:	4620      	mov	r0, r4
 8017054:	1a9b      	subs	r3, r3, r2
 8017056:	f8ad 3002 	strh.w	r3, [sp, #2]
 801705a:	6823      	ldr	r3, [r4, #0]
 801705c:	4632      	mov	r2, r6
 801705e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017060:	4798      	blx	r3
 8017062:	69a4      	ldr	r4, [r4, #24]
 8017064:	e7db      	b.n	801701e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8017066:	b002      	add	sp, #8
 8017068:	bd70      	pop	{r4, r5, r6, pc}

0801706a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801706a:	b513      	push	{r0, r1, r4, lr}
 801706c:	6803      	ldr	r3, [r0, #0]
 801706e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8017072:	2300      	movs	r3, #0
 8017074:	e9cd 3300 	strd	r3, r3, [sp]
 8017078:	466b      	mov	r3, sp
 801707a:	47a0      	blx	r4
 801707c:	b002      	add	sp, #8
 801707e:	bd10      	pop	{r4, pc}

08017080 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8017080:	2301      	movs	r3, #1
 8017082:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017086:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801708a:	4770      	bx	lr

0801708c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801708c:	2301      	movs	r3, #1
 801708e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017092:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017096:	4770      	bx	lr

08017098 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8017098:	2201      	movs	r2, #1
 801709a:	6843      	ldr	r3, [r0, #4]
 801709c:	725a      	strb	r2, [r3, #9]
 801709e:	6840      	ldr	r0, [r0, #4]
 80170a0:	6803      	ldr	r3, [r0, #0]
 80170a2:	691b      	ldr	r3, [r3, #16]
 80170a4:	4718      	bx	r3

080170a6 <_ZN8touchgfx3HAL8flushDMAEv>:
 80170a6:	6840      	ldr	r0, [r0, #4]
 80170a8:	6803      	ldr	r3, [r0, #0]
 80170aa:	689b      	ldr	r3, [r3, #8]
 80170ac:	4718      	bx	r3

080170ae <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80170ae:	b530      	push	{r4, r5, lr}
 80170b0:	b08b      	sub	sp, #44	; 0x2c
 80170b2:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80170b6:	6804      	ldr	r4, [r0, #0]
 80170b8:	9509      	str	r5, [sp, #36]	; 0x24
 80170ba:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80170be:	9508      	str	r5, [sp, #32]
 80170c0:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80170c4:	9507      	str	r5, [sp, #28]
 80170c6:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80170ca:	9506      	str	r5, [sp, #24]
 80170cc:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80170d0:	9505      	str	r5, [sp, #20]
 80170d2:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80170d6:	9504      	str	r5, [sp, #16]
 80170d8:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80170dc:	9503      	str	r5, [sp, #12]
 80170de:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80170e2:	9502      	str	r5, [sp, #8]
 80170e4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80170e8:	e9cd 3500 	strd	r3, r5, [sp]
 80170ec:	4613      	mov	r3, r2
 80170ee:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80170f0:	2200      	movs	r2, #0
 80170f2:	47a0      	blx	r4
 80170f4:	b00b      	add	sp, #44	; 0x2c
 80170f6:	bd30      	pop	{r4, r5, pc}

080170f8 <_ZN8touchgfx3HAL10beginFrameEv>:
 80170f8:	4b04      	ldr	r3, [pc, #16]	; (801710c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80170fa:	781b      	ldrb	r3, [r3, #0]
 80170fc:	b123      	cbz	r3, 8017108 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80170fe:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8017102:	f080 0001 	eor.w	r0, r0, #1
 8017106:	4770      	bx	lr
 8017108:	2001      	movs	r0, #1
 801710a:	4770      	bx	lr
 801710c:	201984f6 	.word	0x201984f6

08017110 <_ZN8touchgfx3HAL8endFrameEv>:
 8017110:	b510      	push	{r4, lr}
 8017112:	4604      	mov	r4, r0
 8017114:	6840      	ldr	r0, [r0, #4]
 8017116:	6803      	ldr	r3, [r0, #0]
 8017118:	689b      	ldr	r3, [r3, #8]
 801711a:	4798      	blx	r3
 801711c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8017120:	b113      	cbz	r3, 8017128 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8017122:	2301      	movs	r3, #1
 8017124:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8017128:	bd10      	pop	{r4, pc}

0801712a <_ZN8touchgfx3HAL10initializeEv>:
 801712a:	b510      	push	{r4, lr}
 801712c:	4604      	mov	r4, r0
 801712e:	f7eb fc27 	bl	8002980 <_ZN8touchgfx10OSWrappers10initializeEv>
 8017132:	f7eb fa59 	bl	80025e8 <_ZN8touchgfx4GPIO4initEv>
 8017136:	6860      	ldr	r0, [r4, #4]
 8017138:	6803      	ldr	r3, [r0, #0]
 801713a:	68db      	ldr	r3, [r3, #12]
 801713c:	4798      	blx	r3
 801713e:	68e0      	ldr	r0, [r4, #12]
 8017140:	6803      	ldr	r3, [r0, #0]
 8017142:	689b      	ldr	r3, [r3, #8]
 8017144:	4798      	blx	r3
 8017146:	6823      	ldr	r3, [r4, #0]
 8017148:	4620      	mov	r0, r4
 801714a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801714e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017150:	4718      	bx	r3

08017152 <_ZN8touchgfx3HAL9taskEntryEv>:
 8017152:	4604      	mov	r4, r0
 8017154:	b508      	push	{r3, lr}
 8017156:	6803      	ldr	r3, [r0, #0]
 8017158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801715c:	4798      	blx	r3
 801715e:	6823      	ldr	r3, [r4, #0]
 8017160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017162:	4620      	mov	r0, r4
 8017164:	4798      	blx	r3
 8017166:	f7eb fcd1 	bl	8002b0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801716a:	6823      	ldr	r3, [r4, #0]
 801716c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801716e:	e7f8      	b.n	8017162 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08017170 <_ZN8touchgfx3HAL4tickEv>:
 8017170:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017172:	6803      	ldr	r3, [r0, #0]
 8017174:	4604      	mov	r4, r0
 8017176:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801717a:	4798      	blx	r3
 801717c:	4d59      	ldr	r5, [pc, #356]	; (80172e4 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801717e:	2800      	cmp	r0, #0
 8017180:	f000 8095 	beq.w	80172ae <_ZN8touchgfx3HAL4tickEv+0x13e>
 8017184:	2600      	movs	r6, #0
 8017186:	2001      	movs	r0, #1
 8017188:	f7eb fa30 	bl	80025ec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801718c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8017190:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017194:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017198:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801719c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80171a0:	b133      	cbz	r3, 80171b0 <_ZN8touchgfx3HAL4tickEv+0x40>
 80171a2:	6823      	ldr	r3, [r4, #0]
 80171a4:	4620      	mov	r0, r4
 80171a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80171aa:	4798      	blx	r3
 80171ac:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80171b0:	2601      	movs	r6, #1
 80171b2:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80171b6:	6862      	ldr	r2, [r4, #4]
 80171b8:	f083 0301 	eor.w	r3, r3, #1
 80171bc:	7253      	strb	r3, [r2, #9]
 80171be:	702e      	strb	r6, [r5, #0]
 80171c0:	f001 fed4 	bl	8018f6c <_ZN8touchgfx11Application11getInstanceEv>
 80171c4:	6803      	ldr	r3, [r0, #0]
 80171c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80171c8:	4798      	blx	r3
 80171ca:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80171ce:	b90b      	cbnz	r3, 80171d4 <_ZN8touchgfx3HAL4tickEv+0x64>
 80171d0:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80171d4:	f001 feca 	bl	8018f6c <_ZN8touchgfx11Application11getInstanceEv>
 80171d8:	6803      	ldr	r3, [r0, #0]
 80171da:	695b      	ldr	r3, [r3, #20]
 80171dc:	4798      	blx	r3
 80171de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80171e0:	6803      	ldr	r3, [r0, #0]
 80171e2:	691b      	ldr	r3, [r3, #16]
 80171e4:	4798      	blx	r3
 80171e6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80171ea:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80171ee:	3b01      	subs	r3, #1
 80171f0:	b2db      	uxtb	r3, r3
 80171f2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80171f6:	b10a      	cbz	r2, 80171fc <_ZN8touchgfx3HAL4tickEv+0x8c>
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d1eb      	bne.n	80171d4 <_ZN8touchgfx3HAL4tickEv+0x64>
 80171fc:	4a3a      	ldr	r2, [pc, #232]	; (80172e8 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80171fe:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8017202:	7813      	ldrb	r3, [r2, #0]
 8017204:	3301      	adds	r3, #1
 8017206:	b25b      	sxtb	r3, r3
 8017208:	4299      	cmp	r1, r3
 801720a:	7013      	strb	r3, [r2, #0]
 801720c:	dc10      	bgt.n	8017230 <_ZN8touchgfx3HAL4tickEv+0xc0>
 801720e:	2300      	movs	r3, #0
 8017210:	68e0      	ldr	r0, [r4, #12]
 8017212:	7013      	strb	r3, [r2, #0]
 8017214:	6803      	ldr	r3, [r0, #0]
 8017216:	aa03      	add	r2, sp, #12
 8017218:	68db      	ldr	r3, [r3, #12]
 801721a:	a902      	add	r1, sp, #8
 801721c:	4798      	blx	r3
 801721e:	6823      	ldr	r3, [r4, #0]
 8017220:	2800      	cmp	r0, #0
 8017222:	d050      	beq.n	80172c6 <_ZN8touchgfx3HAL4tickEv+0x156>
 8017224:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017228:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801722c:	4620      	mov	r0, r4
 801722e:	4798      	blx	r3
 8017230:	2300      	movs	r3, #0
 8017232:	6960      	ldr	r0, [r4, #20]
 8017234:	f88d 3007 	strb.w	r3, [sp, #7]
 8017238:	b158      	cbz	r0, 8017252 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801723a:	6803      	ldr	r3, [r0, #0]
 801723c:	f10d 0107 	add.w	r1, sp, #7
 8017240:	68db      	ldr	r3, [r3, #12]
 8017242:	4798      	blx	r3
 8017244:	b128      	cbz	r0, 8017252 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8017246:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017248:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801724c:	6803      	ldr	r3, [r0, #0]
 801724e:	68db      	ldr	r3, [r3, #12]
 8017250:	4798      	blx	r3
 8017252:	f104 001c 	add.w	r0, r4, #28
 8017256:	f004 fc49 	bl	801baec <_ZN8touchgfx8Gestures4tickEv>
 801725a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801725e:	b30b      	cbz	r3, 80172a4 <_ZN8touchgfx3HAL4tickEv+0x134>
 8017260:	6920      	ldr	r0, [r4, #16]
 8017262:	6803      	ldr	r3, [r0, #0]
 8017264:	691b      	ldr	r3, [r3, #16]
 8017266:	4798      	blx	r3
 8017268:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801726a:	4606      	mov	r6, r0
 801726c:	b903      	cbnz	r3, 8017270 <_ZN8touchgfx3HAL4tickEv+0x100>
 801726e:	6720      	str	r0, [r4, #112]	; 0x70
 8017270:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017272:	4a1e      	ldr	r2, [pc, #120]	; (80172ec <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8017274:	1af3      	subs	r3, r6, r3
 8017276:	4293      	cmp	r3, r2
 8017278:	d914      	bls.n	80172a4 <_ZN8touchgfx3HAL4tickEv+0x134>
 801727a:	6920      	ldr	r0, [r4, #16]
 801727c:	6803      	ldr	r3, [r0, #0]
 801727e:	699b      	ldr	r3, [r3, #24]
 8017280:	4798      	blx	r3
 8017282:	2264      	movs	r2, #100	; 0x64
 8017284:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017286:	1af3      	subs	r3, r6, r3
 8017288:	fbb3 f3f2 	udiv	r3, r3, r2
 801728c:	fbb0 f0f3 	udiv	r0, r0, r3
 8017290:	2800      	cmp	r0, #0
 8017292:	dc1d      	bgt.n	80172d0 <_ZN8touchgfx3HAL4tickEv+0x160>
 8017294:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8017298:	6920      	ldr	r0, [r4, #16]
 801729a:	2100      	movs	r1, #0
 801729c:	6803      	ldr	r3, [r0, #0]
 801729e:	69db      	ldr	r3, [r3, #28]
 80172a0:	4798      	blx	r3
 80172a2:	6726      	str	r6, [r4, #112]	; 0x70
 80172a4:	f001 fe62 	bl	8018f6c <_ZN8touchgfx11Application11getInstanceEv>
 80172a8:	6803      	ldr	r3, [r0, #0]
 80172aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172ac:	4798      	blx	r3
 80172ae:	6823      	ldr	r3, [r4, #0]
 80172b0:	4620      	mov	r0, r4
 80172b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80172b6:	4798      	blx	r3
 80172b8:	2001      	movs	r0, #1
 80172ba:	f7eb f9b3 	bl	8002624 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80172be:	2300      	movs	r3, #0
 80172c0:	702b      	strb	r3, [r5, #0]
 80172c2:	b004      	add	sp, #16
 80172c4:	bd70      	pop	{r4, r5, r6, pc}
 80172c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80172ca:	4620      	mov	r0, r4
 80172cc:	4798      	blx	r3
 80172ce:	e7af      	b.n	8017230 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80172d0:	2863      	cmp	r0, #99	; 0x63
 80172d2:	bfcb      	itete	gt
 80172d4:	2300      	movgt	r3, #0
 80172d6:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80172da:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80172de:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80172e2:	e7d9      	b.n	8017298 <_ZN8touchgfx3HAL4tickEv+0x128>
 80172e4:	201984fc 	.word	0x201984fc
 80172e8:	201984fd 	.word	0x201984fd
 80172ec:	05f5e100 	.word	0x05f5e100

080172f0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80172f0:	f7eb bbae 	b.w	8002a50 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080172f4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80172f4:	6581      	str	r1, [r0, #88]	; 0x58
 80172f6:	301c      	adds	r0, #28
 80172f8:	f004 bbf6 	b.w	801bae8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080172fc <_ZN8touchgfx3HAL5touchEll>:
 80172fc:	b530      	push	{r4, r5, lr}
 80172fe:	4604      	mov	r4, r0
 8017300:	b087      	sub	sp, #28
 8017302:	a804      	add	r0, sp, #16
 8017304:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8017308:	f001 fc30 	bl	8018b6c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801730c:	9b04      	ldr	r3, [sp, #16]
 801730e:	a906      	add	r1, sp, #24
 8017310:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017314:	9b05      	ldr	r3, [sp, #20]
 8017316:	a803      	add	r0, sp, #12
 8017318:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801731c:	f001 fc78 	bl	8018c10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8017320:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8017324:	f104 001c 	add.w	r0, r4, #28
 8017328:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801732c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017330:	b189      	cbz	r1, 8017356 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8017332:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8017336:	9300      	str	r3, [sp, #0]
 8017338:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801733c:	4613      	mov	r3, r2
 801733e:	462a      	mov	r2, r5
 8017340:	f004 fbe2 	bl	801bb08 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8017344:	b128      	cbz	r0, 8017352 <_ZN8touchgfx3HAL5touchEll+0x56>
 8017346:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801734a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801734c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017350:	6623      	str	r3, [r4, #96]	; 0x60
 8017352:	b007      	add	sp, #28
 8017354:	bd30      	pop	{r4, r5, pc}
 8017356:	f004 fc17 	bl	801bb88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801735a:	2301      	movs	r3, #1
 801735c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017360:	e7f1      	b.n	8017346 <_ZN8touchgfx3HAL5touchEll+0x4a>

08017362 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8017362:	b510      	push	{r4, lr}
 8017364:	2b00      	cmp	r3, #0
 8017366:	d046      	beq.n	80173f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017368:	ea81 0002 	eor.w	r0, r1, r2
 801736c:	07c4      	lsls	r4, r0, #31
 801736e:	d508      	bpl.n	8017382 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8017370:	440b      	add	r3, r1
 8017372:	3a01      	subs	r2, #1
 8017374:	428b      	cmp	r3, r1
 8017376:	d93e      	bls.n	80173f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017378:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801737c:	f801 0b01 	strb.w	r0, [r1], #1
 8017380:	e7f8      	b.n	8017374 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8017382:	07d0      	lsls	r0, r2, #31
 8017384:	bf42      	ittt	mi
 8017386:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801738a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801738e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8017392:	2b01      	cmp	r3, #1
 8017394:	d911      	bls.n	80173ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017396:	ea81 0402 	eor.w	r4, r1, r2
 801739a:	07a4      	lsls	r4, r4, #30
 801739c:	4610      	mov	r0, r2
 801739e:	d022      	beq.n	80173e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80173a0:	f023 0401 	bic.w	r4, r3, #1
 80173a4:	440c      	add	r4, r1
 80173a6:	428c      	cmp	r4, r1
 80173a8:	4602      	mov	r2, r0
 80173aa:	d904      	bls.n	80173b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80173ac:	8812      	ldrh	r2, [r2, #0]
 80173ae:	3002      	adds	r0, #2
 80173b0:	f821 2b02 	strh.w	r2, [r1], #2
 80173b4:	e7f7      	b.n	80173a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80173b6:	f003 0301 	and.w	r3, r3, #1
 80173ba:	f023 0003 	bic.w	r0, r3, #3
 80173be:	4408      	add	r0, r1
 80173c0:	4288      	cmp	r0, r1
 80173c2:	4614      	mov	r4, r2
 80173c4:	d904      	bls.n	80173d0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80173c6:	6824      	ldr	r4, [r4, #0]
 80173c8:	3204      	adds	r2, #4
 80173ca:	f841 4b04 	str.w	r4, [r1], #4
 80173ce:	e7f7      	b.n	80173c0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80173d0:	f003 0303 	and.w	r3, r3, #3
 80173d4:	440b      	add	r3, r1
 80173d6:	3a01      	subs	r2, #1
 80173d8:	428b      	cmp	r3, r1
 80173da:	d90c      	bls.n	80173f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80173dc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80173e0:	f801 0b01 	strb.w	r0, [r1], #1
 80173e4:	e7f8      	b.n	80173d8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80173e6:	0790      	lsls	r0, r2, #30
 80173e8:	d0e7      	beq.n	80173ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80173ea:	f832 0b02 	ldrh.w	r0, [r2], #2
 80173ee:	3b02      	subs	r3, #2
 80173f0:	f821 0b02 	strh.w	r0, [r1], #2
 80173f4:	e7e1      	b.n	80173ba <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80173f6:	2001      	movs	r0, #1
 80173f8:	bd10      	pop	{r4, pc}

080173fa <_ZN8touchgfx3HAL7noTouchEv>:
 80173fa:	b510      	push	{r4, lr}
 80173fc:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8017400:	4604      	mov	r4, r0
 8017402:	b153      	cbz	r3, 801741a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8017404:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8017408:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801740c:	2101      	movs	r1, #1
 801740e:	301c      	adds	r0, #28
 8017410:	f004 fbba 	bl	801bb88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017414:	2300      	movs	r3, #0
 8017416:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801741a:	bd10      	pop	{r4, pc}

0801741c <_ZN8touchgfx8Drawable5setXYEss>:
 801741c:	b570      	push	{r4, r5, r6, lr}
 801741e:	4604      	mov	r4, r0
 8017420:	4615      	mov	r5, r2
 8017422:	6803      	ldr	r3, [r0, #0]
 8017424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017426:	4798      	blx	r3
 8017428:	6823      	ldr	r3, [r4, #0]
 801742a:	4629      	mov	r1, r5
 801742c:	4620      	mov	r0, r4
 801742e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017434:	4718      	bx	r3
	...

08017438 <_ZN8touchgfx3HAL3lcdEv>:
 8017438:	4b04      	ldr	r3, [pc, #16]	; (801744c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017440:	b10a      	cbz	r2, 8017446 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8017442:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017444:	b900      	cbnz	r0, 8017448 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8017446:	6898      	ldr	r0, [r3, #8]
 8017448:	4770      	bx	lr
 801744a:	bf00      	nop
 801744c:	201984f8 	.word	0x201984f8

08017450 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8017450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017454:	4604      	mov	r4, r0
 8017456:	2000      	movs	r0, #0
 8017458:	b085      	sub	sp, #20
 801745a:	ad04      	add	r5, sp, #16
 801745c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8017460:	69a0      	ldr	r0, [r4, #24]
 8017462:	4699      	mov	r9, r3
 8017464:	6806      	ldr	r6, [r0, #0]
 8017466:	9501      	str	r5, [sp, #4]
 8017468:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801746c:	460f      	mov	r7, r1
 801746e:	9500      	str	r5, [sp, #0]
 8017470:	6835      	ldr	r5, [r6, #0]
 8017472:	4690      	mov	r8, r2
 8017474:	47a8      	blx	r5
 8017476:	4d10      	ldr	r5, [pc, #64]	; (80174b8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8017478:	4606      	mov	r6, r0
 801747a:	f8a5 9000 	strh.w	r9, [r5]
 801747e:	f7ff ffdb 	bl	8017438 <_ZN8touchgfx3HAL3lcdEv>
 8017482:	6803      	ldr	r3, [r0, #0]
 8017484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017486:	4798      	blx	r3
 8017488:	b128      	cbz	r0, 8017496 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801748a:	2801      	cmp	r0, #1
 801748c:	d00b      	beq.n	80174a6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801748e:	4630      	mov	r0, r6
 8017490:	b005      	add	sp, #20
 8017492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017496:	882b      	ldrh	r3, [r5, #0]
 8017498:	fb08 7203 	mla	r2, r8, r3, r7
 801749c:	9b03      	ldr	r3, [sp, #12]
 801749e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80174a2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80174a4:	e7f3      	b.n	801748e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80174a6:	882a      	ldrh	r2, [r5, #0]
 80174a8:	9b03      	ldr	r3, [sp, #12]
 80174aa:	fb08 7202 	mla	r2, r8, r2, r7
 80174ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80174b2:	1a9a      	subs	r2, r3, r2
 80174b4:	63e2      	str	r2, [r4, #60]	; 0x3c
 80174b6:	e7ea      	b.n	801748e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80174b8:	201984f2 	.word	0x201984f2

080174bc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80174bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174be:	b08b      	sub	sp, #44	; 0x2c
 80174c0:	4617      	mov	r7, r2
 80174c2:	4604      	mov	r4, r0
 80174c4:	460e      	mov	r6, r1
 80174c6:	461d      	mov	r5, r3
 80174c8:	f7ff ffb6 	bl	8017438 <_ZN8touchgfx3HAL3lcdEv>
 80174cc:	6803      	ldr	r3, [r0, #0]
 80174ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174d0:	4798      	blx	r3
 80174d2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80174d6:	9007      	str	r0, [sp, #28]
 80174d8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80174dc:	4b0d      	ldr	r3, [pc, #52]	; (8017514 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80174de:	6822      	ldr	r2, [r4, #0]
 80174e0:	881b      	ldrh	r3, [r3, #0]
 80174e2:	4631      	mov	r1, r6
 80174e4:	9306      	str	r3, [sp, #24]
 80174e6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80174ea:	4620      	mov	r0, r4
 80174ec:	9305      	str	r3, [sp, #20]
 80174ee:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80174f2:	9304      	str	r3, [sp, #16]
 80174f4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80174f8:	9303      	str	r3, [sp, #12]
 80174fa:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80174fe:	9302      	str	r3, [sp, #8]
 8017500:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017504:	e9cd 5300 	strd	r5, r3, [sp]
 8017508:	463b      	mov	r3, r7
 801750a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801750c:	2200      	movs	r2, #0
 801750e:	47a8      	blx	r5
 8017510:	b00b      	add	sp, #44	; 0x2c
 8017512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017514:	201984f2 	.word	0x201984f2

08017518 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8017518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801751c:	4698      	mov	r8, r3
 801751e:	6803      	ldr	r3, [r0, #0]
 8017520:	b08b      	sub	sp, #44	; 0x2c
 8017522:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8017524:	4b14      	ldr	r3, [pc, #80]	; (8017578 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8017526:	4617      	mov	r7, r2
 8017528:	f8b3 9000 	ldrh.w	r9, [r3]
 801752c:	460e      	mov	r6, r1
 801752e:	4604      	mov	r4, r0
 8017530:	f7ff ff82 	bl	8017438 <_ZN8touchgfx3HAL3lcdEv>
 8017534:	6803      	ldr	r3, [r0, #0]
 8017536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017538:	4798      	blx	r3
 801753a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801753e:	2200      	movs	r2, #0
 8017540:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017544:	2302      	movs	r3, #2
 8017546:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801754a:	2301      	movs	r3, #1
 801754c:	9305      	str	r3, [sp, #20]
 801754e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017552:	4631      	mov	r1, r6
 8017554:	9304      	str	r3, [sp, #16]
 8017556:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801755a:	4620      	mov	r0, r4
 801755c:	9303      	str	r3, [sp, #12]
 801755e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017562:	9302      	str	r3, [sp, #8]
 8017564:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017568:	e9cd 8300 	strd	r8, r3, [sp]
 801756c:	463b      	mov	r3, r7
 801756e:	47a8      	blx	r5
 8017570:	b00b      	add	sp, #44	; 0x2c
 8017572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017576:	bf00      	nop
 8017578:	201984f2 	.word	0x201984f2

0801757c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801757c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017580:	4698      	mov	r8, r3
 8017582:	6803      	ldr	r3, [r0, #0]
 8017584:	b087      	sub	sp, #28
 8017586:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8017588:	4b10      	ldr	r3, [pc, #64]	; (80175cc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801758a:	460e      	mov	r6, r1
 801758c:	f8b3 9000 	ldrh.w	r9, [r3]
 8017590:	4617      	mov	r7, r2
 8017592:	4604      	mov	r4, r0
 8017594:	f7ff ff50 	bl	8017438 <_ZN8touchgfx3HAL3lcdEv>
 8017598:	6803      	ldr	r3, [r0, #0]
 801759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801759c:	4798      	blx	r3
 801759e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80175a2:	f8cd 900c 	str.w	r9, [sp, #12]
 80175a6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80175aa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80175ae:	463a      	mov	r2, r7
 80175b0:	9302      	str	r3, [sp, #8]
 80175b2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80175b6:	4631      	mov	r1, r6
 80175b8:	9301      	str	r3, [sp, #4]
 80175ba:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80175be:	4620      	mov	r0, r4
 80175c0:	9300      	str	r3, [sp, #0]
 80175c2:	4643      	mov	r3, r8
 80175c4:	47a8      	blx	r5
 80175c6:	b007      	add	sp, #28
 80175c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175cc:	201984f2 	.word	0x201984f2

080175d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80175d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175d4:	4604      	mov	r4, r0
 80175d6:	b08f      	sub	sp, #60	; 0x3c
 80175d8:	4610      	mov	r0, r2
 80175da:	460d      	mov	r5, r1
 80175dc:	4691      	mov	r9, r2
 80175de:	461e      	mov	r6, r3
 80175e0:	f004 f878 	bl	801b6d4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80175e4:	2800      	cmp	r0, #0
 80175e6:	f000 809d 	beq.w	8017724 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80175ea:	6823      	ldr	r3, [r4, #0]
 80175ec:	4620      	mov	r0, r4
 80175ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175f0:	4798      	blx	r3
 80175f2:	6823      	ldr	r3, [r4, #0]
 80175f4:	f8df b190 	ldr.w	fp, [pc, #400]	; 8017788 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80175f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175fa:	4620      	mov	r0, r4
 80175fc:	4798      	blx	r3
 80175fe:	f8df a18c 	ldr.w	sl, [pc, #396]	; 801778c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8017602:	f8bb 3000 	ldrh.w	r3, [fp]
 8017606:	4f5d      	ldr	r7, [pc, #372]	; (801777c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017608:	9301      	str	r3, [sp, #4]
 801760a:	f8ba 3000 	ldrh.w	r3, [sl]
 801760e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8017612:	9302      	str	r3, [sp, #8]
 8017614:	883b      	ldrh	r3, [r7, #0]
 8017616:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801761a:	9303      	str	r3, [sp, #12]
 801761c:	4b58      	ldr	r3, [pc, #352]	; (8017780 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801761e:	4640      	mov	r0, r8
 8017620:	881a      	ldrh	r2, [r3, #0]
 8017622:	9305      	str	r3, [sp, #20]
 8017624:	9204      	str	r2, [sp, #16]
 8017626:	f004 f8e9 	bl	801b7fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801762a:	8038      	strh	r0, [r7, #0]
 801762c:	4640      	mov	r0, r8
 801762e:	f004 f919 	bl	801b864 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017632:	9b05      	ldr	r3, [sp, #20]
 8017634:	b280      	uxth	r0, r0
 8017636:	8018      	strh	r0, [r3, #0]
 8017638:	4b52      	ldr	r3, [pc, #328]	; (8017784 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801763a:	781b      	ldrb	r3, [r3, #0]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d174      	bne.n	801772a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8017640:	883b      	ldrh	r3, [r7, #0]
 8017642:	f8aa 0000 	strh.w	r0, [sl]
 8017646:	f8ab 3000 	strh.w	r3, [fp]
 801764a:	4648      	mov	r0, r9
 801764c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8017650:	f004 f840 	bl	801b6d4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017654:	2200      	movs	r2, #0
 8017656:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801765a:	4611      	mov	r1, r2
 801765c:	4628      	mov	r0, r5
 801765e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8017662:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8017666:	f7ff fed9 	bl	801741c <_ZN8touchgfx8Drawable5setXYEss>
 801766a:	2301      	movs	r3, #1
 801766c:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8017670:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8017674:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017678:	2b00      	cmp	r3, #0
 801767a:	dd5c      	ble.n	8017736 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801767c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017680:	2b00      	cmp	r3, #0
 8017682:	dd58      	ble.n	8017736 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8017684:	462a      	mov	r2, r5
 8017686:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801768a:	ab0a      	add	r3, sp, #40	; 0x28
 801768c:	6851      	ldr	r1, [r2, #4]
 801768e:	c303      	stmia	r3!, {r0, r1}
 8017690:	4631      	mov	r1, r6
 8017692:	a80a      	add	r0, sp, #40	; 0x28
 8017694:	f7ff fbe4 	bl	8016e60 <_ZN8touchgfx4RectaNERKS0_>
 8017698:	2100      	movs	r1, #0
 801769a:	4b38      	ldr	r3, [pc, #224]	; (801777c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801769c:	910c      	str	r1, [sp, #48]	; 0x30
 801769e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80176a2:	4b37      	ldr	r3, [pc, #220]	; (8017780 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80176a4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80176a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80176ac:	aa0a      	add	r2, sp, #40	; 0x28
 80176ae:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80176b2:	ab08      	add	r3, sp, #32
 80176b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80176b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80176bc:	4618      	mov	r0, r3
 80176be:	a90c      	add	r1, sp, #48	; 0x30
 80176c0:	f7ff fbce 	bl	8016e60 <_ZN8touchgfx4RectaNERKS0_>
 80176c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d13c      	bne.n	8017744 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80176ca:	2000      	movs	r0, #0
 80176cc:	2600      	movs	r6, #0
 80176ce:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80176d2:	696b      	ldr	r3, [r5, #20]
 80176d4:	682a      	ldr	r2, [r5, #0]
 80176d6:	616e      	str	r6, [r5, #20]
 80176d8:	9305      	str	r3, [sp, #20]
 80176da:	6892      	ldr	r2, [r2, #8]
 80176dc:	a908      	add	r1, sp, #32
 80176de:	4628      	mov	r0, r5
 80176e0:	4790      	blx	r2
 80176e2:	9b05      	ldr	r3, [sp, #20]
 80176e4:	4652      	mov	r2, sl
 80176e6:	616b      	str	r3, [r5, #20]
 80176e8:	4649      	mov	r1, r9
 80176ea:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80176ee:	4628      	mov	r0, r5
 80176f0:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80176f4:	f7ff fe92 	bl	801741c <_ZN8touchgfx8Drawable5setXYEss>
 80176f8:	9a01      	ldr	r2, [sp, #4]
 80176fa:	4b23      	ldr	r3, [pc, #140]	; (8017788 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80176fc:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8017700:	801a      	strh	r2, [r3, #0]
 8017702:	9a02      	ldr	r2, [sp, #8]
 8017704:	4b21      	ldr	r3, [pc, #132]	; (801778c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8017706:	4620      	mov	r0, r4
 8017708:	801a      	strh	r2, [r3, #0]
 801770a:	9a03      	ldr	r2, [sp, #12]
 801770c:	4b1b      	ldr	r3, [pc, #108]	; (801777c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801770e:	801a      	strh	r2, [r3, #0]
 8017710:	4b1b      	ldr	r3, [pc, #108]	; (8017780 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017712:	9a04      	ldr	r2, [sp, #16]
 8017714:	801a      	strh	r2, [r3, #0]
 8017716:	6823      	ldr	r3, [r4, #0]
 8017718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801771a:	4798      	blx	r3
 801771c:	6823      	ldr	r3, [r4, #0]
 801771e:	4620      	mov	r0, r4
 8017720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017722:	4798      	blx	r3
 8017724:	b00f      	add	sp, #60	; 0x3c
 8017726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801772a:	883b      	ldrh	r3, [r7, #0]
 801772c:	f8ab 0000 	strh.w	r0, [fp]
 8017730:	f8aa 3000 	strh.w	r3, [sl]
 8017734:	e789      	b.n	801764a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8017736:	462a      	mov	r2, r5
 8017738:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801773c:	ab0a      	add	r3, sp, #40	; 0x28
 801773e:	6851      	ldr	r1, [r2, #4]
 8017740:	c303      	stmia	r3!, {r0, r1}
 8017742:	e7a9      	b.n	8017698 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8017744:	a807      	add	r0, sp, #28
 8017746:	f004 f945 	bl	801b9d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801774a:	4606      	mov	r6, r0
 801774c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801774e:	6803      	ldr	r3, [r0, #0]
 8017750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017752:	4798      	blx	r3
 8017754:	4286      	cmp	r6, r0
 8017756:	d1b8      	bne.n	80176ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8017758:	f7ff fe6e 	bl	8017438 <_ZN8touchgfx3HAL3lcdEv>
 801775c:	6803      	ldr	r3, [r0, #0]
 801775e:	4606      	mov	r6, r0
 8017760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017762:	a807      	add	r0, sp, #28
 8017764:	9305      	str	r3, [sp, #20]
 8017766:	f004 f935 	bl	801b9d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801776a:	9b05      	ldr	r3, [sp, #20]
 801776c:	4601      	mov	r1, r0
 801776e:	4630      	mov	r0, r6
 8017770:	4798      	blx	r3
 8017772:	f080 0001 	eor.w	r0, r0, #1
 8017776:	b2c0      	uxtb	r0, r0
 8017778:	e7a8      	b.n	80176cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801777a:	bf00      	nop
 801777c:	201984ec 	.word	0x201984ec
 8017780:	201984ee 	.word	0x201984ee
 8017784:	201984f0 	.word	0x201984f0
 8017788:	201984f2 	.word	0x201984f2
 801778c:	201984f4 	.word	0x201984f4

08017790 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017790:	b510      	push	{r4, lr}
 8017792:	4b07      	ldr	r3, [pc, #28]	; (80177b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8017794:	4604      	mov	r4, r0
 8017796:	781b      	ldrb	r3, [r3, #0]
 8017798:	b13b      	cbz	r3, 80177aa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801779a:	6803      	ldr	r3, [r0, #0]
 801779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801779e:	4798      	blx	r3
 80177a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80177a2:	4283      	cmp	r3, r0
 80177a4:	d101      	bne.n	80177aa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80177a6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80177a8:	bd10      	pop	{r4, pc}
 80177aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80177ac:	e7fc      	b.n	80177a8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80177ae:	bf00      	nop
 80177b0:	201984f6 	.word	0x201984f6

080177b4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80177b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177b8:	461d      	mov	r5, r3
 80177ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80177be:	2400      	movs	r4, #0
 80177c0:	b08a      	sub	sp, #40	; 0x28
 80177c2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80177c6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80177ca:	4690      	mov	r8, r2
 80177cc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80177d0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80177d4:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80177d8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80177dc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80177e0:	4607      	mov	r7, r0
 80177e2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80177e6:	9404      	str	r4, [sp, #16]
 80177e8:	f88d 4020 	strb.w	r4, [sp, #32]
 80177ec:	f7ff ffd0 	bl	8017790 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80177f0:	fb06 8505 	mla	r5, r6, r5, r8
 80177f4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80177f8:	6878      	ldr	r0, [r7, #4]
 80177fa:	9505      	str	r5, [sp, #20]
 80177fc:	f8ad 601e 	strh.w	r6, [sp, #30]
 8017800:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017804:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8017808:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801780c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8017810:	6803      	ldr	r3, [r0, #0]
 8017812:	a901      	add	r1, sp, #4
 8017814:	685b      	ldr	r3, [r3, #4]
 8017816:	4798      	blx	r3
 8017818:	b00a      	add	sp, #40	; 0x28
 801781a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801781e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801781e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017822:	2400      	movs	r4, #0
 8017824:	461d      	mov	r5, r3
 8017826:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801782a:	4691      	mov	r9, r2
 801782c:	b08b      	sub	sp, #44	; 0x2c
 801782e:	4688      	mov	r8, r1
 8017830:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8017834:	4607      	mov	r7, r0
 8017836:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801783a:	9404      	str	r4, [sp, #16]
 801783c:	f7ff ffa8 	bl	8017790 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017840:	fb06 9505 	mla	r5, r6, r5, r9
 8017844:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017848:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801784c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017850:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017854:	6878      	ldr	r0, [r7, #4]
 8017856:	9505      	str	r5, [sp, #20]
 8017858:	f8ad 301a 	strh.w	r3, [sp, #26]
 801785c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8017860:	f8ad 601e 	strh.w	r6, [sp, #30]
 8017864:	f8cd 8010 	str.w	r8, [sp, #16]
 8017868:	f8ad 4020 	strh.w	r4, [sp, #32]
 801786c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017870:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8017874:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8017878:	6803      	ldr	r3, [r0, #0]
 801787a:	a901      	add	r1, sp, #4
 801787c:	685b      	ldr	r3, [r3, #4]
 801787e:	4798      	blx	r3
 8017880:	b00b      	add	sp, #44	; 0x2c
 8017882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08017888 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8017888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801788c:	4698      	mov	r8, r3
 801788e:	2300      	movs	r3, #0
 8017890:	b08a      	sub	sp, #40	; 0x28
 8017892:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8017896:	4606      	mov	r6, r0
 8017898:	2d0b      	cmp	r5, #11
 801789a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801789e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80178a2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80178a6:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80178aa:	9304      	str	r3, [sp, #16]
 80178ac:	d137      	bne.n	801791e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80178ae:	2380      	movs	r3, #128	; 0x80
 80178b0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80178b4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80178b8:	f88d 0020 	strb.w	r0, [sp, #32]
 80178bc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80178c0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80178c4:	4630      	mov	r0, r6
 80178c6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80178ca:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80178ce:	9203      	str	r2, [sp, #12]
 80178d0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80178d4:	f7ff ff5c 	bl	8017790 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80178d8:	2c0b      	cmp	r4, #11
 80178da:	bf8c      	ite	hi
 80178dc:	2100      	movhi	r1, #0
 80178de:	4b1b      	ldrls	r3, [pc, #108]	; (801794c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80178e0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80178e4:	bf98      	it	ls
 80178e6:	5d19      	ldrbls	r1, [r3, r4]
 80178e8:	fb02 8307 	mla	r3, r2, r7, r8
 80178ec:	10c9      	asrs	r1, r1, #3
 80178ee:	fb01 0003 	mla	r0, r1, r3, r0
 80178f2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80178f6:	9005      	str	r0, [sp, #20]
 80178f8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80178fc:	2300      	movs	r3, #0
 80178fe:	6870      	ldr	r0, [r6, #4]
 8017900:	f8ad 701e 	strh.w	r7, [sp, #30]
 8017904:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8017908:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801790c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017910:	6803      	ldr	r3, [r0, #0]
 8017912:	a901      	add	r1, sp, #4
 8017914:	685b      	ldr	r3, [r3, #4]
 8017916:	4798      	blx	r3
 8017918:	b00a      	add	sp, #40	; 0x28
 801791a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801791e:	2d02      	cmp	r5, #2
 8017920:	d109      	bne.n	8017936 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8017922:	28ff      	cmp	r0, #255	; 0xff
 8017924:	d105      	bne.n	8017932 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8017926:	f1bc 0f00 	cmp.w	ip, #0
 801792a:	bf14      	ite	ne
 801792c:	2340      	movne	r3, #64	; 0x40
 801792e:	2320      	moveq	r3, #32
 8017930:	e7be      	b.n	80178b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017932:	2340      	movs	r3, #64	; 0x40
 8017934:	e7bc      	b.n	80178b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017936:	28ff      	cmp	r0, #255	; 0xff
 8017938:	d105      	bne.n	8017946 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801793a:	f1bc 0f00 	cmp.w	ip, #0
 801793e:	bf14      	ite	ne
 8017940:	2304      	movne	r3, #4
 8017942:	2301      	moveq	r3, #1
 8017944:	e7b4      	b.n	80178b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8017946:	2304      	movs	r3, #4
 8017948:	e7b2      	b.n	80178b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801794a:	bf00      	nop
 801794c:	0802bf40 	.word	0x0802bf40

08017950 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8017950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017954:	b08b      	sub	sp, #44	; 0x2c
 8017956:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801795a:	461d      	mov	r5, r3
 801795c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017960:	bf14      	ite	ne
 8017962:	2308      	movne	r3, #8
 8017964:	2302      	moveq	r3, #2
 8017966:	2400      	movs	r4, #0
 8017968:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801796c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017970:	4688      	mov	r8, r1
 8017972:	4693      	mov	fp, r2
 8017974:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8017978:	9404      	str	r4, [sp, #16]
 801797a:	4607      	mov	r7, r0
 801797c:	f7ff ff08 	bl	8017790 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017980:	2e0b      	cmp	r6, #11
 8017982:	bf98      	it	ls
 8017984:	4b15      	ldrls	r3, [pc, #84]	; (80179dc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8017986:	fb05 b50a 	mla	r5, r5, sl, fp
 801798a:	bf98      	it	ls
 801798c:	5d9c      	ldrbls	r4, [r3, r6]
 801798e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017992:	10e4      	asrs	r4, r4, #3
 8017994:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017998:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801799c:	fb04 0405 	mla	r4, r4, r5, r0
 80179a0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80179a4:	2300      	movs	r3, #0
 80179a6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80179aa:	6878      	ldr	r0, [r7, #4]
 80179ac:	9405      	str	r4, [sp, #20]
 80179ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 80179b2:	f8ad a01e 	strh.w	sl, [sp, #30]
 80179b6:	f8cd 8010 	str.w	r8, [sp, #16]
 80179ba:	f88d 9020 	strb.w	r9, [sp, #32]
 80179be:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80179c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80179c6:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 80179ca:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80179ce:	6803      	ldr	r3, [r0, #0]
 80179d0:	a901      	add	r1, sp, #4
 80179d2:	685b      	ldr	r3, [r3, #4]
 80179d4:	4798      	blx	r3
 80179d6:	b00b      	add	sp, #44	; 0x2c
 80179d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179dc:	0802bf40 	.word	0x0802bf40

080179e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80179e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179e4:	461e      	mov	r6, r3
 80179e6:	4b0a      	ldr	r3, [pc, #40]	; (8017a10 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80179e8:	460f      	mov	r7, r1
 80179ea:	881d      	ldrh	r5, [r3, #0]
 80179ec:	4690      	mov	r8, r2
 80179ee:	f7ff fd23 	bl	8017438 <_ZN8touchgfx3HAL3lcdEv>
 80179f2:	6803      	ldr	r3, [r0, #0]
 80179f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179f6:	4798      	blx	r3
 80179f8:	280b      	cmp	r0, #11
 80179fa:	bf8e      	itee	hi
 80179fc:	2400      	movhi	r4, #0
 80179fe:	4b05      	ldrls	r3, [pc, #20]	; (8017a14 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8017a00:	5c1c      	ldrbls	r4, [r3, r0]
 8017a02:	fb08 7005 	mla	r0, r8, r5, r7
 8017a06:	10e4      	asrs	r4, r4, #3
 8017a08:	fb04 6000 	mla	r0, r4, r0, r6
 8017a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a10:	201984f2 	.word	0x201984f2
 8017a14:	0802bf40 	.word	0x0802bf40

08017a18 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8017a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a1a:	2500      	movs	r5, #0
 8017a1c:	b08b      	sub	sp, #44	; 0x2c
 8017a1e:	461f      	mov	r7, r3
 8017a20:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8017a24:	4604      	mov	r4, r0
 8017a26:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8017a2a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017a2e:	4616      	mov	r6, r2
 8017a30:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017a34:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017a38:	9504      	str	r5, [sp, #16]
 8017a3a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017a3e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017a42:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017a46:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017a4a:	f88d 3020 	strb.w	r3, [sp, #32]
 8017a4e:	f7ff fe9f 	bl	8017790 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017a52:	463a      	mov	r2, r7
 8017a54:	4631      	mov	r1, r6
 8017a56:	4603      	mov	r3, r0
 8017a58:	4620      	mov	r0, r4
 8017a5a:	f7ff ffc1 	bl	80179e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017a5e:	4b0e      	ldr	r3, [pc, #56]	; (8017a98 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8017a60:	9005      	str	r0, [sp, #20]
 8017a62:	881b      	ldrh	r3, [r3, #0]
 8017a64:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017a68:	f7ff fce6 	bl	8017438 <_ZN8touchgfx3HAL3lcdEv>
 8017a6c:	6803      	ldr	r3, [r0, #0]
 8017a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a70:	4798      	blx	r3
 8017a72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017a74:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8017a78:	9304      	str	r3, [sp, #16]
 8017a7a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017a7e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8017a82:	6860      	ldr	r0, [r4, #4]
 8017a84:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8017a88:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8017a8c:	6803      	ldr	r3, [r0, #0]
 8017a8e:	a901      	add	r1, sp, #4
 8017a90:	685b      	ldr	r3, [r3, #4]
 8017a92:	4798      	blx	r3
 8017a94:	b00b      	add	sp, #44	; 0x2c
 8017a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a98:	201984f2 	.word	0x201984f2

08017a9c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8017a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a9e:	b08d      	sub	sp, #52	; 0x34
 8017aa0:	466b      	mov	r3, sp
 8017aa2:	e883 0006 	stmia.w	r3, {r1, r2}
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	2501      	movs	r5, #1
 8017aaa:	9306      	str	r3, [sp, #24]
 8017aac:	6803      	ldr	r3, [r0, #0]
 8017aae:	9503      	str	r5, [sp, #12]
 8017ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ab2:	4604      	mov	r4, r0
 8017ab4:	f8bd 6000 	ldrh.w	r6, [sp]
 8017ab8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8017abc:	4798      	blx	r3
 8017abe:	463a      	mov	r2, r7
 8017ac0:	4631      	mov	r1, r6
 8017ac2:	4603      	mov	r3, r0
 8017ac4:	4620      	mov	r0, r4
 8017ac6:	f7ff ff8b 	bl	80179e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017aca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017acc:	9004      	str	r0, [sp, #16]
 8017ace:	9307      	str	r3, [sp, #28]
 8017ad0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017ad4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017ad8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017adc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017ae0:	4b0e      	ldr	r3, [pc, #56]	; (8017b1c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8017ae2:	881b      	ldrh	r3, [r3, #0]
 8017ae4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8017ae8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017aec:	f7ff fca4 	bl	8017438 <_ZN8touchgfx3HAL3lcdEv>
 8017af0:	6803      	ldr	r3, [r0, #0]
 8017af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017af4:	4798      	blx	r3
 8017af6:	23ff      	movs	r3, #255	; 0xff
 8017af8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8017afc:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8017b00:	6860      	ldr	r0, [r4, #4]
 8017b02:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8017b06:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017b0a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8017b0e:	6803      	ldr	r3, [r0, #0]
 8017b10:	a903      	add	r1, sp, #12
 8017b12:	685b      	ldr	r3, [r3, #4]
 8017b14:	4798      	blx	r3
 8017b16:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8017b18:	b00d      	add	sp, #52	; 0x34
 8017b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b1c:	201984f2 	.word	0x201984f2

08017b20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8017b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b24:	b08c      	sub	sp, #48	; 0x30
 8017b26:	466d      	mov	r5, sp
 8017b28:	461e      	mov	r6, r3
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	e885 0006 	stmia.w	r5, {r1, r2}
 8017b30:	2501      	movs	r5, #1
 8017b32:	9306      	str	r3, [sp, #24]
 8017b34:	6803      	ldr	r3, [r0, #0]
 8017b36:	9503      	str	r5, [sp, #12]
 8017b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b3a:	4604      	mov	r4, r0
 8017b3c:	f8bd 7000 	ldrh.w	r7, [sp]
 8017b40:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8017b44:	4798      	blx	r3
 8017b46:	4642      	mov	r2, r8
 8017b48:	4639      	mov	r1, r7
 8017b4a:	4603      	mov	r3, r0
 8017b4c:	4620      	mov	r0, r4
 8017b4e:	f7ff ff47 	bl	80179e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017b52:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017b56:	9004      	str	r0, [sp, #16]
 8017b58:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017b5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017b60:	9607      	str	r6, [sp, #28]
 8017b62:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017b66:	4b10      	ldr	r3, [pc, #64]	; (8017ba8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8017b68:	881b      	ldrh	r3, [r3, #0]
 8017b6a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8017b6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017b70:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017b74:	f7ff fc60 	bl	8017438 <_ZN8touchgfx3HAL3lcdEv>
 8017b78:	6803      	ldr	r3, [r0, #0]
 8017b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b7c:	4798      	blx	r3
 8017b7e:	23ff      	movs	r3, #255	; 0xff
 8017b80:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8017b84:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8017b88:	6860      	ldr	r0, [r4, #4]
 8017b8a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8017b8e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017b92:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8017b96:	6803      	ldr	r3, [r0, #0]
 8017b98:	a903      	add	r1, sp, #12
 8017b9a:	685b      	ldr	r3, [r3, #4]
 8017b9c:	4798      	blx	r3
 8017b9e:	4630      	mov	r0, r6
 8017ba0:	b00c      	add	sp, #48	; 0x30
 8017ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ba6:	bf00      	nop
 8017ba8:	201984f2 	.word	0x201984f2

08017bac <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8017bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bae:	b085      	sub	sp, #20
 8017bb0:	ac02      	add	r4, sp, #8
 8017bb2:	e884 0006 	stmia.w	r4, {r1, r2}
 8017bb6:	4605      	mov	r5, r0
 8017bb8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8017bbc:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8017bc0:	f7ff fde6 	bl	8017790 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017bc4:	463a      	mov	r2, r7
 8017bc6:	4603      	mov	r3, r0
 8017bc8:	4631      	mov	r1, r6
 8017bca:	4628      	mov	r0, r5
 8017bcc:	f7ff ff08 	bl	80179e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017bd0:	4a05      	ldr	r2, [pc, #20]	; (8017be8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8017bd2:	682b      	ldr	r3, [r5, #0]
 8017bd4:	8812      	ldrh	r2, [r2, #0]
 8017bd6:	9200      	str	r2, [sp, #0]
 8017bd8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8017bda:	e894 0006 	ldmia.w	r4, {r1, r2}
 8017bde:	4603      	mov	r3, r0
 8017be0:	4628      	mov	r0, r5
 8017be2:	47b0      	blx	r6
 8017be4:	b005      	add	sp, #20
 8017be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017be8:	201984f2 	.word	0x201984f2

08017bec <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8017bec:	b570      	push	{r4, r5, r6, lr}
 8017bee:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8017bf2:	4604      	mov	r4, r0
 8017bf4:	b19b      	cbz	r3, 8017c1e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8017bf6:	2002      	movs	r0, #2
 8017bf8:	f7ea fd30 	bl	800265c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8017c02:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8017c06:	6823      	ldr	r3, [r4, #0]
 8017c08:	4620      	mov	r0, r4
 8017c0a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8017c0e:	f7ff fdbf 	bl	8017790 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017c12:	462b      	mov	r3, r5
 8017c14:	4601      	mov	r1, r0
 8017c16:	4620      	mov	r0, r4
 8017c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c1c:	4718      	bx	r3
 8017c1e:	bd70      	pop	{r4, r5, r6, pc}

08017c20 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8017c20:	b570      	push	{r4, r5, r6, lr}
 8017c22:	4605      	mov	r5, r0
 8017c24:	460c      	mov	r4, r1
 8017c26:	2003      	movs	r0, #3
 8017c28:	b149      	cbz	r1, 8017c3e <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8017c2a:	f7ea fcdf 	bl	80025ec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017c2e:	6928      	ldr	r0, [r5, #16]
 8017c30:	b168      	cbz	r0, 8017c4e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8017c32:	2101      	movs	r1, #1
 8017c34:	6803      	ldr	r3, [r0, #0]
 8017c36:	695b      	ldr	r3, [r3, #20]
 8017c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c3c:	4718      	bx	r3
 8017c3e:	f7ea fcf1 	bl	8002624 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017c42:	6928      	ldr	r0, [r5, #16]
 8017c44:	b118      	cbz	r0, 8017c4e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8017c46:	6803      	ldr	r3, [r0, #0]
 8017c48:	4621      	mov	r1, r4
 8017c4a:	695b      	ldr	r3, [r3, #20]
 8017c4c:	e7f4      	b.n	8017c38 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8017c4e:	bd70      	pop	{r4, r5, r6, pc}

08017c50 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8017c50:	b538      	push	{r3, r4, r5, lr}
 8017c52:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8017c56:	4604      	mov	r4, r0
 8017c58:	428b      	cmp	r3, r1
 8017c5a:	460d      	mov	r5, r1
 8017c5c:	d006      	beq.n	8017c6c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8017c5e:	6803      	ldr	r3, [r0, #0]
 8017c60:	b929      	cbnz	r1, 8017c6e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8017c62:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8017c66:	4798      	blx	r3
 8017c68:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8017c6c:	bd38      	pop	{r3, r4, r5, pc}
 8017c6e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8017c72:	e7f8      	b.n	8017c66 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08017c74 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8017c74:	b510      	push	{r4, lr}
 8017c76:	4b0d      	ldr	r3, [pc, #52]	; (8017cac <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8017c78:	4604      	mov	r4, r0
 8017c7a:	781b      	ldrb	r3, [r3, #0]
 8017c7c:	b95b      	cbnz	r3, 8017c96 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017c7e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8017c82:	2b02      	cmp	r3, #2
 8017c84:	d007      	beq.n	8017c96 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017c86:	6840      	ldr	r0, [r0, #4]
 8017c88:	f000 f914 	bl	8017eb4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8017c8c:	b118      	cbz	r0, 8017c96 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017c8e:	6862      	ldr	r2, [r4, #4]
 8017c90:	7a53      	ldrb	r3, [r2, #9]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d0fc      	beq.n	8017c90 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8017c96:	f7ea fec5 	bl	8002a24 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017c9a:	4620      	mov	r0, r4
 8017c9c:	2100      	movs	r1, #0
 8017c9e:	f7ff ffd7 	bl	8017c50 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8017ca2:	4620      	mov	r0, r4
 8017ca4:	f7ff fd74 	bl	8017790 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017ca8:	bd10      	pop	{r4, pc}
 8017caa:	bf00      	nop
 8017cac:	201984f6 	.word	0x201984f6

08017cb0 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8017cb0:	2000      	movs	r0, #0
 8017cb2:	4770      	bx	lr

08017cb4 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8017cb4:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8017cb8:	1a13      	subs	r3, r2, r0
 8017cba:	4258      	negs	r0, r3
 8017cbc:	4158      	adcs	r0, r3
 8017cbe:	4770      	bx	lr

08017cc0 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8017cc0:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8017cc4:	1a9b      	subs	r3, r3, r2
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	bfdc      	itt	le
 8017cca:	6882      	ldrle	r2, [r0, #8]
 8017ccc:	189b      	addle	r3, r3, r2
 8017cce:	2b01      	cmp	r3, #1
 8017cd0:	bfcc      	ite	gt
 8017cd2:	2000      	movgt	r0, #0
 8017cd4:	2001      	movle	r0, #1
 8017cd6:	4770      	bx	lr

08017cd8 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8017cd8:	6902      	ldr	r2, [r0, #16]
 8017cda:	6843      	ldr	r3, [r0, #4]
 8017cdc:	2024      	movs	r0, #36	; 0x24
 8017cde:	fb00 3002 	mla	r0, r0, r2, r3
 8017ce2:	4770      	bx	lr

08017ce4 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8017ce4:	6803      	ldr	r3, [r0, #0]
 8017ce6:	691b      	ldr	r3, [r3, #16]
 8017ce8:	4718      	bx	r3

08017cea <_ZN8touchgfx13DMA_Interface7executeEv>:
 8017cea:	2301      	movs	r3, #1
 8017cec:	b570      	push	{r4, r5, r6, lr}
 8017cee:	7203      	strb	r3, [r0, #8]
 8017cf0:	4604      	mov	r4, r0
 8017cf2:	6840      	ldr	r0, [r0, #4]
 8017cf4:	6803      	ldr	r3, [r0, #0]
 8017cf6:	699b      	ldr	r3, [r3, #24]
 8017cf8:	4798      	blx	r3
 8017cfa:	6803      	ldr	r3, [r0, #0]
 8017cfc:	4605      	mov	r5, r0
 8017cfe:	2b40      	cmp	r3, #64	; 0x40
 8017d00:	d00c      	beq.n	8017d1c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017d02:	d810      	bhi.n	8017d26 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8017d04:	2b04      	cmp	r3, #4
 8017d06:	d01d      	beq.n	8017d44 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8017d08:	d804      	bhi.n	8017d14 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8017d0a:	2b01      	cmp	r3, #1
 8017d0c:	d006      	beq.n	8017d1c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017d0e:	2b02      	cmp	r3, #2
 8017d10:	d02c      	beq.n	8017d6c <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8017d12:	bd70      	pop	{r4, r5, r6, pc}
 8017d14:	2b08      	cmp	r3, #8
 8017d16:	d01d      	beq.n	8017d54 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8017d18:	2b20      	cmp	r3, #32
 8017d1a:	d1fa      	bne.n	8017d12 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8017d1c:	6823      	ldr	r3, [r4, #0]
 8017d1e:	4620      	mov	r0, r4
 8017d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d22:	4798      	blx	r3
 8017d24:	e013      	b.n	8017d4e <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8017d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017d2a:	d0f7      	beq.n	8017d1c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017d2c:	d804      	bhi.n	8017d38 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8017d2e:	2b80      	cmp	r3, #128	; 0x80
 8017d30:	d0f4      	beq.n	8017d1c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017d36:	e7f0      	b.n	8017d1a <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8017d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017d3c:	d0ee      	beq.n	8017d1c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017d42:	e7e5      	b.n	8017d10 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8017d44:	6823      	ldr	r3, [r4, #0]
 8017d46:	7f01      	ldrb	r1, [r0, #28]
 8017d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d4a:	4620      	mov	r0, r4
 8017d4c:	4798      	blx	r3
 8017d4e:	6823      	ldr	r3, [r4, #0]
 8017d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d52:	e006      	b.n	8017d62 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8017d54:	6823      	ldr	r3, [r4, #0]
 8017d56:	7f01      	ldrb	r1, [r0, #28]
 8017d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d5a:	4620      	mov	r0, r4
 8017d5c:	4798      	blx	r3
 8017d5e:	6823      	ldr	r3, [r4, #0]
 8017d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017d62:	4629      	mov	r1, r5
 8017d64:	4620      	mov	r0, r4
 8017d66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d6a:	4718      	bx	r3
 8017d6c:	6823      	ldr	r3, [r4, #0]
 8017d6e:	4620      	mov	r0, r4
 8017d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d72:	4798      	blx	r3
 8017d74:	e7f3      	b.n	8017d5e <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08017d76 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8017d76:	4770      	bx	lr

08017d78 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8017d78:	4770      	bx	lr

08017d7a <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8017d7a:	4770      	bx	lr

08017d7c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8017d7c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8017d80:	1ad2      	subs	r2, r2, r3
 8017d82:	2a00      	cmp	r2, #0
 8017d84:	b510      	push	{r4, lr}
 8017d86:	bfdc      	itt	le
 8017d88:	6884      	ldrle	r4, [r0, #8]
 8017d8a:	1912      	addle	r2, r2, r4
 8017d8c:	2a01      	cmp	r2, #1
 8017d8e:	dd16      	ble.n	8017dbe <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8017d90:	2424      	movs	r4, #36	; 0x24
 8017d92:	6842      	ldr	r2, [r0, #4]
 8017d94:	fb04 2303 	mla	r3, r4, r3, r2
 8017d98:	f101 0220 	add.w	r2, r1, #32
 8017d9c:	f851 4b04 	ldr.w	r4, [r1], #4
 8017da0:	4291      	cmp	r1, r2
 8017da2:	f843 4b04 	str.w	r4, [r3], #4
 8017da6:	d1f9      	bne.n	8017d9c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8017da8:	780a      	ldrb	r2, [r1, #0]
 8017daa:	701a      	strb	r2, [r3, #0]
 8017dac:	68c3      	ldr	r3, [r0, #12]
 8017dae:	6882      	ldr	r2, [r0, #8]
 8017db0:	3301      	adds	r3, #1
 8017db2:	429a      	cmp	r2, r3
 8017db4:	bfd8      	it	le
 8017db6:	1a9b      	suble	r3, r3, r2
 8017db8:	f3bf 8f5b 	dmb	ish
 8017dbc:	60c3      	str	r3, [r0, #12]
 8017dbe:	bd10      	pop	{r4, pc}

08017dc0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8017dc0:	6903      	ldr	r3, [r0, #16]
 8017dc2:	6882      	ldr	r2, [r0, #8]
 8017dc4:	3301      	adds	r3, #1
 8017dc6:	429a      	cmp	r2, r3
 8017dc8:	bfd8      	it	le
 8017dca:	1a9b      	suble	r3, r3, r2
 8017dcc:	f3bf 8f5b 	dmb	ish
 8017dd0:	6103      	str	r3, [r0, #16]
 8017dd2:	4770      	bx	lr

08017dd4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8017dd4:	b570      	push	{r4, r5, r6, lr}
 8017dd6:	4604      	mov	r4, r0
 8017dd8:	460e      	mov	r6, r1
 8017dda:	6860      	ldr	r0, [r4, #4]
 8017ddc:	6803      	ldr	r3, [r0, #0]
 8017dde:	685b      	ldr	r3, [r3, #4]
 8017de0:	4798      	blx	r3
 8017de2:	2800      	cmp	r0, #0
 8017de4:	d1f9      	bne.n	8017dda <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8017de6:	4d0d      	ldr	r5, [pc, #52]	; (8017e1c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8017de8:	6828      	ldr	r0, [r5, #0]
 8017dea:	6803      	ldr	r3, [r0, #0]
 8017dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017dee:	4798      	blx	r3
 8017df0:	f7ea fe44 	bl	8002a7c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8017df4:	6828      	ldr	r0, [r5, #0]
 8017df6:	2101      	movs	r1, #1
 8017df8:	f7ff ff2a 	bl	8017c50 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8017dfc:	6860      	ldr	r0, [r4, #4]
 8017dfe:	4631      	mov	r1, r6
 8017e00:	6803      	ldr	r3, [r0, #0]
 8017e02:	689b      	ldr	r3, [r3, #8]
 8017e04:	4798      	blx	r3
 8017e06:	6823      	ldr	r3, [r4, #0]
 8017e08:	4620      	mov	r0, r4
 8017e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e0c:	4798      	blx	r3
 8017e0e:	6828      	ldr	r0, [r5, #0]
 8017e10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e14:	6803      	ldr	r3, [r0, #0]
 8017e16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e18:	4718      	bx	r3
 8017e1a:	bf00      	nop
 8017e1c:	201984f8 	.word	0x201984f8

08017e20 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8017e20:	b508      	push	{r3, lr}
 8017e22:	f7ea fdff 	bl	8002a24 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017e26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017e2a:	f7ea be11 	b.w	8002a50 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017e2e <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8017e2e:	b510      	push	{r4, lr}
 8017e30:	4604      	mov	r4, r0
 8017e32:	2114      	movs	r1, #20
 8017e34:	f011 fbb5 	bl	80295a2 <_ZdlPvj>
 8017e38:	4620      	mov	r0, r4
 8017e3a:	bd10      	pop	{r4, pc}

08017e3c <_ZN8touchgfx13DMA_Interface5startEv>:
 8017e3c:	b510      	push	{r4, lr}
 8017e3e:	4604      	mov	r4, r0
 8017e40:	6840      	ldr	r0, [r0, #4]
 8017e42:	6803      	ldr	r3, [r0, #0]
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	4798      	blx	r3
 8017e48:	b948      	cbnz	r0, 8017e5e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017e4a:	7a63      	ldrb	r3, [r4, #9]
 8017e4c:	b13b      	cbz	r3, 8017e5e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017e4e:	7a23      	ldrb	r3, [r4, #8]
 8017e50:	b92b      	cbnz	r3, 8017e5e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017e52:	6823      	ldr	r3, [r4, #0]
 8017e54:	4620      	mov	r0, r4
 8017e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e5c:	4718      	bx	r3
 8017e5e:	bd10      	pop	{r4, pc}

08017e60 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8017e60:	b570      	push	{r4, r5, r6, lr}
 8017e62:	4604      	mov	r4, r0
 8017e64:	6840      	ldr	r0, [r0, #4]
 8017e66:	6803      	ldr	r3, [r0, #0]
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	4798      	blx	r3
 8017e6c:	4605      	mov	r5, r0
 8017e6e:	b930      	cbnz	r0, 8017e7e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8017e70:	7a23      	ldrb	r3, [r4, #8]
 8017e72:	b123      	cbz	r3, 8017e7e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8017e74:	6860      	ldr	r0, [r4, #4]
 8017e76:	6803      	ldr	r3, [r0, #0]
 8017e78:	695b      	ldr	r3, [r3, #20]
 8017e7a:	4798      	blx	r3
 8017e7c:	7225      	strb	r5, [r4, #8]
 8017e7e:	6860      	ldr	r0, [r4, #4]
 8017e80:	6803      	ldr	r3, [r0, #0]
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	4798      	blx	r3
 8017e86:	b928      	cbnz	r0, 8017e94 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8017e88:	6823      	ldr	r3, [r4, #0]
 8017e8a:	4620      	mov	r0, r4
 8017e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e92:	4718      	bx	r3
 8017e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e98:	f7ea bdf6 	b.w	8002a88 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08017e9c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8017e9c:	6082      	str	r2, [r0, #8]
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	b510      	push	{r4, lr}
 8017ea2:	4c03      	ldr	r4, [pc, #12]	; (8017eb0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8017ea4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017ea8:	e9c0 4100 	strd	r4, r1, [r0]
 8017eac:	bd10      	pop	{r4, pc}
 8017eae:	bf00      	nop
 8017eb0:	0802bf54 	.word	0x0802bf54

08017eb4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8017eb4:	6840      	ldr	r0, [r0, #4]
 8017eb6:	6803      	ldr	r3, [r0, #0]
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	4718      	bx	r3

08017ebc <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	8083      	strh	r3, [r0, #4]
 8017ec0:	80c3      	strh	r3, [r0, #6]
 8017ec2:	8003      	strh	r3, [r0, #0]
 8017ec4:	8043      	strh	r3, [r0, #2]
 8017ec6:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8017eca:	2bff      	cmp	r3, #255	; 0xff
 8017ecc:	bf01      	itttt	eq
 8017ece:	890b      	ldrheq	r3, [r1, #8]
 8017ed0:	8083      	strheq	r3, [r0, #4]
 8017ed2:	894b      	ldrheq	r3, [r1, #10]
 8017ed4:	80c3      	strheq	r3, [r0, #6]
 8017ed6:	4770      	bx	lr

08017ed8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017eda:	4604      	mov	r4, r0
 8017edc:	466b      	mov	r3, sp
 8017ede:	6808      	ldr	r0, [r1, #0]
 8017ee0:	6849      	ldr	r1, [r1, #4]
 8017ee2:	c303      	stmia	r3!, {r0, r1}
 8017ee4:	6823      	ldr	r3, [r4, #0]
 8017ee6:	4669      	mov	r1, sp
 8017ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017eea:	4620      	mov	r0, r4
 8017eec:	4798      	blx	r3
 8017eee:	4b08      	ldr	r3, [pc, #32]	; (8017f10 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017ef6:	b10a      	cbz	r2, 8017efc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017ef8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017efa:	b900      	cbnz	r0, 8017efe <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017efc:	6898      	ldr	r0, [r3, #8]
 8017efe:	6803      	ldr	r3, [r0, #0]
 8017f00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017f02:	6a1d      	ldr	r5, [r3, #32]
 8017f04:	4669      	mov	r1, sp
 8017f06:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017f0a:	47a8      	blx	r5
 8017f0c:	b003      	add	sp, #12
 8017f0e:	bd30      	pop	{r4, r5, pc}
 8017f10:	201984f8 	.word	0x201984f8

08017f14 <_ZN8touchgfx3BoxD1Ev>:
 8017f14:	4770      	bx	lr

08017f16 <_ZN8touchgfx3BoxD0Ev>:
 8017f16:	b510      	push	{r4, lr}
 8017f18:	4604      	mov	r4, r0
 8017f1a:	212c      	movs	r1, #44	; 0x2c
 8017f1c:	f011 fb41 	bl	80295a2 <_ZdlPvj>
 8017f20:	4620      	mov	r0, r4
 8017f22:	bd10      	pop	{r4, pc}

08017f24 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8017f24:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8017f28:	b12a      	cbz	r2, 8017f36 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8017f2a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8017f2e:	b112      	cbz	r2, 8017f36 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8017f30:	6803      	ldr	r3, [r0, #0]
 8017f32:	695b      	ldr	r3, [r3, #20]
 8017f34:	4718      	bx	r3
 8017f36:	4770      	bx	lr

08017f38 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8017f38:	b510      	push	{r4, lr}
 8017f3a:	6803      	ldr	r3, [r0, #0]
 8017f3c:	460c      	mov	r4, r1
 8017f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f40:	4798      	blx	r3
 8017f42:	1b03      	subs	r3, r0, r4
 8017f44:	4258      	negs	r0, r3
 8017f46:	4158      	adcs	r0, r3
 8017f48:	bd10      	pop	{r4, pc}
	...

08017f4c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8017f4c:	4b01      	ldr	r3, [pc, #4]	; (8017f54 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8017f4e:	6019      	str	r1, [r3, #0]
 8017f50:	4770      	bx	lr
 8017f52:	bf00      	nop
 8017f54:	20198500 	.word	0x20198500

08017f58 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f5c:	4696      	mov	lr, r2
 8017f5e:	4614      	mov	r4, r2
 8017f60:	4605      	mov	r5, r0
 8017f62:	460e      	mov	r6, r1
 8017f64:	461f      	mov	r7, r3
 8017f66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017f6a:	b097      	sub	sp, #92	; 0x5c
 8017f6c:	f10d 0c1c 	add.w	ip, sp, #28
 8017f70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017f74:	f8de 3000 	ldr.w	r3, [lr]
 8017f78:	f104 0e14 	add.w	lr, r4, #20
 8017f7c:	f8cc 3000 	str.w	r3, [ip]
 8017f80:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017f84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017f88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017f8c:	f8de 3000 	ldr.w	r3, [lr]
 8017f90:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017f94:	f8cc 3000 	str.w	r3, [ip]
 8017f98:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017f9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017fa0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017fa4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8017fa8:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8017fac:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8017fb0:	f8de 3000 	ldr.w	r3, [lr]
 8017fb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017fb6:	f8cc 3000 	str.w	r3, [ip]
 8017fba:	9201      	str	r2, [sp, #4]
 8017fbc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017fc0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017fc2:	682b      	ldr	r3, [r5, #0]
 8017fc4:	9200      	str	r2, [sp, #0]
 8017fc6:	f8cd 8008 	str.w	r8, [sp, #8]
 8017fca:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8017fce:	aa07      	add	r2, sp, #28
 8017fd0:	463b      	mov	r3, r7
 8017fd2:	4631      	mov	r1, r6
 8017fd4:	4628      	mov	r0, r5
 8017fd6:	47d8      	blx	fp
 8017fd8:	46a6      	mov	lr, r4
 8017fda:	f10d 0c1c 	add.w	ip, sp, #28
 8017fde:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017fe2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017fe6:	f8de 3000 	ldr.w	r3, [lr]
 8017fea:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017fee:	f8cc 3000 	str.w	r3, [ip]
 8017ff2:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017ff6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017ffa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ffe:	f8de 3000 	ldr.w	r3, [lr]
 8018002:	343c      	adds	r4, #60	; 0x3c
 8018004:	f8cc 3000 	str.w	r3, [ip]
 8018008:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801800c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801800e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018012:	6823      	ldr	r3, [r4, #0]
 8018014:	4631      	mov	r1, r6
 8018016:	f8cc 3000 	str.w	r3, [ip]
 801801a:	682b      	ldr	r3, [r5, #0]
 801801c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018020:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018022:	f8cd 8008 	str.w	r8, [sp, #8]
 8018026:	9201      	str	r2, [sp, #4]
 8018028:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801802a:	4628      	mov	r0, r5
 801802c:	9200      	str	r2, [sp, #0]
 801802e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8018030:	aa07      	add	r2, sp, #28
 8018032:	463b      	mov	r3, r7
 8018034:	47a0      	blx	r4
 8018036:	b017      	add	sp, #92	; 0x5c
 8018038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801803c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018040:	b08d      	sub	sp, #52	; 0x34
 8018042:	4688      	mov	r8, r1
 8018044:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018046:	f8d3 c000 	ldr.w	ip, [r3]
 801804a:	680f      	ldr	r7, [r1, #0]
 801804c:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8018050:	eba7 070c 	sub.w	r7, r7, ip
 8018054:	42bc      	cmp	r4, r7
 8018056:	bfa8      	it	ge
 8018058:	463c      	movge	r4, r7
 801805a:	ee07 4a90 	vmov	s15, r4
 801805e:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8018062:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018066:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801806a:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801806e:	edd3 6a07 	vldr	s13, [r3, #28]
 8018072:	ee25 4a04 	vmul.f32	s8, s10, s8
 8018076:	ee65 4a24 	vmul.f32	s9, s10, s9
 801807a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801807e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018082:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8018086:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801808a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801808e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018090:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8018094:	f9b1 9000 	ldrsh.w	r9, [r1]
 8018098:	f9ba 1000 	ldrsh.w	r1, [sl]
 801809c:	eb09 0e0c 	add.w	lr, r9, ip
 80180a0:	4571      	cmp	r1, lr
 80180a2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80180a6:	ee32 1a05 	vadd.f32	s2, s4, s10
 80180aa:	ee36 0a84 	vadd.f32	s0, s13, s8
 80180ae:	ee61 1a87 	vmul.f32	s3, s3, s14
 80180b2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80180b6:	f340 808c 	ble.w	80181d2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80180ba:	eba1 060e 	sub.w	r6, r1, lr
 80180be:	fb96 f5f4 	sdiv	r5, r6, r4
 80180c2:	ee07 5a10 	vmov	s14, r5
 80180c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80180ca:	2d00      	cmp	r5, #0
 80180cc:	fb04 6615 	mls	r6, r4, r5, r6
 80180d0:	eea7 0a04 	vfma.f32	s0, s14, s8
 80180d4:	eee7 0a24 	vfma.f32	s1, s14, s9
 80180d8:	eea7 1a05 	vfma.f32	s2, s14, s10
 80180dc:	dd12      	ble.n	8018104 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80180de:	ee70 6a44 	vsub.f32	s13, s0, s8
 80180e2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80180e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180ea:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80180ee:	bf14      	ite	ne
 80180f0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80180f4:	eeb0 7a67 	vmoveq.f32	s14, s15
 80180f8:	ee31 2a45 	vsub.f32	s4, s2, s10
 80180fc:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018100:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018104:	fb05 f204 	mul.w	r2, r5, r4
 8018108:	1abf      	subs	r7, r7, r2
 801810a:	4494      	add	ip, r2
 801810c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8018110:	4411      	add	r1, r2
 8018112:	eb09 020c 	add.w	r2, r9, ip
 8018116:	443a      	add	r2, r7
 8018118:	b209      	sxth	r1, r1
 801811a:	428a      	cmp	r2, r1
 801811c:	bfc4      	itt	gt
 801811e:	eba1 0209 	subgt.w	r2, r1, r9
 8018122:	eba2 070c 	subgt.w	r7, r2, ip
 8018126:	2f00      	cmp	r7, #0
 8018128:	dd50      	ble.n	80181cc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801812a:	fb97 f1f4 	sdiv	r1, r7, r4
 801812e:	fb04 7211 	mls	r2, r4, r1, r7
 8018132:	b90a      	cbnz	r2, 8018138 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8018134:	4622      	mov	r2, r4
 8018136:	3901      	subs	r1, #1
 8018138:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801813c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018140:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018144:	ee21 3a23 	vmul.f32	s6, s2, s7
 8018148:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801814c:	ee17 7a90 	vmov	r7, s15
 8018150:	ee73 7a42 	vsub.f32	s15, s6, s4
 8018154:	eef0 6a42 	vmov.f32	s13, s4
 8018158:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801815c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018160:	ee17 ca90 	vmov	ip, s15
 8018164:	eeb0 7a61 	vmov.f32	s14, s3
 8018168:	6840      	ldr	r0, [r0, #4]
 801816a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801816e:	f8d0 a000 	ldr.w	sl, [r0]
 8018172:	900b      	str	r0, [sp, #44]	; 0x2c
 8018174:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8018176:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801817a:	9008      	str	r0, [sp, #32]
 801817c:	9818      	ldr	r0, [sp, #96]	; 0x60
 801817e:	695b      	ldr	r3, [r3, #20]
 8018180:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8018184:	fb9c fcf4 	sdiv	ip, ip, r4
 8018188:	445b      	add	r3, fp
 801818a:	9307      	str	r3, [sp, #28]
 801818c:	ee16 3a90 	vmov	r3, s13
 8018190:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018194:	fb0c 3306 	mla	r3, ip, r6, r3
 8018198:	fb97 f7f4 	sdiv	r7, r7, r4
 801819c:	9302      	str	r3, [sp, #8]
 801819e:	ee17 3a10 	vmov	r3, s14
 80181a2:	2900      	cmp	r1, #0
 80181a4:	bfcc      	ite	gt
 80181a6:	46a1      	movgt	r9, r4
 80181a8:	4691      	movle	r9, r2
 80181aa:	44b6      	add	lr, r6
 80181ac:	fb04 e505 	mla	r5, r4, r5, lr
 80181b0:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80181b4:	fb07 3706 	mla	r7, r7, r6, r3
 80181b8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80181bc:	e9cd 4700 	strd	r4, r7, [sp]
 80181c0:	eba9 0306 	sub.w	r3, r9, r6
 80181c4:	f8da 4008 	ldr.w	r4, [sl, #8]
 80181c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80181ca:	47a0      	blx	r4
 80181cc:	b00d      	add	sp, #52	; 0x34
 80181ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181d2:	2500      	movs	r5, #0
 80181d4:	462e      	mov	r6, r5
 80181d6:	e799      	b.n	801810c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080181d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80181d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181dc:	461d      	mov	r5, r3
 80181de:	b0db      	sub	sp, #364	; 0x16c
 80181e0:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80181e4:	910f      	str	r1, [sp, #60]	; 0x3c
 80181e6:	930a      	str	r3, [sp, #40]	; 0x28
 80181e8:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80181ec:	9009      	str	r0, [sp, #36]	; 0x24
 80181ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80181f0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80181f4:	4614      	mov	r4, r2
 80181f6:	9310      	str	r3, [sp, #64]	; 0x40
 80181f8:	6803      	ldr	r3, [r0, #0]
 80181fa:	4629      	mov	r1, r5
 80181fc:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80181fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018202:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8018206:	47b8      	blx	r7
 8018208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801820a:	6058      	str	r0, [r3, #4]
 801820c:	2800      	cmp	r0, #0
 801820e:	f000 83a1 	beq.w	8018954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018212:	ed94 7a02 	vldr	s14, [r4, #8]
 8018216:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801821a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801821e:	682b      	ldr	r3, [r5, #0]
 8018220:	9314      	str	r3, [sp, #80]	; 0x50
 8018222:	686b      	ldr	r3, [r5, #4]
 8018224:	9315      	str	r3, [sp, #84]	; 0x54
 8018226:	4bc1      	ldr	r3, [pc, #772]	; (801852c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8018228:	7819      	ldrb	r1, [r3, #0]
 801822a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801822e:	2900      	cmp	r1, #0
 8018230:	bf16      	itet	ne
 8018232:	4619      	movne	r1, r3
 8018234:	4611      	moveq	r1, r2
 8018236:	4613      	movne	r3, r2
 8018238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801823c:	9116      	str	r1, [sp, #88]	; 0x58
 801823e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8018242:	f240 8387 	bls.w	8018954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018246:	ed94 7a07 	vldr	s14, [r4, #28]
 801824a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801824e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018252:	f240 837f 	bls.w	8018954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018256:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801825a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801825e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018262:	f240 8377 	bls.w	8018954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018266:	6822      	ldr	r2, [r4, #0]
 8018268:	4bb1      	ldr	r3, [pc, #708]	; (8018530 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801826a:	429a      	cmp	r2, r3
 801826c:	f2c0 8372 	blt.w	8018954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018270:	49b0      	ldr	r1, [pc, #704]	; (8018534 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8018272:	6963      	ldr	r3, [r4, #20]
 8018274:	428a      	cmp	r2, r1
 8018276:	f300 836d 	bgt.w	8018954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801827a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801827e:	48ae      	ldr	r0, [pc, #696]	; (8018538 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8018280:	33ff      	adds	r3, #255	; 0xff
 8018282:	4283      	cmp	r3, r0
 8018284:	f200 8366 	bhi.w	8018954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018288:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801828a:	4dac      	ldr	r5, [pc, #688]	; (801853c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801828c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018290:	33ff      	adds	r3, #255	; 0xff
 8018292:	42ab      	cmp	r3, r5
 8018294:	f200 835e 	bhi.w	8018954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018298:	6862      	ldr	r2, [r4, #4]
 801829a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801829e:	33ff      	adds	r3, #255	; 0xff
 80182a0:	4283      	cmp	r3, r0
 80182a2:	f200 8357 	bhi.w	8018954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80182a6:	69a1      	ldr	r1, [r4, #24]
 80182a8:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80182ac:	33ff      	adds	r3, #255	; 0xff
 80182ae:	4283      	cmp	r3, r0
 80182b0:	f200 8350 	bhi.w	8018954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80182b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80182b6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80182ba:	30ff      	adds	r0, #255	; 0xff
 80182bc:	42a8      	cmp	r0, r5
 80182be:	f200 8349 	bhi.w	8018954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80182c2:	428a      	cmp	r2, r1
 80182c4:	f280 8110 	bge.w	80184e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80182c8:	429a      	cmp	r2, r3
 80182ca:	f300 8119 	bgt.w	8018500 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80182ce:	4299      	cmp	r1, r3
 80182d0:	f280 811d 	bge.w	801850e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80182d4:	2502      	movs	r5, #2
 80182d6:	2701      	movs	r7, #1
 80182d8:	46a9      	mov	r9, r5
 80182da:	46b8      	mov	r8, r7
 80182dc:	f04f 0a00 	mov.w	sl, #0
 80182e0:	4621      	mov	r1, r4
 80182e2:	a849      	add	r0, sp, #292	; 0x124
 80182e4:	f002 ffc0 	bl	801b268 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80182e8:	4622      	mov	r2, r4
 80182ea:	4653      	mov	r3, sl
 80182ec:	a949      	add	r1, sp, #292	; 0x124
 80182ee:	f8cd 9000 	str.w	r9, [sp]
 80182f2:	a819      	add	r0, sp, #100	; 0x64
 80182f4:	f003 f8ea 	bl	801b4cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80182f8:	4622      	mov	r2, r4
 80182fa:	4653      	mov	r3, sl
 80182fc:	a949      	add	r1, sp, #292	; 0x124
 80182fe:	f8cd 8000 	str.w	r8, [sp]
 8018302:	a829      	add	r0, sp, #164	; 0xa4
 8018304:	f003 f8e2 	bl	801b4cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018308:	4643      	mov	r3, r8
 801830a:	4622      	mov	r2, r4
 801830c:	a949      	add	r1, sp, #292	; 0x124
 801830e:	f8cd 9000 	str.w	r9, [sp]
 8018312:	a839      	add	r0, sp, #228	; 0xe4
 8018314:	f003 f8da 	bl	801b4cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018318:	42af      	cmp	r7, r5
 801831a:	bfb5      	itete	lt
 801831c:	2300      	movlt	r3, #0
 801831e:	2301      	movge	r3, #1
 8018320:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018322:	930e      	strge	r3, [sp, #56]	; 0x38
 8018324:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018326:	af12      	add	r7, sp, #72	; 0x48
 8018328:	e893 0003 	ldmia.w	r3, {r0, r1}
 801832c:	bfb9      	ittee	lt
 801832e:	ad29      	addlt	r5, sp, #164	; 0xa4
 8018330:	ac19      	addlt	r4, sp, #100	; 0x64
 8018332:	ad19      	addge	r5, sp, #100	; 0x64
 8018334:	ac29      	addge	r4, sp, #164	; 0xa4
 8018336:	e887 0003 	stmia.w	r7, {r0, r1}
 801833a:	b928      	cbnz	r0, 8018348 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801833c:	4b80      	ldr	r3, [pc, #512]	; (8018540 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801833e:	6818      	ldr	r0, [r3, #0]
 8018340:	6803      	ldr	r3, [r0, #0]
 8018342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018344:	4798      	blx	r3
 8018346:	6038      	str	r0, [r7, #0]
 8018348:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801834a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801834e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018352:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018354:	930c      	str	r3, [sp, #48]	; 0x30
 8018356:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018358:	6963      	ldr	r3, [r4, #20]
 801835a:	440b      	add	r3, r1
 801835c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018360:	4408      	add	r0, r1
 8018362:	b200      	sxth	r0, r0
 8018364:	4283      	cmp	r3, r0
 8018366:	900d      	str	r0, [sp, #52]	; 0x34
 8018368:	f280 80dd 	bge.w	8018526 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801836c:	428b      	cmp	r3, r1
 801836e:	da08      	bge.n	8018382 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018370:	2a00      	cmp	r2, #0
 8018372:	dd06      	ble.n	8018382 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018374:	1acb      	subs	r3, r1, r3
 8018376:	429a      	cmp	r2, r3
 8018378:	f2c0 80e4 	blt.w	8018544 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801837c:	2b00      	cmp	r3, #0
 801837e:	f300 80e2 	bgt.w	8018546 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8018382:	6967      	ldr	r7, [r4, #20]
 8018384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018386:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801838a:	443b      	add	r3, r7
 801838c:	461f      	mov	r7, r3
 801838e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018390:	1bdf      	subs	r7, r3, r7
 8018392:	4297      	cmp	r7, r2
 8018394:	bfa8      	it	ge
 8018396:	4617      	movge	r7, r2
 8018398:	2f00      	cmp	r7, #0
 801839a:	f340 8166 	ble.w	801866a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801839e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80183a0:	6829      	ldr	r1, [r5, #0]
 80183a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80183a6:	f9bb 3000 	ldrsh.w	r3, [fp]
 80183aa:	4411      	add	r1, r2
 80183ac:	4299      	cmp	r1, r3
 80183ae:	6820      	ldr	r0, [r4, #0]
 80183b0:	dd1a      	ble.n	80183e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80183b2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80183b6:	4402      	add	r2, r0
 80183b8:	440b      	add	r3, r1
 80183ba:	b21b      	sxth	r3, r3
 80183bc:	429a      	cmp	r2, r3
 80183be:	dc13      	bgt.n	80183e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80183c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80183c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183c4:	a912      	add	r1, sp, #72	; 0x48
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	9206      	str	r2, [sp, #24]
 80183ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80183cc:	9500      	str	r5, [sp, #0]
 80183ce:	9205      	str	r2, [sp, #20]
 80183d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80183d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80183d4:	e9cd b203 	strd	fp, r2, [sp, #12]
 80183d8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80183da:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80183de:	aa49      	add	r2, sp, #292	; 0x124
 80183e0:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80183e4:	4623      	mov	r3, r4
 80183e6:	47c8      	blx	r9
 80183e8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80183ec:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80183f0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80183f4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80183f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80183fc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8018400:	ed94 6a08 	vldr	s12, [r4, #32]
 8018404:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018408:	edd4 6a07 	vldr	s13, [r4, #28]
 801840c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018410:	441a      	add	r2, r3
 8018412:	6963      	ldr	r3, [r4, #20]
 8018414:	68a1      	ldr	r1, [r4, #8]
 8018416:	3301      	adds	r3, #1
 8018418:	6163      	str	r3, [r4, #20]
 801841a:	69a3      	ldr	r3, [r4, #24]
 801841c:	6022      	str	r2, [r4, #0]
 801841e:	3b01      	subs	r3, #1
 8018420:	61a3      	str	r3, [r4, #24]
 8018422:	6923      	ldr	r3, [r4, #16]
 8018424:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018428:	440b      	add	r3, r1
 801842a:	68e1      	ldr	r1, [r4, #12]
 801842c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018430:	428b      	cmp	r3, r1
 8018432:	edc4 6a07 	vstr	s13, [r4, #28]
 8018436:	6123      	str	r3, [r4, #16]
 8018438:	db15      	blt.n	8018466 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801843a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801843e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018442:	edc4 6a07 	vstr	s13, [r4, #28]
 8018446:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801844a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801844e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018452:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018456:	ee77 7a27 	vadd.f32	s15, s14, s15
 801845a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801845e:	3201      	adds	r2, #1
 8018460:	1a5b      	subs	r3, r3, r1
 8018462:	6022      	str	r2, [r4, #0]
 8018464:	6123      	str	r3, [r4, #16]
 8018466:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801846a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801846e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8018472:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018476:	ee37 7a27 	vadd.f32	s14, s14, s15
 801847a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801847e:	ed95 6a08 	vldr	s12, [r5, #32]
 8018482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018486:	edd5 6a07 	vldr	s13, [r5, #28]
 801848a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801848e:	441a      	add	r2, r3
 8018490:	696b      	ldr	r3, [r5, #20]
 8018492:	68a9      	ldr	r1, [r5, #8]
 8018494:	3301      	adds	r3, #1
 8018496:	616b      	str	r3, [r5, #20]
 8018498:	69ab      	ldr	r3, [r5, #24]
 801849a:	602a      	str	r2, [r5, #0]
 801849c:	3b01      	subs	r3, #1
 801849e:	61ab      	str	r3, [r5, #24]
 80184a0:	692b      	ldr	r3, [r5, #16]
 80184a2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80184a6:	440b      	add	r3, r1
 80184a8:	68e9      	ldr	r1, [r5, #12]
 80184aa:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80184ae:	428b      	cmp	r3, r1
 80184b0:	edc5 6a07 	vstr	s13, [r5, #28]
 80184b4:	612b      	str	r3, [r5, #16]
 80184b6:	db15      	blt.n	80184e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80184b8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80184bc:	ee76 6a26 	vadd.f32	s13, s12, s13
 80184c0:	edc5 6a07 	vstr	s13, [r5, #28]
 80184c4:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80184c8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80184cc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80184d0:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80184d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80184d8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80184dc:	3201      	adds	r2, #1
 80184de:	1a5b      	subs	r3, r3, r1
 80184e0:	602a      	str	r2, [r5, #0]
 80184e2:	612b      	str	r3, [r5, #16]
 80184e4:	3f01      	subs	r7, #1
 80184e6:	e757      	b.n	8018398 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80184e8:	4299      	cmp	r1, r3
 80184ea:	dc13      	bgt.n	8018514 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80184ec:	429a      	cmp	r2, r3
 80184ee:	da14      	bge.n	801851a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80184f0:	2502      	movs	r5, #2
 80184f2:	2703      	movs	r7, #3
 80184f4:	46a9      	mov	r9, r5
 80184f6:	f04f 0800 	mov.w	r8, #0
 80184fa:	f04f 0a01 	mov.w	sl, #1
 80184fe:	e6ef      	b.n	80182e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018500:	2501      	movs	r5, #1
 8018502:	2700      	movs	r7, #0
 8018504:	46a9      	mov	r9, r5
 8018506:	46b8      	mov	r8, r7
 8018508:	f04f 0a02 	mov.w	sl, #2
 801850c:	e6e8      	b.n	80182e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801850e:	2501      	movs	r5, #1
 8018510:	2702      	movs	r7, #2
 8018512:	e6e1      	b.n	80182d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8018514:	2500      	movs	r5, #0
 8018516:	2701      	movs	r7, #1
 8018518:	e7f4      	b.n	8018504 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801851a:	2702      	movs	r7, #2
 801851c:	2503      	movs	r5, #3
 801851e:	f04f 0900 	mov.w	r9, #0
 8018522:	46b8      	mov	r8, r7
 8018524:	e7e9      	b.n	80184fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8018526:	4613      	mov	r3, r2
 8018528:	e728      	b.n	801837c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801852a:	bf00      	nop
 801852c:	201984f0 	.word	0x201984f0
 8018530:	fffd8f01 	.word	0xfffd8f01
 8018534:	00027100 	.word	0x00027100
 8018538:	0004e1ff 	.word	0x0004e1ff
 801853c:	0004e1fe 	.word	0x0004e1fe
 8018540:	201984f8 	.word	0x201984f8
 8018544:	4613      	mov	r3, r2
 8018546:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801854a:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801854e:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8018552:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8018556:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801855a:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801855e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8018562:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8018566:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801856a:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801856e:	469e      	mov	lr, r3
 8018570:	469c      	mov	ip, r3
 8018572:	f04f 0900 	mov.w	r9, #0
 8018576:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018578:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801857a:	9111      	str	r1, [sp, #68]	; 0x44
 801857c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8018580:	f1bc 0f00 	cmp.w	ip, #0
 8018584:	d147      	bne.n	8018616 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018586:	eb03 0c07 	add.w	ip, r3, r7
 801858a:	1ad7      	subs	r7, r2, r3
 801858c:	f1b9 0f00 	cmp.w	r9, #0
 8018590:	d009      	beq.n	80185a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018592:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8018596:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801859a:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801859e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80185a2:	9029      	str	r0, [sp, #164]	; 0xa4
 80185a4:	912d      	str	r1, [sp, #180]	; 0xb4
 80185a6:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80185aa:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80185ae:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80185b2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80185b6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80185ba:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80185be:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80185c2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80185c6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80185ca:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80185ce:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80185d2:	f04f 0800 	mov.w	r8, #0
 80185d6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80185d8:	9111      	str	r1, [sp, #68]	; 0x44
 80185da:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80185de:	f1be 0f00 	cmp.w	lr, #0
 80185e2:	d031      	beq.n	8018648 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80185e4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80185e6:	4450      	add	r0, sl
 80185e8:	4431      	add	r1, r6
 80185ea:	4549      	cmp	r1, r9
 80185ec:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80185f0:	ee37 7a04 	vadd.f32	s14, s14, s8
 80185f4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80185f8:	db08      	blt.n	801860c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80185fa:	ee77 7a85 	vadd.f32	s15, s15, s10
 80185fe:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018602:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018606:	3001      	adds	r0, #1
 8018608:	eba1 0109 	sub.w	r1, r1, r9
 801860c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018610:	f04f 0801 	mov.w	r8, #1
 8018614:	e7e3      	b.n	80185de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8018616:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018618:	4450      	add	r0, sl
 801861a:	4431      	add	r1, r6
 801861c:	4541      	cmp	r1, r8
 801861e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018622:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018626:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801862a:	db08      	blt.n	801863e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801862c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018630:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018634:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018638:	3001      	adds	r0, #1
 801863a:	eba1 0108 	sub.w	r1, r1, r8
 801863e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018642:	f04f 0901 	mov.w	r9, #1
 8018646:	e79b      	b.n	8018580 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8018648:	449c      	add	ip, r3
 801864a:	1aff      	subs	r7, r7, r3
 801864c:	f1b8 0f00 	cmp.w	r8, #0
 8018650:	d009      	beq.n	8018666 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8018652:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018656:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801865a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801865e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018662:	9019      	str	r0, [sp, #100]	; 0x64
 8018664:	911d      	str	r1, [sp, #116]	; 0x74
 8018666:	1ad2      	subs	r2, r2, r3
 8018668:	e68b      	b.n	8018382 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801866a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801866c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801866e:	2b00      	cmp	r3, #0
 8018670:	f000 80d1 	beq.w	8018816 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018674:	ad19      	add	r5, sp, #100	; 0x64
 8018676:	ac39      	add	r4, sp, #228	; 0xe4
 8018678:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801867a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801867e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018682:	930c      	str	r3, [sp, #48]	; 0x30
 8018684:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018686:	6963      	ldr	r3, [r4, #20]
 8018688:	440b      	add	r3, r1
 801868a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801868e:	4408      	add	r0, r1
 8018690:	b200      	sxth	r0, r0
 8018692:	4283      	cmp	r3, r0
 8018694:	900d      	str	r0, [sp, #52]	; 0x34
 8018696:	f280 80c1 	bge.w	801881c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801869a:	428b      	cmp	r3, r1
 801869c:	da08      	bge.n	80186b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801869e:	2a00      	cmp	r2, #0
 80186a0:	dd06      	ble.n	80186b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80186a2:	1acb      	subs	r3, r1, r3
 80186a4:	429a      	cmp	r2, r3
 80186a6:	f2c0 80bb 	blt.w	8018820 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	f300 80b9 	bgt.w	8018822 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80186b0:	6967      	ldr	r7, [r4, #20]
 80186b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80186b4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80186b8:	443b      	add	r3, r7
 80186ba:	461f      	mov	r7, r3
 80186bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80186be:	1bdf      	subs	r7, r3, r7
 80186c0:	4297      	cmp	r7, r2
 80186c2:	bfa8      	it	ge
 80186c4:	4617      	movge	r7, r2
 80186c6:	2f00      	cmp	r7, #0
 80186c8:	f340 813c 	ble.w	8018944 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80186cc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80186ce:	6829      	ldr	r1, [r5, #0]
 80186d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80186d4:	f9bb 3000 	ldrsh.w	r3, [fp]
 80186d8:	4411      	add	r1, r2
 80186da:	4299      	cmp	r1, r3
 80186dc:	6820      	ldr	r0, [r4, #0]
 80186de:	dd1a      	ble.n	8018716 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80186e0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80186e4:	4402      	add	r2, r0
 80186e6:	440b      	add	r3, r1
 80186e8:	b21b      	sxth	r3, r3
 80186ea:	429a      	cmp	r2, r3
 80186ec:	dc13      	bgt.n	8018716 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80186ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80186f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186f2:	a912      	add	r1, sp, #72	; 0x48
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	9206      	str	r2, [sp, #24]
 80186f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80186fa:	9500      	str	r5, [sp, #0]
 80186fc:	9205      	str	r2, [sp, #20]
 80186fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018702:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018706:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8018708:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801870c:	aa49      	add	r2, sp, #292	; 0x124
 801870e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8018712:	4623      	mov	r3, r4
 8018714:	47c8      	blx	r9
 8018716:	e9d4 2300 	ldrd	r2, r3, [r4]
 801871a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801871e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8018722:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018726:	ee37 7a27 	vadd.f32	s14, s14, s15
 801872a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801872e:	ed94 6a08 	vldr	s12, [r4, #32]
 8018732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018736:	edd4 6a07 	vldr	s13, [r4, #28]
 801873a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801873e:	441a      	add	r2, r3
 8018740:	6963      	ldr	r3, [r4, #20]
 8018742:	68a1      	ldr	r1, [r4, #8]
 8018744:	3301      	adds	r3, #1
 8018746:	6163      	str	r3, [r4, #20]
 8018748:	69a3      	ldr	r3, [r4, #24]
 801874a:	6022      	str	r2, [r4, #0]
 801874c:	3b01      	subs	r3, #1
 801874e:	61a3      	str	r3, [r4, #24]
 8018750:	6923      	ldr	r3, [r4, #16]
 8018752:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018756:	440b      	add	r3, r1
 8018758:	68e1      	ldr	r1, [r4, #12]
 801875a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801875e:	428b      	cmp	r3, r1
 8018760:	edc4 6a07 	vstr	s13, [r4, #28]
 8018764:	6123      	str	r3, [r4, #16]
 8018766:	db15      	blt.n	8018794 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018768:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801876c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018770:	edc4 6a07 	vstr	s13, [r4, #28]
 8018774:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018778:	ee36 7a87 	vadd.f32	s14, s13, s14
 801877c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018780:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018788:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801878c:	3201      	adds	r2, #1
 801878e:	1a5b      	subs	r3, r3, r1
 8018790:	6022      	str	r2, [r4, #0]
 8018792:	6123      	str	r3, [r4, #16]
 8018794:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018798:	e9d5 2300 	ldrd	r2, r3, [r5]
 801879c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80187a0:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80187a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80187a8:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80187ac:	ed95 6a08 	vldr	s12, [r5, #32]
 80187b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80187b4:	edd5 6a07 	vldr	s13, [r5, #28]
 80187b8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80187bc:	441a      	add	r2, r3
 80187be:	696b      	ldr	r3, [r5, #20]
 80187c0:	68a9      	ldr	r1, [r5, #8]
 80187c2:	3301      	adds	r3, #1
 80187c4:	616b      	str	r3, [r5, #20]
 80187c6:	69ab      	ldr	r3, [r5, #24]
 80187c8:	602a      	str	r2, [r5, #0]
 80187ca:	3b01      	subs	r3, #1
 80187cc:	61ab      	str	r3, [r5, #24]
 80187ce:	692b      	ldr	r3, [r5, #16]
 80187d0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80187d4:	440b      	add	r3, r1
 80187d6:	68e9      	ldr	r1, [r5, #12]
 80187d8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80187dc:	428b      	cmp	r3, r1
 80187de:	edc5 6a07 	vstr	s13, [r5, #28]
 80187e2:	612b      	str	r3, [r5, #16]
 80187e4:	db15      	blt.n	8018812 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80187e6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80187ea:	ee76 6a26 	vadd.f32	s13, s12, s13
 80187ee:	edc5 6a07 	vstr	s13, [r5, #28]
 80187f2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80187f6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80187fa:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80187fe:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8018802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018806:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801880a:	3201      	adds	r2, #1
 801880c:	1a5b      	subs	r3, r3, r1
 801880e:	602a      	str	r2, [r5, #0]
 8018810:	612b      	str	r3, [r5, #16]
 8018812:	3f01      	subs	r7, #1
 8018814:	e757      	b.n	80186c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8018816:	ad39      	add	r5, sp, #228	; 0xe4
 8018818:	ac19      	add	r4, sp, #100	; 0x64
 801881a:	e72d      	b.n	8018678 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801881c:	4613      	mov	r3, r2
 801881e:	e744      	b.n	80186aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8018820:	4613      	mov	r3, r2
 8018822:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8018826:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801882a:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801882e:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8018832:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8018836:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801883a:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801883e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8018842:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8018846:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801884a:	469e      	mov	lr, r3
 801884c:	461f      	mov	r7, r3
 801884e:	f04f 0900 	mov.w	r9, #0
 8018852:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8018854:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8018858:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801885a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801885e:	960e      	str	r6, [sp, #56]	; 0x38
 8018860:	2f00      	cmp	r7, #0
 8018862:	d146      	bne.n	80188f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018864:	449c      	add	ip, r3
 8018866:	1ad7      	subs	r7, r2, r3
 8018868:	f1b9 0f00 	cmp.w	r9, #0
 801886c:	d009      	beq.n	8018882 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801886e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8018872:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8018876:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801887a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801887e:	9039      	str	r0, [sp, #228]	; 0xe4
 8018880:	913d      	str	r1, [sp, #244]	; 0xf4
 8018882:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018886:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801888a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801888e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018892:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018896:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801889a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801889e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80188a2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80188a6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80188aa:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80188ae:	f04f 0800 	mov.w	r8, #0
 80188b2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80188b4:	910e      	str	r1, [sp, #56]	; 0x38
 80188b6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80188ba:	f1be 0f00 	cmp.w	lr, #0
 80188be:	d030      	beq.n	8018922 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80188c0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80188c2:	4450      	add	r0, sl
 80188c4:	4431      	add	r1, r6
 80188c6:	4549      	cmp	r1, r9
 80188c8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80188cc:	ee37 7a04 	vadd.f32	s14, s14, s8
 80188d0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80188d4:	db08      	blt.n	80188e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80188d6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80188da:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80188de:	ee37 7a06 	vadd.f32	s14, s14, s12
 80188e2:	3001      	adds	r0, #1
 80188e4:	eba1 0109 	sub.w	r1, r1, r9
 80188e8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80188ec:	f04f 0801 	mov.w	r8, #1
 80188f0:	e7e3      	b.n	80188ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80188f2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80188f4:	4450      	add	r0, sl
 80188f6:	4431      	add	r1, r6
 80188f8:	4541      	cmp	r1, r8
 80188fa:	ee37 7a24 	vadd.f32	s14, s14, s9
 80188fe:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018902:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018906:	db08      	blt.n	801891a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8018908:	ee76 6a85 	vadd.f32	s13, s13, s10
 801890c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018910:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018914:	3001      	adds	r0, #1
 8018916:	eba1 0108 	sub.w	r1, r1, r8
 801891a:	3f01      	subs	r7, #1
 801891c:	f04f 0901 	mov.w	r9, #1
 8018920:	e79e      	b.n	8018860 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8018922:	449c      	add	ip, r3
 8018924:	1aff      	subs	r7, r7, r3
 8018926:	f1b8 0f00 	cmp.w	r8, #0
 801892a:	d009      	beq.n	8018940 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801892c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018930:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8018934:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018938:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801893c:	9019      	str	r0, [sp, #100]	; 0x64
 801893e:	911d      	str	r1, [sp, #116]	; 0x74
 8018940:	1ad2      	subs	r2, r2, r3
 8018942:	e6b5      	b.n	80186b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018944:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	b923      	cbnz	r3, 8018954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801894a:	4b04      	ldr	r3, [pc, #16]	; (801895c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801894c:	6818      	ldr	r0, [r3, #0]
 801894e:	6803      	ldr	r3, [r0, #0]
 8018950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018952:	4798      	blx	r3
 8018954:	b05b      	add	sp, #364	; 0x16c
 8018956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801895a:	bf00      	nop
 801895c:	201984f8 	.word	0x201984f8

08018960 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018960:	2b03      	cmp	r3, #3
 8018962:	d818      	bhi.n	8018996 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8018964:	e8df f003 	tbb	[pc, r3]
 8018968:	130d0602 	.word	0x130d0602
 801896c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018970:	1850      	adds	r0, r2, r1
 8018972:	4770      	bx	lr
 8018974:	8803      	ldrh	r3, [r0, #0]
 8018976:	8880      	ldrh	r0, [r0, #4]
 8018978:	4418      	add	r0, r3
 801897a:	b200      	sxth	r0, r0
 801897c:	1a80      	subs	r0, r0, r2
 801897e:	3801      	subs	r0, #1
 8018980:	4770      	bx	lr
 8018982:	8803      	ldrh	r3, [r0, #0]
 8018984:	8880      	ldrh	r0, [r0, #4]
 8018986:	4418      	add	r0, r3
 8018988:	b200      	sxth	r0, r0
 801898a:	1a40      	subs	r0, r0, r1
 801898c:	e7f7      	b.n	801897e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801898e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8018992:	4410      	add	r0, r2
 8018994:	4770      	bx	lr
 8018996:	2000      	movs	r0, #0
 8018998:	4770      	bx	lr

0801899a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801899a:	2b03      	cmp	r3, #3
 801899c:	d817      	bhi.n	80189ce <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801899e:	e8df f003 	tbb	[pc, r3]
 80189a2:	0602      	.short	0x0602
 80189a4:	1009      	.short	0x1009
 80189a6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80189aa:	1850      	adds	r0, r2, r1
 80189ac:	4770      	bx	lr
 80189ae:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80189b2:	e7fa      	b.n	80189aa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80189b4:	8843      	ldrh	r3, [r0, #2]
 80189b6:	88c0      	ldrh	r0, [r0, #6]
 80189b8:	4418      	add	r0, r3
 80189ba:	b200      	sxth	r0, r0
 80189bc:	1a80      	subs	r0, r0, r2
 80189be:	3801      	subs	r0, #1
 80189c0:	4770      	bx	lr
 80189c2:	8843      	ldrh	r3, [r0, #2]
 80189c4:	88c0      	ldrh	r0, [r0, #6]
 80189c6:	4418      	add	r0, r3
 80189c8:	b200      	sxth	r0, r0
 80189ca:	1a40      	subs	r0, r0, r1
 80189cc:	e7f7      	b.n	80189be <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80189ce:	2000      	movs	r0, #0
 80189d0:	4770      	bx	lr
	...

080189d4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80189d4:	2200      	movs	r2, #0
 80189d6:	4b01      	ldr	r3, [pc, #4]	; (80189dc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80189d8:	601a      	str	r2, [r3, #0]
 80189da:	4770      	bx	lr
 80189dc:	20198500 	.word	0x20198500

080189e0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80189e0:	4603      	mov	r3, r0
 80189e2:	b1c8      	cbz	r0, 8018a18 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80189e4:	0c02      	lsrs	r2, r0, #16
 80189e6:	0412      	lsls	r2, r2, #16
 80189e8:	b9a2      	cbnz	r2, 8018a14 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80189ea:	0403      	lsls	r3, r0, #16
 80189ec:	2010      	movs	r0, #16
 80189ee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80189f2:	bf04      	itt	eq
 80189f4:	021b      	lsleq	r3, r3, #8
 80189f6:	3008      	addeq	r0, #8
 80189f8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80189fc:	bf04      	itt	eq
 80189fe:	011b      	lsleq	r3, r3, #4
 8018a00:	3004      	addeq	r0, #4
 8018a02:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018a06:	bf04      	itt	eq
 8018a08:	009b      	lsleq	r3, r3, #2
 8018a0a:	3002      	addeq	r0, #2
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	db04      	blt.n	8018a1a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8018a10:	3001      	adds	r0, #1
 8018a12:	4770      	bx	lr
 8018a14:	2000      	movs	r0, #0
 8018a16:	e7ea      	b.n	80189ee <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8018a18:	2020      	movs	r0, #32
 8018a1a:	4770      	bx	lr

08018a1c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8018a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a20:	b087      	sub	sp, #28
 8018a22:	4681      	mov	r9, r0
 8018a24:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8018a28:	4610      	mov	r0, r2
 8018a2a:	4698      	mov	r8, r3
 8018a2c:	460d      	mov	r5, r1
 8018a2e:	b981      	cbnz	r1, 8018a52 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8018a30:	b14b      	cbz	r3, 8018a46 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8018a32:	460b      	mov	r3, r1
 8018a34:	e9cd 4700 	strd	r4, r7, [sp]
 8018a38:	464a      	mov	r2, r9
 8018a3a:	4641      	mov	r1, r8
 8018a3c:	f7ff ffee 	bl	8018a1c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018a40:	b007      	add	sp, #28
 8018a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a46:	f04f 33ff 	mov.w	r3, #4294967295
 8018a4a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8018a4e:	603b      	str	r3, [r7, #0]
 8018a50:	e7f6      	b.n	8018a40 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8018a52:	fa32 fa01 	lsrs.w	sl, r2, r1
 8018a56:	d107      	bne.n	8018a68 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8018a58:	fb09 f602 	mul.w	r6, r9, r2
 8018a5c:	fbb6 f0f4 	udiv	r0, r6, r4
 8018a60:	fb04 6610 	mls	r6, r4, r0, r6
 8018a64:	603e      	str	r6, [r7, #0]
 8018a66:	e7eb      	b.n	8018a40 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8018a68:	fa09 fb01 	lsl.w	fp, r9, r1
 8018a6c:	fbbb f3f4 	udiv	r3, fp, r4
 8018a70:	2601      	movs	r6, #1
 8018a72:	9302      	str	r3, [sp, #8]
 8018a74:	408e      	lsls	r6, r1
 8018a76:	fb0a f303 	mul.w	r3, sl, r3
 8018a7a:	3e01      	subs	r6, #1
 8018a7c:	4016      	ands	r6, r2
 8018a7e:	4630      	mov	r0, r6
 8018a80:	9303      	str	r3, [sp, #12]
 8018a82:	f7ff ffad 	bl	80189e0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018a86:	464a      	mov	r2, r9
 8018a88:	460b      	mov	r3, r1
 8018a8a:	e9cd 4700 	strd	r4, r7, [sp]
 8018a8e:	4601      	mov	r1, r0
 8018a90:	4630      	mov	r0, r6
 8018a92:	f7ff ffc3 	bl	8018a1c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018a96:	9b02      	ldr	r3, [sp, #8]
 8018a98:	4606      	mov	r6, r0
 8018a9a:	fb04 bb13 	mls	fp, r4, r3, fp
 8018a9e:	4658      	mov	r0, fp
 8018aa0:	eb05 0108 	add.w	r1, r5, r8
 8018aa4:	f7ff ff9c 	bl	80189e0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018aa8:	ab05      	add	r3, sp, #20
 8018aaa:	e9cd 4300 	strd	r4, r3, [sp]
 8018aae:	465a      	mov	r2, fp
 8018ab0:	4603      	mov	r3, r0
 8018ab2:	4650      	mov	r0, sl
 8018ab4:	f7ff ffb2 	bl	8018a1c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018ab8:	6839      	ldr	r1, [r7, #0]
 8018aba:	9a05      	ldr	r2, [sp, #20]
 8018abc:	9b03      	ldr	r3, [sp, #12]
 8018abe:	4411      	add	r1, r2
 8018ac0:	fbb1 f2f4 	udiv	r2, r1, r4
 8018ac4:	fb04 1412 	mls	r4, r4, r2, r1
 8018ac8:	18d3      	adds	r3, r2, r3
 8018aca:	441e      	add	r6, r3
 8018acc:	4430      	add	r0, r6
 8018ace:	603c      	str	r4, [r7, #0]
 8018ad0:	e7b6      	b.n	8018a40 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08018ad2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8018ad2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018ad6:	b085      	sub	sp, #20
 8018ad8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018ada:	f1b0 0900 	subs.w	r9, r0, #0
 8018ade:	461d      	mov	r5, r3
 8018ae0:	bfbf      	itttt	lt
 8018ae2:	6823      	ldrlt	r3, [r4, #0]
 8018ae4:	f1c9 0900 	rsblt	r9, r9, #0
 8018ae8:	425b      	neglt	r3, r3
 8018aea:	6023      	strlt	r3, [r4, #0]
 8018aec:	bfb4      	ite	lt
 8018aee:	f04f 36ff 	movlt.w	r6, #4294967295
 8018af2:	2601      	movge	r6, #1
 8018af4:	2a00      	cmp	r2, #0
 8018af6:	4617      	mov	r7, r2
 8018af8:	da04      	bge.n	8018b04 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8018afa:	6823      	ldr	r3, [r4, #0]
 8018afc:	4257      	negs	r7, r2
 8018afe:	425b      	negs	r3, r3
 8018b00:	4276      	negs	r6, r6
 8018b02:	6023      	str	r3, [r4, #0]
 8018b04:	2d00      	cmp	r5, #0
 8018b06:	4638      	mov	r0, r7
 8018b08:	bfba      	itte	lt
 8018b0a:	426d      	neglt	r5, r5
 8018b0c:	f04f 38ff 	movlt.w	r8, #4294967295
 8018b10:	f04f 0801 	movge.w	r8, #1
 8018b14:	f7ff ff64 	bl	80189e0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018b18:	ab03      	add	r3, sp, #12
 8018b1a:	e9cd 5300 	strd	r5, r3, [sp]
 8018b1e:	463a      	mov	r2, r7
 8018b20:	4603      	mov	r3, r0
 8018b22:	4648      	mov	r0, r9
 8018b24:	f7ff ff7a 	bl	8018a1c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018b28:	6823      	ldr	r3, [r4, #0]
 8018b2a:	9a03      	ldr	r2, [sp, #12]
 8018b2c:	4546      	cmp	r6, r8
 8018b2e:	441a      	add	r2, r3
 8018b30:	fb92 f3f5 	sdiv	r3, r2, r5
 8018b34:	4418      	add	r0, r3
 8018b36:	fb05 2313 	mls	r3, r5, r3, r2
 8018b3a:	bf18      	it	ne
 8018b3c:	4240      	negne	r0, r0
 8018b3e:	1c72      	adds	r2, r6, #1
 8018b40:	6023      	str	r3, [r4, #0]
 8018b42:	d105      	bne.n	8018b50 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	f1c3 0200 	rsb	r2, r3, #0
 8018b4a:	db0b      	blt.n	8018b64 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8018b4c:	6022      	str	r2, [r4, #0]
 8018b4e:	e006      	b.n	8018b5e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018b50:	2e01      	cmp	r6, #1
 8018b52:	d104      	bne.n	8018b5e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	da02      	bge.n	8018b5e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018b58:	442b      	add	r3, r5
 8018b5a:	3801      	subs	r0, #1
 8018b5c:	6023      	str	r3, [r4, #0]
 8018b5e:	b005      	add	sp, #20
 8018b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b64:	3801      	subs	r0, #1
 8018b66:	1b52      	subs	r2, r2, r5
 8018b68:	e7f0      	b.n	8018b4c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08018b6c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018b6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018b70:	4c1c      	ldr	r4, [pc, #112]	; (8018be4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8018b72:	4605      	mov	r5, r0
 8018b74:	69a3      	ldr	r3, [r4, #24]
 8018b76:	6807      	ldr	r7, [r0, #0]
 8018b78:	b92b      	cbnz	r3, 8018b86 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8018b7a:	6840      	ldr	r0, [r0, #4]
 8018b7c:	e9c5 7000 	strd	r7, r0, [r5]
 8018b80:	b004      	add	sp, #16
 8018b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b86:	f04f 0802 	mov.w	r8, #2
 8018b8a:	fb93 f1f8 	sdiv	r1, r3, r8
 8018b8e:	68a2      	ldr	r2, [r4, #8]
 8018b90:	ae04      	add	r6, sp, #16
 8018b92:	440a      	add	r2, r1
 8018b94:	f846 2d04 	str.w	r2, [r6, #-4]!
 8018b98:	69e1      	ldr	r1, [r4, #28]
 8018b9a:	463a      	mov	r2, r7
 8018b9c:	9600      	str	r6, [sp, #0]
 8018b9e:	6820      	ldr	r0, [r4, #0]
 8018ba0:	f7ff ff97 	bl	8018ad2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018ba4:	69a3      	ldr	r3, [r4, #24]
 8018ba6:	4607      	mov	r7, r0
 8018ba8:	686a      	ldr	r2, [r5, #4]
 8018baa:	6a21      	ldr	r1, [r4, #32]
 8018bac:	9600      	str	r6, [sp, #0]
 8018bae:	6860      	ldr	r0, [r4, #4]
 8018bb0:	f7ff ff8f 	bl	8018ad2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018bb4:	69a3      	ldr	r3, [r4, #24]
 8018bb6:	6962      	ldr	r2, [r4, #20]
 8018bb8:	fb93 f8f8 	sdiv	r8, r3, r8
 8018bbc:	4442      	add	r2, r8
 8018bbe:	9203      	str	r2, [sp, #12]
 8018bc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018bc2:	682a      	ldr	r2, [r5, #0]
 8018bc4:	4407      	add	r7, r0
 8018bc6:	9600      	str	r6, [sp, #0]
 8018bc8:	68e0      	ldr	r0, [r4, #12]
 8018bca:	f7ff ff82 	bl	8018ad2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018bce:	9600      	str	r6, [sp, #0]
 8018bd0:	4680      	mov	r8, r0
 8018bd2:	69a3      	ldr	r3, [r4, #24]
 8018bd4:	686a      	ldr	r2, [r5, #4]
 8018bd6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018bd8:	6920      	ldr	r0, [r4, #16]
 8018bda:	f7ff ff7a 	bl	8018ad2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018bde:	4440      	add	r0, r8
 8018be0:	e7cc      	b.n	8018b7c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8018be2:	bf00      	nop
 8018be4:	20198504 	.word	0x20198504

08018be8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018be8:	4b07      	ldr	r3, [pc, #28]	; (8018c08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8018bea:	781b      	ldrb	r3, [r3, #0]
 8018bec:	2b01      	cmp	r3, #1
 8018bee:	d109      	bne.n	8018c04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8018bf0:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018bf4:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018bf8:	8003      	strh	r3, [r0, #0]
 8018bfa:	4b04      	ldr	r3, [pc, #16]	; (8018c0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8018bfc:	881b      	ldrh	r3, [r3, #0]
 8018bfe:	3b01      	subs	r3, #1
 8018c00:	1a9b      	subs	r3, r3, r2
 8018c02:	800b      	strh	r3, [r1, #0]
 8018c04:	4770      	bx	lr
 8018c06:	bf00      	nop
 8018c08:	201984f0 	.word	0x201984f0
 8018c0c:	201984ec 	.word	0x201984ec

08018c10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018c10:	b510      	push	{r4, lr}
 8018c12:	4b07      	ldr	r3, [pc, #28]	; (8018c30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018c14:	781b      	ldrb	r3, [r3, #0]
 8018c16:	2b01      	cmp	r3, #1
 8018c18:	d108      	bne.n	8018c2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8018c1a:	4b06      	ldr	r3, [pc, #24]	; (8018c34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018c1c:	880c      	ldrh	r4, [r1, #0]
 8018c1e:	881b      	ldrh	r3, [r3, #0]
 8018c20:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018c24:	3b01      	subs	r3, #1
 8018c26:	1b1b      	subs	r3, r3, r4
 8018c28:	8003      	strh	r3, [r0, #0]
 8018c2a:	800a      	strh	r2, [r1, #0]
 8018c2c:	bd10      	pop	{r4, pc}
 8018c2e:	bf00      	nop
 8018c30:	201984f0 	.word	0x201984f0
 8018c34:	201984ec 	.word	0x201984ec

08018c38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018c38:	b510      	push	{r4, lr}
 8018c3a:	4b0a      	ldr	r3, [pc, #40]	; (8018c64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8018c3c:	781b      	ldrb	r3, [r3, #0]
 8018c3e:	2b01      	cmp	r3, #1
 8018c40:	d10e      	bne.n	8018c60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018c42:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018c46:	8843      	ldrh	r3, [r0, #2]
 8018c48:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018c4c:	18ca      	adds	r2, r1, r3
 8018c4e:	4b06      	ldr	r3, [pc, #24]	; (8018c68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018c50:	8044      	strh	r4, [r0, #2]
 8018c52:	881b      	ldrh	r3, [r3, #0]
 8018c54:	1a9b      	subs	r3, r3, r2
 8018c56:	8003      	strh	r3, [r0, #0]
 8018c58:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018c5c:	8081      	strh	r1, [r0, #4]
 8018c5e:	80c3      	strh	r3, [r0, #6]
 8018c60:	bd10      	pop	{r4, pc}
 8018c62:	bf00      	nop
 8018c64:	201984f0 	.word	0x201984f0
 8018c68:	201984ec 	.word	0x201984ec

08018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018c6c:	4b08      	ldr	r3, [pc, #32]	; (8018c90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8018c6e:	781b      	ldrb	r3, [r3, #0]
 8018c70:	2b01      	cmp	r3, #1
 8018c72:	d10c      	bne.n	8018c8e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8018c74:	8803      	ldrh	r3, [r0, #0]
 8018c76:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8018c7a:	8842      	ldrh	r2, [r0, #2]
 8018c7c:	8002      	strh	r2, [r0, #0]
 8018c7e:	185a      	adds	r2, r3, r1
 8018c80:	4b04      	ldr	r3, [pc, #16]	; (8018c94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8018c82:	881b      	ldrh	r3, [r3, #0]
 8018c84:	1a9b      	subs	r3, r3, r2
 8018c86:	8043      	strh	r3, [r0, #2]
 8018c88:	88c3      	ldrh	r3, [r0, #6]
 8018c8a:	80c1      	strh	r1, [r0, #6]
 8018c8c:	8083      	strh	r3, [r0, #4]
 8018c8e:	4770      	bx	lr
 8018c90:	201984f0 	.word	0x201984f0
 8018c94:	201984ec 	.word	0x201984ec

08018c98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018c98:	b510      	push	{r4, lr}
 8018c9a:	4b07      	ldr	r3, [pc, #28]	; (8018cb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018c9c:	781b      	ldrb	r3, [r3, #0]
 8018c9e:	2b01      	cmp	r3, #1
 8018ca0:	d108      	bne.n	8018cb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8018ca2:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018ca6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018caa:	8003      	strh	r3, [r0, #0]
 8018cac:	8893      	ldrh	r3, [r2, #4]
 8018cae:	3b01      	subs	r3, #1
 8018cb0:	1b1b      	subs	r3, r3, r4
 8018cb2:	800b      	strh	r3, [r1, #0]
 8018cb4:	bd10      	pop	{r4, pc}
 8018cb6:	bf00      	nop
 8018cb8:	201984f0 	.word	0x201984f0

08018cbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018cbc:	b510      	push	{r4, lr}
 8018cbe:	4b0a      	ldr	r3, [pc, #40]	; (8018ce8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8018cc0:	460a      	mov	r2, r1
 8018cc2:	781b      	ldrb	r3, [r3, #0]
 8018cc4:	2b01      	cmp	r3, #1
 8018cc6:	d10d      	bne.n	8018ce4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018cc8:	8881      	ldrh	r1, [r0, #4]
 8018cca:	8803      	ldrh	r3, [r0, #0]
 8018ccc:	440b      	add	r3, r1
 8018cce:	4601      	mov	r1, r0
 8018cd0:	3b01      	subs	r3, #1
 8018cd2:	f821 3b02 	strh.w	r3, [r1], #2
 8018cd6:	f7ff ffdf 	bl	8018c98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018cda:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018cde:	88c2      	ldrh	r2, [r0, #6]
 8018ce0:	80c3      	strh	r3, [r0, #6]
 8018ce2:	8082      	strh	r2, [r0, #4]
 8018ce4:	bd10      	pop	{r4, pc}
 8018ce6:	bf00      	nop
 8018ce8:	201984f0 	.word	0x201984f0

08018cec <_ZN8touchgfx11Application13requestRedrawEv>:
 8018cec:	2100      	movs	r1, #0
 8018cee:	4b06      	ldr	r3, [pc, #24]	; (8018d08 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8018cf0:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8018cf4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018cf8:	4b04      	ldr	r3, [pc, #16]	; (8018d0c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8018cfa:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8018cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018d02:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8018d06:	4770      	bx	lr
 8018d08:	201984ec 	.word	0x201984ec
 8018d0c:	201984ee 	.word	0x201984ee

08018d10 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8018d10:	4b03      	ldr	r3, [pc, #12]	; (8018d20 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8018d12:	6818      	ldr	r0, [r3, #0]
 8018d14:	b110      	cbz	r0, 8018d1c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8018d16:	6803      	ldr	r3, [r0, #0]
 8018d18:	699b      	ldr	r3, [r3, #24]
 8018d1a:	4718      	bx	r3
 8018d1c:	4770      	bx	lr
 8018d1e:	bf00      	nop
 8018d20:	20198534 	.word	0x20198534

08018d24 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018d24:	4770      	bx	lr
	...

08018d28 <_ZN8touchgfx11Application4drawEv>:
 8018d28:	b507      	push	{r0, r1, r2, lr}
 8018d2a:	2100      	movs	r1, #0
 8018d2c:	4b08      	ldr	r3, [pc, #32]	; (8018d50 <_ZN8touchgfx11Application4drawEv+0x28>)
 8018d2e:	9100      	str	r1, [sp, #0]
 8018d30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018d34:	4b07      	ldr	r3, [pc, #28]	; (8018d54 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018d36:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018d3e:	4669      	mov	r1, sp
 8018d40:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018d44:	6803      	ldr	r3, [r0, #0]
 8018d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d48:	4798      	blx	r3
 8018d4a:	b003      	add	sp, #12
 8018d4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018d50:	201984ec 	.word	0x201984ec
 8018d54:	201984ee 	.word	0x201984ee

08018d58 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018d58:	4b03      	ldr	r3, [pc, #12]	; (8018d68 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018d5a:	6818      	ldr	r0, [r3, #0]
 8018d5c:	b110      	cbz	r0, 8018d64 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8018d5e:	6803      	ldr	r3, [r0, #0]
 8018d60:	69db      	ldr	r3, [r3, #28]
 8018d62:	4718      	bx	r3
 8018d64:	4770      	bx	lr
 8018d66:	bf00      	nop
 8018d68:	20198534 	.word	0x20198534

08018d6c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018d6c:	4b03      	ldr	r3, [pc, #12]	; (8018d7c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8018d6e:	6818      	ldr	r0, [r3, #0]
 8018d70:	b110      	cbz	r0, 8018d78 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8018d72:	6803      	ldr	r3, [r0, #0]
 8018d74:	6a1b      	ldr	r3, [r3, #32]
 8018d76:	4718      	bx	r3
 8018d78:	4770      	bx	lr
 8018d7a:	bf00      	nop
 8018d7c:	20198534 	.word	0x20198534

08018d80 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8018d80:	2300      	movs	r3, #0
 8018d82:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8018d86:	4770      	bx	lr

08018d88 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018d88:	4b03      	ldr	r3, [pc, #12]	; (8018d98 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018d8a:	6818      	ldr	r0, [r3, #0]
 8018d8c:	b110      	cbz	r0, 8018d94 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8018d8e:	6803      	ldr	r3, [r0, #0]
 8018d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d92:	4718      	bx	r3
 8018d94:	4770      	bx	lr
 8018d96:	bf00      	nop
 8018d98:	20198534 	.word	0x20198534

08018d9c <_ZN8touchgfx11ApplicationD1Ev>:
 8018d9c:	4770      	bx	lr

08018d9e <_ZN8touchgfx11ApplicationD0Ev>:
 8018d9e:	b510      	push	{r4, lr}
 8018da0:	4604      	mov	r4, r0
 8018da2:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8018da6:	f010 fbfc 	bl	80295a2 <_ZdlPvj>
 8018daa:	4620      	mov	r0, r4
 8018dac:	bd10      	pop	{r4, pc}

08018dae <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018dae:	b510      	push	{r4, lr}
 8018db0:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018db4:	888a      	ldrh	r2, [r1, #4]
 8018db6:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018dba:	4422      	add	r2, r4
 8018dbc:	b212      	sxth	r2, r2
 8018dbe:	4293      	cmp	r3, r2
 8018dc0:	da15      	bge.n	8018dee <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018dc2:	8882      	ldrh	r2, [r0, #4]
 8018dc4:	4413      	add	r3, r2
 8018dc6:	b21b      	sxth	r3, r3
 8018dc8:	429c      	cmp	r4, r3
 8018dca:	da10      	bge.n	8018dee <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018dcc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018dd0:	88c9      	ldrh	r1, [r1, #6]
 8018dd2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018dd6:	4419      	add	r1, r3
 8018dd8:	b209      	sxth	r1, r1
 8018dda:	428a      	cmp	r2, r1
 8018ddc:	da07      	bge.n	8018dee <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018dde:	88c0      	ldrh	r0, [r0, #6]
 8018de0:	4410      	add	r0, r2
 8018de2:	b200      	sxth	r0, r0
 8018de4:	4283      	cmp	r3, r0
 8018de6:	bfac      	ite	ge
 8018de8:	2000      	movge	r0, #0
 8018dea:	2001      	movlt	r0, #1
 8018dec:	bd10      	pop	{r4, pc}
 8018dee:	2000      	movs	r0, #0
 8018df0:	e7fc      	b.n	8018dec <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018df2 <_ZN8touchgfx4Rect10restrictToEss>:
 8018df2:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018df6:	b510      	push	{r4, lr}
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	da04      	bge.n	8018e06 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8018dfc:	8884      	ldrh	r4, [r0, #4]
 8018dfe:	4423      	add	r3, r4
 8018e00:	8083      	strh	r3, [r0, #4]
 8018e02:	2300      	movs	r3, #0
 8018e04:	8003      	strh	r3, [r0, #0]
 8018e06:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018e0a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018e0e:	1b09      	subs	r1, r1, r4
 8018e10:	428b      	cmp	r3, r1
 8018e12:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018e16:	bfc8      	it	gt
 8018e18:	8081      	strhgt	r1, [r0, #4]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	da04      	bge.n	8018e28 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8018e1e:	88c1      	ldrh	r1, [r0, #6]
 8018e20:	440b      	add	r3, r1
 8018e22:	80c3      	strh	r3, [r0, #6]
 8018e24:	2300      	movs	r3, #0
 8018e26:	8043      	strh	r3, [r0, #2]
 8018e28:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8018e2c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8018e30:	1a52      	subs	r2, r2, r1
 8018e32:	4293      	cmp	r3, r2
 8018e34:	bfc8      	it	gt
 8018e36:	80c2      	strhgt	r2, [r0, #6]
 8018e38:	bd10      	pop	{r4, pc}
	...

08018e3c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8018e3c:	b510      	push	{r4, lr}
 8018e3e:	460c      	mov	r4, r1
 8018e40:	4b0f      	ldr	r3, [pc, #60]	; (8018e80 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8018e42:	4620      	mov	r0, r4
 8018e44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018e48:	4b0e      	ldr	r3, [pc, #56]	; (8018e84 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8018e4a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018e4e:	f7ff ffd0 	bl	8018df2 <_ZN8touchgfx4Rect10restrictToEss>
 8018e52:	4b0d      	ldr	r3, [pc, #52]	; (8018e88 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8018e54:	6818      	ldr	r0, [r3, #0]
 8018e56:	b190      	cbz	r0, 8018e7e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8018e58:	6803      	ldr	r3, [r0, #0]
 8018e5a:	4621      	mov	r1, r4
 8018e5c:	689b      	ldr	r3, [r3, #8]
 8018e5e:	4798      	blx	r3
 8018e60:	4b0a      	ldr	r3, [pc, #40]	; (8018e8c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8018e62:	6818      	ldr	r0, [r3, #0]
 8018e64:	b118      	cbz	r0, 8018e6e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8018e66:	6803      	ldr	r3, [r0, #0]
 8018e68:	4621      	mov	r1, r4
 8018e6a:	689b      	ldr	r3, [r3, #8]
 8018e6c:	4798      	blx	r3
 8018e6e:	4b08      	ldr	r3, [pc, #32]	; (8018e90 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8018e70:	4621      	mov	r1, r4
 8018e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e76:	6818      	ldr	r0, [r3, #0]
 8018e78:	6803      	ldr	r3, [r0, #0]
 8018e7a:	69db      	ldr	r3, [r3, #28]
 8018e7c:	4718      	bx	r3
 8018e7e:	bd10      	pop	{r4, pc}
 8018e80:	201984ee 	.word	0x201984ee
 8018e84:	201984ec 	.word	0x201984ec
 8018e88:	20198534 	.word	0x20198534
 8018e8c:	20198530 	.word	0x20198530
 8018e90:	201984f8 	.word	0x201984f8

08018e94 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e96:	4606      	mov	r6, r0
 8018e98:	4608      	mov	r0, r1
 8018e9a:	460f      	mov	r7, r1
 8018e9c:	f7fe f823 	bl	8016ee6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018ea0:	b9e8      	cbnz	r0, 8018ede <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018ea2:	f9b7 5000 	ldrsh.w	r5, [r7]
 8018ea6:	f9b6 4000 	ldrsh.w	r4, [r6]
 8018eaa:	42a5      	cmp	r5, r4
 8018eac:	db17      	blt.n	8018ede <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018eae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8018eb2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8018eb6:	429a      	cmp	r2, r3
 8018eb8:	db11      	blt.n	8018ede <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018eba:	88b9      	ldrh	r1, [r7, #4]
 8018ebc:	440d      	add	r5, r1
 8018ebe:	88b1      	ldrh	r1, [r6, #4]
 8018ec0:	b22d      	sxth	r5, r5
 8018ec2:	440c      	add	r4, r1
 8018ec4:	b224      	sxth	r4, r4
 8018ec6:	42a5      	cmp	r5, r4
 8018ec8:	dc09      	bgt.n	8018ede <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018eca:	88f8      	ldrh	r0, [r7, #6]
 8018ecc:	4410      	add	r0, r2
 8018ece:	88f2      	ldrh	r2, [r6, #6]
 8018ed0:	b200      	sxth	r0, r0
 8018ed2:	4413      	add	r3, r2
 8018ed4:	b21b      	sxth	r3, r3
 8018ed6:	4298      	cmp	r0, r3
 8018ed8:	bfcc      	ite	gt
 8018eda:	2000      	movgt	r0, #0
 8018edc:	2001      	movle	r0, #1
 8018ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018ee0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8018ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ee2:	4604      	mov	r4, r0
 8018ee4:	4608      	mov	r0, r1
 8018ee6:	460d      	mov	r5, r1
 8018ee8:	f7fd fffd 	bl	8016ee6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018eec:	b978      	cbnz	r0, 8018f0e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8018eee:	4620      	mov	r0, r4
 8018ef0:	f7fd fff9 	bl	8016ee6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018ef4:	f9b5 6000 	ldrsh.w	r6, [r5]
 8018ef8:	b150      	cbz	r0, 8018f10 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8018efa:	8026      	strh	r6, [r4, #0]
 8018efc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018f00:	8063      	strh	r3, [r4, #2]
 8018f02:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8018f06:	80a3      	strh	r3, [r4, #4]
 8018f08:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018f0c:	80e3      	strh	r3, [r4, #6]
 8018f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f10:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018f14:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018f18:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8018f1c:	42b1      	cmp	r1, r6
 8018f1e:	460f      	mov	r7, r1
 8018f20:	bfa8      	it	ge
 8018f22:	4637      	movge	r7, r6
 8018f24:	4293      	cmp	r3, r2
 8018f26:	4618      	mov	r0, r3
 8018f28:	bfa8      	it	ge
 8018f2a:	4610      	movge	r0, r2
 8018f2c:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8018f30:	88ed      	ldrh	r5, [r5, #6]
 8018f32:	4466      	add	r6, ip
 8018f34:	442a      	add	r2, r5
 8018f36:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018f3a:	88e5      	ldrh	r5, [r4, #6]
 8018f3c:	4461      	add	r1, ip
 8018f3e:	442b      	add	r3, r5
 8018f40:	b236      	sxth	r6, r6
 8018f42:	b209      	sxth	r1, r1
 8018f44:	b212      	sxth	r2, r2
 8018f46:	b21b      	sxth	r3, r3
 8018f48:	428e      	cmp	r6, r1
 8018f4a:	bfac      	ite	ge
 8018f4c:	ebc7 0106 	rsbge	r1, r7, r6
 8018f50:	ebc7 0101 	rsblt	r1, r7, r1
 8018f54:	429a      	cmp	r2, r3
 8018f56:	bfac      	ite	ge
 8018f58:	ebc0 0202 	rsbge	r2, r0, r2
 8018f5c:	ebc0 0203 	rsblt	r2, r0, r3
 8018f60:	8027      	strh	r7, [r4, #0]
 8018f62:	8060      	strh	r0, [r4, #2]
 8018f64:	80a1      	strh	r1, [r4, #4]
 8018f66:	80e2      	strh	r2, [r4, #6]
 8018f68:	e7d1      	b.n	8018f0e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08018f6c <_ZN8touchgfx11Application11getInstanceEv>:
 8018f6c:	4b01      	ldr	r3, [pc, #4]	; (8018f74 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018f6e:	6818      	ldr	r0, [r3, #0]
 8018f70:	4770      	bx	lr
 8018f72:	bf00      	nop
 8018f74:	20198544 	.word	0x20198544

08018f78 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8018f78:	2300      	movs	r3, #0
 8018f7a:	b510      	push	{r4, lr}
 8018f7c:	4604      	mov	r4, r0
 8018f7e:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8018f82:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8018f86:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8018f8a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8018f8e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8018f92:	429a      	cmp	r2, r3
 8018f94:	d90e      	bls.n	8018fb4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8018f96:	18e2      	adds	r2, r4, r3
 8018f98:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8018f9c:	b122      	cbz	r2, 8018fa8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8018f9e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8018fa2:	6803      	ldr	r3, [r0, #0]
 8018fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018fa6:	4798      	blx	r3
 8018fa8:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8018fac:	3301      	adds	r3, #1
 8018fae:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8018fb2:	e7ea      	b.n	8018f8a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8018fb4:	bd10      	pop	{r4, pc}

08018fb6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8018fb6:	2300      	movs	r3, #0
 8018fb8:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8018fbc:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8018fc0:	30a4      	adds	r0, #164	; 0xa4
 8018fc2:	f802 3b01 	strb.w	r3, [r2], #1
 8018fc6:	4282      	cmp	r2, r0
 8018fc8:	d1fb      	bne.n	8018fc2 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8018fca:	4770      	bx	lr

08018fcc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018fcc:	b570      	push	{r4, r5, r6, lr}
 8018fce:	4c0b      	ldr	r4, [pc, #44]	; (8018ffc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8018fd0:	4605      	mov	r5, r0
 8018fd2:	6820      	ldr	r0, [r4, #0]
 8018fd4:	460e      	mov	r6, r1
 8018fd6:	b110      	cbz	r0, 8018fde <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8018fd8:	6803      	ldr	r3, [r0, #0]
 8018fda:	695b      	ldr	r3, [r3, #20]
 8018fdc:	4798      	blx	r3
 8018fde:	1d28      	adds	r0, r5, #4
 8018fe0:	f7ff ffe9 	bl	8018fb6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8018fe4:	6026      	str	r6, [r4, #0]
 8018fe6:	6833      	ldr	r3, [r6, #0]
 8018fe8:	4630      	mov	r0, r6
 8018fea:	68db      	ldr	r3, [r3, #12]
 8018fec:	4798      	blx	r3
 8018fee:	682b      	ldr	r3, [r5, #0]
 8018ff0:	4628      	mov	r0, r5
 8018ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ff8:	4718      	bx	r3
 8018ffa:	bf00      	nop
 8018ffc:	20198534 	.word	0x20198534

08019000 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8019000:	2300      	movs	r3, #0
 8019002:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019004:	461a      	mov	r2, r3
 8019006:	461c      	mov	r4, r3
 8019008:	461d      	mov	r5, r3
 801900a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801900e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8019012:	459c      	cmp	ip, r3
 8019014:	dd1a      	ble.n	801904c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8019016:	18c6      	adds	r6, r0, r3
 8019018:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 801901c:	b16e      	cbz	r6, 801903a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801901e:	429a      	cmp	r2, r3
 8019020:	d008      	beq.n	8019034 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8019022:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8019026:	fa1f fe82 	uxth.w	lr, r2
 801902a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801902e:	1887      	adds	r7, r0, r2
 8019030:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8019034:	3201      	adds	r2, #1
 8019036:	3301      	adds	r3, #1
 8019038:	e7eb      	b.n	8019012 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801903a:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801903e:	4299      	cmp	r1, r3
 8019040:	bfa8      	it	ge
 8019042:	3501      	addge	r5, #1
 8019044:	429e      	cmp	r6, r3
 8019046:	bfc8      	it	gt
 8019048:	3401      	addgt	r4, #1
 801904a:	e7f4      	b.n	8019036 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801904c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8019050:	1b49      	subs	r1, r1, r5
 8019052:	1b1b      	subs	r3, r3, r4
 8019054:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8019058:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801905c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8019060:	4293      	cmp	r3, r2
 8019062:	dd03      	ble.n	801906c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8019064:	3b01      	subs	r3, #1
 8019066:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801906a:	e7f7      	b.n	801905c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801906c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08019070 <_ZN8touchgfx11Application15handleTickEventEv>:
 8019070:	b570      	push	{r4, r5, r6, lr}
 8019072:	4d16      	ldr	r5, [pc, #88]	; (80190cc <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8019074:	4604      	mov	r4, r0
 8019076:	6828      	ldr	r0, [r5, #0]
 8019078:	b140      	cbz	r0, 801908c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801907a:	7a03      	ldrb	r3, [r0, #8]
 801907c:	b933      	cbnz	r3, 801908c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801907e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8019082:	6803      	ldr	r3, [r0, #0]
 8019084:	689b      	ldr	r3, [r3, #8]
 8019086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801908a:	4718      	bx	r3
 801908c:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8019090:	4e0f      	ldr	r6, [pc, #60]	; (80190d0 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8019092:	b973      	cbnz	r3, 80190b2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019094:	b168      	cbz	r0, 80190b2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019096:	7a03      	ldrb	r3, [r0, #8]
 8019098:	b15b      	cbz	r3, 80190b2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801909a:	6830      	ldr	r0, [r6, #0]
 801909c:	b110      	cbz	r0, 80190a4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801909e:	6803      	ldr	r3, [r0, #0]
 80190a0:	691b      	ldr	r3, [r3, #16]
 80190a2:	4798      	blx	r3
 80190a4:	6828      	ldr	r0, [r5, #0]
 80190a6:	6803      	ldr	r3, [r0, #0]
 80190a8:	68db      	ldr	r3, [r3, #12]
 80190aa:	4798      	blx	r3
 80190ac:	2301      	movs	r3, #1
 80190ae:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 80190b2:	3404      	adds	r4, #4
 80190b4:	4620      	mov	r0, r4
 80190b6:	f7ff ff5f 	bl	8018f78 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80190ba:	4620      	mov	r0, r4
 80190bc:	f7ff ffa0 	bl	8019000 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80190c0:	6830      	ldr	r0, [r6, #0]
 80190c2:	b110      	cbz	r0, 80190ca <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80190c4:	6803      	ldr	r3, [r0, #0]
 80190c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190c8:	e7dd      	b.n	8019086 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80190ca:	bd70      	pop	{r4, r5, r6, pc}
 80190cc:	20198538 	.word	0x20198538
 80190d0:	20198534 	.word	0x20198534

080190d4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80190d4:	4603      	mov	r3, r0
 80190d6:	2200      	movs	r2, #0
 80190d8:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80190dc:	801a      	strh	r2, [r3, #0]
 80190de:	805a      	strh	r2, [r3, #2]
 80190e0:	809a      	strh	r2, [r3, #4]
 80190e2:	80da      	strh	r2, [r3, #6]
 80190e4:	3308      	adds	r3, #8
 80190e6:	428b      	cmp	r3, r1
 80190e8:	d1f8      	bne.n	80190dc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80190ea:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80190ee:	4770      	bx	lr

080190f0 <_ZN8touchgfx11ApplicationC1Ev>:
 80190f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190f2:	4606      	mov	r6, r0
 80190f4:	4604      	mov	r4, r0
 80190f6:	2500      	movs	r5, #0
 80190f8:	4b1b      	ldr	r3, [pc, #108]	; (8019168 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80190fa:	22a8      	movs	r2, #168	; 0xa8
 80190fc:	f846 3b04 	str.w	r3, [r6], #4
 8019100:	2100      	movs	r1, #0
 8019102:	4630      	mov	r0, r6
 8019104:	f010 faf8 	bl	80296f8 <memset>
 8019108:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801910c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8019110:	f7ff ffe0 	bl	80190d4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019114:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8019118:	f7ff ffdc 	bl	80190d4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801911c:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8019120:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8019124:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8019128:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801912c:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8019130:	490e      	ldr	r1, [pc, #56]	; (801916c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8019132:	480f      	ldr	r0, [pc, #60]	; (8019170 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8019134:	f002 fc86 	bl	801ba44 <CRC_Lock>
 8019138:	4f0e      	ldr	r7, [pc, #56]	; (8019174 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801913a:	4b0f      	ldr	r3, [pc, #60]	; (8019178 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801913c:	b158      	cbz	r0, 8019156 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801913e:	801d      	strh	r5, [r3, #0]
 8019140:	2300      	movs	r3, #0
 8019142:	4a0e      	ldr	r2, [pc, #56]	; (801917c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8019144:	4630      	mov	r0, r6
 8019146:	6013      	str	r3, [r2, #0]
 8019148:	4a0d      	ldr	r2, [pc, #52]	; (8019180 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801914a:	603b      	str	r3, [r7, #0]
 801914c:	6013      	str	r3, [r2, #0]
 801914e:	f7ff ff32 	bl	8018fb6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8019152:	4620      	mov	r0, r4
 8019154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801915a:	2002      	movs	r0, #2
 801915c:	801a      	strh	r2, [r3, #0]
 801915e:	6038      	str	r0, [r7, #0]
 8019160:	f001 fa28 	bl	801a5b4 <_ZN8touchgfx6Screen4drawEv>
 8019164:	e7ec      	b.n	8019140 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8019166:	bf00      	nop
 8019168:	0802bfe0 	.word	0x0802bfe0
 801916c:	b5e8b5cd 	.word	0xb5e8b5cd
 8019170:	f407a5c2 	.word	0xf407a5c2
 8019174:	20198534 	.word	0x20198534
 8019178:	20000058 	.word	0x20000058
 801917c:	20198544 	.word	0x20198544
 8019180:	20198538 	.word	0x20198538

08019184 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8019184:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8019188:	b510      	push	{r4, lr}
 801918a:	3b01      	subs	r3, #1
 801918c:	b29b      	uxth	r3, r3
 801918e:	428b      	cmp	r3, r1
 8019190:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8019194:	d908      	bls.n	80191a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8019196:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801919a:	681a      	ldr	r2, [r3, #0]
 801919c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80191a0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80191a4:	685a      	ldr	r2, [r3, #4]
 80191a6:	6062      	str	r2, [r4, #4]
 80191a8:	bd10      	pop	{r4, pc}
	...

080191ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80191ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191b0:	4b8f      	ldr	r3, [pc, #572]	; (80193f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 80191b2:	b08f      	sub	sp, #60	; 0x3c
 80191b4:	ac0a      	add	r4, sp, #40	; 0x28
 80191b6:	e884 0006 	stmia.w	r4, {r1, r2}
 80191ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80191be:	4b8d      	ldr	r3, [pc, #564]	; (80193f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 80191c0:	4683      	mov	fp, r0
 80191c2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80191c6:	4620      	mov	r0, r4
 80191c8:	f7ff fe13 	bl	8018df2 <_ZN8touchgfx4Rect10restrictToEss>
 80191cc:	4620      	mov	r0, r4
 80191ce:	f7fd fe8a 	bl	8016ee6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80191d2:	2800      	cmp	r0, #0
 80191d4:	d16a      	bne.n	80192ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80191d6:	9403      	str	r4, [sp, #12]
 80191d8:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 80191dc:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80191e0:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80191e4:	35a4      	adds	r5, #164	; 0xa4
 80191e6:	9301      	str	r3, [sp, #4]
 80191e8:	b15c      	cbz	r4, 8019202 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80191ea:	4629      	mov	r1, r5
 80191ec:	9803      	ldr	r0, [sp, #12]
 80191ee:	f7ff fe51 	bl	8018e94 <_ZNK8touchgfx4Rect8includesERKS0_>
 80191f2:	3c01      	subs	r4, #1
 80191f4:	b118      	cbz	r0, 80191fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 80191f6:	b2a1      	uxth	r1, r4
 80191f8:	9801      	ldr	r0, [sp, #4]
 80191fa:	f7ff ffc3 	bl	8019184 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80191fe:	3d08      	subs	r5, #8
 8019200:	e7f2      	b.n	80191e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8019202:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 8019206:	f108 33ff 	add.w	r3, r8, #4294967295
 801920a:	9302      	str	r3, [sp, #8]
 801920c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8019210:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8019214:	f8cd 8010 	str.w	r8, [sp, #16]
 8019218:	9306      	str	r3, [sp, #24]
 801921a:	445c      	add	r4, fp
 801921c:	2500      	movs	r5, #0
 801921e:	4626      	mov	r6, r4
 8019220:	462f      	mov	r7, r5
 8019222:	f8cd 8014 	str.w	r8, [sp, #20]
 8019226:	9b05      	ldr	r3, [sp, #20]
 8019228:	2b00      	cmp	r3, #0
 801922a:	d073      	beq.n	8019314 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801922c:	9903      	ldr	r1, [sp, #12]
 801922e:	4630      	mov	r0, r6
 8019230:	f7ff fdbd 	bl	8018dae <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019234:	b350      	cbz	r0, 801928c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8019236:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801923a:	f9b6 c000 	ldrsh.w	ip, [r6]
 801923e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8019242:	45e6      	cmp	lr, ip
 8019244:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8019248:	db33      	blt.n	80192b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801924a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801924e:	88b3      	ldrh	r3, [r6, #4]
 8019250:	4472      	add	r2, lr
 8019252:	4463      	add	r3, ip
 8019254:	b212      	sxth	r2, r2
 8019256:	b21b      	sxth	r3, r3
 8019258:	429a      	cmp	r2, r3
 801925a:	dc2a      	bgt.n	80192b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801925c:	88f3      	ldrh	r3, [r6, #6]
 801925e:	fa1f f289 	uxth.w	r2, r9
 8019262:	4413      	add	r3, r2
 8019264:	b29b      	uxth	r3, r3
 8019266:	45ca      	cmp	sl, r9
 8019268:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801926c:	fa0f fe83 	sxth.w	lr, r3
 8019270:	fa1f fc8a 	uxth.w	ip, sl
 8019274:	db0f      	blt.n	8019296 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8019276:	eba3 030c 	sub.w	r3, r3, ip
 801927a:	1ac9      	subs	r1, r1, r3
 801927c:	b209      	sxth	r1, r1
 801927e:	2900      	cmp	r1, #0
 8019280:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8019284:	dd12      	ble.n	80192ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019286:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801928a:	4605      	mov	r5, r0
 801928c:	9b05      	ldr	r3, [sp, #20]
 801928e:	3e08      	subs	r6, #8
 8019290:	3b01      	subs	r3, #1
 8019292:	9305      	str	r3, [sp, #20]
 8019294:	e7c7      	b.n	8019226 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8019296:	4461      	add	r1, ip
 8019298:	b209      	sxth	r1, r1
 801929a:	4571      	cmp	r1, lr
 801929c:	dc38      	bgt.n	8019310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801929e:	eba2 020c 	sub.w	r2, r2, ip
 80192a2:	b212      	sxth	r2, r2
 80192a4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80192a8:	2a00      	cmp	r2, #0
 80192aa:	dcee      	bgt.n	801928a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80192ac:	b00f      	add	sp, #60	; 0x3c
 80192ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192b2:	45ca      	cmp	sl, r9
 80192b4:	db2c      	blt.n	8019310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80192b6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80192ba:	449a      	add	sl, r3
 80192bc:	88f3      	ldrh	r3, [r6, #6]
 80192be:	fa0f fa8a 	sxth.w	sl, sl
 80192c2:	4499      	add	r9, r3
 80192c4:	fa0f f989 	sxth.w	r9, r9
 80192c8:	45ca      	cmp	sl, r9
 80192ca:	dc21      	bgt.n	8019310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80192cc:	88b3      	ldrh	r3, [r6, #4]
 80192ce:	fa1f f28c 	uxth.w	r2, ip
 80192d2:	4413      	add	r3, r2
 80192d4:	b29b      	uxth	r3, r3
 80192d6:	45e6      	cmp	lr, ip
 80192d8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80192dc:	fa1f f98e 	uxth.w	r9, lr
 80192e0:	fa0f fa83 	sxth.w	sl, r3
 80192e4:	db0a      	blt.n	80192fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 80192e6:	eba3 0309 	sub.w	r3, r3, r9
 80192ea:	1ac9      	subs	r1, r1, r3
 80192ec:	b209      	sxth	r1, r1
 80192ee:	2900      	cmp	r1, #0
 80192f0:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80192f4:	ddda      	ble.n	80192ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80192f6:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80192fa:	e7c6      	b.n	801928a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80192fc:	4449      	add	r1, r9
 80192fe:	b209      	sxth	r1, r1
 8019300:	4551      	cmp	r1, sl
 8019302:	dc05      	bgt.n	8019310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8019304:	eba2 0209 	sub.w	r2, r2, r9
 8019308:	b212      	sxth	r2, r2
 801930a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801930e:	e7cb      	b.n	80192a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8019310:	4607      	mov	r7, r0
 8019312:	e7bb      	b.n	801928c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8019314:	2d00      	cmp	r5, #0
 8019316:	d181      	bne.n	801921c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8019318:	2f00      	cmp	r7, #0
 801931a:	f000 81de 	beq.w	80196da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 801931e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8019322:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8019326:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801932a:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801932e:	b2b9      	uxth	r1, r7
 8019330:	b2b3      	uxth	r3, r6
 8019332:	441a      	add	r2, r3
 8019334:	448a      	add	sl, r1
 8019336:	b292      	uxth	r2, r2
 8019338:	fa1f fa8a 	uxth.w	sl, sl
 801933c:	fa0f f882 	sxth.w	r8, r2
 8019340:	9105      	str	r1, [sp, #20]
 8019342:	fa0f f98a 	sxth.w	r9, sl
 8019346:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801934a:	9b04      	ldr	r3, [sp, #16]
 801934c:	2b00      	cmp	r3, #0
 801934e:	d053      	beq.n	80193f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8019350:	9903      	ldr	r1, [sp, #12]
 8019352:	4620      	mov	r0, r4
 8019354:	f7ff fd2b 	bl	8018dae <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019358:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801935c:	b1c0      	cbz	r0, 8019390 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801935e:	f9b4 e000 	ldrsh.w	lr, [r4]
 8019362:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019366:	4576      	cmp	r6, lr
 8019368:	dc23      	bgt.n	80193b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801936a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801936e:	44f4      	add	ip, lr
 8019370:	fa0f fc8c 	sxth.w	ip, ip
 8019374:	45e0      	cmp	r8, ip
 8019376:	db1c      	blt.n	80193b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8019378:	428f      	cmp	r7, r1
 801937a:	fa1f fc81 	uxth.w	ip, r1
 801937e:	88e1      	ldrh	r1, [r4, #6]
 8019380:	dc0d      	bgt.n	801939e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8019382:	ebaa 0c0c 	sub.w	ip, sl, ip
 8019386:	eba1 010c 	sub.w	r1, r1, ip
 801938a:	f8a4 9002 	strh.w	r9, [r4, #2]
 801938e:	80e1      	strh	r1, [r4, #6]
 8019390:	4628      	mov	r0, r5
 8019392:	9904      	ldr	r1, [sp, #16]
 8019394:	3c08      	subs	r4, #8
 8019396:	3901      	subs	r1, #1
 8019398:	9104      	str	r1, [sp, #16]
 801939a:	4605      	mov	r5, r0
 801939c:	e7d3      	b.n	8019346 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 801939e:	4461      	add	r1, ip
 80193a0:	b209      	sxth	r1, r1
 80193a2:	4549      	cmp	r1, r9
 80193a4:	dcf5      	bgt.n	8019392 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80193a6:	9905      	ldr	r1, [sp, #20]
 80193a8:	eba1 0c0c 	sub.w	ip, r1, ip
 80193ac:	f8a4 c006 	strh.w	ip, [r4, #6]
 80193b0:	e7ee      	b.n	8019390 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80193b2:	428f      	cmp	r7, r1
 80193b4:	dced      	bgt.n	8019392 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80193b6:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80193ba:	4461      	add	r1, ip
 80193bc:	b209      	sxth	r1, r1
 80193be:	4589      	cmp	r9, r1
 80193c0:	dbe7      	blt.n	8019392 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80193c2:	4576      	cmp	r6, lr
 80193c4:	fa1f fc8e 	uxth.w	ip, lr
 80193c8:	88a1      	ldrh	r1, [r4, #4]
 80193ca:	dc07      	bgt.n	80193dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 80193cc:	eba2 0c0c 	sub.w	ip, r2, ip
 80193d0:	eba1 010c 	sub.w	r1, r1, ip
 80193d4:	f8a4 8000 	strh.w	r8, [r4]
 80193d8:	80a1      	strh	r1, [r4, #4]
 80193da:	e7d9      	b.n	8019390 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80193dc:	4461      	add	r1, ip
 80193de:	b209      	sxth	r1, r1
 80193e0:	4588      	cmp	r8, r1
 80193e2:	dbd6      	blt.n	8019392 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80193e4:	eba3 0c0c 	sub.w	ip, r3, ip
 80193e8:	f8a4 c004 	strh.w	ip, [r4, #4]
 80193ec:	e7d0      	b.n	8019390 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80193ee:	bf00      	nop
 80193f0:	201984ee 	.word	0x201984ee
 80193f4:	201984ec 	.word	0x201984ec
 80193f8:	2d00      	cmp	r5, #0
 80193fa:	f000 816e 	beq.w	80196da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 80193fe:	9b06      	ldr	r3, [sp, #24]
 8019400:	445b      	add	r3, fp
 8019402:	461c      	mov	r4, r3
 8019404:	9b02      	ldr	r3, [sp, #8]
 8019406:	3301      	adds	r3, #1
 8019408:	f000 8167 	beq.w	80196da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 801940c:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8019410:	4629      	mov	r1, r5
 8019412:	9803      	ldr	r0, [sp, #12]
 8019414:	f7ff fd3e 	bl	8018e94 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019418:	b120      	cbz	r0, 8019424 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801941a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801941e:	9801      	ldr	r0, [sp, #4]
 8019420:	f7ff feb0 	bl	8019184 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019424:	9903      	ldr	r1, [sp, #12]
 8019426:	4628      	mov	r0, r5
 8019428:	f7ff fcc1 	bl	8018dae <_ZNK8touchgfx4Rect9intersectERKS0_>
 801942c:	2800      	cmp	r0, #0
 801942e:	f000 809c 	beq.w	801956a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8019432:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8019436:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801943a:	fa1f f189 	uxth.w	r1, r9
 801943e:	eb01 0c03 	add.w	ip, r1, r3
 8019442:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8019446:	fa1f fa8c 	uxth.w	sl, ip
 801944a:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801944e:	9309      	str	r3, [sp, #36]	; 0x24
 8019450:	b283      	uxth	r3, r0
 8019452:	eb03 050c 	add.w	r5, r3, ip
 8019456:	b2ad      	uxth	r5, r5
 8019458:	9505      	str	r5, [sp, #20]
 801945a:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801945e:	4548      	cmp	r0, r9
 8019460:	9504      	str	r5, [sp, #16]
 8019462:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8019466:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801946a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801946e:	f340 8099 	ble.w	80195a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8019472:	1a5b      	subs	r3, r3, r1
 8019474:	b29b      	uxth	r3, r3
 8019476:	4596      	cmp	lr, r2
 8019478:	fa0f f08a 	sxth.w	r0, sl
 801947c:	b21e      	sxth	r6, r3
 801947e:	dd2e      	ble.n	80194de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8019480:	9f02      	ldr	r7, [sp, #8]
 8019482:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8019486:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801948a:	9f04      	ldr	r7, [sp, #16]
 801948c:	fa1f fe8e 	uxth.w	lr, lr
 8019490:	1a3f      	subs	r7, r7, r0
 8019492:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8019496:	b292      	uxth	r2, r2
 8019498:	ebae 0102 	sub.w	r1, lr, r2
 801949c:	44a6      	add	lr, r4
 801949e:	4402      	add	r2, r0
 80194a0:	b289      	uxth	r1, r1
 80194a2:	fa0f fe8e 	sxth.w	lr, lr
 80194a6:	b212      	sxth	r2, r2
 80194a8:	b20d      	sxth	r5, r1
 80194aa:	ebae 0202 	sub.w	r2, lr, r2
 80194ae:	436f      	muls	r7, r5
 80194b0:	4372      	muls	r2, r6
 80194b2:	4297      	cmp	r7, r2
 80194b4:	db09      	blt.n	80194ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 80194b6:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 80194ba:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 80194be:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80194c2:	449c      	add	ip, r3
 80194c4:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80194c8:	e686      	b.n	80191d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80194ca:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 80194ce:	4421      	add	r1, r4
 80194d0:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 80194d4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80194d8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80194dc:	e67c      	b.n	80191d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80194de:	9f04      	ldr	r7, [sp, #16]
 80194e0:	42b8      	cmp	r0, r7
 80194e2:	da27      	bge.n	8019534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80194e4:	9902      	ldr	r1, [sp, #8]
 80194e6:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 80194ea:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 80194ee:	eb05 010e 	add.w	r1, r5, lr
 80194f2:	fa1f f881 	uxth.w	r8, r1
 80194f6:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 80194fa:	fa0f f988 	sxth.w	r9, r8
 80194fe:	4411      	add	r1, r2
 8019500:	eba1 0108 	sub.w	r1, r1, r8
 8019504:	b289      	uxth	r1, r1
 8019506:	fa0f f881 	sxth.w	r8, r1
 801950a:	eba2 020e 	sub.w	r2, r2, lr
 801950e:	1a3f      	subs	r7, r7, r0
 8019510:	4372      	muls	r2, r6
 8019512:	fb08 f707 	mul.w	r7, r8, r7
 8019516:	42ba      	cmp	r2, r7
 8019518:	dc06      	bgt.n	8019528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801951a:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801951e:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8019522:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8019526:	e7ca      	b.n	80194be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8019528:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801952c:	4429      	add	r1, r5
 801952e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8019532:	e651      	b.n	80191d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019534:	9805      	ldr	r0, [sp, #20]
 8019536:	2d06      	cmp	r5, #6
 8019538:	ebaa 0000 	sub.w	r0, sl, r0
 801953c:	b280      	uxth	r0, r0
 801953e:	fa0f fe80 	sxth.w	lr, r0
 8019542:	d817      	bhi.n	8019574 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8019544:	9b04      	ldr	r3, [sp, #16]
 8019546:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801954a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801954e:	1c6b      	adds	r3, r5, #1
 8019550:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8019554:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8019558:	9b01      	ldr	r3, [sp, #4]
 801955a:	9801      	ldr	r0, [sp, #4]
 801955c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019560:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8019564:	805a      	strh	r2, [r3, #2]
 8019566:	809e      	strh	r6, [r3, #4]
 8019568:	80d9      	strh	r1, [r3, #6]
 801956a:	9b02      	ldr	r3, [sp, #8]
 801956c:	3c08      	subs	r4, #8
 801956e:	3b01      	subs	r3, #1
 8019570:	9302      	str	r3, [sp, #8]
 8019572:	e747      	b.n	8019404 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8019574:	9a02      	ldr	r2, [sp, #8]
 8019576:	45b6      	cmp	lr, r6
 8019578:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801957c:	db0d      	blt.n	801959a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801957e:	449c      	add	ip, r3
 8019580:	fa1f fc8c 	uxth.w	ip, ip
 8019584:	445a      	add	r2, fp
 8019586:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801958a:	448c      	add	ip, r1
 801958c:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8019590:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8019594:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8019598:	e61e      	b.n	80191d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801959a:	445a      	add	r2, fp
 801959c:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 80195a0:	4484      	add	ip, r0
 80195a2:	e78f      	b.n	80194c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80195a4:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 80195a8:	fa1f f18e 	uxth.w	r1, lr
 80195ac:	eb01 0806 	add.w	r8, r1, r6
 80195b0:	b293      	uxth	r3, r2
 80195b2:	fa1f f888 	uxth.w	r8, r8
 80195b6:	9306      	str	r3, [sp, #24]
 80195b8:	fa0f f388 	sxth.w	r3, r8
 80195bc:	9307      	str	r3, [sp, #28]
 80195be:	9f06      	ldr	r7, [sp, #24]
 80195c0:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 80195c4:	4596      	cmp	lr, r2
 80195c6:	443b      	add	r3, r7
 80195c8:	b29b      	uxth	r3, r3
 80195ca:	9308      	str	r3, [sp, #32]
 80195cc:	da24      	bge.n	8019618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 80195ce:	9905      	ldr	r1, [sp, #20]
 80195d0:	eba3 0308 	sub.w	r3, r3, r8
 80195d4:	ebaa 0401 	sub.w	r4, sl, r1
 80195d8:	b2a4      	uxth	r4, r4
 80195da:	b29b      	uxth	r3, r3
 80195dc:	b225      	sxth	r5, r4
 80195de:	b219      	sxth	r1, r3
 80195e0:	eba2 020e 	sub.w	r2, r2, lr
 80195e4:	eba9 0000 	sub.w	r0, r9, r0
 80195e8:	436a      	muls	r2, r5
 80195ea:	4348      	muls	r0, r1
 80195ec:	4282      	cmp	r2, r0
 80195ee:	9a02      	ldr	r2, [sp, #8]
 80195f0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80195f4:	445a      	add	r2, fp
 80195f6:	dc06      	bgt.n	8019606 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80195f8:	9b07      	ldr	r3, [sp, #28]
 80195fa:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 80195fe:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8019602:	44a4      	add	ip, r4
 8019604:	e75e      	b.n	80194c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8019606:	9904      	ldr	r1, [sp, #16]
 8019608:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801960c:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8019610:	4433      	add	r3, r6
 8019612:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019616:	e5df      	b.n	80191d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019618:	9f06      	ldr	r7, [sp, #24]
 801961a:	9b04      	ldr	r3, [sp, #16]
 801961c:	1bc9      	subs	r1, r1, r7
 801961e:	fa0f f78a 	sxth.w	r7, sl
 8019622:	b289      	uxth	r1, r1
 8019624:	429f      	cmp	r7, r3
 8019626:	fa0f fe81 	sxth.w	lr, r1
 801962a:	dd24      	ble.n	8019676 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4ca>
 801962c:	9a05      	ldr	r2, [sp, #20]
 801962e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019632:	ebaa 0202 	sub.w	r2, sl, r2
 8019636:	9d07      	ldr	r5, [sp, #28]
 8019638:	b292      	uxth	r2, r2
 801963a:	eba5 0a03 	sub.w	sl, r5, r3
 801963e:	b214      	sxth	r4, r2
 8019640:	eba9 0000 	sub.w	r0, r9, r0
 8019644:	fb0e f000 	mul.w	r0, lr, r0
 8019648:	fb04 fa0a 	mul.w	sl, r4, sl
 801964c:	9b02      	ldr	r3, [sp, #8]
 801964e:	4550      	cmp	r0, sl
 8019650:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8019654:	445b      	add	r3, fp
 8019656:	db03      	blt.n	8019660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b4>
 8019658:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801965c:	4494      	add	ip, r2
 801965e:	e731      	b.n	80194c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8019660:	9a04      	ldr	r2, [sp, #16]
 8019662:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8019666:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801966a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801966e:	4431      	add	r1, r6
 8019670:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8019674:	e75b      	b.n	801952e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8019676:	9b08      	ldr	r3, [sp, #32]
 8019678:	2d06      	cmp	r5, #6
 801967a:	eba3 0308 	sub.w	r3, r3, r8
 801967e:	b29b      	uxth	r3, r3
 8019680:	b218      	sxth	r0, r3
 8019682:	d813      	bhi.n	80196ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x500>
 8019684:	9b07      	ldr	r3, [sp, #28]
 8019686:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801968a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801968e:	1c6b      	adds	r3, r5, #1
 8019690:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8019694:	9b01      	ldr	r3, [sp, #4]
 8019696:	9901      	ldr	r1, [sp, #4]
 8019698:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801969c:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 80196a0:	805a      	strh	r2, [r3, #2]
 80196a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80196a4:	f8a3 e006 	strh.w	lr, [r3, #6]
 80196a8:	809a      	strh	r2, [r3, #4]
 80196aa:	e75e      	b.n	801956a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80196ac:	9c02      	ldr	r4, [sp, #8]
 80196ae:	4570      	cmp	r0, lr
 80196b0:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80196b4:	db0d      	blt.n	80196d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x526>
 80196b6:	4431      	add	r1, r6
 80196b8:	9b06      	ldr	r3, [sp, #24]
 80196ba:	b289      	uxth	r1, r1
 80196bc:	445c      	add	r4, fp
 80196be:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80196c2:	4419      	add	r1, r3
 80196c4:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80196c8:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 80196cc:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 80196d0:	e582      	b.n	80191d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80196d2:	445c      	add	r4, fp
 80196d4:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 80196d8:	e79a      	b.n	8019610 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 80196da:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 80196de:	2e07      	cmp	r6, #7
 80196e0:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80196e4:	d812      	bhi.n	801970c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x560>
 80196e6:	1c75      	adds	r5, r6, #1
 80196e8:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 80196ec:	9d01      	ldr	r5, [sp, #4]
 80196ee:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80196f2:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80196f6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80196fa:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80196fe:	442c      	add	r4, r5
 8019700:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8019704:	8061      	strh	r1, [r4, #2]
 8019706:	80a2      	strh	r2, [r4, #4]
 8019708:	80e3      	strh	r3, [r4, #6]
 801970a:	e5cf      	b.n	80192ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801970c:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8019710:	f04f 37ff 	mov.w	r7, #4294967295
 8019714:	2500      	movs	r5, #0
 8019716:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801971a:	3e01      	subs	r6, #1
 801971c:	445c      	add	r4, fp
 801971e:	9305      	str	r3, [sp, #20]
 8019720:	1e72      	subs	r2, r6, #1
 8019722:	4691      	mov	r9, r2
 8019724:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8019728:	9302      	str	r3, [sp, #8]
 801972a:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801972e:	9304      	str	r3, [sp, #16]
 8019730:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8019734:	f1b9 3fff 	cmp.w	r9, #4294967295
 8019738:	bf16      	itet	ne
 801973a:	9905      	ldrne	r1, [sp, #20]
 801973c:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8019740:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8019744:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8019748:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801974c:	6818      	ldr	r0, [r3, #0]
 801974e:	fb18 f801 	smulbb	r8, r8, r1
 8019752:	6859      	ldr	r1, [r3, #4]
 8019754:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019758:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801975c:	4671      	mov	r1, lr
 801975e:	a80c      	add	r0, sp, #48	; 0x30
 8019760:	9207      	str	r2, [sp, #28]
 8019762:	9306      	str	r3, [sp, #24]
 8019764:	f7ff fbbc 	bl	8018ee0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019768:	f04f 0c08 	mov.w	ip, #8
 801976c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8019770:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8019774:	9b04      	ldr	r3, [sp, #16]
 8019776:	9a02      	ldr	r2, [sp, #8]
 8019778:	fb10 f001 	smulbb	r0, r0, r1
 801977c:	fb02 8803 	mla	r8, r2, r3, r8
 8019780:	eba0 0108 	sub.w	r1, r0, r8
 8019784:	fb90 f0fc 	sdiv	r0, r0, ip
 8019788:	4288      	cmp	r0, r1
 801978a:	dc20      	bgt.n	80197ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 801978c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8019790:	4551      	cmp	r1, sl
 8019792:	da03      	bge.n	801979c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
 8019794:	b1d9      	cbz	r1, 80197ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 8019796:	468a      	mov	sl, r1
 8019798:	464f      	mov	r7, r9
 801979a:	4635      	mov	r5, r6
 801979c:	f109 39ff 	add.w	r9, r9, #4294967295
 80197a0:	f119 0f02 	cmn.w	r9, #2
 80197a4:	d1c6      	bne.n	8019734 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x588>
 80197a6:	4616      	mov	r6, r2
 80197a8:	3201      	adds	r2, #1
 80197aa:	f1a4 0408 	sub.w	r4, r4, #8
 80197ae:	d1b7      	bne.n	8019720 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 80197b0:	9b01      	ldr	r3, [sp, #4]
 80197b2:	b2ac      	uxth	r4, r5
 80197b4:	00ed      	lsls	r5, r5, #3
 80197b6:	1958      	adds	r0, r3, r5
 80197b8:	1c7b      	adds	r3, r7, #1
 80197ba:	d10b      	bne.n	80197d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x628>
 80197bc:	4601      	mov	r1, r0
 80197be:	9803      	ldr	r0, [sp, #12]
 80197c0:	f7ff fb8e 	bl	8018ee0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80197c4:	4621      	mov	r1, r4
 80197c6:	9801      	ldr	r0, [sp, #4]
 80197c8:	f7ff fcdc 	bl	8019184 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80197cc:	e504      	b.n	80191d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80197ce:	464f      	mov	r7, r9
 80197d0:	4635      	mov	r5, r6
 80197d2:	e7ed      	b.n	80197b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 80197d4:	9b01      	ldr	r3, [sp, #4]
 80197d6:	00ff      	lsls	r7, r7, #3
 80197d8:	19d9      	adds	r1, r3, r7
 80197da:	f7ff fb81 	bl	8018ee0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80197de:	9b03      	ldr	r3, [sp, #12]
 80197e0:	445f      	add	r7, fp
 80197e2:	cb03      	ldmia	r3!, {r0, r1}
 80197e4:	445d      	add	r5, fp
 80197e6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 80197ea:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80197ee:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80197f2:	9b03      	ldr	r3, [sp, #12]
 80197f4:	6869      	ldr	r1, [r5, #4]
 80197f6:	c303      	stmia	r3!, {r0, r1}
 80197f8:	e7e4      	b.n	80197c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x618>
 80197fa:	bf00      	nop

080197fc <_ZN8touchgfx11Application10invalidateEv>:
 80197fc:	2100      	movs	r1, #0
 80197fe:	4b09      	ldr	r3, [pc, #36]	; (8019824 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8019800:	b082      	sub	sp, #8
 8019802:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019806:	4b08      	ldr	r3, [pc, #32]	; (8019828 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8019808:	9100      	str	r1, [sp, #0]
 801980a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801980e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019812:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019816:	ab02      	add	r3, sp, #8
 8019818:	e913 0006 	ldmdb	r3, {r1, r2}
 801981c:	b002      	add	sp, #8
 801981e:	f7ff bcc5 	b.w	80191ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019822:	bf00      	nop
 8019824:	201984ec 	.word	0x201984ec
 8019828:	201984ee 	.word	0x201984ee

0801982c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801982c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019830:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8019834:	b09b      	sub	sp, #108	; 0x6c
 8019836:	4604      	mov	r4, r0
 8019838:	4630      	mov	r0, r6
 801983a:	f7fd fb54 	bl	8016ee6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801983e:	4605      	mov	r5, r0
 8019840:	b940      	cbnz	r0, 8019854 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8019842:	e896 0006 	ldmia.w	r6, {r1, r2}
 8019846:	4620      	mov	r0, r4
 8019848:	f7ff fcb0 	bl	80191ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801984c:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8019850:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8019854:	4bc9      	ldr	r3, [pc, #804]	; (8019b7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	2b00      	cmp	r3, #0
 801985a:	d03e      	beq.n	80198da <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801985c:	4dc8      	ldr	r5, [pc, #800]	; (8019b80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801985e:	4628      	mov	r0, r5
 8019860:	f7fd fb41 	bl	8016ee6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019864:	4606      	mov	r6, r0
 8019866:	2800      	cmp	r0, #0
 8019868:	d137      	bne.n	80198da <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801986a:	4628      	mov	r0, r5
 801986c:	f7ff f9e4 	bl	8018c38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019870:	6829      	ldr	r1, [r5, #0]
 8019872:	686a      	ldr	r2, [r5, #4]
 8019874:	4620      	mov	r0, r4
 8019876:	f7ff fc99 	bl	80191ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801987a:	802e      	strh	r6, [r5, #0]
 801987c:	806e      	strh	r6, [r5, #2]
 801987e:	80ae      	strh	r6, [r5, #4]
 8019880:	80ee      	strh	r6, [r5, #6]
 8019882:	ae09      	add	r6, sp, #36	; 0x24
 8019884:	4630      	mov	r0, r6
 8019886:	f7ff fc25 	bl	80190d4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801988a:	4abe      	ldr	r2, [pc, #760]	; (8019b84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801988c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8019890:	8815      	ldrh	r5, [r2, #0]
 8019892:	9202      	str	r2, [sp, #8]
 8019894:	462b      	mov	r3, r5
 8019896:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801989a:	429f      	cmp	r7, r3
 801989c:	d924      	bls.n	80198e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801989e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80198a2:	2907      	cmp	r1, #7
 80198a4:	d816      	bhi.n	80198d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 80198a6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80198aa:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 80198ae:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80198b2:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80198b6:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 80198ba:	1c4a      	adds	r2, r1, #1
 80198bc:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 80198c0:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 80198c4:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 80198c8:	f8a2 9002 	strh.w	r9, [r2, #2]
 80198cc:	f8a2 e004 	strh.w	lr, [r2, #4]
 80198d0:	f8a2 c006 	strh.w	ip, [r2, #6]
 80198d4:	3301      	adds	r3, #1
 80198d6:	b29b      	uxth	r3, r3
 80198d8:	e7df      	b.n	801989a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 80198da:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80198de:	2b00      	cmp	r3, #0
 80198e0:	d1cf      	bne.n	8019882 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 80198e2:	b01b      	add	sp, #108	; 0x6c
 80198e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198e8:	462f      	mov	r7, r5
 80198ea:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 80198ee:	42bb      	cmp	r3, r7
 80198f0:	d90b      	bls.n	801990a <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 80198f2:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80198f6:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 80198fa:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 80198fe:	4620      	mov	r0, r4
 8019900:	3701      	adds	r7, #1
 8019902:	f7ff fc53 	bl	80191ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019906:	b2bf      	uxth	r7, r7
 8019908:	e7ef      	b.n	80198ea <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801990a:	4a9f      	ldr	r2, [pc, #636]	; (8019b88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801990c:	6813      	ldr	r3, [r2, #0]
 801990e:	4690      	mov	r8, r2
 8019910:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8019914:	2b01      	cmp	r3, #1
 8019916:	f040 80e6 	bne.w	8019ae6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 801991a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801991e:	4629      	mov	r1, r5
 8019920:	2500      	movs	r5, #0
 8019922:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8019926:	33ae      	adds	r3, #174	; 0xae
 8019928:	428f      	cmp	r7, r1
 801992a:	f103 0308 	add.w	r3, r3, #8
 801992e:	dd0a      	ble.n	8019946 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8019930:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8019934:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8019938:	3101      	adds	r1, #1
 801993a:	4402      	add	r2, r0
 801993c:	b212      	sxth	r2, r2
 801993e:	4295      	cmp	r5, r2
 8019940:	bfb8      	it	lt
 8019942:	4615      	movlt	r5, r2
 8019944:	e7f0      	b.n	8019928 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8019946:	4b91      	ldr	r3, [pc, #580]	; (8019b8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8019948:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8019b88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 801994c:	881b      	ldrh	r3, [r3, #0]
 801994e:	46d8      	mov	r8, fp
 8019950:	2b0f      	cmp	r3, #15
 8019952:	bf88      	it	hi
 8019954:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8019958:	f04f 0300 	mov.w	r3, #0
 801995c:	bf98      	it	ls
 801995e:	f04f 0a01 	movls.w	sl, #1
 8019962:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8019966:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801996a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801996e:	4438      	add	r0, r7
 8019970:	b207      	sxth	r7, r0
 8019972:	f8db 0000 	ldr.w	r0, [fp]
 8019976:	42bd      	cmp	r5, r7
 8019978:	6803      	ldr	r3, [r0, #0]
 801997a:	f340 8084 	ble.w	8019a86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801997e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019982:	4798      	blx	r3
 8019984:	eb07 030a 	add.w	r3, r7, sl
 8019988:	4298      	cmp	r0, r3
 801998a:	da07      	bge.n	801999c <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 801998c:	4285      	cmp	r5, r0
 801998e:	dd05      	ble.n	801999c <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8019990:	4287      	cmp	r7, r0
 8019992:	dd6d      	ble.n	8019a70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8019994:	2f00      	cmp	r7, #0
 8019996:	dd6b      	ble.n	8019a70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8019998:	4628      	mov	r0, r5
 801999a:	e004      	b.n	80199a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 801999c:	4287      	cmp	r7, r0
 801999e:	dcfb      	bgt.n	8019998 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 80199a0:	42a8      	cmp	r0, r5
 80199a2:	bfa8      	it	ge
 80199a4:	4628      	movge	r0, r5
 80199a6:	2200      	movs	r2, #0
 80199a8:	4b79      	ldr	r3, [pc, #484]	; (8019b90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 80199aa:	1bc0      	subs	r0, r0, r7
 80199ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80199b0:	f8ad 7016 	strh.w	r7, [sp, #22]
 80199b4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80199b8:	9b02      	ldr	r3, [sp, #8]
 80199ba:	f8ad 2014 	strh.w	r2, [sp, #20]
 80199be:	881f      	ldrh	r7, [r3, #0]
 80199c0:	f8ad 001a 	strh.w	r0, [sp, #26]
 80199c4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80199c8:	42bb      	cmp	r3, r7
 80199ca:	d9cc      	bls.n	8019966 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 80199cc:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80199d0:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80199d4:	ab07      	add	r3, sp, #28
 80199d6:	6851      	ldr	r1, [r2, #4]
 80199d8:	c303      	stmia	r3!, {r0, r1}
 80199da:	a905      	add	r1, sp, #20
 80199dc:	a807      	add	r0, sp, #28
 80199de:	f7ff f9e6 	bl	8018dae <_ZNK8touchgfx4Rect9intersectERKS0_>
 80199e2:	2800      	cmp	r0, #0
 80199e4:	d04c      	beq.n	8019a80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 80199e6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80199ea:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80199ee:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 80199f2:	4686      	mov	lr, r0
 80199f4:	4290      	cmp	r0, r2
 80199f6:	4448      	add	r0, r9
 80199f8:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 80199fc:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8019a00:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019a04:	bfb8      	it	lt
 8019a06:	4696      	movlt	lr, r2
 8019a08:	444a      	add	r2, r9
 8019a0a:	4299      	cmp	r1, r3
 8019a0c:	b280      	uxth	r0, r0
 8019a0e:	b292      	uxth	r2, r2
 8019a10:	468c      	mov	ip, r1
 8019a12:	9303      	str	r3, [sp, #12]
 8019a14:	bfb8      	it	lt
 8019a16:	469c      	movlt	ip, r3
 8019a18:	fa0f f982 	sxth.w	r9, r2
 8019a1c:	b203      	sxth	r3, r0
 8019a1e:	454b      	cmp	r3, r9
 8019a20:	bfb8      	it	lt
 8019a22:	4602      	movlt	r2, r0
 8019a24:	eba2 020e 	sub.w	r2, r2, lr
 8019a28:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019a2c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8019a30:	9b03      	ldr	r3, [sp, #12]
 8019a32:	4411      	add	r1, r2
 8019a34:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019a38:	b289      	uxth	r1, r1
 8019a3a:	4413      	add	r3, r2
 8019a3c:	b29b      	uxth	r3, r3
 8019a3e:	b208      	sxth	r0, r1
 8019a40:	b21a      	sxth	r2, r3
 8019a42:	4290      	cmp	r0, r2
 8019a44:	bfb8      	it	lt
 8019a46:	460b      	movlt	r3, r1
 8019a48:	eba3 030c 	sub.w	r3, r3, ip
 8019a4c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019a50:	f8ad e01c 	strh.w	lr, [sp, #28]
 8019a54:	f8ad c01e 	strh.w	ip, [sp, #30]
 8019a58:	a807      	add	r0, sp, #28
 8019a5a:	f7fd fa44 	bl	8016ee6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019a5e:	b920      	cbnz	r0, 8019a6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 8019a60:	6823      	ldr	r3, [r4, #0]
 8019a62:	a907      	add	r1, sp, #28
 8019a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a66:	4620      	mov	r0, r4
 8019a68:	4798      	blx	r3
 8019a6a:	3701      	adds	r7, #1
 8019a6c:	b2bf      	uxth	r7, r7
 8019a6e:	e7a9      	b.n	80199c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 8019a70:	f8d8 0000 	ldr.w	r0, [r8]
 8019a74:	2101      	movs	r1, #1
 8019a76:	6803      	ldr	r3, [r0, #0]
 8019a78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8019a7c:	4798      	blx	r3
 8019a7e:	e772      	b.n	8019966 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8019a80:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8019a84:	e7e8      	b.n	8019a58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8019a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a88:	4798      	blx	r3
 8019a8a:	4b42      	ldr	r3, [pc, #264]	; (8019b94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8019a8c:	781b      	ldrb	r3, [r3, #0]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	f43f af27 	beq.w	80198e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8019a94:	2300      	movs	r3, #0
 8019a96:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8019a9a:	9b02      	ldr	r3, [sp, #8]
 8019a9c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8019aa0:	881b      	ldrh	r3, [r3, #0]
 8019aa2:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8019aa6:	429d      	cmp	r5, r3
 8019aa8:	f67f af1b 	bls.w	80198e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8019aac:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8019ab0:	2907      	cmp	r1, #7
 8019ab2:	d815      	bhi.n	8019ae0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 8019ab4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8019ab8:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8019abc:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8019ac0:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8019ac4:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8019ac8:	1c4a      	adds	r2, r1, #1
 8019aca:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8019ace:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8019ad2:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8019ad6:	f8a2 e002 	strh.w	lr, [r2, #2]
 8019ada:	f8a2 c004 	strh.w	ip, [r2, #4]
 8019ade:	80d7      	strh	r7, [r2, #6]
 8019ae0:	3301      	adds	r3, #1
 8019ae2:	b29b      	uxth	r3, r3
 8019ae4:	e7df      	b.n	8019aa6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 8019ae6:	2b02      	cmp	r3, #2
 8019ae8:	f040 8136 	bne.w	8019d58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8019aec:	4b2a      	ldr	r3, [pc, #168]	; (8019b98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 8019aee:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8019af2:	781b      	ldrb	r3, [r3, #0]
 8019af4:	2b01      	cmp	r3, #1
 8019af6:	f000 809c 	beq.w	8019c32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8019afa:	9b02      	ldr	r3, [sp, #8]
 8019afc:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 8019b00:	f8b3 b000 	ldrh.w	fp, [r3]
 8019b04:	f10b 0b01 	add.w	fp, fp, #1
 8019b08:	fa1f fb8b 	uxth.w	fp, fp
 8019b0c:	2a00      	cmp	r2, #0
 8019b0e:	d0bc      	beq.n	8019a8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8019b10:	4659      	mov	r1, fp
 8019b12:	f04f 0800 	mov.w	r8, #0
 8019b16:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 8019b1a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8019b1e:	441d      	add	r5, r3
 8019b20:	b22d      	sxth	r5, r5
 8019b22:	b28b      	uxth	r3, r1
 8019b24:	429a      	cmp	r2, r3
 8019b26:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8019b2a:	f240 80c1 	bls.w	8019cb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 8019b2e:	4427      	add	r7, r4
 8019b30:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8019b34:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8019b38:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 8019b3c:	4608      	mov	r0, r1
 8019b3e:	4563      	cmp	r3, ip
 8019b40:	f340 80a3 	ble.w	8019c8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 8019b44:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 8019b48:	4465      	add	r5, ip
 8019b4a:	b22d      	sxth	r5, r5
 8019b4c:	429d      	cmp	r5, r3
 8019b4e:	bfa8      	it	ge
 8019b50:	461d      	movge	r5, r3
 8019b52:	3101      	adds	r1, #1
 8019b54:	4680      	mov	r8, r0
 8019b56:	e7e4      	b.n	8019b22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8019b58:	d10b      	bne.n	8019b72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 8019b5a:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 8019b5e:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 8019b62:	458c      	cmp	ip, r1
 8019b64:	bfb4      	ite	lt
 8019b66:	469c      	movlt	ip, r3
 8019b68:	46bc      	movge	ip, r7
 8019b6a:	4572      	cmp	r2, lr
 8019b6c:	bfb8      	it	lt
 8019b6e:	4672      	movlt	r2, lr
 8019b70:	e088      	b.n	8019c84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8019b72:	428a      	cmp	r2, r1
 8019b74:	bfb8      	it	lt
 8019b76:	460a      	movlt	r2, r1
 8019b78:	46bc      	mov	ip, r7
 8019b7a:	e083      	b.n	8019c84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8019b7c:	20198530 	.word	0x20198530
 8019b80:	2019853c 	.word	0x2019853c
 8019b84:	20000058 	.word	0x20000058
 8019b88:	201984f8 	.word	0x201984f8
 8019b8c:	201984ee 	.word	0x201984ee
 8019b90:	201984ec 	.word	0x201984ec
 8019b94:	201984f6 	.word	0x201984f6
 8019b98:	201984f0 	.word	0x201984f0
 8019b9c:	1961      	adds	r1, r4, r5
 8019b9e:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8019ba2:	ab07      	add	r3, sp, #28
 8019ba4:	6849      	ldr	r1, [r1, #4]
 8019ba6:	c303      	stmia	r3!, {r0, r1}
 8019ba8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019bac:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019bb0:	2b13      	cmp	r3, #19
 8019bb2:	bfd8      	it	le
 8019bb4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8019bb8:	440b      	add	r3, r1
 8019bba:	1a9b      	subs	r3, r3, r2
 8019bbc:	a807      	add	r0, sp, #28
 8019bbe:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019bc2:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019bc6:	f7ff f851 	bl	8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019bca:	a807      	add	r0, sp, #28
 8019bcc:	f7fd f98b 	bl	8016ee6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019bd0:	bb78      	cbnz	r0, 8019c32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8019bd2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8019bd6:	f8d8 0000 	ldr.w	r0, [r8]
 8019bda:	f1bc 0f14 	cmp.w	ip, #20
 8019bde:	bfa8      	it	ge
 8019be0:	f04f 0c14 	movge.w	ip, #20
 8019be4:	f8d0 e000 	ldr.w	lr, [r0]
 8019be8:	fa1f fc8c 	uxth.w	ip, ip
 8019bec:	f8cd c000 	str.w	ip, [sp]
 8019bf0:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8019bf4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019bf8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8019bfc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019c00:	47d0      	blx	sl
 8019c02:	4682      	mov	sl, r0
 8019c04:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019c08:	a807      	add	r0, sp, #28
 8019c0a:	f7ff f815 	bl	8018c38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019c0e:	6823      	ldr	r3, [r4, #0]
 8019c10:	4620      	mov	r0, r4
 8019c12:	4425      	add	r5, r4
 8019c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c16:	a907      	add	r1, sp, #28
 8019c18:	4798      	blx	r3
 8019c1a:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 8019c1e:	eba0 000a 	sub.w	r0, r0, sl
 8019c22:	b200      	sxth	r0, r0
 8019c24:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 8019c28:	b918      	cbnz	r0, 8019c32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8019c2a:	b2b9      	uxth	r1, r7
 8019c2c:	4648      	mov	r0, r9
 8019c2e:	f7ff faa9 	bl	8019184 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019c32:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 8019c36:	f1bb 0f00 	cmp.w	fp, #0
 8019c3a:	f43f af26 	beq.w	8019a8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8019c3e:	2700      	movs	r7, #0
 8019c40:	9b02      	ldr	r3, [sp, #8]
 8019c42:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8019c46:	881b      	ldrh	r3, [r3, #0]
 8019c48:	3301      	adds	r3, #1
 8019c4a:	b29b      	uxth	r3, r3
 8019c4c:	b299      	uxth	r1, r3
 8019c4e:	458b      	cmp	fp, r1
 8019c50:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 8019c54:	d9a2      	bls.n	8019b9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 8019c56:	4425      	add	r5, r4
 8019c58:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 8019c5c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8019c60:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8019c64:	4408      	add	r0, r1
 8019c66:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 8019c6a:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 8019c6e:	b200      	sxth	r0, r0
 8019c70:	4471      	add	r1, lr
 8019c72:	b209      	sxth	r1, r1
 8019c74:	4288      	cmp	r0, r1
 8019c76:	469c      	mov	ip, r3
 8019c78:	f6bf af6e 	bge.w	8019b58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 8019c7c:	4586      	cmp	lr, r0
 8019c7e:	4672      	mov	r2, lr
 8019c80:	bfb8      	it	lt
 8019c82:	4602      	movlt	r2, r0
 8019c84:	3301      	adds	r3, #1
 8019c86:	4667      	mov	r7, ip
 8019c88:	e7e0      	b.n	8019c4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 8019c8a:	d10c      	bne.n	8019ca6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 8019c8c:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8019c90:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8019c94:	4287      	cmp	r7, r0
 8019c96:	bfb4      	ite	lt
 8019c98:	4608      	movlt	r0, r1
 8019c9a:	4640      	movge	r0, r8
 8019c9c:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8019ca0:	443b      	add	r3, r7
 8019ca2:	b21b      	sxth	r3, r3
 8019ca4:	e752      	b.n	8019b4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8019ca6:	4565      	cmp	r5, ip
 8019ca8:	bfa8      	it	ge
 8019caa:	4665      	movge	r5, ip
 8019cac:	4640      	mov	r0, r8
 8019cae:	e750      	b.n	8019b52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 8019cb0:	eb09 0007 	add.w	r0, r9, r7
 8019cb4:	4427      	add	r7, r4
 8019cb6:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 8019cba:	9203      	str	r2, [sp, #12]
 8019cbc:	f1ba 0f13 	cmp.w	sl, #19
 8019cc0:	bfde      	ittt	le
 8019cc2:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 8019cc6:	4455      	addle	r5, sl
 8019cc8:	b22d      	sxthle	r5, r5
 8019cca:	f7fd f90c 	bl	8016ee6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019cce:	9a03      	ldr	r2, [sp, #12]
 8019cd0:	2800      	cmp	r0, #0
 8019cd2:	f47f af1b 	bne.w	8019b0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 8019cd6:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8019cda:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019cde:	1aad      	subs	r5, r5, r2
 8019ce0:	2d14      	cmp	r5, #20
 8019ce2:	bfa8      	it	ge
 8019ce4:	2514      	movge	r5, #20
 8019ce6:	4828      	ldr	r0, [pc, #160]	; (8019d88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 8019ce8:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8019cec:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8019cf0:	6800      	ldr	r0, [r0, #0]
 8019cf2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019cf6:	f8ad 201e 	strh.w	r2, [sp, #30]
 8019cfa:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019cfe:	f8d0 c000 	ldr.w	ip, [r0]
 8019d02:	b2ad      	uxth	r5, r5
 8019d04:	fa1f fa8a 	uxth.w	sl, sl
 8019d08:	4555      	cmp	r5, sl
 8019d0a:	bf94      	ite	ls
 8019d0c:	9500      	strls	r5, [sp, #0]
 8019d0e:	f8cd a000 	strhi.w	sl, [sp]
 8019d12:	b292      	uxth	r2, r2
 8019d14:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8019d18:	b29b      	uxth	r3, r3
 8019d1a:	b289      	uxth	r1, r1
 8019d1c:	47a8      	blx	r5
 8019d1e:	6823      	ldr	r3, [r4, #0]
 8019d20:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d26:	a907      	add	r1, sp, #28
 8019d28:	4620      	mov	r0, r4
 8019d2a:	4798      	blx	r3
 8019d2c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8019d30:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8019d34:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8019d38:	1a5b      	subs	r3, r3, r1
 8019d3a:	440a      	add	r2, r1
 8019d3c:	b21b      	sxth	r3, r3
 8019d3e:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8019d42:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	f47f aed7 	bne.w	8019afa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8019d4c:	fa1f f188 	uxth.w	r1, r8
 8019d50:	4648      	mov	r0, r9
 8019d52:	f7ff fa17 	bl	8019184 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019d56:	e6d0      	b.n	8019afa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 8019d58:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8019d5c:	42ab      	cmp	r3, r5
 8019d5e:	f67f ae94 	bls.w	8019a8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8019d62:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019d66:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8019d6a:	ab07      	add	r3, sp, #28
 8019d6c:	6851      	ldr	r1, [r2, #4]
 8019d6e:	c303      	stmia	r3!, {r0, r1}
 8019d70:	a807      	add	r0, sp, #28
 8019d72:	f7fd f8b8 	bl	8016ee6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019d76:	b920      	cbnz	r0, 8019d82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 8019d78:	6823      	ldr	r3, [r4, #0]
 8019d7a:	a907      	add	r1, sp, #28
 8019d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d7e:	4620      	mov	r0, r4
 8019d80:	4798      	blx	r3
 8019d82:	3501      	adds	r5, #1
 8019d84:	b2ad      	uxth	r5, r5
 8019d86:	e7e7      	b.n	8019d58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8019d88:	201984f8 	.word	0x201984f8

08019d8c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8019d8c:	2200      	movs	r2, #0
 8019d8e:	4b03      	ldr	r3, [pc, #12]	; (8019d9c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8019d90:	801a      	strh	r2, [r3, #0]
 8019d92:	805a      	strh	r2, [r3, #2]
 8019d94:	809a      	strh	r2, [r3, #4]
 8019d96:	80da      	strh	r2, [r3, #6]
 8019d98:	4770      	bx	lr
 8019d9a:	bf00      	nop
 8019d9c:	2019853c 	.word	0x2019853c

08019da0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019da4:	4606      	mov	r6, r0
 8019da6:	b09d      	sub	sp, #116	; 0x74
 8019da8:	a803      	add	r0, sp, #12
 8019daa:	4614      	mov	r4, r2
 8019dac:	468a      	mov	sl, r1
 8019dae:	461d      	mov	r5, r3
 8019db0:	f000 fd7a 	bl	801a8a8 <_ZN8touchgfx12TextProviderC1Ev>
 8019db4:	6833      	ldr	r3, [r6, #0]
 8019db6:	4630      	mov	r0, r6
 8019db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019dba:	4798      	blx	r3
 8019dbc:	6833      	ldr	r3, [r6, #0]
 8019dbe:	4607      	mov	r7, r0
 8019dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019dc2:	4630      	mov	r0, r6
 8019dc4:	4798      	blx	r3
 8019dc6:	462a      	mov	r2, r5
 8019dc8:	2500      	movs	r5, #0
 8019dca:	9000      	str	r0, [sp, #0]
 8019dcc:	4621      	mov	r1, r4
 8019dce:	463b      	mov	r3, r7
 8019dd0:	a803      	add	r0, sp, #12
 8019dd2:	f000 fdbc 	bl	801a94e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019dd6:	462c      	mov	r4, r5
 8019dd8:	46a9      	mov	r9, r5
 8019dda:	46a8      	mov	r8, r5
 8019ddc:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8019de0:	2300      	movs	r3, #0
 8019de2:	9302      	str	r3, [sp, #8]
 8019de4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019de8:	429c      	cmp	r4, r3
 8019dea:	d002      	beq.n	8019df2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8019dec:	455c      	cmp	r4, fp
 8019dee:	bf18      	it	ne
 8019df0:	4625      	movne	r5, r4
 8019df2:	ab02      	add	r3, sp, #8
 8019df4:	4632      	mov	r2, r6
 8019df6:	4651      	mov	r1, sl
 8019df8:	a803      	add	r0, sp, #12
 8019dfa:	f001 f897 	bl	801af2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019dfe:	4604      	mov	r4, r0
 8019e00:	b108      	cbz	r0, 8019e06 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8019e02:	280a      	cmp	r0, #10
 8019e04:	d10a      	bne.n	8019e1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8019e06:	45c1      	cmp	r9, r8
 8019e08:	bf38      	it	cc
 8019e0a:	46c1      	movcc	r9, r8
 8019e0c:	f04f 0800 	mov.w	r8, #0
 8019e10:	2c00      	cmp	r4, #0
 8019e12:	d1e5      	bne.n	8019de0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8019e14:	4648      	mov	r0, r9
 8019e16:	b01d      	add	sp, #116	; 0x74
 8019e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e1c:	9a02      	ldr	r2, [sp, #8]
 8019e1e:	2a00      	cmp	r2, #0
 8019e20:	d0de      	beq.n	8019de0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8019e22:	7b57      	ldrb	r7, [r2, #13]
 8019e24:	6833      	ldr	r3, [r6, #0]
 8019e26:	007f      	lsls	r7, r7, #1
 8019e28:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8019e2c:	7a97      	ldrb	r7, [r2, #10]
 8019e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e30:	4307      	orrs	r7, r0
 8019e32:	4629      	mov	r1, r5
 8019e34:	4630      	mov	r0, r6
 8019e36:	8894      	ldrh	r4, [r2, #4]
 8019e38:	4798      	blx	r3
 8019e3a:	4438      	add	r0, r7
 8019e3c:	4480      	add	r8, r0
 8019e3e:	fa1f f888 	uxth.w	r8, r8
 8019e42:	e7e5      	b.n	8019e10 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08019e44 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8019e44:	b508      	push	{r3, lr}
 8019e46:	6803      	ldr	r3, [r0, #0]
 8019e48:	68db      	ldr	r3, [r3, #12]
 8019e4a:	4798      	blx	r3
 8019e4c:	b128      	cbz	r0, 8019e5a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019e4e:	7b43      	ldrb	r3, [r0, #13]
 8019e50:	7a80      	ldrb	r0, [r0, #10]
 8019e52:	005b      	lsls	r3, r3, #1
 8019e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019e58:	4318      	orrs	r0, r3
 8019e5a:	bd08      	pop	{r3, pc}

08019e5c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019e5c:	b40e      	push	{r1, r2, r3}
 8019e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e60:	4605      	mov	r5, r0
 8019e62:	b09e      	sub	sp, #120	; 0x78
 8019e64:	ab23      	add	r3, sp, #140	; 0x8c
 8019e66:	f853 4b04 	ldr.w	r4, [r3], #4
 8019e6a:	a805      	add	r0, sp, #20
 8019e6c:	9303      	str	r3, [sp, #12]
 8019e6e:	f000 fd1b 	bl	801a8a8 <_ZN8touchgfx12TextProviderC1Ev>
 8019e72:	682b      	ldr	r3, [r5, #0]
 8019e74:	4628      	mov	r0, r5
 8019e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019e78:	4798      	blx	r3
 8019e7a:	682b      	ldr	r3, [r5, #0]
 8019e7c:	4606      	mov	r6, r0
 8019e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019e80:	4628      	mov	r0, r5
 8019e82:	4798      	blx	r3
 8019e84:	4621      	mov	r1, r4
 8019e86:	2400      	movs	r4, #0
 8019e88:	4633      	mov	r3, r6
 8019e8a:	9000      	str	r0, [sp, #0]
 8019e8c:	9a03      	ldr	r2, [sp, #12]
 8019e8e:	ae1e      	add	r6, sp, #120	; 0x78
 8019e90:	a805      	add	r0, sp, #20
 8019e92:	f000 fd5c 	bl	801a94e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019e96:	f846 4d68 	str.w	r4, [r6, #-104]!
 8019e9a:	4633      	mov	r3, r6
 8019e9c:	462a      	mov	r2, r5
 8019e9e:	4621      	mov	r1, r4
 8019ea0:	a805      	add	r0, sp, #20
 8019ea2:	f001 f843 	bl	801af2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019ea6:	b1f0      	cbz	r0, 8019ee6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8019ea8:	280a      	cmp	r0, #10
 8019eaa:	d018      	beq.n	8019ede <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8019eac:	9f04      	ldr	r7, [sp, #16]
 8019eae:	b1b7      	cbz	r7, 8019ede <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8019eb0:	7b78      	ldrb	r0, [r7, #13]
 8019eb2:	7a3b      	ldrb	r3, [r7, #8]
 8019eb4:	00c1      	lsls	r1, r0, #3
 8019eb6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019eba:	4319      	orrs	r1, r3
 8019ebc:	0643      	lsls	r3, r0, #25
 8019ebe:	bf44      	itt	mi
 8019ec0:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8019ec4:	b219      	sxthmi	r1, r3
 8019ec6:	0100      	lsls	r0, r0, #4
 8019ec8:	79fb      	ldrb	r3, [r7, #7]
 8019eca:	88ea      	ldrh	r2, [r5, #6]
 8019ecc:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019ed0:	4303      	orrs	r3, r0
 8019ed2:	4413      	add	r3, r2
 8019ed4:	1a5b      	subs	r3, r3, r1
 8019ed6:	b21b      	sxth	r3, r3
 8019ed8:	429c      	cmp	r4, r3
 8019eda:	bfb8      	it	lt
 8019edc:	461c      	movlt	r4, r3
 8019ede:	4633      	mov	r3, r6
 8019ee0:	462a      	mov	r2, r5
 8019ee2:	2100      	movs	r1, #0
 8019ee4:	e7dc      	b.n	8019ea0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8019ee6:	b2a0      	uxth	r0, r4
 8019ee8:	b01e      	add	sp, #120	; 0x78
 8019eea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019eee:	b003      	add	sp, #12
 8019ef0:	4770      	bx	lr

08019ef2 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8019ef2:	7a43      	ldrb	r3, [r0, #9]
 8019ef4:	8880      	ldrh	r0, [r0, #4]
 8019ef6:	4418      	add	r0, r3
 8019ef8:	b280      	uxth	r0, r0
 8019efa:	4770      	bx	lr

08019efc <_ZNK8touchgfx4Font13getFontHeightEv>:
 8019efc:	6803      	ldr	r3, [r0, #0]
 8019efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f00:	4718      	bx	r3

08019f02 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019f02:	b40e      	push	{r1, r2, r3}
 8019f04:	b570      	push	{r4, r5, r6, lr}
 8019f06:	4604      	mov	r4, r0
 8019f08:	b09d      	sub	sp, #116	; 0x74
 8019f0a:	ab21      	add	r3, sp, #132	; 0x84
 8019f0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8019f10:	a803      	add	r0, sp, #12
 8019f12:	9302      	str	r3, [sp, #8]
 8019f14:	f000 fcc8 	bl	801a8a8 <_ZN8touchgfx12TextProviderC1Ev>
 8019f18:	6823      	ldr	r3, [r4, #0]
 8019f1a:	4620      	mov	r0, r4
 8019f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019f1e:	4798      	blx	r3
 8019f20:	6823      	ldr	r3, [r4, #0]
 8019f22:	4606      	mov	r6, r0
 8019f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019f26:	4620      	mov	r0, r4
 8019f28:	4798      	blx	r3
 8019f2a:	4633      	mov	r3, r6
 8019f2c:	9000      	str	r0, [sp, #0]
 8019f2e:	9a02      	ldr	r2, [sp, #8]
 8019f30:	4629      	mov	r1, r5
 8019f32:	a803      	add	r0, sp, #12
 8019f34:	f000 fd0b 	bl	801a94e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019f38:	a803      	add	r0, sp, #12
 8019f3a:	f001 f879 	bl	801b030 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019f3e:	2401      	movs	r4, #1
 8019f40:	b2a3      	uxth	r3, r4
 8019f42:	b140      	cbz	r0, 8019f56 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8019f44:	280a      	cmp	r0, #10
 8019f46:	bf08      	it	eq
 8019f48:	3301      	addeq	r3, #1
 8019f4a:	a803      	add	r0, sp, #12
 8019f4c:	bf08      	it	eq
 8019f4e:	b21c      	sxtheq	r4, r3
 8019f50:	f001 f86e 	bl	801b030 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019f54:	e7f4      	b.n	8019f40 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8019f56:	4618      	mov	r0, r3
 8019f58:	b01d      	add	sp, #116	; 0x74
 8019f5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f5e:	b003      	add	sp, #12
 8019f60:	4770      	bx	lr

08019f62 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019f62:	b40e      	push	{r1, r2, r3}
 8019f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f66:	4604      	mov	r4, r0
 8019f68:	b09e      	sub	sp, #120	; 0x78
 8019f6a:	ab23      	add	r3, sp, #140	; 0x8c
 8019f6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8019f70:	a805      	add	r0, sp, #20
 8019f72:	9303      	str	r3, [sp, #12]
 8019f74:	f000 fc98 	bl	801a8a8 <_ZN8touchgfx12TextProviderC1Ev>
 8019f78:	6823      	ldr	r3, [r4, #0]
 8019f7a:	4620      	mov	r0, r4
 8019f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019f7e:	4798      	blx	r3
 8019f80:	6823      	ldr	r3, [r4, #0]
 8019f82:	4606      	mov	r6, r0
 8019f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019f86:	4620      	mov	r0, r4
 8019f88:	4798      	blx	r3
 8019f8a:	4633      	mov	r3, r6
 8019f8c:	4629      	mov	r1, r5
 8019f8e:	9000      	str	r0, [sp, #0]
 8019f90:	9a03      	ldr	r2, [sp, #12]
 8019f92:	a805      	add	r0, sp, #20
 8019f94:	f000 fcdb 	bl	801a94e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019f98:	2100      	movs	r1, #0
 8019f9a:	ad1e      	add	r5, sp, #120	; 0x78
 8019f9c:	f845 1d68 	str.w	r1, [r5, #-104]!
 8019fa0:	462b      	mov	r3, r5
 8019fa2:	4622      	mov	r2, r4
 8019fa4:	a805      	add	r0, sp, #20
 8019fa6:	f000 ffc1 	bl	801af2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019faa:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8019fae:	b1d8      	cbz	r0, 8019fe8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8019fb0:	280a      	cmp	r0, #10
 8019fb2:	d012      	beq.n	8019fda <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019fb4:	9804      	ldr	r0, [sp, #16]
 8019fb6:	b180      	cbz	r0, 8019fda <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019fb8:	7b47      	ldrb	r7, [r0, #13]
 8019fba:	88e2      	ldrh	r2, [r4, #6]
 8019fbc:	00fb      	lsls	r3, r7, #3
 8019fbe:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019fc2:	7a03      	ldrb	r3, [r0, #8]
 8019fc4:	430b      	orrs	r3, r1
 8019fc6:	0679      	lsls	r1, r7, #25
 8019fc8:	bf44      	itt	mi
 8019fca:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019fce:	b21b      	sxthmi	r3, r3
 8019fd0:	1ad3      	subs	r3, r2, r3
 8019fd2:	b21b      	sxth	r3, r3
 8019fd4:	429e      	cmp	r6, r3
 8019fd6:	bfa8      	it	ge
 8019fd8:	461e      	movge	r6, r3
 8019fda:	462b      	mov	r3, r5
 8019fdc:	4622      	mov	r2, r4
 8019fde:	2100      	movs	r1, #0
 8019fe0:	a805      	add	r0, sp, #20
 8019fe2:	f000 ffa3 	bl	801af2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019fe6:	e7e2      	b.n	8019fae <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8019fe8:	4630      	mov	r0, r6
 8019fea:	b01e      	add	sp, #120	; 0x78
 8019fec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019ff0:	b003      	add	sp, #12
 8019ff2:	4770      	bx	lr

08019ff4 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019ff4:	b513      	push	{r0, r1, r4, lr}
 8019ff6:	2400      	movs	r4, #0
 8019ff8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019ffc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a000:	6803      	ldr	r3, [r0, #0]
 801a002:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a006:	9400      	str	r4, [sp, #0]
 801a008:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a00c:	691b      	ldr	r3, [r3, #16]
 801a00e:	4669      	mov	r1, sp
 801a010:	4798      	blx	r3
 801a012:	b002      	add	sp, #8
 801a014:	bd10      	pop	{r4, pc}

0801a016 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801a016:	b538      	push	{r3, r4, r5, lr}
 801a018:	460c      	mov	r4, r1
 801a01a:	4605      	mov	r5, r0
 801a01c:	680b      	ldr	r3, [r1, #0]
 801a01e:	68db      	ldr	r3, [r3, #12]
 801a020:	4798      	blx	r3
 801a022:	6823      	ldr	r3, [r4, #0]
 801a024:	4620      	mov	r0, r4
 801a026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a028:	4629      	mov	r1, r5
 801a02a:	4798      	blx	r3
 801a02c:	4628      	mov	r0, r5
 801a02e:	bd38      	pop	{r3, r4, r5, pc}

0801a030 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801a030:	b410      	push	{r4}
 801a032:	880a      	ldrh	r2, [r1, #0]
 801a034:	8884      	ldrh	r4, [r0, #4]
 801a036:	4422      	add	r2, r4
 801a038:	800a      	strh	r2, [r1, #0]
 801a03a:	88c4      	ldrh	r4, [r0, #6]
 801a03c:	884a      	ldrh	r2, [r1, #2]
 801a03e:	4422      	add	r2, r4
 801a040:	804a      	strh	r2, [r1, #2]
 801a042:	6940      	ldr	r0, [r0, #20]
 801a044:	b120      	cbz	r0, 801a050 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801a046:	6803      	ldr	r3, [r0, #0]
 801a048:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a04e:	4718      	bx	r3
 801a050:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a054:	4770      	bx	lr

0801a056 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801a056:	b570      	push	{r4, r5, r6, lr}
 801a058:	460c      	mov	r4, r1
 801a05a:	8882      	ldrh	r2, [r0, #4]
 801a05c:	880b      	ldrh	r3, [r1, #0]
 801a05e:	4605      	mov	r5, r0
 801a060:	4413      	add	r3, r2
 801a062:	800b      	strh	r3, [r1, #0]
 801a064:	88c2      	ldrh	r2, [r0, #6]
 801a066:	884b      	ldrh	r3, [r1, #2]
 801a068:	4413      	add	r3, r2
 801a06a:	804b      	strh	r3, [r1, #2]
 801a06c:	1d01      	adds	r1, r0, #4
 801a06e:	4620      	mov	r0, r4
 801a070:	f7fc fef6 	bl	8016e60 <_ZN8touchgfx4RectaNERKS0_>
 801a074:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801a078:	2b00      	cmp	r3, #0
 801a07a:	dd0b      	ble.n	801a094 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a07c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a080:	2b00      	cmp	r3, #0
 801a082:	dd07      	ble.n	801a094 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a084:	6968      	ldr	r0, [r5, #20]
 801a086:	b128      	cbz	r0, 801a094 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801a088:	6803      	ldr	r3, [r0, #0]
 801a08a:	4621      	mov	r1, r4
 801a08c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a092:	4718      	bx	r3
 801a094:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a098 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801a098:	b570      	push	{r4, r5, r6, lr}
 801a09a:	460c      	mov	r4, r1
 801a09c:	8882      	ldrh	r2, [r0, #4]
 801a09e:	880b      	ldrh	r3, [r1, #0]
 801a0a0:	4605      	mov	r5, r0
 801a0a2:	4413      	add	r3, r2
 801a0a4:	800b      	strh	r3, [r1, #0]
 801a0a6:	88c2      	ldrh	r2, [r0, #6]
 801a0a8:	884b      	ldrh	r3, [r1, #2]
 801a0aa:	4413      	add	r3, r2
 801a0ac:	804b      	strh	r3, [r1, #2]
 801a0ae:	1d01      	adds	r1, r0, #4
 801a0b0:	4620      	mov	r0, r4
 801a0b2:	f7fc fed5 	bl	8016e60 <_ZN8touchgfx4RectaNERKS0_>
 801a0b6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	dd18      	ble.n	801a0f0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801a0be:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	dd14      	ble.n	801a0f0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801a0c6:	6968      	ldr	r0, [r5, #20]
 801a0c8:	b128      	cbz	r0, 801a0d6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801a0ca:	6803      	ldr	r3, [r0, #0]
 801a0cc:	4621      	mov	r1, r4
 801a0ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a0d2:	691b      	ldr	r3, [r3, #16]
 801a0d4:	4718      	bx	r3
 801a0d6:	4b07      	ldr	r3, [pc, #28]	; (801a0f4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	3304      	adds	r3, #4
 801a0dc:	429d      	cmp	r5, r3
 801a0de:	d107      	bne.n	801a0f0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801a0e0:	f7fe ff44 	bl	8018f6c <_ZN8touchgfx11Application11getInstanceEv>
 801a0e4:	6821      	ldr	r1, [r4, #0]
 801a0e6:	6862      	ldr	r2, [r4, #4]
 801a0e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a0ec:	f7ff b85e 	b.w	80191ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a0f0:	bd70      	pop	{r4, r5, r6, pc}
 801a0f2:	bf00      	nop
 801a0f4:	20198534 	.word	0x20198534

0801a0f8 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801a0f8:	b570      	push	{r4, r5, r6, lr}
 801a0fa:	4604      	mov	r4, r0
 801a0fc:	4616      	mov	r6, r2
 801a0fe:	460d      	mov	r5, r1
 801a100:	b901      	cbnz	r1, 801a104 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801a102:	b192      	cbz	r2, 801a12a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801a104:	6823      	ldr	r3, [r4, #0]
 801a106:	4620      	mov	r0, r4
 801a108:	699b      	ldr	r3, [r3, #24]
 801a10a:	4798      	blx	r3
 801a10c:	88e2      	ldrh	r2, [r4, #6]
 801a10e:	88a1      	ldrh	r1, [r4, #4]
 801a110:	4432      	add	r2, r6
 801a112:	4429      	add	r1, r5
 801a114:	4620      	mov	r0, r4
 801a116:	b212      	sxth	r2, r2
 801a118:	b209      	sxth	r1, r1
 801a11a:	f7fd f97f 	bl	801741c <_ZN8touchgfx8Drawable5setXYEss>
 801a11e:	6823      	ldr	r3, [r4, #0]
 801a120:	4620      	mov	r0, r4
 801a122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a126:	699b      	ldr	r3, [r3, #24]
 801a128:	4718      	bx	r3
 801a12a:	bd70      	pop	{r4, r5, r6, pc}

0801a12c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801a12c:	b510      	push	{r4, lr}
 801a12e:	2300      	movs	r3, #0
 801a130:	4604      	mov	r4, r0
 801a132:	4608      	mov	r0, r1
 801a134:	8023      	strh	r3, [r4, #0]
 801a136:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a13a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801a13e:	8063      	strh	r3, [r4, #2]
 801a140:	6803      	ldr	r3, [r0, #0]
 801a142:	80a1      	strh	r1, [r4, #4]
 801a144:	80e2      	strh	r2, [r4, #6]
 801a146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a148:	4621      	mov	r1, r4
 801a14a:	4798      	blx	r3
 801a14c:	4620      	mov	r0, r4
 801a14e:	bd10      	pop	{r4, pc}

0801a150 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801a150:	b530      	push	{r4, r5, lr}
 801a152:	8083      	strh	r3, [r0, #4]
 801a154:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801a158:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801a15c:	80c3      	strh	r3, [r0, #6]
 801a15e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801a162:	6141      	str	r1, [r0, #20]
 801a164:	7203      	strb	r3, [r0, #8]
 801a166:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a16a:	8302      	strh	r2, [r0, #24]
 801a16c:	7243      	strb	r3, [r0, #9]
 801a16e:	7a83      	ldrb	r3, [r0, #10]
 801a170:	f365 0306 	bfi	r3, r5, #0, #7
 801a174:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801a178:	f365 13c7 	bfi	r3, r5, #7, #1
 801a17c:	7283      	strb	r3, [r0, #10]
 801a17e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801a182:	72c3      	strb	r3, [r0, #11]
 801a184:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801a188:	7303      	strb	r3, [r0, #12]
 801a18a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801a18e:	81c3      	strh	r3, [r0, #14]
 801a190:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801a194:	8203      	strh	r3, [r0, #16]
 801a196:	4b01      	ldr	r3, [pc, #4]	; (801a19c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801a198:	6003      	str	r3, [r0, #0]
 801a19a:	bd30      	pop	{r4, r5, pc}
 801a19c:	0802c02c 	.word	0x0802c02c

0801a1a0 <_ZNK8touchgfx9ConstFont4findEt>:
 801a1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1a2:	6944      	ldr	r4, [r0, #20]
 801a1a4:	b3bc      	cbz	r4, 801a216 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a1a6:	88a3      	ldrh	r3, [r4, #4]
 801a1a8:	8b02      	ldrh	r2, [r0, #24]
 801a1aa:	1acb      	subs	r3, r1, r3
 801a1ac:	f102 32ff 	add.w	r2, r2, #4294967295
 801a1b0:	d431      	bmi.n	801a216 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a1b2:	4293      	cmp	r3, r2
 801a1b4:	dd0c      	ble.n	801a1d0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801a1b6:	230e      	movs	r3, #14
 801a1b8:	fb03 4302 	mla	r3, r3, r2, r4
 801a1bc:	889b      	ldrh	r3, [r3, #4]
 801a1be:	1a5b      	subs	r3, r3, r1
 801a1c0:	1ad3      	subs	r3, r2, r3
 801a1c2:	429a      	cmp	r2, r3
 801a1c4:	db27      	blt.n	801a216 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	bfbc      	itt	lt
 801a1ca:	2302      	movlt	r3, #2
 801a1cc:	fb92 f3f3 	sdivlt	r3, r2, r3
 801a1d0:	2500      	movs	r5, #0
 801a1d2:	260e      	movs	r6, #14
 801a1d4:	4295      	cmp	r5, r2
 801a1d6:	dc1e      	bgt.n	801a216 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a1d8:	fb06 4003 	mla	r0, r6, r3, r4
 801a1dc:	8887      	ldrh	r7, [r0, #4]
 801a1de:	42b9      	cmp	r1, r7
 801a1e0:	d01a      	beq.n	801a218 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801a1e2:	d20d      	bcs.n	801a200 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801a1e4:	1e5a      	subs	r2, r3, #1
 801a1e6:	4295      	cmp	r5, r2
 801a1e8:	dc15      	bgt.n	801a216 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a1ea:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801a1ee:	1a5b      	subs	r3, r3, r1
 801a1f0:	1ad3      	subs	r3, r2, r3
 801a1f2:	429a      	cmp	r2, r3
 801a1f4:	db0f      	blt.n	801a216 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a1f6:	429d      	cmp	r5, r3
 801a1f8:	ddec      	ble.n	801a1d4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a1fa:	1953      	adds	r3, r2, r5
 801a1fc:	105b      	asrs	r3, r3, #1
 801a1fe:	e7e9      	b.n	801a1d4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a200:	1c5d      	adds	r5, r3, #1
 801a202:	42aa      	cmp	r2, r5
 801a204:	db07      	blt.n	801a216 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a206:	8a43      	ldrh	r3, [r0, #18]
 801a208:	1acb      	subs	r3, r1, r3
 801a20a:	442b      	add	r3, r5
 801a20c:	429d      	cmp	r5, r3
 801a20e:	dc02      	bgt.n	801a216 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801a210:	429a      	cmp	r2, r3
 801a212:	dadf      	bge.n	801a1d4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801a214:	e7f1      	b.n	801a1fa <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801a216:	2000      	movs	r0, #0
 801a218:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a21a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801a21a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a21c:	4604      	mov	r4, r0
 801a21e:	4617      	mov	r7, r2
 801a220:	461e      	mov	r6, r3
 801a222:	b911      	cbnz	r1, 801a22a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801a224:	2500      	movs	r5, #0
 801a226:	4628      	mov	r0, r5
 801a228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a22a:	290a      	cmp	r1, #10
 801a22c:	d0fa      	beq.n	801a224 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a22e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a232:	4291      	cmp	r1, r2
 801a234:	d0f6      	beq.n	801a224 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a236:	f242 020b 	movw	r2, #8203	; 0x200b
 801a23a:	4291      	cmp	r1, r2
 801a23c:	d0f2      	beq.n	801a224 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a23e:	f7ff ffaf 	bl	801a1a0 <_ZNK8touchgfx9ConstFont4findEt>
 801a242:	4605      	mov	r5, r0
 801a244:	b950      	cbnz	r0, 801a25c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801a246:	6823      	ldr	r3, [r4, #0]
 801a248:	4620      	mov	r0, r4
 801a24a:	691b      	ldr	r3, [r3, #16]
 801a24c:	4798      	blx	r3
 801a24e:	4601      	mov	r1, r0
 801a250:	4620      	mov	r0, r4
 801a252:	f7ff ffa5 	bl	801a1a0 <_ZNK8touchgfx9ConstFont4findEt>
 801a256:	4605      	mov	r5, r0
 801a258:	2800      	cmp	r0, #0
 801a25a:	d0e3      	beq.n	801a224 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801a25c:	6823      	ldr	r3, [r4, #0]
 801a25e:	4629      	mov	r1, r5
 801a260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a262:	4620      	mov	r0, r4
 801a264:	4798      	blx	r3
 801a266:	6038      	str	r0, [r7, #0]
 801a268:	6823      	ldr	r3, [r4, #0]
 801a26a:	4620      	mov	r0, r4
 801a26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a26e:	4798      	blx	r3
 801a270:	7030      	strb	r0, [r6, #0]
 801a272:	e7d8      	b.n	801a226 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801a274 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801a274:	2000      	movs	r0, #0
 801a276:	4770      	bx	lr

0801a278 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801a278:	2001      	movs	r0, #1
 801a27a:	4770      	bx	lr

0801a27c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801a27c:	2002      	movs	r0, #2
 801a27e:	4770      	bx	lr

0801a280 <_ZN8touchgfx6ScreenD1Ev>:
 801a280:	4770      	bx	lr

0801a282 <_ZN8touchgfx12GestureEventD1Ev>:
 801a282:	4770      	bx	lr

0801a284 <_ZN8touchgfx9DragEventD1Ev>:
 801a284:	4770      	bx	lr

0801a286 <_ZN8touchgfx10ClickEventD1Ev>:
 801a286:	4770      	bx	lr

0801a288 <_ZN8touchgfx10ClickEventD0Ev>:
 801a288:	b510      	push	{r4, lr}
 801a28a:	4604      	mov	r4, r0
 801a28c:	210c      	movs	r1, #12
 801a28e:	f00f f988 	bl	80295a2 <_ZdlPvj>
 801a292:	4620      	mov	r0, r4
 801a294:	bd10      	pop	{r4, pc}

0801a296 <_ZN8touchgfx9DragEventD0Ev>:
 801a296:	b510      	push	{r4, lr}
 801a298:	4604      	mov	r4, r0
 801a29a:	2110      	movs	r1, #16
 801a29c:	f00f f981 	bl	80295a2 <_ZdlPvj>
 801a2a0:	4620      	mov	r0, r4
 801a2a2:	bd10      	pop	{r4, pc}

0801a2a4 <_ZN8touchgfx12GestureEventD0Ev>:
 801a2a4:	b510      	push	{r4, lr}
 801a2a6:	4604      	mov	r4, r0
 801a2a8:	210c      	movs	r1, #12
 801a2aa:	f00f f97a 	bl	80295a2 <_ZdlPvj>
 801a2ae:	4620      	mov	r0, r4
 801a2b0:	bd10      	pop	{r4, pc}

0801a2b2 <_ZN8touchgfx6ScreenD0Ev>:
 801a2b2:	b510      	push	{r4, lr}
 801a2b4:	4604      	mov	r4, r0
 801a2b6:	213c      	movs	r1, #60	; 0x3c
 801a2b8:	f00f f973 	bl	80295a2 <_ZdlPvj>
 801a2bc:	4620      	mov	r0, r4
 801a2be:	bd10      	pop	{r4, pc}

0801a2c0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801a2c0:	b530      	push	{r4, r5, lr}
 801a2c2:	460d      	mov	r5, r1
 801a2c4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a2c6:	b087      	sub	sp, #28
 801a2c8:	4604      	mov	r4, r0
 801a2ca:	b301      	cbz	r1, 801a30e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801a2cc:	a801      	add	r0, sp, #4
 801a2ce:	f7ff ff2d 	bl	801a12c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a2d2:	892a      	ldrh	r2, [r5, #8]
 801a2d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a2d8:	7928      	ldrb	r0, [r5, #4]
 801a2da:	1ad2      	subs	r2, r2, r3
 801a2dc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a2de:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a2e2:	441a      	add	r2, r3
 801a2e4:	896b      	ldrh	r3, [r5, #10]
 801a2e6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801a2ea:	f88d 0010 	strb.w	r0, [sp, #16]
 801a2ee:	1b5b      	subs	r3, r3, r5
 801a2f0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801a2f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a2f4:	442b      	add	r3, r5
 801a2f6:	4d07      	ldr	r5, [pc, #28]	; (801a314 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801a2f8:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a2fc:	9503      	str	r5, [sp, #12]
 801a2fe:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a302:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a306:	6803      	ldr	r3, [r0, #0]
 801a308:	a903      	add	r1, sp, #12
 801a30a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a30c:	4798      	blx	r3
 801a30e:	b007      	add	sp, #28
 801a310:	bd30      	pop	{r4, r5, pc}
 801a312:	bf00      	nop
 801a314:	0802c0b4 	.word	0x0802c0b4

0801a318 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a31c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a31e:	b08a      	sub	sp, #40	; 0x28
 801a320:	4604      	mov	r4, r0
 801a322:	460d      	mov	r5, r1
 801a324:	b113      	cbz	r3, 801a32c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801a326:	790b      	ldrb	r3, [r1, #4]
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d044      	beq.n	801a3b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a32c:	f104 0804 	add.w	r8, r4, #4
 801a330:	4641      	mov	r1, r8
 801a332:	a803      	add	r0, sp, #12
 801a334:	f7ff fefa 	bl	801a12c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a338:	792b      	ldrb	r3, [r5, #4]
 801a33a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801a33e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801a342:	b983      	cbnz	r3, 801a366 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801a344:	892a      	ldrh	r2, [r5, #8]
 801a346:	88e9      	ldrh	r1, [r5, #6]
 801a348:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801a34c:	1b92      	subs	r2, r2, r6
 801a34e:	1bc9      	subs	r1, r1, r7
 801a350:	9301      	str	r3, [sp, #4]
 801a352:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801a356:	9300      	str	r3, [sp, #0]
 801a358:	b212      	sxth	r2, r2
 801a35a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801a35e:	b209      	sxth	r1, r1
 801a360:	4640      	mov	r0, r8
 801a362:	f7fc fc9d 	bl	8016ca0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801a366:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a368:	b329      	cbz	r1, 801a3b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a36a:	a805      	add	r0, sp, #20
 801a36c:	f7ff fede 	bl	801a12c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a370:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801a374:	792b      	ldrb	r3, [r5, #4]
 801a376:	1abf      	subs	r7, r7, r2
 801a378:	88ea      	ldrh	r2, [r5, #6]
 801a37a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a37c:	4417      	add	r7, r2
 801a37e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801a380:	f88d 3020 	strb.w	r3, [sp, #32]
 801a384:	4417      	add	r7, r2
 801a386:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801a38a:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801a38e:	1ab6      	subs	r6, r6, r2
 801a390:	892a      	ldrh	r2, [r5, #8]
 801a392:	a907      	add	r1, sp, #28
 801a394:	4416      	add	r6, r2
 801a396:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801a398:	4416      	add	r6, r2
 801a39a:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801a39e:	2600      	movs	r6, #0
 801a3a0:	4a06      	ldr	r2, [pc, #24]	; (801a3bc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801a3a2:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801a3a6:	9207      	str	r2, [sp, #28]
 801a3a8:	6803      	ldr	r3, [r0, #0]
 801a3aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a3ac:	4798      	blx	r3
 801a3ae:	792b      	ldrb	r3, [r5, #4]
 801a3b0:	b10b      	cbz	r3, 801a3b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a3b2:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801a3b6:	b00a      	add	sp, #40	; 0x28
 801a3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3bc:	0802c08c 	.word	0x0802c08c

0801a3c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3c4:	460c      	mov	r4, r1
 801a3c6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a3c8:	b088      	sub	sp, #32
 801a3ca:	4605      	mov	r5, r0
 801a3cc:	2900      	cmp	r1, #0
 801a3ce:	d06d      	beq.n	801a4ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801a3d0:	4668      	mov	r0, sp
 801a3d2:	f7ff feab 	bl	801a12c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a3d6:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801a3d8:	88e3      	ldrh	r3, [r4, #6]
 801a3da:	f9bd 8000 	ldrsh.w	r8, [sp]
 801a3de:	440b      	add	r3, r1
 801a3e0:	b21b      	sxth	r3, r3
 801a3e2:	4543      	cmp	r3, r8
 801a3e4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801a3e8:	db31      	blt.n	801a44e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a3ea:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801a3ee:	44c4      	add	ip, r8
 801a3f0:	fa0f fc8c 	sxth.w	ip, ip
 801a3f4:	4563      	cmp	r3, ip
 801a3f6:	da2a      	bge.n	801a44e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a3f8:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801a3fa:	8926      	ldrh	r6, [r4, #8]
 801a3fc:	4416      	add	r6, r2
 801a3fe:	b236      	sxth	r6, r6
 801a400:	42be      	cmp	r6, r7
 801a402:	db24      	blt.n	801a44e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a404:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801a408:	4438      	add	r0, r7
 801a40a:	b200      	sxth	r0, r0
 801a40c:	4286      	cmp	r6, r0
 801a40e:	da1e      	bge.n	801a44e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a410:	8963      	ldrh	r3, [r4, #10]
 801a412:	4419      	add	r1, r3
 801a414:	b209      	sxth	r1, r1
 801a416:	4541      	cmp	r1, r8
 801a418:	db08      	blt.n	801a42c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a41a:	4561      	cmp	r1, ip
 801a41c:	da06      	bge.n	801a42c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a41e:	89a3      	ldrh	r3, [r4, #12]
 801a420:	441a      	add	r2, r3
 801a422:	b212      	sxth	r2, r2
 801a424:	42ba      	cmp	r2, r7
 801a426:	db01      	blt.n	801a42c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a428:	4282      	cmp	r2, r0
 801a42a:	db10      	blt.n	801a44e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a42c:	4b21      	ldr	r3, [pc, #132]	; (801a4b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801a42e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a430:	9304      	str	r3, [sp, #16]
 801a432:	2302      	movs	r3, #2
 801a434:	f88d 3014 	strb.w	r3, [sp, #20]
 801a438:	2300      	movs	r3, #0
 801a43a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a43e:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a442:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a446:	6803      	ldr	r3, [r0, #0]
 801a448:	a904      	add	r1, sp, #16
 801a44a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a44c:	4798      	blx	r3
 801a44e:	1d29      	adds	r1, r5, #4
 801a450:	a802      	add	r0, sp, #8
 801a452:	f7ff fe6b 	bl	801a12c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a456:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a45a:	88e0      	ldrh	r0, [r4, #6]
 801a45c:	eba3 0808 	sub.w	r8, r3, r8
 801a460:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a464:	7921      	ldrb	r1, [r4, #4]
 801a466:	1bdf      	subs	r7, r3, r7
 801a468:	b2bb      	uxth	r3, r7
 801a46a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801a46e:	fa1f f888 	uxth.w	r8, r8
 801a472:	8922      	ldrh	r2, [r4, #8]
 801a474:	8967      	ldrh	r7, [r4, #10]
 801a476:	89a4      	ldrh	r4, [r4, #12]
 801a478:	4440      	add	r0, r8
 801a47a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801a47c:	4460      	add	r0, ip
 801a47e:	441a      	add	r2, r3
 801a480:	44b8      	add	r8, r7
 801a482:	4423      	add	r3, r4
 801a484:	4c0c      	ldr	r4, [pc, #48]	; (801a4b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801a486:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a48a:	4433      	add	r3, r6
 801a48c:	4432      	add	r2, r6
 801a48e:	44e0      	add	r8, ip
 801a490:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a492:	f88d 1014 	strb.w	r1, [sp, #20]
 801a496:	9404      	str	r4, [sp, #16]
 801a498:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a49c:	f8ad 801a 	strh.w	r8, [sp, #26]
 801a4a0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a4a4:	6803      	ldr	r3, [r0, #0]
 801a4a6:	a904      	add	r1, sp, #16
 801a4a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a4aa:	4798      	blx	r3
 801a4ac:	b008      	add	sp, #32
 801a4ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4b2:	bf00      	nop
 801a4b4:	0802c08c 	.word	0x0802c08c
 801a4b8:	0802c0a0 	.word	0x0802c0a0

0801a4bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a4be:	4604      	mov	r4, r0
 801a4c0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a4c4:	3201      	adds	r2, #1
 801a4c6:	d112      	bne.n	801a4ee <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a4c8:	2500      	movs	r5, #0
 801a4ca:	9500      	str	r5, [sp, #0]
 801a4cc:	466d      	mov	r5, sp
 801a4ce:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a4d2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a4d6:	6803      	ldr	r3, [r0, #0]
 801a4d8:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a4dc:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a4e0:	4629      	mov	r1, r5
 801a4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4e4:	4798      	blx	r3
 801a4e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a4ea:	e884 0003 	stmia.w	r4, {r0, r1}
 801a4ee:	4620      	mov	r0, r4
 801a4f0:	b003      	add	sp, #12
 801a4f2:	bd30      	pop	{r4, r5, pc}

0801a4f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a4f4:	b513      	push	{r0, r1, r4, lr}
 801a4f6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a4fa:	4604      	mov	r4, r0
 801a4fc:	3301      	adds	r3, #1
 801a4fe:	d109      	bne.n	801a514 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a500:	4601      	mov	r1, r0
 801a502:	4668      	mov	r0, sp
 801a504:	f7ff fe12 	bl	801a12c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a508:	f8bd 3000 	ldrh.w	r3, [sp]
 801a50c:	8423      	strh	r3, [r4, #32]
 801a50e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a512:	8463      	strh	r3, [r4, #34]	; 0x22
 801a514:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a518:	b002      	add	sp, #8
 801a51a:	bd10      	pop	{r4, pc}

0801a51c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a51c:	b513      	push	{r0, r1, r4, lr}
 801a51e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a522:	4604      	mov	r4, r0
 801a524:	3301      	adds	r3, #1
 801a526:	d109      	bne.n	801a53c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a528:	4601      	mov	r1, r0
 801a52a:	4668      	mov	r0, sp
 801a52c:	f7ff fdfe 	bl	801a12c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a530:	f8bd 3000 	ldrh.w	r3, [sp]
 801a534:	8423      	strh	r3, [r4, #32]
 801a536:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a53a:	8463      	strh	r3, [r4, #34]	; 0x22
 801a53c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a540:	b002      	add	sp, #8
 801a542:	bd10      	pop	{r4, pc}

0801a544 <_ZN8touchgfx6ScreenC1Ev>:
 801a544:	b570      	push	{r4, r5, r6, lr}
 801a546:	4605      	mov	r5, r0
 801a548:	4b16      	ldr	r3, [pc, #88]	; (801a5a4 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801a54a:	2101      	movs	r1, #1
 801a54c:	f845 3b04 	str.w	r3, [r5], #4
 801a550:	2300      	movs	r3, #0
 801a552:	4604      	mov	r4, r0
 801a554:	8103      	strh	r3, [r0, #8]
 801a556:	8143      	strh	r3, [r0, #10]
 801a558:	8183      	strh	r3, [r0, #12]
 801a55a:	81c3      	strh	r3, [r0, #14]
 801a55c:	8203      	strh	r3, [r0, #16]
 801a55e:	8243      	strh	r3, [r0, #18]
 801a560:	8283      	strh	r3, [r0, #20]
 801a562:	82c3      	strh	r3, [r0, #22]
 801a564:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801a568:	6203      	str	r3, [r0, #32]
 801a56a:	8483      	strh	r3, [r0, #36]	; 0x24
 801a56c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a56e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801a572:	4a0d      	ldr	r2, [pc, #52]	; (801a5a8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a574:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801a578:	6343      	str	r3, [r0, #52]	; 0x34
 801a57a:	4b0c      	ldr	r3, [pc, #48]	; (801a5ac <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a57c:	6042      	str	r2, [r0, #4]
 801a57e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a582:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801a584:	4a0a      	ldr	r2, [pc, #40]	; (801a5b0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a586:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801a58a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801a58e:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a592:	4628      	mov	r0, r5
 801a594:	4798      	blx	r3
 801a596:	6863      	ldr	r3, [r4, #4]
 801a598:	4628      	mov	r0, r5
 801a59a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a59c:	4631      	mov	r1, r6
 801a59e:	4798      	blx	r3
 801a5a0:	4620      	mov	r0, r4
 801a5a2:	bd70      	pop	{r4, r5, r6, pc}
 801a5a4:	0802c0c8 	.word	0x0802c0c8
 801a5a8:	0802beb8 	.word	0x0802beb8
 801a5ac:	201984ee 	.word	0x201984ee
 801a5b0:	201984ec 	.word	0x201984ec

0801a5b4 <_ZN8touchgfx6Screen4drawEv>:
 801a5b4:	b507      	push	{r0, r1, r2, lr}
 801a5b6:	2100      	movs	r1, #0
 801a5b8:	4b08      	ldr	r3, [pc, #32]	; (801a5dc <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a5ba:	9100      	str	r1, [sp, #0]
 801a5bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a5c0:	4b07      	ldr	r3, [pc, #28]	; (801a5e0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a5c2:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a5c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a5ca:	4669      	mov	r1, sp
 801a5cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a5d0:	6803      	ldr	r3, [r0, #0]
 801a5d2:	689b      	ldr	r3, [r3, #8]
 801a5d4:	4798      	blx	r3
 801a5d6:	b003      	add	sp, #12
 801a5d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801a5dc:	201984ec 	.word	0x201984ec
 801a5e0:	201984ee 	.word	0x201984ee

0801a5e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5e8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a5ec:	b089      	sub	sp, #36	; 0x24
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	4680      	mov	r8, r0
 801a5f2:	460c      	mov	r4, r1
 801a5f4:	4615      	mov	r5, r2
 801a5f6:	dd0e      	ble.n	801a616 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a5f8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	dd0a      	ble.n	801a616 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a600:	4628      	mov	r0, r5
 801a602:	f7ff ff5b 	bl	801a4bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a606:	4621      	mov	r1, r4
 801a608:	f7fe fbd1 	bl	8018dae <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a60c:	69eb      	ldr	r3, [r5, #28]
 801a60e:	b928      	cbnz	r0, 801a61c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a610:	461d      	mov	r5, r3
 801a612:	2b00      	cmp	r3, #0
 801a614:	d1f4      	bne.n	801a600 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a616:	b009      	add	sp, #36	; 0x24
 801a618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a61c:	ae04      	add	r6, sp, #16
 801a61e:	2b00      	cmp	r3, #0
 801a620:	f000 80b5 	beq.w	801a78e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a624:	682b      	ldr	r3, [r5, #0]
 801a626:	4629      	mov	r1, r5
 801a628:	68db      	ldr	r3, [r3, #12]
 801a62a:	a802      	add	r0, sp, #8
 801a62c:	4798      	blx	r3
 801a62e:	4628      	mov	r0, r5
 801a630:	f7ff ff60 	bl	801a4f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a634:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a638:	4407      	add	r7, r0
 801a63a:	4628      	mov	r0, r5
 801a63c:	f7ff ff6e 	bl	801a51c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a640:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a644:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a648:	4418      	add	r0, r3
 801a64a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a64e:	4621      	mov	r1, r4
 801a650:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a654:	b23f      	sxth	r7, r7
 801a656:	4630      	mov	r0, r6
 801a658:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a65c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a660:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a664:	f7fc fbfc 	bl	8016e60 <_ZN8touchgfx4RectaNERKS0_>
 801a668:	4628      	mov	r0, r5
 801a66a:	f7ff ff27 	bl	801a4bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a66e:	4602      	mov	r2, r0
 801a670:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a674:	ab06      	add	r3, sp, #24
 801a676:	e883 0003 	stmia.w	r3, {r0, r1}
 801a67a:	4611      	mov	r1, r2
 801a67c:	4618      	mov	r0, r3
 801a67e:	f7fc fbef 	bl	8016e60 <_ZN8touchgfx4RectaNERKS0_>
 801a682:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a686:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a68a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a68e:	4299      	cmp	r1, r3
 801a690:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a694:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a698:	d10b      	bne.n	801a6b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a69a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a69e:	4552      	cmp	r2, sl
 801a6a0:	d107      	bne.n	801a6b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a6a2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a6a6:	455a      	cmp	r2, fp
 801a6a8:	d103      	bne.n	801a6b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a6aa:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a6ae:	454a      	cmp	r2, r9
 801a6b0:	d06d      	beq.n	801a78e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a6b2:	f1bb 0f00 	cmp.w	fp, #0
 801a6b6:	dd65      	ble.n	801a784 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a6b8:	f1b9 0f00 	cmp.w	r9, #0
 801a6bc:	dd62      	ble.n	801a784 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a6be:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a6c2:	fa1f f08a 	uxth.w	r0, sl
 801a6c6:	4552      	cmp	r2, sl
 801a6c8:	9000      	str	r0, [sp, #0]
 801a6ca:	da12      	bge.n	801a6f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801a6cc:	9301      	str	r3, [sp, #4]
 801a6ce:	9b00      	ldr	r3, [sp, #0]
 801a6d0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a6d4:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a6d8:	1a9a      	subs	r2, r3, r2
 801a6da:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a6de:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a6e2:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a6e6:	69ea      	ldr	r2, [r5, #28]
 801a6e8:	4631      	mov	r1, r6
 801a6ea:	4640      	mov	r0, r8
 801a6ec:	f7ff ff7a 	bl	801a5e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a6f0:	9b01      	ldr	r3, [sp, #4]
 801a6f2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a6f6:	b29f      	uxth	r7, r3
 801a6f8:	429a      	cmp	r2, r3
 801a6fa:	da0d      	bge.n	801a718 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801a6fc:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a700:	1aba      	subs	r2, r7, r2
 801a702:	f8ad a012 	strh.w	sl, [sp, #18]
 801a706:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a70a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a70e:	69ea      	ldr	r2, [r5, #28]
 801a710:	4631      	mov	r1, r6
 801a712:	4640      	mov	r0, r8
 801a714:	f7ff ff66 	bl	801a5e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a718:	8822      	ldrh	r2, [r4, #0]
 801a71a:	88a3      	ldrh	r3, [r4, #4]
 801a71c:	445f      	add	r7, fp
 801a71e:	4413      	add	r3, r2
 801a720:	b29b      	uxth	r3, r3
 801a722:	b2bf      	uxth	r7, r7
 801a724:	b23a      	sxth	r2, r7
 801a726:	b219      	sxth	r1, r3
 801a728:	4291      	cmp	r1, r2
 801a72a:	dd0d      	ble.n	801a748 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801a72c:	1bdb      	subs	r3, r3, r7
 801a72e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a732:	f8ad a012 	strh.w	sl, [sp, #18]
 801a736:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a73a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a73e:	69ea      	ldr	r2, [r5, #28]
 801a740:	4631      	mov	r1, r6
 801a742:	4640      	mov	r0, r8
 801a744:	f7ff ff4e 	bl	801a5e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a748:	88e2      	ldrh	r2, [r4, #6]
 801a74a:	8863      	ldrh	r3, [r4, #2]
 801a74c:	4413      	add	r3, r2
 801a74e:	9a00      	ldr	r2, [sp, #0]
 801a750:	b29b      	uxth	r3, r3
 801a752:	444a      	add	r2, r9
 801a754:	fa1f f982 	uxth.w	r9, r2
 801a758:	fa0f f289 	sxth.w	r2, r9
 801a75c:	b219      	sxth	r1, r3
 801a75e:	428a      	cmp	r2, r1
 801a760:	da15      	bge.n	801a78e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a762:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a766:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a76a:	eba3 0309 	sub.w	r3, r3, r9
 801a76e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a772:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a776:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a77a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a77e:	69ea      	ldr	r2, [r5, #28]
 801a780:	4631      	mov	r1, r6
 801a782:	e001      	b.n	801a788 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801a784:	4621      	mov	r1, r4
 801a786:	69ea      	ldr	r2, [r5, #28]
 801a788:	4640      	mov	r0, r8
 801a78a:	f7ff ff2b 	bl	801a5e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a78e:	4628      	mov	r0, r5
 801a790:	f7ff fe94 	bl	801a4bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a794:	4633      	mov	r3, r6
 801a796:	4602      	mov	r2, r0
 801a798:	6861      	ldr	r1, [r4, #4]
 801a79a:	6820      	ldr	r0, [r4, #0]
 801a79c:	c303      	stmia	r3!, {r0, r1}
 801a79e:	4611      	mov	r1, r2
 801a7a0:	4630      	mov	r0, r6
 801a7a2:	f7fc fb5d 	bl	8016e60 <_ZN8touchgfx4RectaNERKS0_>
 801a7a6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	f77f af33 	ble.w	801a616 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a7b0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	f77f af2e 	ble.w	801a616 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a7ba:	4628      	mov	r0, r5
 801a7bc:	f7ff fe9a 	bl	801a4f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a7c0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a7c4:	1a18      	subs	r0, r3, r0
 801a7c6:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a7ca:	4628      	mov	r0, r5
 801a7cc:	f7ff fea6 	bl	801a51c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a7d0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a7d4:	4631      	mov	r1, r6
 801a7d6:	1a18      	subs	r0, r3, r0
 801a7d8:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a7dc:	682b      	ldr	r3, [r5, #0]
 801a7de:	4628      	mov	r0, r5
 801a7e0:	689b      	ldr	r3, [r3, #8]
 801a7e2:	4798      	blx	r3
 801a7e4:	e717      	b.n	801a616 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801a7e6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a7e6:	b570      	push	{r4, r5, r6, lr}
 801a7e8:	2300      	movs	r3, #0
 801a7ea:	460c      	mov	r4, r1
 801a7ec:	b086      	sub	sp, #24
 801a7ee:	1d06      	adds	r6, r0, #4
 801a7f0:	4631      	mov	r1, r6
 801a7f2:	4605      	mov	r5, r0
 801a7f4:	a802      	add	r0, sp, #8
 801a7f6:	9301      	str	r3, [sp, #4]
 801a7f8:	f7ff fc98 	bl	801a12c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a7fc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a800:	8822      	ldrh	r2, [r4, #0]
 801a802:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801a806:	1ad2      	subs	r2, r2, r3
 801a808:	8863      	ldrh	r3, [r4, #2]
 801a80a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a80e:	1a5b      	subs	r3, r3, r1
 801a810:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801a814:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a818:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a81c:	f8ad 1016 	strh.w	r1, [sp, #22]
 801a820:	aa01      	add	r2, sp, #4
 801a822:	a904      	add	r1, sp, #16
 801a824:	4630      	mov	r0, r6
 801a826:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a82a:	f7fc fbf1 	bl	8017010 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a82e:	9a01      	ldr	r2, [sp, #4]
 801a830:	b11a      	cbz	r2, 801a83a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801a832:	4621      	mov	r1, r4
 801a834:	4628      	mov	r0, r5
 801a836:	f7ff fed5 	bl	801a5e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a83a:	b006      	add	sp, #24
 801a83c:	bd70      	pop	{r4, r5, r6, pc}

0801a83e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a83e:	b530      	push	{r4, r5, lr}
 801a840:	4602      	mov	r2, r0
 801a842:	b085      	sub	sp, #20
 801a844:	460d      	mov	r5, r1
 801a846:	466b      	mov	r3, sp
 801a848:	4604      	mov	r4, r0
 801a84a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a84e:	6851      	ldr	r1, [r2, #4]
 801a850:	c303      	stmia	r3!, {r0, r1}
 801a852:	4629      	mov	r1, r5
 801a854:	4668      	mov	r0, sp
 801a856:	f7fc fb03 	bl	8016e60 <_ZN8touchgfx4RectaNERKS0_>
 801a85a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a85e:	b12b      	cbz	r3, 801a86c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801a860:	4669      	mov	r1, sp
 801a862:	4620      	mov	r0, r4
 801a864:	f7ff ffbf 	bl	801a7e6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a868:	b005      	add	sp, #20
 801a86a:	bd30      	pop	{r4, r5, pc}
 801a86c:	3404      	adds	r4, #4
 801a86e:	4621      	mov	r1, r4
 801a870:	a802      	add	r0, sp, #8
 801a872:	f7ff fc5b 	bl	801a12c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a876:	f8bd 3000 	ldrh.w	r3, [sp]
 801a87a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a87e:	4669      	mov	r1, sp
 801a880:	1a9b      	subs	r3, r3, r2
 801a882:	f8ad 3000 	strh.w	r3, [sp]
 801a886:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a88a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a88e:	4620      	mov	r0, r4
 801a890:	1a9b      	subs	r3, r3, r2
 801a892:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a896:	f7fc fb82 	bl	8016f9e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a89a:	e7e5      	b.n	801a868 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801a89c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a89c:	460b      	mov	r3, r1
 801a89e:	680a      	ldr	r2, [r1, #0]
 801a8a0:	1d01      	adds	r1, r0, #4
 801a8a2:	6992      	ldr	r2, [r2, #24]
 801a8a4:	4618      	mov	r0, r3
 801a8a6:	4710      	bx	r2

0801a8a8 <_ZN8touchgfx12TextProviderC1Ev>:
 801a8a8:	b538      	push	{r3, r4, r5, lr}
 801a8aa:	2500      	movs	r5, #0
 801a8ac:	2302      	movs	r3, #2
 801a8ae:	4604      	mov	r4, r0
 801a8b0:	e9c0 5500 	strd	r5, r5, [r0]
 801a8b4:	7403      	strb	r3, [r0, #16]
 801a8b6:	6145      	str	r5, [r0, #20]
 801a8b8:	7605      	strb	r5, [r0, #24]
 801a8ba:	83c5      	strh	r5, [r0, #30]
 801a8bc:	8405      	strh	r5, [r0, #32]
 801a8be:	86c5      	strh	r5, [r0, #54]	; 0x36
 801a8c0:	8705      	strh	r5, [r0, #56]	; 0x38
 801a8c2:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801a8c4:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801a8c8:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801a8cc:	220e      	movs	r2, #14
 801a8ce:	4629      	mov	r1, r5
 801a8d0:	304c      	adds	r0, #76	; 0x4c
 801a8d2:	f00e ff11 	bl	80296f8 <memset>
 801a8d6:	2301      	movs	r3, #1
 801a8d8:	4620      	mov	r0, r4
 801a8da:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801a8de:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a8e2:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801a8e6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801a8ea:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801a8ee:	f7e9 f9c3 	bl	8003c78 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a8f2:	4620      	mov	r0, r4
 801a8f4:	bd38      	pop	{r3, r4, r5, pc}

0801a8f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a8f6:	b530      	push	{r4, r5, lr}
 801a8f8:	2500      	movs	r5, #0
 801a8fa:	2401      	movs	r4, #1
 801a8fc:	6843      	ldr	r3, [r0, #4]
 801a8fe:	b913      	cbnz	r3, 801a906 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a900:	6803      	ldr	r3, [r0, #0]
 801a902:	b313      	cbz	r3, 801a94a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a904:	6043      	str	r3, [r0, #4]
 801a906:	7e03      	ldrb	r3, [r0, #24]
 801a908:	b143      	cbz	r3, 801a91c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a90a:	6943      	ldr	r3, [r0, #20]
 801a90c:	b12b      	cbz	r3, 801a91a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a90e:	881a      	ldrh	r2, [r3, #0]
 801a910:	b11a      	cbz	r2, 801a91a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a912:	1c9a      	adds	r2, r3, #2
 801a914:	6142      	str	r2, [r0, #20]
 801a916:	8818      	ldrh	r0, [r3, #0]
 801a918:	bd30      	pop	{r4, r5, pc}
 801a91a:	7605      	strb	r5, [r0, #24]
 801a91c:	6843      	ldr	r3, [r0, #4]
 801a91e:	8819      	ldrh	r1, [r3, #0]
 801a920:	b199      	cbz	r1, 801a94a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a922:	1c9a      	adds	r2, r3, #2
 801a924:	2902      	cmp	r1, #2
 801a926:	6042      	str	r2, [r0, #4]
 801a928:	d1f5      	bne.n	801a916 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a92a:	7c03      	ldrb	r3, [r0, #16]
 801a92c:	2b01      	cmp	r3, #1
 801a92e:	d8e5      	bhi.n	801a8fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a930:	1c5a      	adds	r2, r3, #1
 801a932:	7402      	strb	r2, [r0, #16]
 801a934:	3302      	adds	r3, #2
 801a936:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801a93a:	6143      	str	r3, [r0, #20]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d0dd      	beq.n	801a8fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a940:	881b      	ldrh	r3, [r3, #0]
 801a942:	2b00      	cmp	r3, #0
 801a944:	d0da      	beq.n	801a8fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a946:	7604      	strb	r4, [r0, #24]
 801a948:	e7d8      	b.n	801a8fc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a94a:	2000      	movs	r0, #0
 801a94c:	e7e4      	b.n	801a918 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a94e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801a94e:	6001      	str	r1, [r0, #0]
 801a950:	2100      	movs	r1, #0
 801a952:	b430      	push	{r4, r5}
 801a954:	6041      	str	r1, [r0, #4]
 801a956:	6815      	ldr	r5, [r2, #0]
 801a958:	6085      	str	r5, [r0, #8]
 801a95a:	6852      	ldr	r2, [r2, #4]
 801a95c:	6443      	str	r3, [r0, #68]	; 0x44
 801a95e:	9b02      	ldr	r3, [sp, #8]
 801a960:	60c2      	str	r2, [r0, #12]
 801a962:	7401      	strb	r1, [r0, #16]
 801a964:	6141      	str	r1, [r0, #20]
 801a966:	7601      	strb	r1, [r0, #24]
 801a968:	8701      	strh	r1, [r0, #56]	; 0x38
 801a96a:	8401      	strh	r1, [r0, #32]
 801a96c:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801a970:	6483      	str	r3, [r0, #72]	; 0x48
 801a972:	bc30      	pop	{r4, r5}
 801a974:	f7e9 b980 	b.w	8003c78 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a978 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a97a:	4605      	mov	r5, r0
 801a97c:	4608      	mov	r0, r1
 801a97e:	b1e9      	cbz	r1, 801a9bc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801a980:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801a984:	460b      	mov	r3, r1
 801a986:	4622      	mov	r2, r4
 801a988:	f101 0708 	add.w	r7, r1, #8
 801a98c:	4626      	mov	r6, r4
 801a98e:	6818      	ldr	r0, [r3, #0]
 801a990:	6859      	ldr	r1, [r3, #4]
 801a992:	3308      	adds	r3, #8
 801a994:	c603      	stmia	r6!, {r0, r1}
 801a996:	42bb      	cmp	r3, r7
 801a998:	4634      	mov	r4, r6
 801a99a:	d1f7      	bne.n	801a98c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a99c:	6818      	ldr	r0, [r3, #0]
 801a99e:	6030      	str	r0, [r6, #0]
 801a9a0:	4610      	mov	r0, r2
 801a9a2:	889b      	ldrh	r3, [r3, #4]
 801a9a4:	80b3      	strh	r3, [r6, #4]
 801a9a6:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801a9aa:	015b      	lsls	r3, r3, #5
 801a9ac:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a9b0:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801a9b4:	430b      	orrs	r3, r1
 801a9b6:	425b      	negs	r3, r3
 801a9b8:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a9be <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a9be:	b538      	push	{r3, r4, r5, lr}
 801a9c0:	460c      	mov	r4, r1
 801a9c2:	6811      	ldr	r1, [r2, #0]
 801a9c4:	4610      	mov	r0, r2
 801a9c6:	68cd      	ldr	r5, [r1, #12]
 801a9c8:	4619      	mov	r1, r3
 801a9ca:	47a8      	blx	r5
 801a9cc:	2800      	cmp	r0, #0
 801a9ce:	bf08      	it	eq
 801a9d0:	4620      	moveq	r0, r4
 801a9d2:	bd38      	pop	{r3, r4, r5, pc}

0801a9d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9d6:	4604      	mov	r4, r0
 801a9d8:	4615      	mov	r5, r2
 801a9da:	4608      	mov	r0, r1
 801a9dc:	b93a      	cbnz	r2, 801a9ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a9de:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801a9e2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801a9e6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801a9ea:	4628      	mov	r0, r5
 801a9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9ee:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801a9f2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801a9f6:	8893      	ldrh	r3, [r2, #4]
 801a9f8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801a9fc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801aa00:	79ee      	ldrb	r6, [r5, #7]
 801aa02:	4316      	orrs	r6, r2
 801aa04:	19da      	adds	r2, r3, r7
 801aa06:	b291      	uxth	r1, r2
 801aa08:	291d      	cmp	r1, #29
 801aa0a:	b2b7      	uxth	r7, r6
 801aa0c:	d879      	bhi.n	801ab02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 801aa0e:	2201      	movs	r2, #1
 801aa10:	408a      	lsls	r2, r1
 801aa12:	4974      	ldr	r1, [pc, #464]	; (801abe4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 801aa14:	10f6      	asrs	r6, r6, #3
 801aa16:	420a      	tst	r2, r1
 801aa18:	d12d      	bne.n	801aa76 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 801aa1a:	f412 7f60 	tst.w	r2, #896	; 0x380
 801aa1e:	d070      	beq.n	801ab02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 801aa20:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801aa24:	462b      	mov	r3, r5
 801aa26:	f105 0e08 	add.w	lr, r5, #8
 801aa2a:	4615      	mov	r5, r2
 801aa2c:	4694      	mov	ip, r2
 801aa2e:	6818      	ldr	r0, [r3, #0]
 801aa30:	6859      	ldr	r1, [r3, #4]
 801aa32:	3308      	adds	r3, #8
 801aa34:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801aa38:	4573      	cmp	r3, lr
 801aa3a:	4662      	mov	r2, ip
 801aa3c:	d1f6      	bne.n	801aa2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801aa3e:	6818      	ldr	r0, [r3, #0]
 801aa40:	f8cc 0000 	str.w	r0, [ip]
 801aa44:	889b      	ldrh	r3, [r3, #4]
 801aa46:	f8ac 3004 	strh.w	r3, [ip, #4]
 801aa4a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801aa4e:	b2b3      	uxth	r3, r6
 801aa50:	1aca      	subs	r2, r1, r3
 801aa52:	b292      	uxth	r2, r2
 801aa54:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801aa58:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801aa5c:	10d2      	asrs	r2, r2, #3
 801aa5e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801aa62:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801aa66:	4302      	orrs	r2, r0
 801aa68:	1bcf      	subs	r7, r1, r7
 801aa6a:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801aa6e:	1afb      	subs	r3, r7, r3
 801aa70:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801aa74:	e7b9      	b.n	801a9ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801aa76:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801aa78:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801aa7c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801aa7e:	f640 6333 	movw	r3, #3635	; 0xe33
 801aa82:	4299      	cmp	r1, r3
 801aa84:	d110      	bne.n	801aaa8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 801aa86:	6803      	ldr	r3, [r0, #0]
 801aa88:	68db      	ldr	r3, [r3, #12]
 801aa8a:	4798      	blx	r3
 801aa8c:	7b41      	ldrb	r1, [r0, #13]
 801aa8e:	00cb      	lsls	r3, r1, #3
 801aa90:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801aa94:	7a03      	ldrb	r3, [r0, #8]
 801aa96:	0648      	lsls	r0, r1, #25
 801aa98:	ea43 0302 	orr.w	r3, r3, r2
 801aa9c:	bf44      	itt	mi
 801aa9e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aaa2:	b21b      	sxthmi	r3, r3
 801aaa4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801aaa8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801aaac:	462a      	mov	r2, r5
 801aaae:	443b      	add	r3, r7
 801aab0:	4433      	add	r3, r6
 801aab2:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801aab6:	f105 0c08 	add.w	ip, r5, #8
 801aaba:	4635      	mov	r5, r6
 801aabc:	b29b      	uxth	r3, r3
 801aabe:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801aac2:	4637      	mov	r7, r6
 801aac4:	6810      	ldr	r0, [r2, #0]
 801aac6:	6851      	ldr	r1, [r2, #4]
 801aac8:	3208      	adds	r2, #8
 801aaca:	c703      	stmia	r7!, {r0, r1}
 801aacc:	4562      	cmp	r2, ip
 801aace:	463e      	mov	r6, r7
 801aad0:	d1f7      	bne.n	801aac2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 801aad2:	6810      	ldr	r0, [r2, #0]
 801aad4:	6038      	str	r0, [r7, #0]
 801aad6:	8892      	ldrh	r2, [r2, #4]
 801aad8:	80ba      	strh	r2, [r7, #4]
 801aada:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801aade:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801aae2:	10db      	asrs	r3, r3, #3
 801aae4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801aae8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801aaec:	4313      	orrs	r3, r2
 801aaee:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801aaf2:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801aaf6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801aafa:	1a9b      	subs	r3, r3, r2
 801aafc:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801ab00:	e773      	b.n	801a9ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801ab02:	f640 611b 	movw	r1, #3611	; 0xe1b
 801ab06:	f023 0204 	bic.w	r2, r3, #4
 801ab0a:	428a      	cmp	r2, r1
 801ab0c:	d003      	beq.n	801ab16 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801ab0e:	f640 621d 	movw	r2, #3613	; 0xe1d
 801ab12:	4293      	cmp	r3, r2
 801ab14:	d120      	bne.n	801ab58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 801ab16:	3b01      	subs	r3, #1
 801ab18:	4602      	mov	r2, r0
 801ab1a:	b29b      	uxth	r3, r3
 801ab1c:	4629      	mov	r1, r5
 801ab1e:	4620      	mov	r0, r4
 801ab20:	f7ff ff4d 	bl	801a9be <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801ab24:	7b41      	ldrb	r1, [r0, #13]
 801ab26:	00cb      	lsls	r3, r1, #3
 801ab28:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ab2c:	7a03      	ldrb	r3, [r0, #8]
 801ab2e:	0649      	lsls	r1, r1, #25
 801ab30:	ea43 0302 	orr.w	r3, r3, r2
 801ab34:	bf44      	itt	mi
 801ab36:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ab3a:	b21b      	sxthmi	r3, r3
 801ab3c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ab40:	7b6b      	ldrb	r3, [r5, #13]
 801ab42:	7aaa      	ldrb	r2, [r5, #10]
 801ab44:	005b      	lsls	r3, r3, #1
 801ab46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ab4a:	4313      	orrs	r3, r2
 801ab4c:	115a      	asrs	r2, r3, #5
 801ab4e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801ab52:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801ab56:	e036      	b.n	801abc6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 801ab58:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801ab5c:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801ab60:	7a2a      	ldrb	r2, [r5, #8]
 801ab62:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801ab66:	ea42 0201 	orr.w	r2, r2, r1
 801ab6a:	f640 6109 	movw	r1, #3593	; 0xe09
 801ab6e:	bf1c      	itt	ne
 801ab70:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801ab74:	b212      	sxthne	r2, r2
 801ab76:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801ab7a:	f023 0210 	bic.w	r2, r3, #16
 801ab7e:	428a      	cmp	r2, r1
 801ab80:	d003      	beq.n	801ab8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 801ab82:	f640 6213 	movw	r2, #3603	; 0xe13
 801ab86:	4293      	cmp	r3, r2
 801ab88:	d12a      	bne.n	801abe0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 801ab8a:	7b6e      	ldrb	r6, [r5, #13]
 801ab8c:	4629      	mov	r1, r5
 801ab8e:	0076      	lsls	r6, r6, #1
 801ab90:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801ab94:	7aae      	ldrb	r6, [r5, #10]
 801ab96:	4316      	orrs	r6, r2
 801ab98:	f640 6213 	movw	r2, #3603	; 0xe13
 801ab9c:	4293      	cmp	r3, r2
 801ab9e:	bf18      	it	ne
 801aba0:	f103 33ff 	addne.w	r3, r3, #4294967295
 801aba4:	4602      	mov	r2, r0
 801aba6:	bf14      	ite	ne
 801aba8:	b29b      	uxthne	r3, r3
 801abaa:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801abae:	4620      	mov	r0, r4
 801abb0:	f7ff ff05 	bl	801a9be <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801abb4:	7b43      	ldrb	r3, [r0, #13]
 801abb6:	7a82      	ldrb	r2, [r0, #10]
 801abb8:	005b      	lsls	r3, r3, #1
 801abba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801abbe:	4313      	orrs	r3, r2
 801abc0:	1af6      	subs	r6, r6, r3
 801abc2:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801abc6:	7b69      	ldrb	r1, [r5, #13]
 801abc8:	00cb      	lsls	r3, r1, #3
 801abca:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801abce:	7a2b      	ldrb	r3, [r5, #8]
 801abd0:	4313      	orrs	r3, r2
 801abd2:	064a      	lsls	r2, r1, #25
 801abd4:	bf44      	itt	mi
 801abd6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801abda:	b21b      	sxthmi	r3, r3
 801abdc:	1bdb      	subs	r3, r3, r7
 801abde:	e747      	b.n	801aa70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 801abe0:	2300      	movs	r3, #0
 801abe2:	e7b6      	b.n	801ab52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 801abe4:	3fc00079 	.word	0x3fc00079

0801abe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801abe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801abec:	4604      	mov	r4, r0
 801abee:	b942      	cbnz	r2, 801ac02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801abf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801abf4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801abf8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801abfc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801ac00:	e047      	b.n	801ac92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801ac02:	7b51      	ldrb	r1, [r2, #13]
 801ac04:	8893      	ldrh	r3, [r2, #4]
 801ac06:	010d      	lsls	r5, r1, #4
 801ac08:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801ac0c:	79d5      	ldrb	r5, [r2, #7]
 801ac0e:	4305      	orrs	r5, r0
 801ac10:	2d04      	cmp	r5, #4
 801ac12:	bfcc      	ite	gt
 801ac14:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801ac18:	f04f 0e01 	movle.w	lr, #1
 801ac1c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801ac20:	f200 80ab 	bhi.w	801ad7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801ac24:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801ac28:	4283      	cmp	r3, r0
 801ac2a:	d216      	bcs.n	801ac5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ac2c:	f240 605b 	movw	r0, #1627	; 0x65b
 801ac30:	4283      	cmp	r3, r0
 801ac32:	d859      	bhi.n	801ace8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801ac34:	f240 6057 	movw	r0, #1623	; 0x657
 801ac38:	4283      	cmp	r3, r0
 801ac3a:	d20e      	bcs.n	801ac5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ac3c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801ac40:	d24a      	bcs.n	801acd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801ac42:	f240 604e 	movw	r0, #1614	; 0x64e
 801ac46:	4283      	cmp	r3, r0
 801ac48:	d207      	bcs.n	801ac5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ac4a:	f240 601a 	movw	r0, #1562	; 0x61a
 801ac4e:	4283      	cmp	r3, r0
 801ac50:	d02a      	beq.n	801aca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ac52:	d821      	bhi.n	801ac98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801ac54:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801ac58:	d35b      	bcc.n	801ad12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ac5a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801ac5e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ac62:	f040 80d0 	bne.w	801ae06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801ac66:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801ac6a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ac6e:	f040 80ca 	bne.w	801ae06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801ac72:	00cb      	lsls	r3, r1, #3
 801ac74:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801ac78:	7a13      	ldrb	r3, [r2, #8]
 801ac7a:	0649      	lsls	r1, r1, #25
 801ac7c:	ea43 0300 	orr.w	r3, r3, r0
 801ac80:	bf44      	itt	mi
 801ac82:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ac86:	b21b      	sxthmi	r3, r3
 801ac88:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ac8c:	1b5d      	subs	r5, r3, r5
 801ac8e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801ac92:	4610      	mov	r0, r2
 801ac94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ac98:	f240 604b 	movw	r0, #1611	; 0x64b
 801ac9c:	4283      	cmp	r3, r0
 801ac9e:	d338      	bcc.n	801ad12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801aca0:	f240 604c 	movw	r0, #1612	; 0x64c
 801aca4:	4283      	cmp	r3, r0
 801aca6:	d9d8      	bls.n	801ac5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801aca8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801acac:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801acb0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801acb4:	f040 80f2 	bne.w	801ae9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801acb8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801acbc:	f040 80ee 	bne.w	801ae9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801acc0:	00cb      	lsls	r3, r1, #3
 801acc2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801acc6:	7a13      	ldrb	r3, [r2, #8]
 801acc8:	064e      	lsls	r6, r1, #25
 801acca:	ea43 0300 	orr.w	r3, r3, r0
 801acce:	bf44      	itt	mi
 801acd0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801acd4:	b21b      	sxthmi	r3, r3
 801acd6:	e7d9      	b.n	801ac8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801acd8:	f240 6054 	movw	r0, #1620	; 0x654
 801acdc:	4283      	cmp	r3, r0
 801acde:	d8e3      	bhi.n	801aca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ace0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801ace4:	d9e0      	bls.n	801aca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ace6:	e7b8      	b.n	801ac5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ace8:	f240 6074 	movw	r0, #1652	; 0x674
 801acec:	4283      	cmp	r3, r0
 801acee:	d0b4      	beq.n	801ac5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801acf0:	d82d      	bhi.n	801ad4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801acf2:	f240 605e 	movw	r0, #1630	; 0x65e
 801acf6:	4283      	cmp	r3, r0
 801acf8:	d804      	bhi.n	801ad04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801acfa:	f240 605d 	movw	r0, #1629	; 0x65d
 801acfe:	4283      	cmp	r3, r0
 801ad00:	d3d2      	bcc.n	801aca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ad02:	e7aa      	b.n	801ac5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ad04:	f240 605f 	movw	r0, #1631	; 0x65f
 801ad08:	4283      	cmp	r3, r0
 801ad0a:	d0cd      	beq.n	801aca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ad0c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801ad10:	d0a3      	beq.n	801ac5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ad12:	00cb      	lsls	r3, r1, #3
 801ad14:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801ad18:	7a13      	ldrb	r3, [r2, #8]
 801ad1a:	0649      	lsls	r1, r1, #25
 801ad1c:	ea43 0300 	orr.w	r3, r3, r0
 801ad20:	bf44      	itt	mi
 801ad22:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ad26:	b21b      	sxthmi	r3, r3
 801ad28:	1b5d      	subs	r5, r3, r5
 801ad2a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ad2e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801ad32:	7b53      	ldrb	r3, [r2, #13]
 801ad34:	015b      	lsls	r3, r3, #5
 801ad36:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ad3a:	7993      	ldrb	r3, [r2, #6]
 801ad3c:	430b      	orrs	r3, r1
 801ad3e:	2105      	movs	r1, #5
 801ad40:	005b      	lsls	r3, r3, #1
 801ad42:	fb93 f3f1 	sdiv	r3, r3, r1
 801ad46:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801ad4a:	440b      	add	r3, r1
 801ad4c:	e756      	b.n	801abfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801ad4e:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801ad52:	4283      	cmp	r3, r0
 801ad54:	d809      	bhi.n	801ad6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801ad56:	f240 60df 	movw	r0, #1759	; 0x6df
 801ad5a:	4283      	cmp	r3, r0
 801ad5c:	f4bf af7d 	bcs.w	801ac5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ad60:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801ad64:	2b05      	cmp	r3, #5
 801ad66:	d8d4      	bhi.n	801ad12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ad68:	e777      	b.n	801ac5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ad6a:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801ad6e:	4283      	cmp	r3, r0
 801ad70:	d09a      	beq.n	801aca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ad72:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801ad76:	4283      	cmp	r3, r0
 801ad78:	e7ca      	b.n	801ad10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ad7a:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801ad7e:	d22b      	bcs.n	801add8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801ad80:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801ad84:	4283      	cmp	r3, r0
 801ad86:	d28f      	bcs.n	801aca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ad88:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801ad8c:	4283      	cmp	r3, r0
 801ad8e:	d816      	bhi.n	801adbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801ad90:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801ad94:	4283      	cmp	r3, r0
 801ad96:	f4bf af60 	bcs.w	801ac5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ad9a:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801ad9e:	4283      	cmp	r3, r0
 801ada0:	d80a      	bhi.n	801adb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801ada2:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801ada6:	4283      	cmp	r3, r0
 801ada8:	f4bf af57 	bcs.w	801ac5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801adac:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801adb0:	4283      	cmp	r3, r0
 801adb2:	f43f af79 	beq.w	801aca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801adb6:	e7ac      	b.n	801ad12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801adb8:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801adbc:	e7f8      	b.n	801adb0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801adbe:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801adc2:	4283      	cmp	r3, r0
 801adc4:	d802      	bhi.n	801adcc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801adc6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801adca:	e798      	b.n	801acfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801adcc:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801add0:	4283      	cmp	r3, r0
 801add2:	f47f af42 	bne.w	801ac5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801add6:	e767      	b.n	801aca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801add8:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801addc:	4283      	cmp	r3, r0
 801adde:	f43f af63 	beq.w	801aca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ade2:	d802      	bhi.n	801adea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801ade4:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801ade8:	e7f2      	b.n	801add0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801adea:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801adee:	4283      	cmp	r3, r0
 801adf0:	d805      	bhi.n	801adfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801adf2:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801adf6:	4283      	cmp	r3, r0
 801adf8:	f4ff af2f 	bcc.w	801ac5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801adfc:	e754      	b.n	801aca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801adfe:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801ae02:	4283      	cmp	r3, r0
 801ae04:	e7af      	b.n	801ad66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801ae06:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801ae0a:	4617      	mov	r7, r2
 801ae0c:	4666      	mov	r6, ip
 801ae0e:	f102 0808 	add.w	r8, r2, #8
 801ae12:	46e6      	mov	lr, ip
 801ae14:	6838      	ldr	r0, [r7, #0]
 801ae16:	6879      	ldr	r1, [r7, #4]
 801ae18:	3708      	adds	r7, #8
 801ae1a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ae1e:	4547      	cmp	r7, r8
 801ae20:	46f4      	mov	ip, lr
 801ae22:	d1f6      	bne.n	801ae12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801ae24:	6838      	ldr	r0, [r7, #0]
 801ae26:	f8ce 0000 	str.w	r0, [lr]
 801ae2a:	88b9      	ldrh	r1, [r7, #4]
 801ae2c:	f8ae 1004 	strh.w	r1, [lr, #4]
 801ae30:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801ae34:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ae38:	d009      	beq.n	801ae4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801ae3a:	7b51      	ldrb	r1, [r2, #13]
 801ae3c:	7992      	ldrb	r2, [r2, #6]
 801ae3e:	0149      	lsls	r1, r1, #5
 801ae40:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ae44:	4311      	orrs	r1, r2
 801ae46:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ae4a:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801ae4e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ae52:	b2ad      	uxth	r5, r5
 801ae54:	d00d      	beq.n	801ae72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 801ae56:	442b      	add	r3, r5
 801ae58:	b29b      	uxth	r3, r3
 801ae5a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801ae5e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801ae62:	10db      	asrs	r3, r3, #3
 801ae64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ae68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ae6c:	4313      	orrs	r3, r2
 801ae6e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801ae72:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801ae76:	00cb      	lsls	r3, r1, #3
 801ae78:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ae7c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801ae80:	064f      	lsls	r7, r1, #25
 801ae82:	ea43 0302 	orr.w	r3, r3, r2
 801ae86:	bf44      	itt	mi
 801ae88:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ae8c:	b21b      	sxthmi	r3, r3
 801ae8e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ae92:	1b5b      	subs	r3, r3, r5
 801ae94:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801ae98:	4632      	mov	r2, r6
 801ae9a:	e6fa      	b.n	801ac92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801ae9c:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801aea0:	4617      	mov	r7, r2
 801aea2:	4666      	mov	r6, ip
 801aea4:	f102 0908 	add.w	r9, r2, #8
 801aea8:	46e0      	mov	r8, ip
 801aeaa:	6838      	ldr	r0, [r7, #0]
 801aeac:	6879      	ldr	r1, [r7, #4]
 801aeae:	3708      	adds	r7, #8
 801aeb0:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801aeb4:	454f      	cmp	r7, r9
 801aeb6:	46c4      	mov	ip, r8
 801aeb8:	d1f6      	bne.n	801aea8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801aeba:	6838      	ldr	r0, [r7, #0]
 801aebc:	f8c8 0000 	str.w	r0, [r8]
 801aec0:	88b9      	ldrh	r1, [r7, #4]
 801aec2:	f8a8 1004 	strh.w	r1, [r8, #4]
 801aec6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801aeca:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801aece:	d009      	beq.n	801aee4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801aed0:	7b51      	ldrb	r1, [r2, #13]
 801aed2:	7992      	ldrb	r2, [r2, #6]
 801aed4:	0149      	lsls	r1, r1, #5
 801aed6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801aeda:	4311      	orrs	r1, r2
 801aedc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801aee0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801aee4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801aee8:	d00e      	beq.n	801af08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801aeea:	eba3 030e 	sub.w	r3, r3, lr
 801aeee:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801aef2:	b29b      	uxth	r3, r3
 801aef4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801aef8:	10db      	asrs	r3, r3, #3
 801aefa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801aefe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801af02:	4313      	orrs	r3, r2
 801af04:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801af08:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801af0c:	00cb      	lsls	r3, r1, #3
 801af0e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801af12:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801af16:	0648      	lsls	r0, r1, #25
 801af18:	ea43 0302 	orr.w	r3, r3, r2
 801af1c:	bf44      	itt	mi
 801af1e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801af22:	b21b      	sxthmi	r3, r3
 801af24:	1b5d      	subs	r5, r3, r5
 801af26:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801af2a:	e7b5      	b.n	801ae98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801af2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801af2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af30:	461e      	mov	r6, r3
 801af32:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801af34:	4604      	mov	r4, r0
 801af36:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801af3a:	4617      	mov	r7, r2
 801af3c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801af40:	f7e8 fe58 	bl	8003bf4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801af44:	4605      	mov	r5, r0
 801af46:	b918      	cbnz	r0, 801af50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801af48:	6030      	str	r0, [r6, #0]
 801af4a:	4628      	mov	r0, r5
 801af4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af50:	683b      	ldr	r3, [r7, #0]
 801af52:	4601      	mov	r1, r0
 801af54:	68db      	ldr	r3, [r3, #12]
 801af56:	4638      	mov	r0, r7
 801af58:	4798      	blx	r3
 801af5a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801af5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801af62:	4602      	mov	r2, r0
 801af64:	6030      	str	r0, [r6, #0]
 801af66:	d213      	bcs.n	801af90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801af68:	4643      	mov	r3, r8
 801af6a:	4639      	mov	r1, r7
 801af6c:	4620      	mov	r0, r4
 801af6e:	f7ff fe3b 	bl	801abe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801af72:	6030      	str	r0, [r6, #0]
 801af74:	6833      	ldr	r3, [r6, #0]
 801af76:	b143      	cbz	r3, 801af8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801af78:	7b5a      	ldrb	r2, [r3, #13]
 801af7a:	7a9b      	ldrb	r3, [r3, #10]
 801af7c:	0052      	lsls	r2, r2, #1
 801af7e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801af82:	4313      	orrs	r3, r2
 801af84:	bf0c      	ite	eq
 801af86:	2301      	moveq	r3, #1
 801af88:	2300      	movne	r3, #0
 801af8a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801af8e:	e7dc      	b.n	801af4a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801af90:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801af94:	b29b      	uxth	r3, r3
 801af96:	2b7f      	cmp	r3, #127	; 0x7f
 801af98:	d804      	bhi.n	801afa4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801af9a:	4639      	mov	r1, r7
 801af9c:	4620      	mov	r0, r4
 801af9e:	f7ff fd19 	bl	801a9d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801afa2:	e7e6      	b.n	801af72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801afa4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	d0e3      	beq.n	801af74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801afac:	f640 1302 	movw	r3, #2306	; 0x902
 801afb0:	429d      	cmp	r5, r3
 801afb2:	d1df      	bne.n	801af74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801afb4:	4601      	mov	r1, r0
 801afb6:	4620      	mov	r0, r4
 801afb8:	f7ff fcde 	bl	801a978 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801afbc:	e7d9      	b.n	801af72 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801afbe <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801afbe:	b510      	push	{r4, lr}
 801afc0:	4604      	mov	r4, r0
 801afc2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801afc6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801afc8:	b1f1      	cbz	r1, 801b008 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801afca:	2b0a      	cmp	r3, #10
 801afcc:	d02f      	beq.n	801b02e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801afce:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801afd0:	3901      	subs	r1, #1
 801afd2:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801afd6:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801afd8:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801afdc:	1c51      	adds	r1, r2, #1
 801afde:	b289      	uxth	r1, r1
 801afe0:	2901      	cmp	r1, #1
 801afe2:	bf84      	itt	hi
 801afe4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801afe8:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801afea:	f103 0201 	add.w	r2, r3, #1
 801afee:	8722      	strh	r2, [r4, #56]	; 0x38
 801aff0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801aff2:	bf98      	it	ls
 801aff4:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801aff6:	4413      	add	r3, r2
 801aff8:	b29b      	uxth	r3, r3
 801affa:	2b09      	cmp	r3, #9
 801affc:	bf88      	it	hi
 801affe:	3b0a      	subhi	r3, #10
 801b000:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b004:	8458      	strh	r0, [r3, #34]	; 0x22
 801b006:	e7dc      	b.n	801afc2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801b008:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801b00a:	2b0a      	cmp	r3, #10
 801b00c:	d00f      	beq.n	801b02e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801b00e:	4620      	mov	r0, r4
 801b010:	f7ff fc71 	bl	801a8f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801b014:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801b016:	1c5a      	adds	r2, r3, #1
 801b018:	8722      	strh	r2, [r4, #56]	; 0x38
 801b01a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801b01c:	4413      	add	r3, r2
 801b01e:	b29b      	uxth	r3, r3
 801b020:	2b09      	cmp	r3, #9
 801b022:	bf88      	it	hi
 801b024:	3b0a      	subhi	r3, #10
 801b026:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b02a:	8458      	strh	r0, [r3, #34]	; 0x22
 801b02c:	e7ec      	b.n	801b008 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801b02e:	bd10      	pop	{r4, pc}

0801b030 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801b030:	b538      	push	{r3, r4, r5, lr}
 801b032:	4604      	mov	r4, r0
 801b034:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801b036:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801b03a:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801b03c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801b03e:	3a01      	subs	r2, #1
 801b040:	8702      	strh	r2, [r0, #56]	; 0x38
 801b042:	1c5a      	adds	r2, r3, #1
 801b044:	b292      	uxth	r2, r2
 801b046:	2a09      	cmp	r2, #9
 801b048:	bf86      	itte	hi
 801b04a:	3b09      	subhi	r3, #9
 801b04c:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801b04e:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801b050:	f7ff ffb5 	bl	801afbe <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801b054:	8c23      	ldrh	r3, [r4, #32]
 801b056:	2b01      	cmp	r3, #1
 801b058:	bf9c      	itt	ls
 801b05a:	3301      	addls	r3, #1
 801b05c:	8423      	strhls	r3, [r4, #32]
 801b05e:	8be3      	ldrh	r3, [r4, #30]
 801b060:	b90b      	cbnz	r3, 801b066 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801b062:	2302      	movs	r3, #2
 801b064:	83e3      	strh	r3, [r4, #30]
 801b066:	8be3      	ldrh	r3, [r4, #30]
 801b068:	4628      	mov	r0, r5
 801b06a:	3b01      	subs	r3, #1
 801b06c:	b29b      	uxth	r3, r3
 801b06e:	83e3      	strh	r3, [r4, #30]
 801b070:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b074:	8365      	strh	r5, [r4, #26]
 801b076:	bd38      	pop	{r3, r4, r5, pc}

0801b078 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801b078:	428a      	cmp	r2, r1
 801b07a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b07e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801b080:	d931      	bls.n	801b0e6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801b082:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801b084:	1a54      	subs	r4, r2, r1
 801b086:	19ee      	adds	r6, r5, r7
 801b088:	3e01      	subs	r6, #1
 801b08a:	fa1f fe84 	uxth.w	lr, r4
 801b08e:	b2b4      	uxth	r4, r6
 801b090:	eba4 090e 	sub.w	r9, r4, lr
 801b094:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801b098:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801b09c:	fa1f f989 	uxth.w	r9, r9
 801b0a0:	2c09      	cmp	r4, #9
 801b0a2:	4626      	mov	r6, r4
 801b0a4:	bf88      	it	hi
 801b0a6:	f1a4 060a 	subhi.w	r6, r4, #10
 801b0aa:	f1bc 0f00 	cmp.w	ip, #0
 801b0ae:	bf08      	it	eq
 801b0b0:	f04f 0c02 	moveq.w	ip, #2
 801b0b4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801b0b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b0bc:	3c01      	subs	r4, #1
 801b0be:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801b0c2:	fa1f fc8c 	uxth.w	ip, ip
 801b0c6:	b2a4      	uxth	r4, r4
 801b0c8:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801b0cc:	454c      	cmp	r4, r9
 801b0ce:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801b0d2:	d1e5      	bne.n	801b0a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801b0d4:	eba5 050e 	sub.w	r5, r5, lr
 801b0d8:	eb0e 0408 	add.w	r4, lr, r8
 801b0dc:	8705      	strh	r5, [r0, #56]	; 0x38
 801b0de:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801b0e2:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801b0e6:	250a      	movs	r5, #10
 801b0e8:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801b0ea:	1a64      	subs	r4, r4, r1
 801b0ec:	4439      	add	r1, r7
 801b0ee:	b289      	uxth	r1, r1
 801b0f0:	2909      	cmp	r1, #9
 801b0f2:	bf88      	it	hi
 801b0f4:	390a      	subhi	r1, #10
 801b0f6:	8704      	strh	r4, [r0, #56]	; 0x38
 801b0f8:	86c1      	strh	r1, [r0, #54]	; 0x36
 801b0fa:	b18a      	cbz	r2, 801b120 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 801b0fc:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801b0fe:	3a01      	subs	r2, #1
 801b100:	3101      	adds	r1, #1
 801b102:	b292      	uxth	r2, r2
 801b104:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801b108:	8701      	strh	r1, [r0, #56]	; 0x38
 801b10a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801b10c:	b901      	cbnz	r1, 801b110 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 801b10e:	86c5      	strh	r5, [r0, #54]	; 0x36
 801b110:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801b112:	3901      	subs	r1, #1
 801b114:	b289      	uxth	r1, r1
 801b116:	86c1      	strh	r1, [r0, #54]	; 0x36
 801b118:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801b11c:	844c      	strh	r4, [r1, #34]	; 0x22
 801b11e:	e7ec      	b.n	801b0fa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 801b120:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b124:	f7ff bf4b 	b.w	801afbe <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801b128 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801b128:	b570      	push	{r4, r5, r6, lr}
 801b12a:	2500      	movs	r5, #0
 801b12c:	4295      	cmp	r5, r2
 801b12e:	d011      	beq.n	801b154 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801b130:	8bc4      	ldrh	r4, [r0, #30]
 801b132:	f831 6b02 	ldrh.w	r6, [r1], #2
 801b136:	4414      	add	r4, r2
 801b138:	3c01      	subs	r4, #1
 801b13a:	1b64      	subs	r4, r4, r5
 801b13c:	b2a4      	uxth	r4, r4
 801b13e:	2c01      	cmp	r4, #1
 801b140:	bf88      	it	hi
 801b142:	3c02      	subhi	r4, #2
 801b144:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b148:	8b64      	ldrh	r4, [r4, #26]
 801b14a:	42b4      	cmp	r4, r6
 801b14c:	d117      	bne.n	801b17e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801b14e:	3501      	adds	r5, #1
 801b150:	b2ad      	uxth	r5, r5
 801b152:	e7eb      	b.n	801b12c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801b154:	2400      	movs	r4, #0
 801b156:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b15a:	4413      	add	r3, r2
 801b15c:	b2a2      	uxth	r2, r4
 801b15e:	429a      	cmp	r2, r3
 801b160:	da0f      	bge.n	801b182 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801b162:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801b164:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801b168:	4432      	add	r2, r6
 801b16a:	b292      	uxth	r2, r2
 801b16c:	2a09      	cmp	r2, #9
 801b16e:	bf88      	it	hi
 801b170:	3a0a      	subhi	r2, #10
 801b172:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b176:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801b178:	3401      	adds	r4, #1
 801b17a:	42aa      	cmp	r2, r5
 801b17c:	d0ee      	beq.n	801b15c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801b17e:	2000      	movs	r0, #0
 801b180:	bd70      	pop	{r4, r5, r6, pc}
 801b182:	2001      	movs	r0, #1
 801b184:	e7fc      	b.n	801b180 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801b186 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801b186:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b18a:	4605      	mov	r5, r0
 801b18c:	4616      	mov	r6, r2
 801b18e:	1c8c      	adds	r4, r1, #2
 801b190:	8809      	ldrh	r1, [r1, #0]
 801b192:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801b196:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801b19a:	42b3      	cmp	r3, r6
 801b19c:	d124      	bne.n	801b1e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801b19e:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801b1a2:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801b1a6:	f001 070f 	and.w	r7, r1, #15
 801b1aa:	f8cd 8000 	str.w	r8, [sp]
 801b1ae:	464b      	mov	r3, r9
 801b1b0:	4652      	mov	r2, sl
 801b1b2:	4621      	mov	r1, r4
 801b1b4:	4628      	mov	r0, r5
 801b1b6:	f7ff ffb7 	bl	801b128 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801b1ba:	4683      	mov	fp, r0
 801b1bc:	b168      	cbz	r0, 801b1da <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801b1be:	eb0a 0109 	add.w	r1, sl, r9
 801b1c2:	4441      	add	r1, r8
 801b1c4:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801b1c8:	463a      	mov	r2, r7
 801b1ca:	4649      	mov	r1, r9
 801b1cc:	4628      	mov	r0, r5
 801b1ce:	f7ff ff53 	bl	801b078 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801b1d2:	4658      	mov	r0, fp
 801b1d4:	b003      	add	sp, #12
 801b1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1da:	eb07 010a 	add.w	r1, r7, sl
 801b1de:	4449      	add	r1, r9
 801b1e0:	4441      	add	r1, r8
 801b1e2:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801b1e6:	e7d2      	b.n	801b18e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801b1e8:	f04f 0b00 	mov.w	fp, #0
 801b1ec:	e7f1      	b.n	801b1d2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801b1ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801b1ee:	b570      	push	{r4, r5, r6, lr}
 801b1f0:	8810      	ldrh	r0, [r2, #0]
 801b1f2:	4298      	cmp	r0, r3
 801b1f4:	d817      	bhi.n	801b226 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b1f6:	1e48      	subs	r0, r1, #1
 801b1f8:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b1fc:	4298      	cmp	r0, r3
 801b1fe:	d312      	bcc.n	801b226 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b200:	2400      	movs	r4, #0
 801b202:	428c      	cmp	r4, r1
 801b204:	d20f      	bcs.n	801b226 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b206:	1860      	adds	r0, r4, r1
 801b208:	1040      	asrs	r0, r0, #1
 801b20a:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b20e:	0085      	lsls	r5, r0, #2
 801b210:	42b3      	cmp	r3, r6
 801b212:	d902      	bls.n	801b21a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b214:	3001      	adds	r0, #1
 801b216:	b284      	uxth	r4, r0
 801b218:	e7f3      	b.n	801b202 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b21a:	d201      	bcs.n	801b220 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801b21c:	b281      	uxth	r1, r0
 801b21e:	e7f0      	b.n	801b202 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b220:	442a      	add	r2, r5
 801b222:	8850      	ldrh	r0, [r2, #2]
 801b224:	bd70      	pop	{r4, r5, r6, pc}
 801b226:	2000      	movs	r0, #0
 801b228:	e7fc      	b.n	801b224 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801b22a <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b22a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b22e:	4604      	mov	r4, r0
 801b230:	260b      	movs	r6, #11
 801b232:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801b234:	886f      	ldrh	r7, [r5, #2]
 801b236:	087f      	lsrs	r7, r7, #1
 801b238:	3e01      	subs	r6, #1
 801b23a:	d013      	beq.n	801b264 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801b23c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801b23e:	462a      	mov	r2, r5
 801b240:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b244:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801b248:	4639      	mov	r1, r7
 801b24a:	4643      	mov	r3, r8
 801b24c:	4620      	mov	r0, r4
 801b24e:	f7ff ffce 	bl	801b1ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b252:	b138      	cbz	r0, 801b264 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801b254:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b258:	4642      	mov	r2, r8
 801b25a:	4620      	mov	r0, r4
 801b25c:	f7ff ff93 	bl	801b186 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b260:	2800      	cmp	r0, #0
 801b262:	d1e9      	bne.n	801b238 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801b264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b268 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801b268:	b570      	push	{r4, r5, r6, lr}
 801b26a:	694a      	ldr	r2, [r1, #20]
 801b26c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801b26e:	684b      	ldr	r3, [r1, #4]
 801b270:	1b54      	subs	r4, r2, r5
 801b272:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801b274:	f000 8107 	beq.w	801b486 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 801b278:	1b9b      	subs	r3, r3, r6
 801b27a:	d003      	beq.n	801b284 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b27c:	2210      	movs	r2, #16
 801b27e:	4363      	muls	r3, r4
 801b280:	fb93 f3f2 	sdiv	r3, r3, r2
 801b284:	680c      	ldr	r4, [r1, #0]
 801b286:	698a      	ldr	r2, [r1, #24]
 801b288:	1b65      	subs	r5, r4, r5
 801b28a:	f000 80fe 	beq.w	801b48a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 801b28e:	1b92      	subs	r2, r2, r6
 801b290:	d003      	beq.n	801b29a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b292:	2410      	movs	r4, #16
 801b294:	436a      	muls	r2, r5
 801b296:	fb92 f2f4 	sdiv	r2, r2, r4
 801b29a:	1a9b      	subs	r3, r3, r2
 801b29c:	ee07 3a90 	vmov	s15, r3
 801b2a0:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801b4c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 801b2a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b2a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b2ac:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b2b0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801b2b4:	460a      	mov	r2, r1
 801b2b6:	eeb1 6a43 	vneg.f32	s12, s6
 801b2ba:	4603      	mov	r3, r0
 801b2bc:	f100 040c 	add.w	r4, r0, #12
 801b2c0:	edd2 7a02 	vldr	s15, [r2, #8]
 801b2c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b2c8:	ece3 6a01 	vstmia	r3!, {s13}
 801b2cc:	edd2 7a03 	vldr	s15, [r2, #12]
 801b2d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b2d4:	edc3 7a02 	vstr	s15, [r3, #8]
 801b2d8:	edd2 7a04 	vldr	s15, [r2, #16]
 801b2dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b2e0:	429c      	cmp	r4, r3
 801b2e2:	edc3 7a05 	vstr	s15, [r3, #20]
 801b2e6:	f102 0214 	add.w	r2, r2, #20
 801b2ea:	d1e9      	bne.n	801b2c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801b2ec:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b2ee:	698b      	ldr	r3, [r1, #24]
 801b2f0:	edd0 4a02 	vldr	s9, [r0, #8]
 801b2f4:	1a9b      	subs	r3, r3, r2
 801b2f6:	ee07 3a90 	vmov	s15, r3
 801b2fa:	684b      	ldr	r3, [r1, #4]
 801b2fc:	edd0 3a00 	vldr	s7, [r0]
 801b300:	1a9b      	subs	r3, r3, r2
 801b302:	edd0 6a01 	vldr	s13, [r0, #4]
 801b306:	ee07 3a10 	vmov	s14, r3
 801b30a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b30e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801b312:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b316:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801b31a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b31e:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801b322:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b326:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b32a:	ee67 7a83 	vmul.f32	s15, s15, s6
 801b32e:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801b332:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b334:	694a      	ldr	r2, [r1, #20]
 801b336:	ed90 5a05 	vldr	s10, [r0, #20]
 801b33a:	1b13      	subs	r3, r2, r4
 801b33c:	ee07 3a10 	vmov	s14, r3
 801b340:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b344:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b348:	680b      	ldr	r3, [r1, #0]
 801b34a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801b34e:	1b1b      	subs	r3, r3, r4
 801b350:	ee07 3a10 	vmov	s14, r3
 801b354:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b358:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b35c:	eee6 4a87 	vfma.f32	s9, s13, s14
 801b360:	ee64 4a86 	vmul.f32	s9, s9, s12
 801b364:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801b368:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b36a:	698b      	ldr	r3, [r1, #24]
 801b36c:	ed90 2a03 	vldr	s4, [r0, #12]
 801b370:	1a9b      	subs	r3, r3, r2
 801b372:	ee06 3a90 	vmov	s13, r3
 801b376:	684b      	ldr	r3, [r1, #4]
 801b378:	edd0 5a04 	vldr	s11, [r0, #16]
 801b37c:	1a9b      	subs	r3, r3, r2
 801b37e:	ee07 3a10 	vmov	s14, r3
 801b382:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b386:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801b38a:	ee66 6a84 	vmul.f32	s13, s13, s8
 801b38e:	ee32 5a45 	vsub.f32	s10, s4, s10
 801b392:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b396:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801b39a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b39e:	eee5 6a87 	vfma.f32	s13, s11, s14
 801b3a2:	ee66 6a83 	vmul.f32	s13, s13, s6
 801b3a6:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801b3aa:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b3ac:	694a      	ldr	r2, [r1, #20]
 801b3ae:	ed90 1a07 	vldr	s2, [r0, #28]
 801b3b2:	1b13      	subs	r3, r2, r4
 801b3b4:	ee07 3a10 	vmov	s14, r3
 801b3b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b3bc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b3c0:	680b      	ldr	r3, [r1, #0]
 801b3c2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801b3c6:	1b1b      	subs	r3, r3, r4
 801b3c8:	ee07 3a10 	vmov	s14, r3
 801b3cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b3d0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b3d4:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b3d8:	ee25 5a06 	vmul.f32	s10, s10, s12
 801b3dc:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801b3e0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b3e2:	698b      	ldr	r3, [r1, #24]
 801b3e4:	edd0 5a08 	vldr	s11, [r0, #32]
 801b3e8:	1a9b      	subs	r3, r3, r2
 801b3ea:	ee07 3a10 	vmov	s14, r3
 801b3ee:	684b      	ldr	r3, [r1, #4]
 801b3f0:	edd0 2a06 	vldr	s5, [r0, #24]
 801b3f4:	1a9b      	subs	r3, r3, r2
 801b3f6:	ee01 3a90 	vmov	s3, r3
 801b3fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b3fe:	ee31 1a65 	vsub.f32	s2, s2, s11
 801b402:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b406:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801b40a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b40e:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801b412:	ee61 1a84 	vmul.f32	s3, s3, s8
 801b416:	eea1 7a21 	vfma.f32	s14, s2, s3
 801b41a:	ee27 7a03 	vmul.f32	s14, s14, s6
 801b41e:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801b422:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b424:	694a      	ldr	r2, [r1, #20]
 801b426:	1b13      	subs	r3, r2, r4
 801b428:	ee03 3a10 	vmov	s6, r3
 801b42c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b430:	ee23 3a04 	vmul.f32	s6, s6, s8
 801b434:	680b      	ldr	r3, [r1, #0]
 801b436:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801b43a:	1b1b      	subs	r3, r3, r4
 801b43c:	ee03 3a10 	vmov	s6, r3
 801b440:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b444:	ee23 4a04 	vmul.f32	s8, s6, s8
 801b448:	eee1 5a04 	vfma.f32	s11, s2, s8
 801b44c:	ee25 6a86 	vmul.f32	s12, s11, s12
 801b450:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801b454:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801b458:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b460:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801b464:	dd13      	ble.n	801b48e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801b466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b46a:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801b46e:	eee3 7a87 	vfma.f32	s15, s7, s14
 801b472:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b47a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b47c:	dd15      	ble.n	801b4aa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801b47e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b482:	6403      	str	r3, [r0, #64]	; 0x40
 801b484:	bd70      	pop	{r4, r5, r6, pc}
 801b486:	4623      	mov	r3, r4
 801b488:	e6fc      	b.n	801b284 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b48a:	462a      	mov	r2, r5
 801b48c:	e705      	b.n	801b29a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b48e:	d502      	bpl.n	801b496 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 801b490:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b494:	e7e9      	b.n	801b46a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 801b496:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801b49a:	eea3 2a85 	vfma.f32	s4, s7, s10
 801b49e:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801b4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4a6:	dade      	bge.n	801b466 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 801b4a8:	e7f2      	b.n	801b490 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 801b4aa:	d502      	bpl.n	801b4b2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 801b4ac:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b4b0:	e7e7      	b.n	801b482 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 801b4b2:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801b4b6:	eee3 4a86 	vfma.f32	s9, s7, s12
 801b4ba:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801b4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4c2:	dadc      	bge.n	801b47e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 801b4c4:	e7f2      	b.n	801b4ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 801b4c6:	bf00      	nop
 801b4c8:	3d800000 	.word	0x3d800000

0801b4cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801b4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4d0:	2714      	movs	r7, #20
 801b4d2:	435f      	muls	r7, r3
 801b4d4:	eb02 0c07 	add.w	ip, r2, r7
 801b4d8:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801b4dc:	f115 0e0f 	adds.w	lr, r5, #15
 801b4e0:	f100 80a2 	bmi.w	801b628 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801b4e4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801b4e8:	2614      	movs	r6, #20
 801b4ea:	9c08      	ldr	r4, [sp, #32]
 801b4ec:	f8c0 e014 	str.w	lr, [r0, #20]
 801b4f0:	4366      	muls	r6, r4
 801b4f2:	eb02 0806 	add.w	r8, r2, r6
 801b4f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b4fa:	f115 040f 	adds.w	r4, r5, #15
 801b4fe:	f100 809f 	bmi.w	801b640 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801b502:	1124      	asrs	r4, r4, #4
 801b504:	eba4 040e 	sub.w	r4, r4, lr
 801b508:	6184      	str	r4, [r0, #24]
 801b50a:	2c00      	cmp	r4, #0
 801b50c:	f000 808a 	beq.w	801b624 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801b510:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801b514:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801b518:	5995      	ldr	r5, [r2, r6]
 801b51a:	eba4 0809 	sub.w	r8, r4, r9
 801b51e:	59d4      	ldr	r4, [r2, r7]
 801b520:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801b524:	eba5 0a04 	sub.w	sl, r5, r4
 801b528:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801b52c:	fb0e fe05 	mul.w	lr, lr, r5
 801b530:	fb0a ee19 	mls	lr, sl, r9, lr
 801b534:	fb08 e404 	mla	r4, r8, r4, lr
 801b538:	3c01      	subs	r4, #1
 801b53a:	19a4      	adds	r4, r4, r6
 801b53c:	f100 808c 	bmi.w	801b658 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801b540:	fb94 fef6 	sdiv	lr, r4, r6
 801b544:	fb06 441e 	mls	r4, r6, lr, r4
 801b548:	f8c0 e000 	str.w	lr, [r0]
 801b54c:	6104      	str	r4, [r0, #16]
 801b54e:	2d00      	cmp	r5, #0
 801b550:	f2c0 8095 	blt.w	801b67e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801b554:	fb95 f4f6 	sdiv	r4, r5, r6
 801b558:	fb06 5514 	mls	r5, r6, r4, r5
 801b55c:	6044      	str	r4, [r0, #4]
 801b55e:	6085      	str	r5, [r0, #8]
 801b560:	60c6      	str	r6, [r0, #12]
 801b562:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801b566:	6945      	ldr	r5, [r0, #20]
 801b568:	59d2      	ldr	r2, [r2, r7]
 801b56a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801b56e:	ee07 4a10 	vmov	s14, r4
 801b572:	6804      	ldr	r4, [r0, #0]
 801b574:	eddf 6a4a 	vldr	s13, [pc, #296]	; 801b6a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801b578:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801b57c:	ee07 2a90 	vmov	s15, r2
 801b580:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b588:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b58c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801b590:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b594:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b598:	edd3 6a00 	vldr	s13, [r3]
 801b59c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b5a0:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801b5a4:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b5a8:	edc0 6a07 	vstr	s13, [r0, #28]
 801b5ac:	edd0 6a01 	vldr	s13, [r0, #4]
 801b5b0:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801b5b4:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801b5b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b5bc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b5c0:	ed80 6a08 	vstr	s12, [r0, #32]
 801b5c4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801b5c6:	6242      	str	r2, [r0, #36]	; 0x24
 801b5c8:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801b5cc:	ed93 6a03 	vldr	s12, [r3, #12]
 801b5d0:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b5d4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801b5d8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801b5dc:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801b5e0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801b5e4:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801b5e8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b5ec:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801b5f0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b5f2:	6302      	str	r2, [r0, #48]	; 0x30
 801b5f4:	ed93 6a06 	vldr	s12, [r3, #24]
 801b5f8:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801b5fc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b600:	eeb0 7a46 	vmov.f32	s14, s12
 801b604:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801b608:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b60c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801b610:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801b614:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801b618:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b61c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801b620:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801b622:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b628:	2410      	movs	r4, #16
 801b62a:	f1c5 0501 	rsb	r5, r5, #1
 801b62e:	f015 050f 	ands.w	r5, r5, #15
 801b632:	fb9e fef4 	sdiv	lr, lr, r4
 801b636:	bf18      	it	ne
 801b638:	2501      	movne	r5, #1
 801b63a:	ebae 0e05 	sub.w	lr, lr, r5
 801b63e:	e753      	b.n	801b4e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801b640:	f04f 0910 	mov.w	r9, #16
 801b644:	f1c5 0501 	rsb	r5, r5, #1
 801b648:	f015 050f 	ands.w	r5, r5, #15
 801b64c:	fb94 f4f9 	sdiv	r4, r4, r9
 801b650:	bf18      	it	ne
 801b652:	2501      	movne	r5, #1
 801b654:	1b64      	subs	r4, r4, r5
 801b656:	e755      	b.n	801b504 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801b658:	4264      	negs	r4, r4
 801b65a:	fb94 fef6 	sdiv	lr, r4, r6
 801b65e:	fb06 441e 	mls	r4, r6, lr, r4
 801b662:	f1ce 0800 	rsb	r8, lr, #0
 801b666:	f8c0 8000 	str.w	r8, [r0]
 801b66a:	6104      	str	r4, [r0, #16]
 801b66c:	2c00      	cmp	r4, #0
 801b66e:	f43f af6e 	beq.w	801b54e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801b672:	ea6f 0e0e 	mvn.w	lr, lr
 801b676:	1b34      	subs	r4, r6, r4
 801b678:	f8c0 e000 	str.w	lr, [r0]
 801b67c:	e766      	b.n	801b54c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801b67e:	426d      	negs	r5, r5
 801b680:	fb95 f4f6 	sdiv	r4, r5, r6
 801b684:	fb06 5514 	mls	r5, r6, r4, r5
 801b688:	f1c4 0e00 	rsb	lr, r4, #0
 801b68c:	f8c0 e004 	str.w	lr, [r0, #4]
 801b690:	6085      	str	r5, [r0, #8]
 801b692:	2d00      	cmp	r5, #0
 801b694:	f43f af64 	beq.w	801b560 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801b698:	43e4      	mvns	r4, r4
 801b69a:	1b75      	subs	r5, r6, r5
 801b69c:	6044      	str	r4, [r0, #4]
 801b69e:	e75e      	b.n	801b55e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801b6a0:	3d800000 	.word	0x3d800000

0801b6a4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b6a4:	4b01      	ldr	r3, [pc, #4]	; (801b6ac <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b6a6:	6018      	str	r0, [r3, #0]
 801b6a8:	4770      	bx	lr
 801b6aa:	bf00      	nop
 801b6ac:	20198558 	.word	0x20198558

0801b6b0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801b6b0:	4b06      	ldr	r3, [pc, #24]	; (801b6cc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801b6b2:	881a      	ldrh	r2, [r3, #0]
 801b6b4:	4282      	cmp	r2, r0
 801b6b6:	d807      	bhi.n	801b6c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801b6b8:	4b05      	ldr	r3, [pc, #20]	; (801b6d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801b6ba:	881b      	ldrh	r3, [r3, #0]
 801b6bc:	4413      	add	r3, r2
 801b6be:	4298      	cmp	r0, r3
 801b6c0:	bfac      	ite	ge
 801b6c2:	2000      	movge	r0, #0
 801b6c4:	2001      	movlt	r0, #1
 801b6c6:	4770      	bx	lr
 801b6c8:	2000      	movs	r0, #0
 801b6ca:	4770      	bx	lr
 801b6cc:	20198578 	.word	0x20198578
 801b6d0:	2019857c 	.word	0x2019857c

0801b6d4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b6d4:	b508      	push	{r3, lr}
 801b6d6:	4601      	mov	r1, r0
 801b6d8:	f7ff ffea 	bl	801b6b0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801b6dc:	b118      	cbz	r0, 801b6e6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801b6de:	4b02      	ldr	r3, [pc, #8]	; (801b6e8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801b6e6:	bd08      	pop	{r3, pc}
 801b6e8:	2019855c 	.word	0x2019855c

0801b6ec <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6ee:	4c24      	ldr	r4, [pc, #144]	; (801b780 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801b6f0:	6823      	ldr	r3, [r4, #0]
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d042      	beq.n	801b77c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b6f6:	4a23      	ldr	r2, [pc, #140]	; (801b784 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801b6f8:	4d23      	ldr	r5, [pc, #140]	; (801b788 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801b6fa:	8811      	ldrh	r1, [r2, #0]
 801b6fc:	f8b5 c000 	ldrh.w	ip, [r5]
 801b700:	4822      	ldr	r0, [pc, #136]	; (801b78c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801b702:	4461      	add	r1, ip
 801b704:	1c4a      	adds	r2, r1, #1
 801b706:	f022 0201 	bic.w	r2, r2, #1
 801b70a:	008f      	lsls	r7, r1, #2
 801b70c:	0412      	lsls	r2, r2, #16
 801b70e:	19de      	adds	r6, r3, r7
 801b710:	0c12      	lsrs	r2, r2, #16
 801b712:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801b716:	6006      	str	r6, [r0, #0]
 801b718:	4e1d      	ldr	r6, [pc, #116]	; (801b790 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801b71a:	19da      	adds	r2, r3, r7
 801b71c:	6032      	str	r2, [r6, #0]
 801b71e:	220e      	movs	r2, #14
 801b720:	fb02 f20c 	mul.w	r2, r2, ip
 801b724:	3203      	adds	r2, #3
 801b726:	f022 0203 	bic.w	r2, r2, #3
 801b72a:	443a      	add	r2, r7
 801b72c:	4f19      	ldr	r7, [pc, #100]	; (801b794 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b72e:	4413      	add	r3, r2
 801b730:	603b      	str	r3, [r7, #0]
 801b732:	2300      	movs	r3, #0
 801b734:	4f18      	ldr	r7, [pc, #96]	; (801b798 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b736:	469c      	mov	ip, r3
 801b738:	803b      	strh	r3, [r7, #0]
 801b73a:	4f18      	ldr	r7, [pc, #96]	; (801b79c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b73c:	683f      	ldr	r7, [r7, #0]
 801b73e:	1aba      	subs	r2, r7, r2
 801b740:	4f17      	ldr	r7, [pc, #92]	; (801b7a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b742:	603a      	str	r2, [r7, #0]
 801b744:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801b748:	4a16      	ldr	r2, [pc, #88]	; (801b7a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b74a:	8013      	strh	r3, [r2, #0]
 801b74c:	428b      	cmp	r3, r1
 801b74e:	d10d      	bne.n	801b76c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801b750:	2300      	movs	r3, #0
 801b752:	240e      	movs	r4, #14
 801b754:	882d      	ldrh	r5, [r5, #0]
 801b756:	6830      	ldr	r0, [r6, #0]
 801b758:	429d      	cmp	r5, r3
 801b75a:	d90f      	bls.n	801b77c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b75c:	fb04 0203 	mla	r2, r4, r3, r0
 801b760:	7b11      	ldrb	r1, [r2, #12]
 801b762:	3301      	adds	r3, #1
 801b764:	f36f 1145 	bfc	r1, #5, #1
 801b768:	7311      	strb	r1, [r2, #12]
 801b76a:	e7f5      	b.n	801b758 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801b76c:	6822      	ldr	r2, [r4, #0]
 801b76e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b772:	6802      	ldr	r2, [r0, #0]
 801b774:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801b778:	3301      	adds	r3, #1
 801b77a:	e7e7      	b.n	801b74c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801b77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b77e:	bf00      	nop
 801b780:	2019855c 	.word	0x2019855c
 801b784:	20198578 	.word	0x20198578
 801b788:	2019857c 	.word	0x2019857c
 801b78c:	20198570 	.word	0x20198570
 801b790:	20198560 	.word	0x20198560
 801b794:	20198568 	.word	0x20198568
 801b798:	2019857a 	.word	0x2019857a
 801b79c:	20198564 	.word	0x20198564
 801b7a0:	20198574 	.word	0x20198574
 801b7a4:	2019856c 	.word	0x2019856c

0801b7a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b7a8:	4b06      	ldr	r3, [pc, #24]	; (801b7c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	b943      	cbnz	r3, 801b7c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b7ae:	b139      	cbz	r1, 801b7c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b7b0:	4b05      	ldr	r3, [pc, #20]	; (801b7c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801b7b2:	801a      	strh	r2, [r3, #0]
 801b7b4:	4b05      	ldr	r3, [pc, #20]	; (801b7cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801b7b6:	6019      	str	r1, [r3, #0]
 801b7b8:	4b05      	ldr	r3, [pc, #20]	; (801b7d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801b7ba:	6018      	str	r0, [r3, #0]
 801b7bc:	f7ff bf96 	b.w	801b6ec <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b7c0:	4770      	bx	lr
 801b7c2:	bf00      	nop
 801b7c4:	20198568 	.word	0x20198568
 801b7c8:	2019857c 	.word	0x2019857c
 801b7cc:	20198564 	.word	0x20198564
 801b7d0:	2019855c 	.word	0x2019855c

0801b7d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b7d4:	b470      	push	{r4, r5, r6}
 801b7d6:	4c07      	ldr	r4, [pc, #28]	; (801b7f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b7d8:	4605      	mov	r5, r0
 801b7da:	6826      	ldr	r6, [r4, #0]
 801b7dc:	4610      	mov	r0, r2
 801b7de:	9a03      	ldr	r2, [sp, #12]
 801b7e0:	b936      	cbnz	r6, 801b7f0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b7e2:	6025      	str	r5, [r4, #0]
 801b7e4:	4c04      	ldr	r4, [pc, #16]	; (801b7f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b7e6:	8021      	strh	r1, [r4, #0]
 801b7e8:	bc70      	pop	{r4, r5, r6}
 801b7ea:	4619      	mov	r1, r3
 801b7ec:	f7ff bfdc 	b.w	801b7a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b7f0:	bc70      	pop	{r4, r5, r6}
 801b7f2:	4770      	bx	lr
 801b7f4:	20198580 	.word	0x20198580
 801b7f8:	20198578 	.word	0x20198578

0801b7fc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b7fc:	4a12      	ldr	r2, [pc, #72]	; (801b848 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801b7fe:	8803      	ldrh	r3, [r0, #0]
 801b800:	8812      	ldrh	r2, [r2, #0]
 801b802:	4293      	cmp	r3, r2
 801b804:	d207      	bcs.n	801b816 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801b806:	2114      	movs	r1, #20
 801b808:	4a10      	ldr	r2, [pc, #64]	; (801b84c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801b80a:	6812      	ldr	r2, [r2, #0]
 801b80c:	fb01 2303 	mla	r3, r1, r3, r2
 801b810:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801b814:	4770      	bx	lr
 801b816:	490e      	ldr	r1, [pc, #56]	; (801b850 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b818:	8809      	ldrh	r1, [r1, #0]
 801b81a:	4411      	add	r1, r2
 801b81c:	428b      	cmp	r3, r1
 801b81e:	da04      	bge.n	801b82a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801b820:	1a9b      	subs	r3, r3, r2
 801b822:	4a0c      	ldr	r2, [pc, #48]	; (801b854 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b824:	210e      	movs	r1, #14
 801b826:	6812      	ldr	r2, [r2, #0]
 801b828:	e7f0      	b.n	801b80c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801b82a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b82e:	4293      	cmp	r3, r2
 801b830:	d108      	bne.n	801b844 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801b832:	4b09      	ldr	r3, [pc, #36]	; (801b858 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b834:	781b      	ldrb	r3, [r3, #0]
 801b836:	b91b      	cbnz	r3, 801b840 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801b838:	4b08      	ldr	r3, [pc, #32]	; (801b85c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b83a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b83e:	4770      	bx	lr
 801b840:	4b07      	ldr	r3, [pc, #28]	; (801b860 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b842:	e7fa      	b.n	801b83a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801b844:	2000      	movs	r0, #0
 801b846:	4770      	bx	lr
 801b848:	20198578 	.word	0x20198578
 801b84c:	20198580 	.word	0x20198580
 801b850:	2019857c 	.word	0x2019857c
 801b854:	20198560 	.word	0x20198560
 801b858:	201984f0 	.word	0x201984f0
 801b85c:	201984f2 	.word	0x201984f2
 801b860:	201984f4 	.word	0x201984f4

0801b864 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b864:	4a12      	ldr	r2, [pc, #72]	; (801b8b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801b866:	8803      	ldrh	r3, [r0, #0]
 801b868:	8812      	ldrh	r2, [r2, #0]
 801b86a:	4293      	cmp	r3, r2
 801b86c:	d207      	bcs.n	801b87e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801b86e:	2114      	movs	r1, #20
 801b870:	4a10      	ldr	r2, [pc, #64]	; (801b8b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801b872:	6812      	ldr	r2, [r2, #0]
 801b874:	fb01 2303 	mla	r3, r1, r3, r2
 801b878:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801b87c:	4770      	bx	lr
 801b87e:	490e      	ldr	r1, [pc, #56]	; (801b8b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b880:	8809      	ldrh	r1, [r1, #0]
 801b882:	4411      	add	r1, r2
 801b884:	428b      	cmp	r3, r1
 801b886:	da04      	bge.n	801b892 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801b888:	1a9b      	subs	r3, r3, r2
 801b88a:	4a0c      	ldr	r2, [pc, #48]	; (801b8bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b88c:	210e      	movs	r1, #14
 801b88e:	6812      	ldr	r2, [r2, #0]
 801b890:	e7f0      	b.n	801b874 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801b892:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b896:	4293      	cmp	r3, r2
 801b898:	d108      	bne.n	801b8ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801b89a:	4b09      	ldr	r3, [pc, #36]	; (801b8c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b89c:	781b      	ldrb	r3, [r3, #0]
 801b89e:	b91b      	cbnz	r3, 801b8a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801b8a0:	4b08      	ldr	r3, [pc, #32]	; (801b8c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b8a2:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b8a6:	4770      	bx	lr
 801b8a8:	4b07      	ldr	r3, [pc, #28]	; (801b8c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b8aa:	e7fa      	b.n	801b8a2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801b8ac:	2000      	movs	r0, #0
 801b8ae:	4770      	bx	lr
 801b8b0:	20198578 	.word	0x20198578
 801b8b4:	20198580 	.word	0x20198580
 801b8b8:	2019857c 	.word	0x2019857c
 801b8bc:	20198560 	.word	0x20198560
 801b8c0:	201984f0 	.word	0x201984f0
 801b8c4:	201984f4 	.word	0x201984f4
 801b8c8:	201984f2 	.word	0x201984f2

0801b8cc <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b8cc:	4a12      	ldr	r2, [pc, #72]	; (801b918 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b8ce:	8803      	ldrh	r3, [r0, #0]
 801b8d0:	8811      	ldrh	r1, [r2, #0]
 801b8d2:	428b      	cmp	r3, r1
 801b8d4:	d20b      	bcs.n	801b8ee <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801b8d6:	4a11      	ldr	r2, [pc, #68]	; (801b91c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b8d8:	6812      	ldr	r2, [r2, #0]
 801b8da:	b112      	cbz	r2, 801b8e2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b8dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b8e0:	b9c0      	cbnz	r0, 801b914 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801b8e2:	4a0f      	ldr	r2, [pc, #60]	; (801b920 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b8e4:	6811      	ldr	r1, [r2, #0]
 801b8e6:	2214      	movs	r2, #20
 801b8e8:	4353      	muls	r3, r2
 801b8ea:	58c8      	ldr	r0, [r1, r3]
 801b8ec:	4770      	bx	lr
 801b8ee:	4a0d      	ldr	r2, [pc, #52]	; (801b924 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b8f0:	8812      	ldrh	r2, [r2, #0]
 801b8f2:	440a      	add	r2, r1
 801b8f4:	4293      	cmp	r3, r2
 801b8f6:	da04      	bge.n	801b902 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801b8f8:	4a08      	ldr	r2, [pc, #32]	; (801b91c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b8fa:	6812      	ldr	r2, [r2, #0]
 801b8fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b900:	4770      	bx	lr
 801b902:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b906:	4293      	cmp	r3, r2
 801b908:	d103      	bne.n	801b912 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b90a:	4b07      	ldr	r3, [pc, #28]	; (801b928 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b910:	4770      	bx	lr
 801b912:	2000      	movs	r0, #0
 801b914:	4770      	bx	lr
 801b916:	bf00      	nop
 801b918:	20198578 	.word	0x20198578
 801b91c:	2019855c 	.word	0x2019855c
 801b920:	20198580 	.word	0x20198580
 801b924:	2019857c 	.word	0x2019857c
 801b928:	201984f8 	.word	0x201984f8

0801b92c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b92c:	4b24      	ldr	r3, [pc, #144]	; (801b9c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801b92e:	8802      	ldrh	r2, [r0, #0]
 801b930:	8818      	ldrh	r0, [r3, #0]
 801b932:	4282      	cmp	r2, r0
 801b934:	d221      	bcs.n	801b97a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801b936:	4b23      	ldr	r3, [pc, #140]	; (801b9c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b938:	6819      	ldr	r1, [r3, #0]
 801b93a:	2314      	movs	r3, #20
 801b93c:	fb03 1302 	mla	r3, r3, r2, r1
 801b940:	6858      	ldr	r0, [r3, #4]
 801b942:	2800      	cmp	r0, #0
 801b944:	d03a      	beq.n	801b9bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b946:	4920      	ldr	r1, [pc, #128]	; (801b9c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b948:	6809      	ldr	r1, [r1, #0]
 801b94a:	2900      	cmp	r1, #0
 801b94c:	d036      	beq.n	801b9bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b94e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b952:	2900      	cmp	r1, #0
 801b954:	d032      	beq.n	801b9bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b956:	891a      	ldrh	r2, [r3, #8]
 801b958:	8958      	ldrh	r0, [r3, #10]
 801b95a:	4350      	muls	r0, r2
 801b95c:	7c5a      	ldrb	r2, [r3, #17]
 801b95e:	7cdb      	ldrb	r3, [r3, #19]
 801b960:	0952      	lsrs	r2, r2, #5
 801b962:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b966:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b96a:	2b0b      	cmp	r3, #11
 801b96c:	bf18      	it	ne
 801b96e:	0040      	lslne	r0, r0, #1
 801b970:	3003      	adds	r0, #3
 801b972:	f020 0003 	bic.w	r0, r0, #3
 801b976:	4408      	add	r0, r1
 801b978:	4770      	bx	lr
 801b97a:	4b14      	ldr	r3, [pc, #80]	; (801b9cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b97c:	881b      	ldrh	r3, [r3, #0]
 801b97e:	4403      	add	r3, r0
 801b980:	429a      	cmp	r2, r3
 801b982:	da1a      	bge.n	801b9ba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b984:	210e      	movs	r1, #14
 801b986:	4b12      	ldr	r3, [pc, #72]	; (801b9d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b988:	1a10      	subs	r0, r2, r0
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	fb01 3000 	mla	r0, r1, r0, r3
 801b990:	7b03      	ldrb	r3, [r0, #12]
 801b992:	f003 031f 	and.w	r3, r3, #31
 801b996:	2b0b      	cmp	r3, #11
 801b998:	d10b      	bne.n	801b9b2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801b99a:	8903      	ldrh	r3, [r0, #8]
 801b99c:	8940      	ldrh	r0, [r0, #10]
 801b99e:	4358      	muls	r0, r3
 801b9a0:	4b09      	ldr	r3, [pc, #36]	; (801b9c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b9a2:	3003      	adds	r0, #3
 801b9a4:	6819      	ldr	r1, [r3, #0]
 801b9a6:	f020 0303 	bic.w	r3, r0, #3
 801b9aa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b9ae:	4418      	add	r0, r3
 801b9b0:	4770      	bx	lr
 801b9b2:	2b0d      	cmp	r3, #13
 801b9b4:	d101      	bne.n	801b9ba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b9b6:	300d      	adds	r0, #13
 801b9b8:	4770      	bx	lr
 801b9ba:	2000      	movs	r0, #0
 801b9bc:	4770      	bx	lr
 801b9be:	bf00      	nop
 801b9c0:	20198578 	.word	0x20198578
 801b9c4:	20198580 	.word	0x20198580
 801b9c8:	2019855c 	.word	0x2019855c
 801b9cc:	2019857c 	.word	0x2019857c
 801b9d0:	20198560 	.word	0x20198560

0801b9d4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b9d4:	b510      	push	{r4, lr}
 801b9d6:	4a17      	ldr	r2, [pc, #92]	; (801ba34 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801b9d8:	8803      	ldrh	r3, [r0, #0]
 801b9da:	8812      	ldrh	r2, [r2, #0]
 801b9dc:	4293      	cmp	r3, r2
 801b9de:	d20c      	bcs.n	801b9fa <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b9e0:	2114      	movs	r1, #20
 801b9e2:	4a15      	ldr	r2, [pc, #84]	; (801ba38 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801b9e4:	6812      	ldr	r2, [r2, #0]
 801b9e6:	fb01 2303 	mla	r3, r1, r3, r2
 801b9ea:	7c58      	ldrb	r0, [r3, #17]
 801b9ec:	0942      	lsrs	r2, r0, #5
 801b9ee:	7cd8      	ldrb	r0, [r3, #19]
 801b9f0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b9f4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b9f8:	bd10      	pop	{r4, pc}
 801b9fa:	4910      	ldr	r1, [pc, #64]	; (801ba3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b9fc:	8809      	ldrh	r1, [r1, #0]
 801b9fe:	4411      	add	r1, r2
 801ba00:	428b      	cmp	r3, r1
 801ba02:	da09      	bge.n	801ba18 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801ba04:	210e      	movs	r1, #14
 801ba06:	1a9b      	subs	r3, r3, r2
 801ba08:	4a0d      	ldr	r2, [pc, #52]	; (801ba40 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801ba0a:	6812      	ldr	r2, [r2, #0]
 801ba0c:	fb01 2303 	mla	r3, r1, r3, r2
 801ba10:	7b18      	ldrb	r0, [r3, #12]
 801ba12:	f000 001f 	and.w	r0, r0, #31
 801ba16:	e7ef      	b.n	801b9f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801ba18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ba1c:	4293      	cmp	r3, r2
 801ba1e:	d106      	bne.n	801ba2e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801ba20:	f7fb fd0a 	bl	8017438 <_ZN8touchgfx3HAL3lcdEv>
 801ba24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ba28:	6803      	ldr	r3, [r0, #0]
 801ba2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba2c:	4718      	bx	r3
 801ba2e:	2000      	movs	r0, #0
 801ba30:	e7e2      	b.n	801b9f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801ba32:	bf00      	nop
 801ba34:	20198578 	.word	0x20198578
 801ba38:	20198580 	.word	0x20198580
 801ba3c:	2019857c 	.word	0x2019857c
 801ba40:	20198560 	.word	0x20198560

0801ba44 <CRC_Lock>:
 801ba44:	b530      	push	{r4, r5, lr}
 801ba46:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801ba4a:	f24c 2540 	movw	r5, #49728	; 0xc240
 801ba4e:	4a1e      	ldr	r2, [pc, #120]	; (801bac8 <CRC_Lock+0x84>)
 801ba50:	6813      	ldr	r3, [r2, #0]
 801ba52:	f023 0301 	bic.w	r3, r3, #1
 801ba56:	6013      	str	r3, [r2, #0]
 801ba58:	4b1c      	ldr	r3, [pc, #112]	; (801bacc <CRC_Lock+0x88>)
 801ba5a:	681a      	ldr	r2, [r3, #0]
 801ba5c:	4022      	ands	r2, r4
 801ba5e:	42aa      	cmp	r2, r5
 801ba60:	d005      	beq.n	801ba6e <CRC_Lock+0x2a>
 801ba62:	f24c 2270 	movw	r2, #49776	; 0xc270
 801ba66:	681b      	ldr	r3, [r3, #0]
 801ba68:	4023      	ands	r3, r4
 801ba6a:	4293      	cmp	r3, r2
 801ba6c:	d124      	bne.n	801bab8 <CRC_Lock+0x74>
 801ba6e:	4b18      	ldr	r3, [pc, #96]	; (801bad0 <CRC_Lock+0x8c>)
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	bb0b      	cbnz	r3, 801bab8 <CRC_Lock+0x74>
 801ba74:	4b17      	ldr	r3, [pc, #92]	; (801bad4 <CRC_Lock+0x90>)
 801ba76:	681a      	ldr	r2, [r3, #0]
 801ba78:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801ba7c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801ba80:	d00d      	beq.n	801ba9e <CRC_Lock+0x5a>
 801ba82:	f240 4483 	movw	r4, #1155	; 0x483
 801ba86:	681a      	ldr	r2, [r3, #0]
 801ba88:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801ba8c:	42a2      	cmp	r2, r4
 801ba8e:	d006      	beq.n	801ba9e <CRC_Lock+0x5a>
 801ba90:	f240 4285 	movw	r2, #1157	; 0x485
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ba9a:	4293      	cmp	r3, r2
 801ba9c:	d10c      	bne.n	801bab8 <CRC_Lock+0x74>
 801ba9e:	2201      	movs	r2, #1
 801baa0:	4b0d      	ldr	r3, [pc, #52]	; (801bad8 <CRC_Lock+0x94>)
 801baa2:	601a      	str	r2, [r3, #0]
 801baa4:	681a      	ldr	r2, [r3, #0]
 801baa6:	2a00      	cmp	r2, #0
 801baa8:	d1fc      	bne.n	801baa4 <CRC_Lock+0x60>
 801baaa:	4b0c      	ldr	r3, [pc, #48]	; (801badc <CRC_Lock+0x98>)
 801baac:	6018      	str	r0, [r3, #0]
 801baae:	6818      	ldr	r0, [r3, #0]
 801bab0:	1a43      	subs	r3, r0, r1
 801bab2:	4258      	negs	r0, r3
 801bab4:	4158      	adcs	r0, r3
 801bab6:	bd30      	pop	{r4, r5, pc}
 801bab8:	2201      	movs	r2, #1
 801baba:	4b09      	ldr	r3, [pc, #36]	; (801bae0 <CRC_Lock+0x9c>)
 801babc:	601a      	str	r2, [r3, #0]
 801babe:	681a      	ldr	r2, [r3, #0]
 801bac0:	2a00      	cmp	r2, #0
 801bac2:	d1fc      	bne.n	801babe <CRC_Lock+0x7a>
 801bac4:	4b07      	ldr	r3, [pc, #28]	; (801bae4 <CRC_Lock+0xa0>)
 801bac6:	e7f1      	b.n	801baac <CRC_Lock+0x68>
 801bac8:	e0002000 	.word	0xe0002000
 801bacc:	e000ed00 	.word	0xe000ed00
 801bad0:	e0042000 	.word	0xe0042000
 801bad4:	5c001000 	.word	0x5c001000
 801bad8:	58024c08 	.word	0x58024c08
 801badc:	58024c00 	.word	0x58024c00
 801bae0:	40023008 	.word	0x40023008
 801bae4:	40023000 	.word	0x40023000

0801bae8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801bae8:	6101      	str	r1, [r0, #16]
 801baea:	4770      	bx	lr

0801baec <_ZN8touchgfx8Gestures4tickEv>:
 801baec:	7b83      	ldrb	r3, [r0, #14]
 801baee:	b14b      	cbz	r3, 801bb04 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801baf0:	8903      	ldrh	r3, [r0, #8]
 801baf2:	3301      	adds	r3, #1
 801baf4:	b29b      	uxth	r3, r3
 801baf6:	2b07      	cmp	r3, #7
 801baf8:	8103      	strh	r3, [r0, #8]
 801bafa:	bf81      	itttt	hi
 801bafc:	2300      	movhi	r3, #0
 801bafe:	8143      	strhhi	r3, [r0, #10]
 801bb00:	8183      	strhhi	r3, [r0, #12]
 801bb02:	7383      	strbhi	r3, [r0, #14]
 801bb04:	4770      	bx	lr
	...

0801bb08 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801bb08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801bb0c:	4698      	mov	r8, r3
 801bb0e:	4604      	mov	r4, r0
 801bb10:	8883      	ldrh	r3, [r0, #4]
 801bb12:	460e      	mov	r6, r1
 801bb14:	88c1      	ldrh	r1, [r0, #6]
 801bb16:	2000      	movs	r0, #0
 801bb18:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bb1c:	eba8 0303 	sub.w	r3, r8, r3
 801bb20:	b21b      	sxth	r3, r3
 801bb22:	4617      	mov	r7, r2
 801bb24:	4a17      	ldr	r2, [pc, #92]	; (801bb84 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	bfb8      	it	lt
 801bb2a:	425b      	neglt	r3, r3
 801bb2c:	9200      	str	r2, [sp, #0]
 801bb2e:	8aa2      	ldrh	r2, [r4, #20]
 801bb30:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801bb34:	b21b      	sxth	r3, r3
 801bb36:	4293      	cmp	r3, r2
 801bb38:	f88d 0004 	strb.w	r0, [sp, #4]
 801bb3c:	f8ad 1008 	strh.w	r1, [sp, #8]
 801bb40:	f8ad 800a 	strh.w	r8, [sp, #10]
 801bb44:	f8ad 500c 	strh.w	r5, [sp, #12]
 801bb48:	dc07      	bgt.n	801bb5a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801bb4a:	1a69      	subs	r1, r5, r1
 801bb4c:	b209      	sxth	r1, r1
 801bb4e:	2900      	cmp	r1, #0
 801bb50:	bfb8      	it	lt
 801bb52:	4249      	neglt	r1, r1
 801bb54:	b209      	sxth	r1, r1
 801bb56:	428a      	cmp	r2, r1
 801bb58:	da10      	bge.n	801bb7c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801bb5a:	6920      	ldr	r0, [r4, #16]
 801bb5c:	4669      	mov	r1, sp
 801bb5e:	6803      	ldr	r3, [r0, #0]
 801bb60:	eba8 0606 	sub.w	r6, r8, r6
 801bb64:	685b      	ldr	r3, [r3, #4]
 801bb66:	4798      	blx	r3
 801bb68:	2300      	movs	r3, #0
 801bb6a:	2001      	movs	r0, #1
 801bb6c:	1bef      	subs	r7, r5, r7
 801bb6e:	8123      	strh	r3, [r4, #8]
 801bb70:	8166      	strh	r6, [r4, #10]
 801bb72:	81a7      	strh	r7, [r4, #12]
 801bb74:	f8a4 8004 	strh.w	r8, [r4, #4]
 801bb78:	80e5      	strh	r5, [r4, #6]
 801bb7a:	73a0      	strb	r0, [r4, #14]
 801bb7c:	b004      	add	sp, #16
 801bb7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb82:	bf00      	nop
 801bb84:	0802c0a0 	.word	0x0802c0a0

0801bb88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801bb88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb8a:	461e      	mov	r6, r3
 801bb8c:	1e4b      	subs	r3, r1, #1
 801bb8e:	2b01      	cmp	r3, #1
 801bb90:	b085      	sub	sp, #20
 801bb92:	4604      	mov	r4, r0
 801bb94:	460d      	mov	r5, r1
 801bb96:	4617      	mov	r7, r2
 801bb98:	d84b      	bhi.n	801bc32 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801bb9a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bb9e:	1cd3      	adds	r3, r2, #3
 801bba0:	b29b      	uxth	r3, r3
 801bba2:	2b06      	cmp	r3, #6
 801bba4:	d916      	bls.n	801bbd4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801bba6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801bc48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801bbaa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801bbae:	f8cd c004 	str.w	ip, [sp, #4]
 801bbb2:	f04f 0c00 	mov.w	ip, #0
 801bbb6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bbba:	6900      	ldr	r0, [r0, #16]
 801bbbc:	f8ad 100c 	strh.w	r1, [sp, #12]
 801bbc0:	f88d c008 	strb.w	ip, [sp, #8]
 801bbc4:	f8ad 200a 	strh.w	r2, [sp, #10]
 801bbc8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bbcc:	6803      	ldr	r3, [r0, #0]
 801bbce:	a901      	add	r1, sp, #4
 801bbd0:	689b      	ldr	r3, [r3, #8]
 801bbd2:	4798      	blx	r3
 801bbd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bbd8:	1cd3      	adds	r3, r2, #3
 801bbda:	b29b      	uxth	r3, r3
 801bbdc:	2b06      	cmp	r3, #6
 801bbde:	d916      	bls.n	801bc0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801bbe0:	f8df c064 	ldr.w	ip, [pc, #100]	; 801bc48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801bbe4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801bbe8:	f8cd c004 	str.w	ip, [sp, #4]
 801bbec:	f04f 0c01 	mov.w	ip, #1
 801bbf0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bbf4:	6920      	ldr	r0, [r4, #16]
 801bbf6:	f8ad 100c 	strh.w	r1, [sp, #12]
 801bbfa:	f88d c008 	strb.w	ip, [sp, #8]
 801bbfe:	f8ad 200a 	strh.w	r2, [sp, #10]
 801bc02:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bc06:	6803      	ldr	r3, [r0, #0]
 801bc08:	a901      	add	r1, sp, #4
 801bc0a:	689b      	ldr	r3, [r3, #8]
 801bc0c:	4798      	blx	r3
 801bc0e:	4b0d      	ldr	r3, [pc, #52]	; (801bc44 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801bc10:	6920      	ldr	r0, [r4, #16]
 801bc12:	9301      	str	r3, [sp, #4]
 801bc14:	2300      	movs	r3, #0
 801bc16:	f88d 5008 	strb.w	r5, [sp, #8]
 801bc1a:	f8ad 700a 	strh.w	r7, [sp, #10]
 801bc1e:	f8ad 600c 	strh.w	r6, [sp, #12]
 801bc22:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bc26:	6803      	ldr	r3, [r0, #0]
 801bc28:	a901      	add	r1, sp, #4
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	4798      	blx	r3
 801bc2e:	b005      	add	sp, #20
 801bc30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc32:	2900      	cmp	r1, #0
 801bc34:	d1eb      	bne.n	801bc0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801bc36:	80a2      	strh	r2, [r4, #4]
 801bc38:	80c6      	strh	r6, [r0, #6]
 801bc3a:	60a1      	str	r1, [r4, #8]
 801bc3c:	81a1      	strh	r1, [r4, #12]
 801bc3e:	73a1      	strb	r1, [r4, #14]
 801bc40:	e7e5      	b.n	801bc0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801bc42:	bf00      	nop
 801bc44:	0802c08c 	.word	0x0802c08c
 801bc48:	0802c0b4 	.word	0x0802c0b4

0801bc4c <nema_rb_init>:
 801bc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc50:	6805      	ldr	r5, [r0, #0]
 801bc52:	4f23      	ldr	r7, [pc, #140]	; (801bce0 <nema_rb_init+0x94>)
 801bc54:	2d00      	cmp	r5, #0
 801bc56:	603d      	str	r5, [r7, #0]
 801bc58:	dd3c      	ble.n	801bcd4 <nema_rb_init+0x88>
 801bc5a:	f8df c090 	ldr.w	ip, [pc, #144]	; 801bcec <nema_rb_init+0xa0>
 801bc5e:	10ab      	asrs	r3, r5, #2
 801bc60:	3b04      	subs	r3, #4
 801bc62:	f8df e08c 	ldr.w	lr, [pc, #140]	; 801bcf0 <nema_rb_init+0xa4>
 801bc66:	6886      	ldr	r6, [r0, #8]
 801bc68:	4c1e      	ldr	r4, [pc, #120]	; (801bce4 <nema_rb_init+0x98>)
 801bc6a:	f8cc 3000 	str.w	r3, [ip]
 801bc6e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 801bcf4 <nema_rb_init+0xa8>
 801bc72:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801bc76:	f8ce 0000 	str.w	r0, [lr]
 801bc7a:	6026      	str	r6, [r4, #0]
 801bc7c:	f8c8 c000 	str.w	ip, [r8]
 801bc80:	b329      	cbz	r1, 801bcce <nema_rb_init+0x82>
 801bc82:	2400      	movs	r4, #0
 801bc84:	f8df e070 	ldr.w	lr, [pc, #112]	; 801bcf8 <nema_rb_init+0xac>
 801bc88:	4917      	ldr	r1, [pc, #92]	; (801bce8 <nema_rb_init+0x9c>)
 801bc8a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801bc8e:	f846 e023 	str.w	lr, [r6, r3, lsl #2]
 801bc92:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801bc96:	e9c3 1502 	strd	r1, r5, [r3, #8]
 801bc9a:	f8c3 c004 	str.w	ip, [r3, #4]
 801bc9e:	f7e7 fc4e 	bl	800353e <nema_buffer_flush>
 801bca2:	4621      	mov	r1, r4
 801bca4:	f44f 70a4 	mov.w	r0, #328	; 0x148
 801bca8:	f7e7 fb94 	bl	80033d4 <nema_reg_write>
 801bcac:	f8d8 1000 	ldr.w	r1, [r8]
 801bcb0:	20ec      	movs	r0, #236	; 0xec
 801bcb2:	f041 0106 	orr.w	r1, r1, #6
 801bcb6:	f7e7 fb8d 	bl	80033d4 <nema_reg_write>
 801bcba:	f8d8 1000 	ldr.w	r1, [r8]
 801bcbe:	20f0      	movs	r0, #240	; 0xf0
 801bcc0:	f7e7 fb88 	bl	80033d4 <nema_reg_write>
 801bcc4:	6839      	ldr	r1, [r7, #0]
 801bcc6:	20f4      	movs	r0, #244	; 0xf4
 801bcc8:	f7e7 fb84 	bl	80033d4 <nema_reg_write>
 801bccc:	4621      	mov	r1, r4
 801bcce:	4608      	mov	r0, r1
 801bcd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcd4:	2004      	movs	r0, #4
 801bcd6:	f000 fa25 	bl	801c124 <nema_set_error>
 801bcda:	f04f 31ff 	mov.w	r1, #4294967295
 801bcde:	e7f6      	b.n	801bcce <nema_rb_init+0x82>
 801bce0:	20198594 	.word	0x20198594
 801bce4:	2019858c 	.word	0x2019858c
 801bce8:	ff0000f4 	.word	0xff0000f4
 801bcec:	20198590 	.word	0x20198590
 801bcf0:	20198584 	.word	0x20198584
 801bcf4:	20198588 	.word	0x20198588
 801bcf8:	ff0000f0 	.word	0xff0000f0

0801bcfc <nema_rb_submit_cmdlist2>:
 801bcfc:	2900      	cmp	r1, #0
 801bcfe:	d074      	beq.n	801bdea <nema_rb_submit_cmdlist2+0xee>
 801bd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd04:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 801be00 <nema_rb_submit_cmdlist2+0x104>
 801bd08:	4b39      	ldr	r3, [pc, #228]	; (801bdf0 <nema_rb_submit_cmdlist2+0xf4>)
 801bd0a:	f8d8 2000 	ldr.w	r2, [r8]
 801bd0e:	681d      	ldr	r5, [r3, #0]
 801bd10:	6913      	ldr	r3, [r2, #16]
 801bd12:	468c      	mov	ip, r1
 801bd14:	4c37      	ldr	r4, [pc, #220]	; (801bdf4 <nema_rb_submit_cmdlist2+0xf8>)
 801bd16:	1d19      	adds	r1, r3, #4
 801bd18:	42a9      	cmp	r1, r5
 801bd1a:	6824      	ldr	r4, [r4, #0]
 801bd1c:	db0a      	blt.n	801bd34 <nema_rb_submit_cmdlist2+0x38>
 801bd1e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801bd22:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 801bd26:	6913      	ldr	r3, [r2, #16]
 801bd28:	3301      	adds	r3, #1
 801bd2a:	429d      	cmp	r5, r3
 801bd2c:	6113      	str	r3, [r2, #16]
 801bd2e:	dc59      	bgt.n	801bde4 <nema_rb_submit_cmdlist2+0xe8>
 801bd30:	2300      	movs	r3, #0
 801bd32:	6113      	str	r3, [r2, #16]
 801bd34:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801bd38:	f04f 0e00 	mov.w	lr, #0
 801bd3c:	e009      	b.n	801bd52 <nema_rb_submit_cmdlist2+0x56>
 801bd3e:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 801bd42:	6913      	ldr	r3, [r2, #16]
 801bd44:	3301      	adds	r3, #1
 801bd46:	429d      	cmp	r5, r3
 801bd48:	6113      	str	r3, [r2, #16]
 801bd4a:	bfdc      	itt	le
 801bd4c:	2300      	movle	r3, #0
 801bd4e:	f8c2 e010 	strle.w	lr, [r2, #16]
 801bd52:	f013 0703 	ands.w	r7, r3, #3
 801bd56:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801bd5a:	d1f0      	bne.n	801bd3e <nema_rb_submit_cmdlist2+0x42>
 801bd5c:	23f0      	movs	r3, #240	; 0xf0
 801bd5e:	6033      	str	r3, [r6, #0]
 801bd60:	6913      	ldr	r3, [r2, #16]
 801bd62:	3301      	adds	r3, #1
 801bd64:	429d      	cmp	r5, r3
 801bd66:	bfd3      	iteet	le
 801bd68:	4623      	movle	r3, r4
 801bd6a:	6113      	strgt	r3, [r2, #16]
 801bd6c:	eb04 0383 	addgt.w	r3, r4, r3, lsl #2
 801bd70:	6117      	strle	r7, [r2, #16]
 801bd72:	6018      	str	r0, [r3, #0]
 801bd74:	6913      	ldr	r3, [r2, #16]
 801bd76:	3301      	adds	r3, #1
 801bd78:	429d      	cmp	r5, r3
 801bd7a:	dd2f      	ble.n	801bddc <nema_rb_submit_cmdlist2+0xe0>
 801bd7c:	6113      	str	r3, [r2, #16]
 801bd7e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801bd82:	491d      	ldr	r1, [pc, #116]	; (801bdf8 <nema_rb_submit_cmdlist2+0xfc>)
 801bd84:	4610      	mov	r0, r2
 801bd86:	6019      	str	r1, [r3, #0]
 801bd88:	6913      	ldr	r3, [r2, #16]
 801bd8a:	3301      	adds	r3, #1
 801bd8c:	429d      	cmp	r5, r3
 801bd8e:	bfd3      	iteet	le
 801bd90:	2300      	movle	r3, #0
 801bd92:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
 801bd96:	6113      	strgt	r3, [r2, #16]
 801bd98:	6113      	strle	r3, [r2, #16]
 801bd9a:	f8c4 c000 	str.w	ip, [r4]
 801bd9e:	6913      	ldr	r3, [r2, #16]
 801bda0:	3301      	adds	r3, #1
 801bda2:	429d      	cmp	r5, r3
 801bda4:	bfd8      	it	le
 801bda6:	2300      	movle	r3, #0
 801bda8:	6113      	str	r3, [r2, #16]
 801bdaa:	f7e7 fbc8 	bl	800353e <nema_buffer_flush>
 801bdae:	4a13      	ldr	r2, [pc, #76]	; (801bdfc <nema_rb_submit_cmdlist2+0x100>)
 801bdb0:	f8d8 3000 	ldr.w	r3, [r8]
 801bdb4:	6811      	ldr	r1, [r2, #0]
 801bdb6:	691b      	ldr	r3, [r3, #16]
 801bdb8:	20ec      	movs	r0, #236	; 0xec
 801bdba:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801bdbe:	f041 0104 	orr.w	r1, r1, #4
 801bdc2:	f7e7 fb07 	bl	80033d4 <nema_reg_write>
 801bdc6:	f8d8 3000 	ldr.w	r3, [r8]
 801bdca:	6958      	ldr	r0, [r3, #20]
 801bdcc:	3001      	adds	r0, #1
 801bdce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 801bdd2:	bfa8      	it	ge
 801bdd4:	2000      	movge	r0, #0
 801bdd6:	6158      	str	r0, [r3, #20]
 801bdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bddc:	2100      	movs	r1, #0
 801bdde:	4623      	mov	r3, r4
 801bde0:	6111      	str	r1, [r2, #16]
 801bde2:	e7ce      	b.n	801bd82 <nema_rb_submit_cmdlist2+0x86>
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d19c      	bne.n	801bd22 <nema_rb_submit_cmdlist2+0x26>
 801bde8:	e7a4      	b.n	801bd34 <nema_rb_submit_cmdlist2+0x38>
 801bdea:	f04f 30ff 	mov.w	r0, #4294967295
 801bdee:	4770      	bx	lr
 801bdf0:	20198590 	.word	0x20198590
 801bdf4:	2019858c 	.word	0x2019858c
 801bdf8:	000200f4 	.word	0x000200f4
 801bdfc:	20198588 	.word	0x20198588
 801be00:	20198584 	.word	0x20198584

0801be04 <nema_rb_submit_cmdlist>:
 801be04:	68c0      	ldr	r0, [r0, #12]
 801be06:	f7ff bf79 	b.w	801bcfc <nema_rb_submit_cmdlist2>
 801be0a:	bf00      	nop

0801be0c <nema_rb_inline_cmd>:
 801be0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be0e:	4e21      	ldr	r6, [pc, #132]	; (801be94 <nema_rb_inline_cmd+0x88>)
 801be10:	4b21      	ldr	r3, [pc, #132]	; (801be98 <nema_rb_inline_cmd+0x8c>)
 801be12:	6832      	ldr	r2, [r6, #0]
 801be14:	681d      	ldr	r5, [r3, #0]
 801be16:	6913      	ldr	r3, [r2, #16]
 801be18:	4c20      	ldr	r4, [pc, #128]	; (801be9c <nema_rb_inline_cmd+0x90>)
 801be1a:	1c5f      	adds	r7, r3, #1
 801be1c:	42af      	cmp	r7, r5
 801be1e:	6824      	ldr	r4, [r4, #0]
 801be20:	db24      	blt.n	801be6c <nema_rb_inline_cmd+0x60>
 801be22:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 801be26:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 801be2a:	6913      	ldr	r3, [r2, #16]
 801be2c:	3301      	adds	r3, #1
 801be2e:	429d      	cmp	r5, r3
 801be30:	6113      	str	r3, [r2, #16]
 801be32:	dc17      	bgt.n	801be64 <nema_rb_inline_cmd+0x58>
 801be34:	2700      	movs	r7, #0
 801be36:	4623      	mov	r3, r4
 801be38:	6117      	str	r7, [r2, #16]
 801be3a:	6018      	str	r0, [r3, #0]
 801be3c:	6913      	ldr	r3, [r2, #16]
 801be3e:	3301      	adds	r3, #1
 801be40:	429d      	cmp	r5, r3
 801be42:	bfd3      	iteet	le
 801be44:	2300      	movle	r3, #0
 801be46:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
 801be4a:	6113      	strgt	r3, [r2, #16]
 801be4c:	6113      	strle	r3, [r2, #16]
 801be4e:	6021      	str	r1, [r4, #0]
 801be50:	6913      	ldr	r3, [r2, #16]
 801be52:	3301      	adds	r3, #1
 801be54:	429d      	cmp	r5, r3
 801be56:	bfd8      	it	le
 801be58:	2300      	movle	r3, #0
 801be5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801be5e:	6113      	str	r3, [r2, #16]
 801be60:	d107      	bne.n	801be72 <nema_rb_inline_cmd+0x66>
 801be62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be64:	2b00      	cmp	r3, #0
 801be66:	d1de      	bne.n	801be26 <nema_rb_inline_cmd+0x1a>
 801be68:	4623      	mov	r3, r4
 801be6a:	e7e6      	b.n	801be3a <nema_rb_inline_cmd+0x2e>
 801be6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801be70:	e7e3      	b.n	801be3a <nema_rb_inline_cmd+0x2e>
 801be72:	4610      	mov	r0, r2
 801be74:	f7e7 fb63 	bl	800353e <nema_buffer_flush>
 801be78:	6833      	ldr	r3, [r6, #0]
 801be7a:	4a09      	ldr	r2, [pc, #36]	; (801bea0 <nema_rb_inline_cmd+0x94>)
 801be7c:	691b      	ldr	r3, [r3, #16]
 801be7e:	6811      	ldr	r1, [r2, #0]
 801be80:	20ec      	movs	r0, #236	; 0xec
 801be82:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801be86:	f041 0104 	orr.w	r1, r1, #4
 801be8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801be8e:	f7e7 baa1 	b.w	80033d4 <nema_reg_write>
 801be92:	bf00      	nop
 801be94:	20198584 	.word	0x20198584
 801be98:	20198590 	.word	0x20198590
 801be9c:	2019858c 	.word	0x2019858c
 801bea0:	20198588 	.word	0x20198588

0801bea4 <nema_rb_force_flush>:
 801bea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bea6:	4e36      	ldr	r6, [pc, #216]	; (801bf80 <nema_rb_force_flush+0xdc>)
 801bea8:	4b36      	ldr	r3, [pc, #216]	; (801bf84 <nema_rb_force_flush+0xe0>)
 801beaa:	6830      	ldr	r0, [r6, #0]
 801beac:	6819      	ldr	r1, [r3, #0]
 801beae:	6903      	ldr	r3, [r0, #16]
 801beb0:	4a35      	ldr	r2, [pc, #212]	; (801bf88 <nema_rb_force_flush+0xe4>)
 801beb2:	1d1c      	adds	r4, r3, #4
 801beb4:	428c      	cmp	r4, r1
 801beb6:	6812      	ldr	r2, [r2, #0]
 801beb8:	db0a      	blt.n	801bed0 <nema_rb_force_flush+0x2c>
 801beba:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801bebe:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 801bec2:	6903      	ldr	r3, [r0, #16]
 801bec4:	3301      	adds	r3, #1
 801bec6:	4299      	cmp	r1, r3
 801bec8:	6103      	str	r3, [r0, #16]
 801beca:	dc51      	bgt.n	801bf70 <nema_rb_force_flush+0xcc>
 801becc:	2300      	movs	r3, #0
 801bece:	6103      	str	r3, [r0, #16]
 801bed0:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 801bed4:	2700      	movs	r7, #0
 801bed6:	e008      	b.n	801beea <nema_rb_force_flush+0x46>
 801bed8:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 801bedc:	6903      	ldr	r3, [r0, #16]
 801bede:	3301      	adds	r3, #1
 801bee0:	4299      	cmp	r1, r3
 801bee2:	6103      	str	r3, [r0, #16]
 801bee4:	bfdc      	itt	le
 801bee6:	2300      	movle	r3, #0
 801bee8:	6107      	strle	r7, [r0, #16]
 801beea:	f013 0c03 	ands.w	ip, r3, #3
 801beee:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 801bef2:	d1f1      	bne.n	801bed8 <nema_rb_force_flush+0x34>
 801bef4:	4d25      	ldr	r5, [pc, #148]	; (801bf8c <nema_rb_force_flush+0xe8>)
 801bef6:	4f26      	ldr	r7, [pc, #152]	; (801bf90 <nema_rb_force_flush+0xec>)
 801bef8:	6025      	str	r5, [r4, #0]
 801befa:	6904      	ldr	r4, [r0, #16]
 801befc:	683d      	ldr	r5, [r7, #0]
 801befe:	3401      	adds	r4, #1
 801bf00:	42a1      	cmp	r1, r4
 801bf02:	bfd8      	it	le
 801bf04:	4614      	movle	r4, r2
 801bf06:	f103 0304 	add.w	r3, r3, #4
 801bf0a:	bfc8      	it	gt
 801bf0c:	6104      	strgt	r4, [r0, #16]
 801bf0e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801bf12:	bfcc      	ite	gt
 801bf14:	eb02 0484 	addgt.w	r4, r2, r4, lsl #2
 801bf18:	f8c0 c010 	strle.w	ip, [r0, #16]
 801bf1c:	6023      	str	r3, [r4, #0]
 801bf1e:	6903      	ldr	r3, [r0, #16]
 801bf20:	3301      	adds	r3, #1
 801bf22:	4299      	cmp	r1, r3
 801bf24:	dd27      	ble.n	801bf76 <nema_rb_force_flush+0xd2>
 801bf26:	6103      	str	r3, [r0, #16]
 801bf28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bf2c:	4c19      	ldr	r4, [pc, #100]	; (801bf94 <nema_rb_force_flush+0xf0>)
 801bf2e:	601c      	str	r4, [r3, #0]
 801bf30:	6903      	ldr	r3, [r0, #16]
 801bf32:	3301      	adds	r3, #1
 801bf34:	4299      	cmp	r1, r3
 801bf36:	bfd5      	itete	le
 801bf38:	2300      	movle	r3, #0
 801bf3a:	6103      	strgt	r3, [r0, #16]
 801bf3c:	6103      	strle	r3, [r0, #16]
 801bf3e:	eb02 0283 	addgt.w	r2, r2, r3, lsl #2
 801bf42:	4b15      	ldr	r3, [pc, #84]	; (801bf98 <nema_rb_force_flush+0xf4>)
 801bf44:	681b      	ldr	r3, [r3, #0]
 801bf46:	6013      	str	r3, [r2, #0]
 801bf48:	6903      	ldr	r3, [r0, #16]
 801bf4a:	3301      	adds	r3, #1
 801bf4c:	4299      	cmp	r1, r3
 801bf4e:	bfd8      	it	le
 801bf50:	2300      	movle	r3, #0
 801bf52:	6103      	str	r3, [r0, #16]
 801bf54:	f7e7 faf3 	bl	800353e <nema_buffer_flush>
 801bf58:	6833      	ldr	r3, [r6, #0]
 801bf5a:	6839      	ldr	r1, [r7, #0]
 801bf5c:	691b      	ldr	r3, [r3, #16]
 801bf5e:	20ec      	movs	r0, #236	; 0xec
 801bf60:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801bf64:	f041 0104 	orr.w	r1, r1, #4
 801bf68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801bf6c:	f7e7 ba32 	b.w	80033d4 <nema_reg_write>
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d1a4      	bne.n	801bebe <nema_rb_force_flush+0x1a>
 801bf74:	e7ac      	b.n	801bed0 <nema_rb_force_flush+0x2c>
 801bf76:	2400      	movs	r4, #0
 801bf78:	4613      	mov	r3, r2
 801bf7a:	6104      	str	r4, [r0, #16]
 801bf7c:	e7d6      	b.n	801bf2c <nema_rb_force_flush+0x88>
 801bf7e:	bf00      	nop
 801bf80:	20198584 	.word	0x20198584
 801bf84:	20198590 	.word	0x20198590
 801bf88:	2019858c 	.word	0x2019858c
 801bf8c:	ff0000f0 	.word	0xff0000f0
 801bf90:	20198588 	.word	0x20198588
 801bf94:	ff0000f4 	.word	0xff0000f4
 801bf98:	20198594 	.word	0x20198594

0801bf9c <nema_rb_submit_cl_id>:
 801bf9c:	b510      	push	{r4, lr}
 801bf9e:	1e04      	subs	r4, r0, #0
 801bfa0:	dd40      	ble.n	801c024 <nema_rb_submit_cl_id+0x88>
 801bfa2:	2000      	movs	r0, #0
 801bfa4:	f7e7 fad5 	bl	8003552 <nema_mutex_lock>
 801bfa8:	4621      	mov	r1, r4
 801bfaa:	f44f 70a4 	mov.w	r0, #328	; 0x148
 801bfae:	f7ff ff2d 	bl	801be0c <nema_rb_inline_cmd>
 801bfb2:	4a1d      	ldr	r2, [pc, #116]	; (801c028 <nema_rb_submit_cl_id+0x8c>)
 801bfb4:	4b1d      	ldr	r3, [pc, #116]	; (801c02c <nema_rb_submit_cl_id+0x90>)
 801bfb6:	6812      	ldr	r2, [r2, #0]
 801bfb8:	6818      	ldr	r0, [r3, #0]
 801bfba:	6913      	ldr	r3, [r2, #16]
 801bfbc:	1c59      	adds	r1, r3, #1
 801bfbe:	4281      	cmp	r1, r0
 801bfc0:	db0e      	blt.n	801bfe0 <nema_rb_submit_cl_id+0x44>
 801bfc2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801bfc6:	491a      	ldr	r1, [pc, #104]	; (801c030 <nema_rb_submit_cl_id+0x94>)
 801bfc8:	6809      	ldr	r1, [r1, #0]
 801bfca:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 801bfce:	6913      	ldr	r3, [r2, #16]
 801bfd0:	3301      	adds	r3, #1
 801bfd2:	4298      	cmp	r0, r3
 801bfd4:	6113      	str	r3, [r2, #16]
 801bfd6:	dc21      	bgt.n	801c01c <nema_rb_submit_cl_id+0x80>
 801bfd8:	2400      	movs	r4, #0
 801bfda:	460b      	mov	r3, r1
 801bfdc:	6114      	str	r4, [r2, #16]
 801bfde:	e003      	b.n	801bfe8 <nema_rb_submit_cl_id+0x4c>
 801bfe0:	4913      	ldr	r1, [pc, #76]	; (801c030 <nema_rb_submit_cl_id+0x94>)
 801bfe2:	6809      	ldr	r1, [r1, #0]
 801bfe4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801bfe8:	24f8      	movs	r4, #248	; 0xf8
 801bfea:	601c      	str	r4, [r3, #0]
 801bfec:	6913      	ldr	r3, [r2, #16]
 801bfee:	3301      	adds	r3, #1
 801bff0:	4298      	cmp	r0, r3
 801bff2:	bfd5      	itete	le
 801bff4:	2300      	movle	r3, #0
 801bff6:	6113      	strgt	r3, [r2, #16]
 801bff8:	6113      	strle	r3, [r2, #16]
 801bffa:	eb01 0183 	addgt.w	r1, r1, r3, lsl #2
 801bffe:	2301      	movs	r3, #1
 801c000:	600b      	str	r3, [r1, #0]
 801c002:	6913      	ldr	r3, [r2, #16]
 801c004:	3301      	adds	r3, #1
 801c006:	4298      	cmp	r0, r3
 801c008:	bfd8      	it	le
 801c00a:	2300      	movle	r3, #0
 801c00c:	6113      	str	r3, [r2, #16]
 801c00e:	f7ff ff49 	bl	801bea4 <nema_rb_force_flush>
 801c012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c016:	2000      	movs	r0, #0
 801c018:	f7e7 baa8 	b.w	800356c <nema_mutex_unlock>
 801c01c:	2b00      	cmp	r3, #0
 801c01e:	d1d4      	bne.n	801bfca <nema_rb_submit_cl_id+0x2e>
 801c020:	460b      	mov	r3, r1
 801c022:	e7e1      	b.n	801bfe8 <nema_rb_submit_cl_id+0x4c>
 801c024:	bd10      	pop	{r4, pc}
 801c026:	bf00      	nop
 801c028:	20198584 	.word	0x20198584
 801c02c:	20198590 	.word	0x20198590
 801c030:	2019858c 	.word	0x2019858c

0801c034 <init_nema_regs>:
 801c034:	b538      	push	{r3, r4, r5, lr}
 801c036:	2100      	movs	r1, #0
 801c038:	20e8      	movs	r0, #232	; 0xe8
 801c03a:	f7e7 f9cb 	bl	80033d4 <nema_reg_write>
 801c03e:	2100      	movs	r1, #0
 801c040:	20fc      	movs	r0, #252	; 0xfc
 801c042:	f7e7 f9c7 	bl	80033d4 <nema_reg_write>
 801c046:	2101      	movs	r1, #1
 801c048:	f44f 7062 	mov.w	r0, #904	; 0x388
 801c04c:	f7e7 f9c2 	bl	80033d4 <nema_reg_write>
 801c050:	2000      	movs	r0, #0
 801c052:	f001 f8f7 	bl	801d244 <nema_set_interrupt_ctrl>
 801c056:	f001 fe93 	bl	801dd80 <nema_blender_init>
 801c05a:	2100      	movs	r1, #0
 801c05c:	f44f 7000 	mov.w	r0, #512	; 0x200
 801c060:	f001 fda0 	bl	801dba4 <nema_cl_add_cmd>
 801c064:	f04f 31ff 	mov.w	r1, #4294967295
 801c068:	f44f 7001 	mov.w	r0, #516	; 0x204
 801c06c:	f001 fd9a 	bl	801dba4 <nema_cl_add_cmd>
 801c070:	f000 fec6 	bl	801ce00 <nema_readHwConfig>
 801c074:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
 801c078:	d015      	beq.n	801c0a6 <init_nema_regs+0x72>
 801c07a:	2007      	movs	r0, #7
 801c07c:	f001 f82e 	bl	801d0dc <nema_set_depth_ctrl>
 801c080:	2300      	movs	r3, #0
 801c082:	4c10      	ldr	r4, [pc, #64]	; (801c0c4 <init_nema_regs+0x90>)
 801c084:	7820      	ldrb	r0, [r4, #0]
 801c086:	7063      	strb	r3, [r4, #1]
 801c088:	f000 fecc 	bl	801ce24 <nema_enable_tiling>
 801c08c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801c090:	2500      	movs	r5, #0
 801c092:	6962      	ldr	r2, [r4, #20]
 801c094:	430b      	orrs	r3, r1
 801c096:	4313      	orrs	r3, r2
 801c098:	e9c4 5303 	strd	r5, r3, [r4, #12]
 801c09c:	f000 febe 	bl	801ce1c <nema_readHwConfigH>
 801c0a0:	0583      	lsls	r3, r0, #22
 801c0a2:	d403      	bmi.n	801c0ac <init_nema_regs+0x78>
 801c0a4:	bd38      	pop	{r3, r4, r5, pc}
 801c0a6:	4c07      	ldr	r4, [pc, #28]	; (801c0c4 <init_nema_regs+0x90>)
 801c0a8:	70a0      	strb	r0, [r4, #2]
 801c0aa:	e7ef      	b.n	801c08c <init_nema_regs+0x58>
 801c0ac:	4629      	mov	r1, r5
 801c0ae:	f44f 705d 	mov.w	r0, #884	; 0x374
 801c0b2:	f7e7 f98f 	bl	80033d4 <nema_reg_write>
 801c0b6:	4629      	mov	r1, r5
 801c0b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c0bc:	f44f 705a 	mov.w	r0, #872	; 0x368
 801c0c0:	f7e7 b988 	b.w	80033d4 <nema_reg_write>
 801c0c4:	20198934 	.word	0x20198934

0801c0c8 <nema_init>:
 801c0c8:	b510      	push	{r4, lr}
 801c0ca:	f7e7 f90d 	bl	80032e8 <nema_sys_init>
 801c0ce:	1e04      	subs	r4, r0, #0
 801c0d0:	db11      	blt.n	801c0f6 <nema_init+0x2e>
 801c0d2:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
 801c0d6:	f7e7 f96d 	bl	80033b4 <nema_reg_read>
 801c0da:	4b10      	ldr	r3, [pc, #64]	; (801c11c <nema_init+0x54>)
 801c0dc:	4298      	cmp	r0, r3
 801c0de:	d114      	bne.n	801c10a <nema_init+0x42>
 801c0e0:	f001 fc7e 	bl	801d9e0 <nema_cl_unbind>
 801c0e4:	22d0      	movs	r2, #208	; 0xd0
 801c0e6:	2100      	movs	r1, #0
 801c0e8:	480d      	ldr	r0, [pc, #52]	; (801c120 <nema_init+0x58>)
 801c0ea:	f00d fb05 	bl	80296f8 <memset>
 801c0ee:	b14c      	cbz	r4, 801c104 <nema_init+0x3c>
 801c0f0:	2400      	movs	r4, #0
 801c0f2:	4620      	mov	r0, r4
 801c0f4:	bd10      	pop	{r4, pc}
 801c0f6:	4a0a      	ldr	r2, [pc, #40]	; (801c120 <nema_init+0x58>)
 801c0f8:	4620      	mov	r0, r4
 801c0fa:	6993      	ldr	r3, [r2, #24]
 801c0fc:	f043 0301 	orr.w	r3, r3, #1
 801c100:	6193      	str	r3, [r2, #24]
 801c102:	bd10      	pop	{r4, pc}
 801c104:	f7ff ff96 	bl	801c034 <init_nema_regs>
 801c108:	e7f3      	b.n	801c0f2 <nema_init+0x2a>
 801c10a:	4a05      	ldr	r2, [pc, #20]	; (801c120 <nema_init+0x58>)
 801c10c:	f04f 34ff 	mov.w	r4, #4294967295
 801c110:	6993      	ldr	r3, [r2, #24]
 801c112:	f043 0302 	orr.w	r3, r3, #2
 801c116:	6193      	str	r3, [r2, #24]
 801c118:	e7eb      	b.n	801c0f2 <nema_init+0x2a>
 801c11a:	bf00      	nop
 801c11c:	86362000 	.word	0x86362000
 801c120:	20198934 	.word	0x20198934

0801c124 <nema_set_error>:
 801c124:	4a02      	ldr	r2, [pc, #8]	; (801c130 <nema_set_error+0xc>)
 801c126:	6993      	ldr	r3, [r2, #24]
 801c128:	4318      	orrs	r0, r3
 801c12a:	6190      	str	r0, [r2, #24]
 801c12c:	4770      	bx	lr
 801c12e:	bf00      	nop
 801c130:	20198934 	.word	0x20198934

0801c134 <nema_set_tex_color>:
 801c134:	4601      	mov	r1, r0
 801c136:	201c      	movs	r0, #28
 801c138:	f001 bd34 	b.w	801dba4 <nema_cl_add_cmd>

0801c13c <nema_set_const_reg>:
 801c13c:	3080      	adds	r0, #128	; 0x80
 801c13e:	0080      	lsls	r0, r0, #2
 801c140:	f5b0 7f03 	cmp.w	r0, #524	; 0x20c
 801c144:	d900      	bls.n	801c148 <nema_set_const_reg+0xc>
 801c146:	4770      	bx	lr
 801c148:	f001 bd2c 	b.w	801dba4 <nema_cl_add_cmd>

0801c14c <nema_set_clip>:
 801c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c14e:	460c      	mov	r4, r1
 801c150:	4607      	mov	r7, r0
 801c152:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 801c156:	4d0c      	ldr	r5, [pc, #48]	; (801c188 <nema_set_clip+0x3c>)
 801c158:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 801c15c:	b289      	uxth	r1, r1
 801c15e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801c162:	19d6      	adds	r6, r2, r7
 801c164:	f44f 7088 	mov.w	r0, #272	; 0x110
 801c168:	e9c5 7407 	strd	r7, r4, [r5, #28]
 801c16c:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
 801c170:	441c      	add	r4, r3
 801c172:	f001 fd17 	bl	801dba4 <nema_cl_add_cmd>
 801c176:	b2b1      	uxth	r1, r6
 801c178:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801c17c:	f44f 708a 	mov.w	r0, #276	; 0x114
 801c180:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c184:	f001 bd0e 	b.w	801dba4 <nema_cl_add_cmd>
 801c188:	20198934 	.word	0x20198934

0801c18c <nema_enable_gradient>:
 801c18c:	2800      	cmp	r0, #0
 801c18e:	bf14      	ite	ne
 801c190:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 801c194:	2100      	moveq	r1, #0
 801c196:	b410      	push	{r4}
 801c198:	4a05      	ldr	r2, [pc, #20]	; (801c1b0 <nema_enable_gradient+0x24>)
 801c19a:	6950      	ldr	r0, [r2, #20]
 801c19c:	e9d2 3401 	ldrd	r3, r4, [r2, #4]
 801c1a0:	4323      	orrs	r3, r4
 801c1a2:	4303      	orrs	r3, r0
 801c1a4:	430b      	orrs	r3, r1
 801c1a6:	e9c2 1303 	strd	r1, r3, [r2, #12]
 801c1aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c1ae:	4770      	bx	lr
 801c1b0:	20198934 	.word	0x20198934

0801c1b4 <nema_rgba>:
 801c1b4:	061b      	lsls	r3, r3, #24
 801c1b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c1ba:	4318      	orrs	r0, r3
 801c1bc:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801c1c0:	4770      	bx	lr
 801c1c2:	bf00      	nop

0801c1c4 <nema_bind_src_tex>:
 801c1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1c8:	9c06      	ldr	r4, [sp, #24]
 801c1ca:	460e      	mov	r6, r1
 801c1cc:	1c61      	adds	r1, r4, #1
 801c1ce:	4605      	mov	r5, r0
 801c1d0:	4617      	mov	r7, r2
 801c1d2:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801c1d6:	d022      	beq.n	801c21e <nema_bind_src_tex+0x5a>
 801c1d8:	2201      	movs	r2, #1
 801c1da:	0400      	lsls	r0, r0, #16
 801c1dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801c2b0 <nema_bind_src_tex+0xec>
 801c1e0:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 801c1e4:	b2a4      	uxth	r4, r4
 801c1e6:	4323      	orrs	r3, r4
 801c1e8:	2003      	movs	r0, #3
 801c1ea:	f8c8 3050 	str.w	r3, [r8, #80]	; 0x50
 801c1ee:	e9c8 5611 	strd	r5, r6, [r8, #68]	; 0x44
 801c1f2:	f8c8 704c 	str.w	r7, [r8, #76]	; 0x4c
 801c1f6:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 801c1fa:	f001 fc75 	bl	801dae8 <nema_cl_get_space>
 801c1fe:	b160      	cbz	r0, 801c21a <nema_bind_src_tex+0x56>
 801c200:	2110      	movs	r1, #16
 801c202:	2214      	movs	r2, #20
 801c204:	2318      	movs	r3, #24
 801c206:	e9c0 1500 	strd	r1, r5, [r0]
 801c20a:	6082      	str	r2, [r0, #8]
 801c20c:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 801c210:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 801c214:	e9c0 2303 	strd	r2, r3, [r0, #12]
 801c218:	6146      	str	r6, [r0, #20]
 801c21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c21e:	06c2      	lsls	r2, r0, #27
 801c220:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 801c224:	d41c      	bmi.n	801c260 <nema_bind_src_tex+0x9c>
 801c226:	4634      	mov	r4, r6
 801c228:	f1a1 020b 	sub.w	r2, r1, #11
 801c22c:	2a2a      	cmp	r2, #42	; 0x2a
 801c22e:	d833      	bhi.n	801c298 <nema_bind_src_tex+0xd4>
 801c230:	e8df f002 	tbb	[pc, r2]
 801c234:	32322a2a 	.word	0x32322a2a
 801c238:	30323232 	.word	0x30323232
 801c23c:	1c323232 	.word	0x1c323232
 801c240:	3232321c 	.word	0x3232321c
 801c244:	32323232 	.word	0x32323232
 801c248:	32323232 	.word	0x32323232
 801c24c:	32323232 	.word	0x32323232
 801c250:	2a241f2a 	.word	0x2a241f2a
 801c254:	3232241f 	.word	0x3232241f
 801c258:	321f1f32 	.word	0x321f1f32
 801c25c:	2432      	.short	0x2432
 801c25e:	24          	.byte	0x24
 801c25f:	00          	.byte	0x00
 801c260:	1cf4      	adds	r4, r6, #3
 801c262:	bf48      	it	mi
 801c264:	1db4      	addmi	r4, r6, #6
 801c266:	f024 0403 	bic.w	r4, r4, #3
 801c26a:	e7dd      	b.n	801c228 <nema_bind_src_tex+0x64>
 801c26c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c270:	e7b2      	b.n	801c1d8 <nema_bind_src_tex+0x14>
 801c272:	0062      	lsls	r2, r4, #1
 801c274:	1dd4      	adds	r4, r2, #7
 801c276:	d404      	bmi.n	801c282 <nema_bind_src_tex+0xbe>
 801c278:	10e4      	asrs	r4, r4, #3
 801c27a:	e7ad      	b.n	801c1d8 <nema_bind_src_tex+0x14>
 801c27c:	00a2      	lsls	r2, r4, #2
 801c27e:	1dd4      	adds	r4, r2, #7
 801c280:	d5fa      	bpl.n	801c278 <nema_bind_src_tex+0xb4>
 801c282:	f102 040e 	add.w	r4, r2, #14
 801c286:	e7f7      	b.n	801c278 <nema_bind_src_tex+0xb4>
 801c288:	1de2      	adds	r2, r4, #7
 801c28a:	bf48      	it	mi
 801c28c:	f104 020e 	addmi.w	r2, r4, #14
 801c290:	10d4      	asrs	r4, r2, #3
 801c292:	e7a1      	b.n	801c1d8 <nema_bind_src_tex+0x14>
 801c294:	0064      	lsls	r4, r4, #1
 801c296:	e79f      	b.n	801c1d8 <nema_bind_src_tex+0x14>
 801c298:	3904      	subs	r1, #4
 801c29a:	2947      	cmp	r1, #71	; 0x47
 801c29c:	bf8e      	itee	hi
 801c29e:	2204      	movhi	r2, #4
 801c2a0:	4a02      	ldrls	r2, [pc, #8]	; (801c2ac <nema_bind_src_tex+0xe8>)
 801c2a2:	5652      	ldrsbls	r2, [r2, r1]
 801c2a4:	fb02 f404 	mul.w	r4, r2, r4
 801c2a8:	e796      	b.n	801c1d8 <nema_bind_src_tex+0x14>
 801c2aa:	bf00      	nop
 801c2ac:	0802c0f4 	.word	0x0802c0f4
 801c2b0:	20198934 	.word	0x20198934

0801c2b4 <nema_bind_dst_tex>:
 801c2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c2b8:	9c08      	ldr	r4, [sp, #32]
 801c2ba:	4699      	mov	r9, r3
 801c2bc:	4617      	mov	r7, r2
 801c2be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c2c2:	1c63      	adds	r3, r4, #1
 801c2c4:	4680      	mov	r8, r0
 801c2c6:	460e      	mov	r6, r1
 801c2c8:	d02c      	beq.n	801c324 <nema_bind_dst_tex+0x70>
 801c2ca:	2a12      	cmp	r2, #18
 801c2cc:	d009      	beq.n	801c2e2 <nema_bind_dst_tex+0x2e>
 801c2ce:	3a16      	subs	r2, #22
 801c2d0:	2a01      	cmp	r2, #1
 801c2d2:	d906      	bls.n	801c2e2 <nema_bind_dst_tex+0x2e>
 801c2d4:	4d50      	ldr	r5, [pc, #320]	; (801c418 <nema_bind_dst_tex+0x164>)
 801c2d6:	7868      	ldrb	r0, [r5, #1]
 801c2d8:	f000 fda4 	bl	801ce24 <nema_enable_tiling>
 801c2dc:	e007      	b.n	801c2ee <nema_bind_dst_tex+0x3a>
 801c2de:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 801c2e2:	2301      	movs	r3, #1
 801c2e4:	4d4c      	ldr	r5, [pc, #304]	; (801c418 <nema_bind_dst_tex+0x164>)
 801c2e6:	4618      	mov	r0, r3
 801c2e8:	702b      	strb	r3, [r5, #0]
 801c2ea:	f000 fd9b 	bl	801ce24 <nema_enable_tiling>
 801c2ee:	2201      	movs	r2, #1
 801c2f0:	b2a4      	uxth	r4, r4
 801c2f2:	ea44 6409 	orr.w	r4, r4, r9, lsl #24
 801c2f6:	2003      	movs	r0, #3
 801c2f8:	63ec      	str	r4, [r5, #60]	; 0x3c
 801c2fa:	e9c5 860c 	strd	r8, r6, [r5, #48]	; 0x30
 801c2fe:	63af      	str	r7, [r5, #56]	; 0x38
 801c300:	642a      	str	r2, [r5, #64]	; 0x40
 801c302:	f001 fbf1 	bl	801dae8 <nema_cl_get_space>
 801c306:	b158      	cbz	r0, 801c320 <nema_bind_dst_tex+0x6c>
 801c308:	2100      	movs	r1, #0
 801c30a:	2204      	movs	r2, #4
 801c30c:	2308      	movs	r3, #8
 801c30e:	e9c0 1800 	strd	r1, r8, [r0]
 801c312:	6082      	str	r2, [r0, #8]
 801c314:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 801c316:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 801c31a:	e9c0 2303 	strd	r2, r3, [r0, #12]
 801c31e:	6146      	str	r6, [r0, #20]
 801c320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c324:	f1a2 030b 	sub.w	r3, r2, #11
 801c328:	2b2a      	cmp	r3, #42	; 0x2a
 801c32a:	d86b      	bhi.n	801c404 <nema_bind_dst_tex+0x150>
 801c32c:	a101      	add	r1, pc, #4	; (adr r1, 801c334 <nema_bind_dst_tex+0x80>)
 801c32e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c332:	bf00      	nop
 801c334:	0801c3f7 	.word	0x0801c3f7
 801c338:	0801c3f7 	.word	0x0801c3f7
 801c33c:	0801c405 	.word	0x0801c405
 801c340:	0801c405 	.word	0x0801c405
 801c344:	0801c405 	.word	0x0801c405
 801c348:	0801c405 	.word	0x0801c405
 801c34c:	0801c405 	.word	0x0801c405
 801c350:	0801c401 	.word	0x0801c401
 801c354:	0801c405 	.word	0x0801c405
 801c358:	0801c405 	.word	0x0801c405
 801c35c:	0801c405 	.word	0x0801c405
 801c360:	0801c2df 	.word	0x0801c2df
 801c364:	0801c2df 	.word	0x0801c2df
 801c368:	0801c405 	.word	0x0801c405
 801c36c:	0801c405 	.word	0x0801c405
 801c370:	0801c405 	.word	0x0801c405
 801c374:	0801c405 	.word	0x0801c405
 801c378:	0801c405 	.word	0x0801c405
 801c37c:	0801c405 	.word	0x0801c405
 801c380:	0801c405 	.word	0x0801c405
 801c384:	0801c405 	.word	0x0801c405
 801c388:	0801c405 	.word	0x0801c405
 801c38c:	0801c405 	.word	0x0801c405
 801c390:	0801c405 	.word	0x0801c405
 801c394:	0801c405 	.word	0x0801c405
 801c398:	0801c405 	.word	0x0801c405
 801c39c:	0801c405 	.word	0x0801c405
 801c3a0:	0801c405 	.word	0x0801c405
 801c3a4:	0801c3f7 	.word	0x0801c3f7
 801c3a8:	0801c3eb 	.word	0x0801c3eb
 801c3ac:	0801c3e1 	.word	0x0801c3e1
 801c3b0:	0801c3f7 	.word	0x0801c3f7
 801c3b4:	0801c3eb 	.word	0x0801c3eb
 801c3b8:	0801c3e1 	.word	0x0801c3e1
 801c3bc:	0801c405 	.word	0x0801c405
 801c3c0:	0801c405 	.word	0x0801c405
 801c3c4:	0801c405 	.word	0x0801c405
 801c3c8:	0801c3eb 	.word	0x0801c3eb
 801c3cc:	0801c3eb 	.word	0x0801c3eb
 801c3d0:	0801c405 	.word	0x0801c405
 801c3d4:	0801c405 	.word	0x0801c405
 801c3d8:	0801c3e1 	.word	0x0801c3e1
 801c3dc:	0801c3e1 	.word	0x0801c3e1
 801c3e0:	00b3      	lsls	r3, r6, #2
 801c3e2:	1ddc      	adds	r4, r3, #7
 801c3e4:	d404      	bmi.n	801c3f0 <nema_bind_dst_tex+0x13c>
 801c3e6:	10e4      	asrs	r4, r4, #3
 801c3e8:	e76f      	b.n	801c2ca <nema_bind_dst_tex+0x16>
 801c3ea:	0073      	lsls	r3, r6, #1
 801c3ec:	1ddc      	adds	r4, r3, #7
 801c3ee:	d5fa      	bpl.n	801c3e6 <nema_bind_dst_tex+0x132>
 801c3f0:	f103 040e 	add.w	r4, r3, #14
 801c3f4:	e7f7      	b.n	801c3e6 <nema_bind_dst_tex+0x132>
 801c3f6:	1df4      	adds	r4, r6, #7
 801c3f8:	d5f5      	bpl.n	801c3e6 <nema_bind_dst_tex+0x132>
 801c3fa:	f106 040e 	add.w	r4, r6, #14
 801c3fe:	e7f2      	b.n	801c3e6 <nema_bind_dst_tex+0x132>
 801c400:	0074      	lsls	r4, r6, #1
 801c402:	e76e      	b.n	801c2e2 <nema_bind_dst_tex+0x2e>
 801c404:	1f13      	subs	r3, r2, #4
 801c406:	2b47      	cmp	r3, #71	; 0x47
 801c408:	bf8e      	itee	hi
 801c40a:	2404      	movhi	r4, #4
 801c40c:	4903      	ldrls	r1, [pc, #12]	; (801c41c <nema_bind_dst_tex+0x168>)
 801c40e:	56cc      	ldrsbls	r4, [r1, r3]
 801c410:	fb06 f404 	mul.w	r4, r6, r4
 801c414:	e759      	b.n	801c2ca <nema_bind_dst_tex+0x16>
 801c416:	bf00      	nop
 801c418:	20198934 	.word	0x20198934
 801c41c:	0802c0f4 	.word	0x0802c0f4

0801c420 <nema_fill_rect>:
 801c420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c424:	4604      	mov	r4, r0
 801c426:	460d      	mov	r5, r1
 801c428:	4616      	mov	r6, r2
 801c42a:	461f      	mov	r7, r3
 801c42c:	9806      	ldr	r0, [sp, #24]
 801c42e:	f000 fe5b 	bl	801d0e8 <nema_set_raster_color>
 801c432:	463b      	mov	r3, r7
 801c434:	4632      	mov	r2, r6
 801c436:	4629      	mov	r1, r5
 801c438:	4620      	mov	r0, r4
 801c43a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c43e:	f000 be95 	b.w	801d16c <nema_raster_rect>
 801c442:	bf00      	nop

0801c444 <nema_blit>:
 801c444:	ee07 0a90 	vmov	s15, r0
 801c448:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801c44c:	ee07 1a90 	vmov	s15, r1
 801c450:	b500      	push	{lr}
 801c452:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801c456:	b083      	sub	sp, #12
 801c458:	e9cd 0100 	strd	r0, r1, [sp]
 801c45c:	f000 fdde 	bl	801d01c <nema_set_matrix_translate>
 801c460:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c464:	4a03      	ldr	r2, [pc, #12]	; (801c474 <nema_blit+0x30>)
 801c466:	e9d2 2312 	ldrd	r2, r3, [r2, #72]	; 0x48
 801c46a:	b003      	add	sp, #12
 801c46c:	f85d eb04 	ldr.w	lr, [sp], #4
 801c470:	f000 be7c 	b.w	801d16c <nema_raster_rect>
 801c474:	20198934 	.word	0x20198934

0801c478 <nema_blit_rotate>:
 801c478:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c47a:	2600      	movs	r6, #0
 801c47c:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 801c480:	4b68      	ldr	r3, [pc, #416]	; (801c624 <nema_blit_rotate+0x1ac>)
 801c482:	b08b      	sub	sp, #44	; 0x2c
 801c484:	3a01      	subs	r2, #1
 801c486:	9607      	str	r6, [sp, #28]
 801c488:	9608      	str	r6, [sp, #32]
 801c48a:	9709      	str	r7, [sp, #36]	; 0x24
 801c48c:	4604      	mov	r4, r0
 801c48e:	e9d3 6712 	ldrd	r6, r7, [r3, #72]	; 0x48
 801c492:	460d      	mov	r5, r1
 801c494:	2a0e      	cmp	r2, #14
 801c496:	f200 80b0 	bhi.w	801c5fa <nema_blit_rotate+0x182>
 801c49a:	e8df f002 	tbb	[pc, r2]
 801c49e:	4730      	.short	0x4730
 801c4a0:	9a836f58 	.word	0x9a836f58
 801c4a4:	6f089a08 	.word	0x6f089a08
 801c4a8:	ae584783 	.word	0xae584783
 801c4ac:	30          	.byte	0x30
 801c4ad:	00          	.byte	0x00
 801c4ae:	1970      	adds	r0, r6, r5
 801c4b0:	ee07 0a10 	vmov	s14, r0
 801c4b4:	1938      	adds	r0, r7, r4
 801c4b6:	4631      	mov	r1, r6
 801c4b8:	ee07 0a90 	vmov	s15, r0
 801c4bc:	2200      	movs	r2, #0
 801c4be:	463e      	mov	r6, r7
 801c4c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c4c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c4c8:	460f      	mov	r7, r1
 801c4ca:	4b57      	ldr	r3, [pc, #348]	; (801c628 <nema_blit_rotate+0x1b0>)
 801c4cc:	9201      	str	r2, [sp, #4]
 801c4ce:	9205      	str	r2, [sp, #20]
 801c4d0:	9302      	str	r3, [sp, #8]
 801c4d2:	9304      	str	r3, [sp, #16]
 801c4d4:	eddf 6a55 	vldr	s13, [pc, #340]	; 801c62c <nema_blit_rotate+0x1b4>
 801c4d8:	ee37 7a26 	vadd.f32	s14, s14, s13
 801c4dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c4e0:	a801      	add	r0, sp, #4
 801c4e2:	ed8d 7a03 	vstr	s14, [sp, #12]
 801c4e6:	edcd 7a06 	vstr	s15, [sp, #24]
 801c4ea:	f000 fcdd 	bl	801cea8 <nema_set_matrix>
 801c4ee:	463b      	mov	r3, r7
 801c4f0:	4632      	mov	r2, r6
 801c4f2:	4629      	mov	r1, r5
 801c4f4:	4620      	mov	r0, r4
 801c4f6:	f000 fe39 	bl	801d16c <nema_raster_rect>
 801c4fa:	b00b      	add	sp, #44	; 0x2c
 801c4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c4fe:	ee07 4a90 	vmov	s15, r4
 801c502:	4630      	mov	r0, r6
 801c504:	442e      	add	r6, r5
 801c506:	2300      	movs	r3, #0
 801c508:	ee07 6a10 	vmov	s14, r6
 801c50c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801c510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c514:	4944      	ldr	r1, [pc, #272]	; (801c628 <nema_blit_rotate+0x1b0>)
 801c516:	463e      	mov	r6, r7
 801c518:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c51c:	9301      	str	r3, [sp, #4]
 801c51e:	4607      	mov	r7, r0
 801c520:	9305      	str	r3, [sp, #20]
 801c522:	9102      	str	r1, [sp, #8]
 801c524:	9204      	str	r2, [sp, #16]
 801c526:	eef1 7a67 	vneg.f32	s15, s15
 801c52a:	e7d3      	b.n	801c4d4 <nema_blit_rotate+0x5c>
 801c52c:	4b3e      	ldr	r3, [pc, #248]	; (801c628 <nema_blit_rotate+0x1b0>)
 801c52e:	2200      	movs	r2, #0
 801c530:	9301      	str	r3, [sp, #4]
 801c532:	9305      	str	r3, [sp, #20]
 801c534:	1833      	adds	r3, r6, r0
 801c536:	ee07 3a90 	vmov	s15, r3
 801c53a:	1878      	adds	r0, r7, r1
 801c53c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c540:	ee07 0a90 	vmov	s15, r0
 801c544:	9202      	str	r2, [sp, #8]
 801c546:	9204      	str	r2, [sp, #16]
 801c548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c54c:	e7c2      	b.n	801c4d4 <nema_blit_rotate+0x5c>
 801c54e:	ee07 5a10 	vmov	s14, r5
 801c552:	4630      	mov	r0, r6
 801c554:	193e      	adds	r6, r7, r4
 801c556:	2300      	movs	r3, #0
 801c558:	ee07 6a90 	vmov	s15, r6
 801c55c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801c560:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c564:	4a30      	ldr	r2, [pc, #192]	; (801c628 <nema_blit_rotate+0x1b0>)
 801c566:	463e      	mov	r6, r7
 801c568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c56c:	4607      	mov	r7, r0
 801c56e:	9301      	str	r3, [sp, #4]
 801c570:	9305      	str	r3, [sp, #20]
 801c572:	9102      	str	r1, [sp, #8]
 801c574:	eeb1 7a47 	vneg.f32	s14, s14
 801c578:	9204      	str	r2, [sp, #16]
 801c57a:	e7ab      	b.n	801c4d4 <nema_blit_rotate+0x5c>
 801c57c:	ee07 4a90 	vmov	s15, r4
 801c580:	1978      	adds	r0, r7, r5
 801c582:	2300      	movs	r3, #0
 801c584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c588:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801c58c:	ee07 0a90 	vmov	s15, r0
 801c590:	4a25      	ldr	r2, [pc, #148]	; (801c628 <nema_blit_rotate+0x1b0>)
 801c592:	9101      	str	r1, [sp, #4]
 801c594:	9302      	str	r3, [sp, #8]
 801c596:	9304      	str	r3, [sp, #16]
 801c598:	eeb1 7a47 	vneg.f32	s14, s14
 801c59c:	9205      	str	r2, [sp, #20]
 801c59e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c5a2:	e797      	b.n	801c4d4 <nema_blit_rotate+0x5c>
 801c5a4:	ee07 5a90 	vmov	s15, r5
 801c5a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c5ac:	ee07 0a90 	vmov	s15, r0
 801c5b0:	4631      	mov	r1, r6
 801c5b2:	2200      	movs	r2, #0
 801c5b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801c5b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c5bc:	463e      	mov	r6, r7
 801c5be:	eeb1 7a47 	vneg.f32	s14, s14
 801c5c2:	460f      	mov	r7, r1
 801c5c4:	eef1 7a67 	vneg.f32	s15, s15
 801c5c8:	9201      	str	r2, [sp, #4]
 801c5ca:	9205      	str	r2, [sp, #20]
 801c5cc:	9302      	str	r3, [sp, #8]
 801c5ce:	9304      	str	r3, [sp, #16]
 801c5d0:	e780      	b.n	801c4d4 <nema_blit_rotate+0x5c>
 801c5d2:	ee07 5a90 	vmov	s15, r5
 801c5d6:	1830      	adds	r0, r6, r0
 801c5d8:	2300      	movs	r3, #0
 801c5da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801c5de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c5e2:	ee07 0a10 	vmov	s14, r0
 801c5e6:	4910      	ldr	r1, [pc, #64]	; (801c628 <nema_blit_rotate+0x1b0>)
 801c5e8:	9302      	str	r3, [sp, #8]
 801c5ea:	9101      	str	r1, [sp, #4]
 801c5ec:	9304      	str	r3, [sp, #16]
 801c5ee:	9205      	str	r2, [sp, #20]
 801c5f0:	eef1 7a67 	vneg.f32	s15, s15
 801c5f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c5f8:	e76c      	b.n	801c4d4 <nema_blit_rotate+0x5c>
 801c5fa:	ee07 0a90 	vmov	s15, r0
 801c5fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c602:	ee07 1a90 	vmov	s15, r1
 801c606:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801c60a:	2300      	movs	r3, #0
 801c60c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c610:	9201      	str	r2, [sp, #4]
 801c612:	9205      	str	r2, [sp, #20]
 801c614:	9302      	str	r3, [sp, #8]
 801c616:	9304      	str	r3, [sp, #16]
 801c618:	eeb1 7a47 	vneg.f32	s14, s14
 801c61c:	eef1 7a67 	vneg.f32	s15, s15
 801c620:	e758      	b.n	801c4d4 <nema_blit_rotate+0x5c>
 801c622:	bf00      	nop
 801c624:	20198934 	.word	0x20198934
 801c628:	bf800000 	.word	0xbf800000
 801c62c:	00000000 	.word	0x00000000

0801c630 <nema_blit_tri_fit>:
 801c630:	2803      	cmp	r0, #3
 801c632:	d801      	bhi.n	801c638 <nema_blit_tri_fit+0x8>
 801c634:	2903      	cmp	r1, #3
 801c636:	d900      	bls.n	801c63a <nema_blit_tri_fit+0xa>
 801c638:	4770      	bx	lr
 801c63a:	2a03      	cmp	r2, #3
 801c63c:	d8fc      	bhi.n	801c638 <nema_blit_tri_fit+0x8>
 801c63e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c642:	460c      	mov	r4, r1
 801c644:	493b      	ldr	r1, [pc, #236]	; (801c734 <nema_blit_tri_fit+0x104>)
 801c646:	4603      	mov	r3, r0
 801c648:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 801c64c:	ee07 0a90 	vmov	s15, r0
 801c650:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c654:	ee07 1a90 	vmov	s15, r1
 801c658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c65c:	b08a      	sub	sp, #40	; 0x28
 801c65e:	f04f 0c00 	mov.w	ip, #0
 801c662:	edcd 7a08 	vstr	s15, [sp, #32]
 801c666:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 801c66a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801c66e:	ed8d 7a03 	vstr	s14, [sp, #12]
 801c672:	ed8d 7a04 	vstr	s14, [sp, #16]
 801c676:	ee12 8a10 	vmov	r8, s4
 801c67a:	ee11 9a90 	vmov	r9, s3
 801c67e:	ee11 aa10 	vmov	sl, s2
 801c682:	ee10 6a10 	vmov	r6, s0
 801c686:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 801c68a:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 801c68e:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
 801c692:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 801c696:	f8cd c008 	str.w	ip, [sp, #8]
 801c69a:	f8cd c014 	str.w	ip, [sp, #20]
 801c69e:	f8cd c018 	str.w	ip, [sp, #24]
 801c6a2:	f8cd c01c 	str.w	ip, [sp, #28]
 801c6a6:	ed52 6a08 	vldr	s13, [r2, #-32]	; 0xffffffe0
 801c6aa:	ed14 4a08 	vldr	s8, [r4, #-32]	; 0xffffffe0
 801c6ae:	ed53 1a08 	vldr	s3, [r3, #-32]	; 0xffffffe0
 801c6b2:	ed12 7a04 	vldr	s14, [r2, #-16]
 801c6b6:	ed54 4a04 	vldr	s9, [r4, #-16]
 801c6ba:	ed13 2a04 	vldr	s4, [r3, #-16]
 801c6be:	eef0 5a62 	vmov.f32	s11, s5
 801c6c2:	ee05 8a10 	vmov	s10, r8
 801c6c6:	ee03 9a10 	vmov	s6, r9
 801c6ca:	eef0 3a46 	vmov.f32	s7, s12
 801c6ce:	eeb0 1a46 	vmov.f32	s2, s12
 801c6d2:	ee12 7a90 	vmov	r7, s5
 801c6d6:	ee02 aa90 	vmov	s5, sl
 801c6da:	ee10 5a90 	vmov	r5, s1
 801c6de:	f000 f889 	bl	801c7f4 <nema_interpolate_tx_ty>
 801c6e2:	ee00 6a10 	vmov	s0, r6
 801c6e6:	f000 f90f 	bl	801c908 <nema_f2fx>
 801c6ea:	ee00 5a10 	vmov	s0, r5
 801c6ee:	4604      	mov	r4, r0
 801c6f0:	f000 f90a 	bl	801c908 <nema_f2fx>
 801c6f4:	ee00 aa10 	vmov	s0, sl
 801c6f8:	4605      	mov	r5, r0
 801c6fa:	f000 f905 	bl	801c908 <nema_f2fx>
 801c6fe:	ee00 9a10 	vmov	s0, r9
 801c702:	4606      	mov	r6, r0
 801c704:	f000 f900 	bl	801c908 <nema_f2fx>
 801c708:	ee00 8a10 	vmov	s0, r8
 801c70c:	4681      	mov	r9, r0
 801c70e:	f000 f8fb 	bl	801c908 <nema_f2fx>
 801c712:	ee00 7a10 	vmov	s0, r7
 801c716:	4680      	mov	r8, r0
 801c718:	f000 f8f6 	bl	801c908 <nema_f2fx>
 801c71c:	464b      	mov	r3, r9
 801c71e:	e9cd 8000 	strd	r8, r0, [sp]
 801c722:	4632      	mov	r2, r6
 801c724:	4629      	mov	r1, r5
 801c726:	4620      	mov	r0, r4
 801c728:	f000 fce4 	bl	801d0f4 <nema_raster_triangle_fx>
 801c72c:	b00a      	add	sp, #40	; 0x28
 801c72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c732:	bf00      	nop
 801c734:	20198934 	.word	0x20198934

0801c738 <nema_blit_quad_fit>:
 801c738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c73c:	ed2d 8b08 	vpush	{d8-d11}
 801c740:	4b2b      	ldr	r3, [pc, #172]	; (801c7f0 <nema_blit_quad_fit+0xb8>)
 801c742:	b08e      	sub	sp, #56	; 0x38
 801c744:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 801c748:	aa05      	add	r2, sp, #20
 801c74a:	eef0 ba40 	vmov.f32	s23, s0
 801c74e:	eeb0 ba60 	vmov.f32	s22, s1
 801c752:	eef0 aa41 	vmov.f32	s21, s2
 801c756:	eeb0 aa61 	vmov.f32	s20, s3
 801c75a:	eef0 9a42 	vmov.f32	s19, s4
 801c75e:	eeb0 9a62 	vmov.f32	s18, s5
 801c762:	eef0 8a43 	vmov.f32	s17, s6
 801c766:	eeb0 8a63 	vmov.f32	s16, s7
 801c76a:	f000 f9e1 	bl	801cb30 <nema_mat3x3_quad_to_rect>
 801c76e:	b120      	cbz	r0, 801c77a <nema_blit_quad_fit+0x42>
 801c770:	b00e      	add	sp, #56	; 0x38
 801c772:	ecbd 8b08 	vpop	{d8-d11}
 801c776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c77a:	a805      	add	r0, sp, #20
 801c77c:	f000 fb94 	bl	801cea8 <nema_set_matrix>
 801c780:	eeb0 0a6b 	vmov.f32	s0, s23
 801c784:	f000 f8c0 	bl	801c908 <nema_f2fx>
 801c788:	eeb0 0a4b 	vmov.f32	s0, s22
 801c78c:	4604      	mov	r4, r0
 801c78e:	f000 f8bb 	bl	801c908 <nema_f2fx>
 801c792:	eeb0 0a6a 	vmov.f32	s0, s21
 801c796:	4605      	mov	r5, r0
 801c798:	f000 f8b6 	bl	801c908 <nema_f2fx>
 801c79c:	eeb0 0a4a 	vmov.f32	s0, s20
 801c7a0:	4606      	mov	r6, r0
 801c7a2:	f000 f8b1 	bl	801c908 <nema_f2fx>
 801c7a6:	eeb0 0a69 	vmov.f32	s0, s19
 801c7aa:	4607      	mov	r7, r0
 801c7ac:	f000 f8ac 	bl	801c908 <nema_f2fx>
 801c7b0:	eeb0 0a49 	vmov.f32	s0, s18
 801c7b4:	4682      	mov	sl, r0
 801c7b6:	f000 f8a7 	bl	801c908 <nema_f2fx>
 801c7ba:	eeb0 0a68 	vmov.f32	s0, s17
 801c7be:	4680      	mov	r8, r0
 801c7c0:	f000 f8a2 	bl	801c908 <nema_f2fx>
 801c7c4:	eeb0 0a48 	vmov.f32	s0, s16
 801c7c8:	4681      	mov	r9, r0
 801c7ca:	f000 f89d 	bl	801c908 <nema_f2fx>
 801c7ce:	f8cd a000 	str.w	sl, [sp]
 801c7d2:	e9cd 9002 	strd	r9, r0, [sp, #8]
 801c7d6:	f8cd 8004 	str.w	r8, [sp, #4]
 801c7da:	463b      	mov	r3, r7
 801c7dc:	4632      	mov	r2, r6
 801c7de:	4629      	mov	r1, r5
 801c7e0:	4620      	mov	r0, r4
 801c7e2:	f000 fced 	bl	801d1c0 <nema_raster_quad_fx>
 801c7e6:	b00e      	add	sp, #56	; 0x38
 801c7e8:	ecbd 8b08 	vpop	{d8-d11}
 801c7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c7f0:	20198934 	.word	0x20198934

0801c7f4 <nema_interpolate_tx_ty>:
 801c7f4:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 801c7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7fc:	d407      	bmi.n	801c80e <nema_interpolate_tx_ty+0x1a>
 801c7fe:	eddf 7a40 	vldr	s15, [pc, #256]	; 801c900 <nema_interpolate_tx_ty+0x10c>
 801c802:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801c806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c80a:	d807      	bhi.n	801c81c <nema_interpolate_tx_ty+0x28>
 801c80c:	4770      	bx	lr
 801c80e:	eddf 7a3d 	vldr	s15, [pc, #244]	; 801c904 <nema_interpolate_tx_ty+0x110>
 801c812:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801c816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c81a:	daf7      	bge.n	801c80c <nema_interpolate_tx_ty+0x18>
 801c81c:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 801c820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c824:	d45b      	bmi.n	801c8de <nema_interpolate_tx_ty+0xea>
 801c826:	eddf 7a36 	vldr	s15, [pc, #216]	; 801c900 <nema_interpolate_tx_ty+0x10c>
 801c82a:	eef4 3ae7 	vcmpe.f32	s7, s15
 801c82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c832:	d9eb      	bls.n	801c80c <nema_interpolate_tx_ty+0x18>
 801c834:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801c838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c83c:	d457      	bmi.n	801c8ee <nema_interpolate_tx_ty+0xfa>
 801c83e:	eddf 7a30 	vldr	s15, [pc, #192]	; 801c900 <nema_interpolate_tx_ty+0x10c>
 801c842:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801c846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c84a:	d9df      	bls.n	801c80c <nema_interpolate_tx_ty+0x18>
 801c84c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c850:	b570      	push	{r4, r5, r6, lr}
 801c852:	ee15 3a90 	vmov	r3, s11
 801c856:	ee13 2a10 	vmov	r2, s6
 801c85a:	eec7 5a86 	vdiv.f32	s11, s15, s12
 801c85e:	ee87 3a81 	vdiv.f32	s6, s15, s2
 801c862:	ee15 4a10 	vmov	r4, s10
 801c866:	ee87 5aa3 	vdiv.f32	s10, s15, s7
 801c86a:	ee63 1a21 	vmul.f32	s3, s6, s3
 801c86e:	ee23 2a02 	vmul.f32	s4, s6, s4
 801c872:	ee25 4a04 	vmul.f32	s8, s10, s8
 801c876:	ee65 4a24 	vmul.f32	s9, s10, s9
 801c87a:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801c87e:	ee25 7a87 	vmul.f32	s14, s11, s14
 801c882:	b092      	sub	sp, #72	; 0x48
 801c884:	a809      	add	r0, sp, #36	; 0x24
 801c886:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 801c88a:	edcd 2a0a 	vstr	s5, [sp, #40]	; 0x28
 801c88e:	edcd 0a0c 	vstr	s1, [sp, #48]	; 0x30
 801c892:	920d      	str	r2, [sp, #52]	; 0x34
 801c894:	930e      	str	r3, [sp, #56]	; 0x38
 801c896:	edcd 1a00 	vstr	s3, [sp]
 801c89a:	ed8d 2a03 	vstr	s4, [sp, #12]
 801c89e:	ed8d 4a01 	vstr	s8, [sp, #4]
 801c8a2:	edcd 4a04 	vstr	s9, [sp, #16]
 801c8a6:	edcd 6a02 	vstr	s13, [sp, #8]
 801c8aa:	ed8d 7a05 	vstr	s14, [sp, #20]
 801c8ae:	ed8d 3a06 	vstr	s6, [sp, #24]
 801c8b2:	ed8d 5a07 	vstr	s10, [sp, #28]
 801c8b6:	edcd 5a08 	vstr	s11, [sp, #32]
 801c8ba:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 801c8be:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801c8c2:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 801c8c6:	940b      	str	r4, [sp, #44]	; 0x2c
 801c8c8:	f000 f8d2 	bl	801ca70 <nema_mat3x3_adj>
 801c8cc:	a909      	add	r1, sp, #36	; 0x24
 801c8ce:	4668      	mov	r0, sp
 801c8d0:	f000 f838 	bl	801c944 <nema_mat3x3_mul>
 801c8d4:	4668      	mov	r0, sp
 801c8d6:	f000 fae7 	bl	801cea8 <nema_set_matrix>
 801c8da:	b012      	add	sp, #72	; 0x48
 801c8dc:	bd70      	pop	{r4, r5, r6, pc}
 801c8de:	eddf 7a09 	vldr	s15, [pc, #36]	; 801c904 <nema_interpolate_tx_ty+0x110>
 801c8e2:	eef4 3ae7 	vcmpe.f32	s7, s15
 801c8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8ea:	da8f      	bge.n	801c80c <nema_interpolate_tx_ty+0x18>
 801c8ec:	e7a2      	b.n	801c834 <nema_interpolate_tx_ty+0x40>
 801c8ee:	eddf 7a05 	vldr	s15, [pc, #20]	; 801c904 <nema_interpolate_tx_ty+0x110>
 801c8f2:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801c8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8fa:	da87      	bge.n	801c80c <nema_interpolate_tx_ty+0x18>
 801c8fc:	e7a6      	b.n	801c84c <nema_interpolate_tx_ty+0x58>
 801c8fe:	bf00      	nop
 801c900:	3727c5ac 	.word	0x3727c5ac
 801c904:	b727c5ac 	.word	0xb727c5ac

0801c908 <nema_f2fx>:
 801c908:	eddf 7a06 	vldr	s15, [pc, #24]	; 801c924 <nema_f2fx+0x1c>
 801c90c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801c910:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c914:	ee30 0a07 	vadd.f32	s0, s0, s14
 801c918:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801c91c:	ee17 0a90 	vmov	r0, s15
 801c920:	4770      	bx	lr
 801c922:	bf00      	nop
 801c924:	47800000 	.word	0x47800000

0801c928 <nema_mat3x3_load_identity>:
 801c928:	2300      	movs	r3, #0
 801c92a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801c92e:	61c3      	str	r3, [r0, #28]
 801c930:	6202      	str	r2, [r0, #32]
 801c932:	6102      	str	r2, [r0, #16]
 801c934:	6002      	str	r2, [r0, #0]
 801c936:	6183      	str	r3, [r0, #24]
 801c938:	6143      	str	r3, [r0, #20]
 801c93a:	60c3      	str	r3, [r0, #12]
 801c93c:	6083      	str	r3, [r0, #8]
 801c93e:	6043      	str	r3, [r0, #4]
 801c940:	4770      	bx	lr
 801c942:	bf00      	nop

0801c944 <nema_mat3x3_mul>:
 801c944:	edd1 4a01 	vldr	s9, [r1, #4]
 801c948:	ed91 0a04 	vldr	s0, [r1, #16]
 801c94c:	edd1 0a05 	vldr	s1, [r1, #20]
 801c950:	ed2d 8b0c 	vpush	{d8-d13}
 801c954:	ed91 6a00 	vldr	s12, [r1]
 801c958:	ed91 4a03 	vldr	s8, [r1, #12]
 801c95c:	ed91 aa02 	vldr	s20, [r1, #8]
 801c960:	edd0 3a03 	vldr	s7, [r0, #12]
 801c964:	ed90 8a04 	vldr	s16, [r0, #16]
 801c968:	ed90 9a00 	vldr	s18, [r0]
 801c96c:	edd0 8a01 	vldr	s17, [r0, #4]
 801c970:	edd0 9a06 	vldr	s19, [r0, #24]
 801c974:	ed90 1a07 	vldr	s2, [r0, #28]
 801c978:	edd1 aa06 	vldr	s21, [r1, #24]
 801c97c:	edd1 6a07 	vldr	s13, [r1, #28]
 801c980:	ed91 7a08 	vldr	s14, [r1, #32]
 801c984:	ed90 5a02 	vldr	s10, [r0, #8]
 801c988:	edd0 5a05 	vldr	s11, [r0, #20]
 801c98c:	ee69 da06 	vmul.f32	s27, s18, s12
 801c990:	ee29 da24 	vmul.f32	s26, s18, s9
 801c994:	ee66 ca23 	vmul.f32	s25, s12, s7
 801c998:	ee24 caa3 	vmul.f32	s24, s9, s7
 801c99c:	ee68 1a84 	vmul.f32	s3, s17, s8
 801c9a0:	ee29 9a0a 	vmul.f32	s18, s18, s20
 801c9a4:	ee28 2a80 	vmul.f32	s4, s17, s0
 801c9a8:	ee26 6a29 	vmul.f32	s12, s12, s19
 801c9ac:	ee64 2a08 	vmul.f32	s5, s8, s16
 801c9b0:	ee6a ba23 	vmul.f32	s23, s20, s7
 801c9b4:	ee24 baa9 	vmul.f32	s22, s9, s19
 801c9b8:	ee20 3a08 	vmul.f32	s6, s0, s16
 801c9bc:	ee60 3a88 	vmul.f32	s7, s1, s16
 801c9c0:	ee60 4a01 	vmul.f32	s9, s0, s2
 801c9c4:	ee68 8aa0 	vmul.f32	s17, s17, s1
 801c9c8:	ee24 4a01 	vmul.f32	s8, s8, s2
 801c9cc:	ee6a 7a29 	vmul.f32	s15, s20, s19
 801c9d0:	ee20 1a81 	vmul.f32	s2, s1, s2
 801c9d4:	edd0 0a08 	vldr	s1, [r0, #32]
 801c9d8:	ee25 0a2a 	vmul.f32	s0, s10, s21
 801c9dc:	ee79 8a28 	vadd.f32	s17, s18, s17
 801c9e0:	ee2a 8aa5 	vmul.f32	s16, s21, s11
 801c9e4:	ee25 9a26 	vmul.f32	s18, s10, s13
 801c9e8:	ee7d 1aa1 	vadd.f32	s3, s27, s3
 801c9ec:	ee3d 2a02 	vadd.f32	s4, s26, s4
 801c9f0:	ee7c 2aa2 	vadd.f32	s5, s25, s5
 801c9f4:	ee3c 3a03 	vadd.f32	s6, s24, s6
 801c9f8:	ee7b 3aa3 	vadd.f32	s7, s23, s7
 801c9fc:	ee36 4a04 	vadd.f32	s8, s12, s8
 801ca00:	ee7b 4a24 	vadd.f32	s9, s22, s9
 801ca04:	ee77 7a81 	vadd.f32	s15, s15, s2
 801ca08:	ee25 5a07 	vmul.f32	s10, s10, s14
 801ca0c:	ee26 1aa5 	vmul.f32	s2, s13, s11
 801ca10:	ee2a 6aa0 	vmul.f32	s12, s21, s1
 801ca14:	ee67 5a25 	vmul.f32	s11, s14, s11
 801ca18:	ee66 6aa0 	vmul.f32	s13, s13, s1
 801ca1c:	ee27 7a20 	vmul.f32	s14, s14, s1
 801ca20:	ee32 2a09 	vadd.f32	s4, s4, s18
 801ca24:	ee38 5a85 	vadd.f32	s10, s17, s10
 801ca28:	ee72 2a88 	vadd.f32	s5, s5, s16
 801ca2c:	ee71 1a80 	vadd.f32	s3, s3, s0
 801ca30:	ee33 3a01 	vadd.f32	s6, s6, s2
 801ca34:	ee73 5aa5 	vadd.f32	s11, s7, s11
 801ca38:	ee34 6a06 	vadd.f32	s12, s8, s12
 801ca3c:	ee74 6aa6 	vadd.f32	s13, s9, s13
 801ca40:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ca44:	edc0 1a00 	vstr	s3, [r0]
 801ca48:	ed80 2a01 	vstr	s4, [r0, #4]
 801ca4c:	ed80 5a02 	vstr	s10, [r0, #8]
 801ca50:	edc0 2a03 	vstr	s5, [r0, #12]
 801ca54:	ed80 3a04 	vstr	s6, [r0, #16]
 801ca58:	edc0 5a05 	vstr	s11, [r0, #20]
 801ca5c:	ed80 6a06 	vstr	s12, [r0, #24]
 801ca60:	edc0 6a07 	vstr	s13, [r0, #28]
 801ca64:	edc0 7a08 	vstr	s15, [r0, #32]
 801ca68:	ecbd 8b0c 	vpop	{d8-d13}
 801ca6c:	4770      	bx	lr
 801ca6e:	bf00      	nop

0801ca70 <nema_mat3x3_adj>:
 801ca70:	edd0 3a03 	vldr	s7, [r0, #12]
 801ca74:	edd0 4a04 	vldr	s9, [r0, #16]
 801ca78:	ed90 6a08 	vldr	s12, [r0, #32]
 801ca7c:	ed90 5a07 	vldr	s10, [r0, #28]
 801ca80:	ed90 4a05 	vldr	s8, [r0, #20]
 801ca84:	edd0 7a00 	vldr	s15, [r0]
 801ca88:	edd0 6a02 	vldr	s13, [r0, #8]
 801ca8c:	edd0 5a01 	vldr	s11, [r0, #4]
 801ca90:	ed90 7a06 	vldr	s14, [r0, #24]
 801ca94:	ed2d 8b04 	vpush	{d8-d9}
 801ca98:	ee24 1a86 	vmul.f32	s2, s9, s12
 801ca9c:	ee25 9a04 	vmul.f32	s18, s10, s8
 801caa0:	ee66 8a25 	vmul.f32	s17, s12, s11
 801caa4:	ee24 8aa6 	vmul.f32	s16, s9, s13
 801caa8:	ee65 1a26 	vmul.f32	s3, s10, s13
 801caac:	ee24 2a25 	vmul.f32	s4, s8, s11
 801cab0:	ee64 2a07 	vmul.f32	s5, s8, s14
 801cab4:	ee66 0a87 	vmul.f32	s1, s13, s14
 801cab8:	ee25 3a23 	vmul.f32	s6, s10, s7
 801cabc:	ee24 4a27 	vmul.f32	s8, s8, s15
 801cac0:	ee26 0a23 	vmul.f32	s0, s12, s7
 801cac4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801cac8:	ee26 6a27 	vmul.f32	s12, s12, s15
 801cacc:	ee25 5a27 	vmul.f32	s10, s10, s15
 801cad0:	ee64 7aa7 	vmul.f32	s15, s9, s15
 801cad4:	ee64 4a87 	vmul.f32	s9, s9, s14
 801cad8:	ee25 7a87 	vmul.f32	s14, s11, s14
 801cadc:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801cae0:	ee31 1a49 	vsub.f32	s2, s2, s18
 801cae4:	ee71 1ae8 	vsub.f32	s3, s3, s17
 801cae8:	ee32 2a48 	vsub.f32	s4, s4, s16
 801caec:	ecbd 8b04 	vpop	{d8-d9}
 801caf0:	ee72 3ac0 	vsub.f32	s7, s5, s0
 801caf4:	ee36 6a60 	vsub.f32	s12, s12, s1
 801caf8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 801cafc:	ee73 4a64 	vsub.f32	s9, s6, s9
 801cb00:	ee37 7a45 	vsub.f32	s14, s14, s10
 801cb04:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801cb08:	ed80 1a00 	vstr	s2, [r0]
 801cb0c:	edc0 1a01 	vstr	s3, [r0, #4]
 801cb10:	ed80 2a02 	vstr	s4, [r0, #8]
 801cb14:	edc0 3a03 	vstr	s7, [r0, #12]
 801cb18:	ed80 6a04 	vstr	s12, [r0, #16]
 801cb1c:	edc0 6a05 	vstr	s13, [r0, #20]
 801cb20:	edc0 4a06 	vstr	s9, [r0, #24]
 801cb24:	ed80 7a07 	vstr	s14, [r0, #28]
 801cb28:	edc0 7a08 	vstr	s15, [r0, #32]
 801cb2c:	4770      	bx	lr
 801cb2e:	bf00      	nop

0801cb30 <nema_mat3x3_quad_to_rect>:
 801cb30:	ee70 6a41 	vsub.f32	s13, s0, s2
 801cb34:	ee76 6a82 	vadd.f32	s13, s13, s4
 801cb38:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801cb3c:	ee30 6ae1 	vsub.f32	s12, s1, s3
 801cb40:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801cb44:	ee36 6a22 	vadd.f32	s12, s12, s5
 801cb48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb4c:	ed2d 8b06 	vpush	{d8-d10}
 801cb50:	ee36 6a63 	vsub.f32	s12, s12, s7
 801cb54:	ee09 0a10 	vmov	s18, r0
 801cb58:	ee08 1a90 	vmov	s17, r1
 801cb5c:	f100 812e 	bmi.w	801cdbc <nema_mat3x3_quad_to_rect+0x28c>
 801cb60:	eddf 7aa4 	vldr	s15, [pc, #656]	; 801cdf4 <nema_mat3x3_quad_to_rect+0x2c4>
 801cb64:	eef4 6ae7 	vcmpe.f32	s13, s15
 801cb68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb6c:	d80d      	bhi.n	801cb8a <nema_mat3x3_quad_to_rect+0x5a>
 801cb6e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801cb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb76:	f100 80f7 	bmi.w	801cd68 <nema_mat3x3_quad_to_rect+0x238>
 801cb7a:	eddf 7a9e 	vldr	s15, [pc, #632]	; 801cdf4 <nema_mat3x3_quad_to_rect+0x2c4>
 801cb7e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801cb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb86:	f240 80f7 	bls.w	801cd78 <nema_mat3x3_quad_to_rect+0x248>
 801cb8a:	ee31 7a42 	vsub.f32	s14, s2, s4
 801cb8e:	ee73 7ae2 	vsub.f32	s15, s7, s5
 801cb92:	ee33 2a42 	vsub.f32	s4, s6, s4
 801cb96:	ee71 2ae2 	vsub.f32	s5, s3, s5
 801cb9a:	ee67 5a27 	vmul.f32	s11, s14, s15
 801cb9e:	ee22 5a22 	vmul.f32	s10, s4, s5
 801cba2:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801cba6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801cbaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801cbae:	ee26 7a07 	vmul.f32	s14, s12, s14
 801cbb2:	ee66 6aa2 	vmul.f32	s13, s13, s5
 801cbb6:	ee26 6a02 	vmul.f32	s12, s12, s4
 801cbba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbbe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801cbc2:	ee77 6a66 	vsub.f32	s13, s14, s13
 801cbc6:	f100 80c5 	bmi.w	801cd54 <nema_mat3x3_quad_to_rect+0x224>
 801cbca:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801cdf4 <nema_mat3x3_quad_to_rect+0x2c4>
 801cbce:	eef4 5ac7 	vcmpe.f32	s11, s14
 801cbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbd6:	bf94      	ite	ls
 801cbd8:	2301      	movls	r3, #1
 801cbda:	2300      	movhi	r3, #0
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	f040 8106 	bne.w	801cdee <nema_mat3x3_quad_to_rect+0x2be>
 801cbe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cbe6:	ee87 6a25 	vdiv.f32	s12, s14, s11
 801cbea:	ee67 7a86 	vmul.f32	s15, s15, s12
 801cbee:	ee66 6a86 	vmul.f32	s13, s13, s12
 801cbf2:	ee21 5a27 	vmul.f32	s10, s2, s15
 801cbf6:	ee61 5aa7 	vmul.f32	s11, s3, s15
 801cbfa:	ee63 2aa6 	vmul.f32	s5, s7, s13
 801cbfe:	ee31 1a40 	vsub.f32	s2, s2, s0
 801cc02:	ee23 6a26 	vmul.f32	s12, s6, s13
 801cc06:	ee33 2a40 	vsub.f32	s4, s6, s0
 801cc0a:	ee71 1ae0 	vsub.f32	s3, s3, s1
 801cc0e:	ee73 3ae0 	vsub.f32	s7, s7, s1
 801cc12:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cc16:	ee32 2a06 	vadd.f32	s4, s4, s12
 801cc1a:	ee71 1aa5 	vadd.f32	s3, s3, s11
 801cc1e:	ee73 2aa2 	vadd.f32	s5, s7, s5
 801cc22:	ed82 0a02 	vstr	s0, [r2, #8]
 801cc26:	edc2 0a05 	vstr	s1, [r2, #20]
 801cc2a:	edc2 7a06 	vstr	s15, [r2, #24]
 801cc2e:	edc2 6a07 	vstr	s13, [r2, #28]
 801cc32:	ed82 7a08 	vstr	s14, [r2, #32]
 801cc36:	ed82 1a00 	vstr	s2, [r2]
 801cc3a:	ed82 2a01 	vstr	s4, [r2, #4]
 801cc3e:	edc2 1a03 	vstr	s3, [r2, #12]
 801cc42:	edc2 2a04 	vstr	s5, [r2, #16]
 801cc46:	ee20 4aa6 	vmul.f32	s8, s1, s13
 801cc4a:	ee60 5aa7 	vmul.f32	s11, s1, s15
 801cc4e:	ee32 3ac4 	vsub.f32	s6, s5, s8
 801cc52:	ee31 7ae5 	vsub.f32	s14, s3, s11
 801cc56:	ee21 8aa6 	vmul.f32	s16, s3, s13
 801cc5a:	ee22 6aa7 	vmul.f32	s12, s5, s15
 801cc5e:	ee27 7a02 	vmul.f32	s14, s14, s4
 801cc62:	ee23 4a01 	vmul.f32	s8, s6, s2
 801cc66:	ee38 8a46 	vsub.f32	s16, s16, s12
 801cc6a:	ee34 4a47 	vsub.f32	s8, s8, s14
 801cc6e:	ee20 7a08 	vmul.f32	s14, s0, s16
 801cc72:	ee34 4a07 	vadd.f32	s8, s8, s14
 801cc76:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 801cc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc7e:	f100 80ac 	bmi.w	801cdda <nema_mat3x3_quad_to_rect+0x2aa>
 801cc82:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 801cdf4 <nema_mat3x3_quad_to_rect+0x2c4>
 801cc86:	eeb4 4ac7 	vcmpe.f32	s8, s14
 801cc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc8e:	bf94      	ite	ls
 801cc90:	2001      	movls	r0, #1
 801cc92:	2000      	movhi	r0, #0
 801cc94:	2800      	cmp	r0, #0
 801cc96:	f040 80aa 	bne.w	801cdee <nema_mat3x3_quad_to_rect+0x2be>
 801cc9a:	ee20 5a82 	vmul.f32	s10, s1, s4
 801cc9e:	ee60 4a26 	vmul.f32	s9, s0, s13
 801cca2:	ee20 6a27 	vmul.f32	s12, s0, s15
 801cca6:	ee60 9a22 	vmul.f32	s19, s0, s5
 801ccaa:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 801ccae:	ee60 0a81 	vmul.f32	s1, s1, s2
 801ccb2:	ee20 7a21 	vmul.f32	s14, s0, s3
 801ccb6:	eeca 3a04 	vdiv.f32	s7, s20, s8
 801ccba:	ee74 4ac2 	vsub.f32	s9, s9, s4
 801ccbe:	ee61 6a26 	vmul.f32	s13, s2, s13
 801ccc2:	ee67 7a82 	vmul.f32	s15, s15, s4
 801ccc6:	ee35 5a69 	vsub.f32	s10, s10, s19
 801ccca:	ee75 5ae1 	vsub.f32	s11, s11, s3
 801ccce:	ee31 6a46 	vsub.f32	s12, s2, s12
 801ccd2:	ee62 2a81 	vmul.f32	s5, s5, s2
 801ccd6:	ee37 7a60 	vsub.f32	s14, s14, s1
 801ccda:	ee21 2a82 	vmul.f32	s4, s3, s4
 801ccde:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801cce2:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801cce6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ccea:	ee23 4a23 	vmul.f32	s8, s6, s7
 801ccee:	ee65 6a23 	vmul.f32	s13, s10, s7
 801ccf2:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801ccf6:	ee64 4aa3 	vmul.f32	s9, s9, s7
 801ccfa:	ee26 6a23 	vmul.f32	s12, s12, s7
 801ccfe:	ee27 7a23 	vmul.f32	s14, s14, s7
 801cd02:	ee72 2ac2 	vsub.f32	s5, s5, s4
 801cd06:	ee24 4a09 	vmul.f32	s8, s8, s18
 801cd0a:	ee65 5aa8 	vmul.f32	s11, s11, s17
 801cd0e:	ee28 8a23 	vmul.f32	s16, s16, s7
 801cd12:	ee24 5a89 	vmul.f32	s10, s9, s18
 801cd16:	ee26 6a28 	vmul.f32	s12, s12, s17
 801cd1a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801cd1e:	ee66 6a89 	vmul.f32	s13, s13, s18
 801cd22:	ee27 7a28 	vmul.f32	s14, s14, s17
 801cd26:	ee62 2aa3 	vmul.f32	s5, s5, s7
 801cd2a:	ed82 4a00 	vstr	s8, [r2]
 801cd2e:	edc2 5a03 	vstr	s11, [r2, #12]
 801cd32:	ed82 8a06 	vstr	s16, [r2, #24]
 801cd36:	ed82 5a01 	vstr	s10, [r2, #4]
 801cd3a:	ed82 6a04 	vstr	s12, [r2, #16]
 801cd3e:	edc2 7a07 	vstr	s15, [r2, #28]
 801cd42:	edc2 6a02 	vstr	s13, [r2, #8]
 801cd46:	ed82 7a05 	vstr	s14, [r2, #20]
 801cd4a:	edc2 2a08 	vstr	s5, [r2, #32]
 801cd4e:	ecbd 8b06 	vpop	{d8-d10}
 801cd52:	4770      	bx	lr
 801cd54:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801cdf8 <nema_mat3x3_quad_to_rect+0x2c8>
 801cd58:	eef4 5ac7 	vcmpe.f32	s11, s14
 801cd5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd60:	bfac      	ite	ge
 801cd62:	2301      	movge	r3, #1
 801cd64:	2300      	movlt	r3, #0
 801cd66:	e739      	b.n	801cbdc <nema_mat3x3_quad_to_rect+0xac>
 801cd68:	eddf 7a23 	vldr	s15, [pc, #140]	; 801cdf8 <nema_mat3x3_quad_to_rect+0x2c8>
 801cd6c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801cd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd74:	f6ff af09 	blt.w	801cb8a <nema_mat3x3_quad_to_rect+0x5a>
 801cd78:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801cdfc <nema_mat3x3_quad_to_rect+0x2cc>
 801cd7c:	ee32 2a41 	vsub.f32	s4, s4, s2
 801cd80:	ee72 2ae1 	vsub.f32	s5, s5, s3
 801cd84:	ee31 1a40 	vsub.f32	s2, s2, s0
 801cd88:	ee71 1ae0 	vsub.f32	s3, s3, s1
 801cd8c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801cd90:	eef0 7a47 	vmov.f32	s15, s14
 801cd94:	ed82 2a01 	vstr	s4, [r2, #4]
 801cd98:	ed82 1a00 	vstr	s2, [r2]
 801cd9c:	edc2 2a04 	vstr	s5, [r2, #16]
 801cda0:	edc2 1a03 	vstr	s3, [r2, #12]
 801cda4:	ed82 0a02 	vstr	s0, [r2, #8]
 801cda8:	edc2 0a05 	vstr	s1, [r2, #20]
 801cdac:	ed82 7a06 	vstr	s14, [r2, #24]
 801cdb0:	ed82 7a07 	vstr	s14, [r2, #28]
 801cdb4:	eef0 6a47 	vmov.f32	s13, s14
 801cdb8:	6213      	str	r3, [r2, #32]
 801cdba:	e744      	b.n	801cc46 <nema_mat3x3_quad_to_rect+0x116>
 801cdbc:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801cdf8 <nema_mat3x3_quad_to_rect+0x2c8>
 801cdc0:	eef4 6ae7 	vcmpe.f32	s13, s15
 801cdc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdc8:	f6ff aedf 	blt.w	801cb8a <nema_mat3x3_quad_to_rect+0x5a>
 801cdcc:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801cdd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdd4:	f57f aed1 	bpl.w	801cb7a <nema_mat3x3_quad_to_rect+0x4a>
 801cdd8:	e7c6      	b.n	801cd68 <nema_mat3x3_quad_to_rect+0x238>
 801cdda:	ed9f 7a07 	vldr	s14, [pc, #28]	; 801cdf8 <nema_mat3x3_quad_to_rect+0x2c8>
 801cdde:	eeb4 4ac7 	vcmpe.f32	s8, s14
 801cde2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cde6:	bfac      	ite	ge
 801cde8:	2001      	movge	r0, #1
 801cdea:	2000      	movlt	r0, #0
 801cdec:	e752      	b.n	801cc94 <nema_mat3x3_quad_to_rect+0x164>
 801cdee:	f04f 30ff 	mov.w	r0, #4294967295
 801cdf2:	e7ac      	b.n	801cd4e <nema_mat3x3_quad_to_rect+0x21e>
 801cdf4:	3727c5ac 	.word	0x3727c5ac
 801cdf8:	b727c5ac 	.word	0xb727c5ac
 801cdfc:	00000000 	.word	0x00000000

0801ce00 <nema_readHwConfig>:
 801ce00:	b510      	push	{r4, lr}
 801ce02:	4c05      	ldr	r4, [pc, #20]	; (801ce18 <nema_readHwConfig+0x18>)
 801ce04:	6820      	ldr	r0, [r4, #0]
 801ce06:	b100      	cbz	r0, 801ce0a <nema_readHwConfig+0xa>
 801ce08:	bd10      	pop	{r4, pc}
 801ce0a:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 801ce0e:	f7e6 fad1 	bl	80033b4 <nema_reg_read>
 801ce12:	6020      	str	r0, [r4, #0]
 801ce14:	bd10      	pop	{r4, pc}
 801ce16:	bf00      	nop
 801ce18:	20198598 	.word	0x20198598

0801ce1c <nema_readHwConfigH>:
 801ce1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801ce20:	f7e6 bac8 	b.w	80033b4 <nema_reg_read>

0801ce24 <nema_enable_tiling>:
 801ce24:	2800      	cmp	r0, #0
 801ce26:	bf14      	ite	ne
 801ce28:	f04f 4080 	movne.w	r0, #1073741824	; 0x40000000
 801ce2c:	2000      	moveq	r0, #0
 801ce2e:	b410      	push	{r4}
 801ce30:	4a05      	ldr	r2, [pc, #20]	; (801ce48 <nema_enable_tiling+0x24>)
 801ce32:	6951      	ldr	r1, [r2, #20]
 801ce34:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
 801ce38:	4323      	orrs	r3, r4
 801ce3a:	430b      	orrs	r3, r1
 801ce3c:	4303      	orrs	r3, r0
 801ce3e:	6050      	str	r0, [r2, #4]
 801ce40:	6113      	str	r3, [r2, #16]
 801ce42:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce46:	4770      	bx	lr
 801ce48:	20198934 	.word	0x20198934

0801ce4c <nema_enable_aa>:
 801ce4c:	2800      	cmp	r0, #0
 801ce4e:	b410      	push	{r4}
 801ce50:	bf19      	ittee	ne
 801ce52:	f04f 6080 	movne.w	r0, #67108864	; 0x4000000
 801ce56:	f04f 64c0 	movne.w	r4, #100663296	; 0x6000000
 801ce5a:	f04f 7400 	moveq.w	r4, #33554432	; 0x2000000
 801ce5e:	2000      	moveq	r0, #0
 801ce60:	2900      	cmp	r1, #0
 801ce62:	bf08      	it	eq
 801ce64:	4604      	moveq	r4, r0
 801ce66:	b10a      	cbz	r2, 801ce6c <nema_enable_aa+0x20>
 801ce68:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 801ce6c:	b10b      	cbz	r3, 801ce72 <nema_enable_aa+0x26>
 801ce6e:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 801ce72:	4a06      	ldr	r2, [pc, #24]	; (801ce8c <nema_enable_aa+0x40>)
 801ce74:	6853      	ldr	r3, [r2, #4]
 801ce76:	e9d2 1002 	ldrd	r1, r0, [r2, #8]
 801ce7a:	4303      	orrs	r3, r0
 801ce7c:	430b      	orrs	r3, r1
 801ce7e:	4323      	orrs	r3, r4
 801ce80:	6950      	ldr	r0, [r2, #20]
 801ce82:	e9c2 3404 	strd	r3, r4, [r2, #16]
 801ce86:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce8a:	4770      	bx	lr
 801ce8c:	20198934 	.word	0x20198934

0801ce90 <nema_matmul_bypass>:
 801ce90:	b920      	cbnz	r0, 801ce9c <nema_matmul_bypass+0xc>
 801ce92:	4601      	mov	r1, r0
 801ce94:	f44f 708c 	mov.w	r0, #280	; 0x118
 801ce98:	f000 be84 	b.w	801dba4 <nema_cl_add_cmd>
 801ce9c:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
 801cea0:	f44f 708c 	mov.w	r0, #280	; 0x118
 801cea4:	f000 be7e 	b.w	801dba4 <nema_cl_add_cmd>

0801cea8 <nema_set_matrix>:
 801cea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ceac:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801d014 <nema_set_matrix+0x16c>
 801ceb0:	edd0 7a06 	vldr	s15, [r0, #24]
 801ceb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ceb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cebc:	4604      	mov	r4, r0
 801cebe:	d506      	bpl.n	801cece <nema_set_matrix+0x26>
 801cec0:	eddf 6a55 	vldr	s13, [pc, #340]	; 801d018 <nema_set_matrix+0x170>
 801cec4:	eef4 7ae6 	vcmpe.f32	s15, s13
 801cec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cecc:	dc47      	bgt.n	801cf5e <nema_set_matrix+0xb6>
 801cece:	2009      	movs	r0, #9
 801ced0:	f000 fe0a 	bl	801dae8 <nema_cl_get_space>
 801ced4:	2800      	cmp	r0, #0
 801ced6:	d040      	beq.n	801cf5a <nema_set_matrix+0xb2>
 801ced8:	f44f 73ba 	mov.w	r3, #372	; 0x174
 801cedc:	6003      	str	r3, [r0, #0]
 801cede:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801cee2:	6962      	ldr	r2, [r4, #20]
 801cee4:	6083      	str	r3, [r0, #8]
 801cee6:	f44f 73bc 	mov.w	r3, #376	; 0x178
 801ceea:	6042      	str	r2, [r0, #4]
 801ceec:	68a2      	ldr	r2, [r4, #8]
 801ceee:	6103      	str	r3, [r0, #16]
 801cef0:	f44f 73be 	mov.w	r3, #380	; 0x17c
 801cef4:	60c2      	str	r2, [r0, #12]
 801cef6:	69a2      	ldr	r2, [r4, #24]
 801cef8:	6183      	str	r3, [r0, #24]
 801cefa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801cefe:	6142      	str	r2, [r0, #20]
 801cf00:	69e2      	ldr	r2, [r4, #28]
 801cf02:	6203      	str	r3, [r0, #32]
 801cf04:	61c2      	str	r2, [r0, #28]
 801cf06:	6a23      	ldr	r3, [r4, #32]
 801cf08:	2544      	movs	r5, #68	; 0x44
 801cf0a:	6243      	str	r3, [r0, #36]	; 0x24
 801cf0c:	2640      	movs	r6, #64	; 0x40
 801cf0e:	233c      	movs	r3, #60	; 0x3c
 801cf10:	2738      	movs	r7, #56	; 0x38
 801cf12:	2234      	movs	r2, #52	; 0x34
 801cf14:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801cf18:	212c      	movs	r1, #44	; 0x2c
 801cf1a:	f04f 0e28 	mov.w	lr, #40	; 0x28
 801cf1e:	f44f 78b0 	mov.w	r8, #352	; 0x160
 801cf22:	f840 800e 	str.w	r8, [r0, lr]
 801cf26:	f44f 7eb2 	mov.w	lr, #356	; 0x164
 801cf2a:	f8d4 8000 	ldr.w	r8, [r4]
 801cf2e:	4401      	add	r1, r0
 801cf30:	f8c1 8000 	str.w	r8, [r1]
 801cf34:	f840 e00c 	str.w	lr, [r0, ip]
 801cf38:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 801cf3c:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801cf40:	4402      	add	r2, r0
 801cf42:	f8c2 c000 	str.w	ip, [r2]
 801cf46:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801cf4a:	51c1      	str	r1, [r0, r7]
 801cf4c:	68e1      	ldr	r1, [r4, #12]
 801cf4e:	4403      	add	r3, r0
 801cf50:	6019      	str	r1, [r3, #0]
 801cf52:	5182      	str	r2, [r0, r6]
 801cf54:	6923      	ldr	r3, [r4, #16]
 801cf56:	4428      	add	r0, r5
 801cf58:	6003      	str	r3, [r0, #0]
 801cf5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf5e:	ed90 6a07 	vldr	s12, [r0, #28]
 801cf62:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801cf66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf6a:	d5b0      	bpl.n	801cece <nema_set_matrix+0x26>
 801cf6c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801cf70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf74:	ddab      	ble.n	801cece <nema_set_matrix+0x26>
 801cf76:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801cf7a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801cf7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801cf82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf86:	d43f      	bmi.n	801d008 <nema_set_matrix+0x160>
 801cf88:	edd4 7a08 	vldr	s15, [r4, #32]
 801cf8c:	ed94 5a00 	vldr	s10, [r4]
 801cf90:	edd4 5a01 	vldr	s11, [r4, #4]
 801cf94:	ed94 6a02 	vldr	s12, [r4, #8]
 801cf98:	edd4 6a03 	vldr	s13, [r4, #12]
 801cf9c:	ed94 7a04 	vldr	s14, [r4, #16]
 801cfa0:	ed94 4a05 	vldr	s8, [r4, #20]
 801cfa4:	eec5 4a27 	vdiv.f32	s9, s10, s15
 801cfa8:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 801cfac:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801cfb0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801cfb4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801cfb8:	ee84 7a27 	vdiv.f32	s14, s8, s15
 801cfbc:	edc4 4a00 	vstr	s9, [r4]
 801cfc0:	ed84 5a01 	vstr	s10, [r4, #4]
 801cfc4:	edc4 5a02 	vstr	s11, [r4, #8]
 801cfc8:	ed84 6a03 	vstr	s12, [r4, #12]
 801cfcc:	edc4 6a04 	vstr	s13, [r4, #16]
 801cfd0:	ed84 7a05 	vstr	s14, [r4, #20]
 801cfd4:	2006      	movs	r0, #6
 801cfd6:	f000 fd87 	bl	801dae8 <nema_cl_get_space>
 801cfda:	2800      	cmp	r0, #0
 801cfdc:	d0bd      	beq.n	801cf5a <nema_set_matrix+0xb2>
 801cfde:	f44f 73ba 	mov.w	r3, #372	; 0x174
 801cfe2:	6003      	str	r3, [r0, #0]
 801cfe4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801cfe8:	6962      	ldr	r2, [r4, #20]
 801cfea:	6083      	str	r3, [r0, #8]
 801cfec:	6042      	str	r2, [r0, #4]
 801cfee:	68a3      	ldr	r3, [r4, #8]
 801cff0:	252c      	movs	r5, #44	; 0x2c
 801cff2:	60c3      	str	r3, [r0, #12]
 801cff4:	2628      	movs	r6, #40	; 0x28
 801cff6:	2324      	movs	r3, #36	; 0x24
 801cff8:	2720      	movs	r7, #32
 801cffa:	221c      	movs	r2, #28
 801cffc:	f04f 0c18 	mov.w	ip, #24
 801d000:	2114      	movs	r1, #20
 801d002:	f04f 0e10 	mov.w	lr, #16
 801d006:	e78a      	b.n	801cf1e <nema_set_matrix+0x76>
 801d008:	eef4 7ae6 	vcmpe.f32	s15, s13
 801d00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d010:	dce0      	bgt.n	801cfd4 <nema_set_matrix+0x12c>
 801d012:	e7b9      	b.n	801cf88 <nema_set_matrix+0xe0>
 801d014:	33d6bf95 	.word	0x33d6bf95
 801d018:	b3d6bf95 	.word	0xb3d6bf95

0801d01c <nema_set_matrix_translate>:
 801d01c:	b508      	push	{r3, lr}
 801d01e:	2002      	movs	r0, #2
 801d020:	ed2d 8b02 	vpush	{d8}
 801d024:	eeb0 8a40 	vmov.f32	s16, s0
 801d028:	eef0 8a60 	vmov.f32	s17, s1
 801d02c:	f000 fd5c 	bl	801dae8 <nema_cl_get_space>
 801d030:	b1c8      	cbz	r0, 801d066 <nema_set_matrix_translate+0x4a>
 801d032:	eddf 7a13 	vldr	s15, [pc, #76]	; 801d080 <nema_set_matrix_translate+0x64>
 801d036:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d03a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801d03e:	eef1 6a68 	vneg.f32	s13, s17
 801d042:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801d046:	eeb1 7a48 	vneg.f32	s14, s16
 801d04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d04e:	6002      	str	r2, [r0, #0]
 801d050:	edc0 6a01 	vstr	s13, [r0, #4]
 801d054:	6083      	str	r3, [r0, #8]
 801d056:	ed80 7a03 	vstr	s14, [r0, #12]
 801d05a:	dc07      	bgt.n	801d06c <nema_set_matrix_translate+0x50>
 801d05c:	eef4 8ae7 	vcmpe.f32	s17, s15
 801d060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d064:	dc02      	bgt.n	801d06c <nema_set_matrix_translate+0x50>
 801d066:	ecbd 8b02 	vpop	{d8}
 801d06a:	bd08      	pop	{r3, pc}
 801d06c:	ecbd 8b02 	vpop	{d8}
 801d070:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801d074:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801d078:	f44f 708c 	mov.w	r0, #280	; 0x118
 801d07c:	f000 bd92 	b.w	801dba4 <nema_cl_add_cmd>
 801d080:	45000000 	.word	0x45000000

0801d084 <nema_load_frag_shader>:
 801d084:	b570      	push	{r4, r5, r6, lr}
 801d086:	460e      	mov	r6, r1
 801d088:	4604      	mov	r4, r0
 801d08a:	4611      	mov	r1, r2
 801d08c:	20c4      	movs	r0, #196	; 0xc4
 801d08e:	f000 fd89 	bl	801dba4 <nema_cl_add_cmd>
 801d092:	b186      	cbz	r6, 801d0b6 <nema_load_frag_shader+0x32>
 801d094:	2500      	movs	r5, #0
 801d096:	3408      	adds	r4, #8
 801d098:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801d09c:	20c8      	movs	r0, #200	; 0xc8
 801d09e:	f000 fd81 	bl	801dba4 <nema_cl_add_cmd>
 801d0a2:	3501      	adds	r5, #1
 801d0a4:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801d0a8:	20cc      	movs	r0, #204	; 0xcc
 801d0aa:	f000 fd7b 	bl	801dba4 <nema_cl_add_cmd>
 801d0ae:	42ae      	cmp	r6, r5
 801d0b0:	f104 0408 	add.w	r4, r4, #8
 801d0b4:	d1f0      	bne.n	801d098 <nema_load_frag_shader+0x14>
 801d0b6:	bd70      	pop	{r4, r5, r6, pc}

0801d0b8 <nema_set_frag_ptr>:
 801d0b8:	4601      	mov	r1, r0
 801d0ba:	f44f 708e 	mov.w	r0, #284	; 0x11c
 801d0be:	f000 bd71 	b.w	801dba4 <nema_cl_add_cmd>
 801d0c2:	bf00      	nop

0801d0c4 <nema_set_rop_blend_mode>:
 801d0c4:	4601      	mov	r1, r0
 801d0c6:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
 801d0ca:	f000 bd6b 	b.w	801dba4 <nema_cl_add_cmd>
 801d0ce:	bf00      	nop

0801d0d0 <nema_set_rop_const_color>:
 801d0d0:	4601      	mov	r1, r0
 801d0d2:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 801d0d6:	f000 bd65 	b.w	801dba4 <nema_cl_add_cmd>
 801d0da:	bf00      	nop

0801d0dc <nema_set_depth_ctrl>:
 801d0dc:	4601      	mov	r1, r0
 801d0de:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 801d0e2:	f000 bd5f 	b.w	801dba4 <nema_cl_add_cmd>
 801d0e6:	bf00      	nop

0801d0e8 <nema_set_raster_color>:
 801d0e8:	4601      	mov	r1, r0
 801d0ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801d0ee:	f000 bd59 	b.w	801dba4 <nema_cl_add_cmd>
 801d0f2:	bf00      	nop

0801d0f4 <nema_raster_triangle_fx>:
 801d0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0f8:	4607      	mov	r7, r0
 801d0fa:	2007      	movs	r0, #7
 801d0fc:	460e      	mov	r6, r1
 801d0fe:	4615      	mov	r5, r2
 801d100:	461c      	mov	r4, r3
 801d102:	f000 fcf1 	bl	801dae8 <nema_cl_get_space>
 801d106:	b350      	cbz	r0, 801d15e <nema_raster_triangle_fx+0x6a>
 801d108:	f44f 7398 	mov.w	r3, #304	; 0x130
 801d10c:	f44f 7292 	mov.w	r2, #292	; 0x124
 801d110:	f44f 7890 	mov.w	r8, #288	; 0x120
 801d114:	f44f 7e9a 	mov.w	lr, #308	; 0x134
 801d118:	f44f 7ca0 	mov.w	ip, #320	; 0x140
 801d11c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 801d120:	6103      	str	r3, [r0, #16]
 801d122:	4b10      	ldr	r3, [pc, #64]	; (801d164 <nema_raster_triangle_fx+0x70>)
 801d124:	6047      	str	r7, [r0, #4]
 801d126:	60c6      	str	r6, [r0, #12]
 801d128:	f8c0 8000 	str.w	r8, [r0]
 801d12c:	6082      	str	r2, [r0, #8]
 801d12e:	691a      	ldr	r2, [r3, #16]
 801d130:	4b0d      	ldr	r3, [pc, #52]	; (801d168 <nema_raster_triangle_fx+0x74>)
 801d132:	61c4      	str	r4, [r0, #28]
 801d134:	9c06      	ldr	r4, [sp, #24]
 801d136:	6303      	str	r3, [r0, #48]	; 0x30
 801d138:	01d3      	lsls	r3, r2, #7
 801d13a:	6244      	str	r4, [r0, #36]	; 0x24
 801d13c:	bf48      	it	mi
 801d13e:	f442 0200 	orrmi.w	r2, r2, #8388608	; 0x800000
 801d142:	9c07      	ldr	r4, [sp, #28]
 801d144:	bf58      	it	pl
 801d146:	f422 0200 	bicpl.w	r2, r2, #8388608	; 0x800000
 801d14a:	f042 0204 	orr.w	r2, r2, #4
 801d14e:	6145      	str	r5, [r0, #20]
 801d150:	62c4      	str	r4, [r0, #44]	; 0x2c
 801d152:	f8c0 e018 	str.w	lr, [r0, #24]
 801d156:	f8c0 c020 	str.w	ip, [r0, #32]
 801d15a:	6281      	str	r1, [r0, #40]	; 0x28
 801d15c:	6342      	str	r2, [r0, #52]	; 0x34
 801d15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d162:	bf00      	nop
 801d164:	20198934 	.word	0x20198934
 801d168:	ff000100 	.word	0xff000100

0801d16c <nema_raster_rect>:
 801d16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d16e:	1e17      	subs	r7, r2, #0
 801d170:	dd20      	ble.n	801d1b4 <nema_raster_rect+0x48>
 801d172:	2b00      	cmp	r3, #0
 801d174:	dd1e      	ble.n	801d1b4 <nema_raster_rect+0x48>
 801d176:	4604      	mov	r4, r0
 801d178:	2003      	movs	r0, #3
 801d17a:	461d      	mov	r5, r3
 801d17c:	460e      	mov	r6, r1
 801d17e:	f000 fcb3 	bl	801dae8 <nema_cl_get_space>
 801d182:	b1b8      	cbz	r0, 801d1b4 <nema_raster_rect+0x48>
 801d184:	f44f 7c82 	mov.w	ip, #260	; 0x104
 801d188:	f44f 7184 	mov.w	r1, #264	; 0x108
 801d18c:	193a      	adds	r2, r7, r4
 801d18e:	b292      	uxth	r2, r2
 801d190:	19ab      	adds	r3, r5, r6
 801d192:	b2a4      	uxth	r4, r4
 801d194:	4d08      	ldr	r5, [pc, #32]	; (801d1b8 <nema_raster_rect+0x4c>)
 801d196:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 801d19a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 801d19e:	4a07      	ldr	r2, [pc, #28]	; (801d1bc <nema_raster_rect+0x50>)
 801d1a0:	6044      	str	r4, [r0, #4]
 801d1a2:	60c3      	str	r3, [r0, #12]
 801d1a4:	f8c0 c000 	str.w	ip, [r0]
 801d1a8:	6081      	str	r1, [r0, #8]
 801d1aa:	6105      	str	r5, [r0, #16]
 801d1ac:	6913      	ldr	r3, [r2, #16]
 801d1ae:	f043 0302 	orr.w	r3, r3, #2
 801d1b2:	6143      	str	r3, [r0, #20]
 801d1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1b6:	bf00      	nop
 801d1b8:	ff000100 	.word	0xff000100
 801d1bc:	20198934 	.word	0x20198934

0801d1c0 <nema_raster_quad_fx>:
 801d1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d1c4:	4607      	mov	r7, r0
 801d1c6:	2009      	movs	r0, #9
 801d1c8:	460e      	mov	r6, r1
 801d1ca:	4615      	mov	r5, r2
 801d1cc:	461c      	mov	r4, r3
 801d1ce:	f000 fc8b 	bl	801dae8 <nema_cl_get_space>
 801d1d2:	2800      	cmp	r0, #0
 801d1d4:	d02f      	beq.n	801d236 <nema_raster_quad_fx+0x76>
 801d1d6:	f44f 7398 	mov.w	r3, #304	; 0x130
 801d1da:	f44f 7292 	mov.w	r2, #292	; 0x124
 801d1de:	f44f 7a90 	mov.w	sl, #288	; 0x120
 801d1e2:	f44f 799a 	mov.w	r9, #308	; 0x134
 801d1e6:	f44f 78a0 	mov.w	r8, #320	; 0x140
 801d1ea:	f44f 7ea2 	mov.w	lr, #324	; 0x144
 801d1ee:	f44f 7ca8 	mov.w	ip, #336	; 0x150
 801d1f2:	f44f 71aa 	mov.w	r1, #340	; 0x154
 801d1f6:	6103      	str	r3, [r0, #16]
 801d1f8:	4b10      	ldr	r3, [pc, #64]	; (801d23c <nema_raster_quad_fx+0x7c>)
 801d1fa:	6047      	str	r7, [r0, #4]
 801d1fc:	60c6      	str	r6, [r0, #12]
 801d1fe:	f8c0 a000 	str.w	sl, [r0]
 801d202:	6082      	str	r2, [r0, #8]
 801d204:	691a      	ldr	r2, [r3, #16]
 801d206:	9b08      	ldr	r3, [sp, #32]
 801d208:	f042 0205 	orr.w	r2, r2, #5
 801d20c:	6243      	str	r3, [r0, #36]	; 0x24
 801d20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d210:	6145      	str	r5, [r0, #20]
 801d212:	62c3      	str	r3, [r0, #44]	; 0x2c
 801d214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d216:	61c4      	str	r4, [r0, #28]
 801d218:	6343      	str	r3, [r0, #52]	; 0x34
 801d21a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d21c:	6442      	str	r2, [r0, #68]	; 0x44
 801d21e:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d220:	4b07      	ldr	r3, [pc, #28]	; (801d240 <nema_raster_quad_fx+0x80>)
 801d222:	f8c0 9018 	str.w	r9, [r0, #24]
 801d226:	f8c0 8020 	str.w	r8, [r0, #32]
 801d22a:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
 801d22e:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
 801d232:	6381      	str	r1, [r0, #56]	; 0x38
 801d234:	6403      	str	r3, [r0, #64]	; 0x40
 801d236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d23a:	bf00      	nop
 801d23c:	20198934 	.word	0x20198934
 801d240:	ff000100 	.word	0xff000100

0801d244 <nema_set_interrupt_ctrl>:
 801d244:	4601      	mov	r1, r0
 801d246:	20f8      	movs	r0, #248	; 0xf8
 801d248:	f000 bcac 	b.w	801dba4 <nema_cl_add_cmd>

0801d24c <nema_vg_init>:
 801d24c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d24e:	4606      	mov	r6, r0
 801d250:	460f      	mov	r7, r1
 801d252:	b08f      	sub	sp, #60	; 0x3c
 801d254:	ac02      	add	r4, sp, #8
 801d256:	460a      	mov	r2, r1
 801d258:	2300      	movs	r3, #0
 801d25a:	4601      	mov	r1, r0
 801d25c:	4620      	mov	r0, r4
 801d25e:	f000 f889 	bl	801d374 <stencil_buffer_create>
 801d262:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801d266:	ad0a      	add	r5, sp, #40	; 0x28
 801d268:	ac06      	add	r4, sp, #24
 801d26a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d26e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801d272:	f000 f827 	bl	801d2c4 <context_reset>
 801d276:	ab0e      	add	r3, sp, #56	; 0x38
 801d278:	e913 0003 	ldmdb	r3, {r0, r1}
 801d27c:	e895 000c 	ldmia.w	r5, {r2, r3}
 801d280:	e88d 0003 	stmia.w	sp, {r0, r1}
 801d284:	4639      	mov	r1, r7
 801d286:	4630      	mov	r0, r6
 801d288:	f000 f888 	bl	801d39c <stencil_buffer_set>
 801d28c:	f000 f8c2 	bl	801d414 <lut_buffer_create>
 801d290:	f000 f94e 	bl	801d530 <tsvg_init>
 801d294:	4639      	mov	r1, r7
 801d296:	4630      	mov	r0, r6
 801d298:	f000 f940 	bl	801d51c <set_tsvg_text_max_size>
 801d29c:	f000 f866 	bl	801d36c <nema_vg_get_context>
 801d2a0:	4c06      	ldr	r4, [pc, #24]	; (801d2bc <nema_vg_init+0x70>)
 801d2a2:	6020      	str	r0, [r4, #0]
 801d2a4:	f000 f8b0 	bl	801d408 <nema_vg_get_stencil>
 801d2a8:	6822      	ldr	r2, [r4, #0]
 801d2aa:	4905      	ldr	r1, [pc, #20]	; (801d2c0 <nema_vg_init+0x74>)
 801d2ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801d2ae:	6008      	str	r0, [r1, #0]
 801d2b0:	f043 0320 	orr.w	r3, r3, #32
 801d2b4:	6313      	str	r3, [r2, #48]	; 0x30
 801d2b6:	b00f      	add	sp, #60	; 0x3c
 801d2b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d2ba:	bf00      	nop
 801d2bc:	2019859c 	.word	0x2019859c
 801d2c0:	201985a0 	.word	0x201985a0

0801d2c4 <context_reset>:
 801d2c4:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 801d2c8:	4c26      	ldr	r4, [pc, #152]	; (801d364 <context_reset+0xa0>)
 801d2ca:	6820      	ldr	r0, [r4, #0]
 801d2cc:	b110      	cbz	r0, 801d2d4 <context_reset+0x10>
 801d2ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801d2d0:	069b      	lsls	r3, r3, #26
 801d2d2:	d440      	bmi.n	801d356 <context_reset+0x92>
 801d2d4:	2300      	movs	r3, #0
 801d2d6:	6962      	ldr	r2, [r4, #20]
 801d2d8:	e9c4 3300 	strd	r3, r3, [r4]
 801d2dc:	60a3      	str	r3, [r4, #8]
 801d2de:	b112      	cbz	r2, 801d2e6 <context_reset+0x22>
 801d2e0:	4821      	ldr	r0, [pc, #132]	; (801d368 <context_reset+0xa4>)
 801d2e2:	f7e6 f90c 	bl	80034fe <nema_buffer_destroy>
 801d2e6:	2300      	movs	r3, #0
 801d2e8:	f04f 0800 	mov.w	r8, #0
 801d2ec:	f240 5901 	movw	r9, #1281	; 0x501
 801d2f0:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 801d2f4:	f04f 67f0 	mov.w	r7, #125829120	; 0x7800000
 801d2f8:	2000      	movs	r0, #0
 801d2fa:	2100      	movs	r1, #0
 801d2fc:	6423      	str	r3, [r4, #64]	; 0x40
 801d2fe:	6463      	str	r3, [r4, #68]	; 0x44
 801d300:	64e3      	str	r3, [r4, #76]	; 0x4c
 801d302:	6723      	str	r3, [r4, #112]	; 0x70
 801d304:	6523      	str	r3, [r4, #80]	; 0x50
 801d306:	6763      	str	r3, [r4, #116]	; 0x74
 801d308:	6563      	str	r3, [r4, #84]	; 0x54
 801d30a:	67a3      	str	r3, [r4, #120]	; 0x78
 801d30c:	65a3      	str	r3, [r4, #88]	; 0x58
 801d30e:	67e3      	str	r3, [r4, #124]	; 0x7c
 801d310:	65e3      	str	r3, [r4, #92]	; 0x5c
 801d312:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 801d316:	6623      	str	r3, [r4, #96]	; 0x60
 801d318:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 801d31c:	6663      	str	r3, [r4, #100]	; 0x64
 801d31e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801d322:	66a3      	str	r3, [r4, #104]	; 0x68
 801d324:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 801d328:	66e3      	str	r3, [r4, #108]	; 0x6c
 801d32a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 801d32e:	2202      	movs	r2, #2
 801d330:	2300      	movs	r3, #0
 801d332:	e9c4 8908 	strd	r8, r9, [r4, #32]
 801d336:	e9c4 670a 	strd	r6, r7, [r4, #40]	; 0x28
 801d33a:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
 801d33e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 801d342:	e9c4 3305 	strd	r3, r3, [r4, #20]
 801d346:	77a3      	strb	r3, [r4, #30]
 801d348:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801d34c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801d350:	83a2      	strh	r2, [r4, #28]
 801d352:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 801d356:	6883      	ldr	r3, [r0, #8]
 801d358:	2b00      	cmp	r3, #0
 801d35a:	d0bb      	beq.n	801d2d4 <context_reset+0x10>
 801d35c:	f7e6 f8cf 	bl	80034fe <nema_buffer_destroy>
 801d360:	e7b8      	b.n	801d2d4 <context_reset+0x10>
 801d362:	bf00      	nop
 801d364:	201985a8 	.word	0x201985a8
 801d368:	201985b4 	.word	0x201985b4

0801d36c <nema_vg_get_context>:
 801d36c:	4800      	ldr	r0, [pc, #0]	; (801d370 <nema_vg_get_context+0x4>)
 801d36e:	4770      	bx	lr
 801d370:	201985a8 	.word	0x201985a8

0801d374 <stencil_buffer_create>:
 801d374:	b538      	push	{r3, r4, r5, lr}
 801d376:	4605      	mov	r5, r0
 801d378:	1cc8      	adds	r0, r1, #3
 801d37a:	bf48      	it	mi
 801d37c:	1d88      	addmi	r0, r1, #6
 801d37e:	1cd4      	adds	r4, r2, #3
 801d380:	bf48      	it	mi
 801d382:	1d94      	addmi	r4, r2, #6
 801d384:	1080      	asrs	r0, r0, #2
 801d386:	0080      	lsls	r0, r0, #2
 801d388:	f024 0203 	bic.w	r2, r4, #3
 801d38c:	fb02 f200 	mul.w	r2, r2, r0
 801d390:	4619      	mov	r1, r3
 801d392:	4628      	mov	r0, r5
 801d394:	f7e6 f898 	bl	80034c8 <nema_buffer_create_pool>
 801d398:	4628      	mov	r0, r5
 801d39a:	bd38      	pop	{r3, r4, r5, pc}

0801d39c <stencil_buffer_set>:
 801d39c:	b082      	sub	sp, #8
 801d39e:	b470      	push	{r4, r5, r6}
 801d3a0:	4606      	mov	r6, r0
 801d3a2:	460d      	mov	r5, r1
 801d3a4:	a803      	add	r0, sp, #12
 801d3a6:	e880 000c 	stmia.w	r0, {r2, r3}
 801d3aa:	4c15      	ldr	r4, [pc, #84]	; (801d400 <stencil_buffer_set+0x64>)
 801d3ac:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801d3ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d3b2:	1cf3      	adds	r3, r6, #3
 801d3b4:	bf48      	it	mi
 801d3b6:	1db3      	addmi	r3, r6, #6
 801d3b8:	1cea      	adds	r2, r5, #3
 801d3ba:	bf48      	it	mi
 801d3bc:	1daa      	addmi	r2, r5, #6
 801d3be:	f022 0203 	bic.w	r2, r2, #3
 801d3c2:	ee07 2a90 	vmov	s15, r2
 801d3c6:	f023 0303 	bic.w	r3, r3, #3
 801d3ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d3ce:	ee07 3a90 	vmov	s15, r3
 801d3d2:	2100      	movs	r1, #0
 801d3d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d3d8:	61a1      	str	r1, [r4, #24]
 801d3da:	61e1      	str	r1, [r4, #28]
 801d3dc:	6261      	str	r1, [r4, #36]	; 0x24
 801d3de:	6321      	str	r1, [r4, #48]	; 0x30
 801d3e0:	4908      	ldr	r1, [pc, #32]	; (801d404 <stencil_buffer_set+0x68>)
 801d3e2:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 801d3e6:	600c      	str	r4, [r1, #0]
 801d3e8:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801d3ec:	edc4 7a08 	vstr	s15, [r4, #32]
 801d3f0:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 801d3f4:	e9c4 3204 	strd	r3, r2, [r4, #16]
 801d3f8:	bc70      	pop	{r4, r5, r6}
 801d3fa:	b002      	add	sp, #8
 801d3fc:	4770      	bx	lr
 801d3fe:	bf00      	nop
 801d400:	2019863c 	.word	0x2019863c
 801d404:	201985a8 	.word	0x201985a8

0801d408 <nema_vg_get_stencil>:
 801d408:	4b01      	ldr	r3, [pc, #4]	; (801d410 <nema_vg_get_stencil+0x8>)
 801d40a:	6818      	ldr	r0, [r3, #0]
 801d40c:	4770      	bx	lr
 801d40e:	bf00      	nop
 801d410:	201985a8 	.word	0x201985a8

0801d414 <lut_buffer_create>:
 801d414:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d416:	4d1a      	ldr	r5, [pc, #104]	; (801d480 <lut_buffer_create+0x6c>)
 801d418:	b085      	sub	sp, #20
 801d41a:	69ac      	ldr	r4, [r5, #24]
 801d41c:	b10c      	cbz	r4, 801d422 <lut_buffer_create+0xe>
 801d41e:	b005      	add	sp, #20
 801d420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d422:	466e      	mov	r6, sp
 801d424:	f44f 7280 	mov.w	r2, #256	; 0x100
 801d428:	4630      	mov	r0, r6
 801d42a:	4621      	mov	r1, r4
 801d42c:	f7e6 f84c 	bl	80034c8 <nema_buffer_create_pool>
 801d430:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801d434:	f105 060c 	add.w	r6, r5, #12
 801d438:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801d43c:	4627      	mov	r7, r4
 801d43e:	4623      	mov	r3, r4
 801d440:	696d      	ldr	r5, [r5, #20]
 801d442:	26ff      	movs	r6, #255	; 0xff
 801d444:	e008      	b.n	801d458 <lut_buffer_create+0x44>
 801d446:	2880      	cmp	r0, #128	; 0x80
 801d448:	f1c4 0100 	rsb	r1, r4, #0
 801d44c:	d016      	beq.n	801d47c <lut_buffer_create+0x68>
 801d44e:	bfcc      	ite	gt
 801d450:	b2e1      	uxtbgt	r1, r4
 801d452:	b2c9      	uxtble	r1, r1
 801d454:	54a9      	strb	r1, [r5, r2]
 801d456:	3410      	adds	r4, #16
 801d458:	ea44 1213 	orr.w	r2, r4, r3, lsr #4
 801d45c:	3301      	adds	r3, #1
 801d45e:	f1a3 0172 	sub.w	r1, r3, #114	; 0x72
 801d462:	291e      	cmp	r1, #30
 801d464:	f103 30ff 	add.w	r0, r3, #4294967295
 801d468:	b2d2      	uxtb	r2, r2
 801d46a:	d9ec      	bls.n	801d446 <lut_buffer_create+0x32>
 801d46c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d470:	54ae      	strb	r6, [r5, r2]
 801d472:	d1f0      	bne.n	801d456 <lut_buffer_create+0x42>
 801d474:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 801d478:	b005      	add	sp, #20
 801d47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d47c:	54af      	strb	r7, [r5, r2]
 801d47e:	e7ea      	b.n	801d456 <lut_buffer_create+0x42>
 801d480:	201985a8 	.word	0x201985a8

0801d484 <nema_vg_set_error>:
 801d484:	4b01      	ldr	r3, [pc, #4]	; (801d48c <nema_vg_set_error+0x8>)
 801d486:	6218      	str	r0, [r3, #32]
 801d488:	4770      	bx	lr
 801d48a:	bf00      	nop
 801d48c:	201985a8 	.word	0x201985a8

0801d490 <nema_vg_paint_create>:
 801d490:	b538      	push	{r3, r4, r5, lr}
 801d492:	20e0      	movs	r0, #224	; 0xe0
 801d494:	f7e5 ffd9 	bl	800344a <nema_host_malloc>
 801d498:	4604      	mov	r4, r0
 801d49a:	b1e8      	cbz	r0, 801d4d8 <nema_vg_paint_create+0x48>
 801d49c:	2500      	movs	r5, #0
 801d49e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801d4a2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 801d4a6:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
 801d4aa:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 801d4ae:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
 801d4b2:	f880 50dd 	strb.w	r5, [r0, #221]	; 0xdd
 801d4b6:	f880 50d0 	strb.w	r5, [r0, #208]	; 0xd0
 801d4ba:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
 801d4be:	e9c0 5500 	strd	r5, r5, [r0]
 801d4c2:	3038      	adds	r0, #56	; 0x38
 801d4c4:	f7ff fa30 	bl	801c928 <nema_mat3x3_load_identity>
 801d4c8:	f104 0008 	add.w	r0, r4, #8
 801d4cc:	f7ff fa2c 	bl	801c928 <nema_mat3x3_load_identity>
 801d4d0:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 801d4d4:	4620      	mov	r0, r4
 801d4d6:	bd38      	pop	{r3, r4, r5, pc}
 801d4d8:	2001      	movs	r0, #1
 801d4da:	f7ff ffd3 	bl	801d484 <nema_vg_set_error>
 801d4de:	4620      	mov	r0, r4
 801d4e0:	bd38      	pop	{r3, r4, r5, pc}
 801d4e2:	bf00      	nop

0801d4e4 <nema_vg_grad_create>:
 801d4e4:	b530      	push	{r4, r5, lr}
 801d4e6:	2010      	movs	r0, #16
 801d4e8:	b085      	sub	sp, #20
 801d4ea:	f7e5 ffae 	bl	800344a <nema_host_malloc>
 801d4ee:	466d      	mov	r5, sp
 801d4f0:	4604      	mov	r4, r0
 801d4f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 801d4f6:	4628      	mov	r0, r5
 801d4f8:	2100      	movs	r1, #0
 801d4fa:	f7e5 ffe5 	bl	80034c8 <nema_buffer_create_pool>
 801d4fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801d502:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d506:	4620      	mov	r0, r4
 801d508:	b005      	add	sp, #20
 801d50a:	bd30      	pop	{r4, r5, pc}

0801d50c <nema_vg_path_create>:
 801d50c:	b508      	push	{r3, lr}
 801d50e:	2088      	movs	r0, #136	; 0x88
 801d510:	f7e5 ff9b 	bl	800344a <nema_host_malloc>
 801d514:	2200      	movs	r2, #0
 801d516:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 801d51a:	bd08      	pop	{r3, pc}

0801d51c <set_tsvg_text_max_size>:
 801d51c:	4a02      	ldr	r2, [pc, #8]	; (801d528 <set_tsvg_text_max_size+0xc>)
 801d51e:	4b03      	ldr	r3, [pc, #12]	; (801d52c <set_tsvg_text_max_size+0x10>)
 801d520:	6010      	str	r0, [r2, #0]
 801d522:	6019      	str	r1, [r3, #0]
 801d524:	4770      	bx	lr
 801d526:	bf00      	nop
 801d528:	2000005c 	.word	0x2000005c
 801d52c:	20000060 	.word	0x20000060

0801d530 <tsvg_init>:
 801d530:	b508      	push	{r3, lr}
 801d532:	f7ff ffad 	bl	801d490 <nema_vg_paint_create>
 801d536:	4b05      	ldr	r3, [pc, #20]	; (801d54c <tsvg_init+0x1c>)
 801d538:	6018      	str	r0, [r3, #0]
 801d53a:	f7ff ffe7 	bl	801d50c <nema_vg_path_create>
 801d53e:	4b04      	ldr	r3, [pc, #16]	; (801d550 <tsvg_init+0x20>)
 801d540:	6018      	str	r0, [r3, #0]
 801d542:	f7ff ffcf 	bl	801d4e4 <nema_vg_grad_create>
 801d546:	4b03      	ldr	r3, [pc, #12]	; (801d554 <tsvg_init+0x24>)
 801d548:	6018      	str	r0, [r3, #0]
 801d54a:	bd08      	pop	{r3, pc}
 801d54c:	20198678 	.word	0x20198678
 801d550:	2019867c 	.word	0x2019867c
 801d554:	20198674 	.word	0x20198674

0801d558 <tsi_malloc_init_pool>:
 801d558:	b4f0      	push	{r4, r5, r6, r7}
 801d55a:	2807      	cmp	r0, #7
 801d55c:	9e04      	ldr	r6, [sp, #16]
 801d55e:	d81c      	bhi.n	801d59a <tsi_malloc_init_pool+0x42>
 801d560:	4f0f      	ldr	r7, [pc, #60]	; (801d5a0 <tsi_malloc_init_pool+0x48>)
 801d562:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d566:	0084      	lsls	r4, r0, #2
 801d568:	193d      	adds	r5, r7, r4
 801d56a:	513a      	str	r2, [r7, r4]
 801d56c:	185a      	adds	r2, r3, r1
 801d56e:	60e9      	str	r1, [r5, #12]
 801d570:	6069      	str	r1, [r5, #4]
 801d572:	612b      	str	r3, [r5, #16]
 801d574:	60aa      	str	r2, [r5, #8]
 801d576:	b16e      	cbz	r6, 801d594 <tsi_malloc_init_pool+0x3c>
 801d578:	2200      	movs	r2, #0
 801d57a:	2010      	movs	r0, #16
 801d57c:	4d09      	ldr	r5, [pc, #36]	; (801d5a4 <tsi_malloc_init_pool+0x4c>)
 801d57e:	180c      	adds	r4, r1, r0
 801d580:	e9c1 5001 	strd	r5, r0, [r1, #4]
 801d584:	4610      	mov	r0, r2
 801d586:	3b20      	subs	r3, #32
 801d588:	610b      	str	r3, [r1, #16]
 801d58a:	600a      	str	r2, [r1, #0]
 801d58c:	e9c4 5201 	strd	r5, r2, [r4, #4]
 801d590:	bcf0      	pop	{r4, r5, r6, r7}
 801d592:	4770      	bx	lr
 801d594:	4630      	mov	r0, r6
 801d596:	bcf0      	pop	{r4, r5, r6, r7}
 801d598:	4770      	bx	lr
 801d59a:	f04f 30ff 	mov.w	r0, #4294967295
 801d59e:	e7f7      	b.n	801d590 <tsi_malloc_init_pool+0x38>
 801d5a0:	20198680 	.word	0x20198680
 801d5a4:	000f1fa1 	.word	0x000f1fa1

0801d5a8 <tsi_malloc_pool>:
 801d5a8:	2807      	cmp	r0, #7
 801d5aa:	d832      	bhi.n	801d612 <tsi_malloc_pool+0x6a>
 801d5ac:	4b1b      	ldr	r3, [pc, #108]	; (801d61c <tsi_malloc_pool+0x74>)
 801d5ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d5b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801d5b6:	68c2      	ldr	r2, [r0, #12]
 801d5b8:	b35a      	cbz	r2, 801d612 <tsi_malloc_pool+0x6a>
 801d5ba:	2910      	cmp	r1, #16
 801d5bc:	bfb8      	it	lt
 801d5be:	2110      	movlt	r1, #16
 801d5c0:	b470      	push	{r4, r5, r6}
 801d5c2:	310f      	adds	r1, #15
 801d5c4:	6814      	ldr	r4, [r2, #0]
 801d5c6:	f021 010f 	bic.w	r1, r1, #15
 801d5ca:	42a1      	cmp	r1, r4
 801d5cc:	dd23      	ble.n	801d616 <tsi_malloc_pool+0x6e>
 801d5ce:	6890      	ldr	r0, [r2, #8]
 801d5d0:	b1d0      	cbz	r0, 801d608 <tsi_malloc_pool+0x60>
 801d5d2:	4615      	mov	r5, r2
 801d5d4:	e002      	b.n	801d5dc <tsi_malloc_pool+0x34>
 801d5d6:	6898      	ldr	r0, [r3, #8]
 801d5d8:	461d      	mov	r5, r3
 801d5da:	b1a8      	cbz	r0, 801d608 <tsi_malloc_pool+0x60>
 801d5dc:	5814      	ldr	r4, [r2, r0]
 801d5de:	1813      	adds	r3, r2, r0
 801d5e0:	428c      	cmp	r4, r1
 801d5e2:	dbf8      	blt.n	801d5d6 <tsi_malloc_pool+0x2e>
 801d5e4:	f101 0010 	add.w	r0, r1, #16
 801d5e8:	42a0      	cmp	r0, r4
 801d5ea:	da0f      	bge.n	801d60c <tsi_malloc_pool+0x64>
 801d5ec:	4e0c      	ldr	r6, [pc, #48]	; (801d620 <tsi_malloc_pool+0x78>)
 801d5ee:	1a24      	subs	r4, r4, r0
 801d5f0:	50c4      	str	r4, [r0, r3]
 801d5f2:	18c4      	adds	r4, r0, r3
 801d5f4:	6066      	str	r6, [r4, #4]
 801d5f6:	689e      	ldr	r6, [r3, #8]
 801d5f8:	1aa2      	subs	r2, r4, r2
 801d5fa:	60a6      	str	r6, [r4, #8]
 801d5fc:	60aa      	str	r2, [r5, #8]
 801d5fe:	6019      	str	r1, [r3, #0]
 801d600:	4a08      	ldr	r2, [pc, #32]	; (801d624 <tsi_malloc_pool+0x7c>)
 801d602:	f103 0010 	add.w	r0, r3, #16
 801d606:	605a      	str	r2, [r3, #4]
 801d608:	bc70      	pop	{r4, r5, r6}
 801d60a:	4770      	bx	lr
 801d60c:	689a      	ldr	r2, [r3, #8]
 801d60e:	60aa      	str	r2, [r5, #8]
 801d610:	e7f6      	b.n	801d600 <tsi_malloc_pool+0x58>
 801d612:	2000      	movs	r0, #0
 801d614:	4770      	bx	lr
 801d616:	4615      	mov	r5, r2
 801d618:	4613      	mov	r3, r2
 801d61a:	e7e3      	b.n	801d5e4 <tsi_malloc_pool+0x3c>
 801d61c:	20198680 	.word	0x20198680
 801d620:	000f1fa1 	.word	0x000f1fa1
 801d624:	000f1fa2 	.word	0x000f1fa2

0801d628 <tsi_free>:
 801d628:	2800      	cmp	r0, #0
 801d62a:	d045      	beq.n	801d6b8 <tsi_free+0x90>
 801d62c:	4a45      	ldr	r2, [pc, #276]	; (801d744 <tsi_free+0x11c>)
 801d62e:	68d3      	ldr	r3, [r2, #12]
 801d630:	b12b      	cbz	r3, 801d63e <tsi_free+0x16>
 801d632:	6851      	ldr	r1, [r2, #4]
 801d634:	4281      	cmp	r1, r0
 801d636:	d802      	bhi.n	801d63e <tsi_free+0x16>
 801d638:	6891      	ldr	r1, [r2, #8]
 801d63a:	4288      	cmp	r0, r1
 801d63c:	d33d      	bcc.n	801d6ba <tsi_free+0x92>
 801d63e:	6a13      	ldr	r3, [r2, #32]
 801d640:	b12b      	cbz	r3, 801d64e <tsi_free+0x26>
 801d642:	6991      	ldr	r1, [r2, #24]
 801d644:	4288      	cmp	r0, r1
 801d646:	d302      	bcc.n	801d64e <tsi_free+0x26>
 801d648:	69d1      	ldr	r1, [r2, #28]
 801d64a:	4288      	cmp	r0, r1
 801d64c:	d335      	bcc.n	801d6ba <tsi_free+0x92>
 801d64e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801d650:	b12b      	cbz	r3, 801d65e <tsi_free+0x36>
 801d652:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801d654:	4281      	cmp	r1, r0
 801d656:	d802      	bhi.n	801d65e <tsi_free+0x36>
 801d658:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801d65a:	4281      	cmp	r1, r0
 801d65c:	d82d      	bhi.n	801d6ba <tsi_free+0x92>
 801d65e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 801d660:	b12b      	cbz	r3, 801d66e <tsi_free+0x46>
 801d662:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801d664:	4288      	cmp	r0, r1
 801d666:	d302      	bcc.n	801d66e <tsi_free+0x46>
 801d668:	6c51      	ldr	r1, [r2, #68]	; 0x44
 801d66a:	4288      	cmp	r0, r1
 801d66c:	d325      	bcc.n	801d6ba <tsi_free+0x92>
 801d66e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801d670:	b12b      	cbz	r3, 801d67e <tsi_free+0x56>
 801d672:	6d51      	ldr	r1, [r2, #84]	; 0x54
 801d674:	4288      	cmp	r0, r1
 801d676:	d302      	bcc.n	801d67e <tsi_free+0x56>
 801d678:	6d91      	ldr	r1, [r2, #88]	; 0x58
 801d67a:	4288      	cmp	r0, r1
 801d67c:	d31d      	bcc.n	801d6ba <tsi_free+0x92>
 801d67e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 801d680:	b12b      	cbz	r3, 801d68e <tsi_free+0x66>
 801d682:	6e91      	ldr	r1, [r2, #104]	; 0x68
 801d684:	4288      	cmp	r0, r1
 801d686:	d302      	bcc.n	801d68e <tsi_free+0x66>
 801d688:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 801d68a:	4288      	cmp	r0, r1
 801d68c:	d315      	bcc.n	801d6ba <tsi_free+0x92>
 801d68e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 801d692:	b133      	cbz	r3, 801d6a2 <tsi_free+0x7a>
 801d694:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 801d696:	4288      	cmp	r0, r1
 801d698:	d303      	bcc.n	801d6a2 <tsi_free+0x7a>
 801d69a:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 801d69e:	4288      	cmp	r0, r1
 801d6a0:	d30b      	bcc.n	801d6ba <tsi_free+0x92>
 801d6a2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 801d6a6:	b13b      	cbz	r3, 801d6b8 <tsi_free+0x90>
 801d6a8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 801d6ac:	4281      	cmp	r1, r0
 801d6ae:	d803      	bhi.n	801d6b8 <tsi_free+0x90>
 801d6b0:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 801d6b4:	4282      	cmp	r2, r0
 801d6b6:	d800      	bhi.n	801d6ba <tsi_free+0x92>
 801d6b8:	4770      	bx	lr
 801d6ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6bc:	f1a0 0410 	sub.w	r4, r0, #16
 801d6c0:	6861      	ldr	r1, [r4, #4]
 801d6c2:	4a21      	ldr	r2, [pc, #132]	; (801d748 <tsi_free+0x120>)
 801d6c4:	4291      	cmp	r1, r2
 801d6c6:	d000      	beq.n	801d6ca <tsi_free+0xa2>
 801d6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6ca:	4a20      	ldr	r2, [pc, #128]	; (801d74c <tsi_free+0x124>)
 801d6cc:	6062      	str	r2, [r4, #4]
 801d6ce:	6899      	ldr	r1, [r3, #8]
 801d6d0:	18ca      	adds	r2, r1, r3
 801d6d2:	4294      	cmp	r4, r2
 801d6d4:	d929      	bls.n	801d72a <tsi_free+0x102>
 801d6d6:	b909      	cbnz	r1, 801d6dc <tsi_free+0xb4>
 801d6d8:	e027      	b.n	801d72a <tsi_free+0x102>
 801d6da:	b129      	cbz	r1, 801d6e8 <tsi_free+0xc0>
 801d6dc:	6891      	ldr	r1, [r2, #8]
 801d6de:	4615      	mov	r5, r2
 801d6e0:	4616      	mov	r6, r2
 801d6e2:	185a      	adds	r2, r3, r1
 801d6e4:	4294      	cmp	r4, r2
 801d6e6:	d8f8      	bhi.n	801d6da <tsi_free+0xb2>
 801d6e8:	f850 7c10 	ldr.w	r7, [r0, #-16]
 801d6ec:	42ab      	cmp	r3, r5
 801d6ee:	eba4 0e03 	sub.w	lr, r4, r3
 801d6f2:	4407      	add	r7, r0
 801d6f4:	d01e      	beq.n	801d734 <tsi_free+0x10c>
 801d6f6:	682b      	ldr	r3, [r5, #0]
 801d6f8:	f105 0c10 	add.w	ip, r5, #16
 801d6fc:	4463      	add	r3, ip
 801d6fe:	429c      	cmp	r4, r3
 801d700:	f8c5 e008 	str.w	lr, [r5, #8]
 801d704:	60a1      	str	r1, [r4, #8]
 801d706:	d11a      	bne.n	801d73e <tsi_free+0x116>
 801d708:	f850 0c10 	ldr.w	r0, [r0, #-16]
 801d70c:	682b      	ldr	r3, [r5, #0]
 801d70e:	3010      	adds	r0, #16
 801d710:	4403      	add	r3, r0
 801d712:	60a9      	str	r1, [r5, #8]
 801d714:	602b      	str	r3, [r5, #0]
 801d716:	4297      	cmp	r7, r2
 801d718:	d1d6      	bne.n	801d6c8 <tsi_free+0xa0>
 801d71a:	683a      	ldr	r2, [r7, #0]
 801d71c:	6833      	ldr	r3, [r6, #0]
 801d71e:	3210      	adds	r2, #16
 801d720:	4413      	add	r3, r2
 801d722:	6033      	str	r3, [r6, #0]
 801d724:	68bb      	ldr	r3, [r7, #8]
 801d726:	60b3      	str	r3, [r6, #8]
 801d728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d72a:	f850 7c10 	ldr.w	r7, [r0, #-16]
 801d72e:	eba4 0e03 	sub.w	lr, r4, r3
 801d732:	4407      	add	r7, r0
 801d734:	f8c3 e008 	str.w	lr, [r3, #8]
 801d738:	4626      	mov	r6, r4
 801d73a:	60a1      	str	r1, [r4, #8]
 801d73c:	e7eb      	b.n	801d716 <tsi_free+0xee>
 801d73e:	4626      	mov	r6, r4
 801d740:	e7e9      	b.n	801d716 <tsi_free+0xee>
 801d742:	bf00      	nop
 801d744:	20198680 	.word	0x20198680
 801d748:	000f1fa2 	.word	0x000f1fa2
 801d74c:	000f1fa1 	.word	0x000f1fa1

0801d750 <nema_cl_create_sized>:
 801d750:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d752:	b093      	sub	sp, #76	; 0x4c
 801d754:	466d      	mov	r5, sp
 801d756:	4606      	mov	r6, r0
 801d758:	460a      	mov	r2, r1
 801d75a:	4628      	mov	r0, r5
 801d75c:	2100      	movs	r1, #0
 801d75e:	f7e5 feb3 	bl	80034c8 <nema_buffer_create_pool>
 801d762:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801d766:	2500      	movs	r5, #0
 801d768:	ac04      	add	r4, sp, #16
 801d76a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d76e:	4620      	mov	r0, r4
 801d770:	f7e5 feb9 	bl	80034e6 <nema_buffer_map>
 801d774:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801d778:	ac08      	add	r4, sp, #32
 801d77a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d77e:	2110      	movs	r1, #16
 801d780:	f04f 32ff 	mov.w	r2, #4294967295
 801d784:	9b04      	ldr	r3, [sp, #16]
 801d786:	950d      	str	r5, [sp, #52]	; 0x34
 801d788:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
 801d78c:	42ab      	cmp	r3, r5
 801d78e:	4635      	mov	r5, r6
 801d790:	bfb8      	it	lt
 801d792:	3307      	addlt	r3, #7
 801d794:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 801d798:	10db      	asrs	r3, r3, #3
 801d79a:	005b      	lsls	r3, r3, #1
 801d79c:	930c      	str	r3, [sp, #48]	; 0x30
 801d79e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d7a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d7a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d7a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d7a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 801d7aa:	2700      	movs	r7, #0
 801d7ac:	e885 0003 	stmia.w	r5, {r0, r1}
 801d7b0:	4630      	mov	r0, r6
 801d7b2:	61b7      	str	r7, [r6, #24]
 801d7b4:	b013      	add	sp, #76	; 0x4c
 801d7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d7b8 <nema_extend_bound_cl>:
 801d7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d7ba:	4d6e      	ldr	r5, [pc, #440]	; (801d974 <nema_extend_bound_cl+0x1bc>)
 801d7bc:	b09f      	sub	sp, #124	; 0x7c
 801d7be:	682b      	ldr	r3, [r5, #0]
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	f000 80c1 	beq.w	801d948 <nema_extend_bound_cl+0x190>
 801d7c6:	4606      	mov	r6, r0
 801d7c8:	6998      	ldr	r0, [r3, #24]
 801d7ca:	0784      	lsls	r4, r0, #30
 801d7cc:	f140 80b6 	bpl.w	801d93c <nema_extend_bound_cl+0x184>
 801d7d0:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 801d7d4:	0680      	lsls	r0, r0, #26
 801d7d6:	d44e      	bmi.n	801d876 <nema_extend_bound_cl+0xbe>
 801d7d8:	1a89      	subs	r1, r1, r2
 801d7da:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801d7de:	1049      	asrs	r1, r1, #1
 801d7e0:	2902      	cmp	r1, #2
 801d7e2:	dd13      	ble.n	801d80c <nema_extend_bound_cl+0x54>
 801d7e4:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 801d7e8:	2700      	movs	r7, #0
 801d7ea:	1e94      	subs	r4, r2, #2
 801d7ec:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801d7f0:	1c91      	adds	r1, r2, #2
 801d7f2:	0092      	lsls	r2, r2, #2
 801d7f4:	6898      	ldr	r0, [r3, #8]
 801d7f6:	f840 c002 	str.w	ip, [r0, r2]
 801d7fa:	6898      	ldr	r0, [r3, #8]
 801d7fc:	4410      	add	r0, r2
 801d7fe:	6047      	str	r7, [r0, #4]
 801d800:	6159      	str	r1, [r3, #20]
 801d802:	3102      	adds	r1, #2
 801d804:	428c      	cmp	r4, r1
 801d806:	f102 0208 	add.w	r2, r2, #8
 801d80a:	d1f3      	bne.n	801d7f4 <nema_extend_bound_cl+0x3c>
 801d80c:	6a1c      	ldr	r4, [r3, #32]
 801d80e:	2c00      	cmp	r4, #0
 801d810:	d050      	beq.n	801d8b4 <nema_extend_bound_cl+0xfc>
 801d812:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
 801d816:	26f0      	movs	r6, #240	; 0xf0
 801d818:	27f4      	movs	r7, #244	; 0xf4
 801d81a:	6898      	ldr	r0, [r3, #8]
 801d81c:	f041 0104 	orr.w	r1, r1, #4
 801d820:	6199      	str	r1, [r3, #24]
 801d822:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
 801d826:	6899      	ldr	r1, [r3, #8]
 801d828:	68e6      	ldr	r6, [r4, #12]
 801d82a:	0090      	lsls	r0, r2, #2
 801d82c:	4401      	add	r1, r0
 801d82e:	604e      	str	r6, [r1, #4]
 801d830:	6899      	ldr	r1, [r3, #8]
 801d832:	1c96      	adds	r6, r2, #2
 801d834:	4401      	add	r1, r0
 801d836:	615e      	str	r6, [r3, #20]
 801d838:	608f      	str	r7, [r1, #8]
 801d83a:	6899      	ldr	r1, [r3, #8]
 801d83c:	6926      	ldr	r6, [r4, #16]
 801d83e:	4401      	add	r1, r0
 801d840:	1d17      	adds	r7, r2, #4
 801d842:	60ce      	str	r6, [r1, #12]
 801d844:	621c      	str	r4, [r3, #32]
 801d846:	615f      	str	r7, [r3, #20]
 801d848:	68e1      	ldr	r1, [r4, #12]
 801d84a:	f011 0107 	ands.w	r1, r1, #7
 801d84e:	d120      	bne.n	801d892 <nema_extend_bound_cl+0xda>
 801d850:	691e      	ldr	r6, [r3, #16]
 801d852:	3205      	adds	r2, #5
 801d854:	42b2      	cmp	r2, r6
 801d856:	db23      	blt.n	801d8a0 <nema_extend_bound_cl+0xe8>
 801d858:	699a      	ldr	r2, [r3, #24]
 801d85a:	f022 0220 	bic.w	r2, r2, #32
 801d85e:	619a      	str	r2, [r3, #24]
 801d860:	69a3      	ldr	r3, [r4, #24]
 801d862:	075a      	lsls	r2, r3, #29
 801d864:	d503      	bpl.n	801d86e <nema_extend_bound_cl+0xb6>
 801d866:	6a24      	ldr	r4, [r4, #32]
 801d868:	69a3      	ldr	r3, [r4, #24]
 801d86a:	075b      	lsls	r3, r3, #29
 801d86c:	d4fb      	bmi.n	801d866 <nema_extend_bound_cl+0xae>
 801d86e:	2000      	movs	r0, #0
 801d870:	602c      	str	r4, [r5, #0]
 801d872:	b01f      	add	sp, #124	; 0x7c
 801d874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d876:	2900      	cmp	r1, #0
 801d878:	bfb8      	it	lt
 801d87a:	3103      	addlt	r1, #3
 801d87c:	1089      	asrs	r1, r1, #2
 801d87e:	0049      	lsls	r1, r1, #1
 801d880:	4291      	cmp	r1, r2
 801d882:	bfcc      	ite	gt
 801d884:	4610      	movgt	r0, r2
 801d886:	1a50      	suble	r0, r2, r1
 801d888:	1a09      	subs	r1, r1, r0
 801d88a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801d88e:	1049      	asrs	r1, r1, #1
 801d890:	e7a6      	b.n	801d7e0 <nema_extend_bound_cl+0x28>
 801d892:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801d896:	f7fe fc45 	bl	801c124 <nema_set_error>
 801d89a:	2000      	movs	r0, #0
 801d89c:	b01f      	add	sp, #124	; 0x7c
 801d89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8a0:	f44f 26a0 	mov.w	r6, #327680	; 0x50000
 801d8a4:	689a      	ldr	r2, [r3, #8]
 801d8a6:	4410      	add	r0, r2
 801d8a8:	e9c0 6104 	strd	r6, r1, [r0, #16]
 801d8ac:	699a      	ldr	r2, [r3, #24]
 801d8ae:	f022 0208 	bic.w	r2, r2, #8
 801d8b2:	e7d2      	b.n	801d85a <nema_extend_bound_cl+0xa2>
 801d8b4:	2028      	movs	r0, #40	; 0x28
 801d8b6:	f7e5 fdc8 	bl	800344a <nema_host_malloc>
 801d8ba:	4604      	mov	r4, r0
 801d8bc:	2800      	cmp	r0, #0
 801d8be:	d052      	beq.n	801d966 <nema_extend_bound_cl+0x1ae>
 801d8c0:	1cb1      	adds	r1, r6, #2
 801d8c2:	00c9      	lsls	r1, r1, #3
 801d8c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801d8c8:	dd1a      	ble.n	801d900 <nema_extend_bound_cl+0x148>
 801d8ca:	466e      	mov	r6, sp
 801d8cc:	4627      	mov	r7, r4
 801d8ce:	4668      	mov	r0, sp
 801d8d0:	f7ff ff3e 	bl	801d750 <nema_cl_create_sized>
 801d8d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d8d6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d8d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d8da:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d8dc:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d8e0:	e887 0003 	stmia.w	r7, {r0, r1}
 801d8e4:	68a3      	ldr	r3, [r4, #8]
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d034      	beq.n	801d954 <nema_extend_bound_cl+0x19c>
 801d8ea:	682b      	ldr	r3, [r5, #0]
 801d8ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d8ee:	2a00      	cmp	r2, #0
 801d8f0:	bf08      	it	eq
 801d8f2:	461a      	moveq	r2, r3
 801d8f4:	6262      	str	r2, [r4, #36]	; 0x24
 801d8f6:	699a      	ldr	r2, [r3, #24]
 801d8f8:	f022 020c 	bic.w	r2, r2, #12
 801d8fc:	61a2      	str	r2, [r4, #24]
 801d8fe:	e788      	b.n	801d812 <nema_extend_bound_cl+0x5a>
 801d900:	a80a      	add	r0, sp, #40	; 0x28
 801d902:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d906:	f7ff ff23 	bl	801d750 <nema_cl_create_sized>
 801d90a:	2302      	movs	r3, #2
 801d90c:	46a4      	mov	ip, r4
 801d90e:	9310      	str	r3, [sp, #64]	; 0x40
 801d910:	ae0a      	add	r6, sp, #40	; 0x28
 801d912:	af14      	add	r7, sp, #80	; 0x50
 801d914:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d916:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d918:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d91a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d91c:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d920:	ae14      	add	r6, sp, #80	; 0x50
 801d922:	e887 0003 	stmia.w	r7, {r0, r1}
 801d926:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d928:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d92c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d92e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d932:	e897 0003 	ldmia.w	r7, {r0, r1}
 801d936:	e88c 0003 	stmia.w	ip, {r0, r1}
 801d93a:	e7d3      	b.n	801d8e4 <nema_extend_bound_cl+0x12c>
 801d93c:	2008      	movs	r0, #8
 801d93e:	f7fe fbf1 	bl	801c124 <nema_set_error>
 801d942:	f04f 30ff 	mov.w	r0, #4294967295
 801d946:	e7a9      	b.n	801d89c <nema_extend_bound_cl+0xe4>
 801d948:	2080      	movs	r0, #128	; 0x80
 801d94a:	f7fe fbeb 	bl	801c124 <nema_set_error>
 801d94e:	f04f 30ff 	mov.w	r0, #4294967295
 801d952:	e7a3      	b.n	801d89c <nema_extend_bound_cl+0xe4>
 801d954:	2010      	movs	r0, #16
 801d956:	f7fe fbe5 	bl	801c124 <nema_set_error>
 801d95a:	4620      	mov	r0, r4
 801d95c:	f7e5 fd6a 	bl	8003434 <nema_host_free>
 801d960:	f04f 30ff 	mov.w	r0, #4294967295
 801d964:	e79a      	b.n	801d89c <nema_extend_bound_cl+0xe4>
 801d966:	2010      	movs	r0, #16
 801d968:	f7fe fbdc 	bl	801c124 <nema_set_error>
 801d96c:	f04f 30ff 	mov.w	r0, #4294967295
 801d970:	e794      	b.n	801d89c <nema_extend_bound_cl+0xe4>
 801d972:	bf00      	nop
 801d974:	20198720 	.word	0x20198720

0801d978 <nema_cl_bind_circular>:
 801d978:	b358      	cbz	r0, 801d9d2 <nema_cl_bind_circular+0x5a>
 801d97a:	68c3      	ldr	r3, [r0, #12]
 801d97c:	f013 0207 	ands.w	r2, r3, #7
 801d980:	d117      	bne.n	801d9b2 <nema_cl_bind_circular+0x3a>
 801d982:	b4f0      	push	{r4, r5, r6, r7}
 801d984:	4c15      	ldr	r4, [pc, #84]	; (801d9dc <nema_cl_bind_circular+0x64>)
 801d986:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801d988:	6821      	ldr	r1, [r4, #0]
 801d98a:	2b00      	cmp	r3, #0
 801d98c:	bf08      	it	eq
 801d98e:	4603      	moveq	r3, r0
 801d990:	b141      	cbz	r1, 801d9a4 <nema_cl_bind_circular+0x2c>
 801d992:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
 801d996:	1c46      	adds	r6, r0, #1
 801d998:	42ae      	cmp	r6, r5
 801d99a:	db0e      	blt.n	801d9ba <nema_cl_bind_circular+0x42>
 801d99c:	698a      	ldr	r2, [r1, #24]
 801d99e:	f022 0220 	bic.w	r2, r2, #32
 801d9a2:	618a      	str	r2, [r1, #24]
 801d9a4:	699a      	ldr	r2, [r3, #24]
 801d9a6:	6023      	str	r3, [r4, #0]
 801d9a8:	f042 0220 	orr.w	r2, r2, #32
 801d9ac:	619a      	str	r2, [r3, #24]
 801d9ae:	bcf0      	pop	{r4, r5, r6, r7}
 801d9b0:	4770      	bx	lr
 801d9b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801d9b6:	f7fe bbb5 	b.w	801c124 <nema_set_error>
 801d9ba:	f44f 27a0 	mov.w	r7, #327680	; 0x50000
 801d9be:	688d      	ldr	r5, [r1, #8]
 801d9c0:	eb05 0680 	add.w	r6, r5, r0, lsl #2
 801d9c4:	f845 7020 	str.w	r7, [r5, r0, lsl #2]
 801d9c8:	6072      	str	r2, [r6, #4]
 801d9ca:	698a      	ldr	r2, [r1, #24]
 801d9cc:	f022 0208 	bic.w	r2, r2, #8
 801d9d0:	e7e5      	b.n	801d99e <nema_cl_bind_circular+0x26>
 801d9d2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801d9d6:	f7fe bba5 	b.w	801c124 <nema_set_error>
 801d9da:	bf00      	nop
 801d9dc:	20198720 	.word	0x20198720

0801d9e0 <nema_cl_unbind>:
 801d9e0:	4910      	ldr	r1, [pc, #64]	; (801da24 <nema_cl_unbind+0x44>)
 801d9e2:	680b      	ldr	r3, [r1, #0]
 801d9e4:	b1d3      	cbz	r3, 801da1c <nema_cl_unbind+0x3c>
 801d9e6:	b430      	push	{r4, r5}
 801d9e8:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 801d9ec:	1c54      	adds	r4, r2, #1
 801d9ee:	4284      	cmp	r4, r0
 801d9f0:	db07      	blt.n	801da02 <nema_cl_unbind+0x22>
 801d9f2:	699a      	ldr	r2, [r3, #24]
 801d9f4:	f022 0220 	bic.w	r2, r2, #32
 801d9f8:	619a      	str	r2, [r3, #24]
 801d9fa:	2300      	movs	r3, #0
 801d9fc:	600b      	str	r3, [r1, #0]
 801d9fe:	bc30      	pop	{r4, r5}
 801da00:	4770      	bx	lr
 801da02:	f44f 25a0 	mov.w	r5, #327680	; 0x50000
 801da06:	2400      	movs	r4, #0
 801da08:	6898      	ldr	r0, [r3, #8]
 801da0a:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
 801da0e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801da12:	6054      	str	r4, [r2, #4]
 801da14:	699a      	ldr	r2, [r3, #24]
 801da16:	f022 0208 	bic.w	r2, r2, #8
 801da1a:	e7eb      	b.n	801d9f4 <nema_cl_unbind+0x14>
 801da1c:	2300      	movs	r3, #0
 801da1e:	600b      	str	r3, [r1, #0]
 801da20:	4770      	bx	lr
 801da22:	bf00      	nop
 801da24:	20198720 	.word	0x20198720

0801da28 <nema_cl_submit_no_irq>:
 801da28:	2800      	cmp	r0, #0
 801da2a:	d059      	beq.n	801dae0 <nema_cl_submit_no_irq+0xb8>
 801da2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da2e:	6983      	ldr	r3, [r0, #24]
 801da30:	4605      	mov	r5, r0
 801da32:	069c      	lsls	r4, r3, #26
 801da34:	d429      	bmi.n	801da8a <nema_cl_submit_no_irq+0x62>
 801da36:	4604      	mov	r4, r0
 801da38:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 801da3c:	e012      	b.n	801da64 <nema_cl_submit_no_irq+0x3c>
 801da3e:	6923      	ldr	r3, [r4, #16]
 801da40:	6949      	ldr	r1, [r1, #20]
 801da42:	4433      	add	r3, r6
 801da44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801da48:	69a3      	ldr	r3, [r4, #24]
 801da4a:	4620      	mov	r0, r4
 801da4c:	f023 0308 	bic.w	r3, r3, #8
 801da50:	61a3      	str	r3, [r4, #24]
 801da52:	f7e5 fd74 	bl	800353e <nema_buffer_flush>
 801da56:	69a3      	ldr	r3, [r4, #24]
 801da58:	f043 0308 	orr.w	r3, r3, #8
 801da5c:	61a3      	str	r3, [r4, #24]
 801da5e:	6a24      	ldr	r4, [r4, #32]
 801da60:	b134      	cbz	r4, 801da70 <nema_cl_submit_no_irq+0x48>
 801da62:	69a3      	ldr	r3, [r4, #24]
 801da64:	0758      	lsls	r0, r3, #29
 801da66:	68a2      	ldr	r2, [r4, #8]
 801da68:	6a21      	ldr	r1, [r4, #32]
 801da6a:	d4e8      	bmi.n	801da3e <nema_cl_submit_no_irq+0x16>
 801da6c:	071b      	lsls	r3, r3, #28
 801da6e:	d52a      	bpl.n	801dac6 <nema_cl_submit_no_irq+0x9e>
 801da70:	2000      	movs	r0, #0
 801da72:	f7e5 fd6e 	bl	8003552 <nema_mutex_lock>
 801da76:	6969      	ldr	r1, [r5, #20]
 801da78:	4628      	mov	r0, r5
 801da7a:	f7fe f9c3 	bl	801be04 <nema_rb_submit_cmdlist>
 801da7e:	61e8      	str	r0, [r5, #28]
 801da80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801da84:	2000      	movs	r0, #0
 801da86:	f7e5 bd71 	b.w	800356c <nema_mutex_unlock>
 801da8a:	6903      	ldr	r3, [r0, #16]
 801da8c:	6946      	ldr	r6, [r0, #20]
 801da8e:	2b00      	cmp	r3, #0
 801da90:	bfb8      	it	lt
 801da92:	3303      	addlt	r3, #3
 801da94:	109b      	asrs	r3, r3, #2
 801da96:	005c      	lsls	r4, r3, #1
 801da98:	68c7      	ldr	r7, [r0, #12]
 801da9a:	69c0      	ldr	r0, [r0, #28]
 801da9c:	42a6      	cmp	r6, r4
 801da9e:	bfa4      	itt	ge
 801daa0:	1b36      	subge	r6, r6, r4
 801daa2:	eb07 07c3 	addge.w	r7, r7, r3, lsl #3
 801daa6:	2800      	cmp	r0, #0
 801daa8:	da15      	bge.n	801dad6 <nema_cl_submit_no_irq+0xae>
 801daaa:	f04f 33ff 	mov.w	r3, #4294967295
 801daae:	61eb      	str	r3, [r5, #28]
 801dab0:	4631      	mov	r1, r6
 801dab2:	4638      	mov	r0, r7
 801dab4:	f7fe f922 	bl	801bcfc <nema_rb_submit_cmdlist2>
 801dab8:	696b      	ldr	r3, [r5, #20]
 801daba:	61e8      	str	r0, [r5, #28]
 801dabc:	42a3      	cmp	r3, r4
 801dabe:	bfa8      	it	ge
 801dac0:	2400      	movge	r4, #0
 801dac2:	616c      	str	r4, [r5, #20]
 801dac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dac6:	4620      	mov	r0, r4
 801dac8:	f7e5 fd39 	bl	800353e <nema_buffer_flush>
 801dacc:	69a3      	ldr	r3, [r4, #24]
 801dace:	f043 0308 	orr.w	r3, r3, #8
 801dad2:	61a3      	str	r3, [r4, #24]
 801dad4:	e7cc      	b.n	801da70 <nema_cl_submit_no_irq+0x48>
 801dad6:	f7e5 fc99 	bl	800340c <nema_wait_irq_cl>
 801dada:	2800      	cmp	r0, #0
 801dadc:	dae5      	bge.n	801daaa <nema_cl_submit_no_irq+0x82>
 801dade:	e7e7      	b.n	801dab0 <nema_cl_submit_no_irq+0x88>
 801dae0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801dae4:	f7fe bb1e 	b.w	801c124 <nema_set_error>

0801dae8 <nema_cl_get_space>:
 801dae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801daea:	4e2d      	ldr	r6, [pc, #180]	; (801dba0 <nema_cl_get_space+0xb8>)
 801daec:	6834      	ldr	r4, [r6, #0]
 801daee:	2c00      	cmp	r4, #0
 801daf0:	d039      	beq.n	801db66 <nema_cl_get_space+0x7e>
 801daf2:	69a7      	ldr	r7, [r4, #24]
 801daf4:	4605      	mov	r5, r0
 801daf6:	f027 0208 	bic.w	r2, r7, #8
 801dafa:	f017 0720 	ands.w	r7, r7, #32
 801dafe:	61a2      	str	r2, [r4, #24]
 801db00:	6923      	ldr	r3, [r4, #16]
 801db02:	6962      	ldr	r2, [r4, #20]
 801db04:	d016      	beq.n	801db34 <nema_cl_get_space+0x4c>
 801db06:	2b00      	cmp	r3, #0
 801db08:	bfb8      	it	lt
 801db0a:	3303      	addlt	r3, #3
 801db0c:	109b      	asrs	r3, r3, #2
 801db0e:	005b      	lsls	r3, r3, #1
 801db10:	4293      	cmp	r3, r2
 801db12:	bfcc      	ite	gt
 801db14:	4611      	movgt	r1, r2
 801db16:	1ad1      	suble	r1, r2, r3
 801db18:	1a5b      	subs	r3, r3, r1
 801db1a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801db1e:	1c41      	adds	r1, r0, #1
 801db20:	ebb1 0f63 	cmp.w	r1, r3, asr #1
 801db24:	da1a      	bge.n	801db5c <nema_cl_get_space+0x74>
 801db26:	68a0      	ldr	r0, [r4, #8]
 801db28:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801db2c:	6165      	str	r5, [r4, #20]
 801db2e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801db32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db34:	1a9b      	subs	r3, r3, r2
 801db36:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801db3a:	105b      	asrs	r3, r3, #1
 801db3c:	3b01      	subs	r3, #1
 801db3e:	4283      	cmp	r3, r0
 801db40:	dcf1      	bgt.n	801db26 <nema_cl_get_space+0x3e>
 801db42:	f7ff fe39 	bl	801d7b8 <nema_extend_bound_cl>
 801db46:	2800      	cmp	r0, #0
 801db48:	db27      	blt.n	801db9a <nema_cl_get_space+0xb2>
 801db4a:	6834      	ldr	r4, [r6, #0]
 801db4c:	6962      	ldr	r2, [r4, #20]
 801db4e:	68a0      	ldr	r0, [r4, #8]
 801db50:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801db54:	6165      	str	r5, [r4, #20]
 801db56:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801db5a:	e7ea      	b.n	801db32 <nema_cl_get_space+0x4a>
 801db5c:	b942      	cbnz	r2, 801db70 <nema_cl_get_space+0x88>
 801db5e:	f04f 33ff 	mov.w	r3, #4294967295
 801db62:	61e3      	str	r3, [r4, #28]
 801db64:	e7df      	b.n	801db26 <nema_cl_get_space+0x3e>
 801db66:	2080      	movs	r0, #128	; 0x80
 801db68:	f7fe fadc 	bl	801c124 <nema_set_error>
 801db6c:	4620      	mov	r0, r4
 801db6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db70:	4620      	mov	r0, r4
 801db72:	f7ff ff59 	bl	801da28 <nema_cl_submit_no_irq>
 801db76:	69e0      	ldr	r0, [r4, #28]
 801db78:	f7fe fa10 	bl	801bf9c <nema_rb_submit_cl_id>
 801db7c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801db80:	69e0      	ldr	r0, [r4, #28]
 801db82:	4298      	cmp	r0, r3
 801db84:	d1e1      	bne.n	801db4a <nema_cl_get_space+0x62>
 801db86:	f7e5 fc41 	bl	800340c <nema_wait_irq_cl>
 801db8a:	2800      	cmp	r0, #0
 801db8c:	dbdd      	blt.n	801db4a <nema_cl_get_space+0x62>
 801db8e:	f04f 33ff 	mov.w	r3, #4294967295
 801db92:	61e3      	str	r3, [r4, #28]
 801db94:	6834      	ldr	r4, [r6, #0]
 801db96:	6962      	ldr	r2, [r4, #20]
 801db98:	e7c5      	b.n	801db26 <nema_cl_get_space+0x3e>
 801db9a:	4638      	mov	r0, r7
 801db9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db9e:	bf00      	nop
 801dba0:	20198720 	.word	0x20198720

0801dba4 <nema_cl_add_cmd>:
 801dba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dba8:	4e30      	ldr	r6, [pc, #192]	; (801dc6c <nema_cl_add_cmd+0xc8>)
 801dbaa:	4607      	mov	r7, r0
 801dbac:	6834      	ldr	r4, [r6, #0]
 801dbae:	4688      	mov	r8, r1
 801dbb0:	b35c      	cbz	r4, 801dc0a <nema_cl_add_cmd+0x66>
 801dbb2:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 801dbb6:	f025 0308 	bic.w	r3, r5, #8
 801dbba:	f015 0020 	ands.w	r0, r5, #32
 801dbbe:	61a3      	str	r3, [r4, #24]
 801dbc0:	6923      	ldr	r3, [r4, #16]
 801dbc2:	d016      	beq.n	801dbf2 <nema_cl_add_cmd+0x4e>
 801dbc4:	2b00      	cmp	r3, #0
 801dbc6:	bfb8      	it	lt
 801dbc8:	3303      	addlt	r3, #3
 801dbca:	109b      	asrs	r3, r3, #2
 801dbcc:	005b      	lsls	r3, r3, #1
 801dbce:	4293      	cmp	r3, r2
 801dbd0:	bfcc      	ite	gt
 801dbd2:	4611      	movgt	r1, r2
 801dbd4:	1ad1      	suble	r1, r2, r3
 801dbd6:	1a5b      	subs	r3, r3, r1
 801dbd8:	2b03      	cmp	r3, #3
 801dbda:	dd2a      	ble.n	801dc32 <nema_cl_add_cmd+0x8e>
 801dbdc:	1c51      	adds	r1, r2, #1
 801dbde:	68a0      	ldr	r0, [r4, #8]
 801dbe0:	1c93      	adds	r3, r2, #2
 801dbe2:	f840 7022 	str.w	r7, [r0, r2, lsl #2]
 801dbe6:	68a2      	ldr	r2, [r4, #8]
 801dbe8:	f842 8021 	str.w	r8, [r2, r1, lsl #2]
 801dbec:	6163      	str	r3, [r4, #20]
 801dbee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbf2:	07a9      	lsls	r1, r5, #30
 801dbf4:	d515      	bpl.n	801dc22 <nema_cl_add_cmd+0x7e>
 801dbf6:	1d11      	adds	r1, r2, #4
 801dbf8:	4299      	cmp	r1, r3
 801dbfa:	dbef      	blt.n	801dbdc <nema_cl_add_cmd+0x38>
 801dbfc:	f7ff fddc 	bl	801d7b8 <nema_extend_bound_cl>
 801dc00:	2800      	cmp	r0, #0
 801dc02:	dbf4      	blt.n	801dbee <nema_cl_add_cmd+0x4a>
 801dc04:	6834      	ldr	r4, [r6, #0]
 801dc06:	6962      	ldr	r2, [r4, #20]
 801dc08:	e7e8      	b.n	801dbdc <nema_cl_add_cmd+0x38>
 801dc0a:	4620      	mov	r0, r4
 801dc0c:	f7e5 fca1 	bl	8003552 <nema_mutex_lock>
 801dc10:	4638      	mov	r0, r7
 801dc12:	4641      	mov	r1, r8
 801dc14:	f7fe f8fa 	bl	801be0c <nema_rb_inline_cmd>
 801dc18:	4620      	mov	r0, r4
 801dc1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dc1e:	f7e5 bca5 	b.w	800356c <nema_mutex_unlock>
 801dc22:	1c51      	adds	r1, r2, #1
 801dc24:	4299      	cmp	r1, r3
 801dc26:	dbda      	blt.n	801dbde <nema_cl_add_cmd+0x3a>
 801dc28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dc2c:	2008      	movs	r0, #8
 801dc2e:	f7fe ba79 	b.w	801c124 <nema_set_error>
 801dc32:	b922      	cbnz	r2, 801dc3e <nema_cl_add_cmd+0x9a>
 801dc34:	f04f 33ff 	mov.w	r3, #4294967295
 801dc38:	2101      	movs	r1, #1
 801dc3a:	61e3      	str	r3, [r4, #28]
 801dc3c:	e7cf      	b.n	801dbde <nema_cl_add_cmd+0x3a>
 801dc3e:	4620      	mov	r0, r4
 801dc40:	f7ff fef2 	bl	801da28 <nema_cl_submit_no_irq>
 801dc44:	69e0      	ldr	r0, [r4, #28]
 801dc46:	f7fe f9a9 	bl	801bf9c <nema_rb_submit_cl_id>
 801dc4a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801dc4e:	69e0      	ldr	r0, [r4, #28]
 801dc50:	4298      	cmp	r0, r3
 801dc52:	d1d7      	bne.n	801dc04 <nema_cl_add_cmd+0x60>
 801dc54:	f7e5 fbda 	bl	800340c <nema_wait_irq_cl>
 801dc58:	2800      	cmp	r0, #0
 801dc5a:	dbd3      	blt.n	801dc04 <nema_cl_add_cmd+0x60>
 801dc5c:	f04f 33ff 	mov.w	r3, #4294967295
 801dc60:	61e3      	str	r3, [r4, #28]
 801dc62:	6834      	ldr	r4, [r6, #0]
 801dc64:	6962      	ldr	r2, [r4, #20]
 801dc66:	1c51      	adds	r1, r2, #1
 801dc68:	e7b9      	b.n	801dbde <nema_cl_add_cmd+0x3a>
 801dc6a:	bf00      	nop
 801dc6c:	20198720 	.word	0x20198720

0801dc70 <nema_cl_submit>:
 801dc70:	2800      	cmp	r0, #0
 801dc72:	d05c      	beq.n	801dd2e <nema_cl_submit+0xbe>
 801dc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc76:	6944      	ldr	r4, [r0, #20]
 801dc78:	4605      	mov	r5, r0
 801dc7a:	b91c      	cbnz	r4, 801dc84 <nema_cl_submit+0x14>
 801dc7c:	f04f 33ff 	mov.w	r3, #4294967295
 801dc80:	61eb      	str	r3, [r5, #28]
 801dc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc84:	6983      	ldr	r3, [r0, #24]
 801dc86:	069e      	lsls	r6, r3, #26
 801dc88:	d527      	bpl.n	801dcda <nema_cl_submit+0x6a>
 801dc8a:	6903      	ldr	r3, [r0, #16]
 801dc8c:	68c7      	ldr	r7, [r0, #12]
 801dc8e:	2b00      	cmp	r3, #0
 801dc90:	bfb8      	it	lt
 801dc92:	3303      	addlt	r3, #3
 801dc94:	109b      	asrs	r3, r3, #2
 801dc96:	005e      	lsls	r6, r3, #1
 801dc98:	69c0      	ldr	r0, [r0, #28]
 801dc9a:	42b4      	cmp	r4, r6
 801dc9c:	bfa4      	itt	ge
 801dc9e:	1ba4      	subge	r4, r4, r6
 801dca0:	eb07 07c3 	addge.w	r7, r7, r3, lsl #3
 801dca4:	2800      	cmp	r0, #0
 801dca6:	da46      	bge.n	801dd36 <nema_cl_submit+0xc6>
 801dca8:	f04f 33ff 	mov.w	r3, #4294967295
 801dcac:	61eb      	str	r3, [r5, #28]
 801dcae:	4621      	mov	r1, r4
 801dcb0:	4638      	mov	r0, r7
 801dcb2:	f7fe f823 	bl	801bcfc <nema_rb_submit_cmdlist2>
 801dcb6:	696b      	ldr	r3, [r5, #20]
 801dcb8:	61e8      	str	r0, [r5, #28]
 801dcba:	429e      	cmp	r6, r3
 801dcbc:	bfd8      	it	le
 801dcbe:	2600      	movle	r6, #0
 801dcc0:	616e      	str	r6, [r5, #20]
 801dcc2:	f7fe f96b 	bl	801bf9c <nema_rb_submit_cl_id>
 801dcc6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801dcca:	69e8      	ldr	r0, [r5, #28]
 801dccc:	4298      	cmp	r0, r3
 801dcce:	d1d8      	bne.n	801dc82 <nema_cl_submit+0x12>
 801dcd0:	f7e5 fb9c 	bl	800340c <nema_wait_irq_cl>
 801dcd4:	2800      	cmp	r0, #0
 801dcd6:	dad1      	bge.n	801dc7c <nema_cl_submit+0xc>
 801dcd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dcda:	4604      	mov	r4, r0
 801dcdc:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 801dce0:	e012      	b.n	801dd08 <nema_cl_submit+0x98>
 801dce2:	6923      	ldr	r3, [r4, #16]
 801dce4:	6949      	ldr	r1, [r1, #20]
 801dce6:	4433      	add	r3, r6
 801dce8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801dcec:	69a3      	ldr	r3, [r4, #24]
 801dcee:	4620      	mov	r0, r4
 801dcf0:	f023 0308 	bic.w	r3, r3, #8
 801dcf4:	61a3      	str	r3, [r4, #24]
 801dcf6:	f7e5 fc22 	bl	800353e <nema_buffer_flush>
 801dcfa:	69a3      	ldr	r3, [r4, #24]
 801dcfc:	f043 0308 	orr.w	r3, r3, #8
 801dd00:	61a3      	str	r3, [r4, #24]
 801dd02:	6a24      	ldr	r4, [r4, #32]
 801dd04:	b134      	cbz	r4, 801dd14 <nema_cl_submit+0xa4>
 801dd06:	69a3      	ldr	r3, [r4, #24]
 801dd08:	0758      	lsls	r0, r3, #29
 801dd0a:	68a2      	ldr	r2, [r4, #8]
 801dd0c:	6a21      	ldr	r1, [r4, #32]
 801dd0e:	d4e8      	bmi.n	801dce2 <nema_cl_submit+0x72>
 801dd10:	071b      	lsls	r3, r3, #28
 801dd12:	d515      	bpl.n	801dd40 <nema_cl_submit+0xd0>
 801dd14:	2000      	movs	r0, #0
 801dd16:	f7e5 fc1c 	bl	8003552 <nema_mutex_lock>
 801dd1a:	6969      	ldr	r1, [r5, #20]
 801dd1c:	4628      	mov	r0, r5
 801dd1e:	f7fe f871 	bl	801be04 <nema_rb_submit_cmdlist>
 801dd22:	61e8      	str	r0, [r5, #28]
 801dd24:	2000      	movs	r0, #0
 801dd26:	f7e5 fc21 	bl	800356c <nema_mutex_unlock>
 801dd2a:	69e8      	ldr	r0, [r5, #28]
 801dd2c:	e7c9      	b.n	801dcc2 <nema_cl_submit+0x52>
 801dd2e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801dd32:	f7fe b9f7 	b.w	801c124 <nema_set_error>
 801dd36:	f7e5 fb69 	bl	800340c <nema_wait_irq_cl>
 801dd3a:	2800      	cmp	r0, #0
 801dd3c:	dab4      	bge.n	801dca8 <nema_cl_submit+0x38>
 801dd3e:	e7b6      	b.n	801dcae <nema_cl_submit+0x3e>
 801dd40:	4620      	mov	r0, r4
 801dd42:	f7e5 fbfc 	bl	800353e <nema_buffer_flush>
 801dd46:	69a3      	ldr	r3, [r4, #24]
 801dd48:	f043 0308 	orr.w	r3, r3, #8
 801dd4c:	61a3      	str	r3, [r4, #24]
 801dd4e:	e7e1      	b.n	801dd14 <nema_cl_submit+0xa4>

0801dd50 <nema_cl_wait>:
 801dd50:	b510      	push	{r4, lr}
 801dd52:	b170      	cbz	r0, 801dd72 <nema_cl_wait+0x22>
 801dd54:	4604      	mov	r4, r0
 801dd56:	69c0      	ldr	r0, [r0, #28]
 801dd58:	2800      	cmp	r0, #0
 801dd5a:	da04      	bge.n	801dd66 <nema_cl_wait+0x16>
 801dd5c:	f04f 33ff 	mov.w	r3, #4294967295
 801dd60:	61e3      	str	r3, [r4, #28]
 801dd62:	2000      	movs	r0, #0
 801dd64:	bd10      	pop	{r4, pc}
 801dd66:	f7e5 fb51 	bl	800340c <nema_wait_irq_cl>
 801dd6a:	2800      	cmp	r0, #0
 801dd6c:	daf6      	bge.n	801dd5c <nema_cl_wait+0xc>
 801dd6e:	2000      	movs	r0, #0
 801dd70:	bd10      	pop	{r4, pc}
 801dd72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801dd76:	f7fe f9d5 	bl	801c124 <nema_set_error>
 801dd7a:	f04f 30ff 	mov.w	r0, #4294967295
 801dd7e:	bd10      	pop	{r4, pc}

0801dd80 <nema_blender_init>:
 801dd80:	b530      	push	{r4, r5, lr}
 801dd82:	b085      	sub	sp, #20
 801dd84:	466d      	mov	r5, sp
 801dd86:	2418      	movs	r4, #24
 801dd88:	4b11      	ldr	r3, [pc, #68]	; (801ddd0 <nema_blender_init+0x50>)
 801dd8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801dd8c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801dd90:	2101      	movs	r1, #1
 801dd92:	4622      	mov	r2, r4
 801dd94:	4628      	mov	r0, r5
 801dd96:	440c      	add	r4, r1
 801dd98:	f7ff f974 	bl	801d084 <nema_load_frag_shader>
 801dd9c:	2c1f      	cmp	r4, #31
 801dd9e:	d1f7      	bne.n	801dd90 <nema_blender_init+0x10>
 801dda0:	4622      	mov	r2, r4
 801dda2:	2101      	movs	r1, #1
 801dda4:	a802      	add	r0, sp, #8
 801dda6:	f7ff f96d 	bl	801d084 <nema_load_frag_shader>
 801ddaa:	f7ff f829 	bl	801ce00 <nema_readHwConfig>
 801ddae:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 801ddb2:	2800      	cmp	r0, #0
 801ddb4:	bf14      	ite	ne
 801ddb6:	2201      	movne	r2, #1
 801ddb8:	2200      	moveq	r2, #0
 801ddba:	4b06      	ldr	r3, [pc, #24]	; (801ddd4 <nema_blender_init+0x54>)
 801ddbc:	701a      	strb	r2, [r3, #0]
 801ddbe:	d005      	beq.n	801ddcc <nema_blender_init+0x4c>
 801ddc0:	2200      	movs	r2, #0
 801ddc2:	4b05      	ldr	r3, [pc, #20]	; (801ddd8 <nema_blender_init+0x58>)
 801ddc4:	2001      	movs	r0, #1
 801ddc6:	601a      	str	r2, [r3, #0]
 801ddc8:	f7ff f97c 	bl	801d0c4 <nema_set_rop_blend_mode>
 801ddcc:	b005      	add	sp, #20
 801ddce:	bd30      	pop	{r4, r5, pc}
 801ddd0:	0802acf8 	.word	0x0802acf8
 801ddd4:	20198725 	.word	0x20198725
 801ddd8:	20000064 	.word	0x20000064

0801dddc <nema_set_blend>:
 801dddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dde0:	4ca5      	ldr	r4, [pc, #660]	; (801e078 <nema_set_blend+0x29c>)
 801dde2:	4683      	mov	fp, r0
 801dde4:	7820      	ldrb	r0, [r4, #0]
 801dde6:	b0a7      	sub	sp, #156	; 0x9c
 801dde8:	9102      	str	r1, [sp, #8]
 801ddea:	9200      	str	r2, [sp, #0]
 801ddec:	2800      	cmp	r0, #0
 801ddee:	f040 8233 	bne.w	801e258 <nema_set_blend+0x47c>
 801ddf2:	469a      	mov	sl, r3
 801ddf4:	465c      	mov	r4, fp
 801ddf6:	ea4f 535b 	mov.w	r3, fp, lsr #21
 801ddfa:	055b      	lsls	r3, r3, #21
 801ddfc:	930e      	str	r3, [sp, #56]	; 0x38
 801ddfe:	f40b 0300 	and.w	r3, fp, #8388608	; 0x800000
 801de02:	930c      	str	r3, [sp, #48]	; 0x30
 801de04:	f40b 0380 	and.w	r3, fp, #4194304	; 0x400000
 801de08:	f00b 010f 	and.w	r1, fp, #15
 801de0c:	930d      	str	r3, [sp, #52]	; 0x34
 801de0e:	f40b 1300 	and.w	r3, fp, #2097152	; 0x200000
 801de12:	930b      	str	r3, [sp, #44]	; 0x2c
 801de14:	9101      	str	r1, [sp, #4]
 801de16:	b2d2      	uxtb	r2, r2
 801de18:	fa5f f38a 	uxtb.w	r3, sl
 801de1c:	f3cb 2903 	ubfx	r9, fp, #8, #4
 801de20:	f00b 7100 	and.w	r1, fp, #33554432	; 0x2000000
 801de24:	f3cb 6840 	ubfx	r8, fp, #25, #1
 801de28:	9d02      	ldr	r5, [sp, #8]
 801de2a:	b2e8      	uxtb	r0, r5
 801de2c:	2804      	cmp	r0, #4
 801de2e:	4628      	mov	r0, r5
 801de30:	bf28      	it	cs
 801de32:	2000      	movcs	r0, #0
 801de34:	2a04      	cmp	r2, #4
 801de36:	9a00      	ldr	r2, [sp, #0]
 801de38:	bf28      	it	cs
 801de3a:	f04f 32ff 	movcs.w	r2, #4294967295
 801de3e:	2b04      	cmp	r3, #4
 801de40:	9002      	str	r0, [sp, #8]
 801de42:	9200      	str	r2, [sp, #0]
 801de44:	bf28      	it	cs
 801de46:	4682      	movcs	sl, r0
 801de48:	4602      	mov	r2, r0
 801de4a:	bf34      	ite	cc
 801de4c:	4650      	movcc	r0, sl
 801de4e:	2002      	movcs	r0, #2
 801de50:	4b8a      	ldr	r3, [pc, #552]	; (801e07c <nema_set_blend+0x2a0>)
 801de52:	9010      	str	r0, [sp, #64]	; 0x40
 801de54:	781b      	ldrb	r3, [r3, #0]
 801de56:	b14b      	cbz	r3, 801de6c <nema_set_blend+0x90>
 801de58:	f01b 7380 	ands.w	r3, fp, #16777216	; 0x1000000
 801de5c:	9303      	str	r3, [sp, #12]
 801de5e:	d102      	bne.n	801de66 <nema_set_blend+0x8a>
 801de60:	4552      	cmp	r2, sl
 801de62:	f000 830c 	beq.w	801e47e <nema_set_blend+0x6a2>
 801de66:	2001      	movs	r0, #1
 801de68:	f7ff f92c 	bl	801d0c4 <nema_set_rop_blend_mode>
 801de6c:	2c00      	cmp	r4, #0
 801de6e:	bfac      	ite	ge
 801de70:	4642      	movge	r2, r8
 801de72:	2201      	movlt	r2, #1
 801de74:	4b82      	ldr	r3, [pc, #520]	; (801e080 <nema_set_blend+0x2a4>)
 801de76:	f1bb 0f01 	cmp.w	fp, #1
 801de7a:	789b      	ldrb	r3, [r3, #2]
 801de7c:	9207      	str	r2, [sp, #28]
 801de7e:	9305      	str	r3, [sp, #20]
 801de80:	f000 80e0 	beq.w	801e044 <nema_set_blend+0x268>
 801de84:	f00b 4380 	and.w	r3, fp, #1073741824	; 0x40000000
 801de88:	9315      	str	r3, [sp, #84]	; 0x54
 801de8a:	f3cb 7380 	ubfx	r3, fp, #30, #1
 801de8e:	9306      	str	r3, [sp, #24]
 801de90:	f00b 5300 	and.w	r3, fp, #536870912	; 0x20000000
 801de94:	9309      	str	r3, [sp, #36]	; 0x24
 801de96:	9b01      	ldr	r3, [sp, #4]
 801de98:	f00b 5280 	and.w	r2, fp, #268435456	; 0x10000000
 801de9c:	2b05      	cmp	r3, #5
 801de9e:	f240 80df 	bls.w	801e060 <nema_set_blend+0x284>
 801dea2:	2301      	movs	r3, #1
 801dea4:	930a      	str	r3, [sp, #40]	; 0x28
 801dea6:	9304      	str	r3, [sp, #16]
 801dea8:	2303      	movs	r3, #3
 801deaa:	4976      	ldr	r1, [pc, #472]	; (801e084 <nema_set_blend+0x2a8>)
 801deac:	9303      	str	r3, [sp, #12]
 801deae:	9108      	str	r1, [sp, #32]
 801deb0:	4d75      	ldr	r5, [pc, #468]	; (801e088 <nema_set_blend+0x2ac>)
 801deb2:	2a00      	cmp	r2, #0
 801deb4:	4b75      	ldr	r3, [pc, #468]	; (801e08c <nema_set_blend+0x2b0>)
 801deb6:	bf18      	it	ne
 801deb8:	462b      	movne	r3, r5
 801deba:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 801debe:	f105 0502 	add.w	r5, r5, #2
 801dec2:	9312      	str	r3, [sp, #72]	; 0x48
 801dec4:	4b72      	ldr	r3, [pc, #456]	; (801e090 <nema_set_blend+0x2b4>)
 801dec6:	bf08      	it	eq
 801dec8:	462b      	moveq	r3, r5
 801deca:	f8df e20c 	ldr.w	lr, [pc, #524]	; 801e0d8 <nema_set_blend+0x2fc>
 801dece:	f8df c20c 	ldr.w	ip, [pc, #524]	; 801e0dc <nema_set_blend+0x300>
 801ded2:	9311      	str	r3, [sp, #68]	; 0x44
 801ded4:	bf14      	ite	ne
 801ded6:	4673      	movne	r3, lr
 801ded8:	4663      	moveq	r3, ip
 801deda:	4f6e      	ldr	r7, [pc, #440]	; (801e094 <nema_set_blend+0x2b8>)
 801dedc:	9314      	str	r3, [sp, #80]	; 0x50
 801dede:	4b6e      	ldr	r3, [pc, #440]	; (801e098 <nema_set_blend+0x2bc>)
 801dee0:	bf18      	it	ne
 801dee2:	463b      	movne	r3, r7
 801dee4:	f5a5 25c8 	sub.w	r5, r5, #409600	; 0x64000
 801dee8:	9313      	str	r3, [sp, #76]	; 0x4c
 801deea:	4b6c      	ldr	r3, [pc, #432]	; (801e09c <nema_set_blend+0x2c0>)
 801deec:	f1a5 0542 	sub.w	r5, r5, #66	; 0x42
 801def0:	496b      	ldr	r1, [pc, #428]	; (801e0a0 <nema_set_blend+0x2c4>)
 801def2:	bf18      	it	ne
 801def4:	4619      	movne	r1, r3
 801def6:	f1a3 033e 	sub.w	r3, r3, #62	; 0x3e
 801defa:	bf18      	it	ne
 801defc:	462b      	movne	r3, r5
 801defe:	4e69      	ldr	r6, [pc, #420]	; (801e0a4 <nema_set_blend+0x2c8>)
 801df00:	4f69      	ldr	r7, [pc, #420]	; (801e0a8 <nema_set_blend+0x2cc>)
 801df02:	461d      	mov	r5, r3
 801df04:	4b69      	ldr	r3, [pc, #420]	; (801e0ac <nema_set_blend+0x2d0>)
 801df06:	486a      	ldr	r0, [pc, #424]	; (801e0b0 <nema_set_blend+0x2d4>)
 801df08:	bf18      	it	ne
 801df0a:	4630      	movne	r0, r6
 801df0c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 801df10:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 801e0e0 <nema_set_blend+0x304>
 801df14:	f506 3650 	add.w	r6, r6, #212992	; 0x34000
 801df18:	bf04      	itt	eq
 801df1a:	46bc      	moveq	ip, r7
 801df1c:	461e      	moveq	r6, r3
 801df1e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 801df22:	f1a3 0340 	sub.w	r3, r3, #64	; 0x40
 801df26:	f1a7 0742 	sub.w	r7, r7, #66	; 0x42
 801df2a:	bf08      	it	eq
 801df2c:	461f      	moveq	r7, r3
 801df2e:	4c61      	ldr	r4, [pc, #388]	; (801e0b4 <nema_set_blend+0x2d8>)
 801df30:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 801e0e4 <nema_set_blend+0x308>
 801df34:	4a60      	ldr	r2, [pc, #384]	; (801e0b8 <nema_set_blend+0x2dc>)
 801df36:	bf18      	it	ne
 801df38:	4622      	movne	r2, r4
 801df3a:	f504 3450 	add.w	r4, r4, #212992	; 0x34000
 801df3e:	bf08      	it	eq
 801df40:	4674      	moveq	r4, lr
 801df42:	f8dd e018 	ldr.w	lr, [sp, #24]
 801df46:	f1b8 0f00 	cmp.w	r8, #0
 801df4a:	f040 8109 	bne.w	801e160 <nema_set_blend+0x384>
 801df4e:	9b07      	ldr	r3, [sp, #28]
 801df50:	2b00      	cmp	r3, #0
 801df52:	bf0c      	ite	eq
 801df54:	2300      	moveq	r3, #0
 801df56:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 801df5a:	930f      	str	r3, [sp, #60]	; 0x3c
 801df5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df5e:	2b00      	cmp	r3, #0
 801df60:	f040 8105 	bne.w	801e16e <nema_set_blend+0x392>
 801df64:	f01b 6f80 	tst.w	fp, #67108864	; 0x4000000
 801df68:	f000 81b4 	beq.w	801e2d4 <nema_set_blend+0x4f8>
 801df6c:	4684      	mov	ip, r0
 801df6e:	460e      	mov	r6, r1
 801df70:	4614      	mov	r4, r2
 801df72:	462f      	mov	r7, r5
 801df74:	f04f 0804 	mov.w	r8, #4
 801df78:	2200      	movs	r2, #0
 801df7a:	4850      	ldr	r0, [pc, #320]	; (801e0bc <nema_set_blend+0x2e0>)
 801df7c:	f00b 53c0 	and.w	r3, fp, #402653184	; 0x18000000
 801df80:	4293      	cmp	r3, r2
 801df82:	f850 302a 	ldr.w	r3, [r0, sl, lsl #2]
 801df86:	bf18      	it	ne
 801df88:	463e      	movne	r6, r7
 801df8a:	9309      	str	r3, [sp, #36]	; 0x24
 801df8c:	9b05      	ldr	r3, [sp, #20]
 801df8e:	bf16      	itet	ne
 801df90:	46a4      	movne	ip, r4
 801df92:	270e      	moveq	r7, #14
 801df94:	270c      	movne	r7, #12
 801df96:	9216      	str	r2, [sp, #88]	; 0x58
 801df98:	2b00      	cmp	r3, #0
 801df9a:	f000 80eb 	beq.w	801e174 <nema_set_blend+0x398>
 801df9e:	4b48      	ldr	r3, [pc, #288]	; (801e0c0 <nema_set_blend+0x2e4>)
 801dfa0:	4948      	ldr	r1, [pc, #288]	; (801e0c4 <nema_set_blend+0x2e8>)
 801dfa2:	9800      	ldr	r0, [sp, #0]
 801dfa4:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
 801dfa8:	1c43      	adds	r3, r0, #1
 801dfaa:	f000 8257 	beq.w	801e45c <nema_set_blend+0x680>
 801dfae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801dfb2:	4b45      	ldr	r3, [pc, #276]	; (801e0c8 <nema_set_blend+0x2ec>)
 801dfb4:	9204      	str	r2, [sp, #16]
 801dfb6:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801dfba:	e9cd 3118 	strd	r3, r1, [sp, #96]	; 0x60
 801dfbe:	2203      	movs	r2, #3
 801dfc0:	2102      	movs	r1, #2
 801dfc2:	4c42      	ldr	r4, [pc, #264]	; (801e0cc <nema_set_blend+0x2f0>)
 801dfc4:	f1b9 0f01 	cmp.w	r9, #1
 801dfc8:	f240 8110 	bls.w	801e1ec <nema_set_blend+0x410>
 801dfcc:	9b01      	ldr	r3, [sp, #4]
 801dfce:	2b05      	cmp	r3, #5
 801dfd0:	d803      	bhi.n	801dfda <nema_set_blend+0x1fe>
 801dfd2:	f01b 5f70 	tst.w	fp, #1006632960	; 0x3c000000
 801dfd6:	f000 8087 	beq.w	801e0e8 <nema_set_blend+0x30c>
 801dfda:	9b03      	ldr	r3, [sp, #12]
 801dfdc:	b933      	cbnz	r3, 801dfec <nema_set_blend+0x210>
 801dfde:	f1b9 0f00 	cmp.w	r9, #0
 801dfe2:	d103      	bne.n	801dfec <nema_set_blend+0x210>
 801dfe4:	9b07      	ldr	r3, [sp, #28]
 801dfe6:	2b00      	cmp	r3, #0
 801dfe8:	f000 81ca 	beq.w	801e380 <nema_set_blend+0x5a4>
 801dfec:	f1b8 0f1d 	cmp.w	r8, #29
 801dff0:	f000 8150 	beq.w	801e294 <nema_set_blend+0x4b8>
 801dff4:	4b36      	ldr	r3, [pc, #216]	; (801e0d0 <nema_set_blend+0x2f4>)
 801dff6:	a826      	add	r0, sp, #152	; 0x98
 801dff8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801dffc:	ea43 13ca 	orr.w	r3, r3, sl, lsl #7
 801e000:	9803      	ldr	r0, [sp, #12]
 801e002:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 801e006:	4303      	orrs	r3, r0
 801e008:	e941 3c10 	strd	r3, ip, [r1, #-64]	; 0x40
 801e00c:	1c55      	adds	r5, r2, #1
 801e00e:	f1b9 0f00 	cmp.w	r9, #0
 801e012:	f040 8150 	bne.w	801e2b6 <nema_set_blend+0x4da>
 801e016:	46ce      	mov	lr, r9
 801e018:	4b2d      	ldr	r3, [pc, #180]	; (801e0d0 <nema_set_blend+0x2f4>)
 801e01a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801e01e:	f8cd 9018 	str.w	r9, [sp, #24]
 801e022:	9308      	str	r3, [sp, #32]
 801e024:	9b07      	ldr	r3, [sp, #28]
 801e026:	2b00      	cmp	r3, #0
 801e028:	d163      	bne.n	801e0f2 <nema_set_blend+0x316>
 801e02a:	4b2a      	ldr	r3, [pc, #168]	; (801e0d4 <nema_set_blend+0x2f8>)
 801e02c:	f8dd a008 	ldr.w	sl, [sp, #8]
 801e030:	9308      	str	r3, [sp, #32]
 801e032:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801e036:	9f01      	ldr	r7, [sp, #4]
 801e038:	e061      	b.n	801e0fe <nema_set_blend+0x322>
 801e03a:	f04f 0900 	mov.w	r9, #0
 801e03e:	46c8      	mov	r8, r9
 801e040:	f8cd 901c 	str.w	r9, [sp, #28]
 801e044:	2b00      	cmp	r3, #0
 801e046:	f000 8153 	beq.w	801e2f0 <nema_set_blend+0x514>
 801e04a:	9b01      	ldr	r3, [sp, #4]
 801e04c:	2b05      	cmp	r3, #5
 801e04e:	f200 8169 	bhi.w	801e324 <nema_set_blend+0x548>
 801e052:	2300      	movs	r3, #0
 801e054:	f04f 0b01 	mov.w	fp, #1
 801e058:	461a      	mov	r2, r3
 801e05a:	9306      	str	r3, [sp, #24]
 801e05c:	9309      	str	r3, [sp, #36]	; 0x24
 801e05e:	9315      	str	r3, [sp, #84]	; 0x54
 801e060:	9b07      	ldr	r3, [sp, #28]
 801e062:	2b00      	cmp	r3, #0
 801e064:	f000 8200 	beq.w	801e468 <nema_set_blend+0x68c>
 801e068:	930a      	str	r3, [sp, #40]	; 0x28
 801e06a:	4b06      	ldr	r3, [pc, #24]	; (801e084 <nema_set_blend+0x2a8>)
 801e06c:	2001      	movs	r0, #1
 801e06e:	9308      	str	r3, [sp, #32]
 801e070:	2303      	movs	r3, #3
 801e072:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801e076:	e71b      	b.n	801deb0 <nema_set_blend+0xd4>
 801e078:	20198724 	.word	0x20198724
 801e07c:	20198725 	.word	0x20198725
 801e080:	20198934 	.word	0x20198934
 801e084:	080c0003 	.word	0x080c0003
 801e088:	000761c5 	.word	0x000761c5
 801e08c:	000761c7 	.word	0x000761c7
 801e090:	800761c5 	.word	0x800761c5
 801e094:	80076185 	.word	0x80076185
 801e098:	80076187 	.word	0x80076187
 801e09c:	800121c5 	.word	0x800121c5
 801e0a0:	800121c7 	.word	0x800121c7
 801e0a4:	000121c5 	.word	0x000121c5
 801e0a8:	000461c7 	.word	0x000461c7
 801e0ac:	800461c7 	.word	0x800461c7
 801e0b0:	000121c7 	.word	0x000121c7
 801e0b4:	00012185 	.word	0x00012185
 801e0b8:	00012187 	.word	0x00012187
 801e0bc:	0802c13c 	.word	0x0802c13c
 801e0c0:	02009408 	.word	0x02009408
 801e0c4:	00f40182 	.word	0x00f40182
 801e0c8:	000c100b 	.word	0x000c100b
 801e0cc:	1000fc00 	.word	0x1000fc00
 801e0d0:	080c0000 	.word	0x080c0000
 801e0d4:	080c0002 	.word	0x080c0002
 801e0d8:	00076185 	.word	0x00076185
 801e0dc:	00076187 	.word	0x00076187
 801e0e0:	000461c5 	.word	0x000461c5
 801e0e4:	00046187 	.word	0x00046187
 801e0e8:	4615      	mov	r5, r2
 801e0ea:	460a      	mov	r2, r1
 801e0ec:	f1b9 0f00 	cmp.w	r9, #0
 801e0f0:	d098      	beq.n	801e024 <nema_set_blend+0x248>
 801e0f2:	9b06      	ldr	r3, [sp, #24]
 801e0f4:	2b00      	cmp	r3, #0
 801e0f6:	f000 8202 	beq.w	801e4fe <nema_set_blend+0x722>
 801e0fa:	2600      	movs	r6, #0
 801e0fc:	9f01      	ldr	r7, [sp, #4]
 801e0fe:	48c1      	ldr	r0, [pc, #772]	; (801e404 <nema_set_blend+0x628>)
 801e100:	49c1      	ldr	r1, [pc, #772]	; (801e408 <nema_set_blend+0x62c>)
 801e102:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
 801e106:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801e10a:	015b      	lsls	r3, r3, #5
 801e10c:	ea43 3387 	orr.w	r3, r3, r7, lsl #14
 801e110:	9f08      	ldr	r7, [sp, #32]
 801e112:	ea47 5e0e 	orr.w	lr, r7, lr, lsl #20
 801e116:	4fbd      	ldr	r7, [pc, #756]	; (801e40c <nema_set_blend+0x630>)
 801e118:	ea4e 1eca 	orr.w	lr, lr, sl, lsl #7
 801e11c:	431f      	orrs	r7, r3
 801e11e:	ab26      	add	r3, sp, #152	; 0x98
 801e120:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801e124:	4337      	orrs	r7, r6
 801e126:	e942 e710 	strd	lr, r7, [r2, #-64]	; 0x40
 801e12a:	2e00      	cmp	r6, #0
 801e12c:	f000 813f 	beq.w	801e3ae <nema_set_blend+0x5d2>
 801e130:	9804      	ldr	r0, [sp, #16]
 801e132:	f7fe fead 	bl	801ce90 <nema_matmul_bypass>
 801e136:	4629      	mov	r1, r5
 801e138:	2200      	movs	r2, #0
 801e13a:	a816      	add	r0, sp, #88	; 0x58
 801e13c:	f7fe ffa2 	bl	801d084 <nema_load_frag_shader>
 801e140:	4bb3      	ldr	r3, [pc, #716]	; (801e410 <nema_set_blend+0x634>)
 801e142:	f1c5 0520 	rsb	r5, r5, #32
 801e146:	6818      	ldr	r0, [r3, #0]
 801e148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e14a:	ea43 0800 	orr.w	r8, r3, r0
 801e14e:	ea48 0005 	orr.w	r0, r8, r5
 801e152:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 801e156:	f7fe ffaf 	bl	801d0b8 <nema_set_frag_ptr>
 801e15a:	b027      	add	sp, #156	; 0x9c
 801e15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e160:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801e164:	930f      	str	r3, [sp, #60]	; 0x3c
 801e166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e168:	2b00      	cmp	r3, #0
 801e16a:	f43f aefb 	beq.w	801df64 <nema_set_blend+0x188>
 801e16e:	f04f 0811 	mov.w	r8, #17
 801e172:	e701      	b.n	801df78 <nema_set_blend+0x19c>
 801e174:	9b00      	ldr	r3, [sp, #0]
 801e176:	1c5a      	adds	r2, r3, #1
 801e178:	f000 8136 	beq.w	801e3e8 <nema_set_blend+0x60c>
 801e17c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801e180:	9a05      	ldr	r2, [sp, #20]
 801e182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801e186:	9204      	str	r2, [sp, #16]
 801e188:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e18a:	2a00      	cmp	r2, #0
 801e18c:	f000 80a9 	beq.w	801e2e2 <nema_set_blend+0x506>
 801e190:	f44f 2440 	mov.w	r4, #786432	; 0xc0000
 801e194:	499f      	ldr	r1, [pc, #636]	; (801e414 <nema_set_blend+0x638>)
 801e196:	4aa0      	ldr	r2, [pc, #640]	; (801e418 <nema_set_blend+0x63c>)
 801e198:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 801e19c:	9219      	str	r2, [sp, #100]	; 0x64
 801e19e:	2204      	movs	r2, #4
 801e1a0:	9116      	str	r1, [sp, #88]	; 0x58
 801e1a2:	9205      	str	r2, [sp, #20]
 801e1a4:	2102      	movs	r1, #2
 801e1a6:	2203      	movs	r2, #3
 801e1a8:	e9cd 5417 	strd	r5, r4, [sp, #92]	; 0x5c
 801e1ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e1ae:	2c00      	cmp	r4, #0
 801e1b0:	d04f      	beq.n	801e252 <nema_set_blend+0x476>
 801e1b2:	9c00      	ldr	r4, [sp, #0]
 801e1b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 801e1b8:	d04b      	beq.n	801e252 <nema_set_blend+0x476>
 801e1ba:	f241 050b 	movw	r5, #4107	; 0x100b
 801e1be:	2300      	movs	r3, #0
 801e1c0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 801e1c4:	a826      	add	r0, sp, #152	; 0x98
 801e1c6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801e1ca:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e1cc:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 801e1d0:	ea45 11c1 	orr.w	r1, r5, r1, lsl #7
 801e1d4:	f1b9 0f01 	cmp.w	r9, #1
 801e1d8:	f840 1c40 	str.w	r1, [r0, #-64]
 801e1dc:	f444 4420 	orr.w	r4, r4, #40960	; 0xa000
 801e1e0:	4611      	mov	r1, r2
 801e1e2:	f840 3c3c 	str.w	r3, [r0, #-60]
 801e1e6:	9a05      	ldr	r2, [sp, #20]
 801e1e8:	f63f aef0 	bhi.w	801dfcc <nema_set_blend+0x1f0>
 801e1ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e1ee:	2b00      	cmp	r3, #0
 801e1f0:	f47f aeec 	bne.w	801dfcc <nema_set_blend+0x1f0>
 801e1f4:	9b00      	ldr	r3, [sp, #0]
 801e1f6:	3301      	adds	r3, #1
 801e1f8:	f47f aee8 	bne.w	801dfcc <nema_set_blend+0x1f0>
 801e1fc:	9b02      	ldr	r3, [sp, #8]
 801e1fe:	4553      	cmp	r3, sl
 801e200:	f47f aee4 	bne.w	801dfcc <nema_set_blend+0x1f0>
 801e204:	f1b9 0f00 	cmp.w	r9, #0
 801e208:	bf15      	itete	ne
 801e20a:	f44f 6600 	movne.w	r6, #2048	; 0x800
 801e20e:	f44f 5600 	moveq.w	r6, #8192	; 0x2000
 801e212:	f44f 1500 	movne.w	r5, #2097152	; 0x200000
 801e216:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
 801e21a:	9f01      	ldr	r7, [sp, #4]
 801e21c:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 801e404 <nema_set_blend+0x628>
 801e220:	4879      	ldr	r0, [pc, #484]	; (801e408 <nema_set_blend+0x62c>)
 801e222:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 801e226:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
 801e22a:	015b      	lsls	r3, r3, #5
 801e22c:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 801e230:	f043 430a 	orr.w	r3, r3, #2315255808	; 0x8a000000
 801e234:	f043 0306 	orr.w	r3, r3, #6
 801e238:	4333      	orrs	r3, r6
 801e23a:	432b      	orrs	r3, r5
 801e23c:	4877      	ldr	r0, [pc, #476]	; (801e41c <nema_set_blend+0x640>)
 801e23e:	9d02      	ldr	r5, [sp, #8]
 801e240:	ae26      	add	r6, sp, #152	; 0x98
 801e242:	ea40 10c5 	orr.w	r0, r0, r5, lsl #7
 801e246:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 801e24a:	4615      	mov	r5, r2
 801e24c:	e941 0310 	strd	r0, r3, [r1, #-64]	; 0x40
 801e250:	e76e      	b.n	801e130 <nema_set_blend+0x354>
 801e252:	f043 5480 	orr.w	r4, r3, #268435456	; 0x10000000
 801e256:	e6b5      	b.n	801dfc4 <nema_set_blend+0x1e8>
 801e258:	f04f 3020 	mov.w	r0, #538976288	; 0x20202020
 801e25c:	f7fe ff44 	bl	801d0e8 <nema_set_raster_color>
 801e260:	2000      	movs	r0, #0
 801e262:	f7fd ff93 	bl	801c18c <nema_enable_gradient>
 801e266:	f04f 0800 	mov.w	r8, #0
 801e26a:	f04f 0901 	mov.w	r9, #1
 801e26e:	23ff      	movs	r3, #255	; 0xff
 801e270:	f240 1401 	movw	r4, #257	; 0x101
 801e274:	f04f 3aff 	mov.w	sl, #4294967295
 801e278:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801e27c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801e280:	e9cd 880c 	strd	r8, r8, [sp, #48]	; 0x30
 801e284:	4641      	mov	r1, r8
 801e286:	f8cd 9004 	str.w	r9, [sp, #4]
 801e28a:	461a      	mov	r2, r3
 801e28c:	46a3      	mov	fp, r4
 801e28e:	f8cd a000 	str.w	sl, [sp]
 801e292:	e5c9      	b.n	801de28 <nema_set_blend+0x4c>
 801e294:	2f0e      	cmp	r7, #14
 801e296:	f47f aead 	bne.w	801dff4 <nema_set_blend+0x218>
 801e29a:	9b03      	ldr	r3, [sp, #12]
 801e29c:	2b00      	cmp	r3, #0
 801e29e:	f47f aea9 	bne.w	801dff4 <nema_set_blend+0x218>
 801e2a2:	9b06      	ldr	r3, [sp, #24]
 801e2a4:	2b00      	cmp	r3, #0
 801e2a6:	f47f aea5 	bne.w	801dff4 <nema_set_blend+0x218>
 801e2aa:	4615      	mov	r5, r2
 801e2ac:	460a      	mov	r2, r1
 801e2ae:	f1b9 0f00 	cmp.w	r9, #0
 801e2b2:	f43f aeb0 	beq.w	801e016 <nema_set_blend+0x23a>
 801e2b6:	f04f 0e00 	mov.w	lr, #0
 801e2ba:	4b59      	ldr	r3, [pc, #356]	; (801e420 <nema_set_blend+0x644>)
 801e2bc:	9308      	str	r3, [sp, #32]
 801e2be:	9b01      	ldr	r3, [sp, #4]
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	f000 8123 	beq.w	801e50c <nema_set_blend+0x730>
 801e2c6:	2b01      	cmp	r3, #1
 801e2c8:	f04f 0600 	mov.w	r6, #0
 801e2cc:	f000 8137 	beq.w	801e53e <nema_set_blend+0x762>
 801e2d0:	461f      	mov	r7, r3
 801e2d2:	e714      	b.n	801e0fe <nema_set_blend+0x322>
 801e2d4:	e9dd 6c11 	ldrd	r6, ip, [sp, #68]	; 0x44
 801e2d8:	e9dd 7413 	ldrd	r7, r4, [sp, #76]	; 0x4c
 801e2dc:	f04f 081d 	mov.w	r8, #29
 801e2e0:	e64a      	b.n	801df78 <nema_set_blend+0x19c>
 801e2e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e2e4:	2a00      	cmp	r2, #0
 801e2e6:	d046      	beq.n	801e376 <nema_set_blend+0x59a>
 801e2e8:	f44f 2440 	mov.w	r4, #786432	; 0xc0000
 801e2ec:	494d      	ldr	r1, [pc, #308]	; (801e424 <nema_set_blend+0x648>)
 801e2ee:	e752      	b.n	801e196 <nema_set_blend+0x3ba>
 801e2f0:	9b02      	ldr	r3, [sp, #8]
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	f47f aea9 	bne.w	801e04a <nema_set_blend+0x26e>
 801e2f8:	9b00      	ldr	r3, [sp, #0]
 801e2fa:	3301      	adds	r3, #1
 801e2fc:	f000 8114 	beq.w	801e528 <nema_set_blend+0x74c>
 801e300:	9802      	ldr	r0, [sp, #8]
 801e302:	f7fe fdc5 	bl	801ce90 <nema_matmul_bypass>
 801e306:	4b42      	ldr	r3, [pc, #264]	; (801e410 <nema_set_blend+0x634>)
 801e308:	4947      	ldr	r1, [pc, #284]	; (801e428 <nema_set_blend+0x64c>)
 801e30a:	9800      	ldr	r0, [sp, #0]
 801e30c:	681a      	ldr	r2, [r3, #0]
 801e30e:	4b47      	ldr	r3, [pc, #284]	; (801e42c <nema_set_blend+0x650>)
 801e310:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 801e314:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e318:	4318      	orrs	r0, r3
 801e31a:	f7fe fecd 	bl	801d0b8 <nema_set_frag_ptr>
 801e31e:	b027      	add	sp, #156	; 0x9c
 801e320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e324:	2301      	movs	r3, #1
 801e326:	930a      	str	r3, [sp, #40]	; 0x28
 801e328:	9304      	str	r3, [sp, #16]
 801e32a:	469b      	mov	fp, r3
 801e32c:	2303      	movs	r3, #3
 801e32e:	f04f 0e00 	mov.w	lr, #0
 801e332:	9303      	str	r3, [sp, #12]
 801e334:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801e338:	f503 2340 	add.w	r3, r3, #786432	; 0xc0000
 801e33c:	9308      	str	r3, [sp, #32]
 801e33e:	4b3c      	ldr	r3, [pc, #240]	; (801e430 <nema_set_blend+0x654>)
 801e340:	f8cd e018 	str.w	lr, [sp, #24]
 801e344:	9312      	str	r3, [sp, #72]	; 0x48
 801e346:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801e34a:	9311      	str	r3, [sp, #68]	; 0x44
 801e34c:	4b39      	ldr	r3, [pc, #228]	; (801e434 <nema_set_blend+0x658>)
 801e34e:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 801e352:	9314      	str	r3, [sp, #80]	; 0x50
 801e354:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801e358:	9313      	str	r3, [sp, #76]	; 0x4c
 801e35a:	f5a3 23c8 	sub.w	r3, r3, #409600	; 0x64000
 801e35e:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 801e362:	4835      	ldr	r0, [pc, #212]	; (801e438 <nema_set_blend+0x65c>)
 801e364:	4935      	ldr	r1, [pc, #212]	; (801e43c <nema_set_blend+0x660>)
 801e366:	4a36      	ldr	r2, [pc, #216]	; (801e440 <nema_set_blend+0x664>)
 801e368:	461d      	mov	r5, r3
 801e36a:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 801e458 <nema_set_blend+0x67c>
 801e36e:	4e35      	ldr	r6, [pc, #212]	; (801e444 <nema_set_blend+0x668>)
 801e370:	4c35      	ldr	r4, [pc, #212]	; (801e448 <nema_set_blend+0x66c>)
 801e372:	4f36      	ldr	r7, [pc, #216]	; (801e44c <nema_set_blend+0x670>)
 801e374:	e5e7      	b.n	801df46 <nema_set_blend+0x16a>
 801e376:	4611      	mov	r1, r2
 801e378:	2202      	movs	r2, #2
 801e37a:	9205      	str	r2, [sp, #20]
 801e37c:	2201      	movs	r2, #1
 801e37e:	e715      	b.n	801e1ac <nema_set_blend+0x3d0>
 801e380:	9b01      	ldr	r3, [sp, #4]
 801e382:	2b01      	cmp	r3, #1
 801e384:	f47f ae32 	bne.w	801dfec <nema_set_blend+0x210>
 801e388:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e38a:	2b00      	cmp	r3, #0
 801e38c:	f47f ae2e 	bne.w	801dfec <nema_set_blend+0x210>
 801e390:	a826      	add	r0, sp, #152	; 0x98
 801e392:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801e396:	4b21      	ldr	r3, [pc, #132]	; (801e41c <nema_set_blend+0x640>)
 801e398:	9802      	ldr	r0, [sp, #8]
 801e39a:	f841 6c3c 	str.w	r6, [r1, #-60]
 801e39e:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801e3a2:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 801e3a6:	4615      	mov	r5, r2
 801e3a8:	f841 3c40 	str.w	r3, [r1, #-64]
 801e3ac:	e6c0      	b.n	801e130 <nema_set_blend+0x354>
 801e3ae:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 801e3b2:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 801e3b6:	462a      	mov	r2, r5
 801e3b8:	3501      	adds	r5, #1
 801e3ba:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 801e3be:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
 801e3c2:	0140      	lsls	r0, r0, #5
 801e3c4:	4b22      	ldr	r3, [pc, #136]	; (801e450 <nema_set_blend+0x674>)
 801e3c6:	ea40 3081 	orr.w	r0, r0, r1, lsl #14
 801e3ca:	4303      	orrs	r3, r0
 801e3cc:	4921      	ldr	r1, [pc, #132]	; (801e454 <nema_set_blend+0x678>)
 801e3ce:	9802      	ldr	r0, [sp, #8]
 801e3d0:	433b      	orrs	r3, r7
 801e3d2:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 801e3d6:	a826      	add	r0, sp, #152	; 0x98
 801e3d8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 801e3dc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e3de:	4333      	orrs	r3, r6
 801e3e0:	4301      	orrs	r1, r0
 801e3e2:	e942 1310 	strd	r1, r3, [r2, #-64]	; 0x40
 801e3e6:	e6a3      	b.n	801e130 <nema_set_blend+0x354>
 801e3e8:	9b04      	ldr	r3, [sp, #16]
 801e3ea:	2b00      	cmp	r3, #0
 801e3ec:	f000 8082 	beq.w	801e4f4 <nema_set_blend+0x718>
 801e3f0:	9a05      	ldr	r2, [sp, #20]
 801e3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3f4:	9203      	str	r2, [sp, #12]
 801e3f6:	920a      	str	r2, [sp, #40]	; 0x28
 801e3f8:	4a09      	ldr	r2, [pc, #36]	; (801e420 <nema_set_blend+0x644>)
 801e3fa:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 801e3fe:	9208      	str	r2, [sp, #32]
 801e400:	e6c2      	b.n	801e188 <nema_set_blend+0x3ac>
 801e402:	bf00      	nop
 801e404:	0802c14c 	.word	0x0802c14c
 801e408:	0802c17c 	.word	0x0802c17c
 801e40c:	0a002007 	.word	0x0a002007
 801e410:	20000064 	.word	0x20000064
 801e414:	100c118b 	.word	0x100c118b
 801e418:	0081a042 	.word	0x0081a042
 801e41c:	080c0002 	.word	0x080c0002
 801e420:	080c0000 	.word	0x080c0000
 801e424:	100c1183 	.word	0x100c1183
 801e428:	0802c13c 	.word	0x0802c13c
 801e42c:	141f801f 	.word	0x141f801f
 801e430:	000761c7 	.word	0x000761c7
 801e434:	00076187 	.word	0x00076187
 801e438:	000121c7 	.word	0x000121c7
 801e43c:	800121c7 	.word	0x800121c7
 801e440:	00012187 	.word	0x00012187
 801e444:	800461c7 	.word	0x800461c7
 801e448:	00046187 	.word	0x00046187
 801e44c:	80046187 	.word	0x80046187
 801e450:	80080206 	.word	0x80080206
 801e454:	004e0002 	.word	0x004e0002
 801e458:	000461c7 	.word	0x000461c7
 801e45c:	2301      	movs	r3, #1
 801e45e:	2202      	movs	r2, #2
 801e460:	9304      	str	r3, [sp, #16]
 801e462:	4619      	mov	r1, r3
 801e464:	4c38      	ldr	r4, [pc, #224]	; (801e548 <nema_set_blend+0x76c>)
 801e466:	e5ad      	b.n	801dfc4 <nema_set_blend+0x1e8>
 801e468:	f1b9 0f00 	cmp.w	r9, #0
 801e46c:	d055      	beq.n	801e51a <nema_set_blend+0x73e>
 801e46e:	2301      	movs	r3, #1
 801e470:	2103      	movs	r1, #3
 801e472:	930a      	str	r3, [sp, #40]	; 0x28
 801e474:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801e478:	4b34      	ldr	r3, [pc, #208]	; (801e54c <nema_set_blend+0x770>)
 801e47a:	9308      	str	r3, [sp, #32]
 801e47c:	e518      	b.n	801deb0 <nema_set_blend+0xd4>
 801e47e:	2c00      	cmp	r4, #0
 801e480:	bfbd      	ittte	lt
 801e482:	f02b 4b00 	biclt.w	fp, fp, #2147483648	; 0x80000000
 801e486:	f04f 4202 	movlt.w	r2, #2181038080	; 0x82000000
 801e48a:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 801e48e:	f04f 7200 	movge.w	r2, #33554432	; 0x2000000
 801e492:	b111      	cbz	r1, 801e49a <nema_set_blend+0x6be>
 801e494:	4613      	mov	r3, r2
 801e496:	f02b 7b00 	bic.w	fp, fp, #33554432	; 0x2000000
 801e49a:	9a01      	ldr	r2, [sp, #4]
 801e49c:	ea42 2009 	orr.w	r0, r2, r9, lsl #8
 801e4a0:	4318      	orrs	r0, r3
 801e4a2:	f7fe fe0f 	bl	801d0c4 <nema_set_rop_blend_mode>
 801e4a6:	ea4f 505b 	mov.w	r0, fp, lsr #21
 801e4aa:	4b29      	ldr	r3, [pc, #164]	; (801e550 <nema_set_blend+0x774>)
 801e4ac:	0540      	lsls	r0, r0, #21
 801e4ae:	f040 0201 	orr.w	r2, r0, #1
 801e4b2:	789b      	ldrb	r3, [r3, #2]
 801e4b4:	2a01      	cmp	r2, #1
 801e4b6:	9201      	str	r2, [sp, #4]
 801e4b8:	9305      	str	r3, [sp, #20]
 801e4ba:	f43f adbe 	beq.w	801e03a <nema_set_blend+0x25e>
 801e4be:	f00b 4380 	and.w	r3, fp, #1073741824	; 0x40000000
 801e4c2:	9315      	str	r3, [sp, #84]	; 0x54
 801e4c4:	f3cb 7380 	ubfx	r3, fp, #30, #1
 801e4c8:	9306      	str	r3, [sp, #24]
 801e4ca:	f00b 5300 	and.w	r3, fp, #536870912	; 0x20000000
 801e4ce:	9309      	str	r3, [sp, #36]	; 0x24
 801e4d0:	2301      	movs	r3, #1
 801e4d2:	f04f 0900 	mov.w	r9, #0
 801e4d6:	f00b 5280 	and.w	r2, fp, #268435456	; 0x10000000
 801e4da:	f8dd b004 	ldr.w	fp, [sp, #4]
 801e4de:	9301      	str	r3, [sp, #4]
 801e4e0:	4b1c      	ldr	r3, [pc, #112]	; (801e554 <nema_set_blend+0x778>)
 801e4e2:	46c8      	mov	r8, r9
 801e4e4:	f8cd 901c 	str.w	r9, [sp, #28]
 801e4e8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801e4ec:	f8cd 9010 	str.w	r9, [sp, #16]
 801e4f0:	9308      	str	r3, [sp, #32]
 801e4f2:	e4dd      	b.n	801deb0 <nema_set_blend+0xd4>
 801e4f4:	2201      	movs	r2, #1
 801e4f6:	9b05      	ldr	r3, [sp, #20]
 801e4f8:	9204      	str	r2, [sp, #16]
 801e4fa:	930a      	str	r3, [sp, #40]	; 0x28
 801e4fc:	e644      	b.n	801e188 <nema_set_blend+0x3ac>
 801e4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e500:	2b00      	cmp	r3, #0
 801e502:	f43f aedc 	beq.w	801e2be <nema_set_blend+0x4e2>
 801e506:	9e06      	ldr	r6, [sp, #24]
 801e508:	9f01      	ldr	r7, [sp, #4]
 801e50a:	e5f8      	b.n	801e0fe <nema_set_blend+0x322>
 801e50c:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 801e510:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 801e514:	4910      	ldr	r1, [pc, #64]	; (801e558 <nema_set_blend+0x77c>)
 801e516:	4811      	ldr	r0, [pc, #68]	; (801e55c <nema_set_blend+0x780>)
 801e518:	e74f      	b.n	801e3ba <nema_set_blend+0x5de>
 801e51a:	4b0e      	ldr	r3, [pc, #56]	; (801e554 <nema_set_blend+0x778>)
 801e51c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801e520:	9308      	str	r3, [sp, #32]
 801e522:	e9cd 9903 	strd	r9, r9, [sp, #12]
 801e526:	e4c3      	b.n	801deb0 <nema_set_blend+0xd4>
 801e528:	2001      	movs	r0, #1
 801e52a:	f7fe fcb1 	bl	801ce90 <nema_matmul_bypass>
 801e52e:	4a0c      	ldr	r2, [pc, #48]	; (801e560 <nema_set_blend+0x784>)
 801e530:	4b0c      	ldr	r3, [pc, #48]	; (801e564 <nema_set_blend+0x788>)
 801e532:	6810      	ldr	r0, [r2, #0]
 801e534:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801e538:	f7fe fdbe 	bl	801d0b8 <nema_set_frag_ptr>
 801e53c:	e6ef      	b.n	801e31e <nema_set_blend+0x542>
 801e53e:	4637      	mov	r7, r6
 801e540:	4905      	ldr	r1, [pc, #20]	; (801e558 <nema_set_blend+0x77c>)
 801e542:	4806      	ldr	r0, [pc, #24]	; (801e55c <nema_set_blend+0x780>)
 801e544:	e739      	b.n	801e3ba <nema_set_blend+0x5de>
 801e546:	bf00      	nop
 801e548:	1000fc00 	.word	0x1000fc00
 801e54c:	080c0003 	.word	0x080c0003
 801e550:	20198934 	.word	0x20198934
 801e554:	080c0000 	.word	0x080c0000
 801e558:	0802c17c 	.word	0x0802c17c
 801e55c:	0802c14c 	.word	0x0802c14c
 801e560:	20000064 	.word	0x20000064
 801e564:	141f001f 	.word	0x141f001f

0801e568 <nema_set_const_color>:
 801e568:	b510      	push	{r4, lr}
 801e56a:	4604      	mov	r4, r0
 801e56c:	2001      	movs	r0, #1
 801e56e:	4621      	mov	r1, r4
 801e570:	f7fd fde4 	bl	801c13c <nema_set_const_reg>
 801e574:	4b04      	ldr	r3, [pc, #16]	; (801e588 <nema_set_const_color+0x20>)
 801e576:	781b      	ldrb	r3, [r3, #0]
 801e578:	b903      	cbnz	r3, 801e57c <nema_set_const_color+0x14>
 801e57a:	bd10      	pop	{r4, pc}
 801e57c:	4620      	mov	r0, r4
 801e57e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e582:	f7fe bda5 	b.w	801d0d0 <nema_set_rop_const_color>
 801e586:	bf00      	nop
 801e588:	20198725 	.word	0x20198725

0801e58c <_ZN8touchgfx8HALGPU2D17unlockFrameBufferEv>:
 801e58c:	f7f8 beb0 	b.w	80172f0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>

0801e590 <_ZN8touchgfx8HALGPU2D10beginFrameEv>:
 801e590:	2200      	movs	r2, #0
 801e592:	f880 20a5 	strb.w	r2, [r0, #165]	; 0xa5
 801e596:	f7f8 bdaf 	b.w	80170f8 <_ZN8touchgfx3HAL10beginFrameEv>
 801e59a:	bf00      	nop

0801e59c <_ZN8touchgfx8HALGPU2D15lockFrameBufferEv>:
 801e59c:	b510      	push	{r4, lr}
 801e59e:	4604      	mov	r4, r0
 801e5a0:	307c      	adds	r0, #124	; 0x7c
 801e5a2:	f7ff fbd5 	bl	801dd50 <nema_cl_wait>
 801e5a6:	4620      	mov	r0, r4
 801e5a8:	f7f9 fb64 	bl	8017c74 <_ZN8touchgfx3HAL15lockFrameBufferEv>
 801e5ac:	2300      	movs	r3, #0
 801e5ae:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 801e5b2:	bd10      	pop	{r4, pc}

0801e5b4 <_ZN8touchgfx8HALGPU2D8endFrameEv>:
 801e5b4:	b510      	push	{r4, lr}
 801e5b6:	4604      	mov	r4, r0
 801e5b8:	f7f8 fdaa 	bl	8017110 <_ZN8touchgfx3HAL8endFrameEv>
 801e5bc:	2200      	movs	r2, #0
 801e5be:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 801e5c2:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
 801e5c6:	347c      	adds	r4, #124	; 0x7c
 801e5c8:	b113      	cbz	r3, 801e5d0 <_ZN8touchgfx8HALGPU2D8endFrameEv+0x1c>
 801e5ca:	4620      	mov	r0, r4
 801e5cc:	f7ff fb50 	bl	801dc70 <nema_cl_submit>
 801e5d0:	4620      	mov	r0, r4
 801e5d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5d6:	f7ff bbbb 	b.w	801dd50 <nema_cl_wait>
 801e5da:	bf00      	nop

0801e5dc <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>:
 801e5dc:	b508      	push	{r3, lr}
 801e5de:	4a03      	ldr	r2, [pc, #12]	; (801e5ec <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x10>)
 801e5e0:	4b03      	ldr	r3, [pc, #12]	; (801e5f0 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x14>)
 801e5e2:	2118      	movs	r1, #24
 801e5e4:	4803      	ldr	r0, [pc, #12]	; (801e5f4 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x18>)
 801e5e6:	f00b f809 	bl	80295fc <__assert_func>
 801e5ea:	bf00      	nop
 801e5ec:	0802c300 	.word	0x0802c300
 801e5f0:	0802c1ac 	.word	0x0802c1ac
 801e5f4:	0802c204 	.word	0x0802c204

0801e5f8 <_ZN8touchgfx8HALGPU2D10initializeEv>:
 801e5f8:	b570      	push	{r4, r5, r6, lr}
 801e5fa:	4606      	mov	r6, r0
 801e5fc:	b08a      	sub	sp, #40	; 0x28
 801e5fe:	466c      	mov	r4, sp
 801e600:	f7f8 fd93 	bl	801712a <_ZN8touchgfx3HAL10initializeEv>
 801e604:	f106 057c 	add.w	r5, r6, #124	; 0x7c
 801e608:	4668      	mov	r0, sp
 801e60a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801e60e:	f7ff f89f 	bl	801d750 <nema_cl_create_sized>
 801e612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e61a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801e61e:	e885 0003 	stmia.w	r5, {r0, r1}
 801e622:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801e626:	b10b      	cbz	r3, 801e62c <_ZN8touchgfx8HALGPU2D10initializeEv+0x34>
 801e628:	b00a      	add	sp, #40	; 0x28
 801e62a:	bd70      	pop	{r4, r5, r6, pc}
 801e62c:	f7ff ffd6 	bl	801e5dc <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>

0801e630 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
 801e630:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e632:	f04f 0c01 	mov.w	ip, #1
 801e636:	2500      	movs	r5, #0
 801e638:	f8bd 7014 	ldrh.w	r7, [sp, #20]
 801e63c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 801e640:	60c3      	str	r3, [r0, #12]
 801e642:	42b7      	cmp	r7, r6
 801e644:	bf2c      	ite	cs
 801e646:	f04f 0e00 	movcs.w	lr, #0
 801e64a:	f04f 0e01 	movcc.w	lr, #1
 801e64e:	4b23      	ldr	r3, [pc, #140]	; (801e6dc <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xac>)
 801e650:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801e654:	6643      	str	r3, [r0, #100]	; 0x64
 801e656:	4b22      	ldr	r3, [pc, #136]	; (801e6e0 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb0>)
 801e658:	6105      	str	r5, [r0, #16]
 801e65a:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801e65e:	61c5      	str	r5, [r0, #28]
 801e660:	6205      	str	r5, [r0, #32]
 801e662:	8485      	strh	r5, [r0, #36]	; 0x24
 801e664:	f8c0 5026 	str.w	r5, [r0, #38]	; 0x26
 801e668:	f880 502a 	strb.w	r5, [r0, #42]	; 0x2a
 801e66c:	62c5      	str	r5, [r0, #44]	; 0x2c
 801e66e:	8605      	strh	r5, [r0, #48]	; 0x30
 801e670:	e9c0 550e 	strd	r5, r5, [r0, #56]	; 0x38
 801e674:	e9c0 5510 	strd	r5, r5, [r0, #64]	; 0x40
 801e678:	f880 5048 	strb.w	r5, [r0, #72]	; 0x48
 801e67c:	f880 504a 	strb.w	r5, [r0, #74]	; 0x4a
 801e680:	f880 504b 	strb.w	r5, [r0, #75]	; 0x4b
 801e684:	e9c0 5513 	strd	r5, r5, [r0, #76]	; 0x4c
 801e688:	e9c0 5515 	strd	r5, r5, [r0, #84]	; 0x54
 801e68c:	e9c0 5517 	strd	r5, r5, [r0, #92]	; 0x5c
 801e690:	6685      	str	r5, [r0, #104]	; 0x68
 801e692:	f880 506c 	strb.w	r5, [r0, #108]	; 0x6c
 801e696:	4a13      	ldr	r2, [pc, #76]	; (801e6e4 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb4>)
 801e698:	f880 c049 	strb.w	ip, [r0, #73]	; 0x49
 801e69c:	6018      	str	r0, [r3, #0]
 801e69e:	4b12      	ldr	r3, [pc, #72]	; (801e6e8 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb8>)
 801e6a0:	8017      	strh	r7, [r2, #0]
 801e6a2:	801f      	strh	r7, [r3, #0]
 801e6a4:	4a11      	ldr	r2, [pc, #68]	; (801e6ec <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xbc>)
 801e6a6:	4b12      	ldr	r3, [pc, #72]	; (801e6f0 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc0>)
 801e6a8:	8016      	strh	r6, [r2, #0]
 801e6aa:	801e      	strh	r6, [r3, #0]
 801e6ac:	4911      	ldr	r1, [pc, #68]	; (801e6f4 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc4>)
 801e6ae:	4a12      	ldr	r2, [pc, #72]	; (801e6f8 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc8>)
 801e6b0:	4b12      	ldr	r3, [pc, #72]	; (801e6fc <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xcc>)
 801e6b2:	700d      	strb	r5, [r1, #0]
 801e6b4:	6002      	str	r2, [r0, #0]
 801e6b6:	6018      	str	r0, [r3, #0]
 801e6b8:	6705      	str	r5, [r0, #112]	; 0x70
 801e6ba:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
 801e6be:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
 801e6c2:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
 801e6c6:	f880 c077 	strb.w	ip, [r0, #119]	; 0x77
 801e6ca:	f880 c078 	strb.w	ip, [r0, #120]	; 0x78
 801e6ce:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
 801e6d2:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
 801e6d6:	f880 e034 	strb.w	lr, [r0, #52]	; 0x34
 801e6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6dc:	01000001 	.word	0x01000001
 801e6e0:	201984f8 	.word	0x201984f8
 801e6e4:	201984ec 	.word	0x201984ec
 801e6e8:	201984f2 	.word	0x201984f2
 801e6ec:	201984ee 	.word	0x201984ee
 801e6f0:	201984f4 	.word	0x201984f4
 801e6f4:	201984f0 	.word	0x201984f0
 801e6f8:	0802c230 	.word	0x0802c230
 801e6fc:	20198728 	.word	0x20198728

0801e700 <_ZN8touchgfx8HALGPU2D10initializeEi>:
 801e700:	b570      	push	{r4, r5, r6, lr}
 801e702:	460c      	mov	r4, r1
 801e704:	b08a      	sub	sp, #40	; 0x28
 801e706:	4606      	mov	r6, r0
 801e708:	f7f8 fd0f 	bl	801712a <_ZN8touchgfx3HAL10initializeEv>
 801e70c:	4621      	mov	r1, r4
 801e70e:	466c      	mov	r4, sp
 801e710:	4668      	mov	r0, sp
 801e712:	f106 057c 	add.w	r5, r6, #124	; 0x7c
 801e716:	f7ff f81b 	bl	801d750 <nema_cl_create_sized>
 801e71a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e71c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e71e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e722:	e894 0003 	ldmia.w	r4, {r0, r1}
 801e726:	e885 0003 	stmia.w	r5, {r0, r1}
 801e72a:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801e72e:	b10b      	cbz	r3, 801e734 <_ZN8touchgfx8HALGPU2D10initializeEi+0x34>
 801e730:	b00a      	add	sp, #40	; 0x28
 801e732:	bd70      	pop	{r4, r5, r6, pc}
 801e734:	f7ff ff52 	bl	801e5dc <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>

0801e738 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>:
 801e738:	b510      	push	{r4, lr}
 801e73a:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 801e73e:	4604      	mov	r4, r0
 801e740:	b94b      	cbnz	r3, 801e756 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x1e>
 801e742:	4620      	mov	r0, r4
 801e744:	2101      	movs	r1, #1
 801e746:	f7f9 fa83 	bl	8017c50 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801e74a:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 801e74e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e752:	f7ff b911 	b.w	801d978 <nema_cl_bind_circular>
 801e756:	6840      	ldr	r0, [r0, #4]
 801e758:	4906      	ldr	r1, [pc, #24]	; (801e774 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x3c>)
 801e75a:	6803      	ldr	r3, [r0, #0]
 801e75c:	689a      	ldr	r2, [r3, #8]
 801e75e:	428a      	cmp	r2, r1
 801e760:	d105      	bne.n	801e76e <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x36>
 801e762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e764:	4798      	blx	r3
 801e766:	2300      	movs	r3, #0
 801e768:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 801e76c:	e7e9      	b.n	801e742 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0xa>
 801e76e:	4790      	blx	r2
 801e770:	e7f9      	b.n	801e766 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x2e>
 801e772:	bf00      	nop
 801e774:	08002b51 	.word	0x08002b51

0801e778 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>:
 801e778:	4603      	mov	r3, r0
 801e77a:	2200      	movs	r2, #0
 801e77c:	307c      	adds	r0, #124	; 0x7c
 801e77e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 801e782:	f7ff ba75 	b.w	801dc70 <nema_cl_submit>
 801e786:	bf00      	nop

0801e788 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 801e788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e78c:	b091      	sub	sp, #68	; 0x44
 801e78e:	4604      	mov	r4, r0
 801e790:	461d      	mov	r5, r3
 801e792:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801e796:	e9cd 210e 	strd	r2, r1, [sp, #56]	; 0x38
 801e79a:	930d      	str	r3, [sp, #52]	; 0x34
 801e79c:	f89d 2088 	ldrb.w	r2, [sp, #136]	; 0x88
 801e7a0:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801e7a4:	307c      	adds	r0, #124	; 0x7c
 801e7a6:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
 801e7aa:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801e7ae:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 801e7b2:	f8bd 9074 	ldrh.w	r9, [sp, #116]	; 0x74
 801e7b6:	f89d a078 	ldrb.w	sl, [sp, #120]	; 0x78
 801e7ba:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801e7be:	930b      	str	r3, [sp, #44]	; 0x2c
 801e7c0:	920c      	str	r2, [sp, #48]	; 0x30
 801e7c2:	f7ff fac5 	bl	801dd50 <nema_cl_wait>
 801e7c6:	f04f 0e01 	mov.w	lr, #1
 801e7ca:	2000      	movs	r0, #0
 801e7cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e7ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e7d0:	9208      	str	r2, [sp, #32]
 801e7d2:	f8d4 c000 	ldr.w	ip, [r4]
 801e7d6:	9307      	str	r3, [sp, #28]
 801e7d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e7da:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801e7de:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
 801e7e2:	e9cd b305 	strd	fp, r3, [sp, #20]
 801e7e6:	e9cd 7801 	strd	r7, r8, [sp, #4]
 801e7ea:	9600      	str	r6, [sp, #0]
 801e7ec:	f884 e0a4 	strb.w	lr, [r4, #164]	; 0xa4
 801e7f0:	9009      	str	r0, [sp, #36]	; 0x24
 801e7f2:	462b      	mov	r3, r5
 801e7f4:	4620      	mov	r0, r4
 801e7f6:	f8dc 403c 	ldr.w	r4, [ip, #60]	; 0x3c
 801e7fa:	47a0      	blx	r4
 801e7fc:	b011      	add	sp, #68	; 0x44
 801e7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e802:	bf00      	nop

0801e804 <_ZN8touchgfx8LCDGPU2DD1Ev>:
 801e804:	4770      	bx	lr
 801e806:	bf00      	nop

0801e808 <_ZNK8touchgfx8LCDGPU2D8bitDepthEv>:
 801e808:	7a03      	ldrb	r3, [r0, #8]
 801e80a:	2b02      	cmp	r3, #2
 801e80c:	d004      	beq.n	801e818 <_ZNK8touchgfx8LCDGPU2D8bitDepthEv+0x10>
 801e80e:	2b01      	cmp	r3, #1
 801e810:	bf0c      	ite	eq
 801e812:	2018      	moveq	r0, #24
 801e814:	2010      	movne	r0, #16
 801e816:	4770      	bx	lr
 801e818:	2020      	movs	r0, #32
 801e81a:	4770      	bx	lr

0801e81c <_ZNK8touchgfx8LCDGPU2D17framebufferFormatEv>:
 801e81c:	7a00      	ldrb	r0, [r0, #8]
 801e81e:	4770      	bx	lr

0801e820 <_ZN8touchgfx8LCDGPU2D4initEv>:
 801e820:	4770      	bx	lr
 801e822:	bf00      	nop

0801e824 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e828:	b087      	sub	sp, #28
 801e82a:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801e82e:	9102      	str	r1, [sp, #8]
 801e830:	ea6f 0c05 	mvn.w	ip, r5
 801e834:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801e838:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e83a:	9203      	str	r2, [sp, #12]
 801e83c:	e9dd 4215 	ldrd	r4, r2, [sp, #84]	; 0x54
 801e840:	6860      	ldr	r0, [r4, #4]
 801e842:	fa5f fc8c 	uxtb.w	ip, ip
 801e846:	fb00 2e01 	mla	lr, r0, r1, r2
 801e84a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e84c:	6820      	ldr	r0, [r4, #0]
 801e84e:	e9d2 2400 	ldrd	r2, r4, [r2]
 801e852:	3404      	adds	r4, #4
 801e854:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 801e858:	fa1f fb85 	uxth.w	fp, r5
 801e85c:	9405      	str	r4, [sp, #20]
 801e85e:	9200      	str	r2, [sp, #0]
 801e860:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801e864:	9c02      	ldr	r4, [sp, #8]
 801e866:	2c00      	cmp	r4, #0
 801e868:	dc03      	bgt.n	801e872 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801e86a:	9c03      	ldr	r4, [sp, #12]
 801e86c:	2c00      	cmp	r4, #0
 801e86e:	f340 80c2 	ble.w	801e9f6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e872:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e874:	2b00      	cmp	r3, #0
 801e876:	e9d4 ea02 	ldrd	lr, sl, [r4, #8]
 801e87a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e87e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e882:	fa0f f48e 	sxth.w	r4, lr
 801e886:	fa0f f88a 	sxth.w	r8, sl
 801e88a:	f340 80b7 	ble.w	801e9fc <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801e88e:	1415      	asrs	r5, r2, #16
 801e890:	d406      	bmi.n	801e8a0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e892:	42a5      	cmp	r5, r4
 801e894:	da04      	bge.n	801e8a0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e896:	ea5f 4921 	movs.w	r9, r1, asr #16
 801e89a:	d401      	bmi.n	801e8a0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e89c:	45c1      	cmp	r9, r8
 801e89e:	db3e      	blt.n	801e91e <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e8a0:	3b01      	subs	r3, #1
 801e8a2:	4432      	add	r2, r6
 801e8a4:	4439      	add	r1, r7
 801e8a6:	f100 0002 	add.w	r0, r0, #2
 801e8aa:	d1f0      	bne.n	801e88e <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e8ac:	9b02      	ldr	r3, [sp, #8]
 801e8ae:	2b00      	cmp	r3, #0
 801e8b0:	f340 80a1 	ble.w	801e9f6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e8b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e8b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e8bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e8c0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e8c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e8c8:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e8cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e8d0:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e8d4:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e8d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e8dc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e8e0:	ee16 2a90 	vmov	r2, s13
 801e8e4:	3b01      	subs	r3, #1
 801e8e6:	9302      	str	r3, [sp, #8]
 801e8e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e8ea:	9c03      	ldr	r4, [sp, #12]
 801e8ec:	fb92 f6f3 	sdiv	r6, r2, r3
 801e8f0:	ee17 2a10 	vmov	r2, s14
 801e8f4:	eeb0 7a43 	vmov.f32	s14, s6
 801e8f8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e8fc:	ee17 1a10 	vmov	r1, s14
 801e900:	eeb0 7a62 	vmov.f32	s14, s5
 801e904:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e908:	fb92 f7f3 	sdiv	r7, r2, r3
 801e90c:	eeb0 3a67 	vmov.f32	s6, s15
 801e910:	ee17 2a10 	vmov	r2, s14
 801e914:	eef0 2a46 	vmov.f32	s5, s12
 801e918:	bf08      	it	eq
 801e91a:	4623      	moveq	r3, r4
 801e91c:	e7a2      	b.n	801e864 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e91e:	9501      	str	r5, [sp, #4]
 801e920:	1e5d      	subs	r5, r3, #1
 801e922:	fb05 2906 	mla	r9, r5, r6, r2
 801e926:	ea5f 4929 	movs.w	r9, r9, asr #16
 801e92a:	9504      	str	r5, [sp, #16]
 801e92c:	d570      	bpl.n	801ea10 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801e92e:	4680      	mov	r8, r0
 801e930:	9d01      	ldr	r5, [sp, #4]
 801e932:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e936:	4654      	mov	r4, sl
 801e938:	4673      	mov	r3, lr
 801e93a:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801e93e:	e002      	b.n	801e946 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e940:	1415      	asrs	r5, r2, #16
 801e942:	e9d9 3402 	ldrd	r3, r4, [r9, #8]
 801e946:	2d00      	cmp	r5, #0
 801e948:	4432      	add	r2, r6
 801e94a:	db4b      	blt.n	801e9e4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801e94c:	429d      	cmp	r5, r3
 801e94e:	da49      	bge.n	801e9e4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801e950:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801e954:	d446      	bmi.n	801e9e4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801e956:	45a6      	cmp	lr, r4
 801e958:	da44      	bge.n	801e9e4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801e95a:	9c00      	ldr	r4, [sp, #0]
 801e95c:	b21b      	sxth	r3, r3
 801e95e:	fb0e 4303 	mla	r3, lr, r3, r4
 801e962:	5d5b      	ldrb	r3, [r3, r5]
 801e964:	9d05      	ldr	r5, [sp, #20]
 801e966:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e96a:	441d      	add	r5, r3
 801e96c:	f895 a002 	ldrb.w	sl, [r5, #2]
 801e970:	786d      	ldrb	r5, [r5, #1]
 801e972:	f8b8 4000 	ldrh.w	r4, [r8]
 801e976:	fb15 f50b 	smulbb	r5, r5, fp
 801e97a:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 801e97e:	fa5f fe8e 	uxtb.w	lr, lr
 801e982:	9501      	str	r5, [sp, #4]
 801e984:	fb1e fe0c 	smulbb	lr, lr, ip
 801e988:	9d05      	ldr	r5, [sp, #20]
 801e98a:	fb1a fa0b 	smulbb	sl, sl, fp
 801e98e:	5ced      	ldrb	r5, [r5, r3]
 801e990:	1223      	asrs	r3, r4, #8
 801e992:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e996:	fb05 ee0b 	mla	lr, r5, fp, lr
 801e99a:	fb03 aa0c 	mla	sl, r3, ip, sl
 801e99e:	9d01      	ldr	r5, [sp, #4]
 801e9a0:	10e4      	asrs	r4, r4, #3
 801e9a2:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801e9a6:	fb04 540c 	mla	r4, r4, ip, r5
 801e9aa:	fa1f fe8e 	uxth.w	lr, lr
 801e9ae:	fa1f fa8a 	uxth.w	sl, sl
 801e9b2:	f10e 0301 	add.w	r3, lr, #1
 801e9b6:	f10a 0501 	add.w	r5, sl, #1
 801e9ba:	9301      	str	r3, [sp, #4]
 801e9bc:	b2a4      	uxth	r4, r4
 801e9be:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801e9c2:	9d01      	ldr	r5, [sp, #4]
 801e9c4:	1c63      	adds	r3, r4, #1
 801e9c6:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801e9ca:	eb05 251e 	add.w	r5, r5, lr, lsr #8
 801e9ce:	f40a 4378 	and.w	r3, sl, #63488	; 0xf800
 801e9d2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e9d6:	0964      	lsrs	r4, r4, #5
 801e9d8:	432b      	orrs	r3, r5
 801e9da:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801e9de:	4323      	orrs	r3, r4
 801e9e0:	f8a8 3000 	strh.w	r3, [r8]
 801e9e4:	f108 0802 	add.w	r8, r8, #2
 801e9e8:	4580      	cmp	r8, r0
 801e9ea:	4439      	add	r1, r7
 801e9ec:	d1a8      	bne.n	801e940 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e9ee:	9b02      	ldr	r3, [sp, #8]
 801e9f0:	2b00      	cmp	r3, #0
 801e9f2:	f73f af5f 	bgt.w	801e8b4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e9f6:	b007      	add	sp, #28
 801e9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9fc:	f43f af56 	beq.w	801e8ac <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801ea00:	1e5d      	subs	r5, r3, #1
 801ea02:	fb05 2906 	mla	r9, r5, r6, r2
 801ea06:	ea5f 4929 	movs.w	r9, r9, asr #16
 801ea0a:	9504      	str	r5, [sp, #16]
 801ea0c:	f53f af4e 	bmi.w	801e8ac <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801ea10:	454c      	cmp	r4, r9
 801ea12:	dd5b      	ble.n	801eacc <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801ea14:	9d04      	ldr	r5, [sp, #16]
 801ea16:	fb05 1507 	mla	r5, r5, r7, r1
 801ea1a:	142d      	asrs	r5, r5, #16
 801ea1c:	d456      	bmi.n	801eacc <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801ea1e:	4545      	cmp	r5, r8
 801ea20:	da54      	bge.n	801eacc <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801ea22:	2b00      	cmp	r3, #0
 801ea24:	f77f af42 	ble.w	801e8ac <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801ea28:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ea2c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801ea30:	9301      	str	r3, [sp, #4]
 801ea32:	e002      	b.n	801ea3a <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801ea34:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ea36:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 801ea3a:	9d00      	ldr	r5, [sp, #0]
 801ea3c:	140b      	asrs	r3, r1, #16
 801ea3e:	fb04 5303 	mla	r3, r4, r3, r5
 801ea42:	1414      	asrs	r4, r2, #16
 801ea44:	5d1b      	ldrb	r3, [r3, r4]
 801ea46:	8804      	ldrh	r4, [r0, #0]
 801ea48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ea4c:	eb08 0503 	add.w	r5, r8, r3
 801ea50:	f895 a002 	ldrb.w	sl, [r5, #2]
 801ea54:	f895 9001 	ldrb.w	r9, [r5, #1]
 801ea58:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 801ea5c:	fa5f fe8e 	uxtb.w	lr, lr
 801ea60:	fb1e fe0c 	smulbb	lr, lr, ip
 801ea64:	fb19 f90b 	smulbb	r9, r9, fp
 801ea68:	fb1a fa0b 	smulbb	sl, sl, fp
 801ea6c:	f818 5003 	ldrb.w	r5, [r8, r3]
 801ea70:	1223      	asrs	r3, r4, #8
 801ea72:	10e4      	asrs	r4, r4, #3
 801ea74:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801ea78:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801ea7c:	fb05 e50b 	mla	r5, r5, fp, lr
 801ea80:	fb03 aa0c 	mla	sl, r3, ip, sl
 801ea84:	fb04 940c 	mla	r4, r4, ip, r9
 801ea88:	b2ad      	uxth	r5, r5
 801ea8a:	fa1f fa8a 	uxth.w	sl, sl
 801ea8e:	b2a4      	uxth	r4, r4
 801ea90:	f10a 0301 	add.w	r3, sl, #1
 801ea94:	f105 0e01 	add.w	lr, r5, #1
 801ea98:	f104 0901 	add.w	r9, r4, #1
 801ea9c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801eaa0:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 801eaa4:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801eaa8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801eaac:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801eab0:	0964      	lsrs	r4, r4, #5
 801eab2:	ea43 030e 	orr.w	r3, r3, lr
 801eab6:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801eaba:	4323      	orrs	r3, r4
 801eabc:	f820 3b02 	strh.w	r3, [r0], #2
 801eac0:	9b01      	ldr	r3, [sp, #4]
 801eac2:	4439      	add	r1, r7
 801eac4:	4298      	cmp	r0, r3
 801eac6:	4432      	add	r2, r6
 801eac8:	d1b4      	bne.n	801ea34 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801eaca:	e6ef      	b.n	801e8ac <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801eacc:	2b00      	cmp	r3, #0
 801eace:	f77f aeed 	ble.w	801e8ac <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801ead2:	1414      	asrs	r4, r2, #16
 801ead4:	4680      	mov	r8, r0
 801ead6:	9401      	str	r4, [sp, #4]
 801ead8:	4625      	mov	r5, r4
 801eada:	e72a      	b.n	801e932 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>

0801eadc <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eae0:	4689      	mov	r9, r1
 801eae2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801eae6:	46ca      	mov	sl, r9
 801eae8:	b087      	sub	sp, #28
 801eaea:	9203      	str	r2, [sp, #12]
 801eaec:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 801eaf0:	6854      	ldr	r4, [r2, #4]
 801eaf2:	e9dd 0c17 	ldrd	r0, ip, [sp, #92]	; 0x5c
 801eaf6:	fb04 1000 	mla	r0, r4, r0, r1
 801eafa:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801eafe:	6815      	ldr	r5, [r2, #0]
 801eb00:	e9dc 2400 	ldrd	r2, r4, [ip]
 801eb04:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 801eb08:	f104 0b04 	add.w	fp, r4, #4
 801eb0c:	9205      	str	r2, [sp, #20]
 801eb0e:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801eb12:	f1ba 0f00 	cmp.w	sl, #0
 801eb16:	dc03      	bgt.n	801eb20 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801eb18:	9c03      	ldr	r4, [sp, #12]
 801eb1a:	2c00      	cmp	r4, #0
 801eb1c:	f340 8095 	ble.w	801ec4a <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801eb20:	e9dc e802 	ldrd	lr, r8, [ip, #8]
 801eb24:	2b00      	cmp	r3, #0
 801eb26:	fa0f f588 	sxth.w	r5, r8
 801eb2a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801eb2e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801eb32:	fa0f f48e 	sxth.w	r4, lr
 801eb36:	9502      	str	r5, [sp, #8]
 801eb38:	f340 808a 	ble.w	801ec50 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801eb3c:	46f1      	mov	r9, lr
 801eb3e:	9401      	str	r4, [sp, #4]
 801eb40:	1415      	asrs	r5, r2, #16
 801eb42:	d408      	bmi.n	801eb56 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801eb44:	9c01      	ldr	r4, [sp, #4]
 801eb46:	42a5      	cmp	r5, r4
 801eb48:	da05      	bge.n	801eb56 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801eb4a:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801eb4e:	d402      	bmi.n	801eb56 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801eb50:	9c02      	ldr	r4, [sp, #8]
 801eb52:	45a6      	cmp	lr, r4
 801eb54:	db3b      	blt.n	801ebce <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf2>
 801eb56:	3b01      	subs	r3, #1
 801eb58:	4432      	add	r2, r6
 801eb5a:	4439      	add	r1, r7
 801eb5c:	f100 0002 	add.w	r0, r0, #2
 801eb60:	d1ee      	bne.n	801eb40 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801eb62:	f1ba 0f00 	cmp.w	sl, #0
 801eb66:	dd70      	ble.n	801ec4a <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801eb68:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb70:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801eb74:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb78:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801eb7c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb80:	ee76 6a62 	vsub.f32	s13, s12, s5
 801eb84:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801eb88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb8c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801eb90:	ee16 2a90 	vmov	r2, s13
 801eb94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eb96:	9c03      	ldr	r4, [sp, #12]
 801eb98:	fb92 f6f3 	sdiv	r6, r2, r3
 801eb9c:	ee17 2a10 	vmov	r2, s14
 801eba0:	eeb0 7a43 	vmov.f32	s14, s6
 801eba4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801eba8:	ee17 1a10 	vmov	r1, s14
 801ebac:	eeb0 7a62 	vmov.f32	s14, s5
 801ebb0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ebb4:	f1ba 0a01 	subs.w	sl, sl, #1
 801ebb8:	fb92 f7f3 	sdiv	r7, r2, r3
 801ebbc:	eeb0 3a67 	vmov.f32	s6, s15
 801ebc0:	ee17 2a10 	vmov	r2, s14
 801ebc4:	eef0 2a46 	vmov.f32	s5, s12
 801ebc8:	bf08      	it	eq
 801ebca:	4623      	moveq	r3, r4
 801ebcc:	e7a1      	b.n	801eb12 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ebce:	9c01      	ldr	r4, [sp, #4]
 801ebd0:	9501      	str	r5, [sp, #4]
 801ebd2:	1e5d      	subs	r5, r3, #1
 801ebd4:	46ce      	mov	lr, r9
 801ebd6:	fb05 2906 	mla	r9, r5, r6, r2
 801ebda:	ea5f 4929 	movs.w	r9, r9, asr #16
 801ebde:	9504      	str	r5, [sp, #16]
 801ebe0:	d53e      	bpl.n	801ec60 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801ebe2:	4604      	mov	r4, r0
 801ebe4:	9d01      	ldr	r5, [sp, #4]
 801ebe6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ebea:	4673      	mov	r3, lr
 801ebec:	46b6      	mov	lr, r6
 801ebee:	4646      	mov	r6, r8
 801ebf0:	e002      	b.n	801ebf8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ebf2:	1415      	asrs	r5, r2, #16
 801ebf4:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801ebf8:	2d00      	cmp	r5, #0
 801ebfa:	4472      	add	r2, lr
 801ebfc:	db1e      	blt.n	801ec3c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801ebfe:	429d      	cmp	r5, r3
 801ec00:	da1c      	bge.n	801ec3c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801ec02:	ea5f 4821 	movs.w	r8, r1, asr #16
 801ec06:	d419      	bmi.n	801ec3c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801ec08:	45b0      	cmp	r8, r6
 801ec0a:	da17      	bge.n	801ec3c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801ec0c:	9e05      	ldr	r6, [sp, #20]
 801ec0e:	b21b      	sxth	r3, r3
 801ec10:	fb08 6303 	mla	r3, r8, r3, r6
 801ec14:	5d5e      	ldrb	r6, [r3, r5]
 801ec16:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ec1a:	eb0b 0306 	add.w	r3, fp, r6
 801ec1e:	785d      	ldrb	r5, [r3, #1]
 801ec20:	789b      	ldrb	r3, [r3, #2]
 801ec22:	00ed      	lsls	r5, r5, #3
 801ec24:	f405 68fc 	and.w	r8, r5, #2016	; 0x7e0
 801ec28:	4d2d      	ldr	r5, [pc, #180]	; (801ece0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>)
 801ec2a:	f81b 6006 	ldrb.w	r6, [fp, r6]
 801ec2e:	ea05 2303 	and.w	r3, r5, r3, lsl #8
 801ec32:	ea43 0308 	orr.w	r3, r3, r8
 801ec36:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
 801ec3a:	8023      	strh	r3, [r4, #0]
 801ec3c:	3402      	adds	r4, #2
 801ec3e:	4284      	cmp	r4, r0
 801ec40:	4439      	add	r1, r7
 801ec42:	d1d6      	bne.n	801ebf2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801ec44:	f1ba 0f00 	cmp.w	sl, #0
 801ec48:	dc8e      	bgt.n	801eb68 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ec4a:	b007      	add	sp, #28
 801ec4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec50:	d087      	beq.n	801eb62 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ec52:	1e5d      	subs	r5, r3, #1
 801ec54:	fb05 2906 	mla	r9, r5, r6, r2
 801ec58:	ea5f 4929 	movs.w	r9, r9, asr #16
 801ec5c:	9504      	str	r5, [sp, #16]
 801ec5e:	d480      	bmi.n	801eb62 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ec60:	454c      	cmp	r4, r9
 801ec62:	dd35      	ble.n	801ecd0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ec64:	9d04      	ldr	r5, [sp, #16]
 801ec66:	fb05 1507 	mla	r5, r5, r7, r1
 801ec6a:	ea5f 4925 	movs.w	r9, r5, asr #16
 801ec6e:	d42f      	bmi.n	801ecd0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ec70:	9d02      	ldr	r5, [sp, #8]
 801ec72:	45a9      	cmp	r9, r5
 801ec74:	da2c      	bge.n	801ecd0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ec76:	2b00      	cmp	r3, #0
 801ec78:	f77f af73 	ble.w	801eb62 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ec7c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ec80:	9d05      	ldr	r5, [sp, #20]
 801ec82:	4699      	mov	r9, r3
 801ec84:	46a6      	mov	lr, r4
 801ec86:	e001      	b.n	801ec8c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801ec88:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801ec8c:	140c      	asrs	r4, r1, #16
 801ec8e:	fb0e 5404 	mla	r4, lr, r4, r5
 801ec92:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801ec96:	f814 e00e 	ldrb.w	lr, [r4, lr]
 801ec9a:	4b11      	ldr	r3, [pc, #68]	; (801ece0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>)
 801ec9c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801eca0:	eb0b 040e 	add.w	r4, fp, lr
 801eca4:	f894 8001 	ldrb.w	r8, [r4, #1]
 801eca8:	78a4      	ldrb	r4, [r4, #2]
 801ecaa:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ecae:	f81b e00e 	ldrb.w	lr, [fp, lr]
 801ecb2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801ecb6:	ea03 2404 	and.w	r4, r3, r4, lsl #8
 801ecba:	ea44 0408 	orr.w	r4, r4, r8
 801ecbe:	ea44 04de 	orr.w	r4, r4, lr, lsr #3
 801ecc2:	f820 4b02 	strh.w	r4, [r0], #2
 801ecc6:	4548      	cmp	r0, r9
 801ecc8:	4439      	add	r1, r7
 801ecca:	4432      	add	r2, r6
 801eccc:	d1dc      	bne.n	801ec88 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ecce:	e748      	b.n	801eb62 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ecd0:	2b00      	cmp	r3, #0
 801ecd2:	f77f af46 	ble.w	801eb62 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ecd6:	1415      	asrs	r5, r2, #16
 801ecd8:	4604      	mov	r4, r0
 801ecda:	9501      	str	r5, [sp, #4]
 801ecdc:	e783      	b.n	801ebe6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801ecde:	bf00      	nop
 801ece0:	fffff800 	.word	0xfffff800

0801ece4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ece4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801ece8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecec:	b087      	sub	sp, #28
 801ecee:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801ecf2:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 801ecf6:	e9dd 0b17 	ldrd	r0, fp, [sp, #92]	; 0x5c
 801ecfa:	6854      	ldr	r4, [r2, #4]
 801ecfc:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801ed00:	fb04 1100 	mla	r1, r4, r0, r1
 801ed04:	e9dd 9a13 	ldrd	r9, sl, [sp, #76]	; 0x4c
 801ed08:	6810      	ldr	r0, [r2, #0]
 801ed0a:	e9db 2400 	ldrd	r2, r4, [fp]
 801ed0e:	eb00 0e41 	add.w	lr, r0, r1, lsl #1
 801ed12:	1d21      	adds	r1, r4, #4
 801ed14:	9505      	str	r5, [sp, #20]
 801ed16:	9102      	str	r1, [sp, #8]
 801ed18:	9201      	str	r2, [sp, #4]
 801ed1a:	e9dd 7211 	ldrd	r7, r2, [sp, #68]	; 0x44
 801ed1e:	9903      	ldr	r1, [sp, #12]
 801ed20:	2900      	cmp	r1, #0
 801ed22:	dc03      	bgt.n	801ed2c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ed24:	9904      	ldr	r1, [sp, #16]
 801ed26:	2900      	cmp	r1, #0
 801ed28:	f340 80b6 	ble.w	801ee98 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801ed2c:	e9db 4602 	ldrd	r4, r6, [fp, #8]
 801ed30:	2b00      	cmp	r3, #0
 801ed32:	f507 4700 	add.w	r7, r7, #32768	; 0x8000
 801ed36:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ed3a:	b221      	sxth	r1, r4
 801ed3c:	b235      	sxth	r5, r6
 801ed3e:	f340 80ae 	ble.w	801ee9e <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ed42:	1438      	asrs	r0, r7, #16
 801ed44:	d406      	bmi.n	801ed54 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ed46:	4288      	cmp	r0, r1
 801ed48:	da04      	bge.n	801ed54 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ed4a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ed4e:	d401      	bmi.n	801ed54 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ed50:	45ac      	cmp	ip, r5
 801ed52:	db3c      	blt.n	801edce <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801ed54:	3b01      	subs	r3, #1
 801ed56:	444f      	add	r7, r9
 801ed58:	4452      	add	r2, sl
 801ed5a:	f10e 0e02 	add.w	lr, lr, #2
 801ed5e:	d1f0      	bne.n	801ed42 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ed60:	9b03      	ldr	r3, [sp, #12]
 801ed62:	2b00      	cmp	r3, #0
 801ed64:	f340 8098 	ble.w	801ee98 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801ed68:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ed6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ed70:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801ed74:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ed78:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801ed7c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ed80:	ee76 6a62 	vsub.f32	s13, s12, s5
 801ed84:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801ed88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed8c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ed90:	ee16 2a90 	vmov	r2, s13
 801ed94:	3b01      	subs	r3, #1
 801ed96:	9303      	str	r3, [sp, #12]
 801ed98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ed9a:	9904      	ldr	r1, [sp, #16]
 801ed9c:	fb92 f9f3 	sdiv	r9, r2, r3
 801eda0:	ee17 2a10 	vmov	r2, s14
 801eda4:	eeb0 7a43 	vmov.f32	s14, s6
 801eda8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801edac:	fb92 faf3 	sdiv	sl, r2, r3
 801edb0:	ee17 2a10 	vmov	r2, s14
 801edb4:	eeb0 7a62 	vmov.f32	s14, s5
 801edb8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801edbc:	eeb0 3a67 	vmov.f32	s6, s15
 801edc0:	ee17 7a10 	vmov	r7, s14
 801edc4:	eef0 2a46 	vmov.f32	s5, s12
 801edc8:	bf08      	it	eq
 801edca:	460b      	moveq	r3, r1
 801edcc:	e7a7      	b.n	801ed1e <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801edce:	f103 38ff 	add.w	r8, r3, #4294967295
 801edd2:	fb08 7c09 	mla	ip, r8, r9, r7
 801edd6:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801edda:	d56a      	bpl.n	801eeb2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 801eddc:	4675      	mov	r5, lr
 801edde:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 801ede2:	e002      	b.n	801edea <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801ede4:	1438      	asrs	r0, r7, #16
 801ede6:	e9db 4602 	ldrd	r4, r6, [fp, #8]
 801edea:	2800      	cmp	r0, #0
 801edec:	444f      	add	r7, r9
 801edee:	db4b      	blt.n	801ee88 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801edf0:	42a0      	cmp	r0, r4
 801edf2:	da49      	bge.n	801ee88 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801edf4:	1413      	asrs	r3, r2, #16
 801edf6:	d447      	bmi.n	801ee88 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801edf8:	42b3      	cmp	r3, r6
 801edfa:	b224      	sxth	r4, r4
 801edfc:	da44      	bge.n	801ee88 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801edfe:	9901      	ldr	r1, [sp, #4]
 801ee00:	fb03 1404 	mla	r4, r3, r4, r1
 801ee04:	9902      	ldr	r1, [sp, #8]
 801ee06:	5c23      	ldrb	r3, [r4, r0]
 801ee08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801ee0c:	0e0b      	lsrs	r3, r1, #24
 801ee0e:	d03b      	beq.n	801ee88 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801ee10:	9805      	ldr	r0, [sp, #20]
 801ee12:	f3c1 4807 	ubfx	r8, r1, #16, #8
 801ee16:	fb00 f003 	mul.w	r0, r0, r3
 801ee1a:	1c43      	adds	r3, r0, #1
 801ee1c:	eb03 2320 	add.w	r3, r3, r0, asr #8
 801ee20:	121b      	asrs	r3, r3, #8
 801ee22:	43d8      	mvns	r0, r3
 801ee24:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 801ee28:	b29b      	uxth	r3, r3
 801ee2a:	b2c9      	uxtb	r1, r1
 801ee2c:	882e      	ldrh	r6, [r5, #0]
 801ee2e:	fb1c fc03 	smulbb	ip, ip, r3
 801ee32:	fb18 f803 	smulbb	r8, r8, r3
 801ee36:	fb11 f303 	smulbb	r3, r1, r3
 801ee3a:	10f4      	asrs	r4, r6, #3
 801ee3c:	1231      	asrs	r1, r6, #8
 801ee3e:	00f6      	lsls	r6, r6, #3
 801ee40:	b2c0      	uxtb	r0, r0
 801ee42:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ee46:	b2f6      	uxtb	r6, r6
 801ee48:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801ee4c:	fb01 8800 	mla	r8, r1, r0, r8
 801ee50:	fb04 c400 	mla	r4, r4, r0, ip
 801ee54:	fb06 3100 	mla	r1, r6, r0, r3
 801ee58:	fa1f fc88 	uxth.w	ip, r8
 801ee5c:	b289      	uxth	r1, r1
 801ee5e:	b2a4      	uxth	r4, r4
 801ee60:	1c4e      	adds	r6, r1, #1
 801ee62:	1c60      	adds	r0, r4, #1
 801ee64:	f10c 0301 	add.w	r3, ip, #1
 801ee68:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801ee6c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801ee70:	eb00 2114 	add.w	r1, r0, r4, lsr #8
 801ee74:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801ee78:	f3c6 20c4 	ubfx	r0, r6, #11, #5
 801ee7c:	0949      	lsrs	r1, r1, #5
 801ee7e:	4303      	orrs	r3, r0
 801ee80:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ee84:	430b      	orrs	r3, r1
 801ee86:	802b      	strh	r3, [r5, #0]
 801ee88:	3502      	adds	r5, #2
 801ee8a:	4575      	cmp	r5, lr
 801ee8c:	4452      	add	r2, sl
 801ee8e:	d1a9      	bne.n	801ede4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801ee90:	9b03      	ldr	r3, [sp, #12]
 801ee92:	2b00      	cmp	r3, #0
 801ee94:	f73f af68 	bgt.w	801ed68 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ee98:	b007      	add	sp, #28
 801ee9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee9e:	f43f af5f 	beq.w	801ed60 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801eea2:	f103 38ff 	add.w	r8, r3, #4294967295
 801eea6:	fb08 7c09 	mla	ip, r8, r9, r7
 801eeaa:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801eeae:	f53f af57 	bmi.w	801ed60 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801eeb2:	4561      	cmp	r1, ip
 801eeb4:	dd5c      	ble.n	801ef70 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801eeb6:	fb08 280a 	mla	r8, r8, sl, r2
 801eeba:	ea5f 4828 	movs.w	r8, r8, asr #16
 801eebe:	d457      	bmi.n	801ef70 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801eec0:	45a8      	cmp	r8, r5
 801eec2:	da55      	bge.n	801ef70 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801eec4:	2b00      	cmp	r3, #0
 801eec6:	f77f af4b 	ble.w	801ed60 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801eeca:	eb0e 0843 	add.w	r8, lr, r3, lsl #1
 801eece:	e001      	b.n	801eed4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801eed0:	f9bb 1008 	ldrsh.w	r1, [fp, #8]
 801eed4:	9801      	ldr	r0, [sp, #4]
 801eed6:	1413      	asrs	r3, r2, #16
 801eed8:	fb01 0303 	mla	r3, r1, r3, r0
 801eedc:	1439      	asrs	r1, r7, #16
 801eede:	5c5b      	ldrb	r3, [r3, r1]
 801eee0:	9902      	ldr	r1, [sp, #8]
 801eee2:	444f      	add	r7, r9
 801eee4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801eee8:	4452      	add	r2, sl
 801eeea:	0e18      	lsrs	r0, r3, #24
 801eeec:	d03b      	beq.n	801ef66 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801eeee:	9905      	ldr	r1, [sp, #20]
 801eef0:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801eef4:	fb01 f100 	mul.w	r1, r1, r0
 801eef8:	1c48      	adds	r0, r1, #1
 801eefa:	eb00 2021 	add.w	r0, r0, r1, asr #8
 801eefe:	1200      	asrs	r0, r0, #8
 801ef00:	43c1      	mvns	r1, r0
 801ef02:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801ef06:	b280      	uxth	r0, r0
 801ef08:	b2db      	uxtb	r3, r3
 801ef0a:	f8be 5000 	ldrh.w	r5, [lr]
 801ef0e:	fb16 f600 	smulbb	r6, r6, r0
 801ef12:	fb1c fc00 	smulbb	ip, ip, r0
 801ef16:	fb13 f300 	smulbb	r3, r3, r0
 801ef1a:	122c      	asrs	r4, r5, #8
 801ef1c:	10e8      	asrs	r0, r5, #3
 801ef1e:	00ed      	lsls	r5, r5, #3
 801ef20:	b2c9      	uxtb	r1, r1
 801ef22:	b2ed      	uxtb	r5, r5
 801ef24:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801ef28:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801ef2c:	fb00 6001 	mla	r0, r0, r1, r6
 801ef30:	fb05 3301 	mla	r3, r5, r1, r3
 801ef34:	fb04 c401 	mla	r4, r4, r1, ip
 801ef38:	b280      	uxth	r0, r0
 801ef3a:	b2a4      	uxth	r4, r4
 801ef3c:	b29b      	uxth	r3, r3
 801ef3e:	1c65      	adds	r5, r4, #1
 801ef40:	1c5e      	adds	r6, r3, #1
 801ef42:	1c41      	adds	r1, r0, #1
 801ef44:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801ef48:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801ef4c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801ef50:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801ef54:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ef58:	0949      	lsrs	r1, r1, #5
 801ef5a:	431c      	orrs	r4, r3
 801ef5c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ef60:	430c      	orrs	r4, r1
 801ef62:	f8ae 4000 	strh.w	r4, [lr]
 801ef66:	f10e 0e02 	add.w	lr, lr, #2
 801ef6a:	45c6      	cmp	lr, r8
 801ef6c:	d1b0      	bne.n	801eed0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801ef6e:	e6f7      	b.n	801ed60 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ef70:	2b00      	cmp	r3, #0
 801ef72:	f77f aef5 	ble.w	801ed60 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ef76:	4675      	mov	r5, lr
 801ef78:	1438      	asrs	r0, r7, #16
 801ef7a:	e730      	b.n	801edde <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>

0801ef7c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef7c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801ef80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef84:	b085      	sub	sp, #20
 801ef86:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801ef8a:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 801ef8e:	e9dd 0b15 	ldrd	r0, fp, [sp, #84]	; 0x54
 801ef92:	6854      	ldr	r4, [r2, #4]
 801ef94:	e9dd 9a11 	ldrd	r9, sl, [sp, #68]	; 0x44
 801ef98:	fb04 1000 	mla	r0, r4, r0, r1
 801ef9c:	6814      	ldr	r4, [r2, #0]
 801ef9e:	e9db 2500 	ldrd	r2, r5, [fp]
 801efa2:	eb04 0e40 	add.w	lr, r4, r0, lsl #1
 801efa6:	1d28      	adds	r0, r5, #4
 801efa8:	9001      	str	r0, [sp, #4]
 801efaa:	9200      	str	r2, [sp, #0]
 801efac:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
 801efb0:	9802      	ldr	r0, [sp, #8]
 801efb2:	2800      	cmp	r0, #0
 801efb4:	dc03      	bgt.n	801efbe <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801efb6:	9803      	ldr	r0, [sp, #12]
 801efb8:	2800      	cmp	r0, #0
 801efba:	f340 80b8 	ble.w	801f12e <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801efbe:	e9db 5602 	ldrd	r5, r6, [fp, #8]
 801efc2:	2b00      	cmp	r3, #0
 801efc4:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801efc8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801efcc:	b228      	sxth	r0, r5
 801efce:	b237      	sxth	r7, r6
 801efd0:	f340 80b0 	ble.w	801f134 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801efd4:	140c      	asrs	r4, r1, #16
 801efd6:	d406      	bmi.n	801efe6 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801efd8:	4284      	cmp	r4, r0
 801efda:	da04      	bge.n	801efe6 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801efdc:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801efe0:	d401      	bmi.n	801efe6 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801efe2:	45bc      	cmp	ip, r7
 801efe4:	db3c      	blt.n	801f060 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801efe6:	3b01      	subs	r3, #1
 801efe8:	4449      	add	r1, r9
 801efea:	4452      	add	r2, sl
 801efec:	f10e 0e02 	add.w	lr, lr, #2
 801eff0:	d1f0      	bne.n	801efd4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801eff2:	9b02      	ldr	r3, [sp, #8]
 801eff4:	2b00      	cmp	r3, #0
 801eff6:	f340 809a 	ble.w	801f12e <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801effa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801effe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f002:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801f006:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f00a:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801f00e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f012:	ee76 6a62 	vsub.f32	s13, s12, s5
 801f016:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801f01a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f01e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f022:	ee16 2a90 	vmov	r2, s13
 801f026:	3b01      	subs	r3, #1
 801f028:	9302      	str	r3, [sp, #8]
 801f02a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f02c:	9803      	ldr	r0, [sp, #12]
 801f02e:	fb92 f9f3 	sdiv	r9, r2, r3
 801f032:	ee17 2a10 	vmov	r2, s14
 801f036:	eeb0 7a43 	vmov.f32	s14, s6
 801f03a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f03e:	fb92 faf3 	sdiv	sl, r2, r3
 801f042:	ee17 2a10 	vmov	r2, s14
 801f046:	eeb0 7a62 	vmov.f32	s14, s5
 801f04a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f04e:	eeb0 3a67 	vmov.f32	s6, s15
 801f052:	ee17 1a10 	vmov	r1, s14
 801f056:	eef0 2a46 	vmov.f32	s5, s12
 801f05a:	bf08      	it	eq
 801f05c:	4603      	moveq	r3, r0
 801f05e:	e7a7      	b.n	801efb0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f060:	f103 38ff 	add.w	r8, r3, #4294967295
 801f064:	fb08 1c09 	mla	ip, r8, r9, r1
 801f068:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801f06c:	d56c      	bpl.n	801f148 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 801f06e:	4677      	mov	r7, lr
 801f070:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 801f074:	e002      	b.n	801f07c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801f076:	140c      	asrs	r4, r1, #16
 801f078:	e9db 5602 	ldrd	r5, r6, [fp, #8]
 801f07c:	2c00      	cmp	r4, #0
 801f07e:	db4d      	blt.n	801f11c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801f080:	42ac      	cmp	r4, r5
 801f082:	da4b      	bge.n	801f11c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801f084:	1413      	asrs	r3, r2, #16
 801f086:	d449      	bmi.n	801f11c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801f088:	42b3      	cmp	r3, r6
 801f08a:	b22d      	sxth	r5, r5
 801f08c:	da46      	bge.n	801f11c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801f08e:	9800      	ldr	r0, [sp, #0]
 801f090:	fb03 0505 	mla	r5, r3, r5, r0
 801f094:	9801      	ldr	r0, [sp, #4]
 801f096:	5d2b      	ldrb	r3, [r5, r4]
 801f098:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801f09c:	0e18      	lsrs	r0, r3, #24
 801f09e:	28ff      	cmp	r0, #255	; 0xff
 801f0a0:	f000 80c0 	beq.w	801f224 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801f0a4:	b2c4      	uxtb	r4, r0
 801f0a6:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801f0aa:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801f0ae:	b2a5      	uxth	r5, r4
 801f0b0:	b2db      	uxtb	r3, r3
 801f0b2:	b398      	cbz	r0, 801f11c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801f0b4:	43e4      	mvns	r4, r4
 801f0b6:	f8b7 8000 	ldrh.w	r8, [r7]
 801f0ba:	fb16 f605 	smulbb	r6, r6, r5
 801f0be:	fb1c fc05 	smulbb	ip, ip, r5
 801f0c2:	fb13 f505 	smulbb	r5, r3, r5
 801f0c6:	ea4f 2028 	mov.w	r0, r8, asr #8
 801f0ca:	b2e3      	uxtb	r3, r4
 801f0cc:	ea4f 04e8 	mov.w	r4, r8, asr #3
 801f0d0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f0d4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f0d8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801f0dc:	fa5f f888 	uxtb.w	r8, r8
 801f0e0:	fb04 6403 	mla	r4, r4, r3, r6
 801f0e4:	fb00 cc03 	mla	ip, r0, r3, ip
 801f0e8:	fb08 5303 	mla	r3, r8, r3, r5
 801f0ec:	fa1f fc8c 	uxth.w	ip, ip
 801f0f0:	b298      	uxth	r0, r3
 801f0f2:	b2a5      	uxth	r5, r4
 801f0f4:	f10c 0301 	add.w	r3, ip, #1
 801f0f8:	1c44      	adds	r4, r0, #1
 801f0fa:	1c6e      	adds	r6, r5, #1
 801f0fc:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801f100:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801f104:	eb06 2015 	add.w	r0, r6, r5, lsr #8
 801f108:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801f10c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801f110:	0940      	lsrs	r0, r0, #5
 801f112:	4323      	orrs	r3, r4
 801f114:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f118:	4303      	orrs	r3, r0
 801f11a:	803b      	strh	r3, [r7, #0]
 801f11c:	3702      	adds	r7, #2
 801f11e:	4577      	cmp	r7, lr
 801f120:	4449      	add	r1, r9
 801f122:	4452      	add	r2, sl
 801f124:	d1a7      	bne.n	801f076 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f126:	9b02      	ldr	r3, [sp, #8]
 801f128:	2b00      	cmp	r3, #0
 801f12a:	f73f af66 	bgt.w	801effa <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f12e:	b005      	add	sp, #20
 801f130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f134:	f43f af5d 	beq.w	801eff2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f138:	f103 38ff 	add.w	r8, r3, #4294967295
 801f13c:	fb08 1c09 	mla	ip, r8, r9, r1
 801f140:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801f144:	f53f af55 	bmi.w	801eff2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f148:	4560      	cmp	r0, ip
 801f14a:	dd65      	ble.n	801f218 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801f14c:	fb08 280a 	mla	r8, r8, sl, r2
 801f150:	ea5f 4828 	movs.w	r8, r8, asr #16
 801f154:	d460      	bmi.n	801f218 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801f156:	45b8      	cmp	r8, r7
 801f158:	da5e      	bge.n	801f218 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801f15a:	2b00      	cmp	r3, #0
 801f15c:	f77f af49 	ble.w	801eff2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f160:	eb0e 0843 	add.w	r8, lr, r3, lsl #1
 801f164:	e03f      	b.n	801f1e6 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f166:	b2f0      	uxtb	r0, r6
 801f168:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801f16c:	f3c3 2707 	ubfx	r7, r3, #8, #8
 801f170:	b284      	uxth	r4, r0
 801f172:	b2db      	uxtb	r3, r3
 801f174:	b376      	cbz	r6, 801f1d4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801f176:	43c0      	mvns	r0, r0
 801f178:	f8be 6000 	ldrh.w	r6, [lr]
 801f17c:	fb17 f704 	smulbb	r7, r7, r4
 801f180:	fb1c fc04 	smulbb	ip, ip, r4
 801f184:	fb13 f304 	smulbb	r3, r3, r4
 801f188:	1235      	asrs	r5, r6, #8
 801f18a:	10f4      	asrs	r4, r6, #3
 801f18c:	00f6      	lsls	r6, r6, #3
 801f18e:	b2c0      	uxtb	r0, r0
 801f190:	b2f6      	uxtb	r6, r6
 801f192:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f196:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801f19a:	fb04 7400 	mla	r4, r4, r0, r7
 801f19e:	fb06 3300 	mla	r3, r6, r0, r3
 801f1a2:	fb05 c500 	mla	r5, r5, r0, ip
 801f1a6:	b2a4      	uxth	r4, r4
 801f1a8:	b2ad      	uxth	r5, r5
 801f1aa:	b29b      	uxth	r3, r3
 801f1ac:	1c6e      	adds	r6, r5, #1
 801f1ae:	1c5f      	adds	r7, r3, #1
 801f1b0:	1c60      	adds	r0, r4, #1
 801f1b2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801f1b6:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801f1ba:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801f1be:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f1c2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f1c6:	0940      	lsrs	r0, r0, #5
 801f1c8:	432b      	orrs	r3, r5
 801f1ca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f1ce:	4303      	orrs	r3, r0
 801f1d0:	f8ae 3000 	strh.w	r3, [lr]
 801f1d4:	f10e 0e02 	add.w	lr, lr, #2
 801f1d8:	45c6      	cmp	lr, r8
 801f1da:	4449      	add	r1, r9
 801f1dc:	4452      	add	r2, sl
 801f1de:	f43f af08 	beq.w	801eff2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f1e2:	f9bb 0008 	ldrsh.w	r0, [fp, #8]
 801f1e6:	9c00      	ldr	r4, [sp, #0]
 801f1e8:	1413      	asrs	r3, r2, #16
 801f1ea:	fb00 4303 	mla	r3, r0, r3, r4
 801f1ee:	1408      	asrs	r0, r1, #16
 801f1f0:	5c1b      	ldrb	r3, [r3, r0]
 801f1f2:	9801      	ldr	r0, [sp, #4]
 801f1f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801f1f8:	0e1e      	lsrs	r6, r3, #24
 801f1fa:	2eff      	cmp	r6, #255	; 0xff
 801f1fc:	d1b3      	bne.n	801f166 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801f1fe:	0958      	lsrs	r0, r3, #5
 801f200:	f400 64fc 	and.w	r4, r0, #2016	; 0x7e0
 801f204:	480d      	ldr	r0, [pc, #52]	; (801f23c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801f206:	ea00 2013 	and.w	r0, r0, r3, lsr #8
 801f20a:	4320      	orrs	r0, r4
 801f20c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801f210:	4303      	orrs	r3, r0
 801f212:	f8ae 3000 	strh.w	r3, [lr]
 801f216:	e7dd      	b.n	801f1d4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801f218:	2b00      	cmp	r3, #0
 801f21a:	f77f aeea 	ble.w	801eff2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f21e:	4677      	mov	r7, lr
 801f220:	140c      	asrs	r4, r1, #16
 801f222:	e725      	b.n	801f070 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f224:	0958      	lsrs	r0, r3, #5
 801f226:	f400 64fc 	and.w	r4, r0, #2016	; 0x7e0
 801f22a:	4804      	ldr	r0, [pc, #16]	; (801f23c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801f22c:	ea00 2013 	and.w	r0, r0, r3, lsr #8
 801f230:	4320      	orrs	r0, r4
 801f232:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801f236:	4303      	orrs	r3, r0
 801f238:	803b      	strh	r3, [r7, #0]
 801f23a:	e76f      	b.n	801f11c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801f23c:	fffff800 	.word	0xfffff800

0801f240 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f244:	b089      	sub	sp, #36	; 0x24
 801f246:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 801f24a:	9104      	str	r1, [sp, #16]
 801f24c:	ea6f 0c05 	mvn.w	ip, r5
 801f250:	e9dd 4117 	ldrd	r4, r1, [sp, #92]	; 0x5c
 801f254:	e9dd 6715 	ldrd	r6, r7, [sp, #84]	; 0x54
 801f258:	6860      	ldr	r0, [r4, #4]
 801f25a:	9205      	str	r2, [sp, #20]
 801f25c:	e9dd 2b19 	ldrd	r2, fp, [sp, #100]	; 0x64
 801f260:	fb00 1102 	mla	r1, r0, r2, r1
 801f264:	6824      	ldr	r4, [r4, #0]
 801f266:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f26a:	4421      	add	r1, r4
 801f26c:	f8db 4004 	ldr.w	r4, [fp, #4]
 801f270:	f8db 2000 	ldr.w	r2, [fp]
 801f274:	3404      	adds	r4, #4
 801f276:	fa5f fc8c 	uxtb.w	ip, ip
 801f27a:	fa1f f985 	uxth.w	r9, r5
 801f27e:	9407      	str	r4, [sp, #28]
 801f280:	9202      	str	r2, [sp, #8]
 801f282:	e9dd 2013 	ldrd	r2, r0, [sp, #76]	; 0x4c
 801f286:	9c04      	ldr	r4, [sp, #16]
 801f288:	2c00      	cmp	r4, #0
 801f28a:	dc03      	bgt.n	801f294 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f28c:	9c05      	ldr	r4, [sp, #20]
 801f28e:	2c00      	cmp	r4, #0
 801f290:	f340 80b1 	ble.w	801f3f6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801f294:	e9db e802 	ldrd	lr, r8, [fp, #8]
 801f298:	2b00      	cmp	r3, #0
 801f29a:	fa0f f588 	sxth.w	r5, r8
 801f29e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f2a2:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 801f2a6:	fa0f f48e 	sxth.w	r4, lr
 801f2aa:	9503      	str	r5, [sp, #12]
 801f2ac:	f340 80a6 	ble.w	801f3fc <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801f2b0:	46f2      	mov	sl, lr
 801f2b2:	9401      	str	r4, [sp, #4]
 801f2b4:	1415      	asrs	r5, r2, #16
 801f2b6:	d408      	bmi.n	801f2ca <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f2b8:	9c01      	ldr	r4, [sp, #4]
 801f2ba:	42a5      	cmp	r5, r4
 801f2bc:	da05      	bge.n	801f2ca <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f2be:	ea5f 4e20 	movs.w	lr, r0, asr #16
 801f2c2:	d402      	bmi.n	801f2ca <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f2c4:	9c03      	ldr	r4, [sp, #12]
 801f2c6:	45a6      	cmp	lr, r4
 801f2c8:	db3e      	blt.n	801f348 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f2ca:	3b01      	subs	r3, #1
 801f2cc:	4432      	add	r2, r6
 801f2ce:	4438      	add	r0, r7
 801f2d0:	f101 0103 	add.w	r1, r1, #3
 801f2d4:	d1ee      	bne.n	801f2b4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f2d6:	9b04      	ldr	r3, [sp, #16]
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	f340 808c 	ble.w	801f3f6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801f2de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f2e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f2e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f2ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f2ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f2f2:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801f2f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f2fa:	ee76 6a62 	vsub.f32	s13, s12, s5
 801f2fe:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801f302:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f306:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f30a:	ee16 2a90 	vmov	r2, s13
 801f30e:	3b01      	subs	r3, #1
 801f310:	9304      	str	r3, [sp, #16]
 801f312:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f314:	9c05      	ldr	r4, [sp, #20]
 801f316:	fb92 f6f3 	sdiv	r6, r2, r3
 801f31a:	ee17 2a10 	vmov	r2, s14
 801f31e:	eeb0 7a43 	vmov.f32	s14, s6
 801f322:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f326:	ee17 0a10 	vmov	r0, s14
 801f32a:	eeb0 7a62 	vmov.f32	s14, s5
 801f32e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f332:	fb92 f7f3 	sdiv	r7, r2, r3
 801f336:	eeb0 3a67 	vmov.f32	s6, s15
 801f33a:	ee17 2a10 	vmov	r2, s14
 801f33e:	eef0 2a46 	vmov.f32	s5, s12
 801f342:	bf08      	it	eq
 801f344:	4623      	moveq	r3, r4
 801f346:	e79e      	b.n	801f286 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801f348:	9506      	str	r5, [sp, #24]
 801f34a:	1e5d      	subs	r5, r3, #1
 801f34c:	46d6      	mov	lr, sl
 801f34e:	fb05 2a06 	mla	sl, r5, r6, r2
 801f352:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801f356:	9c01      	ldr	r4, [sp, #4]
 801f358:	9501      	str	r5, [sp, #4]
 801f35a:	d559      	bpl.n	801f410 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801f35c:	460c      	mov	r4, r1
 801f35e:	9d06      	ldr	r5, [sp, #24]
 801f360:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f364:	4419      	add	r1, r3
 801f366:	4673      	mov	r3, lr
 801f368:	46b6      	mov	lr, r6
 801f36a:	4646      	mov	r6, r8
 801f36c:	e002      	b.n	801f374 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801f36e:	1415      	asrs	r5, r2, #16
 801f370:	e9db 3602 	ldrd	r3, r6, [fp, #8]
 801f374:	2d00      	cmp	r5, #0
 801f376:	4472      	add	r2, lr
 801f378:	db35      	blt.n	801f3e6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f37a:	429d      	cmp	r5, r3
 801f37c:	da33      	bge.n	801f3e6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f37e:	ea5f 4820 	movs.w	r8, r0, asr #16
 801f382:	d430      	bmi.n	801f3e6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f384:	45b0      	cmp	r8, r6
 801f386:	b21b      	sxth	r3, r3
 801f388:	da2d      	bge.n	801f3e6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f38a:	9e02      	ldr	r6, [sp, #8]
 801f38c:	fb08 6303 	mla	r3, r8, r3, r6
 801f390:	7826      	ldrb	r6, [r4, #0]
 801f392:	5d5b      	ldrb	r3, [r3, r5]
 801f394:	fb16 f80c 	smulbb	r8, r6, ip
 801f398:	9d07      	ldr	r5, [sp, #28]
 801f39a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f39e:	5cee      	ldrb	r6, [r5, r3]
 801f3a0:	442b      	add	r3, r5
 801f3a2:	fb06 8609 	mla	r6, r6, r9, r8
 801f3a6:	b2b6      	uxth	r6, r6
 801f3a8:	7865      	ldrb	r5, [r4, #1]
 801f3aa:	f106 0801 	add.w	r8, r6, #1
 801f3ae:	eb08 2616 	add.w	r6, r8, r6, lsr #8
 801f3b2:	1236      	asrs	r6, r6, #8
 801f3b4:	fb15 f80c 	smulbb	r8, r5, ip
 801f3b8:	7026      	strb	r6, [r4, #0]
 801f3ba:	785d      	ldrb	r5, [r3, #1]
 801f3bc:	78a6      	ldrb	r6, [r4, #2]
 801f3be:	fb05 8509 	mla	r5, r5, r9, r8
 801f3c2:	b2ad      	uxth	r5, r5
 801f3c4:	f105 0801 	add.w	r8, r5, #1
 801f3c8:	eb08 2515 	add.w	r5, r8, r5, lsr #8
 801f3cc:	122d      	asrs	r5, r5, #8
 801f3ce:	fb16 f60c 	smulbb	r6, r6, ip
 801f3d2:	7065      	strb	r5, [r4, #1]
 801f3d4:	789b      	ldrb	r3, [r3, #2]
 801f3d6:	fb03 6309 	mla	r3, r3, r9, r6
 801f3da:	b29b      	uxth	r3, r3
 801f3dc:	1c5d      	adds	r5, r3, #1
 801f3de:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801f3e2:	121b      	asrs	r3, r3, #8
 801f3e4:	70a3      	strb	r3, [r4, #2]
 801f3e6:	3403      	adds	r4, #3
 801f3e8:	428c      	cmp	r4, r1
 801f3ea:	4438      	add	r0, r7
 801f3ec:	d1bf      	bne.n	801f36e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 801f3ee:	9b04      	ldr	r3, [sp, #16]
 801f3f0:	2b00      	cmp	r3, #0
 801f3f2:	f73f af74 	bgt.w	801f2de <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f3f6:	b009      	add	sp, #36	; 0x24
 801f3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3fc:	f43f af6b 	beq.w	801f2d6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f400:	1e5d      	subs	r5, r3, #1
 801f402:	fb05 2a06 	mla	sl, r5, r6, r2
 801f406:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801f40a:	9501      	str	r5, [sp, #4]
 801f40c:	f53f af63 	bmi.w	801f2d6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f410:	4554      	cmp	r4, sl
 801f412:	dd54      	ble.n	801f4be <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f414:	9d01      	ldr	r5, [sp, #4]
 801f416:	fb05 0507 	mla	r5, r5, r7, r0
 801f41a:	ea5f 4a25 	movs.w	sl, r5, asr #16
 801f41e:	d44e      	bmi.n	801f4be <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f420:	9d03      	ldr	r5, [sp, #12]
 801f422:	45aa      	cmp	sl, r5
 801f424:	da4b      	bge.n	801f4be <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f426:	2b00      	cmp	r3, #0
 801f428:	f77f af55 	ble.w	801f2d6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f42c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f430:	eb01 0e03 	add.w	lr, r1, r3
 801f434:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801f438:	3103      	adds	r1, #3
 801f43a:	e002      	b.n	801f442 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f43c:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801f440:	3103      	adds	r1, #3
 801f442:	9d02      	ldr	r5, [sp, #8]
 801f444:	1403      	asrs	r3, r0, #16
 801f446:	fb04 5303 	mla	r3, r4, r3, r5
 801f44a:	1415      	asrs	r5, r2, #16
 801f44c:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 801f450:	5d5b      	ldrb	r3, [r3, r5]
 801f452:	fb14 f40c 	smulbb	r4, r4, ip
 801f456:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f45a:	f818 5003 	ldrb.w	r5, [r8, r3]
 801f45e:	4443      	add	r3, r8
 801f460:	fb05 4509 	mla	r5, r5, r9, r4
 801f464:	b2ad      	uxth	r5, r5
 801f466:	f105 0a01 	add.w	sl, r5, #1
 801f46a:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 801f46e:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801f472:	122d      	asrs	r5, r5, #8
 801f474:	fb14 f40c 	smulbb	r4, r4, ip
 801f478:	f801 5c03 	strb.w	r5, [r1, #-3]
 801f47c:	785d      	ldrb	r5, [r3, #1]
 801f47e:	f811 ac01 	ldrb.w	sl, [r1, #-1]
 801f482:	fb05 4409 	mla	r4, r5, r9, r4
 801f486:	b2a4      	uxth	r4, r4
 801f488:	1c65      	adds	r5, r4, #1
 801f48a:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801f48e:	1224      	asrs	r4, r4, #8
 801f490:	fb1a fa0c 	smulbb	sl, sl, ip
 801f494:	f801 4c02 	strb.w	r4, [r1, #-2]
 801f498:	789b      	ldrb	r3, [r3, #2]
 801f49a:	458e      	cmp	lr, r1
 801f49c:	fb03 aa09 	mla	sl, r3, r9, sl
 801f4a0:	fa1f fa8a 	uxth.w	sl, sl
 801f4a4:	f10a 0301 	add.w	r3, sl, #1
 801f4a8:	eb03 2a1a 	add.w	sl, r3, sl, lsr #8
 801f4ac:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f4b0:	4438      	add	r0, r7
 801f4b2:	4432      	add	r2, r6
 801f4b4:	f801 ac01 	strb.w	sl, [r1, #-1]
 801f4b8:	d1c0      	bne.n	801f43c <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f4ba:	4671      	mov	r1, lr
 801f4bc:	e70b      	b.n	801f2d6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f4be:	2b00      	cmp	r3, #0
 801f4c0:	f77f af09 	ble.w	801f2d6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f4c4:	1415      	asrs	r5, r2, #16
 801f4c6:	460c      	mov	r4, r1
 801f4c8:	9506      	str	r5, [sp, #24]
 801f4ca:	e749      	b.n	801f360 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>

0801f4cc <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4d0:	4689      	mov	r9, r1
 801f4d2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801f4d6:	46c8      	mov	r8, r9
 801f4d8:	b087      	sub	sp, #28
 801f4da:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801f4de:	684c      	ldr	r4, [r1, #4]
 801f4e0:	9203      	str	r2, [sp, #12]
 801f4e2:	e9dd 2c17 	ldrd	r2, ip, [sp, #92]	; 0x5c
 801f4e6:	fb04 0202 	mla	r2, r4, r2, r0
 801f4ea:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801f4ee:	680d      	ldr	r5, [r1, #0]
 801f4f0:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801f4f4:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801f4f8:	f8dc 2000 	ldr.w	r2, [ip]
 801f4fc:	4428      	add	r0, r5
 801f4fe:	f104 0b04 	add.w	fp, r4, #4
 801f502:	9205      	str	r2, [sp, #20]
 801f504:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801f508:	f1b8 0f00 	cmp.w	r8, #0
 801f50c:	dc03      	bgt.n	801f516 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f50e:	9c03      	ldr	r4, [sp, #12]
 801f510:	2c00      	cmp	r4, #0
 801f512:	f340 808d 	ble.w	801f630 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f516:	e9dc ea02 	ldrd	lr, sl, [ip, #8]
 801f51a:	2b00      	cmp	r3, #0
 801f51c:	fa0f f58a 	sxth.w	r5, sl
 801f520:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f524:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801f528:	fa0f f48e 	sxth.w	r4, lr
 801f52c:	9502      	str	r5, [sp, #8]
 801f52e:	f340 8082 	ble.w	801f636 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801f532:	46f1      	mov	r9, lr
 801f534:	9401      	str	r4, [sp, #4]
 801f536:	1415      	asrs	r5, r2, #16
 801f538:	d408      	bmi.n	801f54c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f53a:	9c01      	ldr	r4, [sp, #4]
 801f53c:	42a5      	cmp	r5, r4
 801f53e:	da05      	bge.n	801f54c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f540:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801f544:	d402      	bmi.n	801f54c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f546:	9c02      	ldr	r4, [sp, #8]
 801f548:	45a6      	cmp	lr, r4
 801f54a:	db3b      	blt.n	801f5c4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801f54c:	3b01      	subs	r3, #1
 801f54e:	4432      	add	r2, r6
 801f550:	4439      	add	r1, r7
 801f552:	f100 0003 	add.w	r0, r0, #3
 801f556:	d1ee      	bne.n	801f536 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f558:	f1b8 0f00 	cmp.w	r8, #0
 801f55c:	dd68      	ble.n	801f630 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f55e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f562:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f566:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801f56a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f56e:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801f572:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f576:	ee76 6a62 	vsub.f32	s13, s12, s5
 801f57a:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801f57e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f582:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f586:	ee16 2a90 	vmov	r2, s13
 801f58a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f58c:	9c03      	ldr	r4, [sp, #12]
 801f58e:	fb92 f6f3 	sdiv	r6, r2, r3
 801f592:	ee17 2a10 	vmov	r2, s14
 801f596:	eeb0 7a43 	vmov.f32	s14, s6
 801f59a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f59e:	ee17 1a10 	vmov	r1, s14
 801f5a2:	eeb0 7a62 	vmov.f32	s14, s5
 801f5a6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f5aa:	f1b8 0801 	subs.w	r8, r8, #1
 801f5ae:	fb92 f7f3 	sdiv	r7, r2, r3
 801f5b2:	eeb0 3a67 	vmov.f32	s6, s15
 801f5b6:	ee17 2a10 	vmov	r2, s14
 801f5ba:	eef0 2a46 	vmov.f32	s5, s12
 801f5be:	bf08      	it	eq
 801f5c0:	4623      	moveq	r3, r4
 801f5c2:	e7a1      	b.n	801f508 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f5c4:	9c01      	ldr	r4, [sp, #4]
 801f5c6:	9501      	str	r5, [sp, #4]
 801f5c8:	1e5d      	subs	r5, r3, #1
 801f5ca:	46ce      	mov	lr, r9
 801f5cc:	fb06 2905 	mla	r9, r6, r5, r2
 801f5d0:	ea5f 4929 	movs.w	r9, r9, asr #16
 801f5d4:	9504      	str	r5, [sp, #16]
 801f5d6:	d536      	bpl.n	801f646 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801f5d8:	4604      	mov	r4, r0
 801f5da:	9d01      	ldr	r5, [sp, #4]
 801f5dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f5e0:	4418      	add	r0, r3
 801f5e2:	4673      	mov	r3, lr
 801f5e4:	46b6      	mov	lr, r6
 801f5e6:	4656      	mov	r6, sl
 801f5e8:	e002      	b.n	801f5f0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801f5ea:	1415      	asrs	r5, r2, #16
 801f5ec:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801f5f0:	2d00      	cmp	r5, #0
 801f5f2:	4472      	add	r2, lr
 801f5f4:	db15      	blt.n	801f622 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f5f6:	429d      	cmp	r5, r3
 801f5f8:	da13      	bge.n	801f622 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f5fa:	ea5f 4921 	movs.w	r9, r1, asr #16
 801f5fe:	d410      	bmi.n	801f622 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f600:	45b1      	cmp	r9, r6
 801f602:	da0e      	bge.n	801f622 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f604:	9e05      	ldr	r6, [sp, #20]
 801f606:	b21b      	sxth	r3, r3
 801f608:	fb09 6303 	mla	r3, r9, r3, r6
 801f60c:	5d5b      	ldrb	r3, [r3, r5]
 801f60e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f612:	f81b 5003 	ldrb.w	r5, [fp, r3]
 801f616:	445b      	add	r3, fp
 801f618:	7025      	strb	r5, [r4, #0]
 801f61a:	785d      	ldrb	r5, [r3, #1]
 801f61c:	7065      	strb	r5, [r4, #1]
 801f61e:	789b      	ldrb	r3, [r3, #2]
 801f620:	70a3      	strb	r3, [r4, #2]
 801f622:	3403      	adds	r4, #3
 801f624:	4284      	cmp	r4, r0
 801f626:	4439      	add	r1, r7
 801f628:	d1df      	bne.n	801f5ea <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f62a:	f1b8 0f00 	cmp.w	r8, #0
 801f62e:	dc96      	bgt.n	801f55e <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f630:	b007      	add	sp, #28
 801f632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f636:	d08f      	beq.n	801f558 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f638:	1e5d      	subs	r5, r3, #1
 801f63a:	fb06 2905 	mla	r9, r6, r5, r2
 801f63e:	ea5f 4929 	movs.w	r9, r9, asr #16
 801f642:	9504      	str	r5, [sp, #16]
 801f644:	d488      	bmi.n	801f558 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f646:	45a1      	cmp	r9, r4
 801f648:	da2d      	bge.n	801f6a6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801f64a:	9d04      	ldr	r5, [sp, #16]
 801f64c:	fb07 1505 	mla	r5, r7, r5, r1
 801f650:	ea5f 4925 	movs.w	r9, r5, asr #16
 801f654:	d427      	bmi.n	801f6a6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801f656:	9d02      	ldr	r5, [sp, #8]
 801f658:	454d      	cmp	r5, r9
 801f65a:	dd24      	ble.n	801f6a6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801f65c:	2b00      	cmp	r3, #0
 801f65e:	f77f af7b 	ble.w	801f558 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f662:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f666:	18c5      	adds	r5, r0, r3
 801f668:	f8dd e014 	ldr.w	lr, [sp, #20]
 801f66c:	3003      	adds	r0, #3
 801f66e:	e002      	b.n	801f676 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801f670:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 801f674:	3003      	adds	r0, #3
 801f676:	140b      	asrs	r3, r1, #16
 801f678:	fb04 e303 	mla	r3, r4, r3, lr
 801f67c:	1414      	asrs	r4, r2, #16
 801f67e:	5d1b      	ldrb	r3, [r3, r4]
 801f680:	4285      	cmp	r5, r0
 801f682:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f686:	f81b 4003 	ldrb.w	r4, [fp, r3]
 801f68a:	445b      	add	r3, fp
 801f68c:	f800 4c03 	strb.w	r4, [r0, #-3]
 801f690:	785c      	ldrb	r4, [r3, #1]
 801f692:	4439      	add	r1, r7
 801f694:	f800 4c02 	strb.w	r4, [r0, #-2]
 801f698:	789b      	ldrb	r3, [r3, #2]
 801f69a:	4432      	add	r2, r6
 801f69c:	f800 3c01 	strb.w	r3, [r0, #-1]
 801f6a0:	d1e6      	bne.n	801f670 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f6a2:	4628      	mov	r0, r5
 801f6a4:	e758      	b.n	801f558 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f6a6:	2b00      	cmp	r3, #0
 801f6a8:	f77f af56 	ble.w	801f558 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f6ac:	1415      	asrs	r5, r2, #16
 801f6ae:	4604      	mov	r4, r0
 801f6b0:	9501      	str	r5, [sp, #4]
 801f6b2:	e793      	b.n	801f5dc <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>

0801f6b4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6b8:	b087      	sub	sp, #28
 801f6ba:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801f6be:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801f6c2:	e9dd 2c17 	ldrd	r2, ip, [sp, #92]	; 0x5c
 801f6c6:	684c      	ldr	r4, [r1, #4]
 801f6c8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801f6cc:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801f6d0:	fb04 0202 	mla	r2, r4, r2, r0
 801f6d4:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 801f6d8:	f8dc 2000 	ldr.w	r2, [ip]
 801f6dc:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801f6e0:	9201      	str	r2, [sp, #4]
 801f6e2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f6e6:	6808      	ldr	r0, [r1, #0]
 801f6e8:	9204      	str	r2, [sp, #16]
 801f6ea:	1d22      	adds	r2, r4, #4
 801f6ec:	e9dd e111 	ldrd	lr, r1, [sp, #68]	; 0x44
 801f6f0:	9205      	str	r2, [sp, #20]
 801f6f2:	4672      	mov	r2, lr
 801f6f4:	4428      	add	r0, r5
 801f6f6:	9c02      	ldr	r4, [sp, #8]
 801f6f8:	2c00      	cmp	r4, #0
 801f6fa:	dc03      	bgt.n	801f704 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801f6fc:	9c03      	ldr	r4, [sp, #12]
 801f6fe:	2c00      	cmp	r4, #0
 801f700:	f340 80ba 	ble.w	801f878 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801f704:	e9dc e802 	ldrd	lr, r8, [ip, #8]
 801f708:	2b00      	cmp	r3, #0
 801f70a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f70e:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801f712:	fa0f f48e 	sxth.w	r4, lr
 801f716:	fa0f f988 	sxth.w	r9, r8
 801f71a:	f340 80b0 	ble.w	801f87e <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801f71e:	1415      	asrs	r5, r2, #16
 801f720:	d406      	bmi.n	801f730 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f722:	42a5      	cmp	r5, r4
 801f724:	da04      	bge.n	801f730 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f726:	ea5f 4a21 	movs.w	sl, r1, asr #16
 801f72a:	d401      	bmi.n	801f730 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f72c:	45ca      	cmp	sl, r9
 801f72e:	db3c      	blt.n	801f7aa <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801f730:	3b01      	subs	r3, #1
 801f732:	4432      	add	r2, r6
 801f734:	4439      	add	r1, r7
 801f736:	f100 0003 	add.w	r0, r0, #3
 801f73a:	d1f0      	bne.n	801f71e <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f73c:	9b02      	ldr	r3, [sp, #8]
 801f73e:	2b00      	cmp	r3, #0
 801f740:	f340 809a 	ble.w	801f878 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801f744:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f748:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f74c:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801f750:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f754:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801f758:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f75c:	ee76 6a62 	vsub.f32	s13, s12, s5
 801f760:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801f764:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f768:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f76c:	ee16 2a90 	vmov	r2, s13
 801f770:	3b01      	subs	r3, #1
 801f772:	9302      	str	r3, [sp, #8]
 801f774:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f776:	9c03      	ldr	r4, [sp, #12]
 801f778:	fb92 f6f3 	sdiv	r6, r2, r3
 801f77c:	ee17 2a10 	vmov	r2, s14
 801f780:	eeb0 7a43 	vmov.f32	s14, s6
 801f784:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f788:	ee17 1a10 	vmov	r1, s14
 801f78c:	eeb0 7a62 	vmov.f32	s14, s5
 801f790:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f794:	fb92 f7f3 	sdiv	r7, r2, r3
 801f798:	eeb0 3a67 	vmov.f32	s6, s15
 801f79c:	ee17 2a10 	vmov	r2, s14
 801f7a0:	eef0 2a46 	vmov.f32	s5, s12
 801f7a4:	bf08      	it	eq
 801f7a6:	4623      	moveq	r3, r4
 801f7a8:	e7a5      	b.n	801f6f6 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801f7aa:	f103 3bff 	add.w	fp, r3, #4294967295
 801f7ae:	fb0b 2a06 	mla	sl, fp, r6, r2
 801f7b2:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801f7b6:	d56c      	bpl.n	801f892 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f7b8:	4604      	mov	r4, r0
 801f7ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f7be:	4418      	add	r0, r3
 801f7c0:	4673      	mov	r3, lr
 801f7c2:	46b6      	mov	lr, r6
 801f7c4:	4646      	mov	r6, r8
 801f7c6:	e002      	b.n	801f7ce <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801f7c8:	1415      	asrs	r5, r2, #16
 801f7ca:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801f7ce:	2d00      	cmp	r5, #0
 801f7d0:	4472      	add	r2, lr
 801f7d2:	db49      	blt.n	801f868 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f7d4:	429d      	cmp	r5, r3
 801f7d6:	da47      	bge.n	801f868 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f7d8:	ea5f 4821 	movs.w	r8, r1, asr #16
 801f7dc:	d444      	bmi.n	801f868 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f7de:	45b0      	cmp	r8, r6
 801f7e0:	b21b      	sxth	r3, r3
 801f7e2:	da41      	bge.n	801f868 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f7e4:	9e01      	ldr	r6, [sp, #4]
 801f7e6:	fb08 6303 	mla	r3, r8, r3, r6
 801f7ea:	5d5b      	ldrb	r3, [r3, r5]
 801f7ec:	9d05      	ldr	r5, [sp, #20]
 801f7ee:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f7f2:	0e1d      	lsrs	r5, r3, #24
 801f7f4:	d038      	beq.n	801f868 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f7f6:	9e04      	ldr	r6, [sp, #16]
 801f7f8:	fa5f f983 	uxtb.w	r9, r3
 801f7fc:	fb06 f605 	mul.w	r6, r6, r5
 801f800:	1c75      	adds	r5, r6, #1
 801f802:	eb05 2526 	add.w	r5, r5, r6, asr #8
 801f806:	122d      	asrs	r5, r5, #8
 801f808:	43ee      	mvns	r6, r5
 801f80a:	b2ad      	uxth	r5, r5
 801f80c:	fb19 f905 	smulbb	r9, r9, r5
 801f810:	f3c3 2807 	ubfx	r8, r3, #8, #8
 801f814:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f818:	f894 a000 	ldrb.w	sl, [r4]
 801f81c:	fb18 f805 	smulbb	r8, r8, r5
 801f820:	fb13 f305 	smulbb	r3, r3, r5
 801f824:	b2f5      	uxtb	r5, r6
 801f826:	fb0a 9605 	mla	r6, sl, r5, r9
 801f82a:	f894 b001 	ldrb.w	fp, [r4, #1]
 801f82e:	f894 9002 	ldrb.w	r9, [r4, #2]
 801f832:	fb0b 8805 	mla	r8, fp, r5, r8
 801f836:	fb09 3305 	mla	r3, r9, r5, r3
 801f83a:	fa1f fa86 	uxth.w	sl, r6
 801f83e:	fa1f f888 	uxth.w	r8, r8
 801f842:	b29b      	uxth	r3, r3
 801f844:	f10a 0601 	add.w	r6, sl, #1
 801f848:	f108 0501 	add.w	r5, r8, #1
 801f84c:	f103 0901 	add.w	r9, r3, #1
 801f850:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 801f854:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 801f858:	eb09 2313 	add.w	r3, r9, r3, lsr #8
 801f85c:	1236      	asrs	r6, r6, #8
 801f85e:	122d      	asrs	r5, r5, #8
 801f860:	121b      	asrs	r3, r3, #8
 801f862:	7026      	strb	r6, [r4, #0]
 801f864:	7065      	strb	r5, [r4, #1]
 801f866:	70a3      	strb	r3, [r4, #2]
 801f868:	3403      	adds	r4, #3
 801f86a:	4284      	cmp	r4, r0
 801f86c:	4439      	add	r1, r7
 801f86e:	d1ab      	bne.n	801f7c8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f870:	9b02      	ldr	r3, [sp, #8]
 801f872:	2b00      	cmp	r3, #0
 801f874:	f73f af66 	bgt.w	801f744 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f878:	b007      	add	sp, #28
 801f87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f87e:	f43f af5d 	beq.w	801f73c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f882:	f103 3bff 	add.w	fp, r3, #4294967295
 801f886:	fb0b 2a06 	mla	sl, fp, r6, r2
 801f88a:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801f88e:	f53f af55 	bmi.w	801f73c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f892:	4554      	cmp	r4, sl
 801f894:	dd64      	ble.n	801f960 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801f896:	fb0b 1b07 	mla	fp, fp, r7, r1
 801f89a:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801f89e:	d45f      	bmi.n	801f960 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801f8a0:	45cb      	cmp	fp, r9
 801f8a2:	da5d      	bge.n	801f960 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801f8a4:	2b00      	cmp	r3, #0
 801f8a6:	f77f af49 	ble.w	801f73c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f8aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f8ae:	eb00 0e03 	add.w	lr, r0, r3
 801f8b2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801f8b6:	3003      	adds	r0, #3
 801f8b8:	e002      	b.n	801f8c0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801f8ba:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 801f8be:	3003      	adds	r0, #3
 801f8c0:	9d01      	ldr	r5, [sp, #4]
 801f8c2:	140b      	asrs	r3, r1, #16
 801f8c4:	fb04 5303 	mla	r3, r4, r3, r5
 801f8c8:	1414      	asrs	r4, r2, #16
 801f8ca:	5d1b      	ldrb	r3, [r3, r4]
 801f8cc:	4432      	add	r2, r6
 801f8ce:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801f8d2:	4439      	add	r1, r7
 801f8d4:	ea5f 6a13 	movs.w	sl, r3, lsr #24
 801f8d8:	d03e      	beq.n	801f958 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801f8da:	9c04      	ldr	r4, [sp, #16]
 801f8dc:	fa5f f983 	uxtb.w	r9, r3
 801f8e0:	fb04 f40a 	mul.w	r4, r4, sl
 801f8e4:	f104 0a01 	add.w	sl, r4, #1
 801f8e8:	eb0a 2a24 	add.w	sl, sl, r4, asr #8
 801f8ec:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f8f0:	ea6f 040a 	mvn.w	r4, sl
 801f8f4:	fa1f fa8a 	uxth.w	sl, sl
 801f8f8:	fb19 f90a 	smulbb	r9, r9, sl
 801f8fc:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801f900:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f904:	fb15 fb0a 	smulbb	fp, r5, sl
 801f908:	fb13 f30a 	smulbb	r3, r3, sl
 801f90c:	f810 ac03 	ldrb.w	sl, [r0, #-3]
 801f910:	b2e4      	uxtb	r4, r4
 801f912:	fb0a 9904 	mla	r9, sl, r4, r9
 801f916:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 801f91a:	f810 ac01 	ldrb.w	sl, [r0, #-1]
 801f91e:	fb05 b504 	mla	r5, r5, r4, fp
 801f922:	fb0a 3304 	mla	r3, sl, r4, r3
 801f926:	fa1f f989 	uxth.w	r9, r9
 801f92a:	b2ad      	uxth	r5, r5
 801f92c:	b29b      	uxth	r3, r3
 801f92e:	f109 0b01 	add.w	fp, r9, #1
 801f932:	f105 0a01 	add.w	sl, r5, #1
 801f936:	1c5c      	adds	r4, r3, #1
 801f938:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f93c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801f940:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f944:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f948:	122d      	asrs	r5, r5, #8
 801f94a:	121b      	asrs	r3, r3, #8
 801f94c:	f800 9c03 	strb.w	r9, [r0, #-3]
 801f950:	f800 5c02 	strb.w	r5, [r0, #-2]
 801f954:	f800 3c01 	strb.w	r3, [r0, #-1]
 801f958:	4586      	cmp	lr, r0
 801f95a:	d1ae      	bne.n	801f8ba <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f95c:	4670      	mov	r0, lr
 801f95e:	e6ed      	b.n	801f73c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f960:	2b00      	cmp	r3, #0
 801f962:	f77f aeeb 	ble.w	801f73c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f966:	4604      	mov	r4, r0
 801f968:	1415      	asrs	r5, r2, #16
 801f96a:	e726      	b.n	801f7ba <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>

0801f96c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f96c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801f970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f974:	b087      	sub	sp, #28
 801f976:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801f97a:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801f97e:	e9dd 2b17 	ldrd	r2, fp, [sp, #92]	; 0x5c
 801f982:	684c      	ldr	r4, [r1, #4]
 801f984:	680d      	ldr	r5, [r1, #0]
 801f986:	fb04 0202 	mla	r2, r4, r2, r0
 801f98a:	e9dd 8913 	ldrd	r8, r9, [sp, #76]	; 0x4c
 801f98e:	f8db 4004 	ldr.w	r4, [fp, #4]
 801f992:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801f996:	3404      	adds	r4, #4
 801f998:	f8db 2000 	ldr.w	r2, [fp]
 801f99c:	4428      	add	r0, r5
 801f99e:	9402      	str	r4, [sp, #8]
 801f9a0:	9201      	str	r2, [sp, #4]
 801f9a2:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801f9a6:	9c03      	ldr	r4, [sp, #12]
 801f9a8:	2c00      	cmp	r4, #0
 801f9aa:	dc03      	bgt.n	801f9b4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f9ac:	9c04      	ldr	r4, [sp, #16]
 801f9ae:	2c00      	cmp	r4, #0
 801f9b0:	f340 80b7 	ble.w	801fb22 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801f9b4:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801f9b8:	2b00      	cmp	r3, #0
 801f9ba:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f9be:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801f9c2:	b234      	sxth	r4, r6
 801f9c4:	fa0f fc87 	sxth.w	ip, r7
 801f9c8:	f340 80ae 	ble.w	801fb28 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801f9cc:	1415      	asrs	r5, r2, #16
 801f9ce:	d406      	bmi.n	801f9de <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f9d0:	42a5      	cmp	r5, r4
 801f9d2:	da04      	bge.n	801f9de <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f9d4:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801f9d8:	d401      	bmi.n	801f9de <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f9da:	45e6      	cmp	lr, ip
 801f9dc:	db3c      	blt.n	801fa58 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xec>
 801f9de:	3b01      	subs	r3, #1
 801f9e0:	4442      	add	r2, r8
 801f9e2:	4449      	add	r1, r9
 801f9e4:	f100 0003 	add.w	r0, r0, #3
 801f9e8:	d1f0      	bne.n	801f9cc <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f9ea:	9b03      	ldr	r3, [sp, #12]
 801f9ec:	2b00      	cmp	r3, #0
 801f9ee:	f340 8098 	ble.w	801fb22 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801f9f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f9f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f9fa:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801f9fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fa02:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801fa06:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fa0a:	ee76 6a62 	vsub.f32	s13, s12, s5
 801fa0e:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801fa12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa16:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fa1a:	ee16 2a90 	vmov	r2, s13
 801fa1e:	3b01      	subs	r3, #1
 801fa20:	9303      	str	r3, [sp, #12]
 801fa22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fa24:	9c04      	ldr	r4, [sp, #16]
 801fa26:	fb92 f8f3 	sdiv	r8, r2, r3
 801fa2a:	ee17 2a10 	vmov	r2, s14
 801fa2e:	eeb0 7a43 	vmov.f32	s14, s6
 801fa32:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fa36:	ee17 1a10 	vmov	r1, s14
 801fa3a:	eeb0 7a62 	vmov.f32	s14, s5
 801fa3e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fa42:	fb92 f9f3 	sdiv	r9, r2, r3
 801fa46:	eeb0 3a67 	vmov.f32	s6, s15
 801fa4a:	ee17 2a10 	vmov	r2, s14
 801fa4e:	eef0 2a46 	vmov.f32	s5, s12
 801fa52:	bf08      	it	eq
 801fa54:	4623      	moveq	r3, r4
 801fa56:	e7a6      	b.n	801f9a6 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801fa58:	f103 3aff 	add.w	sl, r3, #4294967295
 801fa5c:	fb0a 2e08 	mla	lr, sl, r8, r2
 801fa60:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801fa64:	d56a      	bpl.n	801fb3c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801fa66:	4604      	mov	r4, r0
 801fa68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa6c:	4418      	add	r0, r3
 801fa6e:	e002      	b.n	801fa76 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801fa70:	1415      	asrs	r5, r2, #16
 801fa72:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801fa76:	2d00      	cmp	r5, #0
 801fa78:	db4a      	blt.n	801fb10 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801fa7a:	42b5      	cmp	r5, r6
 801fa7c:	da48      	bge.n	801fb10 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801fa7e:	140b      	asrs	r3, r1, #16
 801fa80:	d446      	bmi.n	801fb10 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801fa82:	42bb      	cmp	r3, r7
 801fa84:	b236      	sxth	r6, r6
 801fa86:	da43      	bge.n	801fb10 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801fa88:	9f01      	ldr	r7, [sp, #4]
 801fa8a:	fb03 7606 	mla	r6, r3, r6, r7
 801fa8e:	5d73      	ldrb	r3, [r6, r5]
 801fa90:	9d02      	ldr	r5, [sp, #8]
 801fa92:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801fa96:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fa9a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fa9e:	f000 80be 	beq.w	801fc1e <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 801faa2:	b2df      	uxtb	r7, r3
 801faa4:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801faa8:	f3c3 4a07 	ubfx	sl, r3, #16, #8
 801faac:	fa5f f38c 	uxtb.w	r3, ip
 801fab0:	b29d      	uxth	r5, r3
 801fab2:	f1bc 0f00 	cmp.w	ip, #0
 801fab6:	d02b      	beq.n	801fb10 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801fab8:	43db      	mvns	r3, r3
 801faba:	b2db      	uxtb	r3, r3
 801fabc:	9305      	str	r3, [sp, #20]
 801fabe:	f894 e001 	ldrb.w	lr, [r4, #1]
 801fac2:	fb17 f305 	smulbb	r3, r7, r5
 801fac6:	9f05      	ldr	r7, [sp, #20]
 801fac8:	f894 c002 	ldrb.w	ip, [r4, #2]
 801facc:	fb1e fe07 	smulbb	lr, lr, r7
 801fad0:	fb1c fc07 	smulbb	ip, ip, r7
 801fad4:	fb06 ee05 	mla	lr, r6, r5, lr
 801fad8:	7827      	ldrb	r7, [r4, #0]
 801fada:	9e05      	ldr	r6, [sp, #20]
 801fadc:	fb0a c505 	mla	r5, sl, r5, ip
 801fae0:	fb07 3706 	mla	r7, r7, r6, r3
 801fae4:	b2ab      	uxth	r3, r5
 801fae6:	b2bf      	uxth	r7, r7
 801fae8:	fa1f f68e 	uxth.w	r6, lr
 801faec:	1c7d      	adds	r5, r7, #1
 801faee:	f106 0e01 	add.w	lr, r6, #1
 801faf2:	f103 0c01 	add.w	ip, r3, #1
 801faf6:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801fafa:	eb0c 2613 	add.w	r6, ip, r3, lsr #8
 801fafe:	eb05 2317 	add.w	r3, r5, r7, lsr #8
 801fb02:	121b      	asrs	r3, r3, #8
 801fb04:	ea4f 272e 	mov.w	r7, lr, asr #8
 801fb08:	1235      	asrs	r5, r6, #8
 801fb0a:	7067      	strb	r7, [r4, #1]
 801fb0c:	70a5      	strb	r5, [r4, #2]
 801fb0e:	7023      	strb	r3, [r4, #0]
 801fb10:	3403      	adds	r4, #3
 801fb12:	4284      	cmp	r4, r0
 801fb14:	4442      	add	r2, r8
 801fb16:	4449      	add	r1, r9
 801fb18:	d1aa      	bne.n	801fa70 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801fb1a:	9b03      	ldr	r3, [sp, #12]
 801fb1c:	2b00      	cmp	r3, #0
 801fb1e:	f73f af68 	bgt.w	801f9f2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fb22:	b007      	add	sp, #28
 801fb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb28:	f43f af5f 	beq.w	801f9ea <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fb2c:	f103 3aff 	add.w	sl, r3, #4294967295
 801fb30:	fb0a 2e08 	mla	lr, sl, r8, r2
 801fb34:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801fb38:	f53f af57 	bmi.w	801f9ea <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fb3c:	4574      	cmp	r4, lr
 801fb3e:	dd68      	ble.n	801fc12 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801fb40:	fb0a 1a09 	mla	sl, sl, r9, r1
 801fb44:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801fb48:	d463      	bmi.n	801fc12 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801fb4a:	45e2      	cmp	sl, ip
 801fb4c:	da61      	bge.n	801fc12 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801fb4e:	2b00      	cmp	r3, #0
 801fb50:	f77f af4b 	ble.w	801f9ea <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fb54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fb58:	eb00 0e03 	add.w	lr, r0, r3
 801fb5c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801fb60:	3003      	adds	r0, #3
 801fb62:	e03b      	b.n	801fbdc <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 801fb64:	b2fc      	uxtb	r4, r7
 801fb66:	fa5f fc83 	uxtb.w	ip, r3
 801fb6a:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801fb6e:	b2a5      	uxth	r5, r4
 801fb70:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801fb74:	b357      	cbz	r7, 801fbcc <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801fb76:	43e4      	mvns	r4, r4
 801fb78:	f810 ac02 	ldrb.w	sl, [r0, #-2]
 801fb7c:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801fb80:	b2e4      	uxtb	r4, r4
 801fb82:	fb1c fc05 	smulbb	ip, ip, r5
 801fb86:	fb18 f804 	smulbb	r8, r8, r4
 801fb8a:	fb1a fa04 	smulbb	sl, sl, r4
 801fb8e:	f810 7c03 	ldrb.w	r7, [r0, #-3]
 801fb92:	fb03 8305 	mla	r3, r3, r5, r8
 801fb96:	fb06 a605 	mla	r6, r6, r5, sl
 801fb9a:	fb07 c404 	mla	r4, r7, r4, ip
 801fb9e:	b2b6      	uxth	r6, r6
 801fba0:	b2a4      	uxth	r4, r4
 801fba2:	b29b      	uxth	r3, r3
 801fba4:	f106 0c01 	add.w	ip, r6, #1
 801fba8:	f103 0801 	add.w	r8, r3, #1
 801fbac:	1c65      	adds	r5, r4, #1
 801fbae:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801fbb2:	eb08 2313 	add.w	r3, r8, r3, lsr #8
 801fbb6:	eb05 2514 	add.w	r5, r5, r4, lsr #8
 801fbba:	1236      	asrs	r6, r6, #8
 801fbbc:	121b      	asrs	r3, r3, #8
 801fbbe:	122d      	asrs	r5, r5, #8
 801fbc0:	f800 6c02 	strb.w	r6, [r0, #-2]
 801fbc4:	f800 3c01 	strb.w	r3, [r0, #-1]
 801fbc8:	f800 5c03 	strb.w	r5, [r0, #-3]
 801fbcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fbce:	4586      	cmp	lr, r0
 801fbd0:	441a      	add	r2, r3
 801fbd2:	4449      	add	r1, r9
 801fbd4:	d01b      	beq.n	801fc0e <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801fbd6:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801fbda:	3003      	adds	r0, #3
 801fbdc:	9d01      	ldr	r5, [sp, #4]
 801fbde:	140b      	asrs	r3, r1, #16
 801fbe0:	fb04 5303 	mla	r3, r4, r3, r5
 801fbe4:	1414      	asrs	r4, r2, #16
 801fbe6:	5d1b      	ldrb	r3, [r3, r4]
 801fbe8:	9c02      	ldr	r4, [sp, #8]
 801fbea:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801fbee:	0e1f      	lsrs	r7, r3, #24
 801fbf0:	2fff      	cmp	r7, #255	; 0xff
 801fbf2:	d1b7      	bne.n	801fb64 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801fbf4:	0a1d      	lsrs	r5, r3, #8
 801fbf6:	0c1c      	lsrs	r4, r3, #16
 801fbf8:	f800 3c03 	strb.w	r3, [r0, #-3]
 801fbfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fbfe:	4586      	cmp	lr, r0
 801fc00:	f800 5c02 	strb.w	r5, [r0, #-2]
 801fc04:	f800 4c01 	strb.w	r4, [r0, #-1]
 801fc08:	441a      	add	r2, r3
 801fc0a:	4449      	add	r1, r9
 801fc0c:	d1e3      	bne.n	801fbd6 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801fc0e:	4670      	mov	r0, lr
 801fc10:	e6eb      	b.n	801f9ea <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fc12:	2b00      	cmp	r3, #0
 801fc14:	f77f aee9 	ble.w	801f9ea <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fc18:	4604      	mov	r4, r0
 801fc1a:	1415      	asrs	r5, r2, #16
 801fc1c:	e724      	b.n	801fa68 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801fc1e:	0a1e      	lsrs	r6, r3, #8
 801fc20:	0c1d      	lsrs	r5, r3, #16
 801fc22:	7023      	strb	r3, [r4, #0]
 801fc24:	7066      	strb	r6, [r4, #1]
 801fc26:	70a5      	strb	r5, [r4, #2]
 801fc28:	e772      	b.n	801fb10 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801fc2a:	bf00      	nop

0801fc2c <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc30:	b089      	sub	sp, #36	; 0x24
 801fc32:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 801fc36:	9101      	str	r1, [sp, #4]
 801fc38:	ea6f 0a00 	mvn.w	sl, r0
 801fc3c:	e9dd e815 	ldrd	lr, r8, [sp, #84]	; 0x54
 801fc40:	9919      	ldr	r1, [sp, #100]	; 0x64
 801fc42:	9202      	str	r2, [sp, #8]
 801fc44:	e9dd 5217 	ldrd	r5, r2, [sp, #92]	; 0x5c
 801fc48:	686c      	ldr	r4, [r5, #4]
 801fc4a:	682f      	ldr	r7, [r5, #0]
 801fc4c:	fb04 2401 	mla	r4, r4, r1, r2
 801fc50:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801fc52:	b280      	uxth	r0, r0
 801fc54:	e9d2 2100 	ldrd	r2, r1, [r2]
 801fc58:	3104      	adds	r1, #4
 801fc5a:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 801fc5e:	fa5f fa8a 	uxtb.w	sl, sl
 801fc62:	9007      	str	r0, [sp, #28]
 801fc64:	9105      	str	r1, [sp, #20]
 801fc66:	9200      	str	r2, [sp, #0]
 801fc68:	e9dd 2513 	ldrd	r2, r5, [sp, #76]	; 0x4c
 801fc6c:	9901      	ldr	r1, [sp, #4]
 801fc6e:	2900      	cmp	r1, #0
 801fc70:	dc03      	bgt.n	801fc7a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801fc72:	9902      	ldr	r1, [sp, #8]
 801fc74:	2900      	cmp	r1, #0
 801fc76:	f340 80b6 	ble.w	801fde6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801fc7a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801fc7c:	2b00      	cmp	r3, #0
 801fc7e:	e9d1 4602 	ldrd	r4, r6, [r1, #8]
 801fc82:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fc86:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 801fc8a:	b221      	sxth	r1, r4
 801fc8c:	fa0f fc86 	sxth.w	ip, r6
 801fc90:	f340 80ac 	ble.w	801fdec <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801fc94:	1410      	asrs	r0, r2, #16
 801fc96:	d406      	bmi.n	801fca6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fc98:	4288      	cmp	r0, r1
 801fc9a:	da04      	bge.n	801fca6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fc9c:	ea5f 4925 	movs.w	r9, r5, asr #16
 801fca0:	d401      	bmi.n	801fca6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fca2:	45e1      	cmp	r9, ip
 801fca4:	db3e      	blt.n	801fd24 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801fca6:	3b01      	subs	r3, #1
 801fca8:	4472      	add	r2, lr
 801fcaa:	4445      	add	r5, r8
 801fcac:	f107 0704 	add.w	r7, r7, #4
 801fcb0:	d1f0      	bne.n	801fc94 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fcb2:	9b01      	ldr	r3, [sp, #4]
 801fcb4:	2b00      	cmp	r3, #0
 801fcb6:	f340 8096 	ble.w	801fde6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801fcba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fcbe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fcc2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fcc6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fcca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fcce:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801fcd2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fcd6:	ee76 6a62 	vsub.f32	s13, s12, s5
 801fcda:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801fcde:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fce2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fce6:	ee16 2a90 	vmov	r2, s13
 801fcea:	3b01      	subs	r3, #1
 801fcec:	9301      	str	r3, [sp, #4]
 801fcee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fcf0:	9902      	ldr	r1, [sp, #8]
 801fcf2:	fb92 fef3 	sdiv	lr, r2, r3
 801fcf6:	ee17 2a10 	vmov	r2, s14
 801fcfa:	eeb0 7a43 	vmov.f32	s14, s6
 801fcfe:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fd02:	ee17 5a10 	vmov	r5, s14
 801fd06:	eeb0 7a62 	vmov.f32	s14, s5
 801fd0a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fd0e:	fb92 f8f3 	sdiv	r8, r2, r3
 801fd12:	eeb0 3a67 	vmov.f32	s6, s15
 801fd16:	ee17 2a10 	vmov	r2, s14
 801fd1a:	eef0 2a46 	vmov.f32	s5, s12
 801fd1e:	bf08      	it	eq
 801fd20:	460b      	moveq	r3, r1
 801fd22:	e7a3      	b.n	801fc6c <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801fd24:	f103 39ff 	add.w	r9, r3, #4294967295
 801fd28:	fb09 2b0e 	mla	fp, r9, lr, r2
 801fd2c:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801fd30:	d566      	bpl.n	801fe00 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801fd32:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801fd36:	991a      	ldr	r1, [sp, #104]	; 0x68
 801fd38:	e002      	b.n	801fd40 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801fd3a:	1410      	asrs	r0, r2, #16
 801fd3c:	e9d1 4602 	ldrd	r4, r6, [r1, #8]
 801fd40:	2800      	cmp	r0, #0
 801fd42:	f109 39ff 	add.w	r9, r9, #4294967295
 801fd46:	4472      	add	r2, lr
 801fd48:	db3f      	blt.n	801fdca <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801fd4a:	42a0      	cmp	r0, r4
 801fd4c:	da3d      	bge.n	801fdca <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801fd4e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801fd52:	d43a      	bmi.n	801fdca <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801fd54:	45b4      	cmp	ip, r6
 801fd56:	da38      	bge.n	801fdca <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801fd58:	9e00      	ldr	r6, [sp, #0]
 801fd5a:	b224      	sxth	r4, r4
 801fd5c:	fb0c 6404 	mla	r4, ip, r4, r6
 801fd60:	f814 b000 	ldrb.w	fp, [r4, r0]
 801fd64:	7838      	ldrb	r0, [r7, #0]
 801fd66:	9c05      	ldr	r4, [sp, #20]
 801fd68:	fb10 f30a 	smulbb	r3, r0, sl
 801fd6c:	9306      	str	r3, [sp, #24]
 801fd6e:	9b07      	ldr	r3, [sp, #28]
 801fd70:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801fd74:	4618      	mov	r0, r3
 801fd76:	eb04 060b 	add.w	r6, r4, fp
 801fd7a:	78b4      	ldrb	r4, [r6, #2]
 801fd7c:	7876      	ldrb	r6, [r6, #1]
 801fd7e:	fb14 fc03 	smulbb	ip, r4, r3
 801fd82:	9c05      	ldr	r4, [sp, #20]
 801fd84:	fb16 f603 	smulbb	r6, r6, r3
 801fd88:	f814 400b 	ldrb.w	r4, [r4, fp]
 801fd8c:	9b06      	ldr	r3, [sp, #24]
 801fd8e:	f897 b001 	ldrb.w	fp, [r7, #1]
 801fd92:	fb04 3000 	mla	r0, r4, r0, r3
 801fd96:	78bc      	ldrb	r4, [r7, #2]
 801fd98:	fb0b 660a 	mla	r6, fp, sl, r6
 801fd9c:	fb04 c40a 	mla	r4, r4, sl, ip
 801fda0:	b2b6      	uxth	r6, r6
 801fda2:	b280      	uxth	r0, r0
 801fda4:	b2a4      	uxth	r4, r4
 801fda6:	f106 0c01 	add.w	ip, r6, #1
 801fdaa:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801fdae:	f104 0b01 	add.w	fp, r4, #1
 801fdb2:	f100 0c01 	add.w	ip, r0, #1
 801fdb6:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801fdba:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 801fdbe:	1236      	asrs	r6, r6, #8
 801fdc0:	1224      	asrs	r4, r4, #8
 801fdc2:	1200      	asrs	r0, r0, #8
 801fdc4:	707e      	strb	r6, [r7, #1]
 801fdc6:	70bc      	strb	r4, [r7, #2]
 801fdc8:	7038      	strb	r0, [r7, #0]
 801fdca:	f1b9 3fff 	cmp.w	r9, #4294967295
 801fdce:	f107 0704 	add.w	r7, r7, #4
 801fdd2:	4445      	add	r5, r8
 801fdd4:	d1b1      	bne.n	801fd3a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801fdd6:	e9dd b303 	ldrd	fp, r3, [sp, #12]
 801fdda:	eb0b 0783 	add.w	r7, fp, r3, lsl #2
 801fdde:	9b01      	ldr	r3, [sp, #4]
 801fde0:	2b00      	cmp	r3, #0
 801fde2:	f73f af6a 	bgt.w	801fcba <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fde6:	b009      	add	sp, #36	; 0x24
 801fde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdec:	f43f af61 	beq.w	801fcb2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fdf0:	f103 39ff 	add.w	r9, r3, #4294967295
 801fdf4:	fb09 2b0e 	mla	fp, r9, lr, r2
 801fdf8:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801fdfc:	f53f af59 	bmi.w	801fcb2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fe00:	4559      	cmp	r1, fp
 801fe02:	dd57      	ble.n	801feb4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801fe04:	fb09 5008 	mla	r0, r9, r8, r5
 801fe08:	1400      	asrs	r0, r0, #16
 801fe0a:	d453      	bmi.n	801feb4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801fe0c:	4560      	cmp	r0, ip
 801fe0e:	da51      	bge.n	801feb4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	f77f af4e 	ble.w	801fcb2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fe16:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801fe1a:	f107 0c04 	add.w	ip, r7, #4
 801fe1e:	f8dd b014 	ldr.w	fp, [sp, #20]
 801fe22:	460b      	mov	r3, r1
 801fe24:	9f07      	ldr	r7, [sp, #28]
 801fe26:	e002      	b.n	801fe2e <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801fe28:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801fe2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801fe2e:	9800      	ldr	r0, [sp, #0]
 801fe30:	1429      	asrs	r1, r5, #16
 801fe32:	fb03 0301 	mla	r3, r3, r1, r0
 801fe36:	1411      	asrs	r1, r2, #16
 801fe38:	5c5e      	ldrb	r6, [r3, r1]
 801fe3a:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801fe3e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fe42:	eb0b 0006 	add.w	r0, fp, r6
 801fe46:	7881      	ldrb	r1, [r0, #2]
 801fe48:	7840      	ldrb	r0, [r0, #1]
 801fe4a:	fb13 f30a 	smulbb	r3, r3, sl
 801fe4e:	fb10 f007 	smulbb	r0, r0, r7
 801fe52:	fb11 f407 	smulbb	r4, r1, r7
 801fe56:	f81b 1006 	ldrb.w	r1, [fp, r6]
 801fe5a:	f81c 6c03 	ldrb.w	r6, [ip, #-3]
 801fe5e:	fb01 3307 	mla	r3, r1, r7, r3
 801fe62:	f81c 1c02 	ldrb.w	r1, [ip, #-2]
 801fe66:	fb06 000a 	mla	r0, r6, sl, r0
 801fe6a:	fb01 410a 	mla	r1, r1, sl, r4
 801fe6e:	b280      	uxth	r0, r0
 801fe70:	b29b      	uxth	r3, r3
 801fe72:	b289      	uxth	r1, r1
 801fe74:	1c44      	adds	r4, r0, #1
 801fe76:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801fe7a:	1c4e      	adds	r6, r1, #1
 801fe7c:	1c5c      	adds	r4, r3, #1
 801fe7e:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801fe82:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801fe86:	f109 39ff 	add.w	r9, r9, #4294967295
 801fe8a:	1200      	asrs	r0, r0, #8
 801fe8c:	1209      	asrs	r1, r1, #8
 801fe8e:	121b      	asrs	r3, r3, #8
 801fe90:	f1b9 3fff 	cmp.w	r9, #4294967295
 801fe94:	f80c 0c03 	strb.w	r0, [ip, #-3]
 801fe98:	f80c 1c02 	strb.w	r1, [ip, #-2]
 801fe9c:	f80c 3c04 	strb.w	r3, [ip, #-4]
 801fea0:	4445      	add	r5, r8
 801fea2:	4472      	add	r2, lr
 801fea4:	f10c 0c04 	add.w	ip, ip, #4
 801fea8:	d1be      	bne.n	801fe28 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801feaa:	e9dd 7303 	ldrd	r7, r3, [sp, #12]
 801feae:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 801feb2:	e6fe      	b.n	801fcb2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801feb4:	2b00      	cmp	r3, #0
 801feb6:	f77f aefc 	ble.w	801fcb2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801feba:	1410      	asrs	r0, r2, #16
 801febc:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801fec0:	991a      	ldr	r1, [sp, #104]	; 0x68
 801fec2:	e73d      	b.n	801fd40 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>

0801fec4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fec8:	468a      	mov	sl, r1
 801feca:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801fece:	46d1      	mov	r9, sl
 801fed0:	b087      	sub	sp, #28
 801fed2:	e9dd 1415 	ldrd	r1, r4, [sp, #84]	; 0x54
 801fed6:	684d      	ldr	r5, [r1, #4]
 801fed8:	9203      	str	r2, [sp, #12]
 801feda:	e9dd 2e17 	ldrd	r2, lr, [sp, #92]	; 0x5c
 801fede:	fb05 4402 	mla	r4, r5, r2, r4
 801fee2:	e9de 2000 	ldrd	r2, r0, [lr]
 801fee6:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801feea:	680d      	ldr	r5, [r1, #0]
 801feec:	f100 0b04 	add.w	fp, r0, #4
 801fef0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801fef4:	9205      	str	r2, [sp, #20]
 801fef6:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801fefa:	f1b9 0f00 	cmp.w	r9, #0
 801fefe:	dc03      	bgt.n	801ff08 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ff00:	9803      	ldr	r0, [sp, #12]
 801ff02:	2800      	cmp	r0, #0
 801ff04:	f340 8091 	ble.w	802002a <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801ff08:	e9de 8a02 	ldrd	r8, sl, [lr, #8]
 801ff0c:	2b00      	cmp	r3, #0
 801ff0e:	fa0f f088 	sxth.w	r0, r8
 801ff12:	fa0f f48a 	sxth.w	r4, sl
 801ff16:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ff1a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801ff1e:	9001      	str	r0, [sp, #4]
 801ff20:	9402      	str	r4, [sp, #8]
 801ff22:	f340 8085 	ble.w	8020030 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ff26:	1414      	asrs	r4, r2, #16
 801ff28:	d408      	bmi.n	801ff3c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ff2a:	9801      	ldr	r0, [sp, #4]
 801ff2c:	4284      	cmp	r4, r0
 801ff2e:	da05      	bge.n	801ff3c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ff30:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801ff34:	d402      	bmi.n	801ff3c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ff36:	9802      	ldr	r0, [sp, #8]
 801ff38:	4584      	cmp	ip, r0
 801ff3a:	db3b      	blt.n	801ffb4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801ff3c:	3b01      	subs	r3, #1
 801ff3e:	4432      	add	r2, r6
 801ff40:	4439      	add	r1, r7
 801ff42:	f105 0504 	add.w	r5, r5, #4
 801ff46:	d1ee      	bne.n	801ff26 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ff48:	f1b9 0f00 	cmp.w	r9, #0
 801ff4c:	dd6d      	ble.n	802002a <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801ff4e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff56:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801ff5a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff5e:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801ff62:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff66:	ee76 6a62 	vsub.f32	s13, s12, s5
 801ff6a:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801ff6e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff72:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ff76:	ee16 2a90 	vmov	r2, s13
 801ff7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff7c:	9803      	ldr	r0, [sp, #12]
 801ff7e:	fb92 f6f3 	sdiv	r6, r2, r3
 801ff82:	ee17 2a10 	vmov	r2, s14
 801ff86:	eeb0 7a43 	vmov.f32	s14, s6
 801ff8a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ff8e:	ee17 1a10 	vmov	r1, s14
 801ff92:	eeb0 7a62 	vmov.f32	s14, s5
 801ff96:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ff9a:	f1b9 0901 	subs.w	r9, r9, #1
 801ff9e:	fb92 f7f3 	sdiv	r7, r2, r3
 801ffa2:	eeb0 3a67 	vmov.f32	s6, s15
 801ffa6:	ee17 2a10 	vmov	r2, s14
 801ffaa:	eef0 2a46 	vmov.f32	s5, s12
 801ffae:	bf08      	it	eq
 801ffb0:	4603      	moveq	r3, r0
 801ffb2:	e7a2      	b.n	801fefa <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ffb4:	f103 3cff 	add.w	ip, r3, #4294967295
 801ffb8:	9404      	str	r4, [sp, #16]
 801ffba:	fb06 240c 	mla	r4, r6, ip, r2
 801ffbe:	1424      	asrs	r4, r4, #16
 801ffc0:	d578      	bpl.n	80200b4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ffc2:	9613      	str	r6, [sp, #76]	; 0x4c
 801ffc4:	2000      	movs	r0, #0
 801ffc6:	4646      	mov	r6, r8
 801ffc8:	46d4      	mov	ip, sl
 801ffca:	9c04      	ldr	r4, [sp, #16]
 801ffcc:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 801ffd0:	e002      	b.n	801ffd8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801ffd2:	1414      	asrs	r4, r2, #16
 801ffd4:	e9de 6c02 	ldrd	r6, ip, [lr, #8]
 801ffd8:	2c00      	cmp	r4, #0
 801ffda:	4442      	add	r2, r8
 801ffdc:	db1c      	blt.n	8020018 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ffde:	42b4      	cmp	r4, r6
 801ffe0:	da1a      	bge.n	8020018 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ffe2:	ea5f 4a21 	movs.w	sl, r1, asr #16
 801ffe6:	d417      	bmi.n	8020018 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ffe8:	45e2      	cmp	sl, ip
 801ffea:	da15      	bge.n	8020018 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ffec:	fa0f fc86 	sxth.w	ip, r6
 801fff0:	9e05      	ldr	r6, [sp, #20]
 801fff2:	fb0a 6c0c 	mla	ip, sl, ip, r6
 801fff6:	f81c 4004 	ldrb.w	r4, [ip, r4]
 801fffa:	eb05 0680 	add.w	r6, r5, r0, lsl #2
 801fffe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020002:	f81b c004 	ldrb.w	ip, [fp, r4]
 8020006:	445c      	add	r4, fp
 8020008:	f805 c020 	strb.w	ip, [r5, r0, lsl #2]
 802000c:	f894 c001 	ldrb.w	ip, [r4, #1]
 8020010:	f886 c001 	strb.w	ip, [r6, #1]
 8020014:	78a4      	ldrb	r4, [r4, #2]
 8020016:	70b4      	strb	r4, [r6, #2]
 8020018:	3001      	adds	r0, #1
 802001a:	4283      	cmp	r3, r0
 802001c:	4439      	add	r1, r7
 802001e:	d1d8      	bne.n	801ffd2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8020020:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8020024:	f1b9 0f00 	cmp.w	r9, #0
 8020028:	dc91      	bgt.n	801ff4e <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802002a:	b007      	add	sp, #28
 802002c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020030:	d08a      	beq.n	801ff48 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020032:	f103 3cff 	add.w	ip, r3, #4294967295
 8020036:	fb0c 2406 	mla	r4, ip, r6, r2
 802003a:	1424      	asrs	r4, r4, #16
 802003c:	d484      	bmi.n	801ff48 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802003e:	42a0      	cmp	r0, r4
 8020040:	dd32      	ble.n	80200a8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8020042:	fb07 140c 	mla	r4, r7, ip, r1
 8020046:	1420      	asrs	r0, r4, #16
 8020048:	d42e      	bmi.n	80200a8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802004a:	9c02      	ldr	r4, [sp, #8]
 802004c:	4284      	cmp	r4, r0
 802004e:	dd2b      	ble.n	80200a8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8020050:	2b00      	cmp	r3, #0
 8020052:	f77f af79 	ble.w	801ff48 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020056:	1d2c      	adds	r4, r5, #4
 8020058:	f8dd a014 	ldr.w	sl, [sp, #20]
 802005c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8020060:	e001      	b.n	8020066 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8020062:	f9be 8008 	ldrsh.w	r8, [lr, #8]
 8020066:	1408      	asrs	r0, r1, #16
 8020068:	fb08 a000 	mla	r0, r8, r0, sl
 802006c:	ea4f 4822 	mov.w	r8, r2, asr #16
 8020070:	f810 0008 	ldrb.w	r0, [r0, r8]
 8020074:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020078:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802007c:	f81b 8000 	ldrb.w	r8, [fp, r0]
 8020080:	4458      	add	r0, fp
 8020082:	f804 8c04 	strb.w	r8, [r4, #-4]
 8020086:	f890 8001 	ldrb.w	r8, [r0, #1]
 802008a:	f1bc 3fff 	cmp.w	ip, #4294967295
 802008e:	f804 8c03 	strb.w	r8, [r4, #-3]
 8020092:	7880      	ldrb	r0, [r0, #2]
 8020094:	4439      	add	r1, r7
 8020096:	f804 0c02 	strb.w	r0, [r4, #-2]
 802009a:	4432      	add	r2, r6
 802009c:	f104 0404 	add.w	r4, r4, #4
 80200a0:	d1df      	bne.n	8020062 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80200a2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80200a6:	e7bd      	b.n	8020024 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 80200a8:	2b00      	cmp	r3, #0
 80200aa:	f77f af4d 	ble.w	801ff48 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80200ae:	1410      	asrs	r0, r2, #16
 80200b0:	9004      	str	r0, [sp, #16]
 80200b2:	e786      	b.n	801ffc2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfe>
 80200b4:	9801      	ldr	r0, [sp, #4]
 80200b6:	e7c2      	b.n	802003e <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>

080200b8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80200b8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80200bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200c0:	b08b      	sub	sp, #44	; 0x2c
 80200c2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80200c6:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
 80200ca:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80200cc:	6854      	ldr	r4, [r2, #4]
 80200ce:	6816      	ldr	r6, [r2, #0]
 80200d0:	fb04 1000 	mla	r0, r4, r0, r1
 80200d4:	e9dd 4b17 	ldrd	r4, fp, [sp, #92]	; 0x5c
 80200d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80200da:	f89d 7074 	ldrb.w	r7, [sp, #116]	; 0x74
 80200de:	e9d2 2500 	ldrd	r2, r5, [r2]
 80200e2:	3504      	adds	r5, #4
 80200e4:	9703      	str	r7, [sp, #12]
 80200e6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80200ea:	9507      	str	r5, [sp, #28]
 80200ec:	9206      	str	r2, [sp, #24]
 80200ee:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 80200f2:	9d01      	ldr	r5, [sp, #4]
 80200f4:	2d00      	cmp	r5, #0
 80200f6:	dc03      	bgt.n	8020100 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80200f8:	9d02      	ldr	r5, [sp, #8]
 80200fa:	2d00      	cmp	r5, #0
 80200fc:	f340 80d5 	ble.w	80202aa <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 8020100:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020102:	2b00      	cmp	r3, #0
 8020104:	e9d5 7c02 	ldrd	r7, ip, [r5, #8]
 8020108:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802010c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8020110:	b23d      	sxth	r5, r7
 8020112:	fa0f fe8c 	sxth.w	lr, ip
 8020116:	f340 80cb 	ble.w	80202b0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802011a:	1416      	asrs	r6, r2, #16
 802011c:	d406      	bmi.n	802012c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802011e:	42ae      	cmp	r6, r5
 8020120:	da04      	bge.n	802012c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020122:	ea5f 4821 	movs.w	r8, r1, asr #16
 8020126:	d401      	bmi.n	802012c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020128:	45f0      	cmp	r8, lr
 802012a:	db3c      	blt.n	80201a6 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 802012c:	3b01      	subs	r3, #1
 802012e:	4422      	add	r2, r4
 8020130:	4459      	add	r1, fp
 8020132:	f100 0004 	add.w	r0, r0, #4
 8020136:	d1f0      	bne.n	802011a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8020138:	9b01      	ldr	r3, [sp, #4]
 802013a:	2b00      	cmp	r3, #0
 802013c:	f340 80b5 	ble.w	80202aa <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 8020140:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020144:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020148:	eec5 7a80 	vdiv.f32	s15, s11, s0
 802014c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020150:	ee20 6aa7 	vmul.f32	s12, s1, s15
 8020154:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020158:	ee76 6a62 	vsub.f32	s13, s12, s5
 802015c:	ee37 7ac3 	vsub.f32	s14, s15, s6
 8020160:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020164:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8020168:	ee16 2a90 	vmov	r2, s13
 802016c:	3b01      	subs	r3, #1
 802016e:	9301      	str	r3, [sp, #4]
 8020170:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020172:	9d02      	ldr	r5, [sp, #8]
 8020174:	fb92 f4f3 	sdiv	r4, r2, r3
 8020178:	ee17 2a10 	vmov	r2, s14
 802017c:	eeb0 7a43 	vmov.f32	s14, s6
 8020180:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8020184:	ee17 1a10 	vmov	r1, s14
 8020188:	eeb0 7a62 	vmov.f32	s14, s5
 802018c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8020190:	fb92 fbf3 	sdiv	fp, r2, r3
 8020194:	eeb0 3a67 	vmov.f32	s6, s15
 8020198:	ee17 2a10 	vmov	r2, s14
 802019c:	eef0 2a46 	vmov.f32	s5, s12
 80201a0:	bf08      	it	eq
 80201a2:	462b      	moveq	r3, r5
 80201a4:	e7a5      	b.n	80200f2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80201a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80201aa:	fb08 2904 	mla	r9, r8, r4, r2
 80201ae:	ea5f 4929 	movs.w	r9, r9, asr #16
 80201b2:	f140 8087 	bpl.w	80202c4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80201b6:	f1c3 0900 	rsb	r9, r3, #0
 80201ba:	4698      	mov	r8, r3
 80201bc:	2500      	movs	r5, #0
 80201be:	9004      	str	r0, [sp, #16]
 80201c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80201c2:	e002      	b.n	80201ca <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80201c4:	1416      	asrs	r6, r2, #16
 80201c6:	e9d3 7c02 	ldrd	r7, ip, [r3, #8]
 80201ca:	2e00      	cmp	r6, #0
 80201cc:	4422      	add	r2, r4
 80201ce:	db61      	blt.n	8020294 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80201d0:	42be      	cmp	r6, r7
 80201d2:	da5f      	bge.n	8020294 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80201d4:	ea5f 4e21 	movs.w	lr, r1, asr #16
 80201d8:	d45c      	bmi.n	8020294 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80201da:	45e6      	cmp	lr, ip
 80201dc:	b23f      	sxth	r7, r7
 80201de:	da59      	bge.n	8020294 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80201e0:	9806      	ldr	r0, [sp, #24]
 80201e2:	fb0e 0707 	mla	r7, lr, r7, r0
 80201e6:	9807      	ldr	r0, [sp, #28]
 80201e8:	5dbe      	ldrb	r6, [r7, r6]
 80201ea:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 80201ee:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
 80201f2:	9804      	ldr	r0, [sp, #16]
 80201f4:	9705      	str	r7, [sp, #20]
 80201f6:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 80201fa:	0e37      	lsrs	r7, r6, #24
 80201fc:	9008      	str	r0, [sp, #32]
 80201fe:	d049      	beq.n	8020294 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8020200:	9803      	ldr	r0, [sp, #12]
 8020202:	fa5f fa86 	uxtb.w	sl, r6
 8020206:	fb00 f707 	mul.w	r7, r0, r7
 802020a:	9805      	ldr	r0, [sp, #20]
 802020c:	f107 0c01 	add.w	ip, r7, #1
 8020210:	eb0c 2c27 	add.w	ip, ip, r7, asr #8
 8020214:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020218:	4686      	mov	lr, r0
 802021a:	ea6f 070c 	mvn.w	r7, ip
 802021e:	fa1f fc8c 	uxth.w	ip, ip
 8020222:	fb1a fa0c 	smulbb	sl, sl, ip
 8020226:	9804      	ldr	r0, [sp, #16]
 8020228:	b2ff      	uxtb	r7, r7
 802022a:	f810 e02e 	ldrb.w	lr, [r0, lr, lsl #2]
 802022e:	9805      	ldr	r0, [sp, #20]
 8020230:	fb0e ae07 	mla	lr, lr, r7, sl
 8020234:	fa1f fe8e 	uxth.w	lr, lr
 8020238:	f10e 0a01 	add.w	sl, lr, #1
 802023c:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8020240:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 8020244:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8020248:	fb16 f60c 	smulbb	r6, r6, ip
 802024c:	9609      	str	r6, [sp, #36]	; 0x24
 802024e:	4606      	mov	r6, r0
 8020250:	9804      	ldr	r0, [sp, #16]
 8020252:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020256:	f800 e026 	strb.w	lr, [r0, r6, lsl #2]
 802025a:	fb1a fa0c 	smulbb	sl, sl, ip
 802025e:	9808      	ldr	r0, [sp, #32]
 8020260:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8020262:	f890 e002 	ldrb.w	lr, [r0, #2]
 8020266:	f890 c001 	ldrb.w	ip, [r0, #1]
 802026a:	fb0e 6607 	mla	r6, lr, r7, r6
 802026e:	fb0c ac07 	mla	ip, ip, r7, sl
 8020272:	b2b6      	uxth	r6, r6
 8020274:	fa1f fe8c 	uxth.w	lr, ip
 8020278:	1c77      	adds	r7, r6, #1
 802027a:	f10e 0c01 	add.w	ip, lr, #1
 802027e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020282:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8020286:	ea4f 272c 	mov.w	r7, ip, asr #8
 802028a:	ea4f 2c26 	mov.w	ip, r6, asr #8
 802028e:	7047      	strb	r7, [r0, #1]
 8020290:	f880 c002 	strb.w	ip, [r0, #2]
 8020294:	3d01      	subs	r5, #1
 8020296:	45a9      	cmp	r9, r5
 8020298:	4459      	add	r1, fp
 802029a:	d193      	bne.n	80201c4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802029c:	9b01      	ldr	r3, [sp, #4]
 802029e:	9804      	ldr	r0, [sp, #16]
 80202a0:	2b00      	cmp	r3, #0
 80202a2:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 80202a6:	f73f af4b 	bgt.w	8020140 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80202aa:	b00b      	add	sp, #44	; 0x2c
 80202ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202b0:	f43f af42 	beq.w	8020138 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80202b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80202b8:	fb08 2904 	mla	r9, r8, r4, r2
 80202bc:	ea5f 4929 	movs.w	r9, r9, asr #16
 80202c0:	f53f af3a 	bmi.w	8020138 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80202c4:	454d      	cmp	r5, r9
 80202c6:	dd68      	ble.n	802039a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 80202c8:	fb08 160b 	mla	r6, r8, fp, r1
 80202cc:	1436      	asrs	r6, r6, #16
 80202ce:	d464      	bmi.n	802039a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 80202d0:	4576      	cmp	r6, lr
 80202d2:	da62      	bge.n	802039a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 80202d4:	2b00      	cmp	r3, #0
 80202d6:	f77f af2f 	ble.w	8020138 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80202da:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80202de:	f100 0e04 	add.w	lr, r0, #4
 80202e2:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80202e6:	e002      	b.n	80202ee <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80202e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80202ea:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80202ee:	140b      	asrs	r3, r1, #16
 80202f0:	fb05 6303 	mla	r3, r5, r3, r6
 80202f4:	1410      	asrs	r0, r2, #16
 80202f6:	5c1b      	ldrb	r3, [r3, r0]
 80202f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80202fc:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8020300:	4422      	add	r2, r4
 8020302:	0e18      	lsrs	r0, r3, #24
 8020304:	4459      	add	r1, fp
 8020306:	d03e      	beq.n	8020386 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 8020308:	9d03      	ldr	r5, [sp, #12]
 802030a:	fa5f fc83 	uxtb.w	ip, r3
 802030e:	fb05 f000 	mul.w	r0, r5, r0
 8020312:	f100 0901 	add.w	r9, r0, #1
 8020316:	eb09 2920 	add.w	r9, r9, r0, asr #8
 802031a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802031e:	ea6f 0009 	mvn.w	r0, r9
 8020322:	fa1f f989 	uxth.w	r9, r9
 8020326:	fb1c fc09 	smulbb	ip, ip, r9
 802032a:	f3c3 2507 	ubfx	r5, r3, #8, #8
 802032e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8020332:	fb15 fa09 	smulbb	sl, r5, r9
 8020336:	fb13 f309 	smulbb	r3, r3, r9
 802033a:	f81e 9c04 	ldrb.w	r9, [lr, #-4]
 802033e:	b2c0      	uxtb	r0, r0
 8020340:	fb09 cc00 	mla	ip, r9, r0, ip
 8020344:	f81e 5c03 	ldrb.w	r5, [lr, #-3]
 8020348:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 802034c:	fb05 a500 	mla	r5, r5, r0, sl
 8020350:	fb09 3300 	mla	r3, r9, r0, r3
 8020354:	fa1f fc8c 	uxth.w	ip, ip
 8020358:	b2ad      	uxth	r5, r5
 802035a:	b29b      	uxth	r3, r3
 802035c:	f10c 0a01 	add.w	sl, ip, #1
 8020360:	f105 0901 	add.w	r9, r5, #1
 8020364:	1c58      	adds	r0, r3, #1
 8020366:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 802036a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 802036e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020372:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020376:	122d      	asrs	r5, r5, #8
 8020378:	121b      	asrs	r3, r3, #8
 802037a:	f80e cc04 	strb.w	ip, [lr, #-4]
 802037e:	f80e 5c03 	strb.w	r5, [lr, #-3]
 8020382:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020386:	f1b8 3fff 	cmp.w	r8, #4294967295
 802038a:	f10e 0e04 	add.w	lr, lr, #4
 802038e:	d1ab      	bne.n	80202e8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8020390:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 8020394:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8020398:	e6ce      	b.n	8020138 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802039a:	2b00      	cmp	r3, #0
 802039c:	f77f aecc 	ble.w	8020138 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80203a0:	1416      	asrs	r6, r2, #16
 80203a2:	e708      	b.n	80201b6 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfe>

080203a4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80203a4:	4770      	bx	lr
 80203a6:	bf00      	nop

080203a8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80203a8:	4770      	bx	lr
 80203aa:	bf00      	nop

080203ac <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80203ac:	4770      	bx	lr
 80203ae:	bf00      	nop

080203b0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80203b0:	4770      	bx	lr
 80203b2:	bf00      	nop

080203b4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80203b4:	4770      	bx	lr
 80203b6:	bf00      	nop

080203b8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80203b8:	4770      	bx	lr
 80203ba:	bf00      	nop

080203bc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80203bc:	4770      	bx	lr
 80203be:	bf00      	nop

080203c0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80203c0:	4770      	bx	lr
 80203c2:	bf00      	nop

080203c4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80203c4:	4770      	bx	lr
 80203c6:	bf00      	nop

080203c8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80203c8:	4770      	bx	lr
 80203ca:	bf00      	nop

080203cc <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80203cc:	4770      	bx	lr
 80203ce:	bf00      	nop

080203d0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80203d0:	4770      	bx	lr
 80203d2:	bf00      	nop

080203d4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80203d4:	4770      	bx	lr
 80203d6:	bf00      	nop

080203d8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80203d8:	4770      	bx	lr
 80203da:	bf00      	nop

080203dc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80203dc:	4770      	bx	lr
 80203de:	bf00      	nop

080203e0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80203e0:	4770      	bx	lr
 80203e2:	bf00      	nop

080203e4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80203e4:	4770      	bx	lr
 80203e6:	bf00      	nop

080203e8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80203e8:	4770      	bx	lr
 80203ea:	bf00      	nop

080203ec <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80203ec:	4770      	bx	lr
 80203ee:	bf00      	nop

080203f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80203f0:	4770      	bx	lr
 80203f2:	bf00      	nop

080203f4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80203f4:	4770      	bx	lr
 80203f6:	bf00      	nop

080203f8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80203f8:	4770      	bx	lr
 80203fa:	bf00      	nop

080203fc <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv>:
 80203fc:	b508      	push	{r3, lr}
 80203fe:	4b0d      	ldr	r3, [pc, #52]	; (8020434 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x38>)
 8020400:	881b      	ldrh	r3, [r3, #0]
 8020402:	b17b      	cbz	r3, 8020424 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x28>
 8020404:	7a02      	ldrb	r2, [r0, #8]
 8020406:	2a02      	cmp	r2, #2
 8020408:	d007      	beq.n	802041a <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x1e>
 802040a:	2a01      	cmp	r2, #1
 802040c:	bf0c      	ite	eq
 802040e:	2003      	moveq	r0, #3
 8020410:	2002      	movne	r0, #2
 8020412:	fb13 f000 	smulbb	r0, r3, r0
 8020416:	b280      	uxth	r0, r0
 8020418:	bd08      	pop	{r3, pc}
 802041a:	2004      	movs	r0, #4
 802041c:	fb13 f000 	smulbb	r0, r3, r0
 8020420:	b280      	uxth	r0, r0
 8020422:	bd08      	pop	{r3, pc}
 8020424:	4b04      	ldr	r3, [pc, #16]	; (8020438 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x3c>)
 8020426:	4a05      	ldr	r2, [pc, #20]	; (802043c <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x40>)
 8020428:	f44f 7187 	mov.w	r1, #270	; 0x10e
 802042c:	4804      	ldr	r0, [pc, #16]	; (8020440 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x44>)
 802042e:	f009 f8e5 	bl	80295fc <__assert_func>
 8020432:	bf00      	nop
 8020434:	201984f2 	.word	0x201984f2
 8020438:	0802ca24 	.word	0x0802ca24
 802043c:	0802d7e0 	.word	0x0802d7e0
 8020440:	0802ca68 	.word	0x0802ca68

08020444 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv>:
 8020444:	b530      	push	{r4, r5, lr}
 8020446:	4b26      	ldr	r3, [pc, #152]	; (80204e0 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x9c>)
 8020448:	b083      	sub	sp, #12
 802044a:	681c      	ldr	r4, [r3, #0]
 802044c:	2c00      	cmp	r4, #0
 802044e:	d040      	beq.n	80204d2 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x8e>
 8020450:	4b24      	ldr	r3, [pc, #144]	; (80204e4 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa0>)
 8020452:	4605      	mov	r5, r0
 8020454:	781b      	ldrb	r3, [r3, #0]
 8020456:	b9f3      	cbnz	r3, 8020496 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x52>
 8020458:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802045a:	7a2a      	ldrb	r2, [r5, #8]
 802045c:	2a01      	cmp	r2, #1
 802045e:	d025      	beq.n	80204ac <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x68>
 8020460:	d30d      	bcc.n	802047e <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x3a>
 8020462:	2a02      	cmp	r2, #2
 8020464:	d12f      	bne.n	80204c6 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x82>
 8020466:	4920      	ldr	r1, [pc, #128]	; (80204e8 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 8020468:	4a20      	ldr	r2, [pc, #128]	; (80204ec <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 802046a:	8809      	ldrh	r1, [r1, #0]
 802046c:	8812      	ldrh	r2, [r2, #0]
 802046e:	008c      	lsls	r4, r1, #2
 8020470:	4618      	mov	r0, r3
 8020472:	9400      	str	r4, [sp, #0]
 8020474:	2310      	movs	r3, #16
 8020476:	f7fb ff1d 	bl	801c2b4 <nema_bind_dst_tex>
 802047a:	b003      	add	sp, #12
 802047c:	bd30      	pop	{r4, r5, pc}
 802047e:	491a      	ldr	r1, [pc, #104]	; (80204e8 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 8020480:	4a1a      	ldr	r2, [pc, #104]	; (80204ec <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 8020482:	8809      	ldrh	r1, [r1, #0]
 8020484:	8812      	ldrh	r2, [r2, #0]
 8020486:	004c      	lsls	r4, r1, #1
 8020488:	4618      	mov	r0, r3
 802048a:	9400      	str	r4, [sp, #0]
 802048c:	2304      	movs	r3, #4
 802048e:	f7fb ff11 	bl	801c2b4 <nema_bind_dst_tex>
 8020492:	b003      	add	sp, #12
 8020494:	bd30      	pop	{r4, r5, pc}
 8020496:	6823      	ldr	r3, [r4, #0]
 8020498:	4620      	mov	r0, r4
 802049a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802049c:	4798      	blx	r3
 802049e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80204a0:	4283      	cmp	r3, r0
 80204a2:	d1da      	bne.n	802045a <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x16>
 80204a4:	7a2a      	ldrb	r2, [r5, #8]
 80204a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80204a8:	2a01      	cmp	r2, #1
 80204aa:	d1d9      	bne.n	8020460 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x1c>
 80204ac:	490e      	ldr	r1, [pc, #56]	; (80204e8 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 80204ae:	4a0f      	ldr	r2, [pc, #60]	; (80204ec <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 80204b0:	8809      	ldrh	r1, [r1, #0]
 80204b2:	8812      	ldrh	r2, [r2, #0]
 80204b4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80204b8:	4618      	mov	r0, r3
 80204ba:	9400      	str	r4, [sp, #0]
 80204bc:	2339      	movs	r3, #57	; 0x39
 80204be:	f7fb fef9 	bl	801c2b4 <nema_bind_dst_tex>
 80204c2:	b003      	add	sp, #12
 80204c4:	bd30      	pop	{r4, r5, pc}
 80204c6:	4b0a      	ldr	r3, [pc, #40]	; (80204f0 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xac>)
 80204c8:	4a0a      	ldr	r2, [pc, #40]	; (80204f4 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb0>)
 80204ca:	2140      	movs	r1, #64	; 0x40
 80204cc:	480a      	ldr	r0, [pc, #40]	; (80204f8 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb4>)
 80204ce:	f009 f895 	bl	80295fc <__assert_func>
 80204d2:	4b0a      	ldr	r3, [pc, #40]	; (80204fc <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb8>)
 80204d4:	4a0a      	ldr	r2, [pc, #40]	; (8020500 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xbc>)
 80204d6:	217c      	movs	r1, #124	; 0x7c
 80204d8:	480a      	ldr	r0, [pc, #40]	; (8020504 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xc0>)
 80204da:	f009 f88f 	bl	80295fc <__assert_func>
 80204de:	bf00      	nop
 80204e0:	20198728 	.word	0x20198728
 80204e4:	201984f6 	.word	0x201984f6
 80204e8:	201984f2 	.word	0x201984f2
 80204ec:	201984f4 	.word	0x201984f4
 80204f0:	0802c508 	.word	0x0802c508
 80204f4:	0802d01c 	.word	0x0802d01c
 80204f8:	0802c550 	.word	0x0802c550
 80204fc:	0802c4ac 	.word	0x0802c4ac
 8020500:	0802ccb4 	.word	0x0802ccb4
 8020504:	0802c4d4 	.word	0x0802c4d4

08020508 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh>:
 8020508:	2b00      	cmp	r3, #0
 802050a:	d058      	beq.n	80205be <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 802050c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020510:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8020514:	b085      	sub	sp, #20
 8020516:	2c00      	cmp	r4, #0
 8020518:	dd4e      	ble.n	80205b8 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb0>
 802051a:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
 802051e:	2c00      	cmp	r4, #0
 8020520:	dd4a      	ble.n	80205b8 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb0>
 8020522:	4616      	mov	r6, r2
 8020524:	4605      	mov	r5, r0
 8020526:	6808      	ldr	r0, [r1, #0]
 8020528:	6849      	ldr	r1, [r1, #4]
 802052a:	461c      	mov	r4, r3
 802052c:	4f27      	ldr	r7, [pc, #156]	; (80205cc <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xc4>)
 802052e:	ab02      	add	r3, sp, #8
 8020530:	c303      	stmia	r3!, {r0, r1}
 8020532:	a802      	add	r0, sp, #8
 8020534:	f7f8 fb9a 	bl	8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020538:	6838      	ldr	r0, [r7, #0]
 802053a:	f3c6 4807 	ubfx	r8, r6, #16, #8
 802053e:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8020542:	b2f6      	uxtb	r6, r6
 8020544:	2800      	cmp	r0, #0
 8020546:	d03b      	beq.n	80205c0 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb8>
 8020548:	f7fe f8f6 	bl	801e738 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 802054c:	682b      	ldr	r3, [r5, #0]
 802054e:	4628      	mov	r0, r5
 8020550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020552:	4798      	blx	r3
 8020554:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8020558:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 802055c:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 8020560:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8020564:	f7fb fdf2 	bl	801c14c <nema_set_clip>
 8020568:	f04f 33ff 	mov.w	r3, #4294967295
 802056c:	2100      	movs	r1, #0
 802056e:	461a      	mov	r2, r3
 8020570:	4817      	ldr	r0, [pc, #92]	; (80205d0 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xc8>)
 8020572:	f7fd fc33 	bl	801dddc <nema_set_blend>
 8020576:	2200      	movs	r2, #0
 8020578:	4623      	mov	r3, r4
 802057a:	4611      	mov	r1, r2
 802057c:	4610      	mov	r0, r2
 802057e:	f7fb fe19 	bl	801c1b4 <nema_rgba>
 8020582:	f7fd fff1 	bl	801e568 <nema_set_const_color>
 8020586:	4632      	mov	r2, r6
 8020588:	4649      	mov	r1, r9
 802058a:	4640      	mov	r0, r8
 802058c:	23ff      	movs	r3, #255	; 0xff
 802058e:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 8020592:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 8020596:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 802059a:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 802059e:	f7fb fe09 	bl	801c1b4 <nema_rgba>
 80205a2:	4643      	mov	r3, r8
 80205a4:	9000      	str	r0, [sp, #0]
 80205a6:	4632      	mov	r2, r6
 80205a8:	4620      	mov	r0, r4
 80205aa:	4629      	mov	r1, r5
 80205ac:	f7fb ff38 	bl	801c420 <nema_fill_rect>
 80205b0:	6838      	ldr	r0, [r7, #0]
 80205b2:	b128      	cbz	r0, 80205c0 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb8>
 80205b4:	f7fe f8e0 	bl	801e778 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 80205b8:	b005      	add	sp, #20
 80205ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80205be:	4770      	bx	lr
 80205c0:	4b04      	ldr	r3, [pc, #16]	; (80205d4 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xcc>)
 80205c2:	4a05      	ldr	r2, [pc, #20]	; (80205d8 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd0>)
 80205c4:	217c      	movs	r1, #124	; 0x7c
 80205c6:	4805      	ldr	r0, [pc, #20]	; (80205dc <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd4>)
 80205c8:	f009 f818 	bl	80295fc <__assert_func>
 80205cc:	20198728 	.word	0x20198728
 80205d0:	08000504 	.word	0x08000504
 80205d4:	0802c4ac 	.word	0x0802c4ac
 80205d8:	0802ccb4 	.word	0x0802ccb4
 80205dc:	0802c4d4 	.word	0x0802c4d4

080205e0 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80205e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205e4:	b085      	sub	sp, #20
 80205e6:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80205ea:	2c00      	cmp	r4, #0
 80205ec:	d063      	beq.n	80206b6 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 80205ee:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80205f2:	2d00      	cmp	r5, #0
 80205f4:	dd5f      	ble.n	80206b6 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 80205f6:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 80205fa:	2d00      	cmp	r5, #0
 80205fc:	dd5b      	ble.n	80206b6 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 80205fe:	460f      	mov	r7, r1
 8020600:	4606      	mov	r6, r0
 8020602:	6859      	ldr	r1, [r3, #4]
 8020604:	6818      	ldr	r0, [r3, #0]
 8020606:	f8df 9124 	ldr.w	r9, [pc, #292]	; 802072c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14c>
 802060a:	ab02      	add	r3, sp, #8
 802060c:	c303      	stmia	r3!, {r0, r1}
 802060e:	a802      	add	r0, sp, #8
 8020610:	4690      	mov	r8, r2
 8020612:	f7f8 fb2b 	bl	8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020618:	f8d9 0000 	ldr.w	r0, [r9]
 802061c:	f3c3 4a07 	ubfx	sl, r3, #16, #8
 8020620:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 8020624:	b2dd      	uxtb	r5, r3
 8020626:	2800      	cmp	r0, #0
 8020628:	d060      	beq.n	80206ec <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10c>
 802062a:	f7fe f885 	bl	801e738 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 802062e:	7a33      	ldrb	r3, [r6, #8]
 8020630:	2b01      	cmp	r3, #1
 8020632:	d043      	beq.n	80206bc <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xdc>
 8020634:	d34e      	bcc.n	80206d4 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf4>
 8020636:	2b02      	cmp	r3, #2
 8020638:	d15e      	bne.n	80206f8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 802063a:	4b33      	ldr	r3, [pc, #204]	; (8020708 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 802063c:	4a33      	ldr	r2, [pc, #204]	; (802070c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 802063e:	8819      	ldrh	r1, [r3, #0]
 8020640:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8020644:	8812      	ldrh	r2, [r2, #0]
 8020646:	4638      	mov	r0, r7
 8020648:	9300      	str	r3, [sp, #0]
 802064a:	2310      	movs	r3, #16
 802064c:	f7fb fe32 	bl	801c2b4 <nema_bind_dst_tex>
 8020650:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8020654:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8020658:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 802065c:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8020660:	f7fb fd74 	bl	801c14c <nema_set_clip>
 8020664:	f04f 33ff 	mov.w	r3, #4294967295
 8020668:	2100      	movs	r1, #0
 802066a:	461a      	mov	r2, r3
 802066c:	4828      	ldr	r0, [pc, #160]	; (8020710 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x130>)
 802066e:	f7fd fbb5 	bl	801dddc <nema_set_blend>
 8020672:	2200      	movs	r2, #0
 8020674:	4623      	mov	r3, r4
 8020676:	4611      	mov	r1, r2
 8020678:	4610      	mov	r0, r2
 802067a:	f7fb fd9b 	bl	801c1b4 <nema_rgba>
 802067e:	f7fd ff73 	bl	801e568 <nema_set_const_color>
 8020682:	462a      	mov	r2, r5
 8020684:	4659      	mov	r1, fp
 8020686:	23ff      	movs	r3, #255	; 0xff
 8020688:	4650      	mov	r0, sl
 802068a:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 802068e:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 8020692:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8020696:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 802069a:	f7fb fd8b 	bl	801c1b4 <nema_rgba>
 802069e:	463b      	mov	r3, r7
 80206a0:	9000      	str	r0, [sp, #0]
 80206a2:	4632      	mov	r2, r6
 80206a4:	4620      	mov	r0, r4
 80206a6:	4629      	mov	r1, r5
 80206a8:	f7fb feba 	bl	801c420 <nema_fill_rect>
 80206ac:	f8d9 0000 	ldr.w	r0, [r9]
 80206b0:	b1e0      	cbz	r0, 80206ec <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10c>
 80206b2:	f7fe f861 	bl	801e778 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 80206b6:	b005      	add	sp, #20
 80206b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206bc:	4b12      	ldr	r3, [pc, #72]	; (8020708 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 80206be:	4a13      	ldr	r2, [pc, #76]	; (802070c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 80206c0:	8819      	ldrh	r1, [r3, #0]
 80206c2:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80206c6:	8812      	ldrh	r2, [r2, #0]
 80206c8:	4638      	mov	r0, r7
 80206ca:	9300      	str	r3, [sp, #0]
 80206cc:	2339      	movs	r3, #57	; 0x39
 80206ce:	f7fb fdf1 	bl	801c2b4 <nema_bind_dst_tex>
 80206d2:	e7bd      	b.n	8020650 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 80206d4:	4b0c      	ldr	r3, [pc, #48]	; (8020708 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 80206d6:	4a0d      	ldr	r2, [pc, #52]	; (802070c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 80206d8:	8819      	ldrh	r1, [r3, #0]
 80206da:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80206de:	8812      	ldrh	r2, [r2, #0]
 80206e0:	4638      	mov	r0, r7
 80206e2:	9300      	str	r3, [sp, #0]
 80206e4:	2304      	movs	r3, #4
 80206e6:	f7fb fde5 	bl	801c2b4 <nema_bind_dst_tex>
 80206ea:	e7b1      	b.n	8020650 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 80206ec:	4b09      	ldr	r3, [pc, #36]	; (8020714 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>)
 80206ee:	4a0a      	ldr	r2, [pc, #40]	; (8020718 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x138>)
 80206f0:	217c      	movs	r1, #124	; 0x7c
 80206f2:	480a      	ldr	r0, [pc, #40]	; (802071c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13c>)
 80206f4:	f008 ff82 	bl	80295fc <__assert_func>
 80206f8:	4b09      	ldr	r3, [pc, #36]	; (8020720 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x140>)
 80206fa:	4a0a      	ldr	r2, [pc, #40]	; (8020724 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>)
 80206fc:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8020700:	4809      	ldr	r0, [pc, #36]	; (8020728 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>)
 8020702:	f008 ff7b 	bl	80295fc <__assert_func>
 8020706:	bf00      	nop
 8020708:	201984f2 	.word	0x201984f2
 802070c:	201984f4 	.word	0x201984f4
 8020710:	08000504 	.word	0x08000504
 8020714:	0802c4ac 	.word	0x0802c4ac
 8020718:	0802ccb4 	.word	0x0802ccb4
 802071c:	0802c4d4 	.word	0x0802c4d4
 8020720:	0802c508 	.word	0x0802c508
 8020724:	0802cd70 	.word	0x0802cd70
 8020728:	0802c550 	.word	0x0802c550
 802072c:	20198728 	.word	0x20198728

08020730 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8020730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020734:	b091      	sub	sp, #68	; 0x44
 8020736:	f89d 108c 	ldrb.w	r1, [sp, #140]	; 0x8c
 802073a:	ac0a      	add	r4, sp, #40	; 0x28
 802073c:	e884 000c 	stmia.w	r4, {r2, r3}
 8020740:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8020744:	1e4f      	subs	r7, r1, #1
 8020746:	fa5f fc87 	uxtb.w	ip, r7
 802074a:	4682      	mov	sl, r0
 802074c:	9303      	str	r3, [sp, #12]
 802074e:	f89d 0090 	ldrb.w	r0, [sp, #144]	; 0x90
 8020752:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 8020756:	f1bc 0f01 	cmp.w	ip, #1
 802075a:	9304      	str	r3, [sp, #16]
 802075c:	f9bd 8068 	ldrsh.w	r8, [sp, #104]	; 0x68
 8020760:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	; 0x6c
 8020764:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8020766:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 802076a:	9005      	str	r0, [sp, #20]
 802076c:	f89d 6094 	ldrb.w	r6, [sp, #148]	; 0x94
 8020770:	d905      	bls.n	802077e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4e>
 8020772:	2904      	cmp	r1, #4
 8020774:	f000 80d0 	beq.w	8020918 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e8>
 8020778:	2908      	cmp	r1, #8
 802077a:	f040 816f 	bne.w	8020a5c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x32c>
 802077e:	7b53      	ldrb	r3, [r2, #13]
 8020780:	7990      	ldrb	r0, [r2, #6]
 8020782:	0159      	lsls	r1, r3, #5
 8020784:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8020788:	ea50 0901 	orrs.w	r9, r0, r1
 802078c:	f000 80c1 	beq.w	8020912 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8020790:	011b      	lsls	r3, r3, #4
 8020792:	79d0      	ldrb	r0, [r2, #7]
 8020794:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8020798:	ea50 0301 	orrs.w	r3, r0, r1
 802079c:	9306      	str	r3, [sp, #24]
 802079e:	f000 80b8 	beq.w	8020912 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80207a2:	f992 3009 	ldrsb.w	r3, [r2, #9]
 80207a6:	9a03      	ldr	r2, [sp, #12]
 80207a8:	b29b      	uxth	r3, r3
 80207aa:	2a00      	cmp	r2, #0
 80207ac:	f040 80be 	bne.w	802092c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fc>
 80207b0:	4498      	add	r8, r3
 80207b2:	fa0f f888 	sxth.w	r8, r8
 80207b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80207b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80207bc:	4543      	cmp	r3, r8
 80207be:	dd06      	ble.n	80207ce <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x9e>
 80207c0:	9a03      	ldr	r2, [sp, #12]
 80207c2:	441a      	add	r2, r3
 80207c4:	eba2 0508 	sub.w	r5, r2, r8
 80207c8:	4698      	mov	r8, r3
 80207ca:	b2ab      	uxth	r3, r5
 80207cc:	9303      	str	r3, [sp, #12]
 80207ce:	f8df c30c 	ldr.w	ip, [pc, #780]	; 8020adc <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 80207d2:	465a      	mov	r2, fp
 80207d4:	f89c 5000 	ldrb.w	r5, [ip]
 80207d8:	4641      	mov	r1, r8
 80207da:	4633      	mov	r3, r6
 80207dc:	4620      	mov	r0, r4
 80207de:	9507      	str	r5, [sp, #28]
 80207e0:	f7f8 f8be 	bl	8018960 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80207e4:	465a      	mov	r2, fp
 80207e6:	4641      	mov	r1, r8
 80207e8:	4633      	mov	r3, r6
 80207ea:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 80207ee:	4620      	mov	r0, r4
 80207f0:	f7f8 f8d3 	bl	801899a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80207f4:	a910      	add	r1, sp, #64	; 0x40
 80207f6:	f821 0d0a 	strh.w	r0, [r1, #-10]!
 80207fa:	a80d      	add	r0, sp, #52	; 0x34
 80207fc:	f7f8 f9f4 	bl	8018be8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8020800:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020802:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8020806:	9308      	str	r3, [sp, #32]
 8020808:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802080a:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 802080e:	fa5f f883 	uxtb.w	r8, r3
 8020812:	2f07      	cmp	r7, #7
 8020814:	f200 811f 	bhi.w	8020a56 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x326>
 8020818:	e8df f017 	tbh	[pc, r7, lsl #1]
 802081c:	009b00a1 	.word	0x009b00a1
 8020820:	0095011d 	.word	0x0095011d
 8020824:	011d011d 	.word	0x011d011d
 8020828:	0008011d 	.word	0x0008011d
 802082c:	2708      	movs	r7, #8
 802082e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8020832:	4ca1      	ldr	r4, [pc, #644]	; (8020ab8 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8020834:	6820      	ldr	r0, [r4, #0]
 8020836:	2800      	cmp	r0, #0
 8020838:	f000 8137 	beq.w	8020aaa <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 802083c:	f7fd ff7c 	bl	801e738 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8020840:	f8da 3000 	ldr.w	r3, [sl]
 8020844:	4650      	mov	r0, sl
 8020846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020848:	4798      	blx	r3
 802084a:	2e02      	cmp	r6, #2
 802084c:	f000 80e6 	beq.w	8020a1c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>
 8020850:	2e03      	cmp	r6, #3
 8020852:	f000 80c7 	beq.w	80209e4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b4>
 8020856:	2e01      	cmp	r6, #1
 8020858:	f000 80a8 	beq.w	80209ac <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 802085c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802085e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020862:	8819      	ldrh	r1, [r3, #0]
 8020864:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020868:	440a      	add	r2, r1
 802086a:	991e      	ldr	r1, [sp, #120]	; 0x78
 802086c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020870:	8848      	ldrh	r0, [r1, #2]
 8020872:	6849      	ldr	r1, [r1, #4]
 8020874:	4403      	add	r3, r0
 8020876:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 802087a:	910f      	str	r1, [sp, #60]	; 0x3c
 802087c:	a80e      	add	r0, sp, #56	; 0x38
 802087e:	f7f8 f9f5 	bl	8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020882:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8020886:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 802088a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 802088e:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8020892:	f7fb fc5b 	bl	801c14c <nema_set_clip>
 8020896:	2200      	movs	r2, #0
 8020898:	9d05      	ldr	r5, [sp, #20]
 802089a:	4611      	mov	r1, r2
 802089c:	462b      	mov	r3, r5
 802089e:	4610      	mov	r0, r2
 80208a0:	f7fb fc88 	bl	801c1b4 <nema_rgba>
 80208a4:	f7fd fe60 	bl	801e568 <nema_set_const_color>
 80208a8:	462b      	mov	r3, r5
 80208aa:	4642      	mov	r2, r8
 80208ac:	4659      	mov	r1, fp
 80208ae:	9808      	ldr	r0, [sp, #32]
 80208b0:	f7fb fc80 	bl	801c1b4 <nema_rgba>
 80208b4:	f7fb fc3e 	bl	801c134 <nema_set_tex_color>
 80208b8:	f04f 33ff 	mov.w	r3, #4294967295
 80208bc:	2201      	movs	r2, #1
 80208be:	2100      	movs	r1, #0
 80208c0:	487e      	ldr	r0, [pc, #504]	; (8020abc <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 80208c2:	f7fd fa8b 	bl	801dddc <nema_set_blend>
 80208c6:	2200      	movs	r2, #0
 80208c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208ca:	9201      	str	r2, [sp, #4]
 80208cc:	9300      	str	r3, [sp, #0]
 80208ce:	4649      	mov	r1, r9
 80208d0:	463b      	mov	r3, r7
 80208d2:	9820      	ldr	r0, [sp, #128]	; 0x80
 80208d4:	9a06      	ldr	r2, [sp, #24]
 80208d6:	f7fb fc75 	bl	801c1c4 <nema_bind_src_tex>
 80208da:	9b07      	ldr	r3, [sp, #28]
 80208dc:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 80208e0:	2b01      	cmp	r3, #1
 80208e2:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 80208e6:	d040      	beq.n	802096a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x23a>
 80208e8:	2e02      	cmp	r6, #2
 80208ea:	d051      	beq.n	8020990 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 80208ec:	2e03      	cmp	r6, #3
 80208ee:	f000 80c7 	beq.w	8020a80 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 80208f2:	2e01      	cmp	r6, #1
 80208f4:	9b04      	ldr	r3, [sp, #16]
 80208f6:	f000 80b8 	beq.w	8020a6a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 80208fa:	1ac9      	subs	r1, r1, r3
 80208fc:	9b03      	ldr	r3, [sp, #12]
 80208fe:	1ac0      	subs	r0, r0, r3
 8020900:	f7fb fda0 	bl	801c444 <nema_blit>
 8020904:	6823      	ldr	r3, [r4, #0]
 8020906:	2b00      	cmp	r3, #0
 8020908:	f000 80cf 	beq.w	8020aaa <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 802090c:	2201      	movs	r2, #1
 802090e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 8020912:	b011      	add	sp, #68	; 0x44
 8020914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020918:	2b00      	cmp	r3, #0
 802091a:	f47f af30 	bne.w	802077e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4e>
 802091e:	4b68      	ldr	r3, [pc, #416]	; (8020ac0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 8020920:	4a68      	ldr	r2, [pc, #416]	; (8020ac4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 8020922:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8020926:	4868      	ldr	r0, [pc, #416]	; (8020ac8 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 8020928:	f008 fe68 	bl	80295fc <__assert_func>
 802092c:	1ad5      	subs	r5, r2, r3
 802092e:	b2ab      	uxth	r3, r5
 8020930:	041a      	lsls	r2, r3, #16
 8020932:	9303      	str	r3, [sp, #12]
 8020934:	f57f af3f 	bpl.w	80207b6 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 8020938:	eba8 0803 	sub.w	r8, r8, r3
 802093c:	2300      	movs	r3, #0
 802093e:	fa0f f888 	sxth.w	r8, r8
 8020942:	9303      	str	r3, [sp, #12]
 8020944:	e737      	b.n	80207b6 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 8020946:	f109 0301 	add.w	r3, r9, #1
 802094a:	105b      	asrs	r3, r3, #1
 802094c:	9309      	str	r3, [sp, #36]	; 0x24
 802094e:	2729      	movs	r7, #41	; 0x29
 8020950:	e76f      	b.n	8020832 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 8020952:	f109 0303 	add.w	r3, r9, #3
 8020956:	109b      	asrs	r3, r3, #2
 8020958:	9309      	str	r3, [sp, #36]	; 0x24
 802095a:	2728      	movs	r7, #40	; 0x28
 802095c:	e769      	b.n	8020832 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 802095e:	f109 0307 	add.w	r3, r9, #7
 8020962:	10db      	asrs	r3, r3, #3
 8020964:	9309      	str	r3, [sp, #36]	; 0x24
 8020966:	2727      	movs	r7, #39	; 0x27
 8020968:	e763      	b.n	8020832 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 802096a:	2e02      	cmp	r6, #2
 802096c:	f000 8093 	beq.w	8020a96 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x366>
 8020970:	2e03      	cmp	r6, #3
 8020972:	d00d      	beq.n	8020990 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 8020974:	2e01      	cmp	r6, #1
 8020976:	f000 8091 	beq.w	8020a9c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 802097a:	461a      	mov	r2, r3
 802097c:	9b03      	ldr	r3, [sp, #12]
 802097e:	4419      	add	r1, r3
 8020980:	9b04      	ldr	r3, [sp, #16]
 8020982:	eba1 0109 	sub.w	r1, r1, r9
 8020986:	3101      	adds	r1, #1
 8020988:	1ac0      	subs	r0, r0, r3
 802098a:	f7fb fd75 	bl	801c478 <nema_blit_rotate>
 802098e:	e7b9      	b.n	8020904 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 8020990:	9b04      	ldr	r3, [sp, #16]
 8020992:	2202      	movs	r2, #2
 8020994:	4419      	add	r1, r3
 8020996:	9b03      	ldr	r3, [sp, #12]
 8020998:	4418      	add	r0, r3
 802099a:	9b06      	ldr	r3, [sp, #24]
 802099c:	eba0 0009 	sub.w	r0, r0, r9
 80209a0:	1ac9      	subs	r1, r1, r3
 80209a2:	3101      	adds	r1, #1
 80209a4:	3001      	adds	r0, #1
 80209a6:	f7fb fd67 	bl	801c478 <nema_blit_rotate>
 80209aa:	e7ab      	b.n	8020904 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 80209ac:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80209b0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80209b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80209b6:	440b      	add	r3, r1
 80209b8:	8852      	ldrh	r2, [r2, #2]
 80209ba:	981e      	ldr	r0, [sp, #120]	; 0x78
 80209bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80209be:	1a9b      	subs	r3, r3, r2
 80209c0:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 80209c4:	f8b0 c000 	ldrh.w	ip, [r0]
 80209c8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80209cc:	8880      	ldrh	r0, [r0, #4]
 80209ce:	1a5b      	subs	r3, r3, r1
 80209d0:	4462      	add	r2, ip
 80209d2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80209d6:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
 80209da:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 80209de:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 80209e2:	e74b      	b.n	802087c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 80209e4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80209e8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80209ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80209ee:	440b      	add	r3, r1
 80209f0:	8812      	ldrh	r2, [r2, #0]
 80209f2:	981e      	ldr	r0, [sp, #120]	; 0x78
 80209f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80209f6:	1a9b      	subs	r3, r3, r2
 80209f8:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80209fc:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 8020a00:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020a04:	88c0      	ldrh	r0, [r0, #6]
 8020a06:	1a5b      	subs	r3, r3, r1
 8020a08:	4462      	add	r2, ip
 8020a0a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020a0e:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
 8020a12:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020a16:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8020a1a:	e72f      	b.n	802087c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 8020a1c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8020a20:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020a24:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020a28:	440a      	add	r2, r1
 8020a2a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020a2c:	8808      	ldrh	r0, [r1, #0]
 8020a2e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8020a32:	1a12      	subs	r2, r2, r0
 8020a34:	440b      	add	r3, r1
 8020a36:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020a38:	981e      	ldr	r0, [sp, #120]	; 0x78
 8020a3a:	8849      	ldrh	r1, [r1, #2]
 8020a3c:	8880      	ldrh	r0, [r0, #4]
 8020a3e:	1a5b      	subs	r3, r3, r1
 8020a40:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020a42:	1a12      	subs	r2, r2, r0
 8020a44:	88c8      	ldrh	r0, [r1, #6]
 8020a46:	6849      	ldr	r1, [r1, #4]
 8020a48:	1a1b      	subs	r3, r3, r0
 8020a4a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020a4e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020a52:	910f      	str	r1, [sp, #60]	; 0x3c
 8020a54:	e712      	b.n	802087c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 8020a56:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8020a5a:	e6ea      	b.n	8020832 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 8020a5c:	4b1b      	ldr	r3, [pc, #108]	; (8020acc <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8020a5e:	4a19      	ldr	r2, [pc, #100]	; (8020ac4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 8020a60:	f240 11ab 	movw	r1, #427	; 0x1ab
 8020a64:	4818      	ldr	r0, [pc, #96]	; (8020ac8 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 8020a66:	f008 fdc9 	bl	80295fc <__assert_func>
 8020a6a:	4403      	add	r3, r0
 8020a6c:	4618      	mov	r0, r3
 8020a6e:	9b06      	ldr	r3, [sp, #24]
 8020a70:	2203      	movs	r2, #3
 8020a72:	1ac0      	subs	r0, r0, r3
 8020a74:	9b03      	ldr	r3, [sp, #12]
 8020a76:	3001      	adds	r0, #1
 8020a78:	1ac9      	subs	r1, r1, r3
 8020a7a:	f7fb fcfd 	bl	801c478 <nema_blit_rotate>
 8020a7e:	e741      	b.n	8020904 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 8020a80:	9b03      	ldr	r3, [sp, #12]
 8020a82:	2201      	movs	r2, #1
 8020a84:	4419      	add	r1, r3
 8020a86:	9b04      	ldr	r3, [sp, #16]
 8020a88:	eba1 0109 	sub.w	r1, r1, r9
 8020a8c:	3101      	adds	r1, #1
 8020a8e:	1ac0      	subs	r0, r0, r3
 8020a90:	f7fb fcf2 	bl	801c478 <nema_blit_rotate>
 8020a94:	e736      	b.n	8020904 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 8020a96:	9b04      	ldr	r3, [sp, #16]
 8020a98:	4418      	add	r0, r3
 8020a9a:	e7e8      	b.n	8020a6e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 8020a9c:	9b04      	ldr	r3, [sp, #16]
 8020a9e:	1ac9      	subs	r1, r1, r3
 8020aa0:	9b03      	ldr	r3, [sp, #12]
 8020aa2:	1ac0      	subs	r0, r0, r3
 8020aa4:	f7fb fcce 	bl	801c444 <nema_blit>
 8020aa8:	e72c      	b.n	8020904 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 8020aaa:	4b09      	ldr	r3, [pc, #36]	; (8020ad0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8020aac:	4a09      	ldr	r2, [pc, #36]	; (8020ad4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8020aae:	217c      	movs	r1, #124	; 0x7c
 8020ab0:	4809      	ldr	r0, [pc, #36]	; (8020ad8 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8020ab2:	f008 fda3 	bl	80295fc <__assert_func>
 8020ab6:	bf00      	nop
 8020ab8:	20198728 	.word	0x20198728
 8020abc:	08000504 	.word	0x08000504
 8020ac0:	0802c9c0 	.word	0x0802c9c0
 8020ac4:	0802d6e8 	.word	0x0802d6e8
 8020ac8:	0802c550 	.word	0x0802c550
 8020acc:	0802c930 	.word	0x0802c930
 8020ad0:	0802c4ac 	.word	0x0802c4ac
 8020ad4:	0802ccb4 	.word	0x0802ccb4
 8020ad8:	0802c4d4 	.word	0x0802c4d4
 8020adc:	201984f0 	.word	0x201984f0

08020ae0 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8020ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ae4:	b087      	sub	sp, #28
 8020ae6:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8020aea:	e9dd 8410 	ldrd	r8, r4, [sp, #64]	; 0x40
 8020aee:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 8020af2:	f8bd e050 	ldrh.w	lr, [sp, #80]	; 0x50
 8020af6:	2e00      	cmp	r6, #0
 8020af8:	d065      	beq.n	8020bc6 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 8020afa:	f9b4 a004 	ldrsh.w	sl, [r4, #4]
 8020afe:	f1ba 0f00 	cmp.w	sl, #0
 8020b02:	dd60      	ble.n	8020bc6 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 8020b04:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8020b08:	f1ba 0f00 	cmp.w	sl, #0
 8020b0c:	dd5b      	ble.n	8020bc6 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 8020b0e:	f3c7 0a87 	ubfx	sl, r7, #2, #8
 8020b12:	f1ba 0f0b 	cmp.w	sl, #11
 8020b16:	d059      	beq.n	8020bcc <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xec>
 8020b18:	469c      	mov	ip, r3
 8020b1a:	4b7e      	ldr	r3, [pc, #504]	; (8020d14 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x234>)
 8020b1c:	4615      	mov	r5, r2
 8020b1e:	f893 b000 	ldrb.w	fp, [r3]
 8020b22:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8020b26:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8020b2a:	9303      	str	r3, [sp, #12]
 8020b2c:	f1bb 0f01 	cmp.w	fp, #1
 8020b30:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8020b34:	9205      	str	r2, [sp, #20]
 8020b36:	bf08      	it	eq
 8020b38:	9a03      	ldreq	r2, [sp, #12]
 8020b3a:	9302      	str	r3, [sp, #8]
 8020b3c:	bf08      	it	eq
 8020b3e:	e9cd 2302 	strdeq	r2, r3, [sp, #8]
 8020b42:	f1ba 0f0d 	cmp.w	sl, #13
 8020b46:	4681      	mov	r9, r0
 8020b48:	d034      	beq.n	8020bb4 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd4>
 8020b4a:	4b73      	ldr	r3, [pc, #460]	; (8020d18 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x238>)
 8020b4c:	6818      	ldr	r0, [r3, #0]
 8020b4e:	2800      	cmp	r0, #0
 8020b50:	f000 80d3 	beq.w	8020cfa <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x21a>
 8020b54:	f8dc 3000 	ldr.w	r3, [ip]
 8020b58:	9304      	str	r3, [sp, #16]
 8020b5a:	f7fd fded 	bl	801e738 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8020b5e:	f8d9 3000 	ldr.w	r3, [r9]
 8020b62:	4648      	mov	r0, r9
 8020b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020b66:	4798      	blx	r3
 8020b68:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020b6c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8020b70:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8020b74:	f9b4 0000 	ldrsh.w	r0, [r4]
 8020b78:	f7fb fae8 	bl	801c14c <nema_set_clip>
 8020b7c:	2200      	movs	r2, #0
 8020b7e:	4633      	mov	r3, r6
 8020b80:	4611      	mov	r1, r2
 8020b82:	4610      	mov	r0, r2
 8020b84:	f7fb fb16 	bl	801c1b4 <nema_rgba>
 8020b88:	f7fd fcee 	bl	801e568 <nema_set_const_color>
 8020b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8020b90:	2201      	movs	r2, #1
 8020b92:	2100      	movs	r1, #0
 8020b94:	4861      	ldr	r0, [pc, #388]	; (8020d1c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23c>)
 8020b96:	f7fd f921 	bl	801dddc <nema_set_blend>
 8020b9a:	f1ba 0f0d 	cmp.w	sl, #13
 8020b9e:	f200 80b2 	bhi.w	8020d06 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x226>
 8020ba2:	e8df f00a 	tbb	[pc, sl]
 8020ba6:	8d1b      	.short	0x8d1b
 8020ba8:	b0b0b08b 	.word	0xb0b0b08b
 8020bac:	b0b0b0b0 	.word	0xb0b0b0b0
 8020bb0:	888fb0b0 	.word	0x888fb0b0
 8020bb4:	9b05      	ldr	r3, [sp, #20]
 8020bb6:	b133      	cbz	r3, 8020bc6 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 8020bb8:	781b      	ldrb	r3, [r3, #0]
 8020bba:	f1a3 0216 	sub.w	r2, r3, #22
 8020bbe:	2a01      	cmp	r2, #1
 8020bc0:	d9c3      	bls.n	8020b4a <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6a>
 8020bc2:	2b12      	cmp	r3, #18
 8020bc4:	d0c1      	beq.n	8020b4a <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6a>
 8020bc6:	b007      	add	sp, #28
 8020bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bcc:	e9cd 6e13 	strd	r6, lr, [sp, #76]	; 0x4c
 8020bd0:	9712      	str	r7, [sp, #72]	; 0x48
 8020bd2:	b007      	add	sp, #28
 8020bd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bd8:	f7f7 b9be 	b.w	8017f58 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 8020bdc:	2304      	movs	r3, #4
 8020bde:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8020be2:	f04f 34ff 	mov.w	r4, #4294967295
 8020be6:	f007 0701 	and.w	r7, r7, #1
 8020bea:	9804      	ldr	r0, [sp, #16]
 8020bec:	9701      	str	r7, [sp, #4]
 8020bee:	9400      	str	r4, [sp, #0]
 8020bf0:	f7fb fae8 	bl	801c1c4 <nema_bind_src_tex>
 8020bf4:	2001      	movs	r0, #1
 8020bf6:	f7fc f915 	bl	801ce24 <nema_enable_tiling>
 8020bfa:	2301      	movs	r3, #1
 8020bfc:	461a      	mov	r2, r3
 8020bfe:	4619      	mov	r1, r3
 8020c00:	4618      	mov	r0, r3
 8020c02:	f7fc f923 	bl	801ce4c <nema_enable_aa>
 8020c06:	f1bb 0f01 	cmp.w	fp, #1
 8020c0a:	d069      	beq.n	8020ce0 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x200>
 8020c0c:	edd5 2a00 	vldr	s5, [r5]
 8020c10:	ed95 4a01 	vldr	s8, [r5, #4]
 8020c14:	edd5 4a05 	vldr	s9, [r5, #20]
 8020c18:	ed95 5a06 	vldr	s10, [r5, #24]
 8020c1c:	edd5 5a0a 	vldr	s11, [r5, #40]	; 0x28
 8020c20:	ed95 6a0b 	vldr	s12, [r5, #44]	; 0x2c
 8020c24:	353c      	adds	r5, #60	; 0x3c
 8020c26:	f9b8 3000 	ldrsh.w	r3, [r8]
 8020c2a:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8020d20 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x240>
 8020c2e:	ee00 3a10 	vmov	s0, r3
 8020c32:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8020c36:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8020c3a:	ee03 3a90 	vmov	s7, r3
 8020c3e:	edd5 6a00 	vldr	s13, [r5]
 8020c42:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8020c46:	ed95 7a01 	vldr	s14, [r5, #4]
 8020c4a:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8020c4e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8020c52:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8020c56:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8020c5a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8020c5e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8020c62:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8020c66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020c6a:	eeb0 3a40 	vmov.f32	s6, s0
 8020c6e:	eeb0 2a40 	vmov.f32	s4, s0
 8020c72:	eeb0 1a40 	vmov.f32	s2, s0
 8020c76:	eef0 1a63 	vmov.f32	s3, s7
 8020c7a:	eea2 0aa7 	vfma.f32	s0, s5, s15
 8020c7e:	eef0 0a63 	vmov.f32	s1, s7
 8020c82:	eef0 2a63 	vmov.f32	s5, s7
 8020c86:	eea6 3aa7 	vfma.f32	s6, s13, s15
 8020c8a:	eea5 2aa7 	vfma.f32	s4, s11, s15
 8020c8e:	eea4 1aa7 	vfma.f32	s2, s9, s15
 8020c92:	eee6 2a27 	vfma.f32	s5, s12, s15
 8020c96:	eee5 1a27 	vfma.f32	s3, s10, s15
 8020c9a:	eee4 0a27 	vfma.f32	s1, s8, s15
 8020c9e:	eee7 3a27 	vfma.f32	s7, s14, s15
 8020ca2:	f7fb fd49 	bl	801c738 <nema_blit_quad_fit>
 8020ca6:	4b1c      	ldr	r3, [pc, #112]	; (8020d18 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x238>)
 8020ca8:	6818      	ldr	r0, [r3, #0]
 8020caa:	b330      	cbz	r0, 8020cfa <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x21a>
 8020cac:	b007      	add	sp, #28
 8020cae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cb2:	f7fd bd61 	b.w	801e778 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8020cb6:	9b05      	ldr	r3, [sp, #20]
 8020cb8:	781b      	ldrb	r3, [r3, #0]
 8020cba:	e790      	b.n	8020bde <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 8020cbc:	2310      	movs	r3, #16
 8020cbe:	e78e      	b.n	8020bde <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 8020cc0:	2339      	movs	r3, #57	; 0x39
 8020cc2:	e78c      	b.n	8020bde <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 8020cc4:	4a17      	ldr	r2, [pc, #92]	; (8020d24 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x244>)
 8020cc6:	23ff      	movs	r3, #255	; 0xff
 8020cc8:	6810      	ldr	r0, [r2, #0]
 8020cca:	b2c2      	uxtb	r2, r0
 8020ccc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8020cd0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8020cd4:	f7fb fa6e 	bl	801c1b4 <nema_rgba>
 8020cd8:	f7fb fa2c 	bl	801c134 <nema_set_tex_color>
 8020cdc:	2329      	movs	r3, #41	; 0x29
 8020cde:	e77e      	b.n	8020bde <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 8020ce0:	edd5 2a05 	vldr	s5, [r5, #20]
 8020ce4:	ed95 4a06 	vldr	s8, [r5, #24]
 8020ce8:	edd5 4a0a 	vldr	s9, [r5, #40]	; 0x28
 8020cec:	ed95 5a0b 	vldr	s10, [r5, #44]	; 0x2c
 8020cf0:	edd5 5a0f 	vldr	s11, [r5, #60]	; 0x3c
 8020cf4:	ed95 6a10 	vldr	s12, [r5, #64]	; 0x40
 8020cf8:	e795      	b.n	8020c26 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x146>
 8020cfa:	4b0b      	ldr	r3, [pc, #44]	; (8020d28 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x248>)
 8020cfc:	4a0b      	ldr	r2, [pc, #44]	; (8020d2c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x24c>)
 8020cfe:	217c      	movs	r1, #124	; 0x7c
 8020d00:	480b      	ldr	r0, [pc, #44]	; (8020d30 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x250>)
 8020d02:	f008 fc7b 	bl	80295fc <__assert_func>
 8020d06:	4b0b      	ldr	r3, [pc, #44]	; (8020d34 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x254>)
 8020d08:	4a0b      	ldr	r2, [pc, #44]	; (8020d38 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x258>)
 8020d0a:	f240 314f 	movw	r1, #847	; 0x34f
 8020d0e:	480b      	ldr	r0, [pc, #44]	; (8020d3c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x25c>)
 8020d10:	f008 fc74 	bl	80295fc <__assert_func>
 8020d14:	201984f0 	.word	0x201984f0
 8020d18:	20198728 	.word	0x20198728
 8020d1c:	08000504 	.word	0x08000504
 8020d20:	3d800000 	.word	0x3d800000
 8020d24:	20198500 	.word	0x20198500
 8020d28:	0802c4ac 	.word	0x0802c4ac
 8020d2c:	0802ccb4 	.word	0x0802ccb4
 8020d30:	0802c4d4 	.word	0x0802c4d4
 8020d34:	0802c3a4 	.word	0x0802c3a4
 8020d38:	0802ce6c 	.word	0x0802ce6c
 8020d3c:	0802c550 	.word	0x0802c550

08020d40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8020d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d44:	4680      	mov	r8, r0
 8020d46:	460f      	mov	r7, r1
 8020d48:	4614      	mov	r4, r2
 8020d4a:	461e      	mov	r6, r3
 8020d4c:	4db2      	ldr	r5, [pc, #712]	; (8021018 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2d8>)
 8020d4e:	e8d5 3f8f 	ldab	r3, [r5]
 8020d52:	07da      	lsls	r2, r3, #31
 8020d54:	f140 823a 	bpl.w	80211cc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48c>
 8020d58:	4db0      	ldr	r5, [pc, #704]	; (802101c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2dc>)
 8020d5a:	e8d5 3f8f 	ldab	r3, [r5]
 8020d5e:	07db      	lsls	r3, r3, #31
 8020d60:	f140 8225 	bpl.w	80211ae <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46e>
 8020d64:	4dae      	ldr	r5, [pc, #696]	; (8021020 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e0>)
 8020d66:	e8d5 3f8f 	ldab	r3, [r5]
 8020d6a:	07d8      	lsls	r0, r3, #31
 8020d6c:	f140 8210 	bpl.w	8021190 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x450>
 8020d70:	4dac      	ldr	r5, [pc, #688]	; (8021024 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e4>)
 8020d72:	e8d5 3f8f 	ldab	r3, [r5]
 8020d76:	07d9      	lsls	r1, r3, #31
 8020d78:	f140 81fb 	bpl.w	8021172 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x432>
 8020d7c:	4daa      	ldr	r5, [pc, #680]	; (8021028 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e8>)
 8020d7e:	e8d5 3f8f 	ldab	r3, [r5]
 8020d82:	07da      	lsls	r2, r3, #31
 8020d84:	f140 81e6 	bpl.w	8021154 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x414>
 8020d88:	4da8      	ldr	r5, [pc, #672]	; (802102c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2ec>)
 8020d8a:	e8d5 3f8f 	ldab	r3, [r5]
 8020d8e:	07db      	lsls	r3, r3, #31
 8020d90:	f140 81d1 	bpl.w	8021136 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3f6>
 8020d94:	4da6      	ldr	r5, [pc, #664]	; (8021030 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f0>)
 8020d96:	e8d5 3f8f 	ldab	r3, [r5]
 8020d9a:	07d8      	lsls	r0, r3, #31
 8020d9c:	f140 81bc 	bpl.w	8021118 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3d8>
 8020da0:	4da4      	ldr	r5, [pc, #656]	; (8021034 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f4>)
 8020da2:	e8d5 3f8f 	ldab	r3, [r5]
 8020da6:	07d9      	lsls	r1, r3, #31
 8020da8:	f140 81a7 	bpl.w	80210fa <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3ba>
 8020dac:	4da2      	ldr	r5, [pc, #648]	; (8021038 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f8>)
 8020dae:	e8d5 3f8f 	ldab	r3, [r5]
 8020db2:	07da      	lsls	r2, r3, #31
 8020db4:	f140 8192 	bpl.w	80210dc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x39c>
 8020db8:	4da0      	ldr	r5, [pc, #640]	; (802103c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2fc>)
 8020dba:	e8d5 3f8f 	ldab	r3, [r5]
 8020dbe:	07db      	lsls	r3, r3, #31
 8020dc0:	f140 811a 	bpl.w	8020ff8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2b8>
 8020dc4:	4d9e      	ldr	r5, [pc, #632]	; (8021040 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x300>)
 8020dc6:	e8d5 3f8f 	ldab	r3, [r5]
 8020dca:	07d8      	lsls	r0, r3, #31
 8020dcc:	f140 8105 	bpl.w	8020fda <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x29a>
 8020dd0:	4d9c      	ldr	r5, [pc, #624]	; (8021044 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x304>)
 8020dd2:	e8d5 3f8f 	ldab	r3, [r5]
 8020dd6:	07d9      	lsls	r1, r3, #31
 8020dd8:	f140 80f0 	bpl.w	8020fbc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x27c>
 8020ddc:	4d9a      	ldr	r5, [pc, #616]	; (8021048 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x308>)
 8020dde:	e8d5 3f8f 	ldab	r3, [r5]
 8020de2:	07da      	lsls	r2, r3, #31
 8020de4:	f140 80db 	bpl.w	8020f9e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x25e>
 8020de8:	4d98      	ldr	r5, [pc, #608]	; (802104c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30c>)
 8020dea:	e8d5 3f8f 	ldab	r3, [r5]
 8020dee:	07db      	lsls	r3, r3, #31
 8020df0:	f140 80c6 	bpl.w	8020f80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x240>
 8020df4:	4d96      	ldr	r5, [pc, #600]	; (8021050 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x310>)
 8020df6:	e8d5 3f8f 	ldab	r3, [r5]
 8020dfa:	07d8      	lsls	r0, r3, #31
 8020dfc:	f140 80b1 	bpl.w	8020f62 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x222>
 8020e00:	4d94      	ldr	r5, [pc, #592]	; (8021054 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x314>)
 8020e02:	e8d5 3f8f 	ldab	r3, [r5]
 8020e06:	07d9      	lsls	r1, r3, #31
 8020e08:	f140 809c 	bpl.w	8020f44 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x204>
 8020e0c:	4d92      	ldr	r5, [pc, #584]	; (8021058 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x318>)
 8020e0e:	e8d5 3f8f 	ldab	r3, [r5]
 8020e12:	07da      	lsls	r2, r3, #31
 8020e14:	f140 8087 	bpl.w	8020f26 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e6>
 8020e18:	4d90      	ldr	r5, [pc, #576]	; (802105c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x31c>)
 8020e1a:	e8d5 3f8f 	ldab	r3, [r5]
 8020e1e:	07db      	lsls	r3, r3, #31
 8020e20:	d573      	bpl.n	8020f0a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ca>
 8020e22:	4d8f      	ldr	r5, [pc, #572]	; (8021060 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x320>)
 8020e24:	e8d5 3f8f 	ldab	r3, [r5]
 8020e28:	07d8      	lsls	r0, r3, #31
 8020e2a:	d560      	bpl.n	8020eee <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ae>
 8020e2c:	4d8d      	ldr	r5, [pc, #564]	; (8021064 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x324>)
 8020e2e:	e8d5 3f8f 	ldab	r3, [r5]
 8020e32:	07d9      	lsls	r1, r3, #31
 8020e34:	d54d      	bpl.n	8020ed2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x192>
 8020e36:	4d8c      	ldr	r5, [pc, #560]	; (8021068 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x328>)
 8020e38:	e8d5 3f8f 	ldab	r3, [r5]
 8020e3c:	07da      	lsls	r2, r3, #31
 8020e3e:	d53a      	bpl.n	8020eb6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 8020e40:	4d8a      	ldr	r5, [pc, #552]	; (802106c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x32c>)
 8020e42:	e8d5 3f8f 	ldab	r3, [r5]
 8020e46:	07db      	lsls	r3, r3, #31
 8020e48:	d517      	bpl.n	8020e7a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8020e4a:	f898 3008 	ldrb.w	r3, [r8, #8]
 8020e4e:	2b01      	cmp	r3, #1
 8020e50:	d024      	beq.n	8020e9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15c>
 8020e52:	f0c0 81ca 	bcc.w	80211ea <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4aa>
 8020e56:	2b02      	cmp	r3, #2
 8020e58:	d002      	beq.n	8020e60 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8020e5a:	2000      	movs	r0, #0
 8020e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e60:	2eff      	cmp	r6, #255	; 0xff
 8020e62:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 8020e66:	f000 81cb 	beq.w	8021200 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c0>
 8020e6a:	2c03      	cmp	r4, #3
 8020e6c:	d8f5      	bhi.n	8020e5a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020e6e:	e8df f014 	tbh	[pc, r4, lsl #1]
 8020e72:	01ff      	.short	0x01ff
 8020e74:	01e701ee 	.word	0x01e701ee
 8020e78:	01e0      	.short	0x01e0
 8020e7a:	4628      	mov	r0, r5
 8020e7c:	f008 fb93 	bl	80295a6 <__cxa_guard_acquire>
 8020e80:	2800      	cmp	r0, #0
 8020e82:	d0e2      	beq.n	8020e4a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10a>
 8020e84:	4628      	mov	r0, r5
 8020e86:	f008 fb9a 	bl	80295be <__cxa_guard_release>
 8020e8a:	4a79      	ldr	r2, [pc, #484]	; (8021070 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020e8c:	4979      	ldr	r1, [pc, #484]	; (8021074 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x334>)
 8020e8e:	487a      	ldr	r0, [pc, #488]	; (8021078 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x338>)
 8020e90:	f008 fb82 	bl	8029598 <__aeabi_atexit>
 8020e94:	f898 3008 	ldrb.w	r3, [r8, #8]
 8020e98:	2b01      	cmp	r3, #1
 8020e9a:	d1da      	bne.n	8020e52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x112>
 8020e9c:	2eff      	cmp	r6, #255	; 0xff
 8020e9e:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 8020ea2:	f000 81b6 	beq.w	8021212 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4d2>
 8020ea6:	2c03      	cmp	r4, #3
 8020ea8:	d8d7      	bhi.n	8020e5a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020eaa:	e8df f014 	tbh	[pc, r4, lsl #1]
 8020eae:	0233      	.short	0x0233
 8020eb0:	021b0222 	.word	0x021b0222
 8020eb4:	0214      	.short	0x0214
 8020eb6:	4628      	mov	r0, r5
 8020eb8:	f008 fb75 	bl	80295a6 <__cxa_guard_acquire>
 8020ebc:	2800      	cmp	r0, #0
 8020ebe:	d0bf      	beq.n	8020e40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8020ec0:	4628      	mov	r0, r5
 8020ec2:	f008 fb7c 	bl	80295be <__cxa_guard_release>
 8020ec6:	4a6a      	ldr	r2, [pc, #424]	; (8021070 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020ec8:	496c      	ldr	r1, [pc, #432]	; (802107c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x33c>)
 8020eca:	486d      	ldr	r0, [pc, #436]	; (8021080 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x340>)
 8020ecc:	f008 fb64 	bl	8029598 <__aeabi_atexit>
 8020ed0:	e7b6      	b.n	8020e40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8020ed2:	4628      	mov	r0, r5
 8020ed4:	f008 fb67 	bl	80295a6 <__cxa_guard_acquire>
 8020ed8:	2800      	cmp	r0, #0
 8020eda:	d0ac      	beq.n	8020e36 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf6>
 8020edc:	4628      	mov	r0, r5
 8020ede:	f008 fb6e 	bl	80295be <__cxa_guard_release>
 8020ee2:	4a63      	ldr	r2, [pc, #396]	; (8021070 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020ee4:	4967      	ldr	r1, [pc, #412]	; (8021084 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x344>)
 8020ee6:	4868      	ldr	r0, [pc, #416]	; (8021088 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x348>)
 8020ee8:	f008 fb56 	bl	8029598 <__aeabi_atexit>
 8020eec:	e7a3      	b.n	8020e36 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf6>
 8020eee:	4628      	mov	r0, r5
 8020ef0:	f008 fb59 	bl	80295a6 <__cxa_guard_acquire>
 8020ef4:	2800      	cmp	r0, #0
 8020ef6:	d099      	beq.n	8020e2c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8020ef8:	4628      	mov	r0, r5
 8020efa:	f008 fb60 	bl	80295be <__cxa_guard_release>
 8020efe:	4a5c      	ldr	r2, [pc, #368]	; (8021070 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020f00:	4962      	ldr	r1, [pc, #392]	; (802108c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x34c>)
 8020f02:	4863      	ldr	r0, [pc, #396]	; (8021090 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x350>)
 8020f04:	f008 fb48 	bl	8029598 <__aeabi_atexit>
 8020f08:	e790      	b.n	8020e2c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8020f0a:	4628      	mov	r0, r5
 8020f0c:	f008 fb4b 	bl	80295a6 <__cxa_guard_acquire>
 8020f10:	2800      	cmp	r0, #0
 8020f12:	d086      	beq.n	8020e22 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8020f14:	4628      	mov	r0, r5
 8020f16:	f008 fb52 	bl	80295be <__cxa_guard_release>
 8020f1a:	4a55      	ldr	r2, [pc, #340]	; (8021070 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020f1c:	495d      	ldr	r1, [pc, #372]	; (8021094 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x354>)
 8020f1e:	485e      	ldr	r0, [pc, #376]	; (8021098 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x358>)
 8020f20:	f008 fb3a 	bl	8029598 <__aeabi_atexit>
 8020f24:	e77d      	b.n	8020e22 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8020f26:	4628      	mov	r0, r5
 8020f28:	f008 fb3d 	bl	80295a6 <__cxa_guard_acquire>
 8020f2c:	2800      	cmp	r0, #0
 8020f2e:	f43f af73 	beq.w	8020e18 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 8020f32:	4628      	mov	r0, r5
 8020f34:	f008 fb43 	bl	80295be <__cxa_guard_release>
 8020f38:	4a4d      	ldr	r2, [pc, #308]	; (8021070 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020f3a:	4958      	ldr	r1, [pc, #352]	; (802109c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x35c>)
 8020f3c:	4858      	ldr	r0, [pc, #352]	; (80210a0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x360>)
 8020f3e:	f008 fb2b 	bl	8029598 <__aeabi_atexit>
 8020f42:	e769      	b.n	8020e18 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 8020f44:	4628      	mov	r0, r5
 8020f46:	f008 fb2e 	bl	80295a6 <__cxa_guard_acquire>
 8020f4a:	2800      	cmp	r0, #0
 8020f4c:	f43f af5e 	beq.w	8020e0c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8020f50:	4628      	mov	r0, r5
 8020f52:	f008 fb34 	bl	80295be <__cxa_guard_release>
 8020f56:	4a46      	ldr	r2, [pc, #280]	; (8021070 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020f58:	4952      	ldr	r1, [pc, #328]	; (80210a4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x364>)
 8020f5a:	4853      	ldr	r0, [pc, #332]	; (80210a8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x368>)
 8020f5c:	f008 fb1c 	bl	8029598 <__aeabi_atexit>
 8020f60:	e754      	b.n	8020e0c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8020f62:	4628      	mov	r0, r5
 8020f64:	f008 fb1f 	bl	80295a6 <__cxa_guard_acquire>
 8020f68:	2800      	cmp	r0, #0
 8020f6a:	f43f af49 	beq.w	8020e00 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8020f6e:	4628      	mov	r0, r5
 8020f70:	f008 fb25 	bl	80295be <__cxa_guard_release>
 8020f74:	4a3e      	ldr	r2, [pc, #248]	; (8021070 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020f76:	494d      	ldr	r1, [pc, #308]	; (80210ac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x36c>)
 8020f78:	484d      	ldr	r0, [pc, #308]	; (80210b0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x370>)
 8020f7a:	f008 fb0d 	bl	8029598 <__aeabi_atexit>
 8020f7e:	e73f      	b.n	8020e00 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8020f80:	4628      	mov	r0, r5
 8020f82:	f008 fb10 	bl	80295a6 <__cxa_guard_acquire>
 8020f86:	2800      	cmp	r0, #0
 8020f88:	f43f af34 	beq.w	8020df4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 8020f8c:	4628      	mov	r0, r5
 8020f8e:	f008 fb16 	bl	80295be <__cxa_guard_release>
 8020f92:	4a37      	ldr	r2, [pc, #220]	; (8021070 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020f94:	4947      	ldr	r1, [pc, #284]	; (80210b4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x374>)
 8020f96:	4848      	ldr	r0, [pc, #288]	; (80210b8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x378>)
 8020f98:	f008 fafe 	bl	8029598 <__aeabi_atexit>
 8020f9c:	e72a      	b.n	8020df4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 8020f9e:	4628      	mov	r0, r5
 8020fa0:	f008 fb01 	bl	80295a6 <__cxa_guard_acquire>
 8020fa4:	2800      	cmp	r0, #0
 8020fa6:	f43f af1f 	beq.w	8020de8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8020faa:	4628      	mov	r0, r5
 8020fac:	f008 fb07 	bl	80295be <__cxa_guard_release>
 8020fb0:	4a2f      	ldr	r2, [pc, #188]	; (8021070 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020fb2:	4942      	ldr	r1, [pc, #264]	; (80210bc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x37c>)
 8020fb4:	4842      	ldr	r0, [pc, #264]	; (80210c0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x380>)
 8020fb6:	f008 faef 	bl	8029598 <__aeabi_atexit>
 8020fba:	e715      	b.n	8020de8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8020fbc:	4628      	mov	r0, r5
 8020fbe:	f008 faf2 	bl	80295a6 <__cxa_guard_acquire>
 8020fc2:	2800      	cmp	r0, #0
 8020fc4:	f43f af0a 	beq.w	8020ddc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9c>
 8020fc8:	4628      	mov	r0, r5
 8020fca:	f008 faf8 	bl	80295be <__cxa_guard_release>
 8020fce:	4a28      	ldr	r2, [pc, #160]	; (8021070 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020fd0:	493c      	ldr	r1, [pc, #240]	; (80210c4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x384>)
 8020fd2:	483d      	ldr	r0, [pc, #244]	; (80210c8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x388>)
 8020fd4:	f008 fae0 	bl	8029598 <__aeabi_atexit>
 8020fd8:	e700      	b.n	8020ddc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9c>
 8020fda:	4628      	mov	r0, r5
 8020fdc:	f008 fae3 	bl	80295a6 <__cxa_guard_acquire>
 8020fe0:	2800      	cmp	r0, #0
 8020fe2:	f43f aef5 	beq.w	8020dd0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x90>
 8020fe6:	4628      	mov	r0, r5
 8020fe8:	f008 fae9 	bl	80295be <__cxa_guard_release>
 8020fec:	4a20      	ldr	r2, [pc, #128]	; (8021070 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020fee:	4937      	ldr	r1, [pc, #220]	; (80210cc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x38c>)
 8020ff0:	4837      	ldr	r0, [pc, #220]	; (80210d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x390>)
 8020ff2:	f008 fad1 	bl	8029598 <__aeabi_atexit>
 8020ff6:	e6eb      	b.n	8020dd0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x90>
 8020ff8:	4628      	mov	r0, r5
 8020ffa:	f008 fad4 	bl	80295a6 <__cxa_guard_acquire>
 8020ffe:	2800      	cmp	r0, #0
 8021000:	f43f aee0 	beq.w	8020dc4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 8021004:	4628      	mov	r0, r5
 8021006:	f008 fada 	bl	80295be <__cxa_guard_release>
 802100a:	4a19      	ldr	r2, [pc, #100]	; (8021070 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 802100c:	4931      	ldr	r1, [pc, #196]	; (80210d4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x394>)
 802100e:	4832      	ldr	r0, [pc, #200]	; (80210d8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x398>)
 8021010:	f008 fac2 	bl	8029598 <__aeabi_atexit>
 8021014:	e6d6      	b.n	8020dc4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 8021016:	bf00      	nop
 8021018:	20198750 	.word	0x20198750
 802101c:	20198764 	.word	0x20198764
 8021020:	2019872c 	.word	0x2019872c
 8021024:	20198738 	.word	0x20198738
 8021028:	20198770 	.word	0x20198770
 802102c:	2019877c 	.word	0x2019877c
 8021030:	20198744 	.word	0x20198744
 8021034:	2019875c 	.word	0x2019875c
 8021038:	20198754 	.word	0x20198754
 802103c:	20198768 	.word	0x20198768
 8021040:	20198730 	.word	0x20198730
 8021044:	2019873c 	.word	0x2019873c
 8021048:	20198774 	.word	0x20198774
 802104c:	20198780 	.word	0x20198780
 8021050:	20198748 	.word	0x20198748
 8021054:	20198760 	.word	0x20198760
 8021058:	20198758 	.word	0x20198758
 802105c:	2019876c 	.word	0x2019876c
 8021060:	20198734 	.word	0x20198734
 8021064:	20198740 	.word	0x20198740
 8021068:	20198778 	.word	0x20198778
 802106c:	2019874c 	.word	0x2019874c
 8021070:	20000000 	.word	0x20000000
 8021074:	080203a9 	.word	0x080203a9
 8021078:	20000088 	.word	0x20000088
 802107c:	080203a5 	.word	0x080203a5
 8021080:	200000b4 	.word	0x200000b4
 8021084:	080203b5 	.word	0x080203b5
 8021088:	2000007c 	.word	0x2000007c
 802108c:	080203b9 	.word	0x080203b9
 8021090:	20000070 	.word	0x20000070
 8021094:	080203ad 	.word	0x080203ad
 8021098:	200000a8 	.word	0x200000a8
 802109c:	080203b1 	.word	0x080203b1
 80210a0:	20000094 	.word	0x20000094
 80210a4:	080203c5 	.word	0x080203c5
 80210a8:	2000009c 	.word	0x2000009c
 80210ac:	080203c9 	.word	0x080203c9
 80210b0:	20000084 	.word	0x20000084
 80210b4:	080203bd 	.word	0x080203bd
 80210b8:	200000bc 	.word	0x200000bc
 80210bc:	080203c1 	.word	0x080203c1
 80210c0:	200000b0 	.word	0x200000b0
 80210c4:	080203d5 	.word	0x080203d5
 80210c8:	20000078 	.word	0x20000078
 80210cc:	080203d9 	.word	0x080203d9
 80210d0:	2000006c 	.word	0x2000006c
 80210d4:	080203cd 	.word	0x080203cd
 80210d8:	200000a4 	.word	0x200000a4
 80210dc:	4628      	mov	r0, r5
 80210de:	f008 fa62 	bl	80295a6 <__cxa_guard_acquire>
 80210e2:	2800      	cmp	r0, #0
 80210e4:	f43f ae68 	beq.w	8020db8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78>
 80210e8:	4628      	mov	r0, r5
 80210ea:	f008 fa68 	bl	80295be <__cxa_guard_release>
 80210ee:	4aa6      	ldr	r2, [pc, #664]	; (8021388 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 80210f0:	49a6      	ldr	r1, [pc, #664]	; (802138c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64c>)
 80210f2:	48a7      	ldr	r0, [pc, #668]	; (8021390 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x650>)
 80210f4:	f008 fa50 	bl	8029598 <__aeabi_atexit>
 80210f8:	e65e      	b.n	8020db8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78>
 80210fa:	4628      	mov	r0, r5
 80210fc:	f008 fa53 	bl	80295a6 <__cxa_guard_acquire>
 8021100:	2800      	cmp	r0, #0
 8021102:	f43f ae53 	beq.w	8020dac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8021106:	4628      	mov	r0, r5
 8021108:	f008 fa59 	bl	80295be <__cxa_guard_release>
 802110c:	4a9e      	ldr	r2, [pc, #632]	; (8021388 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 802110e:	49a1      	ldr	r1, [pc, #644]	; (8021394 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x654>)
 8021110:	48a1      	ldr	r0, [pc, #644]	; (8021398 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x658>)
 8021112:	f008 fa41 	bl	8029598 <__aeabi_atexit>
 8021116:	e649      	b.n	8020dac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8021118:	4628      	mov	r0, r5
 802111a:	f008 fa44 	bl	80295a6 <__cxa_guard_acquire>
 802111e:	2800      	cmp	r0, #0
 8021120:	f43f ae3e 	beq.w	8020da0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 8021124:	4628      	mov	r0, r5
 8021126:	f008 fa4a 	bl	80295be <__cxa_guard_release>
 802112a:	4a97      	ldr	r2, [pc, #604]	; (8021388 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 802112c:	499b      	ldr	r1, [pc, #620]	; (802139c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x65c>)
 802112e:	489c      	ldr	r0, [pc, #624]	; (80213a0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x660>)
 8021130:	f008 fa32 	bl	8029598 <__aeabi_atexit>
 8021134:	e634      	b.n	8020da0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 8021136:	4628      	mov	r0, r5
 8021138:	f008 fa35 	bl	80295a6 <__cxa_guard_acquire>
 802113c:	2800      	cmp	r0, #0
 802113e:	f43f ae29 	beq.w	8020d94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 8021142:	4628      	mov	r0, r5
 8021144:	f008 fa3b 	bl	80295be <__cxa_guard_release>
 8021148:	4a8f      	ldr	r2, [pc, #572]	; (8021388 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 802114a:	4996      	ldr	r1, [pc, #600]	; (80213a4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x664>)
 802114c:	4896      	ldr	r0, [pc, #600]	; (80213a8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x668>)
 802114e:	f008 fa23 	bl	8029598 <__aeabi_atexit>
 8021152:	e61f      	b.n	8020d94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 8021154:	4628      	mov	r0, r5
 8021156:	f008 fa26 	bl	80295a6 <__cxa_guard_acquire>
 802115a:	2800      	cmp	r0, #0
 802115c:	f43f ae14 	beq.w	8020d88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48>
 8021160:	4628      	mov	r0, r5
 8021162:	f008 fa2c 	bl	80295be <__cxa_guard_release>
 8021166:	4a88      	ldr	r2, [pc, #544]	; (8021388 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8021168:	4990      	ldr	r1, [pc, #576]	; (80213ac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66c>)
 802116a:	4891      	ldr	r0, [pc, #580]	; (80213b0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x670>)
 802116c:	f008 fa14 	bl	8029598 <__aeabi_atexit>
 8021170:	e60a      	b.n	8020d88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48>
 8021172:	4628      	mov	r0, r5
 8021174:	f008 fa17 	bl	80295a6 <__cxa_guard_acquire>
 8021178:	2800      	cmp	r0, #0
 802117a:	f43f adff 	beq.w	8020d7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3c>
 802117e:	4628      	mov	r0, r5
 8021180:	f008 fa1d 	bl	80295be <__cxa_guard_release>
 8021184:	4a80      	ldr	r2, [pc, #512]	; (8021388 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8021186:	498b      	ldr	r1, [pc, #556]	; (80213b4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x674>)
 8021188:	488b      	ldr	r0, [pc, #556]	; (80213b8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x678>)
 802118a:	f008 fa05 	bl	8029598 <__aeabi_atexit>
 802118e:	e5f5      	b.n	8020d7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3c>
 8021190:	4628      	mov	r0, r5
 8021192:	f008 fa08 	bl	80295a6 <__cxa_guard_acquire>
 8021196:	2800      	cmp	r0, #0
 8021198:	f43f adea 	beq.w	8020d70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30>
 802119c:	4628      	mov	r0, r5
 802119e:	f008 fa0e 	bl	80295be <__cxa_guard_release>
 80211a2:	4a79      	ldr	r2, [pc, #484]	; (8021388 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 80211a4:	4985      	ldr	r1, [pc, #532]	; (80213bc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x67c>)
 80211a6:	4886      	ldr	r0, [pc, #536]	; (80213c0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x680>)
 80211a8:	f008 f9f6 	bl	8029598 <__aeabi_atexit>
 80211ac:	e5e0      	b.n	8020d70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30>
 80211ae:	4628      	mov	r0, r5
 80211b0:	f008 f9f9 	bl	80295a6 <__cxa_guard_acquire>
 80211b4:	2800      	cmp	r0, #0
 80211b6:	f43f add5 	beq.w	8020d64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80211ba:	4628      	mov	r0, r5
 80211bc:	f008 f9ff 	bl	80295be <__cxa_guard_release>
 80211c0:	4a71      	ldr	r2, [pc, #452]	; (8021388 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 80211c2:	4980      	ldr	r1, [pc, #512]	; (80213c4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x684>)
 80211c4:	4880      	ldr	r0, [pc, #512]	; (80213c8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x688>)
 80211c6:	f008 f9e7 	bl	8029598 <__aeabi_atexit>
 80211ca:	e5cb      	b.n	8020d64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80211cc:	4628      	mov	r0, r5
 80211ce:	f008 f9ea 	bl	80295a6 <__cxa_guard_acquire>
 80211d2:	2800      	cmp	r0, #0
 80211d4:	f43f adc0 	beq.w	8020d58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80211d8:	4628      	mov	r0, r5
 80211da:	f008 f9f0 	bl	80295be <__cxa_guard_release>
 80211de:	4a6a      	ldr	r2, [pc, #424]	; (8021388 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 80211e0:	497a      	ldr	r1, [pc, #488]	; (80213cc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x68c>)
 80211e2:	487b      	ldr	r0, [pc, #492]	; (80213d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x690>)
 80211e4:	f008 f9d8 	bl	8029598 <__aeabi_atexit>
 80211e8:	e5b6      	b.n	8020d58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80211ea:	2eff      	cmp	r6, #255	; 0xff
 80211ec:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 80211f0:	d018      	beq.n	8021224 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e4>
 80211f2:	2c03      	cmp	r4, #3
 80211f4:	f63f ae31 	bhi.w	8020e5a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 80211f8:	e8df f004 	tbb	[pc, r4]
 80211fc:	4b525963 	.word	0x4b525963
 8021200:	2c03      	cmp	r4, #3
 8021202:	f63f ae2a 	bhi.w	8020e5a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8021206:	e8df f014 	tbh	[pc, r4, lsl #1]
 802120a:	012d      	.short	0x012d
 802120c:	001b011e 	.word	0x001b011e
 8021210:	0014      	.short	0x0014
 8021212:	2c03      	cmp	r4, #3
 8021214:	f63f ae21 	bhi.w	8020e5a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8021218:	e8df f014 	tbh	[pc, r4, lsl #1]
 802121c:	00f000ff 	.word	0x00f000ff
 8021220:	00af010e 	.word	0x00af010e
 8021224:	2c03      	cmp	r4, #3
 8021226:	f63f ae18 	bhi.w	8020e5a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 802122a:	e8df f004 	tbb	[pc, r4]
 802122e:	929c      	.short	0x929c
 8021230:	848b      	.short	0x848b
 8021232:	687b      	ldr	r3, [r7, #4]
 8021234:	4867      	ldr	r0, [pc, #412]	; (80213d4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x694>)
 8021236:	781b      	ldrb	r3, [r3, #0]
 8021238:	2b00      	cmp	r3, #0
 802123a:	bf18      	it	ne
 802123c:	2000      	movne	r0, #0
 802123e:	e60d      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8021240:	687b      	ldr	r3, [r7, #4]
 8021242:	4865      	ldr	r0, [pc, #404]	; (80213d8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x698>)
 8021244:	781b      	ldrb	r3, [r3, #0]
 8021246:	2b00      	cmp	r3, #0
 8021248:	bf18      	it	ne
 802124a:	2000      	movne	r0, #0
 802124c:	e606      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 802124e:	687b      	ldr	r3, [r7, #4]
 8021250:	781b      	ldrb	r3, [r3, #0]
 8021252:	2b01      	cmp	r3, #1
 8021254:	f000 811b 	beq.w	802148e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x74e>
 8021258:	f0c0 8113 	bcc.w	8021482 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x742>
 802125c:	2b02      	cmp	r3, #2
 802125e:	f47f adfc 	bne.w	8020e5a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8021262:	4b5e      	ldr	r3, [pc, #376]	; (80213dc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x69c>)
 8021264:	4a5e      	ldr	r2, [pc, #376]	; (80213e0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 8021266:	f240 616e 	movw	r1, #1646	; 0x66e
 802126a:	485e      	ldr	r0, [pc, #376]	; (80213e4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 802126c:	f008 f9c6 	bl	80295fc <__assert_func>
 8021270:	687b      	ldr	r3, [r7, #4]
 8021272:	781b      	ldrb	r3, [r3, #0]
 8021274:	2b01      	cmp	r3, #1
 8021276:	f000 8108 	beq.w	802148a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x74a>
 802127a:	f0c0 8104 	bcc.w	8021486 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x746>
 802127e:	2b02      	cmp	r3, #2
 8021280:	f47f adeb 	bne.w	8020e5a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8021284:	4b55      	ldr	r3, [pc, #340]	; (80213dc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x69c>)
 8021286:	4a56      	ldr	r2, [pc, #344]	; (80213e0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 8021288:	f240 617a 	movw	r1, #1658	; 0x67a
 802128c:	4855      	ldr	r0, [pc, #340]	; (80213e4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 802128e:	f008 f9b5 	bl	80295fc <__assert_func>
 8021292:	687b      	ldr	r3, [r7, #4]
 8021294:	4846      	ldr	r0, [pc, #280]	; (80213b0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x670>)
 8021296:	781b      	ldrb	r3, [r3, #0]
 8021298:	2b00      	cmp	r3, #0
 802129a:	bf18      	it	ne
 802129c:	2000      	movne	r0, #0
 802129e:	e5dd      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80212a0:	687b      	ldr	r3, [r7, #4]
 80212a2:	483f      	ldr	r0, [pc, #252]	; (80213a0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x660>)
 80212a4:	781b      	ldrb	r3, [r3, #0]
 80212a6:	2b00      	cmp	r3, #0
 80212a8:	bf18      	it	ne
 80212aa:	2000      	movne	r0, #0
 80212ac:	e5d6      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80212ae:	687b      	ldr	r3, [r7, #4]
 80212b0:	781b      	ldrb	r3, [r3, #0]
 80212b2:	2b00      	cmp	r3, #0
 80212b4:	f000 80ed 	beq.w	8021492 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x752>
 80212b8:	2b01      	cmp	r3, #1
 80212ba:	4845      	ldr	r0, [pc, #276]	; (80213d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x690>)
 80212bc:	bf18      	it	ne
 80212be:	2000      	movne	r0, #0
 80212c0:	e5cc      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80212c2:	687b      	ldr	r3, [r7, #4]
 80212c4:	781b      	ldrb	r3, [r3, #0]
 80212c6:	2b00      	cmp	r3, #0
 80212c8:	f000 80e5 	beq.w	8021496 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x756>
 80212cc:	2b01      	cmp	r3, #1
 80212ce:	483c      	ldr	r0, [pc, #240]	; (80213c0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x680>)
 80212d0:	bf18      	it	ne
 80212d2:	2000      	movne	r0, #0
 80212d4:	e5c2      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80212d6:	687b      	ldr	r3, [r7, #4]
 80212d8:	4843      	ldr	r0, [pc, #268]	; (80213e8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a8>)
 80212da:	781b      	ldrb	r3, [r3, #0]
 80212dc:	2b00      	cmp	r3, #0
 80212de:	bf18      	it	ne
 80212e0:	2000      	movne	r0, #0
 80212e2:	e5bb      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80212e4:	687b      	ldr	r3, [r7, #4]
 80212e6:	4841      	ldr	r0, [pc, #260]	; (80213ec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6ac>)
 80212e8:	781b      	ldrb	r3, [r3, #0]
 80212ea:	2b00      	cmp	r3, #0
 80212ec:	bf18      	it	ne
 80212ee:	2000      	movne	r0, #0
 80212f0:	e5b4      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80212f2:	687b      	ldr	r3, [r7, #4]
 80212f4:	781b      	ldrb	r3, [r3, #0]
 80212f6:	2b01      	cmp	r3, #1
 80212f8:	f000 80d5 	beq.w	80214a6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x766>
 80212fc:	f0c0 80d1 	bcc.w	80214a2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x762>
 8021300:	2b02      	cmp	r3, #2
 8021302:	f47f adaa 	bne.w	8020e5a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8021306:	4b3a      	ldr	r3, [pc, #232]	; (80213f0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b0>)
 8021308:	4a35      	ldr	r2, [pc, #212]	; (80213e0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 802130a:	f240 6113 	movw	r1, #1555	; 0x613
 802130e:	4835      	ldr	r0, [pc, #212]	; (80213e4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 8021310:	f008 f974 	bl	80295fc <__assert_func>
 8021314:	687b      	ldr	r3, [r7, #4]
 8021316:	781b      	ldrb	r3, [r3, #0]
 8021318:	2b01      	cmp	r3, #1
 802131a:	f000 80c0 	beq.w	802149e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x75e>
 802131e:	f0c0 80bc 	bcc.w	802149a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x75a>
 8021322:	2b02      	cmp	r3, #2
 8021324:	f47f ad99 	bne.w	8020e5a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8021328:	4b32      	ldr	r3, [pc, #200]	; (80213f4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b4>)
 802132a:	4a2d      	ldr	r2, [pc, #180]	; (80213e0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 802132c:	f240 611f 	movw	r1, #1567	; 0x61f
 8021330:	482c      	ldr	r0, [pc, #176]	; (80213e4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 8021332:	f008 f963 	bl	80295fc <__assert_func>
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	481b      	ldr	r0, [pc, #108]	; (80213a8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x668>)
 802133a:	781b      	ldrb	r3, [r3, #0]
 802133c:	2b00      	cmp	r3, #0
 802133e:	bf18      	it	ne
 8021340:	2000      	movne	r0, #0
 8021342:	e58b      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8021344:	687b      	ldr	r3, [r7, #4]
 8021346:	4814      	ldr	r0, [pc, #80]	; (8021398 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x658>)
 8021348:	781b      	ldrb	r3, [r3, #0]
 802134a:	2b00      	cmp	r3, #0
 802134c:	bf18      	it	ne
 802134e:	2000      	movne	r0, #0
 8021350:	e584      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8021352:	687b      	ldr	r3, [r7, #4]
 8021354:	781b      	ldrb	r3, [r3, #0]
 8021356:	2b00      	cmp	r3, #0
 8021358:	f000 80af 	beq.w	80214ba <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x77a>
 802135c:	2b01      	cmp	r3, #1
 802135e:	481a      	ldr	r0, [pc, #104]	; (80213c8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x688>)
 8021360:	bf18      	it	ne
 8021362:	2000      	movne	r0, #0
 8021364:	e57a      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8021366:	687b      	ldr	r3, [r7, #4]
 8021368:	781b      	ldrb	r3, [r3, #0]
 802136a:	2b00      	cmp	r3, #0
 802136c:	f000 80a7 	beq.w	80214be <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x77e>
 8021370:	2b01      	cmp	r3, #1
 8021372:	4811      	ldr	r0, [pc, #68]	; (80213b8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x678>)
 8021374:	bf18      	it	ne
 8021376:	2000      	movne	r0, #0
 8021378:	e570      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 802137a:	687b      	ldr	r3, [r7, #4]
 802137c:	481e      	ldr	r0, [pc, #120]	; (80213f8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b8>)
 802137e:	781b      	ldrb	r3, [r3, #0]
 8021380:	2b00      	cmp	r3, #0
 8021382:	bf18      	it	ne
 8021384:	2000      	movne	r0, #0
 8021386:	e569      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8021388:	20000000 	.word	0x20000000
 802138c:	080203d1 	.word	0x080203d1
 8021390:	20000090 	.word	0x20000090
 8021394:	080203e5 	.word	0x080203e5
 8021398:	20000098 	.word	0x20000098
 802139c:	080203e9 	.word	0x080203e9
 80213a0:	20000080 	.word	0x20000080
 80213a4:	080203dd 	.word	0x080203dd
 80213a8:	200000b8 	.word	0x200000b8
 80213ac:	080203e1 	.word	0x080203e1
 80213b0:	200000ac 	.word	0x200000ac
 80213b4:	080203f5 	.word	0x080203f5
 80213b8:	20000074 	.word	0x20000074
 80213bc:	080203f9 	.word	0x080203f9
 80213c0:	20000068 	.word	0x20000068
 80213c4:	080203ed 	.word	0x080203ed
 80213c8:	200000a0 	.word	0x200000a0
 80213cc:	080203f1 	.word	0x080203f1
 80213d0:	2000008c 	.word	0x2000008c
 80213d4:	200000b4 	.word	0x200000b4
 80213d8:	20000088 	.word	0x20000088
 80213dc:	0802c6a8 	.word	0x0802c6a8
 80213e0:	0802d488 	.word	0x0802d488
 80213e4:	0802c550 	.word	0x0802c550
 80213e8:	200000b0 	.word	0x200000b0
 80213ec:	20000084 	.word	0x20000084
 80213f0:	0802c614 	.word	0x0802c614
 80213f4:	0802c65c 	.word	0x0802c65c
 80213f8:	200000bc 	.word	0x200000bc
 80213fc:	687b      	ldr	r3, [r7, #4]
 80213fe:	781b      	ldrb	r3, [r3, #0]
 8021400:	2b01      	cmp	r3, #1
 8021402:	d060      	beq.n	80214c6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x786>
 8021404:	d35d      	bcc.n	80214c2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x782>
 8021406:	2b02      	cmp	r3, #2
 8021408:	f47f ad27 	bne.w	8020e5a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 802140c:	4b2f      	ldr	r3, [pc, #188]	; (80214cc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 802140e:	4a30      	ldr	r2, [pc, #192]	; (80214d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 8021410:	f240 613e 	movw	r1, #1598	; 0x63e
 8021414:	482f      	ldr	r0, [pc, #188]	; (80214d4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 8021416:	f008 f8f1 	bl	80295fc <__assert_func>
 802141a:	687b      	ldr	r3, [r7, #4]
 802141c:	781b      	ldrb	r3, [r3, #0]
 802141e:	2b01      	cmp	r3, #1
 8021420:	d049      	beq.n	80214b6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x776>
 8021422:	d346      	bcc.n	80214b2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x772>
 8021424:	2b02      	cmp	r3, #2
 8021426:	f47f ad18 	bne.w	8020e5a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 802142a:	4b28      	ldr	r3, [pc, #160]	; (80214cc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 802142c:	4a28      	ldr	r2, [pc, #160]	; (80214d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 802142e:	f240 614a 	movw	r1, #1610	; 0x64a
 8021432:	4828      	ldr	r0, [pc, #160]	; (80214d4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 8021434:	f008 f8e2 	bl	80295fc <__assert_func>
 8021438:	687b      	ldr	r3, [r7, #4]
 802143a:	4827      	ldr	r0, [pc, #156]	; (80214d8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x798>)
 802143c:	781b      	ldrb	r3, [r3, #0]
 802143e:	2b00      	cmp	r3, #0
 8021440:	bf18      	it	ne
 8021442:	2000      	movne	r0, #0
 8021444:	e50a      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8021446:	687b      	ldr	r3, [r7, #4]
 8021448:	781b      	ldrb	r3, [r3, #0]
 802144a:	2b01      	cmp	r3, #1
 802144c:	d02d      	beq.n	80214aa <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76a>
 802144e:	d318      	bcc.n	8021482 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x742>
 8021450:	2b02      	cmp	r3, #2
 8021452:	f47f ad02 	bne.w	8020e5a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8021456:	4b1d      	ldr	r3, [pc, #116]	; (80214cc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 8021458:	4a1d      	ldr	r2, [pc, #116]	; (80214d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 802145a:	f240 619b 	movw	r1, #1691	; 0x69b
 802145e:	481d      	ldr	r0, [pc, #116]	; (80214d4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 8021460:	f008 f8cc 	bl	80295fc <__assert_func>
 8021464:	687b      	ldr	r3, [r7, #4]
 8021466:	781b      	ldrb	r3, [r3, #0]
 8021468:	2b01      	cmp	r3, #1
 802146a:	d020      	beq.n	80214ae <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76e>
 802146c:	d30b      	bcc.n	8021486 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x746>
 802146e:	2b02      	cmp	r3, #2
 8021470:	f47f acf3 	bne.w	8020e5a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8021474:	4b15      	ldr	r3, [pc, #84]	; (80214cc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 8021476:	4a16      	ldr	r2, [pc, #88]	; (80214d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 8021478:	f240 61a7 	movw	r1, #1703	; 0x6a7
 802147c:	4815      	ldr	r0, [pc, #84]	; (80214d4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 802147e:	f008 f8bd 	bl	80295fc <__assert_func>
 8021482:	4816      	ldr	r0, [pc, #88]	; (80214dc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x79c>)
 8021484:	e4ea      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8021486:	4816      	ldr	r0, [pc, #88]	; (80214e0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a0>)
 8021488:	e4e8      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 802148a:	4816      	ldr	r0, [pc, #88]	; (80214e4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a4>)
 802148c:	e4e6      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 802148e:	4816      	ldr	r0, [pc, #88]	; (80214e8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a8>)
 8021490:	e4e4      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8021492:	4816      	ldr	r0, [pc, #88]	; (80214ec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7ac>)
 8021494:	e4e2      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8021496:	4816      	ldr	r0, [pc, #88]	; (80214f0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b0>)
 8021498:	e4e0      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 802149a:	4816      	ldr	r0, [pc, #88]	; (80214f4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b4>)
 802149c:	e4de      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 802149e:	4816      	ldr	r0, [pc, #88]	; (80214f8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b8>)
 80214a0:	e4dc      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80214a2:	4816      	ldr	r0, [pc, #88]	; (80214fc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7bc>)
 80214a4:	e4da      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80214a6:	4816      	ldr	r0, [pc, #88]	; (8021500 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c0>)
 80214a8:	e4d8      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80214aa:	4816      	ldr	r0, [pc, #88]	; (8021504 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c4>)
 80214ac:	e4d6      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80214ae:	4816      	ldr	r0, [pc, #88]	; (8021508 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c8>)
 80214b0:	e4d4      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80214b2:	4809      	ldr	r0, [pc, #36]	; (80214d8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x798>)
 80214b4:	e4d2      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80214b6:	4815      	ldr	r0, [pc, #84]	; (802150c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7cc>)
 80214b8:	e4d0      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80214ba:	4815      	ldr	r0, [pc, #84]	; (8021510 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d0>)
 80214bc:	e4ce      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80214be:	4815      	ldr	r0, [pc, #84]	; (8021514 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d4>)
 80214c0:	e4cc      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80214c2:	4815      	ldr	r0, [pc, #84]	; (8021518 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d8>)
 80214c4:	e4ca      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80214c6:	4815      	ldr	r0, [pc, #84]	; (802151c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7dc>)
 80214c8:	e4c8      	b.n	8020e5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80214ca:	bf00      	nop
 80214cc:	0802c65c 	.word	0x0802c65c
 80214d0:	0802d488 	.word	0x0802d488
 80214d4:	0802c550 	.word	0x0802c550
 80214d8:	2000009c 	.word	0x2000009c
 80214dc:	200000b4 	.word	0x200000b4
 80214e0:	20000088 	.word	0x20000088
 80214e4:	20000070 	.word	0x20000070
 80214e8:	20000094 	.word	0x20000094
 80214ec:	200000ac 	.word	0x200000ac
 80214f0:	20000080 	.word	0x20000080
 80214f4:	20000084 	.word	0x20000084
 80214f8:	2000006c 	.word	0x2000006c
 80214fc:	200000b0 	.word	0x200000b0
 8021500:	20000090 	.word	0x20000090
 8021504:	200000a8 	.word	0x200000a8
 8021508:	2000007c 	.word	0x2000007c
 802150c:	20000078 	.word	0x20000078
 8021510:	200000b8 	.word	0x200000b8
 8021514:	20000098 	.word	0x20000098
 8021518:	200000bc 	.word	0x200000bc
 802151c:	200000a4 	.word	0x200000a4

08021520 <_ZN8touchgfx8LCDGPU2DD0Ev>:
 8021520:	b510      	push	{r4, lr}
 8021522:	4604      	mov	r4, r0
 8021524:	210c      	movs	r1, #12
 8021526:	f008 f83c 	bl	80295a2 <_ZdlPvj>
 802152a:	4620      	mov	r0, r4
 802152c:	bd10      	pop	{r4, pc}
 802152e:	bf00      	nop

08021530 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021530:	b510      	push	{r4, lr}
 8021532:	4604      	mov	r4, r0
 8021534:	2104      	movs	r1, #4
 8021536:	f008 f834 	bl	80295a2 <_ZdlPvj>
 802153a:	4620      	mov	r0, r4
 802153c:	bd10      	pop	{r4, pc}
 802153e:	bf00      	nop

08021540 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021540:	b510      	push	{r4, lr}
 8021542:	4604      	mov	r4, r0
 8021544:	2104      	movs	r1, #4
 8021546:	f008 f82c 	bl	80295a2 <_ZdlPvj>
 802154a:	4620      	mov	r0, r4
 802154c:	bd10      	pop	{r4, pc}
 802154e:	bf00      	nop

08021550 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021550:	b510      	push	{r4, lr}
 8021552:	4604      	mov	r4, r0
 8021554:	2104      	movs	r1, #4
 8021556:	f008 f824 	bl	80295a2 <_ZdlPvj>
 802155a:	4620      	mov	r0, r4
 802155c:	bd10      	pop	{r4, pc}
 802155e:	bf00      	nop

08021560 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021560:	b510      	push	{r4, lr}
 8021562:	4604      	mov	r4, r0
 8021564:	2104      	movs	r1, #4
 8021566:	f008 f81c 	bl	80295a2 <_ZdlPvj>
 802156a:	4620      	mov	r0, r4
 802156c:	bd10      	pop	{r4, pc}
 802156e:	bf00      	nop

08021570 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021570:	b510      	push	{r4, lr}
 8021572:	4604      	mov	r4, r0
 8021574:	2104      	movs	r1, #4
 8021576:	f008 f814 	bl	80295a2 <_ZdlPvj>
 802157a:	4620      	mov	r0, r4
 802157c:	bd10      	pop	{r4, pc}
 802157e:	bf00      	nop

08021580 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021580:	b510      	push	{r4, lr}
 8021582:	4604      	mov	r4, r0
 8021584:	2104      	movs	r1, #4
 8021586:	f008 f80c 	bl	80295a2 <_ZdlPvj>
 802158a:	4620      	mov	r0, r4
 802158c:	bd10      	pop	{r4, pc}
 802158e:	bf00      	nop

08021590 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021590:	b510      	push	{r4, lr}
 8021592:	4604      	mov	r4, r0
 8021594:	2104      	movs	r1, #4
 8021596:	f008 f804 	bl	80295a2 <_ZdlPvj>
 802159a:	4620      	mov	r0, r4
 802159c:	bd10      	pop	{r4, pc}
 802159e:	bf00      	nop

080215a0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80215a0:	b510      	push	{r4, lr}
 80215a2:	4604      	mov	r4, r0
 80215a4:	2104      	movs	r1, #4
 80215a6:	f007 fffc 	bl	80295a2 <_ZdlPvj>
 80215aa:	4620      	mov	r0, r4
 80215ac:	bd10      	pop	{r4, pc}
 80215ae:	bf00      	nop

080215b0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80215b0:	b510      	push	{r4, lr}
 80215b2:	4604      	mov	r4, r0
 80215b4:	2104      	movs	r1, #4
 80215b6:	f007 fff4 	bl	80295a2 <_ZdlPvj>
 80215ba:	4620      	mov	r0, r4
 80215bc:	bd10      	pop	{r4, pc}
 80215be:	bf00      	nop

080215c0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80215c0:	b510      	push	{r4, lr}
 80215c2:	4604      	mov	r4, r0
 80215c4:	2104      	movs	r1, #4
 80215c6:	f007 ffec 	bl	80295a2 <_ZdlPvj>
 80215ca:	4620      	mov	r0, r4
 80215cc:	bd10      	pop	{r4, pc}
 80215ce:	bf00      	nop

080215d0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80215d0:	b510      	push	{r4, lr}
 80215d2:	4604      	mov	r4, r0
 80215d4:	2104      	movs	r1, #4
 80215d6:	f007 ffe4 	bl	80295a2 <_ZdlPvj>
 80215da:	4620      	mov	r0, r4
 80215dc:	bd10      	pop	{r4, pc}
 80215de:	bf00      	nop

080215e0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80215e0:	b510      	push	{r4, lr}
 80215e2:	4604      	mov	r4, r0
 80215e4:	2104      	movs	r1, #4
 80215e6:	f007 ffdc 	bl	80295a2 <_ZdlPvj>
 80215ea:	4620      	mov	r0, r4
 80215ec:	bd10      	pop	{r4, pc}
 80215ee:	bf00      	nop

080215f0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80215f0:	b510      	push	{r4, lr}
 80215f2:	4604      	mov	r4, r0
 80215f4:	2104      	movs	r1, #4
 80215f6:	f007 ffd4 	bl	80295a2 <_ZdlPvj>
 80215fa:	4620      	mov	r0, r4
 80215fc:	bd10      	pop	{r4, pc}
 80215fe:	bf00      	nop

08021600 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021600:	b510      	push	{r4, lr}
 8021602:	4604      	mov	r4, r0
 8021604:	2104      	movs	r1, #4
 8021606:	f007 ffcc 	bl	80295a2 <_ZdlPvj>
 802160a:	4620      	mov	r0, r4
 802160c:	bd10      	pop	{r4, pc}
 802160e:	bf00      	nop

08021610 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021610:	b510      	push	{r4, lr}
 8021612:	4604      	mov	r4, r0
 8021614:	2104      	movs	r1, #4
 8021616:	f007 ffc4 	bl	80295a2 <_ZdlPvj>
 802161a:	4620      	mov	r0, r4
 802161c:	bd10      	pop	{r4, pc}
 802161e:	bf00      	nop

08021620 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8021620:	b510      	push	{r4, lr}
 8021622:	4604      	mov	r4, r0
 8021624:	2104      	movs	r1, #4
 8021626:	f007 ffbc 	bl	80295a2 <_ZdlPvj>
 802162a:	4620      	mov	r0, r4
 802162c:	bd10      	pop	{r4, pc}
 802162e:	bf00      	nop

08021630 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021630:	b510      	push	{r4, lr}
 8021632:	4604      	mov	r4, r0
 8021634:	2104      	movs	r1, #4
 8021636:	f007 ffb4 	bl	80295a2 <_ZdlPvj>
 802163a:	4620      	mov	r0, r4
 802163c:	bd10      	pop	{r4, pc}
 802163e:	bf00      	nop

08021640 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021640:	b510      	push	{r4, lr}
 8021642:	4604      	mov	r4, r0
 8021644:	2104      	movs	r1, #4
 8021646:	f007 ffac 	bl	80295a2 <_ZdlPvj>
 802164a:	4620      	mov	r0, r4
 802164c:	bd10      	pop	{r4, pc}
 802164e:	bf00      	nop

08021650 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021650:	b510      	push	{r4, lr}
 8021652:	4604      	mov	r4, r0
 8021654:	2104      	movs	r1, #4
 8021656:	f007 ffa4 	bl	80295a2 <_ZdlPvj>
 802165a:	4620      	mov	r0, r4
 802165c:	bd10      	pop	{r4, pc}
 802165e:	bf00      	nop

08021660 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021660:	b510      	push	{r4, lr}
 8021662:	4604      	mov	r4, r0
 8021664:	2104      	movs	r1, #4
 8021666:	f007 ff9c 	bl	80295a2 <_ZdlPvj>
 802166a:	4620      	mov	r0, r4
 802166c:	bd10      	pop	{r4, pc}
 802166e:	bf00      	nop

08021670 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021670:	b510      	push	{r4, lr}
 8021672:	4604      	mov	r4, r0
 8021674:	2104      	movs	r1, #4
 8021676:	f007 ff94 	bl	80295a2 <_ZdlPvj>
 802167a:	4620      	mov	r0, r4
 802167c:	bd10      	pop	{r4, pc}
 802167e:	bf00      	nop

08021680 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8021680:	b510      	push	{r4, lr}
 8021682:	4604      	mov	r4, r0
 8021684:	2104      	movs	r1, #4
 8021686:	f007 ff8c 	bl	80295a2 <_ZdlPvj>
 802168a:	4620      	mov	r0, r4
 802168c:	bd10      	pop	{r4, pc}
 802168e:	bf00      	nop

08021690 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>:
 8021690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021694:	461c      	mov	r4, r3
 8021696:	4617      	mov	r7, r2
 8021698:	b086      	sub	sp, #24
 802169a:	4606      	mov	r6, r0
 802169c:	4688      	mov	r8, r1
 802169e:	6818      	ldr	r0, [r3, #0]
 80216a0:	6859      	ldr	r1, [r3, #4]
 80216a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80216a4:	ad02      	add	r5, sp, #8
 80216a6:	c503      	stmia	r5!, {r0, r1}
 80216a8:	6818      	ldr	r0, [r3, #0]
 80216aa:	6859      	ldr	r1, [r3, #4]
 80216ac:	ad04      	add	r5, sp, #16
 80216ae:	c503      	stmia	r5!, {r0, r1}
 80216b0:	a802      	add	r0, sp, #8
 80216b2:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
 80216b6:	f7f7 fad9 	bl	8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80216ba:	4621      	mov	r1, r4
 80216bc:	a804      	add	r0, sp, #16
 80216be:	f7f7 fafd 	bl	8018cbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80216c2:	2f01      	cmp	r7, #1
 80216c4:	d05c      	beq.n	8021780 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf0>
 80216c6:	d357      	bcc.n	8021778 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xe8>
 80216c8:	2f02      	cmp	r7, #2
 80216ca:	d163      	bne.n	8021794 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x104>
 80216cc:	f04f 0910 	mov.w	r9, #16
 80216d0:	2504      	movs	r5, #4
 80216d2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80216d6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80216da:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80216de:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80216e2:	fb14 2403 	smlabb	r4, r4, r3, r2
 80216e6:	4f2e      	ldr	r7, [pc, #184]	; (80217a0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x110>)
 80216e8:	440a      	add	r2, r1
 80216ea:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80216ee:	6838      	ldr	r0, [r7, #0]
 80216f0:	440b      	add	r3, r1
 80216f2:	fb05 8404 	mla	r4, r5, r4, r8
 80216f6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80216fa:	f8ad 3012 	strh.w	r3, [sp, #18]
 80216fe:	2800      	cmp	r0, #0
 8021700:	d042      	beq.n	8021788 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf8>
 8021702:	f7fd f819 	bl	801e738 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8021706:	6833      	ldr	r3, [r6, #0]
 8021708:	4630      	mov	r0, r6
 802170a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802170c:	4798      	blx	r3
 802170e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8021712:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8021716:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 802171a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 802171e:	f7fa fd15 	bl	801c14c <nema_set_clip>
 8021722:	2200      	movs	r2, #0
 8021724:	2600      	movs	r6, #0
 8021726:	4611      	mov	r1, r2
 8021728:	4653      	mov	r3, sl
 802172a:	4610      	mov	r0, r2
 802172c:	f7fa fd42 	bl	801c1b4 <nema_rgba>
 8021730:	f7fc ff1a 	bl	801e568 <nema_set_const_color>
 8021734:	f04f 33ff 	mov.w	r3, #4294967295
 8021738:	2201      	movs	r2, #1
 802173a:	2100      	movs	r1, #0
 802173c:	4819      	ldr	r0, [pc, #100]	; (80217a4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x114>)
 802173e:	f7fc fb4d 	bl	801dddc <nema_set_blend>
 8021742:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021746:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 802174a:	fb05 f503 	mul.w	r5, r5, r3
 802174e:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8021752:	464b      	mov	r3, r9
 8021754:	4620      	mov	r0, r4
 8021756:	e9cd 5600 	strd	r5, r6, [sp]
 802175a:	f7fa fd33 	bl	801c1c4 <nema_bind_src_tex>
 802175e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8021762:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8021766:	f7fa fe6d 	bl	801c444 <nema_blit>
 802176a:	6838      	ldr	r0, [r7, #0]
 802176c:	b160      	cbz	r0, 8021788 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf8>
 802176e:	f7fd f803 	bl	801e778 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8021772:	b006      	add	sp, #24
 8021774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021778:	f04f 0904 	mov.w	r9, #4
 802177c:	2502      	movs	r5, #2
 802177e:	e7a8      	b.n	80216d2 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x42>
 8021780:	f04f 0939 	mov.w	r9, #57	; 0x39
 8021784:	2503      	movs	r5, #3
 8021786:	e7a4      	b.n	80216d2 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x42>
 8021788:	4b07      	ldr	r3, [pc, #28]	; (80217a8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x118>)
 802178a:	4a08      	ldr	r2, [pc, #32]	; (80217ac <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x11c>)
 802178c:	217c      	movs	r1, #124	; 0x7c
 802178e:	4808      	ldr	r0, [pc, #32]	; (80217b0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x120>)
 8021790:	f007 ff34 	bl	80295fc <__assert_func>
 8021794:	4b07      	ldr	r3, [pc, #28]	; (80217b4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x124>)
 8021796:	4a08      	ldr	r2, [pc, #32]	; (80217b8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x128>)
 8021798:	21c1      	movs	r1, #193	; 0xc1
 802179a:	4808      	ldr	r0, [pc, #32]	; (80217bc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x12c>)
 802179c:	f007 ff2e 	bl	80295fc <__assert_func>
 80217a0:	20198728 	.word	0x20198728
 80217a4:	08000504 	.word	0x08000504
 80217a8:	0802c4ac 	.word	0x0802c4ac
 80217ac:	0802ccb4 	.word	0x0802ccb4
 80217b0:	0802c4d4 	.word	0x0802c4d4
 80217b4:	0802c8f8 	.word	0x0802c8f8
 80217b8:	0802d650 	.word	0x0802d650
 80217bc:	0802c550 	.word	0x0802c550

080217c0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb>:
 80217c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80217c4:	4c1e      	ldr	r4, [pc, #120]	; (8021840 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x80>)
 80217c6:	6806      	ldr	r6, [r0, #0]
 80217c8:	6824      	ldr	r4, [r4, #0]
 80217ca:	4605      	mov	r5, r0
 80217cc:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
 80217d0:	b087      	sub	sp, #28
 80217d2:	6937      	ldr	r7, [r6, #16]
 80217d4:	4690      	mov	r8, r2
 80217d6:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 80217da:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 80217de:	b170      	cbz	r0, 80217fe <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x3e>
 80217e0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80217e2:	b160      	cbz	r0, 80217fe <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x3e>
 80217e4:	6804      	ldr	r4, [r0, #0]
 80217e6:	4a17      	ldr	r2, [pc, #92]	; (8021844 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x84>)
 80217e8:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80217ea:	4294      	cmp	r4, r2
 80217ec:	d10d      	bne.n	802180a <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x4a>
 80217ee:	4c16      	ldr	r4, [pc, #88]	; (8021848 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x88>)
 80217f0:	7a02      	ldrb	r2, [r0, #8]
 80217f2:	42a7      	cmp	r7, r4
 80217f4:	d112      	bne.n	802181c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x5c>
 80217f6:	b9d6      	cbnz	r6, 802182e <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x6e>
 80217f8:	b007      	add	sp, #28
 80217fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80217fe:	68a0      	ldr	r0, [r4, #8]
 8021800:	4a10      	ldr	r2, [pc, #64]	; (8021844 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x84>)
 8021802:	6804      	ldr	r4, [r0, #0]
 8021804:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8021806:	4294      	cmp	r4, r2
 8021808:	d0f1      	beq.n	80217ee <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x2e>
 802180a:	e9cd 1304 	strd	r1, r3, [sp, #16]
 802180e:	47a0      	blx	r4
 8021810:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
 8021814:	4c0c      	ldr	r4, [pc, #48]	; (8021848 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x88>)
 8021816:	4602      	mov	r2, r0
 8021818:	42a7      	cmp	r7, r4
 802181a:	d0ec      	beq.n	80217f6 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x36>
 802181c:	9300      	str	r3, [sp, #0]
 802181e:	e9cd 6901 	strd	r6, r9, [sp, #4]
 8021822:	4643      	mov	r3, r8
 8021824:	4628      	mov	r0, r5
 8021826:	47b8      	blx	r7
 8021828:	b007      	add	sp, #28
 802182a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802182e:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
 8021832:	4628      	mov	r0, r5
 8021834:	4643      	mov	r3, r8
 8021836:	b007      	add	sp, #28
 8021838:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802183c:	f7ff bf28 	b.w	8021690 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>
 8021840:	201984f8 	.word	0x201984f8
 8021844:	0801e81d 	.word	0x0801e81d
 8021848:	0802184d 	.word	0x0802184d

0802184c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 802184c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021850:	b087      	sub	sp, #28
 8021852:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8021856:	b915      	cbnz	r5, 802185e <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x12>
 8021858:	b007      	add	sp, #28
 802185a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802185e:	461c      	mov	r4, r3
 8021860:	4617      	mov	r7, r2
 8021862:	4688      	mov	r8, r1
 8021864:	4606      	mov	r6, r0
 8021866:	6859      	ldr	r1, [r3, #4]
 8021868:	6818      	ldr	r0, [r3, #0]
 802186a:	ab02      	add	r3, sp, #8
 802186c:	c303      	stmia	r3!, {r0, r1}
 802186e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021870:	6818      	ldr	r0, [r3, #0]
 8021872:	6859      	ldr	r1, [r3, #4]
 8021874:	ab04      	add	r3, sp, #16
 8021876:	c303      	stmia	r3!, {r0, r1}
 8021878:	a802      	add	r0, sp, #8
 802187a:	f7f7 f9f7 	bl	8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802187e:	4621      	mov	r1, r4
 8021880:	a804      	add	r0, sp, #16
 8021882:	f7f7 fa1b 	bl	8018cbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021886:	2f01      	cmp	r7, #1
 8021888:	d05c      	beq.n	8021944 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0xf8>
 802188a:	d357      	bcc.n	802193c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0xf0>
 802188c:	2f02      	cmp	r7, #2
 802188e:	d163      	bne.n	8021958 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x10c>
 8021890:	f04f 0910 	mov.w	r9, #16
 8021894:	2404      	movs	r4, #4
 8021896:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802189a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802189e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80218a2:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80218a6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80218aa:	4f2e      	ldr	r7, [pc, #184]	; (8021964 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x118>)
 80218ac:	fb04 8801 	mla	r8, r4, r1, r8
 80218b0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80218b4:	4402      	add	r2, r0
 80218b6:	6838      	ldr	r0, [r7, #0]
 80218b8:	440b      	add	r3, r1
 80218ba:	f8ad 2010 	strh.w	r2, [sp, #16]
 80218be:	f8ad 3012 	strh.w	r3, [sp, #18]
 80218c2:	2800      	cmp	r0, #0
 80218c4:	d042      	beq.n	802194c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x100>
 80218c6:	f7fc ff37 	bl	801e738 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 80218ca:	6833      	ldr	r3, [r6, #0]
 80218cc:	4630      	mov	r0, r6
 80218ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80218d0:	4798      	blx	r3
 80218d2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80218d6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80218da:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80218de:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80218e2:	f7fa fc33 	bl	801c14c <nema_set_clip>
 80218e6:	2200      	movs	r2, #0
 80218e8:	462b      	mov	r3, r5
 80218ea:	2500      	movs	r5, #0
 80218ec:	4611      	mov	r1, r2
 80218ee:	4610      	mov	r0, r2
 80218f0:	f7fa fc60 	bl	801c1b4 <nema_rgba>
 80218f4:	f7fc fe38 	bl	801e568 <nema_set_const_color>
 80218f8:	f04f 33ff 	mov.w	r3, #4294967295
 80218fc:	2201      	movs	r2, #1
 80218fe:	2100      	movs	r1, #0
 8021900:	4819      	ldr	r0, [pc, #100]	; (8021968 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x11c>)
 8021902:	f7fc fa6b 	bl	801dddc <nema_set_blend>
 8021906:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802190a:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 802190e:	fb04 f403 	mul.w	r4, r4, r3
 8021912:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8021916:	464b      	mov	r3, r9
 8021918:	4640      	mov	r0, r8
 802191a:	e9cd 4500 	strd	r4, r5, [sp]
 802191e:	f7fa fc51 	bl	801c1c4 <nema_bind_src_tex>
 8021922:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8021926:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 802192a:	f7fa fd8b 	bl	801c444 <nema_blit>
 802192e:	6838      	ldr	r0, [r7, #0]
 8021930:	b160      	cbz	r0, 802194c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x100>
 8021932:	f7fc ff21 	bl	801e778 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8021936:	b007      	add	sp, #28
 8021938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802193c:	f04f 0904 	mov.w	r9, #4
 8021940:	2402      	movs	r4, #2
 8021942:	e7a8      	b.n	8021896 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4a>
 8021944:	f04f 0939 	mov.w	r9, #57	; 0x39
 8021948:	2403      	movs	r4, #3
 802194a:	e7a4      	b.n	8021896 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4a>
 802194c:	4b07      	ldr	r3, [pc, #28]	; (802196c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x120>)
 802194e:	4a08      	ldr	r2, [pc, #32]	; (8021970 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x124>)
 8021950:	217c      	movs	r1, #124	; 0x7c
 8021952:	4808      	ldr	r0, [pc, #32]	; (8021974 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x128>)
 8021954:	f007 fe52 	bl	80295fc <__assert_func>
 8021958:	4b07      	ldr	r3, [pc, #28]	; (8021978 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x12c>)
 802195a:	4a08      	ldr	r2, [pc, #32]	; (802197c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x130>)
 802195c:	21c1      	movs	r1, #193	; 0xc1
 802195e:	4808      	ldr	r0, [pc, #32]	; (8021980 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x134>)
 8021960:	f007 fe4c 	bl	80295fc <__assert_func>
 8021964:	20198728 	.word	0x20198728
 8021968:	08000504 	.word	0x08000504
 802196c:	0802c4ac 	.word	0x0802c4ac
 8021970:	0802ccb4 	.word	0x0802ccb4
 8021974:	0802c4d4 	.word	0x0802c4d4
 8021978:	0802c8f8 	.word	0x0802c8f8
 802197c:	0802d650 	.word	0x0802d650
 8021980:	0802c550 	.word	0x0802c550

08021984 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8021984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021988:	4682      	mov	sl, r0
 802198a:	4851      	ldr	r0, [pc, #324]	; (8021ad0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x14c>)
 802198c:	b08f      	sub	sp, #60	; 0x3c
 802198e:	6800      	ldr	r0, [r0, #0]
 8021990:	9104      	str	r1, [sp, #16]
 8021992:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8021996:	f9bd 0064 	ldrsh.w	r0, [sp, #100]	; 0x64
 802199a:	2902      	cmp	r1, #2
 802199c:	9003      	str	r0, [sp, #12]
 802199e:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
 80219a2:	9006      	str	r0, [sp, #24]
 80219a4:	f000 81cd 	beq.w	8021d42 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3be>
 80219a8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80219aa:	2900      	cmp	r1, #0
 80219ac:	f000 81c3 	beq.w	8021d36 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3b2>
 80219b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80219b4:	8899      	ldrh	r1, [r3, #4]
 80219b6:	b2ae      	uxth	r6, r5
 80219b8:	4431      	add	r1, r6
 80219ba:	b289      	uxth	r1, r1
 80219bc:	fa0f fc81 	sxth.w	ip, r1
 80219c0:	4565      	cmp	r5, ip
 80219c2:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 80219c6:	da28      	bge.n	8021a1a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 80219c8:	9803      	ldr	r0, [sp, #12]
 80219ca:	1830      	adds	r0, r6, r0
 80219cc:	b280      	uxth	r0, r0
 80219ce:	9005      	str	r0, [sp, #20]
 80219d0:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 80219d4:	4575      	cmp	r5, lr
 80219d6:	da20      	bge.n	8021a1a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 80219d8:	f8b3 8006 	ldrh.w	r8, [r3, #6]
 80219dc:	b2a7      	uxth	r7, r4
 80219de:	4638      	mov	r0, r7
 80219e0:	4447      	add	r7, r8
 80219e2:	b2bf      	uxth	r7, r7
 80219e4:	fa0f f987 	sxth.w	r9, r7
 80219e8:	454c      	cmp	r4, r9
 80219ea:	da16      	bge.n	8021a1a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 80219ec:	4680      	mov	r8, r0
 80219ee:	9007      	str	r0, [sp, #28]
 80219f0:	9806      	ldr	r0, [sp, #24]
 80219f2:	4480      	add	r8, r0
 80219f4:	fa1f f888 	uxth.w	r8, r8
 80219f8:	fa0f fb88 	sxth.w	fp, r8
 80219fc:	455c      	cmp	r4, fp
 80219fe:	da0c      	bge.n	8021a1a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 8021a00:	9805      	ldr	r0, [sp, #20]
 8021a02:	45d9      	cmp	r9, fp
 8021a04:	bfc8      	it	gt
 8021a06:	4647      	movgt	r7, r8
 8021a08:	45f4      	cmp	ip, lr
 8021a0a:	bfc8      	it	gt
 8021a0c:	4601      	movgt	r1, r0
 8021a0e:	9807      	ldr	r0, [sp, #28]
 8021a10:	1b89      	subs	r1, r1, r6
 8021a12:	1a3f      	subs	r7, r7, r0
 8021a14:	b209      	sxth	r1, r1
 8021a16:	b23f      	sxth	r7, r7
 8021a18:	e005      	b.n	8021a26 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xa2>
 8021a1a:	2700      	movs	r7, #0
 8021a1c:	463c      	mov	r4, r7
 8021a1e:	4639      	mov	r1, r7
 8021a20:	463e      	mov	r6, r7
 8021a22:	463d      	mov	r5, r7
 8021a24:	9707      	str	r7, [sp, #28]
 8021a26:	f9b2 b000 	ldrsh.w	fp, [r2]
 8021a2a:	8890      	ldrh	r0, [r2, #4]
 8021a2c:	4458      	add	r0, fp
 8021a2e:	b280      	uxth	r0, r0
 8021a30:	fa0f fc80 	sxth.w	ip, r0
 8021a34:	45ac      	cmp	ip, r5
 8021a36:	dd51      	ble.n	8021adc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 8021a38:	4431      	add	r1, r6
 8021a3a:	b289      	uxth	r1, r1
 8021a3c:	fa0f fe81 	sxth.w	lr, r1
 8021a40:	45f3      	cmp	fp, lr
 8021a42:	da4b      	bge.n	8021adc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 8021a44:	f9b2 8002 	ldrsh.w	r8, [r2, #2]
 8021a48:	88d6      	ldrh	r6, [r2, #6]
 8021a4a:	4446      	add	r6, r8
 8021a4c:	b2b6      	uxth	r6, r6
 8021a4e:	fa0f f986 	sxth.w	r9, r6
 8021a52:	454c      	cmp	r4, r9
 8021a54:	da42      	bge.n	8021adc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 8021a56:	9a07      	ldr	r2, [sp, #28]
 8021a58:	443a      	add	r2, r7
 8021a5a:	b297      	uxth	r7, r2
 8021a5c:	b23a      	sxth	r2, r7
 8021a5e:	4590      	cmp	r8, r2
 8021a60:	9205      	str	r2, [sp, #20]
 8021a62:	da3b      	bge.n	8021adc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 8021a64:	45ab      	cmp	fp, r5
 8021a66:	bfb8      	it	lt
 8021a68:	46ab      	movlt	fp, r5
 8021a6a:	4544      	cmp	r4, r8
 8021a6c:	bfb8      	it	lt
 8021a6e:	4644      	movlt	r4, r8
 8021a70:	45f4      	cmp	ip, lr
 8021a72:	bfc8      	it	gt
 8021a74:	4608      	movgt	r0, r1
 8021a76:	9905      	ldr	r1, [sp, #20]
 8021a78:	465a      	mov	r2, fp
 8021a7a:	4589      	cmp	r9, r1
 8021a7c:	bfc8      	it	gt
 8021a7e:	463e      	movgt	r6, r7
 8021a80:	f8df c054 	ldr.w	ip, [pc, #84]	; 8021ad8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x154>
 8021a84:	4f13      	ldr	r7, [pc, #76]	; (8021ad4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x150>)
 8021a86:	fa1f f58b 	uxth.w	r5, fp
 8021a8a:	1b36      	subs	r6, r6, r4
 8021a8c:	1b41      	subs	r1, r0, r5
 8021a8e:	f8bc c000 	ldrh.w	ip, [ip]
 8021a92:	883f      	ldrh	r7, [r7, #0]
 8021a94:	fa0f fb86 	sxth.w	fp, r6
 8021a98:	fa0f f981 	sxth.w	r9, r1
 8021a9c:	2a00      	cmp	r2, #0
 8021a9e:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 8021aa2:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021aa6:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
 8021aaa:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 8021aae:	fa0f f68c 	sxth.w	r6, ip
 8021ab2:	b239      	sxth	r1, r7
 8021ab4:	f280 812b 	bge.w	8021d0e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x38a>
 8021ab8:	f04f 0e00 	mov.w	lr, #0
 8021abc:	fa0f f980 	sxth.w	r9, r0
 8021ac0:	4675      	mov	r5, lr
 8021ac2:	4672      	mov	r2, lr
 8021ac4:	4648      	mov	r0, r9
 8021ac6:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 8021aca:	f8ad e020 	strh.w	lr, [sp, #32]
 8021ace:	e015      	b.n	8021afc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 8021ad0:	201984f8 	.word	0x201984f8
 8021ad4:	201984ee 	.word	0x201984ee
 8021ad8:	201984ec 	.word	0x201984ec
 8021adc:	2200      	movs	r2, #0
 8021ade:	48a3      	ldr	r0, [pc, #652]	; (8021d6c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3e8>)
 8021ae0:	4615      	mov	r5, r2
 8021ae2:	f8b0 c000 	ldrh.w	ip, [r0]
 8021ae6:	4693      	mov	fp, r2
 8021ae8:	4614      	mov	r4, r2
 8021aea:	4610      	mov	r0, r2
 8021aec:	4691      	mov	r9, r2
 8021aee:	49a0      	ldr	r1, [pc, #640]	; (8021d70 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3ec>)
 8021af0:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8021af4:	880f      	ldrh	r7, [r1, #0]
 8021af6:	fa0f f68c 	sxth.w	r6, ip
 8021afa:	b239      	sxth	r1, r7
 8021afc:	1ab2      	subs	r2, r6, r2
 8021afe:	4282      	cmp	r2, r0
 8021b00:	da05      	bge.n	8021b0e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x18a>
 8021b02:	ebac 0c05 	sub.w	ip, ip, r5
 8021b06:	fa0f f98c 	sxth.w	r9, ip
 8021b0a:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 8021b0e:	2c00      	cmp	r4, #0
 8021b10:	f2c0 80e8 	blt.w	8021ce4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x360>
 8021b14:	4622      	mov	r2, r4
 8021b16:	1a89      	subs	r1, r1, r2
 8021b18:	458b      	cmp	fp, r1
 8021b1a:	dd04      	ble.n	8021b26 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a2>
 8021b1c:	1b3f      	subs	r7, r7, r4
 8021b1e:	fa0f fb87 	sxth.w	fp, r7
 8021b22:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 8021b26:	f1b9 0f00 	cmp.w	r9, #0
 8021b2a:	f340 80d2 	ble.w	8021cd2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34e>
 8021b2e:	f1bb 0f00 	cmp.w	fp, #0
 8021b32:	f340 80ce 	ble.w	8021cd2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34e>
 8021b36:	2200      	movs	r2, #0
 8021b38:	8819      	ldrh	r1, [r3, #0]
 8021b3a:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 8021b3e:	9b03      	ldr	r3, [sp, #12]
 8021b40:	1a6d      	subs	r5, r5, r1
 8021b42:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8021b46:	eba4 0408 	sub.w	r4, r4, r8
 8021b4a:	9b06      	ldr	r3, [sp, #24]
 8021b4c:	a90c      	add	r1, sp, #48	; 0x30
 8021b4e:	a80a      	add	r0, sp, #40	; 0x28
 8021b50:	b22d      	sxth	r5, r5
 8021b52:	b224      	sxth	r4, r4
 8021b54:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8021b58:	920c      	str	r2, [sp, #48]	; 0x30
 8021b5a:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8021b5e:	f8ad b02e 	strh.w	fp, [sp, #46]	; 0x2e
 8021b62:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8021b66:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
 8021b6a:	f7f7 f8a7 	bl	8018cbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021b6e:	a808      	add	r0, sp, #32
 8021b70:	f7f7 f87c 	bl	8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021b74:	a80c      	add	r0, sp, #48	; 0x30
 8021b76:	f7f7 f879 	bl	8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021b7a:	4b7e      	ldr	r3, [pc, #504]	; (8021d74 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f0>)
 8021b7c:	681b      	ldr	r3, [r3, #0]
 8021b7e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8021b82:	2a00      	cmp	r2, #0
 8021b84:	f040 80ba 	bne.w	8021cfc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x378>
 8021b88:	6898      	ldr	r0, [r3, #8]
 8021b8a:	6803      	ldr	r3, [r0, #0]
 8021b8c:	4a7a      	ldr	r2, [pc, #488]	; (8021d78 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f4>)
 8021b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021b90:	4293      	cmp	r3, r2
 8021b92:	f040 80c4 	bne.w	8021d1e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x39a>
 8021b96:	7a00      	ldrb	r0, [r0, #8]
 8021b98:	2801      	cmp	r0, #1
 8021b9a:	f000 80ba 	beq.w	8021d12 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x38e>
 8021b9e:	f0c0 80b2 	bcc.w	8021d06 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x382>
 8021ba2:	2802      	cmp	r0, #2
 8021ba4:	f040 80da 	bne.w	8021d5c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3d8>
 8021ba8:	2310      	movs	r3, #16
 8021baa:	2604      	movs	r6, #4
 8021bac:	9305      	str	r3, [sp, #20]
 8021bae:	9b04      	ldr	r3, [sp, #16]
 8021bb0:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8021bb4:	681b      	ldr	r3, [r3, #0]
 8021bb6:	fb06 f101 	mul.w	r1, r6, r1
 8021bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021bbc:	4a6f      	ldr	r2, [pc, #444]	; (8021d7c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f8>)
 8021bbe:	9103      	str	r1, [sp, #12]
 8021bc0:	4293      	cmp	r3, r2
 8021bc2:	f040 80ae 	bne.w	8021d22 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x39e>
 8021bc6:	4b6e      	ldr	r3, [pc, #440]	; (8021d80 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3fc>)
 8021bc8:	881f      	ldrh	r7, [r3, #0]
 8021bca:	2f00      	cmp	r7, #0
 8021bcc:	f000 80bf 	beq.w	8021d4e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3ca>
 8021bd0:	9b04      	ldr	r3, [sp, #16]
 8021bd2:	7a1b      	ldrb	r3, [r3, #8]
 8021bd4:	2b02      	cmp	r3, #2
 8021bd6:	f000 80a0 	beq.w	8021d1a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x396>
 8021bda:	2b01      	cmp	r3, #1
 8021bdc:	bf14      	ite	ne
 8021bde:	2302      	movne	r3, #2
 8021be0:	2303      	moveq	r3, #3
 8021be2:	fb17 f703 	smulbb	r7, r7, r3
 8021be6:	b2bf      	uxth	r7, r7
 8021be8:	4a62      	ldr	r2, [pc, #392]	; (8021d74 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f0>)
 8021bea:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8021bee:	6810      	ldr	r0, [r2, #0]
 8021bf0:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 8021bf4:	9a03      	ldr	r2, [sp, #12]
 8021bf6:	fb02 3808 	mla	r8, r2, r8, r3
 8021bfa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021bfc:	6803      	ldr	r3, [r0, #0]
 8021bfe:	4442      	add	r2, r8
 8021c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c02:	9204      	str	r2, [sp, #16]
 8021c04:	4798      	blx	r3
 8021c06:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8021c0a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8021c0e:	fb07 f202 	mul.w	r2, r7, r2
 8021c12:	fb06 2303 	mla	r3, r6, r3, r2
 8021c16:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8021db0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x42c>
 8021c1a:	18c3      	adds	r3, r0, r3
 8021c1c:	f8d8 2000 	ldr.w	r2, [r8]
 8021c20:	9306      	str	r3, [sp, #24]
 8021c22:	2a00      	cmp	r2, #0
 8021c24:	f000 8081 	beq.w	8021d2a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 8021c28:	2600      	movs	r6, #0
 8021c2a:	4610      	mov	r0, r2
 8021c2c:	f7fc fd84 	bl	801e738 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8021c30:	9b03      	ldr	r3, [sp, #12]
 8021c32:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8021c36:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 8021c3a:	9300      	str	r3, [sp, #0]
 8021c3c:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 8021c40:	f7fa fb38 	bl	801c2b4 <nema_bind_dst_tex>
 8021c44:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8021c48:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8021c4c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8021c50:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8021c54:	f7fa fa7a 	bl	801c14c <nema_set_clip>
 8021c58:	f04f 33ff 	mov.w	r3, #4294967295
 8021c5c:	2201      	movs	r2, #1
 8021c5e:	4631      	mov	r1, r6
 8021c60:	f240 5004 	movw	r0, #1284	; 0x504
 8021c64:	f7fc f8ba 	bl	801dddc <nema_set_blend>
 8021c68:	e9dd 3005 	ldrd	r3, r0, [sp, #20]
 8021c6c:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8021c70:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 8021c74:	9700      	str	r7, [sp, #0]
 8021c76:	9601      	str	r6, [sp, #4]
 8021c78:	f7fa faa4 	bl	801c1c4 <nema_bind_src_tex>
 8021c7c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8021c80:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8021c84:	f7fa fbde 	bl	801c444 <nema_blit>
 8021c88:	f8d8 0000 	ldr.w	r0, [r8]
 8021c8c:	2800      	cmp	r0, #0
 8021c8e:	d04c      	beq.n	8021d2a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 8021c90:	f7fc fd72 	bl	801e778 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8021c94:	f8d8 0000 	ldr.w	r0, [r8]
 8021c98:	2800      	cmp	r0, #0
 8021c9a:	d046      	beq.n	8021d2a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 8021c9c:	6803      	ldr	r3, [r0, #0]
 8021c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021ca0:	4798      	blx	r3
 8021ca2:	f8d8 0000 	ldr.w	r0, [r8]
 8021ca6:	2800      	cmp	r0, #0
 8021ca8:	d03f      	beq.n	8021d2a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 8021caa:	6803      	ldr	r3, [r0, #0]
 8021cac:	4637      	mov	r7, r6
 8021cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021cb0:	4798      	blx	r3
 8021cb2:	4650      	mov	r0, sl
 8021cb4:	f365 060f 	bfi	r6, r5, #0, #16
 8021cb8:	f369 070f 	bfi	r7, r9, #0, #16
 8021cbc:	f364 461f 	bfi	r6, r4, #16, #16
 8021cc0:	f36b 471f 	bfi	r7, fp, #16, #16
 8021cc4:	f8ca 6000 	str.w	r6, [sl]
 8021cc8:	f8ca 7004 	str.w	r7, [sl, #4]
 8021ccc:	b00f      	add	sp, #60	; 0x3c
 8021cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cd2:	2300      	movs	r3, #0
 8021cd4:	4650      	mov	r0, sl
 8021cd6:	f8ca 3000 	str.w	r3, [sl]
 8021cda:	f8ca 3004 	str.w	r3, [sl, #4]
 8021cde:	b00f      	add	sp, #60	; 0x3c
 8021ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ce4:	2000      	movs	r0, #0
 8021ce6:	eb0b 0604 	add.w	r6, fp, r4
 8021cea:	fa0f fb86 	sxth.w	fp, r6
 8021cee:	4604      	mov	r4, r0
 8021cf0:	4602      	mov	r2, r0
 8021cf2:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 8021cf6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8021cfa:	e70c      	b.n	8021b16 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x192>
 8021cfc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8021cfe:	2800      	cmp	r0, #0
 8021d00:	f47f af43 	bne.w	8021b8a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x206>
 8021d04:	e740      	b.n	8021b88 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x204>
 8021d06:	2304      	movs	r3, #4
 8021d08:	2602      	movs	r6, #2
 8021d0a:	9305      	str	r3, [sp, #20]
 8021d0c:	e74f      	b.n	8021bae <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22a>
 8021d0e:	4648      	mov	r0, r9
 8021d10:	e6f4      	b.n	8021afc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 8021d12:	2339      	movs	r3, #57	; 0x39
 8021d14:	2603      	movs	r6, #3
 8021d16:	9305      	str	r3, [sp, #20]
 8021d18:	e749      	b.n	8021bae <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22a>
 8021d1a:	2304      	movs	r3, #4
 8021d1c:	e761      	b.n	8021be2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x25e>
 8021d1e:	4798      	blx	r3
 8021d20:	e73a      	b.n	8021b98 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>
 8021d22:	9804      	ldr	r0, [sp, #16]
 8021d24:	4798      	blx	r3
 8021d26:	4607      	mov	r7, r0
 8021d28:	e75e      	b.n	8021be8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x264>
 8021d2a:	4b16      	ldr	r3, [pc, #88]	; (8021d84 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x400>)
 8021d2c:	4a16      	ldr	r2, [pc, #88]	; (8021d88 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x404>)
 8021d2e:	217c      	movs	r1, #124	; 0x7c
 8021d30:	4816      	ldr	r0, [pc, #88]	; (8021d8c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x408>)
 8021d32:	f007 fc63 	bl	80295fc <__assert_func>
 8021d36:	4b16      	ldr	r3, [pc, #88]	; (8021d90 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x40c>)
 8021d38:	4a16      	ldr	r2, [pc, #88]	; (8021d94 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 8021d3a:	21f1      	movs	r1, #241	; 0xf1
 8021d3c:	4816      	ldr	r0, [pc, #88]	; (8021d98 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 8021d3e:	f007 fc5d 	bl	80295fc <__assert_func>
 8021d42:	4b16      	ldr	r3, [pc, #88]	; (8021d9c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x418>)
 8021d44:	4a13      	ldr	r2, [pc, #76]	; (8021d94 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 8021d46:	21f0      	movs	r1, #240	; 0xf0
 8021d48:	4813      	ldr	r0, [pc, #76]	; (8021d98 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 8021d4a:	f007 fc57 	bl	80295fc <__assert_func>
 8021d4e:	4b14      	ldr	r3, [pc, #80]	; (8021da0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x41c>)
 8021d50:	4a14      	ldr	r2, [pc, #80]	; (8021da4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x420>)
 8021d52:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8021d56:	4814      	ldr	r0, [pc, #80]	; (8021da8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x424>)
 8021d58:	f007 fc50 	bl	80295fc <__assert_func>
 8021d5c:	4b13      	ldr	r3, [pc, #76]	; (8021dac <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x428>)
 8021d5e:	4a0d      	ldr	r2, [pc, #52]	; (8021d94 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 8021d60:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8021d64:	480c      	ldr	r0, [pc, #48]	; (8021d98 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 8021d66:	f007 fc49 	bl	80295fc <__assert_func>
 8021d6a:	bf00      	nop
 8021d6c:	201984ec 	.word	0x201984ec
 8021d70:	201984ee 	.word	0x201984ee
 8021d74:	201984f8 	.word	0x201984f8
 8021d78:	0801e81d 	.word	0x0801e81d
 8021d7c:	080203fd 	.word	0x080203fd
 8021d80:	201984f2 	.word	0x201984f2
 8021d84:	0802c4ac 	.word	0x0802c4ac
 8021d88:	0802ccb4 	.word	0x0802ccb4
 8021d8c:	0802c4d4 	.word	0x0802c4d4
 8021d90:	0802c7a8 	.word	0x0802c7a8
 8021d94:	0802d534 	.word	0x0802d534
 8021d98:	0802c550 	.word	0x0802c550
 8021d9c:	0802c6f4 	.word	0x0802c6f4
 8021da0:	0802ca24 	.word	0x0802ca24
 8021da4:	0802d7e0 	.word	0x0802d7e0
 8021da8:	0802ca68 	.word	0x0802ca68
 8021dac:	0802c7f8 	.word	0x0802c7f8
 8021db0:	20198728 	.word	0x20198728

08021db4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8021db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021db8:	b085      	sub	sp, #20
 8021dba:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8021dbe:	e9dd 950e 	ldrd	r9, r5, [sp, #56]	; 0x38
 8021dc2:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8021dc6:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 8021dca:	2e00      	cmp	r6, #0
 8021dcc:	d05b      	beq.n	8021e86 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 8021dce:	f9b5 e004 	ldrsh.w	lr, [r5, #4]
 8021dd2:	f1be 0f00 	cmp.w	lr, #0
 8021dd6:	dd56      	ble.n	8021e86 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 8021dd8:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8021ddc:	f1be 0f00 	cmp.w	lr, #0
 8021de0:	dd51      	ble.n	8021e86 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 8021de2:	f3c8 0b87 	ubfx	fp, r8, #2, #8
 8021de6:	f1bb 0f0b 	cmp.w	fp, #11
 8021dea:	f000 8165 	beq.w	80220b8 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x304>
 8021dee:	f1bb 0f0d 	cmp.w	fp, #13
 8021df2:	4684      	mov	ip, r0
 8021df4:	4614      	mov	r4, r2
 8021df6:	461f      	mov	r7, r3
 8021df8:	d03c      	beq.n	8021e74 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xc0>
 8021dfa:	f8df a368 	ldr.w	sl, [pc, #872]	; 8022164 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3b0>
 8021dfe:	f8da 0000 	ldr.w	r0, [sl]
 8021e02:	2800      	cmp	r0, #0
 8021e04:	f000 818d 	beq.w	8022122 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8021e08:	f8cd c00c 	str.w	ip, [sp, #12]
 8021e0c:	f7fc fc94 	bl	801e738 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8021e10:	9b03      	ldr	r3, [sp, #12]
 8021e12:	681a      	ldr	r2, [r3, #0]
 8021e14:	4618      	mov	r0, r3
 8021e16:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8021e18:	4798      	blx	r3
 8021e1a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8021e1e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8021e22:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8021e26:	f9b5 0000 	ldrsh.w	r0, [r5]
 8021e2a:	f7fa f98f 	bl	801c14c <nema_set_clip>
 8021e2e:	2200      	movs	r2, #0
 8021e30:	4633      	mov	r3, r6
 8021e32:	4611      	mov	r1, r2
 8021e34:	4610      	mov	r0, r2
 8021e36:	f7fa f9bd 	bl	801c1b4 <nema_rgba>
 8021e3a:	f7fc fb95 	bl	801e568 <nema_set_const_color>
 8021e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8021e42:	2201      	movs	r2, #1
 8021e44:	2100      	movs	r1, #0
 8021e46:	48bd      	ldr	r0, [pc, #756]	; (802213c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x388>)
 8021e48:	f7fb ffc8 	bl	801dddc <nema_set_blend>
 8021e4c:	f1bb 0f0d 	cmp.w	fp, #13
 8021e50:	f200 816d 	bhi.w	802212e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x37a>
 8021e54:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8021e58:	00c700d3 	.word	0x00c700d3
 8021e5c:	016b00dc 	.word	0x016b00dc
 8021e60:	016b016b 	.word	0x016b016b
 8021e64:	016b016b 	.word	0x016b016b
 8021e68:	016b016b 	.word	0x016b016b
 8021e6c:	016b016b 	.word	0x016b016b
 8021e70:	001a00b2 	.word	0x001a00b2
 8021e74:	685b      	ldr	r3, [r3, #4]
 8021e76:	b133      	cbz	r3, 8021e86 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 8021e78:	781b      	ldrb	r3, [r3, #0]
 8021e7a:	f1a3 0216 	sub.w	r2, r3, #22
 8021e7e:	2a01      	cmp	r2, #1
 8021e80:	d9bb      	bls.n	8021dfa <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x46>
 8021e82:	2b12      	cmp	r3, #18
 8021e84:	d0b9      	beq.n	8021dfa <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x46>
 8021e86:	b005      	add	sp, #20
 8021e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e8c:	f04f 36ff 	mov.w	r6, #4294967295
 8021e90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021e94:	687b      	ldr	r3, [r7, #4]
 8021e96:	6838      	ldr	r0, [r7, #0]
 8021e98:	781b      	ldrb	r3, [r3, #0]
 8021e9a:	f008 0501 	and.w	r5, r8, #1
 8021e9e:	e9cd 6500 	strd	r6, r5, [sp]
 8021ea2:	f7fa f98f 	bl	801c1c4 <nema_bind_src_tex>
 8021ea6:	2001      	movs	r0, #1
 8021ea8:	f7fa ffbc 	bl	801ce24 <nema_enable_tiling>
 8021eac:	2300      	movs	r3, #0
 8021eae:	461a      	mov	r2, r3
 8021eb0:	4619      	mov	r1, r3
 8021eb2:	4618      	mov	r0, r3
 8021eb4:	f7fa ffca 	bl	801ce4c <nema_enable_aa>
 8021eb8:	f9b9 3000 	ldrsh.w	r3, [r9]
 8021ebc:	edd4 7a00 	vldr	s15, [r4]
 8021ec0:	ee02 3a10 	vmov	s4, r3
 8021ec4:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 8021ec8:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8021ecc:	ee02 3a90 	vmov	s5, r3
 8021ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021ed4:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8022140 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8021ed8:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8021edc:	edd4 7a01 	vldr	s15, [r4, #4]
 8021ee0:	eeb0 0a42 	vmov.f32	s0, s4
 8021ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021ee8:	eea7 0a26 	vfma.f32	s0, s14, s13
 8021eec:	eef0 0a62 	vmov.f32	s1, s5
 8021ef0:	ed94 7a03 	vldr	s14, [r4, #12]
 8021ef4:	4b93      	ldr	r3, [pc, #588]	; (8022144 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x390>)
 8021ef6:	eee7 0aa6 	vfma.f32	s1, s15, s13
 8021efa:	781b      	ldrb	r3, [r3, #0]
 8021efc:	edd4 7a04 	vldr	s15, [r4, #16]
 8021f00:	2b01      	cmp	r3, #1
 8021f02:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021f06:	f000 808c 	beq.w	8022022 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x26e>
 8021f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021f12:	f240 80ea 	bls.w	80220ea <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8021f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f1a:	bf94      	ite	ls
 8021f1c:	2001      	movls	r0, #1
 8021f1e:	2002      	movhi	r0, #2
 8021f20:	edd4 7a05 	vldr	s15, [r4, #20]
 8021f24:	ed94 6a08 	vldr	s12, [r4, #32]
 8021f28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021f2c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8021f30:	edd4 7a06 	vldr	s15, [r4, #24]
 8021f34:	eddf 6a82 	vldr	s13, [pc, #520]	; 8022140 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8021f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f3c:	eeb0 1a42 	vmov.f32	s2, s4
 8021f40:	eef0 1a62 	vmov.f32	s3, s5
 8021f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f48:	eee7 1aa6 	vfma.f32	s3, s15, s13
 8021f4c:	eea7 1a26 	vfma.f32	s2, s14, s13
 8021f50:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8021f54:	f240 80c1 	bls.w	80220da <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x326>
 8021f58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f60:	bf94      	ite	ls
 8021f62:	2101      	movls	r1, #1
 8021f64:	2102      	movhi	r1, #2
 8021f66:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8021f6a:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8021f6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021f72:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8021f76:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8021f7a:	eddf 6a71 	vldr	s13, [pc, #452]	; 8022140 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8021f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f86:	eee7 2aa6 	vfma.f32	s5, s15, s13
 8021f8a:	eea7 2a26 	vfma.f32	s4, s14, s13
 8021f8e:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8021f92:	f240 809a 	bls.w	80220ca <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x316>
 8021f96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f9e:	bf94      	ite	ls
 8021fa0:	2201      	movls	r2, #1
 8021fa2:	2202      	movhi	r2, #2
 8021fa4:	f7fa fb44 	bl	801c630 <nema_blit_tri_fit>
 8021fa8:	f8da 0000 	ldr.w	r0, [sl]
 8021fac:	2800      	cmp	r0, #0
 8021fae:	f000 80b8 	beq.w	8022122 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8021fb2:	b005      	add	sp, #20
 8021fb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fb8:	f7fc bbde 	b.w	801e778 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8021fbc:	4a62      	ldr	r2, [pc, #392]	; (8022148 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x394>)
 8021fbe:	23ff      	movs	r3, #255	; 0xff
 8021fc0:	6810      	ldr	r0, [r2, #0]
 8021fc2:	f008 0501 	and.w	r5, r8, #1
 8021fc6:	b2c2      	uxtb	r2, r0
 8021fc8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8021fcc:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8021fd0:	f7fa f8f0 	bl	801c1b4 <nema_rgba>
 8021fd4:	f7fa f8ae 	bl	801c134 <nema_set_tex_color>
 8021fd8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021fdc:	6838      	ldr	r0, [r7, #0]
 8021fde:	2329      	movs	r3, #41	; 0x29
 8021fe0:	f04f 36ff 	mov.w	r6, #4294967295
 8021fe4:	e75b      	b.n	8021e9e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 8021fe6:	2339      	movs	r3, #57	; 0x39
 8021fe8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021fec:	f04f 0c03 	mov.w	ip, #3
 8021ff0:	6838      	ldr	r0, [r7, #0]
 8021ff2:	f008 0501 	and.w	r5, r8, #1
 8021ff6:	693e      	ldr	r6, [r7, #16]
 8021ff8:	fb06 f60c 	mul.w	r6, r6, ip
 8021ffc:	e74f      	b.n	8021e9e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 8021ffe:	f008 0501 	and.w	r5, r8, #1
 8022002:	6838      	ldr	r0, [r7, #0]
 8022004:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8022008:	2304      	movs	r3, #4
 802200a:	f04f 0c02 	mov.w	ip, #2
 802200e:	e7f2      	b.n	8021ff6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x242>
 8022010:	2310      	movs	r3, #16
 8022012:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8022016:	f04f 0c04 	mov.w	ip, #4
 802201a:	6838      	ldr	r0, [r7, #0]
 802201c:	f008 0501 	and.w	r5, r8, #1
 8022020:	e7e9      	b.n	8021ff6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x242>
 8022022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022026:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802202a:	d974      	bls.n	8022116 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x362>
 802202c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022030:	bf94      	ite	ls
 8022032:	2002      	movls	r0, #2
 8022034:	2003      	movhi	r0, #3
 8022036:	edd4 7a05 	vldr	s15, [r4, #20]
 802203a:	ed94 6a08 	vldr	s12, [r4, #32]
 802203e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8022042:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8022046:	edd4 7a06 	vldr	s15, [r4, #24]
 802204a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8022140 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 802204e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022052:	eeb0 1a42 	vmov.f32	s2, s4
 8022056:	eef0 1a62 	vmov.f32	s3, s5
 802205a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802205e:	eee7 1aa6 	vfma.f32	s3, s15, s13
 8022062:	eea7 1a26 	vfma.f32	s2, s14, s13
 8022066:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 802206a:	d94c      	bls.n	8022106 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x352>
 802206c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022074:	bf94      	ite	ls
 8022076:	2102      	movls	r1, #2
 8022078:	2103      	movhi	r1, #3
 802207a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 802207e:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8022082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8022086:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 802208a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 802208e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8022140 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8022092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802209a:	eee7 2aa6 	vfma.f32	s5, s15, s13
 802209e:	eea7 2a26 	vfma.f32	s4, s14, s13
 80220a2:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 80220a6:	d926      	bls.n	80220f6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80220a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80220ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220b0:	bf94      	ite	ls
 80220b2:	2202      	movls	r2, #2
 80220b4:	2203      	movhi	r2, #3
 80220b6:	e775      	b.n	8021fa4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 80220b8:	e9cd 6a11 	strd	r6, sl, [sp, #68]	; 0x44
 80220bc:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80220c0:	b005      	add	sp, #20
 80220c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220c6:	f7f6 b887 	b.w	80181d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 80220ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80220ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220d2:	bf94      	ite	ls
 80220d4:	2200      	movls	r2, #0
 80220d6:	2203      	movhi	r2, #3
 80220d8:	e764      	b.n	8021fa4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 80220da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80220de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220e2:	bf94      	ite	ls
 80220e4:	2100      	movls	r1, #0
 80220e6:	2103      	movhi	r1, #3
 80220e8:	e73d      	b.n	8021f66 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1b2>
 80220ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220ee:	bf94      	ite	ls
 80220f0:	2000      	movls	r0, #0
 80220f2:	2003      	movhi	r0, #3
 80220f4:	e714      	b.n	8021f20 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x16c>
 80220f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80220fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220fe:	bf94      	ite	ls
 8022100:	2201      	movls	r2, #1
 8022102:	2200      	movhi	r2, #0
 8022104:	e74e      	b.n	8021fa4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 8022106:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802210a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802210e:	bf94      	ite	ls
 8022110:	2101      	movls	r1, #1
 8022112:	2100      	movhi	r1, #0
 8022114:	e7b1      	b.n	802207a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c6>
 8022116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802211a:	bf94      	ite	ls
 802211c:	2001      	movls	r0, #1
 802211e:	2000      	movhi	r0, #0
 8022120:	e789      	b.n	8022036 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x282>
 8022122:	4b0a      	ldr	r3, [pc, #40]	; (802214c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x398>)
 8022124:	4a0a      	ldr	r2, [pc, #40]	; (8022150 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x39c>)
 8022126:	217c      	movs	r1, #124	; 0x7c
 8022128:	480a      	ldr	r0, [pc, #40]	; (8022154 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a0>)
 802212a:	f007 fa67 	bl	80295fc <__assert_func>
 802212e:	4b0a      	ldr	r3, [pc, #40]	; (8022158 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a4>)
 8022130:	4a0a      	ldr	r2, [pc, #40]	; (802215c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>)
 8022132:	f240 21d3 	movw	r1, #723	; 0x2d3
 8022136:	480a      	ldr	r0, [pc, #40]	; (8022160 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ac>)
 8022138:	f007 fa60 	bl	80295fc <__assert_func>
 802213c:	08000504 	.word	0x08000504
 8022140:	3d800000 	.word	0x3d800000
 8022144:	201984f0 	.word	0x201984f0
 8022148:	20198500 	.word	0x20198500
 802214c:	0802c4ac 	.word	0x0802c4ac
 8022150:	0802ccb4 	.word	0x0802ccb4
 8022154:	0802c4d4 	.word	0x0802c4d4
 8022158:	0802c3a4 	.word	0x0802c3a4
 802215c:	0802d058 	.word	0x0802d058
 8022160:	0802c550 	.word	0x0802c550
 8022164:	20198728 	.word	0x20198728

08022168 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8022168:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 802216c:	2700      	movs	r7, #0
 802216e:	4a2b      	ldr	r2, [pc, #172]	; (802221c <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xb4>)
 8022170:	4b2b      	ldr	r3, [pc, #172]	; (8022220 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xb8>)
 8022172:	4d2c      	ldr	r5, [pc, #176]	; (8022224 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xbc>)
 8022174:	8812      	ldrh	r2, [r2, #0]
 8022176:	881b      	ldrh	r3, [r3, #0]
 8022178:	b088      	sub	sp, #32
 802217a:	4604      	mov	r4, r0
 802217c:	6828      	ldr	r0, [r5, #0]
 802217e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8022182:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022186:	9706      	str	r7, [sp, #24]
 8022188:	6803      	ldr	r3, [r0, #0]
 802218a:	4689      	mov	r9, r1
 802218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802218e:	4798      	blx	r3
 8022190:	6823      	ldr	r3, [r4, #0]
 8022192:	4a25      	ldr	r2, [pc, #148]	; (8022228 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc0>)
 8022194:	68de      	ldr	r6, [r3, #12]
 8022196:	4601      	mov	r1, r0
 8022198:	4296      	cmp	r6, r2
 802219a:	d134      	bne.n	8022206 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x9e>
 802219c:	682a      	ldr	r2, [r5, #0]
 802219e:	691d      	ldr	r5, [r3, #16]
 80221a0:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 80221a4:	b9a3      	cbnz	r3, 80221d0 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x68>
 80221a6:	6890      	ldr	r0, [r2, #8]
 80221a8:	4a20      	ldr	r2, [pc, #128]	; (802222c <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc4>)
 80221aa:	6803      	ldr	r3, [r0, #0]
 80221ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80221ae:	4293      	cmp	r3, r2
 80221b0:	d116      	bne.n	80221e0 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x78>
 80221b2:	4b1f      	ldr	r3, [pc, #124]	; (8022230 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc8>)
 80221b4:	7a02      	ldrb	r2, [r0, #8]
 80221b6:	429d      	cmp	r5, r3
 80221b8:	d119      	bne.n	80221ee <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 80221ba:	23ff      	movs	r3, #255	; 0xff
 80221bc:	f8cd 9000 	str.w	r9, [sp]
 80221c0:	9301      	str	r3, [sp, #4]
 80221c2:	4620      	mov	r0, r4
 80221c4:	ab06      	add	r3, sp, #24
 80221c6:	f7ff fa63 	bl	8021690 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>
 80221ca:	b008      	add	sp, #32
 80221cc:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 80221d0:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80221d2:	2800      	cmp	r0, #0
 80221d4:	d0e7      	beq.n	80221a6 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x3e>
 80221d6:	6803      	ldr	r3, [r0, #0]
 80221d8:	4a14      	ldr	r2, [pc, #80]	; (802222c <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc4>)
 80221da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80221dc:	4293      	cmp	r3, r2
 80221de:	d0e8      	beq.n	80221b2 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x4a>
 80221e0:	9105      	str	r1, [sp, #20]
 80221e2:	4798      	blx	r3
 80221e4:	4b12      	ldr	r3, [pc, #72]	; (8022230 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc8>)
 80221e6:	4602      	mov	r2, r0
 80221e8:	429d      	cmp	r5, r3
 80221ea:	9905      	ldr	r1, [sp, #20]
 80221ec:	d0e5      	beq.n	80221ba <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x52>
 80221ee:	2600      	movs	r6, #0
 80221f0:	23ff      	movs	r3, #255	; 0xff
 80221f2:	f8cd 9000 	str.w	r9, [sp]
 80221f6:	e9cd 3601 	strd	r3, r6, [sp, #4]
 80221fa:	4620      	mov	r0, r4
 80221fc:	ab06      	add	r3, sp, #24
 80221fe:	47a8      	blx	r5
 8022200:	b008      	add	sp, #32
 8022202:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8022206:	22ff      	movs	r2, #255	; 0xff
 8022208:	9701      	str	r7, [sp, #4]
 802220a:	9200      	str	r2, [sp, #0]
 802220c:	464b      	mov	r3, r9
 802220e:	4620      	mov	r0, r4
 8022210:	aa06      	add	r2, sp, #24
 8022212:	47b0      	blx	r6
 8022214:	b008      	add	sp, #32
 8022216:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 802221a:	bf00      	nop
 802221c:	201984f2 	.word	0x201984f2
 8022220:	201984f4 	.word	0x201984f4
 8022224:	201984f8 	.word	0x201984f8
 8022228:	080217c1 	.word	0x080217c1
 802222c:	0801e81d 	.word	0x0801e81d
 8022230:	0802184d 	.word	0x0802184d

08022234 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8022234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022238:	4604      	mov	r4, r0
 802223a:	4865      	ldr	r0, [pc, #404]	; (80223d0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19c>)
 802223c:	460f      	mov	r7, r1
 802223e:	6800      	ldr	r0, [r0, #0]
 8022240:	b093      	sub	sp, #76	; 0x4c
 8022242:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8022246:	2902      	cmp	r1, #2
 8022248:	f000 81f2 	beq.w	8022630 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3fc>
 802224c:	f10d 0948 	add.w	r9, sp, #72	; 0x48
 8022250:	f829 3d1c 	strh.w	r3, [r9, #-28]!
 8022254:	4648      	mov	r0, r9
 8022256:	4615      	mov	r5, r2
 8022258:	f7f9 fbbc 	bl	801b9d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802225c:	6823      	ldr	r3, [r4, #0]
 802225e:	4a5d      	ldr	r2, [pc, #372]	; (80223d4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a0>)
 8022260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022262:	4680      	mov	r8, r0
 8022264:	4293      	cmp	r3, r2
 8022266:	f040 81b5 	bne.w	80225d4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3a0>
 802226a:	7a20      	ldrb	r0, [r4, #8]
 802226c:	4580      	cmp	r8, r0
 802226e:	f040 81d9 	bne.w	8022624 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3f0>
 8022272:	4648      	mov	r0, r9
 8022274:	f7f9 fb2a 	bl	801b8cc <_ZNK8touchgfx6Bitmap7getDataEv>
 8022278:	4683      	mov	fp, r0
 802227a:	2800      	cmp	r0, #0
 802227c:	f000 81cc 	beq.w	8022618 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3e4>
 8022280:	6823      	ldr	r3, [r4, #0]
 8022282:	4648      	mov	r0, r9
 8022284:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8022288:	f7f9 fab8 	bl	801b7fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 802228c:	9005      	str	r0, [sp, #20]
 802228e:	4648      	mov	r0, r9
 8022290:	f7f9 fae8 	bl	801b864 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022294:	4b50      	ldr	r3, [pc, #320]	; (80223d8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a4>)
 8022296:	9006      	str	r0, [sp, #24]
 8022298:	4598      	cmp	r8, r3
 802229a:	f040 818e 	bne.w	80225ba <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x386>
 802229e:	4b4c      	ldr	r3, [pc, #304]	; (80223d0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19c>)
 80222a0:	681b      	ldr	r3, [r3, #0]
 80222a2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80222a6:	2b02      	cmp	r3, #2
 80222a8:	f000 81c8 	beq.w	802263c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x408>
 80222ac:	f9b5 8000 	ldrsh.w	r8, [r5]
 80222b0:	88ab      	ldrh	r3, [r5, #4]
 80222b2:	fa1f fe88 	uxth.w	lr, r8
 80222b6:	4473      	add	r3, lr
 80222b8:	b29b      	uxth	r3, r3
 80222ba:	b218      	sxth	r0, r3
 80222bc:	4580      	cmp	r8, r0
 80222be:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
 80222c2:	da2a      	bge.n	802231a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 80222c4:	9a05      	ldr	r2, [sp, #20]
 80222c6:	eb0e 0102 	add.w	r1, lr, r2
 80222ca:	b28a      	uxth	r2, r1
 80222cc:	9207      	str	r2, [sp, #28]
 80222ce:	f9bd c01c 	ldrsh.w	ip, [sp, #28]
 80222d2:	45e0      	cmp	r8, ip
 80222d4:	da21      	bge.n	802231a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 80222d6:	88ea      	ldrh	r2, [r5, #6]
 80222d8:	fa1f f68a 	uxth.w	r6, sl
 80222dc:	4432      	add	r2, r6
 80222de:	b292      	uxth	r2, r2
 80222e0:	b211      	sxth	r1, r2
 80222e2:	458a      	cmp	sl, r1
 80222e4:	9108      	str	r1, [sp, #32]
 80222e6:	da18      	bge.n	802231a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 80222e8:	9906      	ldr	r1, [sp, #24]
 80222ea:	eb06 0901 	add.w	r9, r6, r1
 80222ee:	fa1f f989 	uxth.w	r9, r9
 80222f2:	fa0f f189 	sxth.w	r1, r9
 80222f6:	458a      	cmp	sl, r1
 80222f8:	9109      	str	r1, [sp, #36]	; 0x24
 80222fa:	da0e      	bge.n	802231a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 80222fc:	9907      	ldr	r1, [sp, #28]
 80222fe:	4560      	cmp	r0, ip
 8022300:	bfc8      	it	gt
 8022302:	460b      	movgt	r3, r1
 8022304:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8022308:	4281      	cmp	r1, r0
 802230a:	bfc8      	it	gt
 802230c:	464a      	movgt	r2, r9
 802230e:	eba3 030e 	sub.w	r3, r3, lr
 8022312:	1b92      	subs	r2, r2, r6
 8022314:	b21b      	sxth	r3, r3
 8022316:	b212      	sxth	r2, r2
 8022318:	e005      	b.n	8022326 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xf2>
 802231a:	2200      	movs	r2, #0
 802231c:	4616      	mov	r6, r2
 802231e:	4692      	mov	sl, r2
 8022320:	4613      	mov	r3, r2
 8022322:	4696      	mov	lr, r2
 8022324:	4690      	mov	r8, r2
 8022326:	f9b7 0000 	ldrsh.w	r0, [r7]
 802232a:	88b9      	ldrh	r1, [r7, #4]
 802232c:	4401      	add	r1, r0
 802232e:	b289      	uxth	r1, r1
 8022330:	fa0f f981 	sxth.w	r9, r1
 8022334:	45c8      	cmp	r8, r9
 8022336:	da55      	bge.n	80223e4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8022338:	449e      	add	lr, r3
 802233a:	fa1f fe8e 	uxth.w	lr, lr
 802233e:	fa0f f38e 	sxth.w	r3, lr
 8022342:	4298      	cmp	r0, r3
 8022344:	9307      	str	r3, [sp, #28]
 8022346:	da4d      	bge.n	80223e4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8022348:	f9b7 c002 	ldrsh.w	ip, [r7, #2]
 802234c:	88fb      	ldrh	r3, [r7, #6]
 802234e:	4463      	add	r3, ip
 8022350:	b29b      	uxth	r3, r3
 8022352:	b21f      	sxth	r7, r3
 8022354:	45ba      	cmp	sl, r7
 8022356:	da45      	bge.n	80223e4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8022358:	4416      	add	r6, r2
 802235a:	b2b2      	uxth	r2, r6
 802235c:	b216      	sxth	r6, r2
 802235e:	45b4      	cmp	ip, r6
 8022360:	9608      	str	r6, [sp, #32]
 8022362:	da3f      	bge.n	80223e4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8022364:	4540      	cmp	r0, r8
 8022366:	9e07      	ldr	r6, [sp, #28]
 8022368:	bfb8      	it	lt
 802236a:	4640      	movlt	r0, r8
 802236c:	45d4      	cmp	ip, sl
 802236e:	bfb8      	it	lt
 8022370:	46d4      	movlt	ip, sl
 8022372:	45b1      	cmp	r9, r6
 8022374:	bfc8      	it	gt
 8022376:	4671      	movgt	r1, lr
 8022378:	9e08      	ldr	r6, [sp, #32]
 802237a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80223dc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a8>
 802237e:	42b7      	cmp	r7, r6
 8022380:	bfc8      	it	gt
 8022382:	4613      	movgt	r3, r2
 8022384:	f8df e058 	ldr.w	lr, [pc, #88]	; 80223e0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ac>
 8022388:	b282      	uxth	r2, r0
 802238a:	eba3 030c 	sub.w	r3, r3, ip
 802238e:	1a8f      	subs	r7, r1, r2
 8022390:	f8b8 a000 	ldrh.w	sl, [r8]
 8022394:	f8be 9000 	ldrh.w	r9, [lr]
 8022398:	b21b      	sxth	r3, r3
 802239a:	b23f      	sxth	r7, r7
 802239c:	2800      	cmp	r0, #0
 802239e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80223a2:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 80223a6:	f8ad c032 	strh.w	ip, [sp, #50]	; 0x32
 80223aa:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 80223ae:	fa0f f88a 	sxth.w	r8, sl
 80223b2:	fa0f fe89 	sxth.w	lr, r9
 80223b6:	f280 8115 	bge.w	80225e4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3b0>
 80223ba:	2200      	movs	r2, #0
 80223bc:	f04f 0600 	mov.w	r6, #0
 80223c0:	b20f      	sxth	r7, r1
 80223c2:	4610      	mov	r0, r2
 80223c4:	4639      	mov	r1, r7
 80223c6:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 80223ca:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 80223ce:	e01b      	b.n	8022408 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d4>
 80223d0:	201984f8 	.word	0x201984f8
 80223d4:	0801e81d 	.word	0x0801e81d
 80223d8:	08021985 	.word	0x08021985
 80223dc:	201984ec 	.word	0x201984ec
 80223e0:	201984ee 	.word	0x201984ee
 80223e4:	2300      	movs	r3, #0
 80223e6:	489f      	ldr	r0, [pc, #636]	; (8022664 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x430>)
 80223e8:	499f      	ldr	r1, [pc, #636]	; (8022668 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x434>)
 80223ea:	f8b0 a000 	ldrh.w	sl, [r0]
 80223ee:	f8b1 9000 	ldrh.w	r9, [r1]
 80223f2:	461a      	mov	r2, r3
 80223f4:	469c      	mov	ip, r3
 80223f6:	4618      	mov	r0, r3
 80223f8:	4619      	mov	r1, r3
 80223fa:	461f      	mov	r7, r3
 80223fc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8022400:	fa0f f88a 	sxth.w	r8, sl
 8022404:	fa0f fe89 	sxth.w	lr, r9
 8022408:	eba8 0000 	sub.w	r0, r8, r0
 802240c:	4288      	cmp	r0, r1
 802240e:	da04      	bge.n	802241a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1e6>
 8022410:	ebaa 0702 	sub.w	r7, sl, r2
 8022414:	b23f      	sxth	r7, r7
 8022416:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 802241a:	f1bc 0f00 	cmp.w	ip, #0
 802241e:	f2c0 80c2 	blt.w	80225a6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x372>
 8022422:	4661      	mov	r1, ip
 8022424:	ebae 0e01 	sub.w	lr, lr, r1
 8022428:	4573      	cmp	r3, lr
 802242a:	dd04      	ble.n	8022436 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x202>
 802242c:	eba9 030c 	sub.w	r3, r9, ip
 8022430:	b21b      	sxth	r3, r3
 8022432:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8022436:	2f00      	cmp	r7, #0
 8022438:	f340 80b1 	ble.w	802259e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x36a>
 802243c:	2b00      	cmp	r3, #0
 802243e:	f340 80ae 	ble.w	802259e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x36a>
 8022442:	f04f 0e00 	mov.w	lr, #0
 8022446:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 802244a:	9b05      	ldr	r3, [sp, #20]
 802244c:	8868      	ldrh	r0, [r5, #2]
 802244e:	8829      	ldrh	r1, [r5, #0]
 8022450:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8022454:	9b06      	ldr	r3, [sp, #24]
 8022456:	1a52      	subs	r2, r2, r1
 8022458:	ebac 0c00 	sub.w	ip, ip, r0
 802245c:	a910      	add	r1, sp, #64	; 0x40
 802245e:	a80e      	add	r0, sp, #56	; 0x38
 8022460:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 8022464:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8022468:	f8ad c03a 	strh.w	ip, [sp, #58]	; 0x3a
 802246c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 8022470:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8022474:	f7f6 fc22 	bl	8018cbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022478:	a80c      	add	r0, sp, #48	; 0x30
 802247a:	f7f6 fbf7 	bl	8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802247e:	a810      	add	r0, sp, #64	; 0x40
 8022480:	f7f6 fbf4 	bl	8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022484:	4b79      	ldr	r3, [pc, #484]	; (802266c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x438>)
 8022486:	681b      	ldr	r3, [r3, #0]
 8022488:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 802248c:	2a00      	cmp	r2, #0
 802248e:	f040 80a4 	bne.w	80225da <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3a6>
 8022492:	6898      	ldr	r0, [r3, #8]
 8022494:	6803      	ldr	r3, [r0, #0]
 8022496:	4a76      	ldr	r2, [pc, #472]	; (8022670 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x43c>)
 8022498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802249a:	4293      	cmp	r3, r2
 802249c:	f040 80b0 	bne.w	8022600 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3cc>
 80224a0:	7a00      	ldrb	r0, [r0, #8]
 80224a2:	2801      	cmp	r0, #1
 80224a4:	f000 80a5 	beq.w	80225f2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3be>
 80224a8:	f0c0 809e 	bcc.w	80225e8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3b4>
 80224ac:	2802      	cmp	r0, #2
 80224ae:	f040 80d2 	bne.w	8022656 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x422>
 80224b2:	f04f 0810 	mov.w	r8, #16
 80224b6:	f04f 0a04 	mov.w	sl, #4
 80224ba:	6823      	ldr	r3, [r4, #0]
 80224bc:	4a6d      	ldr	r2, [pc, #436]	; (8022674 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x440>)
 80224be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224c0:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 80224c4:	4293      	cmp	r3, r2
 80224c6:	fb0a f707 	mul.w	r7, sl, r7
 80224ca:	f040 809b 	bne.w	8022604 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d0>
 80224ce:	4b6a      	ldr	r3, [pc, #424]	; (8022678 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x444>)
 80224d0:	881b      	ldrh	r3, [r3, #0]
 80224d2:	2b00      	cmp	r3, #0
 80224d4:	f000 80b8 	beq.w	8022648 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x414>
 80224d8:	7a22      	ldrb	r2, [r4, #8]
 80224da:	2a02      	cmp	r2, #2
 80224dc:	f000 808e 	beq.w	80225fc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3c8>
 80224e0:	2a01      	cmp	r2, #1
 80224e2:	bf14      	ite	ne
 80224e4:	2402      	movne	r4, #2
 80224e6:	2403      	moveq	r4, #3
 80224e8:	fb13 f404 	smulbb	r4, r3, r4
 80224ec:	b2a4      	uxth	r4, r4
 80224ee:	4a5f      	ldr	r2, [pc, #380]	; (802266c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x438>)
 80224f0:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80224f4:	f9bd 903a 	ldrsh.w	r9, [sp, #58]	; 0x3a
 80224f8:	6810      	ldr	r0, [r2, #0]
 80224fa:	fb07 3909 	mla	r9, r7, r9, r3
 80224fe:	6803      	ldr	r3, [r0, #0]
 8022500:	4e5e      	ldr	r6, [pc, #376]	; (802267c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x448>)
 8022502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022504:	4798      	blx	r3
 8022506:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 802250a:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	; 0x30
 802250e:	fb04 f303 	mul.w	r3, r4, r3
 8022512:	fb0a 3505 	mla	r5, sl, r5, r3
 8022516:	4405      	add	r5, r0
 8022518:	6830      	ldr	r0, [r6, #0]
 802251a:	44d9      	add	r9, fp
 802251c:	2800      	cmp	r0, #0
 802251e:	d075      	beq.n	802260c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 8022520:	f7fc f90a 	bl	801e738 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8022524:	9700      	str	r7, [sp, #0]
 8022526:	2700      	movs	r7, #0
 8022528:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 802252c:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8022530:	4648      	mov	r0, r9
 8022532:	4643      	mov	r3, r8
 8022534:	f7f9 febe 	bl	801c2b4 <nema_bind_dst_tex>
 8022538:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 802253c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8022540:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8022544:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8022548:	f7f9 fe00 	bl	801c14c <nema_set_clip>
 802254c:	f04f 33ff 	mov.w	r3, #4294967295
 8022550:	2201      	movs	r2, #1
 8022552:	2100      	movs	r1, #0
 8022554:	f240 5004 	movw	r0, #1284	; 0x504
 8022558:	f7fb fc40 	bl	801dddc <nema_set_blend>
 802255c:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 8022560:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8022564:	4643      	mov	r3, r8
 8022566:	4628      	mov	r0, r5
 8022568:	9400      	str	r4, [sp, #0]
 802256a:	9701      	str	r7, [sp, #4]
 802256c:	f7f9 fe2a 	bl	801c1c4 <nema_bind_src_tex>
 8022570:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8022574:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8022578:	f7f9 ff64 	bl	801c444 <nema_blit>
 802257c:	6830      	ldr	r0, [r6, #0]
 802257e:	2800      	cmp	r0, #0
 8022580:	d044      	beq.n	802260c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 8022582:	f7fc f8f9 	bl	801e778 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8022586:	6830      	ldr	r0, [r6, #0]
 8022588:	2800      	cmp	r0, #0
 802258a:	d03f      	beq.n	802260c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 802258c:	6803      	ldr	r3, [r0, #0]
 802258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022590:	4798      	blx	r3
 8022592:	6830      	ldr	r0, [r6, #0]
 8022594:	2800      	cmp	r0, #0
 8022596:	d039      	beq.n	802260c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 8022598:	6803      	ldr	r3, [r0, #0]
 802259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802259c:	4798      	blx	r3
 802259e:	4658      	mov	r0, fp
 80225a0:	b013      	add	sp, #76	; 0x4c
 80225a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225a6:	2000      	movs	r0, #0
 80225a8:	4463      	add	r3, ip
 80225aa:	b21b      	sxth	r3, r3
 80225ac:	4684      	mov	ip, r0
 80225ae:	4601      	mov	r1, r0
 80225b0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80225b4:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 80225b8:	e734      	b.n	8022424 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f0>
 80225ba:	9b05      	ldr	r3, [sp, #20]
 80225bc:	9002      	str	r0, [sp, #8]
 80225be:	e9cd b300 	strd	fp, r3, [sp]
 80225c2:	a810      	add	r0, sp, #64	; 0x40
 80225c4:	462b      	mov	r3, r5
 80225c6:	463a      	mov	r2, r7
 80225c8:	4621      	mov	r1, r4
 80225ca:	47c0      	blx	r8
 80225cc:	4658      	mov	r0, fp
 80225ce:	b013      	add	sp, #76	; 0x4c
 80225d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225d4:	4620      	mov	r0, r4
 80225d6:	4798      	blx	r3
 80225d8:	e648      	b.n	802226c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x38>
 80225da:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80225dc:	2800      	cmp	r0, #0
 80225de:	f47f af59 	bne.w	8022494 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x260>
 80225e2:	e756      	b.n	8022492 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 80225e4:	4639      	mov	r1, r7
 80225e6:	e70f      	b.n	8022408 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d4>
 80225e8:	f04f 0804 	mov.w	r8, #4
 80225ec:	f04f 0a02 	mov.w	sl, #2
 80225f0:	e763      	b.n	80224ba <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 80225f2:	f04f 0839 	mov.w	r8, #57	; 0x39
 80225f6:	f04f 0a03 	mov.w	sl, #3
 80225fa:	e75e      	b.n	80224ba <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 80225fc:	2404      	movs	r4, #4
 80225fe:	e773      	b.n	80224e8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b4>
 8022600:	4798      	blx	r3
 8022602:	e74e      	b.n	80224a2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26e>
 8022604:	4620      	mov	r0, r4
 8022606:	4798      	blx	r3
 8022608:	4604      	mov	r4, r0
 802260a:	e770      	b.n	80224ee <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ba>
 802260c:	4b1c      	ldr	r3, [pc, #112]	; (8022680 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x44c>)
 802260e:	4a1d      	ldr	r2, [pc, #116]	; (8022684 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x450>)
 8022610:	217c      	movs	r1, #124	; 0x7c
 8022612:	481d      	ldr	r0, [pc, #116]	; (8022688 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x454>)
 8022614:	f006 fff2 	bl	80295fc <__assert_func>
 8022618:	4b1c      	ldr	r3, [pc, #112]	; (802268c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x458>)
 802261a:	4a1d      	ldr	r2, [pc, #116]	; (8022690 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 802261c:	21e9      	movs	r1, #233	; 0xe9
 802261e:	481d      	ldr	r0, [pc, #116]	; (8022694 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 8022620:	f006 ffec 	bl	80295fc <__assert_func>
 8022624:	4b1c      	ldr	r3, [pc, #112]	; (8022698 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x464>)
 8022626:	4a1a      	ldr	r2, [pc, #104]	; (8022690 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 8022628:	21e7      	movs	r1, #231	; 0xe7
 802262a:	481a      	ldr	r0, [pc, #104]	; (8022694 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 802262c:	f006 ffe6 	bl	80295fc <__assert_func>
 8022630:	4b1a      	ldr	r3, [pc, #104]	; (802269c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x468>)
 8022632:	4a17      	ldr	r2, [pc, #92]	; (8022690 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 8022634:	21e5      	movs	r1, #229	; 0xe5
 8022636:	4817      	ldr	r0, [pc, #92]	; (8022694 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 8022638:	f006 ffe0 	bl	80295fc <__assert_func>
 802263c:	4b17      	ldr	r3, [pc, #92]	; (802269c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x468>)
 802263e:	4a18      	ldr	r2, [pc, #96]	; (80226a0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x46c>)
 8022640:	21f0      	movs	r1, #240	; 0xf0
 8022642:	4814      	ldr	r0, [pc, #80]	; (8022694 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 8022644:	f006 ffda 	bl	80295fc <__assert_func>
 8022648:	4b16      	ldr	r3, [pc, #88]	; (80226a4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x470>)
 802264a:	4a17      	ldr	r2, [pc, #92]	; (80226a8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x474>)
 802264c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8022650:	4816      	ldr	r0, [pc, #88]	; (80226ac <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x478>)
 8022652:	f006 ffd3 	bl	80295fc <__assert_func>
 8022656:	4b16      	ldr	r3, [pc, #88]	; (80226b0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x47c>)
 8022658:	4a11      	ldr	r2, [pc, #68]	; (80226a0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x46c>)
 802265a:	f44f 718d 	mov.w	r1, #282	; 0x11a
 802265e:	480d      	ldr	r0, [pc, #52]	; (8022694 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 8022660:	f006 ffcc 	bl	80295fc <__assert_func>
 8022664:	201984ec 	.word	0x201984ec
 8022668:	201984ee 	.word	0x201984ee
 802266c:	201984f8 	.word	0x201984f8
 8022670:	0801e81d 	.word	0x0801e81d
 8022674:	080203fd 	.word	0x080203fd
 8022678:	201984f2 	.word	0x201984f2
 802267c:	20198728 	.word	0x20198728
 8022680:	0802c4ac 	.word	0x0802c4ac
 8022684:	0802ccb4 	.word	0x0802ccb4
 8022688:	0802c4d4 	.word	0x0802c4d4
 802268c:	0802c8a4 	.word	0x0802c8a4
 8022690:	0802d5c8 	.word	0x0802d5c8
 8022694:	0802c550 	.word	0x0802c550
 8022698:	0802c84c 	.word	0x0802c84c
 802269c:	0802c6f4 	.word	0x0802c6f4
 80226a0:	0802d534 	.word	0x0802d534
 80226a4:	0802ca24 	.word	0x0802ca24
 80226a8:	0802d7e0 	.word	0x0802d7e0
 80226ac:	0802ca68 	.word	0x0802ca68
 80226b0:	0802c7f8 	.word	0x0802c7f8

080226b4 <_ZN8touchgfx8LCDGPU2DC1Ev>:
 80226b4:	b410      	push	{r4}
 80226b6:	2400      	movs	r4, #0
 80226b8:	220d      	movs	r2, #13
 80226ba:	4903      	ldr	r1, [pc, #12]	; (80226c8 <_ZN8touchgfx8LCDGPU2DC1Ev+0x14>)
 80226bc:	7202      	strb	r2, [r0, #8]
 80226be:	e9c0 1400 	strd	r1, r4, [r0]
 80226c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80226c6:	4770      	bx	lr
 80226c8:	0802cc5c 	.word	0x0802cc5c

080226cc <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE>:
 80226cc:	2902      	cmp	r1, #2
 80226ce:	d906      	bls.n	80226de <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x12>
 80226d0:	b508      	push	{r3, lr}
 80226d2:	4a04      	ldr	r2, [pc, #16]	; (80226e4 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x18>)
 80226d4:	4b04      	ldr	r3, [pc, #16]	; (80226e8 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x1c>)
 80226d6:	212a      	movs	r1, #42	; 0x2a
 80226d8:	4804      	ldr	r0, [pc, #16]	; (80226ec <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x20>)
 80226da:	f006 ff8f 	bl	80295fc <__assert_func>
 80226de:	7201      	strb	r1, [r0, #8]
 80226e0:	4770      	bx	lr
 80226e2:	bf00      	nop
 80226e4:	0802cfcc 	.word	0x0802cfcc
 80226e8:	0802c3e4 	.word	0x0802c3e4
 80226ec:	0802c550 	.word	0x0802c550

080226f0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>:
 80226f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226f4:	b093      	sub	sp, #76	; 0x4c
 80226f6:	4691      	mov	r9, r2
 80226f8:	468a      	mov	sl, r1
 80226fa:	8812      	ldrh	r2, [r2, #0]
 80226fc:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
 8022700:	461c      	mov	r4, r3
 8022702:	910a      	str	r1, [sp, #40]	; 0x28
 8022704:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022706:	2a00      	cmp	r2, #0
 8022708:	f040 8109 	bne.w	802291e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x22e>
 802270c:	6820      	ldr	r0, [r4, #0]
 802270e:	6861      	ldr	r1, [r4, #4]
 8022710:	aa0e      	add	r2, sp, #56	; 0x38
 8022712:	c203      	stmia	r2!, {r0, r1}
 8022714:	6818      	ldr	r0, [r3, #0]
 8022716:	6859      	ldr	r1, [r3, #4]
 8022718:	aa10      	add	r2, sp, #64	; 0x40
 802271a:	c203      	stmia	r2!, {r0, r1}
 802271c:	a80e      	add	r0, sp, #56	; 0x38
 802271e:	f7f6 faa5 	bl	8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022722:	4621      	mov	r1, r4
 8022724:	a810      	add	r0, sp, #64	; 0x40
 8022726:	f7f6 fac9 	bl	8018cbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802272a:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 802272e:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
 8022732:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8022736:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 802273a:	487c      	ldr	r0, [pc, #496]	; (802292c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 802273c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8022740:	4422      	add	r2, r4
 8022742:	442b      	add	r3, r5
 8022744:	6800      	ldr	r0, [r0, #0]
 8022746:	fb11 4105 	smlabb	r1, r1, r5, r4
 802274a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802274e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8022752:	6802      	ldr	r2, [r0, #0]
 8022754:	4d76      	ldr	r5, [pc, #472]	; (8022930 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022756:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 802275a:	448a      	add	sl, r1
 802275c:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8022760:	42ab      	cmp	r3, r5
 8022762:	910b      	str	r1, [sp, #44]	; 0x2c
 8022764:	f9bd 4046 	ldrsh.w	r4, [sp, #70]	; 0x46
 8022768:	f040 80a6 	bne.w	80228b8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c8>
 802276c:	6841      	ldr	r1, [r0, #4]
 802276e:	4d71      	ldr	r5, [pc, #452]	; (8022934 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8022770:	680b      	ldr	r3, [r1, #0]
 8022772:	699b      	ldr	r3, [r3, #24]
 8022774:	42ab      	cmp	r3, r5
 8022776:	f040 80c4 	bne.w	8022902 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x212>
 802277a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 802277c:	4798      	blx	r3
 802277e:	4b6e      	ldr	r3, [pc, #440]	; (8022938 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8022780:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8022784:	881b      	ldrh	r3, [r3, #0]
 8022786:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 802278a:	fb03 f404 	mul.w	r4, r3, r4
 802278e:	fb03 1202 	mla	r2, r3, r2, r1
 8022792:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022796:	eb00 0244 	add.w	r2, r0, r4, lsl #1
 802279a:	4290      	cmp	r0, r2
 802279c:	920c      	str	r2, [sp, #48]	; 0x30
 802279e:	f080 8083 	bcs.w	80228a8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 80227a2:	f04f 0b04 	mov.w	fp, #4
 80227a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80227a8:	0052      	lsls	r2, r2, #1
 80227aa:	920d      	str	r2, [sp, #52]	; 0x34
 80227ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80227ae:	eb00 0802 	add.w	r8, r0, r2
 80227b2:	4580      	cmp	r8, r0
 80227b4:	d96d      	bls.n	8022892 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a2>
 80227b6:	4684      	mov	ip, r0
 80227b8:	f10a 3eff 	add.w	lr, sl, #4294967295
 80227bc:	e03e      	b.n	802283c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x14c>
 80227be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80227c0:	f3c5 4707 	ubfx	r7, r5, #16, #8
 80227c4:	fb02 f303 	mul.w	r3, r2, r3
 80227c8:	1c59      	adds	r1, r3, #1
 80227ca:	eb01 2323 	add.w	r3, r1, r3, asr #8
 80227ce:	121b      	asrs	r3, r3, #8
 80227d0:	43da      	mvns	r2, r3
 80227d2:	b299      	uxth	r1, r3
 80227d4:	b2f6      	uxtb	r6, r6
 80227d6:	b2eb      	uxtb	r3, r5
 80227d8:	fb17 f701 	smulbb	r7, r7, r1
 80227dc:	f8bc 5000 	ldrh.w	r5, [ip]
 80227e0:	fb13 f301 	smulbb	r3, r3, r1
 80227e4:	fb16 f601 	smulbb	r6, r6, r1
 80227e8:	122c      	asrs	r4, r5, #8
 80227ea:	10e9      	asrs	r1, r5, #3
 80227ec:	00ed      	lsls	r5, r5, #3
 80227ee:	b2d2      	uxtb	r2, r2
 80227f0:	b2ed      	uxtb	r5, r5
 80227f2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80227f6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80227fa:	fb04 7402 	mla	r4, r4, r2, r7
 80227fe:	fb01 6102 	mla	r1, r1, r2, r6
 8022802:	fb05 3202 	mla	r2, r5, r2, r3
 8022806:	b2a4      	uxth	r4, r4
 8022808:	b292      	uxth	r2, r2
 802280a:	b289      	uxth	r1, r1
 802280c:	1c55      	adds	r5, r2, #1
 802280e:	1c67      	adds	r7, r4, #1
 8022810:	1c4b      	adds	r3, r1, #1
 8022812:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 8022816:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 802281a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802281e:	f404 4278 	and.w	r2, r4, #63488	; 0xf800
 8022822:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8022826:	095b      	lsrs	r3, r3, #5
 8022828:	432a      	orrs	r2, r5
 802282a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802282e:	431a      	orrs	r2, r3
 8022830:	f8ac 2000 	strh.w	r2, [ip]
 8022834:	f10c 0c02 	add.w	ip, ip, #2
 8022838:	45e0      	cmp	r8, ip
 802283a:	d91f      	bls.n	802287c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 802283c:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8022840:	fb1b b303 	smlabb	r3, fp, r3, fp
 8022844:	f859 5003 	ldr.w	r5, [r9, r3]
 8022848:	0e2b      	lsrs	r3, r5, #24
 802284a:	d0f3      	beq.n	8022834 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x144>
 802284c:	2bff      	cmp	r3, #255	; 0xff
 802284e:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8022852:	d1b4      	bne.n	80227be <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8022854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022856:	2aff      	cmp	r2, #255	; 0xff
 8022858:	d1b1      	bne.n	80227be <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xce>
 802285a:	096b      	lsrs	r3, r5, #5
 802285c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8022860:	f026 0607 	bic.w	r6, r6, #7
 8022864:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022868:	431e      	orrs	r6, r3
 802286a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802286e:	4335      	orrs	r5, r6
 8022870:	f8ac 5000 	strh.w	r5, [ip]
 8022874:	f10c 0c02 	add.w	ip, ip, #2
 8022878:	45e0      	cmp	r8, ip
 802287a:	d8df      	bhi.n	802283c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x14c>
 802287c:	43c3      	mvns	r3, r0
 802287e:	4498      	add	r8, r3
 8022880:	4b2d      	ldr	r3, [pc, #180]	; (8022938 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8022882:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8022886:	f108 0801 	add.w	r8, r8, #1
 802288a:	881b      	ldrh	r3, [r3, #0]
 802288c:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 8022890:	44c2      	add	sl, r8
 8022892:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022894:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8022898:	1b19      	subs	r1, r3, r4
 802289a:	1b12      	subs	r2, r2, r4
 802289c:	4492      	add	sl, r2
 802289e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80228a0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80228a4:	4282      	cmp	r2, r0
 80228a6:	d881      	bhi.n	80227ac <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 80228a8:	4b20      	ldr	r3, [pc, #128]	; (802292c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 80228aa:	6818      	ldr	r0, [r3, #0]
 80228ac:	6803      	ldr	r3, [r0, #0]
 80228ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80228b0:	4798      	blx	r3
 80228b2:	b013      	add	sp, #76	; 0x4c
 80228b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228b8:	4798      	blx	r3
 80228ba:	4603      	mov	r3, r0
 80228bc:	2b01      	cmp	r3, #1
 80228be:	d124      	bne.n	802290a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 80228c0:	4a1e      	ldr	r2, [pc, #120]	; (802293c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 80228c2:	6810      	ldr	r0, [r2, #0]
 80228c4:	b328      	cbz	r0, 8022912 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x222>
 80228c6:	2700      	movs	r7, #0
 80228c8:	260b      	movs	r6, #11
 80228ca:	4a1b      	ldr	r2, [pc, #108]	; (8022938 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 80228cc:	b2a1      	uxth	r1, r4
 80228ce:	8814      	ldrh	r4, [r2, #0]
 80228d0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80228d4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80228d8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80228dc:	9406      	str	r4, [sp, #24]
 80228de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80228e0:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 80228e4:	9305      	str	r3, [sp, #20]
 80228e6:	9204      	str	r2, [sp, #16]
 80228e8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80228ec:	464a      	mov	r2, r9
 80228ee:	4651      	mov	r1, sl
 80228f0:	e9cd 6707 	strd	r6, r7, [sp, #28]
 80228f4:	9503      	str	r5, [sp, #12]
 80228f6:	9400      	str	r4, [sp, #0]
 80228f8:	f7fb ff46 	bl	801e788 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80228fc:	b013      	add	sp, #76	; 0x4c
 80228fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022902:	4608      	mov	r0, r1
 8022904:	4798      	blx	r3
 8022906:	4603      	mov	r3, r0
 8022908:	e7d8      	b.n	80228bc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1cc>
 802290a:	4b08      	ldr	r3, [pc, #32]	; (802292c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 802290c:	6818      	ldr	r0, [r3, #0]
 802290e:	6802      	ldr	r2, [r0, #0]
 8022910:	e733      	b.n	802277a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8022912:	4b0b      	ldr	r3, [pc, #44]	; (8022940 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8022914:	4a0b      	ldr	r2, [pc, #44]	; (8022944 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8022916:	217c      	movs	r1, #124	; 0x7c
 8022918:	480b      	ldr	r0, [pc, #44]	; (8022948 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 802291a:	f006 fe6f 	bl	80295fc <__assert_func>
 802291e:	4b0b      	ldr	r3, [pc, #44]	; (802294c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8022920:	4a0b      	ldr	r2, [pc, #44]	; (8022950 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x260>)
 8022922:	f240 31c2 	movw	r1, #962	; 0x3c2
 8022926:	480b      	ldr	r0, [pc, #44]	; (8022954 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x264>)
 8022928:	f006 fe68 	bl	80295fc <__assert_func>
 802292c:	201984f8 	.word	0x201984f8
 8022930:	080026c5 	.word	0x080026c5
 8022934:	08017cb1 	.word	0x08017cb1
 8022938:	201984f2 	.word	0x201984f2
 802293c:	20198728 	.word	0x20198728
 8022940:	0802c4ac 	.word	0x0802c4ac
 8022944:	0802ccb4 	.word	0x0802ccb4
 8022948:	0802c4d4 	.word	0x0802c4d4
 802294c:	0802c5c4 	.word	0x0802c5c4
 8022950:	0802d2e4 	.word	0x0802d2e4
 8022954:	0802c550 	.word	0x0802c550

08022958 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>:
 8022958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802295c:	4691      	mov	r9, r2
 802295e:	8812      	ldrh	r2, [r2, #0]
 8022960:	b093      	sub	sp, #76	; 0x4c
 8022962:	2a01      	cmp	r2, #1
 8022964:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 8022968:	f040 8129 	bne.w	8022bbe <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x266>
 802296c:	b914      	cbnz	r4, 8022974 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c>
 802296e:	b013      	add	sp, #76	; 0x4c
 8022970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022974:	461d      	mov	r5, r3
 8022976:	468a      	mov	sl, r1
 8022978:	6818      	ldr	r0, [r3, #0]
 802297a:	6859      	ldr	r1, [r3, #4]
 802297c:	ab0e      	add	r3, sp, #56	; 0x38
 802297e:	c303      	stmia	r3!, {r0, r1}
 8022980:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022982:	6818      	ldr	r0, [r3, #0]
 8022984:	6859      	ldr	r1, [r3, #4]
 8022986:	ab10      	add	r3, sp, #64	; 0x40
 8022988:	c303      	stmia	r3!, {r0, r1}
 802298a:	a80e      	add	r0, sp, #56	; 0x38
 802298c:	f7f6 f96e 	bl	8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022990:	4629      	mov	r1, r5
 8022992:	a810      	add	r0, sp, #64	; 0x40
 8022994:	f7f6 f992 	bl	8018cbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022998:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
 802299c:	f9bd 6042 	ldrsh.w	r6, [sp, #66]	; 0x42
 80229a0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80229a4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80229a8:	488b      	ldr	r0, [pc, #556]	; (8022bd8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 80229aa:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80229ae:	442a      	add	r2, r5
 80229b0:	4433      	add	r3, r6
 80229b2:	6800      	ldr	r0, [r0, #0]
 80229b4:	fb11 5106 	smlabb	r1, r1, r6, r5
 80229b8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80229bc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80229c0:	6802      	ldr	r2, [r0, #0]
 80229c2:	4e86      	ldr	r6, [pc, #536]	; (8022bdc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x284>)
 80229c4:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 80229c8:	448a      	add	sl, r1
 80229ca:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80229ce:	42b3      	cmp	r3, r6
 80229d0:	910b      	str	r1, [sp, #44]	; 0x2c
 80229d2:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 80229d6:	f040 80c8 	bne.w	8022b6a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x212>
 80229da:	6841      	ldr	r1, [r0, #4]
 80229dc:	4e80      	ldr	r6, [pc, #512]	; (8022be0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x288>)
 80229de:	680b      	ldr	r3, [r1, #0]
 80229e0:	699b      	ldr	r3, [r3, #24]
 80229e2:	42b3      	cmp	r3, r6
 80229e4:	f040 80e4 	bne.w	8022bb0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x258>
 80229e8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80229ea:	4798      	blx	r3
 80229ec:	4b7d      	ldr	r3, [pc, #500]	; (8022be4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 80229ee:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80229f2:	881b      	ldrh	r3, [r3, #0]
 80229f4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80229f8:	2cff      	cmp	r4, #255	; 0xff
 80229fa:	fb03 1202 	mla	r2, r3, r2, r1
 80229fe:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022a02:	d06f      	beq.n	8022ae4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 8022a04:	43e2      	mvns	r2, r4
 8022a06:	fb05 f503 	mul.w	r5, r5, r3
 8022a0a:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 8022a0e:	4288      	cmp	r0, r1
 8022a10:	910c      	str	r1, [sp, #48]	; 0x30
 8022a12:	b2d2      	uxtb	r2, r2
 8022a14:	d25e      	bcs.n	8022ad4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 8022a16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022a18:	fa1f f884 	uxth.w	r8, r4
 8022a1c:	0049      	lsls	r1, r1, #1
 8022a1e:	b292      	uxth	r2, r2
 8022a20:	910d      	str	r1, [sp, #52]	; 0x34
 8022a22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022a24:	eb00 0b01 	add.w	fp, r0, r1
 8022a28:	4583      	cmp	fp, r0
 8022a2a:	d948      	bls.n	8022abe <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x166>
 8022a2c:	4684      	mov	ip, r0
 8022a2e:	f10a 3eff 	add.w	lr, sl, #4294967295
 8022a32:	2103      	movs	r1, #3
 8022a34:	2404      	movs	r4, #4
 8022a36:	f81e 6f01 	ldrb.w	r6, [lr, #1]!
 8022a3a:	f8bc 3000 	ldrh.w	r3, [ip]
 8022a3e:	fb11 4606 	smlabb	r6, r1, r6, r4
 8022a42:	eb09 0106 	add.w	r1, r9, r6
 8022a46:	788d      	ldrb	r5, [r1, #2]
 8022a48:	784f      	ldrb	r7, [r1, #1]
 8022a4a:	00dc      	lsls	r4, r3, #3
 8022a4c:	b2e4      	uxtb	r4, r4
 8022a4e:	fb14 f402 	smulbb	r4, r4, r2
 8022a52:	fb15 f508 	smulbb	r5, r5, r8
 8022a56:	fb17 f708 	smulbb	r7, r7, r8
 8022a5a:	f819 6006 	ldrb.w	r6, [r9, r6]
 8022a5e:	1219      	asrs	r1, r3, #8
 8022a60:	10db      	asrs	r3, r3, #3
 8022a62:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022a66:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8022a6a:	fb06 4608 	mla	r6, r6, r8, r4
 8022a6e:	fb01 5102 	mla	r1, r1, r2, r5
 8022a72:	fb03 7302 	mla	r3, r3, r2, r7
 8022a76:	b2b6      	uxth	r6, r6
 8022a78:	b29b      	uxth	r3, r3
 8022a7a:	b28d      	uxth	r5, r1
 8022a7c:	1c5c      	adds	r4, r3, #1
 8022a7e:	1c69      	adds	r1, r5, #1
 8022a80:	1c77      	adds	r7, r6, #1
 8022a82:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8022a86:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8022a8a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022a8e:	f401 4378 	and.w	r3, r1, #63488	; 0xf800
 8022a92:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8022a96:	0961      	lsrs	r1, r4, #5
 8022a98:	4333      	orrs	r3, r6
 8022a9a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022a9e:	430b      	orrs	r3, r1
 8022aa0:	f82c 3b02 	strh.w	r3, [ip], #2
 8022aa4:	45e3      	cmp	fp, ip
 8022aa6:	d8c4      	bhi.n	8022a32 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xda>
 8022aa8:	43c3      	mvns	r3, r0
 8022aaa:	449b      	add	fp, r3
 8022aac:	4b4d      	ldr	r3, [pc, #308]	; (8022be4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 8022aae:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8022ab2:	f10b 0b01 	add.w	fp, fp, #1
 8022ab6:	881b      	ldrh	r3, [r3, #0]
 8022ab8:	eb00 004b 	add.w	r0, r0, fp, lsl #1
 8022abc:	44da      	add	sl, fp
 8022abe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022ac0:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8022ac4:	1b5c      	subs	r4, r3, r5
 8022ac6:	1b49      	subs	r1, r1, r5
 8022ac8:	448a      	add	sl, r1
 8022aca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022acc:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8022ad0:	4281      	cmp	r1, r0
 8022ad2:	d8a6      	bhi.n	8022a22 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xca>
 8022ad4:	4b40      	ldr	r3, [pc, #256]	; (8022bd8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 8022ad6:	6818      	ldr	r0, [r3, #0]
 8022ad8:	6803      	ldr	r3, [r0, #0]
 8022ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022adc:	4798      	blx	r3
 8022ade:	b013      	add	sp, #76	; 0x4c
 8022ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ae4:	fb05 f503 	mul.w	r5, r5, r3
 8022ae8:	eb00 0e45 	add.w	lr, r0, r5, lsl #1
 8022aec:	4570      	cmp	r0, lr
 8022aee:	d2f1      	bcs.n	8022ad4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 8022af0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022af2:	f04f 0c03 	mov.w	ip, #3
 8022af6:	2704      	movs	r7, #4
 8022af8:	4693      	mov	fp, r2
 8022afa:	0051      	lsls	r1, r2, #1
 8022afc:	4e3a      	ldr	r6, [pc, #232]	; (8022be8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x290>)
 8022afe:	910b      	str	r1, [sp, #44]	; 0x2c
 8022b00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022b02:	eb00 0802 	add.w	r8, r0, r2
 8022b06:	4580      	cmp	r8, r0
 8022b08:	d923      	bls.n	8022b52 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1fa>
 8022b0a:	4604      	mov	r4, r0
 8022b0c:	f10a 35ff 	add.w	r5, sl, #4294967295
 8022b10:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8022b14:	fb1c 7202 	smlabb	r2, ip, r2, r7
 8022b18:	eb09 0302 	add.w	r3, r9, r2
 8022b1c:	7859      	ldrb	r1, [r3, #1]
 8022b1e:	789b      	ldrb	r3, [r3, #2]
 8022b20:	00c9      	lsls	r1, r1, #3
 8022b22:	f819 2002 	ldrb.w	r2, [r9, r2]
 8022b26:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022b2a:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 8022b2e:	430b      	orrs	r3, r1
 8022b30:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8022b34:	f824 3b02 	strh.w	r3, [r4], #2
 8022b38:	45a0      	cmp	r8, r4
 8022b3a:	d8e9      	bhi.n	8022b10 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 8022b3c:	43c3      	mvns	r3, r0
 8022b3e:	4498      	add	r8, r3
 8022b40:	4b28      	ldr	r3, [pc, #160]	; (8022be4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 8022b42:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8022b46:	f108 0801 	add.w	r8, r8, #1
 8022b4a:	881b      	ldrh	r3, [r3, #0]
 8022b4c:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 8022b50:	44c2      	add	sl, r8
 8022b52:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8022b56:	eba3 010b 	sub.w	r1, r3, fp
 8022b5a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8022b5e:	eba2 020b 	sub.w	r2, r2, fp
 8022b62:	4586      	cmp	lr, r0
 8022b64:	4492      	add	sl, r2
 8022b66:	d8cb      	bhi.n	8022b00 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 8022b68:	e7b4      	b.n	8022ad4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 8022b6a:	4798      	blx	r3
 8022b6c:	2801      	cmp	r0, #1
 8022b6e:	d122      	bne.n	8022bb6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x25e>
 8022b70:	4b1e      	ldr	r3, [pc, #120]	; (8022bec <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x294>)
 8022b72:	6818      	ldr	r0, [r3, #0]
 8022b74:	b350      	cbz	r0, 8022bcc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x274>
 8022b76:	2600      	movs	r6, #0
 8022b78:	270b      	movs	r7, #11
 8022b7a:	4b1a      	ldr	r3, [pc, #104]	; (8022be4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 8022b7c:	b2aa      	uxth	r2, r5
 8022b7e:	881d      	ldrh	r5, [r3, #0]
 8022b80:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8022b84:	9404      	str	r4, [sp, #16]
 8022b86:	9506      	str	r5, [sp, #24]
 8022b88:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 8022b8c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8022b90:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8022b94:	4651      	mov	r1, sl
 8022b96:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8022b9a:	464a      	mov	r2, r9
 8022b9c:	9608      	str	r6, [sp, #32]
 8022b9e:	9605      	str	r6, [sp, #20]
 8022ba0:	9707      	str	r7, [sp, #28]
 8022ba2:	9503      	str	r5, [sp, #12]
 8022ba4:	9400      	str	r4, [sp, #0]
 8022ba6:	f7fb fdef 	bl	801e788 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8022baa:	b013      	add	sp, #76	; 0x4c
 8022bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bb0:	4608      	mov	r0, r1
 8022bb2:	4798      	blx	r3
 8022bb4:	e7da      	b.n	8022b6c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x214>
 8022bb6:	4b08      	ldr	r3, [pc, #32]	; (8022bd8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 8022bb8:	6818      	ldr	r0, [r3, #0]
 8022bba:	6802      	ldr	r2, [r0, #0]
 8022bbc:	e714      	b.n	80229e8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x90>
 8022bbe:	4b0c      	ldr	r3, [pc, #48]	; (8022bf0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x298>)
 8022bc0:	4a0c      	ldr	r2, [pc, #48]	; (8022bf4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x29c>)
 8022bc2:	f240 411b 	movw	r1, #1051	; 0x41b
 8022bc6:	480c      	ldr	r0, [pc, #48]	; (8022bf8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a0>)
 8022bc8:	f006 fd18 	bl	80295fc <__assert_func>
 8022bcc:	4b0b      	ldr	r3, [pc, #44]	; (8022bfc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a4>)
 8022bce:	4a0c      	ldr	r2, [pc, #48]	; (8022c00 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a8>)
 8022bd0:	217c      	movs	r1, #124	; 0x7c
 8022bd2:	480c      	ldr	r0, [pc, #48]	; (8022c04 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2ac>)
 8022bd4:	f006 fd12 	bl	80295fc <__assert_func>
 8022bd8:	201984f8 	.word	0x201984f8
 8022bdc:	080026c5 	.word	0x080026c5
 8022be0:	08017cb1 	.word	0x08017cb1
 8022be4:	201984f2 	.word	0x201984f2
 8022be8:	fffff800 	.word	0xfffff800
 8022bec:	20198728 	.word	0x20198728
 8022bf0:	0802c574 	.word	0x0802c574
 8022bf4:	0802d14c 	.word	0x0802d14c
 8022bf8:	0802c550 	.word	0x0802c550
 8022bfc:	0802c4ac 	.word	0x0802c4ac
 8022c00:	0802ccb4 	.word	0x0802ccb4
 8022c04:	0802c4d4 	.word	0x0802c4d4

08022c08 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>:
 8022c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c0c:	4690      	mov	r8, r2
 8022c0e:	8812      	ldrh	r2, [r2, #0]
 8022c10:	b093      	sub	sp, #76	; 0x4c
 8022c12:	461c      	mov	r4, r3
 8022c14:	f89d a074 	ldrb.w	sl, [sp, #116]	; 0x74
 8022c18:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022c1a:	2a00      	cmp	r2, #0
 8022c1c:	f040 80fb 	bne.w	8022e16 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 8022c20:	4689      	mov	r9, r1
 8022c22:	6820      	ldr	r0, [r4, #0]
 8022c24:	6861      	ldr	r1, [r4, #4]
 8022c26:	aa0e      	add	r2, sp, #56	; 0x38
 8022c28:	c203      	stmia	r2!, {r0, r1}
 8022c2a:	6818      	ldr	r0, [r3, #0]
 8022c2c:	6859      	ldr	r1, [r3, #4]
 8022c2e:	aa10      	add	r2, sp, #64	; 0x40
 8022c30:	c203      	stmia	r2!, {r0, r1}
 8022c32:	a80e      	add	r0, sp, #56	; 0x38
 8022c34:	f7f6 f81a 	bl	8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022c38:	4621      	mov	r1, r4
 8022c3a:	a810      	add	r0, sp, #64	; 0x40
 8022c3c:	f7f6 f83e 	bl	8018cbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022c40:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 8022c44:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
 8022c48:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8022c4c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8022c50:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8022c54:	4873      	ldr	r0, [pc, #460]	; (8022e24 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 8022c56:	fb11 4105 	smlabb	r1, r1, r5, r4
 8022c5a:	4422      	add	r2, r4
 8022c5c:	442b      	add	r3, r5
 8022c5e:	6800      	ldr	r0, [r0, #0]
 8022c60:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8022c64:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8022c68:	6802      	ldr	r2, [r0, #0]
 8022c6a:	4489      	add	r9, r1
 8022c6c:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8022c70:	4c6d      	ldr	r4, [pc, #436]	; (8022e28 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x220>)
 8022c72:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8022c76:	910a      	str	r1, [sp, #40]	; 0x28
 8022c78:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 8022c7c:	42a3      	cmp	r3, r4
 8022c7e:	910c      	str	r1, [sp, #48]	; 0x30
 8022c80:	f040 8096 	bne.w	8022db0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 8022c84:	6841      	ldr	r1, [r0, #4]
 8022c86:	4c69      	ldr	r4, [pc, #420]	; (8022e2c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x224>)
 8022c88:	680b      	ldr	r3, [r1, #0]
 8022c8a:	699b      	ldr	r3, [r3, #24]
 8022c8c:	42a3      	cmp	r3, r4
 8022c8e:	f040 80b4 	bne.w	8022dfa <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1f2>
 8022c92:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8022c94:	4798      	blx	r3
 8022c96:	4b66      	ldr	r3, [pc, #408]	; (8022e30 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 8022c98:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8022c9c:	881b      	ldrh	r3, [r3, #0]
 8022c9e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8022ca2:	fb01 2303 	mla	r3, r1, r3, r2
 8022ca6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022caa:	4418      	add	r0, r3
 8022cac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022cae:	2b00      	cmp	r3, #0
 8022cb0:	dd76      	ble.n	8022da0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x198>
 8022cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022cb4:	2b00      	cmp	r3, #0
 8022cb6:	dd73      	ble.n	8022da0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x198>
 8022cb8:	2200      	movs	r2, #0
 8022cba:	2104      	movs	r1, #4
 8022cbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022cc0:	920b      	str	r2, [sp, #44]	; 0x2c
 8022cc2:	930d      	str	r3, [sp, #52]	; 0x34
 8022cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022cc6:	464e      	mov	r6, r9
 8022cc8:	1cc5      	adds	r5, r0, #3
 8022cca:	eb09 0c03 	add.w	ip, r9, r3
 8022cce:	e039      	b.n	8022d44 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 8022cd0:	fb0a f303 	mul.w	r3, sl, r3
 8022cd4:	1c5a      	adds	r2, r3, #1
 8022cd6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022cda:	121b      	asrs	r3, r3, #8
 8022cdc:	43df      	mvns	r7, r3
 8022cde:	b29b      	uxth	r3, r3
 8022ce0:	fb1e f203 	smulbb	r2, lr, r3
 8022ce4:	f815 ec03 	ldrb.w	lr, [r5, #-3]
 8022ce8:	b2ff      	uxtb	r7, r7
 8022cea:	fb0e 2e07 	mla	lr, lr, r7, r2
 8022cee:	fa1f fe8e 	uxth.w	lr, lr
 8022cf2:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 8022cf6:	f10e 0b01 	add.w	fp, lr, #1
 8022cfa:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8022cfe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022d02:	fb12 fb07 	smulbb	fp, r2, r7
 8022d06:	f805 ec03 	strb.w	lr, [r5, #-3]
 8022d0a:	7862      	ldrb	r2, [r4, #1]
 8022d0c:	f815 ec01 	ldrb.w	lr, [r5, #-1]
 8022d10:	fb02 b203 	mla	r2, r2, r3, fp
 8022d14:	b292      	uxth	r2, r2
 8022d16:	f102 0b01 	add.w	fp, r2, #1
 8022d1a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8022d1e:	1212      	asrs	r2, r2, #8
 8022d20:	fb1e f707 	smulbb	r7, lr, r7
 8022d24:	f805 2c02 	strb.w	r2, [r5, #-2]
 8022d28:	78a2      	ldrb	r2, [r4, #2]
 8022d2a:	fb02 7303 	mla	r3, r2, r3, r7
 8022d2e:	b29b      	uxth	r3, r3
 8022d30:	1c5a      	adds	r2, r3, #1
 8022d32:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022d36:	121b      	asrs	r3, r3, #8
 8022d38:	f805 3c01 	strb.w	r3, [r5, #-1]
 8022d3c:	45b4      	cmp	ip, r6
 8022d3e:	f105 0503 	add.w	r5, r5, #3
 8022d42:	d01b      	beq.n	8022d7c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x174>
 8022d44:	f816 2b01 	ldrb.w	r2, [r6], #1
 8022d48:	fb11 1202 	smlabb	r2, r1, r2, r1
 8022d4c:	eb08 0402 	add.w	r4, r8, r2
 8022d50:	78e3      	ldrb	r3, [r4, #3]
 8022d52:	2b00      	cmp	r3, #0
 8022d54:	d0f2      	beq.n	8022d3c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x134>
 8022d56:	2bff      	cmp	r3, #255	; 0xff
 8022d58:	f818 e002 	ldrb.w	lr, [r8, r2]
 8022d5c:	d1b8      	bne.n	8022cd0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 8022d5e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022d62:	d1b5      	bne.n	8022cd0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 8022d64:	f805 ec03 	strb.w	lr, [r5, #-3]
 8022d68:	7863      	ldrb	r3, [r4, #1]
 8022d6a:	45b4      	cmp	ip, r6
 8022d6c:	f805 3c02 	strb.w	r3, [r5, #-2]
 8022d70:	78a3      	ldrb	r3, [r4, #2]
 8022d72:	f105 0503 	add.w	r5, r5, #3
 8022d76:	f805 3c04 	strb.w	r3, [r5, #-4]
 8022d7a:	d1e3      	bne.n	8022d44 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 8022d7c:	4b2c      	ldr	r3, [pc, #176]	; (8022e30 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 8022d7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022d80:	881b      	ldrh	r3, [r3, #0]
 8022d82:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022d84:	1a9b      	subs	r3, r3, r2
 8022d86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022d8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022d8c:	442b      	add	r3, r5
 8022d8e:	4418      	add	r0, r3
 8022d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022d92:	3401      	adds	r4, #1
 8022d94:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8022d98:	42a3      	cmp	r3, r4
 8022d9a:	940b      	str	r4, [sp, #44]	; 0x2c
 8022d9c:	4491      	add	r9, r2
 8022d9e:	d191      	bne.n	8022cc4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 8022da0:	4b20      	ldr	r3, [pc, #128]	; (8022e24 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 8022da2:	6818      	ldr	r0, [r3, #0]
 8022da4:	6803      	ldr	r3, [r0, #0]
 8022da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022da8:	4798      	blx	r3
 8022daa:	b013      	add	sp, #76	; 0x4c
 8022dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022db0:	4798      	blx	r3
 8022db2:	4602      	mov	r2, r0
 8022db4:	2a01      	cmp	r2, #1
 8022db6:	d124      	bne.n	8022e02 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1fa>
 8022db8:	4b1e      	ldr	r3, [pc, #120]	; (8022e34 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x22c>)
 8022dba:	6818      	ldr	r0, [r3, #0]
 8022dbc:	b328      	cbz	r0, 8022e0a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x202>
 8022dbe:	260b      	movs	r6, #11
 8022dc0:	4b1b      	ldr	r3, [pc, #108]	; (8022e30 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 8022dc2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8022dc6:	881f      	ldrh	r7, [r3, #0]
 8022dc8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8022dcc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8022dd0:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 8022dd4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8022dd8:	9208      	str	r2, [sp, #32]
 8022dda:	9205      	str	r2, [sp, #20]
 8022ddc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8022de0:	f8cd a010 	str.w	sl, [sp, #16]
 8022de4:	4642      	mov	r2, r8
 8022de6:	4649      	mov	r1, r9
 8022de8:	e9cd 7606 	strd	r7, r6, [sp, #24]
 8022dec:	9503      	str	r5, [sp, #12]
 8022dee:	9400      	str	r4, [sp, #0]
 8022df0:	f7fb fcca 	bl	801e788 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8022df4:	b013      	add	sp, #76	; 0x4c
 8022df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022dfa:	4608      	mov	r0, r1
 8022dfc:	4798      	blx	r3
 8022dfe:	4602      	mov	r2, r0
 8022e00:	e7d8      	b.n	8022db4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ac>
 8022e02:	4b08      	ldr	r3, [pc, #32]	; (8022e24 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 8022e04:	6818      	ldr	r0, [r3, #0]
 8022e06:	6802      	ldr	r2, [r0, #0]
 8022e08:	e743      	b.n	8022c92 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8022e0a:	4b0b      	ldr	r3, [pc, #44]	; (8022e38 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x230>)
 8022e0c:	4a0b      	ldr	r2, [pc, #44]	; (8022e3c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8022e0e:	217c      	movs	r1, #124	; 0x7c
 8022e10:	480b      	ldr	r0, [pc, #44]	; (8022e40 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 8022e12:	f006 fbf3 	bl	80295fc <__assert_func>
 8022e16:	4b0b      	ldr	r3, [pc, #44]	; (8022e44 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8022e18:	4a0b      	ldr	r2, [pc, #44]	; (8022e48 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022e1a:	f240 417d 	movw	r1, #1149	; 0x47d
 8022e1e:	480b      	ldr	r0, [pc, #44]	; (8022e4c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8022e20:	f006 fbec 	bl	80295fc <__assert_func>
 8022e24:	201984f8 	.word	0x201984f8
 8022e28:	080026c5 	.word	0x080026c5
 8022e2c:	08017cb1 	.word	0x08017cb1
 8022e30:	201984f2 	.word	0x201984f2
 8022e34:	20198728 	.word	0x20198728
 8022e38:	0802c4ac 	.word	0x0802c4ac
 8022e3c:	0802ccb4 	.word	0x0802ccb4
 8022e40:	0802c4d4 	.word	0x0802c4d4
 8022e44:	0802c5c4 	.word	0x0802c5c4
 8022e48:	0802d370 	.word	0x0802d370
 8022e4c:	0802c550 	.word	0x0802c550

08022e50 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>:
 8022e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e54:	4617      	mov	r7, r2
 8022e56:	b095      	sub	sp, #84	; 0x54
 8022e58:	8812      	ldrh	r2, [r2, #0]
 8022e5a:	4688      	mov	r8, r1
 8022e5c:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 8022e60:	2a01      	cmp	r2, #1
 8022e62:	461c      	mov	r4, r3
 8022e64:	910d      	str	r1, [sp, #52]	; 0x34
 8022e66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022e68:	f040 8105 	bne.w	8023076 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x226>
 8022e6c:	6820      	ldr	r0, [r4, #0]
 8022e6e:	6861      	ldr	r1, [r4, #4]
 8022e70:	aa10      	add	r2, sp, #64	; 0x40
 8022e72:	c203      	stmia	r2!, {r0, r1}
 8022e74:	6818      	ldr	r0, [r3, #0]
 8022e76:	6859      	ldr	r1, [r3, #4]
 8022e78:	aa12      	add	r2, sp, #72	; 0x48
 8022e7a:	c203      	stmia	r2!, {r0, r1}
 8022e7c:	a810      	add	r0, sp, #64	; 0x40
 8022e7e:	f7f5 fef5 	bl	8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022e82:	4621      	mov	r1, r4
 8022e84:	a812      	add	r0, sp, #72	; 0x48
 8022e86:	f7f5 ff19 	bl	8018cbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022e8a:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 8022e8e:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 8022e92:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8022e96:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8022e9a:	487a      	ldr	r0, [pc, #488]	; (8023084 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8022e9c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8022ea0:	4422      	add	r2, r4
 8022ea2:	442b      	add	r3, r5
 8022ea4:	6800      	ldr	r0, [r0, #0]
 8022ea6:	fb11 4105 	smlabb	r1, r1, r5, r4
 8022eaa:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8022eae:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8022eb2:	6802      	ldr	r2, [r0, #0]
 8022eb4:	4c74      	ldr	r4, [pc, #464]	; (8023088 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 8022eb6:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8022eba:	4488      	add	r8, r1
 8022ebc:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8022ec0:	42a3      	cmp	r3, r4
 8022ec2:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8022ec6:	910c      	str	r1, [sp, #48]	; 0x30
 8022ec8:	f040 809f 	bne.w	802300a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 8022ecc:	6841      	ldr	r1, [r0, #4]
 8022ece:	4c6f      	ldr	r4, [pc, #444]	; (802308c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8022ed0:	680b      	ldr	r3, [r1, #0]
 8022ed2:	699b      	ldr	r3, [r3, #24]
 8022ed4:	42a3      	cmp	r3, r4
 8022ed6:	f040 80c0 	bne.w	802305a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20a>
 8022eda:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8022edc:	4798      	blx	r3
 8022ede:	4a6c      	ldr	r2, [pc, #432]	; (8023090 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022ee0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 8022ee4:	8814      	ldrh	r4, [r2, #0]
 8022ee6:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8022eea:	fb04 2303 	mla	r3, r4, r3, r2
 8022eee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022ef2:	4418      	add	r0, r3
 8022ef4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022ef6:	2b00      	cmp	r3, #0
 8022ef8:	dd67      	ble.n	8022fca <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x17a>
 8022efa:	2300      	movs	r3, #0
 8022efc:	f04f 0903 	mov.w	r9, #3
 8022f00:	2104      	movs	r1, #4
 8022f02:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022f04:	930b      	str	r3, [sp, #44]	; 0x2c
 8022f06:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 8022f0a:	930e      	str	r3, [sp, #56]	; 0x38
 8022f0c:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
 8022f10:	444b      	add	r3, r9
 8022f12:	930f      	str	r3, [sp, #60]	; 0x3c
 8022f14:	b292      	uxth	r2, r2
 8022f16:	fa1f fc85 	uxth.w	ip, r5
 8022f1a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8022f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f20:	2b00      	cmp	r3, #0
 8022f22:	dd43      	ble.n	8022fac <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x15c>
 8022f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022f26:	2bff      	cmp	r3, #255	; 0xff
 8022f28:	d057      	beq.n	8022fda <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x18a>
 8022f2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022f2c:	1cc5      	adds	r5, r0, #3
 8022f2e:	f108 3eff 	add.w	lr, r8, #4294967295
 8022f32:	eb00 0a03 	add.w	sl, r0, r3
 8022f36:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8022f3a:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 8022f3e:	fb19 1303 	smlabb	r3, r9, r3, r1
 8022f42:	fb16 f402 	smulbb	r4, r6, r2
 8022f46:	5cfe      	ldrb	r6, [r7, r3]
 8022f48:	443b      	add	r3, r7
 8022f4a:	fb06 460c 	mla	r6, r6, ip, r4
 8022f4e:	b2b6      	uxth	r6, r6
 8022f50:	f815 4c02 	ldrb.w	r4, [r5, #-2]
 8022f54:	f106 0b01 	add.w	fp, r6, #1
 8022f58:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 8022f5c:	1236      	asrs	r6, r6, #8
 8022f5e:	fb14 fb02 	smulbb	fp, r4, r2
 8022f62:	f805 6c03 	strb.w	r6, [r5, #-3]
 8022f66:	785c      	ldrb	r4, [r3, #1]
 8022f68:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8022f6c:	fb04 b40c 	mla	r4, r4, ip, fp
 8022f70:	b2a4      	uxth	r4, r4
 8022f72:	f104 0b01 	add.w	fp, r4, #1
 8022f76:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8022f7a:	1224      	asrs	r4, r4, #8
 8022f7c:	fb16 f602 	smulbb	r6, r6, r2
 8022f80:	f805 4c02 	strb.w	r4, [r5, #-2]
 8022f84:	789b      	ldrb	r3, [r3, #2]
 8022f86:	3503      	adds	r5, #3
 8022f88:	fb03 630c 	mla	r3, r3, ip, r6
 8022f8c:	b29b      	uxth	r3, r3
 8022f8e:	1c5c      	adds	r4, r3, #1
 8022f90:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8022f94:	121b      	asrs	r3, r3, #8
 8022f96:	f805 3c04 	strb.w	r3, [r5, #-4]
 8022f9a:	45aa      	cmp	sl, r5
 8022f9c:	d1cb      	bne.n	8022f36 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xe6>
 8022f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022fa0:	4418      	add	r0, r3
 8022fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022fa4:	4498      	add	r8, r3
 8022fa6:	4b3a      	ldr	r3, [pc, #232]	; (8023090 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022fa8:	881c      	ldrh	r4, [r3, #0]
 8022faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022fac:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 8022fb0:	eba4 0e03 	sub.w	lr, r4, r3
 8022fb4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022fb6:	1aed      	subs	r5, r5, r3
 8022fb8:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 8022fbc:	4418      	add	r0, r3
 8022fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022fc0:	3601      	adds	r6, #1
 8022fc2:	42b3      	cmp	r3, r6
 8022fc4:	960b      	str	r6, [sp, #44]	; 0x2c
 8022fc6:	44a8      	add	r8, r5
 8022fc8:	d1a9      	bne.n	8022f1e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8022fca:	4b2e      	ldr	r3, [pc, #184]	; (8023084 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8022fcc:	6818      	ldr	r0, [r3, #0]
 8022fce:	6803      	ldr	r3, [r0, #0]
 8022fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022fd2:	4798      	blx	r3
 8022fd4:	b015      	add	sp, #84	; 0x54
 8022fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022fdc:	1cc4      	adds	r4, r0, #3
 8022fde:	f108 35ff 	add.w	r5, r8, #4294967295
 8022fe2:	eb00 0e03 	add.w	lr, r0, r3
 8022fe6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8022fea:	3403      	adds	r4, #3
 8022fec:	fb19 1303 	smlabb	r3, r9, r3, r1
 8022ff0:	5cfe      	ldrb	r6, [r7, r3]
 8022ff2:	443b      	add	r3, r7
 8022ff4:	f804 6c06 	strb.w	r6, [r4, #-6]
 8022ff8:	785e      	ldrb	r6, [r3, #1]
 8022ffa:	f804 6c05 	strb.w	r6, [r4, #-5]
 8022ffe:	789b      	ldrb	r3, [r3, #2]
 8023000:	f804 3c04 	strb.w	r3, [r4, #-4]
 8023004:	45a6      	cmp	lr, r4
 8023006:	d1ee      	bne.n	8022fe6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x196>
 8023008:	e7c9      	b.n	8022f9e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x14e>
 802300a:	4798      	blx	r3
 802300c:	4603      	mov	r3, r0
 802300e:	2b01      	cmp	r3, #1
 8023010:	d127      	bne.n	8023062 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x212>
 8023012:	4a20      	ldr	r2, [pc, #128]	; (8023094 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8023014:	6810      	ldr	r0, [r2, #0]
 8023016:	b340      	cbz	r0, 802306a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8023018:	f04f 0c0b 	mov.w	ip, #11
 802301c:	2600      	movs	r6, #0
 802301e:	4a1c      	ldr	r2, [pc, #112]	; (8023090 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8023020:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8023024:	8814      	ldrh	r4, [r2, #0]
 8023026:	fa1f f28a 	uxth.w	r2, sl
 802302a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 802302e:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8023032:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023034:	9406      	str	r4, [sp, #24]
 8023036:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 802303a:	9308      	str	r3, [sp, #32]
 802303c:	9204      	str	r2, [sp, #16]
 802303e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8023042:	463a      	mov	r2, r7
 8023044:	4641      	mov	r1, r8
 8023046:	f8cd c01c 	str.w	ip, [sp, #28]
 802304a:	9605      	str	r6, [sp, #20]
 802304c:	9503      	str	r5, [sp, #12]
 802304e:	9400      	str	r4, [sp, #0]
 8023050:	f7fb fb9a 	bl	801e788 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8023054:	b015      	add	sp, #84	; 0x54
 8023056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802305a:	4608      	mov	r0, r1
 802305c:	4798      	blx	r3
 802305e:	4603      	mov	r3, r0
 8023060:	e7d5      	b.n	802300e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1be>
 8023062:	4b08      	ldr	r3, [pc, #32]	; (8023084 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8023064:	6818      	ldr	r0, [r3, #0]
 8023066:	6802      	ldr	r2, [r0, #0]
 8023068:	e737      	b.n	8022eda <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 802306a:	4b0b      	ldr	r3, [pc, #44]	; (8023098 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 802306c:	4a0b      	ldr	r2, [pc, #44]	; (802309c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 802306e:	217c      	movs	r1, #124	; 0x7c
 8023070:	480b      	ldr	r0, [pc, #44]	; (80230a0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8023072:	f006 fac3 	bl	80295fc <__assert_func>
 8023076:	4b0b      	ldr	r3, [pc, #44]	; (80230a4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8023078:	4a0b      	ldr	r2, [pc, #44]	; (80230a8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 802307a:	f240 41c7 	movw	r1, #1223	; 0x4c7
 802307e:	480b      	ldr	r0, [pc, #44]	; (80230ac <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8023080:	f006 fabc 	bl	80295fc <__assert_func>
 8023084:	201984f8 	.word	0x201984f8
 8023088:	080026c5 	.word	0x080026c5
 802308c:	08017cb1 	.word	0x08017cb1
 8023090:	201984f2 	.word	0x201984f2
 8023094:	20198728 	.word	0x20198728
 8023098:	0802c4ac 	.word	0x0802c4ac
 802309c:	0802ccb4 	.word	0x0802ccb4
 80230a0:	0802c4d4 	.word	0x0802c4d4
 80230a4:	0802c574 	.word	0x0802c574
 80230a8:	0802d1d4 	.word	0x0802d1d4
 80230ac:	0802c550 	.word	0x0802c550

080230b0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>:
 80230b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230b4:	4690      	mov	r8, r2
 80230b6:	8812      	ldrh	r2, [r2, #0]
 80230b8:	b095      	sub	sp, #84	; 0x54
 80230ba:	2a01      	cmp	r2, #1
 80230bc:	461c      	mov	r4, r3
 80230be:	f89d 907c 	ldrb.w	r9, [sp, #124]	; 0x7c
 80230c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80230c4:	f040 8107 	bne.w	80232d6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x226>
 80230c8:	468a      	mov	sl, r1
 80230ca:	6820      	ldr	r0, [r4, #0]
 80230cc:	6861      	ldr	r1, [r4, #4]
 80230ce:	aa10      	add	r2, sp, #64	; 0x40
 80230d0:	c203      	stmia	r2!, {r0, r1}
 80230d2:	6818      	ldr	r0, [r3, #0]
 80230d4:	6859      	ldr	r1, [r3, #4]
 80230d6:	aa12      	add	r2, sp, #72	; 0x48
 80230d8:	c203      	stmia	r2!, {r0, r1}
 80230da:	a810      	add	r0, sp, #64	; 0x40
 80230dc:	f7f5 fdc6 	bl	8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80230e0:	4621      	mov	r1, r4
 80230e2:	a812      	add	r0, sp, #72	; 0x48
 80230e4:	f7f5 fdea 	bl	8018cbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80230e8:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 80230ec:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 80230f0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 80230f4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80230f8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80230fc:	4879      	ldr	r0, [pc, #484]	; (80232e4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 80230fe:	fb11 4105 	smlabb	r1, r1, r5, r4
 8023102:	4422      	add	r2, r4
 8023104:	442b      	add	r3, r5
 8023106:	6800      	ldr	r0, [r0, #0]
 8023108:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 802310c:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8023110:	6802      	ldr	r2, [r0, #0]
 8023112:	448a      	add	sl, r1
 8023114:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8023118:	4c73      	ldr	r4, [pc, #460]	; (80232e8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 802311a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 802311e:	910c      	str	r1, [sp, #48]	; 0x30
 8023120:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8023124:	42a3      	cmp	r3, r4
 8023126:	910e      	str	r1, [sp, #56]	; 0x38
 8023128:	f040 80a2 	bne.w	8023270 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c0>
 802312c:	6841      	ldr	r1, [r0, #4]
 802312e:	4c6f      	ldr	r4, [pc, #444]	; (80232ec <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8023130:	680b      	ldr	r3, [r1, #0]
 8023132:	699b      	ldr	r3, [r3, #24]
 8023134:	42a3      	cmp	r3, r4
 8023136:	f040 80c1 	bne.w	80232bc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x20c>
 802313a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 802313c:	4798      	blx	r3
 802313e:	4b6c      	ldr	r3, [pc, #432]	; (80232f0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8023140:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 8023144:	881b      	ldrh	r3, [r3, #0]
 8023146:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 802314a:	fb01 2303 	mla	r3, r1, r3, r2
 802314e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8023152:	930b      	str	r3, [sp, #44]	; 0x2c
 8023154:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023156:	2b00      	cmp	r3, #0
 8023158:	f340 8082 	ble.w	8023260 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b0>
 802315c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802315e:	2b00      	cmp	r3, #0
 8023160:	dd7e      	ble.n	8023260 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b0>
 8023162:	2200      	movs	r2, #0
 8023164:	f04f 0e03 	mov.w	lr, #3
 8023168:	f04f 0c04 	mov.w	ip, #4
 802316c:	f1c9 07ff 	rsb	r7, r9, #255	; 0xff
 8023170:	009b      	lsls	r3, r3, #2
 8023172:	920d      	str	r2, [sp, #52]	; 0x34
 8023174:	b2bf      	uxth	r7, r7
 8023176:	930f      	str	r3, [sp, #60]	; 0x3c
 8023178:	fa1f f289 	uxth.w	r2, r9
 802317c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802317e:	4655      	mov	r5, sl
 8023180:	1d18      	adds	r0, r3, #4
 8023182:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023184:	eb0a 0603 	add.w	r6, sl, r3
 8023188:	e03e      	b.n	8023208 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 802318a:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 802318e:	f810 4c03 	ldrb.w	r4, [r0, #-3]
 8023192:	fb13 f307 	smulbb	r3, r3, r7
 8023196:	fb0b 3302 	mla	r3, fp, r2, r3
 802319a:	b29b      	uxth	r3, r3
 802319c:	f103 0b01 	add.w	fp, r3, #1
 80231a0:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 80231a4:	121b      	asrs	r3, r3, #8
 80231a6:	fb14 f407 	smulbb	r4, r4, r7
 80231aa:	f800 3c04 	strb.w	r3, [r0, #-4]
 80231ae:	784b      	ldrb	r3, [r1, #1]
 80231b0:	f810 bc02 	ldrb.w	fp, [r0, #-2]
 80231b4:	fb03 4302 	mla	r3, r3, r2, r4
 80231b8:	b29b      	uxth	r3, r3
 80231ba:	1c5c      	adds	r4, r3, #1
 80231bc:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80231c0:	121b      	asrs	r3, r3, #8
 80231c2:	fb1b fb07 	smulbb	fp, fp, r7
 80231c6:	f800 3c03 	strb.w	r3, [r0, #-3]
 80231ca:	788c      	ldrb	r4, [r1, #2]
 80231cc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80231d0:	fb04 b402 	mla	r4, r4, r2, fp
 80231d4:	b2a4      	uxth	r4, r4
 80231d6:	f104 0b01 	add.w	fp, r4, #1
 80231da:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80231de:	1224      	asrs	r4, r4, #8
 80231e0:	fb13 fb07 	smulbb	fp, r3, r7
 80231e4:	f800 4c02 	strb.w	r4, [r0, #-2]
 80231e8:	78cb      	ldrb	r3, [r1, #3]
 80231ea:	42ae      	cmp	r6, r5
 80231ec:	fb03 b302 	mla	r3, r3, r2, fp
 80231f0:	b29b      	uxth	r3, r3
 80231f2:	f103 0101 	add.w	r1, r3, #1
 80231f6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80231fa:	ea4f 2323 	mov.w	r3, r3, asr #8
 80231fe:	f800 3c01 	strb.w	r3, [r0, #-1]
 8023202:	f100 0004 	add.w	r0, r0, #4
 8023206:	d018      	beq.n	802323a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x18a>
 8023208:	f815 3b01 	ldrb.w	r3, [r5], #1
 802320c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023210:	fb1e c303 	smlabb	r3, lr, r3, ip
 8023214:	eb08 0103 	add.w	r1, r8, r3
 8023218:	f818 b003 	ldrb.w	fp, [r8, r3]
 802321c:	d1b5      	bne.n	802318a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xda>
 802321e:	f800 bc04 	strb.w	fp, [r0, #-4]
 8023222:	784b      	ldrb	r3, [r1, #1]
 8023224:	42ae      	cmp	r6, r5
 8023226:	f800 3c03 	strb.w	r3, [r0, #-3]
 802322a:	788b      	ldrb	r3, [r1, #2]
 802322c:	f100 0004 	add.w	r0, r0, #4
 8023230:	f800 9c05 	strb.w	r9, [r0, #-5]
 8023234:	f800 3c06 	strb.w	r3, [r0, #-6]
 8023238:	d1e6      	bne.n	8023208 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 802323a:	4b2d      	ldr	r3, [pc, #180]	; (80232f0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 802323c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802323e:	881b      	ldrh	r3, [r3, #0]
 8023240:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023242:	1a1b      	subs	r3, r3, r0
 8023244:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8023248:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802324a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802324c:	441c      	add	r4, r3
 802324e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023250:	3001      	adds	r0, #1
 8023252:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8023256:	4283      	cmp	r3, r0
 8023258:	900d      	str	r0, [sp, #52]	; 0x34
 802325a:	940b      	str	r4, [sp, #44]	; 0x2c
 802325c:	448a      	add	sl, r1
 802325e:	d18d      	bne.n	802317c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xcc>
 8023260:	4b20      	ldr	r3, [pc, #128]	; (80232e4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8023262:	6818      	ldr	r0, [r3, #0]
 8023264:	6803      	ldr	r3, [r0, #0]
 8023266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023268:	4798      	blx	r3
 802326a:	b015      	add	sp, #84	; 0x54
 802326c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023270:	4798      	blx	r3
 8023272:	2801      	cmp	r0, #1
 8023274:	d125      	bne.n	80232c2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x212>
 8023276:	4b1f      	ldr	r3, [pc, #124]	; (80232f4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8023278:	6818      	ldr	r0, [r3, #0]
 802327a:	b330      	cbz	r0, 80232ca <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 802327c:	2502      	movs	r5, #2
 802327e:	240b      	movs	r4, #11
 8023280:	2600      	movs	r6, #0
 8023282:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8023286:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 802328a:	9302      	str	r3, [sp, #8]
 802328c:	4b18      	ldr	r3, [pc, #96]	; (80232f0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 802328e:	9201      	str	r2, [sp, #4]
 8023290:	881b      	ldrh	r3, [r3, #0]
 8023292:	9508      	str	r5, [sp, #32]
 8023294:	9407      	str	r4, [sp, #28]
 8023296:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 802329a:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 802329e:	9306      	str	r3, [sp, #24]
 80232a0:	f8cd 9010 	str.w	r9, [sp, #16]
 80232a4:	4642      	mov	r2, r8
 80232a6:	4651      	mov	r1, sl
 80232a8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80232ac:	9605      	str	r6, [sp, #20]
 80232ae:	9503      	str	r5, [sp, #12]
 80232b0:	9400      	str	r4, [sp, #0]
 80232b2:	f7fb fa69 	bl	801e788 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80232b6:	b015      	add	sp, #84	; 0x54
 80232b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232bc:	4608      	mov	r0, r1
 80232be:	4798      	blx	r3
 80232c0:	e7d7      	b.n	8023272 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 80232c2:	4b08      	ldr	r3, [pc, #32]	; (80232e4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 80232c4:	6818      	ldr	r0, [r3, #0]
 80232c6:	6802      	ldr	r2, [r0, #0]
 80232c8:	e737      	b.n	802313a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 80232ca:	4b0b      	ldr	r3, [pc, #44]	; (80232f8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 80232cc:	4a0b      	ldr	r2, [pc, #44]	; (80232fc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 80232ce:	217c      	movs	r1, #124	; 0x7c
 80232d0:	480b      	ldr	r0, [pc, #44]	; (8023300 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 80232d2:	f006 f993 	bl	80295fc <__assert_func>
 80232d6:	4b0b      	ldr	r3, [pc, #44]	; (8023304 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 80232d8:	4a0b      	ldr	r2, [pc, #44]	; (8023308 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 80232da:	f240 5109 	movw	r1, #1289	; 0x509
 80232de:	480b      	ldr	r0, [pc, #44]	; (802330c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 80232e0:	f006 f98c 	bl	80295fc <__assert_func>
 80232e4:	201984f8 	.word	0x201984f8
 80232e8:	080026c5 	.word	0x080026c5
 80232ec:	08017cb1 	.word	0x08017cb1
 80232f0:	201984f2 	.word	0x201984f2
 80232f4:	20198728 	.word	0x20198728
 80232f8:	0802c4ac 	.word	0x0802c4ac
 80232fc:	0802ccb4 	.word	0x0802ccb4
 8023300:	0802c4d4 	.word	0x0802c4d4
 8023304:	0802c574 	.word	0x0802c574
 8023308:	0802d25c 	.word	0x0802d25c
 802330c:	0802c550 	.word	0x0802c550

08023310 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8023310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023314:	4617      	mov	r7, r2
 8023316:	8812      	ldrh	r2, [r2, #0]
 8023318:	b095      	sub	sp, #84	; 0x54
 802331a:	461c      	mov	r4, r3
 802331c:	f89d 907c 	ldrb.w	r9, [sp, #124]	; 0x7c
 8023320:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023322:	2a00      	cmp	r2, #0
 8023324:	f040 8112 	bne.w	802354c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>
 8023328:	4688      	mov	r8, r1
 802332a:	6820      	ldr	r0, [r4, #0]
 802332c:	6861      	ldr	r1, [r4, #4]
 802332e:	aa10      	add	r2, sp, #64	; 0x40
 8023330:	c203      	stmia	r2!, {r0, r1}
 8023332:	6818      	ldr	r0, [r3, #0]
 8023334:	6859      	ldr	r1, [r3, #4]
 8023336:	aa12      	add	r2, sp, #72	; 0x48
 8023338:	c203      	stmia	r2!, {r0, r1}
 802333a:	a810      	add	r0, sp, #64	; 0x40
 802333c:	f7f5 fc96 	bl	8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023340:	4621      	mov	r1, r4
 8023342:	a812      	add	r0, sp, #72	; 0x48
 8023344:	f7f5 fcba 	bl	8018cbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023348:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 802334c:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 8023350:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8023354:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8023358:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 802335c:	487f      	ldr	r0, [pc, #508]	; (802355c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 802335e:	fb11 4105 	smlabb	r1, r1, r5, r4
 8023362:	4422      	add	r2, r4
 8023364:	442b      	add	r3, r5
 8023366:	6800      	ldr	r0, [r0, #0]
 8023368:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 802336c:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8023370:	6802      	ldr	r2, [r0, #0]
 8023372:	4488      	add	r8, r1
 8023374:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8023378:	4c79      	ldr	r4, [pc, #484]	; (8023560 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 802337a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 802337e:	910c      	str	r1, [sp, #48]	; 0x30
 8023380:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8023384:	42a3      	cmp	r3, r4
 8023386:	910e      	str	r1, [sp, #56]	; 0x38
 8023388:	f040 80ab 	bne.w	80234e2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d2>
 802338c:	6841      	ldr	r1, [r0, #4]
 802338e:	4c75      	ldr	r4, [pc, #468]	; (8023564 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8023390:	680b      	ldr	r3, [r1, #0]
 8023392:	699b      	ldr	r3, [r3, #24]
 8023394:	42a3      	cmp	r3, r4
 8023396:	f040 80cb 	bne.w	8023530 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x220>
 802339a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 802339c:	4798      	blx	r3
 802339e:	4b72      	ldr	r3, [pc, #456]	; (8023568 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 80233a0:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 80233a4:	881b      	ldrh	r3, [r3, #0]
 80233a6:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 80233aa:	fb01 2303 	mla	r3, r1, r3, r2
 80233ae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80233b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80233b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80233b6:	2b00      	cmp	r3, #0
 80233b8:	f340 808b 	ble.w	80234d2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 80233bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80233be:	2b00      	cmp	r3, #0
 80233c0:	f340 8087 	ble.w	80234d2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 80233c4:	2200      	movs	r2, #0
 80233c6:	f04f 0c04 	mov.w	ip, #4
 80233ca:	009b      	lsls	r3, r3, #2
 80233cc:	920d      	str	r2, [sp, #52]	; 0x34
 80233ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80233d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80233d2:	4645      	mov	r5, r8
 80233d4:	1d1c      	adds	r4, r3, #4
 80233d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80233d8:	eb08 0e03 	add.w	lr, r8, r3
 80233dc:	e048      	b.n	8023470 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 80233de:	fb09 f303 	mul.w	r3, r9, r3
 80233e2:	1c5a      	adds	r2, r3, #1
 80233e4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80233e8:	121b      	asrs	r3, r3, #8
 80233ea:	b2d8      	uxtb	r0, r3
 80233ec:	43c1      	mvns	r1, r0
 80233ee:	b29b      	uxth	r3, r3
 80233f0:	fb1a f203 	smulbb	r2, sl, r3
 80233f4:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 80233f8:	b2c9      	uxtb	r1, r1
 80233fa:	fb0a 2a01 	mla	sl, sl, r1, r2
 80233fe:	fa1f fa8a 	uxth.w	sl, sl
 8023402:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 8023406:	f10a 0b01 	add.w	fp, sl, #1
 802340a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 802340e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023412:	fb12 fb01 	smulbb	fp, r2, r1
 8023416:	f804 ac04 	strb.w	sl, [r4, #-4]
 802341a:	7872      	ldrb	r2, [r6, #1]
 802341c:	f814 ac02 	ldrb.w	sl, [r4, #-2]
 8023420:	fb02 b203 	mla	r2, r2, r3, fp
 8023424:	b292      	uxth	r2, r2
 8023426:	f102 0b01 	add.w	fp, r2, #1
 802342a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802342e:	fb1a fa01 	smulbb	sl, sl, r1
 8023432:	1212      	asrs	r2, r2, #8
 8023434:	f804 2c03 	strb.w	r2, [r4, #-3]
 8023438:	78b1      	ldrb	r1, [r6, #2]
 802343a:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 802343e:	fb01 a103 	mla	r1, r1, r3, sl
 8023442:	fb12 f303 	smulbb	r3, r2, r3
 8023446:	b289      	uxth	r1, r1
 8023448:	b29b      	uxth	r3, r3
 802344a:	f101 0a01 	add.w	sl, r1, #1
 802344e:	1c5e      	adds	r6, r3, #1
 8023450:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 8023454:	4402      	add	r2, r0
 8023456:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 802345a:	1209      	asrs	r1, r1, #8
 802345c:	eba2 2313 	sub.w	r3, r2, r3, lsr #8
 8023460:	f804 1c02 	strb.w	r1, [r4, #-2]
 8023464:	f804 3c01 	strb.w	r3, [r4, #-1]
 8023468:	45ae      	cmp	lr, r5
 802346a:	f104 0404 	add.w	r4, r4, #4
 802346e:	d01c      	beq.n	80234aa <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x19a>
 8023470:	f815 2b01 	ldrb.w	r2, [r5], #1
 8023474:	fb1c c202 	smlabb	r2, ip, r2, ip
 8023478:	18be      	adds	r6, r7, r2
 802347a:	78f3      	ldrb	r3, [r6, #3]
 802347c:	2b00      	cmp	r3, #0
 802347e:	d0f3      	beq.n	8023468 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8023480:	2bff      	cmp	r3, #255	; 0xff
 8023482:	f817 a002 	ldrb.w	sl, [r7, r2]
 8023486:	d1aa      	bne.n	80233de <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8023488:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802348c:	d1a7      	bne.n	80233de <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xce>
 802348e:	f804 ac04 	strb.w	sl, [r4, #-4]
 8023492:	7873      	ldrb	r3, [r6, #1]
 8023494:	45ae      	cmp	lr, r5
 8023496:	f804 3c03 	strb.w	r3, [r4, #-3]
 802349a:	78b3      	ldrb	r3, [r6, #2]
 802349c:	f104 0404 	add.w	r4, r4, #4
 80234a0:	f804 9c05 	strb.w	r9, [r4, #-5]
 80234a4:	f804 3c06 	strb.w	r3, [r4, #-6]
 80234a8:	d1e2      	bne.n	8023470 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 80234aa:	4b2f      	ldr	r3, [pc, #188]	; (8023568 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 80234ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80234ae:	881b      	ldrh	r3, [r3, #0]
 80234b0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80234b2:	1a5b      	subs	r3, r3, r1
 80234b4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80234b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80234ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80234bc:	4418      	add	r0, r3
 80234be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80234c0:	3101      	adds	r1, #1
 80234c2:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 80234c6:	428b      	cmp	r3, r1
 80234c8:	910d      	str	r1, [sp, #52]	; 0x34
 80234ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80234cc:	4490      	add	r8, r2
 80234ce:	f47f af7f 	bne.w	80233d0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xc0>
 80234d2:	4b22      	ldr	r3, [pc, #136]	; (802355c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 80234d4:	6818      	ldr	r0, [r3, #0]
 80234d6:	6803      	ldr	r3, [r0, #0]
 80234d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80234da:	4798      	blx	r3
 80234dc:	b015      	add	sp, #84	; 0x54
 80234de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234e2:	4798      	blx	r3
 80234e4:	4603      	mov	r3, r0
 80234e6:	2b01      	cmp	r3, #1
 80234e8:	d126      	bne.n	8023538 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x228>
 80234ea:	4a20      	ldr	r2, [pc, #128]	; (802356c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 80234ec:	6810      	ldr	r0, [r2, #0]
 80234ee:	b338      	cbz	r0, 8023540 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x230>
 80234f0:	f04f 0c02 	mov.w	ip, #2
 80234f4:	260b      	movs	r6, #11
 80234f6:	4a1c      	ldr	r2, [pc, #112]	; (8023568 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 80234f8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80234fc:	8814      	ldrh	r4, [r2, #0]
 80234fe:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8023502:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8023506:	9406      	str	r4, [sp, #24]
 8023508:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 802350c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8023510:	9305      	str	r3, [sp, #20]
 8023512:	f8cd 9010 	str.w	r9, [sp, #16]
 8023516:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 802351a:	463a      	mov	r2, r7
 802351c:	4641      	mov	r1, r8
 802351e:	e9cd 6c07 	strd	r6, ip, [sp, #28]
 8023522:	9503      	str	r5, [sp, #12]
 8023524:	9400      	str	r4, [sp, #0]
 8023526:	f7fb f92f 	bl	801e788 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802352a:	b015      	add	sp, #84	; 0x54
 802352c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023530:	4608      	mov	r0, r1
 8023532:	4798      	blx	r3
 8023534:	4603      	mov	r3, r0
 8023536:	e7d6      	b.n	80234e6 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d6>
 8023538:	4b08      	ldr	r3, [pc, #32]	; (802355c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 802353a:	6818      	ldr	r0, [r3, #0]
 802353c:	6802      	ldr	r2, [r0, #0]
 802353e:	e72c      	b.n	802339a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8023540:	4b0b      	ldr	r3, [pc, #44]	; (8023570 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x260>)
 8023542:	4a0c      	ldr	r2, [pc, #48]	; (8023574 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x264>)
 8023544:	217c      	movs	r1, #124	; 0x7c
 8023546:	480c      	ldr	r0, [pc, #48]	; (8023578 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x268>)
 8023548:	f006 f858 	bl	80295fc <__assert_func>
 802354c:	4b0b      	ldr	r3, [pc, #44]	; (802357c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x26c>)
 802354e:	4a0c      	ldr	r2, [pc, #48]	; (8023580 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x270>)
 8023550:	f240 514d 	movw	r1, #1357	; 0x54d
 8023554:	480b      	ldr	r0, [pc, #44]	; (8023584 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x274>)
 8023556:	f006 f851 	bl	80295fc <__assert_func>
 802355a:	bf00      	nop
 802355c:	201984f8 	.word	0x201984f8
 8023560:	080026c5 	.word	0x080026c5
 8023564:	08017cb1 	.word	0x08017cb1
 8023568:	201984f2 	.word	0x201984f2
 802356c:	20198728 	.word	0x20198728
 8023570:	0802c4ac 	.word	0x0802c4ac
 8023574:	0802ccb4 	.word	0x0802ccb4
 8023578:	0802c4d4 	.word	0x0802c4d4
 802357c:	0802c5c4 	.word	0x0802c5c4
 8023580:	0802d3fc 	.word	0x0802d3fc
 8023584:	0802c550 	.word	0x0802c550

08023588 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8023588:	b570      	push	{r4, r5, r6, lr}
 802358a:	7814      	ldrb	r4, [r2, #0]
 802358c:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8023590:	2c01      	cmp	r4, #1
 8023592:	d00e      	beq.n	80235b2 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8023594:	d302      	bcc.n	802359c <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x14>
 8023596:	2c02      	cmp	r4, #2
 8023598:	d02a      	beq.n	80235f0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x68>
 802359a:	bd70      	pop	{r4, r5, r6, pc}
 802359c:	7a04      	ldrb	r4, [r0, #8]
 802359e:	2c01      	cmp	r4, #1
 80235a0:	d021      	beq.n	80235e6 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x5e>
 80235a2:	d311      	bcc.n	80235c8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80235a4:	2c02      	cmp	r4, #2
 80235a6:	d12a      	bne.n	80235fe <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x76>
 80235a8:	9505      	str	r5, [sp, #20]
 80235aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80235ae:	f7ff beaf 	b.w	8023310 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>
 80235b2:	7a04      	ldrb	r4, [r0, #8]
 80235b4:	2c01      	cmp	r4, #1
 80235b6:	d011      	beq.n	80235dc <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 80235b8:	d30b      	bcc.n	80235d2 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x4a>
 80235ba:	2c02      	cmp	r4, #2
 80235bc:	d126      	bne.n	802360c <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 80235be:	9505      	str	r5, [sp, #20]
 80235c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80235c4:	f7ff bd74 	b.w	80230b0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>
 80235c8:	9505      	str	r5, [sp, #20]
 80235ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80235ce:	f7ff b88f 	b.w	80226f0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>
 80235d2:	9505      	str	r5, [sp, #20]
 80235d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80235d8:	f7ff b9be 	b.w	8022958 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>
 80235dc:	9505      	str	r5, [sp, #20]
 80235de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80235e2:	f7ff bc35 	b.w	8022e50 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>
 80235e6:	9505      	str	r5, [sp, #20]
 80235e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80235ec:	f7ff bb0c 	b.w	8022c08 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>
 80235f0:	4b0a      	ldr	r3, [pc, #40]	; (802361c <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x94>)
 80235f2:	4a0b      	ldr	r2, [pc, #44]	; (8023620 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 80235f4:	f240 3199 	movw	r1, #921	; 0x399
 80235f8:	480a      	ldr	r0, [pc, #40]	; (8023624 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 80235fa:	f005 ffff 	bl	80295fc <__assert_func>
 80235fe:	4b0a      	ldr	r3, [pc, #40]	; (8023628 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>)
 8023600:	4a07      	ldr	r2, [pc, #28]	; (8023620 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 8023602:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 8023606:	4807      	ldr	r0, [pc, #28]	; (8023624 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 8023608:	f005 fff8 	bl	80295fc <__assert_func>
 802360c:	4b06      	ldr	r3, [pc, #24]	; (8023628 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>)
 802360e:	4a04      	ldr	r2, [pc, #16]	; (8023620 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 8023610:	f240 31b9 	movw	r1, #953	; 0x3b9
 8023614:	4803      	ldr	r0, [pc, #12]	; (8023624 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 8023616:	f005 fff1 	bl	80295fc <__assert_func>
 802361a:	bf00      	nop
 802361c:	0802c32c 	.word	0x0802c32c
 8023620:	0802ccf4 	.word	0x0802ccf4
 8023624:	0802c550 	.word	0x0802c550
 8023628:	0802c368 	.word	0x0802c368

0802362c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 802362c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023630:	b089      	sub	sp, #36	; 0x24
 8023632:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
 8023636:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023638:	b13c      	cbz	r4, 802364a <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 802363a:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 802363e:	2e00      	cmp	r6, #0
 8023640:	dd03      	ble.n	802364a <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 8023642:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 8023646:	2e00      	cmp	r6, #0
 8023648:	dc02      	bgt.n	8023650 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x24>
 802364a:	b009      	add	sp, #36	; 0x24
 802364c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023650:	f04f 0800 	mov.w	r8, #0
 8023654:	4606      	mov	r6, r0
 8023656:	f362 080f 	bfi	r8, r2, #0, #16
 802365a:	4608      	mov	r0, r1
 802365c:	460f      	mov	r7, r1
 802365e:	f363 481f 	bfi	r8, r3, #16, #16
 8023662:	f7f8 f8cb 	bl	801b7fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023666:	4681      	mov	r9, r0
 8023668:	4638      	mov	r0, r7
 802366a:	f7f8 f8fb 	bl	801b864 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802366e:	2300      	movs	r3, #0
 8023670:	f369 030f 	bfi	r3, r9, #0, #16
 8023674:	f360 431f 	bfi	r3, r0, #16, #16
 8023678:	4638      	mov	r0, r7
 802367a:	e9cd 8302 	strd	r8, r3, [sp, #8]
 802367e:	f7f8 f9a9 	bl	801b9d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023682:	280b      	cmp	r0, #11
 8023684:	d023      	beq.n	80236ce <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 8023686:	aa04      	add	r2, sp, #16
 8023688:	f10d 0808 	add.w	r8, sp, #8
 802368c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023690:	e882 0003 	stmia.w	r2, {r0, r1}
 8023694:	6828      	ldr	r0, [r5, #0]
 8023696:	6869      	ldr	r1, [r5, #4]
 8023698:	ab06      	add	r3, sp, #24
 802369a:	c303      	stmia	r3!, {r0, r1}
 802369c:	4610      	mov	r0, r2
 802369e:	f7f5 fae5 	bl	8018c6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80236a2:	4641      	mov	r1, r8
 80236a4:	a806      	add	r0, sp, #24
 80236a6:	f7f5 fb09 	bl	8018cbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80236aa:	4638      	mov	r0, r7
 80236ac:	f7f8 f90e 	bl	801b8cc <_ZNK8touchgfx6Bitmap7getDataEv>
 80236b0:	4680      	mov	r8, r0
 80236b2:	4638      	mov	r0, r7
 80236b4:	f7f8 f98e 	bl	801b9d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80236b8:	280d      	cmp	r0, #13
 80236ba:	d871      	bhi.n	80237a0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 80236bc:	e8df f000 	tbb	[pc, r0]
 80236c0:	70176163 	.word	0x70176163
 80236c4:	70707070 	.word	0x70707070
 80236c8:	70707070 	.word	0x70707070
 80236cc:	6570      	.short	0x6570
 80236ce:	4638      	mov	r0, r7
 80236d0:	f7f8 f8fc 	bl	801b8cc <_ZNK8touchgfx6Bitmap7getDataEv>
 80236d4:	4680      	mov	r8, r0
 80236d6:	4638      	mov	r0, r7
 80236d8:	f7f8 f928 	bl	801b92c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80236dc:	4641      	mov	r1, r8
 80236de:	4602      	mov	r2, r0
 80236e0:	e9cd 5400 	strd	r5, r4, [sp]
 80236e4:	4630      	mov	r0, r6
 80236e6:	ab02      	add	r3, sp, #8
 80236e8:	f7ff ff4e 	bl	8023588 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80236ec:	e7ad      	b.n	802364a <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 80236ee:	2710      	movs	r7, #16
 80236f0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80236f4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80236f8:	4d2c      	ldr	r5, [pc, #176]	; (80237ac <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>)
 80236fa:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80236fe:	440a      	add	r2, r1
 8023700:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8023704:	6828      	ldr	r0, [r5, #0]
 8023706:	440b      	add	r3, r1
 8023708:	f8ad 2018 	strh.w	r2, [sp, #24]
 802370c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8023710:	2800      	cmp	r0, #0
 8023712:	d03f      	beq.n	8023794 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x168>
 8023714:	f7fb f810 	bl	801e738 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8023718:	6833      	ldr	r3, [r6, #0]
 802371a:	4630      	mov	r0, r6
 802371c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802371e:	4798      	blx	r3
 8023720:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8023724:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8023728:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 802372c:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8023730:	f7f8 fd0c 	bl	801c14c <nema_set_clip>
 8023734:	2200      	movs	r2, #0
 8023736:	4623      	mov	r3, r4
 8023738:	2600      	movs	r6, #0
 802373a:	f04f 34ff 	mov.w	r4, #4294967295
 802373e:	4611      	mov	r1, r2
 8023740:	4610      	mov	r0, r2
 8023742:	f7f8 fd37 	bl	801c1b4 <nema_rgba>
 8023746:	f7fa ff0f 	bl	801e568 <nema_set_const_color>
 802374a:	f04f 33ff 	mov.w	r3, #4294967295
 802374e:	2201      	movs	r2, #1
 8023750:	2100      	movs	r1, #0
 8023752:	4817      	ldr	r0, [pc, #92]	; (80237b0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x184>)
 8023754:	f7fa fb42 	bl	801dddc <nema_set_blend>
 8023758:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 802375c:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8023760:	463b      	mov	r3, r7
 8023762:	4640      	mov	r0, r8
 8023764:	e9cd 4600 	strd	r4, r6, [sp]
 8023768:	f7f8 fd2c 	bl	801c1c4 <nema_bind_src_tex>
 802376c:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8023770:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8023774:	f7f8 fe66 	bl	801c444 <nema_blit>
 8023778:	6828      	ldr	r0, [r5, #0]
 802377a:	b158      	cbz	r0, 8023794 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x168>
 802377c:	f7fa fffc 	bl	801e778 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8023780:	e763      	b.n	802364a <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 8023782:	2739      	movs	r7, #57	; 0x39
 8023784:	e7b4      	b.n	80236f0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8023786:	2704      	movs	r7, #4
 8023788:	e7b2      	b.n	80236f0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 802378a:	4638      	mov	r0, r7
 802378c:	f7f8 f8ce 	bl	801b92c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8023790:	7807      	ldrb	r7, [r0, #0]
 8023792:	e7ad      	b.n	80236f0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8023794:	4b07      	ldr	r3, [pc, #28]	; (80237b4 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x188>)
 8023796:	4a08      	ldr	r2, [pc, #32]	; (80237b8 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>)
 8023798:	217c      	movs	r1, #124	; 0x7c
 802379a:	4808      	ldr	r0, [pc, #32]	; (80237bc <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x190>)
 802379c:	f005 ff2e 	bl	80295fc <__assert_func>
 80237a0:	4b07      	ldr	r3, [pc, #28]	; (80237c0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x194>)
 80237a2:	4a08      	ldr	r2, [pc, #32]	; (80237c4 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x198>)
 80237a4:	2174      	movs	r1, #116	; 0x74
 80237a6:	4808      	ldr	r0, [pc, #32]	; (80237c8 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x19c>)
 80237a8:	f005 ff28 	bl	80295fc <__assert_func>
 80237ac:	20198728 	.word	0x20198728
 80237b0:	08000504 	.word	0x08000504
 80237b4:	0802c4ac 	.word	0x0802c4ac
 80237b8:	0802ccb4 	.word	0x0802ccb4
 80237bc:	0802c4d4 	.word	0x0802c4d4
 80237c0:	0802c3a4 	.word	0x0802c3a4
 80237c4:	0802cde8 	.word	0x0802cde8
 80237c8:	0802c550 	.word	0x0802c550

080237cc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80237cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237d0:	b089      	sub	sp, #36	; 0x24
 80237d2:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80237d4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80237d6:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 80237da:	9104      	str	r1, [sp, #16]
 80237dc:	8809      	ldrh	r1, [r1, #0]
 80237de:	fb07 6c04 	mla	ip, r7, r4, r6
 80237e2:	10c8      	asrs	r0, r1, #3
 80237e4:	120d      	asrs	r5, r1, #8
 80237e6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80237ea:	f005 0af8 	and.w	sl, r5, #248	; 0xf8
 80237ee:	9002      	str	r0, [sp, #8]
 80237f0:	00c9      	lsls	r1, r1, #3
 80237f2:	0200      	lsls	r0, r0, #8
 80237f4:	b2c9      	uxtb	r1, r1
 80237f6:	4690      	mov	r8, r2
 80237f8:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80237fc:	469e      	mov	lr, r3
 80237fe:	eb02 030c 	add.w	r3, r2, ip
 8023802:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 8023806:	4308      	orrs	r0, r1
 8023808:	2f00      	cmp	r7, #0
 802380a:	9103      	str	r1, [sp, #12]
 802380c:	9305      	str	r3, [sp, #20]
 802380e:	9007      	str	r0, [sp, #28]
 8023810:	f107 0501 	add.w	r5, r7, #1
 8023814:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	; 0x4c
 8023818:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 802381c:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8023820:	9200      	str	r2, [sp, #0]
 8023822:	db02      	blt.n	802382a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x5e>
 8023824:	42be      	cmp	r6, r7
 8023826:	f300 80a3 	bgt.w	8023970 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1a4>
 802382a:	fa5f fb80 	uxtb.w	fp, r0
 802382e:	af07      	add	r7, sp, #28
 8023830:	465a      	mov	r2, fp
 8023832:	46b8      	mov	r8, r7
 8023834:	2d00      	cmp	r5, #0
 8023836:	db01      	blt.n	802383c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x70>
 8023838:	42ae      	cmp	r6, r5
 802383a:	dc79      	bgt.n	8023930 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x164>
 802383c:	f10d 0e1c 	add.w	lr, sp, #28
 8023840:	46f1      	mov	r9, lr
 8023842:	b2c0      	uxtb	r0, r0
 8023844:	9001      	str	r0, [sp, #4]
 8023846:	2b0f      	cmp	r3, #15
 8023848:	f200 80ce 	bhi.w	80239e8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 802384c:	290f      	cmp	r1, #15
 802384e:	f200 80cb 	bhi.w	80239e8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 8023852:	9c00      	ldr	r4, [sp, #0]
 8023854:	b29b      	uxth	r3, r3
 8023856:	43e4      	mvns	r4, r4
 8023858:	b289      	uxth	r1, r1
 802385a:	fb03 f501 	mul.w	r5, r3, r1
 802385e:	011b      	lsls	r3, r3, #4
 8023860:	1b5e      	subs	r6, r3, r5
 8023862:	b2b6      	uxth	r6, r6
 8023864:	f897 c002 	ldrb.w	ip, [r7, #2]
 8023868:	ebc5 1101 	rsb	r1, r5, r1, lsl #4
 802386c:	787f      	ldrb	r7, [r7, #1]
 802386e:	fb06 f202 	mul.w	r2, r6, r2
 8023872:	b289      	uxth	r1, r1
 8023874:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8023878:	fb06 fc0c 	mul.w	ip, r6, ip
 802387c:	1a5b      	subs	r3, r3, r1
 802387e:	fb06 f607 	mul.w	r6, r6, r7
 8023882:	b29b      	uxth	r3, r3
 8023884:	f898 7001 	ldrb.w	r7, [r8, #1]
 8023888:	fb03 220b 	mla	r2, r3, fp, r2
 802388c:	f898 b002 	ldrb.w	fp, [r8, #2]
 8023890:	fb03 6607 	mla	r6, r3, r7, r6
 8023894:	fb03 cc0b 	mla	ip, r3, fp, ip
 8023898:	f899 8002 	ldrb.w	r8, [r9, #2]
 802389c:	f899 7001 	ldrb.w	r7, [r9, #1]
 80238a0:	9b01      	ldr	r3, [sp, #4]
 80238a2:	fb01 cc08 	mla	ip, r1, r8, ip
 80238a6:	fb01 2203 	mla	r2, r1, r3, r2
 80238aa:	fb01 6607 	mla	r6, r1, r7, r6
 80238ae:	f89e 8002 	ldrb.w	r8, [lr, #2]
 80238b2:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80238b6:	9b03      	ldr	r3, [sp, #12]
 80238b8:	9902      	ldr	r1, [sp, #8]
 80238ba:	fb05 2200 	mla	r2, r5, r0, r2
 80238be:	b2e4      	uxtb	r4, r4
 80238c0:	fb05 cc08 	mla	ip, r5, r8, ip
 80238c4:	fb05 6607 	mla	r6, r5, r7, r6
 80238c8:	fb13 f004 	smulbb	r0, r3, r4
 80238cc:	fb1a f304 	smulbb	r3, sl, r4
 80238d0:	fb11 f404 	smulbb	r4, r1, r4
 80238d4:	f8bd e000 	ldrh.w	lr, [sp]
 80238d8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80238dc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80238e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80238e4:	fb02 020e 	mla	r2, r2, lr, r0
 80238e8:	fb0c 330e 	mla	r3, ip, lr, r3
 80238ec:	fb06 4e0e 	mla	lr, r6, lr, r4
 80238f0:	fa1f fc83 	uxth.w	ip, r3
 80238f4:	b292      	uxth	r2, r2
 80238f6:	fa1f fe8e 	uxth.w	lr, lr
 80238fa:	f10c 0301 	add.w	r3, ip, #1
 80238fe:	1c50      	adds	r0, r2, #1
 8023900:	f10e 0101 	add.w	r1, lr, #1
 8023904:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023908:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802390c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8023910:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023914:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023918:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802391c:	4313      	orrs	r3, r2
 802391e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8023922:	9a04      	ldr	r2, [sp, #16]
 8023924:	ea43 030e 	orr.w	r3, r3, lr
 8023928:	8013      	strh	r3, [r2, #0]
 802392a:	b009      	add	sp, #36	; 0x24
 802392c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023930:	2900      	cmp	r1, #0
 8023932:	d036      	beq.n	80239a2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d6>
 8023934:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023936:	2d00      	cmp	r5, #0
 8023938:	db45      	blt.n	80239c6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1fa>
 802393a:	42ac      	cmp	r4, r5
 802393c:	dd43      	ble.n	80239c6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1fa>
 802393e:	9d05      	ldr	r5, [sp, #20]
 8023940:	f815 9004 	ldrb.w	r9, [r5, r4]
 8023944:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023948:	44f1      	add	r9, lr
 802394a:	f899 5000 	ldrb.w	r5, [r9]
 802394e:	9501      	str	r5, [sp, #4]
 8023950:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023952:	3501      	adds	r5, #1
 8023954:	d433      	bmi.n	80239be <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1f2>
 8023956:	42ac      	cmp	r4, r5
 8023958:	dd31      	ble.n	80239be <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1f2>
 802395a:	2b00      	cmp	r3, #0
 802395c:	d040      	beq.n	80239e0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x214>
 802395e:	9805      	ldr	r0, [sp, #20]
 8023960:	4420      	add	r0, r4
 8023962:	7840      	ldrb	r0, [r0, #1]
 8023964:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8023968:	f81e 0004 	ldrb.w	r0, [lr, r4]
 802396c:	44a6      	add	lr, r4
 802396e:	e76a      	b.n	8023846 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x7a>
 8023970:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023972:	2a00      	cmp	r2, #0
 8023974:	db01      	blt.n	802397a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ae>
 8023976:	4294      	cmp	r4, r2
 8023978:	dc1b      	bgt.n	80239b2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1e6>
 802397a:	f10d 081c 	add.w	r8, sp, #28
 802397e:	3201      	adds	r2, #1
 8023980:	f898 b000 	ldrb.w	fp, [r8]
 8023984:	d40a      	bmi.n	802399c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>
 8023986:	4294      	cmp	r4, r2
 8023988:	dd08      	ble.n	802399c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>
 802398a:	b1fb      	cbz	r3, 80239cc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x200>
 802398c:	9a05      	ldr	r2, [sp, #20]
 802398e:	7857      	ldrb	r7, [r2, #1]
 8023990:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023994:	f81e 2007 	ldrb.w	r2, [lr, r7]
 8023998:	4477      	add	r7, lr
 802399a:	e74b      	b.n	8023834 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x68>
 802399c:	b2c2      	uxtb	r2, r0
 802399e:	af07      	add	r7, sp, #28
 80239a0:	e748      	b.n	8023834 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x68>
 80239a2:	b2c0      	uxtb	r0, r0
 80239a4:	2b0f      	cmp	r3, #15
 80239a6:	9001      	str	r0, [sp, #4]
 80239a8:	d81e      	bhi.n	80239e8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 80239aa:	f10d 0e1c 	add.w	lr, sp, #28
 80239ae:	46f1      	mov	r9, lr
 80239b0:	e74f      	b.n	8023852 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x86>
 80239b2:	f818 800c 	ldrb.w	r8, [r8, ip]
 80239b6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80239ba:	44f0      	add	r8, lr
 80239bc:	e7df      	b.n	802397e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1b2>
 80239be:	b2c0      	uxtb	r0, r0
 80239c0:	f10d 0e1c 	add.w	lr, sp, #28
 80239c4:	e73f      	b.n	8023846 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x7a>
 80239c6:	f10d 091c 	add.w	r9, sp, #28
 80239ca:	e7be      	b.n	802394a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x17e>
 80239cc:	2d00      	cmp	r5, #0
 80239ce:	b2c2      	uxtb	r2, r0
 80239d0:	af07      	add	r7, sp, #28
 80239d2:	f6bf af31 	bge.w	8023838 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 80239d6:	46be      	mov	lr, r7
 80239d8:	46b9      	mov	r9, r7
 80239da:	4610      	mov	r0, r2
 80239dc:	9201      	str	r2, [sp, #4]
 80239de:	e735      	b.n	802384c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 80239e0:	b2c0      	uxtb	r0, r0
 80239e2:	f10d 0e1c 	add.w	lr, sp, #28
 80239e6:	e731      	b.n	802384c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 80239e8:	4b03      	ldr	r3, [pc, #12]	; (80239f8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x22c>)
 80239ea:	4a04      	ldr	r2, [pc, #16]	; (80239fc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x230>)
 80239ec:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80239f0:	4803      	ldr	r0, [pc, #12]	; (8023a00 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x234>)
 80239f2:	f005 fe03 	bl	80295fc <__assert_func>
 80239f6:	bf00      	nop
 80239f8:	0802c8e4 	.word	0x0802c8e4
 80239fc:	0802cf5c 	.word	0x0802cf5c
 8023a00:	0802ca68 	.word	0x0802ca68

08023a04 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a08:	ed2d 8b08 	vpush	{d8-d11}
 8023a0c:	b095      	sub	sp, #84	; 0x54
 8023a0e:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8023a12:	e9dd 512b 	ldrd	r5, r1, [sp, #172]	; 0xac
 8023a16:	e9dd b827 	ldrd	fp, r8, [sp, #156]	; 0x9c
 8023a1a:	686c      	ldr	r4, [r5, #4]
 8023a1c:	461a      	mov	r2, r3
 8023a1e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023a20:	f89d 60bc 	ldrb.w	r6, [sp, #188]	; 0xbc
 8023a24:	fb04 1303 	mla	r3, r4, r3, r1
 8023a28:	682c      	ldr	r4, [r5, #0]
 8023a2a:	e9cd 0612 	strd	r0, r6, [sp, #72]	; 0x48
 8023a2e:	43f0      	mvns	r0, r6
 8023a30:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8023a34:	eeb0 aa40 	vmov.f32	s20, s0
 8023a38:	eef0 9a60 	vmov.f32	s19, s1
 8023a3c:	eeb0 9a41 	vmov.f32	s18, s2
 8023a40:	eef0 8a62 	vmov.f32	s17, s5
 8023a44:	eeb0 8a43 	vmov.f32	s16, s6
 8023a48:	eef0 ba44 	vmov.f32	s23, s8
 8023a4c:	eeb0 ba64 	vmov.f32	s22, s9
 8023a50:	eef0 aa45 	vmov.f32	s21, s10
 8023a54:	469a      	mov	sl, r3
 8023a56:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8023a58:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8023a5a:	6849      	ldr	r1, [r1, #4]
 8023a5c:	682d      	ldr	r5, [r5, #0]
 8023a5e:	3104      	adds	r1, #4
 8023a60:	b2c0      	uxtb	r0, r0
 8023a62:	9108      	str	r1, [sp, #32]
 8023a64:	b2b1      	uxth	r1, r6
 8023a66:	950b      	str	r5, [sp, #44]	; 0x2c
 8023a68:	900c      	str	r0, [sp, #48]	; 0x30
 8023a6a:	910d      	str	r1, [sp, #52]	; 0x34
 8023a6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023a6e:	2b00      	cmp	r3, #0
 8023a70:	dc02      	bgt.n	8023a78 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023a72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023a74:	2b00      	cmp	r3, #0
 8023a76:	dd65      	ble.n	8023b44 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8023a78:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023a7a:	2a00      	cmp	r2, #0
 8023a7c:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 8023a80:	b225      	sxth	r5, r4
 8023a82:	fa0f f78e 	sxth.w	r7, lr
 8023a86:	f340 8233 	ble.w	8023ef0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8023a8a:	1e6e      	subs	r6, r5, #1
 8023a8c:	f107 3cff 	add.w	ip, r7, #4294967295
 8023a90:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8023a94:	e9dd e929 	ldrd	lr, r9, [sp, #164]	; 0xa4
 8023a98:	ea5f 432b 	movs.w	r3, fp, asr #16
 8023a9c:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023aa0:	d405      	bmi.n	8023aae <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023aa2:	42b3      	cmp	r3, r6
 8023aa4:	da03      	bge.n	8023aae <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023aa6:	2900      	cmp	r1, #0
 8023aa8:	db01      	blt.n	8023aae <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023aaa:	4561      	cmp	r1, ip
 8023aac:	db4f      	blt.n	8023b4e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8023aae:	1c58      	adds	r0, r3, #1
 8023ab0:	d406      	bmi.n	8023ac0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8023ab2:	42a8      	cmp	r0, r5
 8023ab4:	dc04      	bgt.n	8023ac0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8023ab6:	1c48      	adds	r0, r1, #1
 8023ab8:	d402      	bmi.n	8023ac0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8023aba:	42b8      	cmp	r0, r7
 8023abc:	f340 817e 	ble.w	8023dbc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8023ac0:	3a01      	subs	r2, #1
 8023ac2:	44f3      	add	fp, lr
 8023ac4:	44c8      	add	r8, r9
 8023ac6:	f10a 0a02 	add.w	sl, sl, #2
 8023aca:	d1e5      	bne.n	8023a98 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023acc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023ace:	2b00      	cmp	r3, #0
 8023ad0:	dd38      	ble.n	8023b44 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8023ad2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023ad6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023ada:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023ade:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023ae2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023ae6:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8023aea:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023aee:	ee76 6a68 	vsub.f32	s13, s12, s17
 8023af2:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8023af6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023afa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023afe:	ee16 2a90 	vmov	r2, s13
 8023b02:	3b01      	subs	r3, #1
 8023b04:	930e      	str	r3, [sp, #56]	; 0x38
 8023b06:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023b08:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b0c:	ee17 2a10 	vmov	r2, s14
 8023b10:	eeb0 7a48 	vmov.f32	s14, s16
 8023b14:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023b18:	ee17 8a10 	vmov	r8, s14
 8023b1c:	eeb0 7a68 	vmov.f32	s14, s17
 8023b20:	9329      	str	r3, [sp, #164]	; 0xa4
 8023b22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023b24:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b2c:	932a      	str	r3, [sp, #168]	; 0xa8
 8023b2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023b30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023b32:	ee17 ba10 	vmov	fp, s14
 8023b36:	eeb0 8a67 	vmov.f32	s16, s15
 8023b3a:	eef0 8a46 	vmov.f32	s17, s12
 8023b3e:	bf18      	it	ne
 8023b40:	461a      	movne	r2, r3
 8023b42:	e793      	b.n	8023a6c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8023b44:	b015      	add	sp, #84	; 0x54
 8023b46:	ecbd 8b08 	vpop	{d8-d11}
 8023b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b4e:	46d4      	mov	ip, sl
 8023b50:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8023b54:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023b56:	1e51      	subs	r1, r2, #1
 8023b58:	fb00 b301 	mla	r3, r0, r1, fp
 8023b5c:	141b      	asrs	r3, r3, #16
 8023b5e:	910a      	str	r1, [sp, #40]	; 0x28
 8023b60:	f100 80cc 	bmi.w	8023cfc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8023b64:	42b3      	cmp	r3, r6
 8023b66:	f280 80c9 	bge.w	8023cfc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8023b6a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023b6c:	fb03 8301 	mla	r3, r3, r1, r8
 8023b70:	141b      	asrs	r3, r3, #16
 8023b72:	f100 80c3 	bmi.w	8023cfc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8023b76:	3f01      	subs	r7, #1
 8023b78:	42bb      	cmp	r3, r7
 8023b7a:	f280 80bf 	bge.w	8023cfc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8023b7e:	2a00      	cmp	r2, #0
 8023b80:	dda4      	ble.n	8023acc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8023b82:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
 8023b86:	e9cd ca09 	strd	ip, sl, [sp, #36]	; 0x24
 8023b8a:	e08e      	b.n	8023caa <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023b8c:	f891 c001 	ldrb.w	ip, [r1, #1]
 8023b90:	194c      	adds	r4, r1, r5
 8023b92:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023b96:	44bc      	add	ip, r7
 8023b98:	2a00      	cmp	r2, #0
 8023b9a:	f000 80a6 	beq.w	8023cea <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8023b9e:	5d48      	ldrb	r0, [r1, r5]
 8023ba0:	7865      	ldrb	r5, [r4, #1]
 8023ba2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023ba6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023baa:	4438      	add	r0, r7
 8023bac:	443d      	add	r5, r7
 8023bae:	b29b      	uxth	r3, r3
 8023bb0:	b292      	uxth	r2, r2
 8023bb2:	fb03 f402 	mul.w	r4, r3, r2
 8023bb6:	011b      	lsls	r3, r3, #4
 8023bb8:	1b19      	subs	r1, r3, r4
 8023bba:	f89c 9000 	ldrb.w	r9, [ip]
 8023bbe:	f89c e002 	ldrb.w	lr, [ip, #2]
 8023bc2:	b289      	uxth	r1, r1
 8023bc4:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023bc8:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8023bcc:	fb01 f909 	mul.w	r9, r1, r9
 8023bd0:	b292      	uxth	r2, r2
 8023bd2:	fb01 fe0e 	mul.w	lr, r1, lr
 8023bd6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8023bda:	fb01 f10c 	mul.w	r1, r1, ip
 8023bde:	f817 a00a 	ldrb.w	sl, [r7, sl]
 8023be2:	1a9b      	subs	r3, r3, r2
 8023be4:	f896 c002 	ldrb.w	ip, [r6, #2]
 8023be8:	b29b      	uxth	r3, r3
 8023bea:	7876      	ldrb	r6, [r6, #1]
 8023bec:	fb03 990a 	mla	r9, r3, sl, r9
 8023bf0:	fb03 ec0c 	mla	ip, r3, ip, lr
 8023bf4:	fb03 1306 	mla	r3, r3, r6, r1
 8023bf8:	7801      	ldrb	r1, [r0, #0]
 8023bfa:	f890 e002 	ldrb.w	lr, [r0, #2]
 8023bfe:	fb02 9901 	mla	r9, r2, r1, r9
 8023c02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023c04:	fb02 ce0e 	mla	lr, r2, lr, ip
 8023c08:	7829      	ldrb	r1, [r5, #0]
 8023c0a:	f8b7 c000 	ldrh.w	ip, [r7]
 8023c0e:	7840      	ldrb	r0, [r0, #1]
 8023c10:	78ae      	ldrb	r6, [r5, #2]
 8023c12:	fb02 3200 	mla	r2, r2, r0, r3
 8023c16:	fb04 9901 	mla	r9, r4, r1, r9
 8023c1a:	7868      	ldrb	r0, [r5, #1]
 8023c1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023c1e:	ea4f 252c 	mov.w	r5, ip, asr #8
 8023c22:	fb04 ee06 	mla	lr, r4, r6, lr
 8023c26:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023c2a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8023c2e:	fb15 f501 	smulbb	r5, r5, r1
 8023c32:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8023c36:	b2db      	uxtb	r3, r3
 8023c38:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8023c3c:	fb13 f301 	smulbb	r3, r3, r1
 8023c40:	fb1c fc01 	smulbb	ip, ip, r1
 8023c44:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023c46:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8023c4a:	fb04 2200 	mla	r2, r4, r0, r2
 8023c4e:	fb0e 5501 	mla	r5, lr, r1, r5
 8023c52:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023c56:	b2ad      	uxth	r5, r5
 8023c58:	fb02 cc01 	mla	ip, r2, r1, ip
 8023c5c:	1c6a      	adds	r2, r5, #1
 8023c5e:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8023c62:	463a      	mov	r2, r7
 8023c64:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8023c68:	fb09 3301 	mla	r3, r9, r1, r3
 8023c6c:	fa1f f18c 	uxth.w	r1, ip
 8023c70:	b29b      	uxth	r3, r3
 8023c72:	1c5c      	adds	r4, r3, #1
 8023c74:	1c48      	adds	r0, r1, #1
 8023c76:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8023c7a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8023c7e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023c82:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023c86:	0949      	lsrs	r1, r1, #5
 8023c88:	432b      	orrs	r3, r5
 8023c8a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023c8e:	430b      	orrs	r3, r1
 8023c90:	f822 3b02 	strh.w	r3, [r2], #2
 8023c94:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023c96:	9209      	str	r2, [sp, #36]	; 0x24
 8023c98:	449b      	add	fp, r3
 8023c9a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023c9c:	4498      	add	r8, r3
 8023c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ca0:	429a      	cmp	r2, r3
 8023ca2:	d029      	beq.n	8023cf8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023ca4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023ca6:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8023caa:	ea4f 432b 	mov.w	r3, fp, asr #16
 8023cae:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023cb2:	fb05 3101 	mla	r1, r5, r1, r3
 8023cb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023cb8:	9f08      	ldr	r7, [sp, #32]
 8023cba:	f812 a001 	ldrb.w	sl, [r2, r1]
 8023cbe:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023cc2:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8023cc6:	4411      	add	r1, r2
 8023cc8:	eb07 060a 	add.w	r6, r7, sl
 8023ccc:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8023cd0:	2b00      	cmp	r3, #0
 8023cd2:	f47f af5b 	bne.w	8023b8c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8023cd6:	b15a      	cbz	r2, 8023cf0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>
 8023cd8:	5d48      	ldrb	r0, [r1, r5]
 8023cda:	9908      	ldr	r1, [sp, #32]
 8023cdc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023ce0:	4635      	mov	r5, r6
 8023ce2:	4408      	add	r0, r1
 8023ce4:	46b4      	mov	ip, r6
 8023ce6:	460f      	mov	r7, r1
 8023ce8:	e761      	b.n	8023bae <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8023cea:	4635      	mov	r5, r6
 8023cec:	4630      	mov	r0, r6
 8023cee:	e75e      	b.n	8023bae <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8023cf0:	4635      	mov	r5, r6
 8023cf2:	4630      	mov	r0, r6
 8023cf4:	46b4      	mov	ip, r6
 8023cf6:	e75a      	b.n	8023bae <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8023cf8:	469a      	mov	sl, r3
 8023cfa:	e6e7      	b.n	8023acc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8023cfc:	2a00      	cmp	r2, #0
 8023cfe:	f77f aee5 	ble.w	8023acc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8023d02:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8023d04:	ea4f 432b 	mov.w	r3, fp, asr #16
 8023d08:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023d0c:	4675      	mov	r5, lr
 8023d0e:	46d1      	mov	r9, sl
 8023d10:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8023d14:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 8023d18:	9609      	str	r6, [sp, #36]	; 0x24
 8023d1a:	2b00      	cmp	r3, #0
 8023d1c:	f3cb 3703 	ubfx	r7, fp, #12, #4
 8023d20:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8023d24:	db27      	blt.n	8023d76 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8023d26:	1e60      	subs	r0, r4, #1
 8023d28:	4283      	cmp	r3, r0
 8023d2a:	da24      	bge.n	8023d76 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8023d2c:	2900      	cmp	r1, #0
 8023d2e:	db22      	blt.n	8023d76 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8023d30:	1e68      	subs	r0, r5, #1
 8023d32:	4281      	cmp	r1, r0
 8023d34:	da1f      	bge.n	8023d76 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8023d36:	b220      	sxth	r0, r4
 8023d38:	fb01 3300 	mla	r3, r1, r0, r3
 8023d3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023d3e:	5ccd      	ldrb	r5, [r1, r3]
 8023d40:	440b      	add	r3, r1
 8023d42:	9908      	ldr	r1, [sp, #32]
 8023d44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023d48:	460e      	mov	r6, r1
 8023d4a:	eb01 0c05 	add.w	ip, r1, r5
 8023d4e:	2f00      	cmp	r7, #0
 8023d50:	d04b      	beq.n	8023dea <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8023d52:	785c      	ldrb	r4, [r3, #1]
 8023d54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023d58:	440c      	add	r4, r1
 8023d5a:	2a00      	cmp	r2, #0
 8023d5c:	f000 80c4 	beq.w	8023ee8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023d60:	1819      	adds	r1, r3, r0
 8023d62:	7849      	ldrb	r1, [r1, #1]
 8023d64:	5c18      	ldrb	r0, [r3, r0]
 8023d66:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023d6a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023d6e:	1873      	adds	r3, r6, r1
 8023d70:	9311      	str	r3, [sp, #68]	; 0x44
 8023d72:	4430      	add	r0, r6
 8023d74:	e03f      	b.n	8023df6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8023d76:	1c58      	adds	r0, r3, #1
 8023d78:	d405      	bmi.n	8023d86 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8023d7a:	42a0      	cmp	r0, r4
 8023d7c:	dc03      	bgt.n	8023d86 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8023d7e:	1c48      	adds	r0, r1, #1
 8023d80:	d401      	bmi.n	8023d86 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8023d82:	42a8      	cmp	r0, r5
 8023d84:	dd20      	ble.n	8023dc8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c4>
 8023d86:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023d88:	f109 0902 	add.w	r9, r9, #2
 8023d8c:	449b      	add	fp, r3
 8023d8e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d90:	4498      	add	r8, r3
 8023d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d94:	2b00      	cmp	r3, #0
 8023d96:	dd08      	ble.n	8023daa <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8023d98:	e9da 4502 	ldrd	r4, r5, [sl, #8]
 8023d9c:	3b01      	subs	r3, #1
 8023d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8023da0:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023da4:	ea4f 432b 	mov.w	r3, fp, asr #16
 8023da8:	e7b7      	b.n	8023d1a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8023daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023dac:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8023db0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023db4:	3301      	adds	r3, #1
 8023db6:	eb0a 0a43 	add.w	sl, sl, r3, lsl #1
 8023dba:	e687      	b.n	8023acc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8023dbc:	3a01      	subs	r2, #1
 8023dbe:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8023dc2:	920a      	str	r2, [sp, #40]	; 0x28
 8023dc4:	4616      	mov	r6, r2
 8023dc6:	e7a1      	b.n	8023d0c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8023dc8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023dca:	b22d      	sxth	r5, r5
 8023dcc:	b224      	sxth	r4, r4
 8023dce:	e9cd 2005 	strd	r2, r0, [sp, #20]
 8023dd2:	e9cd 1703 	strd	r1, r7, [sp, #12]
 8023dd6:	9302      	str	r3, [sp, #8]
 8023dd8:	e9cd 4500 	strd	r4, r5, [sp]
 8023ddc:	9b08      	ldr	r3, [sp, #32]
 8023dde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023de0:	4649      	mov	r1, r9
 8023de2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8023de4:	f7ff fcf2 	bl	80237cc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8023de8:	e7cd      	b.n	8023d86 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8023dea:	2a00      	cmp	r2, #0
 8023dec:	d173      	bne.n	8023ed6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d2>
 8023dee:	4660      	mov	r0, ip
 8023df0:	4664      	mov	r4, ip
 8023df2:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8023df6:	b2bb      	uxth	r3, r7
 8023df8:	b292      	uxth	r2, r2
 8023dfa:	fb03 f702 	mul.w	r7, r3, r2
 8023dfe:	011b      	lsls	r3, r3, #4
 8023e00:	1bd9      	subs	r1, r3, r7
 8023e02:	7826      	ldrb	r6, [r4, #0]
 8023e04:	f894 e002 	ldrb.w	lr, [r4, #2]
 8023e08:	7864      	ldrb	r4, [r4, #1]
 8023e0a:	b289      	uxth	r1, r1
 8023e0c:	fb01 f606 	mul.w	r6, r1, r6
 8023e10:	fb01 fe0e 	mul.w	lr, r1, lr
 8023e14:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8023e18:	fb01 f104 	mul.w	r1, r1, r4
 8023e1c:	9c08      	ldr	r4, [sp, #32]
 8023e1e:	b292      	uxth	r2, r2
 8023e20:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8023e24:	5d65      	ldrb	r5, [r4, r5]
 8023e26:	1a9b      	subs	r3, r3, r2
 8023e28:	f89c 4002 	ldrb.w	r4, [ip, #2]
 8023e2c:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023e30:	b29b      	uxth	r3, r3
 8023e32:	fb03 e404 	mla	r4, r3, r4, lr
 8023e36:	fb03 6505 	mla	r5, r3, r5, r6
 8023e3a:	fb03 130c 	mla	r3, r3, ip, r1
 8023e3e:	f890 c001 	ldrb.w	ip, [r0, #1]
 8023e42:	7801      	ldrb	r1, [r0, #0]
 8023e44:	f890 e002 	ldrb.w	lr, [r0, #2]
 8023e48:	fb02 3c0c 	mla	ip, r2, ip, r3
 8023e4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023e4e:	fb02 5601 	mla	r6, r2, r1, r5
 8023e52:	fb02 4e0e 	mla	lr, r2, lr, r4
 8023e56:	7899      	ldrb	r1, [r3, #2]
 8023e58:	781a      	ldrb	r2, [r3, #0]
 8023e5a:	785b      	ldrb	r3, [r3, #1]
 8023e5c:	f8b9 0000 	ldrh.w	r0, [r9]
 8023e60:	fb07 c303 	mla	r3, r7, r3, ip
 8023e64:	fb07 6202 	mla	r2, r7, r2, r6
 8023e68:	00c5      	lsls	r5, r0, #3
 8023e6a:	1204      	asrs	r4, r0, #8
 8023e6c:	fb07 e101 	mla	r1, r7, r1, lr
 8023e70:	10c0      	asrs	r0, r0, #3
 8023e72:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023e74:	b2ed      	uxtb	r5, r5
 8023e76:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8023e7a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023e7e:	fb15 f507 	smulbb	r5, r5, r7
 8023e82:	fb14 f407 	smulbb	r4, r4, r7
 8023e86:	fb10 f007 	smulbb	r0, r0, r7
 8023e8a:	f3c3 2707 	ubfx	r7, r3, #8, #8
 8023e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023e90:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023e94:	461e      	mov	r6, r3
 8023e96:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023e9a:	fb02 5203 	mla	r2, r2, r3, r5
 8023e9e:	fb07 0006 	mla	r0, r7, r6, r0
 8023ea2:	fb01 4303 	mla	r3, r1, r3, r4
 8023ea6:	b281      	uxth	r1, r0
 8023ea8:	b294      	uxth	r4, r2
 8023eaa:	b29b      	uxth	r3, r3
 8023eac:	1c4a      	adds	r2, r1, #1
 8023eae:	1c5d      	adds	r5, r3, #1
 8023eb0:	1c60      	adds	r0, r4, #1
 8023eb2:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8023eb6:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8023eba:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8023ebe:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023ec2:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 8023ec6:	0952      	lsrs	r2, r2, #5
 8023ec8:	430b      	orrs	r3, r1
 8023eca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023ece:	4313      	orrs	r3, r2
 8023ed0:	f8a9 3000 	strh.w	r3, [r9]
 8023ed4:	e757      	b.n	8023d86 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8023ed6:	5c18      	ldrb	r0, [r3, r0]
 8023ed8:	9b08      	ldr	r3, [sp, #32]
 8023eda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023ede:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8023ee2:	4418      	add	r0, r3
 8023ee4:	4664      	mov	r4, ip
 8023ee6:	e786      	b.n	8023df6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8023ee8:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8023eec:	4660      	mov	r0, ip
 8023eee:	e782      	b.n	8023df6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8023ef0:	f43f adec 	beq.w	8023acc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8023ef4:	1e6e      	subs	r6, r5, #1
 8023ef6:	46d4      	mov	ip, sl
 8023ef8:	e62c      	b.n	8023b54 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8023efa:	bf00      	nop

08023efc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8023efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f00:	4692      	mov	sl, r2
 8023f02:	b083      	sub	sp, #12
 8023f04:	880a      	ldrh	r2, [r1, #0]
 8023f06:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8023f0a:	e9dd 740e 	ldrd	r7, r4, [sp, #56]	; 0x38
 8023f0e:	0215      	lsls	r5, r2, #8
 8023f10:	0150      	lsls	r0, r2, #5
 8023f12:	fb04 7e0c 	mla	lr, r4, ip, r7
 8023f16:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8023f1a:	f405 0578 	and.w	r5, r5, #16252928	; 0xf80000
 8023f1e:	00d2      	lsls	r2, r2, #3
 8023f20:	4305      	orrs	r5, r0
 8023f22:	b2d2      	uxtb	r2, r2
 8023f24:	4315      	orrs	r5, r2
 8023f26:	2c00      	cmp	r4, #0
 8023f28:	9501      	str	r5, [sp, #4]
 8023f2a:	eb0a 020e 	add.w	r2, sl, lr
 8023f2e:	f104 0801 	add.w	r8, r4, #1
 8023f32:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8023f36:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8023f3a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8023f3e:	db01      	blt.n	8023f44 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x48>
 8023f40:	45a1      	cmp	r9, r4
 8023f42:	dc71      	bgt.n	8024028 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x12c>
 8023f44:	fa5f fa85 	uxtb.w	sl, r5
 8023f48:	f10d 0b04 	add.w	fp, sp, #4
 8023f4c:	4654      	mov	r4, sl
 8023f4e:	46de      	mov	lr, fp
 8023f50:	f1b8 0f00 	cmp.w	r8, #0
 8023f54:	db01      	blt.n	8023f5a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5e>
 8023f56:	45c1      	cmp	r9, r8
 8023f58:	dc4c      	bgt.n	8023ff4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xf8>
 8023f5a:	fa5f f985 	uxtb.w	r9, r5
 8023f5e:	ab01      	add	r3, sp, #4
 8023f60:	464d      	mov	r5, r9
 8023f62:	4698      	mov	r8, r3
 8023f64:	2e0f      	cmp	r6, #15
 8023f66:	f200 809b 	bhi.w	80240a0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8023f6a:	280f      	cmp	r0, #15
 8023f6c:	f200 8098 	bhi.w	80240a0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8023f70:	b2b2      	uxth	r2, r6
 8023f72:	b280      	uxth	r0, r0
 8023f74:	fb02 f700 	mul.w	r7, r2, r0
 8023f78:	0112      	lsls	r2, r2, #4
 8023f7a:	f89b c002 	ldrb.w	ip, [fp, #2]
 8023f7e:	1bd6      	subs	r6, r2, r7
 8023f80:	f89b b001 	ldrb.w	fp, [fp, #1]
 8023f84:	b2b6      	uxth	r6, r6
 8023f86:	ebc7 1000 	rsb	r0, r7, r0, lsl #4
 8023f8a:	fb06 f404 	mul.w	r4, r6, r4
 8023f8e:	fb06 fc0c 	mul.w	ip, r6, ip
 8023f92:	fb06 f60b 	mul.w	r6, r6, fp
 8023f96:	b280      	uxth	r0, r0
 8023f98:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023f9c:	f89e b002 	ldrb.w	fp, [lr, #2]
 8023fa0:	1a12      	subs	r2, r2, r0
 8023fa2:	f89e e001 	ldrb.w	lr, [lr, #1]
 8023fa6:	b292      	uxth	r2, r2
 8023fa8:	fb02 440a 	mla	r4, r2, sl, r4
 8023fac:	fb02 660e 	mla	r6, r2, lr, r6
 8023fb0:	fb02 cc0b 	mla	ip, r2, fp, ip
 8023fb4:	f898 a002 	ldrb.w	sl, [r8, #2]
 8023fb8:	f898 8001 	ldrb.w	r8, [r8, #1]
 8023fbc:	fb00 4909 	mla	r9, r0, r9, r4
 8023fc0:	fb00 cc0a 	mla	ip, r0, sl, ip
 8023fc4:	fb00 6008 	mla	r0, r0, r8, r6
 8023fc8:	789e      	ldrb	r6, [r3, #2]
 8023fca:	785b      	ldrb	r3, [r3, #1]
 8023fcc:	fb07 9905 	mla	r9, r7, r5, r9
 8023fd0:	fb07 c506 	mla	r5, r7, r6, ip
 8023fd4:	fb07 0703 	mla	r7, r7, r3, r0
 8023fd8:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8023fdc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023fe0:	097f      	lsrs	r7, r7, #5
 8023fe2:	ea45 0509 	orr.w	r5, r5, r9
 8023fe6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023fea:	433d      	orrs	r5, r7
 8023fec:	800d      	strh	r5, [r1, #0]
 8023fee:	b003      	add	sp, #12
 8023ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ff4:	b388      	cbz	r0, 802405a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x15e>
 8023ff6:	2f00      	cmp	r7, #0
 8023ff8:	db40      	blt.n	802407c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x180>
 8023ffa:	45bc      	cmp	ip, r7
 8023ffc:	dd3e      	ble.n	802407c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x180>
 8023ffe:	f812 800c 	ldrb.w	r8, [r2, ip]
 8024002:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024006:	4498      	add	r8, r3
 8024008:	3701      	adds	r7, #1
 802400a:	f898 9000 	ldrb.w	r9, [r8]
 802400e:	d432      	bmi.n	8024076 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x17a>
 8024010:	45bc      	cmp	ip, r7
 8024012:	dd30      	ble.n	8024076 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x17a>
 8024014:	2e00      	cmp	r6, #0
 8024016:	d040      	beq.n	802409a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x19e>
 8024018:	4494      	add	ip, r2
 802401a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802401e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024022:	5c9d      	ldrb	r5, [r3, r2]
 8024024:	4413      	add	r3, r2
 8024026:	e79d      	b.n	8023f64 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x68>
 8024028:	2f00      	cmp	r7, #0
 802402a:	db01      	blt.n	8024030 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x134>
 802402c:	45bc      	cmp	ip, r7
 802402e:	dc1c      	bgt.n	802406a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16e>
 8024030:	f10d 0e04 	add.w	lr, sp, #4
 8024034:	1c7c      	adds	r4, r7, #1
 8024036:	f89e a000 	ldrb.w	sl, [lr]
 802403a:	d40a      	bmi.n	8024052 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x156>
 802403c:	45a4      	cmp	ip, r4
 802403e:	dd08      	ble.n	8024052 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x156>
 8024040:	b1fe      	cbz	r6, 8024082 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x186>
 8024042:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024046:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 802404a:	f813 400b 	ldrb.w	r4, [r3, fp]
 802404e:	449b      	add	fp, r3
 8024050:	e77e      	b.n	8023f50 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x54>
 8024052:	b2ec      	uxtb	r4, r5
 8024054:	f10d 0b04 	add.w	fp, sp, #4
 8024058:	e77a      	b.n	8023f50 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x54>
 802405a:	2e0f      	cmp	r6, #15
 802405c:	fa5f f985 	uxtb.w	r9, r5
 8024060:	d81e      	bhi.n	80240a0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8024062:	ab01      	add	r3, sp, #4
 8024064:	4698      	mov	r8, r3
 8024066:	464d      	mov	r5, r9
 8024068:	e782      	b.n	8023f70 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x74>
 802406a:	f81a e00e 	ldrb.w	lr, [sl, lr]
 802406e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8024072:	449e      	add	lr, r3
 8024074:	e7de      	b.n	8024034 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8024076:	b2ed      	uxtb	r5, r5
 8024078:	ab01      	add	r3, sp, #4
 802407a:	e773      	b.n	8023f64 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x68>
 802407c:	f10d 0804 	add.w	r8, sp, #4
 8024080:	e7c2      	b.n	8024008 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x10c>
 8024082:	f1b8 0f00 	cmp.w	r8, #0
 8024086:	b2ec      	uxtb	r4, r5
 8024088:	f10d 0b04 	add.w	fp, sp, #4
 802408c:	f6bf af63 	bge.w	8023f56 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8024090:	465b      	mov	r3, fp
 8024092:	46d8      	mov	r8, fp
 8024094:	4625      	mov	r5, r4
 8024096:	46a1      	mov	r9, r4
 8024098:	e767      	b.n	8023f6a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802409a:	b2ed      	uxtb	r5, r5
 802409c:	ab01      	add	r3, sp, #4
 802409e:	e764      	b.n	8023f6a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80240a0:	4b03      	ldr	r3, [pc, #12]	; (80240b0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1b4>)
 80240a2:	4a04      	ldr	r2, [pc, #16]	; (80240b4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1b8>)
 80240a4:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80240a8:	4803      	ldr	r0, [pc, #12]	; (80240b8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1bc>)
 80240aa:	f005 faa7 	bl	80295fc <__assert_func>
 80240ae:	bf00      	nop
 80240b0:	0802c8e4 	.word	0x0802c8e4
 80240b4:	0802cf5c 	.word	0x0802cf5c
 80240b8:	0802ca68 	.word	0x0802ca68

080240bc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80240bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240c0:	ed2d 8b0a 	vpush	{d8-d12}
 80240c4:	eeb0 aa40 	vmov.f32	s20, s0
 80240c8:	eef0 9a60 	vmov.f32	s19, s1
 80240cc:	eeb0 9a41 	vmov.f32	s18, s2
 80240d0:	eef0 8a62 	vmov.f32	s17, s5
 80240d4:	eeb0 8a43 	vmov.f32	s16, s6
 80240d8:	eeb0 ca44 	vmov.f32	s24, s8
 80240dc:	eef0 ba64 	vmov.f32	s23, s9
 80240e0:	eeb0 ba45 	vmov.f32	s22, s10
 80240e4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80240e8:	b093      	sub	sp, #76	; 0x4c
 80240ea:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 80240ee:	e9dd 412b 	ldrd	r4, r1, [sp, #172]	; 0xac
 80240f2:	e9dd 9827 	ldrd	r9, r8, [sp, #156]	; 0x9c
 80240f6:	9011      	str	r0, [sp, #68]	; 0x44
 80240f8:	461a      	mov	r2, r3
 80240fa:	6860      	ldr	r0, [r4, #4]
 80240fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80240fe:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
 8024102:	fb00 1303 	mla	r3, r0, r3, r1
 8024106:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8024108:	6820      	ldr	r0, [r4, #0]
 802410a:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 802410c:	6849      	ldr	r1, [r1, #4]
 802410e:	6824      	ldr	r4, [r4, #0]
 8024110:	eb00 0b43 	add.w	fp, r0, r3, lsl #1
 8024114:	1d0b      	adds	r3, r1, #4
 8024116:	9409      	str	r4, [sp, #36]	; 0x24
 8024118:	930c      	str	r3, [sp, #48]	; 0x30
 802411a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802411c:	2b00      	cmp	r3, #0
 802411e:	dc02      	bgt.n	8024126 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8024120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024122:	2b00      	cmp	r3, #0
 8024124:	dd61      	ble.n	80241ea <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 8024126:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024128:	2a00      	cmp	r2, #0
 802412a:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 802412e:	b225      	sxth	r5, r4
 8024130:	fa0f f78e 	sxth.w	r7, lr
 8024134:	f340 81d9 	ble.w	80244ea <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8024138:	f8cd e01c 	str.w	lr, [sp, #28]
 802413c:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
 8024140:	1e6e      	subs	r6, r5, #1
 8024142:	f107 3cff 	add.w	ip, r7, #4294967295
 8024146:	ea5f 4329 	movs.w	r3, r9, asr #16
 802414a:	ea4f 4128 	mov.w	r1, r8, asr #16
 802414e:	d405      	bmi.n	802415c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024150:	42b3      	cmp	r3, r6
 8024152:	da03      	bge.n	802415c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024154:	2900      	cmp	r1, #0
 8024156:	db01      	blt.n	802415c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024158:	4561      	cmp	r1, ip
 802415a:	db4b      	blt.n	80241f4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 802415c:	1c58      	adds	r0, r3, #1
 802415e:	d406      	bmi.n	802416e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024160:	42a8      	cmp	r0, r5
 8024162:	dc04      	bgt.n	802416e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024164:	1c48      	adds	r0, r1, #1
 8024166:	d402      	bmi.n	802416e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024168:	42b8      	cmp	r0, r7
 802416a:	f340 8149 	ble.w	8024400 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802416e:	3a01      	subs	r2, #1
 8024170:	44d1      	add	r9, sl
 8024172:	44f0      	add	r8, lr
 8024174:	f10b 0b02 	add.w	fp, fp, #2
 8024178:	d1e5      	bne.n	8024146 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802417a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802417c:	2b00      	cmp	r3, #0
 802417e:	dd34      	ble.n	80241ea <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 8024180:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8024184:	ee79 9aab 	vadd.f32	s19, s19, s23
 8024188:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802418c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8024190:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8024194:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024198:	ee76 6a68 	vsub.f32	s13, s12, s17
 802419c:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80241a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80241a4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80241a8:	ee16 2a90 	vmov	r2, s13
 80241ac:	3b01      	subs	r3, #1
 80241ae:	930a      	str	r3, [sp, #40]	; 0x28
 80241b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80241b2:	fb92 faf3 	sdiv	sl, r2, r3
 80241b6:	ee17 2a10 	vmov	r2, s14
 80241ba:	eeb0 7a48 	vmov.f32	s14, s16
 80241be:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80241c2:	ee17 8a10 	vmov	r8, s14
 80241c6:	eeb0 7a68 	vmov.f32	s14, s17
 80241ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80241ce:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80241d2:	932a      	str	r3, [sp, #168]	; 0xa8
 80241d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80241d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80241d8:	ee17 9a10 	vmov	r9, s14
 80241dc:	eeb0 8a67 	vmov.f32	s16, s15
 80241e0:	eef0 8a46 	vmov.f32	s17, s12
 80241e4:	bf18      	it	ne
 80241e6:	461a      	movne	r2, r3
 80241e8:	e797      	b.n	802411a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80241ea:	b013      	add	sp, #76	; 0x4c
 80241ec:	ecbd 8b0a 	vpop	{d8-d12}
 80241f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80241f4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80241f8:	f8cd b01c 	str.w	fp, [sp, #28]
 80241fc:	1e51      	subs	r1, r2, #1
 80241fe:	fb0a 9301 	mla	r3, sl, r1, r9
 8024202:	141b      	asrs	r3, r3, #16
 8024204:	9108      	str	r1, [sp, #32]
 8024206:	f100 809e 	bmi.w	8024346 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802420a:	42b3      	cmp	r3, r6
 802420c:	f280 809b 	bge.w	8024346 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8024210:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024212:	fb03 8301 	mla	r3, r3, r1, r8
 8024216:	141b      	asrs	r3, r3, #16
 8024218:	f100 8095 	bmi.w	8024346 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802421c:	3f01      	subs	r7, #1
 802421e:	42bb      	cmp	r3, r7
 8024220:	f280 8091 	bge.w	8024346 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8024224:	2a00      	cmp	r2, #0
 8024226:	dda8      	ble.n	802417a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024228:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 802422c:	f8cd a0a4 	str.w	sl, [sp, #164]	; 0xa4
 8024230:	f8cd b020 	str.w	fp, [sp, #32]
 8024234:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8024238:	e060      	b.n	80242fc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802423a:	784f      	ldrb	r7, [r1, #1]
 802423c:	194c      	adds	r4, r1, r5
 802423e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024242:	4457      	add	r7, sl
 8024244:	2a00      	cmp	r2, #0
 8024246:	d075      	beq.n	8024334 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8024248:	5d48      	ldrb	r0, [r1, r5]
 802424a:	7865      	ldrb	r5, [r4, #1]
 802424c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024254:	4450      	add	r0, sl
 8024256:	4455      	add	r5, sl
 8024258:	b29b      	uxth	r3, r3
 802425a:	b292      	uxth	r2, r2
 802425c:	fb03 f402 	mul.w	r4, r3, r2
 8024260:	011b      	lsls	r3, r3, #4
 8024262:	f897 e000 	ldrb.w	lr, [r7]
 8024266:	f897 c002 	ldrb.w	ip, [r7, #2]
 802426a:	1b19      	subs	r1, r3, r4
 802426c:	787f      	ldrb	r7, [r7, #1]
 802426e:	b289      	uxth	r1, r1
 8024270:	fb01 fc0c 	mul.w	ip, r1, ip
 8024274:	fb01 fe0e 	mul.w	lr, r1, lr
 8024278:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 802427c:	fb01 f107 	mul.w	r1, r1, r7
 8024280:	b292      	uxth	r2, r2
 8024282:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8024286:	f81a b00b 	ldrb.w	fp, [sl, fp]
 802428a:	78b7      	ldrb	r7, [r6, #2]
 802428c:	1a9b      	subs	r3, r3, r2
 802428e:	7876      	ldrb	r6, [r6, #1]
 8024290:	b29b      	uxth	r3, r3
 8024292:	fb03 ee0b 	mla	lr, r3, fp, lr
 8024296:	fb03 c707 	mla	r7, r3, r7, ip
 802429a:	fb03 1306 	mla	r3, r3, r6, r1
 802429e:	f890 b000 	ldrb.w	fp, [r0]
 80242a2:	f890 c002 	ldrb.w	ip, [r0, #2]
 80242a6:	7841      	ldrb	r1, [r0, #1]
 80242a8:	fb02 ee0b 	mla	lr, r2, fp, lr
 80242ac:	fb02 3301 	mla	r3, r2, r1, r3
 80242b0:	fb02 770c 	mla	r7, r2, ip, r7
 80242b4:	f895 b000 	ldrb.w	fp, [r5]
 80242b8:	f895 c002 	ldrb.w	ip, [r5, #2]
 80242bc:	7869      	ldrb	r1, [r5, #1]
 80242be:	fb04 ee0b 	mla	lr, r4, fp, lr
 80242c2:	fb04 3101 	mla	r1, r4, r1, r3
 80242c6:	fb04 7c0c 	mla	ip, r4, ip, r7
 80242ca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80242cc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80242d0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80242d4:	0949      	lsrs	r1, r1, #5
 80242d6:	4491      	add	r9, r2
 80242d8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80242da:	9b07      	ldr	r3, [sp, #28]
 80242dc:	ea4c 0e0e 	orr.w	lr, ip, lr
 80242e0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80242e4:	ea4e 0e01 	orr.w	lr, lr, r1
 80242e8:	4490      	add	r8, r2
 80242ea:	9a08      	ldr	r2, [sp, #32]
 80242ec:	f823 eb02 	strh.w	lr, [r3], #2
 80242f0:	4293      	cmp	r3, r2
 80242f2:	9307      	str	r3, [sp, #28]
 80242f4:	d025      	beq.n	8024342 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 80242f6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80242f8:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80242fc:	ea4f 4329 	mov.w	r3, r9, asr #16
 8024300:	ea4f 4128 	mov.w	r1, r8, asr #16
 8024304:	fb05 3101 	mla	r1, r5, r1, r3
 8024308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802430a:	f3c9 3303 	ubfx	r3, r9, #12, #4
 802430e:	f812 b001 	ldrb.w	fp, [r2, r1]
 8024312:	4411      	add	r1, r2
 8024314:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8024318:	eb0a 060b 	add.w	r6, sl, fp
 802431c:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8024320:	2b00      	cmp	r3, #0
 8024322:	d18a      	bne.n	802423a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8024324:	b14a      	cbz	r2, 802433a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8024326:	5d48      	ldrb	r0, [r1, r5]
 8024328:	4637      	mov	r7, r6
 802432a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802432e:	4635      	mov	r5, r6
 8024330:	4450      	add	r0, sl
 8024332:	e791      	b.n	8024258 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8024334:	4635      	mov	r5, r6
 8024336:	4630      	mov	r0, r6
 8024338:	e78e      	b.n	8024258 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802433a:	4635      	mov	r5, r6
 802433c:	4630      	mov	r0, r6
 802433e:	4637      	mov	r7, r6
 8024340:	e78a      	b.n	8024258 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8024342:	4693      	mov	fp, r2
 8024344:	e719      	b.n	802417a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024346:	2a00      	cmp	r2, #0
 8024348:	f77f af17 	ble.w	802417a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802434c:	9e08      	ldr	r6, [sp, #32]
 802434e:	ea4f 4329 	mov.w	r3, r9, asr #16
 8024352:	ea4f 4128 	mov.w	r1, r8, asr #16
 8024356:	465f      	mov	r7, fp
 8024358:	f8cd b01c 	str.w	fp, [sp, #28]
 802435c:	f8dd b0b8 	ldr.w	fp, [sp, #184]	; 0xb8
 8024360:	2b00      	cmp	r3, #0
 8024362:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8024366:	f3c8 3203 	ubfx	r2, r8, #12, #4
 802436a:	db2a      	blt.n	80243c2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802436c:	1e65      	subs	r5, r4, #1
 802436e:	42ab      	cmp	r3, r5
 8024370:	da27      	bge.n	80243c2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024372:	2900      	cmp	r1, #0
 8024374:	db25      	blt.n	80243c2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8024376:	f10e 35ff 	add.w	r5, lr, #4294967295
 802437a:	42a9      	cmp	r1, r5
 802437c:	da21      	bge.n	80243c2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802437e:	b224      	sxth	r4, r4
 8024380:	fb01 3304 	mla	r3, r1, r4, r3
 8024384:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024386:	f811 c003 	ldrb.w	ip, [r1, r3]
 802438a:	440b      	add	r3, r1
 802438c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802438e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024392:	eb01 0e0c 	add.w	lr, r1, ip
 8024396:	2800      	cmp	r0, #0
 8024398:	d048      	beq.n	802442c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802439a:	785d      	ldrb	r5, [r3, #1]
 802439c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80243a0:	440d      	add	r5, r1
 80243a2:	2a00      	cmp	r2, #0
 80243a4:	f000 809e 	beq.w	80244e4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 80243a8:	1919      	adds	r1, r3, r4
 80243aa:	7849      	ldrb	r1, [r1, #1]
 80243ac:	5d1c      	ldrb	r4, [r3, r4]
 80243ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80243b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80243b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80243b8:	1859      	adds	r1, r3, r1
 80243ba:	18e3      	adds	r3, r4, r3
 80243bc:	910f      	str	r1, [sp, #60]	; 0x3c
 80243be:	9310      	str	r3, [sp, #64]	; 0x40
 80243c0:	e039      	b.n	8024436 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80243c2:	1c5d      	adds	r5, r3, #1
 80243c4:	d405      	bmi.n	80243d2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 80243c6:	42a5      	cmp	r5, r4
 80243c8:	dc03      	bgt.n	80243d2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 80243ca:	1c4d      	adds	r5, r1, #1
 80243cc:	d401      	bmi.n	80243d2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 80243ce:	4575      	cmp	r5, lr
 80243d0:	dd1c      	ble.n	802440c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80243d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80243d4:	2e00      	cmp	r6, #0
 80243d6:	f107 0702 	add.w	r7, r7, #2
 80243da:	44d1      	add	r9, sl
 80243dc:	4498      	add	r8, r3
 80243de:	dd07      	ble.n	80243f0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80243e0:	e9db 4e02 	ldrd	r4, lr, [fp, #8]
 80243e4:	3e01      	subs	r6, #1
 80243e6:	ea4f 4329 	mov.w	r3, r9, asr #16
 80243ea:	ea4f 4128 	mov.w	r1, r8, asr #16
 80243ee:	e7b7      	b.n	8024360 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80243f0:	e9dd b307 	ldrd	fp, r3, [sp, #28]
 80243f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80243f8:	3301      	adds	r3, #1
 80243fa:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 80243fe:	e6bc      	b.n	802417a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024400:	3a01      	subs	r2, #1
 8024402:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8024406:	9208      	str	r2, [sp, #32]
 8024408:	4616      	mov	r6, r2
 802440a:	e7a4      	b.n	8024356 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 802440c:	fa0f f58e 	sxth.w	r5, lr
 8024410:	b224      	sxth	r4, r4
 8024412:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8024416:	e9cd 3102 	strd	r3, r1, [sp, #8]
 802441a:	e9cd 4500 	strd	r4, r5, [sp]
 802441e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024422:	4639      	mov	r1, r7
 8024424:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024426:	f7ff fd69 	bl	8023efc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 802442a:	e7d2      	b.n	80243d2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 802442c:	2a00      	cmp	r2, #0
 802442e:	d14f      	bne.n	80244d0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8024430:	4675      	mov	r5, lr
 8024432:	e9cd ee0f 	strd	lr, lr, [sp, #60]	; 0x3c
 8024436:	b283      	uxth	r3, r0
 8024438:	b292      	uxth	r2, r2
 802443a:	fb03 f002 	mul.w	r0, r3, r2
 802443e:	782c      	ldrb	r4, [r5, #0]
 8024440:	011b      	lsls	r3, r3, #4
 8024442:	940e      	str	r4, [sp, #56]	; 0x38
 8024444:	78ac      	ldrb	r4, [r5, #2]
 8024446:	1a19      	subs	r1, r3, r0
 8024448:	940d      	str	r4, [sp, #52]	; 0x34
 802444a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802444c:	b289      	uxth	r1, r1
 802444e:	fb01 f404 	mul.w	r4, r1, r4
 8024452:	940e      	str	r4, [sp, #56]	; 0x38
 8024454:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024456:	786d      	ldrb	r5, [r5, #1]
 8024458:	fb01 f404 	mul.w	r4, r1, r4
 802445c:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8024460:	fb01 f105 	mul.w	r1, r1, r5
 8024464:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024466:	b292      	uxth	r2, r2
 8024468:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802446c:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8024470:	940d      	str	r4, [sp, #52]	; 0x34
 8024472:	1a9b      	subs	r3, r3, r2
 8024474:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024476:	b29b      	uxth	r3, r3
 8024478:	f89e 5002 	ldrb.w	r5, [lr, #2]
 802447c:	fb03 4c0c 	mla	ip, r3, ip, r4
 8024480:	f89e e001 	ldrb.w	lr, [lr, #1]
 8024484:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024486:	fb03 4505 	mla	r5, r3, r5, r4
 802448a:	fb03 130e 	mla	r3, r3, lr, r1
 802448e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024490:	78a1      	ldrb	r1, [r4, #2]
 8024492:	f894 e000 	ldrb.w	lr, [r4]
 8024496:	7864      	ldrb	r4, [r4, #1]
 8024498:	fb02 5501 	mla	r5, r2, r1, r5
 802449c:	fb02 cc0e 	mla	ip, r2, lr, ip
 80244a0:	fb02 3104 	mla	r1, r2, r4, r3
 80244a4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80244a6:	7822      	ldrb	r2, [r4, #0]
 80244a8:	78a3      	ldrb	r3, [r4, #2]
 80244aa:	7864      	ldrb	r4, [r4, #1]
 80244ac:	fb00 cc02 	mla	ip, r0, r2, ip
 80244b0:	fb00 5303 	mla	r3, r0, r3, r5
 80244b4:	fb00 1204 	mla	r2, r0, r4, r1
 80244b8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80244bc:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80244c0:	0952      	lsrs	r2, r2, #5
 80244c2:	ea43 030c 	orr.w	r3, r3, ip
 80244c6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80244ca:	4313      	orrs	r3, r2
 80244cc:	803b      	strh	r3, [r7, #0]
 80244ce:	e780      	b.n	80243d2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 80244d0:	5d1c      	ldrb	r4, [r3, r4]
 80244d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80244d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80244d8:	18e3      	adds	r3, r4, r3
 80244da:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 80244de:	9310      	str	r3, [sp, #64]	; 0x40
 80244e0:	4675      	mov	r5, lr
 80244e2:	e7a8      	b.n	8024436 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80244e4:	e9cd ee0f 	strd	lr, lr, [sp, #60]	; 0x3c
 80244e8:	e7a5      	b.n	8024436 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80244ea:	f43f ae46 	beq.w	802417a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80244ee:	1e6e      	subs	r6, r5, #1
 80244f0:	f8cd b01c 	str.w	fp, [sp, #28]
 80244f4:	e682      	b.n	80241fc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80244f6:	bf00      	nop

080244f8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80244f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244fc:	b08b      	sub	sp, #44	; 0x2c
 80244fe:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
 8024502:	f8b1 c000 	ldrh.w	ip, [r1]
 8024506:	e9dd 6416 	ldrd	r6, r4, [sp, #88]	; 0x58
 802450a:	fb04 6507 	mla	r5, r4, r7, r6
 802450e:	9107      	str	r1, [sp, #28]
 8024510:	ea4f 01ec 	mov.w	r1, ip, asr #3
 8024514:	ea4f 202c 	mov.w	r0, ip, asr #8
 8024518:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802451c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024520:	469a      	mov	sl, r3
 8024522:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8024526:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802452a:	9105      	str	r1, [sp, #20]
 802452c:	2c00      	cmp	r4, #0
 802452e:	fa5f f18c 	uxtb.w	r1, ip
 8024532:	9004      	str	r0, [sp, #16]
 8024534:	9106      	str	r1, [sp, #24]
 8024536:	eb02 0e05 	add.w	lr, r2, r5
 802453a:	f104 0801 	add.w	r8, r4, #1
 802453e:	f9bd 9054 	ldrsh.w	r9, [sp, #84]	; 0x54
 8024542:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 8024546:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 802454a:	9308      	str	r3, [sp, #32]
 802454c:	db02      	blt.n	8024554 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802454e:	45a1      	cmp	r9, r4
 8024550:	f300 8119 	bgt.w	8024786 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28e>
 8024554:	f04f 0c00 	mov.w	ip, #0
 8024558:	4665      	mov	r5, ip
 802455a:	4662      	mov	r2, ip
 802455c:	4664      	mov	r4, ip
 802455e:	f1b8 0f00 	cmp.w	r8, #0
 8024562:	db02      	blt.n	802456a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x72>
 8024564:	45c1      	cmp	r9, r8
 8024566:	f300 8127 	bgt.w	80247b8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c0>
 802456a:	f04f 0e00 	mov.w	lr, #0
 802456e:	46f0      	mov	r8, lr
 8024570:	4676      	mov	r6, lr
 8024572:	46f1      	mov	r9, lr
 8024574:	290f      	cmp	r1, #15
 8024576:	f200 815e 	bhi.w	8024836 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 802457a:	280f      	cmp	r0, #15
 802457c:	f200 815b 	bhi.w	8024836 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 8024580:	b280      	uxth	r0, r0
 8024582:	b289      	uxth	r1, r1
 8024584:	fb00 fa01 	mul.w	sl, r0, r1
 8024588:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802458c:	b280      	uxth	r0, r0
 802458e:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8024592:	fb00 fb08 	mul.w	fp, r0, r8
 8024596:	fb0a f70e 	mul.w	r7, sl, lr
 802459a:	9301      	str	r3, [sp, #4]
 802459c:	f009 13ff 	and.w	r3, r9, #16711935	; 0xff00ff
 80245a0:	9302      	str	r3, [sp, #8]
 80245a2:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 80245a6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80245aa:	9303      	str	r3, [sp, #12]
 80245ac:	0109      	lsls	r1, r1, #4
 80245ae:	eba1 090a 	sub.w	r9, r1, sl
 80245b2:	fa1f f989 	uxth.w	r9, r9
 80245b6:	fb09 f30c 	mul.w	r3, r9, ip
 80245ba:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80245be:	1a09      	subs	r1, r1, r0
 80245c0:	b289      	uxth	r1, r1
 80245c2:	fb01 3305 	mla	r3, r1, r5, r3
 80245c6:	445b      	add	r3, fp
 80245c8:	443b      	add	r3, r7
 80245ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80245ce:	2dff      	cmp	r5, #255	; 0xff
 80245d0:	9309      	str	r3, [sp, #36]	; 0x24
 80245d2:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80245d6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80245da:	d019      	beq.n	8024610 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x118>
 80245dc:	fb03 f305 	mul.w	r3, r3, r5
 80245e0:	fb04 f405 	mul.w	r4, r4, r5
 80245e4:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80245e8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80245ec:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80245f0:	f504 7780 	add.w	r7, r4, #256	; 0x100
 80245f4:	445b      	add	r3, fp
 80245f6:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80245fa:	0a1b      	lsrs	r3, r3, #8
 80245fc:	0a24      	lsrs	r4, r4, #8
 80245fe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024602:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024606:	431c      	orrs	r4, r3
 8024608:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802460c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024610:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024614:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8024618:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802461c:	d018      	beq.n	8024650 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x158>
 802461e:	fb05 f50c 	mul.w	r5, r5, ip
 8024622:	fb02 f20c 	mul.w	r2, r2, ip
 8024626:	0a2f      	lsrs	r7, r5, #8
 8024628:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802462c:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8024630:	f502 7c80 	add.w	ip, r2, #256	; 0x100
 8024634:	443d      	add	r5, r7
 8024636:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802463a:	0a2d      	lsrs	r5, r5, #8
 802463c:	0a12      	lsrs	r2, r2, #8
 802463e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024642:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024646:	432a      	orrs	r2, r5
 8024648:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 802464c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024650:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024654:	d01f      	beq.n	8024696 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x19e>
 8024656:	9f02      	ldr	r7, [sp, #8]
 8024658:	fb07 fb08 	mul.w	fp, r7, r8
 802465c:	9f03      	ldr	r7, [sp, #12]
 802465e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8024662:	fb07 f808 	mul.w	r8, r7, r8
 8024666:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802466a:	f508 7780 	add.w	r7, r8, #256	; 0x100
 802466e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024672:	eb07 2718 	add.w	r7, r7, r8, lsr #8
 8024676:	44dc      	add	ip, fp
 8024678:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802467c:	0a3f      	lsrs	r7, r7, #8
 802467e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024682:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024686:	ea4c 0807 	orr.w	r8, ip, r7
 802468a:	f008 17ff 	and.w	r7, r8, #16711935	; 0xff00ff
 802468e:	9702      	str	r7, [sp, #8]
 8024690:	f408 477f 	and.w	r7, r8, #65280	; 0xff00
 8024694:	9703      	str	r7, [sp, #12]
 8024696:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802469a:	d01d      	beq.n	80246d8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1e0>
 802469c:	9f01      	ldr	r7, [sp, #4]
 802469e:	fb06 f60e 	mul.w	r6, r6, lr
 80246a2:	fb07 f80e 	mul.w	r8, r7, lr
 80246a6:	ea4f 2c18 	mov.w	ip, r8, lsr #8
 80246aa:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80246ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80246b2:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80246b6:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80246ba:	44e0      	add	r8, ip
 80246bc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80246c0:	0a36      	lsrs	r6, r6, #8
 80246c2:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80246c6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80246ca:	ea48 0606 	orr.w	r6, r8, r6
 80246ce:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 80246d2:	9701      	str	r7, [sp, #4]
 80246d4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80246d8:	f8bd e020 	ldrh.w	lr, [sp, #32]
 80246dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80246de:	fb05 f509 	mul.w	r5, r5, r9
 80246e2:	fb07 f70e 	mul.w	r7, r7, lr
 80246e6:	f107 0c01 	add.w	ip, r7, #1
 80246ea:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80246ee:	ea6f 2c1c 	mvn.w	ip, ip, lsr #8
 80246f2:	fb02 f209 	mul.w	r2, r2, r9
 80246f6:	fb03 5501 	mla	r5, r3, r1, r5
 80246fa:	fb04 2201 	mla	r2, r4, r1, r2
 80246fe:	9b02      	ldr	r3, [sp, #8]
 8024700:	fa5f fc8c 	uxtb.w	ip, ip
 8024704:	fb03 5500 	mla	r5, r3, r0, r5
 8024708:	9b03      	ldr	r3, [sp, #12]
 802470a:	fb03 2200 	mla	r2, r3, r0, r2
 802470e:	9b01      	ldr	r3, [sp, #4]
 8024710:	fb03 550a 	mla	r5, r3, sl, r5
 8024714:	fb06 2a0a 	mla	sl, r6, sl, r2
 8024718:	9a05      	ldr	r2, [sp, #20]
 802471a:	9b04      	ldr	r3, [sp, #16]
 802471c:	fb12 f10c 	smulbb	r1, r2, ip
 8024720:	9a06      	ldr	r2, [sp, #24]
 8024722:	0a2e      	lsrs	r6, r5, #8
 8024724:	fb13 f30c 	smulbb	r3, r3, ip
 8024728:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802472c:	fb12 fc0c 	smulbb	ip, r2, ip
 8024730:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024734:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024738:	ea46 060a 	orr.w	r6, r6, sl
 802473c:	0c30      	lsrs	r0, r6, #16
 802473e:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8024742:	b2f6      	uxtb	r6, r6
 8024744:	fb00 330e 	mla	r3, r0, lr, r3
 8024748:	fb02 120e 	mla	r2, r2, lr, r1
 802474c:	fb06 c60e 	mla	r6, r6, lr, ip
 8024750:	b298      	uxth	r0, r3
 8024752:	b291      	uxth	r1, r2
 8024754:	b2b6      	uxth	r6, r6
 8024756:	1c43      	adds	r3, r0, #1
 8024758:	f106 0e01 	add.w	lr, r6, #1
 802475c:	1c4a      	adds	r2, r1, #1
 802475e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024762:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8024766:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802476a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802476e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8024772:	0952      	lsrs	r2, r2, #5
 8024774:	4333      	orrs	r3, r6
 8024776:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802477a:	4313      	orrs	r3, r2
 802477c:	9a07      	ldr	r2, [sp, #28]
 802477e:	8013      	strh	r3, [r2, #0]
 8024780:	b00b      	add	sp, #44	; 0x2c
 8024782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024786:	2e00      	cmp	r6, #0
 8024788:	db01      	blt.n	802478e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x296>
 802478a:	42b7      	cmp	r7, r6
 802478c:	dc3c      	bgt.n	8024808 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x310>
 802478e:	2500      	movs	r5, #0
 8024790:	462c      	mov	r4, r5
 8024792:	1c72      	adds	r2, r6, #1
 8024794:	d427      	bmi.n	80247e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2ee>
 8024796:	4297      	cmp	r7, r2
 8024798:	dd25      	ble.n	80247e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2ee>
 802479a:	b131      	cbz	r1, 80247aa <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2b2>
 802479c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80247a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80247a4:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80247a8:	e6d9      	b.n	802455e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 80247aa:	f1b8 0f00 	cmp.w	r8, #0
 80247ae:	db3b      	blt.n	8024828 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x330>
 80247b0:	45c1      	cmp	r9, r8
 80247b2:	dd39      	ble.n	8024828 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x330>
 80247b4:	468c      	mov	ip, r1
 80247b6:	460a      	mov	r2, r1
 80247b8:	b1c8      	cbz	r0, 80247ee <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2f6>
 80247ba:	2e00      	cmp	r6, #0
 80247bc:	db2d      	blt.n	802481a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x322>
 80247be:	42b7      	cmp	r7, r6
 80247c0:	dd2b      	ble.n	802481a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x322>
 80247c2:	f81e 8007 	ldrb.w	r8, [lr, r7]
 80247c6:	f85a 9028 	ldr.w	r9, [sl, r8, lsl #2]
 80247ca:	ea4f 6819 	mov.w	r8, r9, lsr #24
 80247ce:	3601      	adds	r6, #1
 80247d0:	d41f      	bmi.n	8024812 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x31a>
 80247d2:	42b7      	cmp	r7, r6
 80247d4:	dd1d      	ble.n	8024812 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x31a>
 80247d6:	b321      	cbz	r1, 8024822 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x32a>
 80247d8:	4477      	add	r7, lr
 80247da:	787e      	ldrb	r6, [r7, #1]
 80247dc:	f85a 6026 	ldr.w	r6, [sl, r6, lsl #2]
 80247e0:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 80247e4:	e6c6      	b.n	8024574 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x7c>
 80247e6:	f04f 0c00 	mov.w	ip, #0
 80247ea:	4662      	mov	r2, ip
 80247ec:	e6b7      	b.n	802455e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 80247ee:	290f      	cmp	r1, #15
 80247f0:	d821      	bhi.n	8024836 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 80247f2:	b289      	uxth	r1, r1
 80247f4:	4682      	mov	sl, r0
 80247f6:	4607      	mov	r7, r0
 80247f8:	4683      	mov	fp, r0
 80247fa:	e9cd 0002 	strd	r0, r0, [sp, #8]
 80247fe:	4606      	mov	r6, r0
 8024800:	9001      	str	r0, [sp, #4]
 8024802:	4686      	mov	lr, r0
 8024804:	4680      	mov	r8, r0
 8024806:	e6d1      	b.n	80245ac <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb4>
 8024808:	5d52      	ldrb	r2, [r2, r5]
 802480a:	f85a 4022 	ldr.w	r4, [sl, r2, lsl #2]
 802480e:	0e25      	lsrs	r5, r4, #24
 8024810:	e7bf      	b.n	8024792 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x29a>
 8024812:	f04f 0e00 	mov.w	lr, #0
 8024816:	4676      	mov	r6, lr
 8024818:	e6ac      	b.n	8024574 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x7c>
 802481a:	f04f 0800 	mov.w	r8, #0
 802481e:	46c1      	mov	r9, r8
 8024820:	e7d5      	b.n	80247ce <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2d6>
 8024822:	460e      	mov	r6, r1
 8024824:	468e      	mov	lr, r1
 8024826:	e6a8      	b.n	802457a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8024828:	460a      	mov	r2, r1
 802482a:	460e      	mov	r6, r1
 802482c:	4689      	mov	r9, r1
 802482e:	468e      	mov	lr, r1
 8024830:	4688      	mov	r8, r1
 8024832:	468c      	mov	ip, r1
 8024834:	e6a1      	b.n	802457a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8024836:	4b03      	ldr	r3, [pc, #12]	; (8024844 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x34c>)
 8024838:	4a03      	ldr	r2, [pc, #12]	; (8024848 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x350>)
 802483a:	f44f 710f 	mov.w	r1, #572	; 0x23c
 802483e:	4803      	ldr	r0, [pc, #12]	; (802484c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x354>)
 8024840:	f004 fedc 	bl	80295fc <__assert_func>
 8024844:	0802c8e4 	.word	0x0802c8e4
 8024848:	0802cf5c 	.word	0x0802cf5c
 802484c:	0802ca68 	.word	0x0802ca68

08024850 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024854:	ed2d 8b08 	vpush	{d8-d11}
 8024858:	b0a9      	sub	sp, #164	; 0xa4
 802485a:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 802485c:	9022      	str	r0, [sp, #136]	; 0x88
 802485e:	9115      	str	r1, [sp, #84]	; 0x54
 8024860:	6860      	ldr	r0, [r4, #4]
 8024862:	9940      	ldr	r1, [sp, #256]	; 0x100
 8024864:	9219      	str	r2, [sp, #100]	; 0x64
 8024866:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8024868:	e9dd ba3b 	ldrd	fp, sl, [sp, #236]	; 0xec
 802486c:	fb00 1202 	mla	r2, r0, r2, r1
 8024870:	6820      	ldr	r0, [r4, #0]
 8024872:	46d1      	mov	r9, sl
 8024874:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8024878:	46da      	mov	sl, fp
 802487a:	eeb0 aa40 	vmov.f32	s20, s0
 802487e:	eef0 9a60 	vmov.f32	s19, s1
 8024882:	eeb0 9a41 	vmov.f32	s18, s2
 8024886:	eef0 8a62 	vmov.f32	s17, s5
 802488a:	eeb0 8a43 	vmov.f32	s16, s6
 802488e:	eef0 ba44 	vmov.f32	s23, s8
 8024892:	eeb0 ba64 	vmov.f32	s22, s9
 8024896:	eef0 aa45 	vmov.f32	s21, s10
 802489a:	4693      	mov	fp, r2
 802489c:	9942      	ldr	r1, [sp, #264]	; 0x108
 802489e:	9d42      	ldr	r5, [sp, #264]	; 0x108
 80248a0:	6849      	ldr	r1, [r1, #4]
 80248a2:	f89d 410c 	ldrb.w	r4, [sp, #268]	; 0x10c
 80248a6:	3104      	adds	r1, #4
 80248a8:	682d      	ldr	r5, [r5, #0]
 80248aa:	910e      	str	r1, [sp, #56]	; 0x38
 80248ac:	b2a1      	uxth	r1, r4
 80248ae:	9423      	str	r4, [sp, #140]	; 0x8c
 80248b0:	9511      	str	r5, [sp, #68]	; 0x44
 80248b2:	9112      	str	r1, [sp, #72]	; 0x48
 80248b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80248b6:	2a00      	cmp	r2, #0
 80248b8:	dc02      	bgt.n	80248c0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80248ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80248bc:	2a00      	cmp	r2, #0
 80248be:	dd65      	ble.n	802498c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80248c0:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80248c2:	2b00      	cmp	r3, #0
 80248c4:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 80248c8:	b234      	sxth	r4, r6
 80248ca:	fa0f f78c 	sxth.w	r7, ip
 80248ce:	f340 8396 	ble.w	8024ffe <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ae>
 80248d2:	1e65      	subs	r5, r4, #1
 80248d4:	f107 3eff 	add.w	lr, r7, #4294967295
 80248d8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80248dc:	e9dd c83d 	ldrd	ip, r8, [sp, #244]	; 0xf4
 80248e0:	ea5f 422a 	movs.w	r2, sl, asr #16
 80248e4:	ea4f 4129 	mov.w	r1, r9, asr #16
 80248e8:	d405      	bmi.n	80248f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80248ea:	42aa      	cmp	r2, r5
 80248ec:	da03      	bge.n	80248f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80248ee:	2900      	cmp	r1, #0
 80248f0:	db01      	blt.n	80248f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80248f2:	4571      	cmp	r1, lr
 80248f4:	db4f      	blt.n	8024996 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80248f6:	1c50      	adds	r0, r2, #1
 80248f8:	d406      	bmi.n	8024908 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80248fa:	42a0      	cmp	r0, r4
 80248fc:	dc04      	bgt.n	8024908 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80248fe:	1c48      	adds	r0, r1, #1
 8024900:	d402      	bmi.n	8024908 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024902:	42b8      	cmp	r0, r7
 8024904:	f340 834f 	ble.w	8024fa6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 8024908:	3b01      	subs	r3, #1
 802490a:	44e2      	add	sl, ip
 802490c:	44c1      	add	r9, r8
 802490e:	f10b 0b02 	add.w	fp, fp, #2
 8024912:	d1e5      	bne.n	80248e0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024914:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024916:	2b00      	cmp	r3, #0
 8024918:	dd38      	ble.n	802498c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802491a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802491e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024922:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024926:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802492a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802492e:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8024932:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024936:	ee76 6a68 	vsub.f32	s13, s12, s17
 802493a:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802493e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024942:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024946:	ee16 2a90 	vmov	r2, s13
 802494a:	3b01      	subs	r3, #1
 802494c:	9315      	str	r3, [sp, #84]	; 0x54
 802494e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8024950:	fb92 f3f3 	sdiv	r3, r2, r3
 8024954:	ee17 2a10 	vmov	r2, s14
 8024958:	eeb0 7a48 	vmov.f32	s14, s16
 802495c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024960:	ee17 9a10 	vmov	r9, s14
 8024964:	eeb0 7a68 	vmov.f32	s14, s17
 8024968:	933d      	str	r3, [sp, #244]	; 0xf4
 802496a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802496c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8024970:	fb92 f3f3 	sdiv	r3, r2, r3
 8024974:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8024976:	933e      	str	r3, [sp, #248]	; 0xf8
 8024978:	ee17 aa10 	vmov	sl, s14
 802497c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802497e:	eeb0 8a67 	vmov.f32	s16, s15
 8024982:	eef0 8a46 	vmov.f32	s17, s12
 8024986:	bf08      	it	eq
 8024988:	4613      	moveq	r3, r2
 802498a:	e793      	b.n	80248b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802498c:	b029      	add	sp, #164	; 0xa4
 802498e:	ecbd 8b08 	vpop	{d8-d11}
 8024992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024996:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 802499a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 802499e:	983d      	ldr	r0, [sp, #244]	; 0xf4
 80249a0:	1e59      	subs	r1, r3, #1
 80249a2:	fb00 a201 	mla	r2, r0, r1, sl
 80249a6:	1412      	asrs	r2, r2, #16
 80249a8:	910d      	str	r1, [sp, #52]	; 0x34
 80249aa:	f100 8161 	bmi.w	8024c70 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80249ae:	42aa      	cmp	r2, r5
 80249b0:	f280 815e 	bge.w	8024c70 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80249b4:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80249b6:	fb02 9201 	mla	r2, r2, r1, r9
 80249ba:	1412      	asrs	r2, r2, #16
 80249bc:	f100 8158 	bmi.w	8024c70 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80249c0:	3f01      	subs	r7, #1
 80249c2:	42ba      	cmp	r2, r7
 80249c4:	f280 8154 	bge.w	8024c70 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80249c8:	2b00      	cmp	r3, #0
 80249ca:	dda3      	ble.n	8024914 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 80249cc:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 80249d0:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 80249d4:	46d0      	mov	r8, sl
 80249d6:	4621      	mov	r1, r4
 80249d8:	e129      	b.n	8024c2e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80249da:	f893 c001 	ldrb.w	ip, [r3, #1]
 80249de:	f856 502c 	ldr.w	r5, [r6, ip, lsl #2]
 80249e2:	9513      	str	r5, [sp, #76]	; 0x4c
 80249e4:	0e2d      	lsrs	r5, r5, #24
 80249e6:	950a      	str	r5, [sp, #40]	; 0x28
 80249e8:	b162      	cbz	r2, 8024a04 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80249ea:	185d      	adds	r5, r3, r1
 80249ec:	786d      	ldrb	r5, [r5, #1]
 80249ee:	5c5b      	ldrb	r3, [r3, r1]
 80249f0:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 80249f4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80249f8:	9116      	str	r1, [sp, #88]	; 0x58
 80249fa:	9314      	str	r3, [sp, #80]	; 0x50
 80249fc:	0e09      	lsrs	r1, r1, #24
 80249fe:	0e1b      	lsrs	r3, r3, #24
 8024a00:	910c      	str	r1, [sp, #48]	; 0x30
 8024a02:	930b      	str	r3, [sp, #44]	; 0x2c
 8024a04:	b2a4      	uxth	r4, r4
 8024a06:	b292      	uxth	r2, r2
 8024a08:	fb04 f502 	mul.w	r5, r4, r2
 8024a0c:	0124      	lsls	r4, r4, #4
 8024a0e:	1b66      	subs	r6, r4, r5
 8024a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a12:	b2b6      	uxth	r6, r6
 8024a14:	fb06 f103 	mul.w	r1, r6, r3
 8024a18:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8024a1c:	b292      	uxth	r2, r2
 8024a1e:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 8024a22:	1a9b      	subs	r3, r3, r2
 8024a24:	b29b      	uxth	r3, r3
 8024a26:	fb03 1100 	mla	r1, r3, r0, r1
 8024a2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024a2c:	fb02 1104 	mla	r1, r2, r4, r1
 8024a30:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024a32:	fb05 1104 	mla	r1, r5, r4, r1
 8024a36:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024a3a:	2900      	cmp	r1, #0
 8024a3c:	f000 80ea 	beq.w	8024c14 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c4>
 8024a40:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 8024a44:	28ff      	cmp	r0, #255	; 0xff
 8024a46:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024a4a:	940f      	str	r4, [sp, #60]	; 0x3c
 8024a4c:	970d      	str	r7, [sp, #52]	; 0x34
 8024a4e:	d01c      	beq.n	8024a8a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024a50:	fb04 f400 	mul.w	r4, r4, r0
 8024a54:	4627      	mov	r7, r4
 8024a56:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024a58:	fb04 fe00 	mul.w	lr, r4, r0
 8024a5c:	0a3c      	lsrs	r4, r7, #8
 8024a5e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024a62:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024a66:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 8024a6a:	4427      	add	r7, r4
 8024a6c:	eb00 201e 	add.w	r0, r0, lr, lsr #8
 8024a70:	0a3f      	lsrs	r7, r7, #8
 8024a72:	0a00      	lsrs	r0, r0, #8
 8024a74:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024a78:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024a7c:	4307      	orrs	r7, r0
 8024a7e:	f007 10ff 	and.w	r0, r7, #16711935	; 0xff00ff
 8024a82:	900f      	str	r0, [sp, #60]	; 0x3c
 8024a84:	f407 407f 	and.w	r0, r7, #65280	; 0xff00
 8024a88:	900d      	str	r0, [sp, #52]	; 0x34
 8024a8a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8024a8c:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 8024a90:	f400 4e7f 	and.w	lr, r0, #65280	; 0xff00
 8024a94:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024a96:	28ff      	cmp	r0, #255	; 0xff
 8024a98:	d01c      	beq.n	8024ad4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8024a9a:	fb0c fc00 	mul.w	ip, ip, r0
 8024a9e:	fb0e fe00 	mul.w	lr, lr, r0
 8024aa2:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8024aa6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024aaa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024aae:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 8024ab2:	44a4      	add	ip, r4
 8024ab4:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8024ab8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024abc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024ac0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024ac4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024ac8:	ea4c 0e0e 	orr.w	lr, ip, lr
 8024acc:	f00e 1cff 	and.w	ip, lr, #16711935	; 0xff00ff
 8024ad0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024ad4:	9814      	ldr	r0, [sp, #80]	; 0x50
 8024ad6:	f000 17ff 	and.w	r7, r0, #16711935	; 0xff00ff
 8024ada:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 8024ade:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024ae0:	28ff      	cmp	r0, #255	; 0xff
 8024ae2:	d01a      	beq.n	8024b1a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8024ae4:	fb07 f700 	mul.w	r7, r7, r0
 8024ae8:	fb0a fa00 	mul.w	sl, sl, r0
 8024aec:	0a3c      	lsrs	r4, r7, #8
 8024aee:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024af2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024af6:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8024afa:	4427      	add	r7, r4
 8024afc:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024b00:	0a3f      	lsrs	r7, r7, #8
 8024b02:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024b06:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024b0a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024b0e:	ea47 0a0a 	orr.w	sl, r7, sl
 8024b12:	f00a 17ff 	and.w	r7, sl, #16711935	; 0xff00ff
 8024b16:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024b1a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024b1c:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8024b20:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8024b24:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024b26:	2cff      	cmp	r4, #255	; 0xff
 8024b28:	d01d      	beq.n	8024b66 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8024b2a:	fb00 f004 	mul.w	r0, r0, r4
 8024b2e:	fb0b fb04 	mul.w	fp, fp, r4
 8024b32:	0a04      	lsrs	r4, r0, #8
 8024b34:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024b38:	9418      	str	r4, [sp, #96]	; 0x60
 8024b3a:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 8024b3e:	9417      	str	r4, [sp, #92]	; 0x5c
 8024b40:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024b42:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024b46:	4420      	add	r0, r4
 8024b48:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024b4a:	0a00      	lsrs	r0, r0, #8
 8024b4c:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 8024b50:	0a24      	lsrs	r4, r4, #8
 8024b52:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024b56:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8024b5a:	ea40 0b0b 	orr.w	fp, r0, fp
 8024b5e:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 8024b62:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024b66:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024b68:	fb0c fc06 	mul.w	ip, ip, r6
 8024b6c:	fb01 f104 	mul.w	r1, r1, r4
 8024b70:	1c4c      	adds	r4, r1, #1
 8024b72:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8024b76:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024b7a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024b7c:	fb0e f606 	mul.w	r6, lr, r6
 8024b80:	fb04 cc03 	mla	ip, r4, r3, ip
 8024b84:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024b86:	fb07 cc02 	mla	ip, r7, r2, ip
 8024b8a:	fb04 6603 	mla	r6, r4, r3, r6
 8024b8e:	fb0a 6602 	mla	r6, sl, r2, r6
 8024b92:	fb00 cc05 	mla	ip, r0, r5, ip
 8024b96:	fb0b 6605 	mla	r6, fp, r5, r6
 8024b9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b9e:	0a36      	lsrs	r6, r6, #8
 8024ba0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024ba4:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 8024ba8:	ea4c 0303 	orr.w	r3, ip, r3
 8024bac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024bae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024bb0:	0c1f      	lsrs	r7, r3, #16
 8024bb2:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8024bb6:	b2db      	uxtb	r3, r3
 8024bb8:	8805      	ldrh	r5, [r0, #0]
 8024bba:	fb13 f302 	smulbb	r3, r3, r2
 8024bbe:	fb17 f702 	smulbb	r7, r7, r2
 8024bc2:	fb16 f602 	smulbb	r6, r6, r2
 8024bc6:	1228      	asrs	r0, r5, #8
 8024bc8:	10ea      	asrs	r2, r5, #3
 8024bca:	00ed      	lsls	r5, r5, #3
 8024bcc:	b2c9      	uxtb	r1, r1
 8024bce:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024bd2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024bd6:	b2ed      	uxtb	r5, r5
 8024bd8:	fb00 7001 	mla	r0, r0, r1, r7
 8024bdc:	fb02 6201 	mla	r2, r2, r1, r6
 8024be0:	fb05 3101 	mla	r1, r5, r1, r3
 8024be4:	b280      	uxth	r0, r0
 8024be6:	b292      	uxth	r2, r2
 8024be8:	b289      	uxth	r1, r1
 8024bea:	1c43      	adds	r3, r0, #1
 8024bec:	1c4c      	adds	r4, r1, #1
 8024bee:	f102 0c01 	add.w	ip, r2, #1
 8024bf2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024bf6:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8024bfa:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024bfe:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024c02:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8024c06:	0952      	lsrs	r2, r2, #5
 8024c08:	4308      	orrs	r0, r1
 8024c0a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024c0e:	4302      	orrs	r2, r0
 8024c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024c12:	8002      	strh	r2, [r0, #0]
 8024c14:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8024c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c18:	4490      	add	r8, r2
 8024c1a:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8024c1c:	3302      	adds	r3, #2
 8024c1e:	4491      	add	r9, r2
 8024c20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024c22:	9309      	str	r3, [sp, #36]	; 0x24
 8024c24:	4293      	cmp	r3, r2
 8024c26:	d021      	beq.n	8024c6c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8024c28:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8024c2a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024c2e:	ea4f 4228 	mov.w	r2, r8, asr #16
 8024c32:	ea4f 4329 	mov.w	r3, r9, asr #16
 8024c36:	fb01 2303 	mla	r3, r1, r3, r2
 8024c3a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024c3c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8024c3e:	5cc2      	ldrb	r2, [r0, r3]
 8024c40:	f3c8 3403 	ubfx	r4, r8, #12, #4
 8024c44:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8024c48:	4403      	add	r3, r0
 8024c4a:	f3c9 3203 	ubfx	r2, r9, #12, #4
 8024c4e:	0e38      	lsrs	r0, r7, #24
 8024c50:	2c00      	cmp	r4, #0
 8024c52:	f47f aec2 	bne.w	80249da <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8024c56:	2a00      	cmp	r2, #0
 8024c58:	f43f aed4 	beq.w	8024a04 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8024c5c:	5c5b      	ldrb	r3, [r3, r1]
 8024c5e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024c60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8024c64:	9314      	str	r3, [sp, #80]	; 0x50
 8024c66:	0e1b      	lsrs	r3, r3, #24
 8024c68:	930b      	str	r3, [sp, #44]	; 0x2c
 8024c6a:	e6cb      	b.n	8024a04 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8024c6c:	4693      	mov	fp, r2
 8024c6e:	e651      	b.n	8024914 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8024c70:	2b00      	cmp	r3, #0
 8024c72:	f77f ae4f 	ble.w	8024914 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8024c76:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8024c7a:	ea4f 422a 	mov.w	r2, sl, asr #16
 8024c7e:	ea4f 4129 	mov.w	r1, r9, asr #16
 8024c82:	2a00      	cmp	r2, #0
 8024c84:	465f      	mov	r7, fp
 8024c86:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8024c8a:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8024c8c:	e9dd 5b3d 	ldrd	r5, fp, [sp, #244]	; 0xf4
 8024c90:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8024c94:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 8024c98:	f2c0 815c 	blt.w	8024f54 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8024c9c:	1e73      	subs	r3, r6, #1
 8024c9e:	429a      	cmp	r2, r3
 8024ca0:	f280 8158 	bge.w	8024f54 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8024ca4:	2900      	cmp	r1, #0
 8024ca6:	f2c0 8155 	blt.w	8024f54 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8024caa:	f10c 33ff 	add.w	r3, ip, #4294967295
 8024cae:	4299      	cmp	r1, r3
 8024cb0:	f280 8150 	bge.w	8024f54 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8024cb4:	b233      	sxth	r3, r6
 8024cb6:	fb01 2203 	mla	r2, r1, r3, r2
 8024cba:	9911      	ldr	r1, [sp, #68]	; 0x44
 8024cbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8024cbe:	5c8b      	ldrb	r3, [r1, r2]
 8024cc0:	440a      	add	r2, r1
 8024cc2:	4616      	mov	r6, r2
 8024cc4:	9210      	str	r2, [sp, #64]	; 0x40
 8024cc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024cc8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8024ccc:	0e0b      	lsrs	r3, r1, #24
 8024cce:	2800      	cmp	r0, #0
 8024cd0:	f000 816f 	beq.w	8024fb2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x762>
 8024cd4:	f896 c001 	ldrb.w	ip, [r6, #1]
 8024cd8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8024cdc:	9224      	str	r2, [sp, #144]	; 0x90
 8024cde:	0e12      	lsrs	r2, r2, #24
 8024ce0:	921a      	str	r2, [sp, #104]	; 0x68
 8024ce2:	f1be 0f00 	cmp.w	lr, #0
 8024ce6:	f040 8172 	bne.w	8024fce <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 8024cea:	b280      	uxth	r0, r0
 8024cec:	fa1f fc8e 	uxth.w	ip, lr
 8024cf0:	fb00 f20c 	mul.w	r2, r0, ip
 8024cf4:	0106      	lsls	r6, r0, #4
 8024cf6:	1ab0      	subs	r0, r6, r2
 8024cf8:	b280      	uxth	r0, r0
 8024cfa:	4686      	mov	lr, r0
 8024cfc:	900f      	str	r0, [sp, #60]	; 0x3c
 8024cfe:	981a      	ldr	r0, [sp, #104]	; 0x68
 8024d00:	ebc2 1c0c 	rsb	ip, r2, ip, lsl #4
 8024d04:	fb0e f000 	mul.w	r0, lr, r0
 8024d08:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 8024d0c:	fa1f fe8c 	uxth.w	lr, ip
 8024d10:	eba6 060e 	sub.w	r6, r6, lr
 8024d14:	b2b6      	uxth	r6, r6
 8024d16:	fb06 0003 	mla	r0, r6, r3, r0
 8024d1a:	9610      	str	r6, [sp, #64]	; 0x40
 8024d1c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8024d1e:	fb0e 0006 	mla	r0, lr, r6, r0
 8024d22:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8024d24:	fb02 0006 	mla	r0, r2, r6, r0
 8024d28:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024d2c:	9017      	str	r0, [sp, #92]	; 0x5c
 8024d2e:	2800      	cmp	r0, #0
 8024d30:	f000 80fa 	beq.w	8024f28 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8024d34:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 8024d38:	2bff      	cmp	r3, #255	; 0xff
 8024d3a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024d3e:	9018      	str	r0, [sp, #96]	; 0x60
 8024d40:	911d      	str	r1, [sp, #116]	; 0x74
 8024d42:	d01b      	beq.n	8024d7c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52c>
 8024d44:	fb01 f103 	mul.w	r1, r1, r3
 8024d48:	fb00 f003 	mul.w	r0, r0, r3
 8024d4c:	460b      	mov	r3, r1
 8024d4e:	0a01      	lsrs	r1, r0, #8
 8024d50:	f100 1601 	add.w	r6, r0, #65537	; 0x10001
 8024d54:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024d58:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8024d5c:	4431      	add	r1, r6
 8024d5e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024d62:	0a09      	lsrs	r1, r1, #8
 8024d64:	0a1b      	lsrs	r3, r3, #8
 8024d66:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024d6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024d6e:	430b      	orrs	r3, r1
 8024d70:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8024d74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024d78:	9118      	str	r1, [sp, #96]	; 0x60
 8024d7a:	931d      	str	r3, [sp, #116]	; 0x74
 8024d7c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024d7e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8024d80:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8024d84:	2eff      	cmp	r6, #255	; 0xff
 8024d86:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024d8a:	931e      	str	r3, [sp, #120]	; 0x78
 8024d8c:	911f      	str	r1, [sp, #124]	; 0x7c
 8024d8e:	d01b      	beq.n	8024dc8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x578>
 8024d90:	fb01 f106 	mul.w	r1, r1, r6
 8024d94:	fb03 f306 	mul.w	r3, r3, r6
 8024d98:	460e      	mov	r6, r1
 8024d9a:	0a19      	lsrs	r1, r3, #8
 8024d9c:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8024da0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024da4:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8024da8:	4401      	add	r1, r0
 8024daa:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8024dae:	0a09      	lsrs	r1, r1, #8
 8024db0:	0a1b      	lsrs	r3, r3, #8
 8024db2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024db6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024dba:	4319      	orrs	r1, r3
 8024dbc:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8024dc0:	931e      	str	r3, [sp, #120]	; 0x78
 8024dc2:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
 8024dc6:	931f      	str	r3, [sp, #124]	; 0x7c
 8024dc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024dca:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8024dce:	f403 4c7f 	and.w	ip, r3, #65280	; 0xff00
 8024dd2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024dd4:	9120      	str	r1, [sp, #128]	; 0x80
 8024dd6:	2bff      	cmp	r3, #255	; 0xff
 8024dd8:	d01c      	beq.n	8024e14 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8024dda:	fb01 f103 	mul.w	r1, r1, r3
 8024dde:	4608      	mov	r0, r1
 8024de0:	fb0c fc03 	mul.w	ip, ip, r3
 8024de4:	0a09      	lsrs	r1, r1, #8
 8024de6:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 8024dea:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024dee:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024df2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024df6:	4408      	add	r0, r1
 8024df8:	0a00      	lsrs	r0, r0, #8
 8024dfa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024dfe:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024e02:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024e06:	ea40 0c0c 	orr.w	ip, r0, ip
 8024e0a:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8024e0e:	9320      	str	r3, [sp, #128]	; 0x80
 8024e10:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024e14:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8024e16:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8024e1a:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 8024e1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8024e20:	9321      	str	r3, [sp, #132]	; 0x84
 8024e22:	29ff      	cmp	r1, #255	; 0xff
 8024e24:	d019      	beq.n	8024e5a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 8024e26:	fb03 f301 	mul.w	r3, r3, r1
 8024e2a:	fb06 f601 	mul.w	r6, r6, r1
 8024e2e:	0a19      	lsrs	r1, r3, #8
 8024e30:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024e34:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8024e38:	f506 7080 	add.w	r0, r6, #256	; 0x100
 8024e3c:	4419      	add	r1, r3
 8024e3e:	eb00 2616 	add.w	r6, r0, r6, lsr #8
 8024e42:	0a09      	lsrs	r1, r1, #8
 8024e44:	0a36      	lsrs	r6, r6, #8
 8024e46:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024e4a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024e4e:	430e      	orrs	r6, r1
 8024e50:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8024e54:	9321      	str	r3, [sp, #132]	; 0x84
 8024e56:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024e5a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024e5c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8024e5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024e60:	fb00 f001 	mul.w	r0, r0, r1
 8024e64:	4601      	mov	r1, r0
 8024e66:	3001      	adds	r0, #1
 8024e68:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8024e6c:	ea6f 2011 	mvn.w	r0, r1, lsr #8
 8024e70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024e72:	9025      	str	r0, [sp, #148]	; 0x94
 8024e74:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024e76:	fb00 f001 	mul.w	r0, r0, r1
 8024e7a:	900f      	str	r0, [sp, #60]	; 0x3c
 8024e7c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024e7e:	fb00 f001 	mul.w	r0, r0, r1
 8024e82:	9017      	str	r0, [sp, #92]	; 0x5c
 8024e84:	9818      	ldr	r0, [sp, #96]	; 0x60
 8024e86:	4601      	mov	r1, r0
 8024e88:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024e8a:	fb01 0003 	mla	r0, r1, r3, r0
 8024e8e:	900f      	str	r0, [sp, #60]	; 0x3c
 8024e90:	981d      	ldr	r0, [sp, #116]	; 0x74
 8024e92:	4601      	mov	r1, r0
 8024e94:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024e96:	fb01 0103 	mla	r1, r1, r3, r0
 8024e9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024e9c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024e9e:	fb0c 110e 	mla	r1, ip, lr, r1
 8024ea2:	fb03 000e 	mla	r0, r3, lr, r0
 8024ea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024ea8:	f89d e094 	ldrb.w	lr, [sp, #148]	; 0x94
 8024eac:	fb03 0002 	mla	r0, r3, r2, r0
 8024eb0:	fb06 1302 	mla	r3, r6, r2, r1
 8024eb4:	0a02      	lsrs	r2, r0, #8
 8024eb6:	0a1b      	lsrs	r3, r3, #8
 8024eb8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024ebc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024ec0:	4313      	orrs	r3, r2
 8024ec2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024ec4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8024ec8:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8024ecc:	b2db      	uxtb	r3, r3
 8024ece:	8838      	ldrh	r0, [r7, #0]
 8024ed0:	fb16 f602 	smulbb	r6, r6, r2
 8024ed4:	fb1c fc02 	smulbb	ip, ip, r2
 8024ed8:	fb13 f302 	smulbb	r3, r3, r2
 8024edc:	1201      	asrs	r1, r0, #8
 8024ede:	10c2      	asrs	r2, r0, #3
 8024ee0:	00c0      	lsls	r0, r0, #3
 8024ee2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024ee6:	b2c0      	uxtb	r0, r0
 8024ee8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024eec:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024ef0:	fb02 620e 	mla	r2, r2, lr, r6
 8024ef4:	fb00 330e 	mla	r3, r0, lr, r3
 8024ef8:	b296      	uxth	r6, r2
 8024efa:	b29b      	uxth	r3, r3
 8024efc:	fa1f fc8c 	uxth.w	ip, ip
 8024f00:	1c58      	adds	r0, r3, #1
 8024f02:	f10c 0201 	add.w	r2, ip, #1
 8024f06:	1c71      	adds	r1, r6, #1
 8024f08:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 8024f0c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024f10:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8024f14:	f402 4378 	and.w	r3, r2, #63488	; 0xf800
 8024f18:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8024f1c:	094a      	lsrs	r2, r1, #5
 8024f1e:	4303      	orrs	r3, r0
 8024f20:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024f24:	4313      	orrs	r3, r2
 8024f26:	803b      	strh	r3, [r7, #0]
 8024f28:	f1b8 0f00 	cmp.w	r8, #0
 8024f2c:	f107 0702 	add.w	r7, r7, #2
 8024f30:	44aa      	add	sl, r5
 8024f32:	44d9      	add	r9, fp
 8024f34:	dd2e      	ble.n	8024f94 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8024f36:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8024f3a:	ea4f 422a 	mov.w	r2, sl, asr #16
 8024f3e:	2a00      	cmp	r2, #0
 8024f40:	f108 38ff 	add.w	r8, r8, #4294967295
 8024f44:	ea4f 4129 	mov.w	r1, r9, asr #16
 8024f48:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8024f4c:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 8024f50:	f6bf aea4 	bge.w	8024c9c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8024f54:	1c53      	adds	r3, r2, #1
 8024f56:	d4e7      	bmi.n	8024f28 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8024f58:	42b3      	cmp	r3, r6
 8024f5a:	dce5      	bgt.n	8024f28 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8024f5c:	1c4b      	adds	r3, r1, #1
 8024f5e:	d4e3      	bmi.n	8024f28 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8024f60:	4563      	cmp	r3, ip
 8024f62:	dce1      	bgt.n	8024f28 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8024f64:	fa0f f38c 	sxth.w	r3, ip
 8024f68:	b236      	sxth	r6, r6
 8024f6a:	e9cd 6300 	strd	r6, r3, [sp]
 8024f6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024f70:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8024f74:	e9cd e305 	strd	lr, r3, [sp, #20]
 8024f78:	9202      	str	r2, [sp, #8]
 8024f7a:	4639      	mov	r1, r7
 8024f7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024f7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024f80:	9822      	ldr	r0, [sp, #136]	; 0x88
 8024f82:	f7ff fab9 	bl	80244f8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8024f86:	f1b8 0f00 	cmp.w	r8, #0
 8024f8a:	f107 0702 	add.w	r7, r7, #2
 8024f8e:	44aa      	add	sl, r5
 8024f90:	44d9      	add	r9, fp
 8024f92:	dcd0      	bgt.n	8024f36 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e6>
 8024f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024f96:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024f9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024f9e:	3301      	adds	r3, #1
 8024fa0:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8024fa4:	e4b6      	b.n	8024914 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8024fa6:	3b01      	subs	r3, #1
 8024fa8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8024fac:	930d      	str	r3, [sp, #52]	; 0x34
 8024fae:	4698      	mov	r8, r3
 8024fb0:	e667      	b.n	8024c82 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8024fb2:	f1be 0f00 	cmp.w	lr, #0
 8024fb6:	f43f ae98 	beq.w	8024cea <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8024fba:	4632      	mov	r2, r6
 8024fbc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8024fbe:	5d92      	ldrb	r2, [r2, r6]
 8024fc0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8024fc2:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8024fc6:	9226      	str	r2, [sp, #152]	; 0x98
 8024fc8:	0e12      	lsrs	r2, r2, #24
 8024fca:	921b      	str	r2, [sp, #108]	; 0x6c
 8024fcc:	e68d      	b.n	8024cea <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8024fce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024fd0:	eb06 0c02 	add.w	ip, r6, r2
 8024fd4:	4632      	mov	r2, r6
 8024fd6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8024fd8:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024fdc:	5d92      	ldrb	r2, [r2, r6]
 8024fde:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8024fe0:	9210      	str	r2, [sp, #64]	; 0x40
 8024fe2:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 8024fe6:	920f      	str	r2, [sp, #60]	; 0x3c
 8024fe8:	9227      	str	r2, [sp, #156]	; 0x9c
 8024fea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024fec:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8024ff0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024ff2:	9626      	str	r6, [sp, #152]	; 0x98
 8024ff4:	0e12      	lsrs	r2, r2, #24
 8024ff6:	921c      	str	r2, [sp, #112]	; 0x70
 8024ff8:	0e32      	lsrs	r2, r6, #24
 8024ffa:	921b      	str	r2, [sp, #108]	; 0x6c
 8024ffc:	e675      	b.n	8024cea <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8024ffe:	f43f ac89 	beq.w	8024914 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8025002:	1e65      	subs	r5, r4, #1
 8025004:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8025008:	e4c9      	b.n	802499e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802500a:	bf00      	nop

0802500c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 802500c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025010:	b089      	sub	sp, #36	; 0x24
 8025012:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
 8025016:	880f      	ldrh	r7, [r1, #0]
 8025018:	e9dd 5014 	ldrd	r5, r0, [sp, #80]	; 0x50
 802501c:	fb00 5408 	mla	r4, r0, r8, r5
 8025020:	9106      	str	r1, [sp, #24]
 8025022:	10f9      	asrs	r1, r7, #3
 8025024:	123e      	asrs	r6, r7, #8
 8025026:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802502a:	00ff      	lsls	r7, r7, #3
 802502c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8025030:	9104      	str	r1, [sp, #16]
 8025032:	2800      	cmp	r0, #0
 8025034:	b2f9      	uxtb	r1, r7
 8025036:	9105      	str	r1, [sp, #20]
 8025038:	9603      	str	r6, [sp, #12]
 802503a:	eb02 0704 	add.w	r7, r2, r4
 802503e:	f100 0c01 	add.w	ip, r0, #1
 8025042:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8025046:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 802504a:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 802504e:	db02      	blt.n	8025056 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x4a>
 8025050:	4582      	cmp	sl, r0
 8025052:	f300 8113 	bgt.w	802527c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8025056:	2600      	movs	r6, #0
 8025058:	46b1      	mov	r9, r6
 802505a:	4630      	mov	r0, r6
 802505c:	4634      	mov	r4, r6
 802505e:	f1bc 0f00 	cmp.w	ip, #0
 8025062:	db02      	blt.n	802506a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5e>
 8025064:	45e2      	cmp	sl, ip
 8025066:	f300 8123 	bgt.w	80252b0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a4>
 802506a:	2700      	movs	r7, #0
 802506c:	46bc      	mov	ip, r7
 802506e:	463d      	mov	r5, r7
 8025070:	9702      	str	r7, [sp, #8]
 8025072:	f1be 0f0f 	cmp.w	lr, #15
 8025076:	f200 8160 	bhi.w	802533a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 802507a:	290f      	cmp	r1, #15
 802507c:	f200 815d 	bhi.w	802533a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8025080:	b289      	uxth	r1, r1
 8025082:	fa1f f38e 	uxth.w	r3, lr
 8025086:	fb01 f803 	mul.w	r8, r1, r3
 802508a:	f005 12ff 	and.w	r2, r5, #16711935	; 0xff00ff
 802508e:	9200      	str	r2, [sp, #0]
 8025090:	9a02      	ldr	r2, [sp, #8]
 8025092:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8025096:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802509a:	b289      	uxth	r1, r1
 802509c:	9201      	str	r2, [sp, #4]
 802509e:	fb01 fa0c 	mul.w	sl, r1, ip
 80250a2:	9a02      	ldr	r2, [sp, #8]
 80250a4:	fb08 fb07 	mul.w	fp, r8, r7
 80250a8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80250ac:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80250b0:	9202      	str	r2, [sp, #8]
 80250b2:	011b      	lsls	r3, r3, #4
 80250b4:	eba3 0e08 	sub.w	lr, r3, r8
 80250b8:	fa1f fe8e 	uxth.w	lr, lr
 80250bc:	fb0e f206 	mul.w	r2, lr, r6
 80250c0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80250c4:	1a5b      	subs	r3, r3, r1
 80250c6:	b29b      	uxth	r3, r3
 80250c8:	fb03 2209 	mla	r2, r3, r9, r2
 80250cc:	4452      	add	r2, sl
 80250ce:	445a      	add	r2, fp
 80250d0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80250d4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80250d8:	9207      	str	r2, [sp, #28]
 80250da:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 80250de:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80250e2:	d019      	beq.n	8025118 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x10c>
 80250e4:	fb02 f209 	mul.w	r2, r2, r9
 80250e8:	fb04 f409 	mul.w	r4, r4, r9
 80250ec:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 80250f0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80250f4:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 80250f8:	f504 7a80 	add.w	sl, r4, #256	; 0x100
 80250fc:	445a      	add	r2, fp
 80250fe:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8025102:	0a12      	lsrs	r2, r2, #8
 8025104:	0a24      	lsrs	r4, r4, #8
 8025106:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802510a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802510e:	4314      	orrs	r4, r2
 8025110:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 8025114:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025118:	2eff      	cmp	r6, #255	; 0xff
 802511a:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 802511e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025122:	d01b      	beq.n	802515c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x150>
 8025124:	fb0a fa06 	mul.w	sl, sl, r6
 8025128:	fb00 f006 	mul.w	r0, r0, r6
 802512c:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8025130:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8025134:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025138:	f500 7980 	add.w	r9, r0, #256	; 0x100
 802513c:	44da      	add	sl, fp
 802513e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8025142:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025146:	0a00      	lsrs	r0, r0, #8
 8025148:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 802514c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025150:	ea4a 0000 	orr.w	r0, sl, r0
 8025154:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 8025158:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802515c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025160:	d020      	beq.n	80251a4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x198>
 8025162:	9e01      	ldr	r6, [sp, #4]
 8025164:	fb06 fb0c 	mul.w	fp, r6, ip
 8025168:	9e02      	ldr	r6, [sp, #8]
 802516a:	ea4f 291b 	mov.w	r9, fp, lsr #8
 802516e:	fb06 fc0c 	mul.w	ip, r6, ip
 8025172:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8025176:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802517a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802517e:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8025182:	44cb      	add	fp, r9
 8025184:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025188:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802518c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8025190:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025194:	ea4b 0c0c 	orr.w	ip, fp, ip
 8025198:	f00c 16ff 	and.w	r6, ip, #16711935	; 0xff00ff
 802519c:	9601      	str	r6, [sp, #4]
 802519e:	f40c 467f 	and.w	r6, ip, #65280	; 0xff00
 80251a2:	9602      	str	r6, [sp, #8]
 80251a4:	2fff      	cmp	r7, #255	; 0xff
 80251a6:	d01d      	beq.n	80251e4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d8>
 80251a8:	9e00      	ldr	r6, [sp, #0]
 80251aa:	fb05 f507 	mul.w	r5, r5, r7
 80251ae:	fb06 fb07 	mul.w	fp, r6, r7
 80251b2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80251b6:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80251ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80251be:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80251c2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80251c6:	44e3      	add	fp, ip
 80251c8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80251cc:	0a2d      	lsrs	r5, r5, #8
 80251ce:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80251d2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80251d6:	ea4b 0505 	orr.w	r5, fp, r5
 80251da:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 80251de:	9600      	str	r6, [sp, #0]
 80251e0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80251e4:	9e07      	ldr	r6, [sp, #28]
 80251e6:	fb0a fa0e 	mul.w	sl, sl, lr
 80251ea:	43f7      	mvns	r7, r6
 80251ec:	fb00 f00e 	mul.w	r0, r0, lr
 80251f0:	fb02 aa03 	mla	sl, r2, r3, sl
 80251f4:	fb04 0003 	mla	r0, r4, r3, r0
 80251f8:	9b01      	ldr	r3, [sp, #4]
 80251fa:	b2ff      	uxtb	r7, r7
 80251fc:	fb03 aa01 	mla	sl, r3, r1, sl
 8025200:	9b02      	ldr	r3, [sp, #8]
 8025202:	fb03 0c01 	mla	ip, r3, r1, r0
 8025206:	9b00      	ldr	r3, [sp, #0]
 8025208:	9803      	ldr	r0, [sp, #12]
 802520a:	fb03 aa08 	mla	sl, r3, r8, sl
 802520e:	9b05      	ldr	r3, [sp, #20]
 8025210:	9904      	ldr	r1, [sp, #16]
 8025212:	fb03 f307 	mul.w	r3, r3, r7
 8025216:	fb00 f007 	mul.w	r0, r0, r7
 802521a:	fb01 f107 	mul.w	r1, r1, r7
 802521e:	461f      	mov	r7, r3
 8025220:	fb05 c808 	mla	r8, r5, r8, ip
 8025224:	ea4f 251a 	mov.w	r5, sl, lsr #8
 8025228:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802522c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025230:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025234:	ea45 0508 	orr.w	r5, r5, r8
 8025238:	f100 0c01 	add.w	ip, r0, #1
 802523c:	1c4e      	adds	r6, r1, #1
 802523e:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8025242:	0c2c      	lsrs	r4, r5, #16
 8025244:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8025248:	1c78      	adds	r0, r7, #1
 802524a:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 802524e:	4b3e      	ldr	r3, [pc, #248]	; (8025348 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x33c>)
 8025250:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8025254:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8025258:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802525c:	b2ed      	uxtb	r5, r5
 802525e:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 8025262:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8025266:	00d2      	lsls	r2, r2, #3
 8025268:	ea43 05d5 	orr.w	r5, r3, r5, lsr #3
 802526c:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8025270:	431d      	orrs	r5, r3
 8025272:	9b06      	ldr	r3, [sp, #24]
 8025274:	801d      	strh	r5, [r3, #0]
 8025276:	b009      	add	sp, #36	; 0x24
 8025278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802527c:	2d00      	cmp	r5, #0
 802527e:	db01      	blt.n	8025284 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x278>
 8025280:	45a8      	cmp	r8, r5
 8025282:	dc41      	bgt.n	8025308 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2fc>
 8025284:	f04f 0900 	mov.w	r9, #0
 8025288:	464c      	mov	r4, r9
 802528a:	1c6a      	adds	r2, r5, #1
 802528c:	d42a      	bmi.n	80252e4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2d8>
 802528e:	4590      	cmp	r8, r2
 8025290:	dd28      	ble.n	80252e4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2d8>
 8025292:	f1be 0f00 	cmp.w	lr, #0
 8025296:	d004      	beq.n	80252a2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x296>
 8025298:	787a      	ldrb	r2, [r7, #1]
 802529a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802529e:	0e06      	lsrs	r6, r0, #24
 80252a0:	e6dd      	b.n	802505e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x52>
 80252a2:	f1bc 0f00 	cmp.w	ip, #0
 80252a6:	db40      	blt.n	802532a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x31e>
 80252a8:	45e2      	cmp	sl, ip
 80252aa:	dd3e      	ble.n	802532a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x31e>
 80252ac:	4676      	mov	r6, lr
 80252ae:	4670      	mov	r0, lr
 80252b0:	b1d9      	cbz	r1, 80252ea <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2de>
 80252b2:	2d00      	cmp	r5, #0
 80252b4:	db31      	blt.n	802531a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x30e>
 80252b6:	45a8      	cmp	r8, r5
 80252b8:	dd2f      	ble.n	802531a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x30e>
 80252ba:	f817 2008 	ldrb.w	r2, [r7, r8]
 80252be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80252c2:	9202      	str	r2, [sp, #8]
 80252c4:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80252c8:	3501      	adds	r5, #1
 80252ca:	d423      	bmi.n	8025314 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x308>
 80252cc:	45a8      	cmp	r8, r5
 80252ce:	dd21      	ble.n	8025314 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x308>
 80252d0:	f1be 0f00 	cmp.w	lr, #0
 80252d4:	d026      	beq.n	8025324 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x318>
 80252d6:	44b8      	add	r8, r7
 80252d8:	f898 5001 	ldrb.w	r5, [r8, #1]
 80252dc:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 80252e0:	0e2f      	lsrs	r7, r5, #24
 80252e2:	e6c6      	b.n	8025072 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 80252e4:	2600      	movs	r6, #0
 80252e6:	4630      	mov	r0, r6
 80252e8:	e6b9      	b.n	802505e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x52>
 80252ea:	f1be 0f0f 	cmp.w	lr, #15
 80252ee:	d824      	bhi.n	802533a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 80252f0:	fa1f f38e 	uxth.w	r3, lr
 80252f4:	4688      	mov	r8, r1
 80252f6:	468b      	mov	fp, r1
 80252f8:	468a      	mov	sl, r1
 80252fa:	e9cd 1101 	strd	r1, r1, [sp, #4]
 80252fe:	460d      	mov	r5, r1
 8025300:	9100      	str	r1, [sp, #0]
 8025302:	460f      	mov	r7, r1
 8025304:	468c      	mov	ip, r1
 8025306:	e6d4      	b.n	80250b2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 8025308:	5d12      	ldrb	r2, [r2, r4]
 802530a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 802530e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025312:	e7ba      	b.n	802528a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27e>
 8025314:	2700      	movs	r7, #0
 8025316:	463d      	mov	r5, r7
 8025318:	e6ab      	b.n	8025072 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 802531a:	f04f 0c00 	mov.w	ip, #0
 802531e:	f8cd c008 	str.w	ip, [sp, #8]
 8025322:	e7d1      	b.n	80252c8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2bc>
 8025324:	4675      	mov	r5, lr
 8025326:	4677      	mov	r7, lr
 8025328:	e6a7      	b.n	802507a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6e>
 802532a:	4670      	mov	r0, lr
 802532c:	4675      	mov	r5, lr
 802532e:	f8cd e008 	str.w	lr, [sp, #8]
 8025332:	4677      	mov	r7, lr
 8025334:	46f4      	mov	ip, lr
 8025336:	4676      	mov	r6, lr
 8025338:	e69f      	b.n	802507a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6e>
 802533a:	4b04      	ldr	r3, [pc, #16]	; (802534c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x340>)
 802533c:	4a04      	ldr	r2, [pc, #16]	; (8025350 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x344>)
 802533e:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8025342:	4804      	ldr	r0, [pc, #16]	; (8025354 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x348>)
 8025344:	f004 f95a 	bl	80295fc <__assert_func>
 8025348:	fffff800 	.word	0xfffff800
 802534c:	0802c8e4 	.word	0x0802c8e4
 8025350:	0802cf5c 	.word	0x0802cf5c
 8025354:	0802ca68 	.word	0x0802ca68

08025358 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802535c:	ed2d 8b08 	vpush	{d8-d11}
 8025360:	b0a3      	sub	sp, #140	; 0x8c
 8025362:	901e      	str	r0, [sp, #120]	; 0x78
 8025364:	9111      	str	r1, [sp, #68]	; 0x44
 8025366:	9215      	str	r2, [sp, #84]	; 0x54
 8025368:	e9dd 4139 	ldrd	r4, r1, [sp, #228]	; 0xe4
 802536c:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 802536e:	6860      	ldr	r0, [r4, #4]
 8025370:	e9dd 8b35 	ldrd	r8, fp, [sp, #212]	; 0xd4
 8025374:	fb00 1202 	mla	r2, r0, r2, r1
 8025378:	6820      	ldr	r0, [r4, #0]
 802537a:	46c1      	mov	r9, r8
 802537c:	eb00 0a42 	add.w	sl, r0, r2, lsl #1
 8025380:	46d8      	mov	r8, fp
 8025382:	eeb0 aa40 	vmov.f32	s20, s0
 8025386:	eef0 9a60 	vmov.f32	s19, s1
 802538a:	eeb0 9a41 	vmov.f32	s18, s2
 802538e:	eef0 8a62 	vmov.f32	s17, s5
 8025392:	eeb0 8a43 	vmov.f32	s16, s6
 8025396:	eef0 ba44 	vmov.f32	s23, s8
 802539a:	eeb0 ba64 	vmov.f32	s22, s9
 802539e:	eef0 aa45 	vmov.f32	s21, s10
 80253a2:	46d3      	mov	fp, sl
 80253a4:	993c      	ldr	r1, [sp, #240]	; 0xf0
 80253a6:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
 80253a8:	6849      	ldr	r1, [r1, #4]
 80253aa:	6824      	ldr	r4, [r4, #0]
 80253ac:	1d0a      	adds	r2, r1, #4
 80253ae:	940e      	str	r4, [sp, #56]	; 0x38
 80253b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80253b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80253b4:	2a00      	cmp	r2, #0
 80253b6:	dc02      	bgt.n	80253be <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80253b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80253ba:	2a00      	cmp	r2, #0
 80253bc:	dd65      	ble.n	802548a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 80253be:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 80253c0:	2b00      	cmp	r3, #0
 80253c2:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 80253c6:	b234      	sxth	r4, r6
 80253c8:	fa0f f78c 	sxth.w	r7, ip
 80253cc:	f340 836d 	ble.w	8025aaa <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 80253d0:	1e65      	subs	r5, r4, #1
 80253d2:	f107 3eff 	add.w	lr, r7, #4294967295
 80253d6:	f8cd c01c 	str.w	ip, [sp, #28]
 80253da:	e9dd ca37 	ldrd	ip, sl, [sp, #220]	; 0xdc
 80253de:	ea5f 4229 	movs.w	r2, r9, asr #16
 80253e2:	ea4f 4128 	mov.w	r1, r8, asr #16
 80253e6:	d405      	bmi.n	80253f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80253e8:	42aa      	cmp	r2, r5
 80253ea:	da03      	bge.n	80253f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80253ec:	2900      	cmp	r1, #0
 80253ee:	db01      	blt.n	80253f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80253f0:	4571      	cmp	r1, lr
 80253f2:	db4f      	blt.n	8025494 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80253f4:	1c50      	adds	r0, r2, #1
 80253f6:	d406      	bmi.n	8025406 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80253f8:	42a0      	cmp	r0, r4
 80253fa:	dc04      	bgt.n	8025406 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80253fc:	1c48      	adds	r0, r1, #1
 80253fe:	d402      	bmi.n	8025406 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8025400:	42b8      	cmp	r0, r7
 8025402:	f340 832f 	ble.w	8025a64 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8025406:	3b01      	subs	r3, #1
 8025408:	44e1      	add	r9, ip
 802540a:	44d0      	add	r8, sl
 802540c:	f10b 0b02 	add.w	fp, fp, #2
 8025410:	d1e5      	bne.n	80253de <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025412:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025414:	2b00      	cmp	r3, #0
 8025416:	dd38      	ble.n	802548a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8025418:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802541c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025420:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025424:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025428:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802542c:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8025430:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025434:	ee76 6a68 	vsub.f32	s13, s12, s17
 8025438:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802543c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025440:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8025444:	ee16 2a90 	vmov	r2, s13
 8025448:	3b01      	subs	r3, #1
 802544a:	9311      	str	r3, [sp, #68]	; 0x44
 802544c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802544e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025452:	ee17 2a10 	vmov	r2, s14
 8025456:	eeb0 7a48 	vmov.f32	s14, s16
 802545a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802545e:	ee17 8a10 	vmov	r8, s14
 8025462:	eeb0 7a68 	vmov.f32	s14, s17
 8025466:	9337      	str	r3, [sp, #220]	; 0xdc
 8025468:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802546a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802546e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025472:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8025474:	9338      	str	r3, [sp, #224]	; 0xe0
 8025476:	ee17 9a10 	vmov	r9, s14
 802547a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802547c:	eeb0 8a67 	vmov.f32	s16, s15
 8025480:	eef0 8a46 	vmov.f32	s17, s12
 8025484:	bf08      	it	eq
 8025486:	4613      	moveq	r3, r2
 8025488:	e793      	b.n	80253b2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802548a:	b023      	add	sp, #140	; 0x8c
 802548c:	ecbd 8b08 	vpop	{d8-d11}
 8025490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025494:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8025498:	f8cd b01c 	str.w	fp, [sp, #28]
 802549c:	9837      	ldr	r0, [sp, #220]	; 0xdc
 802549e:	1e59      	subs	r1, r3, #1
 80254a0:	fb00 9201 	mla	r2, r0, r1, r9
 80254a4:	1412      	asrs	r2, r2, #16
 80254a6:	910c      	str	r1, [sp, #48]	; 0x30
 80254a8:	f100 815e 	bmi.w	8025768 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80254ac:	42aa      	cmp	r2, r5
 80254ae:	f280 815b 	bge.w	8025768 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80254b2:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 80254b4:	fb02 8201 	mla	r2, r2, r1, r8
 80254b8:	1412      	asrs	r2, r2, #16
 80254ba:	f100 8155 	bmi.w	8025768 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80254be:	3f01      	subs	r7, #1
 80254c0:	42ba      	cmp	r2, r7
 80254c2:	f280 8151 	bge.w	8025768 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80254c6:	2b00      	cmp	r3, #0
 80254c8:	dda3      	ble.n	8025412 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80254ca:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 80254ce:	4621      	mov	r1, r4
 80254d0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80254d4:	f8cd 90d4 	str.w	r9, [sp, #212]	; 0xd4
 80254d8:	464a      	mov	r2, r9
 80254da:	464c      	mov	r4, r9
 80254dc:	e122      	b.n	8025724 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 80254de:	f893 c001 	ldrb.w	ip, [r3, #1]
 80254e2:	f856 502c 	ldr.w	r5, [r6, ip, lsl #2]
 80254e6:	950f      	str	r5, [sp, #60]	; 0x3c
 80254e8:	0e2d      	lsrs	r5, r5, #24
 80254ea:	9508      	str	r5, [sp, #32]
 80254ec:	b162      	cbz	r2, 8025508 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80254ee:	185d      	adds	r5, r3, r1
 80254f0:	786d      	ldrb	r5, [r5, #1]
 80254f2:	5c5b      	ldrb	r3, [r3, r1]
 80254f4:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 80254f8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80254fc:	9112      	str	r1, [sp, #72]	; 0x48
 80254fe:	9310      	str	r3, [sp, #64]	; 0x40
 8025500:	0e09      	lsrs	r1, r1, #24
 8025502:	0e1b      	lsrs	r3, r3, #24
 8025504:	910a      	str	r1, [sp, #40]	; 0x28
 8025506:	9309      	str	r3, [sp, #36]	; 0x24
 8025508:	b2a4      	uxth	r4, r4
 802550a:	b292      	uxth	r2, r2
 802550c:	fb04 f502 	mul.w	r5, r4, r2
 8025510:	0124      	lsls	r4, r4, #4
 8025512:	1b66      	subs	r6, r4, r5
 8025514:	9b08      	ldr	r3, [sp, #32]
 8025516:	b2b6      	uxth	r6, r6
 8025518:	fb06 f103 	mul.w	r1, r6, r3
 802551c:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8025520:	b292      	uxth	r2, r2
 8025522:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 8025526:	1a9b      	subs	r3, r3, r2
 8025528:	b29b      	uxth	r3, r3
 802552a:	fb03 1100 	mla	r1, r3, r0, r1
 802552e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025530:	fb02 1104 	mla	r1, r2, r4, r1
 8025534:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025536:	fb05 1104 	mla	r1, r5, r4, r1
 802553a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802553e:	2900      	cmp	r1, #0
 8025540:	f000 80df 	beq.w	8025702 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025544:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 8025548:	28ff      	cmp	r0, #255	; 0xff
 802554a:	940c      	str	r4, [sp, #48]	; 0x30
 802554c:	f407 497f 	and.w	r9, r7, #65280	; 0xff00
 8025550:	d01a      	beq.n	8025588 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8025552:	fb04 f400 	mul.w	r4, r4, r0
 8025556:	4627      	mov	r7, r4
 8025558:	fb09 fc00 	mul.w	ip, r9, r0
 802555c:	0a24      	lsrs	r4, r4, #8
 802555e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025562:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025566:	f50c 7080 	add.w	r0, ip, #256	; 0x100
 802556a:	4427      	add	r7, r4
 802556c:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8025570:	0a3f      	lsrs	r7, r7, #8
 8025572:	0a00      	lsrs	r0, r0, #8
 8025574:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025578:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802557c:	4307      	orrs	r7, r0
 802557e:	f007 10ff 	and.w	r0, r7, #16711935	; 0xff00ff
 8025582:	900c      	str	r0, [sp, #48]	; 0x30
 8025584:	f407 497f 	and.w	r9, r7, #65280	; 0xff00
 8025588:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802558a:	f000 17ff 	and.w	r7, r0, #16711935	; 0xff00ff
 802558e:	f400 4c7f 	and.w	ip, r0, #65280	; 0xff00
 8025592:	9808      	ldr	r0, [sp, #32]
 8025594:	28ff      	cmp	r0, #255	; 0xff
 8025596:	d01a      	beq.n	80255ce <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8025598:	fb07 f700 	mul.w	r7, r7, r0
 802559c:	fb0c fc00 	mul.w	ip, ip, r0
 80255a0:	0a3c      	lsrs	r4, r7, #8
 80255a2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80255a6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80255aa:	f50c 7080 	add.w	r0, ip, #256	; 0x100
 80255ae:	4427      	add	r7, r4
 80255b0:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 80255b4:	0a3f      	lsrs	r7, r7, #8
 80255b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80255ba:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80255be:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80255c2:	ea47 0c0c 	orr.w	ip, r7, ip
 80255c6:	f00c 17ff 	and.w	r7, ip, #16711935	; 0xff00ff
 80255ca:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80255ce:	9810      	ldr	r0, [sp, #64]	; 0x40
 80255d0:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 80255d4:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 80255d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80255da:	28ff      	cmp	r0, #255	; 0xff
 80255dc:	d01c      	beq.n	8025618 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 80255de:	fb0e fe00 	mul.w	lr, lr, r0
 80255e2:	fb0a fa00 	mul.w	sl, sl, r0
 80255e6:	ea4f 241e 	mov.w	r4, lr, lsr #8
 80255ea:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80255ee:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80255f2:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80255f6:	44a6      	add	lr, r4
 80255f8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80255fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025600:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025604:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025608:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802560c:	ea4e 0a0a 	orr.w	sl, lr, sl
 8025610:	f00a 1eff 	and.w	lr, sl, #16711935	; 0xff00ff
 8025614:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025618:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802561a:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 802561e:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8025622:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025624:	2cff      	cmp	r4, #255	; 0xff
 8025626:	d01d      	beq.n	8025664 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8025628:	fb00 f004 	mul.w	r0, r0, r4
 802562c:	fb0b fb04 	mul.w	fp, fp, r4
 8025630:	0a04      	lsrs	r4, r0, #8
 8025632:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025636:	9414      	str	r4, [sp, #80]	; 0x50
 8025638:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 802563c:	9413      	str	r4, [sp, #76]	; 0x4c
 802563e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025640:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8025644:	4420      	add	r0, r4
 8025646:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025648:	0a00      	lsrs	r0, r0, #8
 802564a:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 802564e:	0a24      	lsrs	r4, r4, #8
 8025650:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025654:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8025658:	ea40 0b0b 	orr.w	fp, r0, fp
 802565c:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 8025660:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8025664:	43c9      	mvns	r1, r1
 8025666:	fb07 f706 	mul.w	r7, r7, r6
 802566a:	fb0c f606 	mul.w	r6, ip, r6
 802566e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025670:	fb09 6603 	mla	r6, r9, r3, r6
 8025674:	fb04 7703 	mla	r7, r4, r3, r7
 8025678:	9b07      	ldr	r3, [sp, #28]
 802567a:	fb0e 7702 	mla	r7, lr, r2, r7
 802567e:	fb0a 6602 	mla	r6, sl, r2, r6
 8025682:	f8b3 e000 	ldrh.w	lr, [r3]
 8025686:	b2c9      	uxtb	r1, r1
 8025688:	ea4f 242e 	mov.w	r4, lr, asr #8
 802568c:	fb00 7005 	mla	r0, r0, r5, r7
 8025690:	fb0b 6605 	mla	r6, fp, r5, r6
 8025694:	ea4f 09ee 	mov.w	r9, lr, asr #3
 8025698:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802569c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80256a0:	fb04 f401 	mul.w	r4, r4, r1
 80256a4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80256a8:	fa5f fe8e 	uxtb.w	lr, lr
 80256ac:	fb09 f901 	mul.w	r9, r9, r1
 80256b0:	fb0e f101 	mul.w	r1, lr, r1
 80256b4:	0a00      	lsrs	r0, r0, #8
 80256b6:	0a36      	lsrs	r6, r6, #8
 80256b8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80256bc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80256c0:	1c62      	adds	r2, r4, #1
 80256c2:	ea40 0306 	orr.w	r3, r0, r6
 80256c6:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80256ca:	f109 0001 	add.w	r0, r9, #1
 80256ce:	1c4a      	adds	r2, r1, #1
 80256d0:	0c1e      	lsrs	r6, r3, #16
 80256d2:	f3c3 2507 	ubfx	r5, r3, #8, #8
 80256d6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80256da:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 80256de:	4a21      	ldr	r2, [pc, #132]	; (8025764 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40c>)
 80256e0:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 80256e4:	b2db      	uxtb	r3, r3
 80256e6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80256ea:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80256ee:	ea02 2404 	and.w	r4, r2, r4, lsl #8
 80256f2:	00c0      	lsls	r0, r0, #3
 80256f4:	ea44 04d3 	orr.w	r4, r4, r3, lsr #3
 80256f8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80256fc:	9b07      	ldr	r3, [sp, #28]
 80256fe:	4320      	orrs	r0, r4
 8025700:	8018      	strh	r0, [r3, #0]
 8025702:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8025704:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8025706:	9b07      	ldr	r3, [sp, #28]
 8025708:	440a      	add	r2, r1
 802570a:	9235      	str	r2, [sp, #212]	; 0xd4
 802570c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 802570e:	3302      	adds	r3, #2
 8025710:	4490      	add	r8, r2
 8025712:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025714:	9307      	str	r3, [sp, #28]
 8025716:	4293      	cmp	r3, r2
 8025718:	d022      	beq.n	8025760 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 802571a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 802571c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802571e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025722:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 8025724:	1412      	asrs	r2, r2, #16
 8025726:	ea4f 4328 	mov.w	r3, r8, asr #16
 802572a:	fb01 2303 	mla	r3, r1, r3, r2
 802572e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8025730:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8025732:	5cc2      	ldrb	r2, [r0, r3]
 8025734:	f3c4 3403 	ubfx	r4, r4, #12, #4
 8025738:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 802573c:	4403      	add	r3, r0
 802573e:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8025742:	0e38      	lsrs	r0, r7, #24
 8025744:	2c00      	cmp	r4, #0
 8025746:	f47f aeca 	bne.w	80254de <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802574a:	2a00      	cmp	r2, #0
 802574c:	f43f aedc 	beq.w	8025508 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8025750:	5c5b      	ldrb	r3, [r3, r1]
 8025752:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025754:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8025758:	9310      	str	r3, [sp, #64]	; 0x40
 802575a:	0e1b      	lsrs	r3, r3, #24
 802575c:	9309      	str	r3, [sp, #36]	; 0x24
 802575e:	e6d3      	b.n	8025508 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8025760:	4693      	mov	fp, r2
 8025762:	e656      	b.n	8025412 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8025764:	fffff800 	.word	0xfffff800
 8025768:	2b00      	cmp	r3, #0
 802576a:	f77f ae52 	ble.w	8025412 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802576e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8025772:	ea4f 4229 	mov.w	r2, r9, asr #16
 8025776:	ea4f 4128 	mov.w	r1, r8, asr #16
 802577a:	2a00      	cmp	r2, #0
 802577c:	465f      	mov	r7, fp
 802577e:	f8cd b01c 	str.w	fp, [sp, #28]
 8025782:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
 8025784:	e9dd b337 	ldrd	fp, r3, [sp, #220]	; 0xdc
 8025788:	f3c9 3003 	ubfx	r0, r9, #12, #4
 802578c:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 8025790:	f2c0 8147 	blt.w	8025a22 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8025794:	1e73      	subs	r3, r6, #1
 8025796:	429a      	cmp	r2, r3
 8025798:	f280 8143 	bge.w	8025a22 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802579c:	2900      	cmp	r1, #0
 802579e:	f2c0 8140 	blt.w	8025a22 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 80257a2:	f10c 33ff 	add.w	r3, ip, #4294967295
 80257a6:	4299      	cmp	r1, r3
 80257a8:	f280 813b 	bge.w	8025a22 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 80257ac:	b236      	sxth	r6, r6
 80257ae:	fb01 2106 	mla	r1, r1, r6, r2
 80257b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80257b4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80257b6:	5c53      	ldrb	r3, [r2, r1]
 80257b8:	4411      	add	r1, r2
 80257ba:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80257be:	910d      	str	r1, [sp, #52]	; 0x34
 80257c0:	0e13      	lsrs	r3, r2, #24
 80257c2:	2800      	cmp	r0, #0
 80257c4:	f000 8154 	beq.w	8025a70 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80257c8:	f891 c001 	ldrb.w	ip, [r1, #1]
 80257cc:	9513      	str	r5, [sp, #76]	; 0x4c
 80257ce:	f855 102c 	ldr.w	r1, [r5, ip, lsl #2]
 80257d2:	911f      	str	r1, [sp, #124]	; 0x7c
 80257d4:	0e09      	lsrs	r1, r1, #24
 80257d6:	9116      	str	r1, [sp, #88]	; 0x58
 80257d8:	f1be 0f00 	cmp.w	lr, #0
 80257dc:	f040 8153 	bne.w	8025a86 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80257e0:	b286      	uxth	r6, r0
 80257e2:	fa1f fc8e 	uxth.w	ip, lr
 80257e6:	fb06 f00c 	mul.w	r0, r6, ip
 80257ea:	0136      	lsls	r6, r6, #4
 80257ec:	1a31      	subs	r1, r6, r0
 80257ee:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80257f0:	b289      	uxth	r1, r1
 80257f2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80257f6:	9113      	str	r1, [sp, #76]	; 0x4c
 80257f8:	fb01 f105 	mul.w	r1, r1, r5
 80257fc:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 8025800:	fa1f f58c 	uxth.w	r5, ip
 8025804:	1b76      	subs	r6, r6, r5
 8025806:	b2b6      	uxth	r6, r6
 8025808:	fb06 1c03 	mla	ip, r6, r3, r1
 802580c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802580e:	9514      	str	r5, [sp, #80]	; 0x50
 8025810:	fb05 cc01 	mla	ip, r5, r1, ip
 8025814:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025816:	9619      	str	r6, [sp, #100]	; 0x64
 8025818:	fb00 cc01 	mla	ip, r0, r1, ip
 802581c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8025820:	f1bc 0f00 	cmp.w	ip, #0
 8025824:	f000 80e6 	beq.w	80259f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8025828:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 802582c:	2bff      	cmp	r3, #255	; 0xff
 802582e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025832:	911a      	str	r1, [sp, #104]	; 0x68
 8025834:	921b      	str	r2, [sp, #108]	; 0x6c
 8025836:	d01b      	beq.n	8025870 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8025838:	fb02 f203 	mul.w	r2, r2, r3
 802583c:	fb01 f103 	mul.w	r1, r1, r3
 8025840:	4613      	mov	r3, r2
 8025842:	0a0a      	lsrs	r2, r1, #8
 8025844:	f101 1601 	add.w	r6, r1, #65537	; 0x10001
 8025848:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802584c:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8025850:	4432      	add	r2, r6
 8025852:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025856:	0a12      	lsrs	r2, r2, #8
 8025858:	0a1b      	lsrs	r3, r3, #8
 802585a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802585e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025862:	4313      	orrs	r3, r2
 8025864:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8025868:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802586c:	921a      	str	r2, [sp, #104]	; 0x68
 802586e:	931b      	str	r3, [sp, #108]	; 0x6c
 8025870:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025872:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8025874:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8025878:	2aff      	cmp	r2, #255	; 0xff
 802587a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802587e:	931c      	str	r3, [sp, #112]	; 0x70
 8025880:	d01b      	beq.n	80258ba <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 8025882:	fb03 f302 	mul.w	r3, r3, r2
 8025886:	461e      	mov	r6, r3
 8025888:	fb01 f102 	mul.w	r1, r1, r2
 802588c:	0a0a      	lsrs	r2, r1, #8
 802588e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025892:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 8025896:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802589a:	440a      	add	r2, r1
 802589c:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 80258a0:	0a12      	lsrs	r2, r2, #8
 80258a2:	0a1b      	lsrs	r3, r3, #8
 80258a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80258a8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80258ac:	ea42 0603 	orr.w	r6, r2, r3
 80258b0:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 80258b4:	f006 11ff 	and.w	r1, r6, #16711935	; 0xff00ff
 80258b8:	931c      	str	r3, [sp, #112]	; 0x70
 80258ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80258bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80258be:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80258c2:	2aff      	cmp	r2, #255	; 0xff
 80258c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80258c8:	931d      	str	r3, [sp, #116]	; 0x74
 80258ca:	d01b      	beq.n	8025904 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 80258cc:	fb03 f302 	mul.w	r3, r3, r2
 80258d0:	fb06 f602 	mul.w	r6, r6, r2
 80258d4:	461a      	mov	r2, r3
 80258d6:	0a33      	lsrs	r3, r6, #8
 80258d8:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80258dc:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80258e0:	f502 7380 	add.w	r3, r2, #256	; 0x100
 80258e4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80258e8:	4476      	add	r6, lr
 80258ea:	0a36      	lsrs	r6, r6, #8
 80258ec:	0a1b      	lsrs	r3, r3, #8
 80258ee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80258f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80258f6:	ea46 0203 	orr.w	r2, r6, r3
 80258fa:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 80258fe:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8025902:	931d      	str	r3, [sp, #116]	; 0x74
 8025904:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025906:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802590a:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 802590e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025910:	930d      	str	r3, [sp, #52]	; 0x34
 8025912:	2aff      	cmp	r2, #255	; 0xff
 8025914:	d01b      	beq.n	802594e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8025916:	fb03 f302 	mul.w	r3, r3, r2
 802591a:	fb0e fe02 	mul.w	lr, lr, r2
 802591e:	0a1a      	lsrs	r2, r3, #8
 8025920:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025924:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8025928:	f50e 7580 	add.w	r5, lr, #256	; 0x100
 802592c:	441a      	add	r2, r3
 802592e:	eb05 2e1e 	add.w	lr, r5, lr, lsr #8
 8025932:	0a12      	lsrs	r2, r2, #8
 8025934:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025938:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802593c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025940:	ea42 0e0e 	orr.w	lr, r2, lr
 8025944:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8025948:	930d      	str	r3, [sp, #52]	; 0x34
 802594a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802594e:	ea6f 0c0c 	mvn.w	ip, ip
 8025952:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025954:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8025956:	fb01 f305 	mul.w	r3, r1, r5
 802595a:	991c      	ldr	r1, [sp, #112]	; 0x70
 802595c:	fa5f fc8c 	uxtb.w	ip, ip
 8025960:	fb01 f105 	mul.w	r1, r1, r5
 8025964:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8025966:	fb02 3305 	mla	r3, r2, r5, r3
 802596a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802596c:	fb02 1105 	mla	r1, r2, r5, r1
 8025970:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8025972:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8025974:	fb06 3605 	mla	r6, r6, r5, r3
 8025978:	fb02 1205 	mla	r2, r2, r5, r1
 802597c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802597e:	8839      	ldrh	r1, [r7, #0]
 8025980:	fb03 6300 	mla	r3, r3, r0, r6
 8025984:	fb0e 2e00 	mla	lr, lr, r0, r2
 8025988:	10c8      	asrs	r0, r1, #3
 802598a:	120a      	asrs	r2, r1, #8
 802598c:	f000 06fc 	and.w	r6, r0, #252	; 0xfc
 8025990:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025994:	00c9      	lsls	r1, r1, #3
 8025996:	fb02 f20c 	mul.w	r2, r2, ip
 802599a:	fb06 f60c 	mul.w	r6, r6, ip
 802599e:	b2c9      	uxtb	r1, r1
 80259a0:	fb01 f00c 	mul.w	r0, r1, ip
 80259a4:	0a1b      	lsrs	r3, r3, #8
 80259a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80259aa:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 80259ae:	f40e 437f 	and.w	r3, lr, #65280	; 0xff00
 80259b2:	430b      	orrs	r3, r1
 80259b4:	f106 0e01 	add.w	lr, r6, #1
 80259b8:	1c51      	adds	r1, r2, #1
 80259ba:	0c1d      	lsrs	r5, r3, #16
 80259bc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80259c0:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80259c4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80259c8:	fa5f fe83 	uxtb.w	lr, r3
 80259cc:	f100 0c01 	add.w	ip, r0, #1
 80259d0:	4b39      	ldr	r3, [pc, #228]	; (8025ab8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>)
 80259d2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80259d6:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80259da:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 80259de:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 80259e2:	00c9      	lsls	r1, r1, #3
 80259e4:	eb0e 2310 	add.w	r3, lr, r0, lsr #8
 80259e8:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 80259ec:	f401 62fc 	and.w	r2, r1, #2016	; 0x7e0
 80259f0:	4313      	orrs	r3, r2
 80259f2:	803b      	strh	r3, [r7, #0]
 80259f4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80259f6:	f1ba 0f00 	cmp.w	sl, #0
 80259fa:	f107 0702 	add.w	r7, r7, #2
 80259fe:	44d9      	add	r9, fp
 8025a00:	4498      	add	r8, r3
 8025a02:	dd26      	ble.n	8025a52 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8025a04:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8025a08:	ea4f 4229 	mov.w	r2, r9, asr #16
 8025a0c:	2a00      	cmp	r2, #0
 8025a0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025a12:	ea4f 4128 	mov.w	r1, r8, asr #16
 8025a16:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8025a1a:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 8025a1e:	f6bf aeb9 	bge.w	8025794 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8025a22:	1c53      	adds	r3, r2, #1
 8025a24:	d4e6      	bmi.n	80259f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8025a26:	42b3      	cmp	r3, r6
 8025a28:	dce4      	bgt.n	80259f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8025a2a:	1c4b      	adds	r3, r1, #1
 8025a2c:	d4e2      	bmi.n	80259f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8025a2e:	4563      	cmp	r3, ip
 8025a30:	dce0      	bgt.n	80259f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8025a32:	fa0f f38c 	sxth.w	r3, ip
 8025a36:	b236      	sxth	r6, r6
 8025a38:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8025a3c:	e9cd 6300 	strd	r6, r3, [sp]
 8025a40:	e9cd 0e04 	strd	r0, lr, [sp, #16]
 8025a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025a46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025a48:	4639      	mov	r1, r7
 8025a4a:	981e      	ldr	r0, [sp, #120]	; 0x78
 8025a4c:	f7ff fade 	bl	802500c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8025a50:	e7d0      	b.n	80259f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8025a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025a54:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025a58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025a5c:	3301      	adds	r3, #1
 8025a5e:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8025a62:	e4d6      	b.n	8025412 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8025a64:	3b01      	subs	r3, #1
 8025a66:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8025a6a:	930c      	str	r3, [sp, #48]	; 0x30
 8025a6c:	469a      	mov	sl, r3
 8025a6e:	e684      	b.n	802577a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x422>
 8025a70:	f1be 0f00 	cmp.w	lr, #0
 8025a74:	f43f aeb4 	beq.w	80257e0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8025a78:	5d89      	ldrb	r1, [r1, r6]
 8025a7a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8025a7e:	9120      	str	r1, [sp, #128]	; 0x80
 8025a80:	0e09      	lsrs	r1, r1, #24
 8025a82:	9117      	str	r1, [sp, #92]	; 0x5c
 8025a84:	e6ac      	b.n	80257e0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8025a86:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025a88:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8025a8a:	eb01 0c06 	add.w	ip, r1, r6
 8025a8e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025a92:	5d89      	ldrb	r1, [r1, r6]
 8025a94:	f855 602c 	ldr.w	r6, [r5, ip, lsl #2]
 8025a98:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8025a9c:	0e35      	lsrs	r5, r6, #24
 8025a9e:	9120      	str	r1, [sp, #128]	; 0x80
 8025aa0:	0e09      	lsrs	r1, r1, #24
 8025aa2:	9621      	str	r6, [sp, #132]	; 0x84
 8025aa4:	9518      	str	r5, [sp, #96]	; 0x60
 8025aa6:	9117      	str	r1, [sp, #92]	; 0x5c
 8025aa8:	e69a      	b.n	80257e0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8025aaa:	f43f acb2 	beq.w	8025412 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8025aae:	1e65      	subs	r5, r4, #1
 8025ab0:	f8cd b01c 	str.w	fp, [sp, #28]
 8025ab4:	e4f2      	b.n	802549c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8025ab6:	bf00      	nop
 8025ab8:	fffff800 	.word	0xfffff800

08025abc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8025abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ac0:	b08b      	sub	sp, #44	; 0x2c
 8025ac2:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
 8025ac6:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 8025aca:	ea6f 0b00 	mvn.w	fp, r0
 8025ace:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025ad0:	f9bd 5050 	ldrsh.w	r5, [sp, #80]	; 0x50
 8025ad4:	9005      	str	r0, [sp, #20]
 8025ad6:	fb0c 4805 	mla	r8, ip, r5, r4
 8025ada:	7848      	ldrb	r0, [r1, #1]
 8025adc:	788e      	ldrb	r6, [r1, #2]
 8025ade:	0204      	lsls	r4, r0, #8
 8025ae0:	780f      	ldrb	r7, [r1, #0]
 8025ae2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8025ae6:	9306      	str	r3, [sp, #24]
 8025ae8:	fa5f f38b 	uxtb.w	r3, fp
 8025aec:	433c      	orrs	r4, r7
 8025aee:	9304      	str	r3, [sp, #16]
 8025af0:	f1bc 0f00 	cmp.w	ip, #0
 8025af4:	eb02 0308 	add.w	r3, r2, r8
 8025af8:	9003      	str	r0, [sp, #12]
 8025afa:	9602      	str	r6, [sp, #8]
 8025afc:	9307      	str	r3, [sp, #28]
 8025afe:	9409      	str	r4, [sp, #36]	; 0x24
 8025b00:	f10c 0601 	add.w	r6, ip, #1
 8025b04:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 8025b08:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8025b0c:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 8025b10:	db02      	blt.n	8025b18 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x5c>
 8025b12:	45e6      	cmp	lr, ip
 8025b14:	f300 80a0 	bgt.w	8025c58 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x19c>
 8025b18:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8025b1c:	46e0      	mov	r8, ip
 8025b1e:	fa5f fb84 	uxtb.w	fp, r4
 8025b22:	f8cd b004 	str.w	fp, [sp, #4]
 8025b26:	2e00      	cmp	r6, #0
 8025b28:	db01      	blt.n	8025b2e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x72>
 8025b2a:	45b6      	cmp	lr, r6
 8025b2c:	dc73      	bgt.n	8025c16 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x15a>
 8025b2e:	fa5f fa84 	uxtb.w	sl, r4
 8025b32:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 8025b36:	4654      	mov	r4, sl
 8025b38:	46f1      	mov	r9, lr
 8025b3a:	2b0f      	cmp	r3, #15
 8025b3c:	f200 80cb 	bhi.w	8025cd6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x21a>
 8025b40:	280f      	cmp	r0, #15
 8025b42:	f200 80c8 	bhi.w	8025cd6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x21a>
 8025b46:	b29b      	uxth	r3, r3
 8025b48:	b280      	uxth	r0, r0
 8025b4a:	fb03 f600 	mul.w	r6, r3, r0
 8025b4e:	011b      	lsls	r3, r3, #4
 8025b50:	1b9d      	subs	r5, r3, r6
 8025b52:	9a01      	ldr	r2, [sp, #4]
 8025b54:	b2ad      	uxth	r5, r5
 8025b56:	ebc6 1000 	rsb	r0, r6, r0, lsl #4
 8025b5a:	fb05 f202 	mul.w	r2, r5, r2
 8025b5e:	b280      	uxth	r0, r0
 8025b60:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8025b64:	1a1b      	subs	r3, r3, r0
 8025b66:	b29b      	uxth	r3, r3
 8025b68:	fb03 220b 	mla	r2, r3, fp, r2
 8025b6c:	fb00 2a0a 	mla	sl, r0, sl, r2
 8025b70:	f8bd b010 	ldrh.w	fp, [sp, #16]
 8025b74:	fb06 a404 	mla	r4, r6, r4, sl
 8025b78:	fb17 f70b 	smulbb	r7, r7, fp
 8025b7c:	f8bd a014 	ldrh.w	sl, [sp, #20]
 8025b80:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025b84:	fb04 770a 	mla	r7, r4, sl, r7
 8025b88:	b2bf      	uxth	r7, r7
 8025b8a:	1c7a      	adds	r2, r7, #1
 8025b8c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8025b90:	123f      	asrs	r7, r7, #8
 8025b92:	700f      	strb	r7, [r1, #0]
 8025b94:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8025b98:	f898 7001 	ldrb.w	r7, [r8, #1]
 8025b9c:	fb05 f204 	mul.w	r2, r5, r4
 8025ba0:	fb03 2407 	mla	r4, r3, r7, r2
 8025ba4:	f899 2001 	ldrb.w	r2, [r9, #1]
 8025ba8:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8025bac:	fb00 4202 	mla	r2, r0, r2, r4
 8025bb0:	9c03      	ldr	r4, [sp, #12]
 8025bb2:	fb06 2207 	mla	r2, r6, r7, r2
 8025bb6:	fb14 f40b 	smulbb	r4, r4, fp
 8025bba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025bbe:	fb02 420a 	mla	r2, r2, sl, r4
 8025bc2:	b292      	uxth	r2, r2
 8025bc4:	1c54      	adds	r4, r2, #1
 8025bc6:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8025bca:	1212      	asrs	r2, r2, #8
 8025bcc:	704a      	strb	r2, [r1, #1]
 8025bce:	f89c 4002 	ldrb.w	r4, [ip, #2]
 8025bd2:	f898 2002 	ldrb.w	r2, [r8, #2]
 8025bd6:	fb05 f504 	mul.w	r5, r5, r4
 8025bda:	fb03 5502 	mla	r5, r3, r2, r5
 8025bde:	f899 4002 	ldrb.w	r4, [r9, #2]
 8025be2:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8025be6:	fb00 5004 	mla	r0, r0, r4, r5
 8025bea:	9b02      	ldr	r3, [sp, #8]
 8025bec:	fb06 0602 	mla	r6, r6, r2, r0
 8025bf0:	fb13 fb0b 	smulbb	fp, r3, fp
 8025bf4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025bf8:	fb06 ba0a 	mla	sl, r6, sl, fp
 8025bfc:	fa1f fa8a 	uxth.w	sl, sl
 8025c00:	f10a 0b01 	add.w	fp, sl, #1
 8025c04:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8025c08:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8025c0c:	f881 a002 	strb.w	sl, [r1, #2]
 8025c10:	b00b      	add	sp, #44	; 0x2c
 8025c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c16:	2800      	cmp	r0, #0
 8025c18:	d089      	beq.n	8025b2e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x72>
 8025c1a:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8025c1c:	2e00      	cmp	r6, #0
 8025c1e:	db47      	blt.n	8025cb0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1f4>
 8025c20:	42b5      	cmp	r5, r6
 8025c22:	dd45      	ble.n	8025cb0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1f4>
 8025c24:	9a07      	ldr	r2, [sp, #28]
 8025c26:	f812 9005 	ldrb.w	r9, [r2, r5]
 8025c2a:	9a06      	ldr	r2, [sp, #24]
 8025c2c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8025c30:	4491      	add	r9, r2
 8025c32:	3601      	adds	r6, #1
 8025c34:	f899 a000 	ldrb.w	sl, [r9]
 8025c38:	d436      	bmi.n	8025ca8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ec>
 8025c3a:	42b5      	cmp	r5, r6
 8025c3c:	dd34      	ble.n	8025ca8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ec>
 8025c3e:	2b00      	cmp	r3, #0
 8025c40:	d045      	beq.n	8025cce <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x212>
 8025c42:	9a07      	ldr	r2, [sp, #28]
 8025c44:	442a      	add	r2, r5
 8025c46:	f892 e001 	ldrb.w	lr, [r2, #1]
 8025c4a:	9a06      	ldr	r2, [sp, #24]
 8025c4c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8025c50:	f812 400e 	ldrb.w	r4, [r2, lr]
 8025c54:	4496      	add	lr, r2
 8025c56:	e770      	b.n	8025b3a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7e>
 8025c58:	4691      	mov	r9, r2
 8025c5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8025c5c:	2a00      	cmp	r2, #0
 8025c5e:	db01      	blt.n	8025c64 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1a8>
 8025c60:	4295      	cmp	r5, r2
 8025c62:	dc19      	bgt.n	8025c98 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>
 8025c64:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 8025c68:	3201      	adds	r2, #1
 8025c6a:	f898 b000 	ldrb.w	fp, [r8]
 8025c6e:	d40e      	bmi.n	8025c8e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d2>
 8025c70:	4295      	cmp	r5, r2
 8025c72:	dd0c      	ble.n	8025c8e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d2>
 8025c74:	b1fb      	cbz	r3, 8025cb6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1fa>
 8025c76:	9a07      	ldr	r2, [sp, #28]
 8025c78:	f892 c001 	ldrb.w	ip, [r2, #1]
 8025c7c:	9a06      	ldr	r2, [sp, #24]
 8025c7e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025c82:	f812 200c 	ldrb.w	r2, [r2, ip]
 8025c86:	9201      	str	r2, [sp, #4]
 8025c88:	9a06      	ldr	r2, [sp, #24]
 8025c8a:	4494      	add	ip, r2
 8025c8c:	e74b      	b.n	8025b26 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6a>
 8025c8e:	b2e2      	uxtb	r2, r4
 8025c90:	9201      	str	r2, [sp, #4]
 8025c92:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8025c96:	e746      	b.n	8025b26 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6a>
 8025c98:	f819 8008 	ldrb.w	r8, [r9, r8]
 8025c9c:	9a06      	ldr	r2, [sp, #24]
 8025c9e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025ca2:	4490      	add	r8, r2
 8025ca4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8025ca6:	e7df      	b.n	8025c68 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ac>
 8025ca8:	b2e4      	uxtb	r4, r4
 8025caa:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 8025cae:	e744      	b.n	8025b3a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7e>
 8025cb0:	f10d 0924 	add.w	r9, sp, #36	; 0x24
 8025cb4:	e7bd      	b.n	8025c32 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x176>
 8025cb6:	b2e2      	uxtb	r2, r4
 8025cb8:	2e00      	cmp	r6, #0
 8025cba:	9201      	str	r2, [sp, #4]
 8025cbc:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8025cc0:	f6bf af33 	bge.w	8025b2a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6e>
 8025cc4:	46e6      	mov	lr, ip
 8025cc6:	46e1      	mov	r9, ip
 8025cc8:	4692      	mov	sl, r2
 8025cca:	4614      	mov	r4, r2
 8025ccc:	e738      	b.n	8025b40 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x84>
 8025cce:	b2e4      	uxtb	r4, r4
 8025cd0:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 8025cd4:	e734      	b.n	8025b40 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x84>
 8025cd6:	4b03      	ldr	r3, [pc, #12]	; (8025ce4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x228>)
 8025cd8:	4a03      	ldr	r2, [pc, #12]	; (8025ce8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x22c>)
 8025cda:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8025cde:	4803      	ldr	r0, [pc, #12]	; (8025cec <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x230>)
 8025ce0:	f003 fc8c 	bl	80295fc <__assert_func>
 8025ce4:	0802c8e4 	.word	0x0802c8e4
 8025ce8:	0802cf5c 	.word	0x0802cf5c
 8025cec:	0802ca68 	.word	0x0802ca68

08025cf0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025cf4:	ed2d 8b08 	vpush	{d8-d11}
 8025cf8:	b097      	sub	sp, #92	; 0x5c
 8025cfa:	f89d 60c4 	ldrb.w	r6, [sp, #196]	; 0xc4
 8025cfe:	eeb0 aa40 	vmov.f32	s20, s0
 8025d02:	e9dd b729 	ldrd	fp, r7, [sp, #164]	; 0xa4
 8025d06:	e9cd 0614 	strd	r0, r6, [sp, #80]	; 0x50
 8025d0a:	43f0      	mvns	r0, r6
 8025d0c:	eef0 9a60 	vmov.f32	s19, s1
 8025d10:	eeb0 9a41 	vmov.f32	s18, s2
 8025d14:	eef0 8a62 	vmov.f32	s17, s5
 8025d18:	eeb0 8a43 	vmov.f32	s16, s6
 8025d1c:	eef0 ba44 	vmov.f32	s23, s8
 8025d20:	eeb0 ba64 	vmov.f32	s22, s9
 8025d24:	eef0 aa45 	vmov.f32	s21, s10
 8025d28:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8025d2c:	e9dd 512d 	ldrd	r5, r1, [sp, #180]	; 0xb4
 8025d30:	461a      	mov	r2, r3
 8025d32:	686c      	ldr	r4, [r5, #4]
 8025d34:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025d36:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
 8025d3a:	fb04 1303 	mla	r3, r4, r3, r1
 8025d3e:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 8025d40:	6829      	ldr	r1, [r5, #0]
 8025d42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025d46:	6865      	ldr	r5, [r4, #4]
 8025d48:	eb01 0a03 	add.w	sl, r1, r3
 8025d4c:	b2c3      	uxtb	r3, r0
 8025d4e:	6824      	ldr	r4, [r4, #0]
 8025d50:	9309      	str	r3, [sp, #36]	; 0x24
 8025d52:	1d2b      	adds	r3, r5, #4
 8025d54:	930a      	str	r3, [sp, #40]	; 0x28
 8025d56:	b2b3      	uxth	r3, r6
 8025d58:	940d      	str	r4, [sp, #52]	; 0x34
 8025d5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8025d5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025d5e:	2b00      	cmp	r3, #0
 8025d60:	dc02      	bgt.n	8025d68 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025d62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025d64:	2b00      	cmp	r3, #0
 8025d66:	dd63      	ble.n	8025e30 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8025d68:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025d6a:	2a00      	cmp	r2, #0
 8025d6c:	e9d3 6e02 	ldrd	r6, lr, [r3, #8]
 8025d70:	b234      	sxth	r4, r6
 8025d72:	fa0f fc8e 	sxth.w	ip, lr
 8025d76:	f340 825b 	ble.w	8026230 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>
 8025d7a:	f8cd e020 	str.w	lr, [sp, #32]
 8025d7e:	f8dd e0b0 	ldr.w	lr, [sp, #176]	; 0xb0
 8025d82:	1e65      	subs	r5, r4, #1
 8025d84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8025d88:	ea5f 432b 	movs.w	r3, fp, asr #16
 8025d8c:	ea4f 4127 	mov.w	r1, r7, asr #16
 8025d90:	d405      	bmi.n	8025d9e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8025d92:	42ab      	cmp	r3, r5
 8025d94:	da03      	bge.n	8025d9e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8025d96:	2900      	cmp	r1, #0
 8025d98:	db01      	blt.n	8025d9e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8025d9a:	4541      	cmp	r1, r8
 8025d9c:	db4d      	blt.n	8025e3a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8025d9e:	1c58      	adds	r0, r3, #1
 8025da0:	d406      	bmi.n	8025db0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8025da2:	42a0      	cmp	r0, r4
 8025da4:	dc04      	bgt.n	8025db0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8025da6:	1c48      	adds	r0, r1, #1
 8025da8:	d402      	bmi.n	8025db0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8025daa:	4560      	cmp	r0, ip
 8025dac:	f340 819b 	ble.w	80260e6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8025db0:	3a01      	subs	r2, #1
 8025db2:	44cb      	add	fp, r9
 8025db4:	4477      	add	r7, lr
 8025db6:	f10a 0a03 	add.w	sl, sl, #3
 8025dba:	d1e5      	bne.n	8025d88 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8025dbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025dbe:	2b00      	cmp	r3, #0
 8025dc0:	dd36      	ble.n	8025e30 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8025dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025dc6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025dca:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025dce:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025dd2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025dd6:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8025dda:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025dde:	ee76 6a68 	vsub.f32	s13, s12, s17
 8025de2:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8025de6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025dea:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8025dee:	ee16 2a90 	vmov	r2, s13
 8025df2:	3b01      	subs	r3, #1
 8025df4:	930e      	str	r3, [sp, #56]	; 0x38
 8025df6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025df8:	fb92 f9f3 	sdiv	r9, r2, r3
 8025dfc:	ee17 2a10 	vmov	r2, s14
 8025e00:	eeb0 7a48 	vmov.f32	s14, s16
 8025e04:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8025e08:	ee17 7a10 	vmov	r7, s14
 8025e0c:	eeb0 7a68 	vmov.f32	s14, s17
 8025e10:	fb92 f3f3 	sdiv	r3, r2, r3
 8025e14:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8025e18:	932c      	str	r3, [sp, #176]	; 0xb0
 8025e1a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025e1e:	ee17 ba10 	vmov	fp, s14
 8025e22:	eeb0 8a67 	vmov.f32	s16, s15
 8025e26:	eef0 8a46 	vmov.f32	s17, s12
 8025e2a:	bf18      	it	ne
 8025e2c:	461a      	movne	r2, r3
 8025e2e:	e795      	b.n	8025d5c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025e30:	b017      	add	sp, #92	; 0x5c
 8025e32:	ecbd 8b08 	vpop	{d8-d11}
 8025e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e3a:	f8dd e020 	ldr.w	lr, [sp, #32]
 8025e3e:	1e51      	subs	r1, r2, #1
 8025e40:	fb09 b301 	mla	r3, r9, r1, fp
 8025e44:	141b      	asrs	r3, r3, #16
 8025e46:	9108      	str	r1, [sp, #32]
 8025e48:	f100 80e7 	bmi.w	802601a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8025e4c:	42ab      	cmp	r3, r5
 8025e4e:	f280 80e4 	bge.w	802601a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8025e52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025e54:	fb03 7301 	mla	r3, r3, r1, r7
 8025e58:	141b      	asrs	r3, r3, #16
 8025e5a:	f100 80de 	bmi.w	802601a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8025e5e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8025e62:	4563      	cmp	r3, ip
 8025e64:	f280 80d9 	bge.w	802601a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8025e68:	2a00      	cmp	r2, #0
 8025e6a:	dda7      	ble.n	8025dbc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8025e6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025e70:	eb0a 0302 	add.w	r3, sl, r2
 8025e74:	930c      	str	r3, [sp, #48]	; 0x30
 8025e76:	f10a 0c03 	add.w	ip, sl, #3
 8025e7a:	e9cd 792a 	strd	r7, r9, [sp, #168]	; 0xa8
 8025e7e:	463b      	mov	r3, r7
 8025e80:	e09a      	b.n	8025fb8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8025e82:	784d      	ldrb	r5, [r1, #1]
 8025e84:	1908      	adds	r0, r1, r4
 8025e86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025e8a:	4435      	add	r5, r6
 8025e8c:	2a00      	cmp	r2, #0
 8025e8e:	f000 80b5 	beq.w	8025ffc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8025e92:	5d0c      	ldrb	r4, [r1, r4]
 8025e94:	f890 e001 	ldrb.w	lr, [r0, #1]
 8025e98:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025e9c:	19a1      	adds	r1, r4, r6
 8025e9e:	9108      	str	r1, [sp, #32]
 8025ea0:	4631      	mov	r1, r6
 8025ea2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8025ea6:	9f08      	ldr	r7, [sp, #32]
 8025ea8:	44b6      	add	lr, r6
 8025eaa:	b29b      	uxth	r3, r3
 8025eac:	b292      	uxth	r2, r2
 8025eae:	fb03 f602 	mul.w	r6, r3, r2
 8025eb2:	011b      	lsls	r3, r3, #4
 8025eb4:	f895 9000 	ldrb.w	r9, [r5]
 8025eb8:	1b98      	subs	r0, r3, r6
 8025eba:	b280      	uxth	r0, r0
 8025ebc:	fb00 f909 	mul.w	r9, r0, r9
 8025ec0:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8025ec4:	b292      	uxth	r2, r2
 8025ec6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8025eca:	f811 100a 	ldrb.w	r1, [r1, sl]
 8025ece:	1a9b      	subs	r3, r3, r2
 8025ed0:	b29b      	uxth	r3, r3
 8025ed2:	fb03 9101 	mla	r1, r3, r1, r9
 8025ed6:	f897 9000 	ldrb.w	r9, [r7]
 8025eda:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8025edc:	fb02 1109 	mla	r1, r2, r9, r1
 8025ee0:	f89e a000 	ldrb.w	sl, [lr]
 8025ee4:	f81c 9c03 	ldrb.w	r9, [ip, #-3]
 8025ee8:	44a3      	add	fp, r4
 8025eea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025eec:	fb06 110a 	mla	r1, r6, sl, r1
 8025ef0:	fb19 f904 	smulbb	r9, r9, r4
 8025ef4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025ef6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025efa:	fb01 9904 	mla	r9, r1, r4, r9
 8025efe:	fa1f f989 	uxth.w	r9, r9
 8025f02:	f109 0101 	add.w	r1, r9, #1
 8025f06:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8025f0a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8025f0e:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8025f12:	7869      	ldrb	r1, [r5, #1]
 8025f14:	f898 9001 	ldrb.w	r9, [r8, #1]
 8025f18:	fb00 f101 	mul.w	r1, r0, r1
 8025f1c:	9c08      	ldr	r4, [sp, #32]
 8025f1e:	fb03 1109 	mla	r1, r3, r9, r1
 8025f22:	f894 9001 	ldrb.w	r9, [r4, #1]
 8025f26:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 8025f28:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8025f2a:	fb02 1109 	mla	r1, r2, r9, r1
 8025f2e:	f89e a001 	ldrb.w	sl, [lr, #1]
 8025f32:	443c      	add	r4, r7
 8025f34:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
 8025f38:	942a      	str	r4, [sp, #168]	; 0xa8
 8025f3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025f3c:	fb06 110a 	mla	r1, r6, sl, r1
 8025f40:	fb19 f904 	smulbb	r9, r9, r4
 8025f44:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8025f46:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025f4a:	fb01 9907 	mla	r9, r1, r7, r9
 8025f4e:	fa1f f989 	uxth.w	r9, r9
 8025f52:	f109 0101 	add.w	r1, r9, #1
 8025f56:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8025f5a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8025f5e:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8025f62:	78a9      	ldrb	r1, [r5, #2]
 8025f64:	f898 5002 	ldrb.w	r5, [r8, #2]
 8025f68:	fb00 f001 	mul.w	r0, r0, r1
 8025f6c:	fb03 0005 	mla	r0, r3, r5, r0
 8025f70:	9b08      	ldr	r3, [sp, #32]
 8025f72:	f89e 4002 	ldrb.w	r4, [lr, #2]
 8025f76:	789b      	ldrb	r3, [r3, #2]
 8025f78:	f81c ec01 	ldrb.w	lr, [ip, #-1]
 8025f7c:	fb02 0003 	mla	r0, r2, r3, r0
 8025f80:	fb06 0004 	mla	r0, r6, r4, r0
 8025f84:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025f86:	fb1e f404 	smulbb	r4, lr, r4
 8025f8a:	f3c0 2e07 	ubfx	lr, r0, #8, #8
 8025f8e:	fb0e 4e07 	mla	lr, lr, r7, r4
 8025f92:	fa1f fe8e 	uxth.w	lr, lr
 8025f96:	f10e 0301 	add.w	r3, lr, #1
 8025f9a:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8025f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025fa0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025fa4:	4563      	cmp	r3, ip
 8025fa6:	f80c ec01 	strb.w	lr, [ip, #-1]
 8025faa:	d034      	beq.n	8026016 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8025fac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025fae:	f10c 0c03 	add.w	ip, ip, #3
 8025fb2:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 8025fb6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025fb8:	1419      	asrs	r1, r3, #16
 8025fba:	ea4f 432b 	mov.w	r3, fp, asr #16
 8025fbe:	fb04 3101 	mla	r1, r4, r1, r3
 8025fc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025fc4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8025fc6:	f812 a001 	ldrb.w	sl, [r2, r1]
 8025fca:	4411      	add	r1, r2
 8025fcc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025fce:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8025fd2:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025fd6:	eb06 080a 	add.w	r8, r6, sl
 8025fda:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8025fde:	2b00      	cmp	r3, #0
 8025fe0:	f47f af4f 	bne.w	8025e82 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8025fe4:	b182      	cbz	r2, 8026008 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8025fe6:	5d0c      	ldrb	r4, [r1, r4]
 8025fe8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025fea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025fee:	1861      	adds	r1, r4, r1
 8025ff0:	9108      	str	r1, [sp, #32]
 8025ff2:	46c6      	mov	lr, r8
 8025ff4:	4645      	mov	r5, r8
 8025ff6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025ff8:	9f08      	ldr	r7, [sp, #32]
 8025ffa:	e756      	b.n	8025eaa <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025ffc:	46c6      	mov	lr, r8
 8025ffe:	f8cd 8020 	str.w	r8, [sp, #32]
 8026002:	4631      	mov	r1, r6
 8026004:	4647      	mov	r7, r8
 8026006:	e750      	b.n	8025eaa <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026008:	46c6      	mov	lr, r8
 802600a:	f8cd 8020 	str.w	r8, [sp, #32]
 802600e:	4645      	mov	r5, r8
 8026010:	4631      	mov	r1, r6
 8026012:	4647      	mov	r7, r8
 8026014:	e749      	b.n	8025eaa <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026016:	469a      	mov	sl, r3
 8026018:	e6d0      	b.n	8025dbc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 802601a:	2a00      	cmp	r2, #0
 802601c:	f77f aece 	ble.w	8025dbc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8026020:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026024:	ea4f 432b 	mov.w	r3, fp, asr #16
 8026028:	1439      	asrs	r1, r7, #16
 802602a:	4654      	mov	r4, sl
 802602c:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 802602e:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8026032:	2b00      	cmp	r3, #0
 8026034:	f3cb 3003 	ubfx	r0, fp, #12, #4
 8026038:	f3c7 3203 	ubfx	r2, r7, #12, #4
 802603c:	db2f      	blt.n	802609e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802603e:	f106 3cff 	add.w	ip, r6, #4294967295
 8026042:	4563      	cmp	r3, ip
 8026044:	da2b      	bge.n	802609e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026046:	2900      	cmp	r1, #0
 8026048:	db29      	blt.n	802609e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802604a:	f10e 3cff 	add.w	ip, lr, #4294967295
 802604e:	4561      	cmp	r1, ip
 8026050:	da25      	bge.n	802609e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026052:	fa0f fa86 	sxth.w	sl, r6
 8026056:	fb01 330a 	mla	r3, r1, sl, r3
 802605a:	990d      	ldr	r1, [sp, #52]	; 0x34
 802605c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802605e:	f811 e003 	ldrb.w	lr, [r1, r3]
 8026062:	440b      	add	r3, r1
 8026064:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8026068:	eb06 0c0e 	add.w	ip, r6, lr
 802606c:	2800      	cmp	r0, #0
 802606e:	d052      	beq.n	8026116 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x426>
 8026070:	7859      	ldrb	r1, [r3, #1]
 8026072:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026076:	1871      	adds	r1, r6, r1
 8026078:	910c      	str	r1, [sp, #48]	; 0x30
 802607a:	2a00      	cmp	r2, #0
 802607c:	f000 80d5 	beq.w	802622a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53a>
 8026080:	eb03 010a 	add.w	r1, r3, sl
 8026084:	7849      	ldrb	r1, [r1, #1]
 8026086:	f813 300a 	ldrb.w	r3, [r3, sl]
 802608a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802608e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026092:	1871      	adds	r1, r6, r1
 8026094:	18f3      	adds	r3, r6, r3
 8026096:	9110      	str	r1, [sp, #64]	; 0x40
 8026098:	9311      	str	r3, [sp, #68]	; 0x44
 802609a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802609c:	e042      	b.n	8026124 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802609e:	f113 0c01 	adds.w	ip, r3, #1
 80260a2:	d406      	bmi.n	80260b2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80260a4:	45b4      	cmp	ip, r6
 80260a6:	dc04      	bgt.n	80260b2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80260a8:	f111 0c01 	adds.w	ip, r1, #1
 80260ac:	d401      	bmi.n	80260b2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80260ae:	45f4      	cmp	ip, lr
 80260b0:	dd1f      	ble.n	80260f2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 80260b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80260b4:	f1b8 0f00 	cmp.w	r8, #0
 80260b8:	f104 0403 	add.w	r4, r4, #3
 80260bc:	44cb      	add	fp, r9
 80260be:	441f      	add	r7, r3
 80260c0:	dd07      	ble.n	80260d2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 80260c2:	e9d5 6e02 	ldrd	r6, lr, [r5, #8]
 80260c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80260ca:	ea4f 432b 	mov.w	r3, fp, asr #16
 80260ce:	1439      	asrs	r1, r7, #16
 80260d0:	e7af      	b.n	8026032 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80260d2:	9b08      	ldr	r3, [sp, #32]
 80260d4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80260d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80260dc:	3301      	adds	r3, #1
 80260de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80260e2:	449a      	add	sl, r3
 80260e4:	e66a      	b.n	8025dbc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 80260e6:	3a01      	subs	r2, #1
 80260e8:	f8dd e020 	ldr.w	lr, [sp, #32]
 80260ec:	4690      	mov	r8, r2
 80260ee:	9208      	str	r2, [sp, #32]
 80260f0:	e79b      	b.n	802602a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80260f2:	fa0f fe8e 	sxth.w	lr, lr
 80260f6:	b236      	sxth	r6, r6
 80260f8:	e9cd 6e00 	strd	r6, lr, [sp]
 80260fc:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80260fe:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8026102:	e9cd 2605 	strd	r2, r6, [sp, #20]
 8026106:	9302      	str	r3, [sp, #8]
 8026108:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802610a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802610c:	4621      	mov	r1, r4
 802610e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8026110:	f7ff fcd4 	bl	8025abc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8026114:	e7cd      	b.n	80260b2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8026116:	2a00      	cmp	r2, #0
 8026118:	d17b      	bne.n	8026212 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x522>
 802611a:	4661      	mov	r1, ip
 802611c:	e9cd cc10 	strd	ip, ip, [sp, #64]	; 0x40
 8026120:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8026124:	b283      	uxth	r3, r0
 8026126:	b292      	uxth	r2, r2
 8026128:	fb03 f602 	mul.w	r6, r3, r2
 802612c:	011b      	lsls	r3, r3, #4
 802612e:	7809      	ldrb	r1, [r1, #0]
 8026130:	1b98      	subs	r0, r3, r6
 8026132:	b280      	uxth	r0, r0
 8026134:	9012      	str	r0, [sp, #72]	; 0x48
 8026136:	fb00 f101 	mul.w	r1, r0, r1
 802613a:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802613e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026140:	b292      	uxth	r2, r2
 8026142:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8026146:	f810 e00e 	ldrb.w	lr, [r0, lr]
 802614a:	1a9b      	subs	r3, r3, r2
 802614c:	b29b      	uxth	r3, r3
 802614e:	fb03 110e 	mla	r1, r3, lr, r1
 8026152:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026154:	f890 a000 	ldrb.w	sl, [r0]
 8026158:	9810      	ldr	r0, [sp, #64]	; 0x40
 802615a:	fb02 110a 	mla	r1, r2, sl, r1
 802615e:	f890 e000 	ldrb.w	lr, [r0]
 8026162:	f894 a000 	ldrb.w	sl, [r4]
 8026166:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026168:	fb06 110e 	mla	r1, r6, lr, r1
 802616c:	fb1a fa00 	smulbb	sl, sl, r0
 8026170:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8026172:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026176:	fb01 a100 	mla	r1, r1, r0, sl
 802617a:	b289      	uxth	r1, r1
 802617c:	f101 0e01 	add.w	lr, r1, #1
 8026180:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 8026184:	1209      	asrs	r1, r1, #8
 8026186:	7021      	strb	r1, [r4, #0]
 8026188:	990c      	ldr	r1, [sp, #48]	; 0x30
 802618a:	9812      	ldr	r0, [sp, #72]	; 0x48
 802618c:	7849      	ldrb	r1, [r1, #1]
 802618e:	f89c e001 	ldrb.w	lr, [ip, #1]
 8026192:	fb00 f101 	mul.w	r1, r0, r1
 8026196:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026198:	fb03 110e 	mla	r1, r3, lr, r1
 802619c:	f890 a001 	ldrb.w	sl, [r0, #1]
 80261a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80261a2:	fb02 110a 	mla	r1, r2, sl, r1
 80261a6:	f890 e001 	ldrb.w	lr, [r0, #1]
 80261aa:	f894 a001 	ldrb.w	sl, [r4, #1]
 80261ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80261b0:	fb06 110e 	mla	r1, r6, lr, r1
 80261b4:	fb1a fa00 	smulbb	sl, sl, r0
 80261b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80261ba:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80261be:	fb01 a100 	mla	r1, r1, r0, sl
 80261c2:	b289      	uxth	r1, r1
 80261c4:	f101 0e01 	add.w	lr, r1, #1
 80261c8:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 80261cc:	1209      	asrs	r1, r1, #8
 80261ce:	7061      	strb	r1, [r4, #1]
 80261d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80261d2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80261d4:	7889      	ldrb	r1, [r1, #2]
 80261d6:	f89c c002 	ldrb.w	ip, [ip, #2]
 80261da:	fb00 f001 	mul.w	r0, r0, r1
 80261de:	fb03 010c 	mla	r1, r3, ip, r0
 80261e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80261e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80261e6:	7880      	ldrb	r0, [r0, #2]
 80261e8:	789b      	ldrb	r3, [r3, #2]
 80261ea:	fb02 1100 	mla	r1, r2, r0, r1
 80261ee:	78a2      	ldrb	r2, [r4, #2]
 80261f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80261f2:	fb06 1303 	mla	r3, r6, r3, r1
 80261f6:	fb12 f200 	smulbb	r2, r2, r0
 80261fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80261fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026200:	fb03 2300 	mla	r3, r3, r0, r2
 8026204:	b29b      	uxth	r3, r3
 8026206:	1c5a      	adds	r2, r3, #1
 8026208:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802620c:	121b      	asrs	r3, r3, #8
 802620e:	70a3      	strb	r3, [r4, #2]
 8026210:	e74f      	b.n	80260b2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8026212:	f813 300a 	ldrb.w	r3, [r3, sl]
 8026216:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 802621a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802621e:	18f3      	adds	r3, r6, r3
 8026220:	9311      	str	r3, [sp, #68]	; 0x44
 8026222:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8026226:	4661      	mov	r1, ip
 8026228:	e77c      	b.n	8026124 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802622a:	e9cd cc10 	strd	ip, ip, [sp, #64]	; 0x40
 802622e:	e779      	b.n	8026124 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8026230:	f43f adc4 	beq.w	8025dbc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8026234:	1e65      	subs	r5, r4, #1
 8026236:	e602      	b.n	8025e3e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>

08026238 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8026238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802623c:	b083      	sub	sp, #12
 802623e:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 8026242:	f891 9001 	ldrb.w	r9, [r1, #1]
 8026246:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 802624a:	7888      	ldrb	r0, [r1, #2]
 802624c:	fb07 6c08 	mla	ip, r7, r8, r6
 8026250:	ea4f 2909 	mov.w	r9, r9, lsl #8
 8026254:	780c      	ldrb	r4, [r1, #0]
 8026256:	ea49 4900 	orr.w	r9, r9, r0, lsl #16
 802625a:	ea49 0404 	orr.w	r4, r9, r4
 802625e:	2f00      	cmp	r7, #0
 8026260:	9401      	str	r4, [sp, #4]
 8026262:	eb02 090c 	add.w	r9, r2, ip
 8026266:	f107 0e01 	add.w	lr, r7, #1
 802626a:	f9bd a034 	ldrsh.w	sl, [sp, #52]	; 0x34
 802626e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8026272:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8026276:	db01      	blt.n	802627c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x44>
 8026278:	45ba      	cmp	sl, r7
 802627a:	dc6e      	bgt.n	802635a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x122>
 802627c:	fa5f fb84 	uxtb.w	fp, r4
 8026280:	af01      	add	r7, sp, #4
 8026282:	465a      	mov	r2, fp
 8026284:	46bc      	mov	ip, r7
 8026286:	f1be 0f00 	cmp.w	lr, #0
 802628a:	db01      	blt.n	8026290 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x58>
 802628c:	45f2      	cmp	sl, lr
 802628e:	dc49      	bgt.n	8026324 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xec>
 8026290:	fa5f fa84 	uxtb.w	sl, r4
 8026294:	ab01      	add	r3, sp, #4
 8026296:	46d1      	mov	r9, sl
 8026298:	469e      	mov	lr, r3
 802629a:	280f      	cmp	r0, #15
 802629c:	f200 8098 	bhi.w	80263d0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 80262a0:	2d0f      	cmp	r5, #15
 80262a2:	f200 8095 	bhi.w	80263d0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 80262a6:	b280      	uxth	r0, r0
 80262a8:	b2ad      	uxth	r5, r5
 80262aa:	fb00 f805 	mul.w	r8, r0, r5
 80262ae:	0104      	lsls	r4, r0, #4
 80262b0:	eba4 0608 	sub.w	r6, r4, r8
 80262b4:	b2b6      	uxth	r6, r6
 80262b6:	fb06 f002 	mul.w	r0, r6, r2
 80262ba:	ebc8 1505 	rsb	r5, r8, r5, lsl #4
 80262be:	b2ad      	uxth	r5, r5
 80262c0:	f5c4 7280 	rsb	r2, r4, #256	; 0x100
 80262c4:	1b52      	subs	r2, r2, r5
 80262c6:	b292      	uxth	r2, r2
 80262c8:	fb02 000b 	mla	r0, r2, fp, r0
 80262cc:	fb05 000a 	mla	r0, r5, sl, r0
 80262d0:	fb08 0009 	mla	r0, r8, r9, r0
 80262d4:	1200      	asrs	r0, r0, #8
 80262d6:	7008      	strb	r0, [r1, #0]
 80262d8:	f897 9001 	ldrb.w	r9, [r7, #1]
 80262dc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80262e0:	fb06 f909 	mul.w	r9, r6, r9
 80262e4:	fb02 9904 	mla	r9, r2, r4, r9
 80262e8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80262ec:	7858      	ldrb	r0, [r3, #1]
 80262ee:	fb05 9404 	mla	r4, r5, r4, r9
 80262f2:	fb08 4000 	mla	r0, r8, r0, r4
 80262f6:	1200      	asrs	r0, r0, #8
 80262f8:	7048      	strb	r0, [r1, #1]
 80262fa:	78bc      	ldrb	r4, [r7, #2]
 80262fc:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8026300:	fb06 f604 	mul.w	r6, r6, r4
 8026304:	fb02 6600 	mla	r6, r2, r0, r6
 8026308:	f89e 0002 	ldrb.w	r0, [lr, #2]
 802630c:	789b      	ldrb	r3, [r3, #2]
 802630e:	fb05 6500 	mla	r5, r5, r0, r6
 8026312:	fb08 5803 	mla	r8, r8, r3, r5
 8026316:	ea4f 2828 	mov.w	r8, r8, asr #8
 802631a:	f881 8002 	strb.w	r8, [r1, #2]
 802631e:	b003      	add	sp, #12
 8026320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026324:	b385      	cbz	r5, 8026388 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x150>
 8026326:	2e00      	cmp	r6, #0
 8026328:	db40      	blt.n	80263ac <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x174>
 802632a:	45b0      	cmp	r8, r6
 802632c:	dd3e      	ble.n	80263ac <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x174>
 802632e:	f819 e008 	ldrb.w	lr, [r9, r8]
 8026332:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8026336:	449e      	add	lr, r3
 8026338:	3601      	adds	r6, #1
 802633a:	f89e a000 	ldrb.w	sl, [lr]
 802633e:	d431      	bmi.n	80263a4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x16c>
 8026340:	45b0      	cmp	r8, r6
 8026342:	dd2f      	ble.n	80263a4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x16c>
 8026344:	2800      	cmp	r0, #0
 8026346:	d03f      	beq.n	80263c8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x190>
 8026348:	44c8      	add	r8, r9
 802634a:	f898 4001 	ldrb.w	r4, [r8, #1]
 802634e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026352:	f813 9004 	ldrb.w	r9, [r3, r4]
 8026356:	4423      	add	r3, r4
 8026358:	e79f      	b.n	802629a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x62>
 802635a:	2e00      	cmp	r6, #0
 802635c:	db01      	blt.n	8026362 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 802635e:	45b0      	cmp	r8, r6
 8026360:	dc1a      	bgt.n	8026398 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>
 8026362:	f10d 0c04 	add.w	ip, sp, #4
 8026366:	1c72      	adds	r2, r6, #1
 8026368:	f89c b000 	ldrb.w	fp, [ip]
 802636c:	d409      	bmi.n	8026382 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x14a>
 802636e:	4590      	cmp	r8, r2
 8026370:	dd07      	ble.n	8026382 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x14a>
 8026372:	b1f0      	cbz	r0, 80263b2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x17a>
 8026374:	f899 7001 	ldrb.w	r7, [r9, #1]
 8026378:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802637c:	5dda      	ldrb	r2, [r3, r7]
 802637e:	441f      	add	r7, r3
 8026380:	e781      	b.n	8026286 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8026382:	b2e2      	uxtb	r2, r4
 8026384:	af01      	add	r7, sp, #4
 8026386:	e77e      	b.n	8026286 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8026388:	280f      	cmp	r0, #15
 802638a:	fa5f fa84 	uxtb.w	sl, r4
 802638e:	d81f      	bhi.n	80263d0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8026390:	ab01      	add	r3, sp, #4
 8026392:	469e      	mov	lr, r3
 8026394:	46d1      	mov	r9, sl
 8026396:	e786      	b.n	80262a6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x6e>
 8026398:	f812 c00c 	ldrb.w	ip, [r2, ip]
 802639c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80263a0:	449c      	add	ip, r3
 80263a2:	e7e0      	b.n	8026366 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80263a4:	fa5f f984 	uxtb.w	r9, r4
 80263a8:	ab01      	add	r3, sp, #4
 80263aa:	e776      	b.n	802629a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x62>
 80263ac:	f10d 0e04 	add.w	lr, sp, #4
 80263b0:	e7c2      	b.n	8026338 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x100>
 80263b2:	f1be 0f00 	cmp.w	lr, #0
 80263b6:	b2e2      	uxtb	r2, r4
 80263b8:	af01      	add	r7, sp, #4
 80263ba:	f6bf af67 	bge.w	802628c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x54>
 80263be:	463b      	mov	r3, r7
 80263c0:	46be      	mov	lr, r7
 80263c2:	4691      	mov	r9, r2
 80263c4:	4692      	mov	sl, r2
 80263c6:	e76b      	b.n	80262a0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80263c8:	fa5f f984 	uxtb.w	r9, r4
 80263cc:	ab01      	add	r3, sp, #4
 80263ce:	e767      	b.n	80262a0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80263d0:	4b03      	ldr	r3, [pc, #12]	; (80263e0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1a8>)
 80263d2:	4a04      	ldr	r2, [pc, #16]	; (80263e4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1ac>)
 80263d4:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80263d8:	4803      	ldr	r0, [pc, #12]	; (80263e8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1b0>)
 80263da:	f003 f90f 	bl	80295fc <__assert_func>
 80263de:	bf00      	nop
 80263e0:	0802c8e4 	.word	0x0802c8e4
 80263e4:	0802cf5c 	.word	0x0802cf5c
 80263e8:	0802ca68 	.word	0x0802ca68

080263ec <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80263ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80263f0:	ed2d 8b0a 	vpush	{d8-d12}
 80263f4:	eeb0 aa40 	vmov.f32	s20, s0
 80263f8:	eef0 9a60 	vmov.f32	s19, s1
 80263fc:	eeb0 9a41 	vmov.f32	s18, s2
 8026400:	eef0 8a62 	vmov.f32	s17, s5
 8026404:	eeb0 8a43 	vmov.f32	s16, s6
 8026408:	eeb0 ca44 	vmov.f32	s24, s8
 802640c:	eef0 ba64 	vmov.f32	s23, s9
 8026410:	eeb0 ba45 	vmov.f32	s22, s10
 8026414:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8026418:	b093      	sub	sp, #76	; 0x4c
 802641a:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 802641e:	e9dd 412b 	ldrd	r4, r1, [sp, #172]	; 0xac
 8026422:	e9dd 9b27 	ldrd	r9, fp, [sp, #156]	; 0x9c
 8026426:	9011      	str	r0, [sp, #68]	; 0x44
 8026428:	461a      	mov	r2, r3
 802642a:	6860      	ldr	r0, [r4, #4]
 802642c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802642e:	fb00 1803 	mla	r8, r0, r3, r1
 8026432:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026434:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8026436:	6821      	ldr	r1, [r4, #0]
 8026438:	685b      	ldr	r3, [r3, #4]
 802643a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802643e:	6800      	ldr	r0, [r0, #0]
 8026440:	eb01 0a08 	add.w	sl, r1, r8
 8026444:	3304      	adds	r3, #4
 8026446:	f8dd 80a4 	ldr.w	r8, [sp, #164]	; 0xa4
 802644a:	9009      	str	r0, [sp, #36]	; 0x24
 802644c:	9307      	str	r3, [sp, #28]
 802644e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026450:	2b00      	cmp	r3, #0
 8026452:	dc02      	bgt.n	802645a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026456:	2b00      	cmp	r3, #0
 8026458:	dd61      	ble.n	802651e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 802645a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802645c:	2a00      	cmp	r2, #0
 802645e:	e9d3 6e02 	ldrd	r6, lr, [r3, #8]
 8026462:	b230      	sxth	r0, r6
 8026464:	fa0f f78e 	sxth.w	r7, lr
 8026468:	f340 81fe 	ble.w	8026868 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47c>
 802646c:	f8cd e018 	str.w	lr, [sp, #24]
 8026470:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
 8026474:	1e45      	subs	r5, r0, #1
 8026476:	f107 3cff 	add.w	ip, r7, #4294967295
 802647a:	ea5f 4329 	movs.w	r3, r9, asr #16
 802647e:	ea4f 412b 	mov.w	r1, fp, asr #16
 8026482:	d405      	bmi.n	8026490 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8026484:	42ab      	cmp	r3, r5
 8026486:	da03      	bge.n	8026490 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8026488:	2900      	cmp	r1, #0
 802648a:	db01      	blt.n	8026490 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802648c:	4561      	cmp	r1, ip
 802648e:	db4b      	blt.n	8026528 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8026490:	1c5c      	adds	r4, r3, #1
 8026492:	d406      	bmi.n	80264a2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8026494:	4284      	cmp	r4, r0
 8026496:	dc04      	bgt.n	80264a2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8026498:	1c4c      	adds	r4, r1, #1
 802649a:	d402      	bmi.n	80264a2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802649c:	42bc      	cmp	r4, r7
 802649e:	f340 815e 	ble.w	802675e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80264a2:	3a01      	subs	r2, #1
 80264a4:	44c1      	add	r9, r8
 80264a6:	44f3      	add	fp, lr
 80264a8:	f10a 0a03 	add.w	sl, sl, #3
 80264ac:	d1e5      	bne.n	802647a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80264ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80264b0:	2b00      	cmp	r3, #0
 80264b2:	dd34      	ble.n	802651e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 80264b4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80264b8:	ee79 9aab 	vadd.f32	s19, s19, s23
 80264bc:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80264c0:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80264c4:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80264c8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80264cc:	ee76 6a68 	vsub.f32	s13, s12, s17
 80264d0:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80264d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80264d8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80264dc:	ee16 2a90 	vmov	r2, s13
 80264e0:	3b01      	subs	r3, #1
 80264e2:	930a      	str	r3, [sp, #40]	; 0x28
 80264e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80264e6:	fb92 f8f3 	sdiv	r8, r2, r3
 80264ea:	ee17 2a10 	vmov	r2, s14
 80264ee:	eeb0 7a48 	vmov.f32	s14, s16
 80264f2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80264f6:	ee17 ba10 	vmov	fp, s14
 80264fa:	eeb0 7a68 	vmov.f32	s14, s17
 80264fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8026502:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026506:	932a      	str	r3, [sp, #168]	; 0xa8
 8026508:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802650a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802650c:	ee17 9a10 	vmov	r9, s14
 8026510:	eeb0 8a67 	vmov.f32	s16, s15
 8026514:	eef0 8a46 	vmov.f32	s17, s12
 8026518:	bf18      	it	ne
 802651a:	461a      	movne	r2, r3
 802651c:	e797      	b.n	802644e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802651e:	b013      	add	sp, #76	; 0x4c
 8026520:	ecbd 8b0a 	vpop	{d8-d12}
 8026524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026528:	f8dd e018 	ldr.w	lr, [sp, #24]
 802652c:	1e51      	subs	r1, r2, #1
 802652e:	fb08 9301 	mla	r3, r8, r1, r9
 8026532:	141b      	asrs	r3, r3, #16
 8026534:	9106      	str	r1, [sp, #24]
 8026536:	f100 80aa 	bmi.w	802668e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802653a:	42ab      	cmp	r3, r5
 802653c:	f280 80a7 	bge.w	802668e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8026540:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026542:	fb03 b301 	mla	r3, r3, r1, fp
 8026546:	141b      	asrs	r3, r3, #16
 8026548:	f100 80a1 	bmi.w	802668e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802654c:	3f01      	subs	r7, #1
 802654e:	42bb      	cmp	r3, r7
 8026550:	f280 809d 	bge.w	802668e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8026554:	2a00      	cmp	r2, #0
 8026556:	ddaa      	ble.n	80264ae <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8026558:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802655c:	eb0a 0302 	add.w	r3, sl, r2
 8026560:	9308      	str	r3, [sp, #32]
 8026562:	f10a 0a03 	add.w	sl, sl, #3
 8026566:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
 802656a:	e062      	b.n	8026632 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802656c:	784c      	ldrb	r4, [r1, #1]
 802656e:	180d      	adds	r5, r1, r0
 8026570:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026574:	4434      	add	r4, r6
 8026576:	2a00      	cmp	r2, #0
 8026578:	d07c      	beq.n	8026674 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802657a:	5c08      	ldrb	r0, [r1, r0]
 802657c:	786f      	ldrb	r7, [r5, #1]
 802657e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026582:	1981      	adds	r1, r0, r6
 8026584:	4608      	mov	r0, r1
 8026586:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802658a:	9106      	str	r1, [sp, #24]
 802658c:	4437      	add	r7, r6
 802658e:	b29b      	uxth	r3, r3
 8026590:	b292      	uxth	r2, r2
 8026592:	fb03 f502 	mul.w	r5, r3, r2
 8026596:	011b      	lsls	r3, r3, #4
 8026598:	f894 e000 	ldrb.w	lr, [r4]
 802659c:	1b59      	subs	r1, r3, r5
 802659e:	b289      	uxth	r1, r1
 80265a0:	fb01 fe0e 	mul.w	lr, r1, lr
 80265a4:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80265a8:	b292      	uxth	r2, r2
 80265aa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80265ae:	f816 6008 	ldrb.w	r6, [r6, r8]
 80265b2:	1a9b      	subs	r3, r3, r2
 80265b4:	b29b      	uxth	r3, r3
 80265b6:	fb03 e606 	mla	r6, r3, r6, lr
 80265ba:	f890 e000 	ldrb.w	lr, [r0]
 80265be:	f897 8000 	ldrb.w	r8, [r7]
 80265c2:	fb02 660e 	mla	r6, r2, lr, r6
 80265c6:	fb05 6808 	mla	r8, r5, r8, r6
 80265ca:	ea4f 2828 	mov.w	r8, r8, asr #8
 80265ce:	f80a 8c03 	strb.w	r8, [sl, #-3]
 80265d2:	f894 8001 	ldrb.w	r8, [r4, #1]
 80265d6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80265d8:	fb01 f608 	mul.w	r6, r1, r8
 80265dc:	f89c e001 	ldrb.w	lr, [ip, #1]
 80265e0:	4481      	add	r9, r0
 80265e2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80265e4:	fb03 680e 	mla	r8, r3, lr, r6
 80265e8:	4483      	add	fp, r0
 80265ea:	9806      	ldr	r0, [sp, #24]
 80265ec:	787e      	ldrb	r6, [r7, #1]
 80265ee:	f890 e001 	ldrb.w	lr, [r0, #1]
 80265f2:	fb02 8e0e 	mla	lr, r2, lr, r8
 80265f6:	fb05 ee06 	mla	lr, r5, r6, lr
 80265fa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80265fe:	f80a ec02 	strb.w	lr, [sl, #-2]
 8026602:	78a4      	ldrb	r4, [r4, #2]
 8026604:	f89c 6002 	ldrb.w	r6, [ip, #2]
 8026608:	fb01 f104 	mul.w	r1, r1, r4
 802660c:	fb03 1106 	mla	r1, r3, r6, r1
 8026610:	7883      	ldrb	r3, [r0, #2]
 8026612:	78b8      	ldrb	r0, [r7, #2]
 8026614:	fb02 1103 	mla	r1, r2, r3, r1
 8026618:	fb05 1500 	mla	r5, r5, r0, r1
 802661c:	9b08      	ldr	r3, [sp, #32]
 802661e:	122d      	asrs	r5, r5, #8
 8026620:	4553      	cmp	r3, sl
 8026622:	f80a 5c01 	strb.w	r5, [sl, #-1]
 8026626:	d030      	beq.n	802668a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8026628:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802662a:	f10a 0a03 	add.w	sl, sl, #3
 802662e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8026632:	ea4f 4329 	mov.w	r3, r9, asr #16
 8026636:	ea4f 412b 	mov.w	r1, fp, asr #16
 802663a:	fb00 3101 	mla	r1, r0, r1, r3
 802663e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026640:	9e07      	ldr	r6, [sp, #28]
 8026642:	f812 8001 	ldrb.w	r8, [r2, r1]
 8026646:	f3c9 3303 	ubfx	r3, r9, #12, #4
 802664a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802664e:	4411      	add	r1, r2
 8026650:	eb06 0c08 	add.w	ip, r6, r8
 8026654:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8026658:	2b00      	cmp	r3, #0
 802665a:	d187      	bne.n	802656c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x180>
 802665c:	b17a      	cbz	r2, 802667e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 802665e:	5c08      	ldrb	r0, [r1, r0]
 8026660:	9907      	ldr	r1, [sp, #28]
 8026662:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026666:	1841      	adds	r1, r0, r1
 8026668:	4667      	mov	r7, ip
 802666a:	9106      	str	r1, [sp, #24]
 802666c:	4664      	mov	r4, ip
 802666e:	9e07      	ldr	r6, [sp, #28]
 8026670:	4608      	mov	r0, r1
 8026672:	e78c      	b.n	802658e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026674:	4667      	mov	r7, ip
 8026676:	f8cd c018 	str.w	ip, [sp, #24]
 802667a:	4660      	mov	r0, ip
 802667c:	e787      	b.n	802658e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802667e:	4667      	mov	r7, ip
 8026680:	f8cd c018 	str.w	ip, [sp, #24]
 8026684:	4664      	mov	r4, ip
 8026686:	4660      	mov	r0, ip
 8026688:	e781      	b.n	802658e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802668a:	469a      	mov	sl, r3
 802668c:	e70f      	b.n	80264ae <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802668e:	2a00      	cmp	r2, #0
 8026690:	f77f af0d 	ble.w	80264ae <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8026694:	9d06      	ldr	r5, [sp, #24]
 8026696:	ea4f 4329 	mov.w	r3, r9, asr #16
 802669a:	ea4f 412b 	mov.w	r1, fp, asr #16
 802669e:	4657      	mov	r7, sl
 80266a0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80266a4:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 80266a6:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 80266aa:	2b00      	cmp	r3, #0
 80266ac:	f3c9 3003 	ubfx	r0, r9, #12, #4
 80266b0:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80266b4:	db31      	blt.n	802671a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80266b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80266ba:	4563      	cmp	r3, ip
 80266bc:	da2d      	bge.n	802671a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80266be:	2900      	cmp	r1, #0
 80266c0:	db2b      	blt.n	802671a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80266c2:	f10e 3cff 	add.w	ip, lr, #4294967295
 80266c6:	4561      	cmp	r1, ip
 80266c8:	da27      	bge.n	802671a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80266ca:	fa0f fc86 	sxth.w	ip, r6
 80266ce:	fb01 330c 	mla	r3, r1, ip, r3
 80266d2:	9e07      	ldr	r6, [sp, #28]
 80266d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80266d6:	f811 e003 	ldrb.w	lr, [r1, r3]
 80266da:	440b      	add	r3, r1
 80266dc:	4631      	mov	r1, r6
 80266de:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80266e2:	4471      	add	r1, lr
 80266e4:	910e      	str	r1, [sp, #56]	; 0x38
 80266e6:	2800      	cmp	r0, #0
 80266e8:	d04f      	beq.n	802678a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80266ea:	7859      	ldrb	r1, [r3, #1]
 80266ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80266f0:	1871      	adds	r1, r6, r1
 80266f2:	9108      	str	r1, [sp, #32]
 80266f4:	2a00      	cmp	r2, #0
 80266f6:	f000 80b2 	beq.w	802685e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 80266fa:	eb03 010c 	add.w	r1, r3, ip
 80266fe:	f813 600c 	ldrb.w	r6, [r3, ip]
 8026702:	7849      	ldrb	r1, [r1, #1]
 8026704:	9b07      	ldr	r3, [sp, #28]
 8026706:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802670a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802670e:	1859      	adds	r1, r3, r1
 8026710:	18f3      	adds	r3, r6, r3
 8026712:	910c      	str	r1, [sp, #48]	; 0x30
 8026714:	930d      	str	r3, [sp, #52]	; 0x34
 8026716:	9e08      	ldr	r6, [sp, #32]
 8026718:	e03d      	b.n	8026796 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802671a:	f113 0c01 	adds.w	ip, r3, #1
 802671e:	d406      	bmi.n	802672e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026720:	45b4      	cmp	ip, r6
 8026722:	dc04      	bgt.n	802672e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026724:	f111 0c01 	adds.w	ip, r1, #1
 8026728:	d401      	bmi.n	802672e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802672a:	45f4      	cmp	ip, lr
 802672c:	dd1d      	ble.n	802676a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802672e:	2d00      	cmp	r5, #0
 8026730:	f107 0703 	add.w	r7, r7, #3
 8026734:	44c1      	add	r9, r8
 8026736:	44d3      	add	fp, sl
 8026738:	dd07      	ble.n	802674a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802673a:	e9d4 6e02 	ldrd	r6, lr, [r4, #8]
 802673e:	3d01      	subs	r5, #1
 8026740:	ea4f 4329 	mov.w	r3, r9, asr #16
 8026744:	ea4f 412b 	mov.w	r1, fp, asr #16
 8026748:	e7af      	b.n	80266aa <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 802674a:	9b06      	ldr	r3, [sp, #24]
 802674c:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8026750:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026754:	3301      	adds	r3, #1
 8026756:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802675a:	449a      	add	sl, r3
 802675c:	e6a7      	b.n	80264ae <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802675e:	3a01      	subs	r2, #1
 8026760:	f8dd e018 	ldr.w	lr, [sp, #24]
 8026764:	4615      	mov	r5, r2
 8026766:	9206      	str	r2, [sp, #24]
 8026768:	e799      	b.n	802669e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 802676a:	fa0f fe8e 	sxth.w	lr, lr
 802676e:	b236      	sxth	r6, r6
 8026770:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8026774:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8026778:	e9cd 6e00 	strd	r6, lr, [sp]
 802677c:	9b07      	ldr	r3, [sp, #28]
 802677e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026780:	4639      	mov	r1, r7
 8026782:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026784:	f7ff fd58 	bl	8026238 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8026788:	e7d1      	b.n	802672e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802678a:	2a00      	cmp	r2, #0
 802678c:	d15b      	bne.n	8026846 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 802678e:	460e      	mov	r6, r1
 8026790:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 8026794:	9108      	str	r1, [sp, #32]
 8026796:	b283      	uxth	r3, r0
 8026798:	b292      	uxth	r2, r2
 802679a:	fb03 f002 	mul.w	r0, r3, r2
 802679e:	011b      	lsls	r3, r3, #4
 80267a0:	f896 c000 	ldrb.w	ip, [r6]
 80267a4:	1a19      	subs	r1, r3, r0
 80267a6:	b289      	uxth	r1, r1
 80267a8:	fb01 fc0c 	mul.w	ip, r1, ip
 80267ac:	9e07      	ldr	r6, [sp, #28]
 80267ae:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 80267b2:	b292      	uxth	r2, r2
 80267b4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80267b8:	f816 e00e 	ldrb.w	lr, [r6, lr]
 80267bc:	1a9b      	subs	r3, r3, r2
 80267be:	b29b      	uxth	r3, r3
 80267c0:	fb03 cc0e 	mla	ip, r3, lr, ip
 80267c4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80267c6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 80267ca:	f896 e000 	ldrb.w	lr, [r6]
 80267ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80267d0:	f896 c000 	ldrb.w	ip, [r6]
 80267d4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80267d6:	fb02 6e0e 	mla	lr, r2, lr, r6
 80267da:	fb00 ec0c 	mla	ip, r0, ip, lr
 80267de:	9e08      	ldr	r6, [sp, #32]
 80267e0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80267e4:	f887 c000 	strb.w	ip, [r7]
 80267e8:	f896 c001 	ldrb.w	ip, [r6, #1]
 80267ec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80267ee:	fb01 fc0c 	mul.w	ip, r1, ip
 80267f2:	f896 e001 	ldrb.w	lr, [r6, #1]
 80267f6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80267f8:	fb03 ce0e 	mla	lr, r3, lr, ip
 80267fc:	f896 c001 	ldrb.w	ip, [r6, #1]
 8026800:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8026802:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8026806:	f896 c001 	ldrb.w	ip, [r6, #1]
 802680a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802680c:	fb02 ee06 	mla	lr, r2, r6, lr
 8026810:	fb00 ec0c 	mla	ip, r0, ip, lr
 8026814:	9e08      	ldr	r6, [sp, #32]
 8026816:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802681a:	f887 c001 	strb.w	ip, [r7, #1]
 802681e:	f896 c002 	ldrb.w	ip, [r6, #2]
 8026822:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8026824:	fb01 f10c 	mul.w	r1, r1, ip
 8026828:	f896 e002 	ldrb.w	lr, [r6, #2]
 802682c:	fb03 110e 	mla	r1, r3, lr, r1
 8026830:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026832:	789e      	ldrb	r6, [r3, #2]
 8026834:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026836:	fb02 1206 	mla	r2, r2, r6, r1
 802683a:	789b      	ldrb	r3, [r3, #2]
 802683c:	fb00 2303 	mla	r3, r0, r3, r2
 8026840:	121b      	asrs	r3, r3, #8
 8026842:	70bb      	strb	r3, [r7, #2]
 8026844:	e773      	b.n	802672e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026846:	4631      	mov	r1, r6
 8026848:	f813 600c 	ldrb.w	r6, [r3, ip]
 802684c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802684e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8026852:	1871      	adds	r1, r6, r1
 8026854:	930c      	str	r3, [sp, #48]	; 0x30
 8026856:	910d      	str	r1, [sp, #52]	; 0x34
 8026858:	9308      	str	r3, [sp, #32]
 802685a:	461e      	mov	r6, r3
 802685c:	e79b      	b.n	8026796 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802685e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8026860:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
 8026864:	460e      	mov	r6, r1
 8026866:	e796      	b.n	8026796 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026868:	f43f ae21 	beq.w	80264ae <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802686c:	1e45      	subs	r5, r0, #1
 802686e:	e65d      	b.n	802652c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>

08026870 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8026870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026874:	b087      	sub	sp, #28
 8026876:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 802687a:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 802687e:	fb06 080c 	mla	r8, r6, ip, r0
 8026882:	2e00      	cmp	r6, #0
 8026884:	4696      	mov	lr, r2
 8026886:	eb02 0a08 	add.w	sl, r2, r8
 802688a:	f106 0b01 	add.w	fp, r6, #1
 802688e:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 8026892:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
 8026896:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 802689a:	f89d 4058 	ldrb.w	r4, [sp, #88]	; 0x58
 802689e:	db02      	blt.n	80268a6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 80268a0:	42b2      	cmp	r2, r6
 80268a2:	f300 80f1 	bgt.w	8026a88 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x218>
 80268a6:	2600      	movs	r6, #0
 80268a8:	46b1      	mov	r9, r6
 80268aa:	46b0      	mov	r8, r6
 80268ac:	46b6      	mov	lr, r6
 80268ae:	f1bb 0f00 	cmp.w	fp, #0
 80268b2:	db02      	blt.n	80268ba <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x4a>
 80268b4:	455a      	cmp	r2, fp
 80268b6:	f300 8101 	bgt.w	8026abc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 80268ba:	f04f 0c00 	mov.w	ip, #0
 80268be:	e9cd cc02 	strd	ip, ip, [sp, #8]
 80268c2:	f8cd c004 	str.w	ip, [sp, #4]
 80268c6:	2f0f      	cmp	r7, #15
 80268c8:	f200 813a 	bhi.w	8026b40 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 80268cc:	2d0f      	cmp	r5, #15
 80268ce:	f200 8137 	bhi.w	8026b40 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 80268d2:	b2a8      	uxth	r0, r5
 80268d4:	b2bb      	uxth	r3, r7
 80268d6:	fb00 f503 	mul.w	r5, r0, r3
 80268da:	9a01      	ldr	r2, [sp, #4]
 80268dc:	ebc5 1000 	rsb	r0, r5, r0, lsl #4
 80268e0:	b280      	uxth	r0, r0
 80268e2:	fb00 fa02 	mul.w	sl, r0, r2
 80268e6:	fb05 fb0c 	mul.w	fp, r5, ip
 80268ea:	011b      	lsls	r3, r3, #4
 80268ec:	1b5f      	subs	r7, r3, r5
 80268ee:	b2bf      	uxth	r7, r7
 80268f0:	fb07 f206 	mul.w	r2, r7, r6
 80268f4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80268f8:	1a1b      	subs	r3, r3, r0
 80268fa:	b29b      	uxth	r3, r3
 80268fc:	fb03 2209 	mla	r2, r3, r9, r2
 8026900:	4452      	add	r2, sl
 8026902:	445a      	add	r2, fp
 8026904:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026908:	2a00      	cmp	r2, #0
 802690a:	f000 80ba 	beq.w	8026a82 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x212>
 802690e:	b2a4      	uxth	r4, r4
 8026910:	fb02 f204 	mul.w	r2, r2, r4
 8026914:	f102 0a01 	add.w	sl, r2, #1
 8026918:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 802691c:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8026920:	9205      	str	r2, [sp, #20]
 8026922:	f008 12ff 	and.w	r2, r8, #16711935	; 0xff00ff
 8026926:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802692a:	fb06 f202 	mul.w	r2, r6, r2
 802692e:	fb06 f608 	mul.w	r6, r6, r8
 8026932:	f00e 1bff 	and.w	fp, lr, #16711935	; 0xff00ff
 8026936:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802693a:	fb09 fb0b 	mul.w	fp, r9, fp
 802693e:	fb09 fe0e 	mul.w	lr, r9, lr
 8026942:	f506 7980 	add.w	r9, r6, #256	; 0x100
 8026946:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 802694a:	0a36      	lsrs	r6, r6, #8
 802694c:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8026950:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026954:	fb07 f606 	mul.w	r6, r7, r6
 8026958:	9404      	str	r4, [sp, #16]
 802695a:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 802695e:	9c03      	ldr	r4, [sp, #12]
 8026960:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8026964:	4490      	add	r8, r2
 8026966:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802696a:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 802696e:	fb0c f202 	mul.w	r2, ip, r2
 8026972:	f404 497f 	and.w	r9, r4, #65280	; 0xff00
 8026976:	ea4f 2a1b 	mov.w	sl, fp, lsr #8
 802697a:	9c02      	ldr	r4, [sp, #8]
 802697c:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8026980:	fb0c fc09 	mul.w	ip, ip, r9
 8026984:	fb08 f807 	mul.w	r8, r8, r7
 8026988:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 802698c:	9603      	str	r6, [sp, #12]
 802698e:	f50e 7980 	add.w	r9, lr, #256	; 0x100
 8026992:	9e01      	ldr	r6, [sp, #4]
 8026994:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026998:	44d3      	add	fp, sl
 802699a:	eb09 2e1e 	add.w	lr, r9, lr, lsr #8
 802699e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80269a2:	f404 497f 	and.w	r9, r4, #65280	; 0xff00
 80269a6:	fb06 f707 	mul.w	r7, r6, r7
 80269aa:	fb06 f909 	mul.w	r9, r6, r9
 80269ae:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80269b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80269b6:	9e03      	ldr	r6, [sp, #12]
 80269b8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80269bc:	ea4f 2a12 	mov.w	sl, r2, lsr #8
 80269c0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80269c4:	fb0b 8803 	mla	r8, fp, r3, r8
 80269c8:	fb03 660e 	mla	r6, r3, lr, r6
 80269cc:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 80269d0:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80269d4:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 80269d8:	4492      	add	sl, r2
 80269da:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 80269de:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 80269e2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80269e6:	0a3a      	lsrs	r2, r7, #8
 80269e8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80269ec:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80269f0:	fb0b 8b05 	mla	fp, fp, r5, r8
 80269f4:	fb05 660e 	mla	r6, r5, lr, r6
 80269f8:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80269fc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026a00:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8026a04:	44b8      	add	r8, r7
 8026a06:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8026a0a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026a0e:	0a2d      	lsrs	r5, r5, #8
 8026a10:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8026a14:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026a18:	fb00 6505 	mla	r5, r0, r5, r6
 8026a1c:	fb08 b800 	mla	r8, r8, r0, fp
 8026a20:	0a2d      	lsrs	r5, r5, #8
 8026a22:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8026a26:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026a2a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026a2e:	4328      	orrs	r0, r5
 8026a30:	784b      	ldrb	r3, [r1, #1]
 8026a32:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8026a36:	9c04      	ldr	r4, [sp, #16]
 8026a38:	788d      	ldrb	r5, [r1, #2]
 8026a3a:	fa5f fa80 	uxtb.w	sl, r0
 8026a3e:	fb13 f602 	smulbb	r6, r3, r2
 8026a42:	fb15 f502 	smulbb	r5, r5, r2
 8026a46:	fb1a fa04 	smulbb	sl, sl, r4
 8026a4a:	780f      	ldrb	r7, [r1, #0]
 8026a4c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8026a50:	0c00      	lsrs	r0, r0, #16
 8026a52:	fb0c 6304 	mla	r3, ip, r4, r6
 8026a56:	fb07 a202 	mla	r2, r7, r2, sl
 8026a5a:	fb00 5404 	mla	r4, r0, r4, r5
 8026a5e:	b29b      	uxth	r3, r3
 8026a60:	b292      	uxth	r2, r2
 8026a62:	b2a4      	uxth	r4, r4
 8026a64:	1c56      	adds	r6, r2, #1
 8026a66:	1c5d      	adds	r5, r3, #1
 8026a68:	1c60      	adds	r0, r4, #1
 8026a6a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8026a6e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8026a72:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8026a76:	1212      	asrs	r2, r2, #8
 8026a78:	121b      	asrs	r3, r3, #8
 8026a7a:	1224      	asrs	r4, r4, #8
 8026a7c:	700a      	strb	r2, [r1, #0]
 8026a7e:	704b      	strb	r3, [r1, #1]
 8026a80:	708c      	strb	r4, [r1, #2]
 8026a82:	b007      	add	sp, #28
 8026a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a88:	2800      	cmp	r0, #0
 8026a8a:	db01      	blt.n	8026a90 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x220>
 8026a8c:	4584      	cmp	ip, r0
 8026a8e:	dc3d      	bgt.n	8026b0c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>
 8026a90:	f04f 0900 	mov.w	r9, #0
 8026a94:	46ce      	mov	lr, r9
 8026a96:	1c46      	adds	r6, r0, #1
 8026a98:	d42a      	bmi.n	8026af0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x280>
 8026a9a:	45b4      	cmp	ip, r6
 8026a9c:	dd28      	ble.n	8026af0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x280>
 8026a9e:	b137      	cbz	r7, 8026aae <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x23e>
 8026aa0:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8026aa4:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 8026aa8:	ea4f 6618 	mov.w	r6, r8, lsr #24
 8026aac:	e6ff      	b.n	80268ae <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8026aae:	f1bb 0f00 	cmp.w	fp, #0
 8026ab2:	db3e      	blt.n	8026b32 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2c2>
 8026ab4:	455a      	cmp	r2, fp
 8026ab6:	dd3c      	ble.n	8026b32 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2c2>
 8026ab8:	463e      	mov	r6, r7
 8026aba:	46b8      	mov	r8, r7
 8026abc:	b1dd      	cbz	r5, 8026af6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x286>
 8026abe:	2800      	cmp	r0, #0
 8026ac0:	db30      	blt.n	8026b24 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2b4>
 8026ac2:	4584      	cmp	ip, r0
 8026ac4:	dd2e      	ble.n	8026b24 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2b4>
 8026ac6:	f81a 200c 	ldrb.w	r2, [sl, ip]
 8026aca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026ace:	9202      	str	r2, [sp, #8]
 8026ad0:	0e12      	lsrs	r2, r2, #24
 8026ad2:	9201      	str	r2, [sp, #4]
 8026ad4:	3001      	adds	r0, #1
 8026ad6:	d420      	bmi.n	8026b1a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2aa>
 8026ad8:	4584      	cmp	ip, r0
 8026ada:	dd1e      	ble.n	8026b1a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2aa>
 8026adc:	b337      	cbz	r7, 8026b2c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2bc>
 8026ade:	44d4      	add	ip, sl
 8026ae0:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8026ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8026ae8:	9303      	str	r3, [sp, #12]
 8026aea:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026aee:	e6ea      	b.n	80268c6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x56>
 8026af0:	2600      	movs	r6, #0
 8026af2:	46b0      	mov	r8, r6
 8026af4:	e6db      	b.n	80268ae <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8026af6:	2f0f      	cmp	r7, #15
 8026af8:	d822      	bhi.n	8026b40 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 8026afa:	b2bb      	uxth	r3, r7
 8026afc:	4628      	mov	r0, r5
 8026afe:	46ab      	mov	fp, r5
 8026b00:	46aa      	mov	sl, r5
 8026b02:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8026b06:	46ac      	mov	ip, r5
 8026b08:	9501      	str	r5, [sp, #4]
 8026b0a:	e6ee      	b.n	80268ea <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8026b0c:	f81e 6008 	ldrb.w	r6, [lr, r8]
 8026b10:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
 8026b14:	ea4f 691e 	mov.w	r9, lr, lsr #24
 8026b18:	e7bd      	b.n	8026a96 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x226>
 8026b1a:	f04f 0c00 	mov.w	ip, #0
 8026b1e:	f8cd c00c 	str.w	ip, [sp, #12]
 8026b22:	e6d0      	b.n	80268c6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x56>
 8026b24:	2200      	movs	r2, #0
 8026b26:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8026b2a:	e7d3      	b.n	8026ad4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8026b2c:	9703      	str	r7, [sp, #12]
 8026b2e:	46bc      	mov	ip, r7
 8026b30:	e6cc      	b.n	80268cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x5c>
 8026b32:	46b8      	mov	r8, r7
 8026b34:	e9cd 7702 	strd	r7, r7, [sp, #8]
 8026b38:	46bc      	mov	ip, r7
 8026b3a:	9701      	str	r7, [sp, #4]
 8026b3c:	463e      	mov	r6, r7
 8026b3e:	e6c5      	b.n	80268cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x5c>
 8026b40:	4b03      	ldr	r3, [pc, #12]	; (8026b50 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e0>)
 8026b42:	4a04      	ldr	r2, [pc, #16]	; (8026b54 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e4>)
 8026b44:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8026b48:	4803      	ldr	r0, [pc, #12]	; (8026b58 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e8>)
 8026b4a:	f002 fd57 	bl	80295fc <__assert_func>
 8026b4e:	bf00      	nop
 8026b50:	0802c8e4 	.word	0x0802c8e4
 8026b54:	0802cf5c 	.word	0x0802cf5c
 8026b58:	0802ca68 	.word	0x0802ca68

08026b5c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b60:	ed2d 8b08 	vpush	{d8-d11}
 8026b64:	b0a9      	sub	sp, #164	; 0xa4
 8026b66:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8026b68:	9022      	str	r0, [sp, #136]	; 0x88
 8026b6a:	9114      	str	r1, [sp, #80]	; 0x50
 8026b6c:	6860      	ldr	r0, [r4, #4]
 8026b6e:	9940      	ldr	r1, [sp, #256]	; 0x100
 8026b70:	9217      	str	r2, [sp, #92]	; 0x5c
 8026b72:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8026b74:	eeb0 aa40 	vmov.f32	s20, s0
 8026b78:	fb00 1b02 	mla	fp, r0, r2, r1
 8026b7c:	6821      	ldr	r1, [r4, #0]
 8026b7e:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
 8026b82:	eb01 0800 	add.w	r8, r1, r0
 8026b86:	e9dd ab3b 	ldrd	sl, fp, [sp, #236]	; 0xec
 8026b8a:	eef0 9a60 	vmov.f32	s19, s1
 8026b8e:	eeb0 9a41 	vmov.f32	s18, s2
 8026b92:	eef0 8a62 	vmov.f32	s17, s5
 8026b96:	eeb0 8a43 	vmov.f32	s16, s6
 8026b9a:	eef0 ba44 	vmov.f32	s23, s8
 8026b9e:	eeb0 ba64 	vmov.f32	s22, s9
 8026ba2:	eef0 aa45 	vmov.f32	s21, s10
 8026ba6:	46c1      	mov	r9, r8
 8026ba8:	465f      	mov	r7, fp
 8026baa:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8026bac:	9d42      	ldr	r5, [sp, #264]	; 0x108
 8026bae:	6852      	ldr	r2, [r2, #4]
 8026bb0:	f89d 410c 	ldrb.w	r4, [sp, #268]	; 0x10c
 8026bb4:	3204      	adds	r2, #4
 8026bb6:	682d      	ldr	r5, [r5, #0]
 8026bb8:	920a      	str	r2, [sp, #40]	; 0x28
 8026bba:	b2a2      	uxth	r2, r4
 8026bbc:	9423      	str	r4, [sp, #140]	; 0x8c
 8026bbe:	9511      	str	r5, [sp, #68]	; 0x44
 8026bc0:	9216      	str	r2, [sp, #88]	; 0x58
 8026bc2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026bc4:	2a00      	cmp	r2, #0
 8026bc6:	dc02      	bgt.n	8026bce <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026bc8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8026bca:	2a00      	cmp	r2, #0
 8026bcc:	dd65      	ble.n	8026c9a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8026bce:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8026bd0:	2b00      	cmp	r3, #0
 8026bd2:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8026bd6:	b235      	sxth	r5, r6
 8026bd8:	fa0f f88c 	sxth.w	r8, ip
 8026bdc:	f340 838b 	ble.w	80272f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79a>
 8026be0:	1e6c      	subs	r4, r5, #1
 8026be2:	f108 3eff 	add.w	lr, r8, #4294967295
 8026be6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8026bea:	e9dd cb3d 	ldrd	ip, fp, [sp, #244]	; 0xf4
 8026bee:	ea5f 422a 	movs.w	r2, sl, asr #16
 8026bf2:	ea4f 4127 	mov.w	r1, r7, asr #16
 8026bf6:	d405      	bmi.n	8026c04 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026bf8:	42a2      	cmp	r2, r4
 8026bfa:	da03      	bge.n	8026c04 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026bfc:	2900      	cmp	r1, #0
 8026bfe:	db01      	blt.n	8026c04 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026c00:	4571      	cmp	r1, lr
 8026c02:	db4f      	blt.n	8026ca4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8026c04:	1c50      	adds	r0, r2, #1
 8026c06:	d406      	bmi.n	8026c16 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8026c08:	42a8      	cmp	r0, r5
 8026c0a:	dc04      	bgt.n	8026c16 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8026c0c:	1c48      	adds	r0, r1, #1
 8026c0e:	d402      	bmi.n	8026c16 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8026c10:	4540      	cmp	r0, r8
 8026c12:	f340 834c 	ble.w	80272ae <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8026c16:	3b01      	subs	r3, #1
 8026c18:	44e2      	add	sl, ip
 8026c1a:	445f      	add	r7, fp
 8026c1c:	f109 0903 	add.w	r9, r9, #3
 8026c20:	d1e5      	bne.n	8026bee <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026c22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026c24:	2b00      	cmp	r3, #0
 8026c26:	dd38      	ble.n	8026c9a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8026c28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026c2c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026c30:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026c34:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026c38:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026c3c:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8026c40:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026c44:	ee76 6a68 	vsub.f32	s13, s12, s17
 8026c48:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8026c4c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026c50:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026c54:	ee16 2a90 	vmov	r2, s13
 8026c58:	3b01      	subs	r3, #1
 8026c5a:	9314      	str	r3, [sp, #80]	; 0x50
 8026c5c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8026c5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026c62:	ee17 2a10 	vmov	r2, s14
 8026c66:	eeb0 7a48 	vmov.f32	s14, s16
 8026c6a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026c6e:	ee17 7a10 	vmov	r7, s14
 8026c72:	eeb0 7a68 	vmov.f32	s14, s17
 8026c76:	933d      	str	r3, [sp, #244]	; 0xf4
 8026c78:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8026c7a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026c7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026c82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8026c84:	933e      	str	r3, [sp, #248]	; 0xf8
 8026c86:	ee17 aa10 	vmov	sl, s14
 8026c8a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8026c8c:	eeb0 8a67 	vmov.f32	s16, s15
 8026c90:	eef0 8a46 	vmov.f32	s17, s12
 8026c94:	bf08      	it	eq
 8026c96:	4613      	moveq	r3, r2
 8026c98:	e793      	b.n	8026bc2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026c9a:	b029      	add	sp, #164	; 0xa4
 8026c9c:	ecbd 8b08 	vpop	{d8-d11}
 8026ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026ca4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8026ca8:	983d      	ldr	r0, [sp, #244]	; 0xf4
 8026caa:	1e59      	subs	r1, r3, #1
 8026cac:	fb00 a201 	mla	r2, r0, r1, sl
 8026cb0:	1412      	asrs	r2, r2, #16
 8026cb2:	9109      	str	r1, [sp, #36]	; 0x24
 8026cb4:	f100 8168 	bmi.w	8026f88 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 8026cb8:	42a2      	cmp	r2, r4
 8026cba:	f280 8165 	bge.w	8026f88 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 8026cbe:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8026cc0:	fb02 7201 	mla	r2, r2, r1, r7
 8026cc4:	1412      	asrs	r2, r2, #16
 8026cc6:	f100 815f 	bmi.w	8026f88 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 8026cca:	f108 31ff 	add.w	r1, r8, #4294967295
 8026cce:	428a      	cmp	r2, r1
 8026cd0:	f280 815a 	bge.w	8026f88 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 8026cd4:	2b00      	cmp	r3, #0
 8026cd6:	dda4      	ble.n	8026c22 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8026cd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026cdc:	444b      	add	r3, r9
 8026cde:	9310      	str	r3, [sp, #64]	; 0x40
 8026ce0:	f109 0303 	add.w	r3, r9, #3
 8026ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8026ce6:	46d1      	mov	r9, sl
 8026ce8:	973c      	str	r7, [sp, #240]	; 0xf0
 8026cea:	462e      	mov	r6, r5
 8026cec:	463b      	mov	r3, r7
 8026cee:	e12b      	b.n	8026f48 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8026cf0:	785f      	ldrb	r7, [r3, #1]
 8026cf2:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8026cf6:	9712      	str	r7, [sp, #72]	; 0x48
 8026cf8:	0e3f      	lsrs	r7, r7, #24
 8026cfa:	970b      	str	r7, [sp, #44]	; 0x2c
 8026cfc:	b16a      	cbz	r2, 8026d1a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8026cfe:	199f      	adds	r7, r3, r6
 8026d00:	5d9b      	ldrb	r3, [r3, r6]
 8026d02:	4626      	mov	r6, r4
 8026d04:	787f      	ldrb	r7, [r7, #1]
 8026d06:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026d0a:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
 8026d0e:	9313      	str	r3, [sp, #76]	; 0x4c
 8026d10:	9415      	str	r4, [sp, #84]	; 0x54
 8026d12:	0e1b      	lsrs	r3, r3, #24
 8026d14:	0e24      	lsrs	r4, r4, #24
 8026d16:	940d      	str	r4, [sp, #52]	; 0x34
 8026d18:	930c      	str	r3, [sp, #48]	; 0x30
 8026d1a:	fa1f fc81 	uxth.w	ip, r1
 8026d1e:	b292      	uxth	r2, r2
 8026d20:	fb0c f602 	mul.w	r6, ip, r2
 8026d24:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8026d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026d2a:	ebac 0706 	sub.w	r7, ip, r6
 8026d2e:	b2bf      	uxth	r7, r7
 8026d30:	fb07 f103 	mul.w	r1, r7, r3
 8026d34:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8026d38:	b292      	uxth	r2, r2
 8026d3a:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8026d3e:	1a9b      	subs	r3, r3, r2
 8026d40:	b29b      	uxth	r3, r3
 8026d42:	fb03 1100 	mla	r1, r3, r0, r1
 8026d46:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026d48:	fb02 1104 	mla	r1, r2, r4, r1
 8026d4c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026d4e:	fb06 1104 	mla	r1, r6, r4, r1
 8026d52:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026d56:	2900      	cmp	r1, #0
 8026d58:	f000 80e5 	beq.w	8026f26 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8026d5c:	f005 14ff 	and.w	r4, r5, #16711935	; 0xff00ff
 8026d60:	28ff      	cmp	r0, #255	; 0xff
 8026d62:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026d66:	940e      	str	r4, [sp, #56]	; 0x38
 8026d68:	950f      	str	r5, [sp, #60]	; 0x3c
 8026d6a:	d01d      	beq.n	8026da8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 8026d6c:	fb04 fe00 	mul.w	lr, r4, r0
 8026d70:	fb05 f800 	mul.w	r8, r5, r0
 8026d74:	ea4f 251e 	mov.w	r5, lr, lsr #8
 8026d78:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026d7c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8026d80:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8026d84:	44ae      	add	lr, r5
 8026d86:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026d8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026d8e:	0a00      	lsrs	r0, r0, #8
 8026d90:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026d94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026d98:	ea4e 0e00 	orr.w	lr, lr, r0
 8026d9c:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8026da0:	900e      	str	r0, [sp, #56]	; 0x38
 8026da2:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 8026da6:	900f      	str	r0, [sp, #60]	; 0x3c
 8026da8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8026daa:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 8026dae:	f400 487f 	and.w	r8, r0, #65280	; 0xff00
 8026db2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8026db4:	28ff      	cmp	r0, #255	; 0xff
 8026db6:	d01c      	beq.n	8026df2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8026db8:	fb0e fe00 	mul.w	lr, lr, r0
 8026dbc:	fb08 f800 	mul.w	r8, r8, r0
 8026dc0:	ea4f 251e 	mov.w	r5, lr, lsr #8
 8026dc4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026dc8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8026dcc:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8026dd0:	44ae      	add	lr, r5
 8026dd2:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8026dd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026dda:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026dde:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026de2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026de6:	ea4e 0808 	orr.w	r8, lr, r8
 8026dea:	f008 1eff 	and.w	lr, r8, #16711935	; 0xff00ff
 8026dee:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026df2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8026df4:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 8026df8:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 8026dfc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026dfe:	28ff      	cmp	r0, #255	; 0xff
 8026e00:	d01c      	beq.n	8026e3c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8026e02:	fb0c fc00 	mul.w	ip, ip, r0
 8026e06:	fb0a fa00 	mul.w	sl, sl, r0
 8026e0a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8026e0e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026e12:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026e16:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026e1a:	44ac      	add	ip, r5
 8026e1c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8026e20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026e24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026e28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026e2c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026e30:	ea4c 0a0a 	orr.w	sl, ip, sl
 8026e34:	f00a 1cff 	and.w	ip, sl, #16711935	; 0xff00ff
 8026e38:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026e3c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026e3e:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8026e42:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8026e46:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026e48:	2cff      	cmp	r4, #255	; 0xff
 8026e4a:	d019      	beq.n	8026e80 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8026e4c:	fb00 f004 	mul.w	r0, r0, r4
 8026e50:	fb0b fb04 	mul.w	fp, fp, r4
 8026e54:	0a05      	lsrs	r5, r0, #8
 8026e56:	f005 14ff 	and.w	r4, r5, #16711935	; 0xff00ff
 8026e5a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026e5e:	f50b 7580 	add.w	r5, fp, #256	; 0x100
 8026e62:	eb05 251b 	add.w	r5, r5, fp, lsr #8
 8026e66:	4420      	add	r0, r4
 8026e68:	0a00      	lsrs	r0, r0, #8
 8026e6a:	0a2d      	lsrs	r5, r5, #8
 8026e6c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026e70:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8026e74:	ea40 0b0b 	orr.w	fp, r0, fp
 8026e78:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 8026e7c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8026e80:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026e82:	fb0e fe07 	mul.w	lr, lr, r7
 8026e86:	fb01 f104 	mul.w	r1, r1, r4
 8026e8a:	1c4d      	adds	r5, r1, #1
 8026e8c:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8026e90:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026e94:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026e96:	fb08 f707 	mul.w	r7, r8, r7
 8026e9a:	fb05 ee03 	mla	lr, r5, r3, lr
 8026e9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026ea0:	fb0c ee02 	mla	lr, ip, r2, lr
 8026ea4:	fb05 7703 	mla	r7, r5, r3, r7
 8026ea8:	fb0a 7702 	mla	r7, sl, r2, r7
 8026eac:	fb00 ee06 	mla	lr, r0, r6, lr
 8026eb0:	fb0b 7706 	mla	r7, fp, r6, r7
 8026eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026eb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026eba:	0a3f      	lsrs	r7, r7, #8
 8026ebc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026ec0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026ec4:	ea4e 0307 	orr.w	r3, lr, r7
 8026ec8:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8026ecc:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8026ed0:	b2c9      	uxtb	r1, r1
 8026ed2:	fa5f fc83 	uxtb.w	ip, r3
 8026ed6:	fb16 f601 	smulbb	r6, r6, r1
 8026eda:	fb17 f701 	smulbb	r7, r7, r1
 8026ede:	fb1c fc04 	smulbb	ip, ip, r4
 8026ee2:	f810 0c03 	ldrb.w	r0, [r0, #-3]
 8026ee6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8026eea:	0c1b      	lsrs	r3, r3, #16
 8026eec:	fb00 c101 	mla	r1, r0, r1, ip
 8026ef0:	fb03 6304 	mla	r3, r3, r4, r6
 8026ef4:	fb02 7204 	mla	r2, r2, r4, r7
 8026ef8:	b289      	uxth	r1, r1
 8026efa:	b292      	uxth	r2, r2
 8026efc:	b29b      	uxth	r3, r3
 8026efe:	f101 0e01 	add.w	lr, r1, #1
 8026f02:	1c56      	adds	r6, r2, #1
 8026f04:	1c5d      	adds	r5, r3, #1
 8026f06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026f08:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 8026f0c:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8026f10:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8026f14:	1209      	asrs	r1, r1, #8
 8026f16:	1212      	asrs	r2, r2, #8
 8026f18:	121b      	asrs	r3, r3, #8
 8026f1a:	f800 1c03 	strb.w	r1, [r0, #-3]
 8026f1e:	f800 2c02 	strb.w	r2, [r0, #-2]
 8026f22:	f800 3c01 	strb.w	r3, [r0, #-1]
 8026f26:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8026f28:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8026f2a:	4499      	add	r9, r3
 8026f2c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8026f2e:	4413      	add	r3, r2
 8026f30:	933c      	str	r3, [sp, #240]	; 0xf0
 8026f32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026f34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026f36:	4293      	cmp	r3, r2
 8026f38:	d024      	beq.n	8026f84 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8026f3a:	4613      	mov	r3, r2
 8026f3c:	3303      	adds	r3, #3
 8026f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8026f40:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8026f42:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8026f46:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8026f48:	ea4f 4229 	mov.w	r2, r9, asr #16
 8026f4c:	141b      	asrs	r3, r3, #16
 8026f4e:	fb06 2303 	mla	r3, r6, r3, r2
 8026f52:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026f54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026f56:	5cc2      	ldrb	r2, [r0, r3]
 8026f58:	f3c9 3103 	ubfx	r1, r9, #12, #4
 8026f5c:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 8026f60:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8026f62:	4403      	add	r3, r0
 8026f64:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8026f68:	0e28      	lsrs	r0, r5, #24
 8026f6a:	2900      	cmp	r1, #0
 8026f6c:	f47f aec0 	bne.w	8026cf0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x194>
 8026f70:	2a00      	cmp	r2, #0
 8026f72:	f43f aed2 	beq.w	8026d1a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8026f76:	5d9b      	ldrb	r3, [r3, r6]
 8026f78:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8026f7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8026f7e:	0e1b      	lsrs	r3, r3, #24
 8026f80:	930c      	str	r3, [sp, #48]	; 0x30
 8026f82:	e6ca      	b.n	8026d1a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8026f84:	4699      	mov	r9, r3
 8026f86:	e64c      	b.n	8026c22 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8026f88:	2b00      	cmp	r3, #0
 8026f8a:	f77f ae4a 	ble.w	8026c22 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8026f8e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8026f92:	ea4f 422a 	mov.w	r2, sl, asr #16
 8026f96:	1439      	asrs	r1, r7, #16
 8026f98:	2a00      	cmp	r2, #0
 8026f9a:	46cb      	mov	fp, r9
 8026f9c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8026fa0:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8026fa2:	e9dd 953d 	ldrd	r9, r5, [sp, #244]	; 0xf4
 8026fa6:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8026faa:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8026fae:	f2c0 8154 	blt.w	802725a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8026fb2:	1e73      	subs	r3, r6, #1
 8026fb4:	429a      	cmp	r2, r3
 8026fb6:	f280 8150 	bge.w	802725a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8026fba:	2900      	cmp	r1, #0
 8026fbc:	f2c0 814d 	blt.w	802725a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8026fc0:	f10c 33ff 	add.w	r3, ip, #4294967295
 8026fc4:	4299      	cmp	r1, r3
 8026fc6:	f280 8148 	bge.w	802725a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8026fca:	b236      	sxth	r6, r6
 8026fcc:	fb01 2206 	mla	r2, r1, r6, r2
 8026fd0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8026fd2:	5c8b      	ldrb	r3, [r1, r2]
 8026fd4:	440a      	add	r2, r1
 8026fd6:	9210      	str	r2, [sp, #64]	; 0x40
 8026fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8026fde:	930e      	str	r3, [sp, #56]	; 0x38
 8026fe0:	0e1b      	lsrs	r3, r3, #24
 8026fe2:	2800      	cmp	r0, #0
 8026fe4:	f000 8169 	beq.w	80272ba <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8026fe8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8026fea:	f891 c001 	ldrb.w	ip, [r1, #1]
 8026fee:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8026ff2:	9224      	str	r2, [sp, #144]	; 0x90
 8026ff4:	0e12      	lsrs	r2, r2, #24
 8026ff6:	9218      	str	r2, [sp, #96]	; 0x60
 8026ff8:	f1be 0f00 	cmp.w	lr, #0
 8026ffc:	f040 816a 	bne.w	80272d4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>
 8027000:	b280      	uxth	r0, r0
 8027002:	fa1f fc8e 	uxth.w	ip, lr
 8027006:	fb00 f20c 	mul.w	r2, r0, ip
 802700a:	4611      	mov	r1, r2
 802700c:	0106      	lsls	r6, r0, #4
 802700e:	1ab0      	subs	r0, r6, r2
 8027010:	9210      	str	r2, [sp, #64]	; 0x40
 8027012:	b282      	uxth	r2, r0
 8027014:	9818      	ldr	r0, [sp, #96]	; 0x60
 8027016:	ebc1 1c0c 	rsb	ip, r1, ip, lsl #4
 802701a:	fb02 f000 	mul.w	r0, r2, r0
 802701e:	921b      	str	r2, [sp, #108]	; 0x6c
 8027020:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 8027024:	fa1f f28c 	uxth.w	r2, ip
 8027028:	1ab6      	subs	r6, r6, r2
 802702a:	b2b6      	uxth	r6, r6
 802702c:	fb06 0c03 	mla	ip, r6, r3, r0
 8027030:	9819      	ldr	r0, [sp, #100]	; 0x64
 8027032:	921c      	str	r2, [sp, #112]	; 0x70
 8027034:	fb02 cc00 	mla	ip, r2, r0, ip
 8027038:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 802703a:	961d      	str	r6, [sp, #116]	; 0x74
 802703c:	fb01 cc02 	mla	ip, r1, r2, ip
 8027040:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8027044:	f1bc 0f00 	cmp.w	ip, #0
 8027048:	f000 80f1 	beq.w	802722e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 802704c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802704e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027050:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027054:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027058:	2bff      	cmp	r3, #255	; 0xff
 802705a:	921e      	str	r2, [sp, #120]	; 0x78
 802705c:	910e      	str	r1, [sp, #56]	; 0x38
 802705e:	d01b      	beq.n	8027098 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8027060:	fb01 f103 	mul.w	r1, r1, r3
 8027064:	fb02 f203 	mul.w	r2, r2, r3
 8027068:	460b      	mov	r3, r1
 802706a:	0a11      	lsrs	r1, r2, #8
 802706c:	f102 1601 	add.w	r6, r2, #65537	; 0x10001
 8027070:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027074:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8027078:	4431      	add	r1, r6
 802707a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802707e:	0a09      	lsrs	r1, r1, #8
 8027080:	0a1b      	lsrs	r3, r3, #8
 8027082:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027086:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802708a:	430b      	orrs	r3, r1
 802708c:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8027090:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027094:	921e      	str	r2, [sp, #120]	; 0x78
 8027096:	930e      	str	r3, [sp, #56]	; 0x38
 8027098:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802709a:	9918      	ldr	r1, [sp, #96]	; 0x60
 802709c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80270a0:	29ff      	cmp	r1, #255	; 0xff
 80270a2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80270a6:	931f      	str	r3, [sp, #124]	; 0x7c
 80270a8:	9220      	str	r2, [sp, #128]	; 0x80
 80270aa:	d01b      	beq.n	80270e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 80270ac:	fb03 f301 	mul.w	r3, r3, r1
 80270b0:	fb02 f201 	mul.w	r2, r2, r1
 80270b4:	0a19      	lsrs	r1, r3, #8
 80270b6:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 80270ba:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80270be:	f502 7380 	add.w	r3, r2, #256	; 0x100
 80270c2:	4401      	add	r1, r0
 80270c4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80270c8:	0a09      	lsrs	r1, r1, #8
 80270ca:	0a1b      	lsrs	r3, r3, #8
 80270cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80270d0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80270d4:	ea41 0003 	orr.w	r0, r1, r3
 80270d8:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80270dc:	931f      	str	r3, [sp, #124]	; 0x7c
 80270de:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80270e2:	9320      	str	r3, [sp, #128]	; 0x80
 80270e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80270e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80270e8:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80270ec:	2aff      	cmp	r2, #255	; 0xff
 80270ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80270f2:	9321      	str	r3, [sp, #132]	; 0x84
 80270f4:	d01a      	beq.n	802712c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d0>
 80270f6:	fb03 f302 	mul.w	r3, r3, r2
 80270fa:	4618      	mov	r0, r3
 80270fc:	fb06 f602 	mul.w	r6, r6, r2
 8027100:	0a31      	lsrs	r1, r6, #8
 8027102:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027106:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802710a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802710e:	440e      	add	r6, r1
 8027110:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027114:	0a36      	lsrs	r6, r6, #8
 8027116:	0a1b      	lsrs	r3, r3, #8
 8027118:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802711c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027120:	4333      	orrs	r3, r6
 8027122:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8027126:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802712a:	9321      	str	r3, [sp, #132]	; 0x84
 802712c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802712e:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8027132:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8027136:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8027138:	2aff      	cmp	r2, #255	; 0xff
 802713a:	d01a      	beq.n	8027172 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x616>
 802713c:	fb03 f302 	mul.w	r3, r3, r2
 8027140:	fb0e fe02 	mul.w	lr, lr, r2
 8027144:	0a19      	lsrs	r1, r3, #8
 8027146:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 802714a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802714e:	f50e 7380 	add.w	r3, lr, #256	; 0x100
 8027152:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8027156:	4401      	add	r1, r0
 8027158:	0a09      	lsrs	r1, r1, #8
 802715a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802715e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027162:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027166:	ea41 0e0e 	orr.w	lr, r1, lr
 802716a:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 802716e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027172:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8027174:	fb0c f102 	mul.w	r1, ip, r2
 8027178:	1c48      	adds	r0, r1, #1
 802717a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802717e:	ea6f 2211 	mvn.w	r2, r1, lsr #8
 8027182:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8027184:	9225      	str	r2, [sp, #148]	; 0x94
 8027186:	4684      	mov	ip, r0
 8027188:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802718a:	9820      	ldr	r0, [sp, #128]	; 0x80
 802718c:	fb0c fc02 	mul.w	ip, ip, r2
 8027190:	fb00 f002 	mul.w	r0, r0, r2
 8027194:	4601      	mov	r1, r0
 8027196:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8027198:	981e      	ldr	r0, [sp, #120]	; 0x78
 802719a:	fb00 cc02 	mla	ip, r0, r2, ip
 802719e:	980e      	ldr	r0, [sp, #56]	; 0x38
 80271a0:	fb00 1102 	mla	r1, r0, r2, r1
 80271a4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80271a6:	9821      	ldr	r0, [sp, #132]	; 0x84
 80271a8:	fb06 c602 	mla	r6, r6, r2, ip
 80271ac:	fb00 1002 	mla	r0, r0, r2, r1
 80271b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80271b2:	f89d 1094 	ldrb.w	r1, [sp, #148]	; 0x94
 80271b6:	fb03 6602 	mla	r6, r3, r2, r6
 80271ba:	fb0e 0302 	mla	r3, lr, r2, r0
 80271be:	0a32      	lsrs	r2, r6, #8
 80271c0:	0a1b      	lsrs	r3, r3, #8
 80271c2:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80271c6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80271ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80271ce:	4313      	orrs	r3, r2
 80271d0:	fb16 f001 	smulbb	r0, r6, r1
 80271d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80271d6:	fa5f fe83 	uxtb.w	lr, r3
 80271da:	fb1e fe02 	smulbb	lr, lr, r2
 80271de:	f89b c001 	ldrb.w	ip, [fp, #1]
 80271e2:	900e      	str	r0, [sp, #56]	; 0x38
 80271e4:	f89b 0000 	ldrb.w	r0, [fp]
 80271e8:	fb1c fc01 	smulbb	ip, ip, r1
 80271ec:	fb00 e001 	mla	r0, r0, r1, lr
 80271f0:	4611      	mov	r1, r2
 80271f2:	f3c3 2607 	ubfx	r6, r3, #8, #8
 80271f6:	fb06 c202 	mla	r2, r6, r2, ip
 80271fa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80271fc:	0c1b      	lsrs	r3, r3, #16
 80271fe:	fb03 6301 	mla	r3, r3, r1, r6
 8027202:	b280      	uxth	r0, r0
 8027204:	b296      	uxth	r6, r2
 8027206:	b29b      	uxth	r3, r3
 8027208:	1c5a      	adds	r2, r3, #1
 802720a:	f100 0c01 	add.w	ip, r0, #1
 802720e:	1c71      	adds	r1, r6, #1
 8027210:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027214:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8027218:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 802721c:	1200      	asrs	r0, r0, #8
 802721e:	120a      	asrs	r2, r1, #8
 8027220:	121b      	asrs	r3, r3, #8
 8027222:	f88b 0000 	strb.w	r0, [fp]
 8027226:	f88b 2001 	strb.w	r2, [fp, #1]
 802722a:	f88b 3002 	strb.w	r3, [fp, #2]
 802722e:	f1b8 0f00 	cmp.w	r8, #0
 8027232:	f10b 0b03 	add.w	fp, fp, #3
 8027236:	44ca      	add	sl, r9
 8027238:	442f      	add	r7, r5
 802723a:	dd2e      	ble.n	802729a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73e>
 802723c:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8027240:	ea4f 422a 	mov.w	r2, sl, asr #16
 8027244:	2a00      	cmp	r2, #0
 8027246:	f108 38ff 	add.w	r8, r8, #4294967295
 802724a:	ea4f 4127 	mov.w	r1, r7, asr #16
 802724e:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8027252:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8027256:	f6bf aeac 	bge.w	8026fb2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802725a:	1c53      	adds	r3, r2, #1
 802725c:	d4e7      	bmi.n	802722e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 802725e:	42b3      	cmp	r3, r6
 8027260:	dce5      	bgt.n	802722e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8027262:	1c4b      	adds	r3, r1, #1
 8027264:	d4e3      	bmi.n	802722e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8027266:	4563      	cmp	r3, ip
 8027268:	dce1      	bgt.n	802722e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 802726a:	fa0f f38c 	sxth.w	r3, ip
 802726e:	b236      	sxth	r6, r6
 8027270:	e9cd 6300 	strd	r6, r3, [sp]
 8027274:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027276:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802727a:	e9cd e305 	strd	lr, r3, [sp, #20]
 802727e:	9202      	str	r2, [sp, #8]
 8027280:	4659      	mov	r1, fp
 8027282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027284:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027286:	9822      	ldr	r0, [sp, #136]	; 0x88
 8027288:	f7ff faf2 	bl	8026870 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 802728c:	f1b8 0f00 	cmp.w	r8, #0
 8027290:	f10b 0b03 	add.w	fp, fp, #3
 8027294:	44ca      	add	sl, r9
 8027296:	442f      	add	r7, r5
 8027298:	dcd0      	bgt.n	802723c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 802729a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802729c:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 80272a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80272a4:	3301      	adds	r3, #1
 80272a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80272aa:	4499      	add	r9, r3
 80272ac:	e4b9      	b.n	8026c22 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80272ae:	3b01      	subs	r3, #1
 80272b0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80272b4:	4698      	mov	r8, r3
 80272b6:	9309      	str	r3, [sp, #36]	; 0x24
 80272b8:	e66e      	b.n	8026f98 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 80272ba:	f1be 0f00 	cmp.w	lr, #0
 80272be:	f43f ae9f 	beq.w	8027000 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 80272c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80272c4:	5d92      	ldrb	r2, [r2, r6]
 80272c6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80272c8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80272cc:	9226      	str	r2, [sp, #152]	; 0x98
 80272ce:	0e12      	lsrs	r2, r2, #24
 80272d0:	9219      	str	r2, [sp, #100]	; 0x64
 80272d2:	e695      	b.n	8027000 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 80272d4:	eb01 0c06 	add.w	ip, r1, r6
 80272d8:	f89c c001 	ldrb.w	ip, [ip, #1]
 80272dc:	5d89      	ldrb	r1, [r1, r6]
 80272de:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80272e0:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 80272e4:	f856 6021 	ldr.w	r6, [r6, r1, lsl #2]
 80272e8:	9227      	str	r2, [sp, #156]	; 0x9c
 80272ea:	0e12      	lsrs	r2, r2, #24
 80272ec:	921a      	str	r2, [sp, #104]	; 0x68
 80272ee:	0e32      	lsrs	r2, r6, #24
 80272f0:	9626      	str	r6, [sp, #152]	; 0x98
 80272f2:	9219      	str	r2, [sp, #100]	; 0x64
 80272f4:	e684      	b.n	8027000 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 80272f6:	f43f ac94 	beq.w	8026c22 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80272fa:	1e6c      	subs	r4, r5, #1
 80272fc:	e4d4      	b.n	8026ca8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80272fe:	bf00      	nop

08027300 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8027300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027304:	b089      	sub	sp, #36	; 0x24
 8027306:	f9bd b048 	ldrsh.w	fp, [sp, #72]	; 0x48
 802730a:	e9dd 4014 	ldrd	r4, r0, [sp, #80]	; 0x50
 802730e:	fb00 450b 	mla	r5, r0, fp, r4
 8027312:	2800      	cmp	r0, #0
 8027314:	4694      	mov	ip, r2
 8027316:	f100 0601 	add.w	r6, r0, #1
 802731a:	442a      	add	r2, r5
 802731c:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8027320:	f89d a058 	ldrb.w	sl, [sp, #88]	; 0x58
 8027324:	f89d 705c 	ldrb.w	r7, [sp, #92]	; 0x5c
 8027328:	db02      	blt.n	8027330 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x30>
 802732a:	4580      	cmp	r8, r0
 802732c:	f300 810a 	bgt.w	8027544 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x244>
 8027330:	f04f 0c00 	mov.w	ip, #0
 8027334:	46e6      	mov	lr, ip
 8027336:	4665      	mov	r5, ip
 8027338:	46e1      	mov	r9, ip
 802733a:	2e00      	cmp	r6, #0
 802733c:	db02      	blt.n	8027344 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x44>
 802733e:	45b0      	cmp	r8, r6
 8027340:	f300 811a 	bgt.w	8027578 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x278>
 8027344:	2400      	movs	r4, #0
 8027346:	46a0      	mov	r8, r4
 8027348:	e9cd 4403 	strd	r4, r4, [sp, #12]
 802734c:	f1ba 0f0f 	cmp.w	sl, #15
 8027350:	f200 8158 	bhi.w	8027604 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8027354:	2f0f      	cmp	r7, #15
 8027356:	f200 8155 	bhi.w	8027604 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 802735a:	b2ba      	uxth	r2, r7
 802735c:	fa1f f38a 	uxth.w	r3, sl
 8027360:	fb02 f703 	mul.w	r7, r2, r3
 8027364:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8027368:	b292      	uxth	r2, r2
 802736a:	fb02 fa08 	mul.w	sl, r2, r8
 802736e:	fb07 fb04 	mul.w	fp, r7, r4
 8027372:	011b      	lsls	r3, r3, #4
 8027374:	1bd8      	subs	r0, r3, r7
 8027376:	b280      	uxth	r0, r0
 8027378:	9001      	str	r0, [sp, #4]
 802737a:	fb00 f00c 	mul.w	r0, r0, ip
 802737e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8027382:	1a9b      	subs	r3, r3, r2
 8027384:	b29b      	uxth	r3, r3
 8027386:	fb03 000e 	mla	r0, r3, lr, r0
 802738a:	4450      	add	r0, sl
 802738c:	4458      	add	r0, fp
 802738e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027392:	9002      	str	r0, [sp, #8]
 8027394:	2800      	cmp	r0, #0
 8027396:	f000 80d2 	beq.w	802753e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 802739a:	f009 10ff 	and.w	r0, r9, #16711935	; 0xff00ff
 802739e:	f409 467f 	and.w	r6, r9, #65280	; 0xff00
 80273a2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80273a6:	9005      	str	r0, [sp, #20]
 80273a8:	9606      	str	r6, [sp, #24]
 80273aa:	d01e      	beq.n	80273ea <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xea>
 80273ac:	fb00 fb0e 	mul.w	fp, r0, lr
 80273b0:	fb06 fe0e 	mul.w	lr, r6, lr
 80273b4:	ea4f 201b 	mov.w	r0, fp, lsr #8
 80273b8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80273bc:	f50e 7a80 	add.w	sl, lr, #256	; 0x100
 80273c0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80273c4:	4483      	add	fp, r0
 80273c6:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 80273ca:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80273ce:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 80273d2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80273d6:	f40a 4e7f 	and.w	lr, sl, #65280	; 0xff00
 80273da:	ea4b 0e0e 	orr.w	lr, fp, lr
 80273de:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80273e2:	9005      	str	r0, [sp, #20]
 80273e4:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 80273e8:	9006      	str	r0, [sp, #24]
 80273ea:	f405 407f 	and.w	r0, r5, #65280	; 0xff00
 80273ee:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80273f2:	f005 1aff 	and.w	sl, r5, #16711935	; 0xff00ff
 80273f6:	9007      	str	r0, [sp, #28]
 80273f8:	d01d      	beq.n	8027436 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x136>
 80273fa:	fb0a fa0c 	mul.w	sl, sl, ip
 80273fe:	fb00 f50c 	mul.w	r5, r0, ip
 8027402:	ea4f 201a 	mov.w	r0, sl, lsr #8
 8027406:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802740a:	f505 7b80 	add.w	fp, r5, #256	; 0x100
 802740e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027412:	4482      	add	sl, r0
 8027414:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8027418:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802741c:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8027420:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8027424:	f40b 457f 	and.w	r5, fp, #65280	; 0xff00
 8027428:	ea4a 0505 	orr.w	r5, sl, r5
 802742c:	f405 407f 	and.w	r0, r5, #65280	; 0xff00
 8027430:	f005 1aff 	and.w	sl, r5, #16711935	; 0xff00ff
 8027434:	9007      	str	r0, [sp, #28]
 8027436:	9803      	ldr	r0, [sp, #12]
 8027438:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802743c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8027440:	f400 467f 	and.w	r6, r0, #65280	; 0xff00
 8027444:	d01b      	beq.n	802747e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x17e>
 8027446:	fb09 f908 	mul.w	r9, r9, r8
 802744a:	fb06 f608 	mul.w	r6, r6, r8
 802744e:	ea4f 2c19 	mov.w	ip, r9, lsr #8
 8027452:	f506 7080 	add.w	r0, r6, #256	; 0x100
 8027456:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802745a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802745e:	eb00 2616 	add.w	r6, r0, r6, lsr #8
 8027462:	44e1      	add	r9, ip
 8027464:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027468:	0a30      	lsrs	r0, r6, #8
 802746a:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 802746e:	f400 467f 	and.w	r6, r0, #65280	; 0xff00
 8027472:	ea49 0606 	orr.w	r6, r9, r6
 8027476:	f006 19ff 	and.w	r9, r6, #16711935	; 0xff00ff
 802747a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802747e:	9d04      	ldr	r5, [sp, #16]
 8027480:	2cff      	cmp	r4, #255	; 0xff
 8027482:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8027486:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802748a:	d01a      	beq.n	80274c2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1c2>
 802748c:	fb00 f004 	mul.w	r0, r0, r4
 8027490:	fb0e f404 	mul.w	r4, lr, r4
 8027494:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8027498:	f504 7e80 	add.w	lr, r4, #256	; 0x100
 802749c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80274a0:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80274a4:	eb0e 2414 	add.w	r4, lr, r4, lsr #8
 80274a8:	4460      	add	r0, ip
 80274aa:	0a00      	lsrs	r0, r0, #8
 80274ac:	0a24      	lsrs	r4, r4, #8
 80274ae:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80274b2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80274b6:	ea40 0e0e 	orr.w	lr, r0, lr
 80274ba:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80274be:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80274c2:	9c02      	ldr	r4, [sp, #8]
 80274c4:	9d07      	ldr	r5, [sp, #28]
 80274c6:	ea6f 0c04 	mvn.w	ip, r4
 80274ca:	9c01      	ldr	r4, [sp, #4]
 80274cc:	fa5f fc8c 	uxtb.w	ip, ip
 80274d0:	fb0a fb04 	mul.w	fp, sl, r4
 80274d4:	fb05 f504 	mul.w	r5, r5, r4
 80274d8:	9c05      	ldr	r4, [sp, #20]
 80274da:	fb04 bb03 	mla	fp, r4, r3, fp
 80274de:	9c06      	ldr	r4, [sp, #24]
 80274e0:	fb09 b902 	mla	r9, r9, r2, fp
 80274e4:	fb04 5303 	mla	r3, r4, r3, r5
 80274e8:	fb06 3602 	mla	r6, r6, r2, r3
 80274ec:	780c      	ldrb	r4, [r1, #0]
 80274ee:	fb00 9007 	mla	r0, r0, r7, r9
 80274f2:	784a      	ldrb	r2, [r1, #1]
 80274f4:	fb0e 6707 	mla	r7, lr, r7, r6
 80274f8:	788b      	ldrb	r3, [r1, #2]
 80274fa:	fb02 f20c 	mul.w	r2, r2, ip
 80274fe:	fb03 f30c 	mul.w	r3, r3, ip
 8027502:	fb04 fc0c 	mul.w	ip, r4, ip
 8027506:	0a00      	lsrs	r0, r0, #8
 8027508:	0a3f      	lsrs	r7, r7, #8
 802750a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802750e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027512:	4338      	orrs	r0, r7
 8027514:	1c54      	adds	r4, r2, #1
 8027516:	1c5f      	adds	r7, r3, #1
 8027518:	f10c 0601 	add.w	r6, ip, #1
 802751c:	0a05      	lsrs	r5, r0, #8
 802751e:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8027522:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8027526:	0c04      	lsrs	r4, r0, #16
 8027528:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 802752c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8027530:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8027534:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8027538:	704a      	strb	r2, [r1, #1]
 802753a:	708b      	strb	r3, [r1, #2]
 802753c:	7008      	strb	r0, [r1, #0]
 802753e:	b009      	add	sp, #36	; 0x24
 8027540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027544:	2c00      	cmp	r4, #0
 8027546:	db01      	blt.n	802754c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24c>
 8027548:	45a3      	cmp	fp, r4
 802754a:	dc41      	bgt.n	80275d0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2d0>
 802754c:	f04f 0e00 	mov.w	lr, #0
 8027550:	46f1      	mov	r9, lr
 8027552:	1c60      	adds	r0, r4, #1
 8027554:	d42b      	bmi.n	80275ae <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ae>
 8027556:	4583      	cmp	fp, r0
 8027558:	dd29      	ble.n	80275ae <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ae>
 802755a:	f1ba 0f00 	cmp.w	sl, #0
 802755e:	d005      	beq.n	802756c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x26c>
 8027560:	7850      	ldrb	r0, [r2, #1]
 8027562:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8027566:	ea4f 6c15 	mov.w	ip, r5, lsr #24
 802756a:	e6e6      	b.n	802733a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3a>
 802756c:	2e00      	cmp	r6, #0
 802756e:	db42      	blt.n	80275f6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2f6>
 8027570:	45b0      	cmp	r8, r6
 8027572:	dd40      	ble.n	80275f6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2f6>
 8027574:	46d4      	mov	ip, sl
 8027576:	4655      	mov	r5, sl
 8027578:	b1ef      	cbz	r7, 80275b6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2b6>
 802757a:	2c00      	cmp	r4, #0
 802757c:	db32      	blt.n	80275e4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2e4>
 802757e:	45a3      	cmp	fp, r4
 8027580:	dd30      	ble.n	80275e4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2e4>
 8027582:	f812 000b 	ldrb.w	r0, [r2, fp]
 8027586:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 802758a:	9003      	str	r0, [sp, #12]
 802758c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8027590:	3401      	adds	r4, #1
 8027592:	d424      	bmi.n	80275de <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2de>
 8027594:	45a3      	cmp	fp, r4
 8027596:	dd22      	ble.n	80275de <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2de>
 8027598:	f1ba 0f00 	cmp.w	sl, #0
 802759c:	d027      	beq.n	80275ee <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ee>
 802759e:	4493      	add	fp, r2
 80275a0:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80275a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80275a8:	9304      	str	r3, [sp, #16]
 80275aa:	0e1c      	lsrs	r4, r3, #24
 80275ac:	e6ce      	b.n	802734c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x4c>
 80275ae:	f04f 0c00 	mov.w	ip, #0
 80275b2:	4665      	mov	r5, ip
 80275b4:	e6c1      	b.n	802733a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3a>
 80275b6:	f1ba 0f0f 	cmp.w	sl, #15
 80275ba:	d823      	bhi.n	8027604 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 80275bc:	fa1f f38a 	uxth.w	r3, sl
 80275c0:	463a      	mov	r2, r7
 80275c2:	46bb      	mov	fp, r7
 80275c4:	46ba      	mov	sl, r7
 80275c6:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80275ca:	463c      	mov	r4, r7
 80275cc:	46b8      	mov	r8, r7
 80275ce:	e6d0      	b.n	8027372 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x72>
 80275d0:	f81c 0005 	ldrb.w	r0, [ip, r5]
 80275d4:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 80275d8:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 80275dc:	e7b9      	b.n	8027552 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 80275de:	2400      	movs	r4, #0
 80275e0:	9404      	str	r4, [sp, #16]
 80275e2:	e6b3      	b.n	802734c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x4c>
 80275e4:	f04f 0800 	mov.w	r8, #0
 80275e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80275ec:	e7d0      	b.n	8027590 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>
 80275ee:	f8cd a010 	str.w	sl, [sp, #16]
 80275f2:	4654      	mov	r4, sl
 80275f4:	e6ae      	b.n	8027354 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x54>
 80275f6:	4655      	mov	r5, sl
 80275f8:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80275fc:	4654      	mov	r4, sl
 80275fe:	46d0      	mov	r8, sl
 8027600:	46d4      	mov	ip, sl
 8027602:	e6a7      	b.n	8027354 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x54>
 8027604:	4b03      	ldr	r3, [pc, #12]	; (8027614 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x314>)
 8027606:	4a04      	ldr	r2, [pc, #16]	; (8027618 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x318>)
 8027608:	f44f 710f 	mov.w	r1, #572	; 0x23c
 802760c:	4803      	ldr	r0, [pc, #12]	; (802761c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x31c>)
 802760e:	f001 fff5 	bl	80295fc <__assert_func>
 8027612:	bf00      	nop
 8027614:	0802c8e4 	.word	0x0802c8e4
 8027618:	0802cf5c 	.word	0x0802cf5c
 802761c:	0802ca68 	.word	0x0802ca68

08027620 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027624:	ed2d 8b0a 	vpush	{d8-d12}
 8027628:	eeb0 aa40 	vmov.f32	s20, s0
 802762c:	eef0 9a60 	vmov.f32	s19, s1
 8027630:	eeb0 9a41 	vmov.f32	s18, s2
 8027634:	eef0 8a62 	vmov.f32	s17, s5
 8027638:	eeb0 8a43 	vmov.f32	s16, s6
 802763c:	eeb0 ca44 	vmov.f32	s24, s8
 8027640:	eef0 ba64 	vmov.f32	s23, s9
 8027644:	eeb0 ba45 	vmov.f32	s22, s10
 8027648:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802764c:	b0a3      	sub	sp, #140	; 0x8c
 802764e:	901e      	str	r0, [sp, #120]	; 0x78
 8027650:	9111      	str	r1, [sp, #68]	; 0x44
 8027652:	9213      	str	r2, [sp, #76]	; 0x4c
 8027654:	e9dd 413b 	ldrd	r4, r1, [sp, #236]	; 0xec
 8027658:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 802765a:	6860      	ldr	r0, [r4, #4]
 802765c:	fb00 1b02 	mla	fp, r0, r2, r1
 8027660:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8027662:	6821      	ldr	r1, [r4, #0]
 8027664:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8027666:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
 802766a:	6852      	ldr	r2, [r2, #4]
 802766c:	eb01 0800 	add.w	r8, r1, r0
 8027670:	6824      	ldr	r4, [r4, #0]
 8027672:	e9dd 7b37 	ldrd	r7, fp, [sp, #220]	; 0xdc
 8027676:	3204      	adds	r2, #4
 8027678:	46c3      	mov	fp, r8
 802767a:	46b8      	mov	r8, r7
 802767c:	9f38      	ldr	r7, [sp, #224]	; 0xe0
 802767e:	940e      	str	r4, [sp, #56]	; 0x38
 8027680:	920a      	str	r2, [sp, #40]	; 0x28
 8027682:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027684:	2a00      	cmp	r2, #0
 8027686:	dc02      	bgt.n	802768e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027688:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802768a:	2a00      	cmp	r2, #0
 802768c:	dd63      	ble.n	8027756 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 802768e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8027690:	2b00      	cmp	r3, #0
 8027692:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8027696:	b234      	sxth	r4, r6
 8027698:	fa0f f98c 	sxth.w	r9, ip
 802769c:	f340 835f 	ble.w	8027d5e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73e>
 80276a0:	1e65      	subs	r5, r4, #1
 80276a2:	f109 3eff 	add.w	lr, r9, #4294967295
 80276a6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80276aa:	e9dd ca39 	ldrd	ip, sl, [sp, #228]	; 0xe4
 80276ae:	ea5f 4228 	movs.w	r2, r8, asr #16
 80276b2:	ea4f 4127 	mov.w	r1, r7, asr #16
 80276b6:	d405      	bmi.n	80276c4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80276b8:	42aa      	cmp	r2, r5
 80276ba:	da03      	bge.n	80276c4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80276bc:	2900      	cmp	r1, #0
 80276be:	db01      	blt.n	80276c4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80276c0:	4571      	cmp	r1, lr
 80276c2:	db4d      	blt.n	8027760 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80276c4:	1c50      	adds	r0, r2, #1
 80276c6:	d406      	bmi.n	80276d6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80276c8:	42a0      	cmp	r0, r4
 80276ca:	dc04      	bgt.n	80276d6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80276cc:	1c48      	adds	r0, r1, #1
 80276ce:	d402      	bmi.n	80276d6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80276d0:	4548      	cmp	r0, r9
 80276d2:	f340 831e 	ble.w	8027d12 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80276d6:	3b01      	subs	r3, #1
 80276d8:	44e0      	add	r8, ip
 80276da:	4457      	add	r7, sl
 80276dc:	f10b 0b03 	add.w	fp, fp, #3
 80276e0:	d1e5      	bne.n	80276ae <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80276e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80276e4:	2b00      	cmp	r3, #0
 80276e6:	dd36      	ble.n	8027756 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80276e8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80276ec:	ee79 9aab 	vadd.f32	s19, s19, s23
 80276f0:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80276f4:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80276f8:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80276fc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027700:	ee76 6a68 	vsub.f32	s13, s12, s17
 8027704:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8027708:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802770c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027710:	ee16 2a90 	vmov	r2, s13
 8027714:	3b01      	subs	r3, #1
 8027716:	9311      	str	r3, [sp, #68]	; 0x44
 8027718:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802771a:	fb92 f3f3 	sdiv	r3, r2, r3
 802771e:	ee17 2a10 	vmov	r2, s14
 8027722:	eeb0 7a48 	vmov.f32	s14, s16
 8027726:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802772a:	ee17 7a10 	vmov	r7, s14
 802772e:	eeb0 7a68 	vmov.f32	s14, s17
 8027732:	9339      	str	r3, [sp, #228]	; 0xe4
 8027734:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027736:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802773a:	fb92 f3f3 	sdiv	r3, r2, r3
 802773e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027740:	933a      	str	r3, [sp, #232]	; 0xe8
 8027742:	ee17 8a10 	vmov	r8, s14
 8027746:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027748:	eeb0 8a67 	vmov.f32	s16, s15
 802774c:	eef0 8a46 	vmov.f32	s17, s12
 8027750:	bf08      	it	eq
 8027752:	4613      	moveq	r3, r2
 8027754:	e795      	b.n	8027682 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8027756:	b023      	add	sp, #140	; 0x8c
 8027758:	ecbd 8b0a 	vpop	{d8-d12}
 802775c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027760:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8027764:	9839      	ldr	r0, [sp, #228]	; 0xe4
 8027766:	1e59      	subs	r1, r3, #1
 8027768:	fb00 8201 	mla	r2, r0, r1, r8
 802776c:	1412      	asrs	r2, r2, #16
 802776e:	9109      	str	r1, [sp, #36]	; 0x24
 8027770:	f100 8151 	bmi.w	8027a16 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8027774:	42aa      	cmp	r2, r5
 8027776:	f280 814e 	bge.w	8027a16 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 802777a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 802777c:	fb02 7201 	mla	r2, r2, r1, r7
 8027780:	1412      	asrs	r2, r2, #16
 8027782:	f100 8148 	bmi.w	8027a16 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8027786:	f109 31ff 	add.w	r1, r9, #4294967295
 802778a:	428a      	cmp	r2, r1
 802778c:	f280 8143 	bge.w	8027a16 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8027790:	2b00      	cmp	r3, #0
 8027792:	dda6      	ble.n	80276e2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8027794:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027798:	445b      	add	r3, fp
 802779a:	930d      	str	r3, [sp, #52]	; 0x34
 802779c:	f10b 0c03 	add.w	ip, fp, #3
 80277a0:	46c1      	mov	r9, r8
 80277a2:	9738      	str	r7, [sp, #224]	; 0xe0
 80277a4:	4621      	mov	r1, r4
 80277a6:	463b      	mov	r3, r7
 80277a8:	e114      	b.n	80279d4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80277aa:	f893 e001 	ldrb.w	lr, [r3, #1]
 80277ae:	f856 502e 	ldr.w	r5, [r6, lr, lsl #2]
 80277b2:	950f      	str	r5, [sp, #60]	; 0x3c
 80277b4:	0e2d      	lsrs	r5, r5, #24
 80277b6:	9506      	str	r5, [sp, #24]
 80277b8:	b162      	cbz	r2, 80277d4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80277ba:	185d      	adds	r5, r3, r1
 80277bc:	786d      	ldrb	r5, [r5, #1]
 80277be:	5c5b      	ldrb	r3, [r3, r1]
 80277c0:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 80277c4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80277c8:	9112      	str	r1, [sp, #72]	; 0x48
 80277ca:	9310      	str	r3, [sp, #64]	; 0x40
 80277cc:	0e09      	lsrs	r1, r1, #24
 80277ce:	0e1b      	lsrs	r3, r3, #24
 80277d0:	9108      	str	r1, [sp, #32]
 80277d2:	9307      	str	r3, [sp, #28]
 80277d4:	b2a4      	uxth	r4, r4
 80277d6:	b292      	uxth	r2, r2
 80277d8:	fb04 f502 	mul.w	r5, r4, r2
 80277dc:	0124      	lsls	r4, r4, #4
 80277de:	1b66      	subs	r6, r4, r5
 80277e0:	9b06      	ldr	r3, [sp, #24]
 80277e2:	b2b6      	uxth	r6, r6
 80277e4:	fb06 f103 	mul.w	r1, r6, r3
 80277e8:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80277ec:	b292      	uxth	r2, r2
 80277ee:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 80277f2:	1a9b      	subs	r3, r3, r2
 80277f4:	b29b      	uxth	r3, r3
 80277f6:	fb03 1100 	mla	r1, r3, r0, r1
 80277fa:	9c07      	ldr	r4, [sp, #28]
 80277fc:	fb02 1104 	mla	r1, r2, r4, r1
 8027800:	9c08      	ldr	r4, [sp, #32]
 8027802:	fb05 1104 	mla	r1, r5, r4, r1
 8027806:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802780a:	9109      	str	r1, [sp, #36]	; 0x24
 802780c:	2900      	cmp	r1, #0
 802780e:	f000 80d2 	beq.w	80279b6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8027812:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 8027816:	f407 417f 	and.w	r1, r7, #65280	; 0xff00
 802781a:	28ff      	cmp	r0, #255	; 0xff
 802781c:	940b      	str	r4, [sp, #44]	; 0x2c
 802781e:	910c      	str	r1, [sp, #48]	; 0x30
 8027820:	d01b      	beq.n	802785a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8027822:	fb04 f400 	mul.w	r4, r4, r0
 8027826:	4627      	mov	r7, r4
 8027828:	fb01 fe00 	mul.w	lr, r1, r0
 802782c:	0a24      	lsrs	r4, r4, #8
 802782e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027832:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027836:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 802783a:	4427      	add	r7, r4
 802783c:	eb00 201e 	add.w	r0, r0, lr, lsr #8
 8027840:	0a3f      	lsrs	r7, r7, #8
 8027842:	0a00      	lsrs	r0, r0, #8
 8027844:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027848:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802784c:	4307      	orrs	r7, r0
 802784e:	f007 11ff 	and.w	r1, r7, #16711935	; 0xff00ff
 8027852:	910b      	str	r1, [sp, #44]	; 0x2c
 8027854:	f407 417f 	and.w	r1, r7, #65280	; 0xff00
 8027858:	910c      	str	r1, [sp, #48]	; 0x30
 802785a:	9806      	ldr	r0, [sp, #24]
 802785c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802785e:	28ff      	cmp	r0, #255	; 0xff
 8027860:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8027864:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8027868:	d01a      	beq.n	80278a0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 802786a:	fb07 f700 	mul.w	r7, r7, r0
 802786e:	fb0e fe00 	mul.w	lr, lr, r0
 8027872:	0a3c      	lsrs	r4, r7, #8
 8027874:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027878:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802787c:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 8027880:	4427      	add	r7, r4
 8027882:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8027886:	0a3f      	lsrs	r7, r7, #8
 8027888:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802788c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027890:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027894:	ea47 0e0e 	orr.w	lr, r7, lr
 8027898:	f00e 17ff 	and.w	r7, lr, #16711935	; 0xff00ff
 802789c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80278a0:	9c07      	ldr	r4, [sp, #28]
 80278a2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80278a4:	2cff      	cmp	r4, #255	; 0xff
 80278a6:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 80278aa:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80278ae:	d01b      	beq.n	80278e8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80278b0:	fb00 f004 	mul.w	r0, r0, r4
 80278b4:	fb0a fa04 	mul.w	sl, sl, r4
 80278b8:	ea4f 2810 	mov.w	r8, r0, lsr #8
 80278bc:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80278c0:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80278c4:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 80278c8:	4440      	add	r0, r8
 80278ca:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 80278ce:	0a00      	lsrs	r0, r0, #8
 80278d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80278d4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80278d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80278dc:	ea40 0a0a 	orr.w	sl, r0, sl
 80278e0:	f00a 10ff 	and.w	r0, sl, #16711935	; 0xff00ff
 80278e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80278e8:	9c08      	ldr	r4, [sp, #32]
 80278ea:	9912      	ldr	r1, [sp, #72]	; 0x48
 80278ec:	2cff      	cmp	r4, #255	; 0xff
 80278ee:	f001 18ff 	and.w	r8, r1, #16711935	; 0xff00ff
 80278f2:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 80278f6:	d01b      	beq.n	8027930 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80278f8:	fb08 f804 	mul.w	r8, r8, r4
 80278fc:	fb0b fb04 	mul.w	fp, fp, r4
 8027900:	ea4f 2418 	mov.w	r4, r8, lsr #8
 8027904:	f004 11ff 	and.w	r1, r4, #16711935	; 0xff00ff
 8027908:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802790c:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 8027910:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 8027914:	4488      	add	r8, r1
 8027916:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802791a:	0a24      	lsrs	r4, r4, #8
 802791c:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8027920:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8027924:	ea48 0b0b 	orr.w	fp, r8, fp
 8027928:	f00b 18ff 	and.w	r8, fp, #16711935	; 0xff00ff
 802792c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027930:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027932:	fb07 f706 	mul.w	r7, r7, r6
 8027936:	43c9      	mvns	r1, r1
 8027938:	fb0e f606 	mul.w	r6, lr, r6
 802793c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802793e:	f81c ec02 	ldrb.w	lr, [ip, #-2]
 8027942:	fb04 7703 	mla	r7, r4, r3, r7
 8027946:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027948:	fb00 7702 	mla	r7, r0, r2, r7
 802794c:	fb04 6603 	mla	r6, r4, r3, r6
 8027950:	fb0a 6602 	mla	r6, sl, r2, r6
 8027954:	f81c 3c03 	ldrb.w	r3, [ip, #-3]
 8027958:	fb0b 6b05 	mla	fp, fp, r5, r6
 802795c:	fb08 7805 	mla	r8, r8, r5, r7
 8027960:	f81c 4c01 	ldrb.w	r4, [ip, #-1]
 8027964:	b2c9      	uxtb	r1, r1
 8027966:	fb0e fe01 	mul.w	lr, lr, r1
 802796a:	fb04 f401 	mul.w	r4, r4, r1
 802796e:	fb03 f101 	mul.w	r1, r3, r1
 8027972:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027976:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802797a:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802797e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027982:	ea48 030b 	orr.w	r3, r8, fp
 8027986:	f10e 0201 	add.w	r2, lr, #1
 802798a:	1c66      	adds	r6, r4, #1
 802798c:	1c4d      	adds	r5, r1, #1
 802798e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8027992:	0a18      	lsrs	r0, r3, #8
 8027994:	0c1a      	lsrs	r2, r3, #16
 8027996:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 802799a:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 802799e:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 80279a2:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80279a6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80279aa:	f80c ec02 	strb.w	lr, [ip, #-2]
 80279ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80279b2:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80279b6:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80279b8:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 80279ba:	4499      	add	r9, r3
 80279bc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80279be:	4413      	add	r3, r2
 80279c0:	9338      	str	r3, [sp, #224]	; 0xe0
 80279c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80279c4:	4563      	cmp	r3, ip
 80279c6:	d024      	beq.n	8027a12 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80279c8:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80279ca:	f10c 0c03 	add.w	ip, ip, #3
 80279ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80279d2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80279d4:	ea4f 4229 	mov.w	r2, r9, asr #16
 80279d8:	141b      	asrs	r3, r3, #16
 80279da:	fb01 2303 	mla	r3, r1, r3, r2
 80279de:	980e      	ldr	r0, [sp, #56]	; 0x38
 80279e0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80279e2:	5cc2      	ldrb	r2, [r0, r3]
 80279e4:	f3c9 3403 	ubfx	r4, r9, #12, #4
 80279e8:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80279ec:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 80279ee:	4403      	add	r3, r0
 80279f0:	f3c2 3203 	ubfx	r2, r2, #12, #4
 80279f4:	0e38      	lsrs	r0, r7, #24
 80279f6:	2c00      	cmp	r4, #0
 80279f8:	f47f aed7 	bne.w	80277aa <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80279fc:	2a00      	cmp	r2, #0
 80279fe:	f43f aee9 	beq.w	80277d4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8027a02:	5c5b      	ldrb	r3, [r3, r1]
 8027a04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027a06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8027a0a:	9310      	str	r3, [sp, #64]	; 0x40
 8027a0c:	0e1b      	lsrs	r3, r3, #24
 8027a0e:	9307      	str	r3, [sp, #28]
 8027a10:	e6e0      	b.n	80277d4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8027a12:	469b      	mov	fp, r3
 8027a14:	e665      	b.n	80276e2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8027a16:	2b00      	cmp	r3, #0
 8027a18:	f77f ae63 	ble.w	80276e2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8027a1c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8027a20:	ea4f 4228 	mov.w	r2, r8, asr #16
 8027a24:	1439      	asrs	r1, r7, #16
 8027a26:	2a00      	cmp	r2, #0
 8027a28:	46d9      	mov	r9, fp
 8027a2a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8027a2e:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8027a30:	e9dd b539 	ldrd	fp, r5, [sp, #228]	; 0xe4
 8027a34:	f3c8 3003 	ubfx	r0, r8, #12, #4
 8027a38:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8027a3c:	f2c0 8141 	blt.w	8027cc2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 8027a40:	1e73      	subs	r3, r6, #1
 8027a42:	429a      	cmp	r2, r3
 8027a44:	f280 813d 	bge.w	8027cc2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 8027a48:	2900      	cmp	r1, #0
 8027a4a:	f2c0 813a 	blt.w	8027cc2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 8027a4e:	f10c 33ff 	add.w	r3, ip, #4294967295
 8027a52:	4299      	cmp	r1, r3
 8027a54:	f280 8135 	bge.w	8027cc2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 8027a58:	b233      	sxth	r3, r6
 8027a5a:	fb01 2203 	mla	r2, r1, r3, r2
 8027a5e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027a60:	930c      	str	r3, [sp, #48]	; 0x30
 8027a62:	5c8b      	ldrb	r3, [r1, r2]
 8027a64:	440a      	add	r2, r1
 8027a66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027a68:	4616      	mov	r6, r2
 8027a6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8027a6e:	930d      	str	r3, [sp, #52]	; 0x34
 8027a70:	0e1b      	lsrs	r3, r3, #24
 8027a72:	2800      	cmp	r0, #0
 8027a74:	f000 8153 	beq.w	8027d1e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8027a78:	f896 c001 	ldrb.w	ip, [r6, #1]
 8027a7c:	f851 202c 	ldr.w	r2, [r1, ip, lsl #2]
 8027a80:	921f      	str	r2, [sp, #124]	; 0x7c
 8027a82:	0e12      	lsrs	r2, r2, #24
 8027a84:	9214      	str	r2, [sp, #80]	; 0x50
 8027a86:	f1be 0f00 	cmp.w	lr, #0
 8027a8a:	f040 8155 	bne.w	8027d38 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8027a8e:	b280      	uxth	r0, r0
 8027a90:	fa1f fc8e 	uxth.w	ip, lr
 8027a94:	fb00 f20c 	mul.w	r2, r0, ip
 8027a98:	0106      	lsls	r6, r0, #4
 8027a9a:	1ab0      	subs	r0, r6, r2
 8027a9c:	b281      	uxth	r1, r0
 8027a9e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8027aa0:	ebc2 1c0c 	rsb	ip, r2, ip, lsl #4
 8027aa4:	fb01 f000 	mul.w	r0, r1, r0
 8027aa8:	9117      	str	r1, [sp, #92]	; 0x5c
 8027aaa:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 8027aae:	fa1f f18c 	uxth.w	r1, ip
 8027ab2:	1a76      	subs	r6, r6, r1
 8027ab4:	b2b6      	uxth	r6, r6
 8027ab6:	9619      	str	r6, [sp, #100]	; 0x64
 8027ab8:	fb06 0603 	mla	r6, r6, r3, r0
 8027abc:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027abe:	9118      	str	r1, [sp, #96]	; 0x60
 8027ac0:	fb01 6600 	mla	r6, r1, r0, r6
 8027ac4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8027ac6:	fb02 6601 	mla	r6, r2, r1, r6
 8027aca:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8027ace:	911a      	str	r1, [sp, #104]	; 0x68
 8027ad0:	2900      	cmp	r1, #0
 8027ad2:	f000 80e0 	beq.w	8027c96 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8027ad6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027ad8:	2bff      	cmp	r3, #255	; 0xff
 8027ada:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
 8027ade:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027ae2:	910d      	str	r1, [sp, #52]	; 0x34
 8027ae4:	901b      	str	r0, [sp, #108]	; 0x6c
 8027ae6:	d01c      	beq.n	8027b22 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 8027ae8:	fb01 f103 	mul.w	r1, r1, r3
 8027aec:	fb00 f003 	mul.w	r0, r0, r3
 8027af0:	460e      	mov	r6, r1
 8027af2:	4603      	mov	r3, r0
 8027af4:	0a09      	lsrs	r1, r1, #8
 8027af6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027afa:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8027afe:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8027b02:	4431      	add	r1, r6
 8027b04:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027b08:	0a09      	lsrs	r1, r1, #8
 8027b0a:	0a1b      	lsrs	r3, r3, #8
 8027b0c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027b10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027b14:	430b      	orrs	r3, r1
 8027b16:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8027b1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027b1e:	910d      	str	r1, [sp, #52]	; 0x34
 8027b20:	931b      	str	r3, [sp, #108]	; 0x6c
 8027b22:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8027b24:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8027b28:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 8027b2c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8027b2e:	931c      	str	r3, [sp, #112]	; 0x70
 8027b30:	29ff      	cmp	r1, #255	; 0xff
 8027b32:	d019      	beq.n	8027b68 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8027b34:	fb03 f301 	mul.w	r3, r3, r1
 8027b38:	fb06 f601 	mul.w	r6, r6, r1
 8027b3c:	0a19      	lsrs	r1, r3, #8
 8027b3e:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8027b42:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027b46:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8027b4a:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8027b4e:	4401      	add	r1, r0
 8027b50:	0a09      	lsrs	r1, r1, #8
 8027b52:	0a1b      	lsrs	r3, r3, #8
 8027b54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027b58:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027b5c:	4319      	orrs	r1, r3
 8027b5e:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8027b62:	931c      	str	r3, [sp, #112]	; 0x70
 8027b64:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 8027b68:	9920      	ldr	r1, [sp, #128]	; 0x80
 8027b6a:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8027b6e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8027b72:	9915      	ldr	r1, [sp, #84]	; 0x54
 8027b74:	930c      	str	r3, [sp, #48]	; 0x30
 8027b76:	29ff      	cmp	r1, #255	; 0xff
 8027b78:	901d      	str	r0, [sp, #116]	; 0x74
 8027b7a:	d01a      	beq.n	8027bb2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x592>
 8027b7c:	fb03 f301 	mul.w	r3, r3, r1
 8027b80:	fb00 fc01 	mul.w	ip, r0, r1
 8027b84:	0a19      	lsrs	r1, r3, #8
 8027b86:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8027b8a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027b8e:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 8027b92:	4401      	add	r1, r0
 8027b94:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8027b98:	0a09      	lsrs	r1, r1, #8
 8027b9a:	0a1b      	lsrs	r3, r3, #8
 8027b9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027ba0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027ba4:	4319      	orrs	r1, r3
 8027ba6:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8027baa:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027bae:	930c      	str	r3, [sp, #48]	; 0x30
 8027bb0:	911d      	str	r1, [sp, #116]	; 0x74
 8027bb2:	9921      	ldr	r1, [sp, #132]	; 0x84
 8027bb4:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8027bb8:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8027bbc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8027bbe:	29ff      	cmp	r1, #255	; 0xff
 8027bc0:	d01c      	beq.n	8027bfc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8027bc2:	fb0c fc01 	mul.w	ip, ip, r1
 8027bc6:	fb0e fe01 	mul.w	lr, lr, r1
 8027bca:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8027bce:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027bd2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027bd6:	f50e 7180 	add.w	r1, lr, #256	; 0x100
 8027bda:	4484      	add	ip, r0
 8027bdc:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8027be0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027be4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027be8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027bec:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027bf0:	ea4c 0e0e 	orr.w	lr, ip, lr
 8027bf4:	f00e 1cff 	and.w	ip, lr, #16711935	; 0xff00ff
 8027bf8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027bfc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8027bfe:	981c      	ldr	r0, [sp, #112]	; 0x70
 8027c00:	43c9      	mvns	r1, r1
 8027c02:	911a      	str	r1, [sp, #104]	; 0x68
 8027c04:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8027c06:	fb00 f001 	mul.w	r0, r0, r1
 8027c0a:	fb06 f301 	mul.w	r3, r6, r1
 8027c0e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8027c10:	990d      	ldr	r1, [sp, #52]	; 0x34
 8027c12:	fb01 0006 	mla	r0, r1, r6, r0
 8027c16:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8027c18:	fb01 3106 	mla	r1, r1, r6, r3
 8027c1c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8027c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027c20:	910d      	str	r1, [sp, #52]	; 0x34
 8027c22:	fb03 0306 	mla	r3, r3, r6, r0
 8027c26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8027c28:	981d      	ldr	r0, [sp, #116]	; 0x74
 8027c2a:	fb0c 3302 	mla	r3, ip, r2, r3
 8027c2e:	fb00 1106 	mla	r1, r0, r6, r1
 8027c32:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 8027c36:	f899 0002 	ldrb.w	r0, [r9, #2]
 8027c3a:	fb0e 1e02 	mla	lr, lr, r2, r1
 8027c3e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8027c42:	f899 1000 	ldrb.w	r1, [r9]
 8027c46:	fb00 f006 	mul.w	r0, r0, r6
 8027c4a:	fb02 fc06 	mul.w	ip, r2, r6
 8027c4e:	fb01 f106 	mul.w	r1, r1, r6
 8027c52:	0a1b      	lsrs	r3, r3, #8
 8027c54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027c58:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8027c5c:	1c46      	adds	r6, r0, #1
 8027c5e:	f40e 437f 	and.w	r3, lr, #65280	; 0xff00
 8027c62:	4313      	orrs	r3, r2
 8027c64:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8027c68:	f10c 0201 	add.w	r2, ip, #1
 8027c6c:	1c4e      	adds	r6, r1, #1
 8027c6e:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 8027c72:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 8027c76:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8027c7a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8027c7e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8027c82:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8027c86:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8027c8a:	f889 2001 	strb.w	r2, [r9, #1]
 8027c8e:	f889 0002 	strb.w	r0, [r9, #2]
 8027c92:	f889 3000 	strb.w	r3, [r9]
 8027c96:	f1ba 0f00 	cmp.w	sl, #0
 8027c9a:	f109 0903 	add.w	r9, r9, #3
 8027c9e:	44d8      	add	r8, fp
 8027ca0:	442f      	add	r7, r5
 8027ca2:	dd2c      	ble.n	8027cfe <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6de>
 8027ca4:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8027ca8:	ea4f 4228 	mov.w	r2, r8, asr #16
 8027cac:	2a00      	cmp	r2, #0
 8027cae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027cb2:	ea4f 4127 	mov.w	r1, r7, asr #16
 8027cb6:	f3c8 3003 	ubfx	r0, r8, #12, #4
 8027cba:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8027cbe:	f6bf aebf 	bge.w	8027a40 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8027cc2:	1c53      	adds	r3, r2, #1
 8027cc4:	d4e7      	bmi.n	8027c96 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8027cc6:	42b3      	cmp	r3, r6
 8027cc8:	dce5      	bgt.n	8027c96 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8027cca:	1c4b      	adds	r3, r1, #1
 8027ccc:	d4e3      	bmi.n	8027c96 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8027cce:	4563      	cmp	r3, ip
 8027cd0:	dce1      	bgt.n	8027c96 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8027cd2:	fa0f f38c 	sxth.w	r3, ip
 8027cd6:	b236      	sxth	r6, r6
 8027cd8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8027cdc:	e9cd 6300 	strd	r6, r3, [sp]
 8027ce0:	e9cd 0e04 	strd	r0, lr, [sp, #16]
 8027ce4:	4649      	mov	r1, r9
 8027ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027ce8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027cea:	981e      	ldr	r0, [sp, #120]	; 0x78
 8027cec:	f7ff fb08 	bl	8027300 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8027cf0:	f1ba 0f00 	cmp.w	sl, #0
 8027cf4:	f109 0903 	add.w	r9, r9, #3
 8027cf8:	44d8      	add	r8, fp
 8027cfa:	442f      	add	r7, r5
 8027cfc:	dcd2      	bgt.n	8027ca4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x684>
 8027cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027d00:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8027d04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027d08:	3301      	adds	r3, #1
 8027d0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027d0e:	449b      	add	fp, r3
 8027d10:	e4e7      	b.n	80276e2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8027d12:	3b01      	subs	r3, #1
 8027d14:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8027d18:	469a      	mov	sl, r3
 8027d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8027d1c:	e683      	b.n	8027a26 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 8027d1e:	f1be 0f00 	cmp.w	lr, #0
 8027d22:	f43f aeb4 	beq.w	8027a8e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 8027d26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027d28:	5c72      	ldrb	r2, [r6, r1]
 8027d2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027d2c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8027d30:	9220      	str	r2, [sp, #128]	; 0x80
 8027d32:	0e12      	lsrs	r2, r2, #24
 8027d34:	9215      	str	r2, [sp, #84]	; 0x54
 8027d36:	e6aa      	b.n	8027a8e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 8027d38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027d3a:	eb06 0c02 	add.w	ip, r6, r2
 8027d3e:	4632      	mov	r2, r6
 8027d40:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8027d42:	f89c c001 	ldrb.w	ip, [ip, #1]
 8027d46:	5d92      	ldrb	r2, [r2, r6]
 8027d48:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8027d4c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8027d50:	0e31      	lsrs	r1, r6, #24
 8027d52:	9220      	str	r2, [sp, #128]	; 0x80
 8027d54:	0e12      	lsrs	r2, r2, #24
 8027d56:	9621      	str	r6, [sp, #132]	; 0x84
 8027d58:	9116      	str	r1, [sp, #88]	; 0x58
 8027d5a:	9215      	str	r2, [sp, #84]	; 0x54
 8027d5c:	e697      	b.n	8027a8e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 8027d5e:	f43f acc0 	beq.w	80276e2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8027d62:	1e65      	subs	r5, r4, #1
 8027d64:	e4fe      	b.n	8027764 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8027d66:	bf00      	nop

08027d68 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>:
 8027d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d6c:	b087      	sub	sp, #28
 8027d6e:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 8027d72:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	; 0x40
 8027d76:	ea6f 000b 	mvn.w	r0, fp
 8027d7a:	e9dd 4712 	ldrd	r4, r7, [sp, #72]	; 0x48
 8027d7e:	fb07 4c06 	mla	ip, r7, r6, r4
 8027d82:	b2c0      	uxtb	r0, r0
 8027d84:	2f00      	cmp	r7, #0
 8027d86:	9002      	str	r0, [sp, #8]
 8027d88:	eb02 0e0c 	add.w	lr, r2, ip
 8027d8c:	f107 0801 	add.w	r8, r7, #1
 8027d90:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8027d94:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8027d98:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 8027d9c:	db02      	blt.n	8027da4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x3c>
 8027d9e:	45b9      	cmp	r9, r7
 8027da0:	f300 80a0 	bgt.w	8027ee4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x17c>
 8027da4:	468c      	mov	ip, r1
 8027da6:	460f      	mov	r7, r1
 8027da8:	780a      	ldrb	r2, [r1, #0]
 8027daa:	9203      	str	r2, [sp, #12]
 8027dac:	9201      	str	r2, [sp, #4]
 8027dae:	f1b8 0f00 	cmp.w	r8, #0
 8027db2:	db01      	blt.n	8027db8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x50>
 8027db4:	45c1      	cmp	r9, r8
 8027db6:	dc7b      	bgt.n	8027eb0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x148>
 8027db8:	460b      	mov	r3, r1
 8027dba:	4689      	mov	r9, r1
 8027dbc:	f891 a000 	ldrb.w	sl, [r1]
 8027dc0:	f8cd a014 	str.w	sl, [sp, #20]
 8027dc4:	2d0f      	cmp	r5, #15
 8027dc6:	f200 80cd 	bhi.w	8027f64 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 8027dca:	280f      	cmp	r0, #15
 8027dcc:	f200 80ca 	bhi.w	8027f64 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 8027dd0:	780a      	ldrb	r2, [r1, #0]
 8027dd2:	9204      	str	r2, [sp, #16]
 8027dd4:	b2aa      	uxth	r2, r5
 8027dd6:	b280      	uxth	r0, r0
 8027dd8:	fb02 f500 	mul.w	r5, r2, r0
 8027ddc:	0112      	lsls	r2, r2, #4
 8027dde:	f89c 8001 	ldrb.w	r8, [ip, #1]
 8027de2:	f89c e002 	ldrb.w	lr, [ip, #2]
 8027de6:	1b54      	subs	r4, r2, r5
 8027de8:	b2a4      	uxth	r4, r4
 8027dea:	fb04 f808 	mul.w	r8, r4, r8
 8027dee:	fb04 fe0e 	mul.w	lr, r4, lr
 8027df2:	ebc5 1000 	rsb	r0, r5, r0, lsl #4
 8027df6:	b280      	uxth	r0, r0
 8027df8:	9e01      	ldr	r6, [sp, #4]
 8027dfa:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8027dfe:	f897 c001 	ldrb.w	ip, [r7, #1]
 8027e02:	1a12      	subs	r2, r2, r0
 8027e04:	78bf      	ldrb	r7, [r7, #2]
 8027e06:	b292      	uxth	r2, r2
 8027e08:	fb04 f406 	mul.w	r4, r4, r6
 8027e0c:	fb02 8c0c 	mla	ip, r2, ip, r8
 8027e10:	fb02 e707 	mla	r7, r2, r7, lr
 8027e14:	9e03      	ldr	r6, [sp, #12]
 8027e16:	f899 8001 	ldrb.w	r8, [r9, #1]
 8027e1a:	f899 e002 	ldrb.w	lr, [r9, #2]
 8027e1e:	fb02 4206 	mla	r2, r2, r6, r4
 8027e22:	fb00 cc08 	mla	ip, r0, r8, ip
 8027e26:	fb00 770e 	mla	r7, r0, lr, r7
 8027e2a:	f893 8001 	ldrb.w	r8, [r3, #1]
 8027e2e:	f893 e002 	ldrb.w	lr, [r3, #2]
 8027e32:	fb00 220a 	mla	r2, r0, sl, r2
 8027e36:	fb05 c808 	mla	r8, r5, r8, ip
 8027e3a:	fb05 7e0e 	mla	lr, r5, lr, r7
 8027e3e:	9805      	ldr	r0, [sp, #20]
 8027e40:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 8027e44:	fb05 2500 	mla	r5, r5, r0, r2
 8027e48:	9a04      	ldr	r2, [sp, #16]
 8027e4a:	fa1f f38b 	uxth.w	r3, fp
 8027e4e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8027e52:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8027e56:	fb12 f609 	smulbb	r6, r2, r9
 8027e5a:	fb1e fe03 	smulbb	lr, lr, r3
 8027e5e:	fb18 f803 	smulbb	r8, r8, r3
 8027e62:	784a      	ldrb	r2, [r1, #1]
 8027e64:	7888      	ldrb	r0, [r1, #2]
 8027e66:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8027e6a:	fb05 6503 	mla	r5, r5, r3, r6
 8027e6e:	fb02 8809 	mla	r8, r2, r9, r8
 8027e72:	fb00 e909 	mla	r9, r0, r9, lr
 8027e76:	b2ad      	uxth	r5, r5
 8027e78:	fa1f f888 	uxth.w	r8, r8
 8027e7c:	fa1f f989 	uxth.w	r9, r9
 8027e80:	f108 0001 	add.w	r0, r8, #1
 8027e84:	f109 0201 	add.w	r2, r9, #1
 8027e88:	1c6b      	adds	r3, r5, #1
 8027e8a:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8027e8e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8027e92:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027e96:	ea4f 2828 	mov.w	r8, r8, asr #8
 8027e9a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8027e9e:	122d      	asrs	r5, r5, #8
 8027ea0:	f881 8001 	strb.w	r8, [r1, #1]
 8027ea4:	f881 9002 	strb.w	r9, [r1, #2]
 8027ea8:	700d      	strb	r5, [r1, #0]
 8027eaa:	b007      	add	sp, #28
 8027eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027eb0:	b388      	cbz	r0, 8027f16 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1ae>
 8027eb2:	2c00      	cmp	r4, #0
 8027eb4:	db44      	blt.n	8027f40 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d8>
 8027eb6:	42a6      	cmp	r6, r4
 8027eb8:	dd42      	ble.n	8027f40 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d8>
 8027eba:	f81e 9006 	ldrb.w	r9, [lr, r6]
 8027ebe:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8027ec2:	4499      	add	r9, r3
 8027ec4:	3401      	adds	r4, #1
 8027ec6:	f899 a000 	ldrb.w	sl, [r9]
 8027eca:	d435      	bmi.n	8027f38 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d0>
 8027ecc:	42a6      	cmp	r6, r4
 8027ece:	dd33      	ble.n	8027f38 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d0>
 8027ed0:	2d00      	cmp	r5, #0
 8027ed2:	d043      	beq.n	8027f5c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1f4>
 8027ed4:	4476      	add	r6, lr
 8027ed6:	7872      	ldrb	r2, [r6, #1]
 8027ed8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027edc:	5c9c      	ldrb	r4, [r3, r2]
 8027ede:	4413      	add	r3, r2
 8027ee0:	9405      	str	r4, [sp, #20]
 8027ee2:	e76f      	b.n	8027dc4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5c>
 8027ee4:	2c00      	cmp	r4, #0
 8027ee6:	db01      	blt.n	8027eec <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x184>
 8027ee8:	42a6      	cmp	r6, r4
 8027eea:	dc1f      	bgt.n	8027f2c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1c4>
 8027eec:	460f      	mov	r7, r1
 8027eee:	783a      	ldrb	r2, [r7, #0]
 8027ef0:	9203      	str	r2, [sp, #12]
 8027ef2:	1c62      	adds	r2, r4, #1
 8027ef4:	d40b      	bmi.n	8027f0e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a6>
 8027ef6:	4296      	cmp	r6, r2
 8027ef8:	dd09      	ble.n	8027f0e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a6>
 8027efa:	b31d      	cbz	r5, 8027f44 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1dc>
 8027efc:	f89e c001 	ldrb.w	ip, [lr, #1]
 8027f00:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8027f04:	f813 200c 	ldrb.w	r2, [r3, ip]
 8027f08:	449c      	add	ip, r3
 8027f0a:	9201      	str	r2, [sp, #4]
 8027f0c:	e74f      	b.n	8027dae <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x46>
 8027f0e:	780a      	ldrb	r2, [r1, #0]
 8027f10:	468c      	mov	ip, r1
 8027f12:	9201      	str	r2, [sp, #4]
 8027f14:	e74b      	b.n	8027dae <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x46>
 8027f16:	2d0f      	cmp	r5, #15
 8027f18:	f891 a000 	ldrb.w	sl, [r1]
 8027f1c:	d822      	bhi.n	8027f64 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 8027f1e:	f8cd a010 	str.w	sl, [sp, #16]
 8027f22:	460b      	mov	r3, r1
 8027f24:	4689      	mov	r9, r1
 8027f26:	f8cd a014 	str.w	sl, [sp, #20]
 8027f2a:	e753      	b.n	8027dd4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x6c>
 8027f2c:	f812 700c 	ldrb.w	r7, [r2, ip]
 8027f30:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8027f34:	441f      	add	r7, r3
 8027f36:	e7da      	b.n	8027eee <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x186>
 8027f38:	780b      	ldrb	r3, [r1, #0]
 8027f3a:	9305      	str	r3, [sp, #20]
 8027f3c:	460b      	mov	r3, r1
 8027f3e:	e741      	b.n	8027dc4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5c>
 8027f40:	4689      	mov	r9, r1
 8027f42:	e7bf      	b.n	8027ec4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x15c>
 8027f44:	780a      	ldrb	r2, [r1, #0]
 8027f46:	f1b8 0f00 	cmp.w	r8, #0
 8027f4a:	9201      	str	r2, [sp, #4]
 8027f4c:	468c      	mov	ip, r1
 8027f4e:	f6bf af31 	bge.w	8027db4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x4c>
 8027f52:	460b      	mov	r3, r1
 8027f54:	4689      	mov	r9, r1
 8027f56:	9205      	str	r2, [sp, #20]
 8027f58:	4692      	mov	sl, r2
 8027f5a:	e736      	b.n	8027dca <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x62>
 8027f5c:	780b      	ldrb	r3, [r1, #0]
 8027f5e:	9305      	str	r3, [sp, #20]
 8027f60:	460b      	mov	r3, r1
 8027f62:	e732      	b.n	8027dca <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x62>
 8027f64:	4b03      	ldr	r3, [pc, #12]	; (8027f74 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x20c>)
 8027f66:	4a04      	ldr	r2, [pc, #16]	; (8027f78 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x210>)
 8027f68:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8027f6c:	4803      	ldr	r0, [pc, #12]	; (8027f7c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x214>)
 8027f6e:	f001 fb45 	bl	80295fc <__assert_func>
 8027f72:	bf00      	nop
 8027f74:	0802c8e4 	.word	0x0802c8e4
 8027f78:	0802cf5c 	.word	0x0802cf5c
 8027f7c:	0802ca68 	.word	0x0802ca68

08027f80 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f84:	ed2d 8b08 	vpush	{d8-d11}
 8027f88:	b095      	sub	sp, #84	; 0x54
 8027f8a:	f89d 40bc 	ldrb.w	r4, [sp, #188]	; 0xbc
 8027f8e:	9013      	str	r0, [sp, #76]	; 0x4c
 8027f90:	43e0      	mvns	r0, r4
 8027f92:	e9dd a727 	ldrd	sl, r7, [sp, #156]	; 0x9c
 8027f96:	eeb0 aa40 	vmov.f32	s20, s0
 8027f9a:	eef0 9a60 	vmov.f32	s19, s1
 8027f9e:	eeb0 9a41 	vmov.f32	s18, s2
 8027fa2:	eef0 8a62 	vmov.f32	s17, s5
 8027fa6:	eeb0 8a43 	vmov.f32	s16, s6
 8027faa:	eef0 ba44 	vmov.f32	s23, s8
 8027fae:	eeb0 ba64 	vmov.f32	s22, s9
 8027fb2:	eef0 aa45 	vmov.f32	s21, s10
 8027fb6:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8027fba:	9411      	str	r4, [sp, #68]	; 0x44
 8027fbc:	469b      	mov	fp, r3
 8027fbe:	e9dd 422b 	ldrd	r4, r2, [sp, #172]	; 0xac
 8027fc2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8027fc4:	6861      	ldr	r1, [r4, #4]
 8027fc6:	fb01 2303 	mla	r3, r1, r3, r2
 8027fca:	6821      	ldr	r1, [r4, #0]
 8027fcc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8027fce:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8027fd0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8027fd4:	6852      	ldr	r2, [r2, #4]
 8027fd6:	6824      	ldr	r4, [r4, #0]
 8027fd8:	930d      	str	r3, [sp, #52]	; 0x34
 8027fda:	b2c3      	uxtb	r3, r0
 8027fdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8027fde:	1d13      	adds	r3, r2, #4
 8027fe0:	940a      	str	r4, [sp, #40]	; 0x28
 8027fe2:	9308      	str	r3, [sp, #32]
 8027fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027fe6:	2b00      	cmp	r3, #0
 8027fe8:	dc02      	bgt.n	8027ff0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8027fea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027fec:	2b00      	cmp	r3, #0
 8027fee:	dd6c      	ble.n	80280ca <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8027ff0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027ff2:	f1bb 0f00 	cmp.w	fp, #0
 8027ff6:	e9d3 5e02 	ldrd	r5, lr, [r3, #8]
 8027ffa:	b228      	sxth	r0, r5
 8027ffc:	fa0f f68e 	sxth.w	r6, lr
 8028000:	f340 8245 	ble.w	802848e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 8028004:	e9dd 8929 	ldrd	r8, r9, [sp, #164]	; 0xa4
 8028008:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802800a:	1e44      	subs	r4, r0, #1
 802800c:	f106 3cff 	add.w	ip, r6, #4294967295
 8028010:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8028014:	ea5f 432a 	movs.w	r3, sl, asr #16
 8028018:	ea4f 4127 	mov.w	r1, r7, asr #16
 802801c:	d405      	bmi.n	802802a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802801e:	42a3      	cmp	r3, r4
 8028020:	da03      	bge.n	802802a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8028022:	2900      	cmp	r1, #0
 8028024:	db01      	blt.n	802802a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8028026:	4561      	cmp	r1, ip
 8028028:	db54      	blt.n	80280d4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802802a:	f113 0e01 	adds.w	lr, r3, #1
 802802e:	d407      	bmi.n	8028040 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8028030:	4586      	cmp	lr, r0
 8028032:	dc05      	bgt.n	8028040 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8028034:	f111 0e01 	adds.w	lr, r1, #1
 8028038:	d402      	bmi.n	8028040 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802803a:	45b6      	cmp	lr, r6
 802803c:	f340 8189 	ble.w	8028352 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8028040:	f1bb 0b01 	subs.w	fp, fp, #1
 8028044:	44c2      	add	sl, r8
 8028046:	444f      	add	r7, r9
 8028048:	f102 0204 	add.w	r2, r2, #4
 802804c:	d1e2      	bne.n	8028014 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802804e:	920d      	str	r2, [sp, #52]	; 0x34
 8028050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028052:	2b00      	cmp	r3, #0
 8028054:	dd39      	ble.n	80280ca <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8028056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802805a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802805e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028062:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028066:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802806a:	ee29 6aa7 	vmul.f32	s12, s19, s15
 802806e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028072:	ee76 6a68 	vsub.f32	s13, s12, s17
 8028076:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802807a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802807e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028082:	ee16 2a90 	vmov	r2, s13
 8028086:	3b01      	subs	r3, #1
 8028088:	930e      	str	r3, [sp, #56]	; 0x38
 802808a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802808c:	fb92 f3f3 	sdiv	r3, r2, r3
 8028090:	ee17 2a10 	vmov	r2, s14
 8028094:	eeb0 7a48 	vmov.f32	s14, s16
 8028098:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802809c:	ee17 7a10 	vmov	r7, s14
 80280a0:	eeb0 7a68 	vmov.f32	s14, s17
 80280a4:	9329      	str	r3, [sp, #164]	; 0xa4
 80280a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80280a8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80280ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80280b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80280b2:	932a      	str	r3, [sp, #168]	; 0xa8
 80280b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80280b6:	ee17 aa10 	vmov	sl, s14
 80280ba:	eeb0 8a67 	vmov.f32	s16, s15
 80280be:	eef0 8a46 	vmov.f32	s17, s12
 80280c2:	bf14      	ite	ne
 80280c4:	469b      	movne	fp, r3
 80280c6:	4693      	moveq	fp, r2
 80280c8:	e78c      	b.n	8027fe4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80280ca:	b015      	add	sp, #84	; 0x54
 80280cc:	ecbd 8b08 	vpop	{d8-d11}
 80280d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80280d4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80280d8:	920d      	str	r2, [sp, #52]	; 0x34
 80280da:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80280dc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80280e0:	fb01 a302 	mla	r3, r1, r2, sl
 80280e4:	141b      	asrs	r3, r3, #16
 80280e6:	9209      	str	r2, [sp, #36]	; 0x24
 80280e8:	f100 80d3 	bmi.w	8028292 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 80280ec:	42a3      	cmp	r3, r4
 80280ee:	f280 80d0 	bge.w	8028292 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 80280f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80280f4:	fb03 7302 	mla	r3, r3, r2, r7
 80280f8:	141b      	asrs	r3, r3, #16
 80280fa:	f100 80ca 	bmi.w	8028292 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 80280fe:	3e01      	subs	r6, #1
 8028100:	42b3      	cmp	r3, r6
 8028102:	f280 80c6 	bge.w	8028292 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8028106:	f1bb 0f00 	cmp.w	fp, #0
 802810a:	dda1      	ble.n	8028050 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 802810c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8028110:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8028114:	930c      	str	r3, [sp, #48]	; 0x30
 8028116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028118:	f103 0804 	add.w	r8, r3, #4
 802811c:	e08f      	b.n	802823e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 802811e:	7861      	ldrb	r1, [r4, #1]
 8028120:	eb04 0c00 	add.w	ip, r4, r0
 8028124:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028128:	4431      	add	r1, r6
 802812a:	2a00      	cmp	r2, #0
 802812c:	f000 80a3 	beq.w	8028276 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f6>
 8028130:	5c20      	ldrb	r0, [r4, r0]
 8028132:	f89c c001 	ldrb.w	ip, [ip, #1]
 8028136:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802813a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802813e:	4430      	add	r0, r6
 8028140:	44b4      	add	ip, r6
 8028142:	b29b      	uxth	r3, r3
 8028144:	b292      	uxth	r2, r2
 8028146:	fb03 f402 	mul.w	r4, r3, r2
 802814a:	011b      	lsls	r3, r3, #4
 802814c:	f891 b001 	ldrb.w	fp, [r1, #1]
 8028150:	1b1e      	subs	r6, r3, r4
 8028152:	f891 9002 	ldrb.w	r9, [r1, #2]
 8028156:	b2b6      	uxth	r6, r6
 8028158:	7809      	ldrb	r1, [r1, #0]
 802815a:	fb06 fb0b 	mul.w	fp, r6, fp
 802815e:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8028162:	b292      	uxth	r2, r2
 8028164:	fb06 f909 	mul.w	r9, r6, r9
 8028168:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802816c:	fb06 f601 	mul.w	r6, r6, r1
 8028170:	1a9b      	subs	r3, r3, r2
 8028172:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8028176:	b29b      	uxth	r3, r3
 8028178:	f89e e002 	ldrb.w	lr, [lr, #2]
 802817c:	fb03 bb01 	mla	fp, r3, r1, fp
 8028180:	9908      	ldr	r1, [sp, #32]
 8028182:	fb03 990e 	mla	r9, r3, lr, r9
 8028186:	5d49      	ldrb	r1, [r1, r5]
 8028188:	7885      	ldrb	r5, [r0, #2]
 802818a:	fb03 6301 	mla	r3, r3, r1, r6
 802818e:	f890 e001 	ldrb.w	lr, [r0, #1]
 8028192:	fb02 9905 	mla	r9, r2, r5, r9
 8028196:	7801      	ldrb	r1, [r0, #0]
 8028198:	fb02 bb0e 	mla	fp, r2, lr, fp
 802819c:	f89c 0002 	ldrb.w	r0, [ip, #2]
 80281a0:	fb02 3301 	mla	r3, r2, r1, r3
 80281a4:	f89c e001 	ldrb.w	lr, [ip, #1]
 80281a8:	fb04 9900 	mla	r9, r4, r0, r9
 80281ac:	f89c 1000 	ldrb.w	r1, [ip]
 80281b0:	fb04 bb0e 	mla	fp, r4, lr, fp
 80281b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80281b6:	f818 cc04 	ldrb.w	ip, [r8, #-4]
 80281ba:	fb04 3301 	mla	r3, r4, r1, r3
 80281be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80281c0:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80281c4:	fb19 f902 	smulbb	r9, r9, r2
 80281c8:	fb1c fc01 	smulbb	ip, ip, r1
 80281cc:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80281d0:	f818 5c02 	ldrb.w	r5, [r8, #-2]
 80281d4:	fb1b fb02 	smulbb	fp, fp, r2
 80281d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80281dc:	f818 6c03 	ldrb.w	r6, [r8, #-3]
 80281e0:	fb05 9901 	mla	r9, r5, r1, r9
 80281e4:	fb03 c302 	mla	r3, r3, r2, ip
 80281e8:	fb06 bb01 	mla	fp, r6, r1, fp
 80281ec:	fa1f f989 	uxth.w	r9, r9
 80281f0:	b29b      	uxth	r3, r3
 80281f2:	f109 0101 	add.w	r1, r9, #1
 80281f6:	1c5a      	adds	r2, r3, #1
 80281f8:	fa1f fb8b 	uxth.w	fp, fp
 80281fc:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8028200:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028204:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8028206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028208:	f10b 0001 	add.w	r0, fp, #1
 802820c:	3a01      	subs	r2, #1
 802820e:	eb00 2b1b 	add.w	fp, r0, fp, lsr #8
 8028212:	448a      	add	sl, r1
 8028214:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8028216:	9209      	str	r2, [sp, #36]	; 0x24
 8028218:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 802821c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8028220:	121b      	asrs	r3, r3, #8
 8028222:	3201      	adds	r2, #1
 8028224:	f808 bc03 	strb.w	fp, [r8, #-3]
 8028228:	f808 9c02 	strb.w	r9, [r8, #-2]
 802822c:	f808 3c04 	strb.w	r3, [r8, #-4]
 8028230:	440f      	add	r7, r1
 8028232:	f108 0804 	add.w	r8, r8, #4
 8028236:	d025      	beq.n	8028284 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8028238:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802823a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802823e:	ea4f 432a 	mov.w	r3, sl, asr #16
 8028242:	143c      	asrs	r4, r7, #16
 8028244:	fb00 3404 	mla	r4, r0, r4, r3
 8028248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802824a:	9e08      	ldr	r6, [sp, #32]
 802824c:	5d15      	ldrb	r5, [r2, r4]
 802824e:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8028252:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8028256:	4414      	add	r4, r2
 8028258:	eb06 0e05 	add.w	lr, r6, r5
 802825c:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8028260:	2b00      	cmp	r3, #0
 8028262:	f47f af5c 	bne.w	802811e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8028266:	b14a      	cbz	r2, 802827c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028268:	5c20      	ldrb	r0, [r4, r0]
 802826a:	46f4      	mov	ip, lr
 802826c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028270:	4430      	add	r0, r6
 8028272:	4671      	mov	r1, lr
 8028274:	e765      	b.n	8028142 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028276:	46f4      	mov	ip, lr
 8028278:	4670      	mov	r0, lr
 802827a:	e762      	b.n	8028142 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802827c:	46f4      	mov	ip, lr
 802827e:	4670      	mov	r0, lr
 8028280:	4671      	mov	r1, lr
 8028282:	e75e      	b.n	8028142 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028286:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 802828a:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 802828e:	930d      	str	r3, [sp, #52]	; 0x34
 8028290:	e6de      	b.n	8028050 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8028292:	f1bb 0f00 	cmp.w	fp, #0
 8028296:	f77f aedb 	ble.w	8028050 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 802829a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 802829e:	ea4f 432a 	mov.w	r3, sl, asr #16
 80282a2:	1439      	asrs	r1, r7, #16
 80282a4:	4676      	mov	r6, lr
 80282a6:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80282aa:	f8dd 80b8 	ldr.w	r8, [sp, #184]	; 0xb8
 80282ae:	2b00      	cmp	r3, #0
 80282b0:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80282b4:	f3c7 3203 	ubfx	r2, r7, #12, #4
 80282b8:	db29      	blt.n	802830e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80282ba:	1e6c      	subs	r4, r5, #1
 80282bc:	42a3      	cmp	r3, r4
 80282be:	da26      	bge.n	802830e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80282c0:	2900      	cmp	r1, #0
 80282c2:	db24      	blt.n	802830e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80282c4:	1e74      	subs	r4, r6, #1
 80282c6:	42a1      	cmp	r1, r4
 80282c8:	da21      	bge.n	802830e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80282ca:	b22c      	sxth	r4, r5
 80282cc:	fb01 3304 	mla	r3, r1, r4, r3
 80282d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80282d2:	5ce9      	ldrb	r1, [r5, r3]
 80282d4:	442b      	add	r3, r5
 80282d6:	9d08      	ldr	r5, [sp, #32]
 80282d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80282dc:	9112      	str	r1, [sp, #72]	; 0x48
 80282de:	eb05 0c01 	add.w	ip, r5, r1
 80282e2:	2800      	cmp	r0, #0
 80282e4:	d04e      	beq.n	8028384 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 80282e6:	f893 e001 	ldrb.w	lr, [r3, #1]
 80282ea:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80282ee:	44ae      	add	lr, r5
 80282f0:	2a00      	cmp	r2, #0
 80282f2:	f000 80c7 	beq.w	8028484 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80282f6:	1919      	adds	r1, r3, r4
 80282f8:	7849      	ldrb	r1, [r1, #1]
 80282fa:	5d1c      	ldrb	r4, [r3, r4]
 80282fc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028300:	186b      	adds	r3, r5, r1
 8028302:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028306:	930c      	str	r3, [sp, #48]	; 0x30
 8028308:	1963      	adds	r3, r4, r5
 802830a:	9310      	str	r3, [sp, #64]	; 0x40
 802830c:	e041      	b.n	8028392 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802830e:	1c5c      	adds	r4, r3, #1
 8028310:	d405      	bmi.n	802831e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8028312:	42ac      	cmp	r4, r5
 8028314:	dc03      	bgt.n	802831e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8028316:	1c4c      	adds	r4, r1, #1
 8028318:	d401      	bmi.n	802831e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 802831a:	42b4      	cmp	r4, r6
 802831c:	dd21      	ble.n	8028362 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802831e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028320:	f1b9 0f00 	cmp.w	r9, #0
 8028324:	449a      	add	sl, r3
 8028326:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028328:	f10b 0b04 	add.w	fp, fp, #4
 802832c:	441f      	add	r7, r3
 802832e:	dd07      	ble.n	8028340 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8028330:	e9d8 5602 	ldrd	r5, r6, [r8, #8]
 8028334:	f109 39ff 	add.w	r9, r9, #4294967295
 8028338:	ea4f 432a 	mov.w	r3, sl, asr #16
 802833c:	1439      	asrs	r1, r7, #16
 802833e:	e7b6      	b.n	80282ae <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8028340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028342:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028344:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8028348:	3301      	adds	r3, #1
 802834a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802834e:	930d      	str	r3, [sp, #52]	; 0x34
 8028350:	e67e      	b.n	8028050 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8028352:	920d      	str	r2, [sp, #52]	; 0x34
 8028354:	f10b 32ff 	add.w	r2, fp, #4294967295
 8028358:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 802835c:	4691      	mov	r9, r2
 802835e:	9209      	str	r2, [sp, #36]	; 0x24
 8028360:	e7a0      	b.n	80282a4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8028362:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8028364:	b236      	sxth	r6, r6
 8028366:	b22d      	sxth	r5, r5
 8028368:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802836c:	e9cd 2405 	strd	r2, r4, [sp, #20]
 8028370:	9302      	str	r3, [sp, #8]
 8028372:	e9cd 5600 	strd	r5, r6, [sp]
 8028376:	9b08      	ldr	r3, [sp, #32]
 8028378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802837a:	4659      	mov	r1, fp
 802837c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802837e:	f7ff fcf3 	bl	8027d68 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>
 8028382:	e7cc      	b.n	802831e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8028384:	2a00      	cmp	r2, #0
 8028386:	d173      	bne.n	8028470 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8028388:	46e6      	mov	lr, ip
 802838a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 802838e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8028392:	b283      	uxth	r3, r0
 8028394:	b292      	uxth	r2, r2
 8028396:	fb03 f002 	mul.w	r0, r3, r2
 802839a:	011b      	lsls	r3, r3, #4
 802839c:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80283a0:	f89e 5002 	ldrb.w	r5, [lr, #2]
 80283a4:	1a19      	subs	r1, r3, r0
 80283a6:	b289      	uxth	r1, r1
 80283a8:	f89e e000 	ldrb.w	lr, [lr]
 80283ac:	fb01 f505 	mul.w	r5, r1, r5
 80283b0:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 80283b4:	fb01 f606 	mul.w	r6, r1, r6
 80283b8:	b292      	uxth	r2, r2
 80283ba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80283be:	fb01 f40e 	mul.w	r4, r1, lr
 80283c2:	1a9b      	subs	r3, r3, r2
 80283c4:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80283c8:	f89c e002 	ldrb.w	lr, [ip, #2]
 80283cc:	b29b      	uxth	r3, r3
 80283ce:	fb03 6601 	mla	r6, r3, r1, r6
 80283d2:	fb03 5e0e 	mla	lr, r3, lr, r5
 80283d6:	9908      	ldr	r1, [sp, #32]
 80283d8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80283da:	5d49      	ldrb	r1, [r1, r5]
 80283dc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80283de:	fb03 4301 	mla	r3, r3, r1, r4
 80283e2:	f895 c001 	ldrb.w	ip, [r5, #1]
 80283e6:	78ad      	ldrb	r5, [r5, #2]
 80283e8:	fb02 6c0c 	mla	ip, r2, ip, r6
 80283ec:	fb02 e505 	mla	r5, r2, r5, lr
 80283f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80283f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80283f4:	784e      	ldrb	r6, [r1, #1]
 80283f6:	7824      	ldrb	r4, [r4, #0]
 80283f8:	7889      	ldrb	r1, [r1, #2]
 80283fa:	fb02 3204 	mla	r2, r2, r4, r3
 80283fe:	fb00 cc06 	mla	ip, r0, r6, ip
 8028402:	fb00 5501 	mla	r5, r0, r1, r5
 8028406:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028408:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802840a:	780b      	ldrb	r3, [r1, #0]
 802840c:	f89b 4000 	ldrb.w	r4, [fp]
 8028410:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8028414:	fb00 2003 	mla	r0, r0, r3, r2
 8028418:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802841c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8028420:	fb15 f501 	smulbb	r5, r5, r1
 8028424:	fb14 f406 	smulbb	r4, r4, r6
 8028428:	fb1c fc01 	smulbb	ip, ip, r1
 802842c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8028430:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8028434:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028438:	fb00 4001 	mla	r0, r0, r1, r4
 802843c:	fb03 5306 	mla	r3, r3, r6, r5
 8028440:	fb02 c106 	mla	r1, r2, r6, ip
 8028444:	b29b      	uxth	r3, r3
 8028446:	b280      	uxth	r0, r0
 8028448:	b289      	uxth	r1, r1
 802844a:	1c5a      	adds	r2, r3, #1
 802844c:	1c4d      	adds	r5, r1, #1
 802844e:	1c44      	adds	r4, r0, #1
 8028450:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028454:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8028458:	eb04 2310 	add.w	r3, r4, r0, lsr #8
 802845c:	1209      	asrs	r1, r1, #8
 802845e:	1212      	asrs	r2, r2, #8
 8028460:	121b      	asrs	r3, r3, #8
 8028462:	f88b 1001 	strb.w	r1, [fp, #1]
 8028466:	f88b 2002 	strb.w	r2, [fp, #2]
 802846a:	f88b 3000 	strb.w	r3, [fp]
 802846e:	e756      	b.n	802831e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8028470:	5d1c      	ldrb	r4, [r3, r4]
 8028472:	9b08      	ldr	r3, [sp, #32]
 8028474:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028478:	18e3      	adds	r3, r4, r3
 802847a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 802847e:	9310      	str	r3, [sp, #64]	; 0x40
 8028480:	46e6      	mov	lr, ip
 8028482:	e786      	b.n	8028392 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8028484:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8028488:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 802848c:	e781      	b.n	8028392 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802848e:	f43f addf 	beq.w	8028050 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8028492:	1e44      	subs	r4, r0, #1
 8028494:	e621      	b.n	80280da <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8028496:	bf00      	nop

08028498 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>:
 8028498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802849c:	f9bd c028 	ldrsh.w	ip, [sp, #40]	; 0x28
 80284a0:	e9dd 640c 	ldrd	r6, r4, [sp, #48]	; 0x30
 80284a4:	fb04 6e0c 	mla	lr, r4, ip, r6
 80284a8:	2c00      	cmp	r4, #0
 80284aa:	461f      	mov	r7, r3
 80284ac:	eb02 0a0e 	add.w	sl, r2, lr
 80284b0:	f104 0801 	add.w	r8, r4, #1
 80284b4:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80284b8:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80284bc:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80284c0:	db01      	blt.n	80284c6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x2e>
 80284c2:	45a1      	cmp	r9, r4
 80284c4:	dc6f      	bgt.n	80285a6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x10e>
 80284c6:	f891 b000 	ldrb.w	fp, [r1]
 80284ca:	460b      	mov	r3, r1
 80284cc:	465c      	mov	r4, fp
 80284ce:	468e      	mov	lr, r1
 80284d0:	f1b8 0f00 	cmp.w	r8, #0
 80284d4:	db01      	blt.n	80284da <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x42>
 80284d6:	45c1      	cmp	r9, r8
 80284d8:	dc4a      	bgt.n	8028570 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xd8>
 80284da:	f891 9000 	ldrb.w	r9, [r1]
 80284de:	460f      	mov	r7, r1
 80284e0:	46ca      	mov	sl, r9
 80284e2:	4688      	mov	r8, r1
 80284e4:	2d0f      	cmp	r5, #15
 80284e6:	f200 8097 	bhi.w	8028618 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 80284ea:	280f      	cmp	r0, #15
 80284ec:	f200 8094 	bhi.w	8028618 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 80284f0:	b2aa      	uxth	r2, r5
 80284f2:	b280      	uxth	r0, r0
 80284f4:	fb02 f600 	mul.w	r6, r2, r0
 80284f8:	0112      	lsls	r2, r2, #4
 80284fa:	1b95      	subs	r5, r2, r6
 80284fc:	f893 c001 	ldrb.w	ip, [r3, #1]
 8028500:	789b      	ldrb	r3, [r3, #2]
 8028502:	b2ad      	uxth	r5, r5
 8028504:	ebc6 1000 	rsb	r0, r6, r0, lsl #4
 8028508:	fb05 f404 	mul.w	r4, r5, r4
 802850c:	fb05 fc0c 	mul.w	ip, r5, ip
 8028510:	fb05 f503 	mul.w	r5, r5, r3
 8028514:	b280      	uxth	r0, r0
 8028516:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802851a:	f89e 3001 	ldrb.w	r3, [lr, #1]
 802851e:	1a12      	subs	r2, r2, r0
 8028520:	f89e e002 	ldrb.w	lr, [lr, #2]
 8028524:	b292      	uxth	r2, r2
 8028526:	fb02 cc03 	mla	ip, r2, r3, ip
 802852a:	fb02 440b 	mla	r4, r2, fp, r4
 802852e:	fb02 520e 	mla	r2, r2, lr, r5
 8028532:	f898 3001 	ldrb.w	r3, [r8, #1]
 8028536:	f898 8002 	ldrb.w	r8, [r8, #2]
 802853a:	fb00 cc03 	mla	ip, r0, r3, ip
 802853e:	fb00 4909 	mla	r9, r0, r9, r4
 8028542:	fb00 2008 	mla	r0, r0, r8, r2
 8028546:	787b      	ldrb	r3, [r7, #1]
 8028548:	78ba      	ldrb	r2, [r7, #2]
 802854a:	fb06 9a0a 	mla	sl, r6, sl, r9
 802854e:	fb06 c303 	mla	r3, r6, r3, ip
 8028552:	fb06 0602 	mla	r6, r6, r2, r0
 8028556:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 802855a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802855e:	0236      	lsls	r6, r6, #8
 8028560:	ea43 030a 	orr.w	r3, r3, sl
 8028564:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8028568:	4333      	orrs	r3, r6
 802856a:	600b      	str	r3, [r1, #0]
 802856c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028570:	b378      	cbz	r0, 80285d2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x13a>
 8028572:	2e00      	cmp	r6, #0
 8028574:	db3f      	blt.n	80285f6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15e>
 8028576:	45b4      	cmp	ip, r6
 8028578:	dd3d      	ble.n	80285f6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15e>
 802857a:	f81a 800c 	ldrb.w	r8, [sl, ip]
 802857e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8028582:	44b8      	add	r8, r7
 8028584:	3601      	adds	r6, #1
 8028586:	f898 9000 	ldrb.w	r9, [r8]
 802858a:	d430      	bmi.n	80285ee <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x156>
 802858c:	45b4      	cmp	ip, r6
 802858e:	dd2e      	ble.n	80285ee <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x156>
 8028590:	2d00      	cmp	r5, #0
 8028592:	d03d      	beq.n	8028610 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x178>
 8028594:	44d4      	add	ip, sl
 8028596:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802859a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802859e:	f817 a002 	ldrb.w	sl, [r7, r2]
 80285a2:	4417      	add	r7, r2
 80285a4:	e79e      	b.n	80284e4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x4c>
 80285a6:	2e00      	cmp	r6, #0
 80285a8:	db01      	blt.n	80285ae <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x116>
 80285aa:	45b4      	cmp	ip, r6
 80285ac:	dc19      	bgt.n	80285e2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x14a>
 80285ae:	468e      	mov	lr, r1
 80285b0:	1c73      	adds	r3, r6, #1
 80285b2:	f89e b000 	ldrb.w	fp, [lr]
 80285b6:	d409      	bmi.n	80285cc <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x134>
 80285b8:	459c      	cmp	ip, r3
 80285ba:	dd07      	ble.n	80285cc <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x134>
 80285bc:	b1ed      	cbz	r5, 80285fa <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 80285be:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80285c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80285c6:	5cfc      	ldrb	r4, [r7, r3]
 80285c8:	443b      	add	r3, r7
 80285ca:	e781      	b.n	80284d0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x38>
 80285cc:	780c      	ldrb	r4, [r1, #0]
 80285ce:	460b      	mov	r3, r1
 80285d0:	e77e      	b.n	80284d0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x38>
 80285d2:	2d0f      	cmp	r5, #15
 80285d4:	f891 9000 	ldrb.w	r9, [r1]
 80285d8:	d81e      	bhi.n	8028618 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 80285da:	460f      	mov	r7, r1
 80285dc:	4688      	mov	r8, r1
 80285de:	46ca      	mov	sl, r9
 80285e0:	e786      	b.n	80284f0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x58>
 80285e2:	f812 e00e 	ldrb.w	lr, [r2, lr]
 80285e6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80285ea:	449e      	add	lr, r3
 80285ec:	e7e0      	b.n	80285b0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x118>
 80285ee:	f891 a000 	ldrb.w	sl, [r1]
 80285f2:	460f      	mov	r7, r1
 80285f4:	e776      	b.n	80284e4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x4c>
 80285f6:	4688      	mov	r8, r1
 80285f8:	e7c4      	b.n	8028584 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xec>
 80285fa:	f1b8 0f00 	cmp.w	r8, #0
 80285fe:	780c      	ldrb	r4, [r1, #0]
 8028600:	460b      	mov	r3, r1
 8028602:	f6bf af68 	bge.w	80284d6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x3e>
 8028606:	460f      	mov	r7, r1
 8028608:	4688      	mov	r8, r1
 802860a:	46a2      	mov	sl, r4
 802860c:	46a1      	mov	r9, r4
 802860e:	e76c      	b.n	80284ea <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 8028610:	f891 a000 	ldrb.w	sl, [r1]
 8028614:	460f      	mov	r7, r1
 8028616:	e768      	b.n	80284ea <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 8028618:	4b03      	ldr	r3, [pc, #12]	; (8028628 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x190>)
 802861a:	4a04      	ldr	r2, [pc, #16]	; (802862c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x194>)
 802861c:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8028620:	4803      	ldr	r0, [pc, #12]	; (8028630 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x198>)
 8028622:	f000 ffeb 	bl	80295fc <__assert_func>
 8028626:	bf00      	nop
 8028628:	0802c8e4 	.word	0x0802c8e4
 802862c:	0802cf5c 	.word	0x0802cf5c
 8028630:	0802ca68 	.word	0x0802ca68

08028634 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028638:	ed2d 8b0a 	vpush	{d8-d12}
 802863c:	eeb0 aa40 	vmov.f32	s20, s0
 8028640:	eef0 9a60 	vmov.f32	s19, s1
 8028644:	eeb0 9a41 	vmov.f32	s18, s2
 8028648:	eef0 8a62 	vmov.f32	s17, s5
 802864c:	eeb0 8a43 	vmov.f32	s16, s6
 8028650:	eeb0 ca44 	vmov.f32	s24, s8
 8028654:	eef0 ba64 	vmov.f32	s23, s9
 8028658:	eeb0 ba45 	vmov.f32	s22, s10
 802865c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8028660:	b091      	sub	sp, #68	; 0x44
 8028662:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8028666:	e9dd 9525 	ldrd	r9, r5, [sp, #148]	; 0x94
 802866a:	900f      	str	r0, [sp, #60]	; 0x3c
 802866c:	4698      	mov	r8, r3
 802866e:	e9dd 0229 	ldrd	r0, r2, [sp, #164]	; 0xa4
 8028672:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028674:	6841      	ldr	r1, [r0, #4]
 8028676:	fb01 2303 	mla	r3, r1, r3, r2
 802867a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802867c:	6801      	ldr	r1, [r0, #0]
 802867e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8028680:	6852      	ldr	r2, [r2, #4]
 8028682:	6800      	ldr	r0, [r0, #0]
 8028684:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
 8028688:	1d13      	adds	r3, r2, #4
 802868a:	9009      	str	r0, [sp, #36]	; 0x24
 802868c:	930c      	str	r3, [sp, #48]	; 0x30
 802868e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028690:	2b00      	cmp	r3, #0
 8028692:	dc02      	bgt.n	802869a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028696:	2b00      	cmp	r3, #0
 8028698:	dd66      	ble.n	8028768 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802869a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802869c:	f1b8 0f00 	cmp.w	r8, #0
 80286a0:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 80286a4:	b221      	sxth	r1, r4
 80286a6:	fa0f f78e 	sxth.w	r7, lr
 80286aa:	f340 81df 	ble.w	8028a6c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80286ae:	1e4e      	subs	r6, r1, #1
 80286b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80286b4:	f8cd e01c 	str.w	lr, [sp, #28]
 80286b8:	e9dd eb27 	ldrd	lr, fp, [sp, #156]	; 0x9c
 80286bc:	ea5f 4329 	movs.w	r3, r9, asr #16
 80286c0:	ea4f 4025 	mov.w	r0, r5, asr #16
 80286c4:	d405      	bmi.n	80286d2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80286c6:	42b3      	cmp	r3, r6
 80286c8:	da03      	bge.n	80286d2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80286ca:	2800      	cmp	r0, #0
 80286cc:	db01      	blt.n	80286d2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80286ce:	4560      	cmp	r0, ip
 80286d0:	db4f      	blt.n	8028772 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80286d2:	1c5a      	adds	r2, r3, #1
 80286d4:	d406      	bmi.n	80286e4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80286d6:	428a      	cmp	r2, r1
 80286d8:	dc04      	bgt.n	80286e4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80286da:	1c42      	adds	r2, r0, #1
 80286dc:	d402      	bmi.n	80286e4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80286de:	42ba      	cmp	r2, r7
 80286e0:	f340 8157 	ble.w	8028992 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80286e4:	f1b8 0801 	subs.w	r8, r8, #1
 80286e8:	44f1      	add	r9, lr
 80286ea:	445d      	add	r5, fp
 80286ec:	f10a 0a04 	add.w	sl, sl, #4
 80286f0:	d1e4      	bne.n	80286bc <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80286f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80286f4:	2b00      	cmp	r3, #0
 80286f6:	dd37      	ble.n	8028768 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80286f8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80286fc:	ee79 9aab 	vadd.f32	s19, s19, s23
 8028700:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8028704:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8028708:	ee29 6aa7 	vmul.f32	s12, s19, s15
 802870c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028710:	ee76 6a68 	vsub.f32	s13, s12, s17
 8028714:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8028718:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802871c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028720:	ee16 2a90 	vmov	r2, s13
 8028724:	3b01      	subs	r3, #1
 8028726:	930a      	str	r3, [sp, #40]	; 0x28
 8028728:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802872a:	fb92 f3f3 	sdiv	r3, r2, r3
 802872e:	ee17 2a10 	vmov	r2, s14
 8028732:	eeb0 7a48 	vmov.f32	s14, s16
 8028736:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802873a:	ee17 5a10 	vmov	r5, s14
 802873e:	eeb0 7a68 	vmov.f32	s14, s17
 8028742:	9327      	str	r3, [sp, #156]	; 0x9c
 8028744:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028746:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802874a:	fb92 f3f3 	sdiv	r3, r2, r3
 802874e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028750:	9328      	str	r3, [sp, #160]	; 0xa0
 8028752:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028754:	ee17 9a10 	vmov	r9, s14
 8028758:	eeb0 8a67 	vmov.f32	s16, s15
 802875c:	eef0 8a46 	vmov.f32	s17, s12
 8028760:	bf14      	ite	ne
 8028762:	4698      	movne	r8, r3
 8028764:	4690      	moveq	r8, r2
 8028766:	e792      	b.n	802868e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8028768:	b011      	add	sp, #68	; 0x44
 802876a:	ecbd 8b0a 	vpop	{d8-d12}
 802876e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028772:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8028776:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8028778:	f108 32ff 	add.w	r2, r8, #4294967295
 802877c:	fb00 9302 	mla	r3, r0, r2, r9
 8028780:	141b      	asrs	r3, r3, #16
 8028782:	9207      	str	r2, [sp, #28]
 8028784:	f100 80a6 	bmi.w	80288d4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8028788:	42b3      	cmp	r3, r6
 802878a:	f280 80a3 	bge.w	80288d4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802878e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028790:	fb03 5302 	mla	r3, r3, r2, r5
 8028794:	141b      	asrs	r3, r3, #16
 8028796:	f100 809d 	bmi.w	80288d4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802879a:	3f01      	subs	r7, #1
 802879c:	42bb      	cmp	r3, r7
 802879e:	f280 8099 	bge.w	80288d4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80287a2:	f1b8 0f00 	cmp.w	r8, #0
 80287a6:	dda4      	ble.n	80286f2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80287a8:	f8cd a020 	str.w	sl, [sp, #32]
 80287ac:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80287b0:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80287b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80287b8:	e065      	b.n	8028886 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80287ba:	f890 c001 	ldrb.w	ip, [r0, #1]
 80287be:	1844      	adds	r4, r0, r1
 80287c0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80287c4:	44d4      	add	ip, sl
 80287c6:	2a00      	cmp	r2, #0
 80287c8:	d078      	beq.n	80288bc <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80287ca:	5c40      	ldrb	r0, [r0, r1]
 80287cc:	7866      	ldrb	r6, [r4, #1]
 80287ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80287d2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80287d6:	4450      	add	r0, sl
 80287d8:	4456      	add	r6, sl
 80287da:	b29b      	uxth	r3, r3
 80287dc:	b292      	uxth	r2, r2
 80287de:	fb03 f402 	mul.w	r4, r3, r2
 80287e2:	011b      	lsls	r3, r3, #4
 80287e4:	f89c 8000 	ldrb.w	r8, [ip]
 80287e8:	f89c e001 	ldrb.w	lr, [ip, #1]
 80287ec:	1b19      	subs	r1, r3, r4
 80287ee:	f89c c002 	ldrb.w	ip, [ip, #2]
 80287f2:	b289      	uxth	r1, r1
 80287f4:	fb01 fe0e 	mul.w	lr, r1, lr
 80287f8:	fb01 f808 	mul.w	r8, r1, r8
 80287fc:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8028800:	fb01 f10c 	mul.w	r1, r1, ip
 8028804:	b292      	uxth	r2, r2
 8028806:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802880a:	f81a b00b 	ldrb.w	fp, [sl, fp]
 802880e:	f897 c001 	ldrb.w	ip, [r7, #1]
 8028812:	1a9b      	subs	r3, r3, r2
 8028814:	78bf      	ldrb	r7, [r7, #2]
 8028816:	b29b      	uxth	r3, r3
 8028818:	fb03 880b 	mla	r8, r3, fp, r8
 802881c:	fb03 ec0c 	mla	ip, r3, ip, lr
 8028820:	fb03 1307 	mla	r3, r3, r7, r1
 8028824:	7881      	ldrb	r1, [r0, #2]
 8028826:	f890 b000 	ldrb.w	fp, [r0]
 802882a:	fb02 3301 	mla	r3, r2, r1, r3
 802882e:	f890 e001 	ldrb.w	lr, [r0, #1]
 8028832:	78b1      	ldrb	r1, [r6, #2]
 8028834:	fb02 880b 	mla	r8, r2, fp, r8
 8028838:	fb02 cc0e 	mla	ip, r2, lr, ip
 802883c:	fb04 3301 	mla	r3, r4, r1, r3
 8028840:	f896 b000 	ldrb.w	fp, [r6]
 8028844:	f896 e001 	ldrb.w	lr, [r6, #1]
 8028848:	0219      	lsls	r1, r3, #8
 802884a:	fb04 880b 	mla	r8, r4, fp, r8
 802884e:	fb04 cc0e 	mla	ip, r4, lr, ip
 8028852:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
 8028856:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8028858:	9a07      	ldr	r2, [sp, #28]
 802885a:	4489      	add	r9, r1
 802885c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802885e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8028862:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028866:	ea48 080c 	orr.w	r8, r8, ip
 802886a:	440d      	add	r5, r1
 802886c:	9908      	ldr	r1, [sp, #32]
 802886e:	3a01      	subs	r2, #1
 8028870:	ea48 0303 	orr.w	r3, r8, r3
 8028874:	9207      	str	r2, [sp, #28]
 8028876:	f841 3b04 	str.w	r3, [r1], #4
 802887a:	3201      	adds	r2, #1
 802887c:	9108      	str	r1, [sp, #32]
 802887e:	d024      	beq.n	80288ca <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8028880:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028882:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028886:	ea4f 4329 	mov.w	r3, r9, asr #16
 802888a:	1428      	asrs	r0, r5, #16
 802888c:	fb01 3000 	mla	r0, r1, r0, r3
 8028890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028892:	f3c9 3303 	ubfx	r3, r9, #12, #4
 8028896:	f812 b000 	ldrb.w	fp, [r2, r0]
 802889a:	4410      	add	r0, r2
 802889c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80288a0:	eb0a 070b 	add.w	r7, sl, fp
 80288a4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80288a8:	2b00      	cmp	r3, #0
 80288aa:	d186      	bne.n	80287ba <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80288ac:	b14a      	cbz	r2, 80288c2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 80288ae:	5c40      	ldrb	r0, [r0, r1]
 80288b0:	463e      	mov	r6, r7
 80288b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80288b6:	4450      	add	r0, sl
 80288b8:	46bc      	mov	ip, r7
 80288ba:	e78e      	b.n	80287da <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80288bc:	463e      	mov	r6, r7
 80288be:	4638      	mov	r0, r7
 80288c0:	e78b      	b.n	80287da <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80288c2:	463e      	mov	r6, r7
 80288c4:	4638      	mov	r0, r7
 80288c6:	46bc      	mov	ip, r7
 80288c8:	e787      	b.n	80287da <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80288ca:	e9dd a80d 	ldrd	sl, r8, [sp, #52]	; 0x34
 80288ce:	eb0a 0a88 	add.w	sl, sl, r8, lsl #2
 80288d2:	e70e      	b.n	80286f2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80288d4:	f1b8 0f00 	cmp.w	r8, #0
 80288d8:	f77f af0b 	ble.w	80286f2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80288dc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80288e0:	ea4f 4329 	mov.w	r3, r9, asr #16
 80288e4:	1428      	asrs	r0, r5, #16
 80288e6:	4677      	mov	r7, lr
 80288e8:	46d0      	mov	r8, sl
 80288ea:	f8cd a020 	str.w	sl, [sp, #32]
 80288ee:	f8dd a0b0 	ldr.w	sl, [sp, #176]	; 0xb0
 80288f2:	2b00      	cmp	r3, #0
 80288f4:	f3c9 3103 	ubfx	r1, r9, #12, #4
 80288f8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80288fc:	db28      	blt.n	8028950 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80288fe:	1e66      	subs	r6, r4, #1
 8028900:	42b3      	cmp	r3, r6
 8028902:	da25      	bge.n	8028950 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8028904:	2800      	cmp	r0, #0
 8028906:	db23      	blt.n	8028950 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8028908:	1e7e      	subs	r6, r7, #1
 802890a:	42b0      	cmp	r0, r6
 802890c:	da20      	bge.n	8028950 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802890e:	b224      	sxth	r4, r4
 8028910:	fb00 3304 	mla	r3, r0, r4, r3
 8028914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028916:	5cc7      	ldrb	r7, [r0, r3]
 8028918:	4403      	add	r3, r0
 802891a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802891c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8028920:	eb00 0c07 	add.w	ip, r0, r7
 8028924:	2900      	cmp	r1, #0
 8028926:	d04a      	beq.n	80289be <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8028928:	785e      	ldrb	r6, [r3, #1]
 802892a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802892e:	4406      	add	r6, r0
 8028930:	2a00      	cmp	r2, #0
 8028932:	f000 8098 	beq.w	8028a66 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8028936:	1918      	adds	r0, r3, r4
 8028938:	7840      	ldrb	r0, [r0, #1]
 802893a:	5d1c      	ldrb	r4, [r3, r4]
 802893c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802893e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028942:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028946:	1818      	adds	r0, r3, r0
 8028948:	18e3      	adds	r3, r4, r3
 802894a:	900d      	str	r0, [sp, #52]	; 0x34
 802894c:	930e      	str	r3, [sp, #56]	; 0x38
 802894e:	e03b      	b.n	80289c8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8028950:	1c5e      	adds	r6, r3, #1
 8028952:	d405      	bmi.n	8028960 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8028954:	42a6      	cmp	r6, r4
 8028956:	dc03      	bgt.n	8028960 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8028958:	1c46      	adds	r6, r0, #1
 802895a:	d401      	bmi.n	8028960 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802895c:	42be      	cmp	r6, r7
 802895e:	dd1f      	ble.n	80289a0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8028960:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028962:	f1bb 0f00 	cmp.w	fp, #0
 8028966:	4499      	add	r9, r3
 8028968:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802896a:	f108 0804 	add.w	r8, r8, #4
 802896e:	441d      	add	r5, r3
 8028970:	dd07      	ble.n	8028982 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8028972:	e9da 4702 	ldrd	r4, r7, [sl, #8]
 8028976:	f10b 3bff 	add.w	fp, fp, #4294967295
 802897a:	ea4f 4329 	mov.w	r3, r9, asr #16
 802897e:	1428      	asrs	r0, r5, #16
 8028980:	e7b7      	b.n	80288f2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8028982:	e9dd 3a07 	ldrd	r3, sl, [sp, #28]
 8028986:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802898a:	3301      	adds	r3, #1
 802898c:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
 8028990:	e6af      	b.n	80286f2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8028992:	f108 32ff 	add.w	r2, r8, #4294967295
 8028996:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802899a:	4693      	mov	fp, r2
 802899c:	9207      	str	r2, [sp, #28]
 802899e:	e7a2      	b.n	80288e6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 80289a0:	b23f      	sxth	r7, r7
 80289a2:	b224      	sxth	r4, r4
 80289a4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80289a8:	e9cd 3002 	strd	r3, r0, [sp, #8]
 80289ac:	e9cd 4700 	strd	r4, r7, [sp]
 80289b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80289b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80289b4:	4641      	mov	r1, r8
 80289b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80289b8:	f7ff fd6e 	bl	8028498 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>
 80289bc:	e7d0      	b.n	8028960 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80289be:	2a00      	cmp	r2, #0
 80289c0:	d147      	bne.n	8028a52 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41e>
 80289c2:	4666      	mov	r6, ip
 80289c4:	e9cd cc0d 	strd	ip, ip, [sp, #52]	; 0x34
 80289c8:	b28b      	uxth	r3, r1
 80289ca:	b292      	uxth	r2, r2
 80289cc:	fb03 f002 	mul.w	r0, r3, r2
 80289d0:	011b      	lsls	r3, r3, #4
 80289d2:	f896 e000 	ldrb.w	lr, [r6]
 80289d6:	7874      	ldrb	r4, [r6, #1]
 80289d8:	1a19      	subs	r1, r3, r0
 80289da:	78b6      	ldrb	r6, [r6, #2]
 80289dc:	b289      	uxth	r1, r1
 80289de:	fb01 f404 	mul.w	r4, r1, r4
 80289e2:	fb01 fe0e 	mul.w	lr, r1, lr
 80289e6:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 80289ea:	fb01 f106 	mul.w	r1, r1, r6
 80289ee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80289f0:	b292      	uxth	r2, r2
 80289f2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80289f6:	5df7      	ldrb	r7, [r6, r7]
 80289f8:	1a9b      	subs	r3, r3, r2
 80289fa:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80289fe:	f89c c002 	ldrb.w	ip, [ip, #2]
 8028a02:	b29b      	uxth	r3, r3
 8028a04:	fb03 4606 	mla	r6, r3, r6, r4
 8028a08:	fb03 e707 	mla	r7, r3, r7, lr
 8028a0c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028a0e:	fb03 130c 	mla	r3, r3, ip, r1
 8028a12:	7861      	ldrb	r1, [r4, #1]
 8028a14:	f894 c000 	ldrb.w	ip, [r4]
 8028a18:	78a4      	ldrb	r4, [r4, #2]
 8028a1a:	fb02 6601 	mla	r6, r2, r1, r6
 8028a1e:	fb02 770c 	mla	r7, r2, ip, r7
 8028a22:	fb02 3104 	mla	r1, r2, r4, r3
 8028a26:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028a28:	7862      	ldrb	r2, [r4, #1]
 8028a2a:	7823      	ldrb	r3, [r4, #0]
 8028a2c:	78a4      	ldrb	r4, [r4, #2]
 8028a2e:	fb00 6602 	mla	r6, r0, r2, r6
 8028a32:	fb00 7303 	mla	r3, r0, r3, r7
 8028a36:	fb00 1204 	mla	r2, r0, r4, r1
 8028a3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028a3e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028a42:	0212      	lsls	r2, r2, #8
 8028a44:	4333      	orrs	r3, r6
 8028a46:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8028a4a:	4313      	orrs	r3, r2
 8028a4c:	f8c8 3000 	str.w	r3, [r8]
 8028a50:	e786      	b.n	8028960 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8028a52:	5d1c      	ldrb	r4, [r3, r4]
 8028a54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028a56:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028a5a:	18e3      	adds	r3, r4, r3
 8028a5c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8028a60:	930e      	str	r3, [sp, #56]	; 0x38
 8028a62:	4666      	mov	r6, ip
 8028a64:	e7b0      	b.n	80289c8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8028a66:	e9cd cc0d 	strd	ip, ip, [sp, #52]	; 0x34
 8028a6a:	e7ad      	b.n	80289c8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8028a6c:	f43f ae41 	beq.w	80286f2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8028a70:	1e4e      	subs	r6, r1, #1
 8028a72:	e680      	b.n	8028776 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>

08028a74 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>:
 8028a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a78:	b087      	sub	sp, #28
 8028a7a:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 8028a7e:	e9dd 0412 	ldrd	r0, r4, [sp, #72]	; 0x48
 8028a82:	fb04 070c 	mla	r7, r4, ip, r0
 8028a86:	9100      	str	r1, [sp, #0]
 8028a88:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
 8028a8c:	2c00      	cmp	r4, #0
 8028a8e:	eb02 0b07 	add.w	fp, r2, r7
 8028a92:	f104 0501 	add.w	r5, r4, #1
 8028a96:	f9bd 8044 	ldrsh.w	r8, [sp, #68]	; 0x44
 8028a9a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
 8028a9e:	f89d 6054 	ldrb.w	r6, [sp, #84]	; 0x54
 8028aa2:	9101      	str	r1, [sp, #4]
 8028aa4:	db02      	blt.n	8028aac <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x38>
 8028aa6:	45a0      	cmp	r8, r4
 8028aa8:	f300 811a 	bgt.w	8028ce0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x26c>
 8028aac:	2700      	movs	r7, #0
 8028aae:	46be      	mov	lr, r7
 8028ab0:	46b9      	mov	r9, r7
 8028ab2:	463c      	mov	r4, r7
 8028ab4:	2d00      	cmp	r5, #0
 8028ab6:	db02      	blt.n	8028abe <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x4a>
 8028ab8:	45a8      	cmp	r8, r5
 8028aba:	f300 812b 	bgt.w	8028d14 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2a0>
 8028abe:	f04f 0c00 	mov.w	ip, #0
 8028ac2:	46e0      	mov	r8, ip
 8028ac4:	4665      	mov	r5, ip
 8028ac6:	f8cd c010 	str.w	ip, [sp, #16]
 8028aca:	f1ba 0f0f 	cmp.w	sl, #15
 8028ace:	f200 8167 	bhi.w	8028da0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 8028ad2:	2e0f      	cmp	r6, #15
 8028ad4:	f200 8164 	bhi.w	8028da0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 8028ad8:	b2b2      	uxth	r2, r6
 8028ada:	fa1f f38a 	uxth.w	r3, sl
 8028ade:	fb02 f603 	mul.w	r6, r2, r3
 8028ae2:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8028ae6:	b292      	uxth	r2, r2
 8028ae8:	fb02 fa08 	mul.w	sl, r2, r8
 8028aec:	fb06 fb0c 	mul.w	fp, r6, ip
 8028af0:	011b      	lsls	r3, r3, #4
 8028af2:	1b98      	subs	r0, r3, r6
 8028af4:	b280      	uxth	r0, r0
 8028af6:	9002      	str	r0, [sp, #8]
 8028af8:	fb00 f007 	mul.w	r0, r0, r7
 8028afc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8028b00:	1a9b      	subs	r3, r3, r2
 8028b02:	b29b      	uxth	r3, r3
 8028b04:	fb03 000e 	mla	r0, r3, lr, r0
 8028b08:	4450      	add	r0, sl
 8028b0a:	4458      	add	r0, fp
 8028b0c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028b10:	9003      	str	r0, [sp, #12]
 8028b12:	2800      	cmp	r0, #0
 8028b14:	f000 80e1 	beq.w	8028cda <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x266>
 8028b18:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8028b1c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028b20:	f009 1bff 	and.w	fp, r9, #16711935	; 0xff00ff
 8028b24:	9105      	str	r1, [sp, #20]
 8028b26:	d01d      	beq.n	8028b64 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xf0>
 8028b28:	fb0b fb0e 	mul.w	fp, fp, lr
 8028b2c:	fb01 fe0e 	mul.w	lr, r1, lr
 8028b30:	ea4f 2a1b 	mov.w	sl, fp, lsr #8
 8028b34:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8028b38:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028b3c:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 8028b40:	44d3      	add	fp, sl
 8028b42:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8028b46:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8028b4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028b4e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8028b52:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028b56:	ea4b 0e0e 	orr.w	lr, fp, lr
 8028b5a:	f40e 417f 	and.w	r1, lr, #65280	; 0xff00
 8028b5e:	f00e 1bff 	and.w	fp, lr, #16711935	; 0xff00ff
 8028b62:	9105      	str	r1, [sp, #20]
 8028b64:	2fff      	cmp	r7, #255	; 0xff
 8028b66:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8028b6a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028b6e:	d01b      	beq.n	8028ba8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x134>
 8028b70:	fb0e fe07 	mul.w	lr, lr, r7
 8028b74:	fb04 f407 	mul.w	r4, r4, r7
 8028b78:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 8028b7c:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8028b80:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8028b84:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8028b88:	44d6      	add	lr, sl
 8028b8a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8028b8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028b92:	0a24      	lsrs	r4, r4, #8
 8028b94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028b98:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028b9c:	ea4e 0404 	orr.w	r4, lr, r4
 8028ba0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8028ba4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028ba8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8028bac:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8028bb0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8028bb4:	d019      	beq.n	8028bea <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x176>
 8028bb6:	fb00 f008 	mul.w	r0, r0, r8
 8028bba:	fb05 f508 	mul.w	r5, r5, r8
 8028bbe:	ea4f 2910 	mov.w	r9, r0, lsr #8
 8028bc2:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8028bc6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8028bca:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8028bce:	4448      	add	r0, r9
 8028bd0:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8028bd4:	0a00      	lsrs	r0, r0, #8
 8028bd6:	0a2d      	lsrs	r5, r5, #8
 8028bd8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028bdc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8028be0:	4305      	orrs	r5, r0
 8028be2:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8028be6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8028bea:	9904      	ldr	r1, [sp, #16]
 8028bec:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028bf0:	f001 1aff 	and.w	sl, r1, #16711935	; 0xff00ff
 8028bf4:	f401 497f 	and.w	r9, r1, #65280	; 0xff00
 8028bf8:	d01c      	beq.n	8028c34 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x1c0>
 8028bfa:	fb0a fa0c 	mul.w	sl, sl, ip
 8028bfe:	fb09 fc0c 	mul.w	ip, r9, ip
 8028c02:	ea4f 281a 	mov.w	r8, sl, lsr #8
 8028c06:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8028c0a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028c0e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8028c12:	44c2      	add	sl, r8
 8028c14:	eb07 2c1c 	add.w	ip, r7, ip, lsr #8
 8028c18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028c1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028c20:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8028c24:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028c28:	ea4a 090c 	orr.w	r9, sl, ip
 8028c2c:	f009 1aff 	and.w	sl, r9, #16711935	; 0xff00ff
 8028c30:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028c34:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8028c38:	9903      	ldr	r1, [sp, #12]
 8028c3a:	fb01 fc08 	mul.w	ip, r1, r8
 8028c3e:	f10c 0701 	add.w	r7, ip, #1
 8028c42:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028c46:	ea6f 2c17 	mvn.w	ip, r7, lsr #8
 8028c4a:	9902      	ldr	r1, [sp, #8]
 8028c4c:	fa5f f78c 	uxtb.w	r7, ip
 8028c50:	fb04 f401 	mul.w	r4, r4, r1
 8028c54:	fb0e fe01 	mul.w	lr, lr, r1
 8028c58:	9905      	ldr	r1, [sp, #20]
 8028c5a:	fb0b ee03 	mla	lr, fp, r3, lr
 8028c5e:	fb01 4303 	mla	r3, r1, r3, r4
 8028c62:	fb00 e002 	mla	r0, r0, r2, lr
 8028c66:	fb05 3502 	mla	r5, r5, r2, r3
 8028c6a:	fb0a 0a06 	mla	sl, sl, r6, r0
 8028c6e:	fb09 5906 	mla	r9, r9, r6, r5
 8028c72:	ea4f 261a 	mov.w	r6, sl, lsr #8
 8028c76:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028c7a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028c7e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028c82:	ea46 0609 	orr.w	r6, r6, r9
 8028c86:	b2f2      	uxtb	r2, r6
 8028c88:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8028c8c:	0c36      	lsrs	r6, r6, #16
 8028c8e:	9900      	ldr	r1, [sp, #0]
 8028c90:	fb12 f408 	smulbb	r4, r2, r8
 8028c94:	fb13 f008 	smulbb	r0, r3, r8
 8028c98:	fb16 f808 	smulbb	r8, r6, r8
 8028c9c:	780a      	ldrb	r2, [r1, #0]
 8028c9e:	784b      	ldrb	r3, [r1, #1]
 8028ca0:	788e      	ldrb	r6, [r1, #2]
 8028ca2:	fb02 4207 	mla	r2, r2, r7, r4
 8028ca6:	fb03 0307 	mla	r3, r3, r7, r0
 8028caa:	fb06 8807 	mla	r8, r6, r7, r8
 8028cae:	b292      	uxth	r2, r2
 8028cb0:	b29b      	uxth	r3, r3
 8028cb2:	fa1f f888 	uxth.w	r8, r8
 8028cb6:	1c54      	adds	r4, r2, #1
 8028cb8:	1c58      	adds	r0, r3, #1
 8028cba:	f108 0701 	add.w	r7, r8, #1
 8028cbe:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8028cc2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8028cc6:	eb07 2818 	add.w	r8, r7, r8, lsr #8
 8028cca:	1212      	asrs	r2, r2, #8
 8028ccc:	121b      	asrs	r3, r3, #8
 8028cce:	ea4f 2828 	mov.w	r8, r8, asr #8
 8028cd2:	700a      	strb	r2, [r1, #0]
 8028cd4:	704b      	strb	r3, [r1, #1]
 8028cd6:	f881 8002 	strb.w	r8, [r1, #2]
 8028cda:	b007      	add	sp, #28
 8028cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028ce0:	2800      	cmp	r0, #0
 8028ce2:	db01      	blt.n	8028ce8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x274>
 8028ce4:	4584      	cmp	ip, r0
 8028ce6:	dc40      	bgt.n	8028d6a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2f6>
 8028ce8:	f04f 0e00 	mov.w	lr, #0
 8028cec:	46f1      	mov	r9, lr
 8028cee:	1c42      	adds	r2, r0, #1
 8028cf0:	d42b      	bmi.n	8028d4a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2d6>
 8028cf2:	4594      	cmp	ip, r2
 8028cf4:	dd29      	ble.n	8028d4a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2d6>
 8028cf6:	f1ba 0f00 	cmp.w	sl, #0
 8028cfa:	d005      	beq.n	8028d08 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x294>
 8028cfc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8028d00:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8028d04:	0e27      	lsrs	r7, r4, #24
 8028d06:	e6d5      	b.n	8028ab4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x40>
 8028d08:	2d00      	cmp	r5, #0
 8028d0a:	db41      	blt.n	8028d90 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x31c>
 8028d0c:	45a8      	cmp	r8, r5
 8028d0e:	dd3f      	ble.n	8028d90 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x31c>
 8028d10:	4657      	mov	r7, sl
 8028d12:	4654      	mov	r4, sl
 8028d14:	b1e6      	cbz	r6, 8028d50 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2dc>
 8028d16:	2800      	cmp	r0, #0
 8028d18:	db32      	blt.n	8028d80 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x30c>
 8028d1a:	4584      	cmp	ip, r0
 8028d1c:	dd30      	ble.n	8028d80 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x30c>
 8028d1e:	f81b 200c 	ldrb.w	r2, [fp, ip]
 8028d22:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8028d26:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8028d2a:	3001      	adds	r0, #1
 8028d2c:	d423      	bmi.n	8028d76 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x302>
 8028d2e:	4584      	cmp	ip, r0
 8028d30:	dd21      	ble.n	8028d76 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x302>
 8028d32:	f1ba 0f00 	cmp.w	sl, #0
 8028d36:	d027      	beq.n	8028d88 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x314>
 8028d38:	44dc      	add	ip, fp
 8028d3a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8028d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028d42:	9304      	str	r3, [sp, #16]
 8028d44:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028d48:	e6bf      	b.n	8028aca <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x56>
 8028d4a:	2700      	movs	r7, #0
 8028d4c:	463c      	mov	r4, r7
 8028d4e:	e6b1      	b.n	8028ab4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x40>
 8028d50:	f1ba 0f0f 	cmp.w	sl, #15
 8028d54:	d824      	bhi.n	8028da0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 8028d56:	fa1f f38a 	uxth.w	r3, sl
 8028d5a:	4632      	mov	r2, r6
 8028d5c:	46b3      	mov	fp, r6
 8028d5e:	46b2      	mov	sl, r6
 8028d60:	9604      	str	r6, [sp, #16]
 8028d62:	4635      	mov	r5, r6
 8028d64:	46b4      	mov	ip, r6
 8028d66:	46b0      	mov	r8, r6
 8028d68:	e6c2      	b.n	8028af0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x7c>
 8028d6a:	5dd2      	ldrb	r2, [r2, r7]
 8028d6c:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8028d70:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 8028d74:	e7bb      	b.n	8028cee <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x27a>
 8028d76:	f04f 0c00 	mov.w	ip, #0
 8028d7a:	f8cd c010 	str.w	ip, [sp, #16]
 8028d7e:	e6a4      	b.n	8028aca <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x56>
 8028d80:	f04f 0800 	mov.w	r8, #0
 8028d84:	4645      	mov	r5, r8
 8028d86:	e7d0      	b.n	8028d2a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2b6>
 8028d88:	f8cd a010 	str.w	sl, [sp, #16]
 8028d8c:	46d4      	mov	ip, sl
 8028d8e:	e6a0      	b.n	8028ad2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x5e>
 8028d90:	4654      	mov	r4, sl
 8028d92:	f8cd a010 	str.w	sl, [sp, #16]
 8028d96:	4655      	mov	r5, sl
 8028d98:	46d4      	mov	ip, sl
 8028d9a:	46d0      	mov	r8, sl
 8028d9c:	4657      	mov	r7, sl
 8028d9e:	e698      	b.n	8028ad2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x5e>
 8028da0:	4b03      	ldr	r3, [pc, #12]	; (8028db0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x33c>)
 8028da2:	4a04      	ldr	r2, [pc, #16]	; (8028db4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x340>)
 8028da4:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8028da8:	4803      	ldr	r0, [pc, #12]	; (8028db8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x344>)
 8028daa:	f000 fc27 	bl	80295fc <__assert_func>
 8028dae:	bf00      	nop
 8028db0:	0802c8e4 	.word	0x0802c8e4
 8028db4:	0802cf5c 	.word	0x0802cf5c
 8028db8:	0802ca68 	.word	0x0802ca68

08028dbc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028dc0:	ed2d 8b08 	vpush	{d8-d11}
 8028dc4:	b0a9      	sub	sp, #164	; 0xa4
 8028dc6:	e9dd ba3b 	ldrd	fp, sl, [sp, #236]	; 0xec
 8028dca:	eeb0 aa40 	vmov.f32	s20, s0
 8028dce:	46d9      	mov	r9, fp
 8028dd0:	eef0 9a60 	vmov.f32	s19, s1
 8028dd4:	eeb0 9a41 	vmov.f32	s18, s2
 8028dd8:	eef0 8a62 	vmov.f32	s17, s5
 8028ddc:	eeb0 8a43 	vmov.f32	s16, s6
 8028de0:	eef0 ba44 	vmov.f32	s23, s8
 8028de4:	eeb0 ba64 	vmov.f32	s22, s9
 8028de8:	eef0 aa45 	vmov.f32	s21, s10
 8028dec:	46d3      	mov	fp, sl
 8028dee:	9022      	str	r0, [sp, #136]	; 0x88
 8028df0:	983f      	ldr	r0, [sp, #252]	; 0xfc
 8028df2:	9115      	str	r1, [sp, #84]	; 0x54
 8028df4:	9218      	str	r2, [sp, #96]	; 0x60
 8028df6:	6841      	ldr	r1, [r0, #4]
 8028df8:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8028dfa:	469e      	mov	lr, r3
 8028dfc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028dfe:	6807      	ldr	r7, [r0, #0]
 8028e00:	fb01 2303 	mla	r3, r1, r3, r2
 8028e04:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8028e06:	9842      	ldr	r0, [sp, #264]	; 0x108
 8028e08:	6852      	ldr	r2, [r2, #4]
 8028e0a:	f89d 110c 	ldrb.w	r1, [sp, #268]	; 0x10c
 8028e0e:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8028e12:	6800      	ldr	r0, [r0, #0]
 8028e14:	1d13      	adds	r3, r2, #4
 8028e16:	930b      	str	r3, [sp, #44]	; 0x2c
 8028e18:	b28b      	uxth	r3, r1
 8028e1a:	9123      	str	r1, [sp, #140]	; 0x8c
 8028e1c:	9011      	str	r0, [sp, #68]	; 0x44
 8028e1e:	9317      	str	r3, [sp, #92]	; 0x5c
 8028e20:	9712      	str	r7, [sp, #72]	; 0x48
 8028e22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8028e24:	2b00      	cmp	r3, #0
 8028e26:	dc02      	bgt.n	8028e2e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8028e28:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028e2a:	2b00      	cmp	r3, #0
 8028e2c:	dd68      	ble.n	8028f00 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8028e2e:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8028e30:	f1be 0f00 	cmp.w	lr, #0
 8028e34:	e9d3 5702 	ldrd	r5, r7, [r3, #8]
 8028e38:	b228      	sxth	r0, r5
 8028e3a:	b23e      	sxth	r6, r7
 8028e3c:	f340 83a0 	ble.w	8029580 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c4>
 8028e40:	e9dd 8a3d 	ldrd	r8, sl, [sp, #244]	; 0xf4
 8028e44:	9912      	ldr	r1, [sp, #72]	; 0x48
 8028e46:	1e44      	subs	r4, r0, #1
 8028e48:	f106 3cff 	add.w	ip, r6, #4294967295
 8028e4c:	9709      	str	r7, [sp, #36]	; 0x24
 8028e4e:	ea5f 4329 	movs.w	r3, r9, asr #16
 8028e52:	ea4f 422b 	mov.w	r2, fp, asr #16
 8028e56:	d405      	bmi.n	8028e64 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028e58:	42a3      	cmp	r3, r4
 8028e5a:	da03      	bge.n	8028e64 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028e5c:	2a00      	cmp	r2, #0
 8028e5e:	db01      	blt.n	8028e64 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028e60:	4562      	cmp	r2, ip
 8028e62:	db52      	blt.n	8028f0a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8028e64:	1c5f      	adds	r7, r3, #1
 8028e66:	d406      	bmi.n	8028e76 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8028e68:	4287      	cmp	r7, r0
 8028e6a:	dc04      	bgt.n	8028e76 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8028e6c:	1c57      	adds	r7, r2, #1
 8028e6e:	d402      	bmi.n	8028e76 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8028e70:	42b7      	cmp	r7, r6
 8028e72:	f340 835f 	ble.w	8029534 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>
 8028e76:	f1be 0e01 	subs.w	lr, lr, #1
 8028e7a:	44c1      	add	r9, r8
 8028e7c:	44d3      	add	fp, sl
 8028e7e:	f101 0104 	add.w	r1, r1, #4
 8028e82:	d1e4      	bne.n	8028e4e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028e84:	9112      	str	r1, [sp, #72]	; 0x48
 8028e86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8028e88:	2b00      	cmp	r3, #0
 8028e8a:	dd39      	ble.n	8028f00 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8028e8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028e90:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028e94:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028e98:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028e9c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028ea0:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8028ea4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028ea8:	ee76 6a68 	vsub.f32	s13, s12, s17
 8028eac:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8028eb0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028eb4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028eb8:	ee16 2a90 	vmov	r2, s13
 8028ebc:	3b01      	subs	r3, #1
 8028ebe:	9315      	str	r3, [sp, #84]	; 0x54
 8028ec0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8028ec2:	fb92 f3f3 	sdiv	r3, r2, r3
 8028ec6:	ee17 2a10 	vmov	r2, s14
 8028eca:	eeb0 7a48 	vmov.f32	s14, s16
 8028ece:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028ed2:	ee17 ba10 	vmov	fp, s14
 8028ed6:	eeb0 7a68 	vmov.f32	s14, s17
 8028eda:	933d      	str	r3, [sp, #244]	; 0xf4
 8028edc:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8028ede:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028ee2:	fb92 f3f3 	sdiv	r3, r2, r3
 8028ee6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8028ee8:	933e      	str	r3, [sp, #248]	; 0xf8
 8028eea:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8028eec:	ee17 9a10 	vmov	r9, s14
 8028ef0:	eeb0 8a67 	vmov.f32	s16, s15
 8028ef4:	eef0 8a46 	vmov.f32	s17, s12
 8028ef8:	bf14      	ite	ne
 8028efa:	469e      	movne	lr, r3
 8028efc:	4696      	moveq	lr, r2
 8028efe:	e790      	b.n	8028e22 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028f00:	b029      	add	sp, #164	; 0xa4
 8028f02:	ecbd 8b08 	vpop	{d8-d11}
 8028f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028f0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8028f0c:	9112      	str	r1, [sp, #72]	; 0x48
 8028f0e:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8028f10:	f10e 32ff 	add.w	r2, lr, #4294967295
 8028f14:	fb01 9302 	mla	r3, r1, r2, r9
 8028f18:	141b      	asrs	r3, r3, #16
 8028f1a:	920a      	str	r2, [sp, #40]	; 0x28
 8028f1c:	f100 816a 	bmi.w	80291f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8028f20:	42a3      	cmp	r3, r4
 8028f22:	f280 8167 	bge.w	80291f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8028f26:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8028f28:	fb03 b302 	mla	r3, r3, r2, fp
 8028f2c:	141b      	asrs	r3, r3, #16
 8028f2e:	f100 8161 	bmi.w	80291f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8028f32:	3e01      	subs	r6, #1
 8028f34:	42b3      	cmp	r3, r6
 8028f36:	f280 815d 	bge.w	80291f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8028f3a:	f1be 0f00 	cmp.w	lr, #0
 8028f3e:	dda2      	ble.n	8028e86 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8028f40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028f42:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 8028f46:	3304      	adds	r3, #4
 8028f48:	9309      	str	r3, [sp, #36]	; 0x24
 8028f4a:	f8cd b0f0 	str.w	fp, [sp, #240]	; 0xf0
 8028f4e:	4606      	mov	r6, r0
 8028f50:	465b      	mov	r3, fp
 8028f52:	e12a      	b.n	80291aa <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8028f54:	785f      	ldrb	r7, [r3, #1]
 8028f56:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8028f5a:	9713      	str	r7, [sp, #76]	; 0x4c
 8028f5c:	0e3f      	lsrs	r7, r7, #24
 8028f5e:	970c      	str	r7, [sp, #48]	; 0x30
 8028f60:	b16a      	cbz	r2, 8028f7e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028f62:	199f      	adds	r7, r3, r6
 8028f64:	5d9b      	ldrb	r3, [r3, r6]
 8028f66:	462e      	mov	r6, r5
 8028f68:	787f      	ldrb	r7, [r7, #1]
 8028f6a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028f6e:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8028f72:	9314      	str	r3, [sp, #80]	; 0x50
 8028f74:	9516      	str	r5, [sp, #88]	; 0x58
 8028f76:	0e1b      	lsrs	r3, r3, #24
 8028f78:	0e2d      	lsrs	r5, r5, #24
 8028f7a:	950e      	str	r5, [sp, #56]	; 0x38
 8028f7c:	930d      	str	r3, [sp, #52]	; 0x34
 8028f7e:	fa1f fc81 	uxth.w	ip, r1
 8028f82:	b292      	uxth	r2, r2
 8028f84:	fb0c f602 	mul.w	r6, ip, r2
 8028f88:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8028f8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028f8e:	ebac 0706 	sub.w	r7, ip, r6
 8028f92:	b2bf      	uxth	r7, r7
 8028f94:	fb07 f103 	mul.w	r1, r7, r3
 8028f98:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8028f9c:	b292      	uxth	r2, r2
 8028f9e:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8028fa2:	1a9b      	subs	r3, r3, r2
 8028fa4:	b29b      	uxth	r3, r3
 8028fa6:	fb03 1104 	mla	r1, r3, r4, r1
 8028faa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028fac:	fb02 1105 	mla	r1, r2, r5, r1
 8028fb0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028fb2:	fb06 1105 	mla	r1, r6, r5, r1
 8028fb6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028fba:	2900      	cmp	r1, #0
 8028fbc:	f000 80e3 	beq.w	8029186 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8028fc0:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8028fc4:	2cff      	cmp	r4, #255	; 0xff
 8028fc6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8028fca:	950f      	str	r5, [sp, #60]	; 0x3c
 8028fcc:	9010      	str	r0, [sp, #64]	; 0x40
 8028fce:	d01e      	beq.n	802900e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8028fd0:	fb00 f004 	mul.w	r0, r0, r4
 8028fd4:	fb05 fe04 	mul.w	lr, r5, r4
 8028fd8:	4604      	mov	r4, r0
 8028fda:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8028fde:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8028fe2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028fe6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8028fea:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8028fee:	44e6      	add	lr, ip
 8028ff0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028ff4:	0a24      	lsrs	r4, r4, #8
 8028ff6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028ffa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028ffe:	ea4e 0e04 	orr.w	lr, lr, r4
 8029002:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8029006:	900f      	str	r0, [sp, #60]	; 0x3c
 8029008:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 802900c:	9010      	str	r0, [sp, #64]	; 0x40
 802900e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8029010:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 8029014:	f400 487f 	and.w	r8, r0, #65280	; 0xff00
 8029018:	980c      	ldr	r0, [sp, #48]	; 0x30
 802901a:	28ff      	cmp	r0, #255	; 0xff
 802901c:	d01c      	beq.n	8029058 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 802901e:	fb0e fe00 	mul.w	lr, lr, r0
 8029022:	fb08 f800 	mul.w	r8, r8, r0
 8029026:	ea4f 241e 	mov.w	r4, lr, lsr #8
 802902a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802902e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8029032:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8029036:	44a6      	add	lr, r4
 8029038:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 802903c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029040:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029044:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029048:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802904c:	ea4e 0808 	orr.w	r8, lr, r8
 8029050:	f008 1eff 	and.w	lr, r8, #16711935	; 0xff00ff
 8029054:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8029058:	9814      	ldr	r0, [sp, #80]	; 0x50
 802905a:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 802905e:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 8029062:	980d      	ldr	r0, [sp, #52]	; 0x34
 8029064:	28ff      	cmp	r0, #255	; 0xff
 8029066:	d01c      	beq.n	80290a2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8029068:	fb0c fc00 	mul.w	ip, ip, r0
 802906c:	fb0a fa00 	mul.w	sl, sl, r0
 8029070:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8029074:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8029078:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802907c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8029080:	44a4      	add	ip, r4
 8029082:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8029086:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802908a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802908e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029092:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029096:	ea4c 0a0a 	orr.w	sl, ip, sl
 802909a:	f00a 1cff 	and.w	ip, sl, #16711935	; 0xff00ff
 802909e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80290a2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80290a4:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80290a8:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80290ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80290ae:	2cff      	cmp	r4, #255	; 0xff
 80290b0:	d019      	beq.n	80290e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80290b2:	fb00 f004 	mul.w	r0, r0, r4
 80290b6:	fb0b fb04 	mul.w	fp, fp, r4
 80290ba:	0a04      	lsrs	r4, r0, #8
 80290bc:	f004 15ff 	and.w	r5, r4, #16711935	; 0xff00ff
 80290c0:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80290c4:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 80290c8:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 80290cc:	4428      	add	r0, r5
 80290ce:	0a00      	lsrs	r0, r0, #8
 80290d0:	0a24      	lsrs	r4, r4, #8
 80290d2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80290d6:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80290da:	ea40 0b0b 	orr.w	fp, r0, fp
 80290de:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 80290e2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80290e6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80290e8:	fb0e fe07 	mul.w	lr, lr, r7
 80290ec:	fb01 f105 	mul.w	r1, r1, r5
 80290f0:	1c4c      	adds	r4, r1, #1
 80290f2:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 80290f6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80290fa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80290fc:	fb08 f707 	mul.w	r7, r8, r7
 8029100:	fb04 ee03 	mla	lr, r4, r3, lr
 8029104:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8029106:	fb0c ee02 	mla	lr, ip, r2, lr
 802910a:	fb04 7703 	mla	r7, r4, r3, r7
 802910e:	fb0a 7702 	mla	r7, sl, r2, r7
 8029112:	fb00 ee06 	mla	lr, r0, r6, lr
 8029116:	fb0b 7706 	mla	r7, fp, r6, r7
 802911a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802911e:	0a3f      	lsrs	r7, r7, #8
 8029120:	f407 437f 	and.w	r3, r7, #65280	; 0xff00
 8029124:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029128:	ea4e 0303 	orr.w	r3, lr, r3
 802912c:	b2df      	uxtb	r7, r3
 802912e:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8029132:	0c1b      	lsrs	r3, r3, #16
 8029134:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8029136:	fb17 f705 	smulbb	r7, r7, r5
 802913a:	fb16 f605 	smulbb	r6, r6, r5
 802913e:	fb13 f305 	smulbb	r3, r3, r5
 8029142:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 8029146:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 802914a:	f814 cc02 	ldrb.w	ip, [r4, #-2]
 802914e:	b2c9      	uxtb	r1, r1
 8029150:	fb00 7001 	mla	r0, r0, r1, r7
 8029154:	fb02 6201 	mla	r2, r2, r1, r6
 8029158:	fb0c 3101 	mla	r1, ip, r1, r3
 802915c:	b280      	uxth	r0, r0
 802915e:	b292      	uxth	r2, r2
 8029160:	b289      	uxth	r1, r1
 8029162:	1c47      	adds	r7, r0, #1
 8029164:	1c56      	adds	r6, r2, #1
 8029166:	1c4b      	adds	r3, r1, #1
 8029168:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802916c:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8029170:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029174:	1200      	asrs	r0, r0, #8
 8029176:	1212      	asrs	r2, r2, #8
 8029178:	1209      	asrs	r1, r1, #8
 802917a:	f804 0c04 	strb.w	r0, [r4, #-4]
 802917e:	f804 2c03 	strb.w	r2, [r4, #-3]
 8029182:	f804 1c02 	strb.w	r1, [r4, #-2]
 8029186:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8029188:	993e      	ldr	r1, [sp, #248]	; 0xf8
 802918a:	4491      	add	r9, r2
 802918c:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 802918e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029190:	440a      	add	r2, r1
 8029192:	923c      	str	r2, [sp, #240]	; 0xf0
 8029194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029196:	3b01      	subs	r3, #1
 8029198:	930a      	str	r3, [sp, #40]	; 0x28
 802919a:	3204      	adds	r2, #4
 802919c:	3301      	adds	r3, #1
 802919e:	9209      	str	r2, [sp, #36]	; 0x24
 80291a0:	d021      	beq.n	80291e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80291a2:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80291a4:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 80291a8:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80291aa:	ea4f 4229 	mov.w	r2, r9, asr #16
 80291ae:	141b      	asrs	r3, r3, #16
 80291b0:	fb06 2303 	mla	r3, r6, r3, r2
 80291b4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80291b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80291b8:	5ce2      	ldrb	r2, [r4, r3]
 80291ba:	f3c9 3103 	ubfx	r1, r9, #12, #4
 80291be:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 80291c2:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 80291c4:	4423      	add	r3, r4
 80291c6:	f3c2 3203 	ubfx	r2, r2, #12, #4
 80291ca:	0e04      	lsrs	r4, r0, #24
 80291cc:	2900      	cmp	r1, #0
 80291ce:	f47f aec1 	bne.w	8028f54 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80291d2:	2a00      	cmp	r2, #0
 80291d4:	f43f aed3 	beq.w	8028f7e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80291d8:	5d9b      	ldrb	r3, [r3, r6]
 80291da:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80291de:	9314      	str	r3, [sp, #80]	; 0x50
 80291e0:	0e1b      	lsrs	r3, r3, #24
 80291e2:	930d      	str	r3, [sp, #52]	; 0x34
 80291e4:	e6cb      	b.n	8028f7e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80291e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80291e8:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 80291ec:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 80291f0:	9312      	str	r3, [sp, #72]	; 0x48
 80291f2:	e648      	b.n	8028e86 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80291f4:	f1be 0f00 	cmp.w	lr, #0
 80291f8:	f77f ae45 	ble.w	8028e86 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80291fc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8029200:	ea4f 4329 	mov.w	r3, r9, asr #16
 8029204:	ea4f 422b 	mov.w	r2, fp, asr #16
 8029208:	2b00      	cmp	r3, #0
 802920a:	46be      	mov	lr, r7
 802920c:	4629      	mov	r1, r5
 802920e:	e9dd 653d 	ldrd	r6, r5, [sp, #244]	; 0xf4
 8029212:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8029216:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8029218:	f3c9 3003 	ubfx	r0, r9, #12, #4
 802921c:	f3cb 3703 	ubfx	r7, fp, #12, #4
 8029220:	f2c0 815d 	blt.w	80294de <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8029224:	f101 3cff 	add.w	ip, r1, #4294967295
 8029228:	4563      	cmp	r3, ip
 802922a:	f280 8158 	bge.w	80294de <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 802922e:	2a00      	cmp	r2, #0
 8029230:	f2c0 8155 	blt.w	80294de <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8029234:	f10e 3cff 	add.w	ip, lr, #4294967295
 8029238:	4562      	cmp	r2, ip
 802923a:	f280 8150 	bge.w	80294de <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 802923e:	fa0f fc81 	sxth.w	ip, r1
 8029242:	fb02 330c 	mla	r3, r2, ip, r3
 8029246:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8029248:	5cd1      	ldrb	r1, [r2, r3]
 802924a:	18d3      	adds	r3, r2, r3
 802924c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802924e:	469e      	mov	lr, r3
 8029250:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029254:	0e19      	lsrs	r1, r3, #24
 8029256:	9309      	str	r3, [sp, #36]	; 0x24
 8029258:	910f      	str	r1, [sp, #60]	; 0x3c
 802925a:	2800      	cmp	r0, #0
 802925c:	f000 8171 	beq.w	8029542 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x786>
 8029260:	4671      	mov	r1, lr
 8029262:	f89e e001 	ldrb.w	lr, [lr, #1]
 8029266:	4613      	mov	r3, r2
 8029268:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 802926c:	9224      	str	r2, [sp, #144]	; 0x90
 802926e:	0e12      	lsrs	r2, r2, #24
 8029270:	921a      	str	r2, [sp, #104]	; 0x68
 8029272:	2f00      	cmp	r7, #0
 8029274:	f040 8171 	bne.w	802955a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79e>
 8029278:	b280      	uxth	r0, r0
 802927a:	b2bf      	uxth	r7, r7
 802927c:	fb00 f207 	mul.w	r2, r0, r7
 8029280:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 8029284:	ebac 0002 	sub.w	r0, ip, r2
 8029288:	b280      	uxth	r0, r0
 802928a:	4603      	mov	r3, r0
 802928c:	9010      	str	r0, [sp, #64]	; 0x40
 802928e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8029290:	ebc2 1707 	rsb	r7, r2, r7, lsl #4
 8029294:	fb03 f000 	mul.w	r0, r3, r0
 8029298:	fa1f fe87 	uxth.w	lr, r7
 802929c:	f5cc 7780 	rsb	r7, ip, #256	; 0x100
 80292a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80292a2:	eba7 070e 	sub.w	r7, r7, lr
 80292a6:	b2bf      	uxth	r7, r7
 80292a8:	fb07 0003 	mla	r0, r7, r3, r0
 80292ac:	9719      	str	r7, [sp, #100]	; 0x64
 80292ae:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80292b0:	fb0e 0007 	mla	r0, lr, r7, r0
 80292b4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80292b6:	fb02 0007 	mla	r0, r2, r7, r0
 80292ba:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80292be:	900f      	str	r0, [sp, #60]	; 0x3c
 80292c0:	2800      	cmp	r0, #0
 80292c2:	f000 80f6 	beq.w	80294b2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 80292c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80292c8:	2bff      	cmp	r3, #255	; 0xff
 80292ca:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 80292ce:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80292d2:	901d      	str	r0, [sp, #116]	; 0x74
 80292d4:	9109      	str	r1, [sp, #36]	; 0x24
 80292d6:	d01b      	beq.n	8029310 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x554>
 80292d8:	fb01 f103 	mul.w	r1, r1, r3
 80292dc:	fb00 f003 	mul.w	r0, r0, r3
 80292e0:	460b      	mov	r3, r1
 80292e2:	0a01      	lsrs	r1, r0, #8
 80292e4:	f100 1701 	add.w	r7, r0, #65537	; 0x10001
 80292e8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80292ec:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80292f0:	4439      	add	r1, r7
 80292f2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80292f6:	0a09      	lsrs	r1, r1, #8
 80292f8:	0a1b      	lsrs	r3, r3, #8
 80292fa:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80292fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029302:	430b      	orrs	r3, r1
 8029304:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8029308:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802930c:	911d      	str	r1, [sp, #116]	; 0x74
 802930e:	9309      	str	r3, [sp, #36]	; 0x24
 8029310:	9924      	ldr	r1, [sp, #144]	; 0x90
 8029312:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8029314:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8029318:	2fff      	cmp	r7, #255	; 0xff
 802931a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802931e:	931e      	str	r3, [sp, #120]	; 0x78
 8029320:	911f      	str	r1, [sp, #124]	; 0x7c
 8029322:	d01c      	beq.n	802935e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 8029324:	fb01 f107 	mul.w	r1, r1, r7
 8029328:	fb03 f307 	mul.w	r3, r3, r7
 802932c:	460f      	mov	r7, r1
 802932e:	0a19      	lsrs	r1, r3, #8
 8029330:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8029334:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8029338:	f507 7380 	add.w	r3, r7, #256	; 0x100
 802933c:	4401      	add	r1, r0
 802933e:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8029342:	0a09      	lsrs	r1, r1, #8
 8029344:	0a1b      	lsrs	r3, r3, #8
 8029346:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802934a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802934e:	ea41 0003 	orr.w	r0, r1, r3
 8029352:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8029356:	931e      	str	r3, [sp, #120]	; 0x78
 8029358:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 802935c:	931f      	str	r3, [sp, #124]	; 0x7c
 802935e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8029360:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8029364:	f403 4c7f 	and.w	ip, r3, #65280	; 0xff00
 8029368:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802936a:	9120      	str	r1, [sp, #128]	; 0x80
 802936c:	2bff      	cmp	r3, #255	; 0xff
 802936e:	d01b      	beq.n	80293a8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8029370:	fb01 f103 	mul.w	r1, r1, r3
 8029374:	fb0c fc03 	mul.w	ip, ip, r3
 8029378:	0a08      	lsrs	r0, r1, #8
 802937a:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 802937e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8029382:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 8029386:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802938a:	4401      	add	r1, r0
 802938c:	0a09      	lsrs	r1, r1, #8
 802938e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029392:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8029396:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802939a:	ea41 0c0c 	orr.w	ip, r1, ip
 802939e:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80293a2:	9320      	str	r3, [sp, #128]	; 0x80
 80293a4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80293a8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80293aa:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80293ae:	f400 477f 	and.w	r7, r0, #65280	; 0xff00
 80293b2:	981c      	ldr	r0, [sp, #112]	; 0x70
 80293b4:	9321      	str	r3, [sp, #132]	; 0x84
 80293b6:	28ff      	cmp	r0, #255	; 0xff
 80293b8:	d019      	beq.n	80293ee <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 80293ba:	fb03 f300 	mul.w	r3, r3, r0
 80293be:	fb07 f700 	mul.w	r7, r7, r0
 80293c2:	0a18      	lsrs	r0, r3, #8
 80293c4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80293c8:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80293cc:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80293d0:	4418      	add	r0, r3
 80293d2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80293d6:	0a00      	lsrs	r0, r0, #8
 80293d8:	0a3f      	lsrs	r7, r7, #8
 80293da:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80293de:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80293e2:	4307      	orrs	r7, r0
 80293e4:	f007 13ff 	and.w	r3, r7, #16711935	; 0xff00ff
 80293e8:	9321      	str	r3, [sp, #132]	; 0x84
 80293ea:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80293ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80293f0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80293f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80293f4:	fb01 f100 	mul.w	r1, r1, r0
 80293f8:	4608      	mov	r0, r1
 80293fa:	3101      	adds	r1, #1
 80293fc:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8029400:	ea6f 2110 	mvn.w	r1, r0, lsr #8
 8029404:	9810      	ldr	r0, [sp, #64]	; 0x40
 8029406:	9125      	str	r1, [sp, #148]	; 0x94
 8029408:	991e      	ldr	r1, [sp, #120]	; 0x78
 802940a:	fb01 f100 	mul.w	r1, r1, r0
 802940e:	910f      	str	r1, [sp, #60]	; 0x3c
 8029410:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8029412:	fb01 f100 	mul.w	r1, r1, r0
 8029416:	9110      	str	r1, [sp, #64]	; 0x40
 8029418:	991d      	ldr	r1, [sp, #116]	; 0x74
 802941a:	4608      	mov	r0, r1
 802941c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802941e:	fb00 1103 	mla	r1, r0, r3, r1
 8029422:	910f      	str	r1, [sp, #60]	; 0x3c
 8029424:	9909      	ldr	r1, [sp, #36]	; 0x24
 8029426:	4608      	mov	r0, r1
 8029428:	9910      	ldr	r1, [sp, #64]	; 0x40
 802942a:	fb00 1003 	mla	r0, r0, r3, r1
 802942e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029430:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029432:	fb0c 000e 	mla	r0, ip, lr, r0
 8029436:	fb03 110e 	mla	r1, r3, lr, r1
 802943a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802943c:	f89a c002 	ldrb.w	ip, [sl, #2]
 8029440:	fb03 1102 	mla	r1, r3, r2, r1
 8029444:	fb07 0302 	mla	r3, r7, r2, r0
 8029448:	0a0a      	lsrs	r2, r1, #8
 802944a:	0a1b      	lsrs	r3, r3, #8
 802944c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029450:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029454:	4313      	orrs	r3, r2
 8029456:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8029458:	b2df      	uxtb	r7, r3
 802945a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 802945e:	0c1b      	lsrs	r3, r3, #16
 8029460:	fb17 f702 	smulbb	r7, r7, r2
 8029464:	fb10 f002 	smulbb	r0, r0, r2
 8029468:	fb13 f302 	smulbb	r3, r3, r2
 802946c:	f89d e094 	ldrb.w	lr, [sp, #148]	; 0x94
 8029470:	f89a 1000 	ldrb.w	r1, [sl]
 8029474:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8029478:	fb01 710e 	mla	r1, r1, lr, r7
 802947c:	fb02 020e 	mla	r2, r2, lr, r0
 8029480:	fb0c 330e 	mla	r3, ip, lr, r3
 8029484:	b297      	uxth	r7, r2
 8029486:	fa1f fc81 	uxth.w	ip, r1
 802948a:	b298      	uxth	r0, r3
 802948c:	f10c 0101 	add.w	r1, ip, #1
 8029490:	1c7a      	adds	r2, r7, #1
 8029492:	1c43      	adds	r3, r0, #1
 8029494:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8029498:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802949c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80294a0:	1209      	asrs	r1, r1, #8
 80294a2:	1212      	asrs	r2, r2, #8
 80294a4:	121b      	asrs	r3, r3, #8
 80294a6:	f88a 1000 	strb.w	r1, [sl]
 80294aa:	f88a 2001 	strb.w	r2, [sl, #1]
 80294ae:	f88a 3002 	strb.w	r3, [sl, #2]
 80294b2:	f1b8 0f00 	cmp.w	r8, #0
 80294b6:	f10a 0a04 	add.w	sl, sl, #4
 80294ba:	44b1      	add	r9, r6
 80294bc:	44ab      	add	fp, r5
 80294be:	dd30      	ble.n	8029522 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x766>
 80294c0:	e9d4 1e02 	ldrd	r1, lr, [r4, #8]
 80294c4:	ea4f 4329 	mov.w	r3, r9, asr #16
 80294c8:	2b00      	cmp	r3, #0
 80294ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80294ce:	ea4f 422b 	mov.w	r2, fp, asr #16
 80294d2:	f3c9 3003 	ubfx	r0, r9, #12, #4
 80294d6:	f3cb 3703 	ubfx	r7, fp, #12, #4
 80294da:	f6bf aea3 	bge.w	8029224 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80294de:	f113 0c01 	adds.w	ip, r3, #1
 80294e2:	d4e6      	bmi.n	80294b2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 80294e4:	458c      	cmp	ip, r1
 80294e6:	dce4      	bgt.n	80294b2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 80294e8:	f112 0c01 	adds.w	ip, r2, #1
 80294ec:	d4e1      	bmi.n	80294b2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 80294ee:	45f4      	cmp	ip, lr
 80294f0:	dcdf      	bgt.n	80294b2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 80294f2:	fa0f fe8e 	sxth.w	lr, lr
 80294f6:	b209      	sxth	r1, r1
 80294f8:	e9cd 1e00 	strd	r1, lr, [sp]
 80294fc:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80294fe:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8029502:	e9cd 7105 	strd	r7, r1, [sp, #20]
 8029506:	9302      	str	r3, [sp, #8]
 8029508:	4651      	mov	r1, sl
 802950a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802950c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802950e:	9822      	ldr	r0, [sp, #136]	; 0x88
 8029510:	f7ff fab0 	bl	8028a74 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>
 8029514:	f1b8 0f00 	cmp.w	r8, #0
 8029518:	f10a 0a04 	add.w	sl, sl, #4
 802951c:	44b1      	add	r9, r6
 802951e:	44ab      	add	fp, r5
 8029520:	dcce      	bgt.n	80294c0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8029522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029524:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8029526:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802952a:	3301      	adds	r3, #1
 802952c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8029530:	9312      	str	r3, [sp, #72]	; 0x48
 8029532:	e4a8      	b.n	8028e86 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8029534:	9112      	str	r1, [sp, #72]	; 0x48
 8029536:	f10e 31ff 	add.w	r1, lr, #4294967295
 802953a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802953c:	910a      	str	r1, [sp, #40]	; 0x28
 802953e:	4688      	mov	r8, r1
 8029540:	e662      	b.n	8029208 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8029542:	2f00      	cmp	r7, #0
 8029544:	f43f ae98 	beq.w	8029278 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8029548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802954a:	f81e 200c 	ldrb.w	r2, [lr, ip]
 802954e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8029552:	0e13      	lsrs	r3, r2, #24
 8029554:	9226      	str	r2, [sp, #152]	; 0x98
 8029556:	931b      	str	r3, [sp, #108]	; 0x6c
 8029558:	e68e      	b.n	8029278 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 802955a:	eb01 0e0c 	add.w	lr, r1, ip
 802955e:	f89e e001 	ldrb.w	lr, [lr, #1]
 8029562:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8029566:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 802956a:	4611      	mov	r1, r2
 802956c:	9227      	str	r2, [sp, #156]	; 0x9c
 802956e:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8029572:	4613      	mov	r3, r2
 8029574:	9226      	str	r2, [sp, #152]	; 0x98
 8029576:	0e0a      	lsrs	r2, r1, #24
 8029578:	921c      	str	r2, [sp, #112]	; 0x70
 802957a:	0e1a      	lsrs	r2, r3, #24
 802957c:	921b      	str	r2, [sp, #108]	; 0x6c
 802957e:	e67b      	b.n	8029278 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8029580:	f43f ac81 	beq.w	8028e86 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8029584:	1e44      	subs	r4, r0, #1
 8029586:	e4c2      	b.n	8028f0e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>

08029588 <_GLOBAL__sub_I__ZN8touchgfx19GPU2DVectorRenderer5setupERKNS_6WidgetERKNS_4RectE>:
 8029588:	2200      	movs	r2, #0
 802958a:	4b02      	ldr	r3, [pc, #8]	; (8029594 <_GLOBAL__sub_I__ZN8touchgfx19GPU2DVectorRenderer5setupERKNS_6WidgetERKNS_4RectE+0xc>)
 802958c:	e9c3 2200 	strd	r2, r2, [r3]
 8029590:	4770      	bx	lr
 8029592:	bf00      	nop
 8029594:	20198784 	.word	0x20198784

08029598 <__aeabi_atexit>:
 8029598:	460b      	mov	r3, r1
 802959a:	4601      	mov	r1, r0
 802959c:	4618      	mov	r0, r3
 802959e:	f000 b851 	b.w	8029644 <__cxa_atexit>

080295a2 <_ZdlPvj>:
 80295a2:	f000 b812 	b.w	80295ca <_ZdlPv>

080295a6 <__cxa_guard_acquire>:
 80295a6:	6803      	ldr	r3, [r0, #0]
 80295a8:	07db      	lsls	r3, r3, #31
 80295aa:	d406      	bmi.n	80295ba <__cxa_guard_acquire+0x14>
 80295ac:	7843      	ldrb	r3, [r0, #1]
 80295ae:	b103      	cbz	r3, 80295b2 <__cxa_guard_acquire+0xc>
 80295b0:	deff      	udf	#255	; 0xff
 80295b2:	2301      	movs	r3, #1
 80295b4:	7043      	strb	r3, [r0, #1]
 80295b6:	4618      	mov	r0, r3
 80295b8:	4770      	bx	lr
 80295ba:	2000      	movs	r0, #0
 80295bc:	4770      	bx	lr

080295be <__cxa_guard_release>:
 80295be:	2301      	movs	r3, #1
 80295c0:	6003      	str	r3, [r0, #0]
 80295c2:	4770      	bx	lr

080295c4 <__cxa_pure_virtual>:
 80295c4:	b508      	push	{r3, lr}
 80295c6:	f000 f80d 	bl	80295e4 <_ZSt9terminatev>

080295ca <_ZdlPv>:
 80295ca:	f000 b88d 	b.w	80296e8 <free>

080295ce <_ZN10__cxxabiv111__terminateEPFvvE>:
 80295ce:	b508      	push	{r3, lr}
 80295d0:	4780      	blx	r0
 80295d2:	f000 f80c 	bl	80295ee <abort>
	...

080295d8 <_ZSt13get_terminatev>:
 80295d8:	4b01      	ldr	r3, [pc, #4]	; (80295e0 <_ZSt13get_terminatev+0x8>)
 80295da:	e8d3 0faf 	lda	r0, [r3]
 80295de:	4770      	bx	lr
 80295e0:	200000c0 	.word	0x200000c0

080295e4 <_ZSt9terminatev>:
 80295e4:	b508      	push	{r3, lr}
 80295e6:	f7ff fff7 	bl	80295d8 <_ZSt13get_terminatev>
 80295ea:	f7ff fff0 	bl	80295ce <_ZN10__cxxabiv111__terminateEPFvvE>

080295ee <abort>:
 80295ee:	2006      	movs	r0, #6
 80295f0:	b508      	push	{r3, lr}
 80295f2:	f000 fd5d 	bl	802a0b0 <raise>
 80295f6:	2001      	movs	r0, #1
 80295f8:	f7d8 fe02 	bl	8002200 <_exit>

080295fc <__assert_func>:
 80295fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80295fe:	4614      	mov	r4, r2
 8029600:	461a      	mov	r2, r3
 8029602:	4b09      	ldr	r3, [pc, #36]	; (8029628 <__assert_func+0x2c>)
 8029604:	4605      	mov	r5, r0
 8029606:	681b      	ldr	r3, [r3, #0]
 8029608:	68d8      	ldr	r0, [r3, #12]
 802960a:	b14c      	cbz	r4, 8029620 <__assert_func+0x24>
 802960c:	4b07      	ldr	r3, [pc, #28]	; (802962c <__assert_func+0x30>)
 802960e:	9100      	str	r1, [sp, #0]
 8029610:	4907      	ldr	r1, [pc, #28]	; (8029630 <__assert_func+0x34>)
 8029612:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8029616:	462b      	mov	r3, r5
 8029618:	f000 f828 	bl	802966c <fiprintf>
 802961c:	f7ff ffe7 	bl	80295ee <abort>
 8029620:	4b04      	ldr	r3, [pc, #16]	; (8029634 <__assert_func+0x38>)
 8029622:	461c      	mov	r4, r3
 8029624:	e7f3      	b.n	802960e <__assert_func+0x12>
 8029626:	bf00      	nop
 8029628:	200000c4 	.word	0x200000c4
 802962c:	0802d81a 	.word	0x0802d81a
 8029630:	0802d827 	.word	0x0802d827
 8029634:	0802d855 	.word	0x0802d855

08029638 <atexit>:
 8029638:	2300      	movs	r3, #0
 802963a:	4601      	mov	r1, r0
 802963c:	461a      	mov	r2, r3
 802963e:	4618      	mov	r0, r3
 8029640:	f000 be12 	b.w	802a268 <__register_exitproc>

08029644 <__cxa_atexit>:
 8029644:	b510      	push	{r4, lr}
 8029646:	4c05      	ldr	r4, [pc, #20]	; (802965c <__cxa_atexit+0x18>)
 8029648:	4613      	mov	r3, r2
 802964a:	b12c      	cbz	r4, 8029658 <__cxa_atexit+0x14>
 802964c:	460a      	mov	r2, r1
 802964e:	4601      	mov	r1, r0
 8029650:	2002      	movs	r0, #2
 8029652:	f000 fe09 	bl	802a268 <__register_exitproc>
 8029656:	bd10      	pop	{r4, pc}
 8029658:	4620      	mov	r0, r4
 802965a:	e7fc      	b.n	8029656 <__cxa_atexit+0x12>
 802965c:	0802a269 	.word	0x0802a269

08029660 <__errno>:
 8029660:	4b01      	ldr	r3, [pc, #4]	; (8029668 <__errno+0x8>)
 8029662:	6818      	ldr	r0, [r3, #0]
 8029664:	4770      	bx	lr
 8029666:	bf00      	nop
 8029668:	200000c4 	.word	0x200000c4

0802966c <fiprintf>:
 802966c:	b40e      	push	{r1, r2, r3}
 802966e:	b503      	push	{r0, r1, lr}
 8029670:	ab03      	add	r3, sp, #12
 8029672:	4601      	mov	r1, r0
 8029674:	4805      	ldr	r0, [pc, #20]	; (802968c <fiprintf+0x20>)
 8029676:	f853 2b04 	ldr.w	r2, [r3], #4
 802967a:	6800      	ldr	r0, [r0, #0]
 802967c:	9301      	str	r3, [sp, #4]
 802967e:	f000 f94d 	bl	802991c <_vfiprintf_r>
 8029682:	b002      	add	sp, #8
 8029684:	f85d eb04 	ldr.w	lr, [sp], #4
 8029688:	b003      	add	sp, #12
 802968a:	4770      	bx	lr
 802968c:	200000c4 	.word	0x200000c4

08029690 <__libc_init_array>:
 8029690:	b570      	push	{r4, r5, r6, lr}
 8029692:	4d0d      	ldr	r5, [pc, #52]	; (80296c8 <__libc_init_array+0x38>)
 8029694:	2600      	movs	r6, #0
 8029696:	4c0d      	ldr	r4, [pc, #52]	; (80296cc <__libc_init_array+0x3c>)
 8029698:	1b64      	subs	r4, r4, r5
 802969a:	10a4      	asrs	r4, r4, #2
 802969c:	42a6      	cmp	r6, r4
 802969e:	d109      	bne.n	80296b4 <__libc_init_array+0x24>
 80296a0:	4d0b      	ldr	r5, [pc, #44]	; (80296d0 <__libc_init_array+0x40>)
 80296a2:	2600      	movs	r6, #0
 80296a4:	4c0b      	ldr	r4, [pc, #44]	; (80296d4 <__libc_init_array+0x44>)
 80296a6:	f001 f927 	bl	802a8f8 <_init>
 80296aa:	1b64      	subs	r4, r4, r5
 80296ac:	10a4      	asrs	r4, r4, #2
 80296ae:	42a6      	cmp	r6, r4
 80296b0:	d105      	bne.n	80296be <__libc_init_array+0x2e>
 80296b2:	bd70      	pop	{r4, r5, r6, pc}
 80296b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80296b8:	3601      	adds	r6, #1
 80296ba:	4798      	blx	r3
 80296bc:	e7ee      	b.n	802969c <__libc_init_array+0xc>
 80296be:	f855 3b04 	ldr.w	r3, [r5], #4
 80296c2:	3601      	adds	r6, #1
 80296c4:	4798      	blx	r3
 80296c6:	e7f2      	b.n	80296ae <__libc_init_array+0x1e>
 80296c8:	0802d988 	.word	0x0802d988
 80296cc:	0802d988 	.word	0x0802d988
 80296d0:	0802d988 	.word	0x0802d988
 80296d4:	0802d9a4 	.word	0x0802d9a4

080296d8 <malloc>:
 80296d8:	4b02      	ldr	r3, [pc, #8]	; (80296e4 <malloc+0xc>)
 80296da:	4601      	mov	r1, r0
 80296dc:	6818      	ldr	r0, [r3, #0]
 80296de:	f000 b87f 	b.w	80297e0 <_malloc_r>
 80296e2:	bf00      	nop
 80296e4:	200000c4 	.word	0x200000c4

080296e8 <free>:
 80296e8:	4b02      	ldr	r3, [pc, #8]	; (80296f4 <free+0xc>)
 80296ea:	4601      	mov	r1, r0
 80296ec:	6818      	ldr	r0, [r3, #0]
 80296ee:	f000 b80b 	b.w	8029708 <_free_r>
 80296f2:	bf00      	nop
 80296f4:	200000c4 	.word	0x200000c4

080296f8 <memset>:
 80296f8:	4402      	add	r2, r0
 80296fa:	4603      	mov	r3, r0
 80296fc:	4293      	cmp	r3, r2
 80296fe:	d100      	bne.n	8029702 <memset+0xa>
 8029700:	4770      	bx	lr
 8029702:	f803 1b01 	strb.w	r1, [r3], #1
 8029706:	e7f9      	b.n	80296fc <memset+0x4>

08029708 <_free_r>:
 8029708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802970a:	2900      	cmp	r1, #0
 802970c:	d043      	beq.n	8029796 <_free_r+0x8e>
 802970e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029712:	1f0c      	subs	r4, r1, #4
 8029714:	9001      	str	r0, [sp, #4]
 8029716:	2b00      	cmp	r3, #0
 8029718:	bfb8      	it	lt
 802971a:	18e4      	addlt	r4, r4, r3
 802971c:	f001 f834 	bl	802a788 <__malloc_lock>
 8029720:	4a1e      	ldr	r2, [pc, #120]	; (802979c <_free_r+0x94>)
 8029722:	9801      	ldr	r0, [sp, #4]
 8029724:	6813      	ldr	r3, [r2, #0]
 8029726:	b933      	cbnz	r3, 8029736 <_free_r+0x2e>
 8029728:	6063      	str	r3, [r4, #4]
 802972a:	6014      	str	r4, [r2, #0]
 802972c:	b003      	add	sp, #12
 802972e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029732:	f001 b82f 	b.w	802a794 <__malloc_unlock>
 8029736:	42a3      	cmp	r3, r4
 8029738:	d908      	bls.n	802974c <_free_r+0x44>
 802973a:	6825      	ldr	r5, [r4, #0]
 802973c:	1961      	adds	r1, r4, r5
 802973e:	428b      	cmp	r3, r1
 8029740:	bf01      	itttt	eq
 8029742:	6819      	ldreq	r1, [r3, #0]
 8029744:	685b      	ldreq	r3, [r3, #4]
 8029746:	1949      	addeq	r1, r1, r5
 8029748:	6021      	streq	r1, [r4, #0]
 802974a:	e7ed      	b.n	8029728 <_free_r+0x20>
 802974c:	461a      	mov	r2, r3
 802974e:	685b      	ldr	r3, [r3, #4]
 8029750:	b10b      	cbz	r3, 8029756 <_free_r+0x4e>
 8029752:	42a3      	cmp	r3, r4
 8029754:	d9fa      	bls.n	802974c <_free_r+0x44>
 8029756:	6811      	ldr	r1, [r2, #0]
 8029758:	1855      	adds	r5, r2, r1
 802975a:	42a5      	cmp	r5, r4
 802975c:	d10b      	bne.n	8029776 <_free_r+0x6e>
 802975e:	6824      	ldr	r4, [r4, #0]
 8029760:	4421      	add	r1, r4
 8029762:	1854      	adds	r4, r2, r1
 8029764:	6011      	str	r1, [r2, #0]
 8029766:	42a3      	cmp	r3, r4
 8029768:	d1e0      	bne.n	802972c <_free_r+0x24>
 802976a:	681c      	ldr	r4, [r3, #0]
 802976c:	685b      	ldr	r3, [r3, #4]
 802976e:	4421      	add	r1, r4
 8029770:	6053      	str	r3, [r2, #4]
 8029772:	6011      	str	r1, [r2, #0]
 8029774:	e7da      	b.n	802972c <_free_r+0x24>
 8029776:	d902      	bls.n	802977e <_free_r+0x76>
 8029778:	230c      	movs	r3, #12
 802977a:	6003      	str	r3, [r0, #0]
 802977c:	e7d6      	b.n	802972c <_free_r+0x24>
 802977e:	6825      	ldr	r5, [r4, #0]
 8029780:	1961      	adds	r1, r4, r5
 8029782:	428b      	cmp	r3, r1
 8029784:	bf02      	ittt	eq
 8029786:	6819      	ldreq	r1, [r3, #0]
 8029788:	685b      	ldreq	r3, [r3, #4]
 802978a:	1949      	addeq	r1, r1, r5
 802978c:	6063      	str	r3, [r4, #4]
 802978e:	bf08      	it	eq
 8029790:	6021      	streq	r1, [r4, #0]
 8029792:	6054      	str	r4, [r2, #4]
 8029794:	e7ca      	b.n	802972c <_free_r+0x24>
 8029796:	b003      	add	sp, #12
 8029798:	bd30      	pop	{r4, r5, pc}
 802979a:	bf00      	nop
 802979c:	2019878c 	.word	0x2019878c

080297a0 <sbrk_aligned>:
 80297a0:	b570      	push	{r4, r5, r6, lr}
 80297a2:	4e0e      	ldr	r6, [pc, #56]	; (80297dc <sbrk_aligned+0x3c>)
 80297a4:	460c      	mov	r4, r1
 80297a6:	4605      	mov	r5, r0
 80297a8:	6831      	ldr	r1, [r6, #0]
 80297aa:	b911      	cbnz	r1, 80297b2 <sbrk_aligned+0x12>
 80297ac:	f000 fc48 	bl	802a040 <_sbrk_r>
 80297b0:	6030      	str	r0, [r6, #0]
 80297b2:	4621      	mov	r1, r4
 80297b4:	4628      	mov	r0, r5
 80297b6:	f000 fc43 	bl	802a040 <_sbrk_r>
 80297ba:	1c43      	adds	r3, r0, #1
 80297bc:	d00a      	beq.n	80297d4 <sbrk_aligned+0x34>
 80297be:	1cc4      	adds	r4, r0, #3
 80297c0:	f024 0403 	bic.w	r4, r4, #3
 80297c4:	42a0      	cmp	r0, r4
 80297c6:	d007      	beq.n	80297d8 <sbrk_aligned+0x38>
 80297c8:	1a21      	subs	r1, r4, r0
 80297ca:	4628      	mov	r0, r5
 80297cc:	f000 fc38 	bl	802a040 <_sbrk_r>
 80297d0:	3001      	adds	r0, #1
 80297d2:	d101      	bne.n	80297d8 <sbrk_aligned+0x38>
 80297d4:	f04f 34ff 	mov.w	r4, #4294967295
 80297d8:	4620      	mov	r0, r4
 80297da:	bd70      	pop	{r4, r5, r6, pc}
 80297dc:	20198790 	.word	0x20198790

080297e0 <_malloc_r>:
 80297e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80297e4:	1ccd      	adds	r5, r1, #3
 80297e6:	4607      	mov	r7, r0
 80297e8:	f025 0503 	bic.w	r5, r5, #3
 80297ec:	3508      	adds	r5, #8
 80297ee:	2d0c      	cmp	r5, #12
 80297f0:	bf38      	it	cc
 80297f2:	250c      	movcc	r5, #12
 80297f4:	2d00      	cmp	r5, #0
 80297f6:	db01      	blt.n	80297fc <_malloc_r+0x1c>
 80297f8:	42a9      	cmp	r1, r5
 80297fa:	d905      	bls.n	8029808 <_malloc_r+0x28>
 80297fc:	230c      	movs	r3, #12
 80297fe:	2600      	movs	r6, #0
 8029800:	603b      	str	r3, [r7, #0]
 8029802:	4630      	mov	r0, r6
 8029804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029808:	4e2e      	ldr	r6, [pc, #184]	; (80298c4 <_malloc_r+0xe4>)
 802980a:	f000 ffbd 	bl	802a788 <__malloc_lock>
 802980e:	6833      	ldr	r3, [r6, #0]
 8029810:	461c      	mov	r4, r3
 8029812:	bb34      	cbnz	r4, 8029862 <_malloc_r+0x82>
 8029814:	4629      	mov	r1, r5
 8029816:	4638      	mov	r0, r7
 8029818:	f7ff ffc2 	bl	80297a0 <sbrk_aligned>
 802981c:	1c43      	adds	r3, r0, #1
 802981e:	4604      	mov	r4, r0
 8029820:	d14d      	bne.n	80298be <_malloc_r+0xde>
 8029822:	6834      	ldr	r4, [r6, #0]
 8029824:	4626      	mov	r6, r4
 8029826:	2e00      	cmp	r6, #0
 8029828:	d140      	bne.n	80298ac <_malloc_r+0xcc>
 802982a:	6823      	ldr	r3, [r4, #0]
 802982c:	4631      	mov	r1, r6
 802982e:	4638      	mov	r0, r7
 8029830:	eb04 0803 	add.w	r8, r4, r3
 8029834:	f000 fc04 	bl	802a040 <_sbrk_r>
 8029838:	4580      	cmp	r8, r0
 802983a:	d13a      	bne.n	80298b2 <_malloc_r+0xd2>
 802983c:	6821      	ldr	r1, [r4, #0]
 802983e:	3503      	adds	r5, #3
 8029840:	4638      	mov	r0, r7
 8029842:	1a6d      	subs	r5, r5, r1
 8029844:	f025 0503 	bic.w	r5, r5, #3
 8029848:	3508      	adds	r5, #8
 802984a:	2d0c      	cmp	r5, #12
 802984c:	bf38      	it	cc
 802984e:	250c      	movcc	r5, #12
 8029850:	4629      	mov	r1, r5
 8029852:	f7ff ffa5 	bl	80297a0 <sbrk_aligned>
 8029856:	3001      	adds	r0, #1
 8029858:	d02b      	beq.n	80298b2 <_malloc_r+0xd2>
 802985a:	6823      	ldr	r3, [r4, #0]
 802985c:	442b      	add	r3, r5
 802985e:	6023      	str	r3, [r4, #0]
 8029860:	e00e      	b.n	8029880 <_malloc_r+0xa0>
 8029862:	6822      	ldr	r2, [r4, #0]
 8029864:	1b52      	subs	r2, r2, r5
 8029866:	d41e      	bmi.n	80298a6 <_malloc_r+0xc6>
 8029868:	2a0b      	cmp	r2, #11
 802986a:	d916      	bls.n	802989a <_malloc_r+0xba>
 802986c:	1961      	adds	r1, r4, r5
 802986e:	42a3      	cmp	r3, r4
 8029870:	6025      	str	r5, [r4, #0]
 8029872:	bf18      	it	ne
 8029874:	6059      	strne	r1, [r3, #4]
 8029876:	6863      	ldr	r3, [r4, #4]
 8029878:	bf08      	it	eq
 802987a:	6031      	streq	r1, [r6, #0]
 802987c:	5162      	str	r2, [r4, r5]
 802987e:	604b      	str	r3, [r1, #4]
 8029880:	f104 060b 	add.w	r6, r4, #11
 8029884:	4638      	mov	r0, r7
 8029886:	f000 ff85 	bl	802a794 <__malloc_unlock>
 802988a:	1d23      	adds	r3, r4, #4
 802988c:	f026 0607 	bic.w	r6, r6, #7
 8029890:	1af2      	subs	r2, r6, r3
 8029892:	d0b6      	beq.n	8029802 <_malloc_r+0x22>
 8029894:	1b9b      	subs	r3, r3, r6
 8029896:	50a3      	str	r3, [r4, r2]
 8029898:	e7b3      	b.n	8029802 <_malloc_r+0x22>
 802989a:	6862      	ldr	r2, [r4, #4]
 802989c:	42a3      	cmp	r3, r4
 802989e:	bf0c      	ite	eq
 80298a0:	6032      	streq	r2, [r6, #0]
 80298a2:	605a      	strne	r2, [r3, #4]
 80298a4:	e7ec      	b.n	8029880 <_malloc_r+0xa0>
 80298a6:	4623      	mov	r3, r4
 80298a8:	6864      	ldr	r4, [r4, #4]
 80298aa:	e7b2      	b.n	8029812 <_malloc_r+0x32>
 80298ac:	4634      	mov	r4, r6
 80298ae:	6876      	ldr	r6, [r6, #4]
 80298b0:	e7b9      	b.n	8029826 <_malloc_r+0x46>
 80298b2:	230c      	movs	r3, #12
 80298b4:	4638      	mov	r0, r7
 80298b6:	603b      	str	r3, [r7, #0]
 80298b8:	f000 ff6c 	bl	802a794 <__malloc_unlock>
 80298bc:	e7a1      	b.n	8029802 <_malloc_r+0x22>
 80298be:	6025      	str	r5, [r4, #0]
 80298c0:	e7de      	b.n	8029880 <_malloc_r+0xa0>
 80298c2:	bf00      	nop
 80298c4:	2019878c 	.word	0x2019878c

080298c8 <__sfputc_r>:
 80298c8:	6893      	ldr	r3, [r2, #8]
 80298ca:	3b01      	subs	r3, #1
 80298cc:	2b00      	cmp	r3, #0
 80298ce:	6093      	str	r3, [r2, #8]
 80298d0:	b410      	push	{r4}
 80298d2:	da08      	bge.n	80298e6 <__sfputc_r+0x1e>
 80298d4:	6994      	ldr	r4, [r2, #24]
 80298d6:	42a3      	cmp	r3, r4
 80298d8:	db01      	blt.n	80298de <__sfputc_r+0x16>
 80298da:	290a      	cmp	r1, #10
 80298dc:	d103      	bne.n	80298e6 <__sfputc_r+0x1e>
 80298de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80298e2:	f000 bc01 	b.w	802a0e8 <__swbuf_r>
 80298e6:	6813      	ldr	r3, [r2, #0]
 80298e8:	1c58      	adds	r0, r3, #1
 80298ea:	6010      	str	r0, [r2, #0]
 80298ec:	4608      	mov	r0, r1
 80298ee:	7019      	strb	r1, [r3, #0]
 80298f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80298f4:	4770      	bx	lr

080298f6 <__sfputs_r>:
 80298f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80298f8:	4606      	mov	r6, r0
 80298fa:	460f      	mov	r7, r1
 80298fc:	4614      	mov	r4, r2
 80298fe:	18d5      	adds	r5, r2, r3
 8029900:	42ac      	cmp	r4, r5
 8029902:	d101      	bne.n	8029908 <__sfputs_r+0x12>
 8029904:	2000      	movs	r0, #0
 8029906:	e007      	b.n	8029918 <__sfputs_r+0x22>
 8029908:	463a      	mov	r2, r7
 802990a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802990e:	4630      	mov	r0, r6
 8029910:	f7ff ffda 	bl	80298c8 <__sfputc_r>
 8029914:	1c43      	adds	r3, r0, #1
 8029916:	d1f3      	bne.n	8029900 <__sfputs_r+0xa>
 8029918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802991c <_vfiprintf_r>:
 802991c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029920:	460d      	mov	r5, r1
 8029922:	b09d      	sub	sp, #116	; 0x74
 8029924:	4614      	mov	r4, r2
 8029926:	4698      	mov	r8, r3
 8029928:	4606      	mov	r6, r0
 802992a:	b118      	cbz	r0, 8029934 <_vfiprintf_r+0x18>
 802992c:	6983      	ldr	r3, [r0, #24]
 802992e:	b90b      	cbnz	r3, 8029934 <_vfiprintf_r+0x18>
 8029930:	f000 fe16 	bl	802a560 <__sinit>
 8029934:	4b89      	ldr	r3, [pc, #548]	; (8029b5c <_vfiprintf_r+0x240>)
 8029936:	429d      	cmp	r5, r3
 8029938:	d11b      	bne.n	8029972 <_vfiprintf_r+0x56>
 802993a:	6875      	ldr	r5, [r6, #4]
 802993c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802993e:	07d9      	lsls	r1, r3, #31
 8029940:	d405      	bmi.n	802994e <_vfiprintf_r+0x32>
 8029942:	89ab      	ldrh	r3, [r5, #12]
 8029944:	059a      	lsls	r2, r3, #22
 8029946:	d402      	bmi.n	802994e <_vfiprintf_r+0x32>
 8029948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802994a:	f000 fea7 	bl	802a69c <__retarget_lock_acquire_recursive>
 802994e:	89ab      	ldrh	r3, [r5, #12]
 8029950:	071b      	lsls	r3, r3, #28
 8029952:	d501      	bpl.n	8029958 <_vfiprintf_r+0x3c>
 8029954:	692b      	ldr	r3, [r5, #16]
 8029956:	b9eb      	cbnz	r3, 8029994 <_vfiprintf_r+0x78>
 8029958:	4629      	mov	r1, r5
 802995a:	4630      	mov	r0, r6
 802995c:	f000 fc16 	bl	802a18c <__swsetup_r>
 8029960:	b1c0      	cbz	r0, 8029994 <_vfiprintf_r+0x78>
 8029962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029964:	07dc      	lsls	r4, r3, #31
 8029966:	d50e      	bpl.n	8029986 <_vfiprintf_r+0x6a>
 8029968:	f04f 30ff 	mov.w	r0, #4294967295
 802996c:	b01d      	add	sp, #116	; 0x74
 802996e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029972:	4b7b      	ldr	r3, [pc, #492]	; (8029b60 <_vfiprintf_r+0x244>)
 8029974:	429d      	cmp	r5, r3
 8029976:	d101      	bne.n	802997c <_vfiprintf_r+0x60>
 8029978:	68b5      	ldr	r5, [r6, #8]
 802997a:	e7df      	b.n	802993c <_vfiprintf_r+0x20>
 802997c:	4b79      	ldr	r3, [pc, #484]	; (8029b64 <_vfiprintf_r+0x248>)
 802997e:	429d      	cmp	r5, r3
 8029980:	bf08      	it	eq
 8029982:	68f5      	ldreq	r5, [r6, #12]
 8029984:	e7da      	b.n	802993c <_vfiprintf_r+0x20>
 8029986:	89ab      	ldrh	r3, [r5, #12]
 8029988:	0598      	lsls	r0, r3, #22
 802998a:	d4ed      	bmi.n	8029968 <_vfiprintf_r+0x4c>
 802998c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802998e:	f000 fe87 	bl	802a6a0 <__retarget_lock_release_recursive>
 8029992:	e7e9      	b.n	8029968 <_vfiprintf_r+0x4c>
 8029994:	2300      	movs	r3, #0
 8029996:	f8cd 800c 	str.w	r8, [sp, #12]
 802999a:	f04f 0901 	mov.w	r9, #1
 802999e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8029b68 <_vfiprintf_r+0x24c>
 80299a2:	9309      	str	r3, [sp, #36]	; 0x24
 80299a4:	2320      	movs	r3, #32
 80299a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80299aa:	2330      	movs	r3, #48	; 0x30
 80299ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80299b0:	4623      	mov	r3, r4
 80299b2:	469a      	mov	sl, r3
 80299b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80299b8:	b10a      	cbz	r2, 80299be <_vfiprintf_r+0xa2>
 80299ba:	2a25      	cmp	r2, #37	; 0x25
 80299bc:	d1f9      	bne.n	80299b2 <_vfiprintf_r+0x96>
 80299be:	ebba 0b04 	subs.w	fp, sl, r4
 80299c2:	d00b      	beq.n	80299dc <_vfiprintf_r+0xc0>
 80299c4:	465b      	mov	r3, fp
 80299c6:	4622      	mov	r2, r4
 80299c8:	4629      	mov	r1, r5
 80299ca:	4630      	mov	r0, r6
 80299cc:	f7ff ff93 	bl	80298f6 <__sfputs_r>
 80299d0:	3001      	adds	r0, #1
 80299d2:	f000 80aa 	beq.w	8029b2a <_vfiprintf_r+0x20e>
 80299d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80299d8:	445a      	add	r2, fp
 80299da:	9209      	str	r2, [sp, #36]	; 0x24
 80299dc:	f89a 3000 	ldrb.w	r3, [sl]
 80299e0:	2b00      	cmp	r3, #0
 80299e2:	f000 80a2 	beq.w	8029b2a <_vfiprintf_r+0x20e>
 80299e6:	2300      	movs	r3, #0
 80299e8:	f04f 32ff 	mov.w	r2, #4294967295
 80299ec:	f10a 0a01 	add.w	sl, sl, #1
 80299f0:	9304      	str	r3, [sp, #16]
 80299f2:	9307      	str	r3, [sp, #28]
 80299f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80299f8:	931a      	str	r3, [sp, #104]	; 0x68
 80299fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80299fe:	4654      	mov	r4, sl
 8029a00:	2205      	movs	r2, #5
 8029a02:	4859      	ldr	r0, [pc, #356]	; (8029b68 <_vfiprintf_r+0x24c>)
 8029a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029a08:	f000 feb0 	bl	802a76c <memchr>
 8029a0c:	9a04      	ldr	r2, [sp, #16]
 8029a0e:	b9d8      	cbnz	r0, 8029a48 <_vfiprintf_r+0x12c>
 8029a10:	06d1      	lsls	r1, r2, #27
 8029a12:	bf44      	itt	mi
 8029a14:	2320      	movmi	r3, #32
 8029a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029a1a:	0713      	lsls	r3, r2, #28
 8029a1c:	bf44      	itt	mi
 8029a1e:	232b      	movmi	r3, #43	; 0x2b
 8029a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029a24:	f89a 3000 	ldrb.w	r3, [sl]
 8029a28:	2b2a      	cmp	r3, #42	; 0x2a
 8029a2a:	d015      	beq.n	8029a58 <_vfiprintf_r+0x13c>
 8029a2c:	9a07      	ldr	r2, [sp, #28]
 8029a2e:	4654      	mov	r4, sl
 8029a30:	2000      	movs	r0, #0
 8029a32:	f04f 0c0a 	mov.w	ip, #10
 8029a36:	4621      	mov	r1, r4
 8029a38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029a3c:	3b30      	subs	r3, #48	; 0x30
 8029a3e:	2b09      	cmp	r3, #9
 8029a40:	d94e      	bls.n	8029ae0 <_vfiprintf_r+0x1c4>
 8029a42:	b1b0      	cbz	r0, 8029a72 <_vfiprintf_r+0x156>
 8029a44:	9207      	str	r2, [sp, #28]
 8029a46:	e014      	b.n	8029a72 <_vfiprintf_r+0x156>
 8029a48:	eba0 0308 	sub.w	r3, r0, r8
 8029a4c:	46a2      	mov	sl, r4
 8029a4e:	fa09 f303 	lsl.w	r3, r9, r3
 8029a52:	4313      	orrs	r3, r2
 8029a54:	9304      	str	r3, [sp, #16]
 8029a56:	e7d2      	b.n	80299fe <_vfiprintf_r+0xe2>
 8029a58:	9b03      	ldr	r3, [sp, #12]
 8029a5a:	1d19      	adds	r1, r3, #4
 8029a5c:	681b      	ldr	r3, [r3, #0]
 8029a5e:	2b00      	cmp	r3, #0
 8029a60:	9103      	str	r1, [sp, #12]
 8029a62:	bfbb      	ittet	lt
 8029a64:	425b      	neglt	r3, r3
 8029a66:	f042 0202 	orrlt.w	r2, r2, #2
 8029a6a:	9307      	strge	r3, [sp, #28]
 8029a6c:	9307      	strlt	r3, [sp, #28]
 8029a6e:	bfb8      	it	lt
 8029a70:	9204      	strlt	r2, [sp, #16]
 8029a72:	7823      	ldrb	r3, [r4, #0]
 8029a74:	2b2e      	cmp	r3, #46	; 0x2e
 8029a76:	d10c      	bne.n	8029a92 <_vfiprintf_r+0x176>
 8029a78:	7863      	ldrb	r3, [r4, #1]
 8029a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8029a7c:	d135      	bne.n	8029aea <_vfiprintf_r+0x1ce>
 8029a7e:	9b03      	ldr	r3, [sp, #12]
 8029a80:	3402      	adds	r4, #2
 8029a82:	1d1a      	adds	r2, r3, #4
 8029a84:	681b      	ldr	r3, [r3, #0]
 8029a86:	2b00      	cmp	r3, #0
 8029a88:	9203      	str	r2, [sp, #12]
 8029a8a:	bfb8      	it	lt
 8029a8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8029a90:	9305      	str	r3, [sp, #20]
 8029a92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8029b78 <_vfiprintf_r+0x25c>
 8029a96:	2203      	movs	r2, #3
 8029a98:	7821      	ldrb	r1, [r4, #0]
 8029a9a:	4650      	mov	r0, sl
 8029a9c:	f000 fe66 	bl	802a76c <memchr>
 8029aa0:	b140      	cbz	r0, 8029ab4 <_vfiprintf_r+0x198>
 8029aa2:	2340      	movs	r3, #64	; 0x40
 8029aa4:	eba0 000a 	sub.w	r0, r0, sl
 8029aa8:	3401      	adds	r4, #1
 8029aaa:	fa03 f000 	lsl.w	r0, r3, r0
 8029aae:	9b04      	ldr	r3, [sp, #16]
 8029ab0:	4303      	orrs	r3, r0
 8029ab2:	9304      	str	r3, [sp, #16]
 8029ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029ab8:	2206      	movs	r2, #6
 8029aba:	482c      	ldr	r0, [pc, #176]	; (8029b6c <_vfiprintf_r+0x250>)
 8029abc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029ac0:	f000 fe54 	bl	802a76c <memchr>
 8029ac4:	2800      	cmp	r0, #0
 8029ac6:	d03f      	beq.n	8029b48 <_vfiprintf_r+0x22c>
 8029ac8:	4b29      	ldr	r3, [pc, #164]	; (8029b70 <_vfiprintf_r+0x254>)
 8029aca:	bb1b      	cbnz	r3, 8029b14 <_vfiprintf_r+0x1f8>
 8029acc:	9b03      	ldr	r3, [sp, #12]
 8029ace:	3307      	adds	r3, #7
 8029ad0:	f023 0307 	bic.w	r3, r3, #7
 8029ad4:	3308      	adds	r3, #8
 8029ad6:	9303      	str	r3, [sp, #12]
 8029ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029ada:	443b      	add	r3, r7
 8029adc:	9309      	str	r3, [sp, #36]	; 0x24
 8029ade:	e767      	b.n	80299b0 <_vfiprintf_r+0x94>
 8029ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8029ae4:	460c      	mov	r4, r1
 8029ae6:	2001      	movs	r0, #1
 8029ae8:	e7a5      	b.n	8029a36 <_vfiprintf_r+0x11a>
 8029aea:	2300      	movs	r3, #0
 8029aec:	3401      	adds	r4, #1
 8029aee:	f04f 0c0a 	mov.w	ip, #10
 8029af2:	4619      	mov	r1, r3
 8029af4:	9305      	str	r3, [sp, #20]
 8029af6:	4620      	mov	r0, r4
 8029af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029afc:	3a30      	subs	r2, #48	; 0x30
 8029afe:	2a09      	cmp	r2, #9
 8029b00:	d903      	bls.n	8029b0a <_vfiprintf_r+0x1ee>
 8029b02:	2b00      	cmp	r3, #0
 8029b04:	d0c5      	beq.n	8029a92 <_vfiprintf_r+0x176>
 8029b06:	9105      	str	r1, [sp, #20]
 8029b08:	e7c3      	b.n	8029a92 <_vfiprintf_r+0x176>
 8029b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8029b0e:	4604      	mov	r4, r0
 8029b10:	2301      	movs	r3, #1
 8029b12:	e7f0      	b.n	8029af6 <_vfiprintf_r+0x1da>
 8029b14:	ab03      	add	r3, sp, #12
 8029b16:	462a      	mov	r2, r5
 8029b18:	a904      	add	r1, sp, #16
 8029b1a:	4630      	mov	r0, r6
 8029b1c:	9300      	str	r3, [sp, #0]
 8029b1e:	4b15      	ldr	r3, [pc, #84]	; (8029b74 <_vfiprintf_r+0x258>)
 8029b20:	e000      	b.n	8029b24 <_vfiprintf_r+0x208>
 8029b22:	bf00      	nop
 8029b24:	4607      	mov	r7, r0
 8029b26:	1c78      	adds	r0, r7, #1
 8029b28:	d1d6      	bne.n	8029ad8 <_vfiprintf_r+0x1bc>
 8029b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029b2c:	07d9      	lsls	r1, r3, #31
 8029b2e:	d405      	bmi.n	8029b3c <_vfiprintf_r+0x220>
 8029b30:	89ab      	ldrh	r3, [r5, #12]
 8029b32:	059a      	lsls	r2, r3, #22
 8029b34:	d402      	bmi.n	8029b3c <_vfiprintf_r+0x220>
 8029b36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029b38:	f000 fdb2 	bl	802a6a0 <__retarget_lock_release_recursive>
 8029b3c:	89ab      	ldrh	r3, [r5, #12]
 8029b3e:	065b      	lsls	r3, r3, #25
 8029b40:	f53f af12 	bmi.w	8029968 <_vfiprintf_r+0x4c>
 8029b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029b46:	e711      	b.n	802996c <_vfiprintf_r+0x50>
 8029b48:	ab03      	add	r3, sp, #12
 8029b4a:	462a      	mov	r2, r5
 8029b4c:	a904      	add	r1, sp, #16
 8029b4e:	4630      	mov	r0, r6
 8029b50:	9300      	str	r3, [sp, #0]
 8029b52:	4b08      	ldr	r3, [pc, #32]	; (8029b74 <_vfiprintf_r+0x258>)
 8029b54:	f000 f882 	bl	8029c5c <_printf_i>
 8029b58:	e7e4      	b.n	8029b24 <_vfiprintf_r+0x208>
 8029b5a:	bf00      	nop
 8029b5c:	0802d928 	.word	0x0802d928
 8029b60:	0802d948 	.word	0x0802d948
 8029b64:	0802d908 	.word	0x0802d908
 8029b68:	0802d85c 	.word	0x0802d85c
 8029b6c:	0802d866 	.word	0x0802d866
 8029b70:	00000000 	.word	0x00000000
 8029b74:	080298f7 	.word	0x080298f7
 8029b78:	0802d862 	.word	0x0802d862

08029b7c <_printf_common>:
 8029b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029b80:	4616      	mov	r6, r2
 8029b82:	4699      	mov	r9, r3
 8029b84:	688a      	ldr	r2, [r1, #8]
 8029b86:	4607      	mov	r7, r0
 8029b88:	690b      	ldr	r3, [r1, #16]
 8029b8a:	460c      	mov	r4, r1
 8029b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8029b90:	4293      	cmp	r3, r2
 8029b92:	bfb8      	it	lt
 8029b94:	4613      	movlt	r3, r2
 8029b96:	6033      	str	r3, [r6, #0]
 8029b98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8029b9c:	b10a      	cbz	r2, 8029ba2 <_printf_common+0x26>
 8029b9e:	3301      	adds	r3, #1
 8029ba0:	6033      	str	r3, [r6, #0]
 8029ba2:	6823      	ldr	r3, [r4, #0]
 8029ba4:	0699      	lsls	r1, r3, #26
 8029ba6:	bf42      	ittt	mi
 8029ba8:	6833      	ldrmi	r3, [r6, #0]
 8029baa:	3302      	addmi	r3, #2
 8029bac:	6033      	strmi	r3, [r6, #0]
 8029bae:	6825      	ldr	r5, [r4, #0]
 8029bb0:	f015 0506 	ands.w	r5, r5, #6
 8029bb4:	d106      	bne.n	8029bc4 <_printf_common+0x48>
 8029bb6:	f104 0a19 	add.w	sl, r4, #25
 8029bba:	68e3      	ldr	r3, [r4, #12]
 8029bbc:	6832      	ldr	r2, [r6, #0]
 8029bbe:	1a9b      	subs	r3, r3, r2
 8029bc0:	42ab      	cmp	r3, r5
 8029bc2:	dc29      	bgt.n	8029c18 <_printf_common+0x9c>
 8029bc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8029bc8:	1e13      	subs	r3, r2, #0
 8029bca:	6822      	ldr	r2, [r4, #0]
 8029bcc:	bf18      	it	ne
 8029bce:	2301      	movne	r3, #1
 8029bd0:	0692      	lsls	r2, r2, #26
 8029bd2:	d42e      	bmi.n	8029c32 <_printf_common+0xb6>
 8029bd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8029bd8:	4649      	mov	r1, r9
 8029bda:	4638      	mov	r0, r7
 8029bdc:	47c0      	blx	r8
 8029bde:	3001      	adds	r0, #1
 8029be0:	d021      	beq.n	8029c26 <_printf_common+0xaa>
 8029be2:	6823      	ldr	r3, [r4, #0]
 8029be4:	341a      	adds	r4, #26
 8029be6:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8029bea:	f003 0306 	and.w	r3, r3, #6
 8029bee:	6832      	ldr	r2, [r6, #0]
 8029bf0:	2600      	movs	r6, #0
 8029bf2:	2b04      	cmp	r3, #4
 8029bf4:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8029bf8:	bf08      	it	eq
 8029bfa:	1aad      	subeq	r5, r5, r2
 8029bfc:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8029c00:	bf14      	ite	ne
 8029c02:	2500      	movne	r5, #0
 8029c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029c08:	4293      	cmp	r3, r2
 8029c0a:	bfc4      	itt	gt
 8029c0c:	1a9b      	subgt	r3, r3, r2
 8029c0e:	18ed      	addgt	r5, r5, r3
 8029c10:	42b5      	cmp	r5, r6
 8029c12:	d11a      	bne.n	8029c4a <_printf_common+0xce>
 8029c14:	2000      	movs	r0, #0
 8029c16:	e008      	b.n	8029c2a <_printf_common+0xae>
 8029c18:	2301      	movs	r3, #1
 8029c1a:	4652      	mov	r2, sl
 8029c1c:	4649      	mov	r1, r9
 8029c1e:	4638      	mov	r0, r7
 8029c20:	47c0      	blx	r8
 8029c22:	3001      	adds	r0, #1
 8029c24:	d103      	bne.n	8029c2e <_printf_common+0xb2>
 8029c26:	f04f 30ff 	mov.w	r0, #4294967295
 8029c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029c2e:	3501      	adds	r5, #1
 8029c30:	e7c3      	b.n	8029bba <_printf_common+0x3e>
 8029c32:	18e1      	adds	r1, r4, r3
 8029c34:	1c5a      	adds	r2, r3, #1
 8029c36:	2030      	movs	r0, #48	; 0x30
 8029c38:	3302      	adds	r3, #2
 8029c3a:	4422      	add	r2, r4
 8029c3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8029c40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8029c44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8029c48:	e7c4      	b.n	8029bd4 <_printf_common+0x58>
 8029c4a:	2301      	movs	r3, #1
 8029c4c:	4622      	mov	r2, r4
 8029c4e:	4649      	mov	r1, r9
 8029c50:	4638      	mov	r0, r7
 8029c52:	47c0      	blx	r8
 8029c54:	3001      	adds	r0, #1
 8029c56:	d0e6      	beq.n	8029c26 <_printf_common+0xaa>
 8029c58:	3601      	adds	r6, #1
 8029c5a:	e7d9      	b.n	8029c10 <_printf_common+0x94>

08029c5c <_printf_i>:
 8029c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029c60:	7e0f      	ldrb	r7, [r1, #24]
 8029c62:	4691      	mov	r9, r2
 8029c64:	4680      	mov	r8, r0
 8029c66:	460c      	mov	r4, r1
 8029c68:	2f78      	cmp	r7, #120	; 0x78
 8029c6a:	469a      	mov	sl, r3
 8029c6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029c6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8029c72:	d807      	bhi.n	8029c84 <_printf_i+0x28>
 8029c74:	2f62      	cmp	r7, #98	; 0x62
 8029c76:	d80a      	bhi.n	8029c8e <_printf_i+0x32>
 8029c78:	2f00      	cmp	r7, #0
 8029c7a:	f000 80d8 	beq.w	8029e2e <_printf_i+0x1d2>
 8029c7e:	2f58      	cmp	r7, #88	; 0x58
 8029c80:	f000 80a3 	beq.w	8029dca <_printf_i+0x16e>
 8029c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029c88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8029c8c:	e03a      	b.n	8029d04 <_printf_i+0xa8>
 8029c8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8029c92:	2b15      	cmp	r3, #21
 8029c94:	d8f6      	bhi.n	8029c84 <_printf_i+0x28>
 8029c96:	a101      	add	r1, pc, #4	; (adr r1, 8029c9c <_printf_i+0x40>)
 8029c98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8029c9c:	08029cf5 	.word	0x08029cf5
 8029ca0:	08029d09 	.word	0x08029d09
 8029ca4:	08029c85 	.word	0x08029c85
 8029ca8:	08029c85 	.word	0x08029c85
 8029cac:	08029c85 	.word	0x08029c85
 8029cb0:	08029c85 	.word	0x08029c85
 8029cb4:	08029d09 	.word	0x08029d09
 8029cb8:	08029c85 	.word	0x08029c85
 8029cbc:	08029c85 	.word	0x08029c85
 8029cc0:	08029c85 	.word	0x08029c85
 8029cc4:	08029c85 	.word	0x08029c85
 8029cc8:	08029e15 	.word	0x08029e15
 8029ccc:	08029d39 	.word	0x08029d39
 8029cd0:	08029df7 	.word	0x08029df7
 8029cd4:	08029c85 	.word	0x08029c85
 8029cd8:	08029c85 	.word	0x08029c85
 8029cdc:	08029e37 	.word	0x08029e37
 8029ce0:	08029c85 	.word	0x08029c85
 8029ce4:	08029d39 	.word	0x08029d39
 8029ce8:	08029c85 	.word	0x08029c85
 8029cec:	08029c85 	.word	0x08029c85
 8029cf0:	08029dff 	.word	0x08029dff
 8029cf4:	682b      	ldr	r3, [r5, #0]
 8029cf6:	1d1a      	adds	r2, r3, #4
 8029cf8:	681b      	ldr	r3, [r3, #0]
 8029cfa:	602a      	str	r2, [r5, #0]
 8029cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029d00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8029d04:	2301      	movs	r3, #1
 8029d06:	e0a3      	b.n	8029e50 <_printf_i+0x1f4>
 8029d08:	6820      	ldr	r0, [r4, #0]
 8029d0a:	6829      	ldr	r1, [r5, #0]
 8029d0c:	0606      	lsls	r6, r0, #24
 8029d0e:	f101 0304 	add.w	r3, r1, #4
 8029d12:	d50a      	bpl.n	8029d2a <_printf_i+0xce>
 8029d14:	680e      	ldr	r6, [r1, #0]
 8029d16:	602b      	str	r3, [r5, #0]
 8029d18:	2e00      	cmp	r6, #0
 8029d1a:	da03      	bge.n	8029d24 <_printf_i+0xc8>
 8029d1c:	232d      	movs	r3, #45	; 0x2d
 8029d1e:	4276      	negs	r6, r6
 8029d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029d24:	485e      	ldr	r0, [pc, #376]	; (8029ea0 <_printf_i+0x244>)
 8029d26:	230a      	movs	r3, #10
 8029d28:	e019      	b.n	8029d5e <_printf_i+0x102>
 8029d2a:	680e      	ldr	r6, [r1, #0]
 8029d2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8029d30:	602b      	str	r3, [r5, #0]
 8029d32:	bf18      	it	ne
 8029d34:	b236      	sxthne	r6, r6
 8029d36:	e7ef      	b.n	8029d18 <_printf_i+0xbc>
 8029d38:	682b      	ldr	r3, [r5, #0]
 8029d3a:	6820      	ldr	r0, [r4, #0]
 8029d3c:	1d19      	adds	r1, r3, #4
 8029d3e:	6029      	str	r1, [r5, #0]
 8029d40:	0601      	lsls	r1, r0, #24
 8029d42:	d501      	bpl.n	8029d48 <_printf_i+0xec>
 8029d44:	681e      	ldr	r6, [r3, #0]
 8029d46:	e002      	b.n	8029d4e <_printf_i+0xf2>
 8029d48:	0646      	lsls	r6, r0, #25
 8029d4a:	d5fb      	bpl.n	8029d44 <_printf_i+0xe8>
 8029d4c:	881e      	ldrh	r6, [r3, #0]
 8029d4e:	2f6f      	cmp	r7, #111	; 0x6f
 8029d50:	4853      	ldr	r0, [pc, #332]	; (8029ea0 <_printf_i+0x244>)
 8029d52:	bf0c      	ite	eq
 8029d54:	2308      	moveq	r3, #8
 8029d56:	230a      	movne	r3, #10
 8029d58:	2100      	movs	r1, #0
 8029d5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8029d5e:	6865      	ldr	r5, [r4, #4]
 8029d60:	2d00      	cmp	r5, #0
 8029d62:	60a5      	str	r5, [r4, #8]
 8029d64:	bfa2      	ittt	ge
 8029d66:	6821      	ldrge	r1, [r4, #0]
 8029d68:	f021 0104 	bicge.w	r1, r1, #4
 8029d6c:	6021      	strge	r1, [r4, #0]
 8029d6e:	b90e      	cbnz	r6, 8029d74 <_printf_i+0x118>
 8029d70:	2d00      	cmp	r5, #0
 8029d72:	d04d      	beq.n	8029e10 <_printf_i+0x1b4>
 8029d74:	4615      	mov	r5, r2
 8029d76:	fbb6 f1f3 	udiv	r1, r6, r3
 8029d7a:	fb03 6711 	mls	r7, r3, r1, r6
 8029d7e:	5dc7      	ldrb	r7, [r0, r7]
 8029d80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8029d84:	4637      	mov	r7, r6
 8029d86:	460e      	mov	r6, r1
 8029d88:	42bb      	cmp	r3, r7
 8029d8a:	d9f4      	bls.n	8029d76 <_printf_i+0x11a>
 8029d8c:	2b08      	cmp	r3, #8
 8029d8e:	d10b      	bne.n	8029da8 <_printf_i+0x14c>
 8029d90:	6823      	ldr	r3, [r4, #0]
 8029d92:	07de      	lsls	r6, r3, #31
 8029d94:	d508      	bpl.n	8029da8 <_printf_i+0x14c>
 8029d96:	6923      	ldr	r3, [r4, #16]
 8029d98:	6861      	ldr	r1, [r4, #4]
 8029d9a:	4299      	cmp	r1, r3
 8029d9c:	bfde      	ittt	le
 8029d9e:	2330      	movle	r3, #48	; 0x30
 8029da0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8029da4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8029da8:	1b52      	subs	r2, r2, r5
 8029daa:	6122      	str	r2, [r4, #16]
 8029dac:	464b      	mov	r3, r9
 8029dae:	aa03      	add	r2, sp, #12
 8029db0:	4621      	mov	r1, r4
 8029db2:	4640      	mov	r0, r8
 8029db4:	f8cd a000 	str.w	sl, [sp]
 8029db8:	f7ff fee0 	bl	8029b7c <_printf_common>
 8029dbc:	3001      	adds	r0, #1
 8029dbe:	d14c      	bne.n	8029e5a <_printf_i+0x1fe>
 8029dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8029dc4:	b004      	add	sp, #16
 8029dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029dca:	4835      	ldr	r0, [pc, #212]	; (8029ea0 <_printf_i+0x244>)
 8029dcc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8029dd0:	6829      	ldr	r1, [r5, #0]
 8029dd2:	6823      	ldr	r3, [r4, #0]
 8029dd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8029dd8:	6029      	str	r1, [r5, #0]
 8029dda:	061d      	lsls	r5, r3, #24
 8029ddc:	d514      	bpl.n	8029e08 <_printf_i+0x1ac>
 8029dde:	07df      	lsls	r7, r3, #31
 8029de0:	bf44      	itt	mi
 8029de2:	f043 0320 	orrmi.w	r3, r3, #32
 8029de6:	6023      	strmi	r3, [r4, #0]
 8029de8:	b91e      	cbnz	r6, 8029df2 <_printf_i+0x196>
 8029dea:	6823      	ldr	r3, [r4, #0]
 8029dec:	f023 0320 	bic.w	r3, r3, #32
 8029df0:	6023      	str	r3, [r4, #0]
 8029df2:	2310      	movs	r3, #16
 8029df4:	e7b0      	b.n	8029d58 <_printf_i+0xfc>
 8029df6:	6823      	ldr	r3, [r4, #0]
 8029df8:	f043 0320 	orr.w	r3, r3, #32
 8029dfc:	6023      	str	r3, [r4, #0]
 8029dfe:	2378      	movs	r3, #120	; 0x78
 8029e00:	4828      	ldr	r0, [pc, #160]	; (8029ea4 <_printf_i+0x248>)
 8029e02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8029e06:	e7e3      	b.n	8029dd0 <_printf_i+0x174>
 8029e08:	0659      	lsls	r1, r3, #25
 8029e0a:	bf48      	it	mi
 8029e0c:	b2b6      	uxthmi	r6, r6
 8029e0e:	e7e6      	b.n	8029dde <_printf_i+0x182>
 8029e10:	4615      	mov	r5, r2
 8029e12:	e7bb      	b.n	8029d8c <_printf_i+0x130>
 8029e14:	682b      	ldr	r3, [r5, #0]
 8029e16:	6826      	ldr	r6, [r4, #0]
 8029e18:	1d18      	adds	r0, r3, #4
 8029e1a:	6961      	ldr	r1, [r4, #20]
 8029e1c:	6028      	str	r0, [r5, #0]
 8029e1e:	0635      	lsls	r5, r6, #24
 8029e20:	681b      	ldr	r3, [r3, #0]
 8029e22:	d501      	bpl.n	8029e28 <_printf_i+0x1cc>
 8029e24:	6019      	str	r1, [r3, #0]
 8029e26:	e002      	b.n	8029e2e <_printf_i+0x1d2>
 8029e28:	0670      	lsls	r0, r6, #25
 8029e2a:	d5fb      	bpl.n	8029e24 <_printf_i+0x1c8>
 8029e2c:	8019      	strh	r1, [r3, #0]
 8029e2e:	2300      	movs	r3, #0
 8029e30:	4615      	mov	r5, r2
 8029e32:	6123      	str	r3, [r4, #16]
 8029e34:	e7ba      	b.n	8029dac <_printf_i+0x150>
 8029e36:	682b      	ldr	r3, [r5, #0]
 8029e38:	2100      	movs	r1, #0
 8029e3a:	1d1a      	adds	r2, r3, #4
 8029e3c:	602a      	str	r2, [r5, #0]
 8029e3e:	681d      	ldr	r5, [r3, #0]
 8029e40:	6862      	ldr	r2, [r4, #4]
 8029e42:	4628      	mov	r0, r5
 8029e44:	f000 fc92 	bl	802a76c <memchr>
 8029e48:	b108      	cbz	r0, 8029e4e <_printf_i+0x1f2>
 8029e4a:	1b40      	subs	r0, r0, r5
 8029e4c:	6060      	str	r0, [r4, #4]
 8029e4e:	6863      	ldr	r3, [r4, #4]
 8029e50:	6123      	str	r3, [r4, #16]
 8029e52:	2300      	movs	r3, #0
 8029e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029e58:	e7a8      	b.n	8029dac <_printf_i+0x150>
 8029e5a:	6923      	ldr	r3, [r4, #16]
 8029e5c:	462a      	mov	r2, r5
 8029e5e:	4649      	mov	r1, r9
 8029e60:	4640      	mov	r0, r8
 8029e62:	47d0      	blx	sl
 8029e64:	3001      	adds	r0, #1
 8029e66:	d0ab      	beq.n	8029dc0 <_printf_i+0x164>
 8029e68:	6823      	ldr	r3, [r4, #0]
 8029e6a:	079b      	lsls	r3, r3, #30
 8029e6c:	d413      	bmi.n	8029e96 <_printf_i+0x23a>
 8029e6e:	68e0      	ldr	r0, [r4, #12]
 8029e70:	9b03      	ldr	r3, [sp, #12]
 8029e72:	4298      	cmp	r0, r3
 8029e74:	bfb8      	it	lt
 8029e76:	4618      	movlt	r0, r3
 8029e78:	e7a4      	b.n	8029dc4 <_printf_i+0x168>
 8029e7a:	2301      	movs	r3, #1
 8029e7c:	4632      	mov	r2, r6
 8029e7e:	4649      	mov	r1, r9
 8029e80:	4640      	mov	r0, r8
 8029e82:	47d0      	blx	sl
 8029e84:	3001      	adds	r0, #1
 8029e86:	d09b      	beq.n	8029dc0 <_printf_i+0x164>
 8029e88:	3501      	adds	r5, #1
 8029e8a:	68e3      	ldr	r3, [r4, #12]
 8029e8c:	9903      	ldr	r1, [sp, #12]
 8029e8e:	1a5b      	subs	r3, r3, r1
 8029e90:	42ab      	cmp	r3, r5
 8029e92:	dcf2      	bgt.n	8029e7a <_printf_i+0x21e>
 8029e94:	e7eb      	b.n	8029e6e <_printf_i+0x212>
 8029e96:	2500      	movs	r5, #0
 8029e98:	f104 0619 	add.w	r6, r4, #25
 8029e9c:	e7f5      	b.n	8029e8a <_printf_i+0x22e>
 8029e9e:	bf00      	nop
 8029ea0:	0802d86d 	.word	0x0802d86d
 8029ea4:	0802d87e 	.word	0x0802d87e

08029ea8 <iprintf>:
 8029ea8:	b40f      	push	{r0, r1, r2, r3}
 8029eaa:	4b0a      	ldr	r3, [pc, #40]	; (8029ed4 <iprintf+0x2c>)
 8029eac:	b513      	push	{r0, r1, r4, lr}
 8029eae:	681c      	ldr	r4, [r3, #0]
 8029eb0:	b124      	cbz	r4, 8029ebc <iprintf+0x14>
 8029eb2:	69a3      	ldr	r3, [r4, #24]
 8029eb4:	b913      	cbnz	r3, 8029ebc <iprintf+0x14>
 8029eb6:	4620      	mov	r0, r4
 8029eb8:	f000 fb52 	bl	802a560 <__sinit>
 8029ebc:	ab05      	add	r3, sp, #20
 8029ebe:	9a04      	ldr	r2, [sp, #16]
 8029ec0:	68a1      	ldr	r1, [r4, #8]
 8029ec2:	4620      	mov	r0, r4
 8029ec4:	9301      	str	r3, [sp, #4]
 8029ec6:	f7ff fd29 	bl	802991c <_vfiprintf_r>
 8029eca:	b002      	add	sp, #8
 8029ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029ed0:	b004      	add	sp, #16
 8029ed2:	4770      	bx	lr
 8029ed4:	200000c4 	.word	0x200000c4

08029ed8 <_puts_r>:
 8029ed8:	b570      	push	{r4, r5, r6, lr}
 8029eda:	460e      	mov	r6, r1
 8029edc:	4605      	mov	r5, r0
 8029ede:	b118      	cbz	r0, 8029ee8 <_puts_r+0x10>
 8029ee0:	6983      	ldr	r3, [r0, #24]
 8029ee2:	b90b      	cbnz	r3, 8029ee8 <_puts_r+0x10>
 8029ee4:	f000 fb3c 	bl	802a560 <__sinit>
 8029ee8:	69ab      	ldr	r3, [r5, #24]
 8029eea:	68ac      	ldr	r4, [r5, #8]
 8029eec:	b913      	cbnz	r3, 8029ef4 <_puts_r+0x1c>
 8029eee:	4628      	mov	r0, r5
 8029ef0:	f000 fb36 	bl	802a560 <__sinit>
 8029ef4:	4b2c      	ldr	r3, [pc, #176]	; (8029fa8 <_puts_r+0xd0>)
 8029ef6:	429c      	cmp	r4, r3
 8029ef8:	d120      	bne.n	8029f3c <_puts_r+0x64>
 8029efa:	686c      	ldr	r4, [r5, #4]
 8029efc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8029efe:	07db      	lsls	r3, r3, #31
 8029f00:	d405      	bmi.n	8029f0e <_puts_r+0x36>
 8029f02:	89a3      	ldrh	r3, [r4, #12]
 8029f04:	0598      	lsls	r0, r3, #22
 8029f06:	d402      	bmi.n	8029f0e <_puts_r+0x36>
 8029f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8029f0a:	f000 fbc7 	bl	802a69c <__retarget_lock_acquire_recursive>
 8029f0e:	89a3      	ldrh	r3, [r4, #12]
 8029f10:	0719      	lsls	r1, r3, #28
 8029f12:	d51d      	bpl.n	8029f50 <_puts_r+0x78>
 8029f14:	6923      	ldr	r3, [r4, #16]
 8029f16:	b1db      	cbz	r3, 8029f50 <_puts_r+0x78>
 8029f18:	3e01      	subs	r6, #1
 8029f1a:	68a3      	ldr	r3, [r4, #8]
 8029f1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8029f20:	3b01      	subs	r3, #1
 8029f22:	60a3      	str	r3, [r4, #8]
 8029f24:	bb39      	cbnz	r1, 8029f76 <_puts_r+0x9e>
 8029f26:	2b00      	cmp	r3, #0
 8029f28:	da38      	bge.n	8029f9c <_puts_r+0xc4>
 8029f2a:	4622      	mov	r2, r4
 8029f2c:	210a      	movs	r1, #10
 8029f2e:	4628      	mov	r0, r5
 8029f30:	f000 f8da 	bl	802a0e8 <__swbuf_r>
 8029f34:	3001      	adds	r0, #1
 8029f36:	d011      	beq.n	8029f5c <_puts_r+0x84>
 8029f38:	250a      	movs	r5, #10
 8029f3a:	e011      	b.n	8029f60 <_puts_r+0x88>
 8029f3c:	4b1b      	ldr	r3, [pc, #108]	; (8029fac <_puts_r+0xd4>)
 8029f3e:	429c      	cmp	r4, r3
 8029f40:	d101      	bne.n	8029f46 <_puts_r+0x6e>
 8029f42:	68ac      	ldr	r4, [r5, #8]
 8029f44:	e7da      	b.n	8029efc <_puts_r+0x24>
 8029f46:	4b1a      	ldr	r3, [pc, #104]	; (8029fb0 <_puts_r+0xd8>)
 8029f48:	429c      	cmp	r4, r3
 8029f4a:	bf08      	it	eq
 8029f4c:	68ec      	ldreq	r4, [r5, #12]
 8029f4e:	e7d5      	b.n	8029efc <_puts_r+0x24>
 8029f50:	4621      	mov	r1, r4
 8029f52:	4628      	mov	r0, r5
 8029f54:	f000 f91a 	bl	802a18c <__swsetup_r>
 8029f58:	2800      	cmp	r0, #0
 8029f5a:	d0dd      	beq.n	8029f18 <_puts_r+0x40>
 8029f5c:	f04f 35ff 	mov.w	r5, #4294967295
 8029f60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8029f62:	07da      	lsls	r2, r3, #31
 8029f64:	d405      	bmi.n	8029f72 <_puts_r+0x9a>
 8029f66:	89a3      	ldrh	r3, [r4, #12]
 8029f68:	059b      	lsls	r3, r3, #22
 8029f6a:	d402      	bmi.n	8029f72 <_puts_r+0x9a>
 8029f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8029f6e:	f000 fb97 	bl	802a6a0 <__retarget_lock_release_recursive>
 8029f72:	4628      	mov	r0, r5
 8029f74:	bd70      	pop	{r4, r5, r6, pc}
 8029f76:	2b00      	cmp	r3, #0
 8029f78:	da04      	bge.n	8029f84 <_puts_r+0xac>
 8029f7a:	69a2      	ldr	r2, [r4, #24]
 8029f7c:	429a      	cmp	r2, r3
 8029f7e:	dc06      	bgt.n	8029f8e <_puts_r+0xb6>
 8029f80:	290a      	cmp	r1, #10
 8029f82:	d004      	beq.n	8029f8e <_puts_r+0xb6>
 8029f84:	6823      	ldr	r3, [r4, #0]
 8029f86:	1c5a      	adds	r2, r3, #1
 8029f88:	6022      	str	r2, [r4, #0]
 8029f8a:	7019      	strb	r1, [r3, #0]
 8029f8c:	e7c5      	b.n	8029f1a <_puts_r+0x42>
 8029f8e:	4622      	mov	r2, r4
 8029f90:	4628      	mov	r0, r5
 8029f92:	f000 f8a9 	bl	802a0e8 <__swbuf_r>
 8029f96:	3001      	adds	r0, #1
 8029f98:	d1bf      	bne.n	8029f1a <_puts_r+0x42>
 8029f9a:	e7df      	b.n	8029f5c <_puts_r+0x84>
 8029f9c:	6823      	ldr	r3, [r4, #0]
 8029f9e:	250a      	movs	r5, #10
 8029fa0:	1c5a      	adds	r2, r3, #1
 8029fa2:	6022      	str	r2, [r4, #0]
 8029fa4:	701d      	strb	r5, [r3, #0]
 8029fa6:	e7db      	b.n	8029f60 <_puts_r+0x88>
 8029fa8:	0802d928 	.word	0x0802d928
 8029fac:	0802d948 	.word	0x0802d948
 8029fb0:	0802d908 	.word	0x0802d908

08029fb4 <puts>:
 8029fb4:	4b02      	ldr	r3, [pc, #8]	; (8029fc0 <puts+0xc>)
 8029fb6:	4601      	mov	r1, r0
 8029fb8:	6818      	ldr	r0, [r3, #0]
 8029fba:	f7ff bf8d 	b.w	8029ed8 <_puts_r>
 8029fbe:	bf00      	nop
 8029fc0:	200000c4 	.word	0x200000c4

08029fc4 <rand>:
 8029fc4:	4b16      	ldr	r3, [pc, #88]	; (802a020 <rand+0x5c>)
 8029fc6:	b510      	push	{r4, lr}
 8029fc8:	681c      	ldr	r4, [r3, #0]
 8029fca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8029fcc:	b9b3      	cbnz	r3, 8029ffc <rand+0x38>
 8029fce:	2018      	movs	r0, #24
 8029fd0:	f7ff fb82 	bl	80296d8 <malloc>
 8029fd4:	63a0      	str	r0, [r4, #56]	; 0x38
 8029fd6:	b928      	cbnz	r0, 8029fe4 <rand+0x20>
 8029fd8:	4602      	mov	r2, r0
 8029fda:	4b12      	ldr	r3, [pc, #72]	; (802a024 <rand+0x60>)
 8029fdc:	214e      	movs	r1, #78	; 0x4e
 8029fde:	4812      	ldr	r0, [pc, #72]	; (802a028 <rand+0x64>)
 8029fe0:	f7ff fb0c 	bl	80295fc <__assert_func>
 8029fe4:	4a11      	ldr	r2, [pc, #68]	; (802a02c <rand+0x68>)
 8029fe6:	4b12      	ldr	r3, [pc, #72]	; (802a030 <rand+0x6c>)
 8029fe8:	e9c0 2300 	strd	r2, r3, [r0]
 8029fec:	4b11      	ldr	r3, [pc, #68]	; (802a034 <rand+0x70>)
 8029fee:	2201      	movs	r2, #1
 8029ff0:	6083      	str	r3, [r0, #8]
 8029ff2:	230b      	movs	r3, #11
 8029ff4:	8183      	strh	r3, [r0, #12]
 8029ff6:	2300      	movs	r3, #0
 8029ff8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8029ffc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8029ffe:	4a0e      	ldr	r2, [pc, #56]	; (802a038 <rand+0x74>)
 802a000:	6920      	ldr	r0, [r4, #16]
 802a002:	6963      	ldr	r3, [r4, #20]
 802a004:	490d      	ldr	r1, [pc, #52]	; (802a03c <rand+0x78>)
 802a006:	4342      	muls	r2, r0
 802a008:	fb01 2203 	mla	r2, r1, r3, r2
 802a00c:	fba0 0101 	umull	r0, r1, r0, r1
 802a010:	1c43      	adds	r3, r0, #1
 802a012:	eb42 0001 	adc.w	r0, r2, r1
 802a016:	e9c4 3004 	strd	r3, r0, [r4, #16]
 802a01a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802a01e:	bd10      	pop	{r4, pc}
 802a020:	200000c4 	.word	0x200000c4
 802a024:	0802d894 	.word	0x0802d894
 802a028:	0802d8ab 	.word	0x0802d8ab
 802a02c:	abcd330e 	.word	0xabcd330e
 802a030:	e66d1234 	.word	0xe66d1234
 802a034:	0005deec 	.word	0x0005deec
 802a038:	5851f42d 	.word	0x5851f42d
 802a03c:	4c957f2d 	.word	0x4c957f2d

0802a040 <_sbrk_r>:
 802a040:	b538      	push	{r3, r4, r5, lr}
 802a042:	2300      	movs	r3, #0
 802a044:	4d05      	ldr	r5, [pc, #20]	; (802a05c <_sbrk_r+0x1c>)
 802a046:	4604      	mov	r4, r0
 802a048:	4608      	mov	r0, r1
 802a04a:	602b      	str	r3, [r5, #0]
 802a04c:	f7d8 f950 	bl	80022f0 <_sbrk>
 802a050:	1c43      	adds	r3, r0, #1
 802a052:	d102      	bne.n	802a05a <_sbrk_r+0x1a>
 802a054:	682b      	ldr	r3, [r5, #0]
 802a056:	b103      	cbz	r3, 802a05a <_sbrk_r+0x1a>
 802a058:	6023      	str	r3, [r4, #0]
 802a05a:	bd38      	pop	{r3, r4, r5, pc}
 802a05c:	20198930 	.word	0x20198930

0802a060 <_raise_r>:
 802a060:	291f      	cmp	r1, #31
 802a062:	b538      	push	{r3, r4, r5, lr}
 802a064:	4604      	mov	r4, r0
 802a066:	460d      	mov	r5, r1
 802a068:	d904      	bls.n	802a074 <_raise_r+0x14>
 802a06a:	2316      	movs	r3, #22
 802a06c:	6003      	str	r3, [r0, #0]
 802a06e:	f04f 30ff 	mov.w	r0, #4294967295
 802a072:	bd38      	pop	{r3, r4, r5, pc}
 802a074:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802a076:	b112      	cbz	r2, 802a07e <_raise_r+0x1e>
 802a078:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a07c:	b94b      	cbnz	r3, 802a092 <_raise_r+0x32>
 802a07e:	4620      	mov	r0, r4
 802a080:	f000 f830 	bl	802a0e4 <_getpid_r>
 802a084:	462a      	mov	r2, r5
 802a086:	4601      	mov	r1, r0
 802a088:	4620      	mov	r0, r4
 802a08a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a08e:	f000 b817 	b.w	802a0c0 <_kill_r>
 802a092:	2b01      	cmp	r3, #1
 802a094:	d00a      	beq.n	802a0ac <_raise_r+0x4c>
 802a096:	1c59      	adds	r1, r3, #1
 802a098:	d103      	bne.n	802a0a2 <_raise_r+0x42>
 802a09a:	2316      	movs	r3, #22
 802a09c:	6003      	str	r3, [r0, #0]
 802a09e:	2001      	movs	r0, #1
 802a0a0:	e7e7      	b.n	802a072 <_raise_r+0x12>
 802a0a2:	2400      	movs	r4, #0
 802a0a4:	4628      	mov	r0, r5
 802a0a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802a0aa:	4798      	blx	r3
 802a0ac:	2000      	movs	r0, #0
 802a0ae:	e7e0      	b.n	802a072 <_raise_r+0x12>

0802a0b0 <raise>:
 802a0b0:	4b02      	ldr	r3, [pc, #8]	; (802a0bc <raise+0xc>)
 802a0b2:	4601      	mov	r1, r0
 802a0b4:	6818      	ldr	r0, [r3, #0]
 802a0b6:	f7ff bfd3 	b.w	802a060 <_raise_r>
 802a0ba:	bf00      	nop
 802a0bc:	200000c4 	.word	0x200000c4

0802a0c0 <_kill_r>:
 802a0c0:	b538      	push	{r3, r4, r5, lr}
 802a0c2:	2300      	movs	r3, #0
 802a0c4:	4d06      	ldr	r5, [pc, #24]	; (802a0e0 <_kill_r+0x20>)
 802a0c6:	4604      	mov	r4, r0
 802a0c8:	4608      	mov	r0, r1
 802a0ca:	4611      	mov	r1, r2
 802a0cc:	602b      	str	r3, [r5, #0]
 802a0ce:	f7d8 f887 	bl	80021e0 <_kill>
 802a0d2:	1c43      	adds	r3, r0, #1
 802a0d4:	d102      	bne.n	802a0dc <_kill_r+0x1c>
 802a0d6:	682b      	ldr	r3, [r5, #0]
 802a0d8:	b103      	cbz	r3, 802a0dc <_kill_r+0x1c>
 802a0da:	6023      	str	r3, [r4, #0]
 802a0dc:	bd38      	pop	{r3, r4, r5, pc}
 802a0de:	bf00      	nop
 802a0e0:	20198930 	.word	0x20198930

0802a0e4 <_getpid_r>:
 802a0e4:	f7d8 b874 	b.w	80021d0 <_getpid>

0802a0e8 <__swbuf_r>:
 802a0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a0ea:	460e      	mov	r6, r1
 802a0ec:	4614      	mov	r4, r2
 802a0ee:	4605      	mov	r5, r0
 802a0f0:	b118      	cbz	r0, 802a0fa <__swbuf_r+0x12>
 802a0f2:	6983      	ldr	r3, [r0, #24]
 802a0f4:	b90b      	cbnz	r3, 802a0fa <__swbuf_r+0x12>
 802a0f6:	f000 fa33 	bl	802a560 <__sinit>
 802a0fa:	4b21      	ldr	r3, [pc, #132]	; (802a180 <__swbuf_r+0x98>)
 802a0fc:	429c      	cmp	r4, r3
 802a0fe:	d12b      	bne.n	802a158 <__swbuf_r+0x70>
 802a100:	686c      	ldr	r4, [r5, #4]
 802a102:	69a3      	ldr	r3, [r4, #24]
 802a104:	60a3      	str	r3, [r4, #8]
 802a106:	89a3      	ldrh	r3, [r4, #12]
 802a108:	071a      	lsls	r2, r3, #28
 802a10a:	d52f      	bpl.n	802a16c <__swbuf_r+0x84>
 802a10c:	6923      	ldr	r3, [r4, #16]
 802a10e:	b36b      	cbz	r3, 802a16c <__swbuf_r+0x84>
 802a110:	6923      	ldr	r3, [r4, #16]
 802a112:	b2f6      	uxtb	r6, r6
 802a114:	6820      	ldr	r0, [r4, #0]
 802a116:	4637      	mov	r7, r6
 802a118:	1ac0      	subs	r0, r0, r3
 802a11a:	6963      	ldr	r3, [r4, #20]
 802a11c:	4283      	cmp	r3, r0
 802a11e:	dc04      	bgt.n	802a12a <__swbuf_r+0x42>
 802a120:	4621      	mov	r1, r4
 802a122:	4628      	mov	r0, r5
 802a124:	f000 f988 	bl	802a438 <_fflush_r>
 802a128:	bb30      	cbnz	r0, 802a178 <__swbuf_r+0x90>
 802a12a:	68a3      	ldr	r3, [r4, #8]
 802a12c:	3001      	adds	r0, #1
 802a12e:	3b01      	subs	r3, #1
 802a130:	60a3      	str	r3, [r4, #8]
 802a132:	6823      	ldr	r3, [r4, #0]
 802a134:	1c5a      	adds	r2, r3, #1
 802a136:	6022      	str	r2, [r4, #0]
 802a138:	701e      	strb	r6, [r3, #0]
 802a13a:	6963      	ldr	r3, [r4, #20]
 802a13c:	4283      	cmp	r3, r0
 802a13e:	d004      	beq.n	802a14a <__swbuf_r+0x62>
 802a140:	89a3      	ldrh	r3, [r4, #12]
 802a142:	07db      	lsls	r3, r3, #31
 802a144:	d506      	bpl.n	802a154 <__swbuf_r+0x6c>
 802a146:	2e0a      	cmp	r6, #10
 802a148:	d104      	bne.n	802a154 <__swbuf_r+0x6c>
 802a14a:	4621      	mov	r1, r4
 802a14c:	4628      	mov	r0, r5
 802a14e:	f000 f973 	bl	802a438 <_fflush_r>
 802a152:	b988      	cbnz	r0, 802a178 <__swbuf_r+0x90>
 802a154:	4638      	mov	r0, r7
 802a156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a158:	4b0a      	ldr	r3, [pc, #40]	; (802a184 <__swbuf_r+0x9c>)
 802a15a:	429c      	cmp	r4, r3
 802a15c:	d101      	bne.n	802a162 <__swbuf_r+0x7a>
 802a15e:	68ac      	ldr	r4, [r5, #8]
 802a160:	e7cf      	b.n	802a102 <__swbuf_r+0x1a>
 802a162:	4b09      	ldr	r3, [pc, #36]	; (802a188 <__swbuf_r+0xa0>)
 802a164:	429c      	cmp	r4, r3
 802a166:	bf08      	it	eq
 802a168:	68ec      	ldreq	r4, [r5, #12]
 802a16a:	e7ca      	b.n	802a102 <__swbuf_r+0x1a>
 802a16c:	4621      	mov	r1, r4
 802a16e:	4628      	mov	r0, r5
 802a170:	f000 f80c 	bl	802a18c <__swsetup_r>
 802a174:	2800      	cmp	r0, #0
 802a176:	d0cb      	beq.n	802a110 <__swbuf_r+0x28>
 802a178:	f04f 37ff 	mov.w	r7, #4294967295
 802a17c:	e7ea      	b.n	802a154 <__swbuf_r+0x6c>
 802a17e:	bf00      	nop
 802a180:	0802d928 	.word	0x0802d928
 802a184:	0802d948 	.word	0x0802d948
 802a188:	0802d908 	.word	0x0802d908

0802a18c <__swsetup_r>:
 802a18c:	4b32      	ldr	r3, [pc, #200]	; (802a258 <__swsetup_r+0xcc>)
 802a18e:	b570      	push	{r4, r5, r6, lr}
 802a190:	681d      	ldr	r5, [r3, #0]
 802a192:	4606      	mov	r6, r0
 802a194:	460c      	mov	r4, r1
 802a196:	b125      	cbz	r5, 802a1a2 <__swsetup_r+0x16>
 802a198:	69ab      	ldr	r3, [r5, #24]
 802a19a:	b913      	cbnz	r3, 802a1a2 <__swsetup_r+0x16>
 802a19c:	4628      	mov	r0, r5
 802a19e:	f000 f9df 	bl	802a560 <__sinit>
 802a1a2:	4b2e      	ldr	r3, [pc, #184]	; (802a25c <__swsetup_r+0xd0>)
 802a1a4:	429c      	cmp	r4, r3
 802a1a6:	d10f      	bne.n	802a1c8 <__swsetup_r+0x3c>
 802a1a8:	686c      	ldr	r4, [r5, #4]
 802a1aa:	89a3      	ldrh	r3, [r4, #12]
 802a1ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a1b0:	0719      	lsls	r1, r3, #28
 802a1b2:	d42c      	bmi.n	802a20e <__swsetup_r+0x82>
 802a1b4:	06dd      	lsls	r5, r3, #27
 802a1b6:	d411      	bmi.n	802a1dc <__swsetup_r+0x50>
 802a1b8:	2309      	movs	r3, #9
 802a1ba:	6033      	str	r3, [r6, #0]
 802a1bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802a1c0:	f04f 30ff 	mov.w	r0, #4294967295
 802a1c4:	81a3      	strh	r3, [r4, #12]
 802a1c6:	e03e      	b.n	802a246 <__swsetup_r+0xba>
 802a1c8:	4b25      	ldr	r3, [pc, #148]	; (802a260 <__swsetup_r+0xd4>)
 802a1ca:	429c      	cmp	r4, r3
 802a1cc:	d101      	bne.n	802a1d2 <__swsetup_r+0x46>
 802a1ce:	68ac      	ldr	r4, [r5, #8]
 802a1d0:	e7eb      	b.n	802a1aa <__swsetup_r+0x1e>
 802a1d2:	4b24      	ldr	r3, [pc, #144]	; (802a264 <__swsetup_r+0xd8>)
 802a1d4:	429c      	cmp	r4, r3
 802a1d6:	bf08      	it	eq
 802a1d8:	68ec      	ldreq	r4, [r5, #12]
 802a1da:	e7e6      	b.n	802a1aa <__swsetup_r+0x1e>
 802a1dc:	0758      	lsls	r0, r3, #29
 802a1de:	d512      	bpl.n	802a206 <__swsetup_r+0x7a>
 802a1e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a1e2:	b141      	cbz	r1, 802a1f6 <__swsetup_r+0x6a>
 802a1e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a1e8:	4299      	cmp	r1, r3
 802a1ea:	d002      	beq.n	802a1f2 <__swsetup_r+0x66>
 802a1ec:	4630      	mov	r0, r6
 802a1ee:	f7ff fa8b 	bl	8029708 <_free_r>
 802a1f2:	2300      	movs	r3, #0
 802a1f4:	6363      	str	r3, [r4, #52]	; 0x34
 802a1f6:	89a3      	ldrh	r3, [r4, #12]
 802a1f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802a1fc:	81a3      	strh	r3, [r4, #12]
 802a1fe:	2300      	movs	r3, #0
 802a200:	6063      	str	r3, [r4, #4]
 802a202:	6923      	ldr	r3, [r4, #16]
 802a204:	6023      	str	r3, [r4, #0]
 802a206:	89a3      	ldrh	r3, [r4, #12]
 802a208:	f043 0308 	orr.w	r3, r3, #8
 802a20c:	81a3      	strh	r3, [r4, #12]
 802a20e:	6923      	ldr	r3, [r4, #16]
 802a210:	b94b      	cbnz	r3, 802a226 <__swsetup_r+0x9a>
 802a212:	89a3      	ldrh	r3, [r4, #12]
 802a214:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802a218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a21c:	d003      	beq.n	802a226 <__swsetup_r+0x9a>
 802a21e:	4621      	mov	r1, r4
 802a220:	4630      	mov	r0, r6
 802a222:	f000 fa63 	bl	802a6ec <__smakebuf_r>
 802a226:	89a0      	ldrh	r0, [r4, #12]
 802a228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a22c:	f010 0301 	ands.w	r3, r0, #1
 802a230:	d00a      	beq.n	802a248 <__swsetup_r+0xbc>
 802a232:	2300      	movs	r3, #0
 802a234:	60a3      	str	r3, [r4, #8]
 802a236:	6963      	ldr	r3, [r4, #20]
 802a238:	425b      	negs	r3, r3
 802a23a:	61a3      	str	r3, [r4, #24]
 802a23c:	6923      	ldr	r3, [r4, #16]
 802a23e:	b943      	cbnz	r3, 802a252 <__swsetup_r+0xc6>
 802a240:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802a244:	d1ba      	bne.n	802a1bc <__swsetup_r+0x30>
 802a246:	bd70      	pop	{r4, r5, r6, pc}
 802a248:	0781      	lsls	r1, r0, #30
 802a24a:	bf58      	it	pl
 802a24c:	6963      	ldrpl	r3, [r4, #20]
 802a24e:	60a3      	str	r3, [r4, #8]
 802a250:	e7f4      	b.n	802a23c <__swsetup_r+0xb0>
 802a252:	2000      	movs	r0, #0
 802a254:	e7f7      	b.n	802a246 <__swsetup_r+0xba>
 802a256:	bf00      	nop
 802a258:	200000c4 	.word	0x200000c4
 802a25c:	0802d928 	.word	0x0802d928
 802a260:	0802d948 	.word	0x0802d948
 802a264:	0802d908 	.word	0x0802d908

0802a268 <__register_exitproc>:
 802a268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a26c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 802a32c <__register_exitproc+0xc4>
 802a270:	4606      	mov	r6, r0
 802a272:	461f      	mov	r7, r3
 802a274:	460d      	mov	r5, r1
 802a276:	f8d8 0000 	ldr.w	r0, [r8]
 802a27a:	4691      	mov	r9, r2
 802a27c:	f000 fa0e 	bl	802a69c <__retarget_lock_acquire_recursive>
 802a280:	4b26      	ldr	r3, [pc, #152]	; (802a31c <__register_exitproc+0xb4>)
 802a282:	681c      	ldr	r4, [r3, #0]
 802a284:	b934      	cbnz	r4, 802a294 <__register_exitproc+0x2c>
 802a286:	4c26      	ldr	r4, [pc, #152]	; (802a320 <__register_exitproc+0xb8>)
 802a288:	601c      	str	r4, [r3, #0]
 802a28a:	4b26      	ldr	r3, [pc, #152]	; (802a324 <__register_exitproc+0xbc>)
 802a28c:	b113      	cbz	r3, 802a294 <__register_exitproc+0x2c>
 802a28e:	681b      	ldr	r3, [r3, #0]
 802a290:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802a294:	6863      	ldr	r3, [r4, #4]
 802a296:	2b1f      	cmp	r3, #31
 802a298:	dd07      	ble.n	802a2aa <__register_exitproc+0x42>
 802a29a:	f8d8 0000 	ldr.w	r0, [r8]
 802a29e:	f000 f9ff 	bl	802a6a0 <__retarget_lock_release_recursive>
 802a2a2:	f04f 30ff 	mov.w	r0, #4294967295
 802a2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a2aa:	b35e      	cbz	r6, 802a304 <__register_exitproc+0x9c>
 802a2ac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802a2b0:	b988      	cbnz	r0, 802a2d6 <__register_exitproc+0x6e>
 802a2b2:	4b1d      	ldr	r3, [pc, #116]	; (802a328 <__register_exitproc+0xc0>)
 802a2b4:	b923      	cbnz	r3, 802a2c0 <__register_exitproc+0x58>
 802a2b6:	f8d8 0000 	ldr.w	r0, [r8]
 802a2ba:	f000 f9f0 	bl	802a69e <__retarget_lock_release>
 802a2be:	e7f0      	b.n	802a2a2 <__register_exitproc+0x3a>
 802a2c0:	f44f 7084 	mov.w	r0, #264	; 0x108
 802a2c4:	f7ff fa08 	bl	80296d8 <malloc>
 802a2c8:	2800      	cmp	r0, #0
 802a2ca:	d0f4      	beq.n	802a2b6 <__register_exitproc+0x4e>
 802a2cc:	2300      	movs	r3, #0
 802a2ce:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802a2d2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802a2d6:	6863      	ldr	r3, [r4, #4]
 802a2d8:	2201      	movs	r2, #1
 802a2da:	2e02      	cmp	r6, #2
 802a2dc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802a2e0:	fa02 f203 	lsl.w	r2, r2, r3
 802a2e4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802a2e8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802a2ec:	ea43 0302 	orr.w	r3, r3, r2
 802a2f0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802a2f4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802a2f8:	bf02      	ittt	eq
 802a2fa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802a2fe:	4313      	orreq	r3, r2
 802a300:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802a304:	6863      	ldr	r3, [r4, #4]
 802a306:	f8d8 0000 	ldr.w	r0, [r8]
 802a30a:	1c5a      	adds	r2, r3, #1
 802a30c:	3302      	adds	r3, #2
 802a30e:	6062      	str	r2, [r4, #4]
 802a310:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802a314:	f000 f9c4 	bl	802a6a0 <__retarget_lock_release_recursive>
 802a318:	2000      	movs	r0, #0
 802a31a:	e7c4      	b.n	802a2a6 <__register_exitproc+0x3e>
 802a31c:	20198928 	.word	0x20198928
 802a320:	2019889c 	.word	0x2019889c
 802a324:	0802d890 	.word	0x0802d890
 802a328:	080296d9 	.word	0x080296d9
 802a32c:	20000128 	.word	0x20000128

0802a330 <__sflush_r>:
 802a330:	898a      	ldrh	r2, [r1, #12]
 802a332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a336:	4605      	mov	r5, r0
 802a338:	0710      	lsls	r0, r2, #28
 802a33a:	460c      	mov	r4, r1
 802a33c:	d458      	bmi.n	802a3f0 <__sflush_r+0xc0>
 802a33e:	684b      	ldr	r3, [r1, #4]
 802a340:	2b00      	cmp	r3, #0
 802a342:	dc05      	bgt.n	802a350 <__sflush_r+0x20>
 802a344:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802a346:	2b00      	cmp	r3, #0
 802a348:	dc02      	bgt.n	802a350 <__sflush_r+0x20>
 802a34a:	2000      	movs	r0, #0
 802a34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a352:	2e00      	cmp	r6, #0
 802a354:	d0f9      	beq.n	802a34a <__sflush_r+0x1a>
 802a356:	2300      	movs	r3, #0
 802a358:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802a35c:	682f      	ldr	r7, [r5, #0]
 802a35e:	602b      	str	r3, [r5, #0]
 802a360:	d032      	beq.n	802a3c8 <__sflush_r+0x98>
 802a362:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802a364:	89a3      	ldrh	r3, [r4, #12]
 802a366:	075a      	lsls	r2, r3, #29
 802a368:	d505      	bpl.n	802a376 <__sflush_r+0x46>
 802a36a:	6863      	ldr	r3, [r4, #4]
 802a36c:	1ac0      	subs	r0, r0, r3
 802a36e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802a370:	b10b      	cbz	r3, 802a376 <__sflush_r+0x46>
 802a372:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802a374:	1ac0      	subs	r0, r0, r3
 802a376:	2300      	movs	r3, #0
 802a378:	4602      	mov	r2, r0
 802a37a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a37c:	4628      	mov	r0, r5
 802a37e:	6a21      	ldr	r1, [r4, #32]
 802a380:	47b0      	blx	r6
 802a382:	1c43      	adds	r3, r0, #1
 802a384:	89a3      	ldrh	r3, [r4, #12]
 802a386:	d106      	bne.n	802a396 <__sflush_r+0x66>
 802a388:	6829      	ldr	r1, [r5, #0]
 802a38a:	291d      	cmp	r1, #29
 802a38c:	d82c      	bhi.n	802a3e8 <__sflush_r+0xb8>
 802a38e:	4a29      	ldr	r2, [pc, #164]	; (802a434 <__sflush_r+0x104>)
 802a390:	40ca      	lsrs	r2, r1
 802a392:	07d6      	lsls	r6, r2, #31
 802a394:	d528      	bpl.n	802a3e8 <__sflush_r+0xb8>
 802a396:	2200      	movs	r2, #0
 802a398:	04d9      	lsls	r1, r3, #19
 802a39a:	6062      	str	r2, [r4, #4]
 802a39c:	6922      	ldr	r2, [r4, #16]
 802a39e:	6022      	str	r2, [r4, #0]
 802a3a0:	d504      	bpl.n	802a3ac <__sflush_r+0x7c>
 802a3a2:	1c42      	adds	r2, r0, #1
 802a3a4:	d101      	bne.n	802a3aa <__sflush_r+0x7a>
 802a3a6:	682b      	ldr	r3, [r5, #0]
 802a3a8:	b903      	cbnz	r3, 802a3ac <__sflush_r+0x7c>
 802a3aa:	6560      	str	r0, [r4, #84]	; 0x54
 802a3ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a3ae:	602f      	str	r7, [r5, #0]
 802a3b0:	2900      	cmp	r1, #0
 802a3b2:	d0ca      	beq.n	802a34a <__sflush_r+0x1a>
 802a3b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a3b8:	4299      	cmp	r1, r3
 802a3ba:	d002      	beq.n	802a3c2 <__sflush_r+0x92>
 802a3bc:	4628      	mov	r0, r5
 802a3be:	f7ff f9a3 	bl	8029708 <_free_r>
 802a3c2:	2000      	movs	r0, #0
 802a3c4:	6360      	str	r0, [r4, #52]	; 0x34
 802a3c6:	e7c1      	b.n	802a34c <__sflush_r+0x1c>
 802a3c8:	6a21      	ldr	r1, [r4, #32]
 802a3ca:	2301      	movs	r3, #1
 802a3cc:	4628      	mov	r0, r5
 802a3ce:	47b0      	blx	r6
 802a3d0:	1c41      	adds	r1, r0, #1
 802a3d2:	d1c7      	bne.n	802a364 <__sflush_r+0x34>
 802a3d4:	682b      	ldr	r3, [r5, #0]
 802a3d6:	2b00      	cmp	r3, #0
 802a3d8:	d0c4      	beq.n	802a364 <__sflush_r+0x34>
 802a3da:	2b1d      	cmp	r3, #29
 802a3dc:	d001      	beq.n	802a3e2 <__sflush_r+0xb2>
 802a3de:	2b16      	cmp	r3, #22
 802a3e0:	d101      	bne.n	802a3e6 <__sflush_r+0xb6>
 802a3e2:	602f      	str	r7, [r5, #0]
 802a3e4:	e7b1      	b.n	802a34a <__sflush_r+0x1a>
 802a3e6:	89a3      	ldrh	r3, [r4, #12]
 802a3e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a3ec:	81a3      	strh	r3, [r4, #12]
 802a3ee:	e7ad      	b.n	802a34c <__sflush_r+0x1c>
 802a3f0:	690f      	ldr	r7, [r1, #16]
 802a3f2:	2f00      	cmp	r7, #0
 802a3f4:	d0a9      	beq.n	802a34a <__sflush_r+0x1a>
 802a3f6:	0793      	lsls	r3, r2, #30
 802a3f8:	680e      	ldr	r6, [r1, #0]
 802a3fa:	600f      	str	r7, [r1, #0]
 802a3fc:	bf0c      	ite	eq
 802a3fe:	694b      	ldreq	r3, [r1, #20]
 802a400:	2300      	movne	r3, #0
 802a402:	eba6 0807 	sub.w	r8, r6, r7
 802a406:	608b      	str	r3, [r1, #8]
 802a408:	f1b8 0f00 	cmp.w	r8, #0
 802a40c:	dd9d      	ble.n	802a34a <__sflush_r+0x1a>
 802a40e:	4643      	mov	r3, r8
 802a410:	463a      	mov	r2, r7
 802a412:	6a21      	ldr	r1, [r4, #32]
 802a414:	4628      	mov	r0, r5
 802a416:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802a418:	47b0      	blx	r6
 802a41a:	2800      	cmp	r0, #0
 802a41c:	dc06      	bgt.n	802a42c <__sflush_r+0xfc>
 802a41e:	89a3      	ldrh	r3, [r4, #12]
 802a420:	f04f 30ff 	mov.w	r0, #4294967295
 802a424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a428:	81a3      	strh	r3, [r4, #12]
 802a42a:	e78f      	b.n	802a34c <__sflush_r+0x1c>
 802a42c:	4407      	add	r7, r0
 802a42e:	eba8 0800 	sub.w	r8, r8, r0
 802a432:	e7e9      	b.n	802a408 <__sflush_r+0xd8>
 802a434:	20400001 	.word	0x20400001

0802a438 <_fflush_r>:
 802a438:	b538      	push	{r3, r4, r5, lr}
 802a43a:	690b      	ldr	r3, [r1, #16]
 802a43c:	4605      	mov	r5, r0
 802a43e:	460c      	mov	r4, r1
 802a440:	b913      	cbnz	r3, 802a448 <_fflush_r+0x10>
 802a442:	2500      	movs	r5, #0
 802a444:	4628      	mov	r0, r5
 802a446:	bd38      	pop	{r3, r4, r5, pc}
 802a448:	b118      	cbz	r0, 802a452 <_fflush_r+0x1a>
 802a44a:	6983      	ldr	r3, [r0, #24]
 802a44c:	b90b      	cbnz	r3, 802a452 <_fflush_r+0x1a>
 802a44e:	f000 f887 	bl	802a560 <__sinit>
 802a452:	4b14      	ldr	r3, [pc, #80]	; (802a4a4 <_fflush_r+0x6c>)
 802a454:	429c      	cmp	r4, r3
 802a456:	d11b      	bne.n	802a490 <_fflush_r+0x58>
 802a458:	686c      	ldr	r4, [r5, #4]
 802a45a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a45e:	2b00      	cmp	r3, #0
 802a460:	d0ef      	beq.n	802a442 <_fflush_r+0xa>
 802a462:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802a464:	07d0      	lsls	r0, r2, #31
 802a466:	d404      	bmi.n	802a472 <_fflush_r+0x3a>
 802a468:	0599      	lsls	r1, r3, #22
 802a46a:	d402      	bmi.n	802a472 <_fflush_r+0x3a>
 802a46c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a46e:	f000 f915 	bl	802a69c <__retarget_lock_acquire_recursive>
 802a472:	4628      	mov	r0, r5
 802a474:	4621      	mov	r1, r4
 802a476:	f7ff ff5b 	bl	802a330 <__sflush_r>
 802a47a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a47c:	4605      	mov	r5, r0
 802a47e:	07da      	lsls	r2, r3, #31
 802a480:	d4e0      	bmi.n	802a444 <_fflush_r+0xc>
 802a482:	89a3      	ldrh	r3, [r4, #12]
 802a484:	059b      	lsls	r3, r3, #22
 802a486:	d4dd      	bmi.n	802a444 <_fflush_r+0xc>
 802a488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a48a:	f000 f909 	bl	802a6a0 <__retarget_lock_release_recursive>
 802a48e:	e7d9      	b.n	802a444 <_fflush_r+0xc>
 802a490:	4b05      	ldr	r3, [pc, #20]	; (802a4a8 <_fflush_r+0x70>)
 802a492:	429c      	cmp	r4, r3
 802a494:	d101      	bne.n	802a49a <_fflush_r+0x62>
 802a496:	68ac      	ldr	r4, [r5, #8]
 802a498:	e7df      	b.n	802a45a <_fflush_r+0x22>
 802a49a:	4b04      	ldr	r3, [pc, #16]	; (802a4ac <_fflush_r+0x74>)
 802a49c:	429c      	cmp	r4, r3
 802a49e:	bf08      	it	eq
 802a4a0:	68ec      	ldreq	r4, [r5, #12]
 802a4a2:	e7da      	b.n	802a45a <_fflush_r+0x22>
 802a4a4:	0802d928 	.word	0x0802d928
 802a4a8:	0802d948 	.word	0x0802d948
 802a4ac:	0802d908 	.word	0x0802d908

0802a4b0 <std>:
 802a4b0:	2300      	movs	r3, #0
 802a4b2:	b510      	push	{r4, lr}
 802a4b4:	4604      	mov	r4, r0
 802a4b6:	6083      	str	r3, [r0, #8]
 802a4b8:	8181      	strh	r1, [r0, #12]
 802a4ba:	4619      	mov	r1, r3
 802a4bc:	6643      	str	r3, [r0, #100]	; 0x64
 802a4be:	81c2      	strh	r2, [r0, #14]
 802a4c0:	2208      	movs	r2, #8
 802a4c2:	6183      	str	r3, [r0, #24]
 802a4c4:	e9c0 3300 	strd	r3, r3, [r0]
 802a4c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802a4cc:	305c      	adds	r0, #92	; 0x5c
 802a4ce:	f7ff f913 	bl	80296f8 <memset>
 802a4d2:	4b05      	ldr	r3, [pc, #20]	; (802a4e8 <std+0x38>)
 802a4d4:	6224      	str	r4, [r4, #32]
 802a4d6:	6263      	str	r3, [r4, #36]	; 0x24
 802a4d8:	4b04      	ldr	r3, [pc, #16]	; (802a4ec <std+0x3c>)
 802a4da:	62a3      	str	r3, [r4, #40]	; 0x28
 802a4dc:	4b04      	ldr	r3, [pc, #16]	; (802a4f0 <std+0x40>)
 802a4de:	62e3      	str	r3, [r4, #44]	; 0x2c
 802a4e0:	4b04      	ldr	r3, [pc, #16]	; (802a4f4 <std+0x44>)
 802a4e2:	6323      	str	r3, [r4, #48]	; 0x30
 802a4e4:	bd10      	pop	{r4, pc}
 802a4e6:	bf00      	nop
 802a4e8:	0802a7a1 	.word	0x0802a7a1
 802a4ec:	0802a7c3 	.word	0x0802a7c3
 802a4f0:	0802a7fb 	.word	0x0802a7fb
 802a4f4:	0802a81f 	.word	0x0802a81f

0802a4f8 <_cleanup_r>:
 802a4f8:	4901      	ldr	r1, [pc, #4]	; (802a500 <_cleanup_r+0x8>)
 802a4fa:	f000 b8af 	b.w	802a65c <_fwalk_reent>
 802a4fe:	bf00      	nop
 802a500:	0802a439 	.word	0x0802a439

0802a504 <__sfmoreglue>:
 802a504:	b570      	push	{r4, r5, r6, lr}
 802a506:	2268      	movs	r2, #104	; 0x68
 802a508:	1e4d      	subs	r5, r1, #1
 802a50a:	460e      	mov	r6, r1
 802a50c:	4355      	muls	r5, r2
 802a50e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802a512:	f7ff f965 	bl	80297e0 <_malloc_r>
 802a516:	4604      	mov	r4, r0
 802a518:	b140      	cbz	r0, 802a52c <__sfmoreglue+0x28>
 802a51a:	2100      	movs	r1, #0
 802a51c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802a520:	e9c0 1600 	strd	r1, r6, [r0]
 802a524:	300c      	adds	r0, #12
 802a526:	60a0      	str	r0, [r4, #8]
 802a528:	f7ff f8e6 	bl	80296f8 <memset>
 802a52c:	4620      	mov	r0, r4
 802a52e:	bd70      	pop	{r4, r5, r6, pc}

0802a530 <__sfp_lock_acquire>:
 802a530:	4801      	ldr	r0, [pc, #4]	; (802a538 <__sfp_lock_acquire+0x8>)
 802a532:	f000 b8b3 	b.w	802a69c <__retarget_lock_acquire_recursive>
 802a536:	bf00      	nop
 802a538:	2019892e 	.word	0x2019892e

0802a53c <__sfp_lock_release>:
 802a53c:	4801      	ldr	r0, [pc, #4]	; (802a544 <__sfp_lock_release+0x8>)
 802a53e:	f000 b8af 	b.w	802a6a0 <__retarget_lock_release_recursive>
 802a542:	bf00      	nop
 802a544:	2019892e 	.word	0x2019892e

0802a548 <__sinit_lock_acquire>:
 802a548:	4801      	ldr	r0, [pc, #4]	; (802a550 <__sinit_lock_acquire+0x8>)
 802a54a:	f000 b8a7 	b.w	802a69c <__retarget_lock_acquire_recursive>
 802a54e:	bf00      	nop
 802a550:	2019892f 	.word	0x2019892f

0802a554 <__sinit_lock_release>:
 802a554:	4801      	ldr	r0, [pc, #4]	; (802a55c <__sinit_lock_release+0x8>)
 802a556:	f000 b8a3 	b.w	802a6a0 <__retarget_lock_release_recursive>
 802a55a:	bf00      	nop
 802a55c:	2019892f 	.word	0x2019892f

0802a560 <__sinit>:
 802a560:	b510      	push	{r4, lr}
 802a562:	4604      	mov	r4, r0
 802a564:	f7ff fff0 	bl	802a548 <__sinit_lock_acquire>
 802a568:	69a3      	ldr	r3, [r4, #24]
 802a56a:	b11b      	cbz	r3, 802a574 <__sinit+0x14>
 802a56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a570:	f7ff bff0 	b.w	802a554 <__sinit_lock_release>
 802a574:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802a578:	6523      	str	r3, [r4, #80]	; 0x50
 802a57a:	4620      	mov	r0, r4
 802a57c:	4b12      	ldr	r3, [pc, #72]	; (802a5c8 <__sinit+0x68>)
 802a57e:	4a13      	ldr	r2, [pc, #76]	; (802a5cc <__sinit+0x6c>)
 802a580:	681b      	ldr	r3, [r3, #0]
 802a582:	62a2      	str	r2, [r4, #40]	; 0x28
 802a584:	42a3      	cmp	r3, r4
 802a586:	bf04      	itt	eq
 802a588:	2301      	moveq	r3, #1
 802a58a:	61a3      	streq	r3, [r4, #24]
 802a58c:	f000 f820 	bl	802a5d0 <__sfp>
 802a590:	6060      	str	r0, [r4, #4]
 802a592:	4620      	mov	r0, r4
 802a594:	f000 f81c 	bl	802a5d0 <__sfp>
 802a598:	60a0      	str	r0, [r4, #8]
 802a59a:	4620      	mov	r0, r4
 802a59c:	f000 f818 	bl	802a5d0 <__sfp>
 802a5a0:	2200      	movs	r2, #0
 802a5a2:	2104      	movs	r1, #4
 802a5a4:	60e0      	str	r0, [r4, #12]
 802a5a6:	6860      	ldr	r0, [r4, #4]
 802a5a8:	f7ff ff82 	bl	802a4b0 <std>
 802a5ac:	2201      	movs	r2, #1
 802a5ae:	2109      	movs	r1, #9
 802a5b0:	68a0      	ldr	r0, [r4, #8]
 802a5b2:	f7ff ff7d 	bl	802a4b0 <std>
 802a5b6:	2202      	movs	r2, #2
 802a5b8:	2112      	movs	r1, #18
 802a5ba:	68e0      	ldr	r0, [r4, #12]
 802a5bc:	f7ff ff78 	bl	802a4b0 <std>
 802a5c0:	2301      	movs	r3, #1
 802a5c2:	61a3      	str	r3, [r4, #24]
 802a5c4:	e7d2      	b.n	802a56c <__sinit+0xc>
 802a5c6:	bf00      	nop
 802a5c8:	0802d858 	.word	0x0802d858
 802a5cc:	0802a4f9 	.word	0x0802a4f9

0802a5d0 <__sfp>:
 802a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a5d2:	4607      	mov	r7, r0
 802a5d4:	f7ff ffac 	bl	802a530 <__sfp_lock_acquire>
 802a5d8:	4b1e      	ldr	r3, [pc, #120]	; (802a654 <__sfp+0x84>)
 802a5da:	681e      	ldr	r6, [r3, #0]
 802a5dc:	69b3      	ldr	r3, [r6, #24]
 802a5de:	b913      	cbnz	r3, 802a5e6 <__sfp+0x16>
 802a5e0:	4630      	mov	r0, r6
 802a5e2:	f7ff ffbd 	bl	802a560 <__sinit>
 802a5e6:	3648      	adds	r6, #72	; 0x48
 802a5e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802a5ec:	3b01      	subs	r3, #1
 802a5ee:	d503      	bpl.n	802a5f8 <__sfp+0x28>
 802a5f0:	6833      	ldr	r3, [r6, #0]
 802a5f2:	b30b      	cbz	r3, 802a638 <__sfp+0x68>
 802a5f4:	6836      	ldr	r6, [r6, #0]
 802a5f6:	e7f7      	b.n	802a5e8 <__sfp+0x18>
 802a5f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802a5fc:	b9d5      	cbnz	r5, 802a634 <__sfp+0x64>
 802a5fe:	4b16      	ldr	r3, [pc, #88]	; (802a658 <__sfp+0x88>)
 802a600:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802a604:	6665      	str	r5, [r4, #100]	; 0x64
 802a606:	60e3      	str	r3, [r4, #12]
 802a608:	f000 f847 	bl	802a69a <__retarget_lock_init_recursive>
 802a60c:	f7ff ff96 	bl	802a53c <__sfp_lock_release>
 802a610:	2208      	movs	r2, #8
 802a612:	4629      	mov	r1, r5
 802a614:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802a618:	6025      	str	r5, [r4, #0]
 802a61a:	61a5      	str	r5, [r4, #24]
 802a61c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802a620:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802a624:	f7ff f868 	bl	80296f8 <memset>
 802a628:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802a62c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802a630:	4620      	mov	r0, r4
 802a632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a634:	3468      	adds	r4, #104	; 0x68
 802a636:	e7d9      	b.n	802a5ec <__sfp+0x1c>
 802a638:	2104      	movs	r1, #4
 802a63a:	4638      	mov	r0, r7
 802a63c:	f7ff ff62 	bl	802a504 <__sfmoreglue>
 802a640:	4604      	mov	r4, r0
 802a642:	6030      	str	r0, [r6, #0]
 802a644:	2800      	cmp	r0, #0
 802a646:	d1d5      	bne.n	802a5f4 <__sfp+0x24>
 802a648:	f7ff ff78 	bl	802a53c <__sfp_lock_release>
 802a64c:	230c      	movs	r3, #12
 802a64e:	603b      	str	r3, [r7, #0]
 802a650:	e7ee      	b.n	802a630 <__sfp+0x60>
 802a652:	bf00      	nop
 802a654:	0802d858 	.word	0x0802d858
 802a658:	ffff0001 	.word	0xffff0001

0802a65c <_fwalk_reent>:
 802a65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a660:	4606      	mov	r6, r0
 802a662:	4688      	mov	r8, r1
 802a664:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802a668:	2700      	movs	r7, #0
 802a66a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802a66e:	f1b9 0901 	subs.w	r9, r9, #1
 802a672:	d505      	bpl.n	802a680 <_fwalk_reent+0x24>
 802a674:	6824      	ldr	r4, [r4, #0]
 802a676:	2c00      	cmp	r4, #0
 802a678:	d1f7      	bne.n	802a66a <_fwalk_reent+0xe>
 802a67a:	4638      	mov	r0, r7
 802a67c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a680:	89ab      	ldrh	r3, [r5, #12]
 802a682:	2b01      	cmp	r3, #1
 802a684:	d907      	bls.n	802a696 <_fwalk_reent+0x3a>
 802a686:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802a68a:	3301      	adds	r3, #1
 802a68c:	d003      	beq.n	802a696 <_fwalk_reent+0x3a>
 802a68e:	4629      	mov	r1, r5
 802a690:	4630      	mov	r0, r6
 802a692:	47c0      	blx	r8
 802a694:	4307      	orrs	r7, r0
 802a696:	3568      	adds	r5, #104	; 0x68
 802a698:	e7e9      	b.n	802a66e <_fwalk_reent+0x12>

0802a69a <__retarget_lock_init_recursive>:
 802a69a:	4770      	bx	lr

0802a69c <__retarget_lock_acquire_recursive>:
 802a69c:	4770      	bx	lr

0802a69e <__retarget_lock_release>:
 802a69e:	4770      	bx	lr

0802a6a0 <__retarget_lock_release_recursive>:
 802a6a0:	4770      	bx	lr

0802a6a2 <__swhatbuf_r>:
 802a6a2:	b570      	push	{r4, r5, r6, lr}
 802a6a4:	460e      	mov	r6, r1
 802a6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a6aa:	b096      	sub	sp, #88	; 0x58
 802a6ac:	4614      	mov	r4, r2
 802a6ae:	2900      	cmp	r1, #0
 802a6b0:	461d      	mov	r5, r3
 802a6b2:	da08      	bge.n	802a6c6 <__swhatbuf_r+0x24>
 802a6b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802a6b8:	2200      	movs	r2, #0
 802a6ba:	602a      	str	r2, [r5, #0]
 802a6bc:	061a      	lsls	r2, r3, #24
 802a6be:	d410      	bmi.n	802a6e2 <__swhatbuf_r+0x40>
 802a6c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a6c4:	e00e      	b.n	802a6e4 <__swhatbuf_r+0x42>
 802a6c6:	466a      	mov	r2, sp
 802a6c8:	f000 f8d0 	bl	802a86c <_fstat_r>
 802a6cc:	2800      	cmp	r0, #0
 802a6ce:	dbf1      	blt.n	802a6b4 <__swhatbuf_r+0x12>
 802a6d0:	9a01      	ldr	r2, [sp, #4]
 802a6d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802a6d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802a6da:	425a      	negs	r2, r3
 802a6dc:	415a      	adcs	r2, r3
 802a6de:	602a      	str	r2, [r5, #0]
 802a6e0:	e7ee      	b.n	802a6c0 <__swhatbuf_r+0x1e>
 802a6e2:	2340      	movs	r3, #64	; 0x40
 802a6e4:	2000      	movs	r0, #0
 802a6e6:	6023      	str	r3, [r4, #0]
 802a6e8:	b016      	add	sp, #88	; 0x58
 802a6ea:	bd70      	pop	{r4, r5, r6, pc}

0802a6ec <__smakebuf_r>:
 802a6ec:	898b      	ldrh	r3, [r1, #12]
 802a6ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a6f0:	079d      	lsls	r5, r3, #30
 802a6f2:	4606      	mov	r6, r0
 802a6f4:	460c      	mov	r4, r1
 802a6f6:	d507      	bpl.n	802a708 <__smakebuf_r+0x1c>
 802a6f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802a6fc:	6023      	str	r3, [r4, #0]
 802a6fe:	6123      	str	r3, [r4, #16]
 802a700:	2301      	movs	r3, #1
 802a702:	6163      	str	r3, [r4, #20]
 802a704:	b002      	add	sp, #8
 802a706:	bd70      	pop	{r4, r5, r6, pc}
 802a708:	ab01      	add	r3, sp, #4
 802a70a:	466a      	mov	r2, sp
 802a70c:	f7ff ffc9 	bl	802a6a2 <__swhatbuf_r>
 802a710:	9900      	ldr	r1, [sp, #0]
 802a712:	4605      	mov	r5, r0
 802a714:	4630      	mov	r0, r6
 802a716:	f7ff f863 	bl	80297e0 <_malloc_r>
 802a71a:	b948      	cbnz	r0, 802a730 <__smakebuf_r+0x44>
 802a71c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a720:	059a      	lsls	r2, r3, #22
 802a722:	d4ef      	bmi.n	802a704 <__smakebuf_r+0x18>
 802a724:	f023 0303 	bic.w	r3, r3, #3
 802a728:	f043 0302 	orr.w	r3, r3, #2
 802a72c:	81a3      	strh	r3, [r4, #12]
 802a72e:	e7e3      	b.n	802a6f8 <__smakebuf_r+0xc>
 802a730:	4b0d      	ldr	r3, [pc, #52]	; (802a768 <__smakebuf_r+0x7c>)
 802a732:	62b3      	str	r3, [r6, #40]	; 0x28
 802a734:	89a3      	ldrh	r3, [r4, #12]
 802a736:	6020      	str	r0, [r4, #0]
 802a738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a73c:	6120      	str	r0, [r4, #16]
 802a73e:	81a3      	strh	r3, [r4, #12]
 802a740:	9b00      	ldr	r3, [sp, #0]
 802a742:	6163      	str	r3, [r4, #20]
 802a744:	9b01      	ldr	r3, [sp, #4]
 802a746:	b15b      	cbz	r3, 802a760 <__smakebuf_r+0x74>
 802a748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a74c:	4630      	mov	r0, r6
 802a74e:	f000 f89f 	bl	802a890 <_isatty_r>
 802a752:	b128      	cbz	r0, 802a760 <__smakebuf_r+0x74>
 802a754:	89a3      	ldrh	r3, [r4, #12]
 802a756:	f023 0303 	bic.w	r3, r3, #3
 802a75a:	f043 0301 	orr.w	r3, r3, #1
 802a75e:	81a3      	strh	r3, [r4, #12]
 802a760:	89a0      	ldrh	r0, [r4, #12]
 802a762:	4305      	orrs	r5, r0
 802a764:	81a5      	strh	r5, [r4, #12]
 802a766:	e7cd      	b.n	802a704 <__smakebuf_r+0x18>
 802a768:	0802a4f9 	.word	0x0802a4f9

0802a76c <memchr>:
 802a76c:	b2c9      	uxtb	r1, r1
 802a76e:	4402      	add	r2, r0
 802a770:	b510      	push	{r4, lr}
 802a772:	4290      	cmp	r0, r2
 802a774:	4603      	mov	r3, r0
 802a776:	d101      	bne.n	802a77c <memchr+0x10>
 802a778:	2300      	movs	r3, #0
 802a77a:	e003      	b.n	802a784 <memchr+0x18>
 802a77c:	781c      	ldrb	r4, [r3, #0]
 802a77e:	3001      	adds	r0, #1
 802a780:	428c      	cmp	r4, r1
 802a782:	d1f6      	bne.n	802a772 <memchr+0x6>
 802a784:	4618      	mov	r0, r3
 802a786:	bd10      	pop	{r4, pc}

0802a788 <__malloc_lock>:
 802a788:	4801      	ldr	r0, [pc, #4]	; (802a790 <__malloc_lock+0x8>)
 802a78a:	f7ff bf87 	b.w	802a69c <__retarget_lock_acquire_recursive>
 802a78e:	bf00      	nop
 802a790:	2019892d 	.word	0x2019892d

0802a794 <__malloc_unlock>:
 802a794:	4801      	ldr	r0, [pc, #4]	; (802a79c <__malloc_unlock+0x8>)
 802a796:	f7ff bf83 	b.w	802a6a0 <__retarget_lock_release_recursive>
 802a79a:	bf00      	nop
 802a79c:	2019892d 	.word	0x2019892d

0802a7a0 <__sread>:
 802a7a0:	b510      	push	{r4, lr}
 802a7a2:	460c      	mov	r4, r1
 802a7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a7a8:	f000 f894 	bl	802a8d4 <_read_r>
 802a7ac:	2800      	cmp	r0, #0
 802a7ae:	bfab      	itete	ge
 802a7b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802a7b2:	89a3      	ldrhlt	r3, [r4, #12]
 802a7b4:	181b      	addge	r3, r3, r0
 802a7b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802a7ba:	bfac      	ite	ge
 802a7bc:	6563      	strge	r3, [r4, #84]	; 0x54
 802a7be:	81a3      	strhlt	r3, [r4, #12]
 802a7c0:	bd10      	pop	{r4, pc}

0802a7c2 <__swrite>:
 802a7c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a7c6:	461f      	mov	r7, r3
 802a7c8:	898b      	ldrh	r3, [r1, #12]
 802a7ca:	4605      	mov	r5, r0
 802a7cc:	460c      	mov	r4, r1
 802a7ce:	05db      	lsls	r3, r3, #23
 802a7d0:	4616      	mov	r6, r2
 802a7d2:	d505      	bpl.n	802a7e0 <__swrite+0x1e>
 802a7d4:	2302      	movs	r3, #2
 802a7d6:	2200      	movs	r2, #0
 802a7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a7dc:	f000 f868 	bl	802a8b0 <_lseek_r>
 802a7e0:	89a3      	ldrh	r3, [r4, #12]
 802a7e2:	4632      	mov	r2, r6
 802a7e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a7e8:	4628      	mov	r0, r5
 802a7ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a7ee:	81a3      	strh	r3, [r4, #12]
 802a7f0:	463b      	mov	r3, r7
 802a7f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a7f6:	f000 b817 	b.w	802a828 <_write_r>

0802a7fa <__sseek>:
 802a7fa:	b510      	push	{r4, lr}
 802a7fc:	460c      	mov	r4, r1
 802a7fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a802:	f000 f855 	bl	802a8b0 <_lseek_r>
 802a806:	1c43      	adds	r3, r0, #1
 802a808:	89a3      	ldrh	r3, [r4, #12]
 802a80a:	bf15      	itete	ne
 802a80c:	6560      	strne	r0, [r4, #84]	; 0x54
 802a80e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802a812:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802a816:	81a3      	strheq	r3, [r4, #12]
 802a818:	bf18      	it	ne
 802a81a:	81a3      	strhne	r3, [r4, #12]
 802a81c:	bd10      	pop	{r4, pc}

0802a81e <__sclose>:
 802a81e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a822:	f000 b813 	b.w	802a84c <_close_r>
	...

0802a828 <_write_r>:
 802a828:	b538      	push	{r3, r4, r5, lr}
 802a82a:	4604      	mov	r4, r0
 802a82c:	4d06      	ldr	r5, [pc, #24]	; (802a848 <_write_r+0x20>)
 802a82e:	4608      	mov	r0, r1
 802a830:	4611      	mov	r1, r2
 802a832:	2200      	movs	r2, #0
 802a834:	602a      	str	r2, [r5, #0]
 802a836:	461a      	mov	r2, r3
 802a838:	f7d7 fd09 	bl	800224e <_write>
 802a83c:	1c43      	adds	r3, r0, #1
 802a83e:	d102      	bne.n	802a846 <_write_r+0x1e>
 802a840:	682b      	ldr	r3, [r5, #0]
 802a842:	b103      	cbz	r3, 802a846 <_write_r+0x1e>
 802a844:	6023      	str	r3, [r4, #0]
 802a846:	bd38      	pop	{r3, r4, r5, pc}
 802a848:	20198930 	.word	0x20198930

0802a84c <_close_r>:
 802a84c:	b538      	push	{r3, r4, r5, lr}
 802a84e:	2300      	movs	r3, #0
 802a850:	4d05      	ldr	r5, [pc, #20]	; (802a868 <_close_r+0x1c>)
 802a852:	4604      	mov	r4, r0
 802a854:	4608      	mov	r0, r1
 802a856:	602b      	str	r3, [r5, #0]
 802a858:	f7d7 fd15 	bl	8002286 <_close>
 802a85c:	1c43      	adds	r3, r0, #1
 802a85e:	d102      	bne.n	802a866 <_close_r+0x1a>
 802a860:	682b      	ldr	r3, [r5, #0]
 802a862:	b103      	cbz	r3, 802a866 <_close_r+0x1a>
 802a864:	6023      	str	r3, [r4, #0]
 802a866:	bd38      	pop	{r3, r4, r5, pc}
 802a868:	20198930 	.word	0x20198930

0802a86c <_fstat_r>:
 802a86c:	b538      	push	{r3, r4, r5, lr}
 802a86e:	2300      	movs	r3, #0
 802a870:	4d06      	ldr	r5, [pc, #24]	; (802a88c <_fstat_r+0x20>)
 802a872:	4604      	mov	r4, r0
 802a874:	4608      	mov	r0, r1
 802a876:	4611      	mov	r1, r2
 802a878:	602b      	str	r3, [r5, #0]
 802a87a:	f7d7 fd10 	bl	800229e <_fstat>
 802a87e:	1c43      	adds	r3, r0, #1
 802a880:	d102      	bne.n	802a888 <_fstat_r+0x1c>
 802a882:	682b      	ldr	r3, [r5, #0]
 802a884:	b103      	cbz	r3, 802a888 <_fstat_r+0x1c>
 802a886:	6023      	str	r3, [r4, #0]
 802a888:	bd38      	pop	{r3, r4, r5, pc}
 802a88a:	bf00      	nop
 802a88c:	20198930 	.word	0x20198930

0802a890 <_isatty_r>:
 802a890:	b538      	push	{r3, r4, r5, lr}
 802a892:	2300      	movs	r3, #0
 802a894:	4d05      	ldr	r5, [pc, #20]	; (802a8ac <_isatty_r+0x1c>)
 802a896:	4604      	mov	r4, r0
 802a898:	4608      	mov	r0, r1
 802a89a:	602b      	str	r3, [r5, #0]
 802a89c:	f7d7 fd0f 	bl	80022be <_isatty>
 802a8a0:	1c43      	adds	r3, r0, #1
 802a8a2:	d102      	bne.n	802a8aa <_isatty_r+0x1a>
 802a8a4:	682b      	ldr	r3, [r5, #0]
 802a8a6:	b103      	cbz	r3, 802a8aa <_isatty_r+0x1a>
 802a8a8:	6023      	str	r3, [r4, #0]
 802a8aa:	bd38      	pop	{r3, r4, r5, pc}
 802a8ac:	20198930 	.word	0x20198930

0802a8b0 <_lseek_r>:
 802a8b0:	b538      	push	{r3, r4, r5, lr}
 802a8b2:	4604      	mov	r4, r0
 802a8b4:	4d06      	ldr	r5, [pc, #24]	; (802a8d0 <_lseek_r+0x20>)
 802a8b6:	4608      	mov	r0, r1
 802a8b8:	4611      	mov	r1, r2
 802a8ba:	2200      	movs	r2, #0
 802a8bc:	602a      	str	r2, [r5, #0]
 802a8be:	461a      	mov	r2, r3
 802a8c0:	f7d7 fd08 	bl	80022d4 <_lseek>
 802a8c4:	1c43      	adds	r3, r0, #1
 802a8c6:	d102      	bne.n	802a8ce <_lseek_r+0x1e>
 802a8c8:	682b      	ldr	r3, [r5, #0]
 802a8ca:	b103      	cbz	r3, 802a8ce <_lseek_r+0x1e>
 802a8cc:	6023      	str	r3, [r4, #0]
 802a8ce:	bd38      	pop	{r3, r4, r5, pc}
 802a8d0:	20198930 	.word	0x20198930

0802a8d4 <_read_r>:
 802a8d4:	b538      	push	{r3, r4, r5, lr}
 802a8d6:	4604      	mov	r4, r0
 802a8d8:	4d06      	ldr	r5, [pc, #24]	; (802a8f4 <_read_r+0x20>)
 802a8da:	4608      	mov	r0, r1
 802a8dc:	4611      	mov	r1, r2
 802a8de:	2200      	movs	r2, #0
 802a8e0:	602a      	str	r2, [r5, #0]
 802a8e2:	461a      	mov	r2, r3
 802a8e4:	f7d7 fc96 	bl	8002214 <_read>
 802a8e8:	1c43      	adds	r3, r0, #1
 802a8ea:	d102      	bne.n	802a8f2 <_read_r+0x1e>
 802a8ec:	682b      	ldr	r3, [r5, #0]
 802a8ee:	b103      	cbz	r3, 802a8f2 <_read_r+0x1e>
 802a8f0:	6023      	str	r3, [r4, #0]
 802a8f2:	bd38      	pop	{r3, r4, r5, pc}
 802a8f4:	20198930 	.word	0x20198930

0802a8f8 <_init>:
 802a8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a8fa:	bf00      	nop
 802a8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a8fe:	bc08      	pop	{r3}
 802a900:	469e      	mov	lr, r3
 802a902:	4770      	bx	lr

0802a904 <_fini>:
 802a904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a906:	bf00      	nop
 802a908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a90a:	bc08      	pop	{r3}
 802a90c:	469e      	mov	lr, r3
 802a90e:	4770      	bx	lr
