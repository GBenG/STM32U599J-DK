
STM32U5A9J-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a2fc  0800026c  0800026c  0001026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003014  0802a568  0802a568  0003a568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0802d57c  0802d57c  0003d57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0802d594  0802d594  0003d594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   0000001c  0802d59c  0802d59c  0003d59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000008  0802d5b8  0802d5b8  0003d5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000012c  20000000  0802d5c0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 TouchGFX_Framebuffer 00151800  2000012c  0802d6ec  0004012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004661c  20151930  0817eeec  00191930  2**3
                  ALLOC
 10 ._user_heap_stack 00001804  20197f4c  0817eeec  00197f4c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  001a01b8  2**0
                  CONTENTS, READONLY
 12 FontFlashSection 000001a8  90000000  90000000  001a0000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 TextFlashSection 00000010  900001a8  900001a8  001a01a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 ExtFlashSection 00000000  900001b8  900001b8  001a01ee  2**0
                  CONTENTS
 15 .debug_info   000b43b4  00000000  00000000  001a01ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0001584b  00000000  00000000  002545a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003908  00000000  00000000  00269df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00003c98  00000000  00000000  0026d6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00052a1f  00000000  00000000  00271390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005ec8a  00000000  00000000  002c3daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001b52c2  00000000  00000000  00322a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000cf  00000000  00000000  004d7cfb  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d710  00000000  00000000  004d7dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    00006947  00000000  00000000  004e54dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	; (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <__do_global_dtors_aux+0x20>)
 800027a:	e000      	b.n	800027e <__do_global_dtors_aux+0x12>
 800027c:	bf00      	nop
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	20151930 	.word	0x20151930
 8000288:	00000000 	.word	0x00000000
 800028c:	0802a550 	.word	0x0802a550

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	; (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	; (80002a8 <frame_dummy+0x18>)
 800029a:	e000      	b.n	800029e <frame_dummy+0xe>
 800029c:	bf00      	nop
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	20151934 	.word	0x20151934
 80002a8:	0802a550 	.word	0x0802a550

080002ac <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 80002ac:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ae:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002b2:	4917      	ldr	r1, [pc, #92]	; (8000310 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 80002b4:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002b8:	4816      	ldr	r0, [pc, #88]	; (8000314 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 80002ba:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 80002bc:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002c0:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002c2:	4815      	ldr	r0, [pc, #84]	; (8000318 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002c4:	4912      	ldr	r1, [pc, #72]	; (8000310 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002c6:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002c8:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ca:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ce:	4913      	ldr	r1, [pc, #76]	; (800031c <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002d0:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002d2:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002d6:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002d8:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002dc:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002e0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002e4:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002e8:	490d      	ldr	r1, [pc, #52]	; (8000320 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ea:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ee:	4770      	bx	lr

080002f0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002f0:	f7ff bffe 	b.w	80002f0 <__tx_BadHandler>

080002f4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002f4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002f6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002fa:	4770      	bx	lr

080002fc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002fc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002fe:	f000 f89f 	bl	8000440 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 8000302:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 8000306:	4770      	bx	lr

08000308 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000308:	f7ff bffe 	b.w	8000308 <__tx_NMIHandler>

0800030c <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 800030c:	f7ff bffe 	b.w	800030c <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000310:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000314:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 8000318:	20197428 	.word	0x20197428
    LDR     r1, =SYSTICK_CYCLES
 800031c:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000320:	40ff0000 	.word	0x40ff0000

08000324 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000324:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000328:	4a31      	ldr	r2, [pc, #196]	; (80003f0 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800032a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800032c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000330:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000334:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000338:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800033a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800033e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000342:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000346:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800034a:	f3bf 8f6f 	isb	sy

0800034e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800034e:	e7fe      	b.n	800034e <__tx_wait_here>

08000350 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000350:	4828      	ldr	r0, [pc, #160]	; (80003f4 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000352:	4a29      	ldr	r2, [pc, #164]	; (80003f8 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000354:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000358:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800035a:	b191      	cbz	r1, 8000382 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800035c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800035e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000362:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000366:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800036a:	d101      	bne.n	8000370 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 800036c:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000370 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000370:	4c22      	ldr	r4, [pc, #136]	; (80003fc <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000372:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000376:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800037a:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 800037c:	b10d      	cbz	r5, 8000382 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800037e:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000380:	6023      	str	r3, [r4, #0]

08000382 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000382:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000384:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000386:	b1d1      	cbz	r1, 80003be <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000388:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800038a:	b662      	cpsie	i

0800038c <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800038c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800038e:	4c1b      	ldr	r4, [pc, #108]	; (80003fc <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000390:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000392:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000396:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000398:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800039a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800039e:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003a2:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003a6:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003aa:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003ae:	d101      	bne.n	80003b4 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003b0:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003b4 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003b4:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003b8:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 80003bc:	4770      	bx	lr

080003be <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003c0:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003c2:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003c4:	b949      	cbnz	r1, 80003da <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 80003c6:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 80003c8:	f002 fa28 	bl	800281c <tx_low_power_enter>
    POP     {r0-r3}
 80003cc:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 80003ce:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 80003d0:	f002 fa2e 	bl	8002830 <tx_low_power_exit>
    POP     {r0-r3}
 80003d4:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003d6:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003d8:	e7f1      	b.n	80003be <__tx_ts_wait>

080003da <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003da:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003de:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003e2:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003e6:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003e8:	e7d0      	b.n	800038c <__tx_ts_restore>
 80003ea:	bf00      	nop

080003ec <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003ec:	4770      	bx	lr
 80003ee:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003f0:	201974c4 	.word	0x201974c4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003f4:	2019742c 	.word	0x2019742c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003f8:	20197430 	.word	0x20197430
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003fc:	20197a30 	.word	0x20197a30

08000400 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000400:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000402:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000406:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 800040a:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 800040e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000410:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000414:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000416:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000418:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800041a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800041c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800041e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000420:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000422:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000424:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000426:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000428:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800042c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800042e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000432:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000434:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000436:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800043a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800043c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800043e:	4770      	bx	lr

08000440 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000440:	4922      	ldr	r1, [pc, #136]	; (80004cc <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000442:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000444:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000448:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800044a:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800044c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800044e:	b13a      	cbz	r2, 8000460 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000450:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000454:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000456:	b91a      	cbnz	r2, 8000460 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000458:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800045a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800045e:	6018      	str	r0, [r3, #0]

08000460 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000460:	491d      	ldr	r1, [pc, #116]	; (80004d8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000462:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000464:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000466:	b122      	cbz	r2, 8000472 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000468:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800046a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800046e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000470:	e008      	b.n	8000484 <__tx_timer_done>

08000472 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000472:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000476:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000478:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800047a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800047c:	d101      	bne.n	8000482 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800047e:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000480:	6818      	ldr	r0, [r3, #0]

08000482 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000482:	6008      	str	r0, [r1, #0]

08000484 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000486:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000488:	b912      	cbnz	r2, 8000490 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800048a:	4914      	ldr	r1, [pc, #80]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800048c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800048e:	b1c8      	cbz	r0, 80004c4 <__tx_timer_nothing_expired>

08000490 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000490:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000492:	4912      	ldr	r1, [pc, #72]	; (80004dc <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000494:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000496:	b108      	cbz	r0, 800049c <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000498:	f015 fade 	bl	8015a58 <_tx_timer_expiration_process>

0800049c <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800049c:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800049e:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004a0:	b172      	cbz	r2, 80004c0 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004a2:	f015 fa4b 	bl	801593c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a6:	4810      	ldr	r0, [pc, #64]	; (80004e8 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004a8:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004aa:	b949      	cbnz	r1, 80004c0 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ac:	480f      	ldr	r0, [pc, #60]	; (80004ec <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004ae:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004b0:	4a0f      	ldr	r2, [pc, #60]	; (80004f0 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004b2:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004b4:	480f      	ldr	r0, [pc, #60]	; (80004f4 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004ba:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004bc:	d000      	beq.n	80004c0 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004be:	6002      	str	r2, [r0, #0]

080004c0 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 80004c0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004c4 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004c4:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004c8:	4770      	bx	lr
 80004ca:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004cc:	201974d0 	.word	0x201974d0
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004d0:	20197a30 	.word	0x20197a30
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004d4:	201974d4 	.word	0x201974d4
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004d8:	20197560 	.word	0x20197560
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004dc:	20197564 	.word	0x20197564
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004e0:	2019755c 	.word	0x2019755c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004e4:	20197558 	.word	0x20197558
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004e8:	201974c4 	.word	0x201974c4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ec:	2019742c 	.word	0x2019742c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004f0:	20197430 	.word	0x20197430
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004f4:	e000ed04 	.word	0xe000ed04

080004f8 <__aeabi_uldivmod>:
 80004f8:	b953      	cbnz	r3, 8000510 <__aeabi_uldivmod+0x18>
 80004fa:	b94a      	cbnz	r2, 8000510 <__aeabi_uldivmod+0x18>
 80004fc:	2900      	cmp	r1, #0
 80004fe:	bf08      	it	eq
 8000500:	2800      	cmpeq	r0, #0
 8000502:	bf1c      	itt	ne
 8000504:	f04f 31ff 	movne.w	r1, #4294967295
 8000508:	f04f 30ff 	movne.w	r0, #4294967295
 800050c:	f000 b982 	b.w	8000814 <__aeabi_idiv0>
 8000510:	f1ad 0c08 	sub.w	ip, sp, #8
 8000514:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000518:	f000 f806 	bl	8000528 <__udivmoddi4>
 800051c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000524:	b004      	add	sp, #16
 8000526:	4770      	bx	lr

08000528 <__udivmoddi4>:
 8000528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800052c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800052e:	4604      	mov	r4, r0
 8000530:	460f      	mov	r7, r1
 8000532:	2b00      	cmp	r3, #0
 8000534:	d148      	bne.n	80005c8 <__udivmoddi4+0xa0>
 8000536:	428a      	cmp	r2, r1
 8000538:	4694      	mov	ip, r2
 800053a:	d961      	bls.n	8000600 <__udivmoddi4+0xd8>
 800053c:	fab2 f382 	clz	r3, r2
 8000540:	b143      	cbz	r3, 8000554 <__udivmoddi4+0x2c>
 8000542:	f1c3 0120 	rsb	r1, r3, #32
 8000546:	409f      	lsls	r7, r3
 8000548:	fa02 fc03 	lsl.w	ip, r2, r3
 800054c:	409c      	lsls	r4, r3
 800054e:	fa20 f101 	lsr.w	r1, r0, r1
 8000552:	430f      	orrs	r7, r1
 8000554:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	0c22      	lsrs	r2, r4, #16
 800055e:	fbb7 f6f1 	udiv	r6, r7, r1
 8000562:	fb01 7716 	mls	r7, r1, r6, r7
 8000566:	fb06 f00e 	mul.w	r0, r6, lr
 800056a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800056e:	4290      	cmp	r0, r2
 8000570:	d908      	bls.n	8000584 <__udivmoddi4+0x5c>
 8000572:	eb1c 0202 	adds.w	r2, ip, r2
 8000576:	f106 37ff 	add.w	r7, r6, #4294967295
 800057a:	d202      	bcs.n	8000582 <__udivmoddi4+0x5a>
 800057c:	4290      	cmp	r0, r2
 800057e:	f200 8137 	bhi.w	80007f0 <__udivmoddi4+0x2c8>
 8000582:	463e      	mov	r6, r7
 8000584:	1a12      	subs	r2, r2, r0
 8000586:	b2a4      	uxth	r4, r4
 8000588:	fbb2 f0f1 	udiv	r0, r2, r1
 800058c:	fb01 2210 	mls	r2, r1, r0, r2
 8000590:	fb00 fe0e 	mul.w	lr, r0, lr
 8000594:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000598:	45a6      	cmp	lr, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x86>
 800059c:	eb1c 0404 	adds.w	r4, ip, r4
 80005a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80005a4:	d202      	bcs.n	80005ac <__udivmoddi4+0x84>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f200 811c 	bhi.w	80007e4 <__udivmoddi4+0x2bc>
 80005ac:	4610      	mov	r0, r2
 80005ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	2600      	movs	r6, #0
 80005b8:	b11d      	cbz	r5, 80005c2 <__udivmoddi4+0x9a>
 80005ba:	40dc      	lsrs	r4, r3
 80005bc:	2300      	movs	r3, #0
 80005be:	e9c5 4300 	strd	r4, r3, [r5]
 80005c2:	4631      	mov	r1, r6
 80005c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005c8:	428b      	cmp	r3, r1
 80005ca:	d909      	bls.n	80005e0 <__udivmoddi4+0xb8>
 80005cc:	2d00      	cmp	r5, #0
 80005ce:	f000 80fd 	beq.w	80007cc <__udivmoddi4+0x2a4>
 80005d2:	2600      	movs	r6, #0
 80005d4:	e9c5 0100 	strd	r0, r1, [r5]
 80005d8:	4630      	mov	r0, r6
 80005da:	4631      	mov	r1, r6
 80005dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005e0:	fab3 f683 	clz	r6, r3
 80005e4:	2e00      	cmp	r6, #0
 80005e6:	d14b      	bne.n	8000680 <__udivmoddi4+0x158>
 80005e8:	428b      	cmp	r3, r1
 80005ea:	f0c0 80f2 	bcc.w	80007d2 <__udivmoddi4+0x2aa>
 80005ee:	4282      	cmp	r2, r0
 80005f0:	f240 80ef 	bls.w	80007d2 <__udivmoddi4+0x2aa>
 80005f4:	4630      	mov	r0, r6
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	d0e3      	beq.n	80005c2 <__udivmoddi4+0x9a>
 80005fa:	e9c5 4700 	strd	r4, r7, [r5]
 80005fe:	e7e0      	b.n	80005c2 <__udivmoddi4+0x9a>
 8000600:	b902      	cbnz	r2, 8000604 <__udivmoddi4+0xdc>
 8000602:	deff      	udf	#255	; 0xff
 8000604:	fab2 f382 	clz	r3, r2
 8000608:	2b00      	cmp	r3, #0
 800060a:	f040 809d 	bne.w	8000748 <__udivmoddi4+0x220>
 800060e:	1a89      	subs	r1, r1, r2
 8000610:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000614:	b297      	uxth	r7, r2
 8000616:	2601      	movs	r6, #1
 8000618:	0c20      	lsrs	r0, r4, #16
 800061a:	fbb1 f2fe 	udiv	r2, r1, lr
 800061e:	fb0e 1112 	mls	r1, lr, r2, r1
 8000622:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000626:	fb07 f002 	mul.w	r0, r7, r2
 800062a:	4288      	cmp	r0, r1
 800062c:	d90f      	bls.n	800064e <__udivmoddi4+0x126>
 800062e:	eb1c 0101 	adds.w	r1, ip, r1
 8000632:	f102 38ff 	add.w	r8, r2, #4294967295
 8000636:	bf2c      	ite	cs
 8000638:	f04f 0901 	movcs.w	r9, #1
 800063c:	f04f 0900 	movcc.w	r9, #0
 8000640:	4288      	cmp	r0, r1
 8000642:	d903      	bls.n	800064c <__udivmoddi4+0x124>
 8000644:	f1b9 0f00 	cmp.w	r9, #0
 8000648:	f000 80cf 	beq.w	80007ea <__udivmoddi4+0x2c2>
 800064c:	4642      	mov	r2, r8
 800064e:	1a09      	subs	r1, r1, r0
 8000650:	b2a4      	uxth	r4, r4
 8000652:	fbb1 f0fe 	udiv	r0, r1, lr
 8000656:	fb0e 1110 	mls	r1, lr, r0, r1
 800065a:	fb00 f707 	mul.w	r7, r0, r7
 800065e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000662:	42a7      	cmp	r7, r4
 8000664:	d908      	bls.n	8000678 <__udivmoddi4+0x150>
 8000666:	eb1c 0404 	adds.w	r4, ip, r4
 800066a:	f100 31ff 	add.w	r1, r0, #4294967295
 800066e:	d202      	bcs.n	8000676 <__udivmoddi4+0x14e>
 8000670:	42a7      	cmp	r7, r4
 8000672:	f200 80b4 	bhi.w	80007de <__udivmoddi4+0x2b6>
 8000676:	4608      	mov	r0, r1
 8000678:	1be4      	subs	r4, r4, r7
 800067a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800067e:	e79b      	b.n	80005b8 <__udivmoddi4+0x90>
 8000680:	f1c6 0720 	rsb	r7, r6, #32
 8000684:	40b3      	lsls	r3, r6
 8000686:	fa01 f406 	lsl.w	r4, r1, r6
 800068a:	fa22 fc07 	lsr.w	ip, r2, r7
 800068e:	40f9      	lsrs	r1, r7
 8000690:	40b2      	lsls	r2, r6
 8000692:	ea4c 0c03 	orr.w	ip, ip, r3
 8000696:	fa20 f307 	lsr.w	r3, r0, r7
 800069a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800069e:	431c      	orrs	r4, r3
 80006a0:	fa1f fe8c 	uxth.w	lr, ip
 80006a4:	fa00 f306 	lsl.w	r3, r0, r6
 80006a8:	0c20      	lsrs	r0, r4, #16
 80006aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80006ae:	fb09 1118 	mls	r1, r9, r8, r1
 80006b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006b6:	fb08 f00e 	mul.w	r0, r8, lr
 80006ba:	4288      	cmp	r0, r1
 80006bc:	d90f      	bls.n	80006de <__udivmoddi4+0x1b6>
 80006be:	eb1c 0101 	adds.w	r1, ip, r1
 80006c2:	f108 3aff 	add.w	sl, r8, #4294967295
 80006c6:	bf2c      	ite	cs
 80006c8:	f04f 0b01 	movcs.w	fp, #1
 80006cc:	f04f 0b00 	movcc.w	fp, #0
 80006d0:	4288      	cmp	r0, r1
 80006d2:	d903      	bls.n	80006dc <__udivmoddi4+0x1b4>
 80006d4:	f1bb 0f00 	cmp.w	fp, #0
 80006d8:	f000 808d 	beq.w	80007f6 <__udivmoddi4+0x2ce>
 80006dc:	46d0      	mov	r8, sl
 80006de:	1a09      	subs	r1, r1, r0
 80006e0:	b2a4      	uxth	r4, r4
 80006e2:	fbb1 f0f9 	udiv	r0, r1, r9
 80006e6:	fb09 1110 	mls	r1, r9, r0, r1
 80006ea:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ee:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006f2:	458e      	cmp	lr, r1
 80006f4:	d907      	bls.n	8000706 <__udivmoddi4+0x1de>
 80006f6:	eb1c 0101 	adds.w	r1, ip, r1
 80006fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80006fe:	d201      	bcs.n	8000704 <__udivmoddi4+0x1dc>
 8000700:	458e      	cmp	lr, r1
 8000702:	d87f      	bhi.n	8000804 <__udivmoddi4+0x2dc>
 8000704:	4620      	mov	r0, r4
 8000706:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800070a:	eba1 010e 	sub.w	r1, r1, lr
 800070e:	fba0 9802 	umull	r9, r8, r0, r2
 8000712:	4541      	cmp	r1, r8
 8000714:	464c      	mov	r4, r9
 8000716:	46c6      	mov	lr, r8
 8000718:	d302      	bcc.n	8000720 <__udivmoddi4+0x1f8>
 800071a:	d106      	bne.n	800072a <__udivmoddi4+0x202>
 800071c:	454b      	cmp	r3, r9
 800071e:	d204      	bcs.n	800072a <__udivmoddi4+0x202>
 8000720:	3801      	subs	r0, #1
 8000722:	ebb9 0402 	subs.w	r4, r9, r2
 8000726:	eb68 0e0c 	sbc.w	lr, r8, ip
 800072a:	2d00      	cmp	r5, #0
 800072c:	d070      	beq.n	8000810 <__udivmoddi4+0x2e8>
 800072e:	1b1a      	subs	r2, r3, r4
 8000730:	eb61 010e 	sbc.w	r1, r1, lr
 8000734:	fa22 f306 	lsr.w	r3, r2, r6
 8000738:	fa01 f707 	lsl.w	r7, r1, r7
 800073c:	40f1      	lsrs	r1, r6
 800073e:	2600      	movs	r6, #0
 8000740:	431f      	orrs	r7, r3
 8000742:	e9c5 7100 	strd	r7, r1, [r5]
 8000746:	e73c      	b.n	80005c2 <__udivmoddi4+0x9a>
 8000748:	fa02 fc03 	lsl.w	ip, r2, r3
 800074c:	f1c3 0020 	rsb	r0, r3, #32
 8000750:	fa01 f203 	lsl.w	r2, r1, r3
 8000754:	fa21 f600 	lsr.w	r6, r1, r0
 8000758:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800075c:	fa24 f100 	lsr.w	r1, r4, r0
 8000760:	fa1f f78c 	uxth.w	r7, ip
 8000764:	409c      	lsls	r4, r3
 8000766:	4311      	orrs	r1, r2
 8000768:	fbb6 f0fe 	udiv	r0, r6, lr
 800076c:	0c0a      	lsrs	r2, r1, #16
 800076e:	fb0e 6610 	mls	r6, lr, r0, r6
 8000772:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000776:	fb00 f607 	mul.w	r6, r0, r7
 800077a:	4296      	cmp	r6, r2
 800077c:	d90e      	bls.n	800079c <__udivmoddi4+0x274>
 800077e:	eb1c 0202 	adds.w	r2, ip, r2
 8000782:	f100 38ff 	add.w	r8, r0, #4294967295
 8000786:	bf2c      	ite	cs
 8000788:	f04f 0901 	movcs.w	r9, #1
 800078c:	f04f 0900 	movcc.w	r9, #0
 8000790:	4296      	cmp	r6, r2
 8000792:	d902      	bls.n	800079a <__udivmoddi4+0x272>
 8000794:	f1b9 0f00 	cmp.w	r9, #0
 8000798:	d031      	beq.n	80007fe <__udivmoddi4+0x2d6>
 800079a:	4640      	mov	r0, r8
 800079c:	1b92      	subs	r2, r2, r6
 800079e:	b289      	uxth	r1, r1
 80007a0:	fbb2 f6fe 	udiv	r6, r2, lr
 80007a4:	fb0e 2216 	mls	r2, lr, r6, r2
 80007a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80007ac:	fb06 f207 	mul.w	r2, r6, r7
 80007b0:	428a      	cmp	r2, r1
 80007b2:	d907      	bls.n	80007c4 <__udivmoddi4+0x29c>
 80007b4:	eb1c 0101 	adds.w	r1, ip, r1
 80007b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80007bc:	d201      	bcs.n	80007c2 <__udivmoddi4+0x29a>
 80007be:	428a      	cmp	r2, r1
 80007c0:	d823      	bhi.n	800080a <__udivmoddi4+0x2e2>
 80007c2:	4646      	mov	r6, r8
 80007c4:	1a89      	subs	r1, r1, r2
 80007c6:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007ca:	e725      	b.n	8000618 <__udivmoddi4+0xf0>
 80007cc:	462e      	mov	r6, r5
 80007ce:	4628      	mov	r0, r5
 80007d0:	e6f7      	b.n	80005c2 <__udivmoddi4+0x9a>
 80007d2:	1a84      	subs	r4, r0, r2
 80007d4:	eb61 0303 	sbc.w	r3, r1, r3
 80007d8:	2001      	movs	r0, #1
 80007da:	461f      	mov	r7, r3
 80007dc:	e70b      	b.n	80005f6 <__udivmoddi4+0xce>
 80007de:	4464      	add	r4, ip
 80007e0:	3802      	subs	r0, #2
 80007e2:	e749      	b.n	8000678 <__udivmoddi4+0x150>
 80007e4:	4464      	add	r4, ip
 80007e6:	3802      	subs	r0, #2
 80007e8:	e6e1      	b.n	80005ae <__udivmoddi4+0x86>
 80007ea:	3a02      	subs	r2, #2
 80007ec:	4461      	add	r1, ip
 80007ee:	e72e      	b.n	800064e <__udivmoddi4+0x126>
 80007f0:	3e02      	subs	r6, #2
 80007f2:	4462      	add	r2, ip
 80007f4:	e6c6      	b.n	8000584 <__udivmoddi4+0x5c>
 80007f6:	f1a8 0802 	sub.w	r8, r8, #2
 80007fa:	4461      	add	r1, ip
 80007fc:	e76f      	b.n	80006de <__udivmoddi4+0x1b6>
 80007fe:	3802      	subs	r0, #2
 8000800:	4462      	add	r2, ip
 8000802:	e7cb      	b.n	800079c <__udivmoddi4+0x274>
 8000804:	3802      	subs	r0, #2
 8000806:	4461      	add	r1, ip
 8000808:	e77d      	b.n	8000706 <__udivmoddi4+0x1de>
 800080a:	3e02      	subs	r6, #2
 800080c:	4461      	add	r1, ip
 800080e:	e7d9      	b.n	80007c4 <__udivmoddi4+0x29c>
 8000810:	462e      	mov	r6, r5
 8000812:	e6d6      	b.n	80005c2 <__udivmoddi4+0x9a>

08000814 <__aeabi_idiv0>:
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop

08000818 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af02      	add	r7, sp, #8
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000824:	2334      	movs	r3, #52	; 0x34
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082c:	4a13      	ldr	r2, [pc, #76]	; (800087c <tx_application_define+0x64>)
 800082e:	4914      	ldr	r1, [pc, #80]	; (8000880 <tx_application_define+0x68>)
 8000830:	4814      	ldr	r0, [pc, #80]	; (8000884 <tx_application_define+0x6c>)
 8000832:	f015 fbbb 	bl	8015fac <_txe_byte_pool_create>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d109      	bne.n	8000850 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <tx_application_define+0x6c>)
 800083e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000840:	68b8      	ldr	r0, [r7, #8]
 8000842:	f000 f827 	bl	8000894 <App_ThreadX_Init>
 8000846:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d000      	beq.n	8000850 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800084e:	e7fe      	b.n	800084e <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&touchgfx_app_byte_pool, "TouchGFX App memory pool", touchgfx_byte_pool_buffer, TOUCHGFX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000850:	2334      	movs	r3, #52	; 0x34
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <tx_application_define+0x70>)
 800085a:	490c      	ldr	r1, [pc, #48]	; (800088c <tx_application_define+0x74>)
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <tx_application_define+0x78>)
 800085e:	f015 fba5 	bl	8015fac <_txe_byte_pool_create>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d104      	bne.n	8000872 <tx_application_define+0x5a>
  {
    /* USER CODE BEGIN TouchGFX_Byte_Pool_Success */

    /* USER CODE END TouchGFX_Byte_Pool_Success */

    memory_ptr = (VOID *)&touchgfx_app_byte_pool;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <tx_application_define+0x78>)
 800086a:	60bb      	str	r3, [r7, #8]
    if (MX_TouchGFX_Init(memory_ptr) != TX_SUCCESS)
 800086c:	68b8      	ldr	r0, [r7, #8]
 800086e:	f001 fd11 	bl	8002294 <MX_TouchGFX_Init>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2015194c 	.word	0x2015194c
 8000880:	0802a568 	.word	0x0802a568
 8000884:	20151d4c 	.word	0x20151d4c
 8000888:	20151d80 	.word	0x20151d80
 800088c:	0802a57c 	.word	0x0802a57c
 8000890:	20152d80 	.word	0x20152d80

08000894 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80008b2:	f013 fea5 	bl	8014600 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c0:	f007 f85a 	bl	8007978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c4:	f000 f82a 	bl	800091c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008c8:	f000 f887 	bl	80009da <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80008cc:	f000 f8ba 	bl	8000a44 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f000 ff0e 	bl	80016f0 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80008d4:	f000 fb28 	bl	8000f28 <MX_ICACHE_Init>
  MX_CRC_Init();
 80008d8:	f000 f8c2 	bl	8000a60 <MX_CRC_Init>
  MX_TIM8_Init();
 80008dc:	f000 fe0c 	bl	80014f8 <MX_TIM8_Init>
  MX_DMA2D_Init();
 80008e0:	f000 f91c 	bl	8000b1c <MX_DMA2D_Init>
  MX_GPU2D_Init();
 80008e4:	f000 fa8c 	bl	8000e00 <MX_GPU2D_Init>
  MX_DSIHOST_DSI_Init();
 80008e8:	f000 f93c 	bl	8000b64 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 80008ec:	f000 fb30 	bl	8000f50 <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 80008f0:	f000 fdba 	bl	8001468 <MX_OCTOSPI1_Init>
  MX_HSPI1_Init();
 80008f4:	f000 fa98 	bl	8000e28 <MX_HSPI1_Init>
  MX_DCACHE1_Init();
 80008f8:	f000 f8d4 	bl	8000aa4 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80008fc:	f000 f8f0 	bl	8000ae0 <MX_DCACHE2_Init>
  MX_USART1_UART_Init();
 8000900:	f000 feaa 	bl	8001658 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8000904:	f000 fad0 	bl	8000ea8 <MX_I2C3_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000908:	f001 fcbb 	bl	8002282 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  printf("Hello VL53L5CX\r\n" );
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <main+0x5c>)
 800090e:	f029 f97d 	bl	8029c0c <puts>
//
//  printf("Ranging starts\n");
//  status = vl53l5cx_start_ranging(&Dev);
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000912:	f7ff ffcc 	bl	80008ae <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000916:	e7fe      	b.n	8000916 <main+0x5a>
 8000918:	0802a598 	.word	0x0802a598

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b09e      	sub	sp, #120	; 0x78
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0318 	add.w	r3, r7, #24
 8000926:	2260      	movs	r2, #96	; 0x60
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f028 fd10 	bl	8029350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
 800093e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000940:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000944:	f00b fac6 	bl	800bed4 <HAL_PWREx_ControlVoltageScaling>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800094e:	f000 fffd 	bl	800194c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
 8000952:	2311      	movs	r3, #17
 8000954:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800095a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800095c:	2301      	movs	r3, #1
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000960:	2310      	movs	r3, #16
 8000962:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000968:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096a:	2302      	movs	r3, #2
 800096c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800096e:	2301      	movs	r3, #1
 8000970:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000976:	2301      	movs	r3, #1
 8000978:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 800097a:	2350      	movs	r3, #80	; 0x50
 800097c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800097e:	2302      	movs	r3, #2
 8000980:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000982:	2302      	movs	r3, #2
 8000984:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 800098a:	2300      	movs	r3, #0
 800098c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000992:	f107 0318 	add.w	r3, r7, #24
 8000996:	4618      	mov	r0, r3
 8000998:	f00b fb98 	bl	800c0cc <HAL_RCC_OscConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009a2:	f000 ffd3 	bl	800194c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a6:	231f      	movs	r3, #31
 80009a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009aa:	2303      	movs	r3, #3
 80009ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009be:	463b      	mov	r3, r7
 80009c0:	2104      	movs	r1, #4
 80009c2:	4618      	mov	r0, r3
 80009c4:	f00c fa5e 	bl	800ce84 <HAL_RCC_ClockConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009ce:	f000 ffbd 	bl	800194c <Error_Handler>
  }
}
 80009d2:	bf00      	nop
 80009d4:	3778      	adds	r7, #120	; 0x78
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b0b8      	sub	sp, #224	; 0xe0
 80009de:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e0:	463b      	mov	r3, r7
 80009e2:	22e0      	movs	r2, #224	; 0xe0
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f028 fcb2 	bl	8029350 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_DSI;
 80009ec:	f04f 0200 	mov.w	r2, #0
 80009f0:	f04f 0306 	mov.w	r3, #6
 80009f4:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_PLL3;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL3;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLL3.PLL3M = 4;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLL3.PLL3N = 125;
 8000a0c:	237d      	movs	r3, #125	; 0x7d
 8000a0e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLL3.PLL3P = 8;
 8000a10:	2308      	movs	r3, #8
 8000a12:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.PLL3.PLL3Q = 2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.PLL3.PLL3R = 24;
 8000a18:	2318      	movs	r3, #24
 8000a1a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLL3.PLL3FRACN = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVP|RCC_PLL3_DIVR;
 8000a24:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f00c fe37 	bl	800d6a0 <HAL_RCCEx_PeriphCLKConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <PeriphCommonClock_Config+0x62>
  {
    Error_Handler();
 8000a38:	f000 ff88 	bl	800194c <Error_Handler>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	37e0      	adds	r7, #224	; 0xe0
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a48:	f00b fb30 	bl	800c0ac <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000a4c:	2002      	movs	r0, #2
 8000a4e:	f00b facd 	bl	800bfec <HAL_PWREx_ConfigSupply>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000a58:	f000 ff78 	bl	800194c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <MX_CRC_Init+0x3c>)
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <MX_CRC_Init+0x40>)
 8000a68:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_CRC_Init+0x3c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <MX_CRC_Init+0x3c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_CRC_Init+0x3c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <MX_CRC_Init+0x3c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_CRC_Init+0x3c>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_CRC_Init+0x3c>)
 8000a8a:	f007 f8c7 	bl	8007c1c <HAL_CRC_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000a94:	f000 ff5a 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20152db4 	.word	0x20152db4
 8000aa0:	40023000 	.word	0x40023000

08000aa4 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_DCACHE1_Init+0x34>)
 8000aaa:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <MX_DCACHE1_Init+0x38>)
 8000aac:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_INCR;
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <MX_DCACHE1_Init+0x34>)
 8000ab0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ab4:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000ab6:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <MX_DCACHE1_Init+0x34>)
 8000ab8:	f007 f9a2 	bl	8007e00 <HAL_DCACHE_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_DCACHE1_Init+0x22>
  {
    Error_Handler();
 8000ac2:	f000 ff43 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */
  HAL_DCACHE_Enable(&hdcache1);
 8000ac6:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_DCACHE1_Init+0x34>)
 8000ac8:	f007 f9ec 	bl	8007ea4 <HAL_DCACHE_Enable>
  HAL_DCACHE_Invalidate(&hdcache1);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <MX_DCACHE1_Init+0x34>)
 8000ace:	f007 fa10 	bl	8007ef2 <HAL_DCACHE_Invalidate>
  /* USER CODE END DCACHE1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20152dd8 	.word	0x20152dd8
 8000adc:	40031400 	.word	0x40031400

08000ae0 <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <MX_DCACHE2_Init+0x34>)
 8000ae6:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <MX_DCACHE2_Init+0x38>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_INCR;
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <MX_DCACHE2_Init+0x34>)
 8000aec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000af0:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 8000af2:	4808      	ldr	r0, [pc, #32]	; (8000b14 <MX_DCACHE2_Init+0x34>)
 8000af4:	f007 f984 	bl	8007e00 <HAL_DCACHE_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_DCACHE2_Init+0x22>
  {
    Error_Handler();
 8000afe:	f000 ff25 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */
  HAL_DCACHE_Enable(&hdcache2);
 8000b02:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_DCACHE2_Init+0x34>)
 8000b04:	f007 f9ce 	bl	8007ea4 <HAL_DCACHE_Enable>
  HAL_DCACHE_Invalidate(&hdcache2);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <MX_DCACHE2_Init+0x34>)
 8000b0a:	f007 f9f2 	bl	8007ef2 <HAL_DCACHE_Invalidate>
  /* USER CODE END DCACHE2_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20152e04 	.word	0x20152e04
 8000b18:	40031800 	.word	0x40031800

08000b1c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_DMA2D_Init+0x40>)
 8000b22:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <MX_DMA2D_Init+0x44>)
 8000b24:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <MX_DMA2D_Init+0x40>)
 8000b28:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b2c:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_DMA2D_Init+0x40>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_DMA2D_Init+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_DMA2D_Init+0x40>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_DMA2D_Init+0x40>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_DMA2D_Init+0x40>)
 8000b48:	f007 fe8c 	bl	8008864 <HAL_DMA2D_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_DMA2D_Init+0x3a>
  {
    Error_Handler();
 8000b52:	f000 fefb 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20152e30 	.word	0x20152e30
 8000b60:	4002b000 	.word	0x4002b000

08000b64 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0e8      	sub	sp, #416	; 0x1a0
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	48a1      	ldr	r0, [pc, #644]	; (8000df4 <MX_DSIHOST_DSI_Init+0x290>)
 8000b70:	f009 fca2 	bl	800a4b8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000b74:	2005      	movs	r0, #5
 8000b76:	f006 ff4d 	bl	8007a14 <HAL_Delay>
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	489d      	ldr	r0, [pc, #628]	; (8000df4 <MX_DSIHOST_DSI_Init+0x290>)
 8000b80:	f009 fc9a 	bl	800a4b8 <HAL_GPIO_WritePin>
  HAL_Delay(11);
 8000b84:	200b      	movs	r0, #11
 8000b86:	f006 ff45 	bl	8007a14 <HAL_Delay>
  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000b8a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]
 8000b9a:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000b9c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000ba0:	2224      	movs	r2, #36	; 0x24
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f028 fbd3 	bl	8029350 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000baa:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
 8000bba:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000bbc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000bc0:	226c      	movs	r2, #108	; 0x6c
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f028 fbc3 	bl	8029350 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000bca:	4b8b      	ldr	r3, [pc, #556]	; (8000df8 <MX_DSIHOST_DSI_Init+0x294>)
 8000bcc:	4a8b      	ldr	r2, [pc, #556]	; (8000dfc <MX_DSIHOST_DSI_Init+0x298>)
 8000bce:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000bd0:	4b89      	ldr	r3, [pc, #548]	; (8000df8 <MX_DSIHOST_DSI_Init+0x294>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000bd6:	4b88      	ldr	r3, [pc, #544]	; (8000df8 <MX_DSIHOST_DSI_Init+0x294>)
 8000bd8:	2204      	movs	r2, #4
 8000bda:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000bdc:	4b86      	ldr	r3, [pc, #536]	; (8000df8 <MX_DSIHOST_DSI_Init+0x294>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 8000be2:	4b85      	ldr	r3, [pc, #532]	; (8000df8 <MX_DSIHOST_DSI_Init+0x294>)
 8000be4:	2208      	movs	r2, #8
 8000be6:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 8000be8:	4b83      	ldr	r3, [pc, #524]	; (8000df8 <MX_DSIHOST_DSI_Init+0x294>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 8000bee:	237d      	movs	r3, #125	; 0x7d
 8000bf0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 8000c00:	2301      	movs	r3, #1
 8000c02:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000c12:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000c16:	4619      	mov	r1, r3
 8000c18:	4877      	ldr	r0, [pc, #476]	; (8000df8 <MX_DSIHOST_DSI_Init+0x294>)
 8000c1a:	f008 f8e5 	bl	8008de8 <HAL_DSI_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_DSIHOST_DSI_Init+0xc4>
  {
    Error_Handler();
 8000c24:	f000 fe92 	bl	800194c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  HostTimeouts.LowPowerReadTimeout = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  HostTimeouts.BTATimeout = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000c5e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000c62:	4619      	mov	r1, r3
 8000c64:	4864      	ldr	r0, [pc, #400]	; (8000df8 <MX_DSIHOST_DSI_Init+0x294>)
 8000c66:	f008 fd50 	bl	800970a <HAL_DSI_ConfigHostTimeouts>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000c70:	f000 fe6c 	bl	800194c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 11;
 8000c74:	230b      	movs	r3, #11
 8000c76:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  PhyTimings.ClockLaneLP2HSTime = 40;
 8000c7a:	2328      	movs	r3, #40	; 0x28
 8000c7c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  PhyTimings.DataLaneHS2LPTime = 12;
 8000c80:	230c      	movs	r3, #12
 8000c82:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  PhyTimings.DataLaneLP2HSTime = 23;
 8000c86:	2317      	movs	r3, #23
 8000c88:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  PhyTimings.DataLaneMaxReadTime = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  PhyTimings.StopWaitTime = 7;
 8000c92:	2307      	movs	r3, #7
 8000c94:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000c98:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4856      	ldr	r0, [pc, #344]	; (8000df8 <MX_DSIHOST_DSI_Init+0x294>)
 8000ca0:	f008 fc9d 	bl	80095de <HAL_DSI_ConfigPhyTimer>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_DSIHOST_DSI_Init+0x14a>
  {
    Error_Handler();
 8000caa:	f000 fe4f 	bl	800194c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000cae:	2104      	movs	r1, #4
 8000cb0:	4851      	ldr	r0, [pc, #324]	; (8000df8 <MX_DSIHOST_DSI_Init+0x294>)
 8000cb2:	f008 fc6c 	bl	800958e <HAL_DSI_ConfigFlowControl>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_DSIHOST_DSI_Init+0x15c>
  {
    Error_Handler();
 8000cbc:	f000 fe46 	bl	800194c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	484d      	ldr	r0, [pc, #308]	; (8000df8 <MX_DSIHOST_DSI_Init+0x294>)
 8000cc4:	f008 f964 	bl	8008f90 <HAL_DSI_ConfigErrorMonitor>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_DSIHOST_DSI_Init+0x16e>
  {
    Error_Handler();
 8000cce:	f000 fe3d 	bl	800194c <Error_Handler>
  }
  VidCfg.ColorCoding = DSI_RGB888;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  VidCfg.PacketSize = 480;
 8000ce4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ce8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  VidCfg.NumberOfChunks = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  VidCfg.NullPacketSize = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  VidCfg.HorizontalSyncActive = 6;
 8000d0a:	2306      	movs	r3, #6
 8000d0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  VidCfg.HorizontalBackPorch = 3;
 8000d10:	2303      	movs	r3, #3
 8000d12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  VidCfg.HorizontalLine = 1452;
 8000d16:	f240 53ac 	movw	r3, #1452	; 0x5ac
 8000d1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  VidCfg.VerticalSyncActive = 20;
 8000d1e:	2314      	movs	r3, #20
 8000d20:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  VidCfg.VerticalBackPorch = 12;
 8000d24:	230c      	movs	r3, #12
 8000d26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  VidCfg.VerticalFrontPorch = 200;
 8000d2a:	23c8      	movs	r3, #200	; 0xc8
 8000d2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  VidCfg.VerticalActive = 481;
 8000d30:	f240 13e1 	movw	r3, #481	; 0x1e1
 8000d34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  VidCfg.LPLargestPacketSize = 64;
 8000d40:	2340      	movs	r3, #64	; 0x40
 8000d42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  VidCfg.LPVACTLargestPacketSize = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d50:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d58:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d60:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d68:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d70:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d78:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_ENABLE;
 8000d7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d80:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000d84:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	481b      	ldr	r0, [pc, #108]	; (8000df8 <MX_DSIHOST_DSI_Init+0x294>)
 8000d8c:	f008 f9f7 	bl	800917e <HAL_DSI_ConfigVideoMode>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_DSIHOST_DSI_Init+0x236>
  {
    Error_Handler();
 8000d96:	f000 fdd9 	bl	800194c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4816      	ldr	r0, [pc, #88]	; (8000df8 <MX_DSIHOST_DSI_Init+0x294>)
 8000d9e:	f008 f9c3 	bl	8009128 <HAL_DSI_SetGenericVCID>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_DSIHOST_DSI_Init+0x248>
  {
    Error_Handler();
 8000da8:	f000 fdd0 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  // Start DSI
  if (HAL_DSI_Start(&hdsi) != HAL_OK)
 8000dac:	4812      	ldr	r0, [pc, #72]	; (8000df8 <MX_DSIHOST_DSI_Init+0x294>)
 8000dae:	f008 fd72 	bl	8009896 <HAL_DSI_Start>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_DSIHOST_DSI_Init+0x258>
  {
    Error_Handler();
 8000db8:	f000 fdc8 	bl	800194c <Error_Handler>
  }

  /* Switch to DSI PHY PLL clock */
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000dbc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000dc0:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8000dc4:	f04f 0200 	mov.w	r2, #0
 8000dc8:	f04f 0304 	mov.w	r3, #4
 8000dcc:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.DsiClockSelection    = RCC_DSICLKSOURCE_DSIPHY;
 8000dd0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000dd4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000dd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ddc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000de0:	463b      	mov	r3, r7
 8000de2:	4618      	mov	r0, r3
 8000de4:	f00c fc5c 	bl	800d6a0 <HAL_RCCEx_PeriphCLKConfig>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	42022000 	.word	0x42022000
 8000df8:	20152e90 	.word	0x20152e90
 8000dfc:	40016c00 	.word	0x40016c00

08000e00 <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_GPU2D_Init+0x20>)
 8000e06:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <MX_GPU2D_Init+0x24>)
 8000e08:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_GPU2D_Init+0x20>)
 8000e0c:	f009 fc11 	bl	800a632 <HAL_GPU2D_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 8000e16:	f000 fd99 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20152eb4 	.word	0x20152eb4
 8000e24:	4002f000 	.word	0x4002f000

08000e28 <MX_HSPI1_Init>:
  * @brief HSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HSPI1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN HSPI1_Init 2 */
#endif
  BSP_HSPI_RAM_Cfg_t sHSPI_Init;

  sHSPI_Init.LatencyType      = BSP_HSPI_RAM_FIXED_LATENCY;
 8000e2e:	2320      	movs	r3, #32
 8000e30:	703b      	strb	r3, [r7, #0]
  sHSPI_Init.BurstType        = BSP_HSPI_RAM_LINEAR_BURST;
 8000e32:	2300      	movs	r3, #0
 8000e34:	70fb      	strb	r3, [r7, #3]
  sHSPI_Init.BurstLength      = BSP_HSPI_RAM_BURST_16_BYTES;
 8000e36:	2300      	movs	r3, #0
 8000e38:	713b      	strb	r3, [r7, #4]
  sHSPI_Init.ReadLatencyCode  = BSP_HSPI_RAM_READ_LATENCY_6;
 8000e3a:	230c      	movs	r3, #12
 8000e3c:	707b      	strb	r3, [r7, #1]
  sHSPI_Init.WriteLatencyCode = BSP_HSPI_RAM_WRITE_LATENCY_6;
 8000e3e:	23c0      	movs	r3, #192	; 0xc0
 8000e40:	70bb      	strb	r3, [r7, #2]
  sHSPI_Init.IOMode           = BSP_HSPI_RAM_IO_X16_MODE;
 8000e42:	2340      	movs	r3, #64	; 0x40
 8000e44:	717b      	strb	r3, [r7, #5]

  if (BSP_HSPI_RAM_Init(0, &sHSPI_Init) != BSP_ERROR_NONE)
 8000e46:	463b      	mov	r3, r7
 8000e48:	4619      	mov	r1, r3
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f004 fd24 	bl	8005898 <BSP_HSPI_RAM_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00a      	beq.n	8000e6c <MX_HSPI1_Init+0x44>
  {
    printf("\r\nHSPI RAM Initialization : Failed");
 8000e56:	4810      	ldr	r0, [pc, #64]	; (8000e98 <MX_HSPI1_Init+0x70>)
 8000e58:	f028 fe52 	bl	8029b00 <iprintf>
    printf("\r\nHSPI RAM Test Aborted");
 8000e5c:	480f      	ldr	r0, [pc, #60]	; (8000e9c <MX_HSPI1_Init+0x74>)
 8000e5e:	f028 fe4f 	bl	8029b00 <iprintf>
    printf("\r\n");
 8000e62:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <MX_HSPI1_Init+0x78>)
 8000e64:	f028 fed2 	bl	8029c0c <puts>
    Error_Handler();
 8000e68:	f000 fd70 	bl	800194c <Error_Handler>
  }

  if(BSP_HSPI_RAM_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f004 fe17 	bl	8005aa0 <BSP_HSPI_RAM_EnableMemoryMappedMode>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00a      	beq.n	8000e8e <MX_HSPI1_Init+0x66>
  {
    printf("\r\nHSPI RAM Mem-Mapped Cfg : Failed");
 8000e78:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <MX_HSPI1_Init+0x7c>)
 8000e7a:	f028 fe41 	bl	8029b00 <iprintf>
    printf("\r\nHSPI RAM Test Aborted");
 8000e7e:	4807      	ldr	r0, [pc, #28]	; (8000e9c <MX_HSPI1_Init+0x74>)
 8000e80:	f028 fe3e 	bl	8029b00 <iprintf>
    printf("\r\n");
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <MX_HSPI1_Init+0x78>)
 8000e86:	f028 fec1 	bl	8029c0c <puts>
    Error_Handler();
 8000e8a:	f000 fd5f 	bl	800194c <Error_Handler>
  }
  /* USER CODE END HSPI1_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	0802a5a8 	.word	0x0802a5a8
 8000e9c:	0802a5cc 	.word	0x0802a5cc
 8000ea0:	0802a5e4 	.word	0x0802a5e4
 8000ea4:	0802a5e8 	.word	0x0802a5e8

08000ea8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <MX_I2C3_Init+0x74>)
 8000eae:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <MX_I2C3_Init+0x78>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_I2C3_Init+0x74>)
 8000eb4:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <MX_I2C3_Init+0x7c>)
 8000eb6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <MX_I2C3_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <MX_I2C3_Init+0x74>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_I2C3_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_I2C3_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_I2C3_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_I2C3_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_I2C3_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ee2:	480e      	ldr	r0, [pc, #56]	; (8000f1c <MX_I2C3_Init+0x74>)
 8000ee4:	f009 fc2b 	bl	800a73e <HAL_I2C_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000eee:	f000 fd2d 	bl	800194c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4809      	ldr	r0, [pc, #36]	; (8000f1c <MX_I2C3_Init+0x74>)
 8000ef6:	f00a fb59 	bl	800b5ac <HAL_I2CEx_ConfigAnalogFilter>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f00:	f000 fd24 	bl	800194c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f04:	2100      	movs	r1, #0
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_I2C3_Init+0x74>)
 8000f08:	f00a fb9b 	bl	800b642 <HAL_I2CEx_ConfigDigitalFilter>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f12:	f000 fd1b 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20152ec0 	.word	0x20152ec0
 8000f20:	46002800 	.word	0x46002800
 8000f24:	30909dec 	.word	0x30909dec

08000f28 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f00a fbd5 	bl	800b6dc <HAL_ICACHE_ConfigAssociativityMode>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000f38:	f000 fd08 	bl	800194c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f3c:	f00a fbee 	bl	800b71c <HAL_ICACHE_Enable>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000f46:	f000 fd01 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f50:	b5b0      	push	{r4, r5, r7, lr}
 8000f52:	b0e4      	sub	sp, #400	; 0x190
 8000f54:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f56:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000f5a:	2234      	movs	r2, #52	; 0x34
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f028 f9f6 	bl	8029350 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f64:	4bc1      	ldr	r3, [pc, #772]	; (800126c <MX_LTDC_Init+0x31c>)
 8000f66:	4ac2      	ldr	r2, [pc, #776]	; (8001270 <MX_LTDC_Init+0x320>)
 8000f68:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000f6a:	4bc0      	ldr	r3, [pc, #768]	; (800126c <MX_LTDC_Init+0x31c>)
 8000f6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f70:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000f72:	4bbe      	ldr	r3, [pc, #760]	; (800126c <MX_LTDC_Init+0x31c>)
 8000f74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f78:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f7a:	4bbc      	ldr	r3, [pc, #752]	; (800126c <MX_LTDC_Init+0x31c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f80:	4bba      	ldr	r3, [pc, #744]	; (800126c <MX_LTDC_Init+0x31c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8000f86:	4bb9      	ldr	r3, [pc, #740]	; (800126c <MX_LTDC_Init+0x31c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 19;
 8000f8c:	4bb7      	ldr	r3, [pc, #732]	; (800126c <MX_LTDC_Init+0x31c>)
 8000f8e:	2213      	movs	r2, #19
 8000f90:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 2;
 8000f92:	4bb6      	ldr	r3, [pc, #728]	; (800126c <MX_LTDC_Init+0x31c>)
 8000f94:	2202      	movs	r2, #2
 8000f96:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 31;
 8000f98:	4bb4      	ldr	r3, [pc, #720]	; (800126c <MX_LTDC_Init+0x31c>)
 8000f9a:	221f      	movs	r2, #31
 8000f9c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 482;
 8000f9e:	4bb3      	ldr	r3, [pc, #716]	; (800126c <MX_LTDC_Init+0x31c>)
 8000fa0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 512;
 8000fa6:	4bb1      	ldr	r3, [pc, #708]	; (800126c <MX_LTDC_Init+0x31c>)
 8000fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 483;
 8000fae:	4baf      	ldr	r3, [pc, #700]	; (800126c <MX_LTDC_Init+0x31c>)
 8000fb0:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 712;
 8000fb6:	4bad      	ldr	r3, [pc, #692]	; (800126c <MX_LTDC_Init+0x31c>)
 8000fb8:	f44f 7232 	mov.w	r2, #712	; 0x2c8
 8000fbc:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fbe:	4bab      	ldr	r3, [pc, #684]	; (800126c <MX_LTDC_Init+0x31c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fc6:	4ba9      	ldr	r3, [pc, #676]	; (800126c <MX_LTDC_Init+0x31c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fce:	4ba7      	ldr	r3, [pc, #668]	; (800126c <MX_LTDC_Init+0x31c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fd6:	48a5      	ldr	r0, [pc, #660]	; (800126c <MX_LTDC_Init+0x31c>)
 8000fd8:	f00a fbb0 	bl	800b73c <HAL_LTDC_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_LTDC_Init+0x96>
  {
    Error_Handler();
 8000fe2:	f000 fcb3 	bl	800194c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  pLayerCfg.WindowX1 = 480;
 8000fec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ff0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  pLayerCfg.WindowY0 = 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  pLayerCfg.WindowY1 = 481;
 8000ffa:	f240 13e1 	movw	r3, #481	; 0x1e1
 8000ffe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001002:	2301      	movs	r3, #1
 8001004:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  pLayerCfg.Alpha = 255;
 8001008:	23ff      	movs	r3, #255	; 0xff
 800100a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  pLayerCfg.Alpha0 = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001014:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001018:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800101c:	2307      	movs	r3, #7
 800101e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  pLayerCfg.FBStartAdress = 0x0;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  pLayerCfg.ImageWidth = 480;
 8001028:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800102c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  pLayerCfg.ImageHeight = 480;
 8001030:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001034:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  pLayerCfg.Backcolor.Blue = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
  pLayerCfg.Backcolor.Green = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
  pLayerCfg.Backcolor.Red = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800104a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800104e:	2200      	movs	r2, #0
 8001050:	4619      	mov	r1, r3
 8001052:	4886      	ldr	r0, [pc, #536]	; (800126c <MX_LTDC_Init+0x31c>)
 8001054:	f00a fcfa 	bl	800ba4c <HAL_LTDC_ConfigLayer>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_LTDC_Init+0x112>
  {
    Error_Handler();
 800105e:	f000 fc75 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  HAL_Delay(10);
 8001062:	200a      	movs	r0, #10
 8001064:	f006 fcd6 	bl	8007a14 <HAL_Delay>
  HAL_DSI_EnterULPM(&hdsi);
 8001068:	4882      	ldr	r0, [pc, #520]	; (8001274 <MX_LTDC_Init+0x324>)
 800106a:	f008 fd09 	bl	8009a80 <HAL_DSI_EnterULPM>
  HAL_Delay(10);
 800106e:	200a      	movs	r0, #10
 8001070:	f006 fcd0 	bl	8007a14 <HAL_Delay>

  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2120      	movs	r1, #32
 8001078:	487f      	ldr	r0, [pc, #508]	; (8001278 <MX_LTDC_Init+0x328>)
 800107a:	f009 fa1d 	bl	800a4b8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800107e:	200a      	movs	r0, #10
 8001080:	f006 fcc8 	bl	8007a14 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2120      	movs	r1, #32
 8001088:	487b      	ldr	r0, [pc, #492]	; (8001278 <MX_LTDC_Init+0x328>)
 800108a:	f009 fa15 	bl	800a4b8 <HAL_GPIO_WritePin>
  HAL_Delay(150);
 800108e:	2096      	movs	r0, #150	; 0x96
 8001090:	f006 fcc0 	bl	8007a14 <HAL_Delay>

  HAL_DSI_ExitULPM(&hdsi);
 8001094:	4877      	ldr	r0, [pc, #476]	; (8001274 <MX_LTDC_Init+0x324>)
 8001096:	f008 fe0b 	bl	8009cb0 <HAL_DSI_ExitULPM>
  HAL_Delay(10);
 800109a:	200a      	movs	r0, #10
 800109c:	f006 fcba 	bl	8007a14 <HAL_Delay>

  // CMD Mode
  uint8_t InitParam1[3] = {0xFF ,0x83 , 0x79};
 80010a0:	4a76      	ldr	r2, [pc, #472]	; (800127c <MX_LTDC_Init+0x32c>)
 80010a2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80010a6:	6812      	ldr	r2, [r2, #0]
 80010a8:	4611      	mov	r1, r2
 80010aa:	8019      	strh	r1, [r3, #0]
 80010ac:	3302      	adds	r3, #2
 80010ae:	0c12      	lsrs	r2, r2, #16
 80010b0:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB9, InitParam1) != HAL_OK)
 80010b2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	23b9      	movs	r3, #185	; 0xb9
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2303      	movs	r3, #3
 80010be:	2239      	movs	r2, #57	; 0x39
 80010c0:	2100      	movs	r1, #0
 80010c2:	486c      	ldr	r0, [pc, #432]	; (8001274 <MX_LTDC_Init+0x324>)
 80010c4:	f008 fc45 	bl	8009952 <HAL_DSI_LongWrite>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_LTDC_Init+0x182>
  {
    Error_Handler();
 80010ce:	f000 fc3d 	bl	800194c <Error_Handler>
  }

  // SETPOWER
  uint8_t InitParam3[16] = {0x44,0x1C,0x1C,0x37,0x57,0x90,0xD0,0xE2,0x58,0x80,0x38,0x38,0xF8,0x33,0x34,0x42};
 80010d2:	4b6b      	ldr	r3, [pc, #428]	; (8001280 <MX_LTDC_Init+0x330>)
 80010d4:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 80010d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 16, 0xB1, InitParam3) != HAL_OK)
 80010de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	23b1      	movs	r3, #177	; 0xb1
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2310      	movs	r3, #16
 80010ea:	2239      	movs	r2, #57	; 0x39
 80010ec:	2100      	movs	r1, #0
 80010ee:	4861      	ldr	r0, [pc, #388]	; (8001274 <MX_LTDC_Init+0x324>)
 80010f0:	f008 fc2f 	bl	8009952 <HAL_DSI_LongWrite>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_LTDC_Init+0x1ae>
  {
    Error_Handler();
 80010fa:	f000 fc27 	bl	800194c <Error_Handler>
  }

  // SETDISP
  uint8_t InitParam4[9] = {0x80,0x14,0x0C,0x30,0x20,0x50,0x11,0x42,0x1D};
 80010fe:	4a61      	ldr	r2, [pc, #388]	; (8001284 <MX_LTDC_Init+0x334>)
 8001100:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001104:	ca07      	ldmia	r2, {r0, r1, r2}
 8001106:	c303      	stmia	r3!, {r0, r1}
 8001108:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xB2, InitParam4) != HAL_OK)
 800110a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	23b2      	movs	r3, #178	; 0xb2
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2309      	movs	r3, #9
 8001116:	2239      	movs	r2, #57	; 0x39
 8001118:	2100      	movs	r1, #0
 800111a:	4856      	ldr	r0, [pc, #344]	; (8001274 <MX_LTDC_Init+0x324>)
 800111c:	f008 fc19 	bl	8009952 <HAL_DSI_LongWrite>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_LTDC_Init+0x1da>
  {
    Error_Handler();
 8001126:	f000 fc11 	bl	800194c <Error_Handler>
  }

  // Set display cycle timing
  uint8_t InitParam5[10] = {0x01,0xAA,0x01,0xAF,0x01,0xAF,0x10,0xEA,0x1C,0xEA};
 800112a:	4a57      	ldr	r2, [pc, #348]	; (8001288 <MX_LTDC_Init+0x338>)
 800112c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001130:	ca07      	ldmia	r2, {r0, r1, r2}
 8001132:	c303      	stmia	r3!, {r0, r1}
 8001134:	801a      	strh	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xB4, InitParam5) != HAL_OK)
 8001136:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	23b4      	movs	r3, #180	; 0xb4
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	230a      	movs	r3, #10
 8001142:	2239      	movs	r2, #57	; 0x39
 8001144:	2100      	movs	r1, #0
 8001146:	484b      	ldr	r0, [pc, #300]	; (8001274 <MX_LTDC_Init+0x324>)
 8001148:	f008 fc03 	bl	8009952 <HAL_DSI_LongWrite>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_LTDC_Init+0x206>
  {
    Error_Handler();
 8001152:	f000 fbfb 	bl	800194c <Error_Handler>
  }

  // SETVCOM
  uint8_t InitParam60[4] = {00,00,00,0xC0};
 8001156:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800115a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xC7, InitParam60) != HAL_OK)
 800115e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	23c7      	movs	r3, #199	; 0xc7
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2304      	movs	r3, #4
 800116a:	2239      	movs	r2, #57	; 0x39
 800116c:	2100      	movs	r1, #0
 800116e:	4841      	ldr	r0, [pc, #260]	; (8001274 <MX_LTDC_Init+0x324>)
 8001170:	f008 fbef 	bl	8009952 <HAL_DSI_LongWrite>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_LTDC_Init+0x22e>
  {
    Error_Handler();
 800117a:	f000 fbe7 	bl	800194c <Error_Handler>
  }

  // Set Panel Related Registers
  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xCC, 0x02) != HAL_OK)
 800117e:	2302      	movs	r3, #2
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	23cc      	movs	r3, #204	; 0xcc
 8001184:	2215      	movs	r2, #21
 8001186:	2100      	movs	r1, #0
 8001188:	483a      	ldr	r0, [pc, #232]	; (8001274 <MX_LTDC_Init+0x324>)
 800118a:	f008 fbc0 	bl	800990e <HAL_DSI_ShortWrite>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_LTDC_Init+0x248>
  {
    Error_Handler();
 8001194:	f000 fbda 	bl	800194c <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xD2, 0x77) != HAL_OK)
 8001198:	2377      	movs	r3, #119	; 0x77
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	23d2      	movs	r3, #210	; 0xd2
 800119e:	2215      	movs	r2, #21
 80011a0:	2100      	movs	r1, #0
 80011a2:	4834      	ldr	r0, [pc, #208]	; (8001274 <MX_LTDC_Init+0x324>)
 80011a4:	f008 fbb3 	bl	800990e <HAL_DSI_ShortWrite>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_LTDC_Init+0x262>
  {
    Error_Handler();
 80011ae:	f000 fbcd 	bl	800194c <Error_Handler>
  }

  uint8_t InitParam50[37] = {
 80011b2:	4b36      	ldr	r3, [pc, #216]	; (800128c <MX_LTDC_Init+0x33c>)
 80011b4:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 80011b8:	461d      	mov	r5, r3
 80011ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011c6:	6020      	str	r0, [r4, #0]
 80011c8:	3404      	adds	r4, #4
 80011ca:	7021      	strb	r1, [r4, #0]
    0x00,0x07,0x00,0x00,0x00,0x08,0x08,0x32,0x10,0x01,0x00,0x01,0x03,0x72,0x03,0x72,0x00,0x08,0x00,
    0x08,0x33,0x33,0x05,0x05,0x37,0x05,0x05,0x37,0x0A,0x00,0x00,0x00,0x0A,0x00,0x01,0x00,0x0E
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 37, 0xD3, InitParam50) != HAL_OK)
 80011cc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	23d3      	movs	r3, #211	; 0xd3
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2325      	movs	r3, #37	; 0x25
 80011d8:	2239      	movs	r2, #57	; 0x39
 80011da:	2100      	movs	r1, #0
 80011dc:	4825      	ldr	r0, [pc, #148]	; (8001274 <MX_LTDC_Init+0x324>)
 80011de:	f008 fbb8 	bl	8009952 <HAL_DSI_LongWrite>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_LTDC_Init+0x29c>
  {
    Error_Handler();
 80011e8:	f000 fbb0 	bl	800194c <Error_Handler>
  }

  uint8_t InitParam51[34] = {
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <MX_LTDC_Init+0x340>)
 80011ee:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 80011f2:	461d      	mov	r5, r3
 80011f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011fc:	682b      	ldr	r3, [r5, #0]
 80011fe:	8023      	strh	r3, [r4, #0]
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x19,0x19,0x18,0x18,0x18,0x18,0x19,0x19,0x01,0x00,
    0x03,0x02,0x05,0x04,0x07,0x06,0x23,0x22,0x21,0x20,0x18,0x18,0x18,0x18,0x00,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 34, 0xD5, InitParam51) != HAL_OK)
 8001200:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	23d5      	movs	r3, #213	; 0xd5
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2322      	movs	r3, #34	; 0x22
 800120c:	2239      	movs	r2, #57	; 0x39
 800120e:	2100      	movs	r1, #0
 8001210:	4818      	ldr	r0, [pc, #96]	; (8001274 <MX_LTDC_Init+0x324>)
 8001212:	f008 fb9e 	bl	8009952 <HAL_DSI_LongWrite>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_LTDC_Init+0x2d0>
  {
    Error_Handler();
 800121c:	f000 fb96 	bl	800194c <Error_Handler>
  }

  uint8_t InitParam52[35] = {
 8001220:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <MX_LTDC_Init+0x344>)
 8001222:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8001226:	461d      	mov	r5, r3
 8001228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001230:	682b      	ldr	r3, [r5, #0]
 8001232:	7023      	strb	r3, [r4, #0]
 8001234:	f107 03d5 	add.w	r3, r7, #213	; 0xd5
 8001238:	2200      	movs	r2, #0
 800123a:	801a      	strh	r2, [r3, #0]
    0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x19,0x19,0x18,0x18,0x19,0x19,0x18,0x18,0x06,0x07,
    0x04,0x05,0x02,0x03,0x00,0x01,0x20,0x21,0x22,0x23,0x18,0x18,0x18,0x18
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 35, 0xD6, InitParam52) != HAL_OK)
 800123c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	23d6      	movs	r3, #214	; 0xd6
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2323      	movs	r3, #35	; 0x23
 8001248:	2239      	movs	r2, #57	; 0x39
 800124a:	2100      	movs	r1, #0
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <MX_LTDC_Init+0x324>)
 800124e:	f008 fb80 	bl	8009952 <HAL_DSI_LongWrite>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_LTDC_Init+0x30c>
  {
    Error_Handler();
 8001258:	f000 fb78 	bl	800194c <Error_Handler>
  }

  // SET GAMMA
  uint8_t InitParam8[42] = {
 800125c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001260:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001264:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <MX_LTDC_Init+0x348>)
 8001266:	461c      	mov	r4, r3
 8001268:	4615      	mov	r5, r2
 800126a:	e017      	b.n	800129c <MX_LTDC_Init+0x34c>
 800126c:	20152f14 	.word	0x20152f14
 8001270:	40016800 	.word	0x40016800
 8001274:	20152e90 	.word	0x20152e90
 8001278:	42020c00 	.word	0x42020c00
 800127c:	0802a60c 	.word	0x0802a60c
 8001280:	0802a610 	.word	0x0802a610
 8001284:	0802a620 	.word	0x0802a620
 8001288:	0802a62c 	.word	0x0802a62c
 800128c:	0802a638 	.word	0x0802a638
 8001290:	0802a660 	.word	0x0802a660
 8001294:	0802a684 	.word	0x0802a684
 8001298:	0802a6a8 	.word	0x0802a6a8
 800129c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800129e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012a8:	c403      	stmia	r4!, {r0, r1}
 80012aa:	8022      	strh	r2, [r4, #0]
    0x00,0x16,0x1B,0x30,0x36,0x3F,0x24,0x40,0x09,0x0D,0x0F,0x18,0x0E,0x11,0x12,0x11,0x14,0x07,
    0x12,0x13,0x18,0x00,0x17,0x1C,0x30,0x36,0x3F,0x24,0x40,0x09,0x0C,0x0F,0x18,0x0E,0x11,0x14,
    0x11,0x12,0x07,0x12,0x14,0x18
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xE0, InitParam8) != HAL_OK)
 80012ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	23e0      	movs	r3, #224	; 0xe0
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	232a      	movs	r3, #42	; 0x2a
 80012b8:	2239      	movs	r2, #57	; 0x39
 80012ba:	2100      	movs	r1, #0
 80012bc:	4865      	ldr	r0, [pc, #404]	; (8001454 <MX_LTDC_Init+0x504>)
 80012be:	f008 fb48 	bl	8009952 <HAL_DSI_LongWrite>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_LTDC_Init+0x37c>
  {
    Error_Handler();
 80012c8:	f000 fb40 	bl	800194c <Error_Handler>
  }

  uint8_t InitParam44[3] = {0x2C,0x2C,00};
 80012cc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80012d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80012d4:	4a60      	ldr	r2, [pc, #384]	; (8001458 <MX_LTDC_Init+0x508>)
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	4611      	mov	r1, r2
 80012da:	8019      	strh	r1, [r3, #0]
 80012dc:	3302      	adds	r3, #2
 80012de:	0c12      	lsrs	r2, r2, #16
 80012e0:	701a      	strb	r2, [r3, #0]
  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, InitParam44) != HAL_OK)
 80012e2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	23b6      	movs	r3, #182	; 0xb6
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2303      	movs	r3, #3
 80012ee:	2239      	movs	r2, #57	; 0x39
 80012f0:	2100      	movs	r1, #0
 80012f2:	4858      	ldr	r0, [pc, #352]	; (8001454 <MX_LTDC_Init+0x504>)
 80012f4:	f008 fb2d 	bl	8009952 <HAL_DSI_LongWrite>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_LTDC_Init+0x3b2>
  {
    Error_Handler();
 80012fe:	f000 fb25 	bl	800194c <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x00) != HAL_OK)
 8001302:	2300      	movs	r3, #0
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	23bd      	movs	r3, #189	; 0xbd
 8001308:	2215      	movs	r2, #21
 800130a:	2100      	movs	r1, #0
 800130c:	4851      	ldr	r0, [pc, #324]	; (8001454 <MX_LTDC_Init+0x504>)
 800130e:	f008 fafe 	bl	800990e <HAL_DSI_ShortWrite>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_LTDC_Init+0x3cc>
  {
    Error_Handler();
 8001318:	f000 fb18 	bl	800194c <Error_Handler>
  }

  uint8_t InitParam14[] = {
 800131c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001324:	4a4d      	ldr	r2, [pc, #308]	; (800145c <MX_LTDC_Init+0x50c>)
 8001326:	461c      	mov	r4, r3
 8001328:	4615      	mov	r5, r2
 800132a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001332:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001336:	c403      	stmia	r4!, {r0, r1}
 8001338:	8022      	strh	r2, [r4, #0]
 800133a:	3402      	adds	r4, #2
 800133c:	0c13      	lsrs	r3, r2, #16
 800133e:	7023      	strb	r3, [r4, #0]
    0x01,0x00,0x07,0x0F,0x16,0x1F,0x27,0x30,0x38,0x40,0x47,0x4E,0x56,0x5D,0x65,0x6D,0x74,0x7D,
    0x84,0x8A,0x90,0x99,0xA1,0xA9,0xB0,0xB6,0xBD,0xC4,0xCD,0xD4,0xDD,0xE5,0xEC,0xF3,0x36,0x07,
    0x1C,0xC0,0x1B,0x01,0xF1,0x34,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam14) != HAL_OK)
 8001340:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	23c1      	movs	r3, #193	; 0xc1
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	232a      	movs	r3, #42	; 0x2a
 800134c:	2239      	movs	r2, #57	; 0x39
 800134e:	2100      	movs	r1, #0
 8001350:	4840      	ldr	r0, [pc, #256]	; (8001454 <MX_LTDC_Init+0x504>)
 8001352:	f008 fafe 	bl	8009952 <HAL_DSI_LongWrite>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_LTDC_Init+0x410>
  {
    Error_Handler();
 800135c:	f000 faf6 	bl	800194c <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x01) != HAL_OK)
 8001360:	2301      	movs	r3, #1
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	23bd      	movs	r3, #189	; 0xbd
 8001366:	2215      	movs	r2, #21
 8001368:	2100      	movs	r1, #0
 800136a:	483a      	ldr	r0, [pc, #232]	; (8001454 <MX_LTDC_Init+0x504>)
 800136c:	f008 facf 	bl	800990e <HAL_DSI_ShortWrite>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_LTDC_Init+0x42a>
  {
    Error_Handler();
 8001376:	f000 fae9 	bl	800194c <Error_Handler>
  }

  uint8_t InitParam15[] = {
 800137a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800137e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001382:	4a37      	ldr	r2, [pc, #220]	; (8001460 <MX_LTDC_Init+0x510>)
 8001384:	461c      	mov	r4, r3
 8001386:	4615      	mov	r5, r2
 8001388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001390:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001394:	c403      	stmia	r4!, {r0, r1}
 8001396:	8022      	strh	r2, [r4, #0]
    0x00,0x08,0x0F,0x16,0x1F,0x28,0x31,0x39,0x41,0x48,0x51,0x59,0x60,0x68,0x70,0x78,0x7F,0x87,
    0x8D,0x94,0x9C,0xA3,0xAB,0xB3,0xB9,0xC1,0xC8,0xD0,0xD8,0xE0,0xE8,0xEE,0xF5,0x3B,0x1A,0xB6,
    0xA0,0x07,0x45,0xC5,0x37,0x00
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam15) != HAL_OK)
 8001398:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	23c1      	movs	r3, #193	; 0xc1
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	232a      	movs	r3, #42	; 0x2a
 80013a4:	2239      	movs	r2, #57	; 0x39
 80013a6:	2100      	movs	r1, #0
 80013a8:	482a      	ldr	r0, [pc, #168]	; (8001454 <MX_LTDC_Init+0x504>)
 80013aa:	f008 fad2 	bl	8009952 <HAL_DSI_LongWrite>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_LTDC_Init+0x468>
  {
    Error_Handler();
 80013b4:	f000 faca 	bl	800194c <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x02) != HAL_OK)
 80013b8:	2302      	movs	r3, #2
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	23bd      	movs	r3, #189	; 0xbd
 80013be:	2215      	movs	r2, #21
 80013c0:	2100      	movs	r1, #0
 80013c2:	4824      	ldr	r0, [pc, #144]	; (8001454 <MX_LTDC_Init+0x504>)
 80013c4:	f008 faa3 	bl	800990e <HAL_DSI_ShortWrite>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_LTDC_Init+0x482>
  {
    Error_Handler();
 80013ce:	f000 fabd 	bl	800194c <Error_Handler>
  }

  uint8_t InitParam20[42] = {
 80013d2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80013d6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80013da:	4a22      	ldr	r2, [pc, #136]	; (8001464 <MX_LTDC_Init+0x514>)
 80013dc:	461c      	mov	r4, r3
 80013de:	4615      	mov	r5, r2
 80013e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ec:	c403      	stmia	r4!, {r0, r1}
 80013ee:	8022      	strh	r2, [r4, #0]
    0x00,0x09,0x0F,0x18,0x21,0x2A,0x34,0x3C,0x45,0x4C,0x56,0x5E,0x66,0x6E,0x76,0x7E,0x87,0x8E,
    0x95,0x9D,0xA6,0xAF,0xB7,0xBD,0xC5,0xCE,0xD5,0xDF,0xE7,0xEE,0xF4,0xFA,0xFF,0x0C,0x31,0x83,
    0x3C,0x5B,0x56,0x1E,0x5A,0xFF
  };

  if (HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 42, 0xC1, InitParam20) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	23c1      	movs	r3, #193	; 0xc1
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	232a      	movs	r3, #42	; 0x2a
 80013fa:	2239      	movs	r2, #57	; 0x39
 80013fc:	2100      	movs	r1, #0
 80013fe:	4815      	ldr	r0, [pc, #84]	; (8001454 <MX_LTDC_Init+0x504>)
 8001400:	f008 faa7 	bl	8009952 <HAL_DSI_LongWrite>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_LTDC_Init+0x4be>
  {
    Error_Handler();
 800140a:	f000 fa9f 	bl	800194c <Error_Handler>
  }

  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xBD, 0x00) != HAL_OK)
 800140e:	2300      	movs	r3, #0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	23bd      	movs	r3, #189	; 0xbd
 8001414:	2215      	movs	r2, #21
 8001416:	2100      	movs	r1, #0
 8001418:	480e      	ldr	r0, [pc, #56]	; (8001454 <MX_LTDC_Init+0x504>)
 800141a:	f008 fa78 	bl	800990e <HAL_DSI_ShortWrite>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_LTDC_Init+0x4d8>
  {
    Error_Handler();
 8001424:	f000 fa92 	bl	800194c <Error_Handler>
  }

  // Exit Sleep Mode
  if (HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, DSI_EXIT_SLEEP_MODE, 0x00) != HAL_OK)
 8001428:	2300      	movs	r3, #0
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2311      	movs	r3, #17
 800142e:	2205      	movs	r2, #5
 8001430:	2100      	movs	r1, #0
 8001432:	4808      	ldr	r0, [pc, #32]	; (8001454 <MX_LTDC_Init+0x504>)
 8001434:	f008 fa6b 	bl	800990e <HAL_DSI_ShortWrite>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_LTDC_Init+0x4f2>
  {
    Error_Handler();
 800143e:	f000 fa85 	bl	800194c <Error_Handler>
  }

  HAL_Delay(120);
 8001442:	2078      	movs	r0, #120	; 0x78
 8001444:	f006 fae6 	bl	8007a14 <HAL_Delay>
  /* USER CODE END LTDC_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800144e:	46bd      	mov	sp, r7
 8001450:	bdb0      	pop	{r4, r5, r7, pc}
 8001452:	bf00      	nop
 8001454:	20152e90 	.word	0x20152e90
 8001458:	0802a6d4 	.word	0x0802a6d4
 800145c:	0802a6d8 	.word	0x0802a6d8
 8001460:	0802a704 	.word	0x0802a704
 8001464:	0802a730 	.word	0x0802a730

08001468 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	; 0x30
 800146c:	af00      	add	r7, sp, #0
  BSP_OSPI_NOR_Info_t sOSPI_NOR_Info;
  BSP_OSPI_NOR_Init_t sOSPI_NOR_Init;

  int32_t status;

  memset(&sOSPI_NOR_Info, 0, sizeof(sOSPI_NOR_Info));
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	2224      	movs	r2, #36	; 0x24
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f027 ff6a 	bl	8029350 <memset>
  memset(&sOSPI_NOR_Init, 0, sizeof(sOSPI_NOR_Init));
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2202      	movs	r2, #2
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f027 ff64 	bl	8029350 <memset>

  sOSPI_NOR_Init.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8001488:	2301      	movs	r3, #1
 800148a:	713b      	strb	r3, [r7, #4]
  sOSPI_NOR_Init.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 800148c:	2301      	movs	r3, #1
 800148e:	717b      	strb	r3, [r7, #5]

  status = BSP_OSPI_NOR_Init(0, &sOSPI_NOR_Init);
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	2000      	movs	r0, #0
 8001496:	f005 f935 	bl	8006704 <BSP_OSPI_NOR_Init>
 800149a:	62f8      	str	r0, [r7, #44]	; 0x2c

  if (status != BSP_ERROR_NONE)
 800149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d008      	beq.n	80014b4 <MX_OCTOSPI1_Init+0x4c>
  {
    printf("\r\nOSPI NOR Initialization : Failed");
 80014a2:	4811      	ldr	r0, [pc, #68]	; (80014e8 <MX_OCTOSPI1_Init+0x80>)
 80014a4:	f028 fb2c 	bl	8029b00 <iprintf>
    printf("\r\nOSPI NOR Test Aborted");
 80014a8:	4810      	ldr	r0, [pc, #64]	; (80014ec <MX_OCTOSPI1_Init+0x84>)
 80014aa:	f028 fb29 	bl	8029b00 <iprintf>
    printf("\r\n");
 80014ae:	4810      	ldr	r0, [pc, #64]	; (80014f0 <MX_OCTOSPI1_Init+0x88>)
 80014b0:	f028 fbac 	bl	8029c0c <puts>
  }

  BSP_OSPI_NOR_GetInfo(0, &sOSPI_NOR_Info);
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	4619      	mov	r1, r3
 80014ba:	2000      	movs	r0, #0
 80014bc:	f005 fa18 	bl	80068f0 <BSP_OSPI_NOR_GetInfo>

  if (BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 80014c0:	2000      	movs	r0, #0
 80014c2:	f005 fa2b 	bl	800691c <BSP_OSPI_NOR_EnableMemoryMappedMode>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d008      	beq.n	80014de <MX_OCTOSPI1_Init+0x76>
  {
    printf("\r\nOSPI NOR Mem-Mapped Cfg : Failed");
 80014cc:	4809      	ldr	r0, [pc, #36]	; (80014f4 <MX_OCTOSPI1_Init+0x8c>)
 80014ce:	f028 fb17 	bl	8029b00 <iprintf>
    printf("\r\nOSPI NOR Test Aborted");
 80014d2:	4806      	ldr	r0, [pc, #24]	; (80014ec <MX_OCTOSPI1_Init+0x84>)
 80014d4:	f028 fb14 	bl	8029b00 <iprintf>
    printf("\r\n");
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_OCTOSPI1_Init+0x88>)
 80014da:	f028 fb97 	bl	8029c0c <puts>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	3730      	adds	r7, #48	; 0x30
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	0802a75c 	.word	0x0802a75c
 80014ec:	0802a780 	.word	0x0802a780
 80014f0:	0802a5e4 	.word	0x0802a5e4
 80014f4:	0802a798 	.word	0x0802a798

080014f8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b09c      	sub	sp, #112	; 0x70
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001518:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
 8001528:	615a      	str	r2, [r3, #20]
 800152a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2234      	movs	r2, #52	; 0x34
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f027 ff0c 	bl	8029350 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001538:	4b45      	ldr	r3, [pc, #276]	; (8001650 <MX_TIM8_Init+0x158>)
 800153a:	4a46      	ldr	r2, [pc, #280]	; (8001654 <MX_TIM8_Init+0x15c>)
 800153c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 18;
 800153e:	4b44      	ldr	r3, [pc, #272]	; (8001650 <MX_TIM8_Init+0x158>)
 8001540:	2212      	movs	r2, #18
 8001542:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001544:	4b42      	ldr	r3, [pc, #264]	; (8001650 <MX_TIM8_Init+0x158>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 139;
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <MX_TIM8_Init+0x158>)
 800154c:	228b      	movs	r2, #139	; 0x8b
 800154e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001550:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <MX_TIM8_Init+0x158>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001556:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <MX_TIM8_Init+0x158>)
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155c:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <MX_TIM8_Init+0x158>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001562:	483b      	ldr	r0, [pc, #236]	; (8001650 <MX_TIM8_Init+0x158>)
 8001564:	f00f f8c4 	bl	80106f0 <HAL_TIM_Base_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800156e:	f000 f9ed 	bl	800194c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001576:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001578:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800157c:	4619      	mov	r1, r3
 800157e:	4834      	ldr	r0, [pc, #208]	; (8001650 <MX_TIM8_Init+0x158>)
 8001580:	f00f fdf6 	bl	8011170 <HAL_TIM_ConfigClockSource>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800158a:	f000 f9df 	bl	800194c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800158e:	4830      	ldr	r0, [pc, #192]	; (8001650 <MX_TIM8_Init+0x158>)
 8001590:	f00f f9a6 	bl	80108e0 <HAL_TIM_PWM_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800159a:	f000 f9d7 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015ae:	4619      	mov	r1, r3
 80015b0:	4827      	ldr	r0, [pc, #156]	; (8001650 <MX_TIM8_Init+0x158>)
 80015b2:	f010 fc99 	bl	8011ee8 <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 80015bc:	f000 f9c6 	bl	800194c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c0:	2360      	movs	r3, #96	; 0x60
 80015c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 100;
 80015c4:	2364      	movs	r3, #100	; 0x64
 80015c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c8:	2300      	movs	r3, #0
 80015ca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015cc:	2300      	movs	r3, #0
 80015ce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015d4:	2300      	movs	r3, #0
 80015d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015e0:	2204      	movs	r2, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	481a      	ldr	r0, [pc, #104]	; (8001650 <MX_TIM8_Init+0x158>)
 80015e6:	f00f fcaf 	bl	8010f48 <HAL_TIM_PWM_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 80015f0:	f000 f9ac 	bl	800194c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800161a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001624:	2300      	movs	r3, #0
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	4619      	mov	r1, r3
 8001630:	4807      	ldr	r0, [pc, #28]	; (8001650 <MX_TIM8_Init+0x158>)
 8001632:	f010 fd1b 	bl	801206c <HAL_TIMEx_ConfigBreakDeadTime>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 800163c:	f000 f986 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <MX_TIM8_Init+0x158>)
 8001642:	f000 fbb1 	bl	8001da8 <HAL_TIM_MspPostInit>

}
 8001646:	bf00      	nop
 8001648:	3770      	adds	r7, #112	; 0x70
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20152fbc 	.word	0x20152fbc
 8001654:	40013400 	.word	0x40013400

08001658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800165e:	4a23      	ldr	r2, [pc, #140]	; (80016ec <MX_USART1_UART_Init+0x94>)
 8001660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 80016a2:	f010 fdeb 	bl	801227c <HAL_UART_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016ac:	f000 f94e 	bl	800194c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b0:	2100      	movs	r1, #0
 80016b2:	480d      	ldr	r0, [pc, #52]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 80016b4:	f011 fac0 	bl	8012c38 <HAL_UARTEx_SetTxFifoThreshold>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016be:	f000 f945 	bl	800194c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c2:	2100      	movs	r1, #0
 80016c4:	4808      	ldr	r0, [pc, #32]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 80016c6:	f011 faf5 	bl	8012cb4 <HAL_UARTEx_SetRxFifoThreshold>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016d0:	f000 f93c 	bl	800194c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_USART1_UART_Init+0x90>)
 80016d6:	f011 fa76 	bl	8012bc6 <HAL_UARTEx_DisableFifoMode>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016e0:	f000 f934 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20153008 	.word	0x20153008
 80016ec:	40013800 	.word	0x40013800

080016f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08e      	sub	sp, #56	; 0x38
 80016f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001706:	4b78      	ldr	r3, [pc, #480]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 8001708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800170c:	4a76      	ldr	r2, [pc, #472]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 800170e:	f043 0310 	orr.w	r3, r3, #16
 8001712:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001716:	4b74      	ldr	r3, [pc, #464]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 8001718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	623b      	str	r3, [r7, #32]
 8001722:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001724:	4b70      	ldr	r3, [pc, #448]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 8001726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800172a:	4a6f      	ldr	r2, [pc, #444]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 800172c:	f043 0308 	orr.w	r3, r3, #8
 8001730:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001734:	4b6c      	ldr	r3, [pc, #432]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 8001736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	61fb      	str	r3, [r7, #28]
 8001740:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001742:	4b69      	ldr	r3, [pc, #420]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 8001744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001748:	4a67      	ldr	r2, [pc, #412]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 800174a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001752:	4b65      	ldr	r3, [pc, #404]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 8001754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001760:	4b61      	ldr	r3, [pc, #388]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 8001762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001766:	4a60      	ldr	r2, [pc, #384]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001770:	4b5d      	ldr	r3, [pc, #372]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 8001772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	4b5a      	ldr	r3, [pc, #360]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 8001780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001784:	4a58      	ldr	r2, [pc, #352]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800178e:	4b56      	ldr	r3, [pc, #344]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 8001790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800179c:	4b52      	ldr	r3, [pc, #328]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 800179e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017a2:	4a51      	ldr	r2, [pc, #324]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 80017a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017ac:	4b4e      	ldr	r3, [pc, #312]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 80017ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	4b4b      	ldr	r3, [pc, #300]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 80017bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017c0:	4a49      	ldr	r2, [pc, #292]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 80017cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017d8:	4b43      	ldr	r3, [pc, #268]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 80017da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017de:	4a42      	ldr	r2, [pc, #264]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 80017e0:	f043 0320 	orr.w	r3, r3, #32
 80017e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017e8:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <MX_GPIO_Init+0x1f8>)
 80017ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017ee:	f003 0320 	and.w	r3, r3, #32
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2103      	movs	r1, #3
 80017fa:	483c      	ldr	r0, [pc, #240]	; (80018ec <MX_GPIO_Init+0x1fc>)
 80017fc:	f008 fe5c 	bl	800a4b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8001800:	2201      	movs	r2, #1
 8001802:	2120      	movs	r1, #32
 8001804:	483a      	ldr	r0, [pc, #232]	; (80018f0 <MX_GPIO_Init+0x200>)
 8001806:	f008 fe57 	bl	800a4b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_PWR_ON_GPIO_Port, DSI_PWR_ON_Pin, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2120      	movs	r1, #32
 800180e:	4839      	ldr	r0, [pc, #228]	; (80018f4 <MX_GPIO_Init+0x204>)
 8001810:	f008 fe52 	bl	800a4b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VSYNC_FREQ_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	2103      	movs	r1, #3
 8001818:	4835      	ldr	r0, [pc, #212]	; (80018f0 <MX_GPIO_Init+0x200>)
 800181a:	f008 fe4d 	bl	800a4b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MCU_ACTIVE_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8001824:	4834      	ldr	r0, [pc, #208]	; (80018f8 <MX_GPIO_Init+0x208>)
 8001826:	f008 fe47 	bl	800a4b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 800182a:	2303      	movs	r3, #3
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800183a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183e:	4619      	mov	r1, r3
 8001840:	482a      	ldr	r0, [pc, #168]	; (80018ec <MX_GPIO_Init+0x1fc>)
 8001842:	f008 fb6b 	bl	8009f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin VSYNC_FREQ_Pin RENDER_TIME_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|VSYNC_FREQ_Pin|RENDER_TIME_Pin;
 8001846:	2323      	movs	r3, #35	; 0x23
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001852:	2302      	movs	r3, #2
 8001854:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185a:	4619      	mov	r1, r3
 800185c:	4824      	ldr	r0, [pc, #144]	; (80018f0 <MX_GPIO_Init+0x200>)
 800185e:	f008 fb5d 	bl	8009f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_PWR_ON_Pin */
  GPIO_InitStruct.Pin = DSI_PWR_ON_Pin;
 8001862:	2320      	movs	r3, #32
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DSI_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001876:	4619      	mov	r1, r3
 8001878:	481e      	ldr	r0, [pc, #120]	; (80018f4 <MX_GPIO_Init+0x204>)
 800187a:	f008 fb4f 	bl	8009f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800187e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001884:	2300      	movs	r3, #0
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001890:	4619      	mov	r1, r3
 8001892:	481a      	ldr	r0, [pc, #104]	; (80018fc <MX_GPIO_Init+0x20c>)
 8001894:	f008 fb42 	bl	8009f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = DSI_TOUCH_INT_Pin;
 8001898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <MX_GPIO_Init+0x210>)
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DSI_TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 80018a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018aa:	4619      	mov	r1, r3
 80018ac:	480f      	ldr	r0, [pc, #60]	; (80018ec <MX_GPIO_Init+0x1fc>)
 80018ae:	f008 fb35 	bl	8009f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_ACTIVE_Pin FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin|FRAME_RATE_Pin;
 80018b2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c0:	2302      	movs	r3, #2
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c8:	4619      	mov	r1, r3
 80018ca:	480b      	ldr	r0, [pc, #44]	; (80018f8 <MX_GPIO_Init+0x208>)
 80018cc:	f008 fb26 	bl	8009f1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI8_IRQn, 10, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	210a      	movs	r1, #10
 80018d4:	2013      	movs	r0, #19
 80018d6:	f006 f979 	bl	8007bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 80018da:	2013      	movs	r0, #19
 80018dc:	f006 f990 	bl	8007c00 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018e0:	bf00      	nop
 80018e2:	3738      	adds	r7, #56	; 0x38
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	46020c00 	.word	0x46020c00
 80018ec:	42021000 	.word	0x42021000
 80018f0:	42020c00 	.word	0x42020c00
 80018f4:	42022000 	.word	0x42022000
 80018f8:	42021400 	.word	0x42021400
 80018fc:	42020800 	.word	0x42020800
 8001900:	10210000 	.word	0x10210000

08001904 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800190c:	1d39      	adds	r1, r7, #4
 800190e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001912:	2201      	movs	r2, #1
 8001914:	4803      	ldr	r0, [pc, #12]	; (8001924 <__io_putchar+0x20>)
 8001916:	f010 fd01 	bl	801231c <HAL_UART_Transmit>

  return ch;
 800191a:	687b      	ldr	r3, [r7, #4]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20153008 	.word	0x20153008

08001928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800193a:	f006 f84b 	bl	80079d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40001000 	.word	0x40001000

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
}
 8001952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001954:	e7fe      	b.n	8001954 <Error_Handler+0x8>
	...

08001958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_MspInit+0x30>)
 8001960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001964:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_MspInit+0x30>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_MspInit+0x30>)
 8001970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	46020c00 	.word	0x46020c00

0800198c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <HAL_CRC_MspInit+0x3c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d10e      	bne.n	80019bc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_CRC_MspInit+0x40>)
 80019a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a4:	4a09      	ldr	r2, [pc, #36]	; (80019cc <HAL_CRC_MspInit+0x40>)
 80019a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_CRC_MspInit+0x40>)
 80019b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40023000 	.word	0x40023000
 80019cc:	46020c00 	.word	0x46020c00

080019d0 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <HAL_DCACHE_MspInit+0x68>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d10f      	bne.n	8001a02 <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <HAL_DCACHE_MspInit+0x6c>)
 80019e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e8:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <HAL_DCACHE_MspInit+0x6c>)
 80019ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_DCACHE_MspInit+0x6c>)
 80019f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 8001a00:	e013      	b.n	8001a2a <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <HAL_DCACHE_MspInit+0x70>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d10e      	bne.n	8001a2a <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_DCACHE_MspInit+0x6c>)
 8001a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_DCACHE_MspInit+0x6c>)
 8001a14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <HAL_DCACHE_MspInit+0x6c>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40031400 	.word	0x40031400
 8001a3c:	46020c00 	.word	0x46020c00
 8001a40:	40031800 	.word	0x40031800

08001a44 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <HAL_DMA2D_MspInit+0x48>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d116      	bne.n	8001a84 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <HAL_DMA2D_MspInit+0x4c>)
 8001a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5c:	4a0c      	ldr	r2, [pc, #48]	; (8001a90 <HAL_DMA2D_MspInit+0x4c>)
 8001a5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_DMA2D_MspInit+0x4c>)
 8001a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2107      	movs	r1, #7
 8001a78:	2076      	movs	r0, #118	; 0x76
 8001a7a:	f006 f8a7 	bl	8007bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001a7e:	2076      	movs	r0, #118	; 0x76
 8001a80:	f006 f8be 	bl	8007c00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001a84:	bf00      	nop
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	4002b000 	.word	0x4002b000
 8001a90:	46020c00 	.word	0x46020c00

08001a94 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <HAL_DSI_MspInit+0x3c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d10e      	bne.n	8001ac4 <HAL_DSI_MspInit+0x30>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_DSI_MspInit+0x40>)
 8001aa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001aac:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <HAL_DSI_MspInit+0x40>)
 8001aae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ab2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <HAL_DSI_MspInit+0x40>)
 8001ab8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40016c00 	.word	0x40016c00
 8001ad4:	46020c00 	.word	0x46020c00

08001ad8 <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a24      	ldr	r2, [pc, #144]	; (8001b78 <HAL_GPU2D_MspInit+0xa0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d142      	bne.n	8001b70 <HAL_GPU2D_MspInit+0x98>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 8001aea:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_GPU2D_MspInit+0xa4>)
 8001aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af0:	4a22      	ldr	r2, [pc, #136]	; (8001b7c <HAL_GPU2D_MspInit+0xa4>)
 8001af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001af6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_GPU2D_MspInit+0xa4>)
 8001afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001b08:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <HAL_GPU2D_MspInit+0xa4>)
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0e:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <HAL_GPU2D_MspInit+0xa4>)
 8001b10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <HAL_GPU2D_MspInit+0xa4>)
 8001b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 7, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2107      	movs	r1, #7
 8001b2a:	2084      	movs	r0, #132	; 0x84
 8001b2c:	f006 f84e 	bl	8007bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 8001b30:	2084      	movs	r0, #132	; 0x84
 8001b32:	f006 f865 	bl	8007c00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 7, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2107      	movs	r1, #7
 8001b3a:	2085      	movs	r0, #133	; 0x85
 8001b3c:	f006 f846 	bl	8007bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 8001b40:	2085      	movs	r0, #133	; 0x85
 8001b42:	f006 f85d 	bl	8007c00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <HAL_GPU2D_MspInit+0xa4>)
 8001b48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001b4c:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <HAL_GPU2D_MspInit+0xa4>)
 8001b4e:	f043 0302 	orr.w	r3, r3, #2
 8001b52:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_GPU2D_MspInit+0xa4>)
 8001b58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
    SYSCFG->CFGR1 &= ~(1L << 28);
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_GPU2D_MspInit+0xa8>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <HAL_GPU2D_MspInit+0xa8>)
 8001b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	6053      	str	r3, [r2, #4]
  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 8001b70:	bf00      	nop
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	4002f000 	.word	0x4002f000
 8001b7c:	46020c00 	.word	0x46020c00
 8001b80:	46000400 	.word	0x46000400

08001b84 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b0c0      	sub	sp, #256	; 0x100
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b9c:	f107 0308 	add.w	r3, r7, #8
 8001ba0:	22e0      	movs	r2, #224	; 0xe0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f027 fbd3 	bl	8029350 <memset>
  /* USER CODE BEGIN HSPI1_MspInit 1 */
#endif
  /* USER CODE END HSPI1_MspInit 1 */
  }

}
 8001baa:	bf00      	nop
 8001bac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_XSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspDeInit(XSPI_HandleTypeDef* hxspi)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HSPI1_MspDeInit 1 */
#endif
  /* USER CODE END HSPI1_MspDeInit 1 */
  }

}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b0c2      	sub	sp, #264	; 0x108
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001bd6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	22e0      	movs	r2, #224	; 0xe0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f027 fbad 	bl	8029350 <memset>
  if(hi2c->Instance==I2C3)
 8001bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001bfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a2b      	ldr	r2, [pc, #172]	; (8001cb0 <HAL_I2C_MspInit+0xe8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d14e      	bne.n	8001ca6 <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f00b fd3e 	bl	800d6a0 <HAL_RCCEx_PeriphCLKConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001c2a:	f7ff fe8f 	bl	800194c <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <HAL_I2C_MspInit+0xec>)
 8001c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c34:	4a1f      	ldr	r2, [pc, #124]	; (8001cb4 <HAL_I2C_MspInit+0xec>)
 8001c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <HAL_I2C_MspInit+0xec>)
 8001c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001c4c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c54:	2312      	movs	r3, #18
 8001c56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c66:	2304      	movs	r3, #4
 8001c68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c6c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4811      	ldr	r0, [pc, #68]	; (8001cb8 <HAL_I2C_MspInit+0xf0>)
 8001c74:	f008 f952 	bl	8009f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_I2C_MspInit+0xec>)
 8001c7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001c7e:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <HAL_I2C_MspInit+0xec>)
 8001c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c84:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_I2C_MspInit+0xec>)
 8001c8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001c8e:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8001c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c96:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ca0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ca4:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	46002800 	.word	0x46002800
 8001cb4:	46020c00 	.word	0x46020c00
 8001cb8:	42021c00 	.word	0x42021c00

08001cbc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <HAL_I2C_MspDeInit+0x3c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d110      	bne.n	8001cf0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_I2C_MspDeInit+0x40>)
 8001cd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001cd4:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <HAL_I2C_MspDeInit+0x40>)
 8001cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cda:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8001cde:	2180      	movs	r1, #128	; 0x80
 8001ce0:	4807      	ldr	r0, [pc, #28]	; (8001d00 <HAL_I2C_MspDeInit+0x44>)
 8001ce2:	f008 faf3 	bl	800a2cc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 8001ce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <HAL_I2C_MspDeInit+0x44>)
 8001cec:	f008 faee 	bl	800a2cc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	46002800 	.word	0x46002800
 8001cfc:	46020c00 	.word	0x46020c00
 8001d00:	42021c00 	.word	0x42021c00

08001d04 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <HAL_LTDC_MspInit+0x58>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d11e      	bne.n	8001d54 <HAL_LTDC_MspInit+0x50>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_LTDC_MspInit+0x5c>)
 8001d18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d1c:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <HAL_LTDC_MspInit+0x5c>)
 8001d1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d22:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_LTDC_MspInit+0x5c>)
 8001d28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2107      	movs	r1, #7
 8001d38:	2087      	movs	r0, #135	; 0x87
 8001d3a:	f005 ff47 	bl	8007bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001d3e:	2087      	movs	r0, #135	; 0x87
 8001d40:	f005 ff5e 	bl	8007c00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 7, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2107      	movs	r1, #7
 8001d48:	2088      	movs	r0, #136	; 0x88
 8001d4a:	f005 ff3f 	bl	8007bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001d4e:	2088      	movs	r0, #136	; 0x88
 8001d50:	f005 ff56 	bl	8007c00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40016800 	.word	0x40016800
 8001d60:	46020c00 	.word	0x46020c00

08001d64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <HAL_TIM_Base_MspInit+0x3c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d10e      	bne.n	8001d94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_TIM_Base_MspInit+0x40>)
 8001d78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d7c:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <HAL_TIM_Base_MspInit+0x40>)
 8001d7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d82:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <HAL_TIM_Base_MspInit+0x40>)
 8001d88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	40013400 	.word	0x40013400
 8001da4:	46020c00 	.word	0x46020c00

08001da8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <HAL_TIM_MspPostInit+0x68>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d11e      	bne.n	8001e08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_TIM_MspPostInit+0x6c>)
 8001dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dd0:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <HAL_TIM_MspPostInit+0x6c>)
 8001dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_TIM_MspPostInit+0x6c>)
 8001ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PI6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = DSI_BL_CTRL_Pin;
 8001de8:	2340      	movs	r3, #64	; 0x40
 8001dea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DSI_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	4619      	mov	r1, r3
 8001e02:	4805      	ldr	r0, [pc, #20]	; (8001e18 <HAL_TIM_MspPostInit+0x70>)
 8001e04:	f008 f88a 	bl	8009f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001e08:	bf00      	nop
 8001e0a:	3720      	adds	r7, #32
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40013400 	.word	0x40013400
 8001e14:	46020c00 	.word	0x46020c00
 8001e18:	42022000 	.word	0x42022000

08001e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b0c2      	sub	sp, #264	; 0x108
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e2a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	22e0      	movs	r2, #224	; 0xe0
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f027 fa83 	bl	8029350 <memset>
  if(huart->Instance==USART1)
 8001e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a2b      	ldr	r2, [pc, #172]	; (8001f04 <HAL_UART_MspInit+0xe8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d14d      	bne.n	8001ef8 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e5c:	f04f 0201 	mov.w	r2, #1
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	4618      	mov	r0, r3
 8001e72:	f00b fc15 	bl	800d6a0 <HAL_RCCEx_PeriphCLKConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8001e7c:	f7ff fd66 	bl	800194c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e80:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <HAL_UART_MspInit+0xec>)
 8001e82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e86:	4a20      	ldr	r2, [pc, #128]	; (8001f08 <HAL_UART_MspInit+0xec>)
 8001e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001e90:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_UART_MspInit+0xec>)
 8001e92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <HAL_UART_MspInit+0xec>)
 8001ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ea4:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <HAL_UART_MspInit+0xec>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_UART_MspInit+0xec>)
 8001eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eb4:	f003 0201 	and.w	r2, r3, #1
 8001eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ebc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ec6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001eca:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001ecc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ed0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4806      	ldr	r0, [pc, #24]	; (8001f0c <HAL_UART_MspInit+0xf0>)
 8001ef4:	f008 f812 	bl	8009f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ef8:	bf00      	nop
 8001efa:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40013800 	.word	0x40013800
 8001f08:	46020c00 	.word	0x46020c00
 8001f0c:	42020000 	.word	0x42020000

08001f10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08e      	sub	sp, #56	; 0x38
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f20:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <HAL_InitTick+0xcc>)
 8001f22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f26:	4a2d      	ldr	r2, [pc, #180]	; (8001fdc <HAL_InitTick+0xcc>)
 8001f28:	f043 0310 	orr.w	r3, r3, #16
 8001f2c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001f30:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <HAL_InitTick+0xcc>)
 8001f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f3e:	f107 0210 	add.w	r2, r7, #16
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f00b faeb 	bl	800d524 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f4e:	f00b faad 	bl	800d4ac <HAL_RCC_GetPCLK1Freq>
 8001f52:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f56:	4a22      	ldr	r2, [pc, #136]	; (8001fe0 <HAL_InitTick+0xd0>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	0c9b      	lsrs	r3, r3, #18
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f62:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_InitTick+0xd4>)
 8001f64:	4a20      	ldr	r2, [pc, #128]	; (8001fe8 <HAL_InitTick+0xd8>)
 8001f66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f68:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <HAL_InitTick+0xd4>)
 8001f6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f6e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f70:	4a1c      	ldr	r2, [pc, #112]	; (8001fe4 <HAL_InitTick+0xd4>)
 8001f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f74:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f76:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HAL_InitTick+0xd4>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_InitTick+0xd4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001f82:	4818      	ldr	r0, [pc, #96]	; (8001fe4 <HAL_InitTick+0xd4>)
 8001f84:	f00e fbb4 	bl	80106f0 <HAL_TIM_Base_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8001f8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d118      	bne.n	8001fc8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001f96:	4813      	ldr	r0, [pc, #76]	; (8001fe4 <HAL_InitTick+0xd4>)
 8001f98:	f00e fc02 	bl	80107a0 <HAL_TIM_Base_Start_IT>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8001fa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10e      	bne.n	8001fc8 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b0f      	cmp	r3, #15
 8001fae:	d808      	bhi.n	8001fc2 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	2031      	movs	r0, #49	; 0x31
 8001fb6:	f005 fe09 	bl	8007bcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fba:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <HAL_InitTick+0xdc>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	e002      	b.n	8001fc8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001fc8:	2031      	movs	r0, #49	; 0x31
 8001fca:	f005 fe19 	bl	8007c00 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001fce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3738      	adds	r7, #56	; 0x38
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	46020c00 	.word	0x46020c00
 8001fe0:	431bde83 	.word	0x431bde83
 8001fe4:	2015309c 	.word	0x2015309c
 8001fe8:	40001000 	.word	0x40001000
 8001fec:	2000004c 	.word	0x2000004c

08001ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <NMI_Handler+0x4>

08001ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffa:	e7fe      	b.n	8001ffa <HardFault_Handler+0x4>

08001ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002000:	e7fe      	b.n	8002000 <MemManage_Handler+0x4>

08002002 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002006:	e7fe      	b.n	8002006 <BusFault_Handler+0x4>

08002008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800200c:	e7fe      	b.n	800200c <UsageFault_Handler+0x4>

0800200e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DSI_TOUCH_INT_Pin);
 8002020:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002024:	f008 fad4 	bl	800a5d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}

0800202c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <TIM6_IRQHandler+0x10>)
 8002032:	f00e fe09 	bl	8010c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2015309c 	.word	0x2015309c

08002040 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <DMA2D_IRQHandler+0x10>)
 8002046:	f006 fc6e 	bl	8008926 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20152e30 	.word	0x20152e30

08002054 <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <GPU2D_IRQHandler+0x10>)
 800205a:	f008 fb3a 	bl	800a6d2 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20152eb4 	.word	0x20152eb4

08002068 <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <GPU2D_ER_IRQHandler+0x10>)
 800206e:	f008 fb56 	bl	800a71e <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20152eb4 	.word	0x20152eb4

0800207c <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <LTDC_IRQHandler+0x10>)
 8002082:	f009 fc2b 	bl	800b8dc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20152f14 	.word	0x20152f14

08002090 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LCD-TFT Error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <LTDC_ER_IRQHandler+0x10>)
 8002096:	f009 fc21 	bl	800b8dc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20152f14 	.word	0x20152f14

080020a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return 1;
 80020a8:	2301      	movs	r3, #1
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <_kill>:

int _kill(int pid, int sig)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020be:	f027 f8fb 	bl	80292b8 <__errno>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2216      	movs	r2, #22
 80020c6:	601a      	str	r2, [r3, #0]
  return -1;
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_exit>:

void _exit (int status)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ffe7 	bl	80020b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020e6:	e7fe      	b.n	80020e6 <_exit+0x12>

080020e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	e00a      	b.n	8002110 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020fa:	e000      	b.n	80020fe <_read+0x16>
 80020fc:	bf00      	nop
 80020fe:	4601      	mov	r1, r0
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	60ba      	str	r2, [r7, #8]
 8002106:	b2ca      	uxtb	r2, r1
 8002108:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3301      	adds	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	429a      	cmp	r2, r3
 8002116:	dbf0      	blt.n	80020fa <_read+0x12>
  }

  return len;
 8002118:	687b      	ldr	r3, [r7, #4]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	e009      	b.n	8002148 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	60ba      	str	r2, [r7, #8]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fbe1 	bl	8001904 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	3301      	adds	r3, #1
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	429a      	cmp	r2, r3
 800214e:	dbf1      	blt.n	8002134 <_write+0x12>
  }
  return len;
 8002150:	687b      	ldr	r3, [r7, #4]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <_close>:

int _close(int file)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002182:	605a      	str	r2, [r3, #4]
  return 0;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <_isatty>:

int _isatty(int file)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800219a:	2301      	movs	r3, #1
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021cc:	4a14      	ldr	r2, [pc, #80]	; (8002220 <_sbrk+0x5c>)
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <_sbrk+0x60>)
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d102      	bne.n	80021e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <_sbrk+0x64>)
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <_sbrk+0x68>)
 80021e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <_sbrk+0x64>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d207      	bcs.n	8002204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021f4:	f027 f860 	bl	80292b8 <__errno>
 80021f8:	4603      	mov	r3, r0
 80021fa:	220c      	movs	r2, #12
 80021fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	e009      	b.n	8002218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <_sbrk+0x64>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800220a:	4b07      	ldr	r3, [pc, #28]	; (8002228 <_sbrk+0x64>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	4a05      	ldr	r2, [pc, #20]	; (8002228 <_sbrk+0x64>)
 8002214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002216:	68fb      	ldr	r3, [r7, #12]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20270000 	.word	0x20270000
 8002224:	00001000 	.word	0x00001000
 8002228:	201530e8 	.word	0x201530e8
 800222c:	20197f50 	.word	0x20197f50

08002230 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002268 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002234:	f005 fb68 	bl	8007908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002238:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800223a:	e003      	b.n	8002244 <LoopCopyDataInit>

0800223c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800223e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002240:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002242:	3104      	adds	r1, #4

08002244 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002244:	480a      	ldr	r0, [pc, #40]	; (8002270 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002248:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800224a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800224c:	d3f6      	bcc.n	800223c <CopyDataInit>
	ldr	r2, =_sbss
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002250:	e002      	b.n	8002258 <LoopFillZerobss>

08002252 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002252:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002254:	f842 3b04 	str.w	r3, [r2], #4

08002258 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <LoopForever+0x16>)
	cmp	r2, r3
 800225a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800225c:	d3f9      	bcc.n	8002252 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800225e:	f027 f843 	bl	80292e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002262:	f7fe fb2b 	bl	80008bc <main>

08002266 <LoopForever>:

LoopForever:
    b LoopForever
 8002266:	e7fe      	b.n	8002266 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002268:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 800226c:	0802d5c0 	.word	0x0802d5c0
	ldr	r0, =_sdata
 8002270:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002274:	2000012c 	.word	0x2000012c
	ldr	r2, =_sbss
 8002278:	20151930 	.word	0x20151930
	ldr	r3, = _ebss
 800227c:	20197f4c 	.word	0x20197f4c

08002280 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002280:	e7fe      	b.n	8002280 <ADC1_2_IRQHandler>

08002282 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8002286:	f000 fe65 	bl	8002f54 <touchgfx_components_init>
  touchgfx_init();
 800228a:	f000 fdeb 	bl	8002e64 <touchgfx_init>
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <MX_TouchGFX_Init>:

/**
 * Create TouchGFX Thread
 */
UINT MX_TouchGFX_Init(VOID *memory_ptr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08c      	sub	sp, #48	; 0x30
 8002298:	af08      	add	r7, sp, #32
 800229a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
  CHAR *pointer = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60bb      	str	r3, [r7, #8]

  /* Allocate the stack for TouchGFX Thread.  */
  if (tx_byte_allocate((TX_BYTE_POOL*)memory_ptr, (VOID **) &pointer,
 80022a4:	f107 0108 	add.w	r1, r7, #8
 80022a8:	2300      	movs	r3, #0
 80022aa:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f013 fe08 	bl	8015ec4 <_txe_byte_allocate>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <MX_TouchGFX_Init+0x2c>
                       TOUCHGFX_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    ret = TX_POOL_ERROR;
 80022ba:	2302      	movs	r3, #2
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	e019      	b.n	80022f4 <MX_TouchGFX_Init+0x60>
  }

  /* Create TouchGFX Thread */
  else if (tx_thread_create(&TouchGFXThread, (CHAR *)"TouchGFX", TouchGFX_Task, 0,
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	22b0      	movs	r2, #176	; 0xb0
 80022c4:	9206      	str	r2, [sp, #24]
 80022c6:	2201      	movs	r2, #1
 80022c8:	9205      	str	r2, [sp, #20]
 80022ca:	2200      	movs	r2, #0
 80022cc:	9204      	str	r2, [sp, #16]
 80022ce:	2205      	movs	r2, #5
 80022d0:	9203      	str	r2, [sp, #12]
 80022d2:	2205      	movs	r2, #5
 80022d4:	9202      	str	r2, [sp, #8]
 80022d6:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80022da:	9201      	str	r2, [sp, #4]
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2300      	movs	r3, #0
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <MX_TouchGFX_Init+0x6c>)
 80022e2:	4908      	ldr	r1, [pc, #32]	; (8002304 <MX_TouchGFX_Init+0x70>)
 80022e4:	4808      	ldr	r0, [pc, #32]	; (8002308 <MX_TouchGFX_Init+0x74>)
 80022e6:	f014 f93b 	bl	8016560 <_txe_thread_create>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TouchGFX_Init+0x60>
                       pointer, TOUCHGFX_STACK_SIZE,
                       5, 5,
                       TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
  {
    ret = TX_THREAD_ERROR;
 80022f0:	230e      	movs	r3, #14
 80022f2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80022f4:	68fb      	ldr	r3, [r7, #12]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	0800230d 	.word	0x0800230d
 8002304:	0802a7bc 	.word	0x0802a7bc
 8002308:	201530ec 	.word	0x201530ec

0800230c <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(unsigned long thread_input)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8002314:	f000 fe28 	bl	8002f68 <touchgfx_taskEntry>
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <_ZN8touchgfx7Buttons4initEv>:
    BUTTON_USER  = '5',
} JOYState_TypeDef;

void Buttons::init()
{
}
 8002320:	4770      	bx	lr
	...

08002324 <_ZN8touchgfx7Buttons6sampleEv>:

unsigned int Buttons::sample()
{
    unsigned int buttonValue = BUTTON_NONE;

    if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET)
 8002324:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{
 8002328:	b508      	push	{r3, lr}
    if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET)
 800232a:	4804      	ldr	r0, [pc, #16]	; (800233c <_ZN8touchgfx7Buttons6sampleEv+0x18>)
 800232c:	f008 f8ac 	bl	800a488 <HAL_GPIO_ReadPin>
        buttonValue = BUTTON_USER;
    }

    if (buttonValue == BUTTON_NONE)
    {
        return 0;
 8002330:	2801      	cmp	r0, #1
    }

    return static_cast<unsigned int>(buttonValue);
}
 8002332:	bf0c      	ite	eq
 8002334:	2035      	moveq	r0, #53	; 0x35
 8002336:	2000      	movne	r0, #0
 8002338:	bd08      	pop	{r3, pc}
 800233a:	bf00      	nop
 800233c:	42020800 	.word	0x42020800

08002340 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8002340:	6840      	ldr	r0, [r0, #4]
    }
 8002342:	4770      	bx	lr

08002344 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8002344:	6041      	str	r1, [r0, #4]
    }
 8002346:	4770      	bx	lr

08002348 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8002348:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800234c:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8002350:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002354:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 800235a:	4a06      	ldr	r2, [pc, #24]	; (8002374 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 800235c:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8002360:	430a      	orrs	r2, r1
 8002362:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	f042 0201 	orr.w	r2, r2, #1
 800236c:	601a      	str	r2, [r3, #0]
}
 800236e:	4770      	bx	lr
 8002370:	e0001000 	.word	0xe0001000
 8002374:	c5acce55 	.word	0xc5acce55

08002378 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8002378:	1a51      	subs	r1, r2, r1
 800237a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 800237e:	fbb1 f0f3 	udiv	r0, r1, r3
 8002382:	4770      	bx	lr

08002384 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8002384:	4b01      	ldr	r3, [pc, #4]	; (800238c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8002386:	6858      	ldr	r0, [r3, #4]
}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e0001000 	.word	0xe0001000

08002390 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8002390:	4770      	bx	lr

08002392 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8002392:	b510      	push	{r4, lr}
 8002394:	4604      	mov	r4, r0
 8002396:	210c      	movs	r1, #12
 8002398:	f026 ff2f 	bl	80291fa <_ZdlPvj>
 800239c:	4620      	mov	r0, r4
 800239e:	bd10      	pop	{r4, pc}

080023a0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80023a0:	6803      	ldr	r3, [r0, #0]
{
 80023a2:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80023a4:	691b      	ldr	r3, [r3, #16]
{
 80023a6:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80023a8:	b131      	cbz	r1, 80023b8 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80023aa:	4798      	blx	r3
 80023ac:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 80023ae:	6863      	ldr	r3, [r4, #4]
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	4418      	add	r0, r3
 80023b4:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80023b6:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80023b8:	4798      	blx	r3
 80023ba:	60a0      	str	r0, [r4, #8]
}
 80023bc:	e7fb      	b.n	80023b6 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

080023be <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 80023be:	4770      	bx	lr

080023c0 <_ZN8touchgfx10KeySamplerD1Ev>:
public:
    KeySampler()
    {
        init();
    }
    virtual ~KeySampler() {}
 80023c0:	4770      	bx	lr

080023c2 <_ZN8touchgfx10KeySampler4initEv>:

using namespace touchgfx;

void KeySampler::init()
{
    previousState = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	7103      	strb	r3, [r0, #4]
    Buttons::init();
 80023c6:	f7ff bfab 	b.w	8002320 <_ZN8touchgfx7Buttons4initEv>
	...

080023cc <_ZN8touchgfx10KeySampler6sampleERh>:
}

bool KeySampler::sample(uint8_t& key)
{
 80023cc:	b570      	push	{r4, r5, r6, lr}
 80023ce:	4604      	mov	r4, r0
 80023d0:	460d      	mov	r5, r1
    static uint32_t last_time = 0;

    if ((HAL_GetTick() - last_time) > 800)
 80023d2:	f005 fb13 	bl	80079fc <HAL_GetTick>
 80023d6:	4e0b      	ldr	r6, [pc, #44]	; (8002404 <_ZN8touchgfx10KeySampler6sampleERh+0x38>)
 80023d8:	6833      	ldr	r3, [r6, #0]
 80023da:	1ac0      	subs	r0, r0, r3
 80023dc:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 80023e0:	d904      	bls.n	80023ec <_ZN8touchgfx10KeySampler6sampleERh+0x20>
    {
        last_time = HAL_GetTick();
 80023e2:	f005 fb0b 	bl	80079fc <HAL_GetTick>
        previousState = 0;
 80023e6:	2300      	movs	r3, #0
        last_time = HAL_GetTick();
 80023e8:	6030      	str	r0, [r6, #0]
        previousState = 0;
 80023ea:	7123      	strb	r3, [r4, #4]
    }

    key = static_cast<uint8_t>(Buttons::sample());
 80023ec:	f7ff ff9a 	bl	8002324 <_ZN8touchgfx7Buttons6sampleEv>
 80023f0:	b2c0      	uxtb	r0, r0
 80023f2:	7028      	strb	r0, [r5, #0]

    //User key
    if (key && (key != previousState))
 80023f4:	b128      	cbz	r0, 8002402 <_ZN8touchgfx10KeySampler6sampleERh+0x36>
 80023f6:	7922      	ldrb	r2, [r4, #4]
 80023f8:	4282      	cmp	r2, r0
    {
        previousState = key;
 80023fa:	bf16      	itet	ne
 80023fc:	7120      	strbne	r0, [r4, #4]
        return true;
    }

    return false;
 80023fe:	2000      	moveq	r0, #0
        return true;
 8002400:	2001      	movne	r0, #1
}
 8002402:	bd70      	pop	{r4, r5, r6, pc}
 8002404:	2015319c 	.word	0x2015319c

08002408 <_ZN8touchgfx10KeySamplerD0Ev>:
 8002408:	b510      	push	{r4, lr}
 800240a:	4604      	mov	r4, r0
 800240c:	2108      	movs	r1, #8
 800240e:	f026 fef4 	bl	80291fa <_ZdlPvj>
 8002412:	4620      	mov	r0, r4
 8002414:	bd10      	pop	{r4, pc}

08002416 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8002416:	4770      	bx	lr

08002418 <_ZN20STM32TouchControllerD0Ev>:
 8002418:	b510      	push	{r4, lr}
 800241a:	4604      	mov	r4, r0
 800241c:	2104      	movs	r1, #4
 800241e:	f026 feec 	bl	80291fa <_ZdlPvj>
 8002422:	4620      	mov	r0, r4
 8002424:	bd10      	pop	{r4, pc}
	...

08002428 <_ZN20STM32TouchController11sampleTouchERlS0_>:
    }
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
    if (_initialized)
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <_ZN20STM32TouchController11sampleTouchERlS0_+0x1c>)
{
 800242a:	b510      	push	{r4, lr}
    if (_initialized)
 800242c:	7818      	ldrb	r0, [r3, #0]
 800242e:	b130      	cbz	r0, 800243e <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
    {
        if (state.TouchDetected)
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>)
 8002432:	681c      	ldr	r4, [r3, #0]
 8002434:	b124      	cbz	r4, 8002440 <_ZN20STM32TouchController11sampleTouchERlS0_+0x18>
        {
            x = state.TouchX;
 8002436:	685c      	ldr	r4, [r3, #4]
 8002438:	600c      	str	r4, [r1, #0]
            y = state.TouchY;
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	6013      	str	r3, [r2, #0]
            return true;
        }
    }

    return false;
}
 800243e:	bd10      	pop	{r4, pc}
    return false;
 8002440:	4620      	mov	r0, r4
 8002442:	e7fc      	b.n	800243e <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
 8002444:	201531a0 	.word	0x201531a0
 8002448:	201531a4 	.word	0x201531a4

0800244c <_ZN20STM32TouchController4initEv>:
{
 800244c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (!_initialized)
 800244e:	4c09      	ldr	r4, [pc, #36]	; (8002474 <_ZN20STM32TouchController4initEv+0x28>)
 8002450:	7820      	ldrb	r0, [r4, #0]
 8002452:	b968      	cbnz	r0, 8002470 <_ZN20STM32TouchController4initEv+0x24>
        TsInit.Width = HAL::DISPLAY_WIDTH;
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <_ZN20STM32TouchController4initEv+0x2c>)
        if (BSP_TS_Init(0, &TsInit) == BSP_ERROR_NONE)
 8002456:	4669      	mov	r1, sp
        TsInit.Width = HAL::DISPLAY_WIDTH;
 8002458:	881b      	ldrh	r3, [r3, #0]
        TsInit.Accuracy = 0;
 800245a:	9003      	str	r0, [sp, #12]
        TsInit.Width = HAL::DISPLAY_WIDTH;
 800245c:	9300      	str	r3, [sp, #0]
        TsInit.Height = HAL::DISPLAY_HEIGHT;
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <_ZN20STM32TouchController4initEv+0x30>)
 8002460:	881b      	ldrh	r3, [r3, #0]
        TsInit.Orientation = TS_ORIENTATION_PORTRAIT;
 8002462:	e9cd 3001 	strd	r3, r0, [sp, #4]
        if (BSP_TS_Init(0, &TsInit) == BSP_ERROR_NONE)
 8002466:	f005 f859 	bl	800751c <BSP_TS_Init>
 800246a:	b908      	cbnz	r0, 8002470 <_ZN20STM32TouchController4initEv+0x24>
            _initialized = true;
 800246c:	2301      	movs	r3, #1
 800246e:	7023      	strb	r3, [r4, #0]
}
 8002470:	b004      	add	sp, #16
 8002472:	bd10      	pop	{r4, pc}
 8002474:	201531a0 	.word	0x201531a0
 8002478:	20197a34 	.word	0x20197a34
 800247c:	20197a36 	.word	0x20197a36

08002480 <HAL_GPIO_EXTI_Falling_Callback>:
    if (GPIO_Pin == TS_INT_PIN)
 8002480:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8002484:	b508      	push	{r3, lr}
    if (GPIO_Pin == TS_INT_PIN)
 8002486:	d10d      	bne.n	80024a4 <HAL_GPIO_EXTI_Falling_Callback+0x24>
        if (_initialized)
 8002488:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <HAL_GPIO_EXTI_Falling_Callback+0x28>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	b153      	cbz	r3, 80024a4 <HAL_GPIO_EXTI_Falling_Callback+0x24>
            if (BSP_TS_GetState(0, &state) != BSP_ERROR_NONE)
 800248e:	2000      	movs	r0, #0
 8002490:	4906      	ldr	r1, [pc, #24]	; (80024ac <HAL_GPIO_EXTI_Falling_Callback+0x2c>)
 8002492:	f005 f8df 	bl	8007654 <BSP_TS_GetState>
 8002496:	b128      	cbz	r0, 80024a4 <HAL_GPIO_EXTI_Falling_Callback+0x24>
                assert(0 && "Failed to read TS state");
 8002498:	213b      	movs	r1, #59	; 0x3b
 800249a:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 800249c:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <HAL_GPIO_EXTI_Falling_Callback+0x34>)
 800249e:	4806      	ldr	r0, [pc, #24]	; (80024b8 <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 80024a0:	f026 fed8 	bl	8029254 <__assert_func>
}
 80024a4:	bd08      	pop	{r3, pc}
 80024a6:	bf00      	nop
 80024a8:	201531a0 	.word	0x201531a0
 80024ac:	201531a4 	.word	0x201531a4
 80024b0:	0802a960 	.word	0x0802a960
 80024b4:	0802a97f 	.word	0x0802a97f
 80024b8:	0802a9ad 	.word	0x0802a9ad

080024bc <_ZN8touchgfx4GPIO4initEv>:
 * Perform configuration of IO pins.
 */
void GPIO::init()
{

}
 80024bc:	4770      	bx	lr
	...

080024c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 80024c0:	2803      	cmp	r0, #3
 80024c2:	d814      	bhi.n	80024ee <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2e>
 80024c4:	e8df f000 	tbb	[pc, r0]
 80024c8:	0f0a0702 	.word	0x0f0a0702
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 80024cc:	2201      	movs	r2, #1
 80024ce:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 80024d0:	4807      	ldr	r0, [pc, #28]	; (80024f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x30>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 80024d2:	f007 bff1 	b.w	800a4b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 80024d6:	2201      	movs	r2, #1
 80024d8:	4611      	mov	r1, r2
 80024da:	e7f9      	b.n	80024d0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x10>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 80024dc:	2201      	movs	r2, #1
 80024de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 80024e2:	4804      	ldr	r0, [pc, #16]	; (80024f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x34>)
 80024e4:	e7f5      	b.n	80024d2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x12>
 80024e6:	2201      	movs	r2, #1
 80024e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ec:	e7f9      	b.n	80024e2 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x22>
#endif
        break;
    }
}
 80024ee:	4770      	bx	lr
 80024f0:	42020c00 	.word	0x42020c00
 80024f4:	42021400 	.word	0x42021400

080024f8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 80024f8:	2803      	cmp	r0, #3
 80024fa:	d814      	bhi.n	8002526 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2e>
 80024fc:	e8df f000 	tbb	[pc, r0]
 8002500:	0f0a0702 	.word	0x0f0a0702
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8002504:	2200      	movs	r2, #0
 8002506:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 8002508:	4807      	ldr	r0, [pc, #28]	; (8002528 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800250a:	f007 bfd5 	b.w	800a4b8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 800250e:	2200      	movs	r2, #0
 8002510:	2101      	movs	r1, #1
 8002512:	e7f9      	b.n	8002508 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x10>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8002514:	2200      	movs	r2, #0
 8002516:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800251a:	4804      	ldr	r0, [pc, #16]	; (800252c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x34>)
 800251c:	e7f5      	b.n	800250a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x12>
 800251e:	2200      	movs	r2, #0
 8002520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002524:	e7f9      	b.n	800251a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x22>
#endif
        break;
    }
}
 8002526:	4770      	bx	lr
 8002528:	42020c00 	.word	0x42020c00
 800252c:	42021400 	.word	0x42021400

08002530 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8002530:	2803      	cmp	r0, #3
 8002532:	d810      	bhi.n	8002556 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x26>
 8002534:	e8df f000 	tbb	[pc, r0]
 8002538:	0c080602 	.word	0x0c080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800253c:	2102      	movs	r1, #2
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800253e:	4806      	ldr	r0, [pc, #24]	; (8002558 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8002540:	f007 bfd2 	b.w	800a4e8 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8002544:	2101      	movs	r1, #1
 8002546:	e7fa      	b.n	800253e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8002548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800254c:	4803      	ldr	r0, [pc, #12]	; (800255c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 800254e:	e7f7      	b.n	8002540 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8002550:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002554:	e7fa      	b.n	800254c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x1c>
#endif
        break;
    }
}
 8002556:	4770      	bx	lr
 8002558:	42020c00 	.word	0x42020c00
 800255c:	42021400 	.word	0x42021400

08002560 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8002560:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8002562:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8002566:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 800256a:	4770      	bx	lr

0800256c <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800256c:	2000      	movs	r0, #0
 800256e:	4770      	bx	lr

08002570 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8002570:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8002572:	3900      	subs	r1, #0
 8002574:	bf18      	it	ne
 8002576:	2101      	movne	r1, #1
 8002578:	4b01      	ldr	r3, [pc, #4]	; (8002580 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 800257a:	7019      	strb	r1, [r3, #0]
    }
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20197a3f 	.word	0x20197a3f

08002584 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8002584:	2000      	movs	r0, #0
 8002586:	4770      	bx	lr

08002588 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8002588:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800258a:	b10b      	cbz	r3, 8002590 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 800258c:	4608      	mov	r0, r1
 800258e:	4718      	bx	r3
        }
    }
 8002590:	4770      	bx	lr

08002592 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8002592:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002596:	4770      	bx	lr

08002598 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8002598:	6840      	ldr	r0, [r0, #4]
 800259a:	6803      	ldr	r3, [r0, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	4718      	bx	r3

080025a0 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 80025a0:	4770      	bx	lr

080025a2 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 80025a2:	4770      	bx	lr

080025a4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80025a4:	4770      	bx	lr
	...

080025a8 <_ZN11TouchGFXHAL10initializeEv>:
using namespace touchgfx;

KeySampler btnctrl;

void TouchGFXHAL::initialize()
{
 80025a8:	b538      	push	{r3, r4, r5, lr}
 80025aa:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80025ac:	f000 fd4e 	bl	800304c <_ZN20TouchGFXGeneratedHAL10initializeEv>
        buttonController = btnCtrl;
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <_ZN11TouchGFXHAL10initializeEv+0x2c>)
    setButtonController(&btnctrl);
    lockDMAToFrontPorch(false);
    GPIO::init();
    instrumentation.init();
 80025b2:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
 80025b6:	6163      	str	r3, [r4, #20]
        lockDMAToPorch = enableLock;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
    GPIO::init();
 80025be:	f7ff ff7d 	bl	80024bc <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 80025c2:	4628      	mov	r0, r5
 80025c4:	f7ff fec0 	bl	8002348 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 80025c8:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 80025ca:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 80025cc:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 80025d0:	bd38      	pop	{r3, r4, r5, pc}
 80025d2:	bf00      	nop
 80025d4:	201531b4 	.word	0x201531b4

080025d8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80025d8:	f000 bd2a 	b.w	8003030 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

080025dc <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80025dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 80025de:	2500      	movs	r5, #0
 80025e0:	4c10      	ldr	r4, [pc, #64]	; (8002624 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt+0x48>)
 80025e2:	9500      	str	r5, [sp, #0]
 80025e4:	6823      	ldr	r3, [r4, #0]
 80025e6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80025ea:	f022 0208 	bic.w	r2, r2, #8
 80025ee:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80025f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	9b00      	ldr	r3, [sp, #0]
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80025fe:	f000 fd1d 	bl	800303c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
    __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	9501      	str	r5, [sp, #4]
 8002606:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800260a:	f042 0208 	orr.w	r2, r2, #8
 800260e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002612:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	9b01      	ldr	r3, [sp, #4]
}
 800261e:	b003      	add	sp, #12
 8002620:	bd30      	pop	{r4, r5, pc}
 8002622:	bf00      	nop
 8002624:	20152e90 	.word	0x20152e90

08002628 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8002628:	f000 bd38 	b.w	800309c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

0800262c <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:
}

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800262c:	f000 bd38 	b.w	80030a0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08002630 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8002630:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    TouchGFXGeneratedHAL::configureInterrupts();
 8002632:	f000 fcd7 	bl	8002fe4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002636:	2290      	movs	r2, #144	; 0x90
 8002638:	4b01      	ldr	r3, [pc, #4]	; (8002640 <_ZN11TouchGFXHAL19configureInterruptsEv+0x10>)
 800263a:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
    NVIC_SetPriority(DSI_IRQn, 9);
}
 800263e:	bd08      	pop	{r3, pc}
 8002640:	e000e100 	.word	0xe000e100

08002644 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8002644:	f000 bcda 	b.w	8002ffc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08002648 <_ZN11TouchGFXHAL10beginFrameEv>:
}

bool TouchGFXHAL::beginFrame()
{
    return TouchGFXGeneratedHAL::beginFrame();
 8002648:	f000 bd1c 	b.w	8003084 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>

0800264c <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
    if (!display_on)
 800264c:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <_ZN11TouchGFXHAL8endFrameEv+0x38>)
{
 800264e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!display_on)
 8002650:	7819      	ldrb	r1, [r3, #0]
{
 8002652:	4604      	mov	r4, r0
    if (!display_on)
 8002654:	b979      	cbnz	r1, 8002676 <_ZN11TouchGFXHAL8endFrameEv+0x2a>
    {
        display_on = true;
 8002656:	2201      	movs	r2, #1
        /* Enable the LCD, Send Display on DCS command to display */
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, DSI_SET_DISPLAY_ON, 0x00);
        /* Start PWM Timer channel */
        (void)HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002658:	4d0b      	ldr	r5, [pc, #44]	; (8002688 <_ZN11TouchGFXHAL8endFrameEv+0x3c>)
        display_on = true;
 800265a:	701a      	strb	r2, [r3, #0]
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, DSI_SET_DISPLAY_ON, 0x00);
 800265c:	480b      	ldr	r0, [pc, #44]	; (800268c <_ZN11TouchGFXHAL8endFrameEv+0x40>)
 800265e:	2329      	movs	r3, #41	; 0x29
 8002660:	2215      	movs	r2, #21
 8002662:	9100      	str	r1, [sp, #0]
 8002664:	f007 f953 	bl	800990e <HAL_DSI_ShortWrite>
        (void)HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002668:	2104      	movs	r1, #4
 800266a:	4628      	mov	r0, r5
 800266c:	f00e f99a 	bl	80109a4 <HAL_TIM_PWM_Start>
        /* Enable Backlight by setting Brightness to 100% */
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 2U * 100);
 8002670:	22c8      	movs	r2, #200	; 0xc8
 8002672:	682b      	ldr	r3, [r5, #0]
 8002674:	639a      	str	r2, [r3, #56]	; 0x38
    }

    TouchGFXGeneratedHAL::endFrame();
 8002676:	4620      	mov	r0, r4
}
 8002678:	b003      	add	sp, #12
 800267a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    TouchGFXGeneratedHAL::endFrame();
 800267e:	f000 bd03 	b.w	8003088 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
 8002682:	bf00      	nop
 8002684:	201531b0 	.word	0x201531b0
 8002688:	20152fbc 	.word	0x20152fbc
 800268c:	20152e90 	.word	0x20152e90

08002690 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8002690:	b510      	push	{r4, lr}
 8002692:	4604      	mov	r4, r0
        swapFrameBuffers();
 8002694:	f015 f8d6 	bl	8017844 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8002698:	6823      	ldr	r3, [r4, #0]
 800269a:	4620      	mov	r0, r4
    }
 800269c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 80026a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80026a4:	4718      	bx	r3

080026a6 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 80026a6:	f014 bb17 	b.w	8016cd8 <_ZN8touchgfx3HAL16flushFrameBufferEv>

080026aa <_ZN11TouchGFXHALD0Ev>:
 80026aa:	b510      	push	{r4, lr}
 80026ac:	4604      	mov	r4, r0
 80026ae:	21b4      	movs	r1, #180	; 0xb4
 80026b0:	f026 fda3 	bl	80291fa <_ZdlPvj>
 80026b4:	4620      	mov	r0, r4
 80026b6:	bd10      	pop	{r4, pc}

080026b8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 80026b8:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 80026bc:	b11b      	cbz	r3, 80026c6 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 80026be:	6840      	ldr	r0, [r0, #4]
 80026c0:	6803      	ldr	r3, [r0, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4718      	bx	r3
    }
 80026c6:	4618      	mov	r0, r3
 80026c8:	4770      	bx	lr
	...

080026cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 80026cc:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80026ce:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 80026d2:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 80026d8:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 80026da:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80026dc:	d009      	beq.n	80026f2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80026de:	b93a      	cbnz	r2, 80026f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                const uint16_t tmp = DISPLAY_HEIGHT;
 80026e0:	490a      	ldr	r1, [pc, #40]	; (800270c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80026e2:	4a0b      	ldr	r2, [pc, #44]	; (8002710 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80026e4:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80026e6:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80026e8:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80026ea:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80026ec:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 80026ee:	701a      	strb	r2, [r3, #0]
    }
 80026f0:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 80026f2:	2a00      	cmp	r2, #0
 80026f4:	d0fc      	beq.n	80026f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80026f6:	4a06      	ldr	r2, [pc, #24]	; (8002710 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 80026f8:	4904      	ldr	r1, [pc, #16]	; (800270c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80026fa:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 80026fc:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80026fe:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8002700:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8002702:	2200      	movs	r2, #0
 8002704:	e7f3      	b.n	80026ee <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8002706:	bf00      	nop
 8002708:	20197a38 	.word	0x20197a38
 800270c:	20197a36 	.word	0x20197a36
 8002710:	20197a34 	.word	0x20197a34

08002714 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8002714:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	428b      	cmp	r3, r1
 800271c:	d803      	bhi.n	8002726 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	4293      	cmp	r3, r2
 8002724:	d905      	bls.n	8002732 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8002726:	219e      	movs	r1, #158	; 0x9e
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 800272a:	4a07      	ldr	r2, [pc, #28]	; (8002748 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 800272c:	4807      	ldr	r0, [pc, #28]	; (800274c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800272e:	f026 fd91 	bl	8029254 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002734:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8002736:	4b07      	ldr	r3, [pc, #28]	; (8002754 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8002738:	801a      	strh	r2, [r3, #0]
    }
 800273a:	bd08      	pop	{r3, pc}
 800273c:	20197a34 	.word	0x20197a34
 8002740:	20197a36 	.word	0x20197a36
 8002744:	0802aa14 	.word	0x0802aa14
 8002748:	0802aa77 	.word	0x0802aa77
 800274c:	0802aaba 	.word	0x0802aaba
 8002750:	20197a3a 	.word	0x20197a3a
 8002754:	20197a3c 	.word	0x20197a3c

08002758 <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 8002758:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 800275a:	f000 fcc3 	bl	80030e4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <_ZN11TouchGFXHAL17disableInterruptsEv+0x1c>)
 8002764:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002768:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800276c:	f3bf 8f6f 	isb	sy
}
 8002770:	bd08      	pop	{r3, pc}
 8002772:	bf00      	nop
 8002774:	e000e100 	.word	0xe000e100

08002778 <_ZN11TouchGFXHAL16enableInterruptsEv>:
{
 8002778:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::enableInterrupts();
 800277a:	f000 fccd 	bl	8003118 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002782:	4b01      	ldr	r3, [pc, #4]	; (8002788 <_ZN11TouchGFXHAL16enableInterruptsEv+0x10>)
 8002784:	611a      	str	r2, [r3, #16]
}
 8002786:	bd08      	pop	{r3, pc}
 8002788:	e000e100 	.word	0xe000e100

0800278c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 800278c:	b573      	push	{r0, r1, r4, r5, r6, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800278e:	460c      	mov	r4, r1
 8002790:	b931      	cbnz	r1, 80027a0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x14>
 8002792:	f240 21d2 	movw	r1, #722	; 0x2d2
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x78>)
 8002798:	4a1b      	ldr	r2, [pc, #108]	; (8002808 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x7c>)
 800279a:	481c      	ldr	r0, [pc, #112]	; (800280c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x80>)
 800279c:	f026 fd5a 	bl	8029254 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80027a0:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80027a4:	3a00      	subs	r2, #0
 80027a6:	bf18      	it	ne
 80027a8:	2201      	movne	r2, #1
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 80027aa:	2500      	movs	r5, #0
 80027ac:	4918      	ldr	r1, [pc, #96]	; (8002810 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x84>)
 80027ae:	4e19      	ldr	r6, [pc, #100]	; (8002814 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x88>)
 80027b0:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 80027b2:	6802      	ldr	r2, [r0, #0]
 80027b4:	4619      	mov	r1, r3
 80027b6:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80027ba:	4790      	blx	r2
 80027bc:	6833      	ldr	r3, [r6, #0]
 80027be:	9500      	str	r5, [sp, #0]
 80027c0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 80027c4:	4621      	mov	r1, r4
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 80027c6:	f022 0208 	bic.w	r2, r2, #8
 80027ca:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80027ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 80027d2:	462a      	mov	r2, r5
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	9300      	str	r3, [sp, #0]
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 80027da:	480f      	ldr	r0, [pc, #60]	; (8002818 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x8c>)
    __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 80027dc:	9b00      	ldr	r3, [sp, #0]
    (void)HAL_LTDC_SetAddress(&hltdc, (uint32_t)frameBuffer, 0);
 80027de:	f009 f973 	bl	800bac8 <HAL_LTDC_SetAddress>
    __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 80027e2:	6833      	ldr	r3, [r6, #0]
 80027e4:	9501      	str	r5, [sp, #4]
 80027e6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80027ea:	f042 0208 	orr.w	r2, r2, #8
 80027ee:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80027f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	9b01      	ldr	r3, [sp, #4]
}
 80027fe:	b002      	add	sp, #8
 8002800:	bd70      	pop	{r4, r5, r6, pc}
 8002802:	bf00      	nop
 8002804:	0802aaff 	.word	0x0802aaff
 8002808:	0802ab37 	.word	0x0802ab37
 800280c:	0802aaba 	.word	0x0802aaba
 8002810:	20197a3e 	.word	0x20197a3e
 8002814:	20152e90 	.word	0x20152e90
 8002818:	20152f14 	.word	0x20152f14

0800281c <tx_low_power_enter>:
#ifdef TX_LOW_POWER
extern "C"
{

    void tx_low_power_enter()
    {
 800281c:	b508      	push	{r3, lr}
        // tgfx task going to sleep
        touchgfx::HAL::getInstance()->setMCUActive(false);
 800281e:	4b03      	ldr	r3, [pc, #12]	; (800282c <tx_low_power_enter+0x10>)
 8002820:	2100      	movs	r1, #0
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	f015 f828 	bl	8017878 <_ZN8touchgfx3HAL12setMCUActiveEb>
        __WFI();
 8002828:	bf30      	wfi
    }
 800282a:	bd08      	pop	{r3, pc}
 800282c:	20197a40 	.word	0x20197a40

08002830 <tx_low_power_exit>:
    void tx_low_power_exit()
    {

        // tgfx task waking up
        touchgfx::HAL::getInstance()->setMCUActive(true);
 8002830:	4b02      	ldr	r3, [pc, #8]	; (800283c <tx_low_power_exit+0xc>)
 8002832:	2101      	movs	r1, #1
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	f015 b81f 	b.w	8017878 <_ZN8touchgfx3HAL12setMCUActiveEb>
 800283a:	bf00      	nop
 800283c:	20197a40 	.word	0x20197a40

08002840 <_GLOBAL__sub_I_btnctrl>:
{
class KeySampler : public ButtonController
{
public:
    KeySampler()
    {
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <_GLOBAL__sub_I_btnctrl+0xc>)
 8002842:	4b03      	ldr	r3, [pc, #12]	; (8002850 <_GLOBAL__sub_I_btnctrl+0x10>)
 8002844:	6003      	str	r3, [r0, #0]
        init();
 8002846:	f7ff bdbc 	b.w	80023c2 <_ZN8touchgfx10KeySampler4initEv>
 800284a:	bf00      	nop
 800284c:	201531b4 	.word	0x201531b4
 8002850:	0802a94c 	.word	0x0802a94c

08002854 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8002854:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    CHAR* pointer;

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 8002856:	2334      	movs	r3, #52	; 0x34
 8002858:	4a1a      	ldr	r2, [pc, #104]	; (80028c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x70>)
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	491a      	ldr	r1, [pc, #104]	; (80028c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x74>)
 800285e:	2364      	movs	r3, #100	; 0x64
 8002860:	481a      	ldr	r0, [pc, #104]	; (80028cc <_ZN8touchgfx10OSWrappers10initializeEv+0x78>)
 8002862:	f013 fba3 	bl	8015fac <_txe_byte_pool_create>
 8002866:	4603      	mov	r3, r0
 8002868:	b128      	cbz	r0, 8002876 <_ZN8touchgfx10OSWrappers10initializeEv+0x22>
                            OSWRAPPER_BYTE_POOL_SIZE) != TX_SUCCESS)
    {
        assert(0 && "Failed to create OSWrapper Pool memory!");
 800286a:	2138      	movs	r1, #56	; 0x38
 800286c:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x7c>)
 800286e:	4a19      	ldr	r2, [pc, #100]	; (80028d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)

    /* Allocate the vsync_q.  */
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
                         OSWRAPPER_QUEUE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
    {
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 8002870:	4819      	ldr	r0, [pc, #100]	; (80028d8 <_ZN8touchgfx10OSWrappers10initializeEv+0x84>)
 8002872:	f026 fcef 	bl	8029254 <__assert_func>
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 8002876:	2204      	movs	r2, #4
 8002878:	4814      	ldr	r0, [pc, #80]	; (80028cc <_ZN8touchgfx10OSWrappers10initializeEv+0x78>)
 800287a:	a903      	add	r1, sp, #12
 800287c:	f013 fb22 	bl	8015ec4 <_txe_byte_allocate>
 8002880:	b118      	cbz	r0, 800288a <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 8002882:	213f      	movs	r1, #63	; 0x3f
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <_ZN8touchgfx10OSWrappers10initializeEv+0x88>)
 8002886:	4a13      	ldr	r2, [pc, #76]	; (80028d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 8002888:	e7f2      	b.n	8002870 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }

    // Create a queue of length 1
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 800288a:	2304      	movs	r3, #4
 800288c:	2238      	movs	r2, #56	; 0x38
 800288e:	4914      	ldr	r1, [pc, #80]	; (80028e0 <_ZN8touchgfx10OSWrappers10initializeEv+0x8c>)
 8002890:	e9cd 3200 	strd	r3, r2, [sp]
 8002894:	4813      	ldr	r0, [pc, #76]	; (80028e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x90>)
 8002896:	2201      	movs	r2, #1
 8002898:	9b03      	ldr	r3, [sp, #12]
 800289a:	f013 fc27 	bl	80160ec <_txe_queue_create>
 800289e:	b118      	cbz	r0, 80028a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>
                        pointer, OSWRAPPER_QUEUE_SIZE) != TX_SUCCESS)
    {
        assert(0 && "Failed to create Vsync Message Queue!");
 80028a0:	2146      	movs	r1, #70	; 0x46
 80028a2:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x94>)
 80028a4:	4a0b      	ldr	r2, [pc, #44]	; (80028d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 80028a6:	e7e3      	b.n	8002870 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }

    // Create the Framebuffer Semaphore (Binary)
    if (tx_semaphore_create(&frame_buffer_sem, (CHAR*) "FrameBuffer Semaphore", 1) != TX_SUCCESS)
 80028a8:	231c      	movs	r3, #28
 80028aa:	2201      	movs	r2, #1
 80028ac:	490f      	ldr	r1, [pc, #60]	; (80028ec <_ZN8touchgfx10OSWrappers10initializeEv+0x98>)
 80028ae:	4810      	ldr	r0, [pc, #64]	; (80028f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x9c>)
 80028b0:	f013 fd60 	bl	8016374 <_txe_semaphore_create>
 80028b4:	b118      	cbz	r0, 80028be <_ZN8touchgfx10OSWrappers10initializeEv+0x6a>
    {
        assert(0 && "Failed to create FrameBuffer Semaphore!");
 80028b6:	214c      	movs	r1, #76	; 0x4c
 80028b8:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <_ZN8touchgfx10OSWrappers10initializeEv+0xa0>)
 80028ba:	4a06      	ldr	r2, [pc, #24]	; (80028d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x80>)
 80028bc:	e7d8      	b.n	8002870 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
    }
}
 80028be:	b005      	add	sp, #20
 80028c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80028c4:	201531d8 	.word	0x201531d8
 80028c8:	0802ac60 	.word	0x0802ac60
 80028cc:	2015323c 	.word	0x2015323c
 80028d0:	0802ac74 	.word	0x0802ac74
 80028d4:	0802aca3 	.word	0x0802aca3
 80028d8:	0802acd2 	.word	0x0802acd2
 80028dc:	0802ad21 	.word	0x0802ad21
 80028e0:	0802ad5f 	.word	0x0802ad5f
 80028e4:	20153270 	.word	0x20153270
 80028e8:	0802ad73 	.word	0x0802ad73
 80028ec:	0802ada0 	.word	0x0802ada0
 80028f0:	201531bc 	.word	0x201531bc
 80028f4:	0802adb6 	.word	0x0802adb6

080028f8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80028f8:	b508      	push	{r3, lr}
    if (tx_semaphore_get(&frame_buffer_sem, TX_WAIT_FOREVER) != TX_SUCCESS)
 80028fa:	f04f 31ff 	mov.w	r1, #4294967295
 80028fe:	4805      	ldr	r0, [pc, #20]	; (8002914 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x1c>)
 8002900:	f013 fdce 	bl	80164a0 <_txe_semaphore_get>
 8002904:	b128      	cbz	r0, 8002912 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x1a>
    {
        assert(0 && "Failed to get FrameBuffer Semaphore!");
 8002906:	2157      	movs	r1, #87	; 0x57
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x20>)
 800290a:	4a04      	ldr	r2, [pc, #16]	; (800291c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x24>)
 800290c:	4804      	ldr	r0, [pc, #16]	; (8002920 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x28>)
 800290e:	f026 fca1 	bl	8029254 <__assert_func>
    }
}
 8002912:	bd08      	pop	{r3, pc}
 8002914:	201531bc 	.word	0x201531bc
 8002918:	0802ade5 	.word	0x0802ade5
 800291c:	0802ae11 	.word	0x0802ae11
 8002920:	0802acd2 	.word	0x0802acd2

08002924 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    if (!frame_buffer_sem.tx_semaphore_count)
 8002924:	4806      	ldr	r0, [pc, #24]	; (8002940 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1c>)
{
 8002926:	b508      	push	{r3, lr}
    if (!frame_buffer_sem.tx_semaphore_count)
 8002928:	6883      	ldr	r3, [r0, #8]
 800292a:	b943      	cbnz	r3, 800293e <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1a>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 800292c:	f013 fdfa 	bl	8016524 <_txe_semaphore_put>
 8002930:	b128      	cbz	r0, 800293e <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x1a>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 8002932:	2164      	movs	r1, #100	; 0x64
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x20>)
 8002936:	4a04      	ldr	r2, [pc, #16]	; (8002948 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x24>)
 8002938:	4804      	ldr	r0, [pc, #16]	; (800294c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 800293a:	f026 fc8b 	bl	8029254 <__assert_func>
        }
    }
}
 800293e:	bd08      	pop	{r3, pc}
 8002940:	201531bc 	.word	0x201531bc
 8002944:	0802ae4e 	.word	0x0802ae4e
 8002948:	0802ae7a 	.word	0x0802ae7a
 800294c:	0802acd2 	.word	0x0802acd2

08002950 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    if (tx_semaphore_get(&frame_buffer_sem, TX_NO_WAIT) != TX_SUCCESS)
 8002950:	2100      	movs	r1, #0
 8002952:	4801      	ldr	r0, [pc, #4]	; (8002958 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x8>)
 8002954:	f013 bda4 	b.w	80164a0 <_txe_semaphore_get>
 8002958:	201531bc 	.word	0x201531bc

0800295c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800295c:	b538      	push	{r3, r4, r5, lr}
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800295e:	f3ef 8510 	mrs	r5, PRIMASK
    int_posture = __get_interrupt_posture();

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8002962:	b672      	cpsid	i
    TX_INTERRUPT_SAVE_AREA
    TX_DISABLE;
    _tx_thread_preempt_disable++;
 8002964:	4c0c      	ldr	r4, [pc, #48]	; (8002998 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
    if (!frame_buffer_sem.tx_semaphore_count)
 8002966:	480d      	ldr	r0, [pc, #52]	; (800299c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x40>)
    _tx_thread_preempt_disable++;
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	3301      	adds	r3, #1
 800296c:	6023      	str	r3, [r4, #0]
    if (!frame_buffer_sem.tx_semaphore_count)
 800296e:	6883      	ldr	r3, [r0, #8]
 8002970:	b943      	cbnz	r3, 8002984 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 8002972:	f013 fdd7 	bl	8016524 <_txe_semaphore_put>
 8002976:	b128      	cbz	r0, 8002984 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 8002978:	218a      	movs	r1, #138	; 0x8a
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x44>)
 800297c:	4a09      	ldr	r2, [pc, #36]	; (80029a4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x48>)
 800297e:	480a      	ldr	r0, [pc, #40]	; (80029a8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4c>)
 8002980:	f026 fc68 	bl	8029254 <__assert_func>
        }
    }
    _tx_thread_preempt_disable--;
 8002984:	6823      	ldr	r3, [r4, #0]
 8002986:	3b01      	subs	r3, #1
 8002988:	6023      	str	r3, [r4, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800298a:	f385 8810 	msr	PRIMASK, r5
    TX_RESTORE;
    _tx_thread_system_preempt_check();
}
 800298e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _tx_thread_system_preempt_check();
 8002992:	f012 bd81 	b.w	8015498 <_tx_thread_system_preempt_check>
 8002996:	bf00      	nop
 8002998:	201974c4 	.word	0x201974c4
 800299c:	201531bc 	.word	0x201531bc
 80029a0:	0802ae4e 	.word	0x0802ae4e
 80029a4:	0802aeb7 	.word	0x0802aeb7
 80029a8:	0802acd2 	.word	0x0802acd2

080029ac <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
    UINT ret;

    // Send the message only if the queue is empty.
    // This call is from ISR, so no need to re-send
    // the message if not yet consumed by threads
    if (vsync_q.tx_queue_enqueued == 0)
 80029ac:	4807      	ldr	r0, [pc, #28]	; (80029cc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
{
 80029ae:	b508      	push	{r3, lr}
    if (vsync_q.tx_queue_enqueued == 0)
 80029b0:	6902      	ldr	r2, [r0, #16]
 80029b2:	b94a      	cbnz	r2, 80029c8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>
    {
        // This is supposed to be called from Vsync Interrupt Handler
        // So wait_option should be equal to TX_NO_WAIT
        ret = tx_queue_send(&vsync_q, &dummy_msg, TX_NO_WAIT);
 80029b4:	4906      	ldr	r1, [pc, #24]	; (80029d0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x24>)
 80029b6:	f013 fc93 	bl	80162e0 <_txe_queue_send>
        if (ret != TX_SUCCESS)
 80029ba:	b128      	cbz	r0, 80029c8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>
        {
            assert(0 && "Failed to Signal Vsync!");
 80029bc:	21a6      	movs	r1, #166	; 0xa6
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x28>)
 80029c0:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>)
 80029c2:	4806      	ldr	r0, [pc, #24]	; (80029dc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x30>)
 80029c4:	f026 fc46 	bl	8029254 <__assert_func>
        }
    }
}
 80029c8:	bd08      	pop	{r3, pc}
 80029ca:	bf00      	nop
 80029cc:	20153270 	.word	0x20153270
 80029d0:	20000004 	.word	0x20000004
 80029d4:	0802aefb 	.word	0x0802aefb
 80029d8:	0802af1a 	.word	0x0802af1a
 80029dc:	0802acd2 	.word	0x0802acd2

080029e0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80029e0:	b508      	push	{r3, lr}
    UINT ret;

    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_NO_WAIT);
 80029e2:	2200      	movs	r2, #0
 80029e4:	490a      	ldr	r1, [pc, #40]	; (8002a10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 80029e6:	480b      	ldr	r0, [pc, #44]	; (8002a14 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 80029e8:	f013 fc30 	bl	801624c <_txe_queue_receive>

    if ((ret == TX_SUCCESS) || (ret == TX_QUEUE_EMPTY))
 80029ec:	b138      	cbz	r0, 80029fe <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
 80029ee:	280a      	cmp	r0, #10
 80029f0:	d005      	beq.n	80029fe <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
    }

    if (ret != TX_SUCCESS)
    {
        assert(0 && "Failed to Wait for Vsync!");
 80029f2:	21c9      	movs	r1, #201	; 0xc9
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x38>)
 80029f6:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x3c>)
 80029f8:	4809      	ldr	r0, [pc, #36]	; (8002a20 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x40>)
 80029fa:	f026 fc2b 	bl	8029254 <__assert_func>
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
 80029fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002a02:	4903      	ldr	r1, [pc, #12]	; (8002a10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x30>)
 8002a04:	4803      	ldr	r0, [pc, #12]	; (8002a14 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 8002a06:	f013 fc21 	bl	801624c <_txe_queue_receive>
    if (ret != TX_SUCCESS)
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	d1f1      	bne.n	80029f2 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x12>
    }
}
 8002a0e:	bd08      	pop	{r3, pc}
 8002a10:	20000004 	.word	0x20000004
 8002a14:	20153270 	.word	0x20153270
 8002a18:	0802af4a 	.word	0x0802af4a
 8002a1c:	0802af6b 	.word	0x0802af6b
 8002a20:	0802acd2 	.word	0x0802acd2

08002a24 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8002a24:	6803      	ldr	r3, [r0, #0]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	4718      	bx	r3

08002a2a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	4770      	bx	lr

08002a2e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8002a2e:	6803      	ldr	r3, [r0, #0]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	4718      	bx	r3

08002a34 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002a34:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8002a38:	4770      	bx	lr
	...

08002a3c <_ZN8STM32DMAD1Ev>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a3c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
STM32DMA::~STM32DMA()
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <_ZN8STM32DMAD1Ev+0x18>)
 8002a42:	6003      	str	r3, [r0, #0]
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <_ZN8STM32DMAD1Ev+0x1c>)
 8002a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 8002a4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a4e:	f3bf 8f6f 	isb	sy
}
 8002a52:	4770      	bx	lr
 8002a54:	0802b0fc 	.word	0x0802b0fc
 8002a58:	e000e100 	.word	0xe000e100

08002a5c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002a5c:	b510      	push	{r4, lr}
 8002a5e:	4604      	mov	r4, r0
}
 8002a60:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8002a64:	f7ff ffea 	bl	8002a3c <_ZN8STM32DMAD1Ev>
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f026 fbc6 	bl	80291fa <_ZdlPvj>
 8002a6e:	4620      	mov	r0, r4
 8002a70:	bd10      	pop	{r4, pc}
	...

08002a74 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <_ZN8STM32DMA10initializeEv+0x40>)
{
 8002a76:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002a78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a7c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002a84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a88:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002a8c:	9201      	str	r2, [sp, #4]
 8002a8e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002a90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a92:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a96:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002a98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <_ZN8STM32DMA10initializeEv+0x44>)
 8002aa2:	4a06      	ldr	r2, [pc, #24]	; (8002abc <_ZN8STM32DMA10initializeEv+0x48>)
 8002aa4:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <_ZN8STM32DMA10initializeEv+0x4c>)
 8002aac:	60da      	str	r2, [r3, #12]
}
 8002aae:	b002      	add	sp, #8
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	46020c00 	.word	0x46020c00
 8002ab8:	20152e30 	.word	0x20152e30
 8002abc:	08002ac5 	.word	0x08002ac5
 8002ac0:	e000e100 	.word	0xe000e100

08002ac4 <DMA2D_XferCpltCallback>:
        return instance;
 8002ac4:	4b02      	ldr	r3, [pc, #8]	; (8002ad0 <DMA2D_XferCpltCallback+0xc>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002aca:	6803      	ldr	r3, [r0, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	4718      	bx	r3
 8002ad0:	20197a40 	.word	0x20197a40

08002ad4 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002ad8:	2600      	movs	r6, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002ada:	4625      	mov	r5, r4
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <_ZN8STM32DMAC1Ev+0x30>)
 8002ade:	300c      	adds	r0, #12
 8002ae0:	6060      	str	r0, [r4, #4]
 8002ae2:	7226      	strb	r6, [r4, #8]
 8002ae4:	7266      	strb	r6, [r4, #9]
 8002ae6:	f845 3b20 	str.w	r3, [r5], #32
 8002aea:	2260      	movs	r2, #96	; 0x60
 8002aec:	4629      	mov	r1, r5
 8002aee:	f015 f801 	bl	8017af4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002af2:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8002af6:	60ee      	str	r6, [r5, #12]
 8002af8:	3524      	adds	r5, #36	; 0x24
 8002afa:	42ab      	cmp	r3, r5
 8002afc:	d1fb      	bne.n	8002af6 <_ZN8STM32DMAC1Ev+0x22>
}
 8002afe:	4620      	mov	r0, r4
 8002b00:	bd70      	pop	{r4, r5, r6, pc}
 8002b02:	bf00      	nop
 8002b04:	0802b0fc 	.word	0x0802b0fc

08002b08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8002b08:	b508      	push	{r3, lr}
    switch (format)
 8002b0a:	290b      	cmp	r1, #11
 8002b0c:	d80b      	bhi.n	8002b26 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8002b0e:	e8df f001 	tbb	[pc, r1]
 8002b12:	0612      	.short	0x0612
 8002b14:	0a0a0a10 	.word	0x0a0a0a10
 8002b18:	0808080a 	.word	0x0808080a
 8002b1c:	0808      	.short	0x0808
 8002b1e:	2001      	movs	r0, #1
}
 8002b20:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002b22:	2005      	movs	r0, #5
        break;
 8002b24:	e7fc      	b.n	8002b20 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8002b26:	2166      	movs	r1, #102	; 0x66
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8002b2a:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002b2c:	4805      	ldr	r0, [pc, #20]	; (8002b44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8002b2e:	f026 fb91 	bl	8029254 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002b32:	2000      	movs	r0, #0
 8002b34:	e7f4      	b.n	8002b20 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002b36:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002b38:	e7f2      	b.n	8002b20 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8002b3a:	bf00      	nop
 8002b3c:	0802af9c 	.word	0x0802af9c
 8002b40:	0802afb7 	.word	0x0802afb7
 8002b44:	0802b001 	.word	0x0802b001

08002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8002b48:	b508      	push	{r3, lr}
    switch (format)
 8002b4a:	290a      	cmp	r1, #10
 8002b4c:	d809      	bhi.n	8002b62 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8002b4e:	e8df f001 	tbb	[pc, r1]
 8002b52:	0610      	.short	0x0610
 8002b54:	0808080e 	.word	0x0808080e
 8002b58:	06060608 	.word	0x06060608
 8002b5c:	06          	.byte	0x06
 8002b5d:	00          	.byte	0x00
 8002b5e:	2001      	movs	r0, #1
}
 8002b60:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002b62:	2187      	movs	r1, #135	; 0x87
 8002b64:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8002b66:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8002b68:	4805      	ldr	r0, [pc, #20]	; (8002b80 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002b6a:	f026 fb73 	bl	8029254 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002b6e:	2000      	movs	r0, #0
 8002b70:	e7f6      	b.n	8002b60 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002b72:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002b74:	e7f4      	b.n	8002b60 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8002b76:	bf00      	nop
 8002b78:	0802af9c 	.word	0x0802af9c
 8002b7c:	0802b04e 	.word	0x0802b04e
 8002b80:	0802b001 	.word	0x0802b001

08002b84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002b88:	7f4f      	ldrb	r7, [r1, #29]
{
 8002b8a:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002b8c:	4639      	mov	r1, r7
{
 8002b8e:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002b90:	f7ff ffba 	bl	8002b08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002b94:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002b98:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002b9a:	4641      	mov	r1, r8
 8002b9c:	4648      	mov	r0, r9
 8002b9e:	f7ff ffb3 	bl	8002b08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002ba2:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002ba4:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002ba6:	4648      	mov	r0, r9
 8002ba8:	f7ff ffce 	bl	8002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bac:	8aa1      	ldrh	r1, [r4, #20]
 8002bae:	8b62      	ldrh	r2, [r4, #26]
 8002bb0:	4b42      	ldr	r3, [pc, #264]	; (8002cbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002bb2:	1a52      	subs	r2, r2, r1
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bb6:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002bb8:	8b22      	ldrh	r2, [r4, #24]
 8002bba:	1a52      	subs	r2, r2, r1
 8002bbc:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002bbe:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002bc0:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002bc2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002bc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bc8:	6920      	ldr	r0, [r4, #16]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002bca:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bcc:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002bce:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002bd0:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002bd2:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 8002bd6:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002bd8:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 8002bdc:	d026      	beq.n	8002c2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8002bde:	d810      	bhi.n	8002c02 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 8002be0:	2920      	cmp	r1, #32
 8002be2:	ea45 0402 	orr.w	r4, r5, r2
 8002be6:	d061      	beq.n	8002cac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8002be8:	2940      	cmp	r1, #64	; 0x40
 8002bea:	d05f      	beq.n	8002cac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8002bec:	2904      	cmp	r1, #4
 8002bee:	d05d      	beq.n	8002cac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002bf0:	4b32      	ldr	r3, [pc, #200]	; (8002cbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002bf2:	432a      	orrs	r2, r5
 8002bf4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002bf8:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002bfa:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002bfc:	d05a      	beq.n	8002cb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002bfe:	4a30      	ldr	r2, [pc, #192]	; (8002cc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8002c00:	e040      	b.n	8002c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002c02:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002c06:	d007      	beq.n	8002c18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 8002c08:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002c0c:	d1f0      	bne.n	8002bf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c0e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c12:	f042 0209 	orr.w	r2, r2, #9
 8002c16:	e003      	b.n	8002c20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c18:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c1c:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c20:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8002c22:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002c24:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002c26:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c28:	6158      	str	r0, [r3, #20]
 8002c2a:	e02a      	b.n	8002c82 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002c2c:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c2e:	432a      	orrs	r2, r5
 8002c30:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c34:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002c36:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002c38:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c3a:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002c3c:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002c3e:	7822      	ldrb	r2, [r4, #0]
 8002c40:	b142      	cbz	r2, 8002c54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002c42:	2a01      	cmp	r2, #1
 8002c44:	d021      	beq.n	8002c8a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002c46:	f240 1101 	movw	r1, #257	; 0x101
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8002c4c:	4a1e      	ldr	r2, [pc, #120]	; (8002cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002c4e:	481f      	ldr	r0, [pc, #124]	; (8002ccc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002c50:	f026 fb00 	bl	8029254 <__assert_func>
            bool blend = true;
 8002c54:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	8861      	ldrh	r1, [r4, #2]
 8002c5a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002c5e:	3901      	subs	r1, #1
 8002c60:	f022 0210 	bic.w	r2, r2, #16
 8002c64:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c68:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002c6a:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	f042 0220 	orr.w	r2, r2, #32
 8002c72:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002c74:	69da      	ldr	r2, [r3, #28]
 8002c76:	0692      	lsls	r2, r2, #26
 8002c78:	d4fc      	bmi.n	8002c74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002c7a:	2210      	movs	r2, #16
 8002c7c:	609a      	str	r2, [r3, #8]
            if(blend)
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d0bd      	beq.n	8002bfe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002c82:	4a13      	ldr	r2, [pc, #76]	; (8002cd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002c84:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 8002c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002c8a:	8862      	ldrh	r2, [r4, #2]
 8002c8c:	69d9      	ldr	r1, [r3, #28]
 8002c8e:	1e54      	subs	r4, r2, #1
 8002c90:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8002c94:	f022 0210 	bic.w	r2, r2, #16
 8002c98:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
                if(blitOp.alpha == 255)
 8002c9c:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002ca0:	f042 0210 	orr.w	r2, r2, #16
                if(blitOp.alpha == 255)
 8002ca4:	bf18      	it	ne
 8002ca6:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002ca8:	61da      	str	r2, [r3, #28]
                break;
 8002caa:	e7de      	b.n	8002c6a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cac:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8002cb0:	61dc      	str	r4, [r3, #28]
 8002cb2:	e7b8      	b.n	8002c26 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002cb4:	f240 2201 	movw	r2, #513	; 0x201
 8002cb8:	e7e4      	b.n	8002c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002cba:	bf00      	nop
 8002cbc:	4002b000 	.word	0x4002b000
 8002cc0:	00010201 	.word	0x00010201
 8002cc4:	0802b099 	.word	0x0802b099
 8002cc8:	0802b0b3 	.word	0x0802b0b3
 8002ccc:	0802b001 	.word	0x0802b001
 8002cd0:	00020201 	.word	0x00020201

08002cd4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002cd4:	b570      	push	{r4, r5, r6, lr}
 8002cd6:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002cd8:	7f89      	ldrb	r1, [r1, #30]
 8002cda:	f7ff ff35 	bl	8002b48 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002cde:	8aa5      	ldrh	r5, [r4, #20]
 8002ce0:	8ae1      	ldrh	r1, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002ce4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ce8:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002cea:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002cec:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cee:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cf0:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cf2:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002cf6:	6826      	ldr	r6, [r4, #0]
 8002cf8:	68e5      	ldr	r5, [r4, #12]
 8002cfa:	2e08      	cmp	r6, #8
 8002cfc:	d10d      	bne.n	8002d1a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002cfe:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002d00:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002d02:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002d04:	7f20      	ldrb	r0, [r4, #28]
 8002d06:	4a09      	ldr	r2, [pc, #36]	; (8002d2c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002d08:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002d0c:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002d0e:	4a08      	ldr	r2, [pc, #32]	; (8002d30 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002d10:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002d12:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002d14:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002d16:	601a      	str	r2, [r3, #0]
    }
}
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002d1a:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002d1c:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002d1e:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002d20:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002d22:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002d24:	e7f7      	b.n	8002d16 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002d26:	bf00      	nop
 8002d28:	4002b000 	.word	0x4002b000
 8002d2c:	00010009 	.word	0x00010009
 8002d30:	00020201 	.word	0x00020201
 8002d34:	00030201 	.word	0x00030201

08002d38 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002d38:	2001      	movs	r0, #1
 8002d3a:	4770      	bx	lr

08002d3c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002d3c:	200c      	movs	r0, #12
 8002d3e:	4770      	bx	lr

08002d40 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002d40:	230c      	movs	r3, #12
 8002d42:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002d46:	3008      	adds	r0, #8
 8002d48:	4770      	bx	lr

08002d4a <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002d4a:	230c      	movs	r3, #12
 8002d4c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002d50:	3008      	adds	r0, #8
 8002d52:	4770      	bx	lr

08002d54 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002d54:	2001      	movs	r0, #1
 8002d56:	4770      	bx	lr

08002d58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002d58:	f246 3098 	movw	r0, #25496	; 0x6398
 8002d5c:	4770      	bx	lr

08002d5e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002d5e:	f246 3398 	movw	r3, #25496	; 0x6398
 8002d62:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002d66:	3008      	adds	r0, #8
 8002d68:	4770      	bx	lr

08002d6a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002d6a:	f246 3398 	movw	r3, #25496	; 0x6398
 8002d6e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002d72:	3008      	adds	r0, #8
 8002d74:	4770      	bx	lr

08002d76 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002d76:	2001      	movs	r0, #1
 8002d78:	4770      	bx	lr

08002d7a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002d7a:	2010      	movs	r0, #16
 8002d7c:	4770      	bx	lr

08002d7e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002d7e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002d82:	3008      	adds	r0, #8
 8002d84:	4770      	bx	lr

08002d86 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002d86:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002d8a:	3008      	adds	r0, #8
 8002d8c:	4770      	bx	lr

08002d8e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002d8e:	4608      	mov	r0, r1
 8002d90:	f000 bce0 	b.w	8003754 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002d94 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002d94:	b510      	push	{r4, lr}
 8002d96:	4604      	mov	r4, r0
 8002d98:	4b02      	ldr	r3, [pc, #8]	; (8002da4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002d9a:	6003      	str	r3, [r0, #0]
 8002d9c:	f013 fcf5 	bl	801678a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002da0:	4620      	mov	r0, r4
 8002da2:	bd10      	pop	{r4, pc}
 8002da4:	0802b1b4 	.word	0x0802b1b4

08002da8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002da8:	b510      	push	{r4, lr}
 8002daa:	4604      	mov	r4, r0
 8002dac:	f7ff fff2 	bl	8002d94 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002db0:	4620      	mov	r0, r4
 8002db2:	2114      	movs	r1, #20
 8002db4:	f026 fa21 	bl	80291fa <_ZdlPvj>
 8002db8:	4620      	mov	r0, r4
 8002dba:	bd10      	pop	{r4, pc}

08002dbc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002dbc:	b510      	push	{r4, lr}
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	4b02      	ldr	r3, [pc, #8]	; (8002dcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002dc2:	6003      	str	r3, [r0, #0]
 8002dc4:	f013 fce1 	bl	801678a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002dc8:	4620      	mov	r0, r4
 8002dca:	bd10      	pop	{r4, pc}
 8002dcc:	0802b180 	.word	0x0802b180

08002dd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002dd0:	b510      	push	{r4, lr}
 8002dd2:	4604      	mov	r4, r0
 8002dd4:	f7ff fff2 	bl	8002dbc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002dd8:	4620      	mov	r0, r4
 8002dda:	f246 31a0 	movw	r1, #25504	; 0x63a0
 8002dde:	f026 fa0c 	bl	80291fa <_ZdlPvj>
 8002de2:	4620      	mov	r0, r4
 8002de4:	bd10      	pop	{r4, pc}
	...

08002de8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002de8:	b510      	push	{r4, lr}
 8002dea:	4604      	mov	r4, r0
 8002dec:	4b02      	ldr	r3, [pc, #8]	; (8002df8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002dee:	6003      	str	r3, [r0, #0]
 8002df0:	f013 fccb 	bl	801678a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002df4:	4620      	mov	r0, r4
 8002df6:	bd10      	pop	{r4, pc}
 8002df8:	0802b14c 	.word	0x0802b14c

08002dfc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002dfc:	b510      	push	{r4, lr}
 8002dfe:	4604      	mov	r4, r0
 8002e00:	f7ff fff2 	bl	8002de8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002e04:	4620      	mov	r0, r4
 8002e06:	2118      	movs	r1, #24
 8002e08:	f026 f9f7 	bl	80291fa <_ZdlPvj>
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	bd10      	pop	{r4, pc}

08002e10 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002e10:	b510      	push	{r4, lr}
 8002e12:	4604      	mov	r4, r0
 8002e14:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <_ZN12FrontendHeapD1Ev+0x28>)
 8002e16:	6003      	str	r3, [r0, #0]
 8002e18:	f500 40c7 	add.w	r0, r0, #25472	; 0x6380
 8002e1c:	304c      	adds	r0, #76	; 0x4c
 8002e1e:	f7ff ffb9 	bl	8002d94 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002e22:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002e26:	f7ff ffc9 	bl	8002dbc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002e2a:	f104 0014 	add.w	r0, r4, #20
 8002e2e:	f7ff ffdb 	bl	8002de8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002e32:	4620      	mov	r0, r4
 8002e34:	bd10      	pop	{r4, pc}
 8002e36:	bf00      	nop
 8002e38:	0802b1e8 	.word	0x0802b1e8

08002e3c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002e3c:	b508      	push	{r3, lr}
 8002e3e:	4802      	ldr	r0, [pc, #8]	; (8002e48 <__tcf_0+0xc>)
 8002e40:	f7ff ffe6 	bl	8002e10 <_ZN12FrontendHeapD1Ev>
 8002e44:	bd08      	pop	{r3, pc}
 8002e46:	bf00      	nop
 8002e48:	201532ac 	.word	0x201532ac

08002e4c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002e4c:	b510      	push	{r4, lr}
 8002e4e:	4604      	mov	r4, r0
 8002e50:	f7ff ffde 	bl	8002e10 <_ZN12FrontendHeapD1Ev>
 8002e54:	4620      	mov	r0, r4
 8002e56:	f246 5140 	movw	r1, #25920	; 0x6540
 8002e5a:	f026 f9ce 	bl	80291fa <_ZdlPvj>
 8002e5e:	4620      	mov	r0, r4
 8002e60:	bd10      	pop	{r4, pc}
	...

08002e64 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 480);

void touchgfx_init()
{
 8002e64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002e68:	f000 fb14 	bl	8003494 <_ZN14BitmapDatabase11getInstanceEv>
 8002e6c:	2400      	movs	r4, #0
 8002e6e:	4605      	mov	r5, r0
 8002e70:	f000 fb14 	bl	800349c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002e74:	4623      	mov	r3, r4
 8002e76:	4601      	mov	r1, r0
 8002e78:	4622      	mov	r2, r4
 8002e7a:	4628      	mov	r0, r5
 8002e7c:	9400      	str	r4, [sp, #0]
 8002e7e:	f018 fad5 	bl	801b42c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002e82:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <touchgfx_init+0xbc>)
 8002e84:	4a27      	ldr	r2, [pc, #156]	; (8002f24 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002e86:	4620      	mov	r0, r4
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	f000 fe61 	bl	8003b50 <_ZN8touchgfx5Texts11setLanguageEt>

    display.setFrameBufferFormat(Bitmap::RGB888);
 8002e8e:	2101      	movs	r1, #1
 8002e90:	4825      	ldr	r0, [pc, #148]	; (8002f28 <touchgfx_init+0xc4>)
 8002e92:	f01f fa47 	bl	8022324 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE>

    FontManager::setFontProvider(&fontProvider);
 8002e96:	4825      	ldr	r0, [pc, #148]	; (8002f2c <touchgfx_init+0xc8>)
 8002e98:	f018 fa30 	bl	801b2fc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 8002e9c:	4d24      	ldr	r5, [pc, #144]	; (8002f30 <touchgfx_init+0xcc>)
 8002e9e:	e8d5 3f8f 	ldab	r3, [r5]
 8002ea2:	07db      	lsls	r3, r3, #31
 8002ea4:	d436      	bmi.n	8002f14 <touchgfx_init+0xb0>
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	f026 f9a9 	bl	80291fe <__cxa_guard_acquire>
 8002eac:	b390      	cbz	r0, 8002f14 <touchgfx_init+0xb0>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002eae:	4c21      	ldr	r4, [pc, #132]	; (8002f34 <touchgfx_init+0xd0>)
 8002eb0:	4f21      	ldr	r7, [pc, #132]	; (8002f38 <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002eb2:	4b22      	ldr	r3, [pc, #136]	; (8002f3c <touchgfx_init+0xd8>)
 8002eb4:	f107 0618 	add.w	r6, r7, #24
 8002eb8:	f104 0014 	add.w	r0, r4, #20
 8002ebc:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002ec0:	6023      	str	r3, [r4, #0]
 8002ec2:	6060      	str	r0, [r4, #4]
 8002ec4:	f8c4 8008 	str.w	r8, [r4, #8]
 8002ec8:	60e7      	str	r7, [r4, #12]
 8002eca:	6126      	str	r6, [r4, #16]
 8002ecc:	f013 fc5e 	bl	801678c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <touchgfx_init+0xdc>)
 8002ed2:	4640      	mov	r0, r8
 8002ed4:	6163      	str	r3, [r4, #20]
 8002ed6:	f013 fc59 	bl	801678c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <touchgfx_init+0xe0>)
 8002edc:	4638      	mov	r0, r7
 8002ede:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ee0:	f013 fc54 	bl	801678c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002ee4:	4a18      	ldr	r2, [pc, #96]	; (8002f48 <touchgfx_init+0xe4>)
 8002ee6:	f504 43c0 	add.w	r3, r4, #24576	; 0x6000
 8002eea:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8002eee:	f503 7078 	add.w	r0, r3, #992	; 0x3e0
 8002ef2:	f000 fe9b 	bl	8003c2c <_ZN5ModelC1Ev>
 8002ef6:	4622      	mov	r2, r4
 8002ef8:	f107 0114 	add.w	r1, r7, #20
 8002efc:	4630      	mov	r0, r6
 8002efe:	f000 fe8b 	bl	8003c18 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002f02:	4630      	mov	r0, r6
 8002f04:	f000 fc26 	bl	8003754 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002f08:	4810      	ldr	r0, [pc, #64]	; (8002f4c <touchgfx_init+0xe8>)
 8002f0a:	f026 f9c1 	bl	8029290 <atexit>
 8002f0e:	4628      	mov	r0, r5
 8002f10:	f026 f981 	bl	8029216 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002f14:	480e      	ldr	r0, [pc, #56]	; (8002f50 <touchgfx_init+0xec>)
}
 8002f16:	b002      	add	sp, #8
 8002f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002f1c:	f7ff bb44 	b.w	80025a8 <_ZN11TouchGFXHAL10initializeEv>
 8002f20:	20197a9c 	.word	0x20197a9c
 8002f24:	2015a644 	.word	0x2015a644
 8002f28:	2015a648 	.word	0x2015a648
 8002f2c:	20000008 	.word	0x20000008
 8002f30:	201532a8 	.word	0x201532a8
 8002f34:	201532ac 	.word	0x201532ac
 8002f38:	20159678 	.word	0x20159678
 8002f3c:	0802b1e8 	.word	0x0802b1e8
 8002f40:	0802b14c 	.word	0x0802b14c
 8002f44:	0802b180 	.word	0x0802b180
 8002f48:	0802b1b4 	.word	0x0802b1b4
 8002f4c:	08002e3d 	.word	0x08002e3d
 8002f50:	2015a590 	.word	0x2015a590

08002f54 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8002f54:	b508      	push	{r3, lr}
    nema_init();
 8002f56:	f018 fee3 	bl	801bd20 <nema_init>
    nema_vg_init(480, 480);
}
 8002f5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nema_vg_init(480, 480);
 8002f5e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002f62:	4608      	mov	r0, r1
 8002f64:	f019 bf9e 	b.w	801cea4 <nema_vg_init>

08002f68 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002f68:	4801      	ldr	r0, [pc, #4]	; (8002f70 <touchgfx_taskEntry+0x8>)
 8002f6a:	f013 bf1e 	b.w	8016daa <_ZN8touchgfx3HAL9taskEntryEv>
 8002f6e:	bf00      	nop
 8002f70:	2015a590 	.word	0x2015a590

08002f74 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
static STM32DMA dma;
 8002f76:	4911      	ldr	r1, [pc, #68]	; (8002fbc <_GLOBAL__sub_I_touchgfx_init+0x48>)
{
public:

    STM32TouchController() {}
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 8002f7a:	4d12      	ldr	r5, [pc, #72]	; (8002fc4 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 8002f7c:	4608      	mov	r0, r1
 8002f7e:	602b      	str	r3, [r5, #0]
 8002f80:	f7ff fda8 	bl	8002ad4 <_ZN8STM32DMAC1Ev>
static LCDGPU2D display;
 8002f84:	4a10      	ldr	r2, [pc, #64]	; (8002fc8 <_GLOBAL__sub_I_touchgfx_init+0x54>)
        touchgfx::HALGPU2D(dma, display, tc, width, height)
 8002f86:	4c11      	ldr	r4, [pc, #68]	; (8002fcc <_GLOBAL__sub_I_touchgfx_init+0x58>)
 8002f88:	4610      	mov	r0, r2
 8002f8a:	f01f f9bf 	bl	802230c <_ZN8touchgfx8LCDGPU2DC1Ev>
 8002f8e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002f92:	4620      	mov	r0, r4
 8002f94:	e9cd 3300 	strd	r3, r3, [sp]
 8002f98:	4a0b      	ldr	r2, [pc, #44]	; (8002fc8 <_GLOBAL__sub_I_touchgfx_init+0x54>)
 8002f9a:	462b      	mov	r3, r5
 8002f9c:	4907      	ldr	r1, [pc, #28]	; (8002fbc <_GLOBAL__sub_I_touchgfx_init+0x48>)
 8002f9e:	f01b f973 	bl	801e288 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <_GLOBAL__sub_I_touchgfx_init+0x5c>)
 8002fa4:	6023      	str	r3, [r4, #0]
          cc_in(0)
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8002fac:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <_GLOBAL__sub_I_touchgfx_init+0x60>)
 8002fb2:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
 8002fb6:	b003      	add	sp, #12
 8002fb8:	bd30      	pop	{r4, r5, pc}
 8002fba:	bf00      	nop
 8002fbc:	201597f0 	.word	0x201597f0
 8002fc0:	0802aa04 	.word	0x0802aa04
 8002fc4:	201597ec 	.word	0x201597ec
 8002fc8:	2015a648 	.word	0x2015a648
 8002fcc:	2015a590 	.word	0x2015a590
 8002fd0:	0802ab90 	.word	0x0802ab90
 8002fd4:	0802a924 	.word	0x0802a924

08002fd8 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002fd8:	4801      	ldr	r0, [pc, #4]	; (8002fe0 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002fda:	f7ff bd2f 	b.w	8002a3c <_ZN8STM32DMAD1Ev>
 8002fde:	bf00      	nop
 8002fe0:	201597f0 	.word	0x201597f0

08002fe4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe4:	2290      	movs	r2, #144	; 0x90
 8002fe6:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x14>)
 8002fe8:	f883 2376 	strb.w	r2, [r3, #886]	; 0x376
 8002fec:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
 8002ff0:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
    NVIC_SetPriority(GPU2D_IRQn, 9);
}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000e100 	.word	0xe000e100

08002ffc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(GPU2D_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002ffc:	4a09      	ldr	r2, [pc, #36]	; (8003024 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002ffe:	490a      	ldr	r1, [pc, #40]	; (8003028 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8003000:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003002:	480a      	ldr	r0, [pc, #40]	; (800302c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003004:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003008:	3b01      	subs	r3, #1
 800300a:	b29b      	uxth	r3, r3
 800300c:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800300e:	6911      	ldr	r1, [r2, #16]
 8003010:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8003014:	3901      	subs	r1, #1
 8003016:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8003018:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800301a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003022:	4770      	bx	lr
 8003024:	40016800 	.word	0x40016800
 8003028:	2015a658 	.word	0x2015a658
 800302c:	2015a656 	.word	0x2015a656

08003030 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HALGPU2D::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8003030:	4b01      	ldr	r3, [pc, #4]	; (8003038 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8003032:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8003036:	4770      	bx	lr
 8003038:	40016800 	.word	0x40016800

0800303c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800303c:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800303e:	4b02      	ldr	r3, [pc, #8]	; (8003048 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 8003040:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8003044:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003046:	4770      	bx	lr
 8003048:	40016800 	.word	0x40016800

0800304c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	4604      	mov	r4, r0
    HALGPU2D::initialize(8192);
 8003050:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003054:	f01b f980 	bl	801e358 <_ZN8touchgfx8HALGPU2D10initializeEi>
    registerEventListener(*(Application::getInstance()));
 8003058:	6823      	ldr	r3, [r4, #0]
 800305a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 800305c:	f015 fdb2 	bl	8018bc4 <_ZN8touchgfx11Application11getInstanceEv>
 8003060:	4601      	mov	r1, r0
 8003062:	4620      	mov	r0, r4
 8003064:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	4620      	mov	r0, r4
 800306a:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800306e:	4a03      	ldr	r2, [pc, #12]	; (800307c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 8003070:	46ac      	mov	ip, r5
}
 8003072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8003076:	2300      	movs	r3, #0
 8003078:	4901      	ldr	r1, [pc, #4]	; (8003080 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x34>)
 800307a:	4760      	bx	ip
 800307c:	200a8d2c 	.word	0x200a8d2c
 8003080:	2000012c 	.word	0x2000012c

08003084 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HALGPU2D::beginFrame();
 8003084:	f01b b8b0 	b.w	801e1e8 <_ZN8touchgfx8HALGPU2D10beginFrameEv>

08003088 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 8003088:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 800308c:	b113      	cbz	r3, 8003094 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 800308e:	2201      	movs	r2, #1
 8003090:	4b01      	ldr	r3, [pc, #4]	; (8003098 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 8003092:	701a      	strb	r2, [r3, #0]
    HALGPU2D::endFrame();
 8003094:	f01b b8ba 	b.w	801e20c <_ZN8touchgfx8HALGPU2D8endFrameEv>
 8003098:	2015a654 	.word	0x2015a654

0800309c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HALGPU2D::flushFrameBuffer(rect);
 800309c:	f013 be22 	b.w	8016ce4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080030a0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HALGPU2D::blockCopy(dest, src, numBytes);
 80030a0:	f013 bf8b 	b.w	8016fba <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080030a4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	460d      	mov	r5, r1
 80030a8:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80030aa:	b935      	cbnz	r5, 80030ba <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 80030ac:	f240 21d2 	movw	r1, #722	; 0x2d2
 80030b0:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80030b2:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80030b4:	4809      	ldr	r0, [pc, #36]	; (80030dc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80030b6:	f026 f8cd 	bl	8029254 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80030ba:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
    }
 80030be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80030c2:	3a00      	subs	r2, #0
 80030c4:	bf18      	it	ne
 80030c6:	2201      	movne	r2, #1
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 80030ca:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80030cc:	6803      	ldr	r3, [r0, #0]
 80030ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030d2:	4718      	bx	r3
 80030d4:	0802aaff 	.word	0x0802aaff
 80030d8:	0802ab37 	.word	0x0802ab37
 80030dc:	0802aaba 	.word	0x0802aaba
 80030e0:	20197a3e 	.word	0x20197a3e

080030e4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x30>)
 80030ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __ASM volatile ("dsb 0xF":::"memory");
 80030ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	2280      	movs	r2, #128	; 0x80
 80030f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __ASM volatile ("dsb 0xF":::"memory");
 80030fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	2210      	movs	r2, #16
 8003106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __ASM volatile ("dsb 0xF":::"memory");
 800310a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800310e:	f3bf 8f6f 	isb	sy
}
 8003112:	4770      	bx	lr
 8003114:	e000e100 	.word	0xe000e100

08003118 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003118:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800311c:	4b03      	ldr	r3, [pc, #12]	; (800312c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x14>)
 800311e:	60da      	str	r2, [r3, #12]
 8003120:	2280      	movs	r2, #128	; 0x80
 8003122:	611a      	str	r2, [r3, #16]
 8003124:	2210      	movs	r2, #16
 8003126:	611a      	str	r2, [r3, #16]
}
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	e000e100 	.word	0xe000e100

08003130 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003130:	b510      	push	{r4, lr}
        return instance;
 8003132:	4c14      	ldr	r4, [pc, #80]	; (8003184 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	b323      	cbz	r3, 8003182 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8003138:	4b13      	ldr	r3, [pc, #76]	; (8003188 <HAL_LTDC_LineEventCallback+0x58>)
 800313a:	4a14      	ldr	r2, [pc, #80]	; (800318c <HAL_LTDC_LineEventCallback+0x5c>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	8811      	ldrh	r1, [r2, #0]
 8003140:	428b      	cmp	r3, r1
 8003142:	d113      	bne.n	800316c <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003144:	4b12      	ldr	r3, [pc, #72]	; (8003190 <HAL_LTDC_LineEventCallback+0x60>)
 8003146:	8819      	ldrh	r1, [r3, #0]
 8003148:	f008 fcf4 	bl	800bb34 <HAL_LTDC_ProgramLineEvent>
 800314c:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 800314e:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8003152:	3301      	adds	r3, #1
 8003154:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8003158:	f7ff fc28 	bl	80029ac <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800315c:	6820      	ldr	r0, [r4, #0]
 800315e:	f014 fb71 	bl	8017844 <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8003162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8003166:	2000      	movs	r0, #0
 8003168:	f7ff b9aa 	b.w	80024c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800316c:	f008 fce2 	bl	800bb34 <HAL_LTDC_ProgramLineEvent>
        return instance;
 8003170:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8003172:	6803      	ldr	r3, [r0, #0]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	4798      	blx	r3
    }
 8003178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 800317c:	2000      	movs	r0, #0
 800317e:	f7ff b9bb 	b.w	80024f8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 8003182:	bd10      	pop	{r4, pc}
 8003184:	20197a40 	.word	0x20197a40
 8003188:	40016800 	.word	0x40016800
 800318c:	2015a658 	.word	0x2015a658
 8003190:	2015a656 	.word	0x2015a656

08003194 <HAL_GPU2D_CommandListCpltCallback>:
#if (USE_HAL_GPU2D_REGISTER_CALLBACKS == 1)
static void GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hgpu2d);

    last_cl_id = CmdListID;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <HAL_GPU2D_CommandListCpltCallback+0x20>)
 80031a2:	6013      	str	r3, [r2, #0]

    /* Return a token back to a semaphore */
    tx_semaphore_put(&nema_irq_sem);
 80031a4:	4804      	ldr	r0, [pc, #16]	; (80031b8 <HAL_GPU2D_CommandListCpltCallback+0x24>)
 80031a6:	f013 f9bd 	bl	8016524 <_txe_semaphore_put>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	2000000c 	.word	0x2000000c
 80031b8:	20196578 	.word	0x20196578

080031bc <nema_sys_init>:

int32_t nema_sys_init(void)
{
 80031bc:	b590      	push	{r4, r7, lr}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af02      	add	r7, sp, #8
    int error_code = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
    /* Register Command List Comlete Callback */
    HAL_GPU2D_RegisterCommandListCpltCallback(&hgpu2d, GPU2D_CommandListCpltCallback);
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Create IRQ semaphore */
    error_code = tx_semaphore_create(&nema_irq_sem, "nema sema irq", 0);
 80031c6:	231c      	movs	r3, #28
 80031c8:	2200      	movs	r2, #0
 80031ca:	4924      	ldr	r1, [pc, #144]	; (800325c <nema_sys_init+0xa0>)
 80031cc:	4824      	ldr	r0, [pc, #144]	; (8003260 <nema_sys_init+0xa4>)
 80031ce:	f013 f8d1 	bl	8016374 <_txe_semaphore_create>
 80031d2:	4603      	mov	r3, r0
 80031d4:	617b      	str	r3, [r7, #20]
    assert(error_code == TX_SUCCESS);
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <nema_sys_init+0x2c>
 80031dc:	4b21      	ldr	r3, [pc, #132]	; (8003264 <nema_sys_init+0xa8>)
 80031de:	4a22      	ldr	r2, [pc, #136]	; (8003268 <nema_sys_init+0xac>)
 80031e0:	2150      	movs	r1, #80	; 0x50
 80031e2:	4822      	ldr	r0, [pc, #136]	; (800326c <nema_sys_init+0xb0>)
 80031e4:	f026 f836 	bl	8029254 <__assert_func>

    /* Initialise Mem Space */
    error_code = tsi_malloc_init_pool(0, (void*)nemagfx_pool_mem, (uintptr_t)nemagfx_pool_mem, NEMAGFX_BYTE_POOL_SIZE, 1);
 80031e8:	4a21      	ldr	r2, [pc, #132]	; (8003270 <nema_sys_init+0xb4>)
 80031ea:	2301      	movs	r3, #1
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	4b21      	ldr	r3, [pc, #132]	; (8003274 <nema_sys_init+0xb8>)
 80031f0:	491f      	ldr	r1, [pc, #124]	; (8003270 <nema_sys_init+0xb4>)
 80031f2:	2000      	movs	r0, #0
 80031f4:	f019 ffdc 	bl	801d1b0 <tsi_malloc_init_pool>
 80031f8:	6178      	str	r0, [r7, #20]
    assert(error_code == 0);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <nema_sys_init+0x50>
 8003200:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <nema_sys_init+0xbc>)
 8003202:	4a19      	ldr	r2, [pc, #100]	; (8003268 <nema_sys_init+0xac>)
 8003204:	2154      	movs	r1, #84	; 0x54
 8003206:	4819      	ldr	r0, [pc, #100]	; (800326c <nema_sys_init+0xb0>)
 8003208:	f026 f824 	bl	8029254 <__assert_func>

    /* Allocate ring_buffer memory */
    ring_buffer_str.bo = nema_buffer_create(RING_SIZE);
 800320c:	4c1b      	ldr	r4, [pc, #108]	; (800327c <nema_sys_init+0xc0>)
 800320e:	463b      	mov	r3, r7
 8003210:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003214:	4618      	mov	r0, r3
 8003216:	f000 f891 	bl	800333c <nema_buffer_create>
 800321a:	463b      	mov	r3, r7
 800321c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800321e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    assert(ring_buffer_str.bo.base_virt);
 8003222:	4b16      	ldr	r3, [pc, #88]	; (800327c <nema_sys_init+0xc0>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <nema_sys_init+0x7a>
 800322a:	4b15      	ldr	r3, [pc, #84]	; (8003280 <nema_sys_init+0xc4>)
 800322c:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <nema_sys_init+0xac>)
 800322e:	2158      	movs	r1, #88	; 0x58
 8003230:	480e      	ldr	r0, [pc, #56]	; (800326c <nema_sys_init+0xb0>)
 8003232:	f026 f80f 	bl	8029254 <__assert_func>

    /* Initialize Ring Buffer */
    error_code = nema_rb_init(&ring_buffer_str, 1);
 8003236:	2101      	movs	r1, #1
 8003238:	4810      	ldr	r0, [pc, #64]	; (800327c <nema_sys_init+0xc0>)
 800323a:	f018 fb33 	bl	801b8a4 <nema_rb_init>
 800323e:	6178      	str	r0, [r7, #20]
    if (error_code < 0)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b00      	cmp	r3, #0
 8003244:	da01      	bge.n	800324a <nema_sys_init+0x8e>
    {
        return error_code;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	e003      	b.n	8003252 <nema_sys_init+0x96>
    }

    /* Reset last_cl_id counter */
    last_cl_id = 0;
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <nema_sys_init+0xc8>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

    return error_code;
 8003250:	697b      	ldr	r3, [r7, #20]
}
 8003252:	4618      	mov	r0, r3
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	bd90      	pop	{r4, r7, pc}
 800325a:	bf00      	nop
 800325c:	0802a7c8 	.word	0x0802a7c8
 8003260:	20196578 	.word	0x20196578
 8003264:	0802a7d8 	.word	0x0802a7d8
 8003268:	0802b1f4 	.word	0x0802b1f4
 800326c:	0802a7f4 	.word	0x0802a7f4
 8003270:	2015a660 	.word	0x2015a660
 8003274:	0003bf00 	.word	0x0003bf00
 8003278:	0802a840 	.word	0x0802a840
 800327c:	20196560 	.word	0x20196560
 8003280:	0802a850 	.word	0x0802a850
 8003284:	2000000c 	.word	0x2000000c

08003288 <nema_reg_read>:

uint32_t nema_reg_read(uint32_t reg)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
    return HAL_GPU2D_ReadRegister(&hgpu2d, reg);
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4804      	ldr	r0, [pc, #16]	; (80032a4 <nema_reg_read+0x1c>)
 8003294:	f007 f9f7 	bl	800a686 <HAL_GPU2D_ReadRegister>
 8003298:	4603      	mov	r3, r0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20152eb4 	.word	0x20152eb4

080032a8 <nema_reg_write>:

void nema_reg_write(uint32_t reg, uint32_t value)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
    HAL_GPU2D_WriteRegister(&hgpu2d, reg, value);
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4803      	ldr	r0, [pc, #12]	; (80032c4 <nema_reg_write+0x1c>)
 80032b8:	f007 f9f7 	bl	800a6aa <HAL_GPU2D_WriteRegister>
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20152eb4 	.word	0x20152eb4

080032c8 <nema_wait_irq>:

int nema_wait_irq(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
    /* Wait indefinitely for a free semaphore */
    tx_semaphore_get(&nema_irq_sem, TX_WAIT_FOREVER);
 80032cc:	f04f 31ff 	mov.w	r1, #4294967295
 80032d0:	4802      	ldr	r0, [pc, #8]	; (80032dc <nema_wait_irq+0x14>)
 80032d2:	f013 f8e5 	bl	80164a0 <_txe_semaphore_get>

    return 0;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20196578 	.word	0x20196578

080032e0 <nema_wait_irq_cl>:

int nema_wait_irq_cl(int cl_id)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
    while (last_cl_id < cl_id)
 80032e8:	e001      	b.n	80032ee <nema_wait_irq_cl+0xe>
    {
        (void)nema_wait_irq();
 80032ea:	f7ff ffed 	bl	80032c8 <nema_wait_irq>
    while (last_cl_id < cl_id)
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <nema_wait_irq_cl+0x24>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	dcf8      	bgt.n	80032ea <nema_wait_irq_cl+0xa>
    }

    return 0;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	2000000c 	.word	0x2000000c

08003308 <nema_host_free>:

    return 0;
}

void nema_host_free(void *ptr)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
    tsi_free(ptr);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f019 ffb5 	bl	801d280 <tsi_free>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <nema_host_malloc>:

void *nema_host_malloc(unsigned size)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
    return tsi_malloc(size);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4619      	mov	r1, r3
 800332a:	2000      	movs	r0, #0
 800332c:	f019 ff68 	bl	801d200 <tsi_malloc_pool>
 8003330:	4603      	mov	r3, r0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <nema_buffer_create>:

nema_buffer_t nema_buffer_create(int size)
{
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
    nema_buffer_t bo;
    memset(&bo, 0, sizeof(bo));
 8003346:	f107 0308 	add.w	r3, r7, #8
 800334a:	2210      	movs	r2, #16
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f025 fffe 	bl	8029350 <memset>
    bo.base_virt = tsi_malloc(size);
 8003354:	6839      	ldr	r1, [r7, #0]
 8003356:	2000      	movs	r0, #0
 8003358:	f019 ff52 	bl	801d200 <tsi_malloc_pool>
 800335c:	4603      	mov	r3, r0
 800335e:	613b      	str	r3, [r7, #16]
    bo.base_phys = (uint32_t)bo.base_virt;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	617b      	str	r3, [r7, #20]
    bo.size      = size;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	60bb      	str	r3, [r7, #8]
    assert(bo.base_virt != 0 && "Unable to allocate memory in nema_buffer_create");
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d105      	bne.n	800337a <nema_buffer_create+0x3e>
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <nema_buffer_create+0x54>)
 8003370:	4a08      	ldr	r2, [pc, #32]	; (8003394 <nema_buffer_create+0x58>)
 8003372:	219e      	movs	r1, #158	; 0x9e
 8003374:	4808      	ldr	r0, [pc, #32]	; (8003398 <nema_buffer_create+0x5c>)
 8003376:	f025 ff6d 	bl	8029254 <__assert_func>

    return bo;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	461c      	mov	r4, r3
 800337e:	f107 0308 	add.w	r3, r7, #8
 8003382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003384:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	bd90      	pop	{r4, r7, pc}
 8003390:	0802a870 	.word	0x0802a870
 8003394:	0802b204 	.word	0x0802b204
 8003398:	0802a7f4 	.word	0x0802a7f4

0800339c <nema_buffer_create_pool>:

nema_buffer_t nema_buffer_create_pool(int pool, int size)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(pool);

    return nema_buffer_create(size);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ffc5 	bl	800333c <nema_buffer_create>
}
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <nema_buffer_map>:

void *nema_buffer_map(nema_buffer_t *bo)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
    return bo->base_virt;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <nema_buffer_destroy>:
    /* Prevent unused argument(s) compilation warning */
    UNUSED(bo);
}

void nema_buffer_destroy(nema_buffer_t *bo)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
    if (bo->fd == -1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e2:	d012      	beq.n	800340a <nema_buffer_destroy+0x38>
    {
        return; /* Buffer weren't allocated! */
    }

    tsi_free(bo->base_virt);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f019 ff49 	bl	801d280 <tsi_free>

    bo->base_virt = (void *)0;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	609a      	str	r2, [r3, #8]
    bo->base_phys = 0;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	60da      	str	r2, [r3, #12]
    bo->size      = 0;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
    bo->fd        = -1; /* Buffer not allocated */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f04f 32ff 	mov.w	r2, #4294967295
 8003406:	605a      	str	r2, [r3, #4]
 8003408:	e000      	b.n	800340c <nema_buffer_destroy+0x3a>
        return; /* Buffer weren't allocated! */
 800340a:	bf00      	nop
}
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <nema_buffer_flush>:
{
    return bo->base_phys;
}

void nema_buffer_flush(nema_buffer_t * bo)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(bo);
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <nema_mutex_lock>:

int nema_mutex_lock(int mutex_id)
{
 8003426:	b480      	push	{r7}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
    int retval = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
/* USER CODE BEGIN nema_mutex_lock */
    /* Prevent unused argument(s) compilation warning */
    UNUSED(mutex_id);
/* USER CODE END nema_mutex_lock */

    return retval;
 8003432:	68fb      	ldr	r3, [r7, #12]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <nema_mutex_unlock>:

int nema_mutex_unlock(int mutex_id)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
    int retval = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
/* USER CODE BEGIN nema_mutex_unlock */
    /* Prevent unused argument(s) compilation warning */
    UNUSED(mutex_id);
/* USER CODE END nema_mutex_unlock */

    return retval;
 800344c:	68fb      	ldr	r3, [r7, #12]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800345a:	4770      	bx	lr

0800345c <_ZN23ApplicationFontProviderD0Ev>:
 800345c:	b510      	push	{r4, lr}
 800345e:	4604      	mov	r4, r0
 8003460:	2104      	movs	r1, #4
 8003462:	f025 feca 	bl	80291fa <_ZdlPvj>
 8003466:	4620      	mov	r0, r4
 8003468:	bd10      	pop	{r4, pc}

0800346a <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 800346a:	2901      	cmp	r1, #1
{
 800346c:	b508      	push	{r3, lr}
    switch (typography)
 800346e:	d006      	beq.n	800347e <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8003470:	2902      	cmp	r1, #2
 8003472:	d008      	beq.n	8003486 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8003474:	b959      	cbnz	r1, 800348e <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003476:	f000 fba9 	bl	8003bcc <_ZN17TypedTextDatabase8getFontsEv>
 800347a:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 800347c:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800347e:	f000 fba5 	bl	8003bcc <_ZN17TypedTextDatabase8getFontsEv>
 8003482:	6840      	ldr	r0, [r0, #4]
 8003484:	e7fa      	b.n	800347c <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003486:	f000 fba1 	bl	8003bcc <_ZN17TypedTextDatabase8getFontsEv>
 800348a:	6880      	ldr	r0, [r0, #8]
 800348c:	e7f6      	b.n	800347c <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 800348e:	2000      	movs	r0, #0
 8003490:	e7f4      	b.n	800347c <_ZN23ApplicationFontProvider7getFontEt+0x12>
	...

08003494 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003494:	4800      	ldr	r0, [pc, #0]	; (8003498 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003496:	4770      	bx	lr
 8003498:	0802b22c 	.word	0x0802b22c

0800349c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800349c:	2001      	movs	r0, #1
 800349e:	4770      	bx	lr

080034a0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80034a0:	b513      	push	{r0, r1, r4, lr}
 80034a2:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80034a4:	b151      	cbz	r1, 80034bc <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80034a6:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 80034a8:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80034aa:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80034ae:	aa01      	add	r2, sp, #4
 80034b0:	689c      	ldr	r4, [r3, #8]
 80034b2:	f10d 0303 	add.w	r3, sp, #3
 80034b6:	47a0      	blx	r4
        return glyph;
    }
 80034b8:	b002      	add	sp, #8
 80034ba:	bd10      	pop	{r4, pc}
            return 0;
 80034bc:	4608      	mov	r0, r1
 80034be:	e7fb      	b.n	80034b8 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080034c0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80034c0:	89c0      	ldrh	r0, [r0, #14]
 80034c2:	4770      	bx	lr

080034c4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80034c4:	8a00      	ldrh	r0, [r0, #16]
 80034c6:	4770      	bx	lr

080034c8 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 80034c8:	88c0      	ldrh	r0, [r0, #6]
 80034ca:	4770      	bx	lr

080034cc <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 80034cc:	8880      	ldrh	r0, [r0, #4]
 80034ce:	4770      	bx	lr

080034d0 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80034d0:	7a80      	ldrb	r0, [r0, #10]
    }
 80034d2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80034d6:	4770      	bx	lr

080034d8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80034d8:	7a80      	ldrb	r0, [r0, #10]
    }
 80034da:	09c0      	lsrs	r0, r0, #7
 80034dc:	4770      	bx	lr

080034de <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80034de:	4770      	bx	lr

080034e0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80034e0:	4770      	bx	lr

080034e2 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80034e2:	f500 7398 	add.w	r3, r0, #304	; 0x130
 80034e6:	6808      	ldr	r0, [r1, #0]
 80034e8:	6849      	ldr	r1, [r1, #4]
 80034ea:	c303      	stmia	r3!, {r0, r1}
    }
 80034ec:	4770      	bx	lr

080034ee <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80034ee:	4770      	bx	lr

080034f0 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80034f0:	4770      	bx	lr

080034f2 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80034f2:	6041      	str	r1, [r0, #4]
    }
 80034f4:	4770      	bx	lr

080034f6 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80034f6:	4770      	bx	lr

080034f8 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80034fa:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 80034fe:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8003502:	2300      	movs	r3, #0
 8003504:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003508:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 800350c:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	080035b9 	.word	0x080035b9

08003518 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003518:	2301      	movs	r3, #1
 800351a:	7203      	strb	r3, [r0, #8]
    }
 800351c:	4770      	bx	lr

0800351e <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800351e:	4770      	bx	lr

08003520 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003520:	4770      	bx	lr

08003522 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003522:	4603      	mov	r3, r0
 8003524:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003526:	6841      	ldr	r1, [r0, #4]
 8003528:	68c2      	ldr	r2, [r0, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	1054      	asrs	r4, r2, #1
 800352e:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003532:	07d2      	lsls	r2, r2, #31
 8003534:	bf48      	it	mi
 8003536:	590a      	ldrmi	r2, [r1, r4]
    }
 8003538:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 800353c:	bf48      	it	mi
 800353e:	58d3      	ldrmi	r3, [r2, r3]
 8003540:	4718      	bx	r3

08003542 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8003542:	6843      	ldr	r3, [r0, #4]
 8003544:	b12b      	cbz	r3, 8003552 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8003546:	6883      	ldr	r3, [r0, #8]
 8003548:	b92b      	cbnz	r3, 8003556 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800354a:	68c0      	ldr	r0, [r0, #12]
 800354c:	f000 0001 	and.w	r0, r0, #1
 8003550:	4770      	bx	lr
 8003552:	4618      	mov	r0, r3
 8003554:	4770      	bx	lr
 8003556:	2001      	movs	r0, #1
    }
 8003558:	4770      	bx	lr

0800355a <_ZN8touchgfx12NoTransitionD0Ev>:
 800355a:	b510      	push	{r4, lr}
 800355c:	4604      	mov	r4, r0
 800355e:	210c      	movs	r1, #12
 8003560:	f025 fe4b 	bl	80291fa <_ZdlPvj>
 8003564:	4620      	mov	r0, r4
 8003566:	bd10      	pop	{r4, pc}

08003568 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003568:	b510      	push	{r4, lr}
 800356a:	4604      	mov	r4, r0
 800356c:	2110      	movs	r1, #16
 800356e:	f025 fe44 	bl	80291fa <_ZdlPvj>
 8003572:	4620      	mov	r0, r4
 8003574:	bd10      	pop	{r4, pc}

08003576 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003576:	b510      	push	{r4, lr}
 8003578:	4604      	mov	r4, r0
 800357a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800357e:	f025 fe3c 	bl	80291fa <_ZdlPvj>
 8003582:	4620      	mov	r0, r4
 8003584:	bd10      	pop	{r4, pc}

08003586 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003586:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8003588:	f015 fb1c 	bl	8018bc4 <_ZN8touchgfx11Application11getInstanceEv>
    }
 800358c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8003590:	f015 bf60 	b.w	8019454 <_ZN8touchgfx11Application10invalidateEv>

08003594 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003594:	b510      	push	{r4, lr}
 8003596:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003598:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 800359c:	b158      	cbz	r0, 80035b6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 800359e:	6803      	ldr	r3, [r0, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	4798      	blx	r3
 80035a4:	b138      	cbz	r0, 80035b6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80035a6:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 80035aa:	6803      	ldr	r3, [r0, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 80035b6:	bd10      	pop	{r4, pc}

080035b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80035b8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80035bc:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 80035c0:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80035c2:	68a8      	ldr	r0, [r5, #8]
 80035c4:	6803      	ldr	r3, [r0, #0]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	4798      	blx	r3
 80035ca:	f246 3397 	movw	r3, #25495	; 0x6397
 80035ce:	4298      	cmp	r0, r3
 80035d0:	d805      	bhi.n	80035de <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 80035d2:	21a3      	movs	r1, #163	; 0xa3
 80035d4:	4b45      	ldr	r3, [pc, #276]	; (80036ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 80035d6:	4a46      	ldr	r2, [pc, #280]	; (80036f0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80035d8:	4846      	ldr	r0, [pc, #280]	; (80036f4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 80035da:	f025 fe3b 	bl	8029254 <__assert_func>
 80035de:	6868      	ldr	r0, [r5, #4]
 80035e0:	6803      	ldr	r3, [r0, #0]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	4798      	blx	r3
 80035e6:	280f      	cmp	r0, #15
 80035e8:	d803      	bhi.n	80035f2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 80035ea:	21a4      	movs	r1, #164	; 0xa4
 80035ec:	4b42      	ldr	r3, [pc, #264]	; (80036f8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 80035ee:	4a40      	ldr	r2, [pc, #256]	; (80036f0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 80035f0:	e7f2      	b.n	80035d8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80035f2:	68e8      	ldr	r0, [r5, #12]
 80035f4:	6803      	ldr	r3, [r0, #0]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4798      	blx	r3
 80035fa:	280b      	cmp	r0, #11
 80035fc:	d803      	bhi.n	8003606 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 80035fe:	21a5      	movs	r1, #165	; 0xa5
 8003600:	4b3e      	ldr	r3, [pc, #248]	; (80036fc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 8003602:	4a3b      	ldr	r2, [pc, #236]	; (80036f0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003604:	e7e8      	b.n	80035d8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 8003606:	f015 fadd 	bl	8018bc4 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 800360a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8003704 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 800360e:	3004      	adds	r0, #4
 8003610:	f015 fafd 	bl	8018c0e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8003614:	f8d9 0000 	ldr.w	r0, [r9]
 8003618:	b110      	cbz	r0, 8003620 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 800361a:	6803      	ldr	r3, [r0, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	4798      	blx	r3
    if (*currentTrans)
 8003620:	f8d9 0000 	ldr.w	r0, [r9]
 8003624:	b110      	cbz	r0, 800362c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8003626:	6803      	ldr	r3, [r0, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4798      	blx	r3
    if (*currentScreen)
 800362c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8003708 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x150>
 8003630:	f8d8 0000 	ldr.w	r0, [r8]
 8003634:	b110      	cbz	r0, 800363c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8003636:	6803      	ldr	r3, [r0, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	4798      	blx	r3
    if (*currentPresenter)
 800363c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8003640:	b110      	cbz	r0, 8003648 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8003642:	6803      	ldr	r3, [r0, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4798      	blx	r3
    if (*currentScreen)
 8003648:	f8d8 0000 	ldr.w	r0, [r8]
 800364c:	b110      	cbz	r0, 8003654 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 800364e:	6803      	ldr	r3, [r0, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4798      	blx	r3
    if (*currentPresenter)
 8003654:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8003658:	b110      	cbz	r0, 8003660 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 800365a:	6803      	ldr	r3, [r0, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003660:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003662:	2100      	movs	r1, #0
 8003664:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
 8003666:	f04f 0b00 	mov.w	fp, #0
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	4798      	blx	r3
 800366e:	4b24      	ldr	r3, [pc, #144]	; (8003700 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>)
 8003670:	4604      	mov	r4, r0
 8003672:	6003      	str	r3, [r0, #0]
 8003674:	f8c0 b004 	str.w	fp, [r0, #4]
 8003678:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800367c:	68a8      	ldr	r0, [r5, #8]
 800367e:	4659      	mov	r1, fp
 8003680:	6803      	ldr	r3, [r0, #0]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	4798      	blx	r3
 8003686:	4606      	mov	r6, r0
 8003688:	f000 fbd8 	bl	8003e3c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800368c:	6868      	ldr	r0, [r5, #4]
 800368e:	4659      	mov	r1, fp
 8003690:	6803      	ldr	r3, [r0, #0]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	4798      	blx	r3
 8003696:	4605      	mov	r5, r0
 8003698:	4631      	mov	r1, r6
 800369a:	f000 fad9 	bl	8003c50 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 800369e:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80036a2:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 80036a6:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 80036aa:	b1e5      	cbz	r5, 80036e6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
 80036ac:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80036ae:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80036b2:	6833      	ldr	r3, [r6, #0]
 80036b4:	4630      	mov	r0, r6
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80036b6:	f8c5 a008 	str.w	sl, [r5, #8]
 80036ba:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 80036bc:	63f5      	str	r5, [r6, #60]	; 0x3c
 80036be:	4798      	blx	r3
    newPresenter->activate();
 80036c0:	682b      	ldr	r3, [r5, #0]
 80036c2:	4628      	mov	r0, r5
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80036c8:	4621      	mov	r1, r4
 80036ca:	4630      	mov	r0, r6
 80036cc:	f016 ff12 	bl	801a4f4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	4620      	mov	r0, r4
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	4798      	blx	r3
    newTransition->invalidate();
 80036d8:	4620      	mov	r0, r4
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
}
 80036de:	b001      	add	sp, #4
 80036e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e4:	4718      	bx	r3
    model->bind(newPresenter);
 80036e6:	462b      	mov	r3, r5
 80036e8:	e7e1      	b.n	80036ae <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf6>
 80036ea:	bf00      	nop
 80036ec:	0802b240 	.word	0x0802b240
 80036f0:	0802b2ce 	.word	0x0802b2ce
 80036f4:	0802b3d2 	.word	0x0802b3d2
 80036f8:	0802b419 	.word	0x0802b419
 80036fc:	0802b4bc 	.word	0x0802b4bc
 8003700:	0802b5cc 	.word	0x0802b5cc
 8003704:	20197a80 	.word	0x20197a80
 8003708:	20197a7c 	.word	0x20197a7c

0800370c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800370c:	b570      	push	{r4, r5, r6, lr}
 800370e:	4604      	mov	r4, r0
 8003710:	460d      	mov	r5, r1
 8003712:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 8003714:	f015 fb18 	bl	8018d48 <_ZN8touchgfx11ApplicationC1Ev>
 8003718:	2100      	movs	r1, #0
        instance = this;
 800371a:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x38>)
        : pobject(0), pmemfun(0)
 800371c:	e9c4 1153 	strd	r1, r1, [r4, #332]	; 0x14c
 8003720:	601c      	str	r4, [r3, #0]
      model(m)
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x3c>)
          pendingScreenTransitionCallback(0)
 8003724:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
 8003728:	6023      	str	r3, [r4, #0]
 800372a:	4b08      	ldr	r3, [pc, #32]	; (800374c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x40>)
 800372c:	e9c4 6555 	strd	r6, r5, [r4, #340]	; 0x154
 8003730:	e9c4 3151 	strd	r3, r1, [r4, #324]	; 0x144
        return instance;
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x44>)
 8003736:	6818      	ldr	r0, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003738:	6803      	ldr	r3, [r0, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4798      	blx	r3
}
 800373e:	4620      	mov	r0, r4
 8003740:	bd70      	pop	{r4, r5, r6, pc}
 8003742:	bf00      	nop
 8003744:	20197a8c 	.word	0x20197a8c
 8003748:	0802b580 	.word	0x0802b580
 800374c:	0802b568 	.word	0x0802b568
 8003750:	20197a40 	.word	0x20197a40

08003754 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8003756:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 800375a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 800375e:	2300      	movs	r3, #0
 8003760:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003764:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8003768:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	080035b9 	.word	0x080035b9

08003774 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003774:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003776:	4770      	bx	lr

08003778 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003778:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800377a:	4770      	bx	lr

0800377c <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 800377c:	4770      	bx	lr

0800377e <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800377e:	888b      	ldrh	r3, [r1, #4]
 8003780:	69c0      	ldr	r0, [r0, #28]
 8003782:	0adb      	lsrs	r3, r3, #11
 8003784:	680a      	ldr	r2, [r1, #0]
 8003786:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 800378a:	4410      	add	r0, r2
 800378c:	4770      	bx	lr

0800378e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800378e:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8003790:	b1c2      	cbz	r2, 80037c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003792:	7b13      	ldrb	r3, [r2, #12]
 8003794:	b1b3      	cbz	r3, 80037c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003796:	7b54      	ldrb	r4, [r2, #13]
 8003798:	7ad2      	ldrb	r2, [r2, #11]
 800379a:	0224      	lsls	r4, r4, #8
 800379c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80037a0:	4314      	orrs	r4, r2
 80037a2:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80037a4:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80037a6:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 80037aa:	8813      	ldrh	r3, [r2, #0]
 80037ac:	428b      	cmp	r3, r1
 80037ae:	d102      	bne.n	80037b6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80037b0:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 80037b4:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80037b6:	d805      	bhi.n	80037c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80037b8:	3801      	subs	r0, #1
 80037ba:	b280      	uxth	r0, r0
 80037bc:	3204      	adds	r2, #4
 80037be:	2800      	cmp	r0, #0
 80037c0:	d1f3      	bne.n	80037aa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80037c2:	e7f7      	b.n	80037b4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80037c4:	2000      	movs	r0, #0
 80037c6:	e7f5      	b.n	80037b4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080037c8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80037c8:	b510      	push	{r4, lr}
 80037ca:	4604      	mov	r4, r0
 80037cc:	212c      	movs	r1, #44	; 0x2c
 80037ce:	f025 fd14 	bl	80291fa <_ZdlPvj>
 80037d2:	4620      	mov	r0, r4
 80037d4:	bd10      	pop	{r4, pc}
	...

080037d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80037d8:	b530      	push	{r4, r5, lr}
 80037da:	4604      	mov	r4, r0
 80037dc:	b08b      	sub	sp, #44	; 0x2c
      arabicTable(formsTable)
 80037de:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 80037e2:	9508      	str	r5, [sp, #32]
 80037e4:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 80037e8:	9507      	str	r5, [sp, #28]
 80037ea:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80037ee:	9506      	str	r5, [sp, #24]
 80037f0:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 80037f4:	9505      	str	r5, [sp, #20]
 80037f6:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80037fa:	9504      	str	r5, [sp, #16]
 80037fc:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8003800:	9503      	str	r5, [sp, #12]
 8003802:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8003806:	9502      	str	r5, [sp, #8]
 8003808:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 800380c:	9501      	str	r5, [sp, #4]
 800380e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8003812:	9500      	str	r5, [sp, #0]
 8003814:	f016 fac8 	bl	8019da8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
}
 8003818:	4620      	mov	r0, r4
      arabicTable(formsTable)
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 800381c:	6023      	str	r3, [r4, #0]
 800381e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003820:	61e3      	str	r3, [r4, #28]
 8003822:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003824:	6223      	str	r3, [r4, #32]
 8003826:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003828:	6263      	str	r3, [r4, #36]	; 0x24
 800382a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800382c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800382e:	b00b      	add	sp, #44	; 0x2c
 8003830:	bd30      	pop	{r4, r5, pc}
 8003832:	bf00      	nop
 8003834:	0802b5f0 	.word	0x0802b5f0

08003838 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003838:	2000      	movs	r0, #0
 800383a:	4770      	bx	lr

0800383c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800383c:	8081      	strh	r1, [r0, #4]
    }
 800383e:	4770      	bx	lr

08003840 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003840:	80c1      	strh	r1, [r0, #6]
    }
 8003842:	4770      	bx	lr

08003844 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003844:	8101      	strh	r1, [r0, #8]
    }
 8003846:	4770      	bx	lr

08003848 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003848:	8141      	strh	r1, [r0, #10]
    }
 800384a:	4770      	bx	lr

0800384c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800384c:	4770      	bx	lr

0800384e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800384e:	4770      	bx	lr

08003850 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003850:	4770      	bx	lr

08003852 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003852:	4770      	bx	lr

08003854 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003854:	4770      	bx	lr

08003856 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003856:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003858:	88c4      	ldrh	r4, [r0, #6]
 800385a:	6803      	ldr	r3, [r0, #0]
 800385c:	1b12      	subs	r2, r2, r4
 800385e:	8884      	ldrh	r4, [r0, #4]
 8003860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003862:	1b09      	subs	r1, r1, r4
 8003864:	b212      	sxth	r2, r2
    }
 8003866:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800386a:	b209      	sxth	r1, r1
 800386c:	4718      	bx	r3

0800386e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800386e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003872:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003874:	f04f 33ff 	mov.w	r3, #4294967295
 8003878:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800387a:	6813      	ldr	r3, [r2, #0]
 800387c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800387e:	6010      	str	r0, [r2, #0]
    }
 8003880:	4770      	bx	lr

08003882 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003882:	4770      	bx	lr

08003884 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003884:	4770      	bx	lr

08003886 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003886:	4770      	bx	lr

08003888 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003888:	4770      	bx	lr

0800388a <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 800388a:	4770      	bx	lr

0800388c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800388c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003890:	b11a      	cbz	r2, 800389a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003892:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8003896:	b102      	cbz	r2, 800389a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003898:	6018      	str	r0, [r3, #0]
        }
    }
 800389a:	4770      	bx	lr

0800389c <_ZN15Screen1ViewBase9tick_funcEv>:
     * Virtual Action Handlers
     */
    virtual void tick_func()
    {
        // Override and implement this function in Screen1
    }
 800389c:	4770      	bx	lr

0800389e <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 800389e:	4770      	bx	lr

080038a0 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 80038a0:	4770      	bx	lr

080038a2 <_ZN15Screen1ViewBase15handleTickEventEv>:
void Screen1ViewBase::handleTickEvent()
{
    //tick_func
    //When every N tick call virtual function
    //Call tick_func
    tick_func();
 80038a2:	6803      	ldr	r3, [r0, #0]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	4718      	bx	r3

080038a8 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80038a8:	b510      	push	{r4, lr}
 80038aa:	4604      	mov	r4, r0
}
 80038ac:	216c      	movs	r1, #108	; 0x6c
 80038ae:	f025 fca4 	bl	80291fa <_ZdlPvj>
 80038b2:	4620      	mov	r0, r4
 80038b4:	bd10      	pop	{r4, pc}

080038b6 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80038b6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80038ba:	b112      	cbz	r2, 80038c2 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80038bc:	6803      	ldr	r3, [r0, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	4718      	bx	r3
    }
 80038c2:	4770      	bx	lr

080038c4 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 80038c4:	b538      	push	{r3, r4, r5, lr}
 80038c6:	4604      	mov	r4, r0
        : presenter(0)
 80038c8:	f016 fc68 	bl	801a19c <_ZN8touchgfx6ScreenC1Ev>
 80038cc:	4625      	mov	r5, r4
 80038ce:	2300      	movs	r3, #0
 80038d0:	4a14      	ldr	r2, [pc, #80]	; (8003924 <_ZN15Screen1ViewBaseC1Ev+0x60>)
 80038d2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80038d4:	f845 2b40 	str.w	r2, [r5], #64
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80038d8:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 80038dc:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
          visible(true)
 80038e0:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 80038e4:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
        : color(col)
 80038e8:	66a3      	str	r3, [r4, #104]	; 0x68
 80038ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038ee:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80038f2:	23ff      	movs	r3, #255	; 0xff
 80038f4:	4a0c      	ldr	r2, [pc, #48]	; (8003928 <_ZN15Screen1ViewBaseC1Ev+0x64>)
 80038f6:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 80038fa:	6422      	str	r2, [r4, #64]	; 0x40
        setWidth(width);
 80038fc:	4628      	mov	r0, r5
 80038fe:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003902:	f7ff ff9f 	bl	8003844 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8003906:	4628      	mov	r0, r5
 8003908:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800390c:	f7ff ff9c 	bl	8003848 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003910:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003914:	1d20      	adds	r0, r4, #4
 8003916:	4629      	mov	r1, r5
 8003918:	66a3      	str	r3, [r4, #104]	; 0x68
 800391a:	f012 ff4b 	bl	80167b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800391e:	4620      	mov	r0, r4
 8003920:	bd38      	pop	{r3, r4, r5, pc}
 8003922:	bf00      	nop
 8003924:	0802b650 	.word	0x0802b650
 8003928:	0802bb8c 	.word	0x0802bb8c

0800392c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800392c:	4770      	bx	lr
	...

08003930 <_Z23getFont_verdana_10_4bppv>:
{
 8003930:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003932:	4d15      	ldr	r5, [pc, #84]	; (8003988 <_Z23getFont_verdana_10_4bppv+0x58>)
{
 8003934:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003936:	e8d5 4f8f 	ldab	r4, [r5]
 800393a:	f014 0401 	ands.w	r4, r4, #1
 800393e:	d120      	bne.n	8003982 <_Z23getFont_verdana_10_4bppv+0x52>
 8003940:	4628      	mov	r0, r5
 8003942:	f025 fc5c 	bl	80291fe <__cxa_guard_acquire>
 8003946:	b1e0      	cbz	r0, 8003982 <_Z23getFont_verdana_10_4bppv+0x52>
 8003948:	233f      	movs	r3, #63	; 0x3f
 800394a:	9309      	str	r3, [sp, #36]	; 0x24
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <_Z23getFont_verdana_10_4bppv+0x5c>)
 800394e:	2201      	movs	r2, #1
 8003950:	9308      	str	r3, [sp, #32]
 8003952:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003954:	490f      	ldr	r1, [pc, #60]	; (8003994 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003956:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800395a:	2304      	movs	r3, #4
 800395c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003960:	230a      	movs	r3, #10
 8003962:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800396c:	480a      	ldr	r0, [pc, #40]	; (8003998 <_Z23getFont_verdana_10_4bppv+0x68>)
 800396e:	940a      	str	r4, [sp, #40]	; 0x28
 8003970:	9405      	str	r4, [sp, #20]
 8003972:	f7ff ff31 	bl	80037d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003976:	4809      	ldr	r0, [pc, #36]	; (800399c <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003978:	f025 fc8a 	bl	8029290 <atexit>
 800397c:	4628      	mov	r0, r5
 800397e:	f025 fc4a 	bl	8029216 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8003982:	4805      	ldr	r0, [pc, #20]	; (8003998 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003984:	b00f      	add	sp, #60	; 0x3c
 8003986:	bd30      	pop	{r4, r5, pc}
 8003988:	20196594 	.word	0x20196594
 800398c:	0802d57c 	.word	0x0802d57c
 8003990:	0802d588 	.word	0x0802d588
 8003994:	90000178 	.word	0x90000178
 8003998:	20196598 	.word	0x20196598
 800399c:	0800392d 	.word	0x0800392d

080039a0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80039a0:	4770      	bx	lr
	...

080039a4 <_Z23getFont_verdana_20_4bppv>:
{
 80039a4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80039a6:	4d15      	ldr	r5, [pc, #84]	; (80039fc <_Z23getFont_verdana_20_4bppv+0x58>)
{
 80039a8:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80039aa:	e8d5 4f8f 	ldab	r4, [r5]
 80039ae:	f014 0401 	ands.w	r4, r4, #1
 80039b2:	d120      	bne.n	80039f6 <_Z23getFont_verdana_20_4bppv+0x52>
 80039b4:	4628      	mov	r0, r5
 80039b6:	f025 fc22 	bl	80291fe <__cxa_guard_acquire>
 80039ba:	b1e0      	cbz	r0, 80039f6 <_Z23getFont_verdana_20_4bppv+0x52>
 80039bc:	233f      	movs	r3, #63	; 0x3f
 80039be:	9309      	str	r3, [sp, #36]	; 0x24
 80039c0:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <_Z23getFont_verdana_20_4bppv+0x5c>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	9308      	str	r3, [sp, #32]
 80039c6:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <_Z23getFont_verdana_20_4bppv+0x60>)
 80039c8:	490f      	ldr	r1, [pc, #60]	; (8003a08 <_Z23getFont_verdana_20_4bppv+0x64>)
 80039ca:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80039ce:	2304      	movs	r3, #4
 80039d0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80039d4:	2314      	movs	r3, #20
 80039d6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80039e0:	480a      	ldr	r0, [pc, #40]	; (8003a0c <_Z23getFont_verdana_20_4bppv+0x68>)
 80039e2:	940a      	str	r4, [sp, #40]	; 0x28
 80039e4:	9405      	str	r4, [sp, #20]
 80039e6:	f7ff fef7 	bl	80037d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80039ea:	4809      	ldr	r0, [pc, #36]	; (8003a10 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80039ec:	f025 fc50 	bl	8029290 <atexit>
 80039f0:	4628      	mov	r0, r5
 80039f2:	f025 fc10 	bl	8029216 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 80039f6:	4805      	ldr	r0, [pc, #20]	; (8003a0c <_Z23getFont_verdana_20_4bppv+0x68>)
 80039f8:	b00f      	add	sp, #60	; 0x3c
 80039fa:	bd30      	pop	{r4, r5, pc}
 80039fc:	201965c4 	.word	0x201965c4
 8003a00:	0802d580 	.word	0x0802d580
 8003a04:	0802d58c 	.word	0x0802d58c
 8003a08:	90000188 	.word	0x90000188
 8003a0c:	201965c8 	.word	0x201965c8
 8003a10:	080039a1 	.word	0x080039a1

08003a14 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003a14:	4770      	bx	lr
	...

08003a18 <_Z23getFont_verdana_40_4bppv>:
{
 8003a18:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003a1a:	4d15      	ldr	r5, [pc, #84]	; (8003a70 <_Z23getFont_verdana_40_4bppv+0x58>)
{
 8003a1c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003a1e:	e8d5 4f8f 	ldab	r4, [r5]
 8003a22:	f014 0401 	ands.w	r4, r4, #1
 8003a26:	d120      	bne.n	8003a6a <_Z23getFont_verdana_40_4bppv+0x52>
 8003a28:	4628      	mov	r0, r5
 8003a2a:	f025 fbe8 	bl	80291fe <__cxa_guard_acquire>
 8003a2e:	b1e0      	cbz	r0, 8003a6a <_Z23getFont_verdana_40_4bppv+0x52>
 8003a30:	233f      	movs	r3, #63	; 0x3f
 8003a32:	9309      	str	r3, [sp, #36]	; 0x24
 8003a34:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	9308      	str	r3, [sp, #32]
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003a3c:	490f      	ldr	r1, [pc, #60]	; (8003a7c <_Z23getFont_verdana_40_4bppv+0x64>)
 8003a3e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003a42:	2304      	movs	r3, #4
 8003a44:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003a48:	2328      	movs	r3, #40	; 0x28
 8003a4a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003a54:	480a      	ldr	r0, [pc, #40]	; (8003a80 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003a56:	940a      	str	r4, [sp, #40]	; 0x28
 8003a58:	9405      	str	r4, [sp, #20]
 8003a5a:	f7ff febd 	bl	80037d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003a5e:	4809      	ldr	r0, [pc, #36]	; (8003a84 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003a60:	f025 fc16 	bl	8029290 <atexit>
 8003a64:	4628      	mov	r0, r5
 8003a66:	f025 fbd6 	bl	8029216 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8003a6a:	4805      	ldr	r0, [pc, #20]	; (8003a80 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003a6c:	b00f      	add	sp, #60	; 0x3c
 8003a6e:	bd30      	pop	{r4, r5, pc}
 8003a70:	201965f4 	.word	0x201965f4
 8003a74:	0802d584 	.word	0x0802d584
 8003a78:	0802d590 	.word	0x0802d590
 8003a7c:	90000198 	.word	0x90000198
 8003a80:	201965f8 	.word	0x201965f8
 8003a84:	08003a15 	.word	0x08003a15

08003a88 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8003a88:	2000      	movs	r0, #0
 8003a8a:	4770      	bx	lr

08003a8c <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	4770      	bx	lr

08003a90 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003a90:	b40e      	push	{r1, r2, r3}
 8003a92:	b503      	push	{r0, r1, lr}
 8003a94:	ab03      	add	r3, sp, #12
 8003a96:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003a9a:	2100      	movs	r1, #0
    va_start(pArg, text);
 8003a9c:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003a9e:	f015 ffab 	bl	80199f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003aa2:	b002      	add	sp, #8
 8003aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003aa8:	b003      	add	sp, #12
 8003aaa:	4770      	bx	lr

08003aac <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003aac:	b40c      	push	{r2, r3}
 8003aae:	b507      	push	{r0, r1, r2, lr}
 8003ab0:	ab04      	add	r3, sp, #16
 8003ab2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003ab6:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003ab8:	f015 ff9e 	bl	80199f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003abc:	b003      	add	sp, #12
 8003abe:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ac2:	b002      	add	sp, #8
 8003ac4:	4770      	bx	lr
	...

08003ac8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003ac8:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8003aca:	b510      	push	{r4, lr}
 8003acc:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003ace:	b373      	cbz	r3, 8003b2e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003ad0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003ad2:	b92b      	cbnz	r3, 8003ae0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003ad4:	21c5      	movs	r1, #197	; 0xc5
 8003ad6:	4b18      	ldr	r3, [pc, #96]	; (8003b38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003ad8:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003ada:	4819      	ldr	r0, [pc, #100]	; (8003b40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003adc:	f025 fbba 	bl	8029254 <__assert_func>
            return buffer[pos];
 8003ae0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003ae2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003ae6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003ae8:	b30b      	cbz	r3, 8003b2e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003aea:	f017 f9ca 	bl	801ae82 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003aee:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d803      	bhi.n	8003afc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003af4:	21cb      	movs	r1, #203	; 0xcb
 8003af6:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003af8:	4a13      	ldr	r2, [pc, #76]	; (8003b48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003afa:	e7ee      	b.n	8003ada <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003afc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003afe:	f640 103f 	movw	r0, #2367	; 0x93f
 8003b02:	1c53      	adds	r3, r2, #1
 8003b04:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003b06:	4619      	mov	r1, r3
 8003b08:	2b09      	cmp	r3, #9
 8003b0a:	bf88      	it	hi
 8003b0c:	f1a3 010a 	subhi.w	r1, r3, #10
 8003b10:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003b14:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8003b16:	4281      	cmp	r1, r0
 8003b18:	d109      	bne.n	8003b2e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8003b1a:	2b0a      	cmp	r3, #10
 8003b1c:	bf28      	it	cs
 8003b1e:	2300      	movcs	r3, #0
 8003b20:	eb04 0242 	add.w	r2, r4, r2, lsl #1
            return buffer[pos];
 8003b24:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003b26:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003b2a:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8003b2c:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003b2e:	4620      	mov	r0, r4
}
 8003b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003b34:	f017 b8a8 	b.w	801ac88 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003b38:	0802b680 	.word	0x0802b680
 8003b3c:	0802b689 	.word	0x0802b689
 8003b40:	0802b734 	.word	0x0802b734
 8003b44:	0802b77e 	.word	0x0802b77e
 8003b48:	0802b78c 	.word	0x0802b78c

08003b4c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003b4c:	f017 b863 	b.w	801ac16 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003b50 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003b50:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003b52:	bb18      	cbnz	r0, 8003b9c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003b54:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003b56:	4813      	ldr	r0, [pc, #76]	; (8003ba4 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4913      	ldr	r1, [pc, #76]	; (8003ba8 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003b5c:	b1b3      	cbz	r3, 8003b8c <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003b5e:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003b60:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003b62:	441a      	add	r2, r3
 8003b64:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003b66:	685a      	ldr	r2, [r3, #4]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003b68:	441c      	add	r4, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003b6a:	441a      	add	r2, r3
 8003b6c:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003b6e:	2200      	movs	r2, #0
 8003b70:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003b72:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003b74:	f000 f82a 	bl	8003bcc <_ZN17TypedTextDatabase8getFontsEv>
 8003b78:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003b7a:	f000 f825 	bl	8003bc8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003b7e:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003b80:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003b82:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003b84:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003b86:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003b88:	8018      	strh	r0, [r3, #0]
    }
}
 8003b8a:	e007      	b.n	8003b9c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003b8e:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003b92:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003b96:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003b98:	2c00      	cmp	r4, #0
 8003b9a:	d1e8      	bne.n	8003b6e <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003b9c:	bd38      	pop	{r3, r4, r5, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20196624 	.word	0x20196624
 8003ba4:	20196628 	.word	0x20196628
 8003ba8:	2019662c 	.word	0x2019662c
 8003bac:	20196630 	.word	0x20196630
 8003bb0:	20197a90 	.word	0x20197a90
 8003bb4:	20197a98 	.word	0x20197a98
 8003bb8:	20197a94 	.word	0x20197a94
 8003bbc:	900001ac 	.word	0x900001ac
 8003bc0:	900001a8 	.word	0x900001a8
 8003bc4:	900001b4 	.word	0x900001b4

08003bc8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 8003bc8:	2000      	movs	r0, #0
 8003bca:	4770      	bx	lr

08003bcc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003bcc:	4800      	ldr	r0, [pc, #0]	; (8003bd0 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003bce:	4770      	bx	lr
 8003bd0:	20196634 	.word	0x20196634

08003bd4 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003bd4:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 8003bd6:	f7ff fee5 	bl	80039a4 <_Z23getFont_verdana_20_4bppv>
};
 8003bda:	4c04      	ldr	r4, [pc, #16]	; (8003bec <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
 8003bdc:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003bde:	f7ff ff1b 	bl	8003a18 <_Z23getFont_verdana_40_4bppv>
};
 8003be2:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003be4:	f7ff fea4 	bl	8003930 <_Z23getFont_verdana_10_4bppv>
};
 8003be8:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8003bea:	bd10      	pop	{r4, pc}
 8003bec:	20196634 	.word	0x20196634

08003bf0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003bf0:	4770      	bx	lr

08003bf2 <_ZN19FrontendApplicationD0Ev>:
 8003bf2:	b510      	push	{r4, lr}
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003bfa:	f025 fafe 	bl	80291fa <_ZdlPvj>
 8003bfe:	4620      	mov	r0, r4
 8003c00:	bd10      	pop	{r4, pc}

08003c02 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003c02:	b510      	push	{r4, lr}
 8003c04:	4604      	mov	r4, r0
    {
        model.tick();
 8003c06:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8003c0a:	f000 f812 	bl	8003c32 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003c0e:	4620      	mov	r0, r4
    }
 8003c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003c14:	f015 b858 	b.w	8018cc8 <_ZN8touchgfx11Application15handleTickEventEv>

08003c18 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003c18:	b510      	push	{r4, lr}
 8003c1a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003c1c:	f7ff fd76 	bl	800370c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003c20:	4b01      	ldr	r3, [pc, #4]	; (8003c28 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8003c22:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8003c24:	6023      	str	r3, [r4, #0]
}
 8003c26:	bd10      	pop	{r4, pc}
 8003c28:	0802b868 	.word	0x0802b868

08003c2c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	6002      	str	r2, [r0, #0]
{

}
 8003c30:	4770      	bx	lr

08003c32 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8003c32:	4770      	bx	lr

08003c34 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8003c34:	4770      	bx	lr

08003c36 <_ZThn4_N16Screen1PresenterD1Ev>:
 8003c36:	3804      	subs	r0, #4
 8003c38:	4770      	bx	lr

08003c3a <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8003c3a:	4770      	bx	lr

08003c3c <_ZN16Screen1PresenterD0Ev>:
 8003c3c:	b510      	push	{r4, lr}
 8003c3e:	4604      	mov	r4, r0
 8003c40:	2110      	movs	r1, #16
 8003c42:	f025 fada 	bl	80291fa <_ZdlPvj>
 8003c46:	4620      	mov	r0, r4
 8003c48:	bd10      	pop	{r4, pc}

08003c4a <_ZThn4_N16Screen1PresenterD0Ev>:
 8003c4a:	f1a0 0004 	sub.w	r0, r0, #4
 8003c4e:	e7f5      	b.n	8003c3c <_ZN16Screen1PresenterD0Ev>

08003c50 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003c50:	2200      	movs	r2, #0
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8003c52:	b510      	push	{r4, lr}
 8003c54:	6082      	str	r2, [r0, #8]
    : view(v)
 8003c56:	4a04      	ldr	r2, [pc, #16]	; (8003c68 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
 8003c58:	60c1      	str	r1, [r0, #12]
 8003c5a:	f102 0408 	add.w	r4, r2, #8
 8003c5e:	3220      	adds	r2, #32
 8003c60:	6004      	str	r4, [r0, #0]
 8003c62:	6042      	str	r2, [r0, #4]
}
 8003c64:	bd10      	pop	{r4, pc}
 8003c66:	bf00      	nop
 8003c68:	0802b8ac 	.word	0x0802b8ac

08003c6c <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8003c6c:	4770      	bx	lr
	...

08003c70 <_ZN11Screen1View9tick_funcEv>:

void Screen1View::tick_func(){
 8003c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c74:	4f55      	ldr	r7, [pc, #340]	; (8003dcc <_ZN11Screen1View9tick_funcEv+0x15c>)
 8003c76:	4606      	mov	r6, r0
 8003c78:	46b8      	mov	r8, r7
 8003c7a:	2408      	movs	r4, #8
			if( grid[c][r] > 0 ){
				if( rand()%20 != 0 ){
					grid[c][r]--;
				}
			}else{
				grid[c][r] = 160;
 8003c7c:	f04f 0ba0 	mov.w	fp, #160	; 0xa0
				if( rand()%20 != 0 ){
 8003c80:	f04f 0a14 	mov.w	sl, #20
void Screen1View::tick_func(){
 8003c84:	4645      	mov	r5, r8
 8003c86:	f04f 0900 	mov.w	r9, #0
			if( grid[c][r] > 0 ){
 8003c8a:	682b      	ldr	r3, [r5, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	dd68      	ble.n	8003d62 <_ZN11Screen1View9tick_funcEv+0xf2>
				if( rand()%20 != 0 ){
 8003c90:	f025 ffc4 	bl	8029c1c <rand>
 8003c94:	fb90 f3fa 	sdiv	r3, r0, sl
 8003c98:	fb03 001a 	mls	r0, r3, sl, r0
 8003c9c:	b110      	cbz	r0, 8003ca4 <_ZN11Screen1View9tick_funcEv+0x34>
					grid[c][r]--;
 8003c9e:	682b      	ldr	r3, [r5, #0]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	602b      	str	r3, [r5, #0]
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003ca4:	f109 0908 	add.w	r9, r9, #8
 8003ca8:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8003cac:	f105 0520 	add.w	r5, r5, #32
 8003cb0:	d1eb      	bne.n	8003c8a <_ZN11Screen1View9tick_funcEv+0x1a>
	for(uint8_t r = 0; r < ROWS; r ++ ){
 8003cb2:	3c01      	subs	r4, #1
 8003cb4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003cb8:	f108 0804 	add.w	r8, r8, #4
 8003cbc:	d1e2      	bne.n	8003c84 <_ZN11Screen1View9tick_funcEv+0x14>
        {
            red = green = blue = value;
            return;
        }

        const uint8_t region = (hue * 6) >> 8;
 8003cbe:	f04f 0806 	mov.w	r8, #6
			}
		}
	}

	//Draw cells
	uint16_t index = 0;
 8003cc2:	2500      	movs	r5, #0
        const int next_region_start = ((((region + 1) << 8) + 5) / 6); // Can go up to 256, uint8_t not enough
        const uint8_t region_size = next_region_start - (((region << 8) + 5) / 6);
 8003cc4:	f06f 0905 	mvn.w	r9, #5
	for(uint8_t r = 0; r < ROWS; r ++ ){
		for(uint8_t c = 0; c < COLS; c ++ ){
			//box[index].setColor(touchgfx::Color::getColorFromRGB(0, 119, 178));
			box[index].setColor(touchgfx::Color::getColorFromHSV(grid[c][r], 255, 255));
 8003cc8:	016b      	lsls	r3, r5, #5
 8003cca:	5cf9      	ldrb	r1, [r7, r3]
 8003ccc:	1960      	adds	r0, r4, r5
        const uint8_t region = (hue * 6) >> 8;
 8003cce:	fb08 f201 	mul.w	r2, r8, r1
        const int next_region_start = ((((region + 1) << 8) + 5) / 6); // Can go up to 256, uint8_t not enough
 8003cd2:	f402 63e0 	and.w	r3, r2, #1792	; 0x700
 8003cd6:	f203 1305 	addw	r3, r3, #261	; 0x105
 8003cda:	fbb3 fef8 	udiv	lr, r3, r8
        const uint8_t region_size = next_region_start - (((region << 8) + 5) / 6);
 8003cde:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8003ce2:	3305      	adds	r3, #5
 8003ce4:	fb93 f3f9 	sdiv	r3, r3, r9
        const uint8_t remainder = 255 - (next_region_start - hue) * 255 / region_size;
 8003ce8:	ebae 0101 	sub.w	r1, lr, r1
        const uint8_t region_size = next_region_start - (((region << 8) + 5) / 6);
 8003cec:	4473      	add	r3, lr
        const uint8_t remainder = 255 - (next_region_start - hue) * 255 / region_size;
 8003cee:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	fb91 f3f3 	sdiv	r3, r1, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3

        const uint8_t p = LCD::div255(value * (255 - saturation));
        const uint8_t q = LCD::div255(value * (255 - LCD::div255(saturation * remainder)));
 8003cfc:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
 8003d00:	b289      	uxth	r1, r1
        const uint8_t region = (hue * 6) >> 8;
 8003d02:	ea4f 2c22 	mov.w	ip, r2, asr #8
     *
     * @return The result of a division by 255.
     */
    FORCE_INLINE_FUNCTION static uint8_t div255(uint16_t num)
    {
        return (num + 1 + (num >> 8)) >> 8;
 8003d06:	1c4a      	adds	r2, r1, #1
 8003d08:	0a09      	lsrs	r1, r1, #8
 8003d0a:	fa11 f282 	uxtah	r2, r1, r2
 8003d0e:	1212      	asrs	r2, r2, #8
        const uint8_t q = LCD::div255(value * (255 - LCD::div255(saturation * remainder)));
 8003d10:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8003d14:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8003d18:	b292      	uxth	r2, r2
        const uint8_t t = LCD::div255(value * (255 - LCD::div255(saturation * (255 - remainder))));
 8003d1a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003d1e:	1c51      	adds	r1, r2, #1
 8003d20:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 8003d24:	0a12      	lsrs	r2, r2, #8
 8003d26:	fa12 f281 	uxtah	r2, r2, r1
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	0a1b      	lsrs	r3, r3, #8
 8003d34:	fa13 f282 	uxtah	r2, r3, r2
 8003d38:	1212      	asrs	r2, r2, #8
 8003d3a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8003d3e:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8003d42:	b292      	uxth	r2, r2
 8003d44:	1c53      	adds	r3, r2, #1
 8003d46:	0a12      	lsrs	r2, r2, #8
 8003d48:	fa12 f383 	uxtah	r3, r2, r3
 8003d4c:	b280      	uxth	r0, r0
 8003d4e:	f3c3 2307 	ubfx	r3, r3, #8, #8

        switch (region)
 8003d52:	f1bc 0f04 	cmp.w	ip, #4
 8003d56:	d832      	bhi.n	8003dbe <_ZN11Screen1View9tick_funcEv+0x14e>
 8003d58:	e8df f00c 	tbb	[pc, ip]
 8003d5c:	29260635 	.word	0x29260635
 8003d60:	2e          	.byte	0x2e
 8003d61:	00          	.byte	0x00
				grid[c][r] = 160;
 8003d62:	f8c5 b000 	str.w	fp, [r5]
 8003d66:	e79d      	b.n	8003ca4 <_ZN11Screen1View9tick_funcEv+0x34>
 8003d68:	f04f 0c00 	mov.w	ip, #0
            green = value;
            blue = p;
            break;
        case 2:
            red = p;
            green = value;
 8003d6c:	23ff      	movs	r3, #255	; 0xff
 8003d6e:	222c      	movs	r2, #44	; 0x2c
 8003d70:	4350      	muls	r0, r2
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003d78:	ea43 030c 	orr.w	r3, r3, ip
 8003d7c:	1832      	adds	r2, r6, r0
 8003d7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d82:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
			box[index].invalidate();
 8003d86:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003d8a:	3098      	adds	r0, #152	; 0x98
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	4430      	add	r0, r6
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003d90:	3501      	adds	r5, #1
			box[index].invalidate();
 8003d92:	4798      	blx	r3
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003d94:	2d08      	cmp	r5, #8
 8003d96:	d197      	bne.n	8003cc8 <_ZN11Screen1View9tick_funcEv+0x58>
			index++;
 8003d98:	3408      	adds	r4, #8
 8003d9a:	b2a4      	uxth	r4, r4
	for(uint8_t r = 0; r < ROWS; r ++ ){
 8003d9c:	2c40      	cmp	r4, #64	; 0x40
 8003d9e:	f107 0704 	add.w	r7, r7, #4
 8003da2:	d18e      	bne.n	8003cc2 <_ZN11Screen1View9tick_funcEv+0x52>
		}
	}
}
 8003da4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blue = t;
 8003da8:	469c      	mov	ip, r3
            red = p;
 8003daa:	2100      	movs	r1, #0
 8003dac:	e7de      	b.n	8003d6c <_ZN11Screen1View9tick_funcEv+0xfc>
            break;
        case 3:
            red = p;
            green = q;
 8003dae:	460b      	mov	r3, r1
            red = p;
 8003db0:	2100      	movs	r1, #0
            blue = value;
            break;
        case 4:
            red = t;
            green = p;
            blue = value;
 8003db2:	f04f 0cff 	mov.w	ip, #255	; 0xff
            break;
 8003db6:	e7da      	b.n	8003d6e <_ZN11Screen1View9tick_funcEv+0xfe>
            red = t;
 8003db8:	4619      	mov	r1, r3
            green = p;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e7f9      	b.n	8003db2 <_ZN11Screen1View9tick_funcEv+0x142>
        default:
            red = value;
            green = p;
            blue = q;
 8003dbe:	468c      	mov	ip, r1
            green = p;
 8003dc0:	2300      	movs	r3, #0
            red = value;
 8003dc2:	21ff      	movs	r1, #255	; 0xff
 8003dc4:	e7d3      	b.n	8003d6e <_ZN11Screen1View9tick_funcEv+0xfe>
            blue = p;
 8003dc6:	f04f 0c00 	mov.w	ip, #0
 8003dca:	e7fa      	b.n	8003dc2 <_ZN11Screen1View9tick_funcEv+0x152>
 8003dcc:	20196640 	.word	0x20196640

08003dd0 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003dd0:	b538      	push	{r3, r4, r5, lr}
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	f246 356c 	movw	r5, #25452	; 0x636c
 8003dd8:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <_ZN11Screen1ViewD1Ev+0x24>)
 8003dda:	6003      	str	r3, [r0, #0]
 8003ddc:	5963      	ldr	r3, [r4, r5]
 8003dde:	1960      	adds	r0, r4, r5
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3d2c      	subs	r5, #44	; 0x2c
 8003de4:	4798      	blx	r3
 8003de6:	2d6c      	cmp	r5, #108	; 0x6c
 8003de8:	d1f8      	bne.n	8003ddc <_ZN11Screen1ViewD1Ev+0xc>
 8003dea:	4620      	mov	r0, r4
 8003dec:	f7ff fd57 	bl	800389e <_ZN15Screen1ViewBaseD1Ev>
 8003df0:	4620      	mov	r0, r4
 8003df2:	bd38      	pop	{r3, r4, r5, pc}
 8003df4:	0802b8dc 	.word	0x0802b8dc

08003df8 <_ZN11Screen1ViewD0Ev>:
 8003df8:	b510      	push	{r4, lr}
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	f7ff ffe8 	bl	8003dd0 <_ZN11Screen1ViewD1Ev>
 8003e00:	4620      	mov	r0, r4
 8003e02:	f246 3198 	movw	r1, #25496	; 0x6398
 8003e06:	f025 f9f8 	bl	80291fa <_ZdlPvj>
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	bd10      	pop	{r4, pc}
	...

08003e10 <_ZN8touchgfx3BoxC1Ev>:
          visible(true)
 8003e10:	f44f 7180 	mov.w	r1, #256	; 0x100
        : Widget(), alpha(255), color(0)
 8003e14:	4a08      	ldr	r2, [pc, #32]	; (8003e38 <_ZN8touchgfx3BoxC1Ev+0x28>)
 8003e16:	8481      	strh	r1, [r0, #36]	; 0x24
 8003e18:	6002      	str	r2, [r0, #0]
 8003e1a:	21ff      	movs	r1, #255	; 0xff
        : x(0), y(0), width(0), height(0)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8003e22:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003e26:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8003e2a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003e2e:	e9c0 2207 	strd	r2, r2, [r0, #28]
        : color(col)
 8003e32:	6282      	str	r2, [r0, #40]	; 0x28
    }
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	0802bb8c 	.word	0x0802bb8c

08003e3c <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003e3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e40:	4606      	mov	r6, r0
 8003e42:	f7ff fd3f 	bl	80038c4 <_ZN15Screen1ViewBaseC1Ev>
 8003e46:	4630      	mov	r0, r6
 8003e48:	4b34      	ldr	r3, [pc, #208]	; (8003f1c <_ZN11Screen1ViewC1Ev+0xe0>)
 8003e4a:	f506 45c7 	add.w	r5, r6, #25472	; 0x6380
 8003e4e:	f840 3b6c 	str.w	r3, [r0], #108
 8003e52:	f7ff ffdd 	bl	8003e10 <_ZN8touchgfx3BoxC1Ev>
 8003e56:	f106 0498 	add.w	r4, r6, #152	; 0x98
 8003e5a:	3518      	adds	r5, #24
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	342c      	adds	r4, #44	; 0x2c
 8003e60:	f7ff ffd6 	bl	8003e10 <_ZN8touchgfx3BoxC1Ev>
 8003e64:	42ac      	cmp	r4, r5
 8003e66:	d1f9      	bne.n	8003e5c <_ZN11Screen1ViewC1Ev+0x20>
 8003e68:	2408      	movs	r4, #8
			grid[c][r] = 140+rand()%20;
 8003e6a:	f04f 0814 	mov.w	r8, #20
 8003e6e:	4f2c      	ldr	r7, [pc, #176]	; (8003f20 <_ZN11Screen1ViewC1Ev+0xe4>)
Screen1View::Screen1View()
 8003e70:	2500      	movs	r5, #0
			grid[c][r] = 140+rand()%20;
 8003e72:	f025 fed3 	bl	8029c1c <rand>
 8003e76:	fb90 f3f8 	sdiv	r3, r0, r8
 8003e7a:	fb03 0018 	mls	r0, r3, r8, r0
 8003e7e:	308c      	adds	r0, #140	; 0x8c
 8003e80:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003e84:	3508      	adds	r5, #8
 8003e86:	2d40      	cmp	r5, #64	; 0x40
 8003e88:	d1f3      	bne.n	8003e72 <_ZN11Screen1ViewC1Ev+0x36>
	for(uint8_t r = 0; r < ROWS; r ++ ){
 8003e8a:	3c01      	subs	r4, #1
 8003e8c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003e90:	f107 0704 	add.w	r7, r7, #4
 8003e94:	d1ec      	bne.n	8003e70 <_ZN11Screen1ViewC1Ev+0x34>
			box[index].setPosition(80+c*40, 80+r*40, 39, 39);
 8003e96:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
	uint16_t index = 0;
 8003e9a:	46a0      	mov	r8, r4
 8003e9c:	f04f 0b50 	mov.w	fp, #80	; 0x50
 8003ea0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8003ea4:	3150      	adds	r1, #80	; 0x50
 8003ea6:	fa0f f981 	sxth.w	r9, r1
			box[index].setPosition(80+c*40, 80+r*40, 39, 39);
 8003eaa:	fb0a f508 	mul.w	r5, sl, r8
 8003eae:	f105 0798 	add.w	r7, r5, #152	; 0x98
        setX(x);
 8003eb2:	4435      	add	r5, r6
 8003eb4:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003eb8:	4437      	add	r7, r6
 8003eba:	fa0f f18b 	sxth.w	r1, fp
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ec2:	4790      	blx	r2
        setY(y);
 8003ec4:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003ec8:	4649      	mov	r1, r9
 8003eca:	4638      	mov	r0, r7
 8003ecc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ece:	4790      	blx	r2
        setWidth(width);
 8003ed0:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003ed4:	2127      	movs	r1, #39	; 0x27
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003eda:	4790      	blx	r2
        setHeight(height);
 8003edc:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8003ee0:	2127      	movs	r1, #39	; 0x27
 8003ee2:	4638      	mov	r0, r7
 8003ee4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ee6:	4790      	blx	r2
        color = newColor;
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <_ZN11Screen1ViewC1Ev+0xe8>)
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003eea:	f10b 0b28 	add.w	fp, fp, #40	; 0x28
 8003eee:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8003ef2:	4639      	mov	r1, r7
 8003ef4:	1d30      	adds	r0, r6, #4
 8003ef6:	fa1f fb8b 	uxth.w	fp, fp
 8003efa:	f012 fc5b 	bl	80167b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
			index++;
 8003efe:	f108 0301 	add.w	r3, r8, #1
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003f02:	f5bb 7fc8 	cmp.w	fp, #400	; 0x190
			index++;
 8003f06:	fa1f f883 	uxth.w	r8, r3
		for(uint8_t c = 0; c < COLS; c ++ ){
 8003f0a:	d1ce      	bne.n	8003eaa <_ZN11Screen1ViewC1Ev+0x6e>
			index++;
 8003f0c:	3408      	adds	r4, #8
 8003f0e:	b2a4      	uxth	r4, r4
	for(uint8_t r = 0; r < ROWS; r ++ ){
 8003f10:	2c40      	cmp	r4, #64	; 0x40
 8003f12:	d1c2      	bne.n	8003e9a <_ZN11Screen1ViewC1Ev+0x5e>
}
 8003f14:	4630      	mov	r0, r6
 8003f16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f1a:	bf00      	nop
 8003f1c:	0802b8dc 	.word	0x0802b8dc
 8003f20:	20196640 	.word	0x20196640
 8003f24:	ff0077b2 	.word	0xff0077b2

08003f28 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003f28:	f7ff bcba 	b.w	80038a0 <_ZN15Screen1ViewBase11setupScreenEv>

08003f2c <APS512XX_EnableMemoryMappedMode>:
  * @param  BurstType Type of burst used for the access
  * @retval Memory status
  */
int32_t APS512XX_EnableMemoryMappedMode(XSPI_HandleTypeDef *Ctx, uint32_t ReadLatencyCode, uint32_t WriteLatencyCode,
                                        uint32_t IOMode, uint32_t BurstType)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b09a      	sub	sp, #104	; 0x68
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
  XSPI_RegularCmdTypeDef   sCommand = {0};
 8003f3a:	f107 0318 	add.w	r3, r7, #24
 8003f3e:	2250      	movs	r2, #80	; 0x50
 8003f40:	2100      	movs	r1, #0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f025 fa04 	bl	8029350 <memset>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8003f48:	f107 0310 	add.w	r3, r7, #16
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	605a      	str	r2, [r3, #4]

  /* Initialize the write command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_WRITE_CFG;
 8003f52:	2302      	movs	r3, #2
 8003f54:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 8003f56:	2304      	movs	r3, #4
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction         = ((BurstType == 0U) ? APS512XX_WRITE_LINEAR_BURST_CMD : APS512XX_WRITE_CMD);
 8003f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <APS512XX_EnableMemoryMappedMode+0x40>
 8003f68:	23a0      	movs	r3, #160	; 0xa0
 8003f6a:	e000      	b.n	8003f6e <APS512XX_EnableMemoryMappedMode+0x42>
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 8003f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 8003f76:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8003f7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f80:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode            = ((IOMode == 0U) ? HAL_XSPI_DATA_8_LINES : HAL_XSPI_DATA_16_LINES);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d102      	bne.n	8003f92 <APS512XX_EnableMemoryMappedMode+0x66>
 8003f8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f90:	e001      	b.n	8003f96 <APS512XX_EnableMemoryMappedMode+0x6a>
 8003f92:	f04f 63a0 	mov.w	r3, #83886080	; 0x5000000
 8003f96:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 8003f98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f9c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
 8003fa4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003fa8:	663b      	str	r3, [r7, #96]	; 0x60
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8003faa:	2300      	movs	r3, #0
 8003fac:	667b      	str	r3, [r7, #100]	; 0x64
#endif

  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fae:	f107 0318 	add.w	r3, r7, #24
 8003fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f00f f89b 	bl	80130f4 <HAL_XSPI_Command>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <APS512XX_EnableMemoryMappedMode+0x9e>
  {
    return APS512XX_ERROR;
 8003fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc8:	e028      	b.n	800401c <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  /* Initialize the read command */
  sCommand.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction   = ((BurstType == 0U) ? APS512XX_READ_LINEAR_BURST_CMD : APS512XX_READ_CMD);
 8003fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <APS512XX_EnableMemoryMappedMode+0xac>
 8003fd4:	2320      	movs	r3, #32
 8003fd6:	e000      	b.n	8003fda <APS512XX_EnableMemoryMappedMode+0xae>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	623b      	str	r3, [r7, #32]
  sCommand.DummyCycles   = (ReadLatencyCode - 1U);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003fe2:	f107 0318 	add.w	r3, r7, #24
 8003fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fea:	4619      	mov	r1, r3
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f00f f881 	bl	80130f4 <HAL_XSPI_Command>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <APS512XX_EnableMemoryMappedMode+0xd2>
  {
    return APS512XX_ERROR;
 8003ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffc:	e00e      	b.n	800401c <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  /* Activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	613b      	str	r3, [r7, #16]

  if (HAL_XSPI_MemoryMapped(Ctx, &sMemMappedCfg) != HAL_OK)
 8004002:	f107 0310 	add.w	r3, r7, #16
 8004006:	4619      	mov	r1, r3
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f00f faff 	bl	801360c <HAL_XSPI_MemoryMapped>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <APS512XX_EnableMemoryMappedMode+0xee>
  {
    return APS512XX_ERROR;
 8004014:	f04f 33ff 	mov.w	r3, #4294967295
 8004018:	e000      	b.n	800401c <APS512XX_EnableMemoryMappedMode+0xf0>
  }

  return APS512XX_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3768      	adds	r7, #104	; 0x68
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <APS512XX_ReadReg>:
  * @param  Value Register value pointer
  * @param  LatencyCode Latency used for the access
  * @retval error status
  */
int32_t APS512XX_ReadReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t *Value, uint32_t LatencyCode)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b098      	sub	sp, #96	; 0x60
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
  XSPI_RegularCmdTypeDef sCommand = {0};
 8004032:	f107 0310 	add.w	r3, r7, #16
 8004036:	2250      	movs	r2, #80	; 0x50
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f025 f988 	bl	8029350 <memset>

  /* Initialize the read register command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 8004044:	2304      	movs	r3, #4
 8004046:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 8004048:	2300      	movs	r3, #0
 800404a:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800404c:	2300      	movs	r3, #0
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction         = APS512XX_READ_REG_CMD;
 8004050:	2340      	movs	r3, #64	; 0x40
 8004052:	61bb      	str	r3, [r7, #24]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 8004054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 800405a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800405e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8004060:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004064:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.Address             = Address;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 800406a:	2300      	movs	r3, #0
 800406c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
 800406e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004072:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 8004074:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004078:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataLength          = 2;
 800407a:	2302      	movs	r3, #2
 800407c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DummyCycles         = (LatencyCode - 1U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	3b01      	subs	r3, #1
 8004082:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
 8004084:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004088:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 800408a:	2300      	movs	r3, #0
 800408c:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800408e:	f107 0310 	add.w	r3, r7, #16
 8004092:	f241 3288 	movw	r2, #5000	; 0x1388
 8004096:	4619      	mov	r1, r3
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f00f f82b 	bl	80130f4 <HAL_XSPI_Command>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <APS512XX_ReadReg+0x86>
  {
    return APS512XX_ERROR;
 80040a4:	f04f 33ff 	mov.w	r3, #4294967295
 80040a8:	e00c      	b.n	80040c4 <APS512XX_ReadReg+0xa0>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, (uint8_t *)Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80040aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f00f f97e 	bl	80133b2 <HAL_XSPI_Receive>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <APS512XX_ReadReg+0x9e>
  {
    return APS512XX_ERROR;
 80040bc:	f04f 33ff 	mov.w	r3, #4294967295
 80040c0:	e000      	b.n	80040c4 <APS512XX_ReadReg+0xa0>
  }

  return APS512XX_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3760      	adds	r7, #96	; 0x60
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <APS512XX_WriteReg>:
  * @param  Address Register address
  * @param  Value Value to write to register
  * @retval error status
  */
int32_t APS512XX_WriteReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t Value)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b098      	sub	sp, #96	; 0x60
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	4613      	mov	r3, r2
 80040d8:	71fb      	strb	r3, [r7, #7]
  XSPI_RegularCmdTypeDef sCommand = {0};
 80040da:	f107 0310 	add.w	r3, r7, #16
 80040de:	2250      	movs	r2, #80	; 0x50
 80040e0:	2100      	movs	r1, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	f025 f934 	bl	8029350 <memset>

  /* Initialize the write register command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_COMMON_CFG;
 80040e8:	2300      	movs	r3, #0
 80040ea:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
 80040ec:	2304      	movs	r3, #4
 80040ee:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
 80040f0:	2300      	movs	r3, #0
 80040f2:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80040f4:	2300      	movs	r3, #0
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction         = APS512XX_WRITE_REG_CMD;
 80040f8:	23c0      	movs	r3, #192	; 0xc0
 80040fa:	61bb      	str	r3, [r7, #24]
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
 80040fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004100:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
 8004102:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004106:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8004108:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.Address             = Address;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
 8004112:	2300      	movs	r3, #0
 8004114:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
 8004116:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800411a:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
 800411c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004120:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DataLength          = 2;
 8004122:	2302      	movs	r3, #2
 8004124:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DummyCycles         = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode             = HAL_XSPI_DQS_DISABLE;
 800412a:	2300      	movs	r3, #0
 800412c:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 800412e:	2300      	movs	r3, #0
 8004130:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004132:	f107 0310 	add.w	r3, r7, #16
 8004136:	f241 3288 	movw	r2, #5000	; 0x1388
 800413a:	4619      	mov	r1, r3
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f00e ffd9 	bl	80130f4 <HAL_XSPI_Command>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <APS512XX_WriteReg+0x82>
  {
    return APS512XX_ERROR;
 8004148:	f04f 33ff 	mov.w	r3, #4294967295
 800414c:	e00d      	b.n	800416a <APS512XX_WriteReg+0x9e>
  }

  /* Transmission of the data */
  if (HAL_XSPI_Transmit(Ctx, (uint8_t *)(&Value), HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800414e:	1dfb      	adds	r3, r7, #7
 8004150:	f241 3288 	movw	r2, #5000	; 0x1388
 8004154:	4619      	mov	r1, r3
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f00f f8b8 	bl	80132cc <HAL_XSPI_Transmit>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <APS512XX_WriteReg+0x9c>
  {
    return APS512XX_ERROR;
 8004162:	f04f 33ff 	mov.w	r3, #4294967295
 8004166:	e000      	b.n	800416a <APS512XX_WriteReg+0x9e>
  }

  return APS512XX_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3760      	adds	r7, #96	; 0x60
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <APS512XX_Reset>:
  * @brief  Reset the memory
  * @param  Ctx Component object pointer
  * @retval error status
  */
int32_t APS512XX_Reset(XSPI_HandleTypeDef *Ctx)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b096      	sub	sp, #88	; 0x58
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  XSPI_RegularCmdTypeDef sCommand = {0};
 800417a:	f107 0308 	add.w	r3, r7, #8
 800417e:	2250      	movs	r2, #80	; 0x50
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f025 f8e4 	bl	8029350 <memset>

  /* Initialize the command */
  sCommand.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004188:	2300      	movs	r3, #0
 800418a:	60bb      	str	r3, [r7, #8]
  sCommand.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 800418c:	2304      	movs	r3, #4
 800418e:	617b      	str	r3, [r7, #20]
  sCommand.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
 8004190:	2300      	movs	r3, #0
 8004192:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8004194:	2300      	movs	r3, #0
 8004196:	61fb      	str	r3, [r7, #28]
  sCommand.Instruction        = APS512XX_RESET_CMD;
 8004198:	23ff      	movs	r3, #255	; 0xff
 800419a:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 800419c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressWidth       = HAL_XSPI_ADDRESS_24_BITS;
 80041a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Address            = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_XSPI_DATA_NONE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataLength         = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles        = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_XSPI_DQS_DISABLE;
 80041c0:	2300      	movs	r3, #0
 80041c2:	653b      	str	r3, [r7, #80]	; 0x50
#if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80041c4:	2300      	movs	r3, #0
 80041c6:	657b      	str	r3, [r7, #84]	; 0x54
#endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80041c8:	f107 0308 	add.w	r3, r7, #8
 80041cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d0:	4619      	mov	r1, r3
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f00e ff8e 	bl	80130f4 <HAL_XSPI_Command>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <APS512XX_Reset+0x72>
  {
    return APS512XX_ERROR;
 80041de:	f04f 33ff 	mov.w	r3, #4294967295
 80041e2:	e003      	b.n	80041ec <APS512XX_Reset+0x7a>
  }

  /* Need to wait tRST */
  HAL_Delay(1);
 80041e4:	2001      	movs	r0, #1
 80041e6:	f003 fc15 	bl	8007a14 <HAL_Delay>
  return 0/*APS512XX_OK*/;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3758      	adds	r7, #88	; 0x58
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <MX25UM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25UM51245G_GetFlashInfo(MX25UM51245G_Info_t *pInfo)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25UM51245G_FLASH_SIZE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004202:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25UM51245G_SECTOR_64K;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800420a:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SECTOR_64K);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004212:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25UM51245G_SUBSECTOR_4K;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800421a:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004222:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25UM51245G_SUBSECTOR_4K;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800422a:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_SUBSECTOR_4K);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004232:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25UM51245G_PAGE_SIZE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800423a:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25UM51245G_FLASH_SIZE / MX25UM51245G_PAGE_SIZE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004242:	621a      	str	r2, [r3, #32]

  return MX25UM51245G_OK;
 8004244:	2300      	movs	r3, #0
};
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <MX25UM51245G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25UM51245G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                         MX25UM51245G_Transfer_t Rate)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b09c      	sub	sp, #112	; 0x70
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	460b      	mov	r3, r1
 800425c:	70fb      	strb	r3, [r7, #3]
 800425e:	4613      	mov	r3, r2
 8004260:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef  s_command = {0};
 8004262:	f107 0320 	add.w	r3, r7, #32
 8004266:	2250      	movs	r2, #80	; 0x50
 8004268:	2100      	movs	r1, #0
 800426a:	4618      	mov	r0, r3
 800426c:	f025 f870 	bl	8029350 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
 8004270:	f107 030c 	add.w	r3, r7, #12
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	60da      	str	r2, [r3, #12]
 800427e:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d105      	bne.n	8004292 <MX25UM51245G_AutoPollingMemReady+0x40>
 8004286:	78bb      	ldrb	r3, [r7, #2]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d102      	bne.n	8004292 <MX25UM51245G_AutoPollingMemReady+0x40>
  {
    return MX25UM51245G_ERROR;
 800428c:	f04f 33ff 	mov.w	r3, #4294967295
 8004290:	e08d      	b.n	80043ae <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004292:	2300      	movs	r3, #0
 8004294:	623b      	str	r3, [r7, #32]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004296:	2300      	movs	r3, #0
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <MX25UM51245G_AutoPollingMemReady+0x52>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <MX25UM51245G_AutoPollingMemReady+0x54>
 80042a4:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 80042a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80042a8:	78bb      	ldrb	r3, [r7, #2]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <MX25UM51245G_AutoPollingMemReady+0x60>
 80042ae:	2308      	movs	r3, #8
 80042b0:	e000      	b.n	80042b4 <MX25UM51245G_AutoPollingMemReady+0x62>
 80042b2:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 80042b4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <MX25UM51245G_AutoPollingMemReady+0x6e>
 80042bc:	2300      	movs	r3, #0
 80042be:	e000      	b.n	80042c2 <MX25UM51245G_AutoPollingMemReady+0x70>
 80042c0:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 80042c2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_STATUS_REG_CMD
                                 : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <MX25UM51245G_AutoPollingMemReady+0x7c>
 80042ca:	2305      	movs	r3, #5
 80042cc:	e001      	b.n	80042d2 <MX25UM51245G_AutoPollingMemReady+0x80>
 80042ce:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 80042d2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <MX25UM51245G_AutoPollingMemReady+0x8c>
 80042da:	2300      	movs	r3, #0
 80042dc:	e001      	b.n	80042e2 <MX25UM51245G_AutoPollingMemReady+0x90>
 80042de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 80042e4:	78bb      	ldrb	r3, [r7, #2]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d102      	bne.n	80042f0 <MX25UM51245G_AutoPollingMemReady+0x9e>
 80042ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042ee:	e000      	b.n	80042f2 <MX25UM51245G_AutoPollingMemReady+0xa0>
 80042f0:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 80042f2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 80042f4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80042f8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 80042fe:	2300      	movs	r3, #0
 8004300:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d102      	bne.n	800430e <MX25UM51245G_AutoPollingMemReady+0xbc>
 8004308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800430c:	e001      	b.n	8004312 <MX25UM51245G_AutoPollingMemReady+0xc0>
 800430e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004312:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 8004314:	78bb      	ldrb	r3, [r7, #2]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d102      	bne.n	8004320 <MX25UM51245G_AutoPollingMemReady+0xce>
 800431a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800431e:	e000      	b.n	8004322 <MX25UM51245G_AutoPollingMemReady+0xd0>
 8004320:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004322:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d006      	beq.n	8004338 <MX25UM51245G_AutoPollingMemReady+0xe6>
 800432a:	78bb      	ldrb	r3, [r7, #2]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <MX25UM51245G_AutoPollingMemReady+0xe2>
 8004330:	2305      	movs	r3, #5
 8004332:	e002      	b.n	800433a <MX25UM51245G_AutoPollingMemReady+0xe8>
 8004334:	2304      	movs	r3, #4
 8004336:	e000      	b.n	800433a <MX25UM51245G_AutoPollingMemReady+0xe8>
 8004338:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
 800433a:	667b      	str	r3, [r7, #100]	; 0x64
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 800433c:	78bb      	ldrb	r3, [r7, #2]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <MX25UM51245G_AutoPollingMemReady+0xf4>
 8004342:	2302      	movs	r3, #2
 8004344:	e000      	b.n	8004348 <MX25UM51245G_AutoPollingMemReady+0xf6>
 8004346:	2301      	movs	r3, #1
 8004348:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 800434a:	78bb      	ldrb	r3, [r7, #2]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d102      	bne.n	8004356 <MX25UM51245G_AutoPollingMemReady+0x104>
 8004350:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004354:	e000      	b.n	8004358 <MX25UM51245G_AutoPollingMemReady+0x106>
 8004356:	2300      	movs	r3, #0
 8004358:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 800435a:	2300      	movs	r3, #0
 800435c:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.MatchValue    = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
  s_config.MatchMask     = MX25UM51245G_SR_WIP;
 8004362:	2301      	movs	r3, #1
 8004364:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_XSPI_MATCH_MODE_AND;
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]
  s_config.IntervalTime  = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
 800436a:	2310      	movs	r3, #16
 800436c:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 800436e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004372:	61bb      	str	r3, [r7, #24]

  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004374:	f107 0320 	add.w	r3, r7, #32
 8004378:	f241 3288 	movw	r2, #5000	; 0x1388
 800437c:	4619      	mov	r1, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f00e feb8 	bl	80130f4 <HAL_XSPI_Command>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <MX25UM51245G_AutoPollingMemReady+0x13e>
  {
    return MX25UM51245G_ERROR;
 800438a:	f04f 33ff 	mov.w	r3, #4294967295
 800438e:	e00e      	b.n	80043ae <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004390:	f107 030c 	add.w	r3, r7, #12
 8004394:	f241 3288 	movw	r2, #5000	; 0x1388
 8004398:	4619      	mov	r1, r3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f00f f8ac 	bl	80134f8 <HAL_XSPI_AutoPolling>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <MX25UM51245G_AutoPollingMemReady+0x15a>
  {
    return MX25UM51245G_ERROR;
 80043a6:	f04f 33ff 	mov.w	r3, #4294967295
 80043aa:	e000      	b.n	80043ae <MX25UM51245G_AutoPollingMemReady+0x15c>
  }

  return MX25UM51245G_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3770      	adds	r7, #112	; 0x70
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <MX25UM51245G_EnableSTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                               MX25UM51245G_AddressSize_t AddressSize)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b098      	sub	sp, #96	; 0x60
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	460b      	mov	r3, r1
 80043c0:	70fb      	strb	r3, [r7, #3]
 80043c2:	4613      	mov	r3, r2
 80043c4:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef      s_command = {0};
 80043c6:	f107 0310 	add.w	r3, r7, #16
 80043ca:	2250      	movs	r2, #80	; 0x50
 80043cc:	2100      	movs	r1, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f024 ffbe 	bl	8029350 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80043d4:	f107 0308 	add.w	r3, r7, #8
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25UM51245G_OPI_MODE) && (AddressSize == MX25UM51245G_3BYTES_SIZE))
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d105      	bne.n	80043f0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3a>
 80043e4:	78bb      	ldrb	r3, [r7, #2]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <MX25UM51245G_EnableSTRMemoryMappedMode+0x3a>
  {
    return MX25UM51245G_ERROR;
 80043ea:	f04f 33ff 	mov.w	r3, #4294967295
 80043ee:	e088      	b.n	8004502 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
 80043f0:	2301      	movs	r3, #1
 80043f2:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <MX25UM51245G_EnableSTRMemoryMappedMode+0x4c>
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <MX25UM51245G_EnableSTRMemoryMappedMode+0x4e>
 8004402:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8004404:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8004406:	2300      	movs	r3, #0
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <MX25UM51245G_EnableSTRMemoryMappedMode+0x5e>
 8004410:	2300      	movs	r3, #0
 8004412:	e000      	b.n	8004416 <MX25UM51245G_EnableSTRMemoryMappedMode+0x60>
 8004414:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004416:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_FAST_READ_CMD
                                    : MX25UM51245G_4_BYTE_ADDR_FAST_READ_CMD)
                                 : MX25UM51245G_OCTA_READ_CMD;
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <MX25UM51245G_EnableSTRMemoryMappedMode+0x76>
 800441e:	78bb      	ldrb	r3, [r7, #2]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <MX25UM51245G_EnableSTRMemoryMappedMode+0x72>
 8004424:	230b      	movs	r3, #11
 8004426:	e003      	b.n	8004430 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7a>
 8004428:	230c      	movs	r3, #12
 800442a:	e001      	b.n	8004430 <MX25UM51245G_EnableSTRMemoryMappedMode+0x7a>
 800442c:	f64e 4313 	movw	r3, #60435	; 0xec13
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004430:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d102      	bne.n	800443e <MX25UM51245G_EnableSTRMemoryMappedMode+0x88>
 8004438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800443c:	e001      	b.n	8004442 <MX25UM51245G_EnableSTRMemoryMappedMode+0x8c>
 800443e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8004444:	2300      	movs	r3, #0
 8004446:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
                                 ? HAL_XSPI_ADDRESS_24_BITS
                                 : HAL_XSPI_ADDRESS_32_BITS;
 8004448:	78bb      	ldrb	r3, [r7, #2]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <MX25UM51245G_EnableSTRMemoryMappedMode+0x9e>
 800444e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004452:	e001      	b.n	8004458 <MX25UM51245G_EnableSTRMemoryMappedMode+0xa2>
 8004454:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.AddressWidth       = (AddressSize == MX25UM51245G_3BYTES_SIZE)
 8004458:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 800445a:	2300      	movs	r3, #0
 800445c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d102      	bne.n	800446a <MX25UM51245G_EnableSTRMemoryMappedMode+0xb4>
 8004464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004468:	e001      	b.n	800446e <MX25UM51245G_EnableSTRMemoryMappedMode+0xb8>
 800446a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800446e:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_DISABLE;
 8004470:	2300      	movs	r3, #0
 8004472:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <MX25UM51245G_EnableSTRMemoryMappedMode+0xc8>
 800447a:	2308      	movs	r3, #8
 800447c:	e000      	b.n	8004480 <MX25UM51245G_EnableSTRMemoryMappedMode+0xca>
 800447e:	2306      	movs	r3, #6
 8004480:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8004482:	2300      	movs	r3, #0
 8004484:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8004486:	2300      	movs	r3, #0
 8004488:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800448a:	f107 0310 	add.w	r3, r7, #16
 800448e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004492:	4619      	mov	r1, r3
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f00e fe2d 	bl	80130f4 <HAL_XSPI_Command>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <MX25UM51245G_EnableSTRMemoryMappedMode+0xf0>
  {
    return MX25UM51245G_ERROR;
 80044a0:	f04f 33ff 	mov.w	r3, #4294967295
 80044a4:	e02d      	b.n	8004502 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_WRITE_CFG;
 80044a6:	2302      	movs	r3, #2
 80044a8:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? ((AddressSize == MX25UM51245G_3BYTES_SIZE)
                                    ? MX25UM51245G_PAGE_PROG_CMD
                                    : MX25UM51245G_4_BYTE_PAGE_PROG_CMD)
                                 : MX25UM51245G_OCTA_PAGE_PROG_CMD;
 80044aa:	78fb      	ldrb	r3, [r7, #3]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d106      	bne.n	80044be <MX25UM51245G_EnableSTRMemoryMappedMode+0x108>
 80044b0:	78bb      	ldrb	r3, [r7, #2]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <MX25UM51245G_EnableSTRMemoryMappedMode+0x104>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e003      	b.n	80044c2 <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
 80044ba:	2312      	movs	r3, #18
 80044bc:	e001      	b.n	80044c2 <MX25UM51245G_EnableSTRMemoryMappedMode+0x10c>
 80044be:	f241 23ed 	movw	r3, #4845	; 0x12ed
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 80044c2:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80044c8:	f107 0310 	add.w	r3, r7, #16
 80044cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d0:	4619      	mov	r1, r3
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f00e fe0e 	bl	80130f4 <HAL_XSPI_Command>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <MX25UM51245G_EnableSTRMemoryMappedMode+0x12e>
  {
    return MX25UM51245G_ERROR;
 80044de:	f04f 33ff 	mov.w	r3, #4294967295
 80044e2:	e00e      	b.n	8004502 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60bb      	str	r3, [r7, #8]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80044e8:	f107 0308 	add.w	r3, r7, #8
 80044ec:	4619      	mov	r1, r3
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f00f f88c 	bl	801360c <HAL_XSPI_MemoryMapped>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14a>
  {
    return MX25UM51245G_ERROR;
 80044fa:	f04f 33ff 	mov.w	r3, #4294967295
 80044fe:	e000      	b.n	8004502 <MX25UM51245G_EnableSTRMemoryMappedMode+0x14c>
  }

  return MX25UM51245G_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3760      	adds	r7, #96	; 0x60
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <MX25UM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval Memory status
  */
int32_t MX25UM51245G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b098      	sub	sp, #96	; 0x60
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	460b      	mov	r3, r1
 8004514:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef      s_command = {0};
 8004516:	f107 0310 	add.w	r3, r7, #16
 800451a:	2250      	movs	r2, #80	; 0x50
 800451c:	2100      	movs	r1, #0
 800451e:	4618      	mov	r0, r3
 8004520:	f024 ff16 	bl	8029350 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8004524:	f107 0308 	add.w	r3, r7, #8
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_READ_CFG;
 800452e:	2301      	movs	r3, #1
 8004530:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 8004536:	2304      	movs	r3, #4
 8004538:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 800453a:	2308      	movs	r3, #8
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = HAL_XSPI_INSTRUCTION_16_BITS;
 800453e:	2310      	movs	r3, #16
 8004540:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25UM51245G_OCTA_READ_DTR_CMD;
 8004542:	f64e 6311 	movw	r3, #60945	; 0xee11
 8004546:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8004548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 800454e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004552:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8004554:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004558:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 800455a:	2300      	movs	r3, #0
 800455c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_XSPI_DATA_8_LINES;
 800455e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004562:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 8004564:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004568:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 800456a:	2306      	movs	r3, #6
 800456c:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_XSPI_DQS_ENABLE;
 800456e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004572:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8004574:	2300      	movs	r3, #0
 8004576:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004578:	f107 0310 	add.w	r3, r7, #16
 800457c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004580:	4619      	mov	r1, r3
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f00e fdb6 	bl	80130f4 <HAL_XSPI_Command>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <MX25UM51245G_EnableDTRMemoryMappedMode+0x8a>
  {
    return MX25UM51245G_ERROR;
 800458e:	f04f 33ff 	mov.w	r3, #4294967295
 8004592:	e025      	b.n	80045e0 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
 8004594:	2302      	movs	r3, #2
 8004596:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25UM51245G_OCTA_PAGE_PROG_CMD;
 8004598:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800459c:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_XSPI_DQS_DISABLE;
 80045a2:	2300      	movs	r3, #0
 80045a4:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045a6:	f107 0310 	add.w	r3, r7, #16
 80045aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ae:	4619      	mov	r1, r3
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f00e fd9f 	bl	80130f4 <HAL_XSPI_Command>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <MX25UM51245G_EnableDTRMemoryMappedMode+0xb8>
  {
    return MX25UM51245G_ERROR;
 80045bc:	f04f 33ff 	mov.w	r3, #4294967295
 80045c0:	e00e      	b.n	80045e0 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]

  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80045c6:	f107 0308 	add.w	r3, r7, #8
 80045ca:	4619      	mov	r1, r3
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f00f f81d 	bl	801360c <HAL_XSPI_MemoryMapped>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <MX25UM51245G_EnableDTRMemoryMappedMode+0xd4>
  {
    return MX25UM51245G_ERROR;
 80045d8:	f04f 33ff 	mov.w	r3, #4294967295
 80045dc:	e000      	b.n	80045e0 <MX25UM51245G_EnableDTRMemoryMappedMode+0xd6>
  }

  return MX25UM51245G_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3760      	adds	r7, #96	; 0x60
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <MX25UM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b09c      	sub	sp, #112	; 0x70
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	460b      	mov	r3, r1
 80045f2:	70fb      	strb	r3, [r7, #3]
 80045f4:	4613      	mov	r3, r2
 80045f6:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef     s_command = {0};
 80045f8:	f107 0320 	add.w	r3, r7, #32
 80045fc:	2250      	movs	r2, #80	; 0x50
 80045fe:	2100      	movs	r1, #0
 8004600:	4618      	mov	r0, r3
 8004602:	f024 fea5 	bl	8029350 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
 8004606:	f107 030c 	add.w	r3, r7, #12
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	609a      	str	r2, [r3, #8]
 8004612:	60da      	str	r2, [r3, #12]
 8004614:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8004616:	78fb      	ldrb	r3, [r7, #3]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d105      	bne.n	8004628 <MX25UM51245G_WriteEnable+0x40>
 800461c:	78bb      	ldrb	r3, [r7, #2]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d102      	bne.n	8004628 <MX25UM51245G_WriteEnable+0x40>
  {
    return MX25UM51245G_ERROR;
 8004622:	f04f 33ff 	mov.w	r3, #4294967295
 8004626:	e0ab      	b.n	8004780 <MX25UM51245G_WriteEnable+0x198>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004628:	2300      	movs	r3, #0
 800462a:	623b      	str	r3, [r7, #32]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 800462c:	2300      	movs	r3, #0
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <MX25UM51245G_WriteEnable+0x52>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <MX25UM51245G_WriteEnable+0x54>
 800463a:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 800463c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800463e:	78bb      	ldrb	r3, [r7, #2]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <MX25UM51245G_WriteEnable+0x60>
 8004644:	2308      	movs	r3, #8
 8004646:	e000      	b.n	800464a <MX25UM51245G_WriteEnable+0x62>
 8004648:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 800464a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <MX25UM51245G_WriteEnable+0x6e>
 8004652:	2300      	movs	r3, #0
 8004654:	e000      	b.n	8004658 <MX25UM51245G_WriteEnable+0x70>
 8004656:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004658:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_ENABLE_CMD
                                 : MX25UM51245G_OCTA_WRITE_ENABLE_CMD;
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <MX25UM51245G_WriteEnable+0x7c>
 8004660:	2306      	movs	r3, #6
 8004662:	e001      	b.n	8004668 <MX25UM51245G_WriteEnable+0x80>
 8004664:	f240 63f9 	movw	r3, #1785	; 0x6f9
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 800466a:	2300      	movs	r3, #0
 800466c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 800466e:	2300      	movs	r3, #0
 8004670:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 8004672:	2300      	movs	r3, #0
 8004674:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 800467a:	2300      	movs	r3, #0
 800467c:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 800467e:	2300      	movs	r3, #0
 8004680:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004682:	f107 0320 	add.w	r3, r7, #32
 8004686:	f241 3288 	movw	r2, #5000	; 0x1388
 800468a:	4619      	mov	r1, r3
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f00e fd31 	bl	80130f4 <HAL_XSPI_Command>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <MX25UM51245G_WriteEnable+0xb6>
  {
    return MX25UM51245G_ERROR;
 8004698:	f04f 33ff 	mov.w	r3, #4294967295
 800469c:	e070      	b.n	8004780 <MX25UM51245G_WriteEnable+0x198>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
                             ? MX25UM51245G_READ_STATUS_REG_CMD
                             : MX25UM51245G_OCTA_READ_STATUS_REG_CMD;
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <MX25UM51245G_WriteEnable+0xc0>
 80046a4:	2305      	movs	r3, #5
 80046a6:	e001      	b.n	80046ac <MX25UM51245G_WriteEnable+0xc4>
 80046a8:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Instruction    = (Mode == MX25UM51245G_SPI_MODE)
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
 80046ae:	78fb      	ldrb	r3, [r7, #3]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <MX25UM51245G_WriteEnable+0xd0>
 80046b4:	2300      	movs	r3, #0
 80046b6:	e001      	b.n	80046bc <MX25UM51245G_WriteEnable+0xd4>
 80046b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                             ? HAL_XSPI_ADDRESS_DTR_ENABLE
                             : HAL_XSPI_ADDRESS_DTR_DISABLE;
 80046be:	78bb      	ldrb	r3, [r7, #2]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d102      	bne.n	80046ca <MX25UM51245G_WriteEnable+0xe2>
 80046c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046c8:	e000      	b.n	80046cc <MX25UM51245G_WriteEnable+0xe4>
 80046ca:	2300      	movs	r3, #0
  s_command.AddressDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 80046cc:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
 80046ce:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80046d2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d102      	bne.n	80046e4 <MX25UM51245G_WriteEnable+0xfc>
 80046de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046e2:	e001      	b.n	80046e8 <MX25UM51245G_WriteEnable+0x100>
 80046e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80046e8:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDTRMode    = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
 80046ea:	78bb      	ldrb	r3, [r7, #2]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d102      	bne.n	80046f6 <MX25UM51245G_WriteEnable+0x10e>
 80046f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046f4:	e000      	b.n	80046f8 <MX25UM51245G_WriteEnable+0x110>
 80046f6:	2300      	movs	r3, #0
 80046f8:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
                             ? 0U
                             : ((Rate == MX25UM51245G_DTR_TRANSFER)
 80046fa:	78fb      	ldrb	r3, [r7, #3]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d006      	beq.n	800470e <MX25UM51245G_WriteEnable+0x126>
 8004700:	78bb      	ldrb	r3, [r7, #2]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <MX25UM51245G_WriteEnable+0x122>
 8004706:	2305      	movs	r3, #5
 8004708:	e002      	b.n	8004710 <MX25UM51245G_WriteEnable+0x128>
 800470a:	2304      	movs	r3, #4
 800470c:	e000      	b.n	8004710 <MX25UM51245G_WriteEnable+0x128>
 800470e:	2300      	movs	r3, #0
  s_command.DummyCycles    = (Mode == MX25UM51245G_SPI_MODE)
 8004710:	667b      	str	r3, [r7, #100]	; 0x64
                                ? DUMMY_CYCLES_REG_OCTAL_DTR
                                : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength         = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 8004712:	78bb      	ldrb	r3, [r7, #2]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <MX25UM51245G_WriteEnable+0x134>
 8004718:	2302      	movs	r3, #2
 800471a:	e000      	b.n	800471e <MX25UM51245G_WriteEnable+0x136>
 800471c:	2301      	movs	r3, #1
 800471e:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 8004720:	78bb      	ldrb	r3, [r7, #2]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d102      	bne.n	800472c <MX25UM51245G_WriteEnable+0x144>
 8004726:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800472a:	e000      	b.n	800472e <MX25UM51245G_WriteEnable+0x146>
 800472c:	2300      	movs	r3, #0
 800472e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004730:	f107 0320 	add.w	r3, r7, #32
 8004734:	f241 3288 	movw	r2, #5000	; 0x1388
 8004738:	4619      	mov	r1, r3
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f00e fcda 	bl	80130f4 <HAL_XSPI_Command>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <MX25UM51245G_WriteEnable+0x164>
  {
    return MX25UM51245G_ERROR;
 8004746:	f04f 33ff 	mov.w	r3, #4294967295
 800474a:	e019      	b.n	8004780 <MX25UM51245G_WriteEnable+0x198>
  }

  s_config.MatchValue      = 2U;
 800474c:	2302      	movs	r3, #2
 800474e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMask       = 2U;
 8004750:	2302      	movs	r3, #2
 8004752:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_XSPI_MATCH_MODE_AND;
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
  s_config.IntervalTime    = MX25UM51245G_AUTOPOLLING_INTERVAL_TIME;
 8004758:	2310      	movs	r3, #16
 800475a:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
 800475c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004760:	61bb      	str	r3, [r7, #24]

  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004762:	f107 030c 	add.w	r3, r7, #12
 8004766:	f241 3288 	movw	r2, #5000	; 0x1388
 800476a:	4619      	mov	r1, r3
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f00e fec3 	bl	80134f8 <HAL_XSPI_AutoPolling>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <MX25UM51245G_WriteEnable+0x196>
  {
    return MX25UM51245G_ERROR;
 8004778:	f04f 33ff 	mov.w	r3, #4294967295
 800477c:	e000      	b.n	8004780 <MX25UM51245G_WriteEnable+0x198>
  }

  return MX25UM51245G_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3770      	adds	r7, #112	; 0x70
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <MX25UM51245G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25UM51245G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                       MX25UM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b098      	sub	sp, #96	; 0x60
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	607b      	str	r3, [r7, #4]
 8004792:	460b      	mov	r3, r1
 8004794:	72fb      	strb	r3, [r7, #11]
 8004796:	4613      	mov	r3, r2
 8004798:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 800479a:	f107 0310 	add.w	r3, r7, #16
 800479e:	2250      	movs	r2, #80	; 0x50
 80047a0:	2100      	movs	r1, #0
 80047a2:	4618      	mov	r0, r3
 80047a4:	f024 fdd4 	bl	8029350 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 80047a8:	7afb      	ldrb	r3, [r7, #11]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d105      	bne.n	80047ba <MX25UM51245G_WriteCfg2Register+0x32>
 80047ae:	7abb      	ldrb	r3, [r7, #10]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d102      	bne.n	80047ba <MX25UM51245G_WriteCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
 80047b4:	f04f 33ff 	mov.w	r3, #4294967295
 80047b8:	e077      	b.n	80048aa <MX25UM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 80047ba:	2300      	movs	r3, #0
 80047bc:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 80047c2:	7afb      	ldrb	r3, [r7, #11]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <MX25UM51245G_WriteCfg2Register+0x44>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <MX25UM51245G_WriteCfg2Register+0x46>
 80047cc:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 80047ce:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80047d0:	7abb      	ldrb	r3, [r7, #10]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <MX25UM51245G_WriteCfg2Register+0x52>
 80047d6:	2308      	movs	r3, #8
 80047d8:	e000      	b.n	80047dc <MX25UM51245G_WriteCfg2Register+0x54>
 80047da:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 80047de:	7afb      	ldrb	r3, [r7, #11]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <MX25UM51245G_WriteCfg2Register+0x60>
 80047e4:	2300      	movs	r3, #0
 80047e6:	e000      	b.n	80047ea <MX25UM51245G_WriteCfg2Register+0x62>
 80047e8:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 80047ea:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_WRITE_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_WRITE_CFG_REG2_CMD;
 80047ec:	7afb      	ldrb	r3, [r7, #11]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <MX25UM51245G_WriteCfg2Register+0x6e>
 80047f2:	2372      	movs	r3, #114	; 0x72
 80047f4:	e001      	b.n	80047fa <MX25UM51245G_WriteCfg2Register+0x72>
 80047f6:	f247 238d 	movw	r3, #29325	; 0x728d
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 80047fa:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 80047fc:	7afb      	ldrb	r3, [r7, #11]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <MX25UM51245G_WriteCfg2Register+0x80>
 8004802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004806:	e001      	b.n	800480c <MX25UM51245G_WriteCfg2Register+0x84>
 8004808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 800480e:	7abb      	ldrb	r3, [r7, #10]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d102      	bne.n	800481a <MX25UM51245G_WriteCfg2Register+0x92>
 8004814:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004818:	e000      	b.n	800481c <MX25UM51245G_WriteCfg2Register+0x94>
 800481a:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 800481c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 800481e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004822:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8004828:	2300      	movs	r3, #0
 800482a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 800482c:	7afb      	ldrb	r3, [r7, #11]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d102      	bne.n	8004838 <MX25UM51245G_WriteCfg2Register+0xb0>
 8004832:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004836:	e001      	b.n	800483c <MX25UM51245G_WriteCfg2Register+0xb4>
 8004838:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800483c:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 800483e:	7abb      	ldrb	r3, [r7, #10]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d102      	bne.n	800484a <MX25UM51245G_WriteCfg2Register+0xc2>
 8004844:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004848:	e000      	b.n	800484c <MX25UM51245G_WriteCfg2Register+0xc4>
 800484a:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 800484c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DataLength             = (Mode == MX25UM51245G_SPI_MODE) ? 1U : ((Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U);
 8004852:	7afb      	ldrb	r3, [r7, #11]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d006      	beq.n	8004866 <MX25UM51245G_WriteCfg2Register+0xde>
 8004858:	7abb      	ldrb	r3, [r7, #10]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <MX25UM51245G_WriteCfg2Register+0xda>
 800485e:	2302      	movs	r3, #2
 8004860:	e002      	b.n	8004868 <MX25UM51245G_WriteCfg2Register+0xe0>
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <MX25UM51245G_WriteCfg2Register+0xe0>
 8004866:	2301      	movs	r3, #1
 8004868:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 800486a:	2300      	movs	r3, #0
 800486c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 800486e:	2300      	movs	r3, #0
 8004870:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004872:	f107 0310 	add.w	r3, r7, #16
 8004876:	f241 3288 	movw	r2, #5000	; 0x1388
 800487a:	4619      	mov	r1, r3
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f00e fc39 	bl	80130f4 <HAL_XSPI_Command>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <MX25UM51245G_WriteCfg2Register+0x106>
  {
    return MX25UM51245G_ERROR;
 8004888:	f04f 33ff 	mov.w	r3, #4294967295
 800488c:	e00d      	b.n	80048aa <MX25UM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800488e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004892:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f00e fd18 	bl	80132cc <HAL_XSPI_Transmit>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <MX25UM51245G_WriteCfg2Register+0x120>
  {
    return MX25UM51245G_ERROR;
 80048a2:	f04f 33ff 	mov.w	r3, #4294967295
 80048a6:	e000      	b.n	80048aa <MX25UM51245G_WriteCfg2Register+0x122>
  }

  return MX25UM51245G_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3760      	adds	r7, #96	; 0x60
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <MX25UM51245G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25UM51245G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode,
                                      MX25UM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b098      	sub	sp, #96	; 0x60
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	607b      	str	r3, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	72fb      	strb	r3, [r7, #11]
 80048c0:	4613      	mov	r3, r2
 80048c2:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = {0};
 80048c4:	f107 0310 	add.w	r3, r7, #16
 80048c8:	2250      	movs	r2, #80	; 0x50
 80048ca:	2100      	movs	r1, #0
 80048cc:	4618      	mov	r0, r3
 80048ce:	f024 fd3f 	bl	8029350 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 80048d2:	7afb      	ldrb	r3, [r7, #11]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d105      	bne.n	80048e4 <MX25UM51245G_ReadCfg2Register+0x32>
 80048d8:	7abb      	ldrb	r3, [r7, #10]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d102      	bne.n	80048e4 <MX25UM51245G_ReadCfg2Register+0x32>
  {
    return MX25UM51245G_ERROR;
 80048de:	f04f 33ff 	mov.w	r3, #4294967295
 80048e2:	e081      	b.n	80049e8 <MX25UM51245G_ReadCfg2Register+0x136>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 80048ec:	7afb      	ldrb	r3, [r7, #11]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <MX25UM51245G_ReadCfg2Register+0x44>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <MX25UM51245G_ReadCfg2Register+0x46>
 80048f6:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 80048f8:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80048fa:	7abb      	ldrb	r3, [r7, #10]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <MX25UM51245G_ReadCfg2Register+0x52>
 8004900:	2308      	movs	r3, #8
 8004902:	e000      	b.n	8004906 <MX25UM51245G_ReadCfg2Register+0x54>
 8004904:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8004908:	7afb      	ldrb	r3, [r7, #11]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <MX25UM51245G_ReadCfg2Register+0x60>
 800490e:	2300      	movs	r3, #0
 8004910:	e000      	b.n	8004914 <MX25UM51245G_ReadCfg2Register+0x62>
 8004912:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004914:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_READ_CFG_REG2_CMD
                                 : MX25UM51245G_OCTA_READ_CFG_REG2_CMD;
 8004916:	7afb      	ldrb	r3, [r7, #11]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <MX25UM51245G_ReadCfg2Register+0x6e>
 800491c:	2371      	movs	r3, #113	; 0x71
 800491e:	e001      	b.n	8004924 <MX25UM51245G_ReadCfg2Register+0x72>
 8004920:	f247 138e 	movw	r3, #29070	; 0x718e
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004924:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
 8004926:	7afb      	ldrb	r3, [r7, #11]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <MX25UM51245G_ReadCfg2Register+0x80>
 800492c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004930:	e001      	b.n	8004936 <MX25UM51245G_ReadCfg2Register+0x84>
 8004932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_ADDRESS_DTR_ENABLE
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
 8004938:	7abb      	ldrb	r3, [r7, #10]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d102      	bne.n	8004944 <MX25UM51245G_ReadCfg2Register+0x92>
 800493e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004942:	e000      	b.n	8004946 <MX25UM51245G_ReadCfg2Register+0x94>
 8004944:	2300      	movs	r3, #0
  s_command.AddressDTRMode     = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004946:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8004948:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800494c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8004952:	2300      	movs	r3, #0
 8004954:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25UM51245G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
 8004956:	7afb      	ldrb	r3, [r7, #11]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d102      	bne.n	8004962 <MX25UM51245G_ReadCfg2Register+0xb0>
 800495c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004960:	e001      	b.n	8004966 <MX25UM51245G_ReadCfg2Register+0xb4>
 8004962:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004966:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_DATA_DTR_ENABLE
                                 : HAL_XSPI_DATA_DTR_DISABLE;
 8004968:	7abb      	ldrb	r3, [r7, #10]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d102      	bne.n	8004974 <MX25UM51245G_ReadCfg2Register+0xc2>
 800496e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004972:	e000      	b.n	8004976 <MX25UM51245G_ReadCfg2Register+0xc4>
 8004974:	2300      	movs	r3, #0
  s_command.DataDTRMode        = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004976:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? 0U
                                 : ((Rate == MX25UM51245G_DTR_TRANSFER)
 8004978:	7afb      	ldrb	r3, [r7, #11]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d006      	beq.n	800498c <MX25UM51245G_ReadCfg2Register+0xda>
 800497e:	7abb      	ldrb	r3, [r7, #10]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <MX25UM51245G_ReadCfg2Register+0xd6>
 8004984:	2305      	movs	r3, #5
 8004986:	e002      	b.n	800498e <MX25UM51245G_ReadCfg2Register+0xdc>
 8004988:	2304      	movs	r3, #4
 800498a:	e000      	b.n	800498e <MX25UM51245G_ReadCfg2Register+0xdc>
 800498c:	2300      	movs	r3, #0
  s_command.DummyCycles        = (Mode == MX25UM51245G_SPI_MODE)
 800498e:	657b      	str	r3, [r7, #84]	; 0x54
                                    ? DUMMY_CYCLES_REG_OCTAL_DTR
                                    : DUMMY_CYCLES_REG_OCTAL);
  s_command.DataLength             = (Rate == MX25UM51245G_DTR_TRANSFER) ? 2U : 1U;
 8004990:	7abb      	ldrb	r3, [r7, #10]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <MX25UM51245G_ReadCfg2Register+0xe8>
 8004996:	2302      	movs	r3, #2
 8004998:	e000      	b.n	800499c <MX25UM51245G_ReadCfg2Register+0xea>
 800499a:	2301      	movs	r3, #1
 800499c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25UM51245G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
 800499e:	7abb      	ldrb	r3, [r7, #10]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d102      	bne.n	80049aa <MX25UM51245G_ReadCfg2Register+0xf8>
 80049a4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80049a8:	e000      	b.n	80049ac <MX25UM51245G_ReadCfg2Register+0xfa>
 80049aa:	2300      	movs	r3, #0
 80049ac:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 80049ae:	2300      	movs	r3, #0
 80049b0:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049b2:	f107 0310 	add.w	r3, r7, #16
 80049b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ba:	4619      	mov	r1, r3
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f00e fb99 	bl	80130f4 <HAL_XSPI_Command>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <MX25UM51245G_ReadCfg2Register+0x11c>
  {
    return MX25UM51245G_ERROR;
 80049c8:	f04f 33ff 	mov.w	r3, #4294967295
 80049cc:	e00c      	b.n	80049e8 <MX25UM51245G_ReadCfg2Register+0x136>
  }

  /* Reception of the data */
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f00e fcec 	bl	80133b2 <HAL_XSPI_Receive>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <MX25UM51245G_ReadCfg2Register+0x134>
  {
    return MX25UM51245G_ERROR;
 80049e0:	f04f 33ff 	mov.w	r3, #4294967295
 80049e4:	e000      	b.n	80049e8 <MX25UM51245G_ReadCfg2Register+0x136>
  }

  return MX25UM51245G_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3760      	adds	r7, #96	; 0x60
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <MX25UM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b096      	sub	sp, #88	; 0x58
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	70fb      	strb	r3, [r7, #3]
 80049fc:	4613      	mov	r3, r2
 80049fe:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
 8004a00:	f107 0308 	add.w	r3, r7, #8
 8004a04:	2250      	movs	r2, #80	; 0x50
 8004a06:	2100      	movs	r1, #0
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f024 fca1 	bl	8029350 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8004a0e:	78fb      	ldrb	r3, [r7, #3]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d105      	bne.n	8004a20 <MX25UM51245G_ResetEnable+0x30>
 8004a14:	78bb      	ldrb	r3, [r7, #2]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d102      	bne.n	8004a20 <MX25UM51245G_ResetEnable+0x30>
  {
    return MX25UM51245G_ERROR;
 8004a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1e:	e03b      	b.n	8004a98 <MX25UM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004a20:	2300      	movs	r3, #0
 8004a22:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004a28:	78fb      	ldrb	r3, [r7, #3]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <MX25UM51245G_ResetEnable+0x42>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <MX25UM51245G_ResetEnable+0x44>
 8004a32:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8004a34:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8004a36:	78bb      	ldrb	r3, [r7, #2]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <MX25UM51245G_ResetEnable+0x50>
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	e000      	b.n	8004a42 <MX25UM51245G_ResetEnable+0x52>
 8004a40:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004a42:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <MX25UM51245G_ResetEnable+0x5e>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e000      	b.n	8004a50 <MX25UM51245G_ResetEnable+0x60>
 8004a4e:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004a50:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_ENABLE_CMD
                                 : MX25UM51245G_OCTA_RESET_ENABLE_CMD;
 8004a52:	78fb      	ldrb	r3, [r7, #3]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <MX25UM51245G_ResetEnable+0x6c>
 8004a58:	2366      	movs	r3, #102	; 0x66
 8004a5a:	e001      	b.n	8004a60 <MX25UM51245G_ResetEnable+0x70>
 8004a5c:	f246 6399 	movw	r3, #26265	; 0x6699
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004a60:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8004a66:	2300      	movs	r3, #0
 8004a68:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8004a72:	2300      	movs	r3, #0
 8004a74:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8004a76:	2300      	movs	r3, #0
 8004a78:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a7a:	f107 0308 	add.w	r3, r7, #8
 8004a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a82:	4619      	mov	r1, r3
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f00e fb35 	bl	80130f4 <HAL_XSPI_Command>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <MX25UM51245G_ResetEnable+0xa6>
  {
    return MX25UM51245G_ERROR;
 8004a90:	f04f 33ff 	mov.w	r3, #4294967295
 8004a94:	e000      	b.n	8004a98 <MX25UM51245G_ResetEnable+0xa8>
  }

  return MX25UM51245G_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3758      	adds	r7, #88	; 0x58
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <MX25UM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25UM51245G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX25UM51245G_Interface_t Mode, MX25UM51245G_Transfer_t Rate)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b096      	sub	sp, #88	; 0x58
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
 8004aac:	4613      	mov	r3, r2
 8004aae:	70bb      	strb	r3, [r7, #2]
  XSPI_RegularCmdTypeDef s_command = {0};
 8004ab0:	f107 0308 	add.w	r3, r7, #8
 8004ab4:	2250      	movs	r2, #80	; 0x50
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f024 fc49 	bl	8029350 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25UM51245G_SPI_MODE) && (Rate == MX25UM51245G_DTR_TRANSFER))
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d105      	bne.n	8004ad0 <MX25UM51245G_ResetMemory+0x30>
 8004ac4:	78bb      	ldrb	r3, [r7, #2]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d102      	bne.n	8004ad0 <MX25UM51245G_ResetMemory+0x30>
  {
    return MX25UM51245G_ERROR;
 8004aca:	f04f 33ff 	mov.w	r3, #4294967295
 8004ace:	e03b      	b.n	8004b48 <MX25UM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_XSPI_OPTYPE_COMMON_CFG;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60bb      	str	r3, [r7, #8]
  s_command.IOSelect           = HAL_XSPI_SELECT_IO_7_0;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_1_LINE
                                 : HAL_XSPI_INSTRUCTION_8_LINES;
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <MX25UM51245G_ResetMemory+0x42>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <MX25UM51245G_ResetMemory+0x44>
 8004ae2:	2304      	movs	r3, #4
  s_command.InstructionMode    = (Mode == MX25UM51245G_SPI_MODE)
 8004ae4:	617b      	str	r3, [r7, #20]
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
                                 ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                 : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8004ae6:	78bb      	ldrb	r3, [r7, #2]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <MX25UM51245G_ResetMemory+0x50>
 8004aec:	2308      	movs	r3, #8
 8004aee:	e000      	b.n	8004af2 <MX25UM51245G_ResetMemory+0x52>
 8004af0:	2300      	movs	r3, #0
  s_command.InstructionDTRMode = (Rate == MX25UM51245G_DTR_TRANSFER)
 8004af2:	61fb      	str	r3, [r7, #28]
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
                                 ? HAL_XSPI_INSTRUCTION_8_BITS
                                 : HAL_XSPI_INSTRUCTION_16_BITS;
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <MX25UM51245G_ResetMemory+0x5e>
 8004afa:	2300      	movs	r3, #0
 8004afc:	e000      	b.n	8004b00 <MX25UM51245G_ResetMemory+0x60>
 8004afe:	2310      	movs	r3, #16
  s_command.InstructionWidth   = (Mode == MX25UM51245G_SPI_MODE)
 8004b00:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
                                 ? MX25UM51245G_RESET_MEMORY_CMD
                                 : MX25UM51245G_OCTA_RESET_MEMORY_CMD;
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <MX25UM51245G_ResetMemory+0x6c>
 8004b08:	2399      	movs	r3, #153	; 0x99
 8004b0a:	e001      	b.n	8004b10 <MX25UM51245G_ResetMemory+0x70>
 8004b0c:	f649 1366 	movw	r3, #39270	; 0x9966
  s_command.Instruction        = (Mode == MX25UM51245G_SPI_MODE)
 8004b10:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8004b12:	2300      	movs	r3, #0
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8004b16:	2300      	movs	r3, #0
 8004b18:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_XSPI_DATA_NONE;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8004b22:	2300      	movs	r3, #0
 8004b24:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_XSPI_SIOO_INST_EVERY_CMD;
 8004b26:	2300      	movs	r3, #0
 8004b28:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b2a:	f107 0308 	add.w	r3, r7, #8
 8004b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b32:	4619      	mov	r1, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f00e fadd 	bl	80130f4 <HAL_XSPI_Command>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d002      	beq.n	8004b46 <MX25UM51245G_ResetMemory+0xa6>
  {
    return MX25UM51245G_ERROR;
 8004b40:	f04f 33ff 	mov.w	r3, #4294967295
 8004b44:	e000      	b.n	8004b48 <MX25UM51245G_ResetMemory+0xa8>
  }

  return MX25UM51245G_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3758      	adds	r7, #88	; 0x58
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <SITRONIX_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t SITRONIX_RegisterBusIO(SITRONIX_Object_t *pObj, SITRONIX_IO_t *pIO)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <SITRONIX_RegisterBusIO+0x18>
  {
    ret = SITRONIX_ERROR;
 8004b60:	f04f 33ff 	mov.w	r3, #4294967295
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	e033      	b.n	8004bd0 <SITRONIX_RegisterBusIO+0x80>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	891a      	ldrh	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadData  = pIO->ReadData;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	699a      	ldr	r2, [r3, #24]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a0e      	ldr	r2, [pc, #56]	; (8004bdc <SITRONIX_RegisterBusIO+0x8c>)
 8004ba4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a0d      	ldr	r2, [pc, #52]	; (8004be0 <SITRONIX_RegisterBusIO+0x90>)
 8004baa:	61da      	str	r2, [r3, #28]
    pObj->Ctx.ReadData = ReadDataWrap;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a0d      	ldr	r2, [pc, #52]	; (8004be4 <SITRONIX_RegisterBusIO+0x94>)
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.handle   = pObj;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	629a      	str	r2, [r3, #40]	; 0x28

    if (pObj->IO.Init != NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d004      	beq.n	8004bca <SITRONIX_RegisterBusIO+0x7a>
    {
      ret = pObj->IO.Init();
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4798      	blx	r3
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	e002      	b.n	8004bd0 <SITRONIX_RegisterBusIO+0x80>
    }
    else
    {
      ret = SITRONIX_ERROR;
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295
 8004bce:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	08004e8b 	.word	0x08004e8b
 8004be0:	08004ebf 	.word	0x08004ebf
 8004be4:	08004ef3 	.word	0x08004ef3

08004be8 <SITRONIX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to SITRONIX sensor capabilities
  * @retval Component status
  */
int32_t SITRONIX_GetCapabilities(SITRONIX_Object_t *pObj, SITRONIX_Capabilities_t *Capabilities)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = SITRONIX_MAX_DETECTABLE_TOUCH;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	220a      	movs	r2, #10
 8004c02:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = SITRONIX_MAX_X_LENGTH;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004c0a:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = SITRONIX_MAX_Y_LENGTH;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004c12:	609a      	str	r2, [r3, #8]

  return SITRONIX_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <SITRONIX_Init>:
  *         from MCU to SITRONIX : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_Init(SITRONIX_Object_t *pObj)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b08a      	sub	sp, #40	; 0x28
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]

  int32_t ret = SITRONIX_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t data[28U];

  if (pObj->IsInitialized == 0U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d114      	bne.n	8004c62 <SITRONIX_Init+0x40>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4798      	blx	r3

    if (sitronix_read_data(&pObj->Ctx, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	331c      	adds	r3, #28
 8004c42:	f107 0108 	add.w	r1, r7, #8
 8004c46:	221c      	movs	r2, #28
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 f97e 	bl	8004f4a <sitronix_read_data>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <SITRONIX_Init+0x38>
    {
      ret = SITRONIX_ERROR;
 8004c54:	f04f 33ff 	mov.w	r3, #4294967295
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
    }

    pObj->IsInitialized = 1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  if (ret != SITRONIX_OK)
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <SITRONIX_Init+0x4c>
  {
    ret = SITRONIX_ERROR;
 8004c68:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3728      	adds	r7, #40	; 0x28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <SITRONIX_DeInit>:
  *         from MCU to SITRONIX : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_DeInit(SITRONIX_Object_t *pObj)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d103      	bne.n	8004c92 <SITRONIX_DeInit+0x1a>
  {
    pObj->IsInitialized = 0;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  return SITRONIX_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <SITRONIX_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval Component status
  */
int32_t SITRONIX_GestureConfig(SITRONIX_Object_t *pObj, SITRONIX_Gesture_Init_t *GestureInit)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  return SITRONIX_ERROR;
 8004caa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <SITRONIX_ReadID>:
  * @param  pObj Component object pointer
  * @param  Id Pointer to component's ID
  * @retval Component status
  */
int32_t SITRONIX_ReadID(SITRONIX_Object_t *pObj, uint32_t *Id)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b08c      	sub	sp, #48	; 0x30
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t data[28];
  uint8_t trial = 0;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  for (trial = 0; trial < 10; trial++)
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cd4:	e01c      	b.n	8004d10 <SITRONIX_ReadID+0x56>
  {
    if (sitronix_read_data(&pObj->Ctx, data, 28) != SITRONIX_OK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	331c      	adds	r3, #28
 8004cda:	f107 010c 	add.w	r1, r7, #12
 8004cde:	221c      	movs	r2, #28
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 f932 	bl	8004f4a <sitronix_read_data>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <SITRONIX_ReadID+0x3a>
    {
      ret = SITRONIX_ERROR;
 8004cec:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf2:	e008      	b.n	8004d06 <SITRONIX_ReadID+0x4c>
    }
    else
    {
      if ((uint32_t)data[0] == SITRONIX_ID)
 8004cf4:	7b3b      	ldrb	r3, [r7, #12]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d105      	bne.n	8004d06 <SITRONIX_ReadID+0x4c>
      {
        *Id = (uint32_t)data[0];
 8004cfa:	7b3b      	ldrb	r3, [r7, #12]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	601a      	str	r2, [r3, #0]
        return ret;
 8004d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d04:	e009      	b.n	8004d1a <SITRONIX_ReadID+0x60>
  for (trial = 0; trial < 10; trial++)
 8004d06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d14:	2b09      	cmp	r3, #9
 8004d16:	d9de      	bls.n	8004cd6 <SITRONIX_ReadID+0x1c>
      }
    }
  }
  return ret;
 8004d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3730      	adds	r7, #48	; 0x30
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <SITRONIX_GetState>:
  * @param  pObj Component object pointer
  * @param  State Single Touch structure pointer
  * @retval Component status.
  */
int32_t SITRONIX_GetState(SITRONIX_Object_t *pObj, SITRONIX_State_t *State)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b086      	sub	sp, #24
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]
  uint8_t data[5];

  if (sitronix_read_data(&pObj->Ctx, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	331c      	adds	r3, #28
 8004d34:	f107 010c 	add.w	r1, r7, #12
 8004d38:	2205      	movs	r2, #5
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 f905 	bl	8004f4a <sitronix_read_data>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <SITRONIX_GetState+0x2c>
  {
    ret = SITRONIX_ERROR;
 8004d46:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	e017      	b.n	8004d7e <SITRONIX_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = ((((uint32_t)data[2] & SITRONIX_TOUCH_POS_LSB_MASK) << 4) | ((uint32_t)data[3]));
 8004d4e:	7bbb      	ldrb	r3, [r7, #14]
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d56:	7bfa      	ldrb	r2, [r7, #15]
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & SITRONIX_TOUCH_POS_MSB_MASK) << 8) | ((uint32_t)data[4]);
 8004d5e:	7bbb      	ldrb	r3, [r7, #14]
 8004d60:	021b      	lsls	r3, r3, #8
 8004d62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d66:	7c3a      	ldrb	r2, [r7, #16]
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	609a      	str	r2, [r3, #8]
	
    State->TouchDetected = ((data[2] & 0x80) == 0x80 ? 1 : 0);
 8004d6e:	7bbb      	ldrb	r3, [r7, #14]
 8004d70:	b25b      	sxtb	r3, r3
 8004d72:	11db      	asrs	r3, r3, #7
 8004d74:	b25b      	sxtb	r3, r3
 8004d76:	f003 0201 	and.w	r2, r3, #1
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8004d7e:	697b      	ldr	r3, [r7, #20]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <SITRONIX_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval Component status.
  */
int32_t SITRONIX_GetMultiTouchState(SITRONIX_Object_t *pObj, SITRONIX_MultiTouch_State_t *State)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	; 0x28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  int32_t ret = SITRONIX_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t  data[28];

  State->TouchDetected = (uint32_t)SITRONIX_DetectTouch(pObj);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f855 	bl	8004e46 <SITRONIX_DetectTouch>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	461a      	mov	r2, r3
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	601a      	str	r2, [r3, #0]

  if (sitronix_read_reg(&pObj->Ctx, SITRONIX_P1_XH_REG, data, (uint16_t)sizeof(data)) != SITRONIX_OK)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f103 001c 	add.w	r0, r3, #28
 8004daa:	f107 0208 	add.w	r2, r7, #8
 8004dae:	231c      	movs	r3, #28
 8004db0:	2109      	movs	r1, #9
 8004db2:	f000 f8b3 	bl	8004f1c <sitronix_read_reg>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <SITRONIX_GetMultiTouchState+0x3a>
  {
    ret = SITRONIX_ERROR;
 8004dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
  else
  {
    /* To be implemented */
  }

  return ret;
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3728      	adds	r7, #40	; 0x28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <SITRONIX_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId gesture ID
  * @retval Component status
  */
int32_t SITRONIX_GetGesture(SITRONIX_Object_t *pObj, uint8_t *GestureId)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <SITRONIX_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_EnableIT(SITRONIX_Object_t *pObj)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <SITRONIX_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_DisableIT(SITRONIX_Object_t *pObj)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004e06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <SITRONIX_ITStatus>:
  *         @note : This feature is not supported by SITRONIX.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_ITStatus(SITRONIX_Object_t *pObj)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <SITRONIX_ClearIT>:
  *         @note : This feature is not supported by SITRONIX.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t SITRONIX_ClearIT(SITRONIX_Object_t *pObj)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return SITRONIX_OK as feature not supported by SITRONIX */
  return SITRONIX_ERROR;
 8004e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <SITRONIX_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be between 0 and10) or SITRONIX_ERROR
  *         in case of error
  */
static int32_t SITRONIX_DetectTouch(SITRONIX_Object_t *pObj)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b08c      	sub	sp, #48	; 0x30
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch = 0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t data[28];

  if (sitronix_read_data(&pObj->Ctx, (uint8_t *)&data, 28) != SITRONIX_OK)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	331c      	adds	r3, #28
 8004e58:	f107 010c 	add.w	r1, r7, #12
 8004e5c:	221c      	movs	r2, #28
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 f873 	bl	8004f4a <sitronix_read_data>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <SITRONIX_DetectTouch+0x2c>
  {
    ret = SITRONIX_ERROR;
 8004e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e70:	e006      	b.n	8004e80 <SITRONIX_DetectTouch+0x3a>
  }
  else
  {
    nb_touch = ((data[2] & 0x80) == 0x80 ? 1 : 0);
 8004e72:	7bbb      	ldrb	r3, [r7, #14]
 8004e74:	09db      	lsrs	r3, r3, #7
 8004e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    ret = (int32_t)nb_touch;
 8004e7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  return ret;
 8004e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3730      	adds	r7, #48	; 0x30
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004e8a:	b590      	push	{r4, r7, lr}
 8004e8c:	b087      	sub	sp, #28
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	461a      	mov	r2, r3
 8004e96:	460b      	mov	r3, r1
 8004e98:	72fb      	strb	r3, [r7, #11]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	813b      	strh	r3, [r7, #8]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	691c      	ldr	r4, [r3, #16]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	8918      	ldrh	r0, [r3, #8]
 8004eaa:	7afb      	ldrb	r3, [r7, #11]
 8004eac:	b299      	uxth	r1, r3
 8004eae:	893b      	ldrh	r3, [r7, #8]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	47a0      	blx	r4
 8004eb4:	4603      	mov	r3, r0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd90      	pop	{r4, r7, pc}

08004ebe <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ebe:	b590      	push	{r4, r7, lr}
 8004ec0:	b087      	sub	sp, #28
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	460b      	mov	r3, r1
 8004ecc:	72fb      	strb	r3, [r7, #11]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	813b      	strh	r3, [r7, #8]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	68dc      	ldr	r4, [r3, #12]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	8918      	ldrh	r0, [r3, #8]
 8004ede:	7afb      	ldrb	r3, [r7, #11]
 8004ee0:	b299      	uxth	r1, r3
 8004ee2:	893b      	ldrh	r3, [r7, #8]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	47a0      	blx	r4
 8004ee8:	4603      	mov	r3, r0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd90      	pop	{r4, r7, pc}

08004ef2 <ReadDataWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadDataWrap(void *handle, uint8_t *pData, uint16_t Length)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b086      	sub	sp, #24
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	4613      	mov	r3, r2
 8004efe:	80fb      	strh	r3, [r7, #6]
  SITRONIX_Object_t *pObj = (SITRONIX_Object_t *)handle;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadData(pObj->IO.Address, pData, Length);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	8910      	ldrh	r0, [r2, #8]
 8004f0c:	88fa      	ldrh	r2, [r7, #6]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	4798      	blx	r3
 8004f12:	4603      	mov	r3, r0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <sitronix_read_reg>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : pdata Read
  *******************************************************************************/
int32_t sitronix_read_reg(sitronix_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8004f1c:	b590      	push	{r4, r7, lr}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	607a      	str	r2, [r7, #4]
 8004f26:	461a      	mov	r2, r3
 8004f28:	460b      	mov	r3, r1
 8004f2a:	72fb      	strb	r3, [r7, #11]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685c      	ldr	r4, [r3, #4]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68d8      	ldr	r0, [r3, #12]
 8004f38:	893b      	ldrh	r3, [r7, #8]
 8004f3a:	7af9      	ldrb	r1, [r7, #11]
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	47a0      	blx	r4
 8004f40:	4603      	mov	r3, r0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd90      	pop	{r4, r7, pc}

08004f4a <sitronix_read_data>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : pdata Read
  *******************************************************************************/
int32_t sitronix_read_data(sitronix_ctx_t *ctx, uint8_t *pdata, uint16_t length)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	4613      	mov	r3, r2
 8004f56:	80fb      	strh	r3, [r7, #6]
  return ctx->ReadData(ctx->handle, pdata, length);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	68d0      	ldr	r0, [r2, #12]
 8004f60:	88fa      	ldrh	r2, [r7, #6]
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	4798      	blx	r3
 8004f66:	4603      	mov	r3, r0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <BSP_I2C5_Init>:
/**
  * @brief  Initializes I2C5 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C5_Init(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	607b      	str	r3, [r7, #4]

  hbus_i2c5.Instance = BUS_I2C5;
 8004f7a:	4b16      	ldr	r3, [pc, #88]	; (8004fd4 <BSP_I2C5_Init+0x64>)
 8004f7c:	4a16      	ldr	r2, [pc, #88]	; (8004fd8 <BSP_I2C5_Init+0x68>)
 8004f7e:	601a      	str	r2, [r3, #0]

  if (I2c5InitCounter == 0U)
 8004f80:	4b16      	ldr	r3, [pc, #88]	; (8004fdc <BSP_I2C5_Init+0x6c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d11f      	bne.n	8004fc8 <BSP_I2C5_Init+0x58>
  {
    I2c5InitCounter++;
 8004f88:	4b14      	ldr	r3, [pc, #80]	; (8004fdc <BSP_I2C5_Init+0x6c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	4a13      	ldr	r2, [pc, #76]	; (8004fdc <BSP_I2C5_Init+0x6c>)
 8004f90:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c5) == HAL_I2C_STATE_RESET)
 8004f92:	4810      	ldr	r0, [pc, #64]	; (8004fd4 <BSP_I2C5_Init+0x64>)
 8004f94:	f005 ffb6 	bl	800af04 <HAL_I2C_GetState>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d114      	bne.n	8004fc8 <BSP_I2C5_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C5 Msp */
      I2C5_MspInit(&hbus_i2c5);
 8004f9e:	480d      	ldr	r0, [pc, #52]	; (8004fd4 <BSP_I2C5_Init+0x64>)
 8004fa0:	f000 fb88 	bl	80056b4 <I2C5_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */
      if (MX_I2C5_Init(&hbus_i2c5, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C5_FREQUENCY)) != HAL_OK)
 8004fa4:	f008 fa82 	bl	800d4ac <HAL_RCC_GetPCLK1Freq>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	490d      	ldr	r1, [pc, #52]	; (8004fe0 <BSP_I2C5_Init+0x70>)
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 f90b 	bl	80051c8 <I2C_GetTiming>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4807      	ldr	r0, [pc, #28]	; (8004fd4 <BSP_I2C5_Init+0x64>)
 8004fb8:	f000 f838 	bl	800502c <MX_I2C5_Init>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <BSP_I2C5_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8004fc2:	f06f 0307 	mvn.w	r3, #7
 8004fc6:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS > 0) */
  }
}
return ret;
 8004fc8:	687b      	ldr	r3, [r7, #4]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20197148 	.word	0x20197148
 8004fd8:	40009800 	.word	0x40009800
 8004fdc:	20196740 	.word	0x20196740
 8004fe0:	00061a80 	.word	0x00061a80

08004fe4 <BSP_I2C5_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C5_DeInit(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	607b      	str	r3, [r7, #4]

  I2c5InitCounter--;
 8004fee:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <BSP_I2C5_DeInit+0x40>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	4a0b      	ldr	r2, [pc, #44]	; (8005024 <BSP_I2C5_DeInit+0x40>)
 8004ff6:	6013      	str	r3, [r2, #0]

  if (I2c5InitCounter == 0U)
 8004ff8:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <BSP_I2C5_DeInit+0x40>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10b      	bne.n	8005018 <BSP_I2C5_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C5_MspDeInit(&hbus_i2c5);
 8005000:	4809      	ldr	r0, [pc, #36]	; (8005028 <BSP_I2C5_DeInit+0x44>)
 8005002:	f000 fbbd 	bl	8005780 <I2C5_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c5) != HAL_OK)
 8005006:	4808      	ldr	r0, [pc, #32]	; (8005028 <BSP_I2C5_DeInit+0x44>)
 8005008:	f005 fc28 	bl	800a85c <HAL_I2C_DeInit>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <BSP_I2C5_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8005012:	f06f 0307 	mvn.w	r3, #7
 8005016:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8005018:	687b      	ldr	r3, [r7, #4]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20196740 	.word	0x20196740
 8005028:	20197148 	.word	0x20197148

0800502c <MX_I2C5_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C5_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f005 fb67 	bl	800a73e <HAL_I2C_Init>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <MX_I2C5_Init+0x50>
  {
    status = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	73fb      	strb	r3, [r7, #15]
 800507a:	e014      	b.n	80050a6 <MX_I2C5_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800507c:	2300      	movs	r3, #0
 800507e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f006 fa92 	bl	800b5ac <HAL_I2CEx_ConfigAnalogFilter>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <MX_I2C5_Init+0x68>
    {
      status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	73fb      	strb	r3, [r7, #15]
 8005092:	e008      	b.n	80050a6 <MX_I2C5_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8005094:	2100      	movs	r1, #0
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f006 fad3 	bl	800b642 <HAL_I2CEx_ConfigDigitalFilter>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <MX_I2C5_Init+0x7a>
      {
        status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <BSP_I2C5_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C5_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60ba      	str	r2, [r7, #8]
 80050b8:	461a      	mov	r2, r3
 80050ba:	4603      	mov	r3, r0
 80050bc:	81fb      	strh	r3, [r7, #14]
 80050be:	460b      	mov	r3, r1
 80050c0:	81bb      	strh	r3, [r7, #12]
 80050c2:	4613      	mov	r3, r2
 80050c4:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80050c6:	89b9      	ldrh	r1, [r7, #12]
 80050c8:	89f8      	ldrh	r0, [r7, #14]
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f000 fb77 	bl	80057c4 <I2C5_WriteReg>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d102      	bne.n	80050e2 <BSP_I2C5_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	e00c      	b.n	80050fc <BSP_I2C5_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 80050e2:	4809      	ldr	r0, [pc, #36]	; (8005108 <BSP_I2C5_WriteReg+0x58>)
 80050e4:	f005 ff1c 	bl	800af20 <HAL_I2C_GetError>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d103      	bne.n	80050f6 <BSP_I2C5_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80050ee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	e002      	b.n	80050fc <BSP_I2C5_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80050f6:	f06f 0303 	mvn.w	r3, #3
 80050fa:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 80050fc:	697b      	ldr	r3, [r7, #20]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20197148 	.word	0x20197148

0800510c <BSP_I2C5_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C5_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af02      	add	r7, sp, #8
 8005112:	60ba      	str	r2, [r7, #8]
 8005114:	461a      	mov	r2, r3
 8005116:	4603      	mov	r3, r0
 8005118:	81fb      	strh	r3, [r7, #14]
 800511a:	460b      	mov	r3, r1
 800511c:	81bb      	strh	r3, [r7, #12]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8005122:	89b9      	ldrh	r1, [r7, #12]
 8005124:	89f8      	ldrh	r0, [r7, #14]
 8005126:	88fb      	ldrh	r3, [r7, #6]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2201      	movs	r2, #1
 800512e:	f000 fb6f 	bl	8005810 <I2C5_ReadReg>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d102      	bne.n	800513e <BSP_I2C5_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	e00c      	b.n	8005158 <BSP_I2C5_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 800513e:	4809      	ldr	r0, [pc, #36]	; (8005164 <BSP_I2C5_ReadReg+0x58>)
 8005140:	f005 feee 	bl	800af20 <HAL_I2C_GetError>
 8005144:	4603      	mov	r3, r0
 8005146:	2b04      	cmp	r3, #4
 8005148:	d103      	bne.n	8005152 <BSP_I2C5_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800514a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	e002      	b.n	8005158 <BSP_I2C5_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005152:	f06f 0303 	mvn.w	r3, #3
 8005156:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8005158:	697b      	ldr	r3, [r7, #20]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20197148 	.word	0x20197148

08005168 <BSP_I2C5_Recv>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C5_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	4603      	mov	r3, r0
 8005170:	6039      	str	r1, [r7, #0]
 8005172:	80fb      	strh	r3, [r7, #6]
 8005174:	4613      	mov	r3, r2
 8005176:	80bb      	strh	r3, [r7, #4]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C5_Recv(DevAddr, pData, Length) == 0)
 8005178:	88ba      	ldrh	r2, [r7, #4]
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	6839      	ldr	r1, [r7, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fb6c 	bl	800585c <I2C5_Recv>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d102      	bne.n	8005190 <BSP_I2C5_Recv+0x28>
  {
    ret = BSP_ERROR_NONE;
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	e00c      	b.n	80051aa <BSP_I2C5_Recv+0x42>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c5) == HAL_I2C_ERROR_AF)
 8005190:	4808      	ldr	r0, [pc, #32]	; (80051b4 <BSP_I2C5_Recv+0x4c>)
 8005192:	f005 fec5 	bl	800af20 <HAL_I2C_GetError>
 8005196:	4603      	mov	r3, r0
 8005198:	2b04      	cmp	r3, #4
 800519a:	d103      	bne.n	80051a4 <BSP_I2C5_Recv+0x3c>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800519c:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	e002      	b.n	80051aa <BSP_I2C5_Recv+0x42>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80051a4:	f06f 0303 	mvn.w	r3, #3
 80051a8:	60fb      	str	r3, [r7, #12]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 80051aa:	68fb      	ldr	r3, [r7, #12]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20197148 	.word	0x20197148

080051b8 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 80051bc:	f002 fc1e 	bl	80079fc <HAL_GetTick>
 80051c0:	4603      	mov	r3, r0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d06b      	beq.n	80052b4 <I2C_GetTiming+0xec>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d068      	beq.n	80052b4 <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80051e2:	2300      	movs	r3, #0
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	e060      	b.n	80052aa <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80051e8:	4a35      	ldr	r2, [pc, #212]	; (80052c0 <I2C_GetTiming+0xf8>)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	212c      	movs	r1, #44	; 0x2c
 80051ee:	fb01 f303 	mul.w	r3, r1, r3
 80051f2:	4413      	add	r3, r2
 80051f4:	3304      	adds	r3, #4
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d352      	bcc.n	80052a4 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80051fe:	4a30      	ldr	r2, [pc, #192]	; (80052c0 <I2C_GetTiming+0xf8>)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	212c      	movs	r1, #44	; 0x2c
 8005204:	fb01 f303 	mul.w	r3, r1, r3
 8005208:	4413      	add	r3, r2
 800520a:	3308      	adds	r3, #8
 800520c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d847      	bhi.n	80052a4 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8005214:	6939      	ldr	r1, [r7, #16]
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f856 	bl	80052c8 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800521c:	6939      	ldr	r1, [r7, #16]
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f940 	bl	80054a4 <I2C_Compute_SCLL_SCLH>
 8005224:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b7f      	cmp	r3, #127	; 0x7f
 800522a:	d842      	bhi.n	80052b2 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 800522c:	4925      	ldr	r1, [pc, #148]	; (80052c4 <I2C_GetTiming+0xfc>)
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 800523e:	4821      	ldr	r0, [pc, #132]	; (80052c4 <I2C_GetTiming+0xfc>)
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4403      	add	r3, r0
 800524c:	3304      	adds	r3, #4
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	051b      	lsls	r3, r3, #20
 8005252:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8005256:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8005258:	481a      	ldr	r0, [pc, #104]	; (80052c4 <I2C_GetTiming+0xfc>)
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4613      	mov	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4403      	add	r3, r0
 8005266:	3308      	adds	r3, #8
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	041b      	lsls	r3, r3, #16
 800526c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8005270:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 8005272:	4814      	ldr	r0, [pc, #80]	; (80052c4 <I2C_GetTiming+0xfc>)
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4403      	add	r3, r0
 8005280:	330c      	adds	r3, #12
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	021b      	lsls	r3, r3, #8
 8005286:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8005288:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800528a:	480e      	ldr	r0, [pc, #56]	; (80052c4 <I2C_GetTiming+0xfc>)
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4403      	add	r3, r0
 8005298:	3310      	adds	r3, #16
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 800529e:	430b      	orrs	r3, r1
 80052a0:	617b      	str	r3, [r7, #20]
        }
        break;
 80052a2:	e006      	b.n	80052b2 <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	3301      	adds	r3, #1
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d99b      	bls.n	80051e8 <I2C_GetTiming+0x20>
 80052b0:	e000      	b.n	80052b4 <I2C_GetTiming+0xec>
        break;
 80052b2:	bf00      	nop
      }
    }
  }

  return ret;
 80052b4:	697b      	ldr	r3, [r7, #20]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	0802b90c 	.word	0x0802b90c
 80052c4:	20196744 	.word	0x20196744

080052c8 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b08f      	sub	sp, #60	; 0x3c
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80052d2:	2310      	movs	r3, #16
 80052d4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t presc;
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	085a      	lsrs	r2, r3, #1
 80052da:	4b6e      	ldr	r3, [pc, #440]	; (8005494 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80052dc:	4413      	add	r3, r2
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80052e4:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80052e6:	2332      	movs	r3, #50	; 0x32
 80052e8:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80052ea:	f44f 7382 	mov.w	r3, #260	; 0x104
 80052ee:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80052f0:	4a69      	ldr	r2, [pc, #420]	; (8005498 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	212c      	movs	r1, #44	; 0x2c
 80052f6:	fb01 f303 	mul.w	r3, r1, r3
 80052fa:	4413      	add	r3, r2
 80052fc:	3324      	adds	r3, #36	; 0x24
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4618      	mov	r0, r3
 8005302:	4a65      	ldr	r2, [pc, #404]	; (8005498 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	212c      	movs	r1, #44	; 0x2c
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	4413      	add	r3, r2
 800530e:	330c      	adds	r3, #12
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005314:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005316:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005318:	495f      	ldr	r1, [pc, #380]	; (8005498 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	202c      	movs	r0, #44	; 0x2c
 800531e:	fb00 f303 	mul.w	r3, r0, r3
 8005322:	440b      	add	r3, r1
 8005324:	3328      	adds	r3, #40	; 0x28
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3303      	adds	r3, #3
 800532a:	69f9      	ldr	r1, [r7, #28]
 800532c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005334:	4a58      	ldr	r2, [pc, #352]	; (8005498 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	212c      	movs	r1, #44	; 0x2c
 800533a:	fb01 f303 	mul.w	r3, r1, r3
 800533e:	4413      	add	r3, r2
 8005340:	3310      	adds	r3, #16
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	4a54      	ldr	r2, [pc, #336]	; (8005498 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	212c      	movs	r1, #44	; 0x2c
 800534c:	fb01 f303 	mul.w	r3, r1, r3
 8005350:	4413      	add	r3, r2
 8005352:	3320      	adds	r3, #32
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8005358:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800535a:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800535c:	494e      	ldr	r1, [pc, #312]	; (8005498 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	202c      	movs	r0, #44	; 0x2c
 8005362:	fb00 f303 	mul.w	r3, r0, r3
 8005366:	440b      	add	r3, r1
 8005368:	3328      	adds	r3, #40	; 0x28
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3304      	adds	r3, #4
 800536e:	69f9      	ldr	r1, [r7, #28]
 8005370:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8005378:	4a47      	ldr	r2, [pc, #284]	; (8005498 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	212c      	movs	r1, #44	; 0x2c
 800537e:	fb01 f303 	mul.w	r3, r1, r3
 8005382:	4413      	add	r3, r2
 8005384:	3320      	adds	r3, #32
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4618      	mov	r0, r3
 800538a:	4a43      	ldr	r2, [pc, #268]	; (8005498 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	212c      	movs	r1, #44	; 0x2c
 8005390:	fb01 f303 	mul.w	r3, r1, r3
 8005394:	4413      	add	r3, r2
 8005396:	3314      	adds	r3, #20
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4403      	add	r3, r0
 800539c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	dc01      	bgt.n	80053a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80053a4:	2300      	movs	r3, #0
 80053a6:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 80053a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	dc01      	bgt.n	80053b2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80053b2:	2300      	movs	r3, #0
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053b6:	e062      	b.n	800547e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80053b8:	2300      	movs	r3, #0
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
 80053bc:	e059      	b.n	8005472 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	3301      	adds	r3, #1
 80053c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c4:	3201      	adds	r2, #1
 80053c6:	fb03 f202 	mul.w	r2, r3, r2
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	fb02 f303 	mul.w	r3, r2, r3
 80053d0:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d348      	bcc.n	800546c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80053da:	2300      	movs	r3, #0
 80053dc:	623b      	str	r3, [r7, #32]
 80053de:	e042      	b.n	8005466 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	3301      	adds	r3, #1
 80053e4:	6a3a      	ldr	r2, [r7, #32]
 80053e6:	fb03 f202 	mul.w	r2, r3, r2
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	fb02 f303 	mul.w	r3, r2, r3
 80053f0:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d332      	bcc.n	8005460 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80053fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d82e      	bhi.n	8005460 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 8005402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005406:	429a      	cmp	r2, r3
 8005408:	d02a      	beq.n	8005460 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800540a:	4b24      	ldr	r3, [pc, #144]	; (800549c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	4924      	ldr	r1, [pc, #144]	; (80054a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8005410:	4613      	mov	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800541c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800541e:	4b1f      	ldr	r3, [pc, #124]	; (800549c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	491f      	ldr	r1, [pc, #124]	; (80054a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	440b      	add	r3, r1
 800542e:	3304      	adds	r3, #4
 8005430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005432:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005434:	4b19      	ldr	r3, [pc, #100]	; (800549c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	4919      	ldr	r1, [pc, #100]	; (80054a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	440b      	add	r3, r1
 8005444:	3308      	adds	r3, #8
 8005446:	6a3a      	ldr	r2, [r7, #32]
 8005448:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800544e:	4b13      	ldr	r3, [pc, #76]	; (800549c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3301      	adds	r3, #1
 8005454:	4a11      	ldr	r2, [pc, #68]	; (800549c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005456:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005458:	4b10      	ldr	r3, [pc, #64]	; (800549c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b7f      	cmp	r3, #127	; 0x7f
 800545e:	d812      	bhi.n	8005486 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	3301      	adds	r3, #1
 8005464:	623b      	str	r3, [r7, #32]
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	2b0f      	cmp	r3, #15
 800546a:	d9b9      	bls.n	80053e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	3301      	adds	r3, #1
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	2b0f      	cmp	r3, #15
 8005476:	d9a2      	bls.n	80053be <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	3301      	adds	r3, #1
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	2b0f      	cmp	r3, #15
 8005482:	d999      	bls.n	80053b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8005484:	e000      	b.n	8005488 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8005486:	bf00      	nop
          }
        }
      }
    }
  }
}
 8005488:	373c      	adds	r7, #60	; 0x3c
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	3b9aca00 	.word	0x3b9aca00
 8005498:	0802b90c 	.word	0x0802b90c
 800549c:	20197144 	.word	0x20197144
 80054a0:	20196744 	.word	0x20196744

080054a4 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b093      	sub	sp, #76	; 0x4c
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 80054ae:	f04f 33ff 	mov.w	r3, #4294967295
 80054b2:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	085a      	lsrs	r2, r3, #1
 80054b8:	4b7a      	ldr	r3, [pc, #488]	; (80056a4 <I2C_Compute_SCLL_SCLH+0x200>)
 80054ba:	4413      	add	r3, r2
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	fbb3 f3f2 	udiv	r3, r3, r2
 80054c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 80054c4:	4a78      	ldr	r2, [pc, #480]	; (80056a8 <I2C_Compute_SCLL_SCLH+0x204>)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	212c      	movs	r1, #44	; 0x2c
 80054ca:	fb01 f303 	mul.w	r3, r1, r3
 80054ce:	4413      	add	r3, r2
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	085a      	lsrs	r2, r3, #1
 80054d4:	4b73      	ldr	r3, [pc, #460]	; (80056a4 <I2C_Compute_SCLL_SCLH+0x200>)
 80054d6:	4413      	add	r3, r2
 80054d8:	4973      	ldr	r1, [pc, #460]	; (80056a8 <I2C_Compute_SCLL_SCLH+0x204>)
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	202c      	movs	r0, #44	; 0x2c
 80054de:	fb00 f202 	mul.w	r2, r0, r2
 80054e2:	440a      	add	r2, r1
 80054e4:	6812      	ldr	r2, [r2, #0]
 80054e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80054ec:	2332      	movs	r3, #50	; 0x32
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80054f0:	4a6d      	ldr	r2, [pc, #436]	; (80056a8 <I2C_Compute_SCLL_SCLH+0x204>)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	212c      	movs	r1, #44	; 0x2c
 80054f6:	fb01 f303 	mul.w	r3, r1, r3
 80054fa:	4413      	add	r3, r2
 80054fc:	3328      	adds	r3, #40	; 0x28
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005502:	fb02 f303 	mul.w	r3, r2, r3
 8005506:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8005508:	4a67      	ldr	r2, [pc, #412]	; (80056a8 <I2C_Compute_SCLL_SCLH+0x204>)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	212c      	movs	r1, #44	; 0x2c
 800550e:	fb01 f303 	mul.w	r3, r1, r3
 8005512:	4413      	add	r3, r2
 8005514:	3304      	adds	r3, #4
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a62      	ldr	r2, [pc, #392]	; (80056a4 <I2C_Compute_SCLL_SCLH+0x200>)
 800551a:	fbb2 f3f3 	udiv	r3, r2, r3
 800551e:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8005520:	4a61      	ldr	r2, [pc, #388]	; (80056a8 <I2C_Compute_SCLL_SCLH+0x204>)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	212c      	movs	r1, #44	; 0x2c
 8005526:	fb01 f303 	mul.w	r3, r1, r3
 800552a:	4413      	add	r3, r2
 800552c:	3308      	adds	r3, #8
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a5c      	ldr	r2, [pc, #368]	; (80056a4 <I2C_Compute_SCLL_SCLH+0x200>)
 8005532:	fbb2 f3f3 	udiv	r3, r2, r3
 8005536:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800553c:	2300      	movs	r3, #0
 800553e:	637b      	str	r3, [r7, #52]	; 0x34
 8005540:	e0a3      	b.n	800568a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005542:	495a      	ldr	r1, [pc, #360]	; (80056ac <I2C_Compute_SCLL_SCLH+0x208>)
 8005544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005546:	4613      	mov	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	440b      	add	r3, r1
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	fb02 f303 	mul.w	r3, r2, r3
 800555a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800555c:	2300      	movs	r3, #0
 800555e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005560:	e08c      	b.n	800567c <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	441a      	add	r2, r3
 8005568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556a:	3301      	adds	r3, #1
 800556c:	6979      	ldr	r1, [r7, #20]
 800556e:	fb03 f101 	mul.w	r1, r3, r1
 8005572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	440b      	add	r3, r1
 8005578:	4413      	add	r3, r2
 800557a:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800557c:	4a4a      	ldr	r2, [pc, #296]	; (80056a8 <I2C_Compute_SCLL_SCLH+0x204>)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	212c      	movs	r1, #44	; 0x2c
 8005582:	fb01 f303 	mul.w	r3, r1, r3
 8005586:	4413      	add	r3, r2
 8005588:	3318      	adds	r3, #24
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	429a      	cmp	r2, r3
 8005590:	d971      	bls.n	8005676 <I2C_Compute_SCLL_SCLH+0x1d2>
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	1ad2      	subs	r2, r2, r3
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	089b      	lsrs	r3, r3, #2
 800559e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d268      	bcs.n	8005676 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80055a4:	2300      	movs	r3, #0
 80055a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80055a8:	e062      	b.n	8005670 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80055aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	441a      	add	r2, r3
 80055b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b2:	3301      	adds	r3, #1
 80055b4:	6979      	ldr	r1, [r7, #20]
 80055b6:	fb03 f101 	mul.w	r1, r3, r1
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	440b      	add	r3, r1
 80055c0:	4413      	add	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	441a      	add	r2, r3
 80055ca:	4937      	ldr	r1, [pc, #220]	; (80056a8 <I2C_Compute_SCLL_SCLH+0x204>)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	202c      	movs	r0, #44	; 0x2c
 80055d0:	fb00 f303 	mul.w	r3, r0, r3
 80055d4:	440b      	add	r3, r1
 80055d6:	3320      	adds	r3, #32
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	441a      	add	r2, r3
 80055dc:	4932      	ldr	r1, [pc, #200]	; (80056a8 <I2C_Compute_SCLL_SCLH+0x204>)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	202c      	movs	r0, #44	; 0x2c
 80055e2:	fb00 f303 	mul.w	r3, r0, r3
 80055e6:	440b      	add	r3, r1
 80055e8:	3324      	adds	r3, #36	; 0x24
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4413      	add	r3, r2
 80055ee:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && \
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d338      	bcc.n	800566a <I2C_Compute_SCLL_SCLH+0x1c6>
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d834      	bhi.n	800566a <I2C_Compute_SCLL_SCLH+0x1c6>
 8005600:	4a29      	ldr	r2, [pc, #164]	; (80056a8 <I2C_Compute_SCLL_SCLH+0x204>)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	212c      	movs	r1, #44	; 0x2c
 8005606:	fb01 f303 	mul.w	r3, r1, r3
 800560a:	4413      	add	r3, r2
 800560c:	331c      	adds	r3, #28
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	429a      	cmp	r2, r3
 8005614:	d329      	bcc.n	800566a <I2C_Compute_SCLL_SCLH+0x1c6>
 8005616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	429a      	cmp	r2, r3
 800561c:	d225      	bcs.n	800566a <I2C_Compute_SCLL_SCLH+0x1c6>
              (ti2cclk < tscl_h))
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	2b00      	cmp	r3, #0
 800562a:	da02      	bge.n	8005632 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	425b      	negs	r3, r3
 8005630:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005636:	429a      	cmp	r2, r3
 8005638:	d917      	bls.n	800566a <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800563e:	491b      	ldr	r1, [pc, #108]	; (80056ac <I2C_Compute_SCLL_SCLH+0x208>)
 8005640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	3310      	adds	r3, #16
 800564e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005650:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8005652:	4916      	ldr	r1, [pc, #88]	; (80056ac <I2C_Compute_SCLL_SCLH+0x208>)
 8005654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005656:	4613      	mov	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	440b      	add	r3, r1
 8005660:	330c      	adds	r3, #12
 8005662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005664:	601a      	str	r2, [r3, #0]
              ret = count;
 8005666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005668:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	3301      	adds	r3, #1
 800566e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	2bff      	cmp	r3, #255	; 0xff
 8005674:	d999      	bls.n	80055aa <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005678:	3301      	adds	r3, #1
 800567a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800567c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800567e:	2bff      	cmp	r3, #255	; 0xff
 8005680:	f67f af6f 	bls.w	8005562 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005686:	3301      	adds	r3, #1
 8005688:	637b      	str	r3, [r7, #52]	; 0x34
 800568a:	4b09      	ldr	r3, [pc, #36]	; (80056b0 <I2C_Compute_SCLL_SCLH+0x20c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005690:	429a      	cmp	r2, r3
 8005692:	f4ff af56 	bcc.w	8005542 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8005696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005698:	4618      	mov	r0, r3
 800569a:	374c      	adds	r7, #76	; 0x4c
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	3b9aca00 	.word	0x3b9aca00
 80056a8:	0802b90c 	.word	0x0802b90c
 80056ac:	20196744 	.word	0x20196744
 80056b0:	20197144 	.word	0x20197144

080056b4 <I2C5_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C5_MspInit(I2C_HandleTypeDef *hI2c)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08a      	sub	sp, #40	; 0x28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C5_SCL_GPIO_CLK_ENABLE();
 80056bc:	4b2e      	ldr	r3, [pc, #184]	; (8005778 <I2C5_MspInit+0xc4>)
 80056be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056c2:	4a2d      	ldr	r2, [pc, #180]	; (8005778 <I2C5_MspInit+0xc4>)
 80056c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80056cc:	4b2a      	ldr	r3, [pc, #168]	; (8005778 <I2C5_MspInit+0xc4>)
 80056ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d6:	613b      	str	r3, [r7, #16]
 80056d8:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C5_SDA_GPIO_CLK_ENABLE();
 80056da:	4b27      	ldr	r3, [pc, #156]	; (8005778 <I2C5_MspInit+0xc4>)
 80056dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056e0:	4a25      	ldr	r2, [pc, #148]	; (8005778 <I2C5_MspInit+0xc4>)
 80056e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80056ea:	4b23      	ldr	r3, [pc, #140]	; (8005778 <I2C5_MspInit+0xc4>)
 80056ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C5_SCL_PIN;
 80056f8:	2320      	movs	r3, #32
 80056fa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 80056fc:	2312      	movs	r3, #18
 80056fe:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8005700:	2301      	movs	r3, #1
 8005702:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8005704:	2302      	movs	r3, #2
 8005706:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C5_SCL_AF;
 8005708:	2302      	movs	r3, #2
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C5_SCL_GPIO_PORT, &gpio_init_structure);
 800570c:	f107 0314 	add.w	r3, r7, #20
 8005710:	4619      	mov	r1, r3
 8005712:	481a      	ldr	r0, [pc, #104]	; (800577c <I2C5_MspInit+0xc8>)
 8005714:	f004 fc02 	bl	8009f1c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C5_SDA_PIN;
 8005718:	2310      	movs	r3, #16
 800571a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 800571c:	2312      	movs	r3, #18
 800571e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8005720:	2301      	movs	r3, #1
 8005722:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8005724:	2302      	movs	r3, #2
 8005726:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C5_SDA_AF;
 8005728:	2302      	movs	r3, #2
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C5_SDA_GPIO_PORT, &gpio_init_structure);
 800572c:	f107 0314 	add.w	r3, r7, #20
 8005730:	4619      	mov	r1, r3
 8005732:	4812      	ldr	r0, [pc, #72]	; (800577c <I2C5_MspInit+0xc8>)
 8005734:	f004 fbf2 	bl	8009f1c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C5_CLK_ENABLE();
 8005738:	4b0f      	ldr	r3, [pc, #60]	; (8005778 <I2C5_MspInit+0xc4>)
 800573a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800573e:	4a0e      	ldr	r2, [pc, #56]	; (8005778 <I2C5_MspInit+0xc4>)
 8005740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005744:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8005748:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <I2C5_MspInit+0xc4>)
 800574a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	60bb      	str	r3, [r7, #8]
 8005754:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C5_FORCE_RESET();
 8005756:	4b08      	ldr	r3, [pc, #32]	; (8005778 <I2C5_MspInit+0xc4>)
 8005758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800575a:	4a07      	ldr	r2, [pc, #28]	; (8005778 <I2C5_MspInit+0xc4>)
 800575c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005760:	6793      	str	r3, [r2, #120]	; 0x78

  /* Release the I2C peripheral clock reset */
  BUS_I2C5_RELEASE_RESET();
 8005762:	4b05      	ldr	r3, [pc, #20]	; (8005778 <I2C5_MspInit+0xc4>)
 8005764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005766:	4a04      	ldr	r2, [pc, #16]	; (8005778 <I2C5_MspInit+0xc4>)
 8005768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800576c:	6793      	str	r3, [r2, #120]	; 0x78
}
 800576e:	bf00      	nop
 8005770:	3728      	adds	r7, #40	; 0x28
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	46020c00 	.word	0x46020c00
 800577c:	42021c00 	.word	0x42021c00

08005780 <I2C5_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C5_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b088      	sub	sp, #32
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C5_SCL_PIN;
 8005788:	2320      	movs	r3, #32
 800578a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C5_SCL_GPIO_PORT, gpio_init_structure.Pin);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4619      	mov	r1, r3
 8005790:	480a      	ldr	r0, [pc, #40]	; (80057bc <I2C5_MspDeInit+0x3c>)
 8005792:	f004 fd9b 	bl	800a2cc <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C5_SDA_PIN;
 8005796:	2310      	movs	r3, #16
 8005798:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C5_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4619      	mov	r1, r3
 800579e:	4807      	ldr	r0, [pc, #28]	; (80057bc <I2C5_MspDeInit+0x3c>)
 80057a0:	f004 fd94 	bl	800a2cc <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C5_CLK_DISABLE();
 80057a4:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <I2C5_MspDeInit+0x40>)
 80057a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057aa:	4a05      	ldr	r2, [pc, #20]	; (80057c0 <I2C5_MspDeInit+0x40>)
 80057ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
}
 80057b4:	bf00      	nop
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	42021c00 	.word	0x42021c00
 80057c0:	46020c00 	.word	0x46020c00

080057c4 <I2C5_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af04      	add	r7, sp, #16
 80057ca:	607b      	str	r3, [r7, #4]
 80057cc:	4603      	mov	r3, r0
 80057ce:	81fb      	strh	r3, [r7, #14]
 80057d0:	460b      	mov	r3, r1
 80057d2:	81bb      	strh	r3, [r7, #12]
 80057d4:	4613      	mov	r3, r2
 80057d6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c5, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80057d8:	8978      	ldrh	r0, [r7, #10]
 80057da:	89ba      	ldrh	r2, [r7, #12]
 80057dc:	89f9      	ldrh	r1, [r7, #14]
 80057de:	f242 7310 	movw	r3, #10000	; 0x2710
 80057e2:	9302      	str	r3, [sp, #8]
 80057e4:	8b3b      	ldrh	r3, [r7, #24]
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	4603      	mov	r3, r0
 80057ee:	4807      	ldr	r0, [pc, #28]	; (800580c <I2C5_WriteReg+0x48>)
 80057f0:	f005 f95a 	bl	800aaa8 <HAL_I2C_Mem_Write>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <I2C5_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	e001      	b.n	8005802 <I2C5_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80057fe:	f06f 0307 	mvn.w	r3, #7
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20197148 	.word	0x20197148

08005810 <I2C5_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b088      	sub	sp, #32
 8005814:	af04      	add	r7, sp, #16
 8005816:	607b      	str	r3, [r7, #4]
 8005818:	4603      	mov	r3, r0
 800581a:	81fb      	strh	r3, [r7, #14]
 800581c:	460b      	mov	r3, r1
 800581e:	81bb      	strh	r3, [r7, #12]
 8005820:	4613      	mov	r3, r2
 8005822:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c5, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8005824:	8978      	ldrh	r0, [r7, #10]
 8005826:	89ba      	ldrh	r2, [r7, #12]
 8005828:	89f9      	ldrh	r1, [r7, #14]
 800582a:	f242 7310 	movw	r3, #10000	; 0x2710
 800582e:	9302      	str	r3, [sp, #8]
 8005830:	8b3b      	ldrh	r3, [r7, #24]
 8005832:	9301      	str	r3, [sp, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	4603      	mov	r3, r0
 800583a:	4807      	ldr	r0, [pc, #28]	; (8005858 <I2C5_ReadReg+0x48>)
 800583c:	f005 fa48 	bl	800acd0 <HAL_I2C_Mem_Read>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <I2C5_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8005846:	2300      	movs	r3, #0
 8005848:	e001      	b.n	800584e <I2C5_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800584a:	f06f 0307 	mvn.w	r3, #7
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20197148 	.word	0x20197148

0800585c <I2C5_Recv>:
  * @param  pData      The target register value to be received
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C5_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af02      	add	r7, sp, #8
 8005862:	4603      	mov	r3, r0
 8005864:	6039      	str	r1, [r7, #0]
 8005866:	80fb      	strh	r3, [r7, #6]
 8005868:	4613      	mov	r3, r2
 800586a:	80bb      	strh	r3, [r7, #4]
  if (HAL_I2C_Master_Receive(&hbus_i2c5, DevAddr, pData, Length, 10000) == HAL_OK)
 800586c:	88bb      	ldrh	r3, [r7, #4]
 800586e:	88f9      	ldrh	r1, [r7, #6]
 8005870:	f242 7210 	movw	r2, #10000	; 0x2710
 8005874:	9200      	str	r2, [sp, #0]
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	4806      	ldr	r0, [pc, #24]	; (8005894 <I2C5_Recv+0x38>)
 800587a:	f005 f81f 	bl	800a8bc <HAL_I2C_Master_Receive>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <I2C5_Recv+0x2c>
  {
    return BSP_ERROR_NONE;
 8005884:	2300      	movs	r3, #0
 8005886:	e001      	b.n	800588c <I2C5_Recv+0x30>
  }

  return BSP_ERROR_BUS_FAILURE;
 8005888:	f06f 0307 	mvn.w	r3, #7
}
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20197148 	.word	0x20197148

08005898 <BSP_HSPI_RAM_Init>:
  * @param  Instance   HSPI Instance
  * @param  Init       HSPI Init structure
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_Init(uint32_t Instance, BSP_HSPI_RAM_Cfg_t *Init)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08a      	sub	sp, #40	; 0x28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  MX_HSPI_InitTypeDef hspi_init;

  /* Check if the instance is supported */
  if (Instance >= HSPI_RAM_INSTANCES_NUMBER)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <BSP_HSPI_RAM_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80058a8:	f06f 0301 	mvn.w	r3, #1
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
 80058ae:	e066      	b.n	800597e <BSP_HSPI_RAM_Init+0xe6>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)
 80058b0:	4935      	ldr	r1, [pc, #212]	; (8005988 <BSP_HSPI_RAM_Init+0xf0>)
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	1a9b      	subs	r3, r3, r2
 80058ba:	440b      	add	r3, r1
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d15b      	bne.n	800597a <BSP_HSPI_RAM_Init+0xe2>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp HSPI initialization */
      HSPI_RAM_MspInit(&hhspi_ram[Instance]);
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	4613      	mov	r3, r2
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	4413      	add	r3, r2
 80058ca:	015b      	lsls	r3, r3, #5
 80058cc:	4a2f      	ldr	r2, [pc, #188]	; (800598c <BSP_HSPI_RAM_Init+0xf4>)
 80058ce:	4413      	add	r3, r2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fbab 	bl	800602c <HSPI_RAM_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Fill config structure */
      hspi_init.ClockPrescaler = 0; /* HSPI clock = 160MHz / ClockPrescaler = 160MHz */
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80058de:	61fb      	str	r3, [r7, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	fa93 f3a3 	rbit	r3, r3
 80058e6:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	623b      	str	r3, [r7, #32]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <BSP_HSPI_RAM_Init+0x5e>
  {
    return 32U;
 80058f2:	2320      	movs	r3, #32
 80058f4:	e003      	b.n	80058fe <BSP_HSPI_RAM_Init+0x66>
  }
  return __builtin_clz(value);
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	fab3 f383 	clz	r3, r3
 80058fc:	b2db      	uxtb	r3, r3
      hspi_init.MemorySize     = (uint32_t)POSITION_VAL(APS512XX_RAM_SIZE);
 80058fe:	60bb      	str	r3, [r7, #8]
      hspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8005900:	2300      	movs	r3, #0
 8005902:	613b      	str	r3, [r7, #16]

      /* STM32 HSPI interface initialization */
      if (MX_HSPI_RAM_Init(&hhspi_ram[Instance], &hspi_init) != HAL_OK)
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	4613      	mov	r3, r2
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	4413      	add	r3, r2
 800590c:	015b      	lsls	r3, r3, #5
 800590e:	4a1f      	ldr	r2, [pc, #124]	; (800598c <BSP_HSPI_RAM_Init+0xf4>)
 8005910:	4413      	add	r3, r2
 8005912:	f107 0208 	add.w	r2, r7, #8
 8005916:	4611      	mov	r1, r2
 8005918:	4618      	mov	r0, r3
 800591a:	f000 f867 	bl	80059ec <MX_HSPI_RAM_Init>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <BSP_HSPI_RAM_Init+0x94>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005924:	f06f 0303 	mvn.w	r3, #3
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
 800592a:	e028      	b.n	800597e <BSP_HSPI_RAM_Init+0xe6>
      }
      /* Reset the memory */
      else if (APS512XX_Reset(&hhspi_ram[Instance]) != 0)/*APS512XX_OK*/
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	4413      	add	r3, r2
 8005934:	015b      	lsls	r3, r3, #5
 8005936:	4a15      	ldr	r2, [pc, #84]	; (800598c <BSP_HSPI_RAM_Init+0xf4>)
 8005938:	4413      	add	r3, r2
 800593a:	4618      	mov	r0, r3
 800593c:	f7fe fc19 	bl	8004172 <APS512XX_Reset>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <BSP_HSPI_RAM_Init+0xb6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005946:	f06f 0304 	mvn.w	r3, #4
 800594a:	627b      	str	r3, [r7, #36]	; 0x24
 800594c:	e017      	b.n	800597e <BSP_HSPI_RAM_Init+0xe6>
      }
      /* Configure the memory */
      else if (BSP_HSPI_RAM_Config16BitsOctalRAM(Instance, Init) != BSP_ERROR_NONE)
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f957 	bl	8005c04 <BSP_HSPI_RAM_Config16BitsOctalRAM>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <BSP_HSPI_RAM_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800595c:	f06f 0304 	mvn.w	r3, #4
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
 8005962:	e00c      	b.n	800597e <BSP_HSPI_RAM_Init+0xe6>
      }
      else
      {
        Hspi_Ram_Ctx[Instance].IsInitialized = HSPI_ACCESS_INDIRECT;
 8005964:	4908      	ldr	r1, [pc, #32]	; (8005988 <BSP_HSPI_RAM_Init+0xf0>)
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4613      	mov	r3, r2
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	1a9b      	subs	r3, r3, r2
 800596e:	440b      	add	r3, r1
 8005970:	2201      	movs	r2, #1
 8005972:	701a      	strb	r2, [r3, #0]
        ret = BSP_ERROR_NONE;
 8005974:	2300      	movs	r3, #0
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
 8005978:	e001      	b.n	800597e <BSP_HSPI_RAM_Init+0xe6>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800597a:	2300      	movs	r3, #0
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  /* Return BSP status */
  return ret;
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005980:	4618      	mov	r0, r3
 8005982:	3728      	adds	r7, #40	; 0x28
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	20000040 	.word	0x20000040
 800598c:	2019719c 	.word	0x2019719c

08005990 <Tuning_HSPI_Write>:
  * @brief  Tuning the HSPI write.
  * @param  hhspi          HSPI handle
  * @retval BSP status
  */
static int32_t Tuning_HSPI_Write(XSPI_HandleTypeDef *hhspi)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005998:	2300      	movs	r3, #0
 800599a:	61fb      	str	r3, [r7, #28]
  XSPI_HSCalTypeDef sCfg;

  hhspi->Instance = HSPI1;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a12      	ldr	r2, [pc, #72]	; (80059e8 <Tuning_HSPI_Write+0x58>)
 80059a0:	601a      	str	r2, [r3, #0]
  hhspi->State    = HAL_XSPI_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2202      	movs	r2, #2
 80059a6:	655a      	str	r2, [r3, #84]	; 0x54

  sCfg.DelayValueType        = HAL_XSPI_CAL_DATA_OUTPUT_DELAY;
 80059a8:	2302      	movs	r3, #2
 80059aa:	60fb      	str	r3, [r7, #12]
  sCfg.FineCalibrationUnit   = 0x11;
 80059ac:	2311      	movs	r3, #17
 80059ae:	613b      	str	r3, [r7, #16]
  sCfg.CoarseCalibrationUnit = 0x05;
 80059b0:	2305      	movs	r3, #5
 80059b2:	617b      	str	r3, [r7, #20]
  sCfg.MaxCalibration        = HAL_XSPI_MAXCAL_REACHED;
 80059b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059b8:	61bb      	str	r3, [r7, #24]
  if (HAL_XSPI_SetDelayValue(hhspi, &sCfg) != HAL_OK)
 80059ba:	f107 030c 	add.w	r3, r7, #12
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f00d ffdb 	bl	801397c <HAL_XSPI_SetDelayValue>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d007      	beq.n	80059dc <Tuning_HSPI_Write+0x4c>
  {
    if (hhspi->Instance == HSPI1)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a05      	ldr	r2, [pc, #20]	; (80059e8 <Tuning_HSPI_Write+0x58>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d102      	bne.n	80059dc <Tuning_HSPI_Write+0x4c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80059d6:	f06f 0303 	mvn.w	r3, #3
 80059da:	61fb      	str	r3, [r7, #28]
    }
  }

  /* Return BSP status */
  return ret;
 80059dc:	69fb      	ldr	r3, [r7, #28]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3720      	adds	r7, #32
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	420d3400 	.word	0x420d3400

080059ec <MX_HSPI_RAM_Init>:
  * @param  hhspi          HSPI handle
  * @param  Init           HSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_HSPI_RAM_Init(XSPI_HandleTypeDef *hhspi, MX_HSPI_InitTypeDef *Init)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t hspi_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_HSPI);
 80059f6:	f04f 0000 	mov.w	r0, #0
 80059fa:	f04f 0101 	mov.w	r1, #1
 80059fe:	f009 f9bf 	bl	800ed80 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a02:	60f8      	str	r0, [r7, #12]

  /* HSPI initialization */
  hhspi->Instance = HSPI1;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a24      	ldr	r2, [pc, #144]	; (8005a98 <MX_HSPI_RAM_Init+0xac>)
 8005a08:	601a      	str	r2, [r3, #0]

  hhspi->Init.FifoThresholdByte       = 2U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	605a      	str	r2, [r3, #4]
  hhspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	609a      	str	r2, [r3, #8]
  hhspi->Init.MemoryType              = HAL_XSPI_MEMTYPE_APMEM_16BITS;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005a1c:	60da      	str	r2, [r3, #12]
  hhspi->Init.MemorySize              = Init->MemorySize;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	611a      	str	r2, [r3, #16]
  hhspi->Init.ChipSelectHighTimeCycle = 1U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	615a      	str	r2, [r3, #20]
  hhspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	619a      	str	r2, [r3, #24]
  hhspi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	61da      	str	r2, [r3, #28]
  hhspi->Init.WrapSize                = HAL_XSPI_WRAP_32_BYTES;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005a3e:	621a      	str	r2, [r3, #32]
  hhspi->Init.ClockPrescaler          = Init->ClockPrescaler;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	625a      	str	r2, [r3, #36]	; 0x24
  hhspi->Init.SampleShifting          = Init->SampleShifting;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	629a      	str	r2, [r3, #40]	; 0x28
  hhspi->Init.DelayHoldQuarterCycle   = HAL_XSPI_DHQC_DISABLE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	62da      	str	r2, [r3, #44]	; 0x2c
  hhspi->Init.ChipSelectBoundary      = 11U;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	220b      	movs	r2, #11
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hhspi->Init.DelayBlockBypass        = HAL_XSPI_DELAY_BLOCK_ON;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	635a      	str	r2, [r3, #52]	; 0x34
  /* tCEM = 2 us max => REFRESH+4 clock cycles for read */
  hhspi->Init.Refresh                 = ((2U * (hspi_clk / (Init->ClockPrescaler + 1))) / 1000000U) - 4U;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	3301      	adds	r3, #1
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <MX_HSPI_RAM_Init+0xb0>)
 8005a72:	fba2 2303 	umull	r2, r3, r2, r3
 8005a76:	0c9b      	lsrs	r3, r3, #18
 8005a78:	1f1a      	subs	r2, r3, #4
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hhspi->Init.MaxTran                 = 0U;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	639a      	str	r2, [r3, #56]	; 0x38

  status = HAL_XSPI_Init(hhspi);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f00d f9c1 	bl	8012e0c <HAL_XSPI_Init>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a8e:	7afb      	ldrb	r3, [r7, #11]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	420d3400 	.word	0x420d3400
 8005a9c:	431bde83 	.word	0x431bde83

08005aa0 <BSP_HSPI_RAM_EnableMemoryMappedMode>:
  * @brief  Configure the HSPI in memory-mapped mode
  * @param  Instance  HSPI instance
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_EnableMemoryMappedMode(uint32_t Instance)
{
 8005aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= HSPI_RAM_INSTANCES_NUMBER)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <BSP_HSPI_RAM_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005ab2:	f06f 0301 	mvn.w	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	e09a      	b.n	8005bf0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
  }
  else
  {
    if (Tuning_HSPI_Write(&hhspi_ram[Instance]) != 0UL)
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	4613      	mov	r3, r2
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	4413      	add	r3, r2
 8005ac2:	015b      	lsls	r3, r3, #5
 8005ac4:	4a4d      	ldr	r2, [pc, #308]	; (8005bfc <BSP_HSPI_RAM_EnableMemoryMappedMode+0x15c>)
 8005ac6:	4413      	add	r3, r2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff ff61 	bl	8005990 <Tuning_HSPI_Write>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <BSP_HSPI_RAM_EnableMemoryMappedMode+0x3c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005ad4:	f06f 0303 	mvn.w	r3, #3
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	e089      	b.n	8005bf0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
    }
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	4413      	add	r3, r2
 8005ae4:	015b      	lsls	r3, r3, #5
 8005ae6:	4a45      	ldr	r2, [pc, #276]	; (8005bfc <BSP_HSPI_RAM_EnableMemoryMappedMode+0x15c>)
 8005ae8:	189c      	adds	r4, r3, r2
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 8005aea:	4945      	ldr	r1, [pc, #276]	; (8005c00 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	4613      	mov	r3, r2
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	1a9b      	subs	r3, r3, r2
 8005af4:	440b      	add	r3, r1
 8005af6:	3301      	adds	r3, #1
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	f003 0320 	and.w	r3, r3, #32
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10c      	bne.n	8005b1c <BSP_HSPI_RAM_EnableMemoryMappedMode+0x7c>
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 8005b02:	493f      	ldr	r1, [pc, #252]	; (8005c00 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	1a9b      	subs	r3, r3, r2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	3302      	adds	r3, #2
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	089b      	lsrs	r3, r3, #2
 8005b14:	f003 0307 	and.w	r3, r3, #7
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005b18:	1cd9      	adds	r1, r3, #3
 8005b1a:	e00c      	b.n	8005b36 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x96>
                                             (uint32_t)APS512XX_READ_LATENCY((uint32_t)((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode)),
 8005b1c:	4938      	ldr	r1, [pc, #224]	; (8005c00 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	440b      	add	r3, r1
 8005b28:	3302      	adds	r3, #2
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	089b      	lsrs	r3, r3, #2
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	3303      	adds	r3, #3
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005b34:	0059      	lsls	r1, r3, #1
                                                                             (uint32_t)(Hspi_Ram_Ctx[Instance].LatencyType)),
                                             APS512XX_WRITE_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].WriteLatencyCode)),
 8005b36:	4832      	ldr	r0, [pc, #200]	; (8005c00 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	1a9b      	subs	r3, r3, r2
 8005b40:	4403      	add	r3, r0
 8005b42:	3303      	adds	r3, #3
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d02a      	beq.n	8005ba4 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x104>
                                             APS512XX_WRITE_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].WriteLatencyCode)),
 8005b4e:	482c      	ldr	r0, [pc, #176]	; (8005c00 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	4613      	mov	r3, r2
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	1a9b      	subs	r3, r3, r2
 8005b58:	4403      	add	r3, r0
 8005b5a:	3303      	adds	r3, #3
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d11c      	bne.n	8005ba0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x100>
 8005b66:	4826      	ldr	r0, [pc, #152]	; (8005c00 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	1a9b      	subs	r3, r3, r2
 8005b70:	4403      	add	r3, r0
 8005b72:	3303      	adds	r3, #3
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00e      	beq.n	8005b9c <BSP_HSPI_RAM_EnableMemoryMappedMode+0xfc>
 8005b7e:	4820      	ldr	r0, [pc, #128]	; (8005c00 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	4613      	mov	r3, r2
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	1a9b      	subs	r3, r3, r2
 8005b88:	4403      	add	r3, r0
 8005b8a:	3303      	adds	r3, #3
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	b25b      	sxtb	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	db01      	blt.n	8005b98 <BSP_HSPI_RAM_EnableMemoryMappedMode+0xf8>
 8005b94:	2205      	movs	r2, #5
 8005b96:	e006      	b.n	8005ba6 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 8005b98:	2206      	movs	r2, #6
 8005b9a:	e004      	b.n	8005ba6 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 8005b9c:	2204      	movs	r2, #4
 8005b9e:	e002      	b.n	8005ba6 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
 8005ba0:	2207      	movs	r2, #7
 8005ba2:	e000      	b.n	8005ba6 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x106>
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005ba4:	2203      	movs	r2, #3
                                             (uint32_t)(Hspi_Ram_Ctx[Instance].IOMode),
 8005ba6:	4d16      	ldr	r5, [pc, #88]	; (8005c00 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	4603      	mov	r3, r0
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	1a1b      	subs	r3, r3, r0
 8005bb0:	442b      	add	r3, r5
 8005bb2:	3306      	adds	r3, #6
 8005bb4:	781b      	ldrb	r3, [r3, #0]
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005bb6:	461e      	mov	r6, r3
                                             (uint32_t)(Hspi_Ram_Ctx[Instance].BurstType)) != (int32_t)APS512XX_OK)
 8005bb8:	4d11      	ldr	r5, [pc, #68]	; (8005c00 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	1a1b      	subs	r3, r3, r0
 8005bc2:	442b      	add	r3, r5
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	781b      	ldrb	r3, [r3, #0]
    else if (APS512XX_EnableMemoryMappedMode(&hhspi_ram[Instance],
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	4633      	mov	r3, r6
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f7fe f9ad 	bl	8003f2c <APS512XX_EnableMemoryMappedMode>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x140>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bd8:	f06f 0304 	mvn.w	r3, #4
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	e007      	b.n	8005bf0 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x150>
    }
    else /* Update HSPI context if all operations are well done */
    {
      Hspi_Ram_Ctx[Instance].IsInitialized = HSPI_ACCESS_MMP;
 8005be0:	4907      	ldr	r1, [pc, #28]	; (8005c00 <BSP_HSPI_RAM_EnableMemoryMappedMode+0x160>)
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	4613      	mov	r3, r2
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	1a9b      	subs	r3, r3, r2
 8005bea:	440b      	add	r3, r1
 8005bec:	2202      	movs	r2, #2
 8005bee:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return BSP status */
  return ret;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	2019719c 	.word	0x2019719c
 8005c00:	20000040 	.word	0x20000040

08005c04 <BSP_HSPI_RAM_Config16BitsOctalRAM>:
  * @param  Instance    HSPI instance
  * @param  Cfg         pointer to the RAM config
  * @retval BSP status
  */
int32_t BSP_HSPI_RAM_Config16BitsOctalRAM(uint32_t Instance, BSP_HSPI_RAM_Cfg_t *Cfg)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if ((Instance >= HSPI_RAM_INSTANCES_NUMBER)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d103      	bne.n	8005c20 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1c>
      || (Cfg->BurstLength == (BSP_HSPI_RAM_BurstLength_t)APS512XX_MR8_BL_2K_BYTES))
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	791b      	ldrb	r3, [r3, #4]
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d103      	bne.n	8005c28 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005c20:	f06f 0301 	mvn.w	r3, #1
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	e1f7      	b.n	8006018 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
  }
  else
  {
    /* Check if MMP mode locked ***********************************************/
    if (Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_MMP)
 8005c28:	49a9      	ldr	r1, [pc, #676]	; (8005ed0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	440b      	add	r3, r1
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d103      	bne.n	8005c42 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x3e>
    {
      ret = BSP_ERROR_HSPI_MMP_LOCK_FAILURE;
 8005c3a:	f06f 031f 	mvn.w	r3, #31
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	e1ea      	b.n	8006018 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
    }
    else
    {
      if ((Hspi_Ram_Ctx[Instance].IsInitialized  == HSPI_ACCESS_NONE) ||
 8005c42:	49a3      	ldr	r1, [pc, #652]	; (8005ed0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	4613      	mov	r3, r2
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	1a9b      	subs	r3, r3, r2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d017      	beq.n	8005c84 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x80>
          (Hspi_Ram_Ctx[Instance].LatencyType     != Cfg->LatencyType)  ||
 8005c54:	499e      	ldr	r1, [pc, #632]	; (8005ed0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	440b      	add	r3, r1
 8005c60:	3301      	adds	r3, #1
 8005c62:	781a      	ldrb	r2, [r3, #0]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
      if ((Hspi_Ram_Ctx[Instance].IsInitialized  == HSPI_ACCESS_NONE) ||
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d10b      	bne.n	8005c84 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x80>
          (Hspi_Ram_Ctx[Instance].ReadLatencyCode != Cfg->ReadLatencyCode))
 8005c6c:	4998      	ldr	r1, [pc, #608]	; (8005ed0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	4613      	mov	r3, r2
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	440b      	add	r3, r1
 8005c78:	3302      	adds	r3, #2
 8005c7a:	781a      	ldrb	r2, [r3, #0]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	785b      	ldrb	r3, [r3, #1]
          (Hspi_Ram_Ctx[Instance].LatencyType     != Cfg->LatencyType)  ||
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d040      	beq.n	8005d06 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
      {
        /* Reading the configuration of Mode Register 0 ***********************/
        if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg,
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	4613      	mov	r3, r2
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	4413      	add	r3, r2
 8005c8c:	015b      	lsls	r3, r3, #5
 8005c8e:	4a91      	ldr	r2, [pc, #580]	; (8005ed4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005c90:	1898      	adds	r0, r3, r2
                             (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != \
 8005c92:	498f      	ldr	r1, [pc, #572]	; (8005ed0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	1a9b      	subs	r3, r3, r2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	3302      	adds	r3, #2
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	089b      	lsrs	r3, r3, #2
 8005ca4:	f003 0307 	and.w	r3, r3, #7
        if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg,
 8005ca8:	3303      	adds	r3, #3
 8005caa:	f107 0208 	add.w	r2, r7, #8
 8005cae:	2100      	movs	r1, #0
 8005cb0:	f7fe f9b8 	bl	8004024 <APS512XX_ReadReg>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <BSP_HSPI_RAM_Config16BitsOctalRAM+0xbe>
            (int32_t)APS512XX_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cba:	f06f 0304 	mvn.w	r3, #4
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e021      	b.n	8005d06 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
        }
        else
        {
          /* Configure the 16-bits Octal RAM memory ***************************/
          MODIFY_REG(reg[0], ((uint32_t)APS512XX_MR0_LATENCY_TYPE | (uint32_t)APS512XX_MR0_READ_LATENCY_CODE |
 8005cc2:	7a3b      	ldrb	r3, [r7, #8]
 8005cc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	7819      	ldrb	r1, [r3, #0]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	430b      	orrs	r3, r1
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	723b      	strb	r3, [r7, #8]
                              (uint32_t)APS512XX_MR0_DRIVE_STRENGTH),
                     ((uint32_t)(Cfg->LatencyType) | (uint32_t)(Cfg->ReadLatencyCode) | (uint32_t)CONF_HSPI_DS));

          if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR0_ADDRESS, reg[0]) != APS512XX_OK)
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	4413      	add	r3, r2
 8005cea:	015b      	lsls	r3, r3, #5
 8005cec:	4a79      	ldr	r2, [pc, #484]	; (8005ed4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005cee:	4413      	add	r3, r2
 8005cf0:	7a3a      	ldrb	r2, [r7, #8]
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fe f9e9 	bl	80040cc <APS512XX_WriteReg>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x102>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d00:	f06f 0304 	mvn.w	r3, #4
 8005d04:	60fb      	str	r3, [r7, #12]
          }
          /* Configure the peripheral *****************************************/
        }
      }

      if (ret == BSP_ERROR_NONE)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d148      	bne.n	8005d9e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
      {
        if ((Hspi_Ram_Ctx[Instance].IsInitialized   == HSPI_ACCESS_NONE) ||
 8005d0c:	4970      	ldr	r1, [pc, #448]	; (8005ed0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	4613      	mov	r3, r2
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	1a9b      	subs	r3, r3, r2
 8005d16:	440b      	add	r3, r1
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x132>
            (Hspi_Ram_Ctx[Instance].WriteLatencyCode != Cfg->WriteLatencyCode))
 8005d1e:	496c      	ldr	r1, [pc, #432]	; (8005ed0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	4613      	mov	r3, r2
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	1a9b      	subs	r3, r3, r2
 8005d28:	440b      	add	r3, r1
 8005d2a:	3303      	adds	r3, #3
 8005d2c:	781a      	ldrb	r2, [r3, #0]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	789b      	ldrb	r3, [r3, #2]
        if ((Hspi_Ram_Ctx[Instance].IsInitialized   == HSPI_ACCESS_NONE) ||
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d033      	beq.n	8005d9e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
        {
          /* Reading the configuration of Mode Register 4 ***********************/
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg,
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	4413      	add	r3, r2
 8005d3e:	015b      	lsls	r3, r3, #5
 8005d40:	4a64      	ldr	r2, [pc, #400]	; (8005ed4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005d42:	1898      	adds	r0, r3, r2
                               (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != (int32_t)APS512XX_OK)
 8005d44:	4962      	ldr	r1, [pc, #392]	; (8005ed0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	1a9b      	subs	r3, r3, r2
 8005d4e:	440b      	add	r3, r1
 8005d50:	3302      	adds	r3, #2
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	089b      	lsrs	r3, r3, #2
 8005d56:	f003 0307 	and.w	r3, r3, #7
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg,
 8005d5a:	3303      	adds	r3, #3
 8005d5c:	f107 0208 	add.w	r2, r7, #8
 8005d60:	2104      	movs	r1, #4
 8005d62:	f7fe f95f 	bl	8004024 <APS512XX_ReadReg>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x170>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d6c:	f06f 0304 	mvn.w	r3, #4
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	e014      	b.n	8005d9e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
          }
          else
          {
            /* Configure the 16-bits Octal RAM memory ***************************/
            MODIFY_REG(reg[0], (APS512XX_MR4_WRITE_LATENCY_CODE | APS512XX_MR4_RF_RATE | APS512XX_MR4_PASR),
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	789b      	ldrb	r3, [r3, #2]
 8005d78:	723b      	strb	r3, [r7, #8]
                       (Cfg->WriteLatencyCode | CONF_HSPI_RF | CONF_HSPI_PASR));

            if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR4_ADDRESS, reg[0]) != APS512XX_OK)
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	4413      	add	r3, r2
 8005d82:	015b      	lsls	r3, r3, #5
 8005d84:	4a53      	ldr	r2, [pc, #332]	; (8005ed4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005d86:	4413      	add	r3, r2
 8005d88:	7a3a      	ldrb	r2, [r7, #8]
 8005d8a:	2104      	movs	r1, #4
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fe f99d 	bl	80040cc <APS512XX_WriteReg>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x19a>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d98:	f06f 0304 	mvn.w	r3, #4
 8005d9c:	60fb      	str	r3, [r7, #12]
            }
          }
        }
      }

      if (ret == BSP_ERROR_NONE)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f040 80ec 	bne.w	8005f7e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
      {
        if ((Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)  ||
 8005da6:	494a      	ldr	r1, [pc, #296]	; (8005ed0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	1a9b      	subs	r3, r3, r2
 8005db0:	440b      	add	r3, r1
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d024      	beq.n	8005e02 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].BurstType      != Cfg->BurstType)   ||
 8005db8:	4945      	ldr	r1, [pc, #276]	; (8005ed0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	00db      	lsls	r3, r3, #3
 8005dc0:	1a9b      	subs	r3, r3, r2
 8005dc2:	440b      	add	r3, r1
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	781a      	ldrb	r2, [r3, #0]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	78db      	ldrb	r3, [r3, #3]
        if ((Hspi_Ram_Ctx[Instance].IsInitialized == HSPI_ACCESS_NONE)  ||
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d118      	bne.n	8005e02 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].BurstLength    != Cfg->BurstLength) ||
 8005dd0:	493f      	ldr	r1, [pc, #252]	; (8005ed0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	1a9b      	subs	r3, r3, r2
 8005dda:	440b      	add	r3, r1
 8005ddc:	3305      	adds	r3, #5
 8005dde:	781a      	ldrb	r2, [r3, #0]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	791b      	ldrb	r3, [r3, #4]
            (Hspi_Ram_Ctx[Instance].BurstType      != Cfg->BurstType)   ||
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d10c      	bne.n	8005e02 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x1fe>
            (Hspi_Ram_Ctx[Instance].IOMode         != Cfg->IOMode))
 8005de8:	4939      	ldr	r1, [pc, #228]	; (8005ed0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	4613      	mov	r3, r2
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	1a9b      	subs	r3, r3, r2
 8005df2:	440b      	add	r3, r1
 8005df4:	3306      	adds	r3, #6
 8005df6:	781a      	ldrb	r2, [r3, #0]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	795b      	ldrb	r3, [r3, #5]
            (Hspi_Ram_Ctx[Instance].BurstLength    != Cfg->BurstLength) ||
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	f000 80be 	beq.w	8005f7e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
        {
          /* Reading the configuration of Mode Register 8 ***********************/
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg,
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	4613      	mov	r3, r2
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	4413      	add	r3, r2
 8005e0a:	015b      	lsls	r3, r3, #5
 8005e0c:	4a31      	ldr	r2, [pc, #196]	; (8005ed4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005e0e:	1898      	adds	r0, r3, r2
                               (uint32_t)APS512XX_READ_REG_LATENCY((uint32_t)(Hspi_Ram_Ctx[Instance].ReadLatencyCode))) != (int32_t)APS512XX_OK)
 8005e10:	492f      	ldr	r1, [pc, #188]	; (8005ed0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2cc>)
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	4613      	mov	r3, r2
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	1a9b      	subs	r3, r3, r2
 8005e1a:	440b      	add	r3, r1
 8005e1c:	3302      	adds	r3, #2
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	089b      	lsrs	r3, r3, #2
 8005e22:	f003 0307 	and.w	r3, r3, #7
          if (APS512XX_ReadReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg,
 8005e26:	3303      	adds	r3, #3
 8005e28:	f107 0208 	add.w	r2, r7, #8
 8005e2c:	2108      	movs	r1, #8
 8005e2e:	f7fe f8f9 	bl	8004024 <APS512XX_ReadReg>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x23c>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e38:	f06f 0304 	mvn.w	r3, #4
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	e09e      	b.n	8005f7e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
          }
          else
          {
            /* Configure the 16-bits Octal RAM memory ***************************/
            MODIFY_REG(reg[0], ((uint32_t)APS512XX_MR8_X8_X16 | (uint32_t)APS512XX_MR8_BL),
 8005e40:	7a3b      	ldrb	r3, [r7, #8]
 8005e42:	f023 0343 	bic.w	r3, r3, #67	; 0x43
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	7959      	ldrb	r1, [r3, #5]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	791b      	ldrb	r3, [r3, #4]
 8005e50:	430b      	orrs	r3, r1
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	4313      	orrs	r3, r2
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	723b      	strb	r3, [r7, #8]
                       ((uint32_t)(Cfg->IOMode) | (uint32_t)(Cfg->BurstLength)));

            if (APS512XX_WriteReg(&hhspi_ram[Instance], APS512XX_MR8_ADDRESS, reg[0]) != APS512XX_OK)
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	4413      	add	r3, r2
 8005e62:	015b      	lsls	r3, r3, #5
 8005e64:	4a1b      	ldr	r2, [pc, #108]	; (8005ed4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005e66:	4413      	add	r3, r2
 8005e68:	7a3a      	ldrb	r2, [r7, #8]
 8005e6a:	2108      	movs	r1, #8
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fe f92d 	bl	80040cc <APS512XX_WriteReg>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x27c>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e78:	f06f 0304 	mvn.w	r3, #4
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	e07e      	b.n	8005f7e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
            }
            else
            {
              /* Configure the peripheral *****************************************/
              if (Cfg->BurstType == BSP_HSPI_RAM_HYBRID_BURST)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	78db      	ldrb	r3, [r3, #3]
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d133      	bne.n	8005ef0 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2ec>
              {
                switch (Cfg->BurstLength)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	791b      	ldrb	r3, [r3, #4]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d023      	beq.n	8005ed8 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d4>
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	dc38      	bgt.n	8005f06 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x302>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x29a>
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d00c      	beq.n	8005eb6 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2b2>
                    break;
                  case APS512XX_MR8_BL_64_BYTES :
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_64_BYTES;
                    break;
                  default :
                    break;
 8005e9c:	e033      	b.n	8005f06 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x302>
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_16_BYTES;
 8005e9e:	490d      	ldr	r1, [pc, #52]	; (8005ed4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	005b      	lsls	r3, r3, #1
 8005ea6:	4413      	add	r3, r2
 8005ea8:	015b      	lsls	r3, r3, #5
 8005eaa:	440b      	add	r3, r1
 8005eac:	3320      	adds	r3, #32
 8005eae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005eb2:	601a      	str	r2, [r3, #0]
                    break;
 8005eb4:	e028      	b.n	8005f08 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_32_BYTES;
 8005eb6:	4907      	ldr	r1, [pc, #28]	; (8005ed4 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x2d0>)
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	4413      	add	r3, r2
 8005ec0:	015b      	lsls	r3, r3, #5
 8005ec2:	440b      	add	r3, r1
 8005ec4:	3320      	adds	r3, #32
 8005ec6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005eca:	601a      	str	r2, [r3, #0]
                    break;
 8005ecc:	e01c      	b.n	8005f08 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
 8005ece:	bf00      	nop
 8005ed0:	20000040 	.word	0x20000040
 8005ed4:	2019719c 	.word	0x2019719c
                    hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_64_BYTES;
 8005ed8:	4952      	ldr	r1, [pc, #328]	; (8006024 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	4613      	mov	r3, r2
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	4413      	add	r3, r2
 8005ee2:	015b      	lsls	r3, r3, #5
 8005ee4:	440b      	add	r3, r1
 8005ee6:	3320      	adds	r3, #32
 8005ee8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005eec:	601a      	str	r2, [r3, #0]
                    break;
 8005eee:	e00b      	b.n	8005f08 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                }
              }
              else
              {
                hhspi_ram[Instance].Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8005ef0:	494c      	ldr	r1, [pc, #304]	; (8006024 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	4413      	add	r3, r2
 8005efa:	015b      	lsls	r3, r3, #5
 8005efc:	440b      	add	r3, r1
 8005efe:	3320      	adds	r3, #32
 8005f00:	2200      	movs	r2, #0
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	e000      	b.n	8005f08 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x304>
                    break;
 8005f06:	bf00      	nop
              }

              if (Cfg->IOMode == BSP_HSPI_RAM_IO_X16_MODE)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	795b      	ldrb	r3, [r3, #5]
 8005f0c:	2b40      	cmp	r3, #64	; 0x40
 8005f0e:	d10b      	bne.n	8005f28 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x324>
              {
                hhspi_ram[Instance].Init.MemoryType = HAL_XSPI_MEMTYPE_APMEM_16BITS;
 8005f10:	4944      	ldr	r1, [pc, #272]	; (8006024 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	4613      	mov	r3, r2
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	4413      	add	r3, r2
 8005f1a:	015b      	lsls	r3, r3, #5
 8005f1c:	440b      	add	r3, r1
 8005f1e:	330c      	adds	r3, #12
 8005f20:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	e00a      	b.n	8005f3e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x33a>
              }
              else
              {
                hhspi_ram[Instance].Init.MemoryType = HAL_XSPI_MEMTYPE_APMEM;
 8005f28:	493e      	ldr	r1, [pc, #248]	; (8006024 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	4413      	add	r3, r2
 8005f32:	015b      	lsls	r3, r3, #5
 8005f34:	440b      	add	r3, r1
 8005f36:	330c      	adds	r3, #12
 8005f38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f3c:	601a      	str	r2, [r3, #0]
              }

              if (HAL_XSPI_DeInit(&hhspi_ram[Instance]) != HAL_OK)
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	4613      	mov	r3, r2
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	4413      	add	r3, r2
 8005f46:	015b      	lsls	r3, r3, #5
 8005f48:	4a36      	ldr	r2, [pc, #216]	; (8006024 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005f4a:	4413      	add	r3, r2
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f00d f8a9 	bl	80130a4 <HAL_XSPI_DeInit>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x35a>
              {
                ret = BSP_ERROR_PERIPH_FAILURE;
 8005f58:	f06f 0303 	mvn.w	r3, #3
 8005f5c:	60fb      	str	r3, [r7, #12]
              }

              if (HAL_XSPI_Init(&hhspi_ram[Instance]) != HAL_OK)
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	4413      	add	r3, r2
 8005f66:	015b      	lsls	r3, r3, #5
 8005f68:	4a2e      	ldr	r2, [pc, #184]	; (8006024 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x420>)
 8005f6a:	4413      	add	r3, r2
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f00c ff4d 	bl	8012e0c <HAL_XSPI_Init>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <BSP_HSPI_RAM_Config16BitsOctalRAM+0x37a>
              {
                ret = BSP_ERROR_PERIPH_FAILURE;
 8005f78:	f06f 0303 	mvn.w	r3, #3
 8005f7c:	60fb      	str	r3, [r7, #12]
          }
        }
      }

      /* Update HSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d149      	bne.n	8006018 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x414>
      {
        /* Update current status parameter *****************************************/
        Hspi_Ram_Ctx[Instance].IsInitialized    = HSPI_ACCESS_INDIRECT;
 8005f84:	4928      	ldr	r1, [pc, #160]	; (8006028 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	1a9b      	subs	r3, r3, r2
 8005f8e:	440b      	add	r3, r1
 8005f90:	2201      	movs	r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].LatencyType      = Cfg->LatencyType;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	7818      	ldrb	r0, [r3, #0]
 8005f98:	4923      	ldr	r1, [pc, #140]	; (8006028 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	1a9b      	subs	r3, r3, r2
 8005fa2:	440b      	add	r3, r1
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].ReadLatencyCode  = Cfg->ReadLatencyCode;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	7858      	ldrb	r0, [r3, #1]
 8005fae:	491e      	ldr	r1, [pc, #120]	; (8006028 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	1a9b      	subs	r3, r3, r2
 8005fb8:	440b      	add	r3, r1
 8005fba:	3302      	adds	r3, #2
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].WriteLatencyCode = Cfg->WriteLatencyCode;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	7898      	ldrb	r0, [r3, #2]
 8005fc4:	4918      	ldr	r1, [pc, #96]	; (8006028 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	1a9b      	subs	r3, r3, r2
 8005fce:	440b      	add	r3, r1
 8005fd0:	3303      	adds	r3, #3
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].BurstType        = Cfg->BurstType;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	78d8      	ldrb	r0, [r3, #3]
 8005fda:	4913      	ldr	r1, [pc, #76]	; (8006028 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	440b      	add	r3, r1
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4602      	mov	r2, r0
 8005fea:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].BurstLength      = Cfg->BurstLength;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	7918      	ldrb	r0, [r3, #4]
 8005ff0:	490d      	ldr	r1, [pc, #52]	; (8006028 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	1a9b      	subs	r3, r3, r2
 8005ffa:	440b      	add	r3, r1
 8005ffc:	3305      	adds	r3, #5
 8005ffe:	4602      	mov	r2, r0
 8006000:	701a      	strb	r2, [r3, #0]
        Hspi_Ram_Ctx[Instance].IOMode           = Cfg->IOMode;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	7958      	ldrb	r0, [r3, #5]
 8006006:	4908      	ldr	r1, [pc, #32]	; (8006028 <BSP_HSPI_RAM_Config16BitsOctalRAM+0x424>)
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	1a9b      	subs	r3, r3, r2
 8006010:	440b      	add	r3, r1
 8006012:	3306      	adds	r3, #6
 8006014:	4602      	mov	r2, r0
 8006016:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006018:	68fb      	ldr	r3, [r7, #12]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	2019719c 	.word	0x2019719c
 8006028:	20000040 	.word	0x20000040

0800602c <HSPI_RAM_MspInit>:
  * @brief  Initializes the HSPI MSP.
  * @param  hhspi HSPI handle
  * @retval None
  */
static void HSPI_RAM_MspInit(XSPI_HandleTypeDef *hhspi)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b0a0      	sub	sp, #128	; 0x80
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdmatx, hdmarx;
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8006034:	4bbe      	ldr	r3, [pc, #760]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800603a:	4abd      	ldr	r2, [pc, #756]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 800603c:	f043 0304 	orr.w	r3, r3, #4
 8006040:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006044:	4bba      	ldr	r3, [pc, #744]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006050:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8006052:	4bb8      	ldr	r3, [pc, #736]	; (8006334 <HSPI_RAM_MspInit+0x308>)
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	4ab7      	ldr	r2, [pc, #732]	; (8006334 <HSPI_RAM_MspInit+0x308>)
 8006058:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800605c:	6113      	str	r3, [r2, #16]

  /* Enable the HSPI memory interface, DMA and GPIO clocks */
  HSPI_CLK_ENABLE();
 800605e:	4bb4      	ldr	r3, [pc, #720]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006064:	4ab2      	ldr	r2, [pc, #712]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006066:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800606a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800606e:	4bb0      	ldr	r3, [pc, #704]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006078:	667b      	str	r3, [r7, #100]	; 0x64
 800607a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  HSPI_RAM_DMAx_CLK_ENABLE();
 800607c:	4bac      	ldr	r3, [pc, #688]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	4aab      	ldr	r2, [pc, #684]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006084:	f043 0301 	orr.w	r3, r3, #1
 8006088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800608c:	4ba8      	ldr	r3, [pc, #672]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 800608e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	663b      	str	r3, [r7, #96]	; 0x60
 8006098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  HSPI_CLK_GPIO_CLK_ENABLE();
 800609a:	4ba5      	ldr	r3, [pc, #660]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 800609c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060a0:	4aa3      	ldr	r2, [pc, #652]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80060a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80060aa:	4ba1      	ldr	r3, [pc, #644]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80060ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  HSPI_DQS0_GPIO_CLK_ENABLE();
 80060b8:	4b9d      	ldr	r3, [pc, #628]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80060ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060be:	4a9c      	ldr	r2, [pc, #624]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80060c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80060c8:	4b99      	ldr	r3, [pc, #612]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80060ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80060d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  HSPI_DQS1_GPIO_CLK_ENABLE();
 80060d6:	4b96      	ldr	r3, [pc, #600]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80060d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060dc:	4a94      	ldr	r2, [pc, #592]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80060de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80060e6:	4b92      	ldr	r3, [pc, #584]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80060e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f0:	657b      	str	r3, [r7, #84]	; 0x54
 80060f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  HSPI_CS_GPIO_CLK_ENABLE();
 80060f4:	4b8e      	ldr	r3, [pc, #568]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80060f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060fa:	4a8d      	ldr	r2, [pc, #564]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80060fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006100:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006104:	4b8a      	ldr	r3, [pc, #552]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800610a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610e:	653b      	str	r3, [r7, #80]	; 0x50
 8006110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  HSPI_D0_GPIO_CLK_ENABLE();
 8006112:	4b87      	ldr	r3, [pc, #540]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006118:	4a85      	ldr	r2, [pc, #532]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 800611a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006122:	4b83      	ldr	r3, [pc, #524]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800612e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  HSPI_D1_GPIO_CLK_ENABLE();
 8006130:	4b7f      	ldr	r3, [pc, #508]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006136:	4a7e      	ldr	r2, [pc, #504]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800613c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006140:	4b7b      	ldr	r3, [pc, #492]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614a:	64bb      	str	r3, [r7, #72]	; 0x48
 800614c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  HSPI_D2_GPIO_CLK_ENABLE();
 800614e:	4b78      	ldr	r3, [pc, #480]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006154:	4a76      	ldr	r2, [pc, #472]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800615e:	4b74      	ldr	r3, [pc, #464]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006168:	647b      	str	r3, [r7, #68]	; 0x44
 800616a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  HSPI_D3_GPIO_CLK_ENABLE();
 800616c:	4b70      	ldr	r3, [pc, #448]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 800616e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006172:	4a6f      	ldr	r2, [pc, #444]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006178:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800617c:	4b6c      	ldr	r3, [pc, #432]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 800617e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006186:	643b      	str	r3, [r7, #64]	; 0x40
 8006188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  HSPI_D4_GPIO_CLK_ENABLE();
 800618a:	4b69      	ldr	r3, [pc, #420]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 800618c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006190:	4a67      	ldr	r2, [pc, #412]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006196:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800619a:	4b65      	ldr	r3, [pc, #404]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 800619c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  HSPI_D5_GPIO_CLK_ENABLE();
 80061a8:	4b61      	ldr	r3, [pc, #388]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80061aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061ae:	4a60      	ldr	r2, [pc, #384]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80061b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80061b8:	4b5d      	ldr	r3, [pc, #372]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80061ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  HSPI_D6_GPIO_CLK_ENABLE();
 80061c6:	4b5a      	ldr	r3, [pc, #360]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80061c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061cc:	4a58      	ldr	r2, [pc, #352]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80061ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80061d6:	4b56      	ldr	r3, [pc, #344]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80061d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e0:	637b      	str	r3, [r7, #52]	; 0x34
 80061e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  HSPI_D7_GPIO_CLK_ENABLE();
 80061e4:	4b52      	ldr	r3, [pc, #328]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80061e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061ea:	4a51      	ldr	r2, [pc, #324]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80061ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80061f4:	4b4e      	ldr	r3, [pc, #312]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80061f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  HSPI_D8_GPIO_CLK_ENABLE();
 8006202:	4b4b      	ldr	r3, [pc, #300]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006208:	4a49      	ldr	r2, [pc, #292]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 800620a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800620e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006212:	4b47      	ldr	r3, [pc, #284]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800621e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  HSPI_D9_GPIO_CLK_ENABLE();
 8006220:	4b43      	ldr	r3, [pc, #268]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006226:	4a42      	ldr	r2, [pc, #264]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800622c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006230:	4b3f      	ldr	r3, [pc, #252]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  HSPI_D10_GPIO_CLK_ENABLE();
 800623e:	4b3c      	ldr	r3, [pc, #240]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006244:	4a3a      	ldr	r2, [pc, #232]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800624a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800624e:	4b38      	ldr	r3, [pc, #224]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  HSPI_D11_GPIO_CLK_ENABLE();
 800625c:	4b34      	ldr	r3, [pc, #208]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 800625e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006262:	4a33      	ldr	r2, [pc, #204]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006268:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800626c:	4b30      	ldr	r3, [pc, #192]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 800626e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006276:	623b      	str	r3, [r7, #32]
 8006278:	6a3b      	ldr	r3, [r7, #32]
  HSPI_D12_GPIO_CLK_ENABLE();
 800627a:	4b2d      	ldr	r3, [pc, #180]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 800627c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006280:	4a2b      	ldr	r2, [pc, #172]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 8006282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006286:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800628a:	4b29      	ldr	r3, [pc, #164]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 800628c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006294:	61fb      	str	r3, [r7, #28]
 8006296:	69fb      	ldr	r3, [r7, #28]
  HSPI_D13_GPIO_CLK_ENABLE();
 8006298:	4b25      	ldr	r3, [pc, #148]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 800629a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800629e:	4a24      	ldr	r2, [pc, #144]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80062a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062a8:	4b21      	ldr	r3, [pc, #132]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80062aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b2:	61bb      	str	r3, [r7, #24]
 80062b4:	69bb      	ldr	r3, [r7, #24]
  HSPI_D14_GPIO_CLK_ENABLE();
 80062b6:	4b1e      	ldr	r3, [pc, #120]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80062b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062bc:	4a1c      	ldr	r2, [pc, #112]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80062be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062c6:	4b1a      	ldr	r3, [pc, #104]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80062c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	697b      	ldr	r3, [r7, #20]
  HSPI_D15_GPIO_CLK_ENABLE();
 80062d4:	4b16      	ldr	r3, [pc, #88]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80062d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062da:	4a15      	ldr	r2, [pc, #84]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80062dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062e4:	4b12      	ldr	r3, [pc, #72]	; (8006330 <HSPI_RAM_MspInit+0x304>)
 80062e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ee:	613b      	str	r3, [r7, #16]
 80062f0:	693b      	ldr	r3, [r7, #16]

  /*  Activate HSLV  */
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_CS_GPIO_PORT, HSPI_CS_PIN);
 80062f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062f6:	4810      	ldr	r0, [pc, #64]	; (8006338 <HSPI_RAM_MspInit+0x30c>)
 80062f8:	f004 f910 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_DQS0_GPIO_PORT, HSPI_DQS0_PIN);
 80062fc:	2104      	movs	r1, #4
 80062fe:	480f      	ldr	r0, [pc, #60]	; (800633c <HSPI_RAM_MspInit+0x310>)
 8006300:	f004 f90c 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_DQS1_GPIO_PORT, HSPI_DQS1_PIN);
 8006304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006308:	480c      	ldr	r0, [pc, #48]	; (800633c <HSPI_RAM_MspInit+0x310>)
 800630a:	f004 f907 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_CLK_GPIO_PORT, HSPI_CLK_PIN);
 800630e:	2108      	movs	r1, #8
 8006310:	480a      	ldr	r0, [pc, #40]	; (800633c <HSPI_RAM_MspInit+0x310>)
 8006312:	f004 f903 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_NCLK_GPIO_PORT, HSPI_NCLK_PIN);
 8006316:	2110      	movs	r1, #16
 8006318:	4808      	ldr	r0, [pc, #32]	; (800633c <HSPI_RAM_MspInit+0x310>)
 800631a:	f004 f8ff 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>

  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D0_GPIO_PORT, HSPI_D0_PIN);
 800631e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006322:	4805      	ldr	r0, [pc, #20]	; (8006338 <HSPI_RAM_MspInit+0x30c>)
 8006324:	f004 f8fa 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D1_GPIO_PORT, HSPI_D1_PIN);
 8006328:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800632c:	e008      	b.n	8006340 <HSPI_RAM_MspInit+0x314>
 800632e:	bf00      	nop
 8006330:	46020c00 	.word	0x46020c00
 8006334:	46020800 	.word	0x46020800
 8006338:	42021c00 	.word	0x42021c00
 800633c:	42022000 	.word	0x42022000
 8006340:	48bf      	ldr	r0, [pc, #764]	; (8006640 <HSPI_RAM_MspInit+0x614>)
 8006342:	f004 f8eb 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D2_GPIO_PORT, HSPI_D2_PIN);
 8006346:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800634a:	48bd      	ldr	r0, [pc, #756]	; (8006640 <HSPI_RAM_MspInit+0x614>)
 800634c:	f004 f8e6 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D3_GPIO_PORT, HSPI_D3_PIN);
 8006350:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006354:	48ba      	ldr	r0, [pc, #744]	; (8006640 <HSPI_RAM_MspInit+0x614>)
 8006356:	f004 f8e1 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D4_GPIO_PORT, HSPI_D4_PIN);
 800635a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800635e:	48b8      	ldr	r0, [pc, #736]	; (8006640 <HSPI_RAM_MspInit+0x614>)
 8006360:	f004 f8dc 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D5_GPIO_PORT, HSPI_D5_PIN);
 8006364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006368:	48b5      	ldr	r0, [pc, #724]	; (8006640 <HSPI_RAM_MspInit+0x614>)
 800636a:	f004 f8d7 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D6_GPIO_PORT, HSPI_D6_PIN);
 800636e:	2101      	movs	r1, #1
 8006370:	48b4      	ldr	r0, [pc, #720]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 8006372:	f004 f8d3 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D7_GPIO_PORT, HSPI_D7_PIN);
 8006376:	2102      	movs	r1, #2
 8006378:	48b2      	ldr	r0, [pc, #712]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 800637a:	f004 f8cf 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>

  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D8_GPIO_PORT, HSPI_D8_PIN);
 800637e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006382:	48b0      	ldr	r0, [pc, #704]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 8006384:	f004 f8ca 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D9_GPIO_PORT, HSPI_D9_PIN);
 8006388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800638c:	48ad      	ldr	r0, [pc, #692]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 800638e:	f004 f8c5 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D10_GPIO_PORT, HSPI_D10_PIN);
 8006392:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006396:	48ab      	ldr	r0, [pc, #684]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 8006398:	f004 f8c0 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D11_GPIO_PORT, HSPI_D11_PIN);
 800639c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80063a0:	48a8      	ldr	r0, [pc, #672]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 80063a2:	f004 f8bb 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D12_GPIO_PORT, HSPI_D12_PIN);
 80063a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80063aa:	48a6      	ldr	r0, [pc, #664]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 80063ac:	f004 f8b6 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D13_GPIO_PORT, HSPI_D13_PIN);
 80063b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80063b4:	48a3      	ldr	r0, [pc, #652]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 80063b6:	f004 f8b1 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D14_GPIO_PORT, HSPI_D14_PIN);
 80063ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063be:	48a1      	ldr	r0, [pc, #644]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 80063c0:	f004 f8ac 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(HSPI_D15_GPIO_PORT, HSPI_D15_PIN);
 80063c4:	2101      	movs	r1, #1
 80063c6:	48a0      	ldr	r0, [pc, #640]	; (8006648 <HSPI_RAM_MspInit+0x61c>)
 80063c8:	f004 f8a8 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>

  /* Reset the HSPI memory interface */
  HSPI_FORCE_RESET();
 80063cc:	4b9f      	ldr	r3, [pc, #636]	; (800664c <HSPI_RAM_MspInit+0x620>)
 80063ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063d0:	4a9e      	ldr	r2, [pc, #632]	; (800664c <HSPI_RAM_MspInit+0x620>)
 80063d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063d6:	6693      	str	r3, [r2, #104]	; 0x68
  HSPI_RELEASE_RESET();
 80063d8:	4b9c      	ldr	r3, [pc, #624]	; (800664c <HSPI_RAM_MspInit+0x620>)
 80063da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063dc:	4a9b      	ldr	r2, [pc, #620]	; (800664c <HSPI_RAM_MspInit+0x620>)
 80063de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063e2:	6693      	str	r3, [r2, #104]	; 0x68

  /* HSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_CS_PIN;
 80063e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80063ea:	2302      	movs	r3, #2
 80063ec:	673b      	str	r3, [r7, #112]	; 0x70
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	677b      	str	r3, [r7, #116]	; 0x74
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80063f2:	2302      	movs	r3, #2
 80063f4:	67bb      	str	r3, [r7, #120]	; 0x78
  GPIO_InitStruct.Alternate = HSPI_CS_PIN_AF;
 80063f6:	2308      	movs	r3, #8
 80063f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 80063fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80063fe:	4619      	mov	r1, r3
 8006400:	488f      	ldr	r0, [pc, #572]	; (8006640 <HSPI_RAM_MspInit+0x614>)
 8006402:	f003 fd8b 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI DQS0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_DQS0_PIN;
 8006406:	2304      	movs	r3, #4
 8006408:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_DQS0_PIN_AF;
 800640a:	2308      	movs	r3, #8
 800640c:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_DQS0_GPIO_PORT, &GPIO_InitStruct);
 800640e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006412:	4619      	mov	r1, r3
 8006414:	488b      	ldr	r0, [pc, #556]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 8006416:	f003 fd81 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI DQS1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_DQS1_PIN;
 800641a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800641e:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_DQS1_PIN_AF;
 8006420:	2308      	movs	r3, #8
 8006422:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_DQS1_GPIO_PORT, &GPIO_InitStruct);
 8006424:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006428:	4619      	mov	r1, r3
 800642a:	4886      	ldr	r0, [pc, #536]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 800642c:	f003 fd76 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_CLK_PIN;
 8006430:	2308      	movs	r3, #8
 8006432:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_CLK_PIN_AF;
 8006434:	2308      	movs	r3, #8
 8006436:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8006438:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800643c:	4619      	mov	r1, r3
 800643e:	4881      	ldr	r0, [pc, #516]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 8006440:	f003 fd6c 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D0_PIN;
 8006444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006448:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D0_PIN_AF;
 800644a:	2308      	movs	r3, #8
 800644c:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800644e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006452:	4619      	mov	r1, r3
 8006454:	487a      	ldr	r0, [pc, #488]	; (8006640 <HSPI_RAM_MspInit+0x614>)
 8006456:	f003 fd61 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D1_PIN;
 800645a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800645e:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D1_PIN_AF;
 8006460:	2308      	movs	r3, #8
 8006462:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8006464:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006468:	4619      	mov	r1, r3
 800646a:	4875      	ldr	r0, [pc, #468]	; (8006640 <HSPI_RAM_MspInit+0x614>)
 800646c:	f003 fd56 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D2_PIN;
 8006470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006474:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D2_PIN_AF;
 8006476:	2308      	movs	r3, #8
 8006478:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 800647a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800647e:	4619      	mov	r1, r3
 8006480:	486f      	ldr	r0, [pc, #444]	; (8006640 <HSPI_RAM_MspInit+0x614>)
 8006482:	f003 fd4b 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D3_PIN;
 8006486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800648a:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D3_PIN_AF;
 800648c:	2308      	movs	r3, #8
 800648e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8006490:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006494:	4619      	mov	r1, r3
 8006496:	486a      	ldr	r0, [pc, #424]	; (8006640 <HSPI_RAM_MspInit+0x614>)
 8006498:	f003 fd40 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D4_PIN;
 800649c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D4_PIN_AF;
 80064a2:	2308      	movs	r3, #8
 80064a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 80064a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80064aa:	4619      	mov	r1, r3
 80064ac:	4864      	ldr	r0, [pc, #400]	; (8006640 <HSPI_RAM_MspInit+0x614>)
 80064ae:	f003 fd35 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D5_PIN;
 80064b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D5_PIN_AF;
 80064b8:	2308      	movs	r3, #8
 80064ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 80064bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80064c0:	4619      	mov	r1, r3
 80064c2:	485f      	ldr	r0, [pc, #380]	; (8006640 <HSPI_RAM_MspInit+0x614>)
 80064c4:	f003 fd2a 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D6_PIN;
 80064c8:	2301      	movs	r3, #1
 80064ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D6_PIN_AF;
 80064cc:	2308      	movs	r3, #8
 80064ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 80064d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80064d4:	4619      	mov	r1, r3
 80064d6:	485b      	ldr	r0, [pc, #364]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 80064d8:	f003 fd20 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D7_PIN;
 80064dc:	2302      	movs	r3, #2
 80064de:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D7_PIN_AF;
 80064e0:	2308      	movs	r3, #8
 80064e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 80064e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80064e8:	4619      	mov	r1, r3
 80064ea:	4856      	ldr	r0, [pc, #344]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 80064ec:	f003 fd16 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI D8 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D8_PIN;
 80064f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D8_PIN_AF;
 80064f6:	2308      	movs	r3, #8
 80064f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D8_GPIO_PORT, &GPIO_InitStruct);
 80064fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80064fe:	4619      	mov	r1, r3
 8006500:	4850      	ldr	r0, [pc, #320]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 8006502:	f003 fd0b 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI D9 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D9_PIN;
 8006506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800650a:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D9_PIN_AF;
 800650c:	2308      	movs	r3, #8
 800650e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D9_GPIO_PORT, &GPIO_InitStruct);
 8006510:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006514:	4619      	mov	r1, r3
 8006516:	484b      	ldr	r0, [pc, #300]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 8006518:	f003 fd00 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI D10 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D10_PIN;
 800651c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006520:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D10_PIN_AF;
 8006522:	2308      	movs	r3, #8
 8006524:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D10_GPIO_PORT, &GPIO_InitStruct);
 8006526:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800652a:	4619      	mov	r1, r3
 800652c:	4845      	ldr	r0, [pc, #276]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 800652e:	f003 fcf5 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI D11 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D11_PIN;
 8006532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006536:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D11_PIN_AF;
 8006538:	2308      	movs	r3, #8
 800653a:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D11_GPIO_PORT, &GPIO_InitStruct);
 800653c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006540:	4619      	mov	r1, r3
 8006542:	4840      	ldr	r0, [pc, #256]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 8006544:	f003 fcea 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI D12 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D12_PIN;
 8006548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800654c:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D12_PIN_AF;
 800654e:	2308      	movs	r3, #8
 8006550:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D12_GPIO_PORT, &GPIO_InitStruct);
 8006552:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006556:	4619      	mov	r1, r3
 8006558:	483a      	ldr	r0, [pc, #232]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 800655a:	f003 fcdf 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI D13 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D13_PIN;
 800655e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006562:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D13_PIN_AF;
 8006564:	2308      	movs	r3, #8
 8006566:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D13_GPIO_PORT, &GPIO_InitStruct);
 8006568:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800656c:	4619      	mov	r1, r3
 800656e:	4835      	ldr	r0, [pc, #212]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 8006570:	f003 fcd4 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI D14 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D14_PIN;
 8006574:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006578:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D14_PIN_AF;
 800657a:	2308      	movs	r3, #8
 800657c:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D14_GPIO_PORT, &GPIO_InitStruct);
 800657e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006582:	4619      	mov	r1, r3
 8006584:	482f      	ldr	r0, [pc, #188]	; (8006644 <HSPI_RAM_MspInit+0x618>)
 8006586:	f003 fcc9 	bl	8009f1c <HAL_GPIO_Init>

  /* HSPI D15 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = HSPI_D15_PIN;
 800658a:	2301      	movs	r3, #1
 800658c:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.Alternate = HSPI_D15_PIN_AF;
 800658e:	2308      	movs	r3, #8
 8006590:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_GPIO_Init(HSPI_D15_GPIO_PORT, &GPIO_InitStruct);
 8006592:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006596:	4619      	mov	r1, r3
 8006598:	482b      	ldr	r0, [pc, #172]	; (8006648 <HSPI_RAM_MspInit+0x61c>)
 800659a:	f003 fcbf 	bl	8009f1c <HAL_GPIO_Init>

  hdmatx.Init.Request = GPDMA1_REQUEST_HSPI1;
 800659e:	4b2c      	ldr	r3, [pc, #176]	; (8006650 <HSPI_RAM_MspInit+0x624>)
 80065a0:	2272      	movs	r2, #114	; 0x72
 80065a2:	605a      	str	r2, [r3, #4]
  hdmatx.Instance = GPDMA1_Channel12;
 80065a4:	4b2a      	ldr	r3, [pc, #168]	; (8006650 <HSPI_RAM_MspInit+0x624>)
 80065a6:	4a2b      	ldr	r2, [pc, #172]	; (8006654 <HSPI_RAM_MspInit+0x628>)
 80065a8:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0x00, 0);
 80065aa:	2200      	movs	r2, #0
 80065ac:	2100      	movs	r1, #0
 80065ae:	2054      	movs	r0, #84	; 0x54
 80065b0:	f001 fb0c 	bl	8007bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 80065b4:	2054      	movs	r0, #84	; 0x54
 80065b6:	f001 fb23 	bl	8007c00 <HAL_NVIC_EnableIRQ>

  /* Configure the HSPI DMA transmit */
  hdmatx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80065ba:	4b25      	ldr	r3, [pc, #148]	; (8006650 <HSPI_RAM_MspInit+0x624>)
 80065bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065c0:	60da      	str	r2, [r3, #12]
  hdmatx.Init.SrcInc              = DMA_SINC_INCREMENTED;
 80065c2:	4b23      	ldr	r3, [pc, #140]	; (8006650 <HSPI_RAM_MspInit+0x624>)
 80065c4:	2208      	movs	r2, #8
 80065c6:	611a      	str	r2, [r3, #16]
  hdmatx.Init.DestInc             = DMA_DINC_FIXED;
 80065c8:	4b21      	ldr	r3, [pc, #132]	; (8006650 <HSPI_RAM_MspInit+0x624>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	615a      	str	r2, [r3, #20]
  hdmatx.Init.Priority            = DMA_HIGH_PRIORITY;
 80065ce:	4b20      	ldr	r3, [pc, #128]	; (8006650 <HSPI_RAM_MspInit+0x624>)
 80065d0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80065d4:	621a      	str	r2, [r3, #32]
  hdmatx.Init.SrcBurstLength      = 1;
 80065d6:	4b1e      	ldr	r3, [pc, #120]	; (8006650 <HSPI_RAM_MspInit+0x624>)
 80065d8:	2201      	movs	r2, #1
 80065da:	625a      	str	r2, [r3, #36]	; 0x24
  hdmatx.Init.DestBurstLength     = 1;
 80065dc:	4b1c      	ldr	r3, [pc, #112]	; (8006650 <HSPI_RAM_MspInit+0x624>)
 80065de:	2201      	movs	r2, #1
 80065e0:	629a      	str	r2, [r3, #40]	; 0x28
  hdmatx.Init.TransferEventMode   = DMA_TCEM_BLOCK_TRANSFER;
 80065e2:	4b1b      	ldr	r3, [pc, #108]	; (8006650 <HSPI_RAM_MspInit+0x624>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	631a      	str	r2, [r3, #48]	; 0x30
  hdmatx.Init.SrcDataWidth        = DMA_SRC_DATAWIDTH_WORD ;
 80065e8:	4b19      	ldr	r3, [pc, #100]	; (8006650 <HSPI_RAM_MspInit+0x624>)
 80065ea:	2202      	movs	r2, #2
 80065ec:	619a      	str	r2, [r3, #24]
  hdmatx.Init.DestDataWidth       = DMA_DEST_DATAWIDTH_WORD  ;
 80065ee:	4b18      	ldr	r3, [pc, #96]	; (8006650 <HSPI_RAM_MspInit+0x624>)
 80065f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80065f4:	61da      	str	r2, [r3, #28]

  /* Enable the GPDMA clock */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80065f6:	4b15      	ldr	r3, [pc, #84]	; (800664c <HSPI_RAM_MspInit+0x620>)
 80065f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fc:	4a13      	ldr	r2, [pc, #76]	; (800664c <HSPI_RAM_MspInit+0x620>)
 80065fe:	f043 0301 	orr.w	r3, r3, #1
 8006602:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8006606:	4b11      	ldr	r3, [pc, #68]	; (800664c <HSPI_RAM_MspInit+0x620>)
 8006608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	68fb      	ldr	r3, [r7, #12]

  /* Initialize the DMA channel */
  __HAL_LINKDMA(hhspi, hdmatx, hdmatx);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a0e      	ldr	r2, [pc, #56]	; (8006650 <HSPI_RAM_MspInit+0x624>)
 8006618:	64da      	str	r2, [r3, #76]	; 0x4c
 800661a:	4a0d      	ldr	r2, [pc, #52]	; (8006650 <HSPI_RAM_MspInit+0x624>)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_DMA_Init(&hdmatx);
 8006620:	480b      	ldr	r0, [pc, #44]	; (8006650 <HSPI_RAM_MspInit+0x624>)
 8006622:	f001 fcf1 	bl	8008008 <HAL_DMA_Init>

  hdmarx.Init.Request = GPDMA1_REQUEST_HSPI1;
 8006626:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <HSPI_RAM_MspInit+0x62c>)
 8006628:	2272      	movs	r2, #114	; 0x72
 800662a:	605a      	str	r2, [r3, #4]
  hdmarx.Instance = GPDMA1_Channel7;
 800662c:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <HSPI_RAM_MspInit+0x62c>)
 800662e:	4a0b      	ldr	r2, [pc, #44]	; (800665c <HSPI_RAM_MspInit+0x630>)
 8006630:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(GPDMA1_Channel7_IRQn, 0x00, 0);
 8006632:	2200      	movs	r2, #0
 8006634:	2100      	movs	r1, #0
 8006636:	2024      	movs	r0, #36	; 0x24
 8006638:	f001 fac8 	bl	8007bcc <HAL_NVIC_SetPriority>
 800663c:	e010      	b.n	8006660 <HSPI_RAM_MspInit+0x634>
 800663e:	bf00      	nop
 8006640:	42021c00 	.word	0x42021c00
 8006644:	42022000 	.word	0x42022000
 8006648:	42022400 	.word	0x42022400
 800664c:	46020c00 	.word	0x46020c00
 8006650:	201971fc 	.word	0x201971fc
 8006654:	40020650 	.word	0x40020650
 8006658:	20197274 	.word	0x20197274
 800665c:	400203d0 	.word	0x400203d0
  HAL_NVIC_EnableIRQ(GPDMA1_Channel7_IRQn);
 8006660:	2024      	movs	r0, #36	; 0x24
 8006662:	f001 facd 	bl	8007c00 <HAL_NVIC_EnableIRQ>

  /* Configure the HSPI DMA receive */
  hdmarx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006666:	4b25      	ldr	r3, [pc, #148]	; (80066fc <HSPI_RAM_MspInit+0x6d0>)
 8006668:	2200      	movs	r2, #0
 800666a:	60da      	str	r2, [r3, #12]
  hdmarx.Init.SrcInc              = DMA_SINC_FIXED;
 800666c:	4b23      	ldr	r3, [pc, #140]	; (80066fc <HSPI_RAM_MspInit+0x6d0>)
 800666e:	2200      	movs	r2, #0
 8006670:	611a      	str	r2, [r3, #16]
  hdmarx.Init.DestInc             = DMA_DINC_INCREMENTED;
 8006672:	4b22      	ldr	r3, [pc, #136]	; (80066fc <HSPI_RAM_MspInit+0x6d0>)
 8006674:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006678:	615a      	str	r2, [r3, #20]
  hdmarx.Init.Priority            = DMA_HIGH_PRIORITY;
 800667a:	4b20      	ldr	r3, [pc, #128]	; (80066fc <HSPI_RAM_MspInit+0x6d0>)
 800667c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006680:	621a      	str	r2, [r3, #32]
  hdmarx.Init.SrcBurstLength      = 1;
 8006682:	4b1e      	ldr	r3, [pc, #120]	; (80066fc <HSPI_RAM_MspInit+0x6d0>)
 8006684:	2201      	movs	r2, #1
 8006686:	625a      	str	r2, [r3, #36]	; 0x24
  hdmarx.Init.DestBurstLength     = 1;
 8006688:	4b1c      	ldr	r3, [pc, #112]	; (80066fc <HSPI_RAM_MspInit+0x6d0>)
 800668a:	2201      	movs	r2, #1
 800668c:	629a      	str	r2, [r3, #40]	; 0x28
  hdmarx.Init.TransferEventMode   = DMA_TCEM_BLOCK_TRANSFER;
 800668e:	4b1b      	ldr	r3, [pc, #108]	; (80066fc <HSPI_RAM_MspInit+0x6d0>)
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	; 0x30
  hdmarx.Init.SrcDataWidth        = DMA_SRC_DATAWIDTH_WORD ;
 8006694:	4b19      	ldr	r3, [pc, #100]	; (80066fc <HSPI_RAM_MspInit+0x6d0>)
 8006696:	2202      	movs	r2, #2
 8006698:	619a      	str	r2, [r3, #24]
  hdmarx.Init.DestDataWidth       = DMA_DEST_DATAWIDTH_WORD  ;
 800669a:	4b18      	ldr	r3, [pc, #96]	; (80066fc <HSPI_RAM_MspInit+0x6d0>)
 800669c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80066a0:	61da      	str	r2, [r3, #28]

  /* Enable the GPDMA clock */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80066a2:	4b17      	ldr	r3, [pc, #92]	; (8006700 <HSPI_RAM_MspInit+0x6d4>)
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a8:	4a15      	ldr	r2, [pc, #84]	; (8006700 <HSPI_RAM_MspInit+0x6d4>)
 80066aa:	f043 0301 	orr.w	r3, r3, #1
 80066ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80066b2:	4b13      	ldr	r3, [pc, #76]	; (8006700 <HSPI_RAM_MspInit+0x6d4>)
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	60bb      	str	r3, [r7, #8]
 80066be:	68bb      	ldr	r3, [r7, #8]

  /* Initialize the DMA channel */
  __HAL_LINKDMA(hhspi, hdmarx, hdmarx);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a0e      	ldr	r2, [pc, #56]	; (80066fc <HSPI_RAM_MspInit+0x6d0>)
 80066c4:	651a      	str	r2, [r3, #80]	; 0x50
 80066c6:	4a0d      	ldr	r2, [pc, #52]	; (80066fc <HSPI_RAM_MspInit+0x6d0>)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_DMA_Init(&hdmarx);
 80066cc:	480b      	ldr	r0, [pc, #44]	; (80066fc <HSPI_RAM_MspInit+0x6d0>)
 80066ce:	f001 fc9b 	bl	8008008 <HAL_DMA_Init>

  /* Enable and set priority of the HSPI and DMA interrupts */
  HAL_NVIC_SetPriority(HSPI1_IRQn, BSP_HSPI_RAM_IT_PRIORITY, 0);
 80066d2:	2200      	movs	r2, #0
 80066d4:	210f      	movs	r1, #15
 80066d6:	2083      	movs	r0, #131	; 0x83
 80066d8:	f001 fa78 	bl	8007bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(HSPI_RAM_DMAx_IRQn, BSP_HSPI_RAM_DMA_IT_PRIORITY, 0);
 80066dc:	2200      	movs	r2, #0
 80066de:	210f      	movs	r1, #15
 80066e0:	201f      	movs	r0, #31
 80066e2:	f001 fa73 	bl	8007bcc <HAL_NVIC_SetPriority>

  HAL_NVIC_EnableIRQ(HSPI1_IRQn);
 80066e6:	2083      	movs	r0, #131	; 0x83
 80066e8:	f001 fa8a 	bl	8007c00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(HSPI_RAM_DMAx_IRQn);
 80066ec:	201f      	movs	r0, #31
 80066ee:	f001 fa87 	bl	8007c00 <HAL_NVIC_EnableIRQ>
}
 80066f2:	bf00      	nop
 80066f4:	3780      	adds	r7, #128	; 0x80
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20197274 	.word	0x20197274
 8006700:	46020c00 	.word	0x46020c00

08006704 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 8006704:	b590      	push	{r4, r7, lr}
 8006706:	b095      	sub	sp, #84	; 0x54
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_InitTypeDef ospi_init;

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <BSP_OSPI_NOR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006714:	f06f 0301 	mvn.w	r3, #1
 8006718:	64fb      	str	r3, [r7, #76]	; 0x4c
 800671a:	e095      	b.n	8006848 <BSP_OSPI_NOR_Init+0x144>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800671c:	494d      	ldr	r1, [pc, #308]	; (8006854 <BSP_OSPI_NOR_Init+0x150>)
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	4613      	mov	r3, r2
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	4413      	add	r3, r2
 8006726:	440b      	add	r3, r1
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	f040 808a 	bne.w	8006844 <BSP_OSPI_NOR_Init+0x140>
    {
#if (USE_HAL_XSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	4613      	mov	r3, r2
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	4413      	add	r3, r2
 8006738:	015b      	lsls	r3, r3, #5
 800673a:	4a47      	ldr	r2, [pc, #284]	; (8006858 <BSP_OSPI_NOR_Init+0x154>)
 800673c:	4413      	add	r3, r2
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fa26 	bl	8006b90 <OSPI_NOR_MspInit>
        }
      }
#endif /* USE_HAL_XSPI_REGISTER_CALLBACKS */

      /* Get Flash information of one memory */
      (void)MX25UM51245G_GetFlashInfo(&pInfo);
 8006744:	f107 031c 	add.w	r3, r7, #28
 8006748:	4618      	mov	r0, r3
 800674a:	f7fd fd53 	bl	80041f4 <MX25UM51245G_GetFlashInfo>

      /* Fill config structure */
      ospi_init.ClockPrescaler = 1;
 800674e:	2301      	movs	r3, #1
 8006750:	613b      	str	r3, [r7, #16]
      ospi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006758:	fa93 f3a3 	rbit	r3, r3
 800675c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800675e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006760:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <BSP_OSPI_NOR_Init+0x68>
    return 32U;
 8006768:	2320      	movs	r3, #32
 800676a:	e003      	b.n	8006774 <BSP_OSPI_NOR_Init+0x70>
  return __builtin_clz(value);
 800676c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800676e:	fab3 f383 	clz	r3, r3
 8006772:	b2db      	uxtb	r3, r3
 8006774:	60fb      	str	r3, [r7, #12]
      ospi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]
      ospi_init.TransferRate   = (uint32_t) Init->TransferRate;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	785b      	ldrb	r3, [r3, #1]
 800677e:	61bb      	str	r3, [r7, #24]

      /* STM32 OSPI interface initialization */
      if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_init) != HAL_OK)
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	4613      	mov	r3, r2
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	4413      	add	r3, r2
 8006788:	015b      	lsls	r3, r3, #5
 800678a:	4a33      	ldr	r2, [pc, #204]	; (8006858 <BSP_OSPI_NOR_Init+0x154>)
 800678c:	4413      	add	r3, r2
 800678e:	f107 020c 	add.w	r2, r7, #12
 8006792:	4611      	mov	r1, r2
 8006794:	4618      	mov	r0, r3
 8006796:	f000 f861 	bl	800685c <MX_OSPI_NOR_Init>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <BSP_OSPI_NOR_Init+0xa4>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80067a0:	f06f 0303 	mvn.w	r3, #3
 80067a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067a6:	e04f      	b.n	8006848 <BSP_OSPI_NOR_Init+0x144>
      }
      /* OSPI Delay Block enable */
      else if (OSPI_DLYB_Enable(&hospi_nor[Instance]) != BSP_ERROR_NONE)
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	4613      	mov	r3, r2
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	4413      	add	r3, r2
 80067b0:	015b      	lsls	r3, r3, #5
 80067b2:	4a29      	ldr	r2, [pc, #164]	; (8006858 <BSP_OSPI_NOR_Init+0x154>)
 80067b4:	4413      	add	r3, r2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 f9a0 	bl	8006afc <OSPI_DLYB_Enable>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <BSP_OSPI_NOR_Init+0xc6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80067c2:	f06f 0304 	mvn.w	r3, #4
 80067c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067c8:	e03e      	b.n	8006848 <BSP_OSPI_NOR_Init+0x144>
      }
      /* OSPI memory reset */
      else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fb72 	bl	8006eb4 <OSPI_NOR_ResetMemory>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <BSP_OSPI_NOR_Init+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80067d6:	f06f 0304 	mvn.w	r3, #4
 80067da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067dc:	e034      	b.n	8006848 <BSP_OSPI_NOR_Init+0x144>
      }
      /* Check if memory is ready */
      else if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	4613      	mov	r3, r2
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	4413      	add	r3, r2
 80067e6:	015b      	lsls	r3, r3, #5
 80067e8:	4a1b      	ldr	r2, [pc, #108]	; (8006858 <BSP_OSPI_NOR_Init+0x154>)
 80067ea:	1898      	adds	r0, r3, r2
 80067ec:	4919      	ldr	r1, [pc, #100]	; (8006854 <BSP_OSPI_NOR_Init+0x150>)
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	4613      	mov	r3, r2
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	4413      	add	r3, r2
 80067f6:	440b      	add	r3, r1
 80067f8:	3301      	adds	r3, #1
 80067fa:	7819      	ldrb	r1, [r3, #0]
 80067fc:	4c15      	ldr	r4, [pc, #84]	; (8006854 <BSP_OSPI_NOR_Init+0x150>)
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	4613      	mov	r3, r2
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	4413      	add	r3, r2
 8006806:	4423      	add	r3, r4
 8006808:	3302      	adds	r3, #2
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	f7fd fd20 	bl	8004252 <MX25UM51245G_AutoPollingMemReady>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <BSP_OSPI_NOR_Init+0x11c>
                                                Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006818:	f06f 0304 	mvn.w	r3, #4
 800681c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800681e:	e013      	b.n	8006848 <BSP_OSPI_NOR_Init+0x144>
      }
      /* Configure the memory */
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	7819      	ldrb	r1, [r3, #0]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	785b      	ldrb	r3, [r3, #1]
 8006828:	461a      	mov	r2, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f8da 	bl	80069e4 <BSP_OSPI_NOR_ConfigFlash>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <BSP_OSPI_NOR_Init+0x13a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006836:	f06f 0304 	mvn.w	r3, #4
 800683a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800683c:	e004      	b.n	8006848 <BSP_OSPI_NOR_Init+0x144>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800683e:	2300      	movs	r3, #0
 8006840:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006842:	e001      	b.n	8006848 <BSP_OSPI_NOR_Init+0x144>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8006844:	2300      	movs	r3, #0
 8006846:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  /* Return BSP status */
  return ret;
 8006848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800684a:	4618      	mov	r0, r3
 800684c:	3754      	adds	r7, #84	; 0x54
 800684e:	46bd      	mov	sp, r7
 8006850:	bd90      	pop	{r4, r7, pc}
 8006852:	bf00      	nop
 8006854:	2019734c 	.word	0x2019734c
 8006858:	201972ec 	.word	0x201972ec

0800685c <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Init           OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(XSPI_HandleTypeDef *hospi, MX_OSPI_InitTypeDef *Init)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a20      	ldr	r2, [pc, #128]	; (80068ec <MX_OSPI_NOR_Init+0x90>)
 800686a:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThresholdByte       = 4;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2204      	movs	r2, #4
 8006870:	605a      	str	r2, [r3, #4]
  hospi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	609a      	str	r2, [r3, #8]
  hospi->Init.MemorySize              = Init->MemorySize; /* 512 MBits */
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTimeCycle = 2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler          = Init->ClockPrescaler;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting          = Init->SampleShifting;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary      = 0;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass        = HAL_XSPI_DELAY_BLOCK_ON;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	635a      	str	r2, [r3, #52]	; 0x34

  if (Init->TransferRate == (uint32_t) BSP_OSPI_NOR_DTR_TRANSFER)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d108      	bne.n	80068ce <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068c2:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80068cc:	e005      	b.n	80068da <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_XSPI_Init(hospi);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f00c fa96 	bl	8012e0c <HAL_XSPI_Init>
 80068e0:	4603      	mov	r3, r0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	420d1400 	.word	0x420d1400

080068f0 <BSP_OSPI_NOR_GetInfo>:
  * @param  Instance  OSPI instance
  * @param  pInfo     pointer on the configuration structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_GetInfo(uint32_t Instance, BSP_OSPI_NOR_Info_t *pInfo)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d003      	beq.n	800690c <BSP_OSPI_NOR_GetInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006904:	f06f 0301 	mvn.w	r3, #1
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	e002      	b.n	8006912 <BSP_OSPI_NOR_GetInfo+0x22>
  }
  else
  {
    (void)MX25UM51245G_GetFlashInfo(pInfo);
 800690c:	6838      	ldr	r0, [r7, #0]
 800690e:	f7fd fc71 	bl	80041f4 <MX25UM51245G_GetFlashInfo>
  }

  /* Return BSP status */
  return ret;
 8006912:	68fb      	ldr	r3, [r7, #12]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800692e:	f06f 0301 	mvn.w	r3, #1
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	e04d      	b.n	80069d2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
  }
  else
  {
    if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8006936:	4929      	ldr	r1, [pc, #164]	; (80069dc <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	4613      	mov	r3, r2
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	4413      	add	r3, r2
 8006940:	440b      	add	r3, r1
 8006942:	3302      	adds	r3, #2
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d122      	bne.n	8006990 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x74>
    {
      if (MX25UM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	4613      	mov	r3, r2
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	4413      	add	r3, r2
 8006952:	015b      	lsls	r3, r3, #5
 8006954:	4a22      	ldr	r2, [pc, #136]	; (80069e0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc4>)
 8006956:	1898      	adds	r0, r3, r2
 8006958:	4920      	ldr	r1, [pc, #128]	; (80069dc <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	4613      	mov	r3, r2
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	4413      	add	r3, r2
 8006962:	440b      	add	r3, r1
 8006964:	3301      	adds	r3, #1
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2201      	movs	r2, #1
 800696a:	4619      	mov	r1, r3
 800696c:	f7fd fd23 	bl	80043b6 <MX25UM51245G_EnableSTRMemoryMappedMode>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x62>
                                                 MX25UM51245G_4BYTES_SIZE) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006976:	f06f 0304 	mvn.w	r3, #4
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	e029      	b.n	80069d2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800697e:	4917      	ldr	r1, [pc, #92]	; (80069dc <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	4613      	mov	r3, r2
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	4413      	add	r3, r2
 8006988:	440b      	add	r3, r1
 800698a:	2202      	movs	r2, #2
 800698c:	701a      	strb	r2, [r3, #0]
 800698e:	e020      	b.n	80069d2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
    }
    else
    {
      if (MX25UM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance],
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	4613      	mov	r3, r2
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	4413      	add	r3, r2
 8006998:	015b      	lsls	r3, r3, #5
 800699a:	4a11      	ldr	r2, [pc, #68]	; (80069e0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc4>)
 800699c:	1898      	adds	r0, r3, r2
 800699e:	490f      	ldr	r1, [pc, #60]	; (80069dc <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	4413      	add	r3, r2
 80069a8:	440b      	add	r3, r1
 80069aa:	3301      	adds	r3, #1
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	4619      	mov	r1, r3
 80069b0:	f7fd fdab 	bl	800450a <MX25UM51245G_EnableDTRMemoryMappedMode>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa6>
                                                 Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25UM51245G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80069ba:	f06f 0304 	mvn.w	r3, #4
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	e007      	b.n	80069d2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xb6>
      }
      else /* Update OSPI context if all operations are well done */
      {
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 80069c2:	4906      	ldr	r1, [pc, #24]	; (80069dc <BSP_OSPI_NOR_EnableMemoryMappedMode+0xc0>)
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	4613      	mov	r3, r2
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	4413      	add	r3, r2
 80069cc:	440b      	add	r3, r1
 80069ce:	2202      	movs	r2, #2
 80069d0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80069d2:	68fb      	ldr	r3, [r7, #12]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	2019734c 	.word	0x2019734c
 80069e0:	201972ec 	.word	0x201972ec

080069e4 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	70fb      	strb	r3, [r7, #3]
 80069f0:	4613      	mov	r3, r2
 80069f2:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80069fe:	f06f 0301 	mvn.w	r3, #1
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e072      	b.n	8006aec <BSP_OSPI_NOR_ConfigFlash+0x108>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8006a06:	493c      	ldr	r1, [pc, #240]	; (8006af8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	4413      	add	r3, r2
 8006a10:	440b      	add	r3, r1
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d103      	bne.n	8006a20 <BSP_OSPI_NOR_ConfigFlash+0x3c>
    {
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8006a18:	f06f 0315 	mvn.w	r3, #21
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	e065      	b.n	8006aec <BSP_OSPI_NOR_ConfigFlash+0x108>
    }
    else
    {
      /* Setup Flash interface ***************************************************/
      switch (Ospi_Nor_Ctx[Instance].InterfaceMode)
 8006a20:	4935      	ldr	r1, [pc, #212]	; (8006af8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	4613      	mov	r3, r2
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	4413      	add	r3, r2
 8006a2a:	440b      	add	r3, r1
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d12b      	bne.n	8006a8c <BSP_OSPI_NOR_ConfigFlash+0xa8>
      {
        case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
          if ((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8006a34:	78fb      	ldrb	r3, [r7, #3]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d10a      	bne.n	8006a50 <BSP_OSPI_NOR_ConfigFlash+0x6c>
 8006a3a:	492f      	ldr	r1, [pc, #188]	; (8006af8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	4413      	add	r3, r2
 8006a44:	440b      	add	r3, r1
 8006a46:	3302      	adds	r3, #2
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	78ba      	ldrb	r2, [r7, #2]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d02d      	beq.n	8006aac <BSP_OSPI_NOR_ConfigFlash+0xc8>
          {
            /* Exit OPI mode */
            ret = OSPI_NOR_ExitOPIMode(Instance);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fca1 	bl	8007398 <OSPI_NOR_ExitOPIMode>
 8006a56:	60f8      	str	r0, [r7, #12]

            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d126      	bne.n	8006aac <BSP_OSPI_NOR_ConfigFlash+0xc8>
 8006a5e:	78fb      	ldrb	r3, [r7, #3]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d123      	bne.n	8006aac <BSP_OSPI_NOR_ConfigFlash+0xc8>
            {

              if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8006a64:	4924      	ldr	r1, [pc, #144]	; (8006af8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	4413      	add	r3, r2
 8006a6e:	440b      	add	r3, r1
 8006a70:	3302      	adds	r3, #2
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d104      	bne.n	8006a82 <BSP_OSPI_NOR_ConfigFlash+0x9e>
              {
                /* Enter DTR OPI mode */
                ret = OSPI_NOR_EnterDOPIMode(Instance);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fac1 	bl	8007000 <OSPI_NOR_EnterDOPIMode>
 8006a7e:	60f8      	str	r0, [r7, #12]
                /* Enter STR OPI mode */
                ret = OSPI_NOR_EnterSOPIMode(Instance);
              }
            }
          }
          break;
 8006a80:	e014      	b.n	8006aac <BSP_OSPI_NOR_ConfigFlash+0xc8>
                ret = OSPI_NOR_EnterSOPIMode(Instance);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fbb6 	bl	80071f4 <OSPI_NOR_EnterSOPIMode>
 8006a88:	60f8      	str	r0, [r7, #12]
          break;
 8006a8a:	e00f      	b.n	8006aac <BSP_OSPI_NOR_ConfigFlash+0xc8>

        case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
        default :
          if (Mode == BSP_OSPI_NOR_OPI_MODE)
 8006a8c:	78fb      	ldrb	r3, [r7, #3]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d10e      	bne.n	8006ab0 <BSP_OSPI_NOR_ConfigFlash+0xcc>
          {
            if (Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8006a92:	78bb      	ldrb	r3, [r7, #2]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d104      	bne.n	8006aa2 <BSP_OSPI_NOR_ConfigFlash+0xbe>
            {
              /* Enter STR OPI mode */
              ret = OSPI_NOR_EnterSOPIMode(Instance);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fbab 	bl	80071f4 <OSPI_NOR_EnterSOPIMode>
 8006a9e:	60f8      	str	r0, [r7, #12]
            {
              /* Enter DTR OPI mode */
              ret = OSPI_NOR_EnterDOPIMode(Instance);
            }
          }
          break;
 8006aa0:	e006      	b.n	8006ab0 <BSP_OSPI_NOR_ConfigFlash+0xcc>
              ret = OSPI_NOR_EnterDOPIMode(Instance);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 faac 	bl	8007000 <OSPI_NOR_EnterDOPIMode>
 8006aa8:	60f8      	str	r0, [r7, #12]
          break;
 8006aaa:	e001      	b.n	8006ab0 <BSP_OSPI_NOR_ConfigFlash+0xcc>
          break;
 8006aac:	bf00      	nop
 8006aae:	e000      	b.n	8006ab2 <BSP_OSPI_NOR_ConfigFlash+0xce>
          break;
 8006ab0:	bf00      	nop
      }

      /* Update OSPI context if all operations are well done */
      if (ret == BSP_ERROR_NONE)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d119      	bne.n	8006aec <BSP_OSPI_NOR_ConfigFlash+0x108>
      {
        /* Update current status parameter *****************************************/
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8006ab8:	490f      	ldr	r1, [pc, #60]	; (8006af8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	4613      	mov	r3, r2
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	4413      	add	r3, r2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8006ac8:	490b      	ldr	r1, [pc, #44]	; (8006af8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	4613      	mov	r3, r2
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	4413      	add	r3, r2
 8006ad2:	440b      	add	r3, r1
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	78fa      	ldrb	r2, [r7, #3]
 8006ad8:	701a      	strb	r2, [r3, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8006ada:	4907      	ldr	r1, [pc, #28]	; (8006af8 <BSP_OSPI_NOR_ConfigFlash+0x114>)
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	4413      	add	r3, r2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	3302      	adds	r3, #2
 8006ae8:	78ba      	ldrb	r2, [r7, #2]
 8006aea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8006aec:	68fb      	ldr	r3, [r7, #12]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	2019734c 	.word	0x2019734c

08006afc <OSPI_DLYB_Enable>:
  * @brief  This function enables delay block.
  * @param  hospi OSPI handle
  * @retval BSP status
  */
static int32_t OSPI_DLYB_Enable(XSPI_HandleTypeDef *hospi)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  LL_DLYB_CfgTypeDef dlyb_cfg, dlyb_cfg_test;
  int32_t ret = BSP_ERROR_NONE;
 8006b04:	2300      	movs	r3, #0
 8006b06:	61fb      	str	r3, [r7, #28]
  uint32_t div_value = 4;
 8006b08:	2304      	movs	r3, #4
 8006b0a:	61bb      	str	r3, [r7, #24]

  /* Delay block configuration ------------------------------------------------ */
  if (HAL_XSPI_DLYB_GetClockPeriod(hospi, &dlyb_cfg) != HAL_OK)
 8006b0c:	f107 0310 	add.w	r3, r7, #16
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f00c fed8 	bl	80138c8 <HAL_XSPI_DLYB_GetClockPeriod>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <OSPI_DLYB_Enable+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8006b1e:	f06f 0303 	mvn.w	r3, #3
 8006b22:	61fb      	str	r3, [r7, #28]
  }

  /* PhaseSel is divided by 4 (emperic value)*/
  dlyb_cfg.PhaseSel /= div_value;
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2c:	617b      	str	r3, [r7, #20]

  /* save the present configuration for check*/
  dlyb_cfg_test = dlyb_cfg;
 8006b2e:	f107 0308 	add.w	r3, r7, #8
 8006b32:	f107 0210 	add.w	r2, r7, #16
 8006b36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b3a:	e883 0003 	stmia.w	r3, {r0, r1}

  /*set delay block configuration*/
  if (HAL_XSPI_DLYB_SetConfig(hospi, &dlyb_cfg) != HAL_OK)
 8006b3e:	f107 0310 	add.w	r3, r7, #16
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f00c fe3f 	bl	80137c8 <HAL_XSPI_DLYB_SetConfig>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <OSPI_DLYB_Enable+0x5a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8006b50:	f06f 0303 	mvn.w	r3, #3
 8006b54:	61fb      	str	r3, [r7, #28]
  }

  /*check the set value*/
  if (HAL_XSPI_DLYB_GetConfig(hospi, &dlyb_cfg) != HAL_OK)
 8006b56:	f107 0310 	add.w	r3, r7, #16
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f00c fe81 	bl	8013864 <HAL_XSPI_DLYB_GetConfig>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d002      	beq.n	8006b6e <OSPI_DLYB_Enable+0x72>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8006b68:	f06f 0303 	mvn.w	r3, #3
 8006b6c:	61fb      	str	r3, [r7, #28]
  }

  if ((dlyb_cfg.PhaseSel != dlyb_cfg_test.PhaseSel) || (dlyb_cfg.Units != dlyb_cfg_test.Units))
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d103      	bne.n	8006b7e <OSPI_DLYB_Enable+0x82>
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d002      	beq.n	8006b84 <OSPI_DLYB_Enable+0x88>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8006b7e:	f06f 0303 	mvn.w	r3, #3
 8006b82:	61fb      	str	r3, [r7, #28]
  }

  /* Return BSP status */
  return ret;
 8006b84:	69fb      	ldr	r3, [r7, #28]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3720      	adds	r7, #32
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(XSPI_HandleTypeDef *hospi)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b094      	sub	sp, #80	; 0x50
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 8006b98:	4bc1      	ldr	r3, [pc, #772]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9e:	4ac0      	ldr	r2, [pc, #768]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006ba0:	f043 0310 	orr.w	r3, r3, #16
 8006ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ba8:	4bbd      	ldr	r3, [pc, #756]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bae:	f003 0310 	and.w	r3, r3, #16
 8006bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  __HAL_RCC_PWR_CLK_ENABLE();
 8006bb6:	4bba      	ldr	r3, [pc, #744]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bbc:	4ab8      	ldr	r2, [pc, #736]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006bbe:	f043 0304 	orr.w	r3, r3, #4
 8006bc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006bc6:	4bb6      	ldr	r3, [pc, #728]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bcc:	f003 0304 	and.w	r3, r3, #4
 8006bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  /* Enable VDDIO2 supply */
  HAL_PWREx_EnableVddIO2();
 8006bd4:	f005 fa5a 	bl	800c08c <HAL_PWREx_EnableVddIO2>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8006bd8:	4bb1      	ldr	r3, [pc, #708]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bdc:	4ab0      	ldr	r2, [pc, #704]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006bde:	f043 0310 	orr.w	r3, r3, #16
 8006be2:	6693      	str	r3, [r2, #104]	; 0x68
  OSPI_RELEASE_RESET();
 8006be4:	4bae      	ldr	r3, [pc, #696]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006be8:	4aad      	ldr	r2, [pc, #692]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006bea:	f023 0310 	bic.w	r3, r3, #16
 8006bee:	6693      	str	r3, [r2, #104]	; 0x68

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8006bf0:	4bab      	ldr	r3, [pc, #684]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bf6:	4aaa      	ldr	r2, [pc, #680]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006bf8:	f043 0320 	orr.w	r3, r3, #32
 8006bfc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006c00:	4ba7      	ldr	r3, [pc, #668]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_DQS_GPIO_CLK_ENABLE();
 8006c0e:	4ba4      	ldr	r3, [pc, #656]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c14:	4aa2      	ldr	r2, [pc, #648]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006c16:	f043 0301 	orr.w	r3, r3, #1
 8006c1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006c1e:	4ba0      	ldr	r3, [pc, #640]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_CS_GPIO_CLK_ENABLE();
 8006c2c:	4b9c      	ldr	r3, [pc, #624]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c32:	4a9b      	ldr	r2, [pc, #620]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006c34:	f043 0301 	orr.w	r3, r3, #1
 8006c38:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006c3c:	4b98      	ldr	r3, [pc, #608]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D0_GPIO_CLK_ENABLE();
 8006c4a:	4b95      	ldr	r3, [pc, #596]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c50:	4a93      	ldr	r2, [pc, #588]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006c52:	f043 0320 	orr.w	r3, r3, #32
 8006c56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006c5a:	4b91      	ldr	r3, [pc, #580]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c60:	f003 0320 	and.w	r3, r3, #32
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D1_GPIO_CLK_ENABLE();
 8006c68:	4b8d      	ldr	r3, [pc, #564]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c6e:	4a8c      	ldr	r2, [pc, #560]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006c70:	f043 0320 	orr.w	r3, r3, #32
 8006c74:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006c78:	4b89      	ldr	r3, [pc, #548]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c7e:	f003 0320 	and.w	r3, r3, #32
 8006c82:	623b      	str	r3, [r7, #32]
 8006c84:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D2_GPIO_CLK_ENABLE();
 8006c86:	4b86      	ldr	r3, [pc, #536]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c8c:	4a84      	ldr	r2, [pc, #528]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006c8e:	f043 0320 	orr.w	r3, r3, #32
 8006c92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006c96:	4b82      	ldr	r3, [pc, #520]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c9c:	f003 0320 	and.w	r3, r3, #32
 8006ca0:	61fb      	str	r3, [r7, #28]
 8006ca2:	69fb      	ldr	r3, [r7, #28]
  OSPI_D3_GPIO_CLK_ENABLE();
 8006ca4:	4b7e      	ldr	r3, [pc, #504]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006caa:	4a7d      	ldr	r2, [pc, #500]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006cac:	f043 0320 	orr.w	r3, r3, #32
 8006cb0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006cb4:	4b7a      	ldr	r3, [pc, #488]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	69bb      	ldr	r3, [r7, #24]
  OSPI_D4_GPIO_CLK_ENABLE();
 8006cc2:	4b77      	ldr	r3, [pc, #476]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc8:	4a75      	ldr	r2, [pc, #468]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006cca:	f043 0304 	orr.w	r3, r3, #4
 8006cce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006cd2:	4b73      	ldr	r3, [pc, #460]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cd8:	f003 0304 	and.w	r3, r3, #4
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	697b      	ldr	r3, [r7, #20]
  OSPI_D5_GPIO_CLK_ENABLE();
 8006ce0:	4b6f      	ldr	r3, [pc, #444]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce6:	4a6e      	ldr	r2, [pc, #440]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006ce8:	f043 0304 	orr.w	r3, r3, #4
 8006cec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006cf0:	4b6b      	ldr	r3, [pc, #428]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cf6:	f003 0304 	and.w	r3, r3, #4
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	693b      	ldr	r3, [r7, #16]
  OSPI_D6_GPIO_CLK_ENABLE();
 8006cfe:	4b68      	ldr	r3, [pc, #416]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d04:	4a66      	ldr	r2, [pc, #408]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006d06:	f043 0304 	orr.w	r3, r3, #4
 8006d0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006d0e:	4b64      	ldr	r3, [pc, #400]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
  OSPI_D7_GPIO_CLK_ENABLE();
 8006d1c:	4b60      	ldr	r3, [pc, #384]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d22:	4a5f      	ldr	r2, [pc, #380]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006d24:	f043 0304 	orr.w	r3, r3, #4
 8006d28:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006d2c:	4b5c      	ldr	r3, [pc, #368]	; (8006ea0 <OSPI_NOR_MspInit+0x310>)
 8006d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d32:	f003 0304 	and.w	r3, r3, #4
 8006d36:	60bb      	str	r3, [r7, #8]
 8006d38:	68bb      	ldr	r3, [r7, #8]

  /* Enable HSLV GPIOs */
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 8006d3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d3e:	4859      	ldr	r0, [pc, #356]	; (8006ea4 <OSPI_NOR_MspInit+0x314>)
 8006d40:	f003 fbec 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8006d44:	2104      	movs	r1, #4
 8006d46:	4858      	ldr	r0, [pc, #352]	; (8006ea8 <OSPI_NOR_MspInit+0x318>)
 8006d48:	f003 fbe8 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 8006d4c:	2102      	movs	r1, #2
 8006d4e:	4856      	ldr	r0, [pc, #344]	; (8006ea8 <OSPI_NOR_MspInit+0x318>)
 8006d50:	f003 fbe4 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 8006d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d58:	4852      	ldr	r0, [pc, #328]	; (8006ea4 <OSPI_NOR_MspInit+0x314>)
 8006d5a:	f003 fbdf 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 8006d5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d62:	4850      	ldr	r0, [pc, #320]	; (8006ea4 <OSPI_NOR_MspInit+0x314>)
 8006d64:	f003 fbda 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8006d68:	2180      	movs	r1, #128	; 0x80
 8006d6a:	484e      	ldr	r0, [pc, #312]	; (8006ea4 <OSPI_NOR_MspInit+0x314>)
 8006d6c:	f003 fbd6 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 8006d70:	2140      	movs	r1, #64	; 0x40
 8006d72:	484c      	ldr	r0, [pc, #304]	; (8006ea4 <OSPI_NOR_MspInit+0x314>)
 8006d74:	f003 fbd2 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8006d78:	2102      	movs	r1, #2
 8006d7a:	484c      	ldr	r0, [pc, #304]	; (8006eac <OSPI_NOR_MspInit+0x31c>)
 8006d7c:	f003 fbce 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 8006d80:	2104      	movs	r1, #4
 8006d82:	484a      	ldr	r0, [pc, #296]	; (8006eac <OSPI_NOR_MspInit+0x31c>)
 8006d84:	f003 fbca 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 8006d88:	2108      	movs	r1, #8
 8006d8a:	4848      	ldr	r0, [pc, #288]	; (8006eac <OSPI_NOR_MspInit+0x31c>)
 8006d8c:	f003 fbc6 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>
  HAL_GPIO_EnableHighSPeedLowVoltage(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8006d90:	2101      	movs	r1, #1
 8006d92:	4846      	ldr	r0, [pc, #280]	; (8006eac <OSPI_NOR_MspInit+0x31c>)
 8006d94:	f003 fbc2 	bl	800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 8006d98:	2304      	movs	r3, #4
 8006d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006da0:	2301      	movs	r3, #1
 8006da2:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006da4:	2303      	movs	r3, #3
 8006da6:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 8006da8:	230a      	movs	r3, #10
 8006daa:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8006dac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006db0:	4619      	mov	r1, r3
 8006db2:	483d      	ldr	r0, [pc, #244]	; (8006ea8 <OSPI_NOR_MspInit+0x318>)
 8006db4:	f003 f8b2 	bl	8009f1c <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8006db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8006dc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4835      	ldr	r0, [pc, #212]	; (8006ea4 <OSPI_NOR_MspInit+0x314>)
 8006dce:	f003 f8a5 	bl	8009f1c <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8006dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 8006dd8:	230a      	movs	r3, #10
 8006dda:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8006ddc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006de0:	4619      	mov	r1, r3
 8006de2:	4830      	ldr	r0, [pc, #192]	; (8006ea4 <OSPI_NOR_MspInit+0x314>)
 8006de4:	f003 f89a 	bl	8009f1c <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 8006de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 8006dee:	230a      	movs	r3, #10
 8006df0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8006df2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006df6:	4619      	mov	r1, r3
 8006df8:	482a      	ldr	r0, [pc, #168]	; (8006ea4 <OSPI_NOR_MspInit+0x314>)
 8006dfa:	f003 f88f 	bl	8009f1c <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 8006dfe:	2380      	movs	r3, #128	; 0x80
 8006e00:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 8006e02:	230a      	movs	r3, #10
 8006e04:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8006e06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4825      	ldr	r0, [pc, #148]	; (8006ea4 <OSPI_NOR_MspInit+0x314>)
 8006e0e:	f003 f885 	bl	8009f1c <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8006e12:	2340      	movs	r3, #64	; 0x40
 8006e14:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 8006e16:	230a      	movs	r3, #10
 8006e18:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8006e1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4820      	ldr	r0, [pc, #128]	; (8006ea4 <OSPI_NOR_MspInit+0x314>)
 8006e22:	f003 f87b 	bl	8009f1c <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 8006e26:	2302      	movs	r3, #2
 8006e28:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 8006e2a:	230a      	movs	r3, #10
 8006e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8006e2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006e32:	4619      	mov	r1, r3
 8006e34:	481d      	ldr	r0, [pc, #116]	; (8006eac <OSPI_NOR_MspInit+0x31c>)
 8006e36:	f003 f871 	bl	8009f1c <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 8006e3a:	2304      	movs	r3, #4
 8006e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 8006e3e:	230a      	movs	r3, #10
 8006e40:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 8006e42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006e46:	4619      	mov	r1, r3
 8006e48:	4818      	ldr	r0, [pc, #96]	; (8006eac <OSPI_NOR_MspInit+0x31c>)
 8006e4a:	f003 f867 	bl	8009f1c <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 8006e4e:	2308      	movs	r3, #8
 8006e50:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 8006e52:	230a      	movs	r3, #10
 8006e54:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8006e56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	4813      	ldr	r0, [pc, #76]	; (8006eac <OSPI_NOR_MspInit+0x31c>)
 8006e5e:	f003 f85d 	bl	8009f1c <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 8006e62:	2301      	movs	r3, #1
 8006e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 8006e66:	2303      	movs	r3, #3
 8006e68:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8006e6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006e6e:	4619      	mov	r1, r3
 8006e70:	480e      	ldr	r0, [pc, #56]	; (8006eac <OSPI_NOR_MspInit+0x31c>)
 8006e72:	f003 f853 	bl	8009f1c <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 8006e76:	2302      	movs	r3, #2
 8006e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 8006e7a:	230a      	movs	r3, #10
 8006e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 8006e7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006e82:	4619      	mov	r1, r3
 8006e84:	4808      	ldr	r0, [pc, #32]	; (8006ea8 <OSPI_NOR_MspInit+0x318>)
 8006e86:	f003 f849 	bl	8009f1c <HAL_GPIO_Init>

  /* Configure the NVIC for OSPI */
  /* NVIC configuration for OSPI interrupt */
  HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0x0F, 0);
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	210f      	movs	r1, #15
 8006e8e:	204c      	movs	r0, #76	; 0x4c
 8006e90:	f000 fe9c 	bl	8007bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8006e94:	204c      	movs	r0, #76	; 0x4c
 8006e96:	f000 feb3 	bl	8007c00 <HAL_NVIC_EnableIRQ>
}
 8006e9a:	bf00      	nop
 8006e9c:	3750      	adds	r7, #80	; 0x50
 8006e9e:	e007      	b.n	8006eb0 <OSPI_NOR_MspInit+0x320>
 8006ea0:	46020c00 	.word	0x46020c00
 8006ea4:	42021400 	.word	0x42021400
 8006ea8:	42020000 	.word	0x42020000
 8006eac:	42020800 	.word	0x42020800
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory(uint32_t Instance)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <OSPI_NOR_ResetMemory+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006ec6:	f06f 0301 	mvn.w	r3, #1
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	e08e      	b.n	8006fec <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	4413      	add	r3, r2
 8006ed6:	015b      	lsls	r3, r3, #5
 8006ed8:	4a47      	ldr	r2, [pc, #284]	; (8006ff8 <OSPI_NOR_ResetMemory+0x144>)
 8006eda:	4413      	add	r3, r2
 8006edc:	2200      	movs	r2, #0
 8006ede:	2100      	movs	r1, #0
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fd fd85 	bl	80049f0 <MX25UM51245G_ResetEnable>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <OSPI_NOR_ResetMemory+0x40>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006eec:	f06f 0304 	mvn.w	r3, #4
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	e07b      	b.n	8006fec <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	4413      	add	r3, r2
 8006efc:	015b      	lsls	r3, r3, #5
 8006efe:	4a3e      	ldr	r2, [pc, #248]	; (8006ff8 <OSPI_NOR_ResetMemory+0x144>)
 8006f00:	4413      	add	r3, r2
 8006f02:	2200      	movs	r2, #0
 8006f04:	2100      	movs	r1, #0
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fd fdca 	bl	8004aa0 <MX25UM51245G_ResetMemory>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <OSPI_NOR_ResetMemory+0x66>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006f12:	f06f 0304 	mvn.w	r3, #4
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	e068      	b.n	8006fec <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	4413      	add	r3, r2
 8006f22:	015b      	lsls	r3, r3, #5
 8006f24:	4a34      	ldr	r2, [pc, #208]	; (8006ff8 <OSPI_NOR_ResetMemory+0x144>)
 8006f26:	4413      	add	r3, r2
 8006f28:	2200      	movs	r2, #0
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fd fd5f 	bl	80049f0 <MX25UM51245G_ResetEnable>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d003      	beq.n	8006f40 <OSPI_NOR_ResetMemory+0x8c>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006f38:	f06f 0304 	mvn.w	r3, #4
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	e055      	b.n	8006fec <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	4613      	mov	r3, r2
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	4413      	add	r3, r2
 8006f48:	015b      	lsls	r3, r3, #5
 8006f4a:	4a2b      	ldr	r2, [pc, #172]	; (8006ff8 <OSPI_NOR_ResetMemory+0x144>)
 8006f4c:	4413      	add	r3, r2
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2101      	movs	r1, #1
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fd fda4 	bl	8004aa0 <MX25UM51245G_ResetMemory>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <OSPI_NOR_ResetMemory+0xb2>
                                    BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006f5e:	f06f 0304 	mvn.w	r3, #4
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	e042      	b.n	8006fec <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	4413      	add	r3, r2
 8006f6e:	015b      	lsls	r3, r3, #5
 8006f70:	4a21      	ldr	r2, [pc, #132]	; (8006ff8 <OSPI_NOR_ResetMemory+0x144>)
 8006f72:	4413      	add	r3, r2
 8006f74:	2201      	movs	r2, #1
 8006f76:	2101      	movs	r1, #1
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fd fd39 	bl	80049f0 <MX25UM51245G_ResetEnable>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <OSPI_NOR_ResetMemory+0xd8>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006f84:	f06f 0304 	mvn.w	r3, #4
 8006f88:	60fb      	str	r3, [r7, #12]
 8006f8a:	e02f      	b.n	8006fec <OSPI_NOR_ResetMemory+0x138>
  }
  else if (MX25UM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	005b      	lsls	r3, r3, #1
 8006f92:	4413      	add	r3, r2
 8006f94:	015b      	lsls	r3, r3, #5
 8006f96:	4a18      	ldr	r2, [pc, #96]	; (8006ff8 <OSPI_NOR_ResetMemory+0x144>)
 8006f98:	4413      	add	r3, r2
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fd fd7e 	bl	8004aa0 <MX25UM51245G_ResetMemory>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <OSPI_NOR_ResetMemory+0xfe>
                                    BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8006faa:	f06f 0304 	mvn.w	r3, #4
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	e01c      	b.n	8006fec <OSPI_NOR_ResetMemory+0x138>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access  */
 8006fb2:	4912      	ldr	r1, [pc, #72]	; (8006ffc <OSPI_NOR_ResetMemory+0x148>)
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	4413      	add	r3, r2
 8006fbc:	440b      	add	r3, r1
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;     /* After reset H/W back to SPI mode by default */
 8006fc2:	490e      	ldr	r1, [pc, #56]	; (8006ffc <OSPI_NOR_ResetMemory+0x148>)
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	4413      	add	r3, r2
 8006fcc:	440b      	add	r3, r1
 8006fce:	3301      	adds	r3, #1
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	701a      	strb	r2, [r3, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode         */
 8006fd4:	4909      	ldr	r1, [pc, #36]	; (8006ffc <OSPI_NOR_ResetMemory+0x148>)
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	4413      	add	r3, r2
 8006fde:	440b      	add	r3, r1
 8006fe0:	3302      	adds	r3, #2
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	701a      	strb	r2, [r3, #0]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25UM51245G_RESET_MAX_TIME);
 8006fe6:	2064      	movs	r0, #100	; 0x64
 8006fe8:	f000 fd14 	bl	8007a14 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 8006fec:	68fb      	ldr	r3, [r7, #12]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	201972ec 	.word	0x201972ec
 8006ffc:	2019734c 	.word	0x2019734c

08007000 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 8007000:	b590      	push	{r4, r7, lr}
 8007002:	b087      	sub	sp, #28
 8007004:	af02      	add	r7, sp, #8
 8007006:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <OSPI_NOR_EnterDOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800700e:	f06f 0301 	mvn.w	r3, #1
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	e0e4      	b.n	80071e0 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	4613      	mov	r3, r2
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	4413      	add	r3, r2
 800701e:	015b      	lsls	r3, r3, #5
 8007020:	4a72      	ldr	r2, [pc, #456]	; (80071ec <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8007022:	1898      	adds	r0, r3, r2
 8007024:	4972      	ldr	r1, [pc, #456]	; (80071f0 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	4613      	mov	r3, r2
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	4413      	add	r3, r2
 800702e:	440b      	add	r3, r1
 8007030:	3301      	adds	r3, #1
 8007032:	7819      	ldrb	r1, [r3, #0]
 8007034:	4c6e      	ldr	r4, [pc, #440]	; (80071f0 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	4613      	mov	r3, r2
 800703a:	005b      	lsls	r3, r3, #1
 800703c:	4413      	add	r3, r2
 800703e:	4423      	add	r3, r4
 8007040:	3302      	adds	r3, #2
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
 8007046:	f7fd facf 	bl	80045e8 <MX25UM51245G_WriteEnable>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <OSPI_NOR_EnterDOPIMode+0x58>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007050:	f06f 0304 	mvn.w	r3, #4
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	e0c3      	b.n	80071e0 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	4613      	mov	r3, r2
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	4413      	add	r3, r2
 8007060:	015b      	lsls	r3, r3, #5
 8007062:	4a62      	ldr	r2, [pc, #392]	; (80071ec <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8007064:	1898      	adds	r0, r3, r2
 8007066:	4962      	ldr	r1, [pc, #392]	; (80071f0 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	4613      	mov	r3, r2
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	4413      	add	r3, r2
 8007070:	440b      	add	r3, r1
 8007072:	3301      	adds	r3, #1
 8007074:	7819      	ldrb	r1, [r3, #0]
 8007076:	4c5e      	ldr	r4, [pc, #376]	; (80071f0 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	4613      	mov	r3, r2
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	4413      	add	r3, r2
 8007080:	4423      	add	r3, r4
 8007082:	3302      	adds	r3, #2
 8007084:	781a      	ldrb	r2, [r3, #0]
 8007086:	2307      	movs	r3, #7
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800708e:	f7fd fb7b 	bl	8004788 <MX25UM51245G_WriteCfg2Register>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d003      	beq.n	80070a0 <OSPI_NOR_EnterDOPIMode+0xa0>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_6_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007098:	f06f 0304 	mvn.w	r3, #4
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	e09f      	b.n	80071e0 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	4613      	mov	r3, r2
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	4413      	add	r3, r2
 80070a8:	015b      	lsls	r3, r3, #5
 80070aa:	4a50      	ldr	r2, [pc, #320]	; (80071ec <OSPI_NOR_EnterDOPIMode+0x1ec>)
 80070ac:	1898      	adds	r0, r3, r2
 80070ae:	4950      	ldr	r1, [pc, #320]	; (80071f0 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	4613      	mov	r3, r2
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	4413      	add	r3, r2
 80070b8:	440b      	add	r3, r1
 80070ba:	3301      	adds	r3, #1
 80070bc:	7819      	ldrb	r1, [r3, #0]
 80070be:	4c4c      	ldr	r4, [pc, #304]	; (80071f0 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	4613      	mov	r3, r2
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	4413      	add	r3, r2
 80070c8:	4423      	add	r3, r4
 80070ca:	3302      	adds	r3, #2
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	f7fd fa8a 	bl	80045e8 <MX25UM51245G_WriteEnable>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <OSPI_NOR_EnterDOPIMode+0xe2>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80070da:	f06f 0304 	mvn.w	r3, #4
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	e07e      	b.n	80071e0 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	4613      	mov	r3, r2
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	4413      	add	r3, r2
 80070ea:	015b      	lsls	r3, r3, #5
 80070ec:	4a3f      	ldr	r2, [pc, #252]	; (80071ec <OSPI_NOR_EnterDOPIMode+0x1ec>)
 80070ee:	1898      	adds	r0, r3, r2
 80070f0:	493f      	ldr	r1, [pc, #252]	; (80071f0 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	4613      	mov	r3, r2
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	4413      	add	r3, r2
 80070fa:	440b      	add	r3, r1
 80070fc:	3301      	adds	r3, #1
 80070fe:	7819      	ldrb	r1, [r3, #0]
 8007100:	4c3b      	ldr	r4, [pc, #236]	; (80071f0 <OSPI_NOR_EnterDOPIMode+0x1f0>)
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	4613      	mov	r3, r2
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	4413      	add	r3, r2
 800710a:	4423      	add	r3, r4
 800710c:	3302      	adds	r3, #2
 800710e:	781a      	ldrb	r2, [r3, #0]
 8007110:	2302      	movs	r3, #2
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	2300      	movs	r3, #0
 8007116:	f7fd fb37 	bl	8004788 <MX25UM51245G_WriteCfg2Register>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <OSPI_NOR_EnterDOPIMode+0x128>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_DOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007120:	f06f 0304 	mvn.w	r3, #4
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	e05b      	b.n	80071e0 <OSPI_NOR_EnterDOPIMode+0x1e0>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 8007128:	2028      	movs	r0, #40	; 0x28
 800712a:	f000 fc73 	bl	8007a14 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
 800712e:	492f      	ldr	r1, [pc, #188]	; (80071ec <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	4613      	mov	r3, r2
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	4413      	add	r3, r2
 8007138:	015b      	lsls	r3, r3, #5
 800713a:	440b      	add	r3, r1
 800713c:	330c      	adds	r3, #12
 800713e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007142:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8007144:	4929      	ldr	r1, [pc, #164]	; (80071ec <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	4613      	mov	r3, r2
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	4413      	add	r3, r2
 800714e:	015b      	lsls	r3, r3, #5
 8007150:	440b      	add	r3, r1
 8007152:	332c      	adds	r3, #44	; 0x2c
 8007154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007158:	601a      	str	r2, [r3, #0]
    if (HAL_XSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	4613      	mov	r3, r2
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	4413      	add	r3, r2
 8007162:	015b      	lsls	r3, r3, #5
 8007164:	4a21      	ldr	r2, [pc, #132]	; (80071ec <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8007166:	4413      	add	r3, r2
 8007168:	4618      	mov	r0, r3
 800716a:	f00b fe4f 	bl	8012e0c <HAL_XSPI_Init>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <OSPI_NOR_EnterDOPIMode+0x17c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007174:	f06f 0303 	mvn.w	r3, #3
 8007178:	60fb      	str	r3, [r7, #12]
 800717a:	e031      	b.n	80071e0 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    /* Check Flash busy ? */
    else if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	4613      	mov	r3, r2
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	4413      	add	r3, r2
 8007184:	015b      	lsls	r3, r3, #5
 8007186:	4a19      	ldr	r2, [pc, #100]	; (80071ec <OSPI_NOR_EnterDOPIMode+0x1ec>)
 8007188:	4413      	add	r3, r2
 800718a:	2201      	movs	r2, #1
 800718c:	2101      	movs	r1, #1
 800718e:	4618      	mov	r0, r3
 8007190:	f7fd f85f 	bl	8004252 <MX25UM51245G_AutoPollingMemReady>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <OSPI_NOR_EnterDOPIMode+0x1a2>
                                              BSP_OSPI_NOR_DTR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800719a:	f06f 0304 	mvn.w	r3, #4
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	e01e      	b.n	80071e0 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER,
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	4613      	mov	r3, r2
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	4413      	add	r3, r2
 80071aa:	015b      	lsls	r3, r3, #5
 80071ac:	4a0f      	ldr	r2, [pc, #60]	; (80071ec <OSPI_NOR_EnterDOPIMode+0x1ec>)
 80071ae:	1898      	adds	r0, r3, r2
 80071b0:	f107 0308 	add.w	r3, r7, #8
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	2300      	movs	r3, #0
 80071b8:	2201      	movs	r2, #1
 80071ba:	2101      	movs	r1, #1
 80071bc:	f7fd fb79 	bl	80048b2 <MX25UM51245G_ReadCfg2Register>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <OSPI_NOR_EnterDOPIMode+0x1ce>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80071c6:	f06f 0304 	mvn.w	r3, #4
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	e008      	b.n	80071e0 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    else if (reg[0] != MX25UM51245G_CR2_DOPI)
 80071ce:	7a3b      	ldrb	r3, [r7, #8]
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d003      	beq.n	80071dc <OSPI_NOR_EnterDOPIMode+0x1dc>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80071d4:	f06f 0304 	mvn.w	r3, #4
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	e001      	b.n	80071e0 <OSPI_NOR_EnterDOPIMode+0x1e0>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80071dc:	2300      	movs	r3, #0
 80071de:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 80071e0:	68fb      	ldr	r3, [r7, #12]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd90      	pop	{r4, r7, pc}
 80071ea:	bf00      	nop
 80071ec:	201972ec 	.word	0x201972ec
 80071f0:	2019734c 	.word	0x2019734c

080071f4 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 80071f4:	b590      	push	{r4, r7, lr}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af02      	add	r7, sp, #8
 80071fa:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <OSPI_NOR_EnterSOPIMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007202:	f06f 0301 	mvn.w	r3, #1
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	e0bd      	b.n	8007386 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	4613      	mov	r3, r2
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	4413      	add	r3, r2
 8007212:	015b      	lsls	r3, r3, #5
 8007214:	4a5e      	ldr	r2, [pc, #376]	; (8007390 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8007216:	1898      	adds	r0, r3, r2
 8007218:	495e      	ldr	r1, [pc, #376]	; (8007394 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	4613      	mov	r3, r2
 800721e:	005b      	lsls	r3, r3, #1
 8007220:	4413      	add	r3, r2
 8007222:	440b      	add	r3, r1
 8007224:	3301      	adds	r3, #1
 8007226:	7819      	ldrb	r1, [r3, #0]
 8007228:	4c5a      	ldr	r4, [pc, #360]	; (8007394 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	4613      	mov	r3, r2
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	4413      	add	r3, r2
 8007232:	4423      	add	r3, r4
 8007234:	3302      	adds	r3, #2
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	461a      	mov	r2, r3
 800723a:	f7fd f9d5 	bl	80045e8 <MX25UM51245G_WriteEnable>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <OSPI_NOR_EnterSOPIMode+0x58>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007244:	f06f 0304 	mvn.w	r3, #4
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	e09c      	b.n	8007386 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	4613      	mov	r3, r2
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	4413      	add	r3, r2
 8007254:	015b      	lsls	r3, r3, #5
 8007256:	4a4e      	ldr	r2, [pc, #312]	; (8007390 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8007258:	1898      	adds	r0, r3, r2
 800725a:	494e      	ldr	r1, [pc, #312]	; (8007394 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	4613      	mov	r3, r2
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	4413      	add	r3, r2
 8007264:	440b      	add	r3, r1
 8007266:	3301      	adds	r3, #1
 8007268:	7819      	ldrb	r1, [r3, #0]
 800726a:	4c4a      	ldr	r4, [pc, #296]	; (8007394 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	4613      	mov	r3, r2
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	4413      	add	r3, r2
 8007274:	4423      	add	r3, r4
 8007276:	3302      	adds	r3, #2
 8007278:	781a      	ldrb	r2, [r3, #0]
 800727a:	2307      	movs	r3, #7
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007282:	f7fd fa81 	bl	8004788 <MX25UM51245G_WriteCfg2Register>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d003      	beq.n	8007294 <OSPI_NOR_EnterSOPIMode+0xa0>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG3_ADDR,
                                          MX25UM51245G_CR2_DC_6_CYCLES) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800728c:	f06f 0304 	mvn.w	r3, #4
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	e078      	b.n	8007386 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	4613      	mov	r3, r2
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	4413      	add	r3, r2
 800729c:	015b      	lsls	r3, r3, #5
 800729e:	4a3c      	ldr	r2, [pc, #240]	; (8007390 <OSPI_NOR_EnterSOPIMode+0x19c>)
 80072a0:	1898      	adds	r0, r3, r2
 80072a2:	493c      	ldr	r1, [pc, #240]	; (8007394 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	4613      	mov	r3, r2
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	4413      	add	r3, r2
 80072ac:	440b      	add	r3, r1
 80072ae:	3301      	adds	r3, #1
 80072b0:	7819      	ldrb	r1, [r3, #0]
 80072b2:	4c38      	ldr	r4, [pc, #224]	; (8007394 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	4613      	mov	r3, r2
 80072b8:	005b      	lsls	r3, r3, #1
 80072ba:	4413      	add	r3, r2
 80072bc:	4423      	add	r3, r4
 80072be:	3302      	adds	r3, #2
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	f7fd f990 	bl	80045e8 <MX25UM51245G_WriteEnable>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <OSPI_NOR_EnterSOPIMode+0xe2>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80072ce:	f06f 0304 	mvn.w	r3, #4
 80072d2:	60fb      	str	r3, [r7, #12]
 80072d4:	e057      	b.n	8007386 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	4613      	mov	r3, r2
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	4413      	add	r3, r2
 80072de:	015b      	lsls	r3, r3, #5
 80072e0:	4a2b      	ldr	r2, [pc, #172]	; (8007390 <OSPI_NOR_EnterSOPIMode+0x19c>)
 80072e2:	1898      	adds	r0, r3, r2
 80072e4:	492b      	ldr	r1, [pc, #172]	; (8007394 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	4613      	mov	r3, r2
 80072ea:	005b      	lsls	r3, r3, #1
 80072ec:	4413      	add	r3, r2
 80072ee:	440b      	add	r3, r1
 80072f0:	3301      	adds	r3, #1
 80072f2:	7819      	ldrb	r1, [r3, #0]
 80072f4:	4c27      	ldr	r4, [pc, #156]	; (8007394 <OSPI_NOR_EnterSOPIMode+0x1a0>)
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	4613      	mov	r3, r2
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	4413      	add	r3, r2
 80072fe:	4423      	add	r3, r4
 8007300:	3302      	adds	r3, #2
 8007302:	781a      	ldrb	r2, [r3, #0]
 8007304:	2301      	movs	r3, #1
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	2300      	movs	r3, #0
 800730a:	f7fd fa3d 	bl	8004788 <MX25UM51245G_WriteCfg2Register>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <OSPI_NOR_EnterSOPIMode+0x128>
                                          Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                          MX25UM51245G_CR2_SOPI) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007314:	f06f 0304 	mvn.w	r3, #4
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	e034      	b.n	8007386 <OSPI_NOR_EnterSOPIMode+0x192>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 800731c:	2028      	movs	r0, #40	; 0x28
 800731e:	f000 fb79 	bl	8007a14 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE,
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	4613      	mov	r3, r2
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	4413      	add	r3, r2
 800732a:	015b      	lsls	r3, r3, #5
 800732c:	4a18      	ldr	r2, [pc, #96]	; (8007390 <OSPI_NOR_EnterSOPIMode+0x19c>)
 800732e:	4413      	add	r3, r2
 8007330:	2200      	movs	r2, #0
 8007332:	2101      	movs	r1, #1
 8007334:	4618      	mov	r0, r3
 8007336:	f7fc ff8c 	bl	8004252 <MX25UM51245G_AutoPollingMemReady>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <OSPI_NOR_EnterSOPIMode+0x154>
                                         BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007340:	f06f 0304 	mvn.w	r3, #4
 8007344:	60fb      	str	r3, [r7, #12]
 8007346:	e01e      	b.n	8007386 <OSPI_NOR_EnterSOPIMode+0x192>
    }
    /* Check the configuration has been correctly done */
    else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	4613      	mov	r3, r2
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	4413      	add	r3, r2
 8007350:	015b      	lsls	r3, r3, #5
 8007352:	4a0f      	ldr	r2, [pc, #60]	; (8007390 <OSPI_NOR_EnterSOPIMode+0x19c>)
 8007354:	1898      	adds	r0, r3, r2
 8007356:	f107 0308 	add.w	r3, r7, #8
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	2300      	movs	r3, #0
 800735e:	2200      	movs	r2, #0
 8007360:	2101      	movs	r1, #1
 8007362:	f7fd faa6 	bl	80048b2 <MX25UM51245G_ReadCfg2Register>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <OSPI_NOR_EnterSOPIMode+0x180>
                                           MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800736c:	f06f 0304 	mvn.w	r3, #4
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	e008      	b.n	8007386 <OSPI_NOR_EnterSOPIMode+0x192>
    }
    else if (reg[0] != MX25UM51245G_CR2_SOPI)
 8007374:	7a3b      	ldrb	r3, [r7, #8]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d003      	beq.n	8007382 <OSPI_NOR_EnterSOPIMode+0x18e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800737a:	f06f 0304 	mvn.w	r3, #4
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	e001      	b.n	8007386 <OSPI_NOR_EnterSOPIMode+0x192>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return BSP status */
  return ret;
 8007386:	68fb      	ldr	r3, [r7, #12]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	bd90      	pop	{r4, r7, pc}
 8007390:	201972ec 	.word	0x201972ec
 8007394:	2019734c 	.word	0x2019734c

08007398 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode(uint32_t Instance)
{
 8007398:	b590      	push	{r4, r7, lr}
 800739a:	b087      	sub	sp, #28
 800739c:	af02      	add	r7, sp, #8
 800739e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Check if the instance is supported */
  if (Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <OSPI_NOR_ExitOPIMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80073aa:	f06f 0301 	mvn.w	r3, #1
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	e0aa      	b.n	8007508 <OSPI_NOR_ExitOPIMode+0x170>
  }
  /* Enable write operations */
  else if (MX25UM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	4613      	mov	r3, r2
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	4413      	add	r3, r2
 80073ba:	015b      	lsls	r3, r3, #5
 80073bc:	4a55      	ldr	r2, [pc, #340]	; (8007514 <OSPI_NOR_ExitOPIMode+0x17c>)
 80073be:	1898      	adds	r0, r3, r2
 80073c0:	4955      	ldr	r1, [pc, #340]	; (8007518 <OSPI_NOR_ExitOPIMode+0x180>)
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	4413      	add	r3, r2
 80073ca:	440b      	add	r3, r1
 80073cc:	3301      	adds	r3, #1
 80073ce:	7819      	ldrb	r1, [r3, #0]
 80073d0:	4c51      	ldr	r4, [pc, #324]	; (8007518 <OSPI_NOR_ExitOPIMode+0x180>)
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	4613      	mov	r3, r2
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	4413      	add	r3, r2
 80073da:	4423      	add	r3, r4
 80073dc:	3302      	adds	r3, #2
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	461a      	mov	r2, r3
 80073e2:	f7fd f901 	bl	80045e8 <MX25UM51245G_WriteEnable>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <OSPI_NOR_ExitOPIMode+0x5c>
                                    Ospi_Nor_Ctx[Instance].TransferRate) != MX25UM51245G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80073ec:	f06f 0304 	mvn.w	r3, #4
 80073f0:	60fb      	str	r3, [r7, #12]
 80073f2:	e089      	b.n	8007508 <OSPI_NOR_ExitOPIMode+0x170>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 80073f8:	2300      	movs	r3, #0
 80073fa:	727b      	strb	r3, [r7, #9]
    if (MX25UM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode,
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	4613      	mov	r3, r2
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	4413      	add	r3, r2
 8007404:	015b      	lsls	r3, r3, #5
 8007406:	4a43      	ldr	r2, [pc, #268]	; (8007514 <OSPI_NOR_ExitOPIMode+0x17c>)
 8007408:	1898      	adds	r0, r3, r2
 800740a:	4943      	ldr	r1, [pc, #268]	; (8007518 <OSPI_NOR_ExitOPIMode+0x180>)
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	4613      	mov	r3, r2
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	4413      	add	r3, r2
 8007414:	440b      	add	r3, r1
 8007416:	3301      	adds	r3, #1
 8007418:	7819      	ldrb	r1, [r3, #0]
 800741a:	4c3f      	ldr	r4, [pc, #252]	; (8007518 <OSPI_NOR_ExitOPIMode+0x180>)
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	4413      	add	r3, r2
 8007424:	4423      	add	r3, r4
 8007426:	3302      	adds	r3, #2
 8007428:	781a      	ldrb	r2, [r3, #0]
 800742a:	7a3b      	ldrb	r3, [r7, #8]
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	2300      	movs	r3, #0
 8007430:	f7fd f9aa 	bl	8004788 <MX25UM51245G_WriteCfg2Register>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <OSPI_NOR_ExitOPIMode+0xaa>
                                       Ospi_Nor_Ctx[Instance].TransferRate, MX25UM51245G_CR2_REG1_ADDR,
                                       reg[0]) != MX25UM51245G_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800743a:	f06f 0304 	mvn.w	r3, #4
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	e062      	b.n	8007508 <OSPI_NOR_ExitOPIMode+0x170>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25UM51245G_WRITE_REG_MAX_TIME);
 8007442:	2028      	movs	r0, #40	; 0x28
 8007444:	f000 fae6 	bl	8007a14 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8007448:	4933      	ldr	r1, [pc, #204]	; (8007518 <OSPI_NOR_ExitOPIMode+0x180>)
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	4613      	mov	r3, r2
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	4413      	add	r3, r2
 8007452:	440b      	add	r3, r1
 8007454:	3302      	adds	r3, #2
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d123      	bne.n	80074a4 <OSPI_NOR_ExitOPIMode+0x10c>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
 800745c:	492d      	ldr	r1, [pc, #180]	; (8007514 <OSPI_NOR_ExitOPIMode+0x17c>)
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	4613      	mov	r3, r2
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	4413      	add	r3, r2
 8007466:	015b      	lsls	r3, r3, #5
 8007468:	440b      	add	r3, r1
 800746a:	330c      	adds	r3, #12
 800746c:	2200      	movs	r2, #0
 800746e:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8007470:	4928      	ldr	r1, [pc, #160]	; (8007514 <OSPI_NOR_ExitOPIMode+0x17c>)
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	4613      	mov	r3, r2
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	4413      	add	r3, r2
 800747a:	015b      	lsls	r3, r3, #5
 800747c:	440b      	add	r3, r1
 800747e:	332c      	adds	r3, #44	; 0x2c
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]
        if (HAL_XSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	4613      	mov	r3, r2
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	4413      	add	r3, r2
 800748c:	015b      	lsls	r3, r3, #5
 800748e:	4a21      	ldr	r2, [pc, #132]	; (8007514 <OSPI_NOR_ExitOPIMode+0x17c>)
 8007490:	4413      	add	r3, r2
 8007492:	4618      	mov	r0, r3
 8007494:	f00b fcba 	bl	8012e0c <HAL_XSPI_Init>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <OSPI_NOR_ExitOPIMode+0x10c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800749e:	f06f 0303 	mvn.w	r3, #3
 80074a2:	60fb      	str	r3, [r7, #12]
        }
      }

      if (ret == BSP_ERROR_NONE)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d12e      	bne.n	8007508 <OSPI_NOR_ExitOPIMode+0x170>
      {
        /* Check Flash busy ? */
        if (MX25UM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE,
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	4613      	mov	r3, r2
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	4413      	add	r3, r2
 80074b2:	015b      	lsls	r3, r3, #5
 80074b4:	4a17      	ldr	r2, [pc, #92]	; (8007514 <OSPI_NOR_ExitOPIMode+0x17c>)
 80074b6:	4413      	add	r3, r2
 80074b8:	2200      	movs	r2, #0
 80074ba:	2100      	movs	r1, #0
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fc fec8 	bl	8004252 <MX25UM51245G_AutoPollingMemReady>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <OSPI_NOR_ExitOPIMode+0x138>
                                             BSP_OSPI_NOR_STR_TRANSFER) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80074c8:	f06f 0304 	mvn.w	r3, #4
 80074cc:	60fb      	str	r3, [r7, #12]
 80074ce:	e01b      	b.n	8007508 <OSPI_NOR_ExitOPIMode+0x170>
        }
        /* Check the configuration has been correctly done */
        else if (MX25UM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER,
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	4613      	mov	r3, r2
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	4413      	add	r3, r2
 80074d8:	015b      	lsls	r3, r3, #5
 80074da:	4a0e      	ldr	r2, [pc, #56]	; (8007514 <OSPI_NOR_ExitOPIMode+0x17c>)
 80074dc:	1898      	adds	r0, r3, r2
 80074de:	f107 0308 	add.w	r3, r7, #8
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	2300      	movs	r3, #0
 80074e6:	2200      	movs	r2, #0
 80074e8:	2100      	movs	r1, #0
 80074ea:	f7fd f9e2 	bl	80048b2 <MX25UM51245G_ReadCfg2Register>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d003      	beq.n	80074fc <OSPI_NOR_ExitOPIMode+0x164>
                                               MX25UM51245G_CR2_REG1_ADDR, reg) != MX25UM51245G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80074f4:	f06f 0304 	mvn.w	r3, #4
 80074f8:	60fb      	str	r3, [r7, #12]
 80074fa:	e005      	b.n	8007508 <OSPI_NOR_ExitOPIMode+0x170>
        }
        else if (reg[0] != 0U)
 80074fc:	7a3b      	ldrb	r3, [r7, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d002      	beq.n	8007508 <OSPI_NOR_ExitOPIMode+0x170>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8007502:	f06f 0304 	mvn.w	r3, #4
 8007506:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8007508:	68fb      	ldr	r3, [r7, #12]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	bd90      	pop	{r4, r7, pc}
 8007512:	bf00      	nop
 8007514:	201972ec 	.word	0x201972ec
 8007518:	2019734c 	.word	0x2019734c

0800751c <BSP_TS_Init>:
  * @param  Instance TS Instance.
  * @param  TS_Init  Pointer to TS initialization structure.
  * @retval BSP status.
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8007526:	2300      	movs	r3, #0
 8007528:	61fb      	str	r3, [r7, #28]

  if ((TS_Init == NULL) || (Instance >= TS_INSTANCES_NBR))
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <BSP_TS_Init+0x1a>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <BSP_TS_Init+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8007536:	f06f 0301 	mvn.w	r3, #1
 800753a:	61fb      	str	r3, [r7, #28]
 800753c:	e07f      	b.n	800763e <BSP_TS_Init+0x122>
  }
  else
  {
    /* Probe the TS driver */
    if (SITRONIX_Probe(Instance) != BSP_ERROR_NONE)
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f98c 	bl	800785c <SITRONIX_Probe>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <BSP_TS_Init+0x36>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800754a:	f06f 0304 	mvn.w	r3, #4
 800754e:	61fb      	str	r3, [r7, #28]
 8007550:	e075      	b.n	800763e <BSP_TS_Init+0x122>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t          i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	493c      	ldr	r1, [pc, #240]	; (8007648 <BSP_TS_Init+0x12c>)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2068      	movs	r0, #104	; 0x68
 800755c:	fb00 f303 	mul.w	r3, r0, r3
 8007560:	440b      	add	r3, r1
 8007562:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	4937      	ldr	r1, [pc, #220]	; (8007648 <BSP_TS_Init+0x12c>)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2068      	movs	r0, #104	; 0x68
 800756e:	fb00 f303 	mul.w	r3, r0, r3
 8007572:	440b      	add	r3, r1
 8007574:	3304      	adds	r3, #4
 8007576:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	4932      	ldr	r1, [pc, #200]	; (8007648 <BSP_TS_Init+0x12c>)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2068      	movs	r0, #104	; 0x68
 8007582:	fb00 f303 	mul.w	r3, r0, r3
 8007586:	440b      	add	r3, r1
 8007588:	3308      	adds	r3, #8
 800758a:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	68da      	ldr	r2, [r3, #12]
 8007590:	492d      	ldr	r1, [pc, #180]	; (8007648 <BSP_TS_Init+0x12c>)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2068      	movs	r0, #104	; 0x68
 8007596:	fb00 f303 	mul.w	r3, r0, r3
 800759a:	440b      	add	r3, r1
 800759c:	330c      	adds	r3, #12
 800759e:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv[Instance]->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80075a0:	4a2a      	ldr	r2, [pc, #168]	; (800764c <BSP_TS_Init+0x130>)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	4929      	ldr	r1, [pc, #164]	; (8007650 <BSP_TS_Init+0x134>)
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80075b2:	f107 010c 	add.w	r1, r7, #12
 80075b6:	4610      	mov	r0, r2
 80075b8:	4798      	blx	r3
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	da03      	bge.n	80075c8 <BSP_TS_Init+0xac>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 80075c0:	f06f 0304 	mvn.w	r3, #4
 80075c4:	61fb      	str	r3, [r7, #28]
 80075c6:	e03a      	b.n	800763e <BSP_TS_Init+0x122>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	491f      	ldr	r1, [pc, #124]	; (8007648 <BSP_TS_Init+0x12c>)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2068      	movs	r0, #104	; 0x68
 80075d0:	fb00 f303 	mul.w	r3, r0, r3
 80075d4:	440b      	add	r3, r1
 80075d6:	3310      	adds	r3, #16
 80075d8:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	491a      	ldr	r1, [pc, #104]	; (8007648 <BSP_TS_Init+0x12c>)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2068      	movs	r0, #104	; 0x68
 80075e2:	fb00 f303 	mul.w	r3, r0, r3
 80075e6:	440b      	add	r3, r1
 80075e8:	3314      	adds	r3, #20
 80075ea:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for (i = 0; i < TS_TOUCH_NBR; i++)
 80075ec:	2300      	movs	r3, #0
 80075ee:	61bb      	str	r3, [r7, #24]
 80075f0:	e022      	b.n	8007638 <BSP_TS_Init+0x11c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	4413      	add	r3, r2
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	4812      	ldr	r0, [pc, #72]	; (8007648 <BSP_TS_Init+0x12c>)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	211a      	movs	r1, #26
 8007604:	fb03 f101 	mul.w	r1, r3, r1
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	440b      	add	r3, r1
 800760c:	3306      	adds	r3, #6
 800760e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	4413      	add	r3, r2
 800761c:	1c5a      	adds	r2, r3, #1
 800761e:	480a      	ldr	r0, [pc, #40]	; (8007648 <BSP_TS_Init+0x12c>)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	211a      	movs	r1, #26
 8007624:	fb03 f101 	mul.w	r1, r3, r1
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	440b      	add	r3, r1
 800762c:	3310      	adds	r3, #16
 800762e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for (i = 0; i < TS_TOUCH_NBR; i++)
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	3301      	adds	r3, #1
 8007636:	61bb      	str	r3, [r7, #24]
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	2b09      	cmp	r3, #9
 800763c:	d9d9      	bls.n	80075f2 <BSP_TS_Init+0xd6>
        }
      }
    }
  }

  return status;
 800763e:	69fb      	ldr	r3, [r7, #28]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3720      	adds	r7, #32
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	20197358 	.word	0x20197358
 800764c:	20197354 	.word	0x20197354
 8007650:	20197350 	.word	0x20197350

08007654 <BSP_TS_GetState>:
  * @param  Instance TS Instance.
  * @param  TS_State Pointer to single touch structure.
  * @retval BSP status.
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08a      	sub	sp, #40	; 0x28
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 800765e:	2300      	movs	r3, #0
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented;
  uint32_t y_oriented;
  uint32_t x_diff;
  uint32_t y_diff;

  if (Instance >= TS_INSTANCES_NBR)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <BSP_TS_GetState+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8007668:	f06f 0301 	mvn.w	r3, #1
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
 800766e:	e0ea      	b.n	8007846 <BSP_TS_GetState+0x1f2>
  else
  {
    SITRONIX_State_t state;

    /* Get each touch coordinates */
    if (Ts_Drv[Instance]->GetState(Ts_CompObj[Instance], &state) < 0)
 8007670:	4a77      	ldr	r2, [pc, #476]	; (8007850 <BSP_TS_GetState+0x1fc>)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	4976      	ldr	r1, [pc, #472]	; (8007854 <BSP_TS_GetState+0x200>)
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007682:	f107 0108 	add.w	r1, r7, #8
 8007686:	4610      	mov	r0, r2
 8007688:	4798      	blx	r3
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	da03      	bge.n	8007698 <BSP_TS_GetState+0x44>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8007690:	f06f 0304 	mvn.w	r3, #4
 8007694:	627b      	str	r3, [r7, #36]	; 0x24
 8007696:	e0d6      	b.n	8007846 <BSP_TS_GetState+0x1f2>
    }/* Check and update the number of touches active detected */
    else if (state.TouchDetected != 0U)
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 80bc 	beq.w	8007818 <BSP_TS_GetState+0x1c4>
    {
      x_oriented = /*Ts_Ctx[Instance].MaxX -*/ state.TouchX;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	623b      	str	r3, [r7, #32]
      y_oriented = /*Ts_Ctx[Instance].MaxY -*/ state.TouchY;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	61fb      	str	r3, [r7, #28]

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / (Ts_Ctx[Instance].MaxX);
 80076a8:	4a6b      	ldr	r2, [pc, #428]	; (8007858 <BSP_TS_GetState+0x204>)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2168      	movs	r1, #104	; 0x68
 80076ae:	fb01 f303 	mul.w	r3, r1, r3
 80076b2:	4413      	add	r3, r2
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6a3a      	ldr	r2, [r7, #32]
 80076b8:	fb03 f202 	mul.w	r2, r3, r2
 80076bc:	4966      	ldr	r1, [pc, #408]	; (8007858 <BSP_TS_GetState+0x204>)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2068      	movs	r0, #104	; 0x68
 80076c2:	fb00 f303 	mul.w	r3, r0, r3
 80076c6:	440b      	add	r3, r1
 80076c8:	3310      	adds	r3, #16
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / (Ts_Ctx[Instance].MaxY);
 80076d4:	4a60      	ldr	r2, [pc, #384]	; (8007858 <BSP_TS_GetState+0x204>)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2168      	movs	r1, #104	; 0x68
 80076da:	fb01 f303 	mul.w	r3, r1, r3
 80076de:	4413      	add	r3, r2
 80076e0:	3304      	adds	r3, #4
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	69fa      	ldr	r2, [r7, #28]
 80076e6:	fb03 f202 	mul.w	r2, r3, r2
 80076ea:	495b      	ldr	r1, [pc, #364]	; (8007858 <BSP_TS_GetState+0x204>)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2068      	movs	r0, #104	; 0x68
 80076f0:	fb00 f303 	mul.w	r3, r0, r3
 80076f4:	440b      	add	r3, r1
 80076f6:	3314      	adds	r3, #20
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0]) ?
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	4952      	ldr	r1, [pc, #328]	; (8007858 <BSP_TS_GetState+0x204>)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2068      	movs	r0, #104	; 0x68
 8007712:	fb00 f303 	mul.w	r3, r0, r3
 8007716:	440b      	add	r3, r1
 8007718:	3318      	adds	r3, #24
 800771a:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]) :
 800771c:	429a      	cmp	r2, r3
 800771e:	d90b      	bls.n	8007738 <BSP_TS_GetState+0xe4>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	494c      	ldr	r1, [pc, #304]	; (8007858 <BSP_TS_GetState+0x204>)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2068      	movs	r0, #104	; 0x68
 800772a:	fb00 f303 	mul.w	r3, r0, r3
 800772e:	440b      	add	r3, r1
 8007730:	3318      	adds	r3, #24
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	e00a      	b.n	800774e <BSP_TS_GetState+0xfa>
               (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8007738:	4a47      	ldr	r2, [pc, #284]	; (8007858 <BSP_TS_GetState+0x204>)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2168      	movs	r1, #104	; 0x68
 800773e:	fb01 f303 	mul.w	r3, r1, r3
 8007742:	4413      	add	r3, r2
 8007744:	3318      	adds	r3, #24
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]) :
 800774c:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0]) ?
 800774e:	61bb      	str	r3, [r7, #24]

      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0]) ?
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	4940      	ldr	r1, [pc, #256]	; (8007858 <BSP_TS_GetState+0x204>)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2068      	movs	r0, #104	; 0x68
 800775a:	fb00 f303 	mul.w	r3, r0, r3
 800775e:	440b      	add	r3, r1
 8007760:	3340      	adds	r3, #64	; 0x40
 8007762:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]) :
 8007764:	429a      	cmp	r2, r3
 8007766:	d90b      	bls.n	8007780 <BSP_TS_GetState+0x12c>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	689a      	ldr	r2, [r3, #8]
 800776c:	493a      	ldr	r1, [pc, #232]	; (8007858 <BSP_TS_GetState+0x204>)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2068      	movs	r0, #104	; 0x68
 8007772:	fb00 f303 	mul.w	r3, r0, r3
 8007776:	440b      	add	r3, r1
 8007778:	3340      	adds	r3, #64	; 0x40
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	e00a      	b.n	8007796 <BSP_TS_GetState+0x142>
               (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8007780:	4a35      	ldr	r2, [pc, #212]	; (8007858 <BSP_TS_GetState+0x204>)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2168      	movs	r1, #104	; 0x68
 8007786:	fb01 f303 	mul.w	r3, r1, r3
 800778a:	4413      	add	r3, r2
 800778c:	3340      	adds	r3, #64	; 0x40
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]) :
 8007794:	1ad3      	subs	r3, r2, r3
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0]) ?
 8007796:	617b      	str	r3, [r7, #20]

      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8007798:	4a2f      	ldr	r2, [pc, #188]	; (8007858 <BSP_TS_GetState+0x204>)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2168      	movs	r1, #104	; 0x68
 800779e:	fb01 f303 	mul.w	r3, r1, r3
 80077a2:	4413      	add	r3, r2
 80077a4:	330c      	adds	r3, #12
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d80a      	bhi.n	80077c4 <BSP_TS_GetState+0x170>
 80077ae:	4a2a      	ldr	r2, [pc, #168]	; (8007858 <BSP_TS_GetState+0x204>)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2168      	movs	r1, #104	; 0x68
 80077b4:	fb01 f303 	mul.w	r3, r1, r3
 80077b8:	4413      	add	r3, r2
 80077ba:	330c      	adds	r3, #12
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d914      	bls.n	80077ee <BSP_TS_GetState+0x19a>
      {
        /* New touch detected */
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	4923      	ldr	r1, [pc, #140]	; (8007858 <BSP_TS_GetState+0x204>)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2068      	movs	r0, #104	; 0x68
 80077ce:	fb00 f303 	mul.w	r3, r0, r3
 80077d2:	440b      	add	r3, r1
 80077d4:	3318      	adds	r3, #24
 80077d6:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	491e      	ldr	r1, [pc, #120]	; (8007858 <BSP_TS_GetState+0x204>)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2068      	movs	r0, #104	; 0x68
 80077e2:	fb00 f303 	mul.w	r3, r0, r3
 80077e6:	440b      	add	r3, r1
 80077e8:	3340      	adds	r3, #64	; 0x40
 80077ea:	601a      	str	r2, [r3, #0]
 80077ec:	e02b      	b.n	8007846 <BSP_TS_GetState+0x1f2>
      }
      else
      {
        TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80077ee:	4a1a      	ldr	r2, [pc, #104]	; (8007858 <BSP_TS_GetState+0x204>)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2168      	movs	r1, #104	; 0x68
 80077f4:	fb01 f303 	mul.w	r3, r1, r3
 80077f8:	4413      	add	r3, r2
 80077fa:	3318      	adds	r3, #24
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	605a      	str	r2, [r3, #4]
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8007802:	4a15      	ldr	r2, [pc, #84]	; (8007858 <BSP_TS_GetState+0x204>)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2168      	movs	r1, #104	; 0x68
 8007808:	fb01 f303 	mul.w	r3, r1, r3
 800780c:	4413      	add	r3, r2
 800780e:	3340      	adds	r3, #64	; 0x40
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	609a      	str	r2, [r3, #8]
 8007816:	e016      	b.n	8007846 <BSP_TS_GetState+0x1f2>
      }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	2200      	movs	r2, #0
 800781c:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800781e:	4a0e      	ldr	r2, [pc, #56]	; (8007858 <BSP_TS_GetState+0x204>)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2168      	movs	r1, #104	; 0x68
 8007824:	fb01 f303 	mul.w	r3, r1, r3
 8007828:	4413      	add	r3, r2
 800782a:	3318      	adds	r3, #24
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8007832:	4a09      	ldr	r2, [pc, #36]	; (8007858 <BSP_TS_GetState+0x204>)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2168      	movs	r1, #104	; 0x68
 8007838:	fb01 f303 	mul.w	r3, r1, r3
 800783c:	4413      	add	r3, r2
 800783e:	3340      	adds	r3, #64	; 0x40
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	609a      	str	r2, [r3, #8]
    }
  }

  return status;
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007848:	4618      	mov	r0, r3
 800784a:	3728      	adds	r7, #40	; 0x28
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20197354 	.word	0x20197354
 8007854:	20197350 	.word	0x20197350
 8007858:	20197358 	.word	0x20197358

0800785c <SITRONIX_Probe>:
  * @brief  Probe the SITRONIX TS driver.
  * @param  Instance TS Instance.
  * @retval BSP status.
  */
static int32_t SITRONIX_Probe(uint32_t Instance)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b08a      	sub	sp, #40	; 0x28
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  int32_t                  status;
  SITRONIX_IO_t              IOCtx;
  static SITRONIX_Object_t SITRONIXObj;

  /* Configure the TS driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8007864:	23e0      	movs	r3, #224	; 0xe0
 8007866:	823b      	strh	r3, [r7, #16]
  IOCtx.Init        = BSP_I2C5_Init;
 8007868:	4b1d      	ldr	r3, [pc, #116]	; (80078e0 <SITRONIX_Probe+0x84>)
 800786a:	60bb      	str	r3, [r7, #8]
  IOCtx.DeInit      = BSP_I2C5_DeInit;
 800786c:	4b1d      	ldr	r3, [pc, #116]	; (80078e4 <SITRONIX_Probe+0x88>)
 800786e:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg     = BSP_I2C5_ReadReg;
 8007870:	4b1d      	ldr	r3, [pc, #116]	; (80078e8 <SITRONIX_Probe+0x8c>)
 8007872:	61bb      	str	r3, [r7, #24]
  IOCtx.WriteReg    = BSP_I2C5_WriteReg;
 8007874:	4b1d      	ldr	r3, [pc, #116]	; (80078ec <SITRONIX_Probe+0x90>)
 8007876:	617b      	str	r3, [r7, #20]
  IOCtx.ReadData    = BSP_I2C5_Recv;
 8007878:	4b1d      	ldr	r3, [pc, #116]	; (80078f0 <SITRONIX_Probe+0x94>)
 800787a:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 800787c:	4b1d      	ldr	r3, [pc, #116]	; (80078f4 <SITRONIX_Probe+0x98>)
 800787e:	623b      	str	r3, [r7, #32]

  if (SITRONIX_RegisterBusIO(&SITRONIXObj, &IOCtx) != SITRONIX_OK)
 8007880:	f107 0308 	add.w	r3, r7, #8
 8007884:	4619      	mov	r1, r3
 8007886:	481c      	ldr	r0, [pc, #112]	; (80078f8 <SITRONIX_Probe+0x9c>)
 8007888:	f7fd f962 	bl	8004b50 <SITRONIX_RegisterBusIO>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <SITRONIX_Probe+0x3e>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8007892:	f06f 0307 	mvn.w	r3, #7
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
 8007898:	e01d      	b.n	80078d6 <SITRONIX_Probe+0x7a>
  }
  else
  {
    Ts_CompObj[Instance] = &SITRONIXObj;
 800789a:	4a18      	ldr	r2, [pc, #96]	; (80078fc <SITRONIX_Probe+0xa0>)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4916      	ldr	r1, [pc, #88]	; (80078f8 <SITRONIX_Probe+0x9c>)
 80078a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv[Instance]     = (TS_Drv_t *) &SITRONIX_TS_Driver;
 80078a4:	4a16      	ldr	r2, [pc, #88]	; (8007900 <SITRONIX_Probe+0xa4>)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4916      	ldr	r1, [pc, #88]	; (8007904 <SITRONIX_Probe+0xa8>)
 80078aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (Ts_Drv[Instance]->Init(Ts_CompObj[Instance]) < 0)
 80078ae:	4a14      	ldr	r2, [pc, #80]	; (8007900 <SITRONIX_Probe+0xa4>)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4910      	ldr	r1, [pc, #64]	; (80078fc <SITRONIX_Probe+0xa0>)
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80078c0:	4610      	mov	r0, r2
 80078c2:	4798      	blx	r3
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	da03      	bge.n	80078d2 <SITRONIX_Probe+0x76>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80078ca:	f06f 0304 	mvn.w	r3, #4
 80078ce:	627b      	str	r3, [r7, #36]	; 0x24
 80078d0:	e001      	b.n	80078d6 <SITRONIX_Probe+0x7a>
    }
    else
    {
      status = BSP_ERROR_NONE;
 80078d2:	2300      	movs	r3, #0
 80078d4:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return status;
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3728      	adds	r7, #40	; 0x28
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	08004f71 	.word	0x08004f71
 80078e4:	08004fe5 	.word	0x08004fe5
 80078e8:	0800510d 	.word	0x0800510d
 80078ec:	080050b1 	.word	0x080050b1
 80078f0:	08005169 	.word	0x08005169
 80078f4:	080051b9 	.word	0x080051b9
 80078f8:	201973c0 	.word	0x201973c0
 80078fc:	20197350 	.word	0x20197350
 8007900:	20197354 	.word	0x20197354
 8007904:	20000010 	.word	0x20000010

08007908 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007908:	b480      	push	{r7}
 800790a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800790c:	4b18      	ldr	r3, [pc, #96]	; (8007970 <SystemInit+0x68>)
 800790e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007912:	4a17      	ldr	r2, [pc, #92]	; (8007970 <SystemInit+0x68>)
 8007914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800791c:	4b15      	ldr	r3, [pc, #84]	; (8007974 <SystemInit+0x6c>)
 800791e:	2201      	movs	r2, #1
 8007920:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8007922:	4b14      	ldr	r3, [pc, #80]	; (8007974 <SystemInit+0x6c>)
 8007924:	2200      	movs	r2, #0
 8007926:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8007928:	4b12      	ldr	r3, [pc, #72]	; (8007974 <SystemInit+0x6c>)
 800792a:	2200      	movs	r2, #0
 800792c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800792e:	4b11      	ldr	r3, [pc, #68]	; (8007974 <SystemInit+0x6c>)
 8007930:	2200      	movs	r2, #0
 8007932:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8007934:	4b0f      	ldr	r3, [pc, #60]	; (8007974 <SystemInit+0x6c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a0e      	ldr	r2, [pc, #56]	; (8007974 <SystemInit+0x6c>)
 800793a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800793e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007942:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8007944:	4b0b      	ldr	r3, [pc, #44]	; (8007974 <SystemInit+0x6c>)
 8007946:	2200      	movs	r2, #0
 8007948:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800794a:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <SystemInit+0x6c>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a09      	ldr	r2, [pc, #36]	; (8007974 <SystemInit+0x6c>)
 8007950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007954:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8007956:	4b07      	ldr	r3, [pc, #28]	; (8007974 <SystemInit+0x6c>)
 8007958:	2200      	movs	r2, #0
 800795a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800795c:	4b04      	ldr	r3, [pc, #16]	; (8007970 <SystemInit+0x68>)
 800795e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007962:	609a      	str	r2, [r3, #8]
  #endif
}
 8007964:	bf00      	nop
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	e000ed00 	.word	0xe000ed00
 8007974:	46020c00 	.word	0x46020c00

08007978 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800797c:	4b11      	ldr	r3, [pc, #68]	; (80079c4 <HAL_Init+0x4c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a10      	ldr	r2, [pc, #64]	; (80079c4 <HAL_Init+0x4c>)
 8007982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007988:	2003      	movs	r0, #3
 800798a:	f000 f914 	bl	8007bb6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800798e:	f005 fc6b 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 8007992:	4602      	mov	r2, r0
 8007994:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <HAL_Init+0x50>)
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	f003 030f 	and.w	r3, r3, #15
 800799c:	490b      	ldr	r1, [pc, #44]	; (80079cc <HAL_Init+0x54>)
 800799e:	5ccb      	ldrb	r3, [r1, r3]
 80079a0:	fa22 f303 	lsr.w	r3, r2, r3
 80079a4:	4a0a      	ldr	r2, [pc, #40]	; (80079d0 <HAL_Init+0x58>)
 80079a6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80079a8:	2000      	movs	r0, #0
 80079aa:	f7fa fab1 	bl	8001f10 <HAL_InitTick>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e002      	b.n	80079be <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80079b8:	f7f9 ffce 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	40022000 	.word	0x40022000
 80079c8:	46020c00 	.word	0x46020c00
 80079cc:	0802b990 	.word	0x0802b990
 80079d0:	20000048 	.word	0x20000048

080079d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80079d4:	b480      	push	{r7}
 80079d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80079d8:	4b06      	ldr	r3, [pc, #24]	; (80079f4 <HAL_IncTick+0x20>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	461a      	mov	r2, r3
 80079de:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <HAL_IncTick+0x24>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4413      	add	r3, r2
 80079e4:	4a04      	ldr	r2, [pc, #16]	; (80079f8 <HAL_IncTick+0x24>)
 80079e6:	6013      	str	r3, [r2, #0]
}
 80079e8:	bf00      	nop
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	20000050 	.word	0x20000050
 80079f8:	201973f0 	.word	0x201973f0

080079fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80079fc:	b480      	push	{r7}
 80079fe:	af00      	add	r7, sp, #0
  return uwTick;
 8007a00:	4b03      	ldr	r3, [pc, #12]	; (8007a10 <HAL_GetTick+0x14>)
 8007a02:	681b      	ldr	r3, [r3, #0]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	201973f0 	.word	0x201973f0

08007a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007a1c:	f7ff ffee 	bl	80079fc <HAL_GetTick>
 8007a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2c:	d005      	beq.n	8007a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007a2e:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <HAL_Delay+0x44>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007a3a:	bf00      	nop
 8007a3c:	f7ff ffde 	bl	80079fc <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d8f7      	bhi.n	8007a3c <HAL_Delay+0x28>
  {
  }
}
 8007a4c:	bf00      	nop
 8007a4e:	bf00      	nop
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	20000050 	.word	0x20000050

08007a5c <__NVIC_SetPriorityGrouping>:
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a6c:	4b0c      	ldr	r3, [pc, #48]	; (8007aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007a78:	4013      	ands	r3, r2
 8007a7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a8e:	4a04      	ldr	r2, [pc, #16]	; (8007aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	60d3      	str	r3, [r2, #12]
}
 8007a94:	bf00      	nop
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	e000ed00 	.word	0xe000ed00

08007aa4 <__NVIC_GetPriorityGrouping>:
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007aa8:	4b04      	ldr	r3, [pc, #16]	; (8007abc <__NVIC_GetPriorityGrouping+0x18>)
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	0a1b      	lsrs	r3, r3, #8
 8007aae:	f003 0307 	and.w	r3, r3, #7
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	e000ed00 	.word	0xe000ed00

08007ac0 <__NVIC_EnableIRQ>:
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	db0b      	blt.n	8007aea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ad2:	88fb      	ldrh	r3, [r7, #6]
 8007ad4:	f003 021f 	and.w	r2, r3, #31
 8007ad8:	4907      	ldr	r1, [pc, #28]	; (8007af8 <__NVIC_EnableIRQ+0x38>)
 8007ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ade:	095b      	lsrs	r3, r3, #5
 8007ae0:	2001      	movs	r0, #1
 8007ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007aea:	bf00      	nop
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	e000e100 	.word	0xe000e100

08007afc <__NVIC_SetPriority>:
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	4603      	mov	r3, r0
 8007b04:	6039      	str	r1, [r7, #0]
 8007b06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007b08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	db0a      	blt.n	8007b26 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	490c      	ldr	r1, [pc, #48]	; (8007b48 <__NVIC_SetPriority+0x4c>)
 8007b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b1a:	0112      	lsls	r2, r2, #4
 8007b1c:	b2d2      	uxtb	r2, r2
 8007b1e:	440b      	add	r3, r1
 8007b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b24:	e00a      	b.n	8007b3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	4908      	ldr	r1, [pc, #32]	; (8007b4c <__NVIC_SetPriority+0x50>)
 8007b2c:	88fb      	ldrh	r3, [r7, #6]
 8007b2e:	f003 030f 	and.w	r3, r3, #15
 8007b32:	3b04      	subs	r3, #4
 8007b34:	0112      	lsls	r2, r2, #4
 8007b36:	b2d2      	uxtb	r2, r2
 8007b38:	440b      	add	r3, r1
 8007b3a:	761a      	strb	r2, [r3, #24]
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	e000e100 	.word	0xe000e100
 8007b4c:	e000ed00 	.word	0xe000ed00

08007b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b089      	sub	sp, #36	; 0x24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f003 0307 	and.w	r3, r3, #7
 8007b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	f1c3 0307 	rsb	r3, r3, #7
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	bf28      	it	cs
 8007b6e:	2304      	movcs	r3, #4
 8007b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	3304      	adds	r3, #4
 8007b76:	2b06      	cmp	r3, #6
 8007b78:	d902      	bls.n	8007b80 <NVIC_EncodePriority+0x30>
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	3b03      	subs	r3, #3
 8007b7e:	e000      	b.n	8007b82 <NVIC_EncodePriority+0x32>
 8007b80:	2300      	movs	r3, #0
 8007b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b84:	f04f 32ff 	mov.w	r2, #4294967295
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8e:	43da      	mvns	r2, r3
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	401a      	ands	r2, r3
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b98:	f04f 31ff 	mov.w	r1, #4294967295
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba2:	43d9      	mvns	r1, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ba8:	4313      	orrs	r3, r2
         );
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3724      	adds	r7, #36	; 0x24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b082      	sub	sp, #8
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff ff4c 	bl	8007a5c <__NVIC_SetPriorityGrouping>
}
 8007bc4:	bf00      	nop
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
 8007bd8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007bda:	f7ff ff63 	bl	8007aa4 <__NVIC_GetPriorityGrouping>
 8007bde:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	6978      	ldr	r0, [r7, #20]
 8007be6:	f7ff ffb3 	bl	8007b50 <NVIC_EncodePriority>
 8007bea:	4602      	mov	r2, r0
 8007bec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff ff82 	bl	8007afc <__NVIC_SetPriority>
}
 8007bf8:	bf00      	nop
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7ff ff56 	bl	8007ac0 <__NVIC_EnableIRQ>
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e054      	b.n	8007cd8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	7f5b      	ldrb	r3, [r3, #29]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d105      	bne.n	8007c44 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7f9 fea4 	bl	800198c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2202      	movs	r2, #2
 8007c48:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	791b      	ldrb	r3, [r3, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10c      	bne.n	8007c6c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a22      	ldr	r2, [pc, #136]	; (8007ce0 <HAL_CRC_Init+0xc4>)
 8007c58:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f022 0218 	bic.w	r2, r2, #24
 8007c68:	609a      	str	r2, [r3, #8]
 8007c6a:	e00c      	b.n	8007c86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6899      	ldr	r1, [r3, #8]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	461a      	mov	r2, r3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f834 	bl	8007ce4 <HAL_CRCEx_Polynomial_Set>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e028      	b.n	8007cd8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	795b      	ldrb	r3, [r3, #5]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d105      	bne.n	8007c9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f04f 32ff 	mov.w	r2, #4294967295
 8007c96:	611a      	str	r2, [r3, #16]
 8007c98:	e004      	b.n	8007ca4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	6912      	ldr	r2, [r2, #16]
 8007ca2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	695a      	ldr	r2, [r3, #20]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	699a      	ldr	r2, [r3, #24]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	04c11db7 	.word	0x04c11db7

08007ce4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007cf4:	231f      	movs	r3, #31
 8007cf6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d102      	bne.n	8007d08 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	75fb      	strb	r3, [r7, #23]
 8007d06:	e063      	b.n	8007dd0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007d08:	bf00      	nop
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	1e5a      	subs	r2, r3, #1
 8007d0e:	613a      	str	r2, [r7, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d009      	beq.n	8007d28 <HAL_CRCEx_Polynomial_Set+0x44>
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f003 031f 	and.w	r3, r3, #31
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d0f0      	beq.n	8007d0a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b18      	cmp	r3, #24
 8007d2c:	d846      	bhi.n	8007dbc <HAL_CRCEx_Polynomial_Set+0xd8>
 8007d2e:	a201      	add	r2, pc, #4	; (adr r2, 8007d34 <HAL_CRCEx_Polynomial_Set+0x50>)
 8007d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d34:	08007dc3 	.word	0x08007dc3
 8007d38:	08007dbd 	.word	0x08007dbd
 8007d3c:	08007dbd 	.word	0x08007dbd
 8007d40:	08007dbd 	.word	0x08007dbd
 8007d44:	08007dbd 	.word	0x08007dbd
 8007d48:	08007dbd 	.word	0x08007dbd
 8007d4c:	08007dbd 	.word	0x08007dbd
 8007d50:	08007dbd 	.word	0x08007dbd
 8007d54:	08007db1 	.word	0x08007db1
 8007d58:	08007dbd 	.word	0x08007dbd
 8007d5c:	08007dbd 	.word	0x08007dbd
 8007d60:	08007dbd 	.word	0x08007dbd
 8007d64:	08007dbd 	.word	0x08007dbd
 8007d68:	08007dbd 	.word	0x08007dbd
 8007d6c:	08007dbd 	.word	0x08007dbd
 8007d70:	08007dbd 	.word	0x08007dbd
 8007d74:	08007da5 	.word	0x08007da5
 8007d78:	08007dbd 	.word	0x08007dbd
 8007d7c:	08007dbd 	.word	0x08007dbd
 8007d80:	08007dbd 	.word	0x08007dbd
 8007d84:	08007dbd 	.word	0x08007dbd
 8007d88:	08007dbd 	.word	0x08007dbd
 8007d8c:	08007dbd 	.word	0x08007dbd
 8007d90:	08007dbd 	.word	0x08007dbd
 8007d94:	08007d99 	.word	0x08007d99
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2b06      	cmp	r3, #6
 8007d9c:	d913      	bls.n	8007dc6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007da2:	e010      	b.n	8007dc6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	2b07      	cmp	r3, #7
 8007da8:	d90f      	bls.n	8007dca <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007dae:	e00c      	b.n	8007dca <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	2b0f      	cmp	r3, #15
 8007db4:	d90b      	bls.n	8007dce <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007dba:	e008      	b.n	8007dce <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	75fb      	strb	r3, [r7, #23]
        break;
 8007dc0:	e006      	b.n	8007dd0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007dc2:	bf00      	nop
 8007dc4:	e004      	b.n	8007dd0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007dc6:	bf00      	nop
 8007dc8:	e002      	b.n	8007dd0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007dca:	bf00      	nop
 8007dcc:	e000      	b.n	8007dd0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007dce:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8007dd0:	7dfb      	ldrb	r3, [r7, #23]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10d      	bne.n	8007df2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f023 0118 	bic.w	r1, r3, #24
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	371c      	adds	r7, #28
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e037      	b.n	8007e82 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d119      	bne.n	8007e52 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a1a      	ldr	r2, [pc, #104]	; (8007e8c <HAL_DCACHE_Init+0x8c>)
 8007e22:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a1a      	ldr	r2, [pc, #104]	; (8007e90 <HAL_DCACHE_Init+0x90>)
 8007e28:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a19      	ldr	r2, [pc, #100]	; (8007e94 <HAL_DCACHE_Init+0x94>)
 8007e2e:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a19      	ldr	r2, [pc, #100]	; (8007e98 <HAL_DCACHE_Init+0x98>)
 8007e34:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a18      	ldr	r2, [pc, #96]	; (8007e9c <HAL_DCACHE_Init+0x9c>)
 8007e3a:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d102      	bne.n	8007e4a <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a16      	ldr	r2, [pc, #88]	; (8007ea0 <HAL_DCACHE_Init+0xa0>)
 8007e48:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f814 	bl	8007ea4 <HAL_DCACHE_Enable>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]

  return status;
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	08007ff3 	.word	0x08007ff3
 8007e90:	08007fa3 	.word	0x08007fa3
 8007e94:	08007fb7 	.word	0x08007fb7
 8007e98:	08007fdf 	.word	0x08007fdf
 8007e9c:	08007fcb 	.word	0x08007fcb
 8007ea0:	080019d1 	.word	0x080019d1

08007ea4 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e015      	b.n	8007ee6 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f003 0309 	and.w	r3, r3, #9
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d002      	beq.n	8007ece <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8007ec8:	2302      	movs	r3, #2
 8007eca:	73fb      	strb	r3, [r7, #15]
 8007ecc:	e00a      	b.n	8007ee4 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0201 	orr.w	r2, r2, #1
 8007ee2:	601a      	str	r2, [r3, #0]
  }

  return status;
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <HAL_DCACHE_Invalidate>:
  *                 the configuration information for the specified DCACHEx peripheral.
  * @note   This function waits for end of full cache invalidation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Invalidate(DCACHE_HandleTypeDef *hdcache)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <HAL_DCACHE_Invalidate+0x16>
  {
    return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e048      	b.n	8007f9a <HAL_DCACHE_Invalidate+0xa8>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f003 0309 	and.w	r3, r3, #9
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d002      	beq.n	8007f1c <HAL_DCACHE_Invalidate+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8007f16:	2302      	movs	r3, #2
 8007f18:	73fb      	strb	r3, [r7, #15]
 8007f1a:	e03d      	b.n	8007f98 <HAL_DCACHE_Invalidate+0xa6>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Change DCACHE Handle state */
    hdcache->State = HAL_DCACHE_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Make sure flags are reset */
    WRITE_REG(hdcache->Instance->FCR, (DCACHE_FCR_CBSYENDF | DCACHE_FCR_CCMDENDF));
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2212      	movs	r2, #18
 8007f30:	60da      	str	r2, [r3, #12]

    /* Set no operation on address range */
    MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_CACHECMD, 0U);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f40:	601a      	str	r2, [r3, #0]

    /* Launch cache invalidation */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_CACHEINV);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f042 0202 	orr.w	r2, r2, #2
 8007f50:	601a      	str	r2, [r3, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();
 8007f52:	f7ff fd53 	bl	80079fc <HAL_GetTick>
 8007f56:	60b8      	str	r0, [r7, #8]

    /* Wait for end of cache invalidation */
    while (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 8007f58:	e017      	b.n	8007f8a <HAL_DCACHE_Invalidate+0x98>
    {
      if ((HAL_GetTick() - tickstart) > DCACHE_COMMAND_TIMEOUT_VALUE)
 8007f5a:	f7ff fd4f 	bl	80079fc <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	2bc8      	cmp	r3, #200	; 0xc8
 8007f66:	d910      	bls.n	8007f8a <HAL_DCACHE_Invalidate+0x98>
      {
        if (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d009      	beq.n	8007f8a <HAL_DCACHE_Invalidate+0x98>
        {
          /* Update error code */
          hdcache->ErrorCode = HAL_DCACHE_ERROR_TIMEOUT;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2210      	movs	r2, #16
 8007f7a:	629a      	str	r2, [r3, #40]	; 0x28

          /* Change the DCACHE state */
          hdcache->State = HAL_DCACHE_STATE_ERROR;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2206      	movs	r2, #6
 8007f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          /* Return error status */
          status =  HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	73fb      	strb	r3, [r7, #15]
          break;
 8007f88:	e006      	b.n	8007f98 <HAL_DCACHE_Invalidate+0xa6>
    while (READ_BIT(hdcache->Instance->SR, DCACHE_SR_BUSYF) != 0U)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	f003 0301 	and.w	r3, r3, #1
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e0      	bne.n	8007f5a <HAL_DCACHE_Invalidate+0x68>
        }
      }
    }
  }

  return status;
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8007faa:	bf00      	nop
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b083      	sub	sp, #12
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8007ffa:	bf00      	nop
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
	...

08008008 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8008010:	f7ff fcf4 	bl	80079fc <HAL_GetTick>
 8008014:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d101      	bne.n	8008020 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e0e0      	b.n	80081e2 <HAL_DMA_Init+0x1da>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a6f      	ldr	r2, [pc, #444]	; (80081ec <HAL_DMA_Init+0x1e4>)
 800802e:	4293      	cmp	r3, r2
 8008030:	f000 809f 	beq.w	8008172 <HAL_DMA_Init+0x16a>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a6d      	ldr	r2, [pc, #436]	; (80081f0 <HAL_DMA_Init+0x1e8>)
 800803a:	4293      	cmp	r3, r2
 800803c:	f000 8099 	beq.w	8008172 <HAL_DMA_Init+0x16a>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a6b      	ldr	r2, [pc, #428]	; (80081f4 <HAL_DMA_Init+0x1ec>)
 8008046:	4293      	cmp	r3, r2
 8008048:	f000 8093 	beq.w	8008172 <HAL_DMA_Init+0x16a>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a69      	ldr	r2, [pc, #420]	; (80081f8 <HAL_DMA_Init+0x1f0>)
 8008052:	4293      	cmp	r3, r2
 8008054:	f000 808d 	beq.w	8008172 <HAL_DMA_Init+0x16a>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a67      	ldr	r2, [pc, #412]	; (80081fc <HAL_DMA_Init+0x1f4>)
 800805e:	4293      	cmp	r3, r2
 8008060:	f000 8087 	beq.w	8008172 <HAL_DMA_Init+0x16a>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a65      	ldr	r2, [pc, #404]	; (8008200 <HAL_DMA_Init+0x1f8>)
 800806a:	4293      	cmp	r3, r2
 800806c:	f000 8081 	beq.w	8008172 <HAL_DMA_Init+0x16a>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a63      	ldr	r2, [pc, #396]	; (8008204 <HAL_DMA_Init+0x1fc>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d07b      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a62      	ldr	r2, [pc, #392]	; (8008208 <HAL_DMA_Init+0x200>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d076      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a60      	ldr	r2, [pc, #384]	; (800820c <HAL_DMA_Init+0x204>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d071      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a5f      	ldr	r2, [pc, #380]	; (8008210 <HAL_DMA_Init+0x208>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d06c      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a5d      	ldr	r2, [pc, #372]	; (8008214 <HAL_DMA_Init+0x20c>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d067      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a5c      	ldr	r2, [pc, #368]	; (8008218 <HAL_DMA_Init+0x210>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d062      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a5a      	ldr	r2, [pc, #360]	; (800821c <HAL_DMA_Init+0x214>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d05d      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a59      	ldr	r2, [pc, #356]	; (8008220 <HAL_DMA_Init+0x218>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d058      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a57      	ldr	r2, [pc, #348]	; (8008224 <HAL_DMA_Init+0x21c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d053      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a56      	ldr	r2, [pc, #344]	; (8008228 <HAL_DMA_Init+0x220>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d04e      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a54      	ldr	r2, [pc, #336]	; (800822c <HAL_DMA_Init+0x224>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d049      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a53      	ldr	r2, [pc, #332]	; (8008230 <HAL_DMA_Init+0x228>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d044      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a51      	ldr	r2, [pc, #324]	; (8008234 <HAL_DMA_Init+0x22c>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d03f      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a50      	ldr	r2, [pc, #320]	; (8008238 <HAL_DMA_Init+0x230>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d03a      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a4e      	ldr	r2, [pc, #312]	; (800823c <HAL_DMA_Init+0x234>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d035      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a4d      	ldr	r2, [pc, #308]	; (8008240 <HAL_DMA_Init+0x238>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d030      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a4b      	ldr	r2, [pc, #300]	; (8008244 <HAL_DMA_Init+0x23c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d02b      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a4a      	ldr	r2, [pc, #296]	; (8008248 <HAL_DMA_Init+0x240>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d026      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a48      	ldr	r2, [pc, #288]	; (800824c <HAL_DMA_Init+0x244>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d021      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a47      	ldr	r2, [pc, #284]	; (8008250 <HAL_DMA_Init+0x248>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d01c      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a45      	ldr	r2, [pc, #276]	; (8008254 <HAL_DMA_Init+0x24c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d017      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a44      	ldr	r2, [pc, #272]	; (8008258 <HAL_DMA_Init+0x250>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d012      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a42      	ldr	r2, [pc, #264]	; (800825c <HAL_DMA_Init+0x254>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d00d      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a41      	ldr	r2, [pc, #260]	; (8008260 <HAL_DMA_Init+0x258>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d008      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a3f      	ldr	r2, [pc, #252]	; (8008264 <HAL_DMA_Init+0x25c>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d003      	beq.n	8008172 <HAL_DMA_Init+0x16a>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a3e      	ldr	r2, [pc, #248]	; (8008268 <HAL_DMA_Init+0x260>)
 8008170:	4293      	cmp	r3, r2
 8008172:	bf00      	nop
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2202      	movs	r2, #2
 8008180:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	695a      	ldr	r2, [r3, #20]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f042 0206 	orr.w	r2, r2, #6
 8008192:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008194:	e00f      	b.n	80081b6 <HAL_DMA_Init+0x1ae>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8008196:	f7ff fc31 	bl	80079fc <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	2b05      	cmp	r3, #5
 80081a2:	d908      	bls.n	80081b6 <HAL_DMA_Init+0x1ae>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2210      	movs	r2, #16
 80081a8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2203      	movs	r2, #3
 80081ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e015      	b.n	80081e2 <HAL_DMA_Init+0x1da>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1e8      	bne.n	8008196 <HAL_DMA_Init+0x18e>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f8cd 	bl	8008364 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	40020050 	.word	0x40020050
 80081f0:	50020050 	.word	0x50020050
 80081f4:	400200d0 	.word	0x400200d0
 80081f8:	500200d0 	.word	0x500200d0
 80081fc:	40020150 	.word	0x40020150
 8008200:	50020150 	.word	0x50020150
 8008204:	400201d0 	.word	0x400201d0
 8008208:	500201d0 	.word	0x500201d0
 800820c:	40020250 	.word	0x40020250
 8008210:	50020250 	.word	0x50020250
 8008214:	400202d0 	.word	0x400202d0
 8008218:	500202d0 	.word	0x500202d0
 800821c:	40020350 	.word	0x40020350
 8008220:	50020350 	.word	0x50020350
 8008224:	400203d0 	.word	0x400203d0
 8008228:	500203d0 	.word	0x500203d0
 800822c:	40020450 	.word	0x40020450
 8008230:	50020450 	.word	0x50020450
 8008234:	400204d0 	.word	0x400204d0
 8008238:	500204d0 	.word	0x500204d0
 800823c:	40020550 	.word	0x40020550
 8008240:	50020550 	.word	0x50020550
 8008244:	400205d0 	.word	0x400205d0
 8008248:	500205d0 	.word	0x500205d0
 800824c:	40020650 	.word	0x40020650
 8008250:	50020650 	.word	0x50020650
 8008254:	400206d0 	.word	0x400206d0
 8008258:	500206d0 	.word	0x500206d0
 800825c:	40020750 	.word	0x40020750
 8008260:	50020750 	.word	0x50020750
 8008264:	400207d0 	.word	0x400207d0
 8008268:	500207d0 	.word	0x500207d0

0800826c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8008274:	f7ff fbc2 	bl	80079fc <HAL_GetTick>
 8008278:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e06b      	b.n	800835c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800828a:	b2db      	uxtb	r3, r3
 800828c:	2b02      	cmp	r3, #2
 800828e:	d008      	beq.n	80082a2 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2220      	movs	r2, #32
 8008294:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e05c      	b.n	800835c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695a      	ldr	r2, [r3, #20]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f042 0204 	orr.w	r2, r2, #4
 80082b0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2205      	movs	r2, #5
 80082b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80082ba:	e020      	b.n	80082fe <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80082bc:	f7ff fb9e 	bl	80079fc <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b05      	cmp	r3, #5
 80082c8:	d919      	bls.n	80082fe <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ce:	f043 0210 	orr.w	r2, r3, #16
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2203      	movs	r2, #3
 80082da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082ee:	2201      	movs	r2, #1
 80082f0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e02e      	b.n	800835c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d0d7      	beq.n	80082bc <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	695a      	ldr	r2, [r3, #20]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0202 	orr.w	r2, r2, #2
 800831a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2204      	movs	r2, #4
 8008320:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800832c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800833a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800833e:	2b00      	cmp	r3, #0
 8008340:	d007      	beq.n	8008352 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008346:	2201      	movs	r2, #1
 8008348:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2200      	movs	r2, #0
 8008350:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a1b      	ldr	r3, [r3, #32]
 8008370:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	695b      	ldr	r3, [r3, #20]
 8008378:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	430a      	orrs	r2, r1
 8008384:	615a      	str	r2, [r3, #20]


  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	695a      	ldr	r2, [r3, #20]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	431a      	orrs	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	431a      	orrs	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	4313      	orrs	r3, r2
 800839c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a53      	ldr	r2, [pc, #332]	; (80084f0 <DMA_Init+0x18c>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	f000 80a0 	beq.w	80084ea <DMA_Init+0x186>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a51      	ldr	r2, [pc, #324]	; (80084f4 <DMA_Init+0x190>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	f000 809a 	beq.w	80084ea <DMA_Init+0x186>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a4f      	ldr	r2, [pc, #316]	; (80084f8 <DMA_Init+0x194>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	f000 8094 	beq.w	80084ea <DMA_Init+0x186>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a4d      	ldr	r2, [pc, #308]	; (80084fc <DMA_Init+0x198>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	f000 808e 	beq.w	80084ea <DMA_Init+0x186>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a4b      	ldr	r2, [pc, #300]	; (8008500 <DMA_Init+0x19c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	f000 8088 	beq.w	80084ea <DMA_Init+0x186>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a49      	ldr	r2, [pc, #292]	; (8008504 <DMA_Init+0x1a0>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	f000 8082 	beq.w	80084ea <DMA_Init+0x186>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a47      	ldr	r2, [pc, #284]	; (8008508 <DMA_Init+0x1a4>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d07c      	beq.n	80084ea <DMA_Init+0x186>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a45      	ldr	r2, [pc, #276]	; (800850c <DMA_Init+0x1a8>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d077      	beq.n	80084ea <DMA_Init+0x186>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a44      	ldr	r2, [pc, #272]	; (8008510 <DMA_Init+0x1ac>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d072      	beq.n	80084ea <DMA_Init+0x186>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a42      	ldr	r2, [pc, #264]	; (8008514 <DMA_Init+0x1b0>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d06d      	beq.n	80084ea <DMA_Init+0x186>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a41      	ldr	r2, [pc, #260]	; (8008518 <DMA_Init+0x1b4>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d068      	beq.n	80084ea <DMA_Init+0x186>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a3f      	ldr	r2, [pc, #252]	; (800851c <DMA_Init+0x1b8>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d063      	beq.n	80084ea <DMA_Init+0x186>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a3e      	ldr	r2, [pc, #248]	; (8008520 <DMA_Init+0x1bc>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d05e      	beq.n	80084ea <DMA_Init+0x186>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a3c      	ldr	r2, [pc, #240]	; (8008524 <DMA_Init+0x1c0>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d059      	beq.n	80084ea <DMA_Init+0x186>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a3b      	ldr	r2, [pc, #236]	; (8008528 <DMA_Init+0x1c4>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d054      	beq.n	80084ea <DMA_Init+0x186>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a39      	ldr	r2, [pc, #228]	; (800852c <DMA_Init+0x1c8>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d04f      	beq.n	80084ea <DMA_Init+0x186>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a38      	ldr	r2, [pc, #224]	; (8008530 <DMA_Init+0x1cc>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d04a      	beq.n	80084ea <DMA_Init+0x186>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a36      	ldr	r2, [pc, #216]	; (8008534 <DMA_Init+0x1d0>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d045      	beq.n	80084ea <DMA_Init+0x186>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a35      	ldr	r2, [pc, #212]	; (8008538 <DMA_Init+0x1d4>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d040      	beq.n	80084ea <DMA_Init+0x186>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a33      	ldr	r2, [pc, #204]	; (800853c <DMA_Init+0x1d8>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d03b      	beq.n	80084ea <DMA_Init+0x186>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a32      	ldr	r2, [pc, #200]	; (8008540 <DMA_Init+0x1dc>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d036      	beq.n	80084ea <DMA_Init+0x186>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a30      	ldr	r2, [pc, #192]	; (8008544 <DMA_Init+0x1e0>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d031      	beq.n	80084ea <DMA_Init+0x186>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a2f      	ldr	r2, [pc, #188]	; (8008548 <DMA_Init+0x1e4>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d02c      	beq.n	80084ea <DMA_Init+0x186>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a2d      	ldr	r2, [pc, #180]	; (800854c <DMA_Init+0x1e8>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d027      	beq.n	80084ea <DMA_Init+0x186>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a2c      	ldr	r2, [pc, #176]	; (8008550 <DMA_Init+0x1ec>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d022      	beq.n	80084ea <DMA_Init+0x186>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a2a      	ldr	r2, [pc, #168]	; (8008554 <DMA_Init+0x1f0>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d01d      	beq.n	80084ea <DMA_Init+0x186>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a29      	ldr	r2, [pc, #164]	; (8008558 <DMA_Init+0x1f4>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d018      	beq.n	80084ea <DMA_Init+0x186>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a27      	ldr	r2, [pc, #156]	; (800855c <DMA_Init+0x1f8>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d013      	beq.n	80084ea <DMA_Init+0x186>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a26      	ldr	r2, [pc, #152]	; (8008560 <DMA_Init+0x1fc>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d00e      	beq.n	80084ea <DMA_Init+0x186>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a24      	ldr	r2, [pc, #144]	; (8008564 <DMA_Init+0x200>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d009      	beq.n	80084ea <DMA_Init+0x186>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a23      	ldr	r2, [pc, #140]	; (8008568 <DMA_Init+0x204>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d004      	beq.n	80084ea <DMA_Init+0x186>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a21      	ldr	r2, [pc, #132]	; (800856c <DMA_Init+0x208>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d142      	bne.n	8008570 <DMA_Init+0x20c>
 80084ea:	2301      	movs	r3, #1
 80084ec:	e041      	b.n	8008572 <DMA_Init+0x20e>
 80084ee:	bf00      	nop
 80084f0:	40020050 	.word	0x40020050
 80084f4:	50020050 	.word	0x50020050
 80084f8:	400200d0 	.word	0x400200d0
 80084fc:	500200d0 	.word	0x500200d0
 8008500:	40020150 	.word	0x40020150
 8008504:	50020150 	.word	0x50020150
 8008508:	400201d0 	.word	0x400201d0
 800850c:	500201d0 	.word	0x500201d0
 8008510:	40020250 	.word	0x40020250
 8008514:	50020250 	.word	0x50020250
 8008518:	400202d0 	.word	0x400202d0
 800851c:	500202d0 	.word	0x500202d0
 8008520:	40020350 	.word	0x40020350
 8008524:	50020350 	.word	0x50020350
 8008528:	400203d0 	.word	0x400203d0
 800852c:	500203d0 	.word	0x500203d0
 8008530:	40020450 	.word	0x40020450
 8008534:	50020450 	.word	0x50020450
 8008538:	400204d0 	.word	0x400204d0
 800853c:	500204d0 	.word	0x500204d0
 8008540:	40020550 	.word	0x40020550
 8008544:	50020550 	.word	0x50020550
 8008548:	400205d0 	.word	0x400205d0
 800854c:	500205d0 	.word	0x500205d0
 8008550:	40020650 	.word	0x40020650
 8008554:	50020650 	.word	0x50020650
 8008558:	400206d0 	.word	0x400206d0
 800855c:	500206d0 	.word	0x500206d0
 8008560:	40020750 	.word	0x40020750
 8008564:	50020750 	.word	0x50020750
 8008568:	400207d0 	.word	0x400207d0
 800856c:	500207d0 	.word	0x500207d0
 8008570:	2300      	movs	r3, #0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d012      	beq.n	800859c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857e:	3b01      	subs	r3, #1
 8008580:	051b      	lsls	r3, r3, #20
 8008582:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008586:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858c:	3b01      	subs	r3, #1
 800858e:	011b      	lsls	r3, r3, #4
 8008590:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8008594:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	4313      	orrs	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a2:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	430a      	orrs	r2, r1
 80085ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689a      	ldr	r2, [r3, #8]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085bc:	431a      	orrs	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ce:	f040 80b0 	bne.w	8008732 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a82      	ldr	r2, [pc, #520]	; (80087e0 <DMA_Init+0x47c>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	f000 80a0 	beq.w	800871e <DMA_Init+0x3ba>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a80      	ldr	r2, [pc, #512]	; (80087e4 <DMA_Init+0x480>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	f000 809a 	beq.w	800871e <DMA_Init+0x3ba>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a7e      	ldr	r2, [pc, #504]	; (80087e8 <DMA_Init+0x484>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	f000 8094 	beq.w	800871e <DMA_Init+0x3ba>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a7c      	ldr	r2, [pc, #496]	; (80087ec <DMA_Init+0x488>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	f000 808e 	beq.w	800871e <DMA_Init+0x3ba>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a7a      	ldr	r2, [pc, #488]	; (80087f0 <DMA_Init+0x48c>)
 8008608:	4293      	cmp	r3, r2
 800860a:	f000 8088 	beq.w	800871e <DMA_Init+0x3ba>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a78      	ldr	r2, [pc, #480]	; (80087f4 <DMA_Init+0x490>)
 8008614:	4293      	cmp	r3, r2
 8008616:	f000 8082 	beq.w	800871e <DMA_Init+0x3ba>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a76      	ldr	r2, [pc, #472]	; (80087f8 <DMA_Init+0x494>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d07c      	beq.n	800871e <DMA_Init+0x3ba>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a74      	ldr	r2, [pc, #464]	; (80087fc <DMA_Init+0x498>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d077      	beq.n	800871e <DMA_Init+0x3ba>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a73      	ldr	r2, [pc, #460]	; (8008800 <DMA_Init+0x49c>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d072      	beq.n	800871e <DMA_Init+0x3ba>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a71      	ldr	r2, [pc, #452]	; (8008804 <DMA_Init+0x4a0>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d06d      	beq.n	800871e <DMA_Init+0x3ba>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a70      	ldr	r2, [pc, #448]	; (8008808 <DMA_Init+0x4a4>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d068      	beq.n	800871e <DMA_Init+0x3ba>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a6e      	ldr	r2, [pc, #440]	; (800880c <DMA_Init+0x4a8>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d063      	beq.n	800871e <DMA_Init+0x3ba>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a6d      	ldr	r2, [pc, #436]	; (8008810 <DMA_Init+0x4ac>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d05e      	beq.n	800871e <DMA_Init+0x3ba>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a6b      	ldr	r2, [pc, #428]	; (8008814 <DMA_Init+0x4b0>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d059      	beq.n	800871e <DMA_Init+0x3ba>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a6a      	ldr	r2, [pc, #424]	; (8008818 <DMA_Init+0x4b4>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d054      	beq.n	800871e <DMA_Init+0x3ba>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a68      	ldr	r2, [pc, #416]	; (800881c <DMA_Init+0x4b8>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d04f      	beq.n	800871e <DMA_Init+0x3ba>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a67      	ldr	r2, [pc, #412]	; (8008820 <DMA_Init+0x4bc>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d04a      	beq.n	800871e <DMA_Init+0x3ba>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a65      	ldr	r2, [pc, #404]	; (8008824 <DMA_Init+0x4c0>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d045      	beq.n	800871e <DMA_Init+0x3ba>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a64      	ldr	r2, [pc, #400]	; (8008828 <DMA_Init+0x4c4>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d040      	beq.n	800871e <DMA_Init+0x3ba>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a62      	ldr	r2, [pc, #392]	; (800882c <DMA_Init+0x4c8>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d03b      	beq.n	800871e <DMA_Init+0x3ba>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a61      	ldr	r2, [pc, #388]	; (8008830 <DMA_Init+0x4cc>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d036      	beq.n	800871e <DMA_Init+0x3ba>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a5f      	ldr	r2, [pc, #380]	; (8008834 <DMA_Init+0x4d0>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d031      	beq.n	800871e <DMA_Init+0x3ba>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a5e      	ldr	r2, [pc, #376]	; (8008838 <DMA_Init+0x4d4>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d02c      	beq.n	800871e <DMA_Init+0x3ba>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a5c      	ldr	r2, [pc, #368]	; (800883c <DMA_Init+0x4d8>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d027      	beq.n	800871e <DMA_Init+0x3ba>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a5b      	ldr	r2, [pc, #364]	; (8008840 <DMA_Init+0x4dc>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d022      	beq.n	800871e <DMA_Init+0x3ba>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a59      	ldr	r2, [pc, #356]	; (8008844 <DMA_Init+0x4e0>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d01d      	beq.n	800871e <DMA_Init+0x3ba>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a58      	ldr	r2, [pc, #352]	; (8008848 <DMA_Init+0x4e4>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d018      	beq.n	800871e <DMA_Init+0x3ba>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a56      	ldr	r2, [pc, #344]	; (800884c <DMA_Init+0x4e8>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d013      	beq.n	800871e <DMA_Init+0x3ba>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a55      	ldr	r2, [pc, #340]	; (8008850 <DMA_Init+0x4ec>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d00e      	beq.n	800871e <DMA_Init+0x3ba>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a53      	ldr	r2, [pc, #332]	; (8008854 <DMA_Init+0x4f0>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d009      	beq.n	800871e <DMA_Init+0x3ba>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a52      	ldr	r2, [pc, #328]	; (8008858 <DMA_Init+0x4f4>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d004      	beq.n	800871e <DMA_Init+0x3ba>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a50      	ldr	r2, [pc, #320]	; (800885c <DMA_Init+0x4f8>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d101      	bne.n	8008722 <DMA_Init+0x3be>
 800871e:	2301      	movs	r3, #1
 8008720:	e000      	b.n	8008724 <DMA_Init+0x3c0>
 8008722:	2300      	movs	r3, #0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00d      	beq.n	8008744 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	e008      	b.n	8008744 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800873a:	d103      	bne.n	8008744 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008742:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800874a:	4b45      	ldr	r3, [pc, #276]	; (8008860 <DMA_Init+0x4fc>)
 800874c:	4013      	ands	r3, r2
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	6812      	ldr	r2, [r2, #0]
 8008752:	68f9      	ldr	r1, [r7, #12]
 8008754:	430b      	orrs	r3, r1
 8008756:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2200      	movs	r2, #0
 800875e:	649a      	str	r2, [r3, #72]	; 0x48


  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a36      	ldr	r2, [pc, #216]	; (8008840 <DMA_Init+0x4dc>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d022      	beq.n	80087b0 <DMA_Init+0x44c>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a35      	ldr	r2, [pc, #212]	; (8008844 <DMA_Init+0x4e0>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d01d      	beq.n	80087b0 <DMA_Init+0x44c>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a33      	ldr	r2, [pc, #204]	; (8008848 <DMA_Init+0x4e4>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d018      	beq.n	80087b0 <DMA_Init+0x44c>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a32      	ldr	r2, [pc, #200]	; (800884c <DMA_Init+0x4e8>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d013      	beq.n	80087b0 <DMA_Init+0x44c>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a30      	ldr	r2, [pc, #192]	; (8008850 <DMA_Init+0x4ec>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d00e      	beq.n	80087b0 <DMA_Init+0x44c>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a2f      	ldr	r2, [pc, #188]	; (8008854 <DMA_Init+0x4f0>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d009      	beq.n	80087b0 <DMA_Init+0x44c>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a2d      	ldr	r2, [pc, #180]	; (8008858 <DMA_Init+0x4f4>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d004      	beq.n	80087b0 <DMA_Init+0x44c>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a2c      	ldr	r2, [pc, #176]	; (800885c <DMA_Init+0x4f8>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d101      	bne.n	80087b4 <DMA_Init+0x450>
 80087b0:	2301      	movs	r3, #1
 80087b2:	e000      	b.n	80087b6 <DMA_Init+0x452>
 80087b4:	2300      	movs	r3, #0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d007      	beq.n	80087ca <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2200      	movs	r2, #0
 80087c0:	655a      	str	r2, [r3, #84]	; 0x54


    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2200      	movs	r2, #0
 80087c8:	659a      	str	r2, [r3, #88]	; 0x58
  }


  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2200      	movs	r2, #0
 80087d0:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80087d2:	bf00      	nop
 80087d4:	3714      	adds	r7, #20
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	40020050 	.word	0x40020050
 80087e4:	50020050 	.word	0x50020050
 80087e8:	400200d0 	.word	0x400200d0
 80087ec:	500200d0 	.word	0x500200d0
 80087f0:	40020150 	.word	0x40020150
 80087f4:	50020150 	.word	0x50020150
 80087f8:	400201d0 	.word	0x400201d0
 80087fc:	500201d0 	.word	0x500201d0
 8008800:	40020250 	.word	0x40020250
 8008804:	50020250 	.word	0x50020250
 8008808:	400202d0 	.word	0x400202d0
 800880c:	500202d0 	.word	0x500202d0
 8008810:	40020350 	.word	0x40020350
 8008814:	50020350 	.word	0x50020350
 8008818:	400203d0 	.word	0x400203d0
 800881c:	500203d0 	.word	0x500203d0
 8008820:	40020450 	.word	0x40020450
 8008824:	50020450 	.word	0x50020450
 8008828:	400204d0 	.word	0x400204d0
 800882c:	500204d0 	.word	0x500204d0
 8008830:	40020550 	.word	0x40020550
 8008834:	50020550 	.word	0x50020550
 8008838:	400205d0 	.word	0x400205d0
 800883c:	500205d0 	.word	0x500205d0
 8008840:	40020650 	.word	0x40020650
 8008844:	50020650 	.word	0x50020650
 8008848:	400206d0 	.word	0x400206d0
 800884c:	500206d0 	.word	0x500206d0
 8008850:	40020750 	.word	0x40020750
 8008854:	50020750 	.word	0x50020750
 8008858:	400207d0 	.word	0x400207d0
 800885c:	500207d0 	.word	0x500207d0
 8008860:	3cc03180 	.word	0x3cc03180

08008864 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e053      	b.n	800891e <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800887c:	b2db      	uxtb	r3, r3
 800887e:	2b00      	cmp	r3, #0
 8008880:	d106      	bne.n	8008890 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7f9 f8da 	bl	8001a44 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2202      	movs	r2, #2
 8008894:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80088a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	6851      	ldr	r1, [r2, #4]
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	69d2      	ldr	r2, [r2, #28]
 80088ae:	4311      	orrs	r1, r2
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	6812      	ldr	r2, [r2, #0]
 80088b4:	430b      	orrs	r3, r1
 80088b6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088be:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 80088c2:	f023 0301 	bic.w	r3, r3, #1
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	6891      	ldr	r1, [r2, #8]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	6992      	ldr	r2, [r2, #24]
 80088ce:	4311      	orrs	r1, r2
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	6812      	ldr	r2, [r2, #0]
 80088d4:	430b      	orrs	r3, r1
 80088d6:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088de:	0c1b      	lsrs	r3, r3, #16
 80088e0:	041b      	lsls	r3, r3, #16
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	68d1      	ldr	r1, [r2, #12]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	6812      	ldr	r2, [r2, #0]
 80088ea:	430b      	orrs	r3, r1
 80088ec:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	051a      	lsls	r2, r3, #20
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	055b      	lsls	r3, r3, #21
 8008904:	431a      	orrs	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b084      	sub	sp, #16
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b00      	cmp	r3, #0
 8008946:	d026      	beq.n	8008996 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800894e:	2b00      	cmp	r3, #0
 8008950:	d021      	beq.n	8008996 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008960:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008966:	f043 0201 	orr.w	r2, r3, #1
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2201      	movs	r2, #1
 8008974:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2204      	movs	r2, #4
 800897a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f003 0320 	and.w	r3, r3, #32
 800899c:	2b00      	cmp	r3, #0
 800899e:	d026      	beq.n	80089ee <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d021      	beq.n	80089ee <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089b8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2220      	movs	r2, #32
 80089c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c6:	f043 0202 	orr.w	r2, r3, #2
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2204      	movs	r2, #4
 80089d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d003      	beq.n	80089ee <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f003 0308 	and.w	r3, r3, #8
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d026      	beq.n	8008a46 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d021      	beq.n	8008a46 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a10:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2208      	movs	r2, #8
 8008a18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a1e:	f043 0204 	orr.w	r2, r3, #4
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2204      	movs	r2, #4
 8008a2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d003      	beq.n	8008a46 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f003 0304 	and.w	r3, r3, #4
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d013      	beq.n	8008a78 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00e      	beq.n	8008a78 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a68:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2204      	movs	r2, #4
 8008a70:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f853 	bl	8008b1e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f003 0302 	and.w	r3, r3, #2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d024      	beq.n	8008acc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d01f      	beq.n	8008acc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008a9a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferCpltCallback != NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a1b      	ldr	r3, [r3, #32]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d003      	beq.n	8008acc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f003 0310 	and.w	r3, r3, #16
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d01f      	beq.n	8008b16 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01a      	beq.n	8008b16 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008aee:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2210      	movs	r2, #16
 8008af6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f80e 	bl	8008b32 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8008b16:	bf00      	nop
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8008b26:	bf00      	nop
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b083      	sub	sp, #12
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8008b3a:	bf00      	nop
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b085      	sub	sp, #20
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	60f8      	str	r0, [r7, #12]
 8008b4e:	60b9      	str	r1, [r7, #8]
 8008b50:	607a      	str	r2, [r7, #4]
 8008b52:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	019a      	lsls	r2, r3, #6
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	431a      	orrs	r2, r3
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	021b      	lsls	r3, r3, #8
 8008b60:	431a      	orrs	r2, r3
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	041b      	lsls	r3, r3, #16
 8008b66:	431a      	orrs	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008b6c:	bf00      	nop
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b86:	f7fe ff39 	bl	80079fc <HAL_GetTick>
 8008b8a:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008b8c:	e008      	b.n	8008ba0 <DSI_ShortWrite+0x28>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008b8e:	f7fe ff35 	bl	80079fc <HAL_GetTick>
 8008b92:	4602      	mov	r2, r0
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	2b64      	cmp	r3, #100	; 0x64
 8008b9a:	d901      	bls.n	8008ba0 <DSI_ShortWrite+0x28>
    {
      return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e015      	b.n	8008bcc <DSI_ShortWrite+0x54>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d0ef      	beq.n	8008b8e <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	019a      	lsls	r2, r3, #6
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	431a      	orrs	r2, r3
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	021b      	lsls	r3, r3, #8
 8008bba:	ea42 0103 	orr.w	r1, r2, r3
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	041a      	lsls	r2, r3, #16
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8008bec:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	; 0xc04
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	00da      	lsls	r2, r3, #3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	220e      	movs	r2, #14
 8008c0e:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	; 0xc70
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f022 021f 	bic.w	r2, r2, #31
 8008c22:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	6912      	ldr	r2, [r2, #16]
 8008c2e:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	220e      	movs	r2, #14
 8008c38:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	; 0xd08
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f022 021f 	bic.w	r2, r2, #31
 8008c4c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	6912      	ldr	r2, [r2, #16]
 8008c58:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	220e      	movs	r2, #14
 8008c62:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	; 0xc5c
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008c76:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008c8a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d007      	beq.n	8008ca6 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d003      	beq.n	8008ca6 <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8008ca2:	2b05      	cmp	r3, #5
 8008ca4:	d10a      	bne.n	8008cbc <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8008cba:	e02c      	b.n	8008d16 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00b      	beq.n	8008cdc <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8008cc8:	2b03      	cmp	r3, #3
 8008cca:	d007      	beq.n	8008cdc <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8008cd0:	2b04      	cmp	r3, #4
 8008cd2:	d003      	beq.n	8008cdc <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8008cd8:	2b06      	cmp	r3, #6
 8008cda:	d10a      	bne.n	8008cf2 <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2210      	movs	r2, #16
 8008ce2:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2210      	movs	r2, #16
 8008cec:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8008cf0:	e011      	b.n	8008d16 <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	2b07      	cmp	r3, #7
 8008cf8:	d003      	beq.n	8008d02 <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8008cfe:	2b08      	cmp	r3, #8
 8008d00:	d109      	bne.n	8008d16 <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2220      	movs	r2, #32
 8008d08:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2220      	movs	r2, #32
 8008d12:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f022 020f 	bic.w	r2, r2, #15
 8008d26:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	; 0xcf8
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f022 020f 	bic.w	r2, r2, #15
 8008d3a:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	6952      	ldr	r2, [r2, #20]
 8008d46:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	6952      	ldr	r2, [r2, #20]
 8008d52:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

}
 8008d56:	bf00      	nop
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b083      	sub	sp, #12
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8008d7c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	075a      	lsls	r2, r3, #29
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	430a      	orrs	r2, r1
 8008d94:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8008da8:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	031a      	lsls	r2, r3, #12
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	021a      	lsls	r2, r3, #8
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	430a      	orrs	r2, r1
 8008dd8:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e0c3      	b.n	8008f84 <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	7e5b      	ldrb	r3, [r3, #25]
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d102      	bne.n	8008e0c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7f8 fe44 	bl	8001a94 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2203      	movs	r2, #3
 8008e10:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e22:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 8008e26:	2002      	movs	r0, #2
 8008e28:	f7fe fdf4 	bl	8007a14 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	4b54      	ldr	r3, [pc, #336]	; (8008f8c <HAL_DSI_Init+0x1a4>)
 8008e3a:	400b      	ands	r3, r1
 8008e3c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008e54:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008e5c:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	430a      	orrs	r2, r1
 8008e64:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f7ff feb3 	bl	8008bd4 <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f7ff ff76 	bl	8008d62 <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8008e76:	2300      	movs	r3, #0
 8008e78:	60bb      	str	r3, [r7, #8]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f042 0201 	orr.w	r2, r2, #1
 8008e8a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	60bb      	str	r3, [r7, #8]
 8008e9c:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8008e9e:	2001      	movs	r0, #1
 8008ea0:	f7fe fdb8 	bl	8007a14 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ea4:	f7fe fdaa 	bl	80079fc <HAL_GetTick>
 8008ea8:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008eaa:	e008      	b.n	8008ebe <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008eac:	f7fe fda6 	bl	80079fc <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b64      	cmp	r3, #100	; 0x64
 8008eb8:	d901      	bls.n	8008ebe <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e062      	b.n	8008f84 <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0ee      	beq.n	8008eac <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f042 0206 	orr.w	r2, r2, #6
 8008ede:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f022 0203 	bic.w	r2, r2, #3
 8008ef2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	431a      	orrs	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f042 0201 	orr.w	r2, r2, #1
 8008f0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f022 0203 	bic.w	r2, r2, #3
 8008f20:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68da      	ldr	r2, [r3, #12]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	430a      	orrs	r2, r1
 8008f36:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	689a      	ldr	r2, [r3, #8]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008f48:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6899      	ldr	r1, [r3, #8]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689a      	ldr	r2, [r3, #8]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	e0000003 	.word	0xe0000003

08008f90 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	7e1b      	ldrb	r3, [r3, #24]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d101      	bne.n	8008fa6 <HAL_DSI_ConfigErrorMonitor+0x16>
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	e0ba      	b.n	800911c <HAL_DSI_ConfigErrorMonitor+0x18c>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00b      	beq.n	8008fe8 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	6812      	ldr	r2, [r2, #0]
 8008fdc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8008fe0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8008fe4:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	f003 0302 	and.w	r3, r3, #2
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d009      	beq.n	8009006 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8009002:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	f003 0304 	and.w	r3, r3, #4
 800900c:	2b00      	cmp	r3, #0
 800900e:	d009      	beq.n	8009024 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f042 0201 	orr.w	r2, r2, #1
 8009020:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	f003 0308 	and.w	r3, r3, #8
 800902a:	2b00      	cmp	r3, #0
 800902c:	d009      	beq.n	8009042 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f042 0202 	orr.w	r2, r2, #2
 800903e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	f003 0310 	and.w	r3, r3, #16
 8009048:	2b00      	cmp	r3, #0
 800904a:	d009      	beq.n	8009060 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f042 020c 	orr.w	r2, r2, #12
 800905c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	f003 0320 	and.w	r3, r3, #32
 8009066:	2b00      	cmp	r3, #0
 8009068:	d009      	beq.n	800907e <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f042 0210 	orr.w	r2, r2, #16
 800907a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009084:	2b00      	cmp	r3, #0
 8009086:	d009      	beq.n	800909c <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f042 0220 	orr.w	r2, r2, #32
 8009098:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d009      	beq.n	80090ba <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090b6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d009      	beq.n	80090d8 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80090d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d009      	beq.n	80090f6 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80090f2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d009      	beq.n	8009114 <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009110:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	7e1b      	ldrb	r3, [r3, #24]
 8009136:	2b01      	cmp	r3, #1
 8009138:	d101      	bne.n	800913e <HAL_DSI_SetGenericVCID+0x16>
 800913a:	2302      	movs	r3, #2
 800913c:	e019      	b.n	8009172 <HAL_DSI_SetGenericVCID+0x4a>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 8009152:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6b19      	ldr	r1, [r3, #48]	; 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	431a      	orrs	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	430a      	orrs	r2, r1
 8009168:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800917e:	b480      	push	{r7}
 8009180:	b083      	sub	sp, #12
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	7e1b      	ldrb	r3, [r3, #24]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d101      	bne.n	8009194 <HAL_DSI_ConfigVideoMode+0x16>
 8009190:	2302      	movs	r3, #2
 8009192:	e1f6      	b.n	8009582 <HAL_DSI_ConfigVideoMode+0x404>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	761a      	strb	r2, [r3, #24]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 0201 	bic.w	r2, r2, #1
 80091a8:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f022 0201 	bic.w	r2, r2, #1
 80091ba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f022 0203 	bic.w	r2, r2, #3
 80091cc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	68da      	ldr	r2, [r3, #12]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	430a      	orrs	r2, r1
 80091de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	6812      	ldr	r2, [r2, #0]
 80091ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80091ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80091f2:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	691a      	ldr	r2, [r3, #16]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	430a      	orrs	r2, r1
 8009204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	6812      	ldr	r2, [r2, #0]
 8009210:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8009214:	f023 031f 	bic.w	r3, r3, #31
 8009218:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	695a      	ldr	r2, [r3, #20]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	6812      	ldr	r2, [r2, #0]
 8009236:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800923a:	f023 031f 	bic.w	r3, r3, #31
 800923e:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	699a      	ldr	r2, [r3, #24]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	430a      	orrs	r2, r1
 8009250:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68da      	ldr	r2, [r3, #12]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f022 0203 	bic.w	r2, r2, #3
 8009260:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68d9      	ldr	r1, [r3, #12]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	430a      	orrs	r2, r1
 8009272:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	695a      	ldr	r2, [r3, #20]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f022 0207 	bic.w	r2, r2, #7
 8009282:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6959      	ldr	r1, [r3, #20]
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	431a      	orrs	r2, r3
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	69db      	ldr	r3, [r3, #28]
 8009298:	431a      	orrs	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	430a      	orrs	r2, r1
 80092a0:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	691a      	ldr	r2, [r3, #16]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f022 020f 	bic.w	r2, r2, #15
 80092b0:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6919      	ldr	r1, [r3, #16]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	430a      	orrs	r2, r1
 80092c2:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f022 020e 	bic.w	r2, r2, #14
 80092d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	005a      	lsls	r2, r3, #1
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	2b03      	cmp	r3, #3
 80092f6:	d110      	bne.n	800931a <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	691a      	ldr	r2, [r3, #16]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009306:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6919      	ldr	r1, [r3, #16]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	689a      	ldr	r2, [r3, #8]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	430a      	orrs	r2, r1
 8009318:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	6812      	ldr	r2, [r2, #0]
 8009324:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009328:	f023 030f 	bic.w	r3, r3, #15
 800932c:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	6812      	ldr	r2, [r2, #0]
 800934a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800934e:	f023 030f 	bic.w	r3, r3, #15
 8009352:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	430a      	orrs	r2, r1
 8009364:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	6812      	ldr	r2, [r2, #0]
 8009370:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009374:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009378:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	430a      	orrs	r2, r1
 800938a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	6812      	ldr	r2, [r2, #0]
 8009396:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800939a:	f023 0303 	bic.w	r3, r3, #3
 800939e:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	6812      	ldr	r2, [r2, #0]
 80093bc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80093c0:	f023 0303 	bic.w	r3, r3, #3
 80093c4:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	430a      	orrs	r2, r1
 80093d6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	6812      	ldr	r2, [r2, #0]
 80093e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80093e6:	f023 0303 	bic.w	r3, r3, #3
 80093ea:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	6812      	ldr	r2, [r2, #0]
 8009408:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800940c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009410:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	430a      	orrs	r2, r1
 8009422:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009432:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	430a      	orrs	r2, r1
 8009444:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	699a      	ldr	r2, [r3, #24]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8009454:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6999      	ldr	r1, [r3, #24]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009460:	041a      	lsls	r2, r3, #16
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	699a      	ldr	r2, [r3, #24]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009478:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	6999      	ldr	r1, [r3, #24]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	430a      	orrs	r2, r1
 800948a:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800949a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80094bc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	430a      	orrs	r2, r1
 80094ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094de:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	430a      	orrs	r2, r1
 80094f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009500:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	430a      	orrs	r2, r1
 8009512:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009522:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	430a      	orrs	r2, r1
 8009534:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009544:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	430a      	orrs	r2, r1
 8009556:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009566:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	430a      	orrs	r2, r1
 8009578:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800958e:	b480      	push	{r7}
 8009590:	b083      	sub	sp, #12
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	7e1b      	ldrb	r3, [r3, #24]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d101      	bne.n	80095a4 <HAL_DSI_ConfigFlowControl+0x16>
 80095a0:	2302      	movs	r3, #2
 80095a2:	e016      	b.n	80095d2 <HAL_DSI_ConfigFlowControl+0x44>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80095b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	683a      	ldr	r2, [r7, #0]
 80095c6:	430a      	orrs	r2, r1
 80095c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80095de:	b480      	push	{r7}
 80095e0:	b085      	sub	sp, #20
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	7e1b      	ldrb	r3, [r3, #24]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d101      	bne.n	80095f4 <HAL_DSI_ConfigPhyTimer+0x16>
 80095f0:	2302      	movs	r3, #2
 80095f2:	e084      	b.n	80096fe <HAL_DSI_ConfigPhyTimer+0x120>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	695b      	ldr	r3, [r3, #20]
 8009602:	441a      	add	r2, r3
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	6859      	ldr	r1, [r3, #4]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	695a      	ldr	r2, [r3, #20]
 8009610:	4613      	mov	r3, r2
 8009612:	005b      	lsls	r3, r3, #1
 8009614:	4413      	add	r3, r2
 8009616:	18ca      	adds	r2, r1, r3
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	68da      	ldr	r2, [r3, #12]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	695b      	ldr	r3, [r3, #20]
 8009624:	005b      	lsls	r3, r3, #1
 8009626:	441a      	add	r2, r3
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	4293      	cmp	r3, r2
 8009636:	bf38      	it	cc
 8009638:	4613      	movcc	r3, r2
 800963a:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800964c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	041a      	lsls	r2, r3, #16
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	431a      	orrs	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	430a      	orrs	r2, r1
 8009666:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800967a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	041b      	lsls	r3, r3, #16
 8009690:	431a      	orrs	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	430a      	orrs	r2, r1
 8009698:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	6812      	ldr	r2, [r2, #0]
 80096a8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80096ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80096b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	691a      	ldr	r2, [r3, #16]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	430a      	orrs	r2, r1
 80096c6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80096da:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	021a      	lsls	r2, r3, #8
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	430a      	orrs	r2, r1
 80096f2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3714      	adds	r7, #20
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800970a:	b480      	push	{r7}
 800970c:	b083      	sub	sp, #12
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	7e1b      	ldrb	r3, [r3, #24]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d101      	bne.n	8009720 <HAL_DSI_ConfigHostTimeouts+0x16>
 800971c:	2302      	movs	r3, #2
 800971e:	e0b4      	b.n	800988a <HAL_DSI_ConfigHostTimeouts+0x180>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	689a      	ldr	r2, [r3, #8]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8009734:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6899      	ldr	r1, [r3, #8]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	021a      	lsls	r2, r3, #8
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	430a      	orrs	r2, r1
 8009748:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	b292      	uxth	r2, r2
 8009756:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	041a      	lsls	r2, r3, #16
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	430a      	orrs	r2, r1
 800976a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	6812      	ldr	r2, [r2, #0]
 8009776:	0c1b      	lsrs	r3, r3, #16
 8009778:	041b      	lsls	r3, r3, #16
 800977a:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	689a      	ldr	r2, [r3, #8]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	430a      	orrs	r2, r1
 800978c:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	6812      	ldr	r2, [r2, #0]
 8009798:	0c1b      	lsrs	r3, r3, #16
 800979a:	041b      	lsls	r3, r3, #16
 800979c:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	68da      	ldr	r2, [r3, #12]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	430a      	orrs	r2, r1
 80097ae:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	6812      	ldr	r2, [r2, #0]
 80097bc:	0c1b      	lsrs	r3, r3, #16
 80097be:	041b      	lsls	r3, r3, #16
 80097c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	691a      	ldr	r2, [r3, #16]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	430a      	orrs	r2, r1
 80097d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	6812      	ldr	r2, [r2, #0]
 80097e6:	0c1b      	lsrs	r3, r3, #16
 80097e8:	041b      	lsls	r3, r3, #16
 80097ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	695a      	ldr	r2, [r3, #20]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	430a      	orrs	r2, r1
 8009800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	699a      	ldr	r2, [r3, #24]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	430a      	orrs	r2, r1
 800982a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	6812      	ldr	r2, [r2, #0]
 800983a:	0c1b      	lsrs	r3, r3, #16
 800983c:	041b      	lsls	r3, r3, #16
 800983e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	69da      	ldr	r2, [r3, #28]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	430a      	orrs	r2, r1
 8009854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	6812      	ldr	r2, [r2, #0]
 8009864:	0c1b      	lsrs	r3, r3, #16
 8009866:	041b      	lsls	r3, r3, #16
 8009868:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	6a1a      	ldr	r2, [r3, #32]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	430a      	orrs	r2, r1
 800987e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8009896:	b480      	push	{r7}
 8009898:	b085      	sub	sp, #20
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	7e1b      	ldrb	r3, [r3, #24]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d101      	bne.n	80098aa <HAL_DSI_Start+0x14>
 80098a6:	2302      	movs	r3, #2
 80098a8:	e02b      	b.n	8009902 <HAL_DSI_Start+0x6c>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	761a      	strb	r2, [r3, #24]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80098b0:	2300      	movs	r3, #0
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685a      	ldr	r2, [r3, #4]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f042 0201 	orr.w	r2, r2, #1
 80098c2:	605a      	str	r2, [r3, #4]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	f003 0301 	and.w	r3, r3, #1
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80098d2:	2300      	movs	r3, #0
 80098d4:	60bb      	str	r3, [r7, #8]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f042 0208 	orr.w	r2, r2, #8
 80098e6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098f2:	f003 0308 	and.w	r3, r3, #8
 80098f6:	60bb      	str	r3, [r7, #8]
 80098f8:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr

0800990e <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b088      	sub	sp, #32
 8009912:	af02      	add	r7, sp, #8
 8009914:	60f8      	str	r0, [r7, #12]
 8009916:	60b9      	str	r1, [r7, #8]
 8009918:	607a      	str	r2, [r7, #4]
 800991a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	7e1b      	ldrb	r3, [r3, #24]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d101      	bne.n	8009928 <HAL_DSI_ShortWrite+0x1a>
 8009924:	2302      	movs	r3, #2
 8009926:	e010      	b.n	800994a <HAL_DSI_ShortWrite+0x3c>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2201      	movs	r2, #1
 800992c:	761a      	strb	r2, [r3, #24]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800992e:	6a3b      	ldr	r3, [r7, #32]
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	68b9      	ldr	r1, [r7, #8]
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f7ff f91d 	bl	8008b78 <DSI_ShortWrite>
 800993e:	4603      	mov	r3, r0
 8009940:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	761a      	strb	r2, [r3, #24]

  return status;
 8009948:	7dfb      	ldrb	r3, [r7, #23]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3718      	adds	r7, #24
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b08c      	sub	sp, #48	; 0x30
 8009956:	af02      	add	r7, sp, #8
 8009958:	60f8      	str	r0, [r7, #12]
 800995a:	60b9      	str	r1, [r7, #8]
 800995c:	607a      	str	r2, [r7, #4]
 800995e:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8009960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009962:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	7e1b      	ldrb	r3, [r3, #24]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d101      	bne.n	8009970 <HAL_DSI_LongWrite+0x1e>
 800996c:	2302      	movs	r3, #2
 800996e:	e083      	b.n	8009a78 <HAL_DSI_LongWrite+0x126>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2201      	movs	r2, #1
 8009974:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8009976:	f7fe f841 	bl	80079fc <HAL_GetTick>
 800997a:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800997c:	e00b      	b.n	8009996 <HAL_DSI_LongWrite+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800997e:	f7fe f83d 	bl	80079fc <HAL_GetTick>
 8009982:	4602      	mov	r2, r0
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	2b64      	cmp	r3, #100	; 0x64
 800998a:	d904      	bls.n	8009996 <HAL_DSI_LongWrite+0x44>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 8009992:	2303      	movs	r3, #3
 8009994:	e070      	b.n	8009a78 <HAL_DSI_LongWrite+0x126>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0ec      	beq.n	800997e <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80099a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a6:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	bf28      	it	cs
 80099ae:	2303      	movcs	r3, #3
 80099b0:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80099b2:	2300      	movs	r3, #0
 80099b4:	623b      	str	r3, [r7, #32]
 80099b6:	e00f      	b.n	80099d8 <HAL_DSI_LongWrite+0x86>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80099b8:	69ba      	ldr	r2, [r7, #24]
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	4413      	add	r3, r2
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	461a      	mov	r2, r3
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	3301      	adds	r3, #1
 80099c6:	00db      	lsls	r3, r3, #3
 80099c8:	fa02 f303 	lsl.w	r3, r2, r3
 80099cc:	69fa      	ldr	r2, [r7, #28]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	3301      	adds	r3, #1
 80099d6:	623b      	str	r3, [r7, #32]
 80099d8:	6a3a      	ldr	r2, [r7, #32]
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d3eb      	bcc.n	80099b8 <HAL_DSI_LongWrite+0x66>
  }
  hdsi->Instance->GPDR = fifoword;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	69fa      	ldr	r2, [r7, #28]
 80099e6:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80099f0:	69ba      	ldr	r2, [r7, #24]
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	4413      	add	r3, r2
 80099f6:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80099f8:	e028      	b.n	8009a4c <HAL_DSI_LongWrite+0xfa>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80099fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fc:	2b04      	cmp	r3, #4
 80099fe:	bf28      	it	cs
 8009a00:	2304      	movcs	r3, #4
 8009a02:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8009a08:	2300      	movs	r3, #0
 8009a0a:	623b      	str	r3, [r7, #32]
 8009a0c:	e00e      	b.n	8009a2c <HAL_DSI_LongWrite+0xda>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009a0e:	69ba      	ldr	r2, [r7, #24]
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	4413      	add	r3, r2
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	6a3b      	ldr	r3, [r7, #32]
 8009a1a:	00db      	lsls	r3, r3, #3
 8009a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a20:	69fa      	ldr	r2, [r7, #28]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8009a26:	6a3b      	ldr	r3, [r7, #32]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	623b      	str	r3, [r7, #32]
 8009a2c:	6a3a      	ldr	r2, [r7, #32]
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d3ec      	bcc.n	8009a0e <HAL_DSI_LongWrite+0xbc>
    }
    hdsi->Instance->GPDR = fifoword;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	69fa      	ldr	r2, [r7, #28]
 8009a3a:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8009a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8009a44:	69ba      	ldr	r2, [r7, #24]
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	4413      	add	r3, r2
 8009a4a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1d3      	bne.n	80099fa <HAL_DSI_LongWrite+0xa8>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8009a5a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	9300      	str	r3, [sp, #0]
 8009a66:	4613      	mov	r3, r2
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	68b9      	ldr	r1, [r7, #8]
 8009a6c:	f7ff f86b 	bl	8008b46 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3728      	adds	r7, #40	; 0x28
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <HAL_DSI_EnterULPM>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_EnterULPM(DSI_HandleTypeDef *hdsi)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	7e1b      	ldrb	r3, [r3, #24]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d101      	bne.n	8009a94 <HAL_DSI_EnterULPM+0x14>
 8009a90:	2302      	movs	r3, #2
 8009a92:	e106      	b.n	8009ca2 <HAL_DSI_EnterULPM+0x222>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	761a      	strb	r2, [r3, #24]

  /* Verify the initial status of the DSI Host */

  /* Verify that the clock lane and the digital section of the D-PHY are enabled */
  if ((hdsi->Instance->PCTLR & (DSI_PCTLR_CKE | DSI_PCTLR_DEN)) != (DSI_PCTLR_CKE | DSI_PCTLR_DEN))
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009aa2:	f003 0306 	and.w	r3, r3, #6
 8009aa6:	2b06      	cmp	r3, #6
 8009aa8:	d004      	beq.n	8009ab4 <HAL_DSI_EnterULPM+0x34>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e0f6      	b.n	8009ca2 <HAL_DSI_EnterULPM+0x222>
  }

  /* Verify that the D-PHY PLL and the reference bias are enabled */
  if ((hdsi->Instance->WRPCR & DSI_WRPCR_PLLEN) != DSI_WRPCR_PLLEN)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d004      	beq.n	8009ace <HAL_DSI_EnterULPM+0x4e>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e0e9      	b.n	8009ca2 <HAL_DSI_EnterULPM+0x222>
  }
  else if ((hdsi->Instance->BCFGR  & DSI_BCFGR_PWRUP) != DSI_BCFGR_PWRUP)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8009ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ada:	2b40      	cmp	r3, #64	; 0x40
 8009adc:	d004      	beq.n	8009ae8 <HAL_DSI_EnterULPM+0x68>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e0dc      	b.n	8009ca2 <HAL_DSI_EnterULPM+0x222>
  {
    /* Nothing to do */
  }

  /* Verify that there are no ULPS exit or request on both data and clock lanes */
  if ((hdsi->Instance->PUCR & (DSI_PUCR_UEDL | DSI_PUCR_URDL | DSI_PUCR_UECL | DSI_PUCR_URCL)) != 0U)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009af0:	f003 030f 	and.w	r3, r3, #15
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d004      	beq.n	8009b02 <HAL_DSI_EnterULPM+0x82>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e0cf      	b.n	8009ca2 <HAL_DSI_EnterULPM+0x222>
  }

  /* Verify that there are no Transmission trigger */
  if ((hdsi->Instance->PTTCR & DSI_PTTCR_TX_TRIG) != 0U)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b0a:	f003 030f 	and.w	r3, r3, #15
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d004      	beq.n	8009b1c <HAL_DSI_EnterULPM+0x9c>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e0c2      	b.n	8009ca2 <HAL_DSI_EnterULPM+0x222>
  }

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8009b1c:	2001      	movs	r0, #1
 8009b1e:	f7fd ff79 	bl	8007a14 <HAL_Delay>

  /* Verify that D-PHY PLL is locked */
  tickstart = HAL_GetTick();
 8009b22:	f7fd ff6b 	bl	80079fc <HAL_GetTick>
 8009b26:	60f8      	str	r0, [r7, #12]

  while ((__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U))
 8009b28:	e00b      	b.n	8009b42 <HAL_DSI_EnterULPM+0xc2>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009b2a:	f7fd ff67 	bl	80079fc <HAL_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	2b64      	cmp	r3, #100	; 0x64
 8009b36:	d904      	bls.n	8009b42 <HAL_DSI_EnterULPM+0xc2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e0af      	b.n	8009ca2 <HAL_DSI_EnterULPM+0x222>
  while ((__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U))
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d0eb      	beq.n	8009b2a <HAL_DSI_EnterULPM+0xaa>
    }
  }

  /* Verify that all active lanes are in Stop state */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b5a:	f003 0303 	and.w	r3, r3, #3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10c      	bne.n	8009b7c <HAL_DSI_EnterULPM+0xfc>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0))
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009b6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b6e:	2b30      	cmp	r3, #48	; 0x30
 8009b70:	d01f      	beq.n	8009bb2 <HAL_DSI_EnterULPM+0x132>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e092      	b.n	8009ca2 <HAL_DSI_EnterULPM+0x222>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b84:	f003 0303 	and.w	r3, r3, #3
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d10d      	bne.n	8009ba8 <HAL_DSI_EnterULPM+0x128>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | \
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009b94:	f403 73d8 	and.w	r3, r3, #432	; 0x1b0
 8009b98:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8009b9c:	d009      	beq.n	8009bb2 <HAL_DSI_EnterULPM+0x132>
                                DSI_PSR_UAN1)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_UAN1))
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e07c      	b.n	8009ca2 <HAL_DSI_EnterULPM+0x222>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e077      	b.n	8009ca2 <HAL_DSI_EnterULPM+0x222>
  }

  /* Clock lane configuration: no more HS request */
  hdsi->Instance->CLCR &= ~DSI_CLCR_DPCC;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f022 0201 	bic.w	r2, r2, #1
 8009bc2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Use system PLL as byte lane clock source before stopping DSIPHY clock source */
  __HAL_RCC_DSI_CONFIG(RCC_DSICLKSOURCE_PLL3);
 8009bc6:	4b39      	ldr	r3, [pc, #228]	; (8009cac <HAL_DSI_EnterULPM+0x22c>)
 8009bc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009bcc:	4a37      	ldr	r2, [pc, #220]	; (8009cac <HAL_DSI_EnterULPM+0x22c>)
 8009bce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009bd2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4

  /* ULPS Request on Clock and Data Lanes */
  hdsi->Instance->PUCR |= (DSI_PUCR_URCL | DSI_PUCR_URDL);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f042 0205 	orr.w	r2, r2, #5
 8009be6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Get tick */
  tickstart = HAL_GetTick();
 8009bea:	f7fd ff07 	bl	80079fc <HAL_GetTick>
 8009bee:	60f8      	str	r0, [r7, #12]

  /* Wait until all active lanes enter ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009bf8:	f003 0303 	and.w	r3, r3, #3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d115      	bne.n	8009c2c <HAL_DSI_EnterULPM+0x1ac>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != 0U)
 8009c00:	e00b      	b.n	8009c1a <HAL_DSI_EnterULPM+0x19a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009c02:	f7fd fefb 	bl	80079fc <HAL_GetTick>
 8009c06:	4602      	mov	r2, r0
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	1ad3      	subs	r3, r2, r3
 8009c0c:	2b64      	cmp	r3, #100	; 0x64
 8009c0e:	d904      	bls.n	8009c1a <HAL_DSI_EnterULPM+0x19a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009c16:	2303      	movs	r3, #3
 8009c18:	e043      	b.n	8009ca2 <HAL_DSI_EnterULPM+0x222>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != 0U)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c22:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1eb      	bne.n	8009c02 <HAL_DSI_EnterULPM+0x182>
 8009c2a:	e022      	b.n	8009c72 <HAL_DSI_EnterULPM+0x1f2>
      }
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009c34:	f003 0303 	and.w	r3, r3, #3
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d115      	bne.n	8009c68 <HAL_DSI_EnterULPM+0x1e8>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != 0U)
 8009c3c:	e00b      	b.n	8009c56 <HAL_DSI_EnterULPM+0x1d6>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009c3e:	f7fd fedd 	bl	80079fc <HAL_GetTick>
 8009c42:	4602      	mov	r2, r0
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	2b64      	cmp	r3, #100	; 0x64
 8009c4a:	d904      	bls.n	8009c56 <HAL_DSI_EnterULPM+0x1d6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e025      	b.n	8009ca2 <HAL_DSI_EnterULPM+0x222>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != 0U)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009c5e:	f403 7394 	and.w	r3, r3, #296	; 0x128
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1eb      	bne.n	8009c3e <HAL_DSI_EnterULPM+0x1be>
 8009c66:	e004      	b.n	8009c72 <HAL_DSI_EnterULPM+0x1f2>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e017      	b.n	8009ca2 <HAL_DSI_EnterULPM+0x222>
  }

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8009c72:	2300      	movs	r3, #0
 8009c74:	60bb      	str	r3, [r7, #8]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f022 0201 	bic.w	r2, r2, #1
 8009c86:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	60bb      	str	r3, [r7, #8]
 8009c98:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	46020c00 	.word	0x46020c00

08009cb0 <HAL_DSI_ExitULPM>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ExitULPM(DSI_HandleTypeDef *hdsi)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	7e1b      	ldrb	r3, [r3, #24]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d101      	bne.n	8009cc4 <HAL_DSI_ExitULPM+0x14>
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	e125      	b.n	8009f10 <HAL_DSI_ExitULPM+0x260>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	761a      	strb	r2, [r3, #24]

  /* Verify that all active lanes are in ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009cd2:	f003 0303 	and.w	r3, r3, #3
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10c      	bne.n	8009cf4 <HAL_DSI_ExitULPM+0x44>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_RUE0 | DSI_PSR_UAN0 | DSI_PSR_PSS0 | \
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ce2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d01e      	beq.n	8009d28 <HAL_DSI_ExitULPM+0x78>
                                DSI_PSR_UANC | DSI_PSR_PSSC | DSI_PSR_PD)) != 0U)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	761a      	strb	r2, [r3, #24]

      return HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e10d      	b.n	8009f10 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009cfc:	f003 0303 	and.w	r3, r3, #3
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d10c      	bne.n	8009d1e <HAL_DSI_ExitULPM+0x6e>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_RUE0 | DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_UAN1 | \
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d0c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d009      	beq.n	8009d28 <HAL_DSI_ExitULPM+0x78>
                                DSI_PSR_PSS1 | DSI_PSR_UANC | DSI_PSR_PSSC | DSI_PSR_PD)) != 0U)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	761a      	strb	r2, [r3, #24]

      return HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e0f8      	b.n	8009f10 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e0f3      	b.n	8009f10 <HAL_DSI_ExitULPM+0x260>
  }

  /* Turn on the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8009d28:	2300      	movs	r3, #0
 8009d2a:	60bb      	str	r3, [r7, #8]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f042 0201 	orr.w	r2, r2, #1
 8009d3c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	60bb      	str	r3, [r7, #8]
 8009d4e:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8009d50:	2001      	movs	r0, #1
 8009d52:	f7fd fe5f 	bl	8007a14 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8009d56:	f7fd fe51 	bl	80079fc <HAL_GetTick>
 8009d5a:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8009d5c:	e00b      	b.n	8009d76 <HAL_DSI_ExitULPM+0xc6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009d5e:	f7fd fe4d 	bl	80079fc <HAL_GetTick>
 8009d62:	4602      	mov	r2, r0
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	2b64      	cmp	r3, #100	; 0x64
 8009d6a:	d904      	bls.n	8009d76 <HAL_DSI_ExitULPM+0xc6>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 8009d72:	2303      	movs	r3, #3
 8009d74:	e0cc      	b.n	8009f10 <HAL_DSI_ExitULPM+0x260>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d0eb      	beq.n	8009d5e <HAL_DSI_ExitULPM+0xae>
    }
  }

  /* Exit ULPS on Clock and Data Lanes */
  hdsi->Instance->PUCR |= (DSI_PUCR_UECL | DSI_PUCR_UEDL);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f042 020a 	orr.w	r2, r2, #10
 8009d96:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Get tick */
  tickstart = HAL_GetTick();
 8009d9a:	f7fd fe2f 	bl	80079fc <HAL_GetTick>
 8009d9e:	60f8      	str	r0, [r7, #12]

  /* Wait until all active lanes exit ULPM */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009da8:	f003 0303 	and.w	r3, r3, #3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d115      	bne.n	8009ddc <HAL_DSI_ExitULPM+0x12c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UANC))
 8009db0:	e00b      	b.n	8009dca <HAL_DSI_ExitULPM+0x11a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009db2:	f7fd fe23 	bl	80079fc <HAL_GetTick>
 8009db6:	4602      	mov	r2, r0
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	2b64      	cmp	r3, #100	; 0x64
 8009dbe:	d904      	bls.n	8009dca <HAL_DSI_ExitULPM+0x11a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e0a2      	b.n	8009f10 <HAL_DSI_ExitULPM+0x260>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UANC))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009dd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009dd6:	2b28      	cmp	r3, #40	; 0x28
 8009dd8:	d1eb      	bne.n	8009db2 <HAL_DSI_ExitULPM+0x102>
 8009dda:	e023      	b.n	8009e24 <HAL_DSI_ExitULPM+0x174>
      }
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009de4:	f003 0303 	and.w	r3, r3, #3
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d116      	bne.n	8009e1a <HAL_DSI_ExitULPM+0x16a>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UAN1 |
 8009dec:	e00b      	b.n	8009e06 <HAL_DSI_ExitULPM+0x156>
                                                                                    DSI_PSR_UANC))
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009dee:	f7fd fe05 	bl	80079fc <HAL_GetTick>
 8009df2:	4602      	mov	r2, r0
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	1ad3      	subs	r3, r2, r3
 8009df8:	2b64      	cmp	r3, #100	; 0x64
 8009dfa:	d904      	bls.n	8009e06 <HAL_DSI_ExitULPM+0x156>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e084      	b.n	8009f10 <HAL_DSI_ExitULPM+0x260>
    while ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC)) != (DSI_PSR_UAN0 | DSI_PSR_UAN1 |
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e0e:	f403 7394 	and.w	r3, r3, #296	; 0x128
 8009e12:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8009e16:	d1ea      	bne.n	8009dee <HAL_DSI_ExitULPM+0x13e>
 8009e18:	e004      	b.n	8009e24 <HAL_DSI_ExitULPM+0x174>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	761a      	strb	r2, [r3, #24]

    return HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e075      	b.n	8009f10 <HAL_DSI_ExitULPM+0x260>
  }

  /* wait for 1 ms */
  HAL_Delay(1U);
 8009e24:	2001      	movs	r0, #1
 8009e26:	f7fd fdf5 	bl	8007a14 <HAL_Delay>

  /* De-assert the ULPM requests and the ULPM exit bits */
  hdsi->Instance->PUCR = 0U;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Switch the lane byte clock source in the RCC from system PLL to D-PHY */
  __HAL_RCC_DSI_CONFIG(RCC_DSICLKSOURCE_DSIPHY);
 8009e34:	4b38      	ldr	r3, [pc, #224]	; (8009f18 <HAL_DSI_ExitULPM+0x268>)
 8009e36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009e3a:	4a37      	ldr	r2, [pc, #220]	; (8009f18 <HAL_DSI_ExitULPM+0x268>)
 8009e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e40:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4

  /* Restore clock lane configuration to HS */
  hdsi->Instance->CLCR |= DSI_CLCR_DPCC;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f042 0201 	orr.w	r2, r2, #1
 8009e54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Verify that D-PHY PLL is enabled */
  if ((hdsi->Instance->WRPCR & DSI_WRPCR_PLLEN) != DSI_WRPCR_PLLEN)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8009e60:	f003 0301 	and.w	r3, r3, #1
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d004      	beq.n	8009e72 <HAL_DSI_ExitULPM+0x1c2>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e04e      	b.n	8009f10 <HAL_DSI_ExitULPM+0x260>
  }

  /* Verify that all active lanes are in Stop state */
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e7a:	f003 0303 	and.w	r3, r3, #3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10c      	bne.n	8009e9c <HAL_DSI_ExitULPM+0x1ec>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0))
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e8e:	2b30      	cmp	r3, #48	; 0x30
 8009e90:	d01f      	beq.n	8009ed2 <HAL_DSI_ExitULPM+0x222>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e039      	b.n	8009f10 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_TWO_DATA_LANES)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009ea4:	f003 0303 	and.w	r3, r3, #3
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d10d      	bne.n	8009ec8 <HAL_DSI_ExitULPM+0x218>
  {
    if ((hdsi->Instance->PSR & (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | \
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009eb4:	f403 73d8 	and.w	r3, r3, #432	; 0x1b0
 8009eb8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8009ebc:	d009      	beq.n	8009ed2 <HAL_DSI_ExitULPM+0x222>
                                DSI_PSR_UAN1)) != (DSI_PSR_UAN0 | DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_UAN1))
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	761a      	strb	r2, [r3, #24]
      return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e023      	b.n	8009f10 <HAL_DSI_ExitULPM+0x260>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdsi);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	761a      	strb	r2, [r3, #24]
    return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e01e      	b.n	8009f10 <HAL_DSI_ExitULPM+0x260>
  }

  /* Verify that D-PHY PLL is locked */
  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8009ed2:	2001      	movs	r0, #1
 8009ed4:	f7fd fd9e 	bl	8007a14 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ed8:	f7fd fd90 	bl	80079fc <HAL_GetTick>
 8009edc:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8009ede:	e00b      	b.n	8009ef8 <HAL_DSI_ExitULPM+0x248>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009ee0:	f7fd fd8c 	bl	80079fc <HAL_GetTick>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	2b64      	cmp	r3, #100	; 0x64
 8009eec:	d904      	bls.n	8009ef8 <HAL_DSI_ExitULPM+0x248>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e00b      	b.n	8009f10 <HAL_DSI_ExitULPM+0x260>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d0eb      	beq.n	8009ee0 <HAL_DSI_ExitULPM+0x230>
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	46020c00 	.word	0x46020c00

08009f1c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b089      	sub	sp, #36	; 0x24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8009f26:	2300      	movs	r3, #0
 8009f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8009f2e:	e1ba      	b.n	800a2a6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	2101      	movs	r1, #1
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	fa01 f303 	lsl.w	r3, r1, r3
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f000 81aa 	beq.w	800a2a0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a55      	ldr	r2, [pc, #340]	; (800a0a4 <HAL_GPIO_Init+0x188>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d15d      	bne.n	800a010 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f62:	43db      	mvns	r3, r3
 8009f64:	69fa      	ldr	r2, [r7, #28]
 8009f66:	4013      	ands	r3, r2
 8009f68:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	f003 0201 	and.w	r2, r3, #1
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	fa02 f303 	lsl.w	r3, r2, r3
 8009f78:	69fa      	ldr	r2, [r7, #28]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	69fa      	ldr	r2, [r7, #28]
 8009f82:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8009f84:	4a48      	ldr	r2, [pc, #288]	; (800a0a8 <HAL_GPIO_Init+0x18c>)
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009f8c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8009f8e:	4a46      	ldr	r2, [pc, #280]	; (800a0a8 <HAL_GPIO_Init+0x18c>)
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	00db      	lsls	r3, r3, #3
 8009f94:	4413      	add	r3, r2
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	08da      	lsrs	r2, r3, #3
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	3208      	adds	r2, #8
 8009fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	f003 0307 	and.w	r3, r3, #7
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	220f      	movs	r2, #15
 8009fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb6:	43db      	mvns	r3, r3
 8009fb8:	69fa      	ldr	r2, [r7, #28]
 8009fba:	4013      	ands	r3, r2
 8009fbc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	f003 0307 	and.w	r3, r3, #7
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	220b      	movs	r2, #11
 8009fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fcc:	69fa      	ldr	r2, [r7, #28]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	08da      	lsrs	r2, r3, #3
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	3208      	adds	r2, #8
 8009fda:	69f9      	ldr	r1, [r7, #28]
 8009fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	005b      	lsls	r3, r3, #1
 8009fea:	2203      	movs	r2, #3
 8009fec:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff0:	43db      	mvns	r3, r3
 8009ff2:	69fa      	ldr	r2, [r7, #28]
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	005b      	lsls	r3, r3, #1
 8009ffc:	2202      	movs	r2, #2
 8009ffe:	fa02 f303 	lsl.w	r3, r2, r3
 800a002:	69fa      	ldr	r2, [r7, #28]
 800a004:	4313      	orrs	r3, r2
 800a006:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	69fa      	ldr	r2, [r7, #28]
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	e067      	b.n	800a0e0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	2b02      	cmp	r3, #2
 800a016:	d003      	beq.n	800a020 <HAL_GPIO_Init+0x104>
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	2b12      	cmp	r3, #18
 800a01e:	d145      	bne.n	800a0ac <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	08da      	lsrs	r2, r3, #3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	3208      	adds	r2, #8
 800a028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a02c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	f003 0307 	and.w	r3, r3, #7
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	220f      	movs	r2, #15
 800a038:	fa02 f303 	lsl.w	r3, r2, r3
 800a03c:	43db      	mvns	r3, r3
 800a03e:	69fa      	ldr	r2, [r7, #28]
 800a040:	4013      	ands	r3, r2
 800a042:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	f003 020f 	and.w	r2, r3, #15
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	f003 0307 	and.w	r3, r3, #7
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	fa02 f303 	lsl.w	r3, r2, r3
 800a058:	69fa      	ldr	r2, [r7, #28]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	08da      	lsrs	r2, r3, #3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	3208      	adds	r2, #8
 800a066:	69f9      	ldr	r1, [r7, #28]
 800a068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	005b      	lsls	r3, r3, #1
 800a076:	2203      	movs	r2, #3
 800a078:	fa02 f303 	lsl.w	r3, r2, r3
 800a07c:	43db      	mvns	r3, r3
 800a07e:	69fa      	ldr	r2, [r7, #28]
 800a080:	4013      	ands	r3, r2
 800a082:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	f003 0203 	and.w	r2, r3, #3
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	005b      	lsls	r3, r3, #1
 800a090:	fa02 f303 	lsl.w	r3, r2, r3
 800a094:	69fa      	ldr	r2, [r7, #28]
 800a096:	4313      	orrs	r3, r2
 800a098:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	69fa      	ldr	r2, [r7, #28]
 800a09e:	601a      	str	r2, [r3, #0]
 800a0a0:	e01e      	b.n	800a0e0 <HAL_GPIO_Init+0x1c4>
 800a0a2:	bf00      	nop
 800a0a4:	46020000 	.word	0x46020000
 800a0a8:	0802b9e8 	.word	0x0802b9e8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	005b      	lsls	r3, r3, #1
 800a0b6:	2203      	movs	r2, #3
 800a0b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0bc:	43db      	mvns	r3, r3
 800a0be:	69fa      	ldr	r2, [r7, #28]
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	f003 0203 	and.w	r2, r3, #3
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	005b      	lsls	r3, r3, #1
 800a0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d4:	69fa      	ldr	r2, [r7, #28]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	69fa      	ldr	r2, [r7, #28]
 800a0de:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d00b      	beq.n	800a100 <HAL_GPIO_Init+0x1e4>
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d007      	beq.n	800a100 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a0f4:	2b11      	cmp	r3, #17
 800a0f6:	d003      	beq.n	800a100 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	2b12      	cmp	r3, #18
 800a0fe:	d130      	bne.n	800a162 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	2203      	movs	r2, #3
 800a10c:	fa02 f303 	lsl.w	r3, r2, r3
 800a110:	43db      	mvns	r3, r3
 800a112:	69fa      	ldr	r2, [r7, #28]
 800a114:	4013      	ands	r3, r2
 800a116:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	68da      	ldr	r2, [r3, #12]
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	005b      	lsls	r3, r3, #1
 800a120:	fa02 f303 	lsl.w	r3, r2, r3
 800a124:	69fa      	ldr	r2, [r7, #28]
 800a126:	4313      	orrs	r3, r2
 800a128:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	69fa      	ldr	r2, [r7, #28]
 800a12e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800a136:	2201      	movs	r2, #1
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	fa02 f303 	lsl.w	r3, r2, r3
 800a13e:	43db      	mvns	r3, r3
 800a140:	69fa      	ldr	r2, [r7, #28]
 800a142:	4013      	ands	r3, r2
 800a144:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	091b      	lsrs	r3, r3, #4
 800a14c:	f003 0201 	and.w	r2, r3, #1
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	fa02 f303 	lsl.w	r3, r2, r3
 800a156:	69fa      	ldr	r2, [r7, #28]
 800a158:	4313      	orrs	r3, r2
 800a15a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	69fa      	ldr	r2, [r7, #28]
 800a160:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	2b03      	cmp	r3, #3
 800a168:	d017      	beq.n	800a19a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	2203      	movs	r2, #3
 800a176:	fa02 f303 	lsl.w	r3, r2, r3
 800a17a:	43db      	mvns	r3, r3
 800a17c:	69fa      	ldr	r2, [r7, #28]
 800a17e:	4013      	ands	r3, r2
 800a180:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	689a      	ldr	r2, [r3, #8]
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	005b      	lsls	r3, r3, #1
 800a18a:	fa02 f303 	lsl.w	r3, r2, r3
 800a18e:	69fa      	ldr	r2, [r7, #28]
 800a190:	4313      	orrs	r3, r2
 800a192:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	69fa      	ldr	r2, [r7, #28]
 800a198:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d07c      	beq.n	800a2a0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800a1a6:	4a47      	ldr	r2, [pc, #284]	; (800a2c4 <HAL_GPIO_Init+0x3a8>)
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	089b      	lsrs	r3, r3, #2
 800a1ac:	3318      	adds	r3, #24
 800a1ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1b2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	f003 0303 	and.w	r3, r3, #3
 800a1ba:	00db      	lsls	r3, r3, #3
 800a1bc:	220f      	movs	r2, #15
 800a1be:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c2:	43db      	mvns	r3, r3
 800a1c4:	69fa      	ldr	r2, [r7, #28]
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	0a9a      	lsrs	r2, r3, #10
 800a1ce:	4b3e      	ldr	r3, [pc, #248]	; (800a2c8 <HAL_GPIO_Init+0x3ac>)
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	697a      	ldr	r2, [r7, #20]
 800a1d4:	f002 0203 	and.w	r2, r2, #3
 800a1d8:	00d2      	lsls	r2, r2, #3
 800a1da:	4093      	lsls	r3, r2
 800a1dc:	69fa      	ldr	r2, [r7, #28]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800a1e2:	4938      	ldr	r1, [pc, #224]	; (800a2c4 <HAL_GPIO_Init+0x3a8>)
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	089b      	lsrs	r3, r3, #2
 800a1e8:	3318      	adds	r3, #24
 800a1ea:	69fa      	ldr	r2, [r7, #28]
 800a1ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800a1f0:	4b34      	ldr	r3, [pc, #208]	; (800a2c4 <HAL_GPIO_Init+0x3a8>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	43db      	mvns	r3, r3
 800a1fa:	69fa      	ldr	r2, [r7, #28]
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d003      	beq.n	800a214 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800a20c:	69fa      	ldr	r2, [r7, #28]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	4313      	orrs	r3, r2
 800a212:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800a214:	4a2b      	ldr	r2, [pc, #172]	; (800a2c4 <HAL_GPIO_Init+0x3a8>)
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800a21a:	4b2a      	ldr	r3, [pc, #168]	; (800a2c4 <HAL_GPIO_Init+0x3a8>)
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	43db      	mvns	r3, r3
 800a224:	69fa      	ldr	r2, [r7, #28]
 800a226:	4013      	ands	r3, r2
 800a228:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a232:	2b00      	cmp	r3, #0
 800a234:	d003      	beq.n	800a23e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800a236:	69fa      	ldr	r2, [r7, #28]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800a23e:	4a21      	ldr	r2, [pc, #132]	; (800a2c4 <HAL_GPIO_Init+0x3a8>)
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800a244:	4b1f      	ldr	r3, [pc, #124]	; (800a2c4 <HAL_GPIO_Init+0x3a8>)
 800a246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a24a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	43db      	mvns	r3, r3
 800a250:	69fa      	ldr	r2, [r7, #28]
 800a252:	4013      	ands	r3, r2
 800a254:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800a262:	69fa      	ldr	r2, [r7, #28]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	4313      	orrs	r3, r2
 800a268:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800a26a:	4a16      	ldr	r2, [pc, #88]	; (800a2c4 <HAL_GPIO_Init+0x3a8>)
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800a272:	4b14      	ldr	r3, [pc, #80]	; (800a2c4 <HAL_GPIO_Init+0x3a8>)
 800a274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a278:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	43db      	mvns	r3, r3
 800a27e:	69fa      	ldr	r2, [r7, #28]
 800a280:	4013      	ands	r3, r2
 800a282:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d003      	beq.n	800a298 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800a290:	69fa      	ldr	r2, [r7, #28]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	4313      	orrs	r3, r2
 800a296:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800a298:	4a0a      	ldr	r2, [pc, #40]	; (800a2c4 <HAL_GPIO_Init+0x3a8>)
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f47f ae3d 	bne.w	8009f30 <HAL_GPIO_Init+0x14>
  }
}
 800a2b6:	bf00      	nop
 800a2b8:	bf00      	nop
 800a2ba:	3724      	adds	r7, #36	; 0x24
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	46022000 	.word	0x46022000
 800a2c8:	002f7f7f 	.word	0x002f7f7f

0800a2cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b089      	sub	sp, #36	; 0x24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800a2de:	e0bc      	b.n	800a45a <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f000 80ad 	beq.w	800a454 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a5e      	ldr	r2, [pc, #376]	; (800a478 <HAL_GPIO_DeInit+0x1ac>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d115      	bne.n	800a32e <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 800a302:	4a5e      	ldr	r2, [pc, #376]	; (800a47c <HAL_GPIO_DeInit+0x1b0>)
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a30a:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800a30c:	4a5b      	ldr	r2, [pc, #364]	; (800a47c <HAL_GPIO_DeInit+0x1b0>)
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	00db      	lsls	r3, r3, #3
 800a312:	4413      	add	r3, r2
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 800a318:	4b57      	ldr	r3, [pc, #348]	; (800a478 <HAL_GPIO_DeInit+0x1ac>)
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	2101      	movs	r1, #1
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	fa01 f303 	lsl.w	r3, r1, r3
 800a324:	43db      	mvns	r3, r3
 800a326:	4954      	ldr	r1, [pc, #336]	; (800a478 <HAL_GPIO_DeInit+0x1ac>)
 800a328:	4013      	ands	r3, r2
 800a32a:	600b      	str	r3, [r1, #0]
 800a32c:	e053      	b.n	800a3d6 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 800a32e:	4a54      	ldr	r2, [pc, #336]	; (800a480 <HAL_GPIO_DeInit+0x1b4>)
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	089b      	lsrs	r3, r3, #2
 800a334:	3318      	adds	r3, #24
 800a336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a33a:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	f003 0303 	and.w	r3, r3, #3
 800a342:	00db      	lsls	r3, r3, #3
 800a344:	220f      	movs	r2, #15
 800a346:	fa02 f303 	lsl.w	r3, r2, r3
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	4013      	ands	r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	0a9a      	lsrs	r2, r3, #10
 800a354:	4b4b      	ldr	r3, [pc, #300]	; (800a484 <HAL_GPIO_DeInit+0x1b8>)
 800a356:	4013      	ands	r3, r2
 800a358:	69ba      	ldr	r2, [r7, #24]
 800a35a:	f002 0203 	and.w	r2, r2, #3
 800a35e:	00d2      	lsls	r2, r2, #3
 800a360:	4093      	lsls	r3, r2
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	429a      	cmp	r2, r3
 800a366:	d136      	bne.n	800a3d6 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 800a368:	4b45      	ldr	r3, [pc, #276]	; (800a480 <HAL_GPIO_DeInit+0x1b4>)
 800a36a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	43db      	mvns	r3, r3
 800a372:	4943      	ldr	r1, [pc, #268]	; (800a480 <HAL_GPIO_DeInit+0x1b4>)
 800a374:	4013      	ands	r3, r2
 800a376:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800a37a:	4b41      	ldr	r3, [pc, #260]	; (800a480 <HAL_GPIO_DeInit+0x1b4>)
 800a37c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	43db      	mvns	r3, r3
 800a384:	493e      	ldr	r1, [pc, #248]	; (800a480 <HAL_GPIO_DeInit+0x1b4>)
 800a386:	4013      	ands	r3, r2
 800a388:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 800a38c:	4b3c      	ldr	r3, [pc, #240]	; (800a480 <HAL_GPIO_DeInit+0x1b4>)
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	43db      	mvns	r3, r3
 800a394:	493a      	ldr	r1, [pc, #232]	; (800a480 <HAL_GPIO_DeInit+0x1b4>)
 800a396:	4013      	ands	r3, r2
 800a398:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 800a39a:	4b39      	ldr	r3, [pc, #228]	; (800a480 <HAL_GPIO_DeInit+0x1b4>)
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	43db      	mvns	r3, r3
 800a3a2:	4937      	ldr	r1, [pc, #220]	; (800a480 <HAL_GPIO_DeInit+0x1b4>)
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	f003 0303 	and.w	r3, r3, #3
 800a3ae:	00db      	lsls	r3, r3, #3
 800a3b0:	220f      	movs	r2, #15
 800a3b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b6:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 800a3b8:	4a31      	ldr	r2, [pc, #196]	; (800a480 <HAL_GPIO_DeInit+0x1b4>)
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	089b      	lsrs	r3, r3, #2
 800a3be:	3318      	adds	r3, #24
 800a3c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	43da      	mvns	r2, r3
 800a3c8:	482d      	ldr	r0, [pc, #180]	; (800a480 <HAL_GPIO_DeInit+0x1b4>)
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	089b      	lsrs	r3, r3, #2
 800a3ce:	400a      	ands	r2, r1
 800a3d0:	3318      	adds	r3, #24
 800a3d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	2103      	movs	r1, #3
 800a3e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a3e4:	431a      	orrs	r2, r3
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	08da      	lsrs	r2, r3, #3
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	3208      	adds	r2, #8
 800a3f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	f003 0307 	and.w	r3, r3, #7
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	220f      	movs	r2, #15
 800a400:	fa02 f303 	lsl.w	r3, r2, r3
 800a404:	43db      	mvns	r3, r3
 800a406:	69fa      	ldr	r2, [r7, #28]
 800a408:	08d2      	lsrs	r2, r2, #3
 800a40a:	4019      	ands	r1, r3
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	3208      	adds	r2, #8
 800a410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	689a      	ldr	r2, [r3, #8]
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	005b      	lsls	r3, r3, #1
 800a41c:	2103      	movs	r1, #3
 800a41e:	fa01 f303 	lsl.w	r3, r1, r3
 800a422:	43db      	mvns	r3, r3
 800a424:	401a      	ands	r2, r3
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	685a      	ldr	r2, [r3, #4]
 800a42e:	2101      	movs	r1, #1
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	fa01 f303 	lsl.w	r3, r1, r3
 800a436:	43db      	mvns	r3, r3
 800a438:	401a      	ands	r2, r3
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	68da      	ldr	r2, [r3, #12]
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	005b      	lsls	r3, r3, #1
 800a446:	2103      	movs	r1, #3
 800a448:	fa01 f303 	lsl.w	r3, r1, r3
 800a44c:	43db      	mvns	r3, r3
 800a44e:	401a      	ands	r2, r3
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	3301      	adds	r3, #1
 800a458:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	fa22 f303 	lsr.w	r3, r2, r3
 800a462:	2b00      	cmp	r3, #0
 800a464:	f47f af3c 	bne.w	800a2e0 <HAL_GPIO_DeInit+0x14>
  }
}
 800a468:	bf00      	nop
 800a46a:	bf00      	nop
 800a46c:	3724      	adds	r7, #36	; 0x24
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	46020000 	.word	0x46020000
 800a47c:	0802b9e8 	.word	0x0802b9e8
 800a480:	46022000 	.word	0x46022000
 800a484:	002f7f7f 	.word	0x002f7f7f

0800a488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	460b      	mov	r3, r1
 800a492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	691a      	ldr	r2, [r3, #16]
 800a498:	887b      	ldrh	r3, [r7, #2]
 800a49a:	4013      	ands	r3, r2
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d002      	beq.n	800a4a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	73fb      	strb	r3, [r7, #15]
 800a4a4:	e001      	b.n	800a4aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	807b      	strh	r3, [r7, #2]
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a4c8:	787b      	ldrb	r3, [r7, #1]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d003      	beq.n	800a4d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a4ce:	887a      	ldrh	r2, [r7, #2]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800a4d4:	e002      	b.n	800a4dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800a4d6:	887a      	ldrh	r2, [r7, #2]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a4dc:	bf00      	nop
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	695b      	ldr	r3, [r3, #20]
 800a4f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a4fa:	887a      	ldrh	r2, [r7, #2]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	4013      	ands	r3, r2
 800a500:	041a      	lsls	r2, r3, #16
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	43d9      	mvns	r1, r3
 800a506:	887b      	ldrh	r3, [r7, #2]
 800a508:	400b      	ands	r3, r1
 800a50a:	431a      	orrs	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	619a      	str	r2, [r3, #24]
}
 800a510:	bf00      	nop
 800a512:	3714      	adds	r7, #20
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <HAL_GPIO_EnableHighSPeedLowVoltage>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_EnableHighSPeedLowVoltage(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b08b      	sub	sp, #44	; 0x2c
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	460b      	mov	r3, r1
 800a526:	807b      	strh	r3, [r7, #2]
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800a528:	2300      	movs	r3, #0
 800a52a:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800a530:	e03c      	b.n	800a5ac <HAL_GPIO_EnableHighSPeedLowVoltage+0x90>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 800a532:	887a      	ldrh	r2, [r7, #2]
 800a534:	2101      	movs	r1, #1
 800a536:	6a3b      	ldr	r3, [r7, #32]
 800a538:	fa01 f303 	lsl.w	r3, r1, r3
 800a53c:	4013      	ands	r3, r2
 800a53e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d02f      	beq.n	800a5a6 <HAL_GPIO_EnableHighSPeedLowVoltage+0x8a>
    {
      /* In case of LPGPIO Port */
      if (GPIOx == LPGPIO1)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a1f      	ldr	r2, [pc, #124]	; (800a5c8 <HAL_GPIO_EnableHighSPeedLowVoltage+0xac>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d120      	bne.n	800a590 <HAL_GPIO_EnableHighSPeedLowVoltage+0x74>
      {
        /* Get GPIO pin position */
        position = POSITION_VAL(GPIO_Pin);
 800a54e:	887b      	ldrh	r3, [r7, #2]
 800a550:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	fa93 f3a3 	rbit	r3, r3
 800a558:	60fb      	str	r3, [r7, #12]
  return result;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d101      	bne.n	800a568 <HAL_GPIO_EnableHighSPeedLowVoltage+0x4c>
    return 32U;
 800a564:	2320      	movs	r3, #32
 800a566:	e003      	b.n	800a570 <HAL_GPIO_EnableHighSPeedLowVoltage+0x54>
  return __builtin_clz(value);
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	fab3 f383 	clz	r3, r3
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	623b      	str	r3, [r7, #32]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800a572:	4a16      	ldr	r2, [pc, #88]	; (800a5cc <HAL_GPIO_EnableHighSPeedLowVoltage+0xb0>)
 800a574:	6a3b      	ldr	r3, [r7, #32]
 800a576:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a57a:	61fb      	str	r3, [r7, #28]
        pin_position = (1UL << (LPGPIO_Map[position].Pin_Pos));
 800a57c:	4a13      	ldr	r2, [pc, #76]	; (800a5cc <HAL_GPIO_EnableHighSPeedLowVoltage+0xb0>)
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	00db      	lsls	r3, r3, #3
 800a582:	4413      	add	r3, r2
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	fa02 f303 	lsl.w	r3, r2, r3
 800a58c:	627b      	str	r3, [r7, #36]	; 0x24
 800a58e:	e004      	b.n	800a59a <HAL_GPIO_EnableHighSPeedLowVoltage+0x7e>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Save GPIO pin pos */
        pin_position = (1UL << position);
 800a590:	2201      	movs	r2, #1
 800a592:	6a3b      	ldr	r3, [r7, #32]
 800a594:	fa02 f303 	lsl.w	r3, r2, r3
 800a598:	627b      	str	r3, [r7, #36]	; 0x24
      }
      /* Set HSLVR gpio pin */
      SET_BIT(p_gpio->HSLVR, pin_position);
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a0:	431a      	orrs	r2, r3
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    position++;
 800a5a6:	6a3b      	ldr	r3, [r7, #32]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	623b      	str	r3, [r7, #32]
  while ((GPIO_Pin >> position) != 0U)
 800a5ac:	887a      	ldrh	r2, [r7, #2]
 800a5ae:	6a3b      	ldr	r3, [r7, #32]
 800a5b0:	fa42 f303 	asr.w	r3, r2, r3
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1bc      	bne.n	800a532 <HAL_GPIO_EnableHighSPeedLowVoltage+0x16>
  }
}
 800a5b8:	bf00      	nop
 800a5ba:	bf00      	nop
 800a5bc:	372c      	adds	r7, #44	; 0x2c
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr
 800a5c6:	bf00      	nop
 800a5c8:	46020000 	.word	0x46020000
 800a5cc:	0802b9e8 	.word	0x0802b9e8

0800a5d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800a5da:	4b0f      	ldr	r3, [pc, #60]	; (800a618 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a5dc:	68da      	ldr	r2, [r3, #12]
 800a5de:	88fb      	ldrh	r3, [r7, #6]
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d006      	beq.n	800a5f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800a5e6:	4a0c      	ldr	r2, [pc, #48]	; (800a618 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a5e8:	88fb      	ldrh	r3, [r7, #6]
 800a5ea:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800a5ec:	88fb      	ldrh	r3, [r7, #6]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 f814 	bl	800a61c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800a5f4:	4b08      	ldr	r3, [pc, #32]	; (800a618 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a5f6:	691a      	ldr	r2, [r3, #16]
 800a5f8:	88fb      	ldrh	r3, [r7, #6]
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d006      	beq.n	800a60e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800a600:	4a05      	ldr	r2, [pc, #20]	; (800a618 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800a602:	88fb      	ldrh	r3, [r7, #6]
 800a604:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800a606:	88fb      	ldrh	r3, [r7, #6]
 800a608:	4618      	mov	r0, r3
 800a60a:	f7f7 ff39 	bl	8002480 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800a60e:	bf00      	nop
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	46022000 	.word	0x46022000

0800a61c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	4603      	mov	r3, r0
 800a624:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800a626:	bf00      	nop
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b082      	sub	sp, #8
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	e01c      	b.n	800a67e <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	795b      	ldrb	r3, [r3, #5]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d105      	bne.n	800a658 <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f7f7 fa43 	bl	8001ad8 <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	791b      	ldrb	r3, [r3, #4]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d101      	bne.n	800a664 <HAL_GPU2D_Init+0x32>
 800a660:	2302      	movs	r3, #2
 800a662:	e00c      	b.n	800a67e <HAL_GPU2D_Init+0x4c>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3708      	adds	r7, #8
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <HAL_GPU2D_ReadRegister>:
  *                   the configuration information for the GPU2D.
  * @param  offset    The register offset from GPU2D base address to read.
  * @retval Register value
  */
uint32_t HAL_GPU2D_ReadRegister(GPU2D_HandleTypeDef *hgpu2d, uint32_t offset)
{
 800a686:	b480      	push	{r7}
 800a688:	b085      	sub	sp, #20
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	6039      	str	r1, [r7, #0]
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
  assert_param(IS_GPU2D_OFFSET(offset));

  /* No locking is required since reading a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  value = GPU2D_ReadReg(hgpu2d->Instance, offset);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	4413      	add	r3, r2
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	60fb      	str	r3, [r7, #12]

  return value;
 800a69c:	68fb      	ldr	r3, [r7, #12]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3714      	adds	r7, #20
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <HAL_GPU2D_WriteRegister>:
  * @param  offset    The register offset from GPU2D base address to write.
  * @param  value     The value to be written to provided register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_WriteRegister(GPU2D_HandleTypeDef *hgpu2d, uint32_t offset, uint32_t value)
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b085      	sub	sp, #20
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	60f8      	str	r0, [r7, #12]
 800a6b2:	60b9      	str	r1, [r7, #8]
 800a6b4:	607a      	str	r2, [r7, #4]
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
  assert_param(IS_GPU2D_OFFSET(offset));

  /* No locking is required since writing a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  GPU2D_WriteReg(hgpu2d->Instance, offset, value);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	4413      	add	r3, r2
 800a6be:	461a      	mov	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3714      	adds	r7, #20
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b086      	sub	sp, #24
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	33f8      	adds	r3, #248	; 0xf8
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	f003 0301 	and.w	r3, r3, #1
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d013      	beq.n	800a716 <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	33f8      	adds	r3, #248	; 0xf8
 800a6f4:	613b      	str	r3, [r7, #16]
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f023 0201 	bic.w	r2, r3, #1
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 800a70e:	68f9      	ldr	r1, [r7, #12]
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7f8 fd3f 	bl	8003194 <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 800a716:	bf00      	nop
 800a718:	3718      	adds	r7, #24
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b082      	sub	sp, #8
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 f804 	bl	800a734 <HAL_GPU2D_ErrorCallback>
}
 800a72c:	bf00      	nop
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 800a73c:	e7fe      	b.n	800a73c <HAL_GPU2D_ErrorCallback+0x8>

0800a73e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b082      	sub	sp, #8
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d101      	bne.n	800a750 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	e081      	b.n	800a854 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a756:	b2db      	uxtb	r3, r3
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d106      	bne.n	800a76a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7f7 fa2f 	bl	8001bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2224      	movs	r2, #36	; 0x24
 800a76e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f022 0201 	bic.w	r2, r2, #1
 800a780:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	685a      	ldr	r2, [r3, #4]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a78e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	689a      	ldr	r2, [r3, #8]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a79e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d107      	bne.n	800a7b8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	689a      	ldr	r2, [r3, #8]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7b4:	609a      	str	r2, [r3, #8]
 800a7b6:	e006      	b.n	800a7c6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	689a      	ldr	r2, [r3, #8]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a7c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d104      	bne.n	800a7d8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7d6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	6812      	ldr	r2, [r2, #0]
 800a7e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a7e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7ea:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	68da      	ldr	r2, [r3, #12]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a7fa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	691a      	ldr	r2, [r3, #16]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	695b      	ldr	r3, [r3, #20]
 800a804:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	699b      	ldr	r3, [r3, #24]
 800a80c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	430a      	orrs	r2, r1
 800a814:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	69d9      	ldr	r1, [r3, #28]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a1a      	ldr	r2, [r3, #32]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	430a      	orrs	r2, r1
 800a824:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f042 0201 	orr.w	r2, r2, #1
 800a834:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2220      	movs	r2, #32
 800a840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d101      	bne.n	800a86e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e021      	b.n	800a8b2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2224      	movs	r2, #36	; 0x24
 800a872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f022 0201 	bic.w	r2, r2, #1
 800a884:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f7f7 fa18 	bl	8001cbc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
	...

0800a8bc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b088      	sub	sp, #32
 800a8c0:	af02      	add	r7, sp, #8
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	607a      	str	r2, [r7, #4]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	817b      	strh	r3, [r7, #10]
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	2b20      	cmp	r3, #32
 800a8da:	f040 80db 	bne.w	800aa94 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d101      	bne.n	800a8ec <HAL_I2C_Master_Receive+0x30>
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	e0d4      	b.n	800aa96 <HAL_I2C_Master_Receive+0x1da>
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a8f4:	f7fd f882 	bl	80079fc <HAL_GetTick>
 800a8f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	9300      	str	r3, [sp, #0]
 800a8fe:	2319      	movs	r3, #25
 800a900:	2201      	movs	r2, #1
 800a902:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f000 fbe2 	bl	800b0d0 <I2C_WaitOnFlagUntilTimeout>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d001      	beq.n	800a916 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	e0bf      	b.n	800aa96 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2222      	movs	r2, #34	; 0x22
 800a91a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2210      	movs	r2, #16
 800a922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	893a      	ldrh	r2, [r7, #8]
 800a936:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a942:	b29b      	uxth	r3, r3
 800a944:	2bff      	cmp	r3, #255	; 0xff
 800a946:	d90e      	bls.n	800a966 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	22ff      	movs	r2, #255	; 0xff
 800a94c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a952:	b2da      	uxtb	r2, r3
 800a954:	8979      	ldrh	r1, [r7, #10]
 800a956:	4b52      	ldr	r3, [pc, #328]	; (800aaa0 <HAL_I2C_Master_Receive+0x1e4>)
 800a958:	9300      	str	r3, [sp, #0]
 800a95a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f000 fdf2 	bl	800b548 <I2C_TransferConfig>
 800a964:	e06d      	b.n	800aa42 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a974:	b2da      	uxtb	r2, r3
 800a976:	8979      	ldrh	r1, [r7, #10]
 800a978:	4b49      	ldr	r3, [pc, #292]	; (800aaa0 <HAL_I2C_Master_Receive+0x1e4>)
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a980:	68f8      	ldr	r0, [r7, #12]
 800a982:	f000 fde1 	bl	800b548 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800a986:	e05c      	b.n	800aa42 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a988:	697a      	ldr	r2, [r7, #20]
 800a98a:	6a39      	ldr	r1, [r7, #32]
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f000 fc79 	bl	800b284 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d001      	beq.n	800a99c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e07c      	b.n	800aa96 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a6:	b2d2      	uxtb	r2, r2
 800a9a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ae:	1c5a      	adds	r2, r3, #1
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	b29a      	uxth	r2, r3
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d034      	beq.n	800aa42 <HAL_I2C_Master_Receive+0x186>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d130      	bne.n	800aa42 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	6a3b      	ldr	r3, [r7, #32]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	2180      	movs	r1, #128	; 0x80
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	f000 fb70 	bl	800b0d0 <I2C_WaitOnFlagUntilTimeout>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d001      	beq.n	800a9fa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e04d      	b.n	800aa96 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	2bff      	cmp	r3, #255	; 0xff
 800aa02:	d90e      	bls.n	800aa22 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	22ff      	movs	r2, #255	; 0xff
 800aa08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	8979      	ldrh	r1, [r7, #10]
 800aa12:	2300      	movs	r3, #0
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f000 fd94 	bl	800b548 <I2C_TransferConfig>
 800aa20:	e00f      	b.n	800aa42 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa26:	b29a      	uxth	r2, r3
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	8979      	ldrh	r1, [r7, #10]
 800aa34:	2300      	movs	r3, #0
 800aa36:	9300      	str	r3, [sp, #0]
 800aa38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 fd83 	bl	800b548 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d19d      	bne.n	800a988 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa4c:	697a      	ldr	r2, [r7, #20]
 800aa4e:	6a39      	ldr	r1, [r7, #32]
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f000 fbd3 	bl	800b1fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d001      	beq.n	800aa60 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e01a      	b.n	800aa96 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2220      	movs	r2, #32
 800aa66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6859      	ldr	r1, [r3, #4]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	4b0c      	ldr	r3, [pc, #48]	; (800aaa4 <HAL_I2C_Master_Receive+0x1e8>)
 800aa74:	400b      	ands	r3, r1
 800aa76:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2220      	movs	r2, #32
 800aa7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aa90:	2300      	movs	r3, #0
 800aa92:	e000      	b.n	800aa96 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800aa94:	2302      	movs	r3, #2
  }
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	80002400 	.word	0x80002400
 800aaa4:	fe00e800 	.word	0xfe00e800

0800aaa8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b088      	sub	sp, #32
 800aaac:	af02      	add	r7, sp, #8
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	4608      	mov	r0, r1
 800aab2:	4611      	mov	r1, r2
 800aab4:	461a      	mov	r2, r3
 800aab6:	4603      	mov	r3, r0
 800aab8:	817b      	strh	r3, [r7, #10]
 800aaba:	460b      	mov	r3, r1
 800aabc:	813b      	strh	r3, [r7, #8]
 800aabe:	4613      	mov	r3, r2
 800aac0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2b20      	cmp	r3, #32
 800aacc:	f040 80f9 	bne.w	800acc2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aad0:	6a3b      	ldr	r3, [r7, #32]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d002      	beq.n	800aadc <HAL_I2C_Mem_Write+0x34>
 800aad6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d105      	bne.n	800aae8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aae2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	e0ed      	b.n	800acc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d101      	bne.n	800aaf6 <HAL_I2C_Mem_Write+0x4e>
 800aaf2:	2302      	movs	r3, #2
 800aaf4:	e0e6      	b.n	800acc4 <HAL_I2C_Mem_Write+0x21c>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aafe:	f7fc ff7d 	bl	80079fc <HAL_GetTick>
 800ab02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	2319      	movs	r3, #25
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f000 fadd 	bl	800b0d0 <I2C_WaitOnFlagUntilTimeout>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d001      	beq.n	800ab20 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e0d1      	b.n	800acc4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2221      	movs	r2, #33	; 0x21
 800ab24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2240      	movs	r2, #64	; 0x40
 800ab2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2200      	movs	r2, #0
 800ab34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6a3a      	ldr	r2, [r7, #32]
 800ab3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ab40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2200      	movs	r2, #0
 800ab46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ab48:	88f8      	ldrh	r0, [r7, #6]
 800ab4a:	893a      	ldrh	r2, [r7, #8]
 800ab4c:	8979      	ldrh	r1, [r7, #10]
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	9301      	str	r3, [sp, #4]
 800ab52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab54:	9300      	str	r3, [sp, #0]
 800ab56:	4603      	mov	r3, r0
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	f000 f9ed 	bl	800af38 <I2C_RequestMemoryWrite>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d005      	beq.n	800ab70 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e0a9      	b.n	800acc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	2bff      	cmp	r3, #255	; 0xff
 800ab78:	d90e      	bls.n	800ab98 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	22ff      	movs	r2, #255	; 0xff
 800ab7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab84:	b2da      	uxtb	r2, r3
 800ab86:	8979      	ldrh	r1, [r7, #10]
 800ab88:	2300      	movs	r3, #0
 800ab8a:	9300      	str	r3, [sp, #0]
 800ab8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f000 fcd9 	bl	800b548 <I2C_TransferConfig>
 800ab96:	e00f      	b.n	800abb8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aba6:	b2da      	uxtb	r2, r3
 800aba8:	8979      	ldrh	r1, [r7, #10]
 800abaa:	2300      	movs	r3, #0
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f000 fcc8 	bl	800b548 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800abb8:	697a      	ldr	r2, [r7, #20]
 800abba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abbc:	68f8      	ldr	r0, [r7, #12]
 800abbe:	f000 fad6 	bl	800b16e <I2C_WaitOnTXISFlagUntilTimeout>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d001      	beq.n	800abcc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	e07b      	b.n	800acc4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd0:	781a      	ldrb	r2, [r3, #0]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abdc:	1c5a      	adds	r2, r3, #1
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	3b01      	subs	r3, #1
 800abea:	b29a      	uxth	r2, r3
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abf4:	3b01      	subs	r3, #1
 800abf6:	b29a      	uxth	r2, r3
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d034      	beq.n	800ac70 <HAL_I2C_Mem_Write+0x1c8>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d130      	bne.n	800ac70 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac14:	2200      	movs	r2, #0
 800ac16:	2180      	movs	r1, #128	; 0x80
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 fa59 	bl	800b0d0 <I2C_WaitOnFlagUntilTimeout>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d001      	beq.n	800ac28 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	e04d      	b.n	800acc4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	2bff      	cmp	r3, #255	; 0xff
 800ac30:	d90e      	bls.n	800ac50 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	22ff      	movs	r2, #255	; 0xff
 800ac36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac3c:	b2da      	uxtb	r2, r3
 800ac3e:	8979      	ldrh	r1, [r7, #10]
 800ac40:	2300      	movs	r3, #0
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 fc7d 	bl	800b548 <I2C_TransferConfig>
 800ac4e:	e00f      	b.n	800ac70 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac5e:	b2da      	uxtb	r2, r3
 800ac60:	8979      	ldrh	r1, [r7, #10]
 800ac62:	2300      	movs	r3, #0
 800ac64:	9300      	str	r3, [sp, #0]
 800ac66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f000 fc6c 	bl	800b548 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d19e      	bne.n	800abb8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac7a:	697a      	ldr	r2, [r7, #20]
 800ac7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f000 fabc 	bl	800b1fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d001      	beq.n	800ac8e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e01a      	b.n	800acc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2220      	movs	r2, #32
 800ac94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	6859      	ldr	r1, [r3, #4]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	4b0a      	ldr	r3, [pc, #40]	; (800accc <HAL_I2C_Mem_Write+0x224>)
 800aca2:	400b      	ands	r3, r1
 800aca4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2220      	movs	r2, #32
 800acaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800acbe:	2300      	movs	r3, #0
 800acc0:	e000      	b.n	800acc4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800acc2:	2302      	movs	r3, #2
  }
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3718      	adds	r7, #24
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	fe00e800 	.word	0xfe00e800

0800acd0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b088      	sub	sp, #32
 800acd4:	af02      	add	r7, sp, #8
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	4608      	mov	r0, r1
 800acda:	4611      	mov	r1, r2
 800acdc:	461a      	mov	r2, r3
 800acde:	4603      	mov	r3, r0
 800ace0:	817b      	strh	r3, [r7, #10]
 800ace2:	460b      	mov	r3, r1
 800ace4:	813b      	strh	r3, [r7, #8]
 800ace6:	4613      	mov	r3, r2
 800ace8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	2b20      	cmp	r3, #32
 800acf4:	f040 80fd 	bne.w	800aef2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800acf8:	6a3b      	ldr	r3, [r7, #32]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d002      	beq.n	800ad04 <HAL_I2C_Mem_Read+0x34>
 800acfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d105      	bne.n	800ad10 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e0f1      	b.n	800aef4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d101      	bne.n	800ad1e <HAL_I2C_Mem_Read+0x4e>
 800ad1a:	2302      	movs	r3, #2
 800ad1c:	e0ea      	b.n	800aef4 <HAL_I2C_Mem_Read+0x224>
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2201      	movs	r2, #1
 800ad22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ad26:	f7fc fe69 	bl	80079fc <HAL_GetTick>
 800ad2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	2319      	movs	r3, #25
 800ad32:	2201      	movs	r2, #1
 800ad34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f000 f9c9 	bl	800b0d0 <I2C_WaitOnFlagUntilTimeout>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d001      	beq.n	800ad48 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e0d5      	b.n	800aef4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2222      	movs	r2, #34	; 0x22
 800ad4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2240      	movs	r2, #64	; 0x40
 800ad54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	6a3a      	ldr	r2, [r7, #32]
 800ad62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ad68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ad70:	88f8      	ldrh	r0, [r7, #6]
 800ad72:	893a      	ldrh	r2, [r7, #8]
 800ad74:	8979      	ldrh	r1, [r7, #10]
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	9301      	str	r3, [sp, #4]
 800ad7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7c:	9300      	str	r3, [sp, #0]
 800ad7e:	4603      	mov	r3, r0
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f000 f92d 	bl	800afe0 <I2C_RequestMemoryRead>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d005      	beq.n	800ad98 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	e0ad      	b.n	800aef4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	2bff      	cmp	r3, #255	; 0xff
 800ada0:	d90e      	bls.n	800adc0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	22ff      	movs	r2, #255	; 0xff
 800ada6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adac:	b2da      	uxtb	r2, r3
 800adae:	8979      	ldrh	r1, [r7, #10]
 800adb0:	4b52      	ldr	r3, [pc, #328]	; (800aefc <HAL_I2C_Mem_Read+0x22c>)
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f000 fbc5 	bl	800b548 <I2C_TransferConfig>
 800adbe:	e00f      	b.n	800ade0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adce:	b2da      	uxtb	r2, r3
 800add0:	8979      	ldrh	r1, [r7, #10]
 800add2:	4b4a      	ldr	r3, [pc, #296]	; (800aefc <HAL_I2C_Mem_Read+0x22c>)
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	f000 fbb4 	bl	800b548 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	9300      	str	r3, [sp, #0]
 800ade4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade6:	2200      	movs	r2, #0
 800ade8:	2104      	movs	r1, #4
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f000 f970 	bl	800b0d0 <I2C_WaitOnFlagUntilTimeout>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d001      	beq.n	800adfa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	e07c      	b.n	800aef4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae04:	b2d2      	uxtb	r2, r2
 800ae06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0c:	1c5a      	adds	r2, r3, #1
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae16:	3b01      	subs	r3, #1
 800ae18:	b29a      	uxth	r2, r3
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	3b01      	subs	r3, #1
 800ae26:	b29a      	uxth	r2, r3
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d034      	beq.n	800aea0 <HAL_I2C_Mem_Read+0x1d0>
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d130      	bne.n	800aea0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	9300      	str	r3, [sp, #0]
 800ae42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae44:	2200      	movs	r2, #0
 800ae46:	2180      	movs	r1, #128	; 0x80
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f000 f941 	bl	800b0d0 <I2C_WaitOnFlagUntilTimeout>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d001      	beq.n	800ae58 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	e04d      	b.n	800aef4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	2bff      	cmp	r3, #255	; 0xff
 800ae60:	d90e      	bls.n	800ae80 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	22ff      	movs	r2, #255	; 0xff
 800ae66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	8979      	ldrh	r1, [r7, #10]
 800ae70:	2300      	movs	r3, #0
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae78:	68f8      	ldr	r0, [r7, #12]
 800ae7a:	f000 fb65 	bl	800b548 <I2C_TransferConfig>
 800ae7e:	e00f      	b.n	800aea0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae8e:	b2da      	uxtb	r2, r3
 800ae90:	8979      	ldrh	r1, [r7, #10]
 800ae92:	2300      	movs	r3, #0
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f000 fb54 	bl	800b548 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d19a      	bne.n	800ade0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	f000 f9a4 	bl	800b1fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d001      	beq.n	800aebe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e01a      	b.n	800aef4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2220      	movs	r2, #32
 800aec4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	6859      	ldr	r1, [r3, #4]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	4b0b      	ldr	r3, [pc, #44]	; (800af00 <HAL_I2C_Mem_Read+0x230>)
 800aed2:	400b      	ands	r3, r1
 800aed4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2220      	movs	r2, #32
 800aeda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aeee:	2300      	movs	r3, #0
 800aef0:	e000      	b.n	800aef4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800aef2:	2302      	movs	r3, #2
  }
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3718      	adds	r7, #24
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	80002400 	.word	0x80002400
 800af00:	fe00e800 	.word	0xfe00e800

0800af04 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af12:	b2db      	uxtb	r3, r3
}
 800af14:	4618      	mov	r0, r3
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af02      	add	r7, sp, #8
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	4608      	mov	r0, r1
 800af42:	4611      	mov	r1, r2
 800af44:	461a      	mov	r2, r3
 800af46:	4603      	mov	r3, r0
 800af48:	817b      	strh	r3, [r7, #10]
 800af4a:	460b      	mov	r3, r1
 800af4c:	813b      	strh	r3, [r7, #8]
 800af4e:	4613      	mov	r3, r2
 800af50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800af52:	88fb      	ldrh	r3, [r7, #6]
 800af54:	b2da      	uxtb	r2, r3
 800af56:	8979      	ldrh	r1, [r7, #10]
 800af58:	4b20      	ldr	r3, [pc, #128]	; (800afdc <I2C_RequestMemoryWrite+0xa4>)
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f000 faf1 	bl	800b548 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af66:	69fa      	ldr	r2, [r7, #28]
 800af68:	69b9      	ldr	r1, [r7, #24]
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f000 f8ff 	bl	800b16e <I2C_WaitOnTXISFlagUntilTimeout>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d001      	beq.n	800af7a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	e02c      	b.n	800afd4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800af7a:	88fb      	ldrh	r3, [r7, #6]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d105      	bne.n	800af8c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800af80:	893b      	ldrh	r3, [r7, #8]
 800af82:	b2da      	uxtb	r2, r3
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	629a      	str	r2, [r3, #40]	; 0x28
 800af8a:	e015      	b.n	800afb8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800af8c:	893b      	ldrh	r3, [r7, #8]
 800af8e:	0a1b      	lsrs	r3, r3, #8
 800af90:	b29b      	uxth	r3, r3
 800af92:	b2da      	uxtb	r2, r3
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af9a:	69fa      	ldr	r2, [r7, #28]
 800af9c:	69b9      	ldr	r1, [r7, #24]
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f000 f8e5 	bl	800b16e <I2C_WaitOnTXISFlagUntilTimeout>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	e012      	b.n	800afd4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800afae:	893b      	ldrh	r3, [r7, #8]
 800afb0:	b2da      	uxtb	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	2200      	movs	r2, #0
 800afc0:	2180      	movs	r1, #128	; 0x80
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f000 f884 	bl	800b0d0 <I2C_WaitOnFlagUntilTimeout>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d001      	beq.n	800afd2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e000      	b.n	800afd4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	80002000 	.word	0x80002000

0800afe0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af02      	add	r7, sp, #8
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	4608      	mov	r0, r1
 800afea:	4611      	mov	r1, r2
 800afec:	461a      	mov	r2, r3
 800afee:	4603      	mov	r3, r0
 800aff0:	817b      	strh	r3, [r7, #10]
 800aff2:	460b      	mov	r3, r1
 800aff4:	813b      	strh	r3, [r7, #8]
 800aff6:	4613      	mov	r3, r2
 800aff8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800affa:	88fb      	ldrh	r3, [r7, #6]
 800affc:	b2da      	uxtb	r2, r3
 800affe:	8979      	ldrh	r1, [r7, #10]
 800b000:	4b20      	ldr	r3, [pc, #128]	; (800b084 <I2C_RequestMemoryRead+0xa4>)
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	2300      	movs	r3, #0
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f000 fa9e 	bl	800b548 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b00c:	69fa      	ldr	r2, [r7, #28]
 800b00e:	69b9      	ldr	r1, [r7, #24]
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f000 f8ac 	bl	800b16e <I2C_WaitOnTXISFlagUntilTimeout>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d001      	beq.n	800b020 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	e02c      	b.n	800b07a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b020:	88fb      	ldrh	r3, [r7, #6]
 800b022:	2b01      	cmp	r3, #1
 800b024:	d105      	bne.n	800b032 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b026:	893b      	ldrh	r3, [r7, #8]
 800b028:	b2da      	uxtb	r2, r3
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	629a      	str	r2, [r3, #40]	; 0x28
 800b030:	e015      	b.n	800b05e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b032:	893b      	ldrh	r3, [r7, #8]
 800b034:	0a1b      	lsrs	r3, r3, #8
 800b036:	b29b      	uxth	r3, r3
 800b038:	b2da      	uxtb	r2, r3
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b040:	69fa      	ldr	r2, [r7, #28]
 800b042:	69b9      	ldr	r1, [r7, #24]
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f000 f892 	bl	800b16e <I2C_WaitOnTXISFlagUntilTimeout>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b050:	2301      	movs	r3, #1
 800b052:	e012      	b.n	800b07a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b054:	893b      	ldrh	r3, [r7, #8]
 800b056:	b2da      	uxtb	r2, r3
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	2200      	movs	r2, #0
 800b066:	2140      	movs	r1, #64	; 0x40
 800b068:	68f8      	ldr	r0, [r7, #12]
 800b06a:	f000 f831 	bl	800b0d0 <I2C_WaitOnFlagUntilTimeout>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d001      	beq.n	800b078 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	e000      	b.n	800b07a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	80002000 	.word	0x80002000

0800b088 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	699b      	ldr	r3, [r3, #24]
 800b096:	f003 0302 	and.w	r3, r3, #2
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d103      	bne.n	800b0a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	699b      	ldr	r3, [r3, #24]
 800b0ac:	f003 0301 	and.w	r3, r3, #1
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d007      	beq.n	800b0c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	699a      	ldr	r2, [r3, #24]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f042 0201 	orr.w	r2, r2, #1
 800b0c2:	619a      	str	r2, [r3, #24]
  }
}
 800b0c4:	bf00      	nop
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	603b      	str	r3, [r7, #0]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b0e0:	e031      	b.n	800b146 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e8:	d02d      	beq.n	800b146 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0ea:	f7fc fc87 	bl	80079fc <HAL_GetTick>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	1ad3      	subs	r3, r2, r3
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d302      	bcc.n	800b100 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d122      	bne.n	800b146 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	699a      	ldr	r2, [r3, #24]
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	4013      	ands	r3, r2
 800b10a:	68ba      	ldr	r2, [r7, #8]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	bf0c      	ite	eq
 800b110:	2301      	moveq	r3, #1
 800b112:	2300      	movne	r3, #0
 800b114:	b2db      	uxtb	r3, r3
 800b116:	461a      	mov	r2, r3
 800b118:	79fb      	ldrb	r3, [r7, #7]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d113      	bne.n	800b146 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b122:	f043 0220 	orr.w	r2, r3, #32
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2220      	movs	r2, #32
 800b12e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2200      	movs	r2, #0
 800b136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2200      	movs	r2, #0
 800b13e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	e00f      	b.n	800b166 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	699a      	ldr	r2, [r3, #24]
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	4013      	ands	r3, r2
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	429a      	cmp	r2, r3
 800b154:	bf0c      	ite	eq
 800b156:	2301      	moveq	r3, #1
 800b158:	2300      	movne	r3, #0
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	461a      	mov	r2, r3
 800b15e:	79fb      	ldrb	r3, [r7, #7]
 800b160:	429a      	cmp	r2, r3
 800b162:	d0be      	beq.n	800b0e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b084      	sub	sp, #16
 800b172:	af00      	add	r7, sp, #0
 800b174:	60f8      	str	r0, [r7, #12]
 800b176:	60b9      	str	r1, [r7, #8]
 800b178:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b17a:	e033      	b.n	800b1e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	68b9      	ldr	r1, [r7, #8]
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	f000 f901 	bl	800b388 <I2C_IsErrorOccurred>
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d001      	beq.n	800b190 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	e031      	b.n	800b1f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b196:	d025      	beq.n	800b1e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b198:	f7fc fc30 	bl	80079fc <HAL_GetTick>
 800b19c:	4602      	mov	r2, r0
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	1ad3      	subs	r3, r2, r3
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d302      	bcc.n	800b1ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d11a      	bne.n	800b1e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	699b      	ldr	r3, [r3, #24]
 800b1b4:	f003 0302 	and.w	r3, r3, #2
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d013      	beq.n	800b1e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c0:	f043 0220 	orr.w	r2, r3, #32
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2220      	movs	r2, #32
 800b1cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e007      	b.n	800b1f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	f003 0302 	and.w	r3, r3, #2
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d1c4      	bne.n	800b17c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b208:	e02f      	b.n	800b26a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	68b9      	ldr	r1, [r7, #8]
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f000 f8ba 	bl	800b388 <I2C_IsErrorOccurred>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d001      	beq.n	800b21e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	e02d      	b.n	800b27a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b21e:	f7fc fbed 	bl	80079fc <HAL_GetTick>
 800b222:	4602      	mov	r2, r0
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	1ad3      	subs	r3, r2, r3
 800b228:	68ba      	ldr	r2, [r7, #8]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d302      	bcc.n	800b234 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d11a      	bne.n	800b26a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	699b      	ldr	r3, [r3, #24]
 800b23a:	f003 0320 	and.w	r3, r3, #32
 800b23e:	2b20      	cmp	r3, #32
 800b240:	d013      	beq.n	800b26a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b246:	f043 0220 	orr.w	r2, r3, #32
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2220      	movs	r2, #32
 800b252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2200      	movs	r2, #0
 800b25a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2200      	movs	r2, #0
 800b262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	e007      	b.n	800b27a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	699b      	ldr	r3, [r3, #24]
 800b270:	f003 0320 	and.w	r3, r3, #32
 800b274:	2b20      	cmp	r3, #32
 800b276:	d1c8      	bne.n	800b20a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
	...

0800b284 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b290:	e06b      	b.n	800b36a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	68b9      	ldr	r1, [r7, #8]
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f000 f876 	bl	800b388 <I2C_IsErrorOccurred>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d001      	beq.n	800b2a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e069      	b.n	800b37a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	699b      	ldr	r3, [r3, #24]
 800b2ac:	f003 0320 	and.w	r3, r3, #32
 800b2b0:	2b20      	cmp	r3, #32
 800b2b2:	d138      	bne.n	800b326 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	699b      	ldr	r3, [r3, #24]
 800b2ba:	f003 0304 	and.w	r3, r3, #4
 800b2be:	2b04      	cmp	r3, #4
 800b2c0:	d105      	bne.n	800b2ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d001      	beq.n	800b2ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	e055      	b.n	800b37a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	699b      	ldr	r3, [r3, #24]
 800b2d4:	f003 0310 	and.w	r3, r3, #16
 800b2d8:	2b10      	cmp	r3, #16
 800b2da:	d107      	bne.n	800b2ec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2210      	movs	r2, #16
 800b2e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2204      	movs	r2, #4
 800b2e8:	645a      	str	r2, [r3, #68]	; 0x44
 800b2ea:	e002      	b.n	800b2f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2220      	movs	r2, #32
 800b2f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	6859      	ldr	r1, [r3, #4]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	4b1f      	ldr	r3, [pc, #124]	; (800b384 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800b306:	400b      	ands	r3, r1
 800b308:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2220      	movs	r2, #32
 800b30e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	e029      	b.n	800b37a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b326:	f7fc fb69 	bl	80079fc <HAL_GetTick>
 800b32a:	4602      	mov	r2, r0
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	68ba      	ldr	r2, [r7, #8]
 800b332:	429a      	cmp	r2, r3
 800b334:	d302      	bcc.n	800b33c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d116      	bne.n	800b36a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	699b      	ldr	r3, [r3, #24]
 800b342:	f003 0304 	and.w	r3, r3, #4
 800b346:	2b04      	cmp	r3, #4
 800b348:	d00f      	beq.n	800b36a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b34e:	f043 0220 	orr.w	r2, r3, #32
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2220      	movs	r2, #32
 800b35a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2200      	movs	r2, #0
 800b362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e007      	b.n	800b37a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	699b      	ldr	r3, [r3, #24]
 800b370:	f003 0304 	and.w	r3, r3, #4
 800b374:	2b04      	cmp	r3, #4
 800b376:	d18c      	bne.n	800b292 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	fe00e800 	.word	0xfe00e800

0800b388 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b08a      	sub	sp, #40	; 0x28
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b394:	2300      	movs	r3, #0
 800b396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	f003 0310 	and.w	r3, r3, #16
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d068      	beq.n	800b486 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2210      	movs	r2, #16
 800b3ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b3bc:	e049      	b.n	800b452 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c4:	d045      	beq.n	800b452 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b3c6:	f7fc fb19 	bl	80079fc <HAL_GetTick>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	1ad3      	subs	r3, r2, r3
 800b3d0:	68ba      	ldr	r2, [r7, #8]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d302      	bcc.n	800b3dc <I2C_IsErrorOccurred+0x54>
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d13a      	bne.n	800b452 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	699b      	ldr	r3, [r3, #24]
 800b3f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3fe:	d121      	bne.n	800b444 <I2C_IsErrorOccurred+0xbc>
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b406:	d01d      	beq.n	800b444 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b408:	7cfb      	ldrb	r3, [r7, #19]
 800b40a:	2b20      	cmp	r3, #32
 800b40c:	d01a      	beq.n	800b444 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	685a      	ldr	r2, [r3, #4]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b41c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b41e:	f7fc faed 	bl	80079fc <HAL_GetTick>
 800b422:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b424:	e00e      	b.n	800b444 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b426:	f7fc fae9 	bl	80079fc <HAL_GetTick>
 800b42a:	4602      	mov	r2, r0
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	2b19      	cmp	r3, #25
 800b432:	d907      	bls.n	800b444 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b434:	6a3b      	ldr	r3, [r7, #32]
 800b436:	f043 0320 	orr.w	r3, r3, #32
 800b43a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800b442:	e006      	b.n	800b452 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	699b      	ldr	r3, [r3, #24]
 800b44a:	f003 0320 	and.w	r3, r3, #32
 800b44e:	2b20      	cmp	r3, #32
 800b450:	d1e9      	bne.n	800b426 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	699b      	ldr	r3, [r3, #24]
 800b458:	f003 0320 	and.w	r3, r3, #32
 800b45c:	2b20      	cmp	r3, #32
 800b45e:	d003      	beq.n	800b468 <I2C_IsErrorOccurred+0xe0>
 800b460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b464:	2b00      	cmp	r3, #0
 800b466:	d0aa      	beq.n	800b3be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d103      	bne.n	800b478 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2220      	movs	r2, #32
 800b476:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b478:	6a3b      	ldr	r3, [r7, #32]
 800b47a:	f043 0304 	orr.w	r3, r3, #4
 800b47e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	699b      	ldr	r3, [r3, #24]
 800b48c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b494:	2b00      	cmp	r3, #0
 800b496:	d00b      	beq.n	800b4b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b498:	6a3b      	ldr	r3, [r7, #32]
 800b49a:	f043 0301 	orr.w	r3, r3, #1
 800b49e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00b      	beq.n	800b4d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b4ba:	6a3b      	ldr	r3, [r7, #32]
 800b4bc:	f043 0308 	orr.w	r3, r3, #8
 800b4c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b4ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00b      	beq.n	800b4f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b4dc:	6a3b      	ldr	r3, [r7, #32]
 800b4de:	f043 0302 	orr.w	r3, r3, #2
 800b4e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b4f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d01c      	beq.n	800b536 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f7ff fdc3 	bl	800b088 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	6859      	ldr	r1, [r3, #4]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	4b0d      	ldr	r3, [pc, #52]	; (800b544 <I2C_IsErrorOccurred+0x1bc>)
 800b50e:	400b      	ands	r3, r1
 800b510:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b516:	6a3b      	ldr	r3, [r7, #32]
 800b518:	431a      	orrs	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2220      	movs	r2, #32
 800b522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2200      	movs	r2, #0
 800b52a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2200      	movs	r2, #0
 800b532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3728      	adds	r7, #40	; 0x28
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	fe00e800 	.word	0xfe00e800

0800b548 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b548:	b480      	push	{r7}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	607b      	str	r3, [r7, #4]
 800b552:	460b      	mov	r3, r1
 800b554:	817b      	strh	r3, [r7, #10]
 800b556:	4613      	mov	r3, r2
 800b558:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b55a:	897b      	ldrh	r3, [r7, #10]
 800b55c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b560:	7a7b      	ldrb	r3, [r7, #9]
 800b562:	041b      	lsls	r3, r3, #16
 800b564:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b568:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b56e:	6a3b      	ldr	r3, [r7, #32]
 800b570:	4313      	orrs	r3, r2
 800b572:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b576:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	685a      	ldr	r2, [r3, #4]
 800b57e:	6a3b      	ldr	r3, [r7, #32]
 800b580:	0d5b      	lsrs	r3, r3, #21
 800b582:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b586:	4b08      	ldr	r3, [pc, #32]	; (800b5a8 <I2C_TransferConfig+0x60>)
 800b588:	430b      	orrs	r3, r1
 800b58a:	43db      	mvns	r3, r3
 800b58c:	ea02 0103 	and.w	r1, r2, r3
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	697a      	ldr	r2, [r7, #20]
 800b596:	430a      	orrs	r2, r1
 800b598:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b59a:	bf00      	nop
 800b59c:	371c      	adds	r7, #28
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop
 800b5a8:	03ff63ff 	.word	0x03ff63ff

0800b5ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	2b20      	cmp	r3, #32
 800b5c0:	d138      	bne.n	800b634 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d101      	bne.n	800b5d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	e032      	b.n	800b636 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2224      	movs	r2, #36	; 0x24
 800b5dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f022 0201 	bic.w	r2, r2, #1
 800b5ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b5fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	6819      	ldr	r1, [r3, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	683a      	ldr	r2, [r7, #0]
 800b60c:	430a      	orrs	r2, r1
 800b60e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f042 0201 	orr.w	r2, r2, #1
 800b61e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2220      	movs	r2, #32
 800b624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b630:	2300      	movs	r3, #0
 800b632:	e000      	b.n	800b636 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b634:	2302      	movs	r3, #2
  }
}
 800b636:	4618      	mov	r0, r3
 800b638:	370c      	adds	r7, #12
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b642:	b480      	push	{r7}
 800b644:	b085      	sub	sp, #20
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b652:	b2db      	uxtb	r3, r3
 800b654:	2b20      	cmp	r3, #32
 800b656:	d139      	bne.n	800b6cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d101      	bne.n	800b666 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b662:	2302      	movs	r3, #2
 800b664:	e033      	b.n	800b6ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2201      	movs	r2, #1
 800b66a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2224      	movs	r2, #36	; 0x24
 800b672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f022 0201 	bic.w	r2, r2, #1
 800b684:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b694:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	021b      	lsls	r3, r3, #8
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f042 0201 	orr.w	r2, r2, #1
 800b6b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2220      	movs	r2, #32
 800b6bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	e000      	b.n	800b6ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b6cc:	2302      	movs	r3, #2
  }
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3714      	adds	r7, #20
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr
	...

0800b6dc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b085      	sub	sp, #20
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800b6e8:	4b0b      	ldr	r3, [pc, #44]	; (800b718 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f003 0301 	and.w	r3, r3, #1
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d002      	beq.n	800b6fa <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	73fb      	strb	r3, [r7, #15]
 800b6f8:	e007      	b.n	800b70a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800b6fa:	4b07      	ldr	r3, [pc, #28]	; (800b718 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f023 0204 	bic.w	r2, r3, #4
 800b702:	4905      	ldr	r1, [pc, #20]	; (800b718 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4313      	orrs	r3, r2
 800b708:	600b      	str	r3, [r1, #0]
  }

  return status;
 800b70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3714      	adds	r7, #20
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr
 800b718:	40030400 	.word	0x40030400

0800b71c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800b71c:	b480      	push	{r7}
 800b71e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800b720:	4b05      	ldr	r3, [pc, #20]	; (800b738 <HAL_ICACHE_Enable+0x1c>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a04      	ldr	r2, [pc, #16]	; (800b738 <HAL_ICACHE_Enable+0x1c>)
 800b726:	f043 0301 	orr.w	r3, r3, #1
 800b72a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr
 800b738:	40030400 	.word	0x40030400

0800b73c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d101      	bne.n	800b74e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	e0bf      	b.n	800b8ce <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800b754:	b2db      	uxtb	r3, r3
 800b756:	2b00      	cmp	r3, #0
 800b758:	d106      	bne.n	800b768 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f7f6 face 	bl	8001d04 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2202      	movs	r2, #2
 800b76c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	699a      	ldr	r2, [r3, #24]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800b77e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	6999      	ldr	r1, [r3, #24]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	685a      	ldr	r2, [r3, #4]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b794:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	430a      	orrs	r2, r1
 800b7a2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	6899      	ldr	r1, [r3, #8]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	4b4a      	ldr	r3, [pc, #296]	; (800b8d8 <HAL_LTDC_Init+0x19c>)
 800b7b0:	400b      	ands	r3, r1
 800b7b2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	695b      	ldr	r3, [r3, #20]
 800b7b8:	041b      	lsls	r3, r3, #16
 800b7ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	6899      	ldr	r1, [r3, #8]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	699a      	ldr	r2, [r3, #24]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	431a      	orrs	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	430a      	orrs	r2, r1
 800b7d0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68d9      	ldr	r1, [r3, #12]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	4b3e      	ldr	r3, [pc, #248]	; (800b8d8 <HAL_LTDC_Init+0x19c>)
 800b7de:	400b      	ands	r3, r1
 800b7e0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	69db      	ldr	r3, [r3, #28]
 800b7e6:	041b      	lsls	r3, r3, #16
 800b7e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	68d9      	ldr	r1, [r3, #12]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6a1a      	ldr	r2, [r3, #32]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	431a      	orrs	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	430a      	orrs	r2, r1
 800b7fe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	6919      	ldr	r1, [r3, #16]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	4b33      	ldr	r3, [pc, #204]	; (800b8d8 <HAL_LTDC_Init+0x19c>)
 800b80c:	400b      	ands	r3, r1
 800b80e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b814:	041b      	lsls	r3, r3, #16
 800b816:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6919      	ldr	r1, [r3, #16]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	431a      	orrs	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	430a      	orrs	r2, r1
 800b82c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	6959      	ldr	r1, [r3, #20]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	4b27      	ldr	r3, [pc, #156]	; (800b8d8 <HAL_LTDC_Init+0x19c>)
 800b83a:	400b      	ands	r3, r1
 800b83c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b842:	041b      	lsls	r3, r3, #16
 800b844:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	6959      	ldr	r1, [r3, #20]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	431a      	orrs	r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	430a      	orrs	r2, r1
 800b85a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b862:	021b      	lsls	r3, r3, #8
 800b864:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b86c:	041b      	lsls	r3, r3, #16
 800b86e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800b87e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	4313      	orrs	r3, r2
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800b892:	431a      	orrs	r2, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	430a      	orrs	r2, r1
 800b89a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f042 0206 	orr.w	r2, r2, #6
 800b8aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	699a      	ldr	r2, [r3, #24]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f042 0201 	orr.w	r2, r2, #1
 800b8ba:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	f000f800 	.word	0xf000f800

0800b8dc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f003 0304 	and.w	r3, r3, #4
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d023      	beq.n	800b946 <HAL_LTDC_IRQHandler+0x6a>
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	f003 0304 	and.w	r3, r3, #4
 800b904:	2b00      	cmp	r3, #0
 800b906:	d01e      	beq.n	800b946 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f022 0204 	bic.w	r2, r2, #4
 800b916:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2204      	movs	r2, #4
 800b91e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b926:	f043 0201 	orr.w	r2, r3, #1
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2204      	movs	r2, #4
 800b934:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 f86f 	bl	800ba24 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f003 0302 	and.w	r3, r3, #2
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d023      	beq.n	800b998 <HAL_LTDC_IRQHandler+0xbc>
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	f003 0302 	and.w	r3, r3, #2
 800b956:	2b00      	cmp	r3, #0
 800b958:	d01e      	beq.n	800b998 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f022 0202 	bic.w	r2, r2, #2
 800b968:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2202      	movs	r2, #2
 800b970:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b978:	f043 0202 	orr.w	r2, r3, #2
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2204      	movs	r2, #4
 800b986:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f846 	bl	800ba24 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f003 0301 	and.w	r3, r3, #1
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d01b      	beq.n	800b9da <HAL_LTDC_IRQHandler+0xfe>
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	f003 0301 	and.w	r3, r3, #1
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d016      	beq.n	800b9da <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f022 0201 	bic.w	r2, r2, #1
 800b9ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f7f7 fbab 	bl	8003130 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f003 0308 	and.w	r3, r3, #8
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d01b      	beq.n	800ba1c <HAL_LTDC_IRQHandler+0x140>
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	f003 0308 	and.w	r3, r3, #8
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d016      	beq.n	800ba1c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f022 0208 	bic.w	r2, r2, #8
 800b9fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2208      	movs	r2, #8
 800ba04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2201      	movs	r2, #1
 800ba0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 f80e 	bl	800ba38 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800ba1c:	bf00      	nop
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800ba2c:	bf00      	nop
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800ba40:	bf00      	nop
 800ba42:	370c      	adds	r7, #12
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ba4c:	b5b0      	push	{r4, r5, r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d101      	bne.n	800ba66 <HAL_LTDC_ConfigLayer+0x1a>
 800ba62:	2302      	movs	r3, #2
 800ba64:	e02c      	b.n	800bac0 <HAL_LTDC_ConfigLayer+0x74>
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2202      	movs	r2, #2
 800ba72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2134      	movs	r1, #52	; 0x34
 800ba7c:	fb01 f303 	mul.w	r3, r1, r3
 800ba80:	4413      	add	r3, r2
 800ba82:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	4614      	mov	r4, r2
 800ba8a:	461d      	mov	r5, r3
 800ba8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba98:	682b      	ldr	r3, [r5, #0]
 800ba9a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	68b9      	ldr	r1, [r7, #8]
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f000 f87f 	bl	800bba4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2201      	movs	r2, #1
 800baac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2201      	movs	r2, #1
 800bab2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bdb0      	pop	{r4, r5, r7, pc}

0800bac8 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800bada:	2b01      	cmp	r3, #1
 800badc:	d101      	bne.n	800bae2 <HAL_LTDC_SetAddress+0x1a>
 800bade:	2302      	movs	r3, #2
 800bae0:	e024      	b.n	800bb2c <HAL_LTDC_SetAddress+0x64>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2201      	movs	r2, #1
 800bae6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2202      	movs	r2, #2
 800baee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2234      	movs	r2, #52	; 0x34
 800baf6:	fb02 f303 	mul.w	r3, r2, r3
 800bafa:	3338      	adds	r3, #56	; 0x38
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	4413      	add	r3, r2
 800bb00:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	68ba      	ldr	r2, [r7, #8]
 800bb06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	6979      	ldr	r1, [r7, #20]
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	f000 f849 	bl	800bba4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2201      	movs	r2, #1
 800bb18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2200      	movs	r2, #0
 800bb26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800bb2a:	2300      	movs	r3, #0
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3718      	adds	r7, #24
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d101      	bne.n	800bb4c <HAL_LTDC_ProgramLineEvent+0x18>
 800bb48:	2302      	movs	r3, #2
 800bb4a:	e023      	b.n	800bb94 <HAL_LTDC_ProgramLineEvent+0x60>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2202      	movs	r2, #2
 800bb58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f022 0201 	bic.w	r2, r2, #1
 800bb6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800bb6c:	4a0c      	ldr	r2, [pc, #48]	; (800bba0 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f042 0201 	orr.w	r2, r2, #1
 800bb80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2201      	movs	r2, #1
 800bb86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800bb92:	2300      	movs	r3, #0
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	370c      	adds	r7, #12
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	40016800 	.word	0x40016800

0800bba4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b089      	sub	sp, #36	; 0x24
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	68db      	ldr	r3, [r3, #12]
 800bbba:	0c1b      	lsrs	r3, r3, #16
 800bbbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bbc0:	4413      	add	r3, r2
 800bbc2:	041b      	lsls	r3, r3, #16
 800bbc4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	461a      	mov	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	01db      	lsls	r3, r3, #7
 800bbd0:	4413      	add	r3, r2
 800bbd2:	3384      	adds	r3, #132	; 0x84
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	6812      	ldr	r2, [r2, #0]
 800bbda:	4611      	mov	r1, r2
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	01d2      	lsls	r2, r2, #7
 800bbe0:	440a      	add	r2, r1
 800bbe2:	3284      	adds	r2, #132	; 0x84
 800bbe4:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800bbe8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	0c1b      	lsrs	r3, r3, #16
 800bbf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800bbfa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800bbfc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4619      	mov	r1, r3
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	01db      	lsls	r3, r3, #7
 800bc08:	440b      	add	r3, r1
 800bc0a:	3384      	adds	r3, #132	; 0x84
 800bc0c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800bc12:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	68da      	ldr	r2, [r3, #12]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	68db      	ldr	r3, [r3, #12]
 800bc1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc22:	4413      	add	r3, r2
 800bc24:	041b      	lsls	r3, r3, #16
 800bc26:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	01db      	lsls	r3, r3, #7
 800bc32:	4413      	add	r3, r2
 800bc34:	3384      	adds	r3, #132	; 0x84
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	6812      	ldr	r2, [r2, #0]
 800bc3c:	4611      	mov	r1, r2
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	01d2      	lsls	r2, r2, #7
 800bc42:	440a      	add	r2, r1
 800bc44:	3284      	adds	r2, #132	; 0x84
 800bc46:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800bc4a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	689a      	ldr	r2, [r3, #8]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc5a:	4413      	add	r3, r2
 800bc5c:	1c5a      	adds	r2, r3, #1
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4619      	mov	r1, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	01db      	lsls	r3, r3, #7
 800bc68:	440b      	add	r3, r1
 800bc6a:	3384      	adds	r3, #132	; 0x84
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	4313      	orrs	r3, r2
 800bc72:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	461a      	mov	r2, r3
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	01db      	lsls	r3, r3, #7
 800bc7e:	4413      	add	r3, r2
 800bc80:	3384      	adds	r3, #132	; 0x84
 800bc82:	691b      	ldr	r3, [r3, #16]
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	6812      	ldr	r2, [r2, #0]
 800bc88:	4611      	mov	r1, r2
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	01d2      	lsls	r2, r2, #7
 800bc8e:	440a      	add	r2, r1
 800bc90:	3284      	adds	r2, #132	; 0x84
 800bc92:	f023 0307 	bic.w	r3, r3, #7
 800bc96:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	01db      	lsls	r3, r3, #7
 800bca2:	4413      	add	r3, r2
 800bca4:	3384      	adds	r3, #132	; 0x84
 800bca6:	461a      	mov	r2, r3
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	691b      	ldr	r3, [r3, #16]
 800bcac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bcb4:	021b      	lsls	r3, r3, #8
 800bcb6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800bcbe:	041b      	lsls	r3, r3, #16
 800bcc0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	699b      	ldr	r3, [r3, #24]
 800bcc6:	061b      	lsls	r3, r3, #24
 800bcc8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	461a      	mov	r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	01db      	lsls	r3, r3, #7
 800bcd4:	4413      	add	r3, r2
 800bcd6:	3384      	adds	r3, #132	; 0x84
 800bcd8:	699b      	ldr	r3, [r3, #24]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	461a      	mov	r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	01db      	lsls	r3, r3, #7
 800bce4:	4413      	add	r3, r2
 800bce6:	3384      	adds	r3, #132	; 0x84
 800bce8:	461a      	mov	r2, r3
 800bcea:	2300      	movs	r3, #0
 800bcec:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	431a      	orrs	r2, r3
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	431a      	orrs	r2, r3
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4619      	mov	r1, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	01db      	lsls	r3, r3, #7
 800bd08:	440b      	add	r3, r1
 800bd0a:	3384      	adds	r3, #132	; 0x84
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	461a      	mov	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	01db      	lsls	r3, r3, #7
 800bd1e:	4413      	add	r3, r2
 800bd20:	3384      	adds	r3, #132	; 0x84
 800bd22:	695b      	ldr	r3, [r3, #20]
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	6812      	ldr	r2, [r2, #0]
 800bd28:	4611      	mov	r1, r2
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	01d2      	lsls	r2, r2, #7
 800bd2e:	440a      	add	r2, r1
 800bd30:	3284      	adds	r2, #132	; 0x84
 800bd32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bd36:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	01db      	lsls	r3, r3, #7
 800bd42:	4413      	add	r3, r2
 800bd44:	3384      	adds	r3, #132	; 0x84
 800bd46:	461a      	mov	r2, r3
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	695b      	ldr	r3, [r3, #20]
 800bd4c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	461a      	mov	r2, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	01db      	lsls	r3, r3, #7
 800bd58:	4413      	add	r3, r2
 800bd5a:	3384      	adds	r3, #132	; 0x84
 800bd5c:	69db      	ldr	r3, [r3, #28]
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	6812      	ldr	r2, [r2, #0]
 800bd62:	4611      	mov	r1, r2
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	01d2      	lsls	r2, r2, #7
 800bd68:	440a      	add	r2, r1
 800bd6a:	3284      	adds	r2, #132	; 0x84
 800bd6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800bd70:	f023 0307 	bic.w	r3, r3, #7
 800bd74:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	69da      	ldr	r2, [r3, #28]
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	6a1b      	ldr	r3, [r3, #32]
 800bd7e:	68f9      	ldr	r1, [r7, #12]
 800bd80:	6809      	ldr	r1, [r1, #0]
 800bd82:	4608      	mov	r0, r1
 800bd84:	6879      	ldr	r1, [r7, #4]
 800bd86:	01c9      	lsls	r1, r1, #7
 800bd88:	4401      	add	r1, r0
 800bd8a:	3184      	adds	r1, #132	; 0x84
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	461a      	mov	r2, r3
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	01db      	lsls	r3, r3, #7
 800bd9a:	4413      	add	r3, r2
 800bd9c:	3384      	adds	r3, #132	; 0x84
 800bd9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	461a      	mov	r2, r3
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	01db      	lsls	r3, r3, #7
 800bdaa:	4413      	add	r3, r2
 800bdac:	3384      	adds	r3, #132	; 0x84
 800bdae:	461a      	mov	r2, r3
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	461a      	mov	r2, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	01db      	lsls	r3, r3, #7
 800bdbe:	4413      	add	r3, r2
 800bdc0:	3384      	adds	r3, #132	; 0x84
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	691b      	ldr	r3, [r3, #16]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d102      	bne.n	800bdd8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800bdd2:	2304      	movs	r3, #4
 800bdd4:	61fb      	str	r3, [r7, #28]
 800bdd6:	e01b      	b.n	800be10 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	691b      	ldr	r3, [r3, #16]
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d102      	bne.n	800bde6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800bde0:	2303      	movs	r3, #3
 800bde2:	61fb      	str	r3, [r7, #28]
 800bde4:	e014      	b.n	800be10 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	2b04      	cmp	r3, #4
 800bdec:	d00b      	beq.n	800be06 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	d007      	beq.n	800be06 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800bdfa:	2b03      	cmp	r3, #3
 800bdfc:	d003      	beq.n	800be06 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800be02:	2b07      	cmp	r3, #7
 800be04:	d102      	bne.n	800be0c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800be06:	2302      	movs	r3, #2
 800be08:	61fb      	str	r3, [r7, #28]
 800be0a:	e001      	b.n	800be10 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800be0c:	2301      	movs	r3, #1
 800be0e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	461a      	mov	r2, r3
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	01db      	lsls	r3, r3, #7
 800be1a:	4413      	add	r3, r2
 800be1c:	3384      	adds	r3, #132	; 0x84
 800be1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	6812      	ldr	r2, [r2, #0]
 800be24:	4611      	mov	r1, r2
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	01d2      	lsls	r2, r2, #7
 800be2a:	440a      	add	r2, r1
 800be2c:	3284      	adds	r2, #132	; 0x84
 800be2e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800be32:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be38:	69fa      	ldr	r2, [r7, #28]
 800be3a:	fb02 f303 	mul.w	r3, r2, r3
 800be3e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	6859      	ldr	r1, [r3, #4]
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	1acb      	subs	r3, r1, r3
 800be4a:	69f9      	ldr	r1, [r7, #28]
 800be4c:	fb01 f303 	mul.w	r3, r1, r3
 800be50:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800be52:	68f9      	ldr	r1, [r7, #12]
 800be54:	6809      	ldr	r1, [r1, #0]
 800be56:	4608      	mov	r0, r1
 800be58:	6879      	ldr	r1, [r7, #4]
 800be5a:	01c9      	lsls	r1, r1, #7
 800be5c:	4401      	add	r1, r0
 800be5e:	3184      	adds	r1, #132	; 0x84
 800be60:	4313      	orrs	r3, r2
 800be62:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	461a      	mov	r2, r3
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	01db      	lsls	r3, r3, #7
 800be6e:	4413      	add	r3, r2
 800be70:	3384      	adds	r3, #132	; 0x84
 800be72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	6812      	ldr	r2, [r2, #0]
 800be78:	4611      	mov	r1, r2
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	01d2      	lsls	r2, r2, #7
 800be7e:	440a      	add	r2, r1
 800be80:	3284      	adds	r2, #132	; 0x84
 800be82:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800be86:	f023 0307 	bic.w	r3, r3, #7
 800be8a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	461a      	mov	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	01db      	lsls	r3, r3, #7
 800be96:	4413      	add	r3, r2
 800be98:	3384      	adds	r3, #132	; 0x84
 800be9a:	461a      	mov	r2, r3
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	461a      	mov	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	01db      	lsls	r3, r3, #7
 800beac:	4413      	add	r3, r2
 800beae:	3384      	adds	r3, #132	; 0x84
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	6812      	ldr	r2, [r2, #0]
 800beb6:	4611      	mov	r1, r2
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	01d2      	lsls	r2, r2, #7
 800bebc:	440a      	add	r2, r1
 800bebe:	3284      	adds	r2, #132	; 0x84
 800bec0:	f043 0301 	orr.w	r3, r3, #1
 800bec4:	6013      	str	r3, [r2, #0]
}
 800bec6:	bf00      	nop
 800bec8:	3724      	adds	r7, #36	; 0x24
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
	...

0800bed4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b085      	sub	sp, #20
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800bedc:	4b39      	ldr	r3, [pc, #228]	; (800bfc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bee4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	429a      	cmp	r2, r3
 800beec:	d10b      	bne.n	800bf06 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bef4:	d905      	bls.n	800bf02 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800bef6:	4b33      	ldr	r3, [pc, #204]	; (800bfc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	4a32      	ldr	r2, [pc, #200]	; (800bfc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800befc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bf00:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800bf02:	2300      	movs	r3, #0
 800bf04:	e057      	b.n	800bfb6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf0c:	d90a      	bls.n	800bf24 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800bf0e:	4b2d      	ldr	r3, [pc, #180]	; (800bfc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	4a2a      	ldr	r2, [pc, #168]	; (800bfc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bf1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bf20:	60d3      	str	r3, [r2, #12]
 800bf22:	e007      	b.n	800bf34 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800bf24:	4b27      	ldr	r3, [pc, #156]	; (800bfc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800bf2c:	4925      	ldr	r1, [pc, #148]	; (800bfc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800bf34:	4b24      	ldr	r3, [pc, #144]	; (800bfc8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a24      	ldr	r2, [pc, #144]	; (800bfcc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800bf3a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf3e:	099b      	lsrs	r3, r3, #6
 800bf40:	2232      	movs	r2, #50	; 0x32
 800bf42:	fb02 f303 	mul.w	r3, r2, r3
 800bf46:	4a21      	ldr	r2, [pc, #132]	; (800bfcc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800bf48:	fba2 2303 	umull	r2, r3, r2, r3
 800bf4c:	099b      	lsrs	r3, r3, #6
 800bf4e:	3301      	adds	r3, #1
 800bf50:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800bf52:	e002      	b.n	800bf5a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	3b01      	subs	r3, #1
 800bf58:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800bf5a:	4b1a      	ldr	r3, [pc, #104]	; (800bfc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d102      	bne.n	800bf6c <HAL_PWREx_ControlVoltageScaling+0x98>
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1f3      	bne.n	800bf54 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d01b      	beq.n	800bfaa <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800bf72:	4b15      	ldr	r3, [pc, #84]	; (800bfc8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a15      	ldr	r2, [pc, #84]	; (800bfcc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800bf78:	fba2 2303 	umull	r2, r3, r2, r3
 800bf7c:	099b      	lsrs	r3, r3, #6
 800bf7e:	2232      	movs	r2, #50	; 0x32
 800bf80:	fb02 f303 	mul.w	r3, r2, r3
 800bf84:	4a11      	ldr	r2, [pc, #68]	; (800bfcc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800bf86:	fba2 2303 	umull	r2, r3, r2, r3
 800bf8a:	099b      	lsrs	r3, r3, #6
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800bf90:	e002      	b.n	800bf98 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	3b01      	subs	r3, #1
 800bf96:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800bf98:	4b0a      	ldr	r3, [pc, #40]	; (800bfc4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800bf9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d102      	bne.n	800bfaa <HAL_PWREx_ControlVoltageScaling+0xd6>
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d1f3      	bne.n	800bf92 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d101      	bne.n	800bfb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800bfb0:	2303      	movs	r3, #3
 800bfb2:	e000      	b.n	800bfb6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3714      	adds	r7, #20
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr
 800bfc2:	bf00      	nop
 800bfc4:	46020800 	.word	0x46020800
 800bfc8:	20000048 	.word	0x20000048
 800bfcc:	10624dd3 	.word	0x10624dd3

0800bfd0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800bfd4:	4b04      	ldr	r3, [pc, #16]	; (800bfe8 <HAL_PWREx_GetVoltageRange+0x18>)
 800bfd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr
 800bfe6:	bf00      	nop
 800bfe8:	46020800 	.word	0x46020800

0800bfec <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800bff4:	4b22      	ldr	r3, [pc, #136]	; (800c080 <HAL_PWREx_ConfigSupply+0x94>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4a22      	ldr	r2, [pc, #136]	; (800c084 <HAL_PWREx_ConfigSupply+0x98>)
 800bffa:	fba2 2303 	umull	r2, r3, r2, r3
 800bffe:	099b      	lsrs	r3, r3, #6
 800c000:	2232      	movs	r2, #50	; 0x32
 800c002:	fb02 f303 	mul.w	r3, r2, r3
 800c006:	4a1f      	ldr	r2, [pc, #124]	; (800c084 <HAL_PWREx_ConfigSupply+0x98>)
 800c008:	fba2 2303 	umull	r2, r3, r2, r3
 800c00c:	099b      	lsrs	r3, r3, #6
 800c00e:	3301      	adds	r3, #1
 800c010:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d113      	bne.n	800c040 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800c018:	4b1b      	ldr	r3, [pc, #108]	; (800c088 <HAL_PWREx_ConfigSupply+0x9c>)
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	4a1a      	ldr	r2, [pc, #104]	; (800c088 <HAL_PWREx_ConfigSupply+0x9c>)
 800c01e:	f023 0302 	bic.w	r3, r3, #2
 800c022:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800c024:	e002      	b.n	800c02c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	3b01      	subs	r3, #1
 800c02a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800c02c:	4b16      	ldr	r3, [pc, #88]	; (800c088 <HAL_PWREx_ConfigSupply+0x9c>)
 800c02e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c030:	f003 0302 	and.w	r3, r3, #2
 800c034:	2b02      	cmp	r3, #2
 800c036:	d116      	bne.n	800c066 <HAL_PWREx_ConfigSupply+0x7a>
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1f3      	bne.n	800c026 <HAL_PWREx_ConfigSupply+0x3a>
 800c03e:	e012      	b.n	800c066 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800c040:	4b11      	ldr	r3, [pc, #68]	; (800c088 <HAL_PWREx_ConfigSupply+0x9c>)
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	4a10      	ldr	r2, [pc, #64]	; (800c088 <HAL_PWREx_ConfigSupply+0x9c>)
 800c046:	f043 0302 	orr.w	r3, r3, #2
 800c04a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800c04c:	e002      	b.n	800c054 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	3b01      	subs	r3, #1
 800c052:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800c054:	4b0c      	ldr	r3, [pc, #48]	; (800c088 <HAL_PWREx_ConfigSupply+0x9c>)
 800c056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c058:	f003 0302 	and.w	r3, r3, #2
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d102      	bne.n	800c066 <HAL_PWREx_ConfigSupply+0x7a>
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d1f3      	bne.n	800c04e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d101      	bne.n	800c070 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800c06c:	2303      	movs	r3, #3
 800c06e:	e000      	b.n	800c072 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800c070:	2300      	movs	r3, #0
}
 800c072:	4618      	mov	r0, r3
 800c074:	3714      	adds	r7, #20
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	20000048 	.word	0x20000048
 800c084:	10624dd3 	.word	0x10624dd3
 800c088:	46020800 	.word	0x46020800

0800c08c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800c08c:	b480      	push	{r7}
 800c08e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800c090:	4b05      	ldr	r3, [pc, #20]	; (800c0a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c092:	691b      	ldr	r3, [r3, #16]
 800c094:	4a04      	ldr	r2, [pc, #16]	; (800c0a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c096:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c09a:	6113      	str	r3, [r2, #16]
}
 800c09c:	bf00      	nop
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	46020800 	.word	0x46020800

0800c0ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800c0b0:	4b05      	ldr	r3, [pc, #20]	; (800c0c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b4:	4a04      	ldr	r2, [pc, #16]	; (800c0c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c0b6:	f043 0301 	orr.w	r3, r3, #1
 800c0ba:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800c0bc:	bf00      	nop
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr
 800c0c6:	bf00      	nop
 800c0c8:	46020800 	.word	0x46020800

0800c0cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b08e      	sub	sp, #56	; 0x38
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d102      	bne.n	800c0e6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	f000 bec8 	b.w	800ce76 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c0e6:	4b99      	ldr	r3, [pc, #612]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c0e8:	69db      	ldr	r3, [r3, #28]
 800c0ea:	f003 030c 	and.w	r3, r3, #12
 800c0ee:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c0f0:	4b96      	ldr	r3, [pc, #600]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0f4:	f003 0303 	and.w	r3, r3, #3
 800c0f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f003 0310 	and.w	r3, r3, #16
 800c102:	2b00      	cmp	r3, #0
 800c104:	f000 816c 	beq.w	800c3e0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d007      	beq.n	800c11e <HAL_RCC_OscConfig+0x52>
 800c10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c110:	2b0c      	cmp	r3, #12
 800c112:	f040 80de 	bne.w	800c2d2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c118:	2b01      	cmp	r3, #1
 800c11a:	f040 80da 	bne.w	800c2d2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	69db      	ldr	r3, [r3, #28]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d102      	bne.n	800c12c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800c126:	2301      	movs	r3, #1
 800c128:	f000 bea5 	b.w	800ce76 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c130:	4b86      	ldr	r3, [pc, #536]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d004      	beq.n	800c146 <HAL_RCC_OscConfig+0x7a>
 800c13c:	4b83      	ldr	r3, [pc, #524]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c144:	e005      	b.n	800c152 <HAL_RCC_OscConfig+0x86>
 800c146:	4b81      	ldr	r3, [pc, #516]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c14c:	041b      	lsls	r3, r3, #16
 800c14e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c152:	4293      	cmp	r3, r2
 800c154:	d255      	bcs.n	800c202 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10a      	bne.n	800c172 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c160:	4618      	mov	r0, r3
 800c162:	f001 fa17 	bl	800d594 <RCC_SetFlashLatencyFromMSIRange>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d002      	beq.n	800c172 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800c16c:	2301      	movs	r3, #1
 800c16e:	f000 be82 	b.w	800ce76 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c172:	4b76      	ldr	r3, [pc, #472]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	4a75      	ldr	r2, [pc, #468]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c178:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c17c:	6093      	str	r3, [r2, #8]
 800c17e:	4b73      	ldr	r3, [pc, #460]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18a:	4970      	ldr	r1, [pc, #448]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c18c:	4313      	orrs	r3, r2
 800c18e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c194:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c198:	d309      	bcc.n	800c1ae <HAL_RCC_OscConfig+0xe2>
 800c19a:	4b6c      	ldr	r3, [pc, #432]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	f023 021f 	bic.w	r2, r3, #31
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6a1b      	ldr	r3, [r3, #32]
 800c1a6:	4969      	ldr	r1, [pc, #420]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	60cb      	str	r3, [r1, #12]
 800c1ac:	e07e      	b.n	800c2ac <HAL_RCC_OscConfig+0x1e0>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	da0a      	bge.n	800c1cc <HAL_RCC_OscConfig+0x100>
 800c1b6:	4b65      	ldr	r3, [pc, #404]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c1b8:	68db      	ldr	r3, [r3, #12]
 800c1ba:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6a1b      	ldr	r3, [r3, #32]
 800c1c2:	015b      	lsls	r3, r3, #5
 800c1c4:	4961      	ldr	r1, [pc, #388]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	60cb      	str	r3, [r1, #12]
 800c1ca:	e06f      	b.n	800c2ac <HAL_RCC_OscConfig+0x1e0>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1d4:	d30a      	bcc.n	800c1ec <HAL_RCC_OscConfig+0x120>
 800c1d6:	4b5d      	ldr	r3, [pc, #372]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a1b      	ldr	r3, [r3, #32]
 800c1e2:	029b      	lsls	r3, r3, #10
 800c1e4:	4959      	ldr	r1, [pc, #356]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	60cb      	str	r3, [r1, #12]
 800c1ea:	e05f      	b.n	800c2ac <HAL_RCC_OscConfig+0x1e0>
 800c1ec:	4b57      	ldr	r3, [pc, #348]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6a1b      	ldr	r3, [r3, #32]
 800c1f8:	03db      	lsls	r3, r3, #15
 800c1fa:	4954      	ldr	r1, [pc, #336]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	60cb      	str	r3, [r1, #12]
 800c200:	e054      	b.n	800c2ac <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c202:	4b52      	ldr	r3, [pc, #328]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	4a51      	ldr	r2, [pc, #324]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c208:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c20c:	6093      	str	r3, [r2, #8]
 800c20e:	4b4f      	ldr	r3, [pc, #316]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c210:	689b      	ldr	r3, [r3, #8]
 800c212:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c21a:	494c      	ldr	r1, [pc, #304]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c21c:	4313      	orrs	r3, r2
 800c21e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c224:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c228:	d309      	bcc.n	800c23e <HAL_RCC_OscConfig+0x172>
 800c22a:	4b48      	ldr	r3, [pc, #288]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	f023 021f 	bic.w	r2, r3, #31
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6a1b      	ldr	r3, [r3, #32]
 800c236:	4945      	ldr	r1, [pc, #276]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c238:	4313      	orrs	r3, r2
 800c23a:	60cb      	str	r3, [r1, #12]
 800c23c:	e028      	b.n	800c290 <HAL_RCC_OscConfig+0x1c4>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c242:	2b00      	cmp	r3, #0
 800c244:	da0a      	bge.n	800c25c <HAL_RCC_OscConfig+0x190>
 800c246:	4b41      	ldr	r3, [pc, #260]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6a1b      	ldr	r3, [r3, #32]
 800c252:	015b      	lsls	r3, r3, #5
 800c254:	493d      	ldr	r1, [pc, #244]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c256:	4313      	orrs	r3, r2
 800c258:	60cb      	str	r3, [r1, #12]
 800c25a:	e019      	b.n	800c290 <HAL_RCC_OscConfig+0x1c4>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c264:	d30a      	bcc.n	800c27c <HAL_RCC_OscConfig+0x1b0>
 800c266:	4b39      	ldr	r3, [pc, #228]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6a1b      	ldr	r3, [r3, #32]
 800c272:	029b      	lsls	r3, r3, #10
 800c274:	4935      	ldr	r1, [pc, #212]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c276:	4313      	orrs	r3, r2
 800c278:	60cb      	str	r3, [r1, #12]
 800c27a:	e009      	b.n	800c290 <HAL_RCC_OscConfig+0x1c4>
 800c27c:	4b33      	ldr	r3, [pc, #204]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6a1b      	ldr	r3, [r3, #32]
 800c288:	03db      	lsls	r3, r3, #15
 800c28a:	4930      	ldr	r1, [pc, #192]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c28c:	4313      	orrs	r3, r2
 800c28e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c292:	2b00      	cmp	r3, #0
 800c294:	d10a      	bne.n	800c2ac <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c29a:	4618      	mov	r0, r3
 800c29c:	f001 f97a 	bl	800d594 <RCC_SetFlashLatencyFromMSIRange>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	f000 bde5 	b.w	800ce76 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800c2ac:	f001 f8e4 	bl	800d478 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c2b0:	4b27      	ldr	r3, [pc, #156]	; (800c350 <HAL_RCC_OscConfig+0x284>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7f5 fe2b 	bl	8001f10 <HAL_InitTick>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800c2c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f000 808a 	beq.w	800c3de <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800c2ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2ce:	f000 bdd2 	b.w	800ce76 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	69db      	ldr	r3, [r3, #28]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d066      	beq.n	800c3a8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800c2da:	4b1c      	ldr	r3, [pc, #112]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a1b      	ldr	r2, [pc, #108]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c2e0:	f043 0301 	orr.w	r3, r3, #1
 800c2e4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c2e6:	f7fb fb89 	bl	80079fc <HAL_GetTick>
 800c2ea:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c2ec:	e009      	b.n	800c302 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c2ee:	f7fb fb85 	bl	80079fc <HAL_GetTick>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f6:	1ad3      	subs	r3, r2, r3
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	d902      	bls.n	800c302 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	f000 bdba 	b.w	800ce76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800c302:	4b12      	ldr	r3, [pc, #72]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f003 0304 	and.w	r3, r3, #4
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d0ef      	beq.n	800c2ee <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800c30e:	4b0f      	ldr	r3, [pc, #60]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c310:	689b      	ldr	r3, [r3, #8]
 800c312:	4a0e      	ldr	r2, [pc, #56]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c314:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c318:	6093      	str	r3, [r2, #8]
 800c31a:	4b0c      	ldr	r3, [pc, #48]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c326:	4909      	ldr	r1, [pc, #36]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c328:	4313      	orrs	r3, r2
 800c32a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c330:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c334:	d30e      	bcc.n	800c354 <HAL_RCC_OscConfig+0x288>
 800c336:	4b05      	ldr	r3, [pc, #20]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	f023 021f 	bic.w	r2, r3, #31
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6a1b      	ldr	r3, [r3, #32]
 800c342:	4902      	ldr	r1, [pc, #8]	; (800c34c <HAL_RCC_OscConfig+0x280>)
 800c344:	4313      	orrs	r3, r2
 800c346:	60cb      	str	r3, [r1, #12]
 800c348:	e04a      	b.n	800c3e0 <HAL_RCC_OscConfig+0x314>
 800c34a:	bf00      	nop
 800c34c:	46020c00 	.word	0x46020c00
 800c350:	2000004c 	.word	0x2000004c
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c358:	2b00      	cmp	r3, #0
 800c35a:	da0a      	bge.n	800c372 <HAL_RCC_OscConfig+0x2a6>
 800c35c:	4b98      	ldr	r3, [pc, #608]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6a1b      	ldr	r3, [r3, #32]
 800c368:	015b      	lsls	r3, r3, #5
 800c36a:	4995      	ldr	r1, [pc, #596]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c36c:	4313      	orrs	r3, r2
 800c36e:	60cb      	str	r3, [r1, #12]
 800c370:	e036      	b.n	800c3e0 <HAL_RCC_OscConfig+0x314>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c37a:	d30a      	bcc.n	800c392 <HAL_RCC_OscConfig+0x2c6>
 800c37c:	4b90      	ldr	r3, [pc, #576]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6a1b      	ldr	r3, [r3, #32]
 800c388:	029b      	lsls	r3, r3, #10
 800c38a:	498d      	ldr	r1, [pc, #564]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c38c:	4313      	orrs	r3, r2
 800c38e:	60cb      	str	r3, [r1, #12]
 800c390:	e026      	b.n	800c3e0 <HAL_RCC_OscConfig+0x314>
 800c392:	4b8b      	ldr	r3, [pc, #556]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a1b      	ldr	r3, [r3, #32]
 800c39e:	03db      	lsls	r3, r3, #15
 800c3a0:	4987      	ldr	r1, [pc, #540]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	60cb      	str	r3, [r1, #12]
 800c3a6:	e01b      	b.n	800c3e0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800c3a8:	4b85      	ldr	r3, [pc, #532]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a84      	ldr	r2, [pc, #528]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c3ae:	f023 0301 	bic.w	r3, r3, #1
 800c3b2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c3b4:	f7fb fb22 	bl	80079fc <HAL_GetTick>
 800c3b8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c3ba:	e009      	b.n	800c3d0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c3bc:	f7fb fb1e 	bl	80079fc <HAL_GetTick>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c4:	1ad3      	subs	r3, r2, r3
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	d902      	bls.n	800c3d0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	f000 bd53 	b.w	800ce76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800c3d0:	4b7b      	ldr	r3, [pc, #492]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f003 0304 	and.w	r3, r3, #4
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1ef      	bne.n	800c3bc <HAL_RCC_OscConfig+0x2f0>
 800c3dc:	e000      	b.n	800c3e0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c3de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f003 0301 	and.w	r3, r3, #1
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	f000 808b 	beq.w	800c504 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f0:	2b08      	cmp	r3, #8
 800c3f2:	d005      	beq.n	800c400 <HAL_RCC_OscConfig+0x334>
 800c3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f6:	2b0c      	cmp	r3, #12
 800c3f8:	d109      	bne.n	800c40e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fc:	2b03      	cmp	r3, #3
 800c3fe:	d106      	bne.n	800c40e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d17d      	bne.n	800c504 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800c408:	2301      	movs	r3, #1
 800c40a:	f000 bd34 	b.w	800ce76 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c416:	d106      	bne.n	800c426 <HAL_RCC_OscConfig+0x35a>
 800c418:	4b69      	ldr	r3, [pc, #420]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a68      	ldr	r2, [pc, #416]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c41e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c422:	6013      	str	r3, [r2, #0]
 800c424:	e041      	b.n	800c4aa <HAL_RCC_OscConfig+0x3de>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c42e:	d112      	bne.n	800c456 <HAL_RCC_OscConfig+0x38a>
 800c430:	4b63      	ldr	r3, [pc, #396]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a62      	ldr	r2, [pc, #392]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c436:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c43a:	6013      	str	r3, [r2, #0]
 800c43c:	4b60      	ldr	r3, [pc, #384]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a5f      	ldr	r2, [pc, #380]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c442:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c446:	6013      	str	r3, [r2, #0]
 800c448:	4b5d      	ldr	r3, [pc, #372]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a5c      	ldr	r2, [pc, #368]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c44e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c452:	6013      	str	r3, [r2, #0]
 800c454:	e029      	b.n	800c4aa <HAL_RCC_OscConfig+0x3de>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800c45e:	d112      	bne.n	800c486 <HAL_RCC_OscConfig+0x3ba>
 800c460:	4b57      	ldr	r3, [pc, #348]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a56      	ldr	r2, [pc, #344]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c46a:	6013      	str	r3, [r2, #0]
 800c46c:	4b54      	ldr	r3, [pc, #336]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a53      	ldr	r2, [pc, #332]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c476:	6013      	str	r3, [r2, #0]
 800c478:	4b51      	ldr	r3, [pc, #324]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a50      	ldr	r2, [pc, #320]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c47e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c482:	6013      	str	r3, [r2, #0]
 800c484:	e011      	b.n	800c4aa <HAL_RCC_OscConfig+0x3de>
 800c486:	4b4e      	ldr	r3, [pc, #312]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a4d      	ldr	r2, [pc, #308]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c48c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c490:	6013      	str	r3, [r2, #0]
 800c492:	4b4b      	ldr	r3, [pc, #300]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a4a      	ldr	r2, [pc, #296]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c49c:	6013      	str	r3, [r2, #0]
 800c49e:	4b48      	ldr	r3, [pc, #288]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a47      	ldr	r2, [pc, #284]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c4a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c4a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d014      	beq.n	800c4dc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800c4b2:	f7fb faa3 	bl	80079fc <HAL_GetTick>
 800c4b6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c4b8:	e009      	b.n	800c4ce <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c4ba:	f7fb fa9f 	bl	80079fc <HAL_GetTick>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c2:	1ad3      	subs	r3, r2, r3
 800c4c4:	2b64      	cmp	r3, #100	; 0x64
 800c4c6:	d902      	bls.n	800c4ce <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	f000 bcd4 	b.w	800ce76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c4ce:	4b3c      	ldr	r3, [pc, #240]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d0ef      	beq.n	800c4ba <HAL_RCC_OscConfig+0x3ee>
 800c4da:	e013      	b.n	800c504 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800c4dc:	f7fb fa8e 	bl	80079fc <HAL_GetTick>
 800c4e0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c4e2:	e009      	b.n	800c4f8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c4e4:	f7fb fa8a 	bl	80079fc <HAL_GetTick>
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ec:	1ad3      	subs	r3, r2, r3
 800c4ee:	2b64      	cmp	r3, #100	; 0x64
 800c4f0:	d902      	bls.n	800c4f8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	f000 bcbf 	b.w	800ce76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c4f8:	4b31      	ldr	r3, [pc, #196]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c500:	2b00      	cmp	r3, #0
 800c502:	d1ef      	bne.n	800c4e4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f003 0302 	and.w	r3, r3, #2
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d05f      	beq.n	800c5d0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c512:	2b04      	cmp	r3, #4
 800c514:	d005      	beq.n	800c522 <HAL_RCC_OscConfig+0x456>
 800c516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c518:	2b0c      	cmp	r3, #12
 800c51a:	d114      	bne.n	800c546 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51e:	2b02      	cmp	r3, #2
 800c520:	d111      	bne.n	800c546 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	68db      	ldr	r3, [r3, #12]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d102      	bne.n	800c530 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800c52a:	2301      	movs	r3, #1
 800c52c:	f000 bca3 	b.w	800ce76 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800c530:	4b23      	ldr	r3, [pc, #140]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	041b      	lsls	r3, r3, #16
 800c53e:	4920      	ldr	r1, [pc, #128]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c540:	4313      	orrs	r3, r2
 800c542:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c544:	e044      	b.n	800c5d0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d024      	beq.n	800c598 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800c54e:	4b1c      	ldr	r3, [pc, #112]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4a1b      	ldr	r2, [pc, #108]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c558:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c55a:	f7fb fa4f 	bl	80079fc <HAL_GetTick>
 800c55e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c560:	e009      	b.n	800c576 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c562:	f7fb fa4b 	bl	80079fc <HAL_GetTick>
 800c566:	4602      	mov	r2, r0
 800c568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56a:	1ad3      	subs	r3, r2, r3
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	d902      	bls.n	800c576 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c570:	2303      	movs	r3, #3
 800c572:	f000 bc80 	b.w	800ce76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c576:	4b12      	ldr	r3, [pc, #72]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d0ef      	beq.n	800c562 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800c582:	4b0f      	ldr	r3, [pc, #60]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c584:	691b      	ldr	r3, [r3, #16]
 800c586:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	041b      	lsls	r3, r3, #16
 800c590:	490b      	ldr	r1, [pc, #44]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c592:	4313      	orrs	r3, r2
 800c594:	610b      	str	r3, [r1, #16]
 800c596:	e01b      	b.n	800c5d0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800c598:	4b09      	ldr	r3, [pc, #36]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a08      	ldr	r2, [pc, #32]	; (800c5c0 <HAL_RCC_OscConfig+0x4f4>)
 800c59e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5a2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800c5a4:	f7fb fa2a 	bl	80079fc <HAL_GetTick>
 800c5a8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c5aa:	e00b      	b.n	800c5c4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5ac:	f7fb fa26 	bl	80079fc <HAL_GetTick>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b4:	1ad3      	subs	r3, r2, r3
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d904      	bls.n	800c5c4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800c5ba:	2303      	movs	r3, #3
 800c5bc:	f000 bc5b 	b.w	800ce76 <HAL_RCC_OscConfig+0xdaa>
 800c5c0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c5c4:	4baf      	ldr	r3, [pc, #700]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d1ed      	bne.n	800c5ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f003 0308 	and.w	r3, r3, #8
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f000 80c8 	beq.w	800c76e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c5e4:	4ba7      	ldr	r3, [pc, #668]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c5e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5ea:	f003 0304 	and.w	r3, r3, #4
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d111      	bne.n	800c616 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c5f2:	4ba4      	ldr	r3, [pc, #656]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c5f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5f8:	4aa2      	ldr	r2, [pc, #648]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c5fa:	f043 0304 	orr.w	r3, r3, #4
 800c5fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c602:	4ba0      	ldr	r3, [pc, #640]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c608:	f003 0304 	and.w	r3, r3, #4
 800c60c:	617b      	str	r3, [r7, #20]
 800c60e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800c610:	2301      	movs	r3, #1
 800c612:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c616:	4b9c      	ldr	r3, [pc, #624]	; (800c888 <HAL_RCC_OscConfig+0x7bc>)
 800c618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c61a:	f003 0301 	and.w	r3, r3, #1
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d119      	bne.n	800c656 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c622:	4b99      	ldr	r3, [pc, #612]	; (800c888 <HAL_RCC_OscConfig+0x7bc>)
 800c624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c626:	4a98      	ldr	r2, [pc, #608]	; (800c888 <HAL_RCC_OscConfig+0x7bc>)
 800c628:	f043 0301 	orr.w	r3, r3, #1
 800c62c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c62e:	f7fb f9e5 	bl	80079fc <HAL_GetTick>
 800c632:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c634:	e009      	b.n	800c64a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c636:	f7fb f9e1 	bl	80079fc <HAL_GetTick>
 800c63a:	4602      	mov	r2, r0
 800c63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63e:	1ad3      	subs	r3, r2, r3
 800c640:	2b02      	cmp	r3, #2
 800c642:	d902      	bls.n	800c64a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800c644:	2303      	movs	r3, #3
 800c646:	f000 bc16 	b.w	800ce76 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c64a:	4b8f      	ldr	r3, [pc, #572]	; (800c888 <HAL_RCC_OscConfig+0x7bc>)
 800c64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c64e:	f003 0301 	and.w	r3, r3, #1
 800c652:	2b00      	cmp	r3, #0
 800c654:	d0ef      	beq.n	800c636 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	695b      	ldr	r3, [r3, #20]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d05f      	beq.n	800c71e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800c65e:	4b89      	ldr	r3, [pc, #548]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c664:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	699a      	ldr	r2, [r3, #24]
 800c66a:	6a3b      	ldr	r3, [r7, #32]
 800c66c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c670:	429a      	cmp	r2, r3
 800c672:	d037      	beq.n	800c6e4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800c674:	6a3b      	ldr	r3, [r7, #32]
 800c676:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d006      	beq.n	800c68c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800c67e:	6a3b      	ldr	r3, [r7, #32]
 800c680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800c684:	2b00      	cmp	r3, #0
 800c686:	d101      	bne.n	800c68c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800c688:	2301      	movs	r3, #1
 800c68a:	e3f4      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800c68c:	6a3b      	ldr	r3, [r7, #32]
 800c68e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c692:	2b00      	cmp	r3, #0
 800c694:	d01b      	beq.n	800c6ce <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800c696:	4b7b      	ldr	r3, [pc, #492]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c69c:	4a79      	ldr	r2, [pc, #484]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c69e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800c6a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800c6a6:	f7fb f9a9 	bl	80079fc <HAL_GetTick>
 800c6aa:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c6ac:	e008      	b.n	800c6c0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c6ae:	f7fb f9a5 	bl	80079fc <HAL_GetTick>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b6:	1ad3      	subs	r3, r2, r3
 800c6b8:	2b05      	cmp	r3, #5
 800c6ba:	d901      	bls.n	800c6c0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800c6bc:	2303      	movs	r3, #3
 800c6be:	e3da      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c6c0:	4b70      	ldr	r3, [pc, #448]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c6c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c6c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d1ef      	bne.n	800c6ae <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800c6ce:	4b6d      	ldr	r3, [pc, #436]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c6d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c6d4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	699b      	ldr	r3, [r3, #24]
 800c6dc:	4969      	ldr	r1, [pc, #420]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800c6e4:	4b67      	ldr	r3, [pc, #412]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c6e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c6ea:	4a66      	ldr	r2, [pc, #408]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c6ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c6f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800c6f4:	f7fb f982 	bl	80079fc <HAL_GetTick>
 800c6f8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c6fa:	e008      	b.n	800c70e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c6fc:	f7fb f97e 	bl	80079fc <HAL_GetTick>
 800c700:	4602      	mov	r2, r0
 800c702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	2b05      	cmp	r3, #5
 800c708:	d901      	bls.n	800c70e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800c70a:	2303      	movs	r3, #3
 800c70c:	e3b3      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800c70e:	4b5d      	ldr	r3, [pc, #372]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d0ef      	beq.n	800c6fc <HAL_RCC_OscConfig+0x630>
 800c71c:	e01b      	b.n	800c756 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800c71e:	4b59      	ldr	r3, [pc, #356]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c724:	4a57      	ldr	r2, [pc, #348]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c726:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800c72a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800c72e:	f7fb f965 	bl	80079fc <HAL_GetTick>
 800c732:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c734:	e008      	b.n	800c748 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c736:	f7fb f961 	bl	80079fc <HAL_GetTick>
 800c73a:	4602      	mov	r2, r0
 800c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73e:	1ad3      	subs	r3, r2, r3
 800c740:	2b05      	cmp	r3, #5
 800c742:	d901      	bls.n	800c748 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800c744:	2303      	movs	r3, #3
 800c746:	e396      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800c748:	4b4e      	ldr	r3, [pc, #312]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c74a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c74e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1ef      	bne.n	800c736 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c756:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d107      	bne.n	800c76e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c75e:	4b49      	ldr	r3, [pc, #292]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c764:	4a47      	ldr	r2, [pc, #284]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c766:	f023 0304 	bic.w	r3, r3, #4
 800c76a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f003 0304 	and.w	r3, r3, #4
 800c776:	2b00      	cmp	r3, #0
 800c778:	f000 8111 	beq.w	800c99e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800c77c:	2300      	movs	r3, #0
 800c77e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c782:	4b40      	ldr	r3, [pc, #256]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c788:	f003 0304 	and.w	r3, r3, #4
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d111      	bne.n	800c7b4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c790:	4b3c      	ldr	r3, [pc, #240]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c796:	4a3b      	ldr	r2, [pc, #236]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c798:	f043 0304 	orr.w	r3, r3, #4
 800c79c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800c7a0:	4b38      	ldr	r3, [pc, #224]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c7a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7a6:	f003 0304 	and.w	r3, r3, #4
 800c7aa:	613b      	str	r3, [r7, #16]
 800c7ac:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c7b4:	4b34      	ldr	r3, [pc, #208]	; (800c888 <HAL_RCC_OscConfig+0x7bc>)
 800c7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b8:	f003 0301 	and.w	r3, r3, #1
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d118      	bne.n	800c7f2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800c7c0:	4b31      	ldr	r3, [pc, #196]	; (800c888 <HAL_RCC_OscConfig+0x7bc>)
 800c7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7c4:	4a30      	ldr	r2, [pc, #192]	; (800c888 <HAL_RCC_OscConfig+0x7bc>)
 800c7c6:	f043 0301 	orr.w	r3, r3, #1
 800c7ca:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c7cc:	f7fb f916 	bl	80079fc <HAL_GetTick>
 800c7d0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c7d2:	e008      	b.n	800c7e6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c7d4:	f7fb f912 	bl	80079fc <HAL_GetTick>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	2b02      	cmp	r3, #2
 800c7e0:	d901      	bls.n	800c7e6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800c7e2:	2303      	movs	r3, #3
 800c7e4:	e347      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c7e6:	4b28      	ldr	r3, [pc, #160]	; (800c888 <HAL_RCC_OscConfig+0x7bc>)
 800c7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ea:	f003 0301 	and.w	r3, r3, #1
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d0f0      	beq.n	800c7d4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f003 0301 	and.w	r3, r3, #1
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d01f      	beq.n	800c83e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	f003 0304 	and.w	r3, r3, #4
 800c806:	2b00      	cmp	r3, #0
 800c808:	d010      	beq.n	800c82c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c80a:	4b1e      	ldr	r3, [pc, #120]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c80c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c810:	4a1c      	ldr	r2, [pc, #112]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c812:	f043 0304 	orr.w	r3, r3, #4
 800c816:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c81a:	4b1a      	ldr	r3, [pc, #104]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c81c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c820:	4a18      	ldr	r2, [pc, #96]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c822:	f043 0301 	orr.w	r3, r3, #1
 800c826:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c82a:	e018      	b.n	800c85e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c82c:	4b15      	ldr	r3, [pc, #84]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c82e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c832:	4a14      	ldr	r2, [pc, #80]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c834:	f043 0301 	orr.w	r3, r3, #1
 800c838:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800c83c:	e00f      	b.n	800c85e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c83e:	4b11      	ldr	r3, [pc, #68]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c844:	4a0f      	ldr	r2, [pc, #60]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c846:	f023 0301 	bic.w	r3, r3, #1
 800c84a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c84e:	4b0d      	ldr	r3, [pc, #52]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c854:	4a0b      	ldr	r2, [pc, #44]	; (800c884 <HAL_RCC_OscConfig+0x7b8>)
 800c856:	f023 0304 	bic.w	r3, r3, #4
 800c85a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d057      	beq.n	800c916 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800c866:	f7fb f8c9 	bl	80079fc <HAL_GetTick>
 800c86a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c86c:	e00e      	b.n	800c88c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c86e:	f7fb f8c5 	bl	80079fc <HAL_GetTick>
 800c872:	4602      	mov	r2, r0
 800c874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c876:	1ad3      	subs	r3, r2, r3
 800c878:	f241 3288 	movw	r2, #5000	; 0x1388
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d905      	bls.n	800c88c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800c880:	2303      	movs	r3, #3
 800c882:	e2f8      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
 800c884:	46020c00 	.word	0x46020c00
 800c888:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c88c:	4b9c      	ldr	r3, [pc, #624]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c88e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c892:	f003 0302 	and.w	r3, r3, #2
 800c896:	2b00      	cmp	r3, #0
 800c898:	d0e9      	beq.n	800c86e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d01b      	beq.n	800c8de <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c8a6:	4b96      	ldr	r3, [pc, #600]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c8a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c8ac:	4a94      	ldr	r2, [pc, #592]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c8ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c8b6:	e00a      	b.n	800c8ce <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8b8:	f7fb f8a0 	bl	80079fc <HAL_GetTick>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c0:	1ad3      	subs	r3, r2, r3
 800c8c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d901      	bls.n	800c8ce <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800c8ca:	2303      	movs	r3, #3
 800c8cc:	e2d3      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800c8ce:	4b8c      	ldr	r3, [pc, #560]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c8d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c8d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d0ed      	beq.n	800c8b8 <HAL_RCC_OscConfig+0x7ec>
 800c8dc:	e053      	b.n	800c986 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c8de:	4b88      	ldr	r3, [pc, #544]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c8e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c8e4:	4a86      	ldr	r2, [pc, #536]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c8e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c8ee:	e00a      	b.n	800c906 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8f0:	f7fb f884 	bl	80079fc <HAL_GetTick>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f8:	1ad3      	subs	r3, r2, r3
 800c8fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d901      	bls.n	800c906 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800c902:	2303      	movs	r3, #3
 800c904:	e2b7      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c906:	4b7e      	ldr	r3, [pc, #504]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c90c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c910:	2b00      	cmp	r3, #0
 800c912:	d1ed      	bne.n	800c8f0 <HAL_RCC_OscConfig+0x824>
 800c914:	e037      	b.n	800c986 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800c916:	f7fb f871 	bl	80079fc <HAL_GetTick>
 800c91a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c91c:	e00a      	b.n	800c934 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c91e:	f7fb f86d 	bl	80079fc <HAL_GetTick>
 800c922:	4602      	mov	r2, r0
 800c924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c926:	1ad3      	subs	r3, r2, r3
 800c928:	f241 3288 	movw	r2, #5000	; 0x1388
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d901      	bls.n	800c934 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800c930:	2303      	movs	r3, #3
 800c932:	e2a0      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c934:	4b72      	ldr	r3, [pc, #456]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c936:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c93a:	f003 0302 	and.w	r3, r3, #2
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1ed      	bne.n	800c91e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800c942:	4b6f      	ldr	r3, [pc, #444]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d01a      	beq.n	800c986 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800c950:	4b6b      	ldr	r3, [pc, #428]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c956:	4a6a      	ldr	r2, [pc, #424]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c95c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c960:	e00a      	b.n	800c978 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c962:	f7fb f84b 	bl	80079fc <HAL_GetTick>
 800c966:	4602      	mov	r2, r0
 800c968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96a:	1ad3      	subs	r3, r2, r3
 800c96c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c970:	4293      	cmp	r3, r2
 800c972:	d901      	bls.n	800c978 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800c974:	2303      	movs	r3, #3
 800c976:	e27e      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800c978:	4b61      	ldr	r3, [pc, #388]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c97a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c97e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1ed      	bne.n	800c962 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c986:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d107      	bne.n	800c99e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c98e:	4b5c      	ldr	r3, [pc, #368]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c994:	4a5a      	ldr	r2, [pc, #360]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c996:	f023 0304 	bic.w	r3, r3, #4
 800c99a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f003 0320 	and.w	r3, r3, #32
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d036      	beq.n	800ca18 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d019      	beq.n	800c9e6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800c9b2:	4b53      	ldr	r3, [pc, #332]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a52      	ldr	r2, [pc, #328]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c9b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c9bc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c9be:	f7fb f81d 	bl	80079fc <HAL_GetTick>
 800c9c2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c9c4:	e008      	b.n	800c9d8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c9c6:	f7fb f819 	bl	80079fc <HAL_GetTick>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ce:	1ad3      	subs	r3, r2, r3
 800c9d0:	2b02      	cmp	r3, #2
 800c9d2:	d901      	bls.n	800c9d8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800c9d4:	2303      	movs	r3, #3
 800c9d6:	e24e      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800c9d8:	4b49      	ldr	r3, [pc, #292]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d0f0      	beq.n	800c9c6 <HAL_RCC_OscConfig+0x8fa>
 800c9e4:	e018      	b.n	800ca18 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800c9e6:	4b46      	ldr	r3, [pc, #280]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a45      	ldr	r2, [pc, #276]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800c9ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c9f0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800c9f2:	f7fb f803 	bl	80079fc <HAL_GetTick>
 800c9f6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800c9f8:	e008      	b.n	800ca0c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c9fa:	f7fa ffff 	bl	80079fc <HAL_GetTick>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca02:	1ad3      	subs	r3, r2, r3
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d901      	bls.n	800ca0c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800ca08:	2303      	movs	r3, #3
 800ca0a:	e234      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800ca0c:	4b3c      	ldr	r3, [pc, #240]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d1f0      	bne.n	800c9fa <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d036      	beq.n	800ca92 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d019      	beq.n	800ca60 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800ca2c:	4b34      	ldr	r3, [pc, #208]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a33      	ldr	r2, [pc, #204]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800ca32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ca36:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ca38:	f7fa ffe0 	bl	80079fc <HAL_GetTick>
 800ca3c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800ca3e:	e008      	b.n	800ca52 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800ca40:	f7fa ffdc 	bl	80079fc <HAL_GetTick>
 800ca44:	4602      	mov	r2, r0
 800ca46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	2b02      	cmp	r3, #2
 800ca4c:	d901      	bls.n	800ca52 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800ca4e:	2303      	movs	r3, #3
 800ca50:	e211      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800ca52:	4b2b      	ldr	r3, [pc, #172]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d0f0      	beq.n	800ca40 <HAL_RCC_OscConfig+0x974>
 800ca5e:	e018      	b.n	800ca92 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800ca60:	4b27      	ldr	r3, [pc, #156]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a26      	ldr	r2, [pc, #152]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800ca66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca6a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800ca6c:	f7fa ffc6 	bl	80079fc <HAL_GetTick>
 800ca70:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800ca72:	e008      	b.n	800ca86 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800ca74:	f7fa ffc2 	bl	80079fc <HAL_GetTick>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d901      	bls.n	800ca86 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800ca82:	2303      	movs	r3, #3
 800ca84:	e1f7      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800ca86:	4b1e      	ldr	r3, [pc, #120]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d1f0      	bne.n	800ca74 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d07f      	beq.n	800cb9e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d062      	beq.n	800cb6c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800caa6:	4b16      	ldr	r3, [pc, #88]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800caa8:	689b      	ldr	r3, [r3, #8]
 800caaa:	4a15      	ldr	r2, [pc, #84]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800caac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cab0:	6093      	str	r3, [r2, #8]
 800cab2:	4b13      	ldr	r3, [pc, #76]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cabe:	4910      	ldr	r1, [pc, #64]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800cac0:	4313      	orrs	r3, r2
 800cac2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800cacc:	d309      	bcc.n	800cae2 <HAL_RCC_OscConfig+0xa16>
 800cace:	4b0c      	ldr	r3, [pc, #48]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	f023 021f 	bic.w	r2, r3, #31
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6a1b      	ldr	r3, [r3, #32]
 800cada:	4909      	ldr	r1, [pc, #36]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800cadc:	4313      	orrs	r3, r2
 800cade:	60cb      	str	r3, [r1, #12]
 800cae0:	e02a      	b.n	800cb38 <HAL_RCC_OscConfig+0xa6c>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	da0c      	bge.n	800cb04 <HAL_RCC_OscConfig+0xa38>
 800caea:	4b05      	ldr	r3, [pc, #20]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6a1b      	ldr	r3, [r3, #32]
 800caf6:	015b      	lsls	r3, r3, #5
 800caf8:	4901      	ldr	r1, [pc, #4]	; (800cb00 <HAL_RCC_OscConfig+0xa34>)
 800cafa:	4313      	orrs	r3, r2
 800cafc:	60cb      	str	r3, [r1, #12]
 800cafe:	e01b      	b.n	800cb38 <HAL_RCC_OscConfig+0xa6c>
 800cb00:	46020c00 	.word	0x46020c00
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb0c:	d30a      	bcc.n	800cb24 <HAL_RCC_OscConfig+0xa58>
 800cb0e:	4ba1      	ldr	r3, [pc, #644]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cb10:	68db      	ldr	r3, [r3, #12]
 800cb12:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6a1b      	ldr	r3, [r3, #32]
 800cb1a:	029b      	lsls	r3, r3, #10
 800cb1c:	499d      	ldr	r1, [pc, #628]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	60cb      	str	r3, [r1, #12]
 800cb22:	e009      	b.n	800cb38 <HAL_RCC_OscConfig+0xa6c>
 800cb24:	4b9b      	ldr	r3, [pc, #620]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6a1b      	ldr	r3, [r3, #32]
 800cb30:	03db      	lsls	r3, r3, #15
 800cb32:	4998      	ldr	r1, [pc, #608]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cb34:	4313      	orrs	r3, r2
 800cb36:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800cb38:	4b96      	ldr	r3, [pc, #600]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a95      	ldr	r2, [pc, #596]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cb3e:	f043 0310 	orr.w	r3, r3, #16
 800cb42:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cb44:	f7fa ff5a 	bl	80079fc <HAL_GetTick>
 800cb48:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800cb4a:	e008      	b.n	800cb5e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800cb4c:	f7fa ff56 	bl	80079fc <HAL_GetTick>
 800cb50:	4602      	mov	r2, r0
 800cb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb54:	1ad3      	subs	r3, r2, r3
 800cb56:	2b02      	cmp	r3, #2
 800cb58:	d901      	bls.n	800cb5e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	e18b      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800cb5e:	4b8d      	ldr	r3, [pc, #564]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f003 0320 	and.w	r3, r3, #32
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d0f0      	beq.n	800cb4c <HAL_RCC_OscConfig+0xa80>
 800cb6a:	e018      	b.n	800cb9e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800cb6c:	4b89      	ldr	r3, [pc, #548]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a88      	ldr	r2, [pc, #544]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cb72:	f023 0310 	bic.w	r3, r3, #16
 800cb76:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800cb78:	f7fa ff40 	bl	80079fc <HAL_GetTick>
 800cb7c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800cb7e:	e008      	b.n	800cb92 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800cb80:	f7fa ff3c 	bl	80079fc <HAL_GetTick>
 800cb84:	4602      	mov	r2, r0
 800cb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb88:	1ad3      	subs	r3, r2, r3
 800cb8a:	2b02      	cmp	r3, #2
 800cb8c:	d901      	bls.n	800cb92 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800cb8e:	2303      	movs	r3, #3
 800cb90:	e171      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800cb92:	4b80      	ldr	r3, [pc, #512]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f003 0320 	and.w	r3, r3, #32
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d1f0      	bne.n	800cb80 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f000 8166 	beq.w	800ce74 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cbae:	4b79      	ldr	r3, [pc, #484]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cbb0:	69db      	ldr	r3, [r3, #28]
 800cbb2:	f003 030c 	and.w	r3, r3, #12
 800cbb6:	2b0c      	cmp	r3, #12
 800cbb8:	f000 80f2 	beq.w	800cda0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc0:	2b02      	cmp	r3, #2
 800cbc2:	f040 80c5 	bne.w	800cd50 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800cbc6:	4b73      	ldr	r3, [pc, #460]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4a72      	ldr	r2, [pc, #456]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cbcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cbd0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cbd2:	f7fa ff13 	bl	80079fc <HAL_GetTick>
 800cbd6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800cbd8:	e008      	b.n	800cbec <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cbda:	f7fa ff0f 	bl	80079fc <HAL_GetTick>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	2b02      	cmp	r3, #2
 800cbe6:	d901      	bls.n	800cbec <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800cbe8:	2303      	movs	r3, #3
 800cbea:	e144      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800cbec:	4b69      	ldr	r3, [pc, #420]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d1f0      	bne.n	800cbda <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cbf8:	4b66      	ldr	r3, [pc, #408]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cbfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cbfe:	f003 0304 	and.w	r3, r3, #4
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d111      	bne.n	800cc2a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800cc06:	4b63      	ldr	r3, [pc, #396]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cc08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc0c:	4a61      	ldr	r2, [pc, #388]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cc0e:	f043 0304 	orr.w	r3, r3, #4
 800cc12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800cc16:	4b5f      	ldr	r3, [pc, #380]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cc18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc1c:	f003 0304 	and.w	r3, r3, #4
 800cc20:	60fb      	str	r3, [r7, #12]
 800cc22:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800cc24:	2301      	movs	r3, #1
 800cc26:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800cc2a:	4b5b      	ldr	r3, [pc, #364]	; (800cd98 <HAL_RCC_OscConfig+0xccc>)
 800cc2c:	68db      	ldr	r3, [r3, #12]
 800cc2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cc36:	d102      	bne.n	800cc3e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800cc3e:	4b56      	ldr	r3, [pc, #344]	; (800cd98 <HAL_RCC_OscConfig+0xccc>)
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	4a55      	ldr	r2, [pc, #340]	; (800cd98 <HAL_RCC_OscConfig+0xccc>)
 800cc44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc48:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800cc4a:	4b52      	ldr	r3, [pc, #328]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cc4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cc52:	f023 0303 	bic.w	r3, r3, #3
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800cc5e:	3a01      	subs	r2, #1
 800cc60:	0212      	lsls	r2, r2, #8
 800cc62:	4311      	orrs	r1, r2
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800cc68:	430a      	orrs	r2, r1
 800cc6a:	494a      	ldr	r1, [pc, #296]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	628b      	str	r3, [r1, #40]	; 0x28
 800cc70:	4b48      	ldr	r3, [pc, #288]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cc72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc74:	4b49      	ldr	r3, [pc, #292]	; (800cd9c <HAL_RCC_OscConfig+0xcd0>)
 800cc76:	4013      	ands	r3, r2
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cc7c:	3a01      	subs	r2, #1
 800cc7e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800cc86:	3a01      	subs	r2, #1
 800cc88:	0252      	lsls	r2, r2, #9
 800cc8a:	b292      	uxth	r2, r2
 800cc8c:	4311      	orrs	r1, r2
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800cc92:	3a01      	subs	r2, #1
 800cc94:	0412      	lsls	r2, r2, #16
 800cc96:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800cc9a:	4311      	orrs	r1, r2
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800cca0:	3a01      	subs	r2, #1
 800cca2:	0612      	lsls	r2, r2, #24
 800cca4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800cca8:	430a      	orrs	r2, r1
 800ccaa:	493a      	ldr	r1, [pc, #232]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800ccac:	4313      	orrs	r3, r2
 800ccae:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800ccb0:	4b38      	ldr	r3, [pc, #224]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800ccb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb4:	4a37      	ldr	r2, [pc, #220]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800ccb6:	f023 0310 	bic.w	r3, r3, #16
 800ccba:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccc0:	4a34      	ldr	r2, [pc, #208]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800ccc2:	00db      	lsls	r3, r3, #3
 800ccc4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800ccc6:	4b33      	ldr	r3, [pc, #204]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800ccc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccca:	4a32      	ldr	r2, [pc, #200]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cccc:	f043 0310 	orr.w	r3, r3, #16
 800ccd0:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800ccd2:	4b30      	ldr	r3, [pc, #192]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800ccd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd6:	f023 020c 	bic.w	r2, r3, #12
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccde:	492d      	ldr	r1, [pc, #180]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cce0:	4313      	orrs	r3, r2
 800cce2:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800cce4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d105      	bne.n	800ccf8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800ccec:	4b2a      	ldr	r3, [pc, #168]	; (800cd98 <HAL_RCC_OscConfig+0xccc>)
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	4a29      	ldr	r2, [pc, #164]	; (800cd98 <HAL_RCC_OscConfig+0xccc>)
 800ccf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ccf6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800ccf8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d107      	bne.n	800cd10 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800cd00:	4b24      	ldr	r3, [pc, #144]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cd02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd06:	4a23      	ldr	r2, [pc, #140]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cd08:	f023 0304 	bic.w	r3, r3, #4
 800cd0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800cd10:	4b20      	ldr	r3, [pc, #128]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cd12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd14:	4a1f      	ldr	r2, [pc, #124]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cd16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cd1a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800cd1c:	4b1d      	ldr	r3, [pc, #116]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a1c      	ldr	r2, [pc, #112]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cd22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cd26:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cd28:	f7fa fe68 	bl	80079fc <HAL_GetTick>
 800cd2c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800cd2e:	e008      	b.n	800cd42 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd30:	f7fa fe64 	bl	80079fc <HAL_GetTick>
 800cd34:	4602      	mov	r2, r0
 800cd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd38:	1ad3      	subs	r3, r2, r3
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	d901      	bls.n	800cd42 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800cd3e:	2303      	movs	r3, #3
 800cd40:	e099      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800cd42:	4b14      	ldr	r3, [pc, #80]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d0f0      	beq.n	800cd30 <HAL_RCC_OscConfig+0xc64>
 800cd4e:	e091      	b.n	800ce74 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800cd50:	4b10      	ldr	r3, [pc, #64]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a0f      	ldr	r2, [pc, #60]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cd56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cd5a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800cd5c:	f7fa fe4e 	bl	80079fc <HAL_GetTick>
 800cd60:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800cd62:	e008      	b.n	800cd76 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd64:	f7fa fe4a 	bl	80079fc <HAL_GetTick>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d901      	bls.n	800cd76 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800cd72:	2303      	movs	r3, #3
 800cd74:	e07f      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800cd76:	4b07      	ldr	r3, [pc, #28]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d1f0      	bne.n	800cd64 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800cd82:	4b04      	ldr	r3, [pc, #16]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cd84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd86:	4a03      	ldr	r2, [pc, #12]	; (800cd94 <HAL_RCC_OscConfig+0xcc8>)
 800cd88:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800cd8c:	f023 0303 	bic.w	r3, r3, #3
 800cd90:	6293      	str	r3, [r2, #40]	; 0x28
 800cd92:	e06f      	b.n	800ce74 <HAL_RCC_OscConfig+0xda8>
 800cd94:	46020c00 	.word	0x46020c00
 800cd98:	46020800 	.word	0x46020800
 800cd9c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800cda0:	4b37      	ldr	r3, [pc, #220]	; (800ce80 <HAL_RCC_OscConfig+0xdb4>)
 800cda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800cda6:	4b36      	ldr	r3, [pc, #216]	; (800ce80 <HAL_RCC_OscConfig+0xdb4>)
 800cda8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdaa:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d039      	beq.n	800ce28 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	f003 0203 	and.w	r2, r3, #3
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d132      	bne.n	800ce28 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	0a1b      	lsrs	r3, r3, #8
 800cdc6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdce:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d129      	bne.n	800ce28 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d122      	bne.n	800ce28 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdec:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d11a      	bne.n	800ce28 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	0a5b      	lsrs	r3, r3, #9
 800cdf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdfe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d111      	bne.n	800ce28 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800ce04:	69bb      	ldr	r3, [r7, #24]
 800ce06:	0c1b      	lsrs	r3, r3, #16
 800ce08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce10:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d108      	bne.n	800ce28 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800ce16:	69bb      	ldr	r3, [r7, #24]
 800ce18:	0e1b      	lsrs	r3, r3, #24
 800ce1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce22:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d001      	beq.n	800ce2c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	e024      	b.n	800ce76 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800ce2c:	4b14      	ldr	r3, [pc, #80]	; (800ce80 <HAL_RCC_OscConfig+0xdb4>)
 800ce2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce30:	08db      	lsrs	r3, r3, #3
 800ce32:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d01a      	beq.n	800ce74 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800ce3e:	4b10      	ldr	r3, [pc, #64]	; (800ce80 <HAL_RCC_OscConfig+0xdb4>)
 800ce40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce42:	4a0f      	ldr	r2, [pc, #60]	; (800ce80 <HAL_RCC_OscConfig+0xdb4>)
 800ce44:	f023 0310 	bic.w	r3, r3, #16
 800ce48:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce4a:	f7fa fdd7 	bl	80079fc <HAL_GetTick>
 800ce4e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800ce50:	bf00      	nop
 800ce52:	f7fa fdd3 	bl	80079fc <HAL_GetTick>
 800ce56:	4602      	mov	r2, r0
 800ce58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d0f9      	beq.n	800ce52 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce62:	4a07      	ldr	r2, [pc, #28]	; (800ce80 <HAL_RCC_OscConfig+0xdb4>)
 800ce64:	00db      	lsls	r3, r3, #3
 800ce66:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800ce68:	4b05      	ldr	r3, [pc, #20]	; (800ce80 <HAL_RCC_OscConfig+0xdb4>)
 800ce6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce6c:	4a04      	ldr	r2, [pc, #16]	; (800ce80 <HAL_RCC_OscConfig+0xdb4>)
 800ce6e:	f043 0310 	orr.w	r3, r3, #16
 800ce72:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3738      	adds	r7, #56	; 0x38
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	46020c00 	.word	0x46020c00

0800ce84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b086      	sub	sp, #24
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d101      	bne.n	800ce98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ce94:	2301      	movs	r3, #1
 800ce96:	e1d9      	b.n	800d24c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ce98:	4b9b      	ldr	r3, [pc, #620]	; (800d108 <HAL_RCC_ClockConfig+0x284>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f003 030f 	and.w	r3, r3, #15
 800cea0:	683a      	ldr	r2, [r7, #0]
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d910      	bls.n	800cec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cea6:	4b98      	ldr	r3, [pc, #608]	; (800d108 <HAL_RCC_ClockConfig+0x284>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f023 020f 	bic.w	r2, r3, #15
 800ceae:	4996      	ldr	r1, [pc, #600]	; (800d108 <HAL_RCC_ClockConfig+0x284>)
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ceb6:	4b94      	ldr	r3, [pc, #592]	; (800d108 <HAL_RCC_ClockConfig+0x284>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 030f 	and.w	r3, r3, #15
 800cebe:	683a      	ldr	r2, [r7, #0]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d001      	beq.n	800cec8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cec4:	2301      	movs	r3, #1
 800cec6:	e1c1      	b.n	800d24c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f003 0310 	and.w	r3, r3, #16
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d010      	beq.n	800cef6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	695a      	ldr	r2, [r3, #20]
 800ced8:	4b8c      	ldr	r3, [pc, #560]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800ceda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cedc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d908      	bls.n	800cef6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800cee4:	4b89      	ldr	r3, [pc, #548]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800cee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	695b      	ldr	r3, [r3, #20]
 800cef0:	4986      	ldr	r1, [pc, #536]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800cef2:	4313      	orrs	r3, r2
 800cef4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f003 0308 	and.w	r3, r3, #8
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d012      	beq.n	800cf28 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	691a      	ldr	r2, [r3, #16]
 800cf06:	4b81      	ldr	r3, [pc, #516]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800cf08:	6a1b      	ldr	r3, [r3, #32]
 800cf0a:	091b      	lsrs	r3, r3, #4
 800cf0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d909      	bls.n	800cf28 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800cf14:	4b7d      	ldr	r3, [pc, #500]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800cf16:	6a1b      	ldr	r3, [r3, #32]
 800cf18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	691b      	ldr	r3, [r3, #16]
 800cf20:	011b      	lsls	r3, r3, #4
 800cf22:	497a      	ldr	r1, [pc, #488]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800cf24:	4313      	orrs	r3, r2
 800cf26:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f003 0304 	and.w	r3, r3, #4
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d010      	beq.n	800cf56 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	68da      	ldr	r2, [r3, #12]
 800cf38:	4b74      	ldr	r3, [pc, #464]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800cf3a:	6a1b      	ldr	r3, [r3, #32]
 800cf3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d908      	bls.n	800cf56 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800cf44:	4b71      	ldr	r3, [pc, #452]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800cf46:	6a1b      	ldr	r3, [r3, #32]
 800cf48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	68db      	ldr	r3, [r3, #12]
 800cf50:	496e      	ldr	r1, [pc, #440]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800cf52:	4313      	orrs	r3, r2
 800cf54:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f003 0302 	and.w	r3, r3, #2
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d010      	beq.n	800cf84 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	689a      	ldr	r2, [r3, #8]
 800cf66:	4b69      	ldr	r3, [pc, #420]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800cf68:	6a1b      	ldr	r3, [r3, #32]
 800cf6a:	f003 030f 	and.w	r3, r3, #15
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d908      	bls.n	800cf84 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800cf72:	4b66      	ldr	r3, [pc, #408]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800cf74:	6a1b      	ldr	r3, [r3, #32]
 800cf76:	f023 020f 	bic.w	r2, r3, #15
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	4963      	ldr	r1, [pc, #396]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800cf80:	4313      	orrs	r3, r2
 800cf82:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f003 0301 	and.w	r3, r3, #1
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f000 80d2 	beq.w	800d136 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800cf92:	2300      	movs	r3, #0
 800cf94:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	d143      	bne.n	800d026 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cf9e:	4b5b      	ldr	r3, [pc, #364]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800cfa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfa4:	f003 0304 	and.w	r3, r3, #4
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d110      	bne.n	800cfce <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800cfac:	4b57      	ldr	r3, [pc, #348]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800cfae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfb2:	4a56      	ldr	r2, [pc, #344]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800cfb4:	f043 0304 	orr.w	r3, r3, #4
 800cfb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800cfbc:	4b53      	ldr	r3, [pc, #332]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800cfbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfc2:	f003 0304 	and.w	r3, r3, #4
 800cfc6:	60bb      	str	r3, [r7, #8]
 800cfc8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800cfce:	f7fa fd15 	bl	80079fc <HAL_GetTick>
 800cfd2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800cfd4:	4b4e      	ldr	r3, [pc, #312]	; (800d110 <HAL_RCC_ClockConfig+0x28c>)
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d00f      	beq.n	800d000 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800cfe0:	e008      	b.n	800cff4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800cfe2:	f7fa fd0b 	bl	80079fc <HAL_GetTick>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	2b02      	cmp	r3, #2
 800cfee:	d901      	bls.n	800cff4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800cff0:	2303      	movs	r3, #3
 800cff2:	e12b      	b.n	800d24c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800cff4:	4b46      	ldr	r3, [pc, #280]	; (800d110 <HAL_RCC_ClockConfig+0x28c>)
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d0f0      	beq.n	800cfe2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800d000:	7dfb      	ldrb	r3, [r7, #23]
 800d002:	2b01      	cmp	r3, #1
 800d004:	d107      	bne.n	800d016 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800d006:	4b41      	ldr	r3, [pc, #260]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800d008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d00c:	4a3f      	ldr	r2, [pc, #252]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800d00e:	f023 0304 	bic.w	r3, r3, #4
 800d012:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800d016:	4b3d      	ldr	r3, [pc, #244]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d121      	bne.n	800d066 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800d022:	2301      	movs	r3, #1
 800d024:	e112      	b.n	800d24c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	2b02      	cmp	r3, #2
 800d02c:	d107      	bne.n	800d03e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d02e:	4b37      	ldr	r3, [pc, #220]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d036:	2b00      	cmp	r3, #0
 800d038:	d115      	bne.n	800d066 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d03a:	2301      	movs	r3, #1
 800d03c:	e106      	b.n	800d24c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d107      	bne.n	800d056 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800d046:	4b31      	ldr	r3, [pc, #196]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f003 0304 	and.w	r3, r3, #4
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d109      	bne.n	800d066 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d052:	2301      	movs	r3, #1
 800d054:	e0fa      	b.n	800d24c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d056:	4b2d      	ldr	r3, [pc, #180]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d101      	bne.n	800d066 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800d062:	2301      	movs	r3, #1
 800d064:	e0f2      	b.n	800d24c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800d066:	4b29      	ldr	r3, [pc, #164]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800d068:	69db      	ldr	r3, [r3, #28]
 800d06a:	f023 0203 	bic.w	r2, r3, #3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	4926      	ldr	r1, [pc, #152]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800d074:	4313      	orrs	r3, r2
 800d076:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800d078:	f7fa fcc0 	bl	80079fc <HAL_GetTick>
 800d07c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	2b03      	cmp	r3, #3
 800d084:	d112      	bne.n	800d0ac <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d086:	e00a      	b.n	800d09e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d088:	f7fa fcb8 	bl	80079fc <HAL_GetTick>
 800d08c:	4602      	mov	r2, r0
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	1ad3      	subs	r3, r2, r3
 800d092:	f241 3288 	movw	r2, #5000	; 0x1388
 800d096:	4293      	cmp	r3, r2
 800d098:	d901      	bls.n	800d09e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800d09a:	2303      	movs	r3, #3
 800d09c:	e0d6      	b.n	800d24c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d09e:	4b1b      	ldr	r3, [pc, #108]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800d0a0:	69db      	ldr	r3, [r3, #28]
 800d0a2:	f003 030c 	and.w	r3, r3, #12
 800d0a6:	2b0c      	cmp	r3, #12
 800d0a8:	d1ee      	bne.n	800d088 <HAL_RCC_ClockConfig+0x204>
 800d0aa:	e044      	b.n	800d136 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	2b02      	cmp	r3, #2
 800d0b2:	d112      	bne.n	800d0da <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d0b4:	e00a      	b.n	800d0cc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d0b6:	f7fa fca1 	bl	80079fc <HAL_GetTick>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	1ad3      	subs	r3, r2, r3
 800d0c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d901      	bls.n	800d0cc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d0c8:	2303      	movs	r3, #3
 800d0ca:	e0bf      	b.n	800d24c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d0cc:	4b0f      	ldr	r3, [pc, #60]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800d0ce:	69db      	ldr	r3, [r3, #28]
 800d0d0:	f003 030c 	and.w	r3, r3, #12
 800d0d4:	2b08      	cmp	r3, #8
 800d0d6:	d1ee      	bne.n	800d0b6 <HAL_RCC_ClockConfig+0x232>
 800d0d8:	e02d      	b.n	800d136 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d123      	bne.n	800d12a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d0e2:	e00a      	b.n	800d0fa <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d0e4:	f7fa fc8a 	bl	80079fc <HAL_GetTick>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	1ad3      	subs	r3, r2, r3
 800d0ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d901      	bls.n	800d0fa <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800d0f6:	2303      	movs	r3, #3
 800d0f8:	e0a8      	b.n	800d24c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d0fa:	4b04      	ldr	r3, [pc, #16]	; (800d10c <HAL_RCC_ClockConfig+0x288>)
 800d0fc:	69db      	ldr	r3, [r3, #28]
 800d0fe:	f003 030c 	and.w	r3, r3, #12
 800d102:	2b00      	cmp	r3, #0
 800d104:	d1ee      	bne.n	800d0e4 <HAL_RCC_ClockConfig+0x260>
 800d106:	e016      	b.n	800d136 <HAL_RCC_ClockConfig+0x2b2>
 800d108:	40022000 	.word	0x40022000
 800d10c:	46020c00 	.word	0x46020c00
 800d110:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d114:	f7fa fc72 	bl	80079fc <HAL_GetTick>
 800d118:	4602      	mov	r2, r0
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	1ad3      	subs	r3, r2, r3
 800d11e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d122:	4293      	cmp	r3, r2
 800d124:	d901      	bls.n	800d12a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800d126:	2303      	movs	r3, #3
 800d128:	e090      	b.n	800d24c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d12a:	4b4a      	ldr	r3, [pc, #296]	; (800d254 <HAL_RCC_ClockConfig+0x3d0>)
 800d12c:	69db      	ldr	r3, [r3, #28]
 800d12e:	f003 030c 	and.w	r3, r3, #12
 800d132:	2b04      	cmp	r3, #4
 800d134:	d1ee      	bne.n	800d114 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f003 0302 	and.w	r3, r3, #2
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d010      	beq.n	800d164 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	689a      	ldr	r2, [r3, #8]
 800d146:	4b43      	ldr	r3, [pc, #268]	; (800d254 <HAL_RCC_ClockConfig+0x3d0>)
 800d148:	6a1b      	ldr	r3, [r3, #32]
 800d14a:	f003 030f 	and.w	r3, r3, #15
 800d14e:	429a      	cmp	r2, r3
 800d150:	d208      	bcs.n	800d164 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800d152:	4b40      	ldr	r3, [pc, #256]	; (800d254 <HAL_RCC_ClockConfig+0x3d0>)
 800d154:	6a1b      	ldr	r3, [r3, #32]
 800d156:	f023 020f 	bic.w	r2, r3, #15
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	493d      	ldr	r1, [pc, #244]	; (800d254 <HAL_RCC_ClockConfig+0x3d0>)
 800d160:	4313      	orrs	r3, r2
 800d162:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d164:	4b3c      	ldr	r3, [pc, #240]	; (800d258 <HAL_RCC_ClockConfig+0x3d4>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f003 030f 	and.w	r3, r3, #15
 800d16c:	683a      	ldr	r2, [r7, #0]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d210      	bcs.n	800d194 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d172:	4b39      	ldr	r3, [pc, #228]	; (800d258 <HAL_RCC_ClockConfig+0x3d4>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f023 020f 	bic.w	r2, r3, #15
 800d17a:	4937      	ldr	r1, [pc, #220]	; (800d258 <HAL_RCC_ClockConfig+0x3d4>)
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	4313      	orrs	r3, r2
 800d180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d182:	4b35      	ldr	r3, [pc, #212]	; (800d258 <HAL_RCC_ClockConfig+0x3d4>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f003 030f 	and.w	r3, r3, #15
 800d18a:	683a      	ldr	r2, [r7, #0]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d001      	beq.n	800d194 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800d190:	2301      	movs	r3, #1
 800d192:	e05b      	b.n	800d24c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f003 0304 	and.w	r3, r3, #4
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d010      	beq.n	800d1c2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	68da      	ldr	r2, [r3, #12]
 800d1a4:	4b2b      	ldr	r3, [pc, #172]	; (800d254 <HAL_RCC_ClockConfig+0x3d0>)
 800d1a6:	6a1b      	ldr	r3, [r3, #32]
 800d1a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d208      	bcs.n	800d1c2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800d1b0:	4b28      	ldr	r3, [pc, #160]	; (800d254 <HAL_RCC_ClockConfig+0x3d0>)
 800d1b2:	6a1b      	ldr	r3, [r3, #32]
 800d1b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	4925      	ldr	r1, [pc, #148]	; (800d254 <HAL_RCC_ClockConfig+0x3d0>)
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f003 0308 	and.w	r3, r3, #8
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d012      	beq.n	800d1f4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	691a      	ldr	r2, [r3, #16]
 800d1d2:	4b20      	ldr	r3, [pc, #128]	; (800d254 <HAL_RCC_ClockConfig+0x3d0>)
 800d1d4:	6a1b      	ldr	r3, [r3, #32]
 800d1d6:	091b      	lsrs	r3, r3, #4
 800d1d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d209      	bcs.n	800d1f4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800d1e0:	4b1c      	ldr	r3, [pc, #112]	; (800d254 <HAL_RCC_ClockConfig+0x3d0>)
 800d1e2:	6a1b      	ldr	r3, [r3, #32]
 800d1e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	691b      	ldr	r3, [r3, #16]
 800d1ec:	011b      	lsls	r3, r3, #4
 800d1ee:	4919      	ldr	r1, [pc, #100]	; (800d254 <HAL_RCC_ClockConfig+0x3d0>)
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f003 0310 	and.w	r3, r3, #16
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d010      	beq.n	800d222 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	695a      	ldr	r2, [r3, #20]
 800d204:	4b13      	ldr	r3, [pc, #76]	; (800d254 <HAL_RCC_ClockConfig+0x3d0>)
 800d206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d208:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d208      	bcs.n	800d222 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800d210:	4b10      	ldr	r3, [pc, #64]	; (800d254 <HAL_RCC_ClockConfig+0x3d0>)
 800d212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d214:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	695b      	ldr	r3, [r3, #20]
 800d21c:	490d      	ldr	r1, [pc, #52]	; (800d254 <HAL_RCC_ClockConfig+0x3d0>)
 800d21e:	4313      	orrs	r3, r2
 800d220:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d222:	f000 f821 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 800d226:	4602      	mov	r2, r0
 800d228:	4b0a      	ldr	r3, [pc, #40]	; (800d254 <HAL_RCC_ClockConfig+0x3d0>)
 800d22a:	6a1b      	ldr	r3, [r3, #32]
 800d22c:	f003 030f 	and.w	r3, r3, #15
 800d230:	490a      	ldr	r1, [pc, #40]	; (800d25c <HAL_RCC_ClockConfig+0x3d8>)
 800d232:	5ccb      	ldrb	r3, [r1, r3]
 800d234:	fa22 f303 	lsr.w	r3, r2, r3
 800d238:	4a09      	ldr	r2, [pc, #36]	; (800d260 <HAL_RCC_ClockConfig+0x3dc>)
 800d23a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d23c:	4b09      	ldr	r3, [pc, #36]	; (800d264 <HAL_RCC_ClockConfig+0x3e0>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4618      	mov	r0, r3
 800d242:	f7f4 fe65 	bl	8001f10 <HAL_InitTick>
 800d246:	4603      	mov	r3, r0
 800d248:	73fb      	strb	r3, [r7, #15]

  return status;
 800d24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3718      	adds	r7, #24
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}
 800d254:	46020c00 	.word	0x46020c00
 800d258:	40022000 	.word	0x40022000
 800d25c:	0802b990 	.word	0x0802b990
 800d260:	20000048 	.word	0x20000048
 800d264:	2000004c 	.word	0x2000004c

0800d268 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d268:	b480      	push	{r7}
 800d26a:	b08b      	sub	sp, #44	; 0x2c
 800d26c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800d26e:	2300      	movs	r3, #0
 800d270:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800d272:	2300      	movs	r3, #0
 800d274:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d276:	4b7b      	ldr	r3, [pc, #492]	; (800d464 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d278:	69db      	ldr	r3, [r3, #28]
 800d27a:	f003 030c 	and.w	r3, r3, #12
 800d27e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d280:	4b78      	ldr	r3, [pc, #480]	; (800d464 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d284:	f003 0303 	and.w	r3, r3, #3
 800d288:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d005      	beq.n	800d29c <HAL_RCC_GetSysClockFreq+0x34>
 800d290:	69bb      	ldr	r3, [r7, #24]
 800d292:	2b0c      	cmp	r3, #12
 800d294:	d121      	bne.n	800d2da <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d11e      	bne.n	800d2da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800d29c:	4b71      	ldr	r3, [pc, #452]	; (800d464 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d29e:	689b      	ldr	r3, [r3, #8]
 800d2a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d107      	bne.n	800d2b8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800d2a8:	4b6e      	ldr	r3, [pc, #440]	; (800d464 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d2aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d2ae:	0b1b      	lsrs	r3, r3, #12
 800d2b0:	f003 030f 	and.w	r3, r3, #15
 800d2b4:	627b      	str	r3, [r7, #36]	; 0x24
 800d2b6:	e005      	b.n	800d2c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800d2b8:	4b6a      	ldr	r3, [pc, #424]	; (800d464 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d2ba:	689b      	ldr	r3, [r3, #8]
 800d2bc:	0f1b      	lsrs	r3, r3, #28
 800d2be:	f003 030f 	and.w	r3, r3, #15
 800d2c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d2c4:	4a68      	ldr	r2, [pc, #416]	; (800d468 <HAL_RCC_GetSysClockFreq+0x200>)
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2cc:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d110      	bne.n	800d2f6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d2d8:	e00d      	b.n	800d2f6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d2da:	4b62      	ldr	r3, [pc, #392]	; (800d464 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d2dc:	69db      	ldr	r3, [r3, #28]
 800d2de:	f003 030c 	and.w	r3, r3, #12
 800d2e2:	2b04      	cmp	r3, #4
 800d2e4:	d102      	bne.n	800d2ec <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d2e6:	4b61      	ldr	r3, [pc, #388]	; (800d46c <HAL_RCC_GetSysClockFreq+0x204>)
 800d2e8:	623b      	str	r3, [r7, #32]
 800d2ea:	e004      	b.n	800d2f6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	2b08      	cmp	r3, #8
 800d2f0:	d101      	bne.n	800d2f6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d2f2:	4b5e      	ldr	r3, [pc, #376]	; (800d46c <HAL_RCC_GetSysClockFreq+0x204>)
 800d2f4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	2b0c      	cmp	r3, #12
 800d2fa:	f040 80ac 	bne.w	800d456 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800d2fe:	4b59      	ldr	r3, [pc, #356]	; (800d464 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d302:	f003 0303 	and.w	r3, r3, #3
 800d306:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800d308:	4b56      	ldr	r3, [pc, #344]	; (800d464 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d30c:	0a1b      	lsrs	r3, r3, #8
 800d30e:	f003 030f 	and.w	r3, r3, #15
 800d312:	3301      	adds	r3, #1
 800d314:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800d316:	4b53      	ldr	r3, [pc, #332]	; (800d464 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d31a:	091b      	lsrs	r3, r3, #4
 800d31c:	f003 0301 	and.w	r3, r3, #1
 800d320:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800d322:	4b50      	ldr	r3, [pc, #320]	; (800d464 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d326:	08db      	lsrs	r3, r3, #3
 800d328:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d32c:	68ba      	ldr	r2, [r7, #8]
 800d32e:	fb02 f303 	mul.w	r3, r2, r3
 800d332:	ee07 3a90 	vmov	s15, r3
 800d336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d33a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2b00      	cmp	r3, #0
 800d342:	f000 8086 	beq.w	800d452 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	2b02      	cmp	r3, #2
 800d34a:	d003      	beq.n	800d354 <HAL_RCC_GetSysClockFreq+0xec>
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	2b03      	cmp	r3, #3
 800d350:	d022      	beq.n	800d398 <HAL_RCC_GetSysClockFreq+0x130>
 800d352:	e043      	b.n	800d3dc <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	ee07 3a90 	vmov	s15, r3
 800d35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d35e:	eddf 6a44 	vldr	s13, [pc, #272]	; 800d470 <HAL_RCC_GetSysClockFreq+0x208>
 800d362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d366:	4b3f      	ldr	r3, [pc, #252]	; (800d464 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d36a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d36e:	ee07 3a90 	vmov	s15, r3
 800d372:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d376:	ed97 6a01 	vldr	s12, [r7, #4]
 800d37a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800d474 <HAL_RCC_GetSysClockFreq+0x20c>
 800d37e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d382:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d38a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d38e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d392:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800d396:	e046      	b.n	800d426 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	ee07 3a90 	vmov	s15, r3
 800d39e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3a2:	eddf 6a33 	vldr	s13, [pc, #204]	; 800d470 <HAL_RCC_GetSysClockFreq+0x208>
 800d3a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3aa:	4b2e      	ldr	r3, [pc, #184]	; (800d464 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3b2:	ee07 3a90 	vmov	s15, r3
 800d3b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d3ba:	ed97 6a01 	vldr	s12, [r7, #4]
 800d3be:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800d474 <HAL_RCC_GetSysClockFreq+0x20c>
 800d3c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d3c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d3ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d3d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3d6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800d3da:	e024      	b.n	800d426 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3de:	ee07 3a90 	vmov	s15, r3
 800d3e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	ee07 3a90 	vmov	s15, r3
 800d3ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3f4:	4b1b      	ldr	r3, [pc, #108]	; (800d464 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3fc:	ee07 3a90 	vmov	s15, r3
 800d400:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d404:	ed97 6a01 	vldr	s12, [r7, #4]
 800d408:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800d474 <HAL_RCC_GetSysClockFreq+0x20c>
 800d40c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d410:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800d414:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d418:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800d41c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d420:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800d424:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800d426:	4b0f      	ldr	r3, [pc, #60]	; (800d464 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800d428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d42a:	0e1b      	lsrs	r3, r3, #24
 800d42c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d430:	3301      	adds	r3, #1
 800d432:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	ee07 3a90 	vmov	s15, r3
 800d43a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d43e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d44a:	ee17 3a90 	vmov	r3, s15
 800d44e:	623b      	str	r3, [r7, #32]
 800d450:	e001      	b.n	800d456 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800d452:	2300      	movs	r3, #0
 800d454:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800d456:	6a3b      	ldr	r3, [r7, #32]
}
 800d458:	4618      	mov	r0, r3
 800d45a:	372c      	adds	r7, #44	; 0x2c
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr
 800d464:	46020c00 	.word	0x46020c00
 800d468:	0802b9a8 	.word	0x0802b9a8
 800d46c:	00f42400 	.word	0x00f42400
 800d470:	4b742400 	.word	0x4b742400
 800d474:	46000000 	.word	0x46000000

0800d478 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800d47c:	f7ff fef4 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 800d480:	4602      	mov	r2, r0
 800d482:	4b07      	ldr	r3, [pc, #28]	; (800d4a0 <HAL_RCC_GetHCLKFreq+0x28>)
 800d484:	6a1b      	ldr	r3, [r3, #32]
 800d486:	f003 030f 	and.w	r3, r3, #15
 800d48a:	4906      	ldr	r1, [pc, #24]	; (800d4a4 <HAL_RCC_GetHCLKFreq+0x2c>)
 800d48c:	5ccb      	ldrb	r3, [r1, r3]
 800d48e:	fa22 f303 	lsr.w	r3, r2, r3
 800d492:	4a05      	ldr	r2, [pc, #20]	; (800d4a8 <HAL_RCC_GetHCLKFreq+0x30>)
 800d494:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800d496:	4b04      	ldr	r3, [pc, #16]	; (800d4a8 <HAL_RCC_GetHCLKFreq+0x30>)
 800d498:	681b      	ldr	r3, [r3, #0]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	46020c00 	.word	0x46020c00
 800d4a4:	0802b990 	.word	0x0802b990
 800d4a8:	20000048 	.word	0x20000048

0800d4ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800d4b0:	f7ff ffe2 	bl	800d478 <HAL_RCC_GetHCLKFreq>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	4b05      	ldr	r3, [pc, #20]	; (800d4cc <HAL_RCC_GetPCLK1Freq+0x20>)
 800d4b8:	6a1b      	ldr	r3, [r3, #32]
 800d4ba:	091b      	lsrs	r3, r3, #4
 800d4bc:	f003 0307 	and.w	r3, r3, #7
 800d4c0:	4903      	ldr	r1, [pc, #12]	; (800d4d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d4c2:	5ccb      	ldrb	r3, [r1, r3]
 800d4c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	46020c00 	.word	0x46020c00
 800d4d0:	0802b9a0 	.word	0x0802b9a0

0800d4d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800d4d8:	f7ff ffce 	bl	800d478 <HAL_RCC_GetHCLKFreq>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	4b05      	ldr	r3, [pc, #20]	; (800d4f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d4e0:	6a1b      	ldr	r3, [r3, #32]
 800d4e2:	0a1b      	lsrs	r3, r3, #8
 800d4e4:	f003 0307 	and.w	r3, r3, #7
 800d4e8:	4903      	ldr	r1, [pc, #12]	; (800d4f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d4ea:	5ccb      	ldrb	r3, [r1, r3]
 800d4ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	46020c00 	.word	0x46020c00
 800d4f8:	0802b9a0 	.word	0x0802b9a0

0800d4fc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800d500:	f7ff ffba 	bl	800d478 <HAL_RCC_GetHCLKFreq>
 800d504:	4602      	mov	r2, r0
 800d506:	4b05      	ldr	r3, [pc, #20]	; (800d51c <HAL_RCC_GetPCLK3Freq+0x20>)
 800d508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d50a:	091b      	lsrs	r3, r3, #4
 800d50c:	f003 0307 	and.w	r3, r3, #7
 800d510:	4903      	ldr	r1, [pc, #12]	; (800d520 <HAL_RCC_GetPCLK3Freq+0x24>)
 800d512:	5ccb      	ldrb	r3, [r1, r3]
 800d514:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d518:	4618      	mov	r0, r3
 800d51a:	bd80      	pop	{r7, pc}
 800d51c:	46020c00 	.word	0x46020c00
 800d520:	0802b9a0 	.word	0x0802b9a0

0800d524 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	221f      	movs	r2, #31
 800d532:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800d534:	4b15      	ldr	r3, [pc, #84]	; (800d58c <HAL_RCC_GetClockConfig+0x68>)
 800d536:	69db      	ldr	r3, [r3, #28]
 800d538:	f003 0203 	and.w	r2, r3, #3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800d540:	4b12      	ldr	r3, [pc, #72]	; (800d58c <HAL_RCC_GetClockConfig+0x68>)
 800d542:	6a1b      	ldr	r3, [r3, #32]
 800d544:	f003 020f 	and.w	r2, r3, #15
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800d54c:	4b0f      	ldr	r3, [pc, #60]	; (800d58c <HAL_RCC_GetClockConfig+0x68>)
 800d54e:	6a1b      	ldr	r3, [r3, #32]
 800d550:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800d558:	4b0c      	ldr	r3, [pc, #48]	; (800d58c <HAL_RCC_GetClockConfig+0x68>)
 800d55a:	6a1b      	ldr	r3, [r3, #32]
 800d55c:	091b      	lsrs	r3, r3, #4
 800d55e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800d566:	4b09      	ldr	r3, [pc, #36]	; (800d58c <HAL_RCC_GetClockConfig+0x68>)
 800d568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d56a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d572:	4b07      	ldr	r3, [pc, #28]	; (800d590 <HAL_RCC_GetClockConfig+0x6c>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f003 020f 	and.w	r2, r3, #15
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	601a      	str	r2, [r3, #0]
}
 800d57e:	bf00      	nop
 800d580:	370c      	adds	r7, #12
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop
 800d58c:	46020c00 	.word	0x46020c00
 800d590:	40022000 	.word	0x40022000

0800d594 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b086      	sub	sp, #24
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d59c:	4b3e      	ldr	r3, [pc, #248]	; (800d698 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d59e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d5a2:	f003 0304 	and.w	r3, r3, #4
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d003      	beq.n	800d5b2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d5aa:	f7fe fd11 	bl	800bfd0 <HAL_PWREx_GetVoltageRange>
 800d5ae:	6178      	str	r0, [r7, #20]
 800d5b0:	e019      	b.n	800d5e6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d5b2:	4b39      	ldr	r3, [pc, #228]	; (800d698 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d5b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d5b8:	4a37      	ldr	r2, [pc, #220]	; (800d698 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d5ba:	f043 0304 	orr.w	r3, r3, #4
 800d5be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d5c2:	4b35      	ldr	r3, [pc, #212]	; (800d698 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d5c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d5c8:	f003 0304 	and.w	r3, r3, #4
 800d5cc:	60fb      	str	r3, [r7, #12]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d5d0:	f7fe fcfe 	bl	800bfd0 <HAL_PWREx_GetVoltageRange>
 800d5d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d5d6:	4b30      	ldr	r3, [pc, #192]	; (800d698 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d5d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d5dc:	4a2e      	ldr	r2, [pc, #184]	; (800d698 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800d5de:	f023 0304 	bic.w	r3, r3, #4
 800d5e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d5ec:	d003      	beq.n	800d5f6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d5f4:	d109      	bne.n	800d60a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d5fc:	d202      	bcs.n	800d604 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800d5fe:	2301      	movs	r3, #1
 800d600:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800d602:	e033      	b.n	800d66c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800d604:	2300      	movs	r3, #0
 800d606:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800d608:	e030      	b.n	800d66c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d610:	d208      	bcs.n	800d624 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d618:	d102      	bne.n	800d620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800d61a:	2303      	movs	r3, #3
 800d61c:	613b      	str	r3, [r7, #16]
 800d61e:	e025      	b.n	800d66c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800d620:	2301      	movs	r3, #1
 800d622:	e035      	b.n	800d690 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d62a:	d90f      	bls.n	800d64c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d109      	bne.n	800d646 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d638:	d902      	bls.n	800d640 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800d63a:	2300      	movs	r3, #0
 800d63c:	613b      	str	r3, [r7, #16]
 800d63e:	e015      	b.n	800d66c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800d640:	2301      	movs	r3, #1
 800d642:	613b      	str	r3, [r7, #16]
 800d644:	e012      	b.n	800d66c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800d646:	2300      	movs	r3, #0
 800d648:	613b      	str	r3, [r7, #16]
 800d64a:	e00f      	b.n	800d66c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d652:	d109      	bne.n	800d668 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d65a:	d102      	bne.n	800d662 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800d65c:	2301      	movs	r3, #1
 800d65e:	613b      	str	r3, [r7, #16]
 800d660:	e004      	b.n	800d66c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800d662:	2302      	movs	r3, #2
 800d664:	613b      	str	r3, [r7, #16]
 800d666:	e001      	b.n	800d66c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800d668:	2301      	movs	r3, #1
 800d66a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d66c:	4b0b      	ldr	r3, [pc, #44]	; (800d69c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f023 020f 	bic.w	r2, r3, #15
 800d674:	4909      	ldr	r1, [pc, #36]	; (800d69c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	4313      	orrs	r3, r2
 800d67a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800d67c:	4b07      	ldr	r3, [pc, #28]	; (800d69c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f003 030f 	and.w	r3, r3, #15
 800d684:	693a      	ldr	r2, [r7, #16]
 800d686:	429a      	cmp	r2, r3
 800d688:	d001      	beq.n	800d68e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800d68a:	2301      	movs	r3, #1
 800d68c:	e000      	b.n	800d690 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800d68e:	2300      	movs	r3, #0
}
 800d690:	4618      	mov	r0, r3
 800d692:	3718      	adds	r7, #24
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}
 800d698:	46020c00 	.word	0x46020c00
 800d69c:	40022000 	.word	0x40022000

0800d6a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800d6a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d6a4:	b0c8      	sub	sp, #288	; 0x120
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d6b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c0:	f002 0401 	and.w	r4, r2, #1
 800d6c4:	2500      	movs	r5, #0
 800d6c6:	ea54 0305 	orrs.w	r3, r4, r5
 800d6ca:	d00b      	beq.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800d6cc:	4bd5      	ldr	r3, [pc, #852]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d6ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d6d2:	f023 0103 	bic.w	r1, r3, #3
 800d6d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6dc:	4ad1      	ldr	r2, [pc, #836]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d6de:	430b      	orrs	r3, r1
 800d6e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d6e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ec:	f002 0802 	and.w	r8, r2, #2
 800d6f0:	f04f 0900 	mov.w	r9, #0
 800d6f4:	ea58 0309 	orrs.w	r3, r8, r9
 800d6f8:	d00b      	beq.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800d6fa:	4bca      	ldr	r3, [pc, #808]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d6fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d700:	f023 010c 	bic.w	r1, r3, #12
 800d704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d70a:	4ac6      	ldr	r2, [pc, #792]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d70c:	430b      	orrs	r3, r1
 800d70e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71a:	f002 0a04 	and.w	sl, r2, #4
 800d71e:	f04f 0b00 	mov.w	fp, #0
 800d722:	ea5a 030b 	orrs.w	r3, sl, fp
 800d726:	d00b      	beq.n	800d740 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800d728:	4bbe      	ldr	r3, [pc, #760]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d72a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d72e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800d732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d738:	4aba      	ldr	r2, [pc, #744]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d73a:	430b      	orrs	r3, r1
 800d73c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d748:	f002 0308 	and.w	r3, r2, #8
 800d74c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d750:	2300      	movs	r3, #0
 800d752:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d756:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800d75a:	460b      	mov	r3, r1
 800d75c:	4313      	orrs	r3, r2
 800d75e:	d00b      	beq.n	800d778 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800d760:	4bb0      	ldr	r3, [pc, #704]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d766:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d76a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d76e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d770:	4aac      	ldr	r2, [pc, #688]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d772:	430b      	orrs	r3, r1
 800d774:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d780:	f002 0310 	and.w	r3, r2, #16
 800d784:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d788:	2300      	movs	r3, #0
 800d78a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d78e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800d792:	460b      	mov	r3, r1
 800d794:	4313      	orrs	r3, r2
 800d796:	d00b      	beq.n	800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800d798:	4ba2      	ldr	r3, [pc, #648]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d79a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d79e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d7a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7a8:	4a9e      	ldr	r2, [pc, #632]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d7aa:	430b      	orrs	r3, r1
 800d7ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d7b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800d7bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d7c6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800d7ca:	460b      	mov	r3, r1
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	d00b      	beq.n	800d7e8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800d7d0:	4b94      	ldr	r3, [pc, #592]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d7d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d7d6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d7da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7e0:	4a90      	ldr	r2, [pc, #576]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d7e2:	430b      	orrs	r3, r1
 800d7e4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d7e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f0:	f002 0320 	and.w	r3, r2, #32
 800d7f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d7fe:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800d802:	460b      	mov	r3, r1
 800d804:	4313      	orrs	r3, r2
 800d806:	d00b      	beq.n	800d820 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800d808:	4b86      	ldr	r3, [pc, #536]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d80a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d80e:	f023 0107 	bic.w	r1, r3, #7
 800d812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d818:	4a82      	ldr	r2, [pc, #520]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d81a:	430b      	orrs	r3, r1
 800d81c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d828:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d82c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d830:	2300      	movs	r3, #0
 800d832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d836:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800d83a:	460b      	mov	r3, r1
 800d83c:	4313      	orrs	r3, r2
 800d83e:	d00b      	beq.n	800d858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800d840:	4b78      	ldr	r3, [pc, #480]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d846:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800d84a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d84e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d850:	4a74      	ldr	r2, [pc, #464]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d852:	430b      	orrs	r3, r1
 800d854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d860:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d864:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d868:	2300      	movs	r3, #0
 800d86a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d86e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d872:	460b      	mov	r3, r1
 800d874:	4313      	orrs	r3, r2
 800d876:	d00b      	beq.n	800d890 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800d878:	4b6a      	ldr	r3, [pc, #424]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d87a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d87e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d882:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d888:	4a66      	ldr	r2, [pc, #408]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d88a:	430b      	orrs	r3, r1
 800d88c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d898:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800d89c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d8a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	d00b      	beq.n	800d8c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800d8b0:	4b5c      	ldr	r3, [pc, #368]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d8b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d8b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d8ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8c0:	4a58      	ldr	r2, [pc, #352]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d8c2:	430b      	orrs	r3, r1
 800d8c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d8c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d8d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d8d8:	2300      	movs	r3, #0
 800d8da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d8de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	d00b      	beq.n	800d900 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800d8e8:	4b4e      	ldr	r3, [pc, #312]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d8ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d8ee:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800d8f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8f8:	4a4a      	ldr	r2, [pc, #296]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d8fa:	430b      	orrs	r3, r1
 800d8fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800d900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d908:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800d90c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d910:	2300      	movs	r3, #0
 800d912:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d916:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d91a:	460b      	mov	r3, r1
 800d91c:	4313      	orrs	r3, r2
 800d91e:	d00b      	beq.n	800d938 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800d920:	4b40      	ldr	r3, [pc, #256]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d922:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d926:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800d92a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d92e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d930:	4a3c      	ldr	r2, [pc, #240]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d932:	430b      	orrs	r3, r1
 800d934:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800d938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d940:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800d944:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d948:	2300      	movs	r3, #0
 800d94a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d94e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d952:	460b      	mov	r3, r1
 800d954:	4313      	orrs	r3, r2
 800d956:	d00c      	beq.n	800d972 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800d958:	4b32      	ldr	r3, [pc, #200]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d95a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d95e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800d962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d96a:	4a2e      	ldr	r2, [pc, #184]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d96c:	430b      	orrs	r3, r1
 800d96e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97a:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800d97e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d982:	2300      	movs	r3, #0
 800d984:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d988:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d98c:	460b      	mov	r3, r1
 800d98e:	4313      	orrs	r3, r2
 800d990:	d00c      	beq.n	800d9ac <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800d992:	4b24      	ldr	r3, [pc, #144]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d994:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d998:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800d99c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9a4:	4a1f      	ldr	r2, [pc, #124]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d9a6:	430b      	orrs	r3, r1
 800d9a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d9ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800d9b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d9bc:	2300      	movs	r3, #0
 800d9be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d9c2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	d00c      	beq.n	800d9e6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800d9cc:	4b15      	ldr	r3, [pc, #84]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d9ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d9d2:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800d9d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9de:	4a11      	ldr	r2, [pc, #68]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800d9e0:	430b      	orrs	r3, r1
 800d9e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800d9e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ee:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800d9f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d9fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800da00:	460b      	mov	r3, r1
 800da02:	4313      	orrs	r3, r2
 800da04:	d010      	beq.n	800da28 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800da06:	4b07      	ldr	r3, [pc, #28]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800da08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800da0c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800da10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da18:	4a02      	ldr	r2, [pc, #8]	; (800da24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800da1a:	430b      	orrs	r3, r1
 800da1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800da20:	e002      	b.n	800da28 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800da22:	bf00      	nop
 800da24:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800da28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da30:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800da34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800da38:	2300      	movs	r3, #0
 800da3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800da3e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800da42:	460b      	mov	r3, r1
 800da44:	4313      	orrs	r3, r2
 800da46:	d04c      	beq.n	800dae2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800da48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800da50:	2b80      	cmp	r3, #128	; 0x80
 800da52:	d02d      	beq.n	800dab0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800da54:	2b80      	cmp	r3, #128	; 0x80
 800da56:	d827      	bhi.n	800daa8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800da58:	2b60      	cmp	r3, #96	; 0x60
 800da5a:	d02b      	beq.n	800dab4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800da5c:	2b60      	cmp	r3, #96	; 0x60
 800da5e:	d823      	bhi.n	800daa8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800da60:	2b40      	cmp	r3, #64	; 0x40
 800da62:	d006      	beq.n	800da72 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800da64:	2b40      	cmp	r3, #64	; 0x40
 800da66:	d81f      	bhi.n	800daa8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d009      	beq.n	800da80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800da6c:	2b20      	cmp	r3, #32
 800da6e:	d011      	beq.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800da70:	e01a      	b.n	800daa8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800da72:	4bc0      	ldr	r3, [pc, #768]	; (800dd74 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800da74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da76:	4abf      	ldr	r2, [pc, #764]	; (800dd74 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800da78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da7c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800da7e:	e01a      	b.n	800dab6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800da80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da84:	3308      	adds	r3, #8
 800da86:	4618      	mov	r0, r3
 800da88:	f002 fd02 	bl	8010490 <RCCEx_PLL2_Config>
 800da8c:	4603      	mov	r3, r0
 800da8e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800da92:	e010      	b.n	800dab6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800da94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da98:	332c      	adds	r3, #44	; 0x2c
 800da9a:	4618      	mov	r0, r3
 800da9c:	f002 fd90 	bl	80105c0 <RCCEx_PLL3_Config>
 800daa0:	4603      	mov	r3, r0
 800daa2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800daa6:	e006      	b.n	800dab6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800daa8:	2301      	movs	r3, #1
 800daaa:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800daae:	e002      	b.n	800dab6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800dab0:	bf00      	nop
 800dab2:	e000      	b.n	800dab6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800dab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dab6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d10d      	bne.n	800dada <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800dabe:	4bad      	ldr	r3, [pc, #692]	; (800dd74 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dac0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dac4:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800dac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dacc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dad0:	4aa8      	ldr	r2, [pc, #672]	; (800dd74 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dad2:	430b      	orrs	r3, r1
 800dad4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800dad8:	e003      	b.n	800dae2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dada:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dade:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800dae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daea:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800daee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800daf2:	2300      	movs	r3, #0
 800daf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800daf8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800dafc:	460b      	mov	r3, r1
 800dafe:	4313      	orrs	r3, r2
 800db00:	d053      	beq.n	800dbaa <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800db02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800db0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db0e:	d033      	beq.n	800db78 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800db10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db14:	d82c      	bhi.n	800db70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800db16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800db1a:	d02f      	beq.n	800db7c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800db1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800db20:	d826      	bhi.n	800db70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800db22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db26:	d008      	beq.n	800db3a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800db28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db2c:	d820      	bhi.n	800db70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d00a      	beq.n	800db48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800db32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db36:	d011      	beq.n	800db5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800db38:	e01a      	b.n	800db70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800db3a:	4b8e      	ldr	r3, [pc, #568]	; (800dd74 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800db3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db3e:	4a8d      	ldr	r2, [pc, #564]	; (800dd74 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800db40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db44:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800db46:	e01a      	b.n	800db7e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800db48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db4c:	3308      	adds	r3, #8
 800db4e:	4618      	mov	r0, r3
 800db50:	f002 fc9e 	bl	8010490 <RCCEx_PLL2_Config>
 800db54:	4603      	mov	r3, r0
 800db56:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800db5a:	e010      	b.n	800db7e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800db5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db60:	332c      	adds	r3, #44	; 0x2c
 800db62:	4618      	mov	r0, r3
 800db64:	f002 fd2c 	bl	80105c0 <RCCEx_PLL3_Config>
 800db68:	4603      	mov	r3, r0
 800db6a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800db6e:	e006      	b.n	800db7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db70:	2301      	movs	r3, #1
 800db72:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800db76:	e002      	b.n	800db7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800db78:	bf00      	nop
 800db7a:	e000      	b.n	800db7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800db7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db7e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800db82:	2b00      	cmp	r3, #0
 800db84:	d10d      	bne.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800db86:	4b7b      	ldr	r3, [pc, #492]	; (800dd74 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800db88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800db8c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800db90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800db98:	4a76      	ldr	r2, [pc, #472]	; (800dd74 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800db9a:	430b      	orrs	r3, r1
 800db9c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800dba0:	e003      	b.n	800dbaa <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dba2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dba6:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800dbaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800dbb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dbc0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	d046      	beq.n	800dc58 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800dbca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dbd2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800dbd6:	d028      	beq.n	800dc2a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800dbd8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800dbdc:	d821      	bhi.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800dbde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dbe2:	d022      	beq.n	800dc2a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800dbe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dbe8:	d81b      	bhi.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800dbea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dbee:	d01c      	beq.n	800dc2a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800dbf0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dbf4:	d815      	bhi.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800dbf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dbfa:	d008      	beq.n	800dc0e <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800dbfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc00:	d80f      	bhi.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d011      	beq.n	800dc2a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800dc06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc0a:	d00e      	beq.n	800dc2a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800dc0c:	e009      	b.n	800dc22 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800dc0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc12:	3308      	adds	r3, #8
 800dc14:	4618      	mov	r0, r3
 800dc16:	f002 fc3b 	bl	8010490 <RCCEx_PLL2_Config>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dc20:	e004      	b.n	800dc2c <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800dc22:	2301      	movs	r3, #1
 800dc24:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dc28:	e000      	b.n	800dc2c <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800dc2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc2c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d10d      	bne.n	800dc50 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800dc34:	4b4f      	ldr	r3, [pc, #316]	; (800dd74 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dc36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dc3a:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800dc3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dc46:	4a4b      	ldr	r2, [pc, #300]	; (800dd74 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dc48:	430b      	orrs	r3, r1
 800dc4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800dc4e:	e003      	b.n	800dc58 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc50:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dc54:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800dc58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc60:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800dc64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dc68:	2300      	movs	r3, #0
 800dc6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dc6e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800dc72:	460b      	mov	r3, r1
 800dc74:	4313      	orrs	r3, r2
 800dc76:	d03f      	beq.n	800dcf8 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800dc78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dc80:	2b04      	cmp	r3, #4
 800dc82:	d81e      	bhi.n	800dcc2 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800dc84:	a201      	add	r2, pc, #4	; (adr r2, 800dc8c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800dc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc8a:	bf00      	nop
 800dc8c:	0800dccb 	.word	0x0800dccb
 800dc90:	0800dca1 	.word	0x0800dca1
 800dc94:	0800dcaf 	.word	0x0800dcaf
 800dc98:	0800dccb 	.word	0x0800dccb
 800dc9c:	0800dccb 	.word	0x0800dccb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dca0:	4b34      	ldr	r3, [pc, #208]	; (800dd74 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dca4:	4a33      	ldr	r2, [pc, #204]	; (800dd74 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dcaa:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800dcac:	e00e      	b.n	800dccc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dcae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcb2:	332c      	adds	r3, #44	; 0x2c
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f002 fc83 	bl	80105c0 <RCCEx_PLL3_Config>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dcc0:	e004      	b.n	800dccc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dcc8:	e000      	b.n	800dccc <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800dcca:	bf00      	nop
    }
    if (ret == HAL_OK)
 800dccc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d10d      	bne.n	800dcf0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800dcd4:	4b27      	ldr	r3, [pc, #156]	; (800dd74 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dcd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dcda:	f023 0107 	bic.w	r1, r3, #7
 800dcde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dce6:	4a23      	ldr	r2, [pc, #140]	; (800dd74 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dce8:	430b      	orrs	r3, r1
 800dcea:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800dcee:	e003      	b.n	800dcf8 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcf0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dcf4:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800dcf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd00:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800dd04:	67bb      	str	r3, [r7, #120]	; 0x78
 800dd06:	2300      	movs	r3, #0
 800dd08:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dd0a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800dd0e:	460b      	mov	r3, r1
 800dd10:	4313      	orrs	r3, r2
 800dd12:	d04c      	beq.n	800ddae <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800dd14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dd1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dd20:	d02a      	beq.n	800dd78 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800dd22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dd26:	d821      	bhi.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800dd28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dd2c:	d026      	beq.n	800dd7c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800dd2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dd32:	d81b      	bhi.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800dd34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd38:	d00e      	beq.n	800dd58 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800dd3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd3e:	d815      	bhi.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d01d      	beq.n	800dd80 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 800dd44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd48:	d110      	bne.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dd4a:	4b0a      	ldr	r3, [pc, #40]	; (800dd74 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dd4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd4e:	4a09      	ldr	r2, [pc, #36]	; (800dd74 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800dd50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dd54:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800dd56:	e014      	b.n	800dd82 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800dd58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd5c:	332c      	adds	r3, #44	; 0x2c
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f002 fc2e 	bl	80105c0 <RCCEx_PLL3_Config>
 800dd64:	4603      	mov	r3, r0
 800dd66:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dd6a:	e00a      	b.n	800dd82 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dd72:	e006      	b.n	800dd82 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800dd74:	46020c00 	.word	0x46020c00
        break;
 800dd78:	bf00      	nop
 800dd7a:	e002      	b.n	800dd82 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800dd7c:	bf00      	nop
 800dd7e:	e000      	b.n	800dd82 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800dd80:	bf00      	nop
    }
    if (ret == HAL_OK)
 800dd82:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d10d      	bne.n	800dda6 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800dd8a:	4baf      	ldr	r3, [pc, #700]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dd8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800dd90:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800dd94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dd9c:	4aaa      	ldr	r2, [pc, #680]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dd9e:	430b      	orrs	r3, r1
 800dda0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800dda4:	e003      	b.n	800ddae <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dda6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800ddaa:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ddae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ddba:	673b      	str	r3, [r7, #112]	; 0x70
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	677b      	str	r3, [r7, #116]	; 0x74
 800ddc0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	f000 80b5 	beq.w	800df36 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ddd2:	4b9d      	ldr	r3, [pc, #628]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ddd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ddd8:	f003 0304 	and.w	r3, r3, #4
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d113      	bne.n	800de08 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dde0:	4b99      	ldr	r3, [pc, #612]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dde2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dde6:	4a98      	ldr	r2, [pc, #608]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dde8:	f043 0304 	orr.w	r3, r3, #4
 800ddec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800ddf0:	4b95      	ldr	r3, [pc, #596]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800ddf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ddf6:	f003 0304 	and.w	r3, r3, #4
 800ddfa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800ddfe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
      pwrclkchanged = SET;
 800de02:	2301      	movs	r3, #1
 800de04:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800de08:	4b90      	ldr	r3, [pc, #576]	; (800e04c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800de0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de0c:	4a8f      	ldr	r2, [pc, #572]	; (800e04c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800de0e:	f043 0301 	orr.w	r3, r3, #1
 800de12:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800de14:	f7f9 fdf2 	bl	80079fc <HAL_GetTick>
 800de18:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800de1c:	e00b      	b.n	800de36 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800de1e:	f7f9 fded 	bl	80079fc <HAL_GetTick>
 800de22:	4602      	mov	r2, r0
 800de24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de28:	1ad3      	subs	r3, r2, r3
 800de2a:	2b02      	cmp	r3, #2
 800de2c:	d903      	bls.n	800de36 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800de2e:	2303      	movs	r3, #3
 800de30:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800de34:	e005      	b.n	800de42 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800de36:	4b85      	ldr	r3, [pc, #532]	; (800e04c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800de38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de3a:	f003 0301 	and.w	r3, r3, #1
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d0ed      	beq.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800de42:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800de46:	2b00      	cmp	r3, #0
 800de48:	d165      	bne.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800de4a:	4b7f      	ldr	r3, [pc, #508]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800de4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800de50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800de58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d023      	beq.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800de60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de64:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800de68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d01b      	beq.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800de70:	4b75      	ldr	r3, [pc, #468]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800de72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800de76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800de7e:	4b72      	ldr	r3, [pc, #456]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800de80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800de84:	4a70      	ldr	r2, [pc, #448]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800de86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800de8e:	4b6e      	ldr	r3, [pc, #440]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800de90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800de94:	4a6c      	ldr	r2, [pc, #432]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800de96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800de9e:	4a6a      	ldr	r2, [pc, #424]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dea0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800dea4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800dea8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800deac:	f003 0301 	and.w	r3, r3, #1
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d019      	beq.n	800dee8 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800deb4:	f7f9 fda2 	bl	80079fc <HAL_GetTick>
 800deb8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800debc:	e00d      	b.n	800deda <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800debe:	f7f9 fd9d 	bl	80079fc <HAL_GetTick>
 800dec2:	4602      	mov	r2, r0
 800dec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dec8:	1ad2      	subs	r2, r2, r3
 800deca:	f241 3388 	movw	r3, #5000	; 0x1388
 800dece:	429a      	cmp	r2, r3
 800ded0:	d903      	bls.n	800deda <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800ded2:	2303      	movs	r3, #3
 800ded4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
            break;
 800ded8:	e006      	b.n	800dee8 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800deda:	4b5b      	ldr	r3, [pc, #364]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dedc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dee0:	f003 0302 	and.w	r3, r3, #2
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d0ea      	beq.n	800debe <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800dee8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800deec:	2b00      	cmp	r3, #0
 800deee:	d10d      	bne.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800def0:	4b55      	ldr	r3, [pc, #340]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800def2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800def6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800defa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800defe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800df02:	4a51      	ldr	r2, [pc, #324]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800df04:	430b      	orrs	r3, r1
 800df06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800df0a:	e008      	b.n	800df1e <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800df0c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800df10:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 800df14:	e003      	b.n	800df1e <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df16:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800df1a:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800df1e:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 800df22:	2b01      	cmp	r3, #1
 800df24:	d107      	bne.n	800df36 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800df26:	4b48      	ldr	r3, [pc, #288]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800df28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800df2c:	4a46      	ldr	r2, [pc, #280]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800df2e:	f023 0304 	bic.w	r3, r3, #4
 800df32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800df36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3e:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800df42:	66bb      	str	r3, [r7, #104]	; 0x68
 800df44:	2300      	movs	r3, #0
 800df46:	66fb      	str	r3, [r7, #108]	; 0x6c
 800df48:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800df4c:	460b      	mov	r3, r1
 800df4e:	4313      	orrs	r3, r2
 800df50:	d042      	beq.n	800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800df52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800df5a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800df5e:	d022      	beq.n	800dfa6 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800df60:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800df64:	d81b      	bhi.n	800df9e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800df66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df6a:	d011      	beq.n	800df90 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800df6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df70:	d815      	bhi.n	800df9e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800df72:	2b00      	cmp	r3, #0
 800df74:	d019      	beq.n	800dfaa <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800df76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800df7a:	d110      	bne.n	800df9e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800df7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df80:	3308      	adds	r3, #8
 800df82:	4618      	mov	r0, r3
 800df84:	f002 fa84 	bl	8010490 <RCCEx_PLL2_Config>
 800df88:	4603      	mov	r3, r0
 800df8a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800df8e:	e00d      	b.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df90:	4b2d      	ldr	r3, [pc, #180]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800df92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df94:	4a2c      	ldr	r2, [pc, #176]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800df96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df9a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800df9c:	e006      	b.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800dfa4:	e002      	b.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800dfa6:	bf00      	nop
 800dfa8:	e000      	b.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800dfaa:	bf00      	nop
    }
    if (ret == HAL_OK)
 800dfac:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d10d      	bne.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800dfb4:	4b24      	ldr	r3, [pc, #144]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dfb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dfba:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800dfbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800dfc6:	4a20      	ldr	r2, [pc, #128]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800dfc8:	430b      	orrs	r3, r1
 800dfca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800dfce:	e003      	b.n	800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfd0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800dfd4:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800dfd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800dfe4:	663b      	str	r3, [r7, #96]	; 0x60
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	667b      	str	r3, [r7, #100]	; 0x64
 800dfea:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800dfee:	460b      	mov	r3, r1
 800dff0:	4313      	orrs	r3, r2
 800dff2:	d031      	beq.n	800e058 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800dff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dff8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e000:	d00b      	beq.n	800e01a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800e002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e006:	d804      	bhi.n	800e012 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d008      	beq.n	800e01e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800e00c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e010:	d007      	beq.n	800e022 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800e012:	2301      	movs	r3, #1
 800e014:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e018:	e004      	b.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800e01a:	bf00      	nop
 800e01c:	e002      	b.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800e01e:	bf00      	nop
 800e020:	e000      	b.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800e022:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e024:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d111      	bne.n	800e050 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800e02c:	4b06      	ldr	r3, [pc, #24]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e02e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e032:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e03a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e03e:	4a02      	ldr	r2, [pc, #8]	; (800e048 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800e040:	430b      	orrs	r3, r1
 800e042:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800e046:	e007      	b.n	800e058 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800e048:	46020c00 	.word	0x46020c00
 800e04c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e050:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e054:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800e058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e060:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800e064:	65bb      	str	r3, [r7, #88]	; 0x58
 800e066:	2300      	movs	r3, #0
 800e068:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e06a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800e06e:	460b      	mov	r3, r1
 800e070:	4313      	orrs	r3, r2
 800e072:	d00c      	beq.n	800e08e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800e074:	4bb2      	ldr	r3, [pc, #712]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e076:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e07a:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800e07e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e082:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e086:	4aae      	ldr	r2, [pc, #696]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e088:	430b      	orrs	r3, r1
 800e08a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800e08e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e096:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800e09a:	653b      	str	r3, [r7, #80]	; 0x50
 800e09c:	2300      	movs	r3, #0
 800e09e:	657b      	str	r3, [r7, #84]	; 0x54
 800e0a0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	4313      	orrs	r3, r2
 800e0a8:	d019      	beq.n	800e0de <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800e0aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e0b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e0b6:	d105      	bne.n	800e0c4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e0b8:	4ba1      	ldr	r3, [pc, #644]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0bc:	4aa0      	ldr	r2, [pc, #640]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e0be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e0c2:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800e0c4:	4b9e      	ldr	r3, [pc, #632]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e0c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e0ca:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800e0ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e0d6:	4a9a      	ldr	r2, [pc, #616]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e0d8:	430b      	orrs	r3, r1
 800e0da:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800e0de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800e0ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e0f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	d00c      	beq.n	800e114 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800e0fa:	4b91      	ldr	r3, [pc, #580]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e0fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e100:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800e104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e108:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e10c:	4a8c      	ldr	r2, [pc, #560]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e10e:	430b      	orrs	r3, r1
 800e110:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800e114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800e120:	643b      	str	r3, [r7, #64]	; 0x40
 800e122:	2300      	movs	r3, #0
 800e124:	647b      	str	r3, [r7, #68]	; 0x44
 800e126:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800e12a:	460b      	mov	r3, r1
 800e12c:	4313      	orrs	r3, r2
 800e12e:	d00c      	beq.n	800e14a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800e130:	4b83      	ldr	r3, [pc, #524]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e136:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800e13a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e13e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e142:	4a7f      	ldr	r2, [pc, #508]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e144:	430b      	orrs	r3, r1
 800e146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800e14a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e152:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800e156:	63bb      	str	r3, [r7, #56]	; 0x38
 800e158:	2300      	movs	r3, #0
 800e15a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e15c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e160:	460b      	mov	r3, r1
 800e162:	4313      	orrs	r3, r2
 800e164:	d00c      	beq.n	800e180 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800e166:	4b76      	ldr	r3, [pc, #472]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e16c:	f023 0118 	bic.w	r1, r3, #24
 800e170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e174:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e178:	4a71      	ldr	r2, [pc, #452]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e17a:	430b      	orrs	r3, r1
 800e17c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e188:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800e18c:	633b      	str	r3, [r7, #48]	; 0x30
 800e18e:	2300      	movs	r3, #0
 800e190:	637b      	str	r3, [r7, #52]	; 0x34
 800e192:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800e196:	460b      	mov	r3, r1
 800e198:	4313      	orrs	r3, r2
 800e19a:	d032      	beq.n	800e202 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800e19c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e1a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e1a8:	d105      	bne.n	800e1b6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1aa:	4b65      	ldr	r3, [pc, #404]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ae:	4a64      	ldr	r2, [pc, #400]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e1b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e1b4:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800e1b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e1be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e1c2:	d108      	bne.n	800e1d6 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e1c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1c8:	3308      	adds	r3, #8
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f002 f960 	bl	8010490 <RCCEx_PLL2_Config>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }
    if (ret == HAL_OK)
 800e1d6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d10d      	bne.n	800e1fa <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800e1de:	4b58      	ldr	r3, [pc, #352]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e1e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e1e4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800e1e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e1f0:	4a53      	ldr	r2, [pc, #332]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e1f2:	430b      	orrs	r3, r1
 800e1f4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800e1f8:	e003      	b.n	800e202 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1fa:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e1fe:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800e202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20a:	2100      	movs	r1, #0
 800e20c:	62b9      	str	r1, [r7, #40]	; 0x28
 800e20e:	f003 0301 	and.w	r3, r3, #1
 800e212:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e214:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e218:	460b      	mov	r3, r1
 800e21a:	4313      	orrs	r3, r2
 800e21c:	d04a      	beq.n	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800e21e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e222:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e226:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800e22a:	d01e      	beq.n	800e26a <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800e22c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800e230:	d825      	bhi.n	800e27e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800e232:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e236:	d00e      	beq.n	800e256 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800e238:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e23c:	d81f      	bhi.n	800e27e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d021      	beq.n	800e286 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800e242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e246:	d11a      	bne.n	800e27e <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e248:	4b3d      	ldr	r3, [pc, #244]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e24c:	4a3c      	ldr	r2, [pc, #240]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e24e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e252:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800e254:	e018      	b.n	800e288 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e25a:	3308      	adds	r3, #8
 800e25c:	4618      	mov	r0, r3
 800e25e:	f002 f917 	bl	8010490 <RCCEx_PLL2_Config>
 800e262:	4603      	mov	r3, r0
 800e264:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800e268:	e00e      	b.n	800e288 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e26a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e26e:	332c      	adds	r3, #44	; 0x2c
 800e270:	4618      	mov	r0, r3
 800e272:	f002 f9a5 	bl	80105c0 <RCCEx_PLL3_Config>
 800e276:	4603      	mov	r3, r0
 800e278:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800e27c:	e004      	b.n	800e288 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800e27e:	2301      	movs	r3, #1
 800e280:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e284:	e000      	b.n	800e288 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800e286:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e288:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d10d      	bne.n	800e2ac <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800e290:	4b2b      	ldr	r3, [pc, #172]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e292:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e296:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e29a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e29e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e2a2:	4927      	ldr	r1, [pc, #156]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800e2aa:	e003      	b.n	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2ac:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e2b0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800e2b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2bc:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800e2c0:	623b      	str	r3, [r7, #32]
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	627b      	str	r3, [r7, #36]	; 0x24
 800e2c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	4313      	orrs	r3, r2
 800e2ce:	d03d      	beq.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800e2d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2dc:	d00e      	beq.n	800e2fc <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800e2de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2e2:	d815      	bhi.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d017      	beq.n	800e318 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800e2e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e2ec:	d110      	bne.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e2ee:	4b14      	ldr	r3, [pc, #80]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2f2:	4a13      	ldr	r2, [pc, #76]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e2f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e2f8:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e2fa:	e00e      	b.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e2fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e300:	3308      	adds	r3, #8
 800e302:	4618      	mov	r0, r3
 800e304:	f002 f8c4 	bl	8010490 <RCCEx_PLL2_Config>
 800e308:	4603      	mov	r3, r0
 800e30a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800e30e:	e004      	b.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800e310:	2301      	movs	r3, #1
 800e312:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e316:	e000      	b.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e318:	bf00      	nop
    }
    if (ret == HAL_OK)
 800e31a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d110      	bne.n	800e344 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800e322:	4b07      	ldr	r3, [pc, #28]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e328:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e32c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e334:	4902      	ldr	r1, [pc, #8]	; (800e340 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800e336:	4313      	orrs	r3, r2
 800e338:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800e33c:	e006      	b.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800e33e:	bf00      	nop
 800e340:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e344:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e348:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800e34c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e354:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800e358:	61bb      	str	r3, [r7, #24]
 800e35a:	2300      	movs	r3, #0
 800e35c:	61fb      	str	r3, [r7, #28]
 800e35e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e362:	460b      	mov	r3, r1
 800e364:	4313      	orrs	r3, r2
 800e366:	d00c      	beq.n	800e382 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800e368:	4b68      	ldr	r3, [pc, #416]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e36a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e36e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800e372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e376:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e37a:	4964      	ldr	r1, [pc, #400]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e37c:	4313      	orrs	r3, r2
 800e37e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38a:	2100      	movs	r1, #0
 800e38c:	6139      	str	r1, [r7, #16]
 800e38e:	f003 0302 	and.w	r3, r3, #2
 800e392:	617b      	str	r3, [r7, #20]
 800e394:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e398:	460b      	mov	r3, r1
 800e39a:	4313      	orrs	r3, r2
 800e39c:	d036      	beq.n	800e40c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800e39e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00c      	beq.n	800e3c4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800e3aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e3ae:	d113      	bne.n	800e3d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800e3b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3b4:	3308      	adds	r3, #8
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f002 f86a 	bl	8010490 <RCCEx_PLL2_Config>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800e3c2:	e00d      	b.n	800e3e0 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e3c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3c8:	332c      	adds	r3, #44	; 0x2c
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f002 f8f8 	bl	80105c0 <RCCEx_PLL3_Config>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800e3d6:	e003      	b.n	800e3e0 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800e3d8:	2301      	movs	r3, #1
 800e3da:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e3de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e3e0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d10d      	bne.n	800e404 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800e3e8:	4b48      	ldr	r3, [pc, #288]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e3ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e3ee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e3f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e3fa:	4944      	ldr	r1, [pc, #272]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e3fc:	4313      	orrs	r3, r2
 800e3fe:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800e402:	e003      	b.n	800e40c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e404:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e408:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800e40c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e414:	2100      	movs	r1, #0
 800e416:	60b9      	str	r1, [r7, #8]
 800e418:	f003 0304 	and.w	r3, r3, #4
 800e41c:	60fb      	str	r3, [r7, #12]
 800e41e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e422:	460b      	mov	r3, r1
 800e424:	4313      	orrs	r3, r2
 800e426:	d024      	beq.n	800e472 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800e428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e42c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e430:	2b00      	cmp	r3, #0
 800e432:	d108      	bne.n	800e446 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800e434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e438:	332c      	adds	r3, #44	; 0x2c
 800e43a:	4618      	mov	r0, r3
 800e43c:	f002 f8c0 	bl	80105c0 <RCCEx_PLL3_Config>
 800e440:	4603      	mov	r3, r0
 800e442:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }

    if (ret == HAL_OK)
 800e446:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d10d      	bne.n	800e46a <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800e44e:	4b2f      	ldr	r3, [pc, #188]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e450:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e454:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800e458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e45c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e460:	492a      	ldr	r1, [pc, #168]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e462:	4313      	orrs	r3, r2
 800e464:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800e468:	e003      	b.n	800e472 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e46a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e46e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800e472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47a:	2100      	movs	r1, #0
 800e47c:	6039      	str	r1, [r7, #0]
 800e47e:	f003 0308 	and.w	r3, r3, #8
 800e482:	607b      	str	r3, [r7, #4]
 800e484:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e488:	460b      	mov	r3, r1
 800e48a:	4313      	orrs	r3, r2
 800e48c:	d036      	beq.n	800e4fc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800e48e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e492:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800e496:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800e49a:	d00d      	beq.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800e49c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800e4a0:	d811      	bhi.n	800e4c6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800e4a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e4a6:	d012      	beq.n	800e4ce <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800e4a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e4ac:	d80b      	bhi.n	800e4c6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d00d      	beq.n	800e4ce <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800e4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4b6:	d106      	bne.n	800e4c6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e4b8:	4b14      	ldr	r3, [pc, #80]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4bc:	4a13      	ldr	r2, [pc, #76]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e4be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e4c2:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800e4c4:	e004      	b.n	800e4d0 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800e4cc:	e000      	b.n	800e4d0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800e4ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4d0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d10d      	bne.n	800e4f4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800e4d8:	4b0c      	ldr	r3, [pc, #48]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e4da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800e4de:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800e4e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e4e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800e4ea:	4908      	ldr	r1, [pc, #32]	; (800e50c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800e4ec:	4313      	orrs	r3, r2
 800e4ee:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800e4f2:	e003      	b.n	800e4fc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4f4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800e4f8:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800e4fc:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
}
 800e500:	4618      	mov	r0, r3
 800e502:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800e506:	46bd      	mov	sp, r7
 800e508:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e50c:	46020c00 	.word	0x46020c00

0800e510 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e510:	b480      	push	{r7}
 800e512:	b089      	sub	sp, #36	; 0x24
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800e518:	4bad      	ldr	r3, [pc, #692]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e51a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e51c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e520:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800e522:	4bab      	ldr	r3, [pc, #684]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e526:	f003 0303 	and.w	r3, r3, #3
 800e52a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800e52c:	4ba8      	ldr	r3, [pc, #672]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e530:	0a1b      	lsrs	r3, r3, #8
 800e532:	f003 030f 	and.w	r3, r3, #15
 800e536:	3301      	adds	r3, #1
 800e538:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800e53a:	4ba5      	ldr	r3, [pc, #660]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e53e:	091b      	lsrs	r3, r3, #4
 800e540:	f003 0301 	and.w	r3, r3, #1
 800e544:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800e546:	4ba2      	ldr	r3, [pc, #648]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e54a:	08db      	lsrs	r3, r3, #3
 800e54c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e550:	68fa      	ldr	r2, [r7, #12]
 800e552:	fb02 f303 	mul.w	r3, r2, r3
 800e556:	ee07 3a90 	vmov	s15, r3
 800e55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e55e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	2b00      	cmp	r3, #0
 800e566:	f000 8123 	beq.w	800e7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	2b03      	cmp	r3, #3
 800e56e:	d062      	beq.n	800e636 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	2b03      	cmp	r3, #3
 800e574:	f200 8081 	bhi.w	800e67a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	2b01      	cmp	r3, #1
 800e57c:	d024      	beq.n	800e5c8 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	2b02      	cmp	r3, #2
 800e582:	d17a      	bne.n	800e67a <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	ee07 3a90 	vmov	s15, r3
 800e58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e58e:	eddf 6a91 	vldr	s13, [pc, #580]	; 800e7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800e592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e596:	4b8e      	ldr	r3, [pc, #568]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e59a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e59e:	ee07 3a90 	vmov	s15, r3
 800e5a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e5a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800e5aa:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800e7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e5ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e5b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e5b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e5ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e5be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e5c6:	e08f      	b.n	800e6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e5c8:	4b81      	ldr	r3, [pc, #516]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e5ca:	689b      	ldr	r3, [r3, #8]
 800e5cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d005      	beq.n	800e5e0 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 800e5d4:	4b7e      	ldr	r3, [pc, #504]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e5d6:	689b      	ldr	r3, [r3, #8]
 800e5d8:	0f1b      	lsrs	r3, r3, #28
 800e5da:	f003 030f 	and.w	r3, r3, #15
 800e5de:	e006      	b.n	800e5ee <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 800e5e0:	4b7b      	ldr	r3, [pc, #492]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e5e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e5e6:	041b      	lsls	r3, r3, #16
 800e5e8:	0f1b      	lsrs	r3, r3, #28
 800e5ea:	f003 030f 	and.w	r3, r3, #15
 800e5ee:	4a7b      	ldr	r2, [pc, #492]	; (800e7dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800e5f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5f4:	ee07 3a90 	vmov	s15, r3
 800e5f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	ee07 3a90 	vmov	s15, r3
 800e602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	ee07 3a90 	vmov	s15, r3
 800e610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e614:	ed97 6a02 	vldr	s12, [r7, #8]
 800e618:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800e7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e61c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e628:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e62c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e630:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e634:	e058      	b.n	800e6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e636:	693b      	ldr	r3, [r7, #16]
 800e638:	ee07 3a90 	vmov	s15, r3
 800e63c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e640:	eddf 6a64 	vldr	s13, [pc, #400]	; 800e7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800e644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e648:	4b61      	ldr	r3, [pc, #388]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e64c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e650:	ee07 3a90 	vmov	s15, r3
 800e654:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e658:	ed97 6a02 	vldr	s12, [r7, #8]
 800e65c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800e7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e660:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e664:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800e668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e66c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800e670:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e674:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e678:	e036      	b.n	800e6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e67a:	4b55      	ldr	r3, [pc, #340]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e67c:	689b      	ldr	r3, [r3, #8]
 800e67e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e682:	2b00      	cmp	r3, #0
 800e684:	d005      	beq.n	800e692 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 800e686:	4b52      	ldr	r3, [pc, #328]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e688:	689b      	ldr	r3, [r3, #8]
 800e68a:	0f1b      	lsrs	r3, r3, #28
 800e68c:	f003 030f 	and.w	r3, r3, #15
 800e690:	e006      	b.n	800e6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 800e692:	4b4f      	ldr	r3, [pc, #316]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e694:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e698:	041b      	lsls	r3, r3, #16
 800e69a:	0f1b      	lsrs	r3, r3, #28
 800e69c:	f003 030f 	and.w	r3, r3, #15
 800e6a0:	4a4e      	ldr	r2, [pc, #312]	; (800e7dc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800e6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6a6:	ee07 3a90 	vmov	s15, r3
 800e6aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	ee07 3a90 	vmov	s15, r3
 800e6b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e6bc:	69bb      	ldr	r3, [r7, #24]
 800e6be:	ee07 3a90 	vmov	s15, r3
 800e6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800e6ca:	eddf 5a43 	vldr	s11, [pc, #268]	; 800e7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800e6ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800e6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e6e6:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800e6e8:	4b39      	ldr	r3, [pc, #228]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d017      	beq.n	800e724 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e6f4:	4b36      	ldr	r3, [pc, #216]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6f8:	0a5b      	lsrs	r3, r3, #9
 800e6fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6fe:	ee07 3a90 	vmov	s15, r3
 800e702:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800e706:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e70a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e70e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e71a:	ee17 2a90 	vmov	r2, s15
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	601a      	str	r2, [r3, #0]
 800e722:	e002      	b.n	800e72a <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2200      	movs	r2, #0
 800e728:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800e72a:	4b29      	ldr	r3, [pc, #164]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e72e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e732:	2b00      	cmp	r3, #0
 800e734:	d017      	beq.n	800e766 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e736:	4b26      	ldr	r3, [pc, #152]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e73a:	0c1b      	lsrs	r3, r3, #16
 800e73c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e740:	ee07 3a90 	vmov	s15, r3
 800e744:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800e748:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e74c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e750:	edd7 6a07 	vldr	s13, [r7, #28]
 800e754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e75c:	ee17 2a90 	vmov	r2, s15
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	605a      	str	r2, [r3, #4]
 800e764:	e002      	b.n	800e76c <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2200      	movs	r2, #0
 800e76a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800e76c:	4b18      	ldr	r3, [pc, #96]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e774:	2b00      	cmp	r3, #0
 800e776:	d017      	beq.n	800e7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e778:	4b15      	ldr	r3, [pc, #84]	; (800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800e77a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e77c:	0e1b      	lsrs	r3, r3, #24
 800e77e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e782:	ee07 3a90 	vmov	s15, r3
 800e786:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800e78a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e78e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800e792:	edd7 6a07 	vldr	s13, [r7, #28]
 800e796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e79a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e79e:	ee17 2a90 	vmov	r2, s15
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e7a6:	e00c      	b.n	800e7c2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	609a      	str	r2, [r3, #8]
}
 800e7ae:	e008      	b.n	800e7c2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	609a      	str	r2, [r3, #8]
}
 800e7c2:	bf00      	nop
 800e7c4:	3724      	adds	r7, #36	; 0x24
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr
 800e7ce:	bf00      	nop
 800e7d0:	46020c00 	.word	0x46020c00
 800e7d4:	4b742400 	.word	0x4b742400
 800e7d8:	46000000 	.word	0x46000000
 800e7dc:	0802b9a8 	.word	0x0802b9a8

0800e7e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b089      	sub	sp, #36	; 0x24
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800e7e8:	4bad      	ldr	r3, [pc, #692]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e7ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7f0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800e7f2:	4bab      	ldr	r3, [pc, #684]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7f6:	f003 0303 	and.w	r3, r3, #3
 800e7fa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800e7fc:	4ba8      	ldr	r3, [pc, #672]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e800:	0a1b      	lsrs	r3, r3, #8
 800e802:	f003 030f 	and.w	r3, r3, #15
 800e806:	3301      	adds	r3, #1
 800e808:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800e80a:	4ba5      	ldr	r3, [pc, #660]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e80e:	091b      	lsrs	r3, r3, #4
 800e810:	f003 0301 	and.w	r3, r3, #1
 800e814:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800e816:	4ba2      	ldr	r3, [pc, #648]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e81a:	08db      	lsrs	r3, r3, #3
 800e81c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e820:	68fa      	ldr	r2, [r7, #12]
 800e822:	fb02 f303 	mul.w	r3, r2, r3
 800e826:	ee07 3a90 	vmov	s15, r3
 800e82a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e82e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	2b00      	cmp	r3, #0
 800e836:	f000 8123 	beq.w	800ea80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	2b03      	cmp	r3, #3
 800e83e:	d062      	beq.n	800e906 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	2b03      	cmp	r3, #3
 800e844:	f200 8081 	bhi.w	800e94a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	2b01      	cmp	r3, #1
 800e84c:	d024      	beq.n	800e898 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	2b02      	cmp	r3, #2
 800e852:	d17a      	bne.n	800e94a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	ee07 3a90 	vmov	s15, r3
 800e85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e85e:	eddf 6a91 	vldr	s13, [pc, #580]	; 800eaa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800e862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e866:	4b8e      	ldr	r3, [pc, #568]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e86a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e86e:	ee07 3a90 	vmov	s15, r3
 800e872:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e876:	ed97 6a02 	vldr	s12, [r7, #8]
 800e87a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800eaa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e87e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e882:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e88a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e88e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e896:	e08f      	b.n	800e9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e898:	4b81      	ldr	r3, [pc, #516]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e89a:	689b      	ldr	r3, [r3, #8]
 800e89c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d005      	beq.n	800e8b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 800e8a4:	4b7e      	ldr	r3, [pc, #504]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e8a6:	689b      	ldr	r3, [r3, #8]
 800e8a8:	0f1b      	lsrs	r3, r3, #28
 800e8aa:	f003 030f 	and.w	r3, r3, #15
 800e8ae:	e006      	b.n	800e8be <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 800e8b0:	4b7b      	ldr	r3, [pc, #492]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e8b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e8b6:	041b      	lsls	r3, r3, #16
 800e8b8:	0f1b      	lsrs	r3, r3, #28
 800e8ba:	f003 030f 	and.w	r3, r3, #15
 800e8be:	4a7b      	ldr	r2, [pc, #492]	; (800eaac <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800e8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8c4:	ee07 3a90 	vmov	s15, r3
 800e8c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	ee07 3a90 	vmov	s15, r3
 800e8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	ee07 3a90 	vmov	s15, r3
 800e8e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8e4:	ed97 6a02 	vldr	s12, [r7, #8]
 800e8e8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800eaa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e8ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800e8fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e900:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e904:	e058      	b.n	800e9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	ee07 3a90 	vmov	s15, r3
 800e90c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e910:	eddf 6a64 	vldr	s13, [pc, #400]	; 800eaa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800e914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e918:	4b61      	ldr	r3, [pc, #388]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e91a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e91c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e920:	ee07 3a90 	vmov	s15, r3
 800e924:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e928:	ed97 6a02 	vldr	s12, [r7, #8]
 800e92c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800eaa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e930:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e934:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800e938:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e93c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800e940:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e944:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e948:	e036      	b.n	800e9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e94a:	4b55      	ldr	r3, [pc, #340]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e952:	2b00      	cmp	r3, #0
 800e954:	d005      	beq.n	800e962 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 800e956:	4b52      	ldr	r3, [pc, #328]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e958:	689b      	ldr	r3, [r3, #8]
 800e95a:	0f1b      	lsrs	r3, r3, #28
 800e95c:	f003 030f 	and.w	r3, r3, #15
 800e960:	e006      	b.n	800e970 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 800e962:	4b4f      	ldr	r3, [pc, #316]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e964:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e968:	041b      	lsls	r3, r3, #16
 800e96a:	0f1b      	lsrs	r3, r3, #28
 800e96c:	f003 030f 	and.w	r3, r3, #15
 800e970:	4a4e      	ldr	r2, [pc, #312]	; (800eaac <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800e972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e976:	ee07 3a90 	vmov	s15, r3
 800e97a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	ee07 3a90 	vmov	s15, r3
 800e984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e988:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	ee07 3a90 	vmov	s15, r3
 800e992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e996:	ed97 6a02 	vldr	s12, [r7, #8]
 800e99a:	eddf 5a43 	vldr	s11, [pc, #268]	; 800eaa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800e99e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800e9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e9b6:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800e9b8:	4b39      	ldr	r3, [pc, #228]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d017      	beq.n	800e9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e9c4:	4b36      	ldr	r3, [pc, #216]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e9c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9c8:	0a5b      	lsrs	r3, r3, #9
 800e9ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9ce:	ee07 3a90 	vmov	s15, r3
 800e9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800e9d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e9da:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800e9de:	edd7 6a07 	vldr	s13, [r7, #28]
 800e9e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e9ea:	ee17 2a90 	vmov	r2, s15
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	601a      	str	r2, [r3, #0]
 800e9f2:	e002      	b.n	800e9fa <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800e9fa:	4b29      	ldr	r3, [pc, #164]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800e9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d017      	beq.n	800ea36 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ea06:	4b26      	ldr	r3, [pc, #152]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ea08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea0a:	0c1b      	lsrs	r3, r3, #16
 800ea0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea10:	ee07 3a90 	vmov	s15, r3
 800ea14:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800ea18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea1c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ea20:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea2c:	ee17 2a90 	vmov	r2, s15
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	605a      	str	r2, [r3, #4]
 800ea34:	e002      	b.n	800ea3c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800ea3c:	4b18      	ldr	r3, [pc, #96]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ea3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d017      	beq.n	800ea78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ea48:	4b15      	ldr	r3, [pc, #84]	; (800eaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ea4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea4c:	0e1b      	lsrs	r3, r3, #24
 800ea4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea52:	ee07 3a90 	vmov	s15, r3
 800ea56:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800ea5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea5e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ea62:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea6e:	ee17 2a90 	vmov	r2, s15
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ea76:	e00c      	b.n	800ea92 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	609a      	str	r2, [r3, #8]
}
 800ea7e:	e008      	b.n	800ea92 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2200      	movs	r2, #0
 800ea84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	609a      	str	r2, [r3, #8]
}
 800ea92:	bf00      	nop
 800ea94:	3724      	adds	r7, #36	; 0x24
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr
 800ea9e:	bf00      	nop
 800eaa0:	46020c00 	.word	0x46020c00
 800eaa4:	4b742400 	.word	0x4b742400
 800eaa8:	46000000 	.word	0x46000000
 800eaac:	0802b9a8 	.word	0x0802b9a8

0800eab0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b089      	sub	sp, #36	; 0x24
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800eab8:	4bad      	ldr	r3, [pc, #692]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eaba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eabc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eac0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800eac2:	4bab      	ldr	r3, [pc, #684]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eac6:	f003 0303 	and.w	r3, r3, #3
 800eaca:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800eacc:	4ba8      	ldr	r3, [pc, #672]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ead0:	0a1b      	lsrs	r3, r3, #8
 800ead2:	f003 030f 	and.w	r3, r3, #15
 800ead6:	3301      	adds	r3, #1
 800ead8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800eada:	4ba5      	ldr	r3, [pc, #660]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eade:	091b      	lsrs	r3, r3, #4
 800eae0:	f003 0301 	and.w	r3, r3, #1
 800eae4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800eae6:	4ba2      	ldr	r3, [pc, #648]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eaea:	08db      	lsrs	r3, r3, #3
 800eaec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	fb02 f303 	mul.w	r3, r2, r3
 800eaf6:	ee07 3a90 	vmov	s15, r3
 800eafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eafe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	f000 8123 	beq.w	800ed50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	2b03      	cmp	r3, #3
 800eb0e:	d062      	beq.n	800ebd6 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	2b03      	cmp	r3, #3
 800eb14:	f200 8081 	bhi.w	800ec1a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	d024      	beq.n	800eb68 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	2b02      	cmp	r3, #2
 800eb22:	d17a      	bne.n	800ec1a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	ee07 3a90 	vmov	s15, r3
 800eb2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb2e:	eddf 6a91 	vldr	s13, [pc, #580]	; 800ed74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800eb32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb36:	4b8e      	ldr	r3, [pc, #568]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eb38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb3e:	ee07 3a90 	vmov	s15, r3
 800eb42:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800eb46:	ed97 6a02 	vldr	s12, [r7, #8]
 800eb4a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800ed78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800eb4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800eb52:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800eb56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800eb5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb62:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800eb66:	e08f      	b.n	800ec88 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800eb68:	4b81      	ldr	r3, [pc, #516]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eb6a:	689b      	ldr	r3, [r3, #8]
 800eb6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d005      	beq.n	800eb80 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 800eb74:	4b7e      	ldr	r3, [pc, #504]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	0f1b      	lsrs	r3, r3, #28
 800eb7a:	f003 030f 	and.w	r3, r3, #15
 800eb7e:	e006      	b.n	800eb8e <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 800eb80:	4b7b      	ldr	r3, [pc, #492]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eb82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800eb86:	041b      	lsls	r3, r3, #16
 800eb88:	0f1b      	lsrs	r3, r3, #28
 800eb8a:	f003 030f 	and.w	r3, r3, #15
 800eb8e:	4a7b      	ldr	r2, [pc, #492]	; (800ed7c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800eb90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb94:	ee07 3a90 	vmov	s15, r3
 800eb98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	ee07 3a90 	vmov	s15, r3
 800eba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ebaa:	69bb      	ldr	r3, [r7, #24]
 800ebac:	ee07 3a90 	vmov	s15, r3
 800ebb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebb4:	ed97 6a02 	vldr	s12, [r7, #8]
 800ebb8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800ed78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ebbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ebc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ebc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ebc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ebcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ebd4:	e058      	b.n	800ec88 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	ee07 3a90 	vmov	s15, r3
 800ebdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebe0:	eddf 6a64 	vldr	s13, [pc, #400]	; 800ed74 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800ebe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ebe8:	4b61      	ldr	r3, [pc, #388]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ebea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebf0:	ee07 3a90 	vmov	s15, r3
 800ebf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800ebf8:	ed97 6a02 	vldr	s12, [r7, #8]
 800ebfc:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800ed78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ec00:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ec04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800ec08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ec10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec18:	e036      	b.n	800ec88 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ec1a:	4b55      	ldr	r3, [pc, #340]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ec1c:	689b      	ldr	r3, [r3, #8]
 800ec1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d005      	beq.n	800ec32 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 800ec26:	4b52      	ldr	r3, [pc, #328]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ec28:	689b      	ldr	r3, [r3, #8]
 800ec2a:	0f1b      	lsrs	r3, r3, #28
 800ec2c:	f003 030f 	and.w	r3, r3, #15
 800ec30:	e006      	b.n	800ec40 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 800ec32:	4b4f      	ldr	r3, [pc, #316]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ec34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ec38:	041b      	lsls	r3, r3, #16
 800ec3a:	0f1b      	lsrs	r3, r3, #28
 800ec3c:	f003 030f 	and.w	r3, r3, #15
 800ec40:	4a4e      	ldr	r2, [pc, #312]	; (800ed7c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800ec42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec46:	ee07 3a90 	vmov	s15, r3
 800ec4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	ee07 3a90 	vmov	s15, r3
 800ec54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ec5c:	69bb      	ldr	r3, [r7, #24]
 800ec5e:	ee07 3a90 	vmov	s15, r3
 800ec62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec66:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec6a:	eddf 5a43 	vldr	s11, [pc, #268]	; 800ed78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ec6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ec7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec86:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800ec88:	4b39      	ldr	r3, [pc, #228]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ec8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d017      	beq.n	800ecc4 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ec94:	4b36      	ldr	r3, [pc, #216]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ec96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec98:	0a5b      	lsrs	r3, r3, #9
 800ec9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec9e:	ee07 3a90 	vmov	s15, r3
 800eca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800eca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ecaa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ecae:	edd7 6a07 	vldr	s13, [r7, #28]
 800ecb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ecb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ecba:	ee17 2a90 	vmov	r2, s15
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	601a      	str	r2, [r3, #0]
 800ecc2:	e002      	b.n	800ecca <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800ecca:	4b29      	ldr	r3, [pc, #164]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800eccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d017      	beq.n	800ed06 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ecd6:	4b26      	ldr	r3, [pc, #152]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ecd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecda:	0c1b      	lsrs	r3, r3, #16
 800ecdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ece0:	ee07 3a90 	vmov	s15, r3
 800ece4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800ece8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ecec:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ecf0:	edd7 6a07 	vldr	s13, [r7, #28]
 800ecf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ecf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ecfc:	ee17 2a90 	vmov	r2, s15
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	605a      	str	r2, [r3, #4]
 800ed04:	e002      	b.n	800ed0c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800ed0c:	4b18      	ldr	r3, [pc, #96]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ed0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d017      	beq.n	800ed48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ed18:	4b15      	ldr	r3, [pc, #84]	; (800ed70 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ed1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed1c:	0e1b      	lsrs	r3, r3, #24
 800ed1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed22:	ee07 3a90 	vmov	s15, r3
 800ed26:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800ed2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed2e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ed32:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed3e:	ee17 2a90 	vmov	r2, s15
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800ed46:	e00c      	b.n	800ed62 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	609a      	str	r2, [r3, #8]
}
 800ed4e:	e008      	b.n	800ed62 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2200      	movs	r2, #0
 800ed54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	609a      	str	r2, [r3, #8]
}
 800ed62:	bf00      	nop
 800ed64:	3724      	adds	r7, #36	; 0x24
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr
 800ed6e:	bf00      	nop
 800ed70:	46020c00 	.word	0x46020c00
 800ed74:	4b742400 	.word	0x4b742400
 800ed78:	46000000 	.word	0x46000000
 800ed7c:	0802b9a8 	.word	0x0802b9a8

0800ed80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b08e      	sub	sp, #56	; 0x38
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800ed8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed8e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800ed92:	430b      	orrs	r3, r1
 800ed94:	d145      	bne.n	800ee22 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800ed96:	4ba7      	ldr	r3, [pc, #668]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ed98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ed9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eda0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800eda2:	4ba4      	ldr	r3, [pc, #656]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eda4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800eda8:	f003 0302 	and.w	r3, r3, #2
 800edac:	2b02      	cmp	r3, #2
 800edae:	d108      	bne.n	800edc2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800edb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edb6:	d104      	bne.n	800edc2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800edb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800edbc:	637b      	str	r3, [r7, #52]	; 0x34
 800edbe:	f001 bb58 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800edc2:	4b9c      	ldr	r3, [pc, #624]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800edc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800edc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800edcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800edd0:	d114      	bne.n	800edfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800edd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edd8:	d110      	bne.n	800edfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800edda:	4b96      	ldr	r3, [pc, #600]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eddc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ede0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ede4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ede8:	d103      	bne.n	800edf2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800edea:	23fa      	movs	r3, #250	; 0xfa
 800edec:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800edee:	f001 bb40 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800edf2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800edf6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800edf8:	f001 bb3b 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800edfc:	4b8d      	ldr	r3, [pc, #564]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee08:	d107      	bne.n	800ee1a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800ee0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee10:	d103      	bne.n	800ee1a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800ee12:	4b89      	ldr	r3, [pc, #548]	; (800f038 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800ee14:	637b      	str	r3, [r7, #52]	; 0x34
 800ee16:	f001 bb2c 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	637b      	str	r3, [r7, #52]	; 0x34
 800ee1e:	f001 bb28 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ee22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee26:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ee2a:	430b      	orrs	r3, r1
 800ee2c:	d151      	bne.n	800eed2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800ee2e:	4b81      	ldr	r3, [pc, #516]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ee30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ee34:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800ee38:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800ee3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3c:	2b80      	cmp	r3, #128	; 0x80
 800ee3e:	d035      	beq.n	800eeac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800ee40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee42:	2b80      	cmp	r3, #128	; 0x80
 800ee44:	d841      	bhi.n	800eeca <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800ee46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee48:	2b60      	cmp	r3, #96	; 0x60
 800ee4a:	d02a      	beq.n	800eea2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800ee4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4e:	2b60      	cmp	r3, #96	; 0x60
 800ee50:	d83b      	bhi.n	800eeca <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800ee52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee54:	2b40      	cmp	r3, #64	; 0x40
 800ee56:	d009      	beq.n	800ee6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ee58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5a:	2b40      	cmp	r3, #64	; 0x40
 800ee5c:	d835      	bhi.n	800eeca <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800ee5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d00c      	beq.n	800ee7e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800ee64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee66:	2b20      	cmp	r3, #32
 800ee68:	d012      	beq.n	800ee90 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800ee6a:	e02e      	b.n	800eeca <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7ff fb4d 	bl	800e510 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ee76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ee7a:	f001 bafa 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee7e:	f107 0318 	add.w	r3, r7, #24
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7ff fcac 	bl	800e7e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ee8c:	f001 baf1 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee90:	f107 030c 	add.w	r3, r7, #12
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7ff fe0b 	bl	800eab0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ee9e:	f001 bae8 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800eea2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800eea6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eea8:	f001 bae3 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800eeac:	4b61      	ldr	r3, [pc, #388]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eeb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eeb8:	d103      	bne.n	800eec2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800eeba:	4b60      	ldr	r3, [pc, #384]	; (800f03c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800eebc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800eebe:	f001 bad8 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800eec2:	2300      	movs	r3, #0
 800eec4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eec6:	f001 bad4 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :
      {
        frequency = 0U;
 800eeca:	2300      	movs	r3, #0
 800eecc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800eece:	f001 bad0 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800eed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eed6:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800eeda:	430b      	orrs	r3, r1
 800eedc:	d158      	bne.n	800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800eede:	4b55      	ldr	r3, [pc, #340]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eee0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800eee4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eee8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800eeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eef0:	d03b      	beq.n	800ef6a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800eef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eef8:	d846      	bhi.n	800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800eefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef00:	d02e      	beq.n	800ef60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800ef02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef08:	d83e      	bhi.n	800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ef0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef10:	d00b      	beq.n	800ef2a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800ef12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef18:	d836      	bhi.n	800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ef1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d00d      	beq.n	800ef3c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800ef20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef26:	d012      	beq.n	800ef4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800ef28:	e02e      	b.n	800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ef2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7ff faee 	bl	800e510 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ef34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ef38:	f001 ba9b 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef3c:	f107 0318 	add.w	r3, r7, #24
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7ff fc4d 	bl	800e7e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800ef46:	69bb      	ldr	r3, [r7, #24]
 800ef48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ef4a:	f001 ba92 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef4e:	f107 030c 	add.w	r3, r7, #12
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7ff fdac 	bl	800eab0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ef5c:	f001 ba89 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ef60:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ef64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ef66:	f001 ba84 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ef6a:	4b32      	ldr	r3, [pc, #200]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ef72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef76:	d103      	bne.n	800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800ef78:	4b30      	ldr	r3, [pc, #192]	; (800f03c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ef7a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ef7c:	f001 ba79 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800ef80:	2300      	movs	r3, #0
 800ef82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ef84:	f001 ba75 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :

        frequency = 0U;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ef8c:	f001 ba71 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800ef90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef94:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ef98:	430b      	orrs	r3, r1
 800ef9a:	d126      	bne.n	800efea <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800ef9c:	4b25      	ldr	r3, [pc, #148]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ef9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800efa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efa6:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800efa8:	4b22      	ldr	r3, [pc, #136]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800efb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efb4:	d106      	bne.n	800efc4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800efb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d103      	bne.n	800efc4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800efbc:	4b1f      	ldr	r3, [pc, #124]	; (800f03c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800efbe:	637b      	str	r3, [r7, #52]	; 0x34
 800efc0:	f001 ba57 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800efc4:	4b1b      	ldr	r3, [pc, #108]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800efcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efd0:	d107      	bne.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800efd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800efd8:	d103      	bne.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800efda:	4b19      	ldr	r3, [pc, #100]	; (800f040 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800efdc:	637b      	str	r3, [r7, #52]	; 0x34
 800efde:	f001 ba48 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800efe2:	2300      	movs	r3, #0
 800efe4:	637b      	str	r3, [r7, #52]	; 0x34
 800efe6:	f001 ba44 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800efea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efee:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800eff2:	430b      	orrs	r3, r1
 800eff4:	d16e      	bne.n	800f0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800eff6:	4b0f      	ldr	r3, [pc, #60]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800eff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800effc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800f000:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f004:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f008:	d03d      	beq.n	800f086 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800f00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f010:	d85c      	bhi.n	800f0cc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800f012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f018:	d014      	beq.n	800f044 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800f01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f020:	d854      	bhi.n	800f0cc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800f022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f024:	2b00      	cmp	r3, #0
 800f026:	d01f      	beq.n	800f068 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800f028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f02e:	d012      	beq.n	800f056 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800f030:	e04c      	b.n	800f0cc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800f032:	bf00      	nop
 800f034:	46020c00 	.word	0x46020c00
 800f038:	0007a120 	.word	0x0007a120
 800f03c:	00f42400 	.word	0x00f42400
 800f040:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f048:	4618      	mov	r0, r3
 800f04a:	f7ff fa61 	bl	800e510 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800f04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f050:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f052:	f001 ba0e 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f056:	f107 0318 	add.w	r3, r7, #24
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7ff fbc0 	bl	800e7e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f064:	f001 ba05 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800f068:	4ba7      	ldr	r3, [pc, #668]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f074:	d103      	bne.n	800f07e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800f076:	4ba5      	ldr	r3, [pc, #660]	; (800f30c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800f078:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f07a:	f001 b9fa 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f07e:	2300      	movs	r3, #0
 800f080:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f082:	f001 b9f6 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f086:	4ba0      	ldr	r3, [pc, #640]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f003 0320 	and.w	r3, r3, #32
 800f08e:	2b20      	cmp	r3, #32
 800f090:	d118      	bne.n	800f0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f092:	4b9d      	ldr	r3, [pc, #628]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f094:	689b      	ldr	r3, [r3, #8]
 800f096:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d005      	beq.n	800f0aa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800f09e:	4b9a      	ldr	r3, [pc, #616]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f0a0:	689b      	ldr	r3, [r3, #8]
 800f0a2:	0e1b      	lsrs	r3, r3, #24
 800f0a4:	f003 030f 	and.w	r3, r3, #15
 800f0a8:	e006      	b.n	800f0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800f0aa:	4b97      	ldr	r3, [pc, #604]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f0ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f0b0:	041b      	lsls	r3, r3, #16
 800f0b2:	0e1b      	lsrs	r3, r3, #24
 800f0b4:	f003 030f 	and.w	r3, r3, #15
 800f0b8:	4a95      	ldr	r2, [pc, #596]	; (800f310 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800f0ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0be:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f0c0:	f001 b9d7 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f0c8:	f001 b9d3 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default :

        frequency = 0U;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f0d0:	f001 b9cf 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f0d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0d8:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800f0dc:	430b      	orrs	r3, r1
 800f0de:	d17f      	bne.n	800f1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f0e0:	4b89      	ldr	r3, [pc, #548]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f0e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f0e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f0ea:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800f0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d165      	bne.n	800f1be <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800f0f2:	4b85      	ldr	r3, [pc, #532]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f0f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f0f8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800f0fc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800f0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f100:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f104:	d034      	beq.n	800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800f106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f108:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800f10c:	d853      	bhi.n	800f1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800f10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f110:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f114:	d00b      	beq.n	800f12e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800f116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f118:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f11c:	d84b      	bhi.n	800f1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800f11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f120:	2b00      	cmp	r3, #0
 800f122:	d016      	beq.n	800f152 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800f124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f126:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f12a:	d009      	beq.n	800f140 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800f12c:	e043      	b.n	800f1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f12e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f132:	4618      	mov	r0, r3
 800f134:	f7ff f9ec 	bl	800e510 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f13c:	f001 b999 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f140:	f107 0318 	add.w	r3, r7, #24
 800f144:	4618      	mov	r0, r3
 800f146:	f7ff fb4b 	bl	800e7e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f14e:	f001 b990 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800f152:	4b6d      	ldr	r3, [pc, #436]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f15a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f15e:	d103      	bne.n	800f168 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800f160:	4b6a      	ldr	r3, [pc, #424]	; (800f30c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800f162:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800f164:	f001 b985 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
            frequency = 0U;
 800f168:	2300      	movs	r3, #0
 800f16a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f16c:	f001 b981 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f170:	4b65      	ldr	r3, [pc, #404]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f003 0320 	and.w	r3, r3, #32
 800f178:	2b20      	cmp	r3, #32
 800f17a:	d118      	bne.n	800f1ae <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f17c:	4b62      	ldr	r3, [pc, #392]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f17e:	689b      	ldr	r3, [r3, #8]
 800f180:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f184:	2b00      	cmp	r3, #0
 800f186:	d005      	beq.n	800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800f188:	4b5f      	ldr	r3, [pc, #380]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f18a:	689b      	ldr	r3, [r3, #8]
 800f18c:	0e1b      	lsrs	r3, r3, #24
 800f18e:	f003 030f 	and.w	r3, r3, #15
 800f192:	e006      	b.n	800f1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800f194:	4b5c      	ldr	r3, [pc, #368]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f196:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f19a:	041b      	lsls	r3, r3, #16
 800f19c:	0e1b      	lsrs	r3, r3, #24
 800f19e:	f003 030f 	and.w	r3, r3, #15
 800f1a2:	4a5b      	ldr	r2, [pc, #364]	; (800f310 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800f1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1a8:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800f1aa:	f001 b962 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
            frequency = 0U;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f1b2:	f001 b95e 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
        default :
        {
          frequency = 0U;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800f1ba:	f001 b95a 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800f1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f1c4:	d108      	bne.n	800f1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f1c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7ff f9a0 	bl	800e510 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800f1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d2:	637b      	str	r3, [r7, #52]	; 0x34
 800f1d4:	f001 b94d 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else
    {
      frequency = 0U;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	637b      	str	r3, [r7, #52]	; 0x34
 800f1dc:	f001 b949 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800f1e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1e4:	1e51      	subs	r1, r2, #1
 800f1e6:	430b      	orrs	r3, r1
 800f1e8:	d136      	bne.n	800f258 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800f1ea:	4b47      	ldr	r3, [pc, #284]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f1ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f1f0:	f003 0303 	and.w	r3, r3, #3
 800f1f4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800f1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d104      	bne.n	800f206 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800f1fc:	f7fe f96a 	bl	800d4d4 <HAL_RCC_GetPCLK2Freq>
 800f200:	6378      	str	r0, [r7, #52]	; 0x34
 800f202:	f001 b936 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800f206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d104      	bne.n	800f216 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f20c:	f7fe f82c 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 800f210:	6378      	str	r0, [r7, #52]	; 0x34
 800f212:	f001 b92e 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800f216:	4b3c      	ldr	r3, [pc, #240]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f21e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f222:	d106      	bne.n	800f232 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800f224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f226:	2b02      	cmp	r3, #2
 800f228:	d103      	bne.n	800f232 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800f22a:	4b3a      	ldr	r3, [pc, #232]	; (800f314 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800f22c:	637b      	str	r3, [r7, #52]	; 0x34
 800f22e:	f001 b920 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800f232:	4b35      	ldr	r3, [pc, #212]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f238:	f003 0302 	and.w	r3, r3, #2
 800f23c:	2b02      	cmp	r3, #2
 800f23e:	d107      	bne.n	800f250 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800f240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f242:	2b03      	cmp	r3, #3
 800f244:	d104      	bne.n	800f250 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800f246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f24a:	637b      	str	r3, [r7, #52]	; 0x34
 800f24c:	f001 b911 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800f250:	2300      	movs	r3, #0
 800f252:	637b      	str	r3, [r7, #52]	; 0x34
 800f254:	f001 b90d 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800f258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f25c:	1e91      	subs	r1, r2, #2
 800f25e:	430b      	orrs	r3, r1
 800f260:	d136      	bne.n	800f2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800f262:	4b29      	ldr	r3, [pc, #164]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f268:	f003 030c 	and.w	r3, r3, #12
 800f26c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800f26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f270:	2b00      	cmp	r3, #0
 800f272:	d104      	bne.n	800f27e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f274:	f7fe f91a 	bl	800d4ac <HAL_RCC_GetPCLK1Freq>
 800f278:	6378      	str	r0, [r7, #52]	; 0x34
 800f27a:	f001 b8fa 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800f27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f280:	2b04      	cmp	r3, #4
 800f282:	d104      	bne.n	800f28e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f284:	f7fd fff0 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 800f288:	6378      	str	r0, [r7, #52]	; 0x34
 800f28a:	f001 b8f2 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800f28e:	4b1e      	ldr	r3, [pc, #120]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f29a:	d106      	bne.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800f29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29e:	2b08      	cmp	r3, #8
 800f2a0:	d103      	bne.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800f2a2:	4b1c      	ldr	r3, [pc, #112]	; (800f314 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800f2a4:	637b      	str	r3, [r7, #52]	; 0x34
 800f2a6:	f001 b8e4 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800f2aa:	4b17      	ldr	r3, [pc, #92]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f2ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f2b0:	f003 0302 	and.w	r3, r3, #2
 800f2b4:	2b02      	cmp	r3, #2
 800f2b6:	d107      	bne.n	800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800f2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ba:	2b0c      	cmp	r3, #12
 800f2bc:	d104      	bne.n	800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800f2be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2c2:	637b      	str	r3, [r7, #52]	; 0x34
 800f2c4:	f001 b8d5 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	637b      	str	r3, [r7, #52]	; 0x34
 800f2cc:	f001 b8d1 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800f2d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2d4:	1f11      	subs	r1, r2, #4
 800f2d6:	430b      	orrs	r3, r1
 800f2d8:	d13f      	bne.n	800f35a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800f2da:	4b0b      	ldr	r3, [pc, #44]	; (800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800f2dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f2e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f2e4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800f2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d104      	bne.n	800f2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f2ec:	f7fe f8de 	bl	800d4ac <HAL_RCC_GetPCLK1Freq>
 800f2f0:	6378      	str	r0, [r7, #52]	; 0x34
 800f2f2:	f001 b8be 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800f2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f8:	2b10      	cmp	r3, #16
 800f2fa:	d10d      	bne.n	800f318 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f2fc:	f7fd ffb4 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 800f300:	6378      	str	r0, [r7, #52]	; 0x34
 800f302:	f001 b8b6 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800f306:	bf00      	nop
 800f308:	46020c00 	.word	0x46020c00
 800f30c:	02dc6c00 	.word	0x02dc6c00
 800f310:	0802b9a8 	.word	0x0802b9a8
 800f314:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800f318:	4ba8      	ldr	r3, [pc, #672]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f324:	d106      	bne.n	800f334 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800f326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f328:	2b20      	cmp	r3, #32
 800f32a:	d103      	bne.n	800f334 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800f32c:	4ba4      	ldr	r3, [pc, #656]	; (800f5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f32e:	637b      	str	r3, [r7, #52]	; 0x34
 800f330:	f001 b89f 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800f334:	4ba1      	ldr	r3, [pc, #644]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f33a:	f003 0302 	and.w	r3, r3, #2
 800f33e:	2b02      	cmp	r3, #2
 800f340:	d107      	bne.n	800f352 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800f342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f344:	2b30      	cmp	r3, #48	; 0x30
 800f346:	d104      	bne.n	800f352 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800f348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f34c:	637b      	str	r3, [r7, #52]	; 0x34
 800f34e:	f001 b890 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800f352:	2300      	movs	r3, #0
 800f354:	637b      	str	r3, [r7, #52]	; 0x34
 800f356:	f001 b88c 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800f35a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f35e:	f1a2 0108 	sub.w	r1, r2, #8
 800f362:	430b      	orrs	r3, r1
 800f364:	d136      	bne.n	800f3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800f366:	4b95      	ldr	r3, [pc, #596]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f36c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f370:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800f372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f374:	2b00      	cmp	r3, #0
 800f376:	d104      	bne.n	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f378:	f7fe f898 	bl	800d4ac <HAL_RCC_GetPCLK1Freq>
 800f37c:	6378      	str	r0, [r7, #52]	; 0x34
 800f37e:	f001 b878 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800f382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f384:	2b40      	cmp	r3, #64	; 0x40
 800f386:	d104      	bne.n	800f392 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f388:	f7fd ff6e 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 800f38c:	6378      	str	r0, [r7, #52]	; 0x34
 800f38e:	f001 b870 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800f392:	4b8a      	ldr	r3, [pc, #552]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f39a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f39e:	d106      	bne.n	800f3ae <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800f3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a2:	2b80      	cmp	r3, #128	; 0x80
 800f3a4:	d103      	bne.n	800f3ae <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800f3a6:	4b86      	ldr	r3, [pc, #536]	; (800f5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f3a8:	637b      	str	r3, [r7, #52]	; 0x34
 800f3aa:	f001 b862 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800f3ae:	4b83      	ldr	r3, [pc, #524]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f3b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f3b4:	f003 0302 	and.w	r3, r3, #2
 800f3b8:	2b02      	cmp	r3, #2
 800f3ba:	d107      	bne.n	800f3cc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800f3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3be:	2bc0      	cmp	r3, #192	; 0xc0
 800f3c0:	d104      	bne.n	800f3cc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800f3c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3c6:	637b      	str	r3, [r7, #52]	; 0x34
 800f3c8:	f001 b853 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	637b      	str	r3, [r7, #52]	; 0x34
 800f3d0:	f001 b84f 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800f3d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3d8:	f1a2 0110 	sub.w	r1, r2, #16
 800f3dc:	430b      	orrs	r3, r1
 800f3de:	d139      	bne.n	800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800f3e0:	4b76      	ldr	r3, [pc, #472]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f3e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3ea:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800f3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d104      	bne.n	800f3fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f3f2:	f7fe f85b 	bl	800d4ac <HAL_RCC_GetPCLK1Freq>
 800f3f6:	6378      	str	r0, [r7, #52]	; 0x34
 800f3f8:	f001 b83b 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800f3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f402:	d104      	bne.n	800f40e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f404:	f7fd ff30 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 800f408:	6378      	str	r0, [r7, #52]	; 0x34
 800f40a:	f001 b832 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800f40e:	4b6b      	ldr	r3, [pc, #428]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f41a:	d107      	bne.n	800f42c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800f41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f422:	d103      	bne.n	800f42c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800f424:	4b66      	ldr	r3, [pc, #408]	; (800f5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f426:	637b      	str	r3, [r7, #52]	; 0x34
 800f428:	f001 b823 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800f42c:	4b63      	ldr	r3, [pc, #396]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f42e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f432:	f003 0302 	and.w	r3, r3, #2
 800f436:	2b02      	cmp	r3, #2
 800f438:	d108      	bne.n	800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800f43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f43c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f440:	d104      	bne.n	800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800f442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f446:	637b      	str	r3, [r7, #52]	; 0x34
 800f448:	f001 b813 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800f44c:	2300      	movs	r3, #0
 800f44e:	637b      	str	r3, [r7, #52]	; 0x34
 800f450:	f001 b80f 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800f454:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f458:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800f45c:	430b      	orrs	r3, r1
 800f45e:	d139      	bne.n	800f4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800f460:	4b56      	ldr	r3, [pc, #344]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f462:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f466:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f46a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800f46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d104      	bne.n	800f47c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f472:	f7fe f81b 	bl	800d4ac <HAL_RCC_GetPCLK1Freq>
 800f476:	6378      	str	r0, [r7, #52]	; 0x34
 800f478:	f000 bffb 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800f47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f47e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f482:	d104      	bne.n	800f48e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f484:	f7fd fef0 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 800f488:	6378      	str	r0, [r7, #52]	; 0x34
 800f48a:	f000 bff2 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800f48e:	4b4b      	ldr	r3, [pc, #300]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f49a:	d107      	bne.n	800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800f49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f49e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f4a2:	d103      	bne.n	800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800f4a4:	4b46      	ldr	r3, [pc, #280]	; (800f5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f4a6:	637b      	str	r3, [r7, #52]	; 0x34
 800f4a8:	f000 bfe3 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800f4ac:	4b43      	ldr	r3, [pc, #268]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f4ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f4b2:	f003 0302 	and.w	r3, r3, #2
 800f4b6:	2b02      	cmp	r3, #2
 800f4b8:	d108      	bne.n	800f4cc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800f4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f4c0:	d104      	bne.n	800f4cc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800f4c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4c6:	637b      	str	r3, [r7, #52]	; 0x34
 800f4c8:	f000 bfd3 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	637b      	str	r3, [r7, #52]	; 0x34
 800f4d0:	f000 bfcf 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800f4d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4d8:	f1a2 0120 	sub.w	r1, r2, #32
 800f4dc:	430b      	orrs	r3, r1
 800f4de:	d158      	bne.n	800f592 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800f4e0:	4b36      	ldr	r3, [pc, #216]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f4e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f4e6:	f003 0307 	and.w	r3, r3, #7
 800f4ea:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800f4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d104      	bne.n	800f4fc <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800f4f2:	f7fe f803 	bl	800d4fc <HAL_RCC_GetPCLK3Freq>
 800f4f6:	6378      	str	r0, [r7, #52]	; 0x34
 800f4f8:	f000 bfbb 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800f4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4fe:	2b01      	cmp	r3, #1
 800f500:	d104      	bne.n	800f50c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f502:	f7fd feb1 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 800f506:	6378      	str	r0, [r7, #52]	; 0x34
 800f508:	f000 bfb3 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800f50c:	4b2b      	ldr	r3, [pc, #172]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f518:	d106      	bne.n	800f528 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800f51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51c:	2b02      	cmp	r3, #2
 800f51e:	d103      	bne.n	800f528 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800f520:	4b27      	ldr	r3, [pc, #156]	; (800f5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f522:	637b      	str	r3, [r7, #52]	; 0x34
 800f524:	f000 bfa5 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800f528:	4b24      	ldr	r3, [pc, #144]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f52a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800f52e:	f003 0302 	and.w	r3, r3, #2
 800f532:	2b02      	cmp	r3, #2
 800f534:	d107      	bne.n	800f546 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800f536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f538:	2b03      	cmp	r3, #3
 800f53a:	d104      	bne.n	800f546 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800f53c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f540:	637b      	str	r3, [r7, #52]	; 0x34
 800f542:	f000 bf96 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800f546:	4b1d      	ldr	r3, [pc, #116]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f003 0320 	and.w	r3, r3, #32
 800f54e:	2b20      	cmp	r3, #32
 800f550:	d11b      	bne.n	800f58a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800f552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f554:	2b04      	cmp	r3, #4
 800f556:	d118      	bne.n	800f58a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f558:	4b18      	ldr	r3, [pc, #96]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f55a:	689b      	ldr	r3, [r3, #8]
 800f55c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f560:	2b00      	cmp	r3, #0
 800f562:	d005      	beq.n	800f570 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800f564:	4b15      	ldr	r3, [pc, #84]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f566:	689b      	ldr	r3, [r3, #8]
 800f568:	0e1b      	lsrs	r3, r3, #24
 800f56a:	f003 030f 	and.w	r3, r3, #15
 800f56e:	e006      	b.n	800f57e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800f570:	4b12      	ldr	r3, [pc, #72]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f572:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f576:	041b      	lsls	r3, r3, #16
 800f578:	0e1b      	lsrs	r3, r3, #24
 800f57a:	f003 030f 	and.w	r3, r3, #15
 800f57e:	4a11      	ldr	r2, [pc, #68]	; (800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f584:	637b      	str	r3, [r7, #52]	; 0x34
 800f586:	f000 bf74 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800f58a:	2300      	movs	r3, #0
 800f58c:	637b      	str	r3, [r7, #52]	; 0x34
 800f58e:	f000 bf70 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800f592:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f596:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800f59a:	430b      	orrs	r3, r1
 800f59c:	d172      	bne.n	800f684 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800f59e:	4b07      	ldr	r3, [pc, #28]	; (800f5bc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800f5a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f5a4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f5a8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800f5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5b0:	d10a      	bne.n	800f5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f5b2:	f7fd fe59 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 800f5b6:	6378      	str	r0, [r7, #52]	; 0x34
 800f5b8:	f000 bf5b 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800f5bc:	46020c00 	.word	0x46020c00
 800f5c0:	00f42400 	.word	0x00f42400
 800f5c4:	0802b9a8 	.word	0x0802b9a8
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800f5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f5ce:	d108      	bne.n	800f5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5d0:	f107 0318 	add.w	r3, r7, #24
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7ff f903 	bl	800e7e0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800f5da:	6a3b      	ldr	r3, [r7, #32]
 800f5dc:	637b      	str	r3, [r7, #52]	; 0x34
 800f5de:	f000 bf48 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800f5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d104      	bne.n	800f5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800f5e8:	f7fd ff46 	bl	800d478 <HAL_RCC_GetHCLKFreq>
 800f5ec:	6378      	str	r0, [r7, #52]	; 0x34
 800f5ee:	f000 bf40 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800f5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800f5f8:	d122      	bne.n	800f640 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f5fa:	4baa      	ldr	r3, [pc, #680]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	f003 0320 	and.w	r3, r3, #32
 800f602:	2b20      	cmp	r3, #32
 800f604:	d118      	bne.n	800f638 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f606:	4ba7      	ldr	r3, [pc, #668]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d005      	beq.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800f612:	4ba4      	ldr	r3, [pc, #656]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f614:	689b      	ldr	r3, [r3, #8]
 800f616:	0e1b      	lsrs	r3, r3, #24
 800f618:	f003 030f 	and.w	r3, r3, #15
 800f61c:	e006      	b.n	800f62c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800f61e:	4ba1      	ldr	r3, [pc, #644]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f620:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f624:	041b      	lsls	r3, r3, #16
 800f626:	0e1b      	lsrs	r3, r3, #24
 800f628:	f003 030f 	and.w	r3, r3, #15
 800f62c:	4a9e      	ldr	r2, [pc, #632]	; (800f8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800f62e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f632:	637b      	str	r3, [r7, #52]	; 0x34
 800f634:	f000 bf1d 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 800f638:	2300      	movs	r3, #0
 800f63a:	637b      	str	r3, [r7, #52]	; 0x34
 800f63c:	f000 bf19 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800f640:	4b98      	ldr	r3, [pc, #608]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f64c:	d107      	bne.n	800f65e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800f64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f650:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f654:	d103      	bne.n	800f65e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800f656:	4b95      	ldr	r3, [pc, #596]	; (800f8ac <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800f658:	637b      	str	r3, [r7, #52]	; 0x34
 800f65a:	f000 bf0a 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800f65e:	4b91      	ldr	r3, [pc, #580]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f66a:	d107      	bne.n	800f67c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800f66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f672:	d103      	bne.n	800f67c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800f674:	4b8d      	ldr	r3, [pc, #564]	; (800f8ac <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800f676:	637b      	str	r3, [r7, #52]	; 0x34
 800f678:	f000 befb 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800f67c:	2300      	movs	r3, #0
 800f67e:	637b      	str	r3, [r7, #52]	; 0x34
 800f680:	f000 bef7 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800f684:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f688:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800f68c:	430b      	orrs	r3, r1
 800f68e:	d158      	bne.n	800f742 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800f690:	4b84      	ldr	r3, [pc, #528]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f692:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f696:	f003 0307 	and.w	r3, r3, #7
 800f69a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69e:	2b04      	cmp	r3, #4
 800f6a0:	d84b      	bhi.n	800f73a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800f6a2:	a201      	add	r2, pc, #4	; (adr r2, 800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800f6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6a8:	0800f6e1 	.word	0x0800f6e1
 800f6ac:	0800f6bd 	.word	0x0800f6bd
 800f6b0:	0800f6cf 	.word	0x0800f6cf
 800f6b4:	0800f6eb 	.word	0x0800f6eb
 800f6b8:	0800f6f5 	.word	0x0800f6f5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f6bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7fe ff25 	bl	800e510 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f6ca:	f000 bed2 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6ce:	f107 030c 	add.w	r3, r7, #12
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7ff f9ec 	bl	800eab0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f6dc:	f000 bec9 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f6e0:	f7fd feca 	bl	800d478 <HAL_RCC_GetHCLKFreq>
 800f6e4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f6e6:	f000 bec4 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f6ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f6ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f6f0:	f000 bebf 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f6f4:	4b6b      	ldr	r3, [pc, #428]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	f003 0320 	and.w	r3, r3, #32
 800f6fc:	2b20      	cmp	r3, #32
 800f6fe:	d118      	bne.n	800f732 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f700:	4b68      	ldr	r3, [pc, #416]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f702:	689b      	ldr	r3, [r3, #8]
 800f704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d005      	beq.n	800f718 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800f70c:	4b65      	ldr	r3, [pc, #404]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f70e:	689b      	ldr	r3, [r3, #8]
 800f710:	0e1b      	lsrs	r3, r3, #24
 800f712:	f003 030f 	and.w	r3, r3, #15
 800f716:	e006      	b.n	800f726 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800f718:	4b62      	ldr	r3, [pc, #392]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f71a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f71e:	041b      	lsls	r3, r3, #16
 800f720:	0e1b      	lsrs	r3, r3, #24
 800f722:	f003 030f 	and.w	r3, r3, #15
 800f726:	4a60      	ldr	r2, [pc, #384]	; (800f8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800f728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f72c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f72e:	f000 bea0 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f732:	2300      	movs	r3, #0
 800f734:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f736:	f000 be9c 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800f73a:	2300      	movs	r3, #0
 800f73c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f73e:	f000 be98 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800f742:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f746:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800f74a:	430b      	orrs	r3, r1
 800f74c:	d167      	bne.n	800f81e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800f74e:	4b55      	ldr	r3, [pc, #340]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f754:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f758:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f760:	d036      	beq.n	800f7d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800f762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f764:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f768:	d855      	bhi.n	800f816 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f76c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f770:	d029      	beq.n	800f7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800f772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f774:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f778:	d84d      	bhi.n	800f816 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f77c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f780:	d013      	beq.n	800f7aa <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800f782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f788:	d845      	bhi.n	800f816 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800f78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d015      	beq.n	800f7bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800f790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f796:	d13e      	bne.n	800f816 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f79c:	4618      	mov	r0, r3
 800f79e:	f7fe feb7 	bl	800e510 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800f7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f7a6:	f000 be64 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f7aa:	f107 030c 	add.w	r3, r7, #12
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7ff f97e 	bl	800eab0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f7b8:	f000 be5b 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800f7bc:	f7fd fe5c 	bl	800d478 <HAL_RCC_GetHCLKFreq>
 800f7c0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f7c2:	f000 be56 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800f7c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f7ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f7cc:	f000 be51 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f7d0:	4b34      	ldr	r3, [pc, #208]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f003 0320 	and.w	r3, r3, #32
 800f7d8:	2b20      	cmp	r3, #32
 800f7da:	d118      	bne.n	800f80e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f7dc:	4b31      	ldr	r3, [pc, #196]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f7de:	689b      	ldr	r3, [r3, #8]
 800f7e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d005      	beq.n	800f7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800f7e8:	4b2e      	ldr	r3, [pc, #184]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	0e1b      	lsrs	r3, r3, #24
 800f7ee:	f003 030f 	and.w	r3, r3, #15
 800f7f2:	e006      	b.n	800f802 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f7f4:	4b2b      	ldr	r3, [pc, #172]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f7f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f7fa:	041b      	lsls	r3, r3, #16
 800f7fc:	0e1b      	lsrs	r3, r3, #24
 800f7fe:	f003 030f 	and.w	r3, r3, #15
 800f802:	4a29      	ldr	r2, [pc, #164]	; (800f8a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>)
 800f804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f808:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f80a:	f000 be32 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f80e:	2300      	movs	r3, #0
 800f810:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f812:	f000 be2e 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800f816:	2300      	movs	r3, #0
 800f818:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f81a:	f000 be2a 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800f81e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f822:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800f826:	430b      	orrs	r3, r1
 800f828:	d153      	bne.n	800f8d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800f82a:	4b1e      	ldr	r3, [pc, #120]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f82c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f830:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f834:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800f836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d104      	bne.n	800f846 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f83c:	f7fd fe36 	bl	800d4ac <HAL_RCC_GetPCLK1Freq>
 800f840:	6378      	str	r0, [r7, #52]	; 0x34
 800f842:	f000 be16 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800f846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f84c:	d104      	bne.n	800f858 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f84e:	f7fd fd0b 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 800f852:	6378      	str	r0, [r7, #52]	; 0x34
 800f854:	f000 be0d 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800f858:	4b12      	ldr	r3, [pc, #72]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f864:	d107      	bne.n	800f876 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800f866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f86c:	d103      	bne.n	800f876 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800f86e:	4b0f      	ldr	r3, [pc, #60]	; (800f8ac <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>)
 800f870:	637b      	str	r3, [r7, #52]	; 0x34
 800f872:	f000 bdfe 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800f876:	4b0b      	ldr	r3, [pc, #44]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f003 0320 	and.w	r3, r3, #32
 800f87e:	2b20      	cmp	r3, #32
 800f880:	d123      	bne.n	800f8ca <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800f882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f884:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f888:	d11f      	bne.n	800f8ca <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f88a:	4b06      	ldr	r3, [pc, #24]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f88c:	689b      	ldr	r3, [r3, #8]
 800f88e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f892:	2b00      	cmp	r3, #0
 800f894:	d00c      	beq.n	800f8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800f896:	4b03      	ldr	r3, [pc, #12]	; (800f8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>)
 800f898:	689b      	ldr	r3, [r3, #8]
 800f89a:	0e1b      	lsrs	r3, r3, #24
 800f89c:	f003 030f 	and.w	r3, r3, #15
 800f8a0:	e00d      	b.n	800f8be <HAL_RCCEx_GetPeriphCLKFreq+0xb3e>
 800f8a2:	bf00      	nop
 800f8a4:	46020c00 	.word	0x46020c00
 800f8a8:	0802b9a8 	.word	0x0802b9a8
 800f8ac:	00f42400 	.word	0x00f42400
 800f8b0:	4ba0      	ldr	r3, [pc, #640]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f8b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f8b6:	041b      	lsls	r3, r3, #16
 800f8b8:	0e1b      	lsrs	r3, r3, #24
 800f8ba:	f003 030f 	and.w	r3, r3, #15
 800f8be:	4a9e      	ldr	r2, [pc, #632]	; (800fb38 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8c4:	637b      	str	r3, [r7, #52]	; 0x34
 800f8c6:	f000 bdd4 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	637b      	str	r3, [r7, #52]	; 0x34
 800f8ce:	f000 bdd0 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800f8d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8d6:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800f8da:	430b      	orrs	r3, r1
 800f8dc:	d14c      	bne.n	800f978 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800f8de:	4b95      	ldr	r3, [pc, #596]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f8e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8e4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f8e8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800f8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d104      	bne.n	800f8fa <HAL_RCCEx_GetPeriphCLKFreq+0xb7a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800f8f0:	f7fd fddc 	bl	800d4ac <HAL_RCC_GetPCLK1Freq>
 800f8f4:	6378      	str	r0, [r7, #52]	; 0x34
 800f8f6:	f000 bdbc 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800f8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f900:	d104      	bne.n	800f90c <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800f902:	f7fd fcb1 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 800f906:	6378      	str	r0, [r7, #52]	; 0x34
 800f908:	f000 bdb3 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800f90c:	4b89      	ldr	r3, [pc, #548]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f918:	d107      	bne.n	800f92a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800f91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f920:	d103      	bne.n	800f92a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
    {
      frequency = HSI_VALUE;
 800f922:	4b86      	ldr	r3, [pc, #536]	; (800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f924:	637b      	str	r3, [r7, #52]	; 0x34
 800f926:	f000 bda4 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800f92a:	4b82      	ldr	r3, [pc, #520]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f003 0320 	and.w	r3, r3, #32
 800f932:	2b20      	cmp	r3, #32
 800f934:	d11c      	bne.n	800f970 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
 800f936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f938:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f93c:	d118      	bne.n	800f970 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f93e:	4b7d      	ldr	r3, [pc, #500]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f940:	689b      	ldr	r3, [r3, #8]
 800f942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f946:	2b00      	cmp	r3, #0
 800f948:	d005      	beq.n	800f956 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 800f94a:	4b7a      	ldr	r3, [pc, #488]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f94c:	689b      	ldr	r3, [r3, #8]
 800f94e:	0e1b      	lsrs	r3, r3, #24
 800f950:	f003 030f 	and.w	r3, r3, #15
 800f954:	e006      	b.n	800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 800f956:	4b77      	ldr	r3, [pc, #476]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f95c:	041b      	lsls	r3, r3, #16
 800f95e:	0e1b      	lsrs	r3, r3, #24
 800f960:	f003 030f 	and.w	r3, r3, #15
 800f964:	4a74      	ldr	r2, [pc, #464]	; (800fb38 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800f966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f96a:	637b      	str	r3, [r7, #52]	; 0x34
 800f96c:	f000 bd81 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800f970:	2300      	movs	r3, #0
 800f972:	637b      	str	r3, [r7, #52]	; 0x34
 800f974:	f000 bd7d 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800f978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f97c:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800f980:	430b      	orrs	r3, r1
 800f982:	d158      	bne.n	800fa36 <HAL_RCCEx_GetPeriphCLKFreq+0xcb6>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800f984:	4b6b      	ldr	r3, [pc, #428]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f986:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f98a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f98e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800f990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f992:	2bc0      	cmp	r3, #192	; 0xc0
 800f994:	d028      	beq.n	800f9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 800f996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f998:	2bc0      	cmp	r3, #192	; 0xc0
 800f99a:	d848      	bhi.n	800fa2e <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
 800f99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99e:	2b80      	cmp	r3, #128	; 0x80
 800f9a0:	d00e      	beq.n	800f9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
 800f9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a4:	2b80      	cmp	r3, #128	; 0x80
 800f9a6:	d842      	bhi.n	800fa2e <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
 800f9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d003      	beq.n	800f9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 800f9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b0:	2b40      	cmp	r3, #64	; 0x40
 800f9b2:	d014      	beq.n	800f9de <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
 800f9b4:	e03b      	b.n	800fa2e <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800f9b6:	f7fd fda1 	bl	800d4fc <HAL_RCC_GetPCLK3Freq>
 800f9ba:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f9bc:	f000 bd59 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f9c0:	4b5c      	ldr	r3, [pc, #368]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f9c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9cc:	d103      	bne.n	800f9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
        {
          frequency = HSI_VALUE;
 800f9ce:	4b5b      	ldr	r3, [pc, #364]	; (800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800f9d0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800f9d2:	f000 bd4e 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800f9da:	f000 bd4a 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800f9de:	f7fd fc43 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 800f9e2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800f9e4:	f000 bd45 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800f9e8:	4b52      	ldr	r3, [pc, #328]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f003 0320 	and.w	r3, r3, #32
 800f9f0:	2b20      	cmp	r3, #32
 800f9f2:	d118      	bne.n	800fa26 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800f9f4:	4b4f      	ldr	r3, [pc, #316]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800f9f6:	689b      	ldr	r3, [r3, #8]
 800f9f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d005      	beq.n	800fa0c <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
 800fa00:	4b4c      	ldr	r3, [pc, #304]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	0e1b      	lsrs	r3, r3, #24
 800fa06:	f003 030f 	and.w	r3, r3, #15
 800fa0a:	e006      	b.n	800fa1a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800fa0c:	4b49      	ldr	r3, [pc, #292]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fa0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fa12:	041b      	lsls	r3, r3, #16
 800fa14:	0e1b      	lsrs	r3, r3, #24
 800fa16:	f003 030f 	and.w	r3, r3, #15
 800fa1a:	4a47      	ldr	r2, [pc, #284]	; (800fb38 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800fa1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa20:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800fa22:	f000 bd26 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800fa26:	2300      	movs	r3, #0
 800fa28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa2a:	f000 bd22 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      default:
      {
        frequency = 0U;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800fa32:	f000 bd1e 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800fa36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa3a:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800fa3e:	430b      	orrs	r3, r1
 800fa40:	d14c      	bne.n	800fadc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800fa42:	4b3c      	ldr	r3, [pc, #240]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fa44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fa48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fa4c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800fa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d104      	bne.n	800fa5e <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fa54:	f7fd fd2a 	bl	800d4ac <HAL_RCC_GetPCLK1Freq>
 800fa58:	6378      	str	r0, [r7, #52]	; 0x34
 800fa5a:	f000 bd0a 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800fa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fa64:	d104      	bne.n	800fa70 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fa66:	f7fd fbff 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 800fa6a:	6378      	str	r0, [r7, #52]	; 0x34
 800fa6c:	f000 bd01 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800fa70:	4b30      	ldr	r3, [pc, #192]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fa78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa7c:	d107      	bne.n	800fa8e <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 800fa7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa84:	d103      	bne.n	800fa8e <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
    {
      frequency = HSI_VALUE;
 800fa86:	4b2d      	ldr	r3, [pc, #180]	; (800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800fa88:	637b      	str	r3, [r7, #52]	; 0x34
 800fa8a:	f000 bcf2 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800fa8e:	4b29      	ldr	r3, [pc, #164]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f003 0320 	and.w	r3, r3, #32
 800fa96:	2b20      	cmp	r3, #32
 800fa98:	d11c      	bne.n	800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800fa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800faa0:	d118      	bne.n	800fad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800faa2:	4b24      	ldr	r3, [pc, #144]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800faa4:	689b      	ldr	r3, [r3, #8]
 800faa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d005      	beq.n	800faba <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800faae:	4b21      	ldr	r3, [pc, #132]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fab0:	689b      	ldr	r3, [r3, #8]
 800fab2:	0e1b      	lsrs	r3, r3, #24
 800fab4:	f003 030f 	and.w	r3, r3, #15
 800fab8:	e006      	b.n	800fac8 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 800faba:	4b1e      	ldr	r3, [pc, #120]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fabc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fac0:	041b      	lsls	r3, r3, #16
 800fac2:	0e1b      	lsrs	r3, r3, #24
 800fac4:	f003 030f 	and.w	r3, r3, #15
 800fac8:	4a1b      	ldr	r2, [pc, #108]	; (800fb38 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800faca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800face:	637b      	str	r3, [r7, #52]	; 0x34
 800fad0:	f000 bccf 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800fad4:	2300      	movs	r3, #0
 800fad6:	637b      	str	r3, [r7, #52]	; 0x34
 800fad8:	f000 bccb 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800fadc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fae0:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800fae4:	430b      	orrs	r3, r1
 800fae6:	d152      	bne.n	800fb8e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800fae8:	4b12      	ldr	r3, [pc, #72]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800faea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800faee:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800faf2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800faf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d104      	bne.n	800fb04 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fafa:	f7fd fcd7 	bl	800d4ac <HAL_RCC_GetPCLK1Freq>
 800fafe:	6378      	str	r0, [r7, #52]	; 0x34
 800fb00:	f000 bcb7 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800fb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fb0a:	d104      	bne.n	800fb16 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fb0c:	f7fd fbac 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 800fb10:	6378      	str	r0, [r7, #52]	; 0x34
 800fb12:	f000 bcae 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800fb16:	4b07      	ldr	r3, [pc, #28]	; (800fb34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb22:	d10d      	bne.n	800fb40 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
 800fb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fb2a:	d109      	bne.n	800fb40 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
    {
      frequency = HSI_VALUE;
 800fb2c:	4b03      	ldr	r3, [pc, #12]	; (800fb3c <HAL_RCCEx_GetPeriphCLKFreq+0xdbc>)
 800fb2e:	637b      	str	r3, [r7, #52]	; 0x34
 800fb30:	f000 bc9f 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800fb34:	46020c00 	.word	0x46020c00
 800fb38:	0802b9a8 	.word	0x0802b9a8
 800fb3c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800fb40:	4ba6      	ldr	r3, [pc, #664]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	f003 0320 	and.w	r3, r3, #32
 800fb48:	2b20      	cmp	r3, #32
 800fb4a:	d11c      	bne.n	800fb86 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
 800fb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800fb52:	d118      	bne.n	800fb86 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fb54:	4ba1      	ldr	r3, [pc, #644]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fb56:	689b      	ldr	r3, [r3, #8]
 800fb58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d005      	beq.n	800fb6c <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800fb60:	4b9e      	ldr	r3, [pc, #632]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fb62:	689b      	ldr	r3, [r3, #8]
 800fb64:	0e1b      	lsrs	r3, r3, #24
 800fb66:	f003 030f 	and.w	r3, r3, #15
 800fb6a:	e006      	b.n	800fb7a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
 800fb6c:	4b9b      	ldr	r3, [pc, #620]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fb6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fb72:	041b      	lsls	r3, r3, #16
 800fb74:	0e1b      	lsrs	r3, r3, #24
 800fb76:	f003 030f 	and.w	r3, r3, #15
 800fb7a:	4a99      	ldr	r2, [pc, #612]	; (800fde0 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800fb7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb80:	637b      	str	r3, [r7, #52]	; 0x34
 800fb82:	f000 bc76 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800fb86:	2300      	movs	r3, #0
 800fb88:	637b      	str	r3, [r7, #52]	; 0x34
 800fb8a:	f000 bc72 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800fb8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb92:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800fb96:	430b      	orrs	r3, r1
 800fb98:	d14c      	bne.n	800fc34 <HAL_RCCEx_GetPeriphCLKFreq+0xeb4>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800fb9a:	4b90      	ldr	r3, [pc, #576]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fb9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fba0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800fba4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800fba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d104      	bne.n	800fbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fbac:	f7fd fc7e 	bl	800d4ac <HAL_RCC_GetPCLK1Freq>
 800fbb0:	6378      	str	r0, [r7, #52]	; 0x34
 800fbb2:	f000 bc5e 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800fbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fbbc:	d104      	bne.n	800fbc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe48>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800fbbe:	f7fd fb53 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 800fbc2:	6378      	str	r0, [r7, #52]	; 0x34
 800fbc4:	f000 bc55 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800fbc8:	4b84      	ldr	r3, [pc, #528]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fbd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fbd4:	d107      	bne.n	800fbe6 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
 800fbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fbdc:	d103      	bne.n	800fbe6 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
    {
      frequency = HSI_VALUE;
 800fbde:	4b81      	ldr	r3, [pc, #516]	; (800fde4 <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 800fbe0:	637b      	str	r3, [r7, #52]	; 0x34
 800fbe2:	f000 bc46 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800fbe6:	4b7d      	ldr	r3, [pc, #500]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f003 0320 	and.w	r3, r3, #32
 800fbee:	2b20      	cmp	r3, #32
 800fbf0:	d11c      	bne.n	800fc2c <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 800fbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fbf8:	d118      	bne.n	800fc2c <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fbfa:	4b78      	ldr	r3, [pc, #480]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d005      	beq.n	800fc12 <HAL_RCCEx_GetPeriphCLKFreq+0xe92>
 800fc06:	4b75      	ldr	r3, [pc, #468]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fc08:	689b      	ldr	r3, [r3, #8]
 800fc0a:	0e1b      	lsrs	r3, r3, #24
 800fc0c:	f003 030f 	and.w	r3, r3, #15
 800fc10:	e006      	b.n	800fc20 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 800fc12:	4b72      	ldr	r3, [pc, #456]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fc14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fc18:	041b      	lsls	r3, r3, #16
 800fc1a:	0e1b      	lsrs	r3, r3, #24
 800fc1c:	f003 030f 	and.w	r3, r3, #15
 800fc20:	4a6f      	ldr	r2, [pc, #444]	; (800fde0 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800fc22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc26:	637b      	str	r3, [r7, #52]	; 0x34
 800fc28:	f000 bc23 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	637b      	str	r3, [r7, #52]	; 0x34
 800fc30:	f000 bc1f 	b.w	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800fc34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc38:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800fc3c:	430b      	orrs	r3, r1
 800fc3e:	d164      	bne.n	800fd0a <HAL_RCCEx_GetPeriphCLKFreq+0xf8a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800fc40:	4b66      	ldr	r3, [pc, #408]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fc42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fc46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc4a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800fc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d120      	bne.n	800fc94 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fc52:	4b62      	ldr	r3, [pc, #392]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f003 0320 	and.w	r3, r3, #32
 800fc5a:	2b20      	cmp	r3, #32
 800fc5c:	d117      	bne.n	800fc8e <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fc5e:	4b5f      	ldr	r3, [pc, #380]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fc60:	689b      	ldr	r3, [r3, #8]
 800fc62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d005      	beq.n	800fc76 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
 800fc6a:	4b5c      	ldr	r3, [pc, #368]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fc6c:	689b      	ldr	r3, [r3, #8]
 800fc6e:	0e1b      	lsrs	r3, r3, #24
 800fc70:	f003 030f 	and.w	r3, r3, #15
 800fc74:	e006      	b.n	800fc84 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 800fc76:	4b59      	ldr	r3, [pc, #356]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fc78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fc7c:	041b      	lsls	r3, r3, #16
 800fc7e:	0e1b      	lsrs	r3, r3, #24
 800fc80:	f003 030f 	and.w	r3, r3, #15
 800fc84:	4a56      	ldr	r2, [pc, #344]	; (800fde0 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800fc86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc8a:	637b      	str	r3, [r7, #52]	; 0x34
 800fc8c:	e3f1      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 800fc8e:	2300      	movs	r3, #0
 800fc90:	637b      	str	r3, [r7, #52]	; 0x34
 800fc92:	e3ee      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800fc94:	4b51      	ldr	r3, [pc, #324]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fc96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fc9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fca2:	d112      	bne.n	800fcca <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800fca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fcaa:	d10e      	bne.n	800fcca <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fcac:	4b4b      	ldr	r3, [pc, #300]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fcae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fcb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fcb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fcba:	d102      	bne.n	800fcc2 <HAL_RCCEx_GetPeriphCLKFreq+0xf42>
      {
        frequency = LSI_VALUE / 128U;
 800fcbc:	23fa      	movs	r3, #250	; 0xfa
 800fcbe:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fcc0:	e3d7      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800fcc2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fcc6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fcc8:	e3d3      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800fcca:	4b44      	ldr	r3, [pc, #272]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fcd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fcd6:	d106      	bne.n	800fce6 <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 800fcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcde:	d102      	bne.n	800fce6 <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
    {
      frequency = HSI_VALUE;
 800fce0:	4b40      	ldr	r3, [pc, #256]	; (800fde4 <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 800fce2:	637b      	str	r3, [r7, #52]	; 0x34
 800fce4:	e3c5      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800fce6:	4b3d      	ldr	r3, [pc, #244]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fcec:	f003 0302 	and.w	r3, r3, #2
 800fcf0:	2b02      	cmp	r3, #2
 800fcf2:	d107      	bne.n	800fd04 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
 800fcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fcfa:	d103      	bne.n	800fd04 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
    {
      frequency = LSE_VALUE;
 800fcfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd00:	637b      	str	r3, [r7, #52]	; 0x34
 800fd02:	e3b6      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800fd04:	2300      	movs	r3, #0
 800fd06:	637b      	str	r3, [r7, #52]	; 0x34
 800fd08:	e3b3      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800fd0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd0e:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800fd12:	430b      	orrs	r3, r1
 800fd14:	d16b      	bne.n	800fdee <HAL_RCCEx_GetPeriphCLKFreq+0x106e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800fd16:	4b31      	ldr	r3, [pc, #196]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fd18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fd1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fd20:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800fd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d120      	bne.n	800fd6a <HAL_RCCEx_GetPeriphCLKFreq+0xfea>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800fd28:	4b2c      	ldr	r3, [pc, #176]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	f003 0320 	and.w	r3, r3, #32
 800fd30:	2b20      	cmp	r3, #32
 800fd32:	d117      	bne.n	800fd64 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800fd34:	4b29      	ldr	r3, [pc, #164]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fd36:	689b      	ldr	r3, [r3, #8]
 800fd38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d005      	beq.n	800fd4c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800fd40:	4b26      	ldr	r3, [pc, #152]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fd42:	689b      	ldr	r3, [r3, #8]
 800fd44:	0e1b      	lsrs	r3, r3, #24
 800fd46:	f003 030f 	and.w	r3, r3, #15
 800fd4a:	e006      	b.n	800fd5a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
 800fd4c:	4b23      	ldr	r3, [pc, #140]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fd4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fd52:	041b      	lsls	r3, r3, #16
 800fd54:	0e1b      	lsrs	r3, r3, #24
 800fd56:	f003 030f 	and.w	r3, r3, #15
 800fd5a:	4a21      	ldr	r2, [pc, #132]	; (800fde0 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>)
 800fd5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd60:	637b      	str	r3, [r7, #52]	; 0x34
 800fd62:	e386      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = 0U;
 800fd64:	2300      	movs	r3, #0
 800fd66:	637b      	str	r3, [r7, #52]	; 0x34
 800fd68:	e383      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800fd6a:	4b1c      	ldr	r3, [pc, #112]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fd6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fd70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fd74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fd78:	d112      	bne.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
 800fd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd80:	d10e      	bne.n	800fda0 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fd82:	4b16      	ldr	r3, [pc, #88]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fd84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fd88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fd90:	d102      	bne.n	800fd98 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
      {
        frequency = LSI_VALUE / 128U;
 800fd92:	23fa      	movs	r3, #250	; 0xfa
 800fd94:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fd96:	e36c      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800fd98:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fd9c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fd9e:	e368      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800fda0:	4b0e      	ldr	r3, [pc, #56]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fda8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fdac:	d106      	bne.n	800fdbc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>
 800fdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fdb4:	d102      	bne.n	800fdbc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>
    {
      frequency = HSI_VALUE;
 800fdb6:	4b0b      	ldr	r3, [pc, #44]	; (800fde4 <HAL_RCCEx_GetPeriphCLKFreq+0x1064>)
 800fdb8:	637b      	str	r3, [r7, #52]	; 0x34
 800fdba:	e35a      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800fdbc:	4b07      	ldr	r3, [pc, #28]	; (800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800fdbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fdc2:	f003 0302 	and.w	r3, r3, #2
 800fdc6:	2b02      	cmp	r3, #2
 800fdc8:	d10e      	bne.n	800fde8 <HAL_RCCEx_GetPeriphCLKFreq+0x1068>
 800fdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fdd0:	d10a      	bne.n	800fde8 <HAL_RCCEx_GetPeriphCLKFreq+0x1068>
    {
      frequency = LSE_VALUE;
 800fdd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fdd6:	637b      	str	r3, [r7, #52]	; 0x34
 800fdd8:	e34b      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 800fdda:	bf00      	nop
 800fddc:	46020c00 	.word	0x46020c00
 800fde0:	0802b9a8 	.word	0x0802b9a8
 800fde4:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800fde8:	2300      	movs	r3, #0
 800fdea:	637b      	str	r3, [r7, #52]	; 0x34
 800fdec:	e341      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800fdee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdf2:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800fdf6:	430b      	orrs	r3, r1
 800fdf8:	d147      	bne.n	800fe8a <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800fdfa:	4b9b      	ldr	r3, [pc, #620]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fdfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe00:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800fe04:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800fe06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d103      	bne.n	800fe14 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800fe0c:	f7fd fb4e 	bl	800d4ac <HAL_RCC_GetPCLK1Freq>
 800fe10:	6378      	str	r0, [r7, #52]	; 0x34
 800fe12:	e32e      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800fe14:	4b94      	ldr	r3, [pc, #592]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fe16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fe1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fe1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fe22:	d112      	bne.n	800fe4a <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
 800fe24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fe2a:	d10e      	bne.n	800fe4a <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fe2c:	4b8e      	ldr	r3, [pc, #568]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fe2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fe32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fe36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fe3a:	d102      	bne.n	800fe42 <HAL_RCCEx_GetPeriphCLKFreq+0x10c2>
      {
        frequency = LSI_VALUE / 128U;
 800fe3c:	23fa      	movs	r3, #250	; 0xfa
 800fe3e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fe40:	e317      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 800fe42:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fe46:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800fe48:	e313      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800fe4a:	4b87      	ldr	r3, [pc, #540]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe56:	d106      	bne.n	800fe66 <HAL_RCCEx_GetPeriphCLKFreq+0x10e6>
 800fe58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe5a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800fe5e:	d102      	bne.n	800fe66 <HAL_RCCEx_GetPeriphCLKFreq+0x10e6>
    {
      frequency = HSI_VALUE;
 800fe60:	4b82      	ldr	r3, [pc, #520]	; (801006c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800fe62:	637b      	str	r3, [r7, #52]	; 0x34
 800fe64:	e305      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800fe66:	4b80      	ldr	r3, [pc, #512]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fe68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fe6c:	f003 0302 	and.w	r3, r3, #2
 800fe70:	2b02      	cmp	r3, #2
 800fe72:	d107      	bne.n	800fe84 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
 800fe74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe76:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800fe7a:	d103      	bne.n	800fe84 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
    {
      frequency = LSE_VALUE;
 800fe7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe80:	637b      	str	r3, [r7, #52]	; 0x34
 800fe82:	e2f6      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800fe84:	2300      	movs	r3, #0
 800fe86:	637b      	str	r3, [r7, #52]	; 0x34
 800fe88:	e2f3      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800fe8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe8e:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800fe92:	430b      	orrs	r3, r1
 800fe94:	d12d      	bne.n	800fef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800fe96:	4b74      	ldr	r3, [pc, #464]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fe98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe9c:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800fea0:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800fea2:	4b71      	ldr	r3, [pc, #452]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800feaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800feae:	d105      	bne.n	800febc <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800feb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d102      	bne.n	800febc <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
    {
      frequency = HSE_VALUE;
 800feb6:	4b6d      	ldr	r3, [pc, #436]	; (801006c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800feb8:	637b      	str	r3, [r7, #52]	; 0x34
 800feba:	e2da      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800febc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800febe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fec2:	d107      	bne.n	800fed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1154>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fec8:	4618      	mov	r0, r3
 800feca:	f7fe fb21 	bl	800e510 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800fece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed0:	637b      	str	r3, [r7, #52]	; 0x34
 800fed2:	e2ce      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800fed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800feda:	d107      	bne.n	800feec <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fedc:	f107 0318 	add.w	r3, r7, #24
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7fe fc7d 	bl	800e7e0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800fee6:	69bb      	ldr	r3, [r7, #24]
 800fee8:	637b      	str	r3, [r7, #52]	; 0x34
 800feea:	e2c2      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800feec:	2300      	movs	r3, #0
 800feee:	637b      	str	r3, [r7, #52]	; 0x34
 800fef0:	e2bf      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800fef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fef6:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800fefa:	430b      	orrs	r3, r1
 800fefc:	d156      	bne.n	800ffac <HAL_RCCEx_GetPeriphCLKFreq+0x122c>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800fefe:	4b5a      	ldr	r3, [pc, #360]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800ff00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ff04:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ff08:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800ff0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ff10:	d028      	beq.n	800ff64 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
 800ff12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ff18:	d845      	bhi.n	800ffa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
 800ff1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ff20:	d013      	beq.n	800ff4a <HAL_RCCEx_GetPeriphCLKFreq+0x11ca>
 800ff22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ff28:	d83d      	bhi.n	800ffa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
 800ff2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d004      	beq.n	800ff3a <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
 800ff30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff36:	d004      	beq.n	800ff42 <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>
 800ff38:	e035      	b.n	800ffa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800ff3a:	f7fd facb 	bl	800d4d4 <HAL_RCC_GetPCLK2Freq>
 800ff3e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ff40:	e297      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ff42:	f7fd f991 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 800ff46:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ff48:	e293      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ff4a:	4b47      	ldr	r3, [pc, #284]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ff52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ff56:	d102      	bne.n	800ff5e <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        {
          frequency = HSI_VALUE;
 800ff58:	4b44      	ldr	r3, [pc, #272]	; (801006c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800ff5a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ff5c:	e289      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ff62:	e286      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ff64:	4b40      	ldr	r3, [pc, #256]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	f003 0320 	and.w	r3, r3, #32
 800ff6c:	2b20      	cmp	r3, #32
 800ff6e:	d117      	bne.n	800ffa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ff70:	4b3d      	ldr	r3, [pc, #244]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800ff72:	689b      	ldr	r3, [r3, #8]
 800ff74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d005      	beq.n	800ff88 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800ff7c:	4b3a      	ldr	r3, [pc, #232]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800ff7e:	689b      	ldr	r3, [r3, #8]
 800ff80:	0e1b      	lsrs	r3, r3, #24
 800ff82:	f003 030f 	and.w	r3, r3, #15
 800ff86:	e006      	b.n	800ff96 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800ff88:	4b37      	ldr	r3, [pc, #220]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800ff8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ff8e:	041b      	lsls	r3, r3, #16
 800ff90:	0e1b      	lsrs	r3, r3, #24
 800ff92:	f003 030f 	and.w	r3, r3, #15
 800ff96:	4a36      	ldr	r2, [pc, #216]	; (8010070 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800ff98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff9c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ff9e:	e268      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ffa4:	e265      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ffaa:	e262      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800ffac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffb0:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800ffb4:	430b      	orrs	r3, r1
 800ffb6:	d15d      	bne.n	8010074 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800ffb8:	4b2b      	ldr	r3, [pc, #172]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 800ffba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ffbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ffc2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800ffc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ffca:	d028      	beq.n	801001e <HAL_RCCEx_GetPeriphCLKFreq+0x129e>
 800ffcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ffd2:	d845      	bhi.n	8010060 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
 800ffd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ffda:	d013      	beq.n	8010004 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
 800ffdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ffe2:	d83d      	bhi.n	8010060 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
 800ffe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d004      	beq.n	800fff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>
 800ffea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fff0:	d004      	beq.n	800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x127c>
 800fff2:	e035      	b.n	8010060 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800fff4:	f7fd fa5a 	bl	800d4ac <HAL_RCC_GetPCLK1Freq>
 800fff8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800fffa:	e23a      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800fffc:	f7fd f934 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 8010000:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8010002:	e236      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010004:	4b18      	ldr	r3, [pc, #96]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801000c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010010:	d102      	bne.n	8010018 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
        {
          frequency = HSI_VALUE;
 8010012:	4b16      	ldr	r3, [pc, #88]	; (801006c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8010014:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010016:	e22c      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 8010018:	2300      	movs	r3, #0
 801001a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801001c:	e229      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 801001e:	4b12      	ldr	r3, [pc, #72]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f003 0320 	and.w	r3, r3, #32
 8010026:	2b20      	cmp	r3, #32
 8010028:	d117      	bne.n	801005a <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801002a:	4b0f      	ldr	r3, [pc, #60]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 801002c:	689b      	ldr	r3, [r3, #8]
 801002e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010032:	2b00      	cmp	r3, #0
 8010034:	d005      	beq.n	8010042 <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8010036:	4b0c      	ldr	r3, [pc, #48]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 8010038:	689b      	ldr	r3, [r3, #8]
 801003a:	0e1b      	lsrs	r3, r3, #24
 801003c:	f003 030f 	and.w	r3, r3, #15
 8010040:	e006      	b.n	8010050 <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
 8010042:	4b09      	ldr	r3, [pc, #36]	; (8010068 <HAL_RCCEx_GetPeriphCLKFreq+0x12e8>)
 8010044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010048:	041b      	lsls	r3, r3, #16
 801004a:	0e1b      	lsrs	r3, r3, #24
 801004c:	f003 030f 	and.w	r3, r3, #15
 8010050:	4a07      	ldr	r2, [pc, #28]	; (8010070 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8010052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010056:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010058:	e20b      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 801005a:	2300      	movs	r3, #0
 801005c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801005e:	e208      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 8010060:	2300      	movs	r3, #0
 8010062:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010064:	e205      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 8010066:	bf00      	nop
 8010068:	46020c00 	.word	0x46020c00
 801006c:	00f42400 	.word	0x00f42400
 8010070:	0802b9a8 	.word	0x0802b9a8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8010074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010078:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 801007c:	430b      	orrs	r3, r1
 801007e:	d176      	bne.n	801016e <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8010080:	4ba6      	ldr	r3, [pc, #664]	; (801031c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 8010082:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8010086:	f003 0318 	and.w	r3, r3, #24
 801008a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 801008c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801008e:	2b18      	cmp	r3, #24
 8010090:	d86a      	bhi.n	8010168 <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 8010092:	a201      	add	r2, pc, #4	; (adr r2, 8010098 <HAL_RCCEx_GetPeriphCLKFreq+0x1318>)
 8010094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010098:	080100fd 	.word	0x080100fd
 801009c:	08010169 	.word	0x08010169
 80100a0:	08010169 	.word	0x08010169
 80100a4:	08010169 	.word	0x08010169
 80100a8:	08010169 	.word	0x08010169
 80100ac:	08010169 	.word	0x08010169
 80100b0:	08010169 	.word	0x08010169
 80100b4:	08010169 	.word	0x08010169
 80100b8:	08010105 	.word	0x08010105
 80100bc:	08010169 	.word	0x08010169
 80100c0:	08010169 	.word	0x08010169
 80100c4:	08010169 	.word	0x08010169
 80100c8:	08010169 	.word	0x08010169
 80100cc:	08010169 	.word	0x08010169
 80100d0:	08010169 	.word	0x08010169
 80100d4:	08010169 	.word	0x08010169
 80100d8:	0801010d 	.word	0x0801010d
 80100dc:	08010169 	.word	0x08010169
 80100e0:	08010169 	.word	0x08010169
 80100e4:	08010169 	.word	0x08010169
 80100e8:	08010169 	.word	0x08010169
 80100ec:	08010169 	.word	0x08010169
 80100f0:	08010169 	.word	0x08010169
 80100f4:	08010169 	.word	0x08010169
 80100f8:	08010127 	.word	0x08010127
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80100fc:	f7fd f9fe 	bl	800d4fc <HAL_RCC_GetPCLK3Freq>
 8010100:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8010102:	e1b6      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8010104:	f7fd f8b0 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 8010108:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 801010a:	e1b2      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801010c:	4b83      	ldr	r3, [pc, #524]	; (801031c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010118:	d102      	bne.n	8010120 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 801011a:	4b81      	ldr	r3, [pc, #516]	; (8010320 <HAL_RCCEx_GetPeriphCLKFreq+0x15a0>)
 801011c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 801011e:	e1a8      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 8010120:	2300      	movs	r3, #0
 8010122:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010124:	e1a5      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8010126:	4b7d      	ldr	r3, [pc, #500]	; (801031c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f003 0320 	and.w	r3, r3, #32
 801012e:	2b20      	cmp	r3, #32
 8010130:	d117      	bne.n	8010162 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8010132:	4b7a      	ldr	r3, [pc, #488]	; (801031c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 8010134:	689b      	ldr	r3, [r3, #8]
 8010136:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801013a:	2b00      	cmp	r3, #0
 801013c:	d005      	beq.n	801014a <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 801013e:	4b77      	ldr	r3, [pc, #476]	; (801031c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 8010140:	689b      	ldr	r3, [r3, #8]
 8010142:	0e1b      	lsrs	r3, r3, #24
 8010144:	f003 030f 	and.w	r3, r3, #15
 8010148:	e006      	b.n	8010158 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 801014a:	4b74      	ldr	r3, [pc, #464]	; (801031c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 801014c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010150:	041b      	lsls	r3, r3, #16
 8010152:	0e1b      	lsrs	r3, r3, #24
 8010154:	f003 030f 	and.w	r3, r3, #15
 8010158:	4a72      	ldr	r2, [pc, #456]	; (8010324 <HAL_RCCEx_GetPeriphCLKFreq+0x15a4>)
 801015a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801015e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010160:	e187      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 8010162:	2300      	movs	r3, #0
 8010164:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010166:	e184      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 8010168:	2300      	movs	r3, #0
 801016a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801016c:	e181      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 801016e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010172:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8010176:	430b      	orrs	r3, r1
 8010178:	d155      	bne.n	8010226 <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 801017a:	4b68      	ldr	r3, [pc, #416]	; (801031c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 801017c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010180:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8010184:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8010186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010188:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801018c:	d013      	beq.n	80101b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 801018e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010190:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010194:	d844      	bhi.n	8010220 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 8010196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801019c:	d013      	beq.n	80101c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 801019e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80101a4:	d83c      	bhi.n	8010220 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 80101a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d014      	beq.n	80101d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 80101ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80101b2:	d014      	beq.n	80101de <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 80101b4:	e034      	b.n	8010220 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80101b6:	f107 0318 	add.w	r3, r7, #24
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7fe fb10 	bl	800e7e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80101c0:	69fb      	ldr	r3, [r7, #28]
 80101c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80101c4:	e155      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80101c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7fe f9a0 	bl	800e510 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80101d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80101d4:	e14d      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80101d6:	f7fd f847 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 80101da:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80101dc:	e149      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80101de:	4b4f      	ldr	r3, [pc, #316]	; (801031c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	f003 0320 	and.w	r3, r3, #32
 80101e6:	2b20      	cmp	r3, #32
 80101e8:	d117      	bne.n	801021a <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80101ea:	4b4c      	ldr	r3, [pc, #304]	; (801031c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 80101ec:	689b      	ldr	r3, [r3, #8]
 80101ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d005      	beq.n	8010202 <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 80101f6:	4b49      	ldr	r3, [pc, #292]	; (801031c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 80101f8:	689b      	ldr	r3, [r3, #8]
 80101fa:	0e1b      	lsrs	r3, r3, #24
 80101fc:	f003 030f 	and.w	r3, r3, #15
 8010200:	e006      	b.n	8010210 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 8010202:	4b46      	ldr	r3, [pc, #280]	; (801031c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 8010204:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010208:	041b      	lsls	r3, r3, #16
 801020a:	0e1b      	lsrs	r3, r3, #24
 801020c:	f003 030f 	and.w	r3, r3, #15
 8010210:	4a44      	ldr	r2, [pc, #272]	; (8010324 <HAL_RCCEx_GetPeriphCLKFreq+0x15a4>)
 8010212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010216:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8010218:	e12b      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
          frequency = 0U;
 801021a:	2300      	movs	r3, #0
 801021c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801021e:	e128      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 8010220:	2300      	movs	r3, #0
 8010222:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010224:	e125      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8010226:	e9d7 2300 	ldrd	r2, r3, [r7]
 801022a:	1e59      	subs	r1, r3, #1
 801022c:	ea52 0301 	orrs.w	r3, r2, r1
 8010230:	d13c      	bne.n	80102ac <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8010232:	4b3a      	ldr	r3, [pc, #232]	; (801031c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 8010234:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010238:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 801023c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 801023e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010240:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010244:	d027      	beq.n	8010296 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8010246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010248:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801024c:	d82b      	bhi.n	80102a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 801024e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010250:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010254:	d017      	beq.n	8010286 <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 8010256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010258:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801025c:	d823      	bhi.n	80102a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 801025e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010260:	2b00      	cmp	r3, #0
 8010262:	d004      	beq.n	801026e <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8010264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801026a:	d004      	beq.n	8010276 <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 801026c:	e01b      	b.n	80102a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 801026e:	f7fc fffb 	bl	800d268 <HAL_RCC_GetSysClockFreq>
 8010272:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8010274:	e0fd      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801027a:	4618      	mov	r0, r3
 801027c:	f7fe f948 	bl	800e510 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8010280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010282:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010284:	e0f5      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010286:	f107 0318 	add.w	r3, r7, #24
 801028a:	4618      	mov	r0, r3
 801028c:	f7fe faa8 	bl	800e7e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010294:	e0ed      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010296:	f107 030c 	add.w	r3, r7, #12
 801029a:	4618      	mov	r0, r3
 801029c:	f7fe fc08 	bl	800eab0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80102a4:	e0e5      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 80102a6:	2300      	movs	r3, #0
 80102a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80102aa:	e0e2      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80102ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102b0:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80102b4:	430b      	orrs	r3, r1
 80102b6:	d137      	bne.n	8010328 <HAL_RCCEx_GetPeriphCLKFreq+0x15a8>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80102b8:	4b18      	ldr	r3, [pc, #96]	; (801031c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 80102ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80102be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80102c2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80102c4:	4b15      	ldr	r3, [pc, #84]	; (801031c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 80102c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80102ca:	f003 0302 	and.w	r3, r3, #2
 80102ce:	2b02      	cmp	r3, #2
 80102d0:	d106      	bne.n	80102e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 80102d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d103      	bne.n	80102e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 80102d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80102dc:	637b      	str	r3, [r7, #52]	; 0x34
 80102de:	e0c8      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80102e0:	4b0e      	ldr	r3, [pc, #56]	; (801031c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 80102e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80102e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80102ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80102ee:	d112      	bne.n	8010316 <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 80102f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80102f6:	d10e      	bne.n	8010316 <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80102f8:	4b08      	ldr	r3, [pc, #32]	; (801031c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>)
 80102fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80102fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010302:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010306:	d102      	bne.n	801030e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 8010308:	23fa      	movs	r3, #250	; 0xfa
 801030a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801030c:	e0b1      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
      else
      {
        frequency = LSI_VALUE;
 801030e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8010312:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8010314:	e0ad      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8010316:	2300      	movs	r3, #0
 8010318:	637b      	str	r3, [r7, #52]	; 0x34
 801031a:	e0aa      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
 801031c:	46020c00 	.word	0x46020c00
 8010320:	00f42400 	.word	0x00f42400
 8010324:	0802b9a8 	.word	0x0802b9a8
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8010328:	e9d7 2300 	ldrd	r2, r3, [r7]
 801032c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8010330:	430b      	orrs	r3, r1
 8010332:	d131      	bne.n	8010398 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8010334:	4b51      	ldr	r3, [pc, #324]	; (801047c <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 8010336:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801033a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801033e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8010340:	4b4e      	ldr	r3, [pc, #312]	; (801047c <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801034c:	d105      	bne.n	801035a <HAL_RCCEx_GetPeriphCLKFreq+0x15da>
 801034e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010350:	2b00      	cmp	r3, #0
 8010352:	d102      	bne.n	801035a <HAL_RCCEx_GetPeriphCLKFreq+0x15da>
    {
      frequency = HSI48_VALUE;
 8010354:	4b4a      	ldr	r3, [pc, #296]	; (8010480 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8010356:	637b      	str	r3, [r7, #52]	; 0x34
 8010358:	e08b      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 801035a:	4b48      	ldr	r3, [pc, #288]	; (801047c <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010366:	d106      	bne.n	8010376 <HAL_RCCEx_GetPeriphCLKFreq+0x15f6>
 8010368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801036a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801036e:	d102      	bne.n	8010376 <HAL_RCCEx_GetPeriphCLKFreq+0x15f6>
    {
      frequency = HSI48_VALUE >> 1U ;
 8010370:	4b44      	ldr	r3, [pc, #272]	; (8010484 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 8010372:	637b      	str	r3, [r7, #52]	; 0x34
 8010374:	e07d      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8010376:	4b41      	ldr	r3, [pc, #260]	; (801047c <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801037e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010382:	d106      	bne.n	8010392 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
 8010384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801038a:	d102      	bne.n	8010392 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
    {
      frequency = HSI_VALUE;
 801038c:	4b3e      	ldr	r3, [pc, #248]	; (8010488 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 801038e:	637b      	str	r3, [r7, #52]	; 0x34
 8010390:	e06f      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8010392:	2300      	movs	r3, #0
 8010394:	637b      	str	r3, [r7, #52]	; 0x34
 8010396:	e06c      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 8010398:	e9d7 2300 	ldrd	r2, r3, [r7]
 801039c:	1e99      	subs	r1, r3, #2
 801039e:	ea52 0301 	orrs.w	r3, r2, r1
 80103a2:	d120      	bne.n	80103e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1666>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 80103a4:	4b35      	ldr	r3, [pc, #212]	; (801047c <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 80103a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80103aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80103ae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80103b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d004      	beq.n	80103c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1640>
 80103b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80103bc:	d008      	beq.n	80103d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1650>
 80103be:	e00f      	b.n	80103e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1660>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80103c0:	f107 030c 	add.w	r3, r7, #12
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7fe fb73 	bl	800eab0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80103ce:	e050      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80103d0:	f107 0318 	add.w	r3, r7, #24
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7fe fa03 	bl	800e7e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 80103da:	6a3b      	ldr	r3, [r7, #32]
 80103dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80103de:	e048      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>

      default:

        frequency = 0U;
 80103e0:	2300      	movs	r3, #0
 80103e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80103e4:	e045      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 80103e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103ea:	f1a3 0108 	sub.w	r1, r3, #8
 80103ee:	ea52 0301 	orrs.w	r3, r2, r1
 80103f2:	d13c      	bne.n	801046e <HAL_RCCEx_GetPeriphCLKFreq+0x16ee>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 80103f4:	4b21      	ldr	r3, [pc, #132]	; (801047c <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 80103f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80103fa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80103fe:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8010400:	4b1e      	ldr	r3, [pc, #120]	; (801047c <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801040c:	d105      	bne.n	801041a <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
 801040e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010410:	2b00      	cmp	r3, #0
 8010412:	d102      	bne.n	801041a <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      frequency = HSE_VALUE;
 8010414:	4b1c      	ldr	r3, [pc, #112]	; (8010488 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 8010416:	637b      	str	r3, [r7, #52]	; 0x34
 8010418:	e02b      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 801041a:	4b18      	ldr	r3, [pc, #96]	; (801047c <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010422:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010426:	d106      	bne.n	8010436 <HAL_RCCEx_GetPeriphCLKFreq+0x16b6>
 8010428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801042a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801042e:	d102      	bne.n	8010436 <HAL_RCCEx_GetPeriphCLKFreq+0x16b6>
    {
      frequency = HSE_VALUE >> 1U ;
 8010430:	4b16      	ldr	r3, [pc, #88]	; (801048c <HAL_RCCEx_GetPeriphCLKFreq+0x170c>)
 8010432:	637b      	str	r3, [r7, #52]	; 0x34
 8010434:	e01d      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8010436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801043c:	d107      	bne.n	801044e <HAL_RCCEx_GetPeriphCLKFreq+0x16ce>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801043e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010442:	4618      	mov	r0, r3
 8010444:	f7fe f864 	bl	800e510 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8010448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801044a:	637b      	str	r3, [r7, #52]	; 0x34
 801044c:	e011      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 801044e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010450:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8010454:	d108      	bne.n	8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x16e8>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801045a:	4618      	mov	r0, r3
 801045c:	f7fe f858 	bl	800e510 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8010460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010462:	085b      	lsrs	r3, r3, #1
 8010464:	637b      	str	r3, [r7, #52]	; 0x34
 8010466:	e004      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8010468:	2300      	movs	r3, #0
 801046a:	637b      	str	r3, [r7, #52]	; 0x34
 801046c:	e001      	b.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 801046e:	2300      	movs	r3, #0
 8010470:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8010472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010474:	4618      	mov	r0, r3
 8010476:	3738      	adds	r7, #56	; 0x38
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}
 801047c:	46020c00 	.word	0x46020c00
 8010480:	02dc6c00 	.word	0x02dc6c00
 8010484:	016e3600 	.word	0x016e3600
 8010488:	00f42400 	.word	0x00f42400
 801048c:	007a1200 	.word	0x007a1200

08010490 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b084      	sub	sp, #16
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8010498:	4b47      	ldr	r3, [pc, #284]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	4a46      	ldr	r2, [pc, #280]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 801049e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80104a2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80104a4:	f7f7 faaa 	bl	80079fc <HAL_GetTick>
 80104a8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80104aa:	e008      	b.n	80104be <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80104ac:	f7f7 faa6 	bl	80079fc <HAL_GetTick>
 80104b0:	4602      	mov	r2, r0
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	1ad3      	subs	r3, r2, r3
 80104b6:	2b02      	cmp	r3, #2
 80104b8:	d901      	bls.n	80104be <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80104ba:	2303      	movs	r3, #3
 80104bc:	e077      	b.n	80105ae <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80104be:	4b3e      	ldr	r3, [pc, #248]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d1f0      	bne.n	80104ac <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80104ca:	4b3b      	ldr	r3, [pc, #236]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 80104cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80104d2:	f023 0303 	bic.w	r3, r3, #3
 80104d6:	687a      	ldr	r2, [r7, #4]
 80104d8:	6811      	ldr	r1, [r2, #0]
 80104da:	687a      	ldr	r2, [r7, #4]
 80104dc:	6852      	ldr	r2, [r2, #4]
 80104de:	3a01      	subs	r2, #1
 80104e0:	0212      	lsls	r2, r2, #8
 80104e2:	430a      	orrs	r2, r1
 80104e4:	4934      	ldr	r1, [pc, #208]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 80104e6:	4313      	orrs	r3, r2
 80104e8:	62cb      	str	r3, [r1, #44]	; 0x2c
 80104ea:	4b33      	ldr	r3, [pc, #204]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 80104ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80104ee:	4b33      	ldr	r3, [pc, #204]	; (80105bc <RCCEx_PLL2_Config+0x12c>)
 80104f0:	4013      	ands	r3, r2
 80104f2:	687a      	ldr	r2, [r7, #4]
 80104f4:	6892      	ldr	r2, [r2, #8]
 80104f6:	3a01      	subs	r2, #1
 80104f8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80104fc:	687a      	ldr	r2, [r7, #4]
 80104fe:	68d2      	ldr	r2, [r2, #12]
 8010500:	3a01      	subs	r2, #1
 8010502:	0252      	lsls	r2, r2, #9
 8010504:	b292      	uxth	r2, r2
 8010506:	4311      	orrs	r1, r2
 8010508:	687a      	ldr	r2, [r7, #4]
 801050a:	6912      	ldr	r2, [r2, #16]
 801050c:	3a01      	subs	r2, #1
 801050e:	0412      	lsls	r2, r2, #16
 8010510:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8010514:	4311      	orrs	r1, r2
 8010516:	687a      	ldr	r2, [r7, #4]
 8010518:	6952      	ldr	r2, [r2, #20]
 801051a:	3a01      	subs	r2, #1
 801051c:	0612      	lsls	r2, r2, #24
 801051e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8010522:	430a      	orrs	r2, r1
 8010524:	4924      	ldr	r1, [pc, #144]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 8010526:	4313      	orrs	r3, r2
 8010528:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 801052a:	4b23      	ldr	r3, [pc, #140]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 801052c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801052e:	f023 020c 	bic.w	r2, r3, #12
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	699b      	ldr	r3, [r3, #24]
 8010536:	4920      	ldr	r1, [pc, #128]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 8010538:	4313      	orrs	r3, r2
 801053a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 801053c:	4b1e      	ldr	r3, [pc, #120]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 801053e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6a1b      	ldr	r3, [r3, #32]
 8010544:	491c      	ldr	r1, [pc, #112]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 8010546:	4313      	orrs	r3, r2
 8010548:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 801054a:	4b1b      	ldr	r3, [pc, #108]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 801054c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801054e:	4a1a      	ldr	r2, [pc, #104]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 8010550:	f023 0310 	bic.w	r3, r3, #16
 8010554:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8010556:	4b18      	ldr	r3, [pc, #96]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 8010558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801055a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801055e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8010562:	687a      	ldr	r2, [r7, #4]
 8010564:	69d2      	ldr	r2, [r2, #28]
 8010566:	00d2      	lsls	r2, r2, #3
 8010568:	4913      	ldr	r1, [pc, #76]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 801056a:	4313      	orrs	r3, r2
 801056c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 801056e:	4b12      	ldr	r3, [pc, #72]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 8010570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010572:	4a11      	ldr	r2, [pc, #68]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 8010574:	f043 0310 	orr.w	r3, r3, #16
 8010578:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 801057a:	4b0f      	ldr	r3, [pc, #60]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	4a0e      	ldr	r2, [pc, #56]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 8010580:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010584:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010586:	f7f7 fa39 	bl	80079fc <HAL_GetTick>
 801058a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801058c:	e008      	b.n	80105a0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801058e:	f7f7 fa35 	bl	80079fc <HAL_GetTick>
 8010592:	4602      	mov	r2, r0
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	1ad3      	subs	r3, r2, r3
 8010598:	2b02      	cmp	r3, #2
 801059a:	d901      	bls.n	80105a0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 801059c:	2303      	movs	r3, #3
 801059e:	e006      	b.n	80105ae <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80105a0:	4b05      	ldr	r3, [pc, #20]	; (80105b8 <RCCEx_PLL2_Config+0x128>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d0f0      	beq.n	801058e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80105ac:	2300      	movs	r3, #0

}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3710      	adds	r7, #16
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	46020c00 	.word	0x46020c00
 80105bc:	80800000 	.word	0x80800000

080105c0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b084      	sub	sp, #16
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80105c8:	4b47      	ldr	r3, [pc, #284]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	4a46      	ldr	r2, [pc, #280]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 80105ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80105d2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80105d4:	f7f7 fa12 	bl	80079fc <HAL_GetTick>
 80105d8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80105da:	e008      	b.n	80105ee <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80105dc:	f7f7 fa0e 	bl	80079fc <HAL_GetTick>
 80105e0:	4602      	mov	r2, r0
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	1ad3      	subs	r3, r2, r3
 80105e6:	2b02      	cmp	r3, #2
 80105e8:	d901      	bls.n	80105ee <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80105ea:	2303      	movs	r3, #3
 80105ec:	e077      	b.n	80106de <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80105ee:	4b3e      	ldr	r3, [pc, #248]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d1f0      	bne.n	80105dc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80105fa:	4b3b      	ldr	r3, [pc, #236]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 80105fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8010602:	f023 0303 	bic.w	r3, r3, #3
 8010606:	687a      	ldr	r2, [r7, #4]
 8010608:	6811      	ldr	r1, [r2, #0]
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	6852      	ldr	r2, [r2, #4]
 801060e:	3a01      	subs	r2, #1
 8010610:	0212      	lsls	r2, r2, #8
 8010612:	430a      	orrs	r2, r1
 8010614:	4934      	ldr	r1, [pc, #208]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 8010616:	4313      	orrs	r3, r2
 8010618:	630b      	str	r3, [r1, #48]	; 0x30
 801061a:	4b33      	ldr	r3, [pc, #204]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 801061c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801061e:	4b33      	ldr	r3, [pc, #204]	; (80106ec <RCCEx_PLL3_Config+0x12c>)
 8010620:	4013      	ands	r3, r2
 8010622:	687a      	ldr	r2, [r7, #4]
 8010624:	6892      	ldr	r2, [r2, #8]
 8010626:	3a01      	subs	r2, #1
 8010628:	f3c2 0108 	ubfx	r1, r2, #0, #9
 801062c:	687a      	ldr	r2, [r7, #4]
 801062e:	68d2      	ldr	r2, [r2, #12]
 8010630:	3a01      	subs	r2, #1
 8010632:	0252      	lsls	r2, r2, #9
 8010634:	b292      	uxth	r2, r2
 8010636:	4311      	orrs	r1, r2
 8010638:	687a      	ldr	r2, [r7, #4]
 801063a:	6912      	ldr	r2, [r2, #16]
 801063c:	3a01      	subs	r2, #1
 801063e:	0412      	lsls	r2, r2, #16
 8010640:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8010644:	4311      	orrs	r1, r2
 8010646:	687a      	ldr	r2, [r7, #4]
 8010648:	6952      	ldr	r2, [r2, #20]
 801064a:	3a01      	subs	r2, #1
 801064c:	0612      	lsls	r2, r2, #24
 801064e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8010652:	430a      	orrs	r2, r1
 8010654:	4924      	ldr	r1, [pc, #144]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 8010656:	4313      	orrs	r3, r2
 8010658:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 801065a:	4b23      	ldr	r3, [pc, #140]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 801065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801065e:	f023 020c 	bic.w	r2, r3, #12
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	699b      	ldr	r3, [r3, #24]
 8010666:	4920      	ldr	r1, [pc, #128]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 8010668:	4313      	orrs	r3, r2
 801066a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 801066c:	4b1e      	ldr	r3, [pc, #120]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 801066e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6a1b      	ldr	r3, [r3, #32]
 8010674:	491c      	ldr	r1, [pc, #112]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 8010676:	4313      	orrs	r3, r2
 8010678:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 801067a:	4b1b      	ldr	r3, [pc, #108]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 801067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801067e:	4a1a      	ldr	r2, [pc, #104]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 8010680:	f023 0310 	bic.w	r3, r3, #16
 8010684:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010686:	4b18      	ldr	r3, [pc, #96]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 8010688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801068a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801068e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8010692:	687a      	ldr	r2, [r7, #4]
 8010694:	69d2      	ldr	r2, [r2, #28]
 8010696:	00d2      	lsls	r2, r2, #3
 8010698:	4913      	ldr	r1, [pc, #76]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 801069a:	4313      	orrs	r3, r2
 801069c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 801069e:	4b12      	ldr	r3, [pc, #72]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 80106a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106a2:	4a11      	ldr	r2, [pc, #68]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 80106a4:	f043 0310 	orr.w	r3, r3, #16
 80106a8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80106aa:	4b0f      	ldr	r3, [pc, #60]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	4a0e      	ldr	r2, [pc, #56]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 80106b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106b4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80106b6:	f7f7 f9a1 	bl	80079fc <HAL_GetTick>
 80106ba:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80106bc:	e008      	b.n	80106d0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80106be:	f7f7 f99d 	bl	80079fc <HAL_GetTick>
 80106c2:	4602      	mov	r2, r0
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	1ad3      	subs	r3, r2, r3
 80106c8:	2b02      	cmp	r3, #2
 80106ca:	d901      	bls.n	80106d0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80106cc:	2303      	movs	r3, #3
 80106ce:	e006      	b.n	80106de <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80106d0:	4b05      	ldr	r3, [pc, #20]	; (80106e8 <RCCEx_PLL3_Config+0x128>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d0f0      	beq.n	80106be <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80106dc:	2300      	movs	r3, #0
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3710      	adds	r7, #16
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
 80106e6:	bf00      	nop
 80106e8:	46020c00 	.word	0x46020c00
 80106ec:	80800000 	.word	0x80800000

080106f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b082      	sub	sp, #8
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d101      	bne.n	8010702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80106fe:	2301      	movs	r3, #1
 8010700:	e049      	b.n	8010796 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010708:	b2db      	uxtb	r3, r3
 801070a:	2b00      	cmp	r3, #0
 801070c:	d106      	bne.n	801071c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2200      	movs	r2, #0
 8010712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f7f1 fb24 	bl	8001d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2202      	movs	r2, #2
 8010720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681a      	ldr	r2, [r3, #0]
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	3304      	adds	r3, #4
 801072c:	4619      	mov	r1, r3
 801072e:	4610      	mov	r0, r2
 8010730:	f000 fe48 	bl	80113c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2201      	movs	r2, #1
 8010738:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2201      	movs	r2, #1
 8010740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2201      	movs	r2, #1
 8010748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2201      	movs	r2, #1
 8010750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2201      	movs	r2, #1
 8010758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2201      	movs	r2, #1
 8010760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2201      	movs	r2, #1
 8010768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2201      	movs	r2, #1
 8010770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2201      	movs	r2, #1
 8010778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2201      	movs	r2, #1
 8010780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2201      	movs	r2, #1
 8010788:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2201      	movs	r2, #1
 8010790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010794:	2300      	movs	r3, #0
}
 8010796:	4618      	mov	r0, r3
 8010798:	3708      	adds	r7, #8
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
	...

080107a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b085      	sub	sp, #20
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80107ae:	b2db      	uxtb	r3, r3
 80107b0:	2b01      	cmp	r3, #1
 80107b2:	d001      	beq.n	80107b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80107b4:	2301      	movs	r3, #1
 80107b6:	e072      	b.n	801089e <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2202      	movs	r2, #2
 80107bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	68da      	ldr	r2, [r3, #12]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f042 0201 	orr.w	r2, r2, #1
 80107ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	4a35      	ldr	r2, [pc, #212]	; (80108ac <HAL_TIM_Base_Start_IT+0x10c>)
 80107d6:	4293      	cmp	r3, r2
 80107d8:	d040      	beq.n	801085c <HAL_TIM_Base_Start_IT+0xbc>
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4a34      	ldr	r2, [pc, #208]	; (80108b0 <HAL_TIM_Base_Start_IT+0x110>)
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d03b      	beq.n	801085c <HAL_TIM_Base_Start_IT+0xbc>
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80107ec:	d036      	beq.n	801085c <HAL_TIM_Base_Start_IT+0xbc>
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80107f6:	d031      	beq.n	801085c <HAL_TIM_Base_Start_IT+0xbc>
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	4a2d      	ldr	r2, [pc, #180]	; (80108b4 <HAL_TIM_Base_Start_IT+0x114>)
 80107fe:	4293      	cmp	r3, r2
 8010800:	d02c      	beq.n	801085c <HAL_TIM_Base_Start_IT+0xbc>
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	4a2c      	ldr	r2, [pc, #176]	; (80108b8 <HAL_TIM_Base_Start_IT+0x118>)
 8010808:	4293      	cmp	r3, r2
 801080a:	d027      	beq.n	801085c <HAL_TIM_Base_Start_IT+0xbc>
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4a2a      	ldr	r2, [pc, #168]	; (80108bc <HAL_TIM_Base_Start_IT+0x11c>)
 8010812:	4293      	cmp	r3, r2
 8010814:	d022      	beq.n	801085c <HAL_TIM_Base_Start_IT+0xbc>
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	4a29      	ldr	r2, [pc, #164]	; (80108c0 <HAL_TIM_Base_Start_IT+0x120>)
 801081c:	4293      	cmp	r3, r2
 801081e:	d01d      	beq.n	801085c <HAL_TIM_Base_Start_IT+0xbc>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4a27      	ldr	r2, [pc, #156]	; (80108c4 <HAL_TIM_Base_Start_IT+0x124>)
 8010826:	4293      	cmp	r3, r2
 8010828:	d018      	beq.n	801085c <HAL_TIM_Base_Start_IT+0xbc>
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	4a26      	ldr	r2, [pc, #152]	; (80108c8 <HAL_TIM_Base_Start_IT+0x128>)
 8010830:	4293      	cmp	r3, r2
 8010832:	d013      	beq.n	801085c <HAL_TIM_Base_Start_IT+0xbc>
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	4a24      	ldr	r2, [pc, #144]	; (80108cc <HAL_TIM_Base_Start_IT+0x12c>)
 801083a:	4293      	cmp	r3, r2
 801083c:	d00e      	beq.n	801085c <HAL_TIM_Base_Start_IT+0xbc>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	4a23      	ldr	r2, [pc, #140]	; (80108d0 <HAL_TIM_Base_Start_IT+0x130>)
 8010844:	4293      	cmp	r3, r2
 8010846:	d009      	beq.n	801085c <HAL_TIM_Base_Start_IT+0xbc>
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	4a21      	ldr	r2, [pc, #132]	; (80108d4 <HAL_TIM_Base_Start_IT+0x134>)
 801084e:	4293      	cmp	r3, r2
 8010850:	d004      	beq.n	801085c <HAL_TIM_Base_Start_IT+0xbc>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	4a20      	ldr	r2, [pc, #128]	; (80108d8 <HAL_TIM_Base_Start_IT+0x138>)
 8010858:	4293      	cmp	r3, r2
 801085a:	d115      	bne.n	8010888 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	689a      	ldr	r2, [r3, #8]
 8010862:	4b1e      	ldr	r3, [pc, #120]	; (80108dc <HAL_TIM_Base_Start_IT+0x13c>)
 8010864:	4013      	ands	r3, r2
 8010866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	2b06      	cmp	r3, #6
 801086c:	d015      	beq.n	801089a <HAL_TIM_Base_Start_IT+0xfa>
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010874:	d011      	beq.n	801089a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	681a      	ldr	r2, [r3, #0]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	f042 0201 	orr.w	r2, r2, #1
 8010884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010886:	e008      	b.n	801089a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	681a      	ldr	r2, [r3, #0]
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	f042 0201 	orr.w	r2, r2, #1
 8010896:	601a      	str	r2, [r3, #0]
 8010898:	e000      	b.n	801089c <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801089a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801089c:	2300      	movs	r3, #0
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3714      	adds	r7, #20
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr
 80108aa:	bf00      	nop
 80108ac:	40012c00 	.word	0x40012c00
 80108b0:	50012c00 	.word	0x50012c00
 80108b4:	40000400 	.word	0x40000400
 80108b8:	50000400 	.word	0x50000400
 80108bc:	40000800 	.word	0x40000800
 80108c0:	50000800 	.word	0x50000800
 80108c4:	40000c00 	.word	0x40000c00
 80108c8:	50000c00 	.word	0x50000c00
 80108cc:	40013400 	.word	0x40013400
 80108d0:	50013400 	.word	0x50013400
 80108d4:	40014000 	.word	0x40014000
 80108d8:	50014000 	.word	0x50014000
 80108dc:	00010007 	.word	0x00010007

080108e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d101      	bne.n	80108f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80108ee:	2301      	movs	r3, #1
 80108f0:	e049      	b.n	8010986 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80108f8:	b2db      	uxtb	r3, r3
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d106      	bne.n	801090c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2200      	movs	r2, #0
 8010902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f000 f841 	bl	801098e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2202      	movs	r2, #2
 8010910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681a      	ldr	r2, [r3, #0]
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	3304      	adds	r3, #4
 801091c:	4619      	mov	r1, r3
 801091e:	4610      	mov	r0, r2
 8010920:	f000 fd50 	bl	80113c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2201      	movs	r2, #1
 8010928:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2201      	movs	r2, #1
 8010930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2201      	movs	r2, #1
 8010938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2201      	movs	r2, #1
 8010940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2201      	movs	r2, #1
 8010948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2201      	movs	r2, #1
 8010950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2201      	movs	r2, #1
 8010958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2201      	movs	r2, #1
 8010960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2201      	movs	r2, #1
 8010968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2201      	movs	r2, #1
 8010970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2201      	movs	r2, #1
 8010978:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2201      	movs	r2, #1
 8010980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010984:	2300      	movs	r3, #0
}
 8010986:	4618      	mov	r0, r3
 8010988:	3708      	adds	r7, #8
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}

0801098e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801098e:	b480      	push	{r7}
 8010990:	b083      	sub	sp, #12
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010996:	bf00      	nop
 8010998:	370c      	adds	r7, #12
 801099a:	46bd      	mov	sp, r7
 801099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a0:	4770      	bx	lr
	...

080109a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b084      	sub	sp, #16
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
 80109ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d109      	bne.n	80109c8 <HAL_TIM_PWM_Start+0x24>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80109ba:	b2db      	uxtb	r3, r3
 80109bc:	2b01      	cmp	r3, #1
 80109be:	bf14      	ite	ne
 80109c0:	2301      	movne	r3, #1
 80109c2:	2300      	moveq	r3, #0
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	e03c      	b.n	8010a42 <HAL_TIM_PWM_Start+0x9e>
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	2b04      	cmp	r3, #4
 80109cc:	d109      	bne.n	80109e2 <HAL_TIM_PWM_Start+0x3e>
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80109d4:	b2db      	uxtb	r3, r3
 80109d6:	2b01      	cmp	r3, #1
 80109d8:	bf14      	ite	ne
 80109da:	2301      	movne	r3, #1
 80109dc:	2300      	moveq	r3, #0
 80109de:	b2db      	uxtb	r3, r3
 80109e0:	e02f      	b.n	8010a42 <HAL_TIM_PWM_Start+0x9e>
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	2b08      	cmp	r3, #8
 80109e6:	d109      	bne.n	80109fc <HAL_TIM_PWM_Start+0x58>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109ee:	b2db      	uxtb	r3, r3
 80109f0:	2b01      	cmp	r3, #1
 80109f2:	bf14      	ite	ne
 80109f4:	2301      	movne	r3, #1
 80109f6:	2300      	moveq	r3, #0
 80109f8:	b2db      	uxtb	r3, r3
 80109fa:	e022      	b.n	8010a42 <HAL_TIM_PWM_Start+0x9e>
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	2b0c      	cmp	r3, #12
 8010a00:	d109      	bne.n	8010a16 <HAL_TIM_PWM_Start+0x72>
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010a08:	b2db      	uxtb	r3, r3
 8010a0a:	2b01      	cmp	r3, #1
 8010a0c:	bf14      	ite	ne
 8010a0e:	2301      	movne	r3, #1
 8010a10:	2300      	moveq	r3, #0
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	e015      	b.n	8010a42 <HAL_TIM_PWM_Start+0x9e>
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	2b10      	cmp	r3, #16
 8010a1a:	d109      	bne.n	8010a30 <HAL_TIM_PWM_Start+0x8c>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	2b01      	cmp	r3, #1
 8010a26:	bf14      	ite	ne
 8010a28:	2301      	movne	r3, #1
 8010a2a:	2300      	moveq	r3, #0
 8010a2c:	b2db      	uxtb	r3, r3
 8010a2e:	e008      	b.n	8010a42 <HAL_TIM_PWM_Start+0x9e>
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a36:	b2db      	uxtb	r3, r3
 8010a38:	2b01      	cmp	r3, #1
 8010a3a:	bf14      	ite	ne
 8010a3c:	2301      	movne	r3, #1
 8010a3e:	2300      	moveq	r3, #0
 8010a40:	b2db      	uxtb	r3, r3
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d001      	beq.n	8010a4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010a46:	2301      	movs	r3, #1
 8010a48:	e0d8      	b.n	8010bfc <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d104      	bne.n	8010a5a <HAL_TIM_PWM_Start+0xb6>
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2202      	movs	r2, #2
 8010a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010a58:	e023      	b.n	8010aa2 <HAL_TIM_PWM_Start+0xfe>
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	2b04      	cmp	r3, #4
 8010a5e:	d104      	bne.n	8010a6a <HAL_TIM_PWM_Start+0xc6>
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2202      	movs	r2, #2
 8010a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010a68:	e01b      	b.n	8010aa2 <HAL_TIM_PWM_Start+0xfe>
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	2b08      	cmp	r3, #8
 8010a6e:	d104      	bne.n	8010a7a <HAL_TIM_PWM_Start+0xd6>
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2202      	movs	r2, #2
 8010a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010a78:	e013      	b.n	8010aa2 <HAL_TIM_PWM_Start+0xfe>
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	2b0c      	cmp	r3, #12
 8010a7e:	d104      	bne.n	8010a8a <HAL_TIM_PWM_Start+0xe6>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2202      	movs	r2, #2
 8010a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010a88:	e00b      	b.n	8010aa2 <HAL_TIM_PWM_Start+0xfe>
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	2b10      	cmp	r3, #16
 8010a8e:	d104      	bne.n	8010a9a <HAL_TIM_PWM_Start+0xf6>
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2202      	movs	r2, #2
 8010a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010a98:	e003      	b.n	8010aa2 <HAL_TIM_PWM_Start+0xfe>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2202      	movs	r2, #2
 8010a9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	2201      	movs	r2, #1
 8010aa8:	6839      	ldr	r1, [r7, #0]
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f001 f9f6 	bl	8011e9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	4a53      	ldr	r2, [pc, #332]	; (8010c04 <HAL_TIM_PWM_Start+0x260>)
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	d02c      	beq.n	8010b14 <HAL_TIM_PWM_Start+0x170>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	4a52      	ldr	r2, [pc, #328]	; (8010c08 <HAL_TIM_PWM_Start+0x264>)
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	d027      	beq.n	8010b14 <HAL_TIM_PWM_Start+0x170>
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4a50      	ldr	r2, [pc, #320]	; (8010c0c <HAL_TIM_PWM_Start+0x268>)
 8010aca:	4293      	cmp	r3, r2
 8010acc:	d022      	beq.n	8010b14 <HAL_TIM_PWM_Start+0x170>
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	4a4f      	ldr	r2, [pc, #316]	; (8010c10 <HAL_TIM_PWM_Start+0x26c>)
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	d01d      	beq.n	8010b14 <HAL_TIM_PWM_Start+0x170>
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	4a4d      	ldr	r2, [pc, #308]	; (8010c14 <HAL_TIM_PWM_Start+0x270>)
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d018      	beq.n	8010b14 <HAL_TIM_PWM_Start+0x170>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	4a4c      	ldr	r2, [pc, #304]	; (8010c18 <HAL_TIM_PWM_Start+0x274>)
 8010ae8:	4293      	cmp	r3, r2
 8010aea:	d013      	beq.n	8010b14 <HAL_TIM_PWM_Start+0x170>
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	4a4a      	ldr	r2, [pc, #296]	; (8010c1c <HAL_TIM_PWM_Start+0x278>)
 8010af2:	4293      	cmp	r3, r2
 8010af4:	d00e      	beq.n	8010b14 <HAL_TIM_PWM_Start+0x170>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	4a49      	ldr	r2, [pc, #292]	; (8010c20 <HAL_TIM_PWM_Start+0x27c>)
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d009      	beq.n	8010b14 <HAL_TIM_PWM_Start+0x170>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	4a47      	ldr	r2, [pc, #284]	; (8010c24 <HAL_TIM_PWM_Start+0x280>)
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d004      	beq.n	8010b14 <HAL_TIM_PWM_Start+0x170>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	4a46      	ldr	r2, [pc, #280]	; (8010c28 <HAL_TIM_PWM_Start+0x284>)
 8010b10:	4293      	cmp	r3, r2
 8010b12:	d101      	bne.n	8010b18 <HAL_TIM_PWM_Start+0x174>
 8010b14:	2301      	movs	r3, #1
 8010b16:	e000      	b.n	8010b1a <HAL_TIM_PWM_Start+0x176>
 8010b18:	2300      	movs	r3, #0
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d007      	beq.n	8010b2e <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010b2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	4a34      	ldr	r2, [pc, #208]	; (8010c04 <HAL_TIM_PWM_Start+0x260>)
 8010b34:	4293      	cmp	r3, r2
 8010b36:	d040      	beq.n	8010bba <HAL_TIM_PWM_Start+0x216>
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	4a32      	ldr	r2, [pc, #200]	; (8010c08 <HAL_TIM_PWM_Start+0x264>)
 8010b3e:	4293      	cmp	r3, r2
 8010b40:	d03b      	beq.n	8010bba <HAL_TIM_PWM_Start+0x216>
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b4a:	d036      	beq.n	8010bba <HAL_TIM_PWM_Start+0x216>
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010b54:	d031      	beq.n	8010bba <HAL_TIM_PWM_Start+0x216>
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	4a34      	ldr	r2, [pc, #208]	; (8010c2c <HAL_TIM_PWM_Start+0x288>)
 8010b5c:	4293      	cmp	r3, r2
 8010b5e:	d02c      	beq.n	8010bba <HAL_TIM_PWM_Start+0x216>
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	4a32      	ldr	r2, [pc, #200]	; (8010c30 <HAL_TIM_PWM_Start+0x28c>)
 8010b66:	4293      	cmp	r3, r2
 8010b68:	d027      	beq.n	8010bba <HAL_TIM_PWM_Start+0x216>
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	4a31      	ldr	r2, [pc, #196]	; (8010c34 <HAL_TIM_PWM_Start+0x290>)
 8010b70:	4293      	cmp	r3, r2
 8010b72:	d022      	beq.n	8010bba <HAL_TIM_PWM_Start+0x216>
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	4a2f      	ldr	r2, [pc, #188]	; (8010c38 <HAL_TIM_PWM_Start+0x294>)
 8010b7a:	4293      	cmp	r3, r2
 8010b7c:	d01d      	beq.n	8010bba <HAL_TIM_PWM_Start+0x216>
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	4a2e      	ldr	r2, [pc, #184]	; (8010c3c <HAL_TIM_PWM_Start+0x298>)
 8010b84:	4293      	cmp	r3, r2
 8010b86:	d018      	beq.n	8010bba <HAL_TIM_PWM_Start+0x216>
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	4a2c      	ldr	r2, [pc, #176]	; (8010c40 <HAL_TIM_PWM_Start+0x29c>)
 8010b8e:	4293      	cmp	r3, r2
 8010b90:	d013      	beq.n	8010bba <HAL_TIM_PWM_Start+0x216>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	4a1d      	ldr	r2, [pc, #116]	; (8010c0c <HAL_TIM_PWM_Start+0x268>)
 8010b98:	4293      	cmp	r3, r2
 8010b9a:	d00e      	beq.n	8010bba <HAL_TIM_PWM_Start+0x216>
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	4a1b      	ldr	r2, [pc, #108]	; (8010c10 <HAL_TIM_PWM_Start+0x26c>)
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	d009      	beq.n	8010bba <HAL_TIM_PWM_Start+0x216>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	4a1a      	ldr	r2, [pc, #104]	; (8010c14 <HAL_TIM_PWM_Start+0x270>)
 8010bac:	4293      	cmp	r3, r2
 8010bae:	d004      	beq.n	8010bba <HAL_TIM_PWM_Start+0x216>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	4a18      	ldr	r2, [pc, #96]	; (8010c18 <HAL_TIM_PWM_Start+0x274>)
 8010bb6:	4293      	cmp	r3, r2
 8010bb8:	d115      	bne.n	8010be6 <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	689a      	ldr	r2, [r3, #8]
 8010bc0:	4b20      	ldr	r3, [pc, #128]	; (8010c44 <HAL_TIM_PWM_Start+0x2a0>)
 8010bc2:	4013      	ands	r3, r2
 8010bc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	2b06      	cmp	r3, #6
 8010bca:	d015      	beq.n	8010bf8 <HAL_TIM_PWM_Start+0x254>
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010bd2:	d011      	beq.n	8010bf8 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	681a      	ldr	r2, [r3, #0]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	f042 0201 	orr.w	r2, r2, #1
 8010be2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010be4:	e008      	b.n	8010bf8 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	681a      	ldr	r2, [r3, #0]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	f042 0201 	orr.w	r2, r2, #1
 8010bf4:	601a      	str	r2, [r3, #0]
 8010bf6:	e000      	b.n	8010bfa <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bf8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010bfa:	2300      	movs	r3, #0
}
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	3710      	adds	r7, #16
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}
 8010c04:	40012c00 	.word	0x40012c00
 8010c08:	50012c00 	.word	0x50012c00
 8010c0c:	40013400 	.word	0x40013400
 8010c10:	50013400 	.word	0x50013400
 8010c14:	40014000 	.word	0x40014000
 8010c18:	50014000 	.word	0x50014000
 8010c1c:	40014400 	.word	0x40014400
 8010c20:	50014400 	.word	0x50014400
 8010c24:	40014800 	.word	0x40014800
 8010c28:	50014800 	.word	0x50014800
 8010c2c:	40000400 	.word	0x40000400
 8010c30:	50000400 	.word	0x50000400
 8010c34:	40000800 	.word	0x40000800
 8010c38:	50000800 	.word	0x50000800
 8010c3c:	40000c00 	.word	0x40000c00
 8010c40:	50000c00 	.word	0x50000c00
 8010c44:	00010007 	.word	0x00010007

08010c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b082      	sub	sp, #8
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	691b      	ldr	r3, [r3, #16]
 8010c56:	f003 0302 	and.w	r3, r3, #2
 8010c5a:	2b02      	cmp	r3, #2
 8010c5c:	d122      	bne.n	8010ca4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	68db      	ldr	r3, [r3, #12]
 8010c64:	f003 0302 	and.w	r3, r3, #2
 8010c68:	2b02      	cmp	r3, #2
 8010c6a:	d11b      	bne.n	8010ca4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	f06f 0202 	mvn.w	r2, #2
 8010c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	2201      	movs	r2, #1
 8010c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	699b      	ldr	r3, [r3, #24]
 8010c82:	f003 0303 	and.w	r3, r3, #3
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d003      	beq.n	8010c92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f000 fb7c 	bl	8011388 <HAL_TIM_IC_CaptureCallback>
 8010c90:	e005      	b.n	8010c9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	f000 fb6e 	bl	8011374 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f000 fb7f 	bl	801139c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	691b      	ldr	r3, [r3, #16]
 8010caa:	f003 0304 	and.w	r3, r3, #4
 8010cae:	2b04      	cmp	r3, #4
 8010cb0:	d122      	bne.n	8010cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	f003 0304 	and.w	r3, r3, #4
 8010cbc:	2b04      	cmp	r3, #4
 8010cbe:	d11b      	bne.n	8010cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	f06f 0204 	mvn.w	r2, #4
 8010cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2202      	movs	r2, #2
 8010cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	699b      	ldr	r3, [r3, #24]
 8010cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d003      	beq.n	8010ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f000 fb52 	bl	8011388 <HAL_TIM_IC_CaptureCallback>
 8010ce4:	e005      	b.n	8010cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f000 fb44 	bl	8011374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f000 fb55 	bl	801139c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	691b      	ldr	r3, [r3, #16]
 8010cfe:	f003 0308 	and.w	r3, r3, #8
 8010d02:	2b08      	cmp	r3, #8
 8010d04:	d122      	bne.n	8010d4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	68db      	ldr	r3, [r3, #12]
 8010d0c:	f003 0308 	and.w	r3, r3, #8
 8010d10:	2b08      	cmp	r3, #8
 8010d12:	d11b      	bne.n	8010d4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	f06f 0208 	mvn.w	r2, #8
 8010d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2204      	movs	r2, #4
 8010d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	69db      	ldr	r3, [r3, #28]
 8010d2a:	f003 0303 	and.w	r3, r3, #3
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d003      	beq.n	8010d3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f000 fb28 	bl	8011388 <HAL_TIM_IC_CaptureCallback>
 8010d38:	e005      	b.n	8010d46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f000 fb1a 	bl	8011374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f000 fb2b 	bl	801139c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	691b      	ldr	r3, [r3, #16]
 8010d52:	f003 0310 	and.w	r3, r3, #16
 8010d56:	2b10      	cmp	r3, #16
 8010d58:	d122      	bne.n	8010da0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	f003 0310 	and.w	r3, r3, #16
 8010d64:	2b10      	cmp	r3, #16
 8010d66:	d11b      	bne.n	8010da0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	f06f 0210 	mvn.w	r2, #16
 8010d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2208      	movs	r2, #8
 8010d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	69db      	ldr	r3, [r3, #28]
 8010d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d003      	beq.n	8010d8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f000 fafe 	bl	8011388 <HAL_TIM_IC_CaptureCallback>
 8010d8c:	e005      	b.n	8010d9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f000 faf0 	bl	8011374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f000 fb01 	bl	801139c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	691b      	ldr	r3, [r3, #16]
 8010da6:	f003 0301 	and.w	r3, r3, #1
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	d10e      	bne.n	8010dcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	68db      	ldr	r3, [r3, #12]
 8010db4:	f003 0301 	and.w	r3, r3, #1
 8010db8:	2b01      	cmp	r3, #1
 8010dba:	d107      	bne.n	8010dcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	f06f 0201 	mvn.w	r2, #1
 8010dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f7f0 fdae 	bl	8001928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	691b      	ldr	r3, [r3, #16]
 8010dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010dd6:	2b80      	cmp	r3, #128	; 0x80
 8010dd8:	d10e      	bne.n	8010df8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	68db      	ldr	r3, [r3, #12]
 8010de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010de4:	2b80      	cmp	r3, #128	; 0x80
 8010de6:	d107      	bne.n	8010df8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f001 fa06 	bl	8012204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	691b      	ldr	r3, [r3, #16]
 8010dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e06:	d10e      	bne.n	8010e26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	68db      	ldr	r3, [r3, #12]
 8010e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e12:	2b80      	cmp	r3, #128	; 0x80
 8010e14:	d107      	bne.n	8010e26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f001 f9f9 	bl	8012218 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	691b      	ldr	r3, [r3, #16]
 8010e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e30:	2b40      	cmp	r3, #64	; 0x40
 8010e32:	d10e      	bne.n	8010e52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	68db      	ldr	r3, [r3, #12]
 8010e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e3e:	2b40      	cmp	r3, #64	; 0x40
 8010e40:	d107      	bne.n	8010e52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f000 faaf 	bl	80113b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	691b      	ldr	r3, [r3, #16]
 8010e58:	f003 0320 	and.w	r3, r3, #32
 8010e5c:	2b20      	cmp	r3, #32
 8010e5e:	d10e      	bne.n	8010e7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	68db      	ldr	r3, [r3, #12]
 8010e66:	f003 0320 	and.w	r3, r3, #32
 8010e6a:	2b20      	cmp	r3, #32
 8010e6c:	d107      	bne.n	8010e7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	f06f 0220 	mvn.w	r2, #32
 8010e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f001 f9b9 	bl	80121f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	691b      	ldr	r3, [r3, #16]
 8010e84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e8c:	d10f      	bne.n	8010eae <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	68db      	ldr	r3, [r3, #12]
 8010e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e9c:	d107      	bne.n	8010eae <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8010ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f001 f9bf 	bl	801222c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	691b      	ldr	r3, [r3, #16]
 8010eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010eb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010ebc:	d10f      	bne.n	8010ede <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	68db      	ldr	r3, [r3, #12]
 8010ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010ec8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010ecc:	d107      	bne.n	8010ede <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8010ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f001 f9b1 	bl	8012240 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	691b      	ldr	r3, [r3, #16]
 8010ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010ee8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010eec:	d10f      	bne.n	8010f0e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	68db      	ldr	r3, [r3, #12]
 8010ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010efc:	d107      	bne.n	8010f0e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8010f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f001 f9a3 	bl	8012254 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	691b      	ldr	r3, [r3, #16]
 8010f14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010f1c:	d10f      	bne.n	8010f3e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	68db      	ldr	r3, [r3, #12]
 8010f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010f2c:	d107      	bne.n	8010f3e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8010f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f001 f995 	bl	8012268 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010f3e:	bf00      	nop
 8010f40:	3708      	adds	r7, #8
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}
	...

08010f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b086      	sub	sp, #24
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	60f8      	str	r0, [r7, #12]
 8010f50:	60b9      	str	r1, [r7, #8]
 8010f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010f54:	2300      	movs	r3, #0
 8010f56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010f5e:	2b01      	cmp	r3, #1
 8010f60:	d101      	bne.n	8010f66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010f62:	2302      	movs	r3, #2
 8010f64:	e0ff      	b.n	8011166 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	2201      	movs	r2, #1
 8010f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2b14      	cmp	r3, #20
 8010f72:	f200 80f0 	bhi.w	8011156 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010f76:	a201      	add	r2, pc, #4	; (adr r2, 8010f7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f7c:	08010fd1 	.word	0x08010fd1
 8010f80:	08011157 	.word	0x08011157
 8010f84:	08011157 	.word	0x08011157
 8010f88:	08011157 	.word	0x08011157
 8010f8c:	08011011 	.word	0x08011011
 8010f90:	08011157 	.word	0x08011157
 8010f94:	08011157 	.word	0x08011157
 8010f98:	08011157 	.word	0x08011157
 8010f9c:	08011053 	.word	0x08011053
 8010fa0:	08011157 	.word	0x08011157
 8010fa4:	08011157 	.word	0x08011157
 8010fa8:	08011157 	.word	0x08011157
 8010fac:	08011093 	.word	0x08011093
 8010fb0:	08011157 	.word	0x08011157
 8010fb4:	08011157 	.word	0x08011157
 8010fb8:	08011157 	.word	0x08011157
 8010fbc:	080110d5 	.word	0x080110d5
 8010fc0:	08011157 	.word	0x08011157
 8010fc4:	08011157 	.word	0x08011157
 8010fc8:	08011157 	.word	0x08011157
 8010fcc:	08011115 	.word	0x08011115
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	68b9      	ldr	r1, [r7, #8]
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f000 faee 	bl	80115b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	699a      	ldr	r2, [r3, #24]
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f042 0208 	orr.w	r2, r2, #8
 8010fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	699a      	ldr	r2, [r3, #24]
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	f022 0204 	bic.w	r2, r2, #4
 8010ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	6999      	ldr	r1, [r3, #24]
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	691a      	ldr	r2, [r3, #16]
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	430a      	orrs	r2, r1
 801100c:	619a      	str	r2, [r3, #24]
      break;
 801100e:	e0a5      	b.n	801115c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	68b9      	ldr	r1, [r7, #8]
 8011016:	4618      	mov	r0, r3
 8011018:	f000 fb90 	bl	801173c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	699a      	ldr	r2, [r3, #24]
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801102a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	699a      	ldr	r2, [r3, #24]
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801103a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	6999      	ldr	r1, [r3, #24]
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	691b      	ldr	r3, [r3, #16]
 8011046:	021a      	lsls	r2, r3, #8
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	430a      	orrs	r2, r1
 801104e:	619a      	str	r2, [r3, #24]
      break;
 8011050:	e084      	b.n	801115c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	68b9      	ldr	r1, [r7, #8]
 8011058:	4618      	mov	r0, r3
 801105a:	f000 fc1f 	bl	801189c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	69da      	ldr	r2, [r3, #28]
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	f042 0208 	orr.w	r2, r2, #8
 801106c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	69da      	ldr	r2, [r3, #28]
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	f022 0204 	bic.w	r2, r2, #4
 801107c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	69d9      	ldr	r1, [r3, #28]
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	691a      	ldr	r2, [r3, #16]
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	430a      	orrs	r2, r1
 801108e:	61da      	str	r2, [r3, #28]
      break;
 8011090:	e064      	b.n	801115c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	68b9      	ldr	r1, [r7, #8]
 8011098:	4618      	mov	r0, r3
 801109a:	f000 fcad 	bl	80119f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	69da      	ldr	r2, [r3, #28]
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80110ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	69da      	ldr	r2, [r3, #28]
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80110bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	69d9      	ldr	r1, [r3, #28]
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	691b      	ldr	r3, [r3, #16]
 80110c8:	021a      	lsls	r2, r3, #8
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	430a      	orrs	r2, r1
 80110d0:	61da      	str	r2, [r3, #28]
      break;
 80110d2:	e043      	b.n	801115c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	68b9      	ldr	r1, [r7, #8]
 80110da:	4618      	mov	r0, r3
 80110dc:	f000 fd3c 	bl	8011b58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	f042 0208 	orr.w	r2, r2, #8
 80110ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f022 0204 	bic.w	r2, r2, #4
 80110fe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	691a      	ldr	r2, [r3, #16]
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	430a      	orrs	r2, r1
 8011110:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8011112:	e023      	b.n	801115c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	68b9      	ldr	r1, [r7, #8]
 801111a:	4618      	mov	r0, r3
 801111c:	f000 fd9e 	bl	8011c5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801112e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801113e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	691b      	ldr	r3, [r3, #16]
 801114a:	021a      	lsls	r2, r3, #8
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	430a      	orrs	r2, r1
 8011152:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8011154:	e002      	b.n	801115c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011156:	2301      	movs	r3, #1
 8011158:	75fb      	strb	r3, [r7, #23]
      break;
 801115a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	2200      	movs	r2, #0
 8011160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011164:	7dfb      	ldrb	r3, [r7, #23]
}
 8011166:	4618      	mov	r0, r3
 8011168:	3718      	adds	r7, #24
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
 801116e:	bf00      	nop

08011170 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b084      	sub	sp, #16
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801117a:	2300      	movs	r3, #0
 801117c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011184:	2b01      	cmp	r3, #1
 8011186:	d101      	bne.n	801118c <HAL_TIM_ConfigClockSource+0x1c>
 8011188:	2302      	movs	r3, #2
 801118a:	e0e6      	b.n	801135a <HAL_TIM_ConfigClockSource+0x1ea>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2201      	movs	r2, #1
 8011190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2202      	movs	r2, #2
 8011198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	689b      	ldr	r3, [r3, #8]
 80111a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80111aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80111ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80111b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	68ba      	ldr	r2, [r7, #8]
 80111be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	4a67      	ldr	r2, [pc, #412]	; (8011364 <HAL_TIM_ConfigClockSource+0x1f4>)
 80111c6:	4293      	cmp	r3, r2
 80111c8:	f000 80b1 	beq.w	801132e <HAL_TIM_ConfigClockSource+0x1be>
 80111cc:	4a65      	ldr	r2, [pc, #404]	; (8011364 <HAL_TIM_ConfigClockSource+0x1f4>)
 80111ce:	4293      	cmp	r3, r2
 80111d0:	f200 80b6 	bhi.w	8011340 <HAL_TIM_ConfigClockSource+0x1d0>
 80111d4:	4a64      	ldr	r2, [pc, #400]	; (8011368 <HAL_TIM_ConfigClockSource+0x1f8>)
 80111d6:	4293      	cmp	r3, r2
 80111d8:	f000 80a9 	beq.w	801132e <HAL_TIM_ConfigClockSource+0x1be>
 80111dc:	4a62      	ldr	r2, [pc, #392]	; (8011368 <HAL_TIM_ConfigClockSource+0x1f8>)
 80111de:	4293      	cmp	r3, r2
 80111e0:	f200 80ae 	bhi.w	8011340 <HAL_TIM_ConfigClockSource+0x1d0>
 80111e4:	4a61      	ldr	r2, [pc, #388]	; (801136c <HAL_TIM_ConfigClockSource+0x1fc>)
 80111e6:	4293      	cmp	r3, r2
 80111e8:	f000 80a1 	beq.w	801132e <HAL_TIM_ConfigClockSource+0x1be>
 80111ec:	4a5f      	ldr	r2, [pc, #380]	; (801136c <HAL_TIM_ConfigClockSource+0x1fc>)
 80111ee:	4293      	cmp	r3, r2
 80111f0:	f200 80a6 	bhi.w	8011340 <HAL_TIM_ConfigClockSource+0x1d0>
 80111f4:	4a5e      	ldr	r2, [pc, #376]	; (8011370 <HAL_TIM_ConfigClockSource+0x200>)
 80111f6:	4293      	cmp	r3, r2
 80111f8:	f000 8099 	beq.w	801132e <HAL_TIM_ConfigClockSource+0x1be>
 80111fc:	4a5c      	ldr	r2, [pc, #368]	; (8011370 <HAL_TIM_ConfigClockSource+0x200>)
 80111fe:	4293      	cmp	r3, r2
 8011200:	f200 809e 	bhi.w	8011340 <HAL_TIM_ConfigClockSource+0x1d0>
 8011204:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011208:	f000 8091 	beq.w	801132e <HAL_TIM_ConfigClockSource+0x1be>
 801120c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011210:	f200 8096 	bhi.w	8011340 <HAL_TIM_ConfigClockSource+0x1d0>
 8011214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011218:	f000 8089 	beq.w	801132e <HAL_TIM_ConfigClockSource+0x1be>
 801121c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011220:	f200 808e 	bhi.w	8011340 <HAL_TIM_ConfigClockSource+0x1d0>
 8011224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011228:	d03e      	beq.n	80112a8 <HAL_TIM_ConfigClockSource+0x138>
 801122a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801122e:	f200 8087 	bhi.w	8011340 <HAL_TIM_ConfigClockSource+0x1d0>
 8011232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011236:	f000 8086 	beq.w	8011346 <HAL_TIM_ConfigClockSource+0x1d6>
 801123a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801123e:	d87f      	bhi.n	8011340 <HAL_TIM_ConfigClockSource+0x1d0>
 8011240:	2b70      	cmp	r3, #112	; 0x70
 8011242:	d01a      	beq.n	801127a <HAL_TIM_ConfigClockSource+0x10a>
 8011244:	2b70      	cmp	r3, #112	; 0x70
 8011246:	d87b      	bhi.n	8011340 <HAL_TIM_ConfigClockSource+0x1d0>
 8011248:	2b60      	cmp	r3, #96	; 0x60
 801124a:	d050      	beq.n	80112ee <HAL_TIM_ConfigClockSource+0x17e>
 801124c:	2b60      	cmp	r3, #96	; 0x60
 801124e:	d877      	bhi.n	8011340 <HAL_TIM_ConfigClockSource+0x1d0>
 8011250:	2b50      	cmp	r3, #80	; 0x50
 8011252:	d03c      	beq.n	80112ce <HAL_TIM_ConfigClockSource+0x15e>
 8011254:	2b50      	cmp	r3, #80	; 0x50
 8011256:	d873      	bhi.n	8011340 <HAL_TIM_ConfigClockSource+0x1d0>
 8011258:	2b40      	cmp	r3, #64	; 0x40
 801125a:	d058      	beq.n	801130e <HAL_TIM_ConfigClockSource+0x19e>
 801125c:	2b40      	cmp	r3, #64	; 0x40
 801125e:	d86f      	bhi.n	8011340 <HAL_TIM_ConfigClockSource+0x1d0>
 8011260:	2b30      	cmp	r3, #48	; 0x30
 8011262:	d064      	beq.n	801132e <HAL_TIM_ConfigClockSource+0x1be>
 8011264:	2b30      	cmp	r3, #48	; 0x30
 8011266:	d86b      	bhi.n	8011340 <HAL_TIM_ConfigClockSource+0x1d0>
 8011268:	2b20      	cmp	r3, #32
 801126a:	d060      	beq.n	801132e <HAL_TIM_ConfigClockSource+0x1be>
 801126c:	2b20      	cmp	r3, #32
 801126e:	d867      	bhi.n	8011340 <HAL_TIM_ConfigClockSource+0x1d0>
 8011270:	2b00      	cmp	r3, #0
 8011272:	d05c      	beq.n	801132e <HAL_TIM_ConfigClockSource+0x1be>
 8011274:	2b10      	cmp	r3, #16
 8011276:	d05a      	beq.n	801132e <HAL_TIM_ConfigClockSource+0x1be>
 8011278:	e062      	b.n	8011340 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	6818      	ldr	r0, [r3, #0]
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	6899      	ldr	r1, [r3, #8]
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	685a      	ldr	r2, [r3, #4]
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	68db      	ldr	r3, [r3, #12]
 801128a:	f000 fde7 	bl	8011e5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	689b      	ldr	r3, [r3, #8]
 8011294:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801129c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	68ba      	ldr	r2, [r7, #8]
 80112a4:	609a      	str	r2, [r3, #8]
      break;
 80112a6:	e04f      	b.n	8011348 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6818      	ldr	r0, [r3, #0]
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	6899      	ldr	r1, [r3, #8]
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	685a      	ldr	r2, [r3, #4]
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	68db      	ldr	r3, [r3, #12]
 80112b8:	f000 fdd0 	bl	8011e5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	689a      	ldr	r2, [r3, #8]
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80112ca:	609a      	str	r2, [r3, #8]
      break;
 80112cc:	e03c      	b.n	8011348 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6818      	ldr	r0, [r3, #0]
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	6859      	ldr	r1, [r3, #4]
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	68db      	ldr	r3, [r3, #12]
 80112da:	461a      	mov	r2, r3
 80112dc:	f000 fd42 	bl	8011d64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	2150      	movs	r1, #80	; 0x50
 80112e6:	4618      	mov	r0, r3
 80112e8:	f000 fd9b 	bl	8011e22 <TIM_ITRx_SetConfig>
      break;
 80112ec:	e02c      	b.n	8011348 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6818      	ldr	r0, [r3, #0]
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	6859      	ldr	r1, [r3, #4]
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	461a      	mov	r2, r3
 80112fc:	f000 fd61 	bl	8011dc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	2160      	movs	r1, #96	; 0x60
 8011306:	4618      	mov	r0, r3
 8011308:	f000 fd8b 	bl	8011e22 <TIM_ITRx_SetConfig>
      break;
 801130c:	e01c      	b.n	8011348 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6818      	ldr	r0, [r3, #0]
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	6859      	ldr	r1, [r3, #4]
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	68db      	ldr	r3, [r3, #12]
 801131a:	461a      	mov	r2, r3
 801131c:	f000 fd22 	bl	8011d64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	2140      	movs	r1, #64	; 0x40
 8011326:	4618      	mov	r0, r3
 8011328:	f000 fd7b 	bl	8011e22 <TIM_ITRx_SetConfig>
      break;
 801132c:	e00c      	b.n	8011348 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681a      	ldr	r2, [r3, #0]
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	4619      	mov	r1, r3
 8011338:	4610      	mov	r0, r2
 801133a:	f000 fd72 	bl	8011e22 <TIM_ITRx_SetConfig>
      break;
 801133e:	e003      	b.n	8011348 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8011340:	2301      	movs	r3, #1
 8011342:	73fb      	strb	r3, [r7, #15]
      break;
 8011344:	e000      	b.n	8011348 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8011346:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2201      	movs	r2, #1
 801134c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2200      	movs	r2, #0
 8011354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011358:	7bfb      	ldrb	r3, [r7, #15]
}
 801135a:	4618      	mov	r0, r3
 801135c:	3710      	adds	r7, #16
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	00100070 	.word	0x00100070
 8011368:	00100040 	.word	0x00100040
 801136c:	00100030 	.word	0x00100030
 8011370:	00100020 	.word	0x00100020

08011374 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011374:	b480      	push	{r7}
 8011376:	b083      	sub	sp, #12
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801137c:	bf00      	nop
 801137e:	370c      	adds	r7, #12
 8011380:	46bd      	mov	sp, r7
 8011382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011386:	4770      	bx	lr

08011388 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011388:	b480      	push	{r7}
 801138a:	b083      	sub	sp, #12
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011390:	bf00      	nop
 8011392:	370c      	adds	r7, #12
 8011394:	46bd      	mov	sp, r7
 8011396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139a:	4770      	bx	lr

0801139c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801139c:	b480      	push	{r7}
 801139e:	b083      	sub	sp, #12
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80113a4:	bf00      	nop
 80113a6:	370c      	adds	r7, #12
 80113a8:	46bd      	mov	sp, r7
 80113aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ae:	4770      	bx	lr

080113b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80113b0:	b480      	push	{r7}
 80113b2:	b083      	sub	sp, #12
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80113b8:	bf00      	nop
 80113ba:	370c      	adds	r7, #12
 80113bc:	46bd      	mov	sp, r7
 80113be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c2:	4770      	bx	lr

080113c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80113c4:	b480      	push	{r7}
 80113c6:	b085      	sub	sp, #20
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
 80113cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	4a68      	ldr	r2, [pc, #416]	; (8011578 <TIM_Base_SetConfig+0x1b4>)
 80113d8:	4293      	cmp	r3, r2
 80113da:	d02b      	beq.n	8011434 <TIM_Base_SetConfig+0x70>
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	4a67      	ldr	r2, [pc, #412]	; (801157c <TIM_Base_SetConfig+0x1b8>)
 80113e0:	4293      	cmp	r3, r2
 80113e2:	d027      	beq.n	8011434 <TIM_Base_SetConfig+0x70>
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113ea:	d023      	beq.n	8011434 <TIM_Base_SetConfig+0x70>
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80113f2:	d01f      	beq.n	8011434 <TIM_Base_SetConfig+0x70>
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	4a62      	ldr	r2, [pc, #392]	; (8011580 <TIM_Base_SetConfig+0x1bc>)
 80113f8:	4293      	cmp	r3, r2
 80113fa:	d01b      	beq.n	8011434 <TIM_Base_SetConfig+0x70>
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	4a61      	ldr	r2, [pc, #388]	; (8011584 <TIM_Base_SetConfig+0x1c0>)
 8011400:	4293      	cmp	r3, r2
 8011402:	d017      	beq.n	8011434 <TIM_Base_SetConfig+0x70>
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	4a60      	ldr	r2, [pc, #384]	; (8011588 <TIM_Base_SetConfig+0x1c4>)
 8011408:	4293      	cmp	r3, r2
 801140a:	d013      	beq.n	8011434 <TIM_Base_SetConfig+0x70>
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	4a5f      	ldr	r2, [pc, #380]	; (801158c <TIM_Base_SetConfig+0x1c8>)
 8011410:	4293      	cmp	r3, r2
 8011412:	d00f      	beq.n	8011434 <TIM_Base_SetConfig+0x70>
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	4a5e      	ldr	r2, [pc, #376]	; (8011590 <TIM_Base_SetConfig+0x1cc>)
 8011418:	4293      	cmp	r3, r2
 801141a:	d00b      	beq.n	8011434 <TIM_Base_SetConfig+0x70>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	4a5d      	ldr	r2, [pc, #372]	; (8011594 <TIM_Base_SetConfig+0x1d0>)
 8011420:	4293      	cmp	r3, r2
 8011422:	d007      	beq.n	8011434 <TIM_Base_SetConfig+0x70>
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	4a5c      	ldr	r2, [pc, #368]	; (8011598 <TIM_Base_SetConfig+0x1d4>)
 8011428:	4293      	cmp	r3, r2
 801142a:	d003      	beq.n	8011434 <TIM_Base_SetConfig+0x70>
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	4a5b      	ldr	r2, [pc, #364]	; (801159c <TIM_Base_SetConfig+0x1d8>)
 8011430:	4293      	cmp	r3, r2
 8011432:	d108      	bne.n	8011446 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801143a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	685b      	ldr	r3, [r3, #4]
 8011440:	68fa      	ldr	r2, [r7, #12]
 8011442:	4313      	orrs	r3, r2
 8011444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	4a4b      	ldr	r2, [pc, #300]	; (8011578 <TIM_Base_SetConfig+0x1b4>)
 801144a:	4293      	cmp	r3, r2
 801144c:	d043      	beq.n	80114d6 <TIM_Base_SetConfig+0x112>
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	4a4a      	ldr	r2, [pc, #296]	; (801157c <TIM_Base_SetConfig+0x1b8>)
 8011452:	4293      	cmp	r3, r2
 8011454:	d03f      	beq.n	80114d6 <TIM_Base_SetConfig+0x112>
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801145c:	d03b      	beq.n	80114d6 <TIM_Base_SetConfig+0x112>
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011464:	d037      	beq.n	80114d6 <TIM_Base_SetConfig+0x112>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	4a45      	ldr	r2, [pc, #276]	; (8011580 <TIM_Base_SetConfig+0x1bc>)
 801146a:	4293      	cmp	r3, r2
 801146c:	d033      	beq.n	80114d6 <TIM_Base_SetConfig+0x112>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	4a44      	ldr	r2, [pc, #272]	; (8011584 <TIM_Base_SetConfig+0x1c0>)
 8011472:	4293      	cmp	r3, r2
 8011474:	d02f      	beq.n	80114d6 <TIM_Base_SetConfig+0x112>
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	4a43      	ldr	r2, [pc, #268]	; (8011588 <TIM_Base_SetConfig+0x1c4>)
 801147a:	4293      	cmp	r3, r2
 801147c:	d02b      	beq.n	80114d6 <TIM_Base_SetConfig+0x112>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	4a42      	ldr	r2, [pc, #264]	; (801158c <TIM_Base_SetConfig+0x1c8>)
 8011482:	4293      	cmp	r3, r2
 8011484:	d027      	beq.n	80114d6 <TIM_Base_SetConfig+0x112>
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	4a41      	ldr	r2, [pc, #260]	; (8011590 <TIM_Base_SetConfig+0x1cc>)
 801148a:	4293      	cmp	r3, r2
 801148c:	d023      	beq.n	80114d6 <TIM_Base_SetConfig+0x112>
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	4a40      	ldr	r2, [pc, #256]	; (8011594 <TIM_Base_SetConfig+0x1d0>)
 8011492:	4293      	cmp	r3, r2
 8011494:	d01f      	beq.n	80114d6 <TIM_Base_SetConfig+0x112>
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	4a3f      	ldr	r2, [pc, #252]	; (8011598 <TIM_Base_SetConfig+0x1d4>)
 801149a:	4293      	cmp	r3, r2
 801149c:	d01b      	beq.n	80114d6 <TIM_Base_SetConfig+0x112>
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	4a3e      	ldr	r2, [pc, #248]	; (801159c <TIM_Base_SetConfig+0x1d8>)
 80114a2:	4293      	cmp	r3, r2
 80114a4:	d017      	beq.n	80114d6 <TIM_Base_SetConfig+0x112>
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	4a3d      	ldr	r2, [pc, #244]	; (80115a0 <TIM_Base_SetConfig+0x1dc>)
 80114aa:	4293      	cmp	r3, r2
 80114ac:	d013      	beq.n	80114d6 <TIM_Base_SetConfig+0x112>
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	4a3c      	ldr	r2, [pc, #240]	; (80115a4 <TIM_Base_SetConfig+0x1e0>)
 80114b2:	4293      	cmp	r3, r2
 80114b4:	d00f      	beq.n	80114d6 <TIM_Base_SetConfig+0x112>
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	4a3b      	ldr	r2, [pc, #236]	; (80115a8 <TIM_Base_SetConfig+0x1e4>)
 80114ba:	4293      	cmp	r3, r2
 80114bc:	d00b      	beq.n	80114d6 <TIM_Base_SetConfig+0x112>
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	4a3a      	ldr	r2, [pc, #232]	; (80115ac <TIM_Base_SetConfig+0x1e8>)
 80114c2:	4293      	cmp	r3, r2
 80114c4:	d007      	beq.n	80114d6 <TIM_Base_SetConfig+0x112>
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	4a39      	ldr	r2, [pc, #228]	; (80115b0 <TIM_Base_SetConfig+0x1ec>)
 80114ca:	4293      	cmp	r3, r2
 80114cc:	d003      	beq.n	80114d6 <TIM_Base_SetConfig+0x112>
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	4a38      	ldr	r2, [pc, #224]	; (80115b4 <TIM_Base_SetConfig+0x1f0>)
 80114d2:	4293      	cmp	r3, r2
 80114d4:	d108      	bne.n	80114e8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80114dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	68db      	ldr	r3, [r3, #12]
 80114e2:	68fa      	ldr	r2, [r7, #12]
 80114e4:	4313      	orrs	r3, r2
 80114e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	695b      	ldr	r3, [r3, #20]
 80114f2:	4313      	orrs	r3, r2
 80114f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	68fa      	ldr	r2, [r7, #12]
 80114fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	689a      	ldr	r2, [r3, #8]
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	681a      	ldr	r2, [r3, #0]
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	4a1a      	ldr	r2, [pc, #104]	; (8011578 <TIM_Base_SetConfig+0x1b4>)
 8011510:	4293      	cmp	r3, r2
 8011512:	d023      	beq.n	801155c <TIM_Base_SetConfig+0x198>
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	4a19      	ldr	r2, [pc, #100]	; (801157c <TIM_Base_SetConfig+0x1b8>)
 8011518:	4293      	cmp	r3, r2
 801151a:	d01f      	beq.n	801155c <TIM_Base_SetConfig+0x198>
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	4a1e      	ldr	r2, [pc, #120]	; (8011598 <TIM_Base_SetConfig+0x1d4>)
 8011520:	4293      	cmp	r3, r2
 8011522:	d01b      	beq.n	801155c <TIM_Base_SetConfig+0x198>
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	4a1d      	ldr	r2, [pc, #116]	; (801159c <TIM_Base_SetConfig+0x1d8>)
 8011528:	4293      	cmp	r3, r2
 801152a:	d017      	beq.n	801155c <TIM_Base_SetConfig+0x198>
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	4a1c      	ldr	r2, [pc, #112]	; (80115a0 <TIM_Base_SetConfig+0x1dc>)
 8011530:	4293      	cmp	r3, r2
 8011532:	d013      	beq.n	801155c <TIM_Base_SetConfig+0x198>
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	4a1b      	ldr	r2, [pc, #108]	; (80115a4 <TIM_Base_SetConfig+0x1e0>)
 8011538:	4293      	cmp	r3, r2
 801153a:	d00f      	beq.n	801155c <TIM_Base_SetConfig+0x198>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	4a1a      	ldr	r2, [pc, #104]	; (80115a8 <TIM_Base_SetConfig+0x1e4>)
 8011540:	4293      	cmp	r3, r2
 8011542:	d00b      	beq.n	801155c <TIM_Base_SetConfig+0x198>
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	4a19      	ldr	r2, [pc, #100]	; (80115ac <TIM_Base_SetConfig+0x1e8>)
 8011548:	4293      	cmp	r3, r2
 801154a:	d007      	beq.n	801155c <TIM_Base_SetConfig+0x198>
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	4a18      	ldr	r2, [pc, #96]	; (80115b0 <TIM_Base_SetConfig+0x1ec>)
 8011550:	4293      	cmp	r3, r2
 8011552:	d003      	beq.n	801155c <TIM_Base_SetConfig+0x198>
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	4a17      	ldr	r2, [pc, #92]	; (80115b4 <TIM_Base_SetConfig+0x1f0>)
 8011558:	4293      	cmp	r3, r2
 801155a:	d103      	bne.n	8011564 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	691a      	ldr	r2, [r3, #16]
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2201      	movs	r2, #1
 8011568:	615a      	str	r2, [r3, #20]
}
 801156a:	bf00      	nop
 801156c:	3714      	adds	r7, #20
 801156e:	46bd      	mov	sp, r7
 8011570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011574:	4770      	bx	lr
 8011576:	bf00      	nop
 8011578:	40012c00 	.word	0x40012c00
 801157c:	50012c00 	.word	0x50012c00
 8011580:	40000400 	.word	0x40000400
 8011584:	50000400 	.word	0x50000400
 8011588:	40000800 	.word	0x40000800
 801158c:	50000800 	.word	0x50000800
 8011590:	40000c00 	.word	0x40000c00
 8011594:	50000c00 	.word	0x50000c00
 8011598:	40013400 	.word	0x40013400
 801159c:	50013400 	.word	0x50013400
 80115a0:	40014000 	.word	0x40014000
 80115a4:	50014000 	.word	0x50014000
 80115a8:	40014400 	.word	0x40014400
 80115ac:	50014400 	.word	0x50014400
 80115b0:	40014800 	.word	0x40014800
 80115b4:	50014800 	.word	0x50014800

080115b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80115b8:	b480      	push	{r7}
 80115ba:	b087      	sub	sp, #28
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6a1b      	ldr	r3, [r3, #32]
 80115c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6a1b      	ldr	r3, [r3, #32]
 80115cc:	f023 0201 	bic.w	r2, r3, #1
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	685b      	ldr	r3, [r3, #4]
 80115d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	699b      	ldr	r3, [r3, #24]
 80115de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80115e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	f023 0303 	bic.w	r3, r3, #3
 80115f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	68fa      	ldr	r2, [r7, #12]
 80115fa:	4313      	orrs	r3, r2
 80115fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	f023 0302 	bic.w	r3, r3, #2
 8011604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	689b      	ldr	r3, [r3, #8]
 801160a:	697a      	ldr	r2, [r7, #20]
 801160c:	4313      	orrs	r3, r2
 801160e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	4a40      	ldr	r2, [pc, #256]	; (8011714 <TIM_OC1_SetConfig+0x15c>)
 8011614:	4293      	cmp	r3, r2
 8011616:	d023      	beq.n	8011660 <TIM_OC1_SetConfig+0xa8>
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	4a3f      	ldr	r2, [pc, #252]	; (8011718 <TIM_OC1_SetConfig+0x160>)
 801161c:	4293      	cmp	r3, r2
 801161e:	d01f      	beq.n	8011660 <TIM_OC1_SetConfig+0xa8>
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	4a3e      	ldr	r2, [pc, #248]	; (801171c <TIM_OC1_SetConfig+0x164>)
 8011624:	4293      	cmp	r3, r2
 8011626:	d01b      	beq.n	8011660 <TIM_OC1_SetConfig+0xa8>
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	4a3d      	ldr	r2, [pc, #244]	; (8011720 <TIM_OC1_SetConfig+0x168>)
 801162c:	4293      	cmp	r3, r2
 801162e:	d017      	beq.n	8011660 <TIM_OC1_SetConfig+0xa8>
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	4a3c      	ldr	r2, [pc, #240]	; (8011724 <TIM_OC1_SetConfig+0x16c>)
 8011634:	4293      	cmp	r3, r2
 8011636:	d013      	beq.n	8011660 <TIM_OC1_SetConfig+0xa8>
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	4a3b      	ldr	r2, [pc, #236]	; (8011728 <TIM_OC1_SetConfig+0x170>)
 801163c:	4293      	cmp	r3, r2
 801163e:	d00f      	beq.n	8011660 <TIM_OC1_SetConfig+0xa8>
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	4a3a      	ldr	r2, [pc, #232]	; (801172c <TIM_OC1_SetConfig+0x174>)
 8011644:	4293      	cmp	r3, r2
 8011646:	d00b      	beq.n	8011660 <TIM_OC1_SetConfig+0xa8>
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	4a39      	ldr	r2, [pc, #228]	; (8011730 <TIM_OC1_SetConfig+0x178>)
 801164c:	4293      	cmp	r3, r2
 801164e:	d007      	beq.n	8011660 <TIM_OC1_SetConfig+0xa8>
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	4a38      	ldr	r2, [pc, #224]	; (8011734 <TIM_OC1_SetConfig+0x17c>)
 8011654:	4293      	cmp	r3, r2
 8011656:	d003      	beq.n	8011660 <TIM_OC1_SetConfig+0xa8>
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	4a37      	ldr	r2, [pc, #220]	; (8011738 <TIM_OC1_SetConfig+0x180>)
 801165c:	4293      	cmp	r3, r2
 801165e:	d10c      	bne.n	801167a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	f023 0308 	bic.w	r3, r3, #8
 8011666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	68db      	ldr	r3, [r3, #12]
 801166c:	697a      	ldr	r2, [r7, #20]
 801166e:	4313      	orrs	r3, r2
 8011670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	f023 0304 	bic.w	r3, r3, #4
 8011678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	4a25      	ldr	r2, [pc, #148]	; (8011714 <TIM_OC1_SetConfig+0x15c>)
 801167e:	4293      	cmp	r3, r2
 8011680:	d023      	beq.n	80116ca <TIM_OC1_SetConfig+0x112>
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	4a24      	ldr	r2, [pc, #144]	; (8011718 <TIM_OC1_SetConfig+0x160>)
 8011686:	4293      	cmp	r3, r2
 8011688:	d01f      	beq.n	80116ca <TIM_OC1_SetConfig+0x112>
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	4a23      	ldr	r2, [pc, #140]	; (801171c <TIM_OC1_SetConfig+0x164>)
 801168e:	4293      	cmp	r3, r2
 8011690:	d01b      	beq.n	80116ca <TIM_OC1_SetConfig+0x112>
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	4a22      	ldr	r2, [pc, #136]	; (8011720 <TIM_OC1_SetConfig+0x168>)
 8011696:	4293      	cmp	r3, r2
 8011698:	d017      	beq.n	80116ca <TIM_OC1_SetConfig+0x112>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	4a21      	ldr	r2, [pc, #132]	; (8011724 <TIM_OC1_SetConfig+0x16c>)
 801169e:	4293      	cmp	r3, r2
 80116a0:	d013      	beq.n	80116ca <TIM_OC1_SetConfig+0x112>
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	4a20      	ldr	r2, [pc, #128]	; (8011728 <TIM_OC1_SetConfig+0x170>)
 80116a6:	4293      	cmp	r3, r2
 80116a8:	d00f      	beq.n	80116ca <TIM_OC1_SetConfig+0x112>
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	4a1f      	ldr	r2, [pc, #124]	; (801172c <TIM_OC1_SetConfig+0x174>)
 80116ae:	4293      	cmp	r3, r2
 80116b0:	d00b      	beq.n	80116ca <TIM_OC1_SetConfig+0x112>
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	4a1e      	ldr	r2, [pc, #120]	; (8011730 <TIM_OC1_SetConfig+0x178>)
 80116b6:	4293      	cmp	r3, r2
 80116b8:	d007      	beq.n	80116ca <TIM_OC1_SetConfig+0x112>
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	4a1d      	ldr	r2, [pc, #116]	; (8011734 <TIM_OC1_SetConfig+0x17c>)
 80116be:	4293      	cmp	r3, r2
 80116c0:	d003      	beq.n	80116ca <TIM_OC1_SetConfig+0x112>
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	4a1c      	ldr	r2, [pc, #112]	; (8011738 <TIM_OC1_SetConfig+0x180>)
 80116c6:	4293      	cmp	r3, r2
 80116c8:	d111      	bne.n	80116ee <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80116d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80116d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80116da:	683b      	ldr	r3, [r7, #0]
 80116dc:	695b      	ldr	r3, [r3, #20]
 80116de:	693a      	ldr	r2, [r7, #16]
 80116e0:	4313      	orrs	r3, r2
 80116e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	699b      	ldr	r3, [r3, #24]
 80116e8:	693a      	ldr	r2, [r7, #16]
 80116ea:	4313      	orrs	r3, r2
 80116ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	693a      	ldr	r2, [r7, #16]
 80116f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	68fa      	ldr	r2, [r7, #12]
 80116f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	685a      	ldr	r2, [r3, #4]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	697a      	ldr	r2, [r7, #20]
 8011706:	621a      	str	r2, [r3, #32]
}
 8011708:	bf00      	nop
 801170a:	371c      	adds	r7, #28
 801170c:	46bd      	mov	sp, r7
 801170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011712:	4770      	bx	lr
 8011714:	40012c00 	.word	0x40012c00
 8011718:	50012c00 	.word	0x50012c00
 801171c:	40013400 	.word	0x40013400
 8011720:	50013400 	.word	0x50013400
 8011724:	40014000 	.word	0x40014000
 8011728:	50014000 	.word	0x50014000
 801172c:	40014400 	.word	0x40014400
 8011730:	50014400 	.word	0x50014400
 8011734:	40014800 	.word	0x40014800
 8011738:	50014800 	.word	0x50014800

0801173c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801173c:	b480      	push	{r7}
 801173e:	b087      	sub	sp, #28
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6a1b      	ldr	r3, [r3, #32]
 801174a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	6a1b      	ldr	r3, [r3, #32]
 8011750:	f023 0210 	bic.w	r2, r3, #16
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	685b      	ldr	r3, [r3, #4]
 801175c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	699b      	ldr	r3, [r3, #24]
 8011762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801176a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801176e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	021b      	lsls	r3, r3, #8
 801177e:	68fa      	ldr	r2, [r7, #12]
 8011780:	4313      	orrs	r3, r2
 8011782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	f023 0320 	bic.w	r3, r3, #32
 801178a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	689b      	ldr	r3, [r3, #8]
 8011790:	011b      	lsls	r3, r3, #4
 8011792:	697a      	ldr	r2, [r7, #20]
 8011794:	4313      	orrs	r3, r2
 8011796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	4a36      	ldr	r2, [pc, #216]	; (8011874 <TIM_OC2_SetConfig+0x138>)
 801179c:	4293      	cmp	r3, r2
 801179e:	d00b      	beq.n	80117b8 <TIM_OC2_SetConfig+0x7c>
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	4a35      	ldr	r2, [pc, #212]	; (8011878 <TIM_OC2_SetConfig+0x13c>)
 80117a4:	4293      	cmp	r3, r2
 80117a6:	d007      	beq.n	80117b8 <TIM_OC2_SetConfig+0x7c>
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	4a34      	ldr	r2, [pc, #208]	; (801187c <TIM_OC2_SetConfig+0x140>)
 80117ac:	4293      	cmp	r3, r2
 80117ae:	d003      	beq.n	80117b8 <TIM_OC2_SetConfig+0x7c>
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	4a33      	ldr	r2, [pc, #204]	; (8011880 <TIM_OC2_SetConfig+0x144>)
 80117b4:	4293      	cmp	r3, r2
 80117b6:	d10d      	bne.n	80117d4 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80117be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	68db      	ldr	r3, [r3, #12]
 80117c4:	011b      	lsls	r3, r3, #4
 80117c6:	697a      	ldr	r2, [r7, #20]
 80117c8:	4313      	orrs	r3, r2
 80117ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80117d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	4a27      	ldr	r2, [pc, #156]	; (8011874 <TIM_OC2_SetConfig+0x138>)
 80117d8:	4293      	cmp	r3, r2
 80117da:	d023      	beq.n	8011824 <TIM_OC2_SetConfig+0xe8>
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	4a26      	ldr	r2, [pc, #152]	; (8011878 <TIM_OC2_SetConfig+0x13c>)
 80117e0:	4293      	cmp	r3, r2
 80117e2:	d01f      	beq.n	8011824 <TIM_OC2_SetConfig+0xe8>
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	4a25      	ldr	r2, [pc, #148]	; (801187c <TIM_OC2_SetConfig+0x140>)
 80117e8:	4293      	cmp	r3, r2
 80117ea:	d01b      	beq.n	8011824 <TIM_OC2_SetConfig+0xe8>
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	4a24      	ldr	r2, [pc, #144]	; (8011880 <TIM_OC2_SetConfig+0x144>)
 80117f0:	4293      	cmp	r3, r2
 80117f2:	d017      	beq.n	8011824 <TIM_OC2_SetConfig+0xe8>
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	4a23      	ldr	r2, [pc, #140]	; (8011884 <TIM_OC2_SetConfig+0x148>)
 80117f8:	4293      	cmp	r3, r2
 80117fa:	d013      	beq.n	8011824 <TIM_OC2_SetConfig+0xe8>
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	4a22      	ldr	r2, [pc, #136]	; (8011888 <TIM_OC2_SetConfig+0x14c>)
 8011800:	4293      	cmp	r3, r2
 8011802:	d00f      	beq.n	8011824 <TIM_OC2_SetConfig+0xe8>
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	4a21      	ldr	r2, [pc, #132]	; (801188c <TIM_OC2_SetConfig+0x150>)
 8011808:	4293      	cmp	r3, r2
 801180a:	d00b      	beq.n	8011824 <TIM_OC2_SetConfig+0xe8>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	4a20      	ldr	r2, [pc, #128]	; (8011890 <TIM_OC2_SetConfig+0x154>)
 8011810:	4293      	cmp	r3, r2
 8011812:	d007      	beq.n	8011824 <TIM_OC2_SetConfig+0xe8>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	4a1f      	ldr	r2, [pc, #124]	; (8011894 <TIM_OC2_SetConfig+0x158>)
 8011818:	4293      	cmp	r3, r2
 801181a:	d003      	beq.n	8011824 <TIM_OC2_SetConfig+0xe8>
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	4a1e      	ldr	r2, [pc, #120]	; (8011898 <TIM_OC2_SetConfig+0x15c>)
 8011820:	4293      	cmp	r3, r2
 8011822:	d113      	bne.n	801184c <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801182a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801182c:	693b      	ldr	r3, [r7, #16]
 801182e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011834:	683b      	ldr	r3, [r7, #0]
 8011836:	695b      	ldr	r3, [r3, #20]
 8011838:	009b      	lsls	r3, r3, #2
 801183a:	693a      	ldr	r2, [r7, #16]
 801183c:	4313      	orrs	r3, r2
 801183e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	699b      	ldr	r3, [r3, #24]
 8011844:	009b      	lsls	r3, r3, #2
 8011846:	693a      	ldr	r2, [r7, #16]
 8011848:	4313      	orrs	r3, r2
 801184a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	693a      	ldr	r2, [r7, #16]
 8011850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	68fa      	ldr	r2, [r7, #12]
 8011856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	685a      	ldr	r2, [r3, #4]
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	697a      	ldr	r2, [r7, #20]
 8011864:	621a      	str	r2, [r3, #32]
}
 8011866:	bf00      	nop
 8011868:	371c      	adds	r7, #28
 801186a:	46bd      	mov	sp, r7
 801186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011870:	4770      	bx	lr
 8011872:	bf00      	nop
 8011874:	40012c00 	.word	0x40012c00
 8011878:	50012c00 	.word	0x50012c00
 801187c:	40013400 	.word	0x40013400
 8011880:	50013400 	.word	0x50013400
 8011884:	40014000 	.word	0x40014000
 8011888:	50014000 	.word	0x50014000
 801188c:	40014400 	.word	0x40014400
 8011890:	50014400 	.word	0x50014400
 8011894:	40014800 	.word	0x40014800
 8011898:	50014800 	.word	0x50014800

0801189c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801189c:	b480      	push	{r7}
 801189e:	b087      	sub	sp, #28
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
 80118a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6a1b      	ldr	r3, [r3, #32]
 80118aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	6a1b      	ldr	r3, [r3, #32]
 80118b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	69db      	ldr	r3, [r3, #28]
 80118c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80118ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80118ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	f023 0303 	bic.w	r3, r3, #3
 80118d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	68fa      	ldr	r2, [r7, #12]
 80118de:	4313      	orrs	r3, r2
 80118e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80118e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	689b      	ldr	r3, [r3, #8]
 80118ee:	021b      	lsls	r3, r3, #8
 80118f0:	697a      	ldr	r2, [r7, #20]
 80118f2:	4313      	orrs	r3, r2
 80118f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	4a35      	ldr	r2, [pc, #212]	; (80119d0 <TIM_OC3_SetConfig+0x134>)
 80118fa:	4293      	cmp	r3, r2
 80118fc:	d00b      	beq.n	8011916 <TIM_OC3_SetConfig+0x7a>
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	4a34      	ldr	r2, [pc, #208]	; (80119d4 <TIM_OC3_SetConfig+0x138>)
 8011902:	4293      	cmp	r3, r2
 8011904:	d007      	beq.n	8011916 <TIM_OC3_SetConfig+0x7a>
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	4a33      	ldr	r2, [pc, #204]	; (80119d8 <TIM_OC3_SetConfig+0x13c>)
 801190a:	4293      	cmp	r3, r2
 801190c:	d003      	beq.n	8011916 <TIM_OC3_SetConfig+0x7a>
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	4a32      	ldr	r2, [pc, #200]	; (80119dc <TIM_OC3_SetConfig+0x140>)
 8011912:	4293      	cmp	r3, r2
 8011914:	d10d      	bne.n	8011932 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801191c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	68db      	ldr	r3, [r3, #12]
 8011922:	021b      	lsls	r3, r3, #8
 8011924:	697a      	ldr	r2, [r7, #20]
 8011926:	4313      	orrs	r3, r2
 8011928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	4a26      	ldr	r2, [pc, #152]	; (80119d0 <TIM_OC3_SetConfig+0x134>)
 8011936:	4293      	cmp	r3, r2
 8011938:	d023      	beq.n	8011982 <TIM_OC3_SetConfig+0xe6>
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	4a25      	ldr	r2, [pc, #148]	; (80119d4 <TIM_OC3_SetConfig+0x138>)
 801193e:	4293      	cmp	r3, r2
 8011940:	d01f      	beq.n	8011982 <TIM_OC3_SetConfig+0xe6>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	4a24      	ldr	r2, [pc, #144]	; (80119d8 <TIM_OC3_SetConfig+0x13c>)
 8011946:	4293      	cmp	r3, r2
 8011948:	d01b      	beq.n	8011982 <TIM_OC3_SetConfig+0xe6>
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	4a23      	ldr	r2, [pc, #140]	; (80119dc <TIM_OC3_SetConfig+0x140>)
 801194e:	4293      	cmp	r3, r2
 8011950:	d017      	beq.n	8011982 <TIM_OC3_SetConfig+0xe6>
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	4a22      	ldr	r2, [pc, #136]	; (80119e0 <TIM_OC3_SetConfig+0x144>)
 8011956:	4293      	cmp	r3, r2
 8011958:	d013      	beq.n	8011982 <TIM_OC3_SetConfig+0xe6>
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	4a21      	ldr	r2, [pc, #132]	; (80119e4 <TIM_OC3_SetConfig+0x148>)
 801195e:	4293      	cmp	r3, r2
 8011960:	d00f      	beq.n	8011982 <TIM_OC3_SetConfig+0xe6>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	4a20      	ldr	r2, [pc, #128]	; (80119e8 <TIM_OC3_SetConfig+0x14c>)
 8011966:	4293      	cmp	r3, r2
 8011968:	d00b      	beq.n	8011982 <TIM_OC3_SetConfig+0xe6>
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	4a1f      	ldr	r2, [pc, #124]	; (80119ec <TIM_OC3_SetConfig+0x150>)
 801196e:	4293      	cmp	r3, r2
 8011970:	d007      	beq.n	8011982 <TIM_OC3_SetConfig+0xe6>
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	4a1e      	ldr	r2, [pc, #120]	; (80119f0 <TIM_OC3_SetConfig+0x154>)
 8011976:	4293      	cmp	r3, r2
 8011978:	d003      	beq.n	8011982 <TIM_OC3_SetConfig+0xe6>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	4a1d      	ldr	r2, [pc, #116]	; (80119f4 <TIM_OC3_SetConfig+0x158>)
 801197e:	4293      	cmp	r3, r2
 8011980:	d113      	bne.n	80119aa <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801198a:	693b      	ldr	r3, [r7, #16]
 801198c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	695b      	ldr	r3, [r3, #20]
 8011996:	011b      	lsls	r3, r3, #4
 8011998:	693a      	ldr	r2, [r7, #16]
 801199a:	4313      	orrs	r3, r2
 801199c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	699b      	ldr	r3, [r3, #24]
 80119a2:	011b      	lsls	r3, r3, #4
 80119a4:	693a      	ldr	r2, [r7, #16]
 80119a6:	4313      	orrs	r3, r2
 80119a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	693a      	ldr	r2, [r7, #16]
 80119ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	68fa      	ldr	r2, [r7, #12]
 80119b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	685a      	ldr	r2, [r3, #4]
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	697a      	ldr	r2, [r7, #20]
 80119c2:	621a      	str	r2, [r3, #32]
}
 80119c4:	bf00      	nop
 80119c6:	371c      	adds	r7, #28
 80119c8:	46bd      	mov	sp, r7
 80119ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ce:	4770      	bx	lr
 80119d0:	40012c00 	.word	0x40012c00
 80119d4:	50012c00 	.word	0x50012c00
 80119d8:	40013400 	.word	0x40013400
 80119dc:	50013400 	.word	0x50013400
 80119e0:	40014000 	.word	0x40014000
 80119e4:	50014000 	.word	0x50014000
 80119e8:	40014400 	.word	0x40014400
 80119ec:	50014400 	.word	0x50014400
 80119f0:	40014800 	.word	0x40014800
 80119f4:	50014800 	.word	0x50014800

080119f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80119f8:	b480      	push	{r7}
 80119fa:	b087      	sub	sp, #28
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6a1b      	ldr	r3, [r3, #32]
 8011a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6a1b      	ldr	r3, [r3, #32]
 8011a0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	69db      	ldr	r3, [r3, #28]
 8011a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	021b      	lsls	r3, r3, #8
 8011a3a:	68fa      	ldr	r2, [r7, #12]
 8011a3c:	4313      	orrs	r3, r2
 8011a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011a40:	697b      	ldr	r3, [r7, #20]
 8011a42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011a46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	689b      	ldr	r3, [r3, #8]
 8011a4c:	031b      	lsls	r3, r3, #12
 8011a4e:	697a      	ldr	r2, [r7, #20]
 8011a50:	4313      	orrs	r3, r2
 8011a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	4a36      	ldr	r2, [pc, #216]	; (8011b30 <TIM_OC4_SetConfig+0x138>)
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d00b      	beq.n	8011a74 <TIM_OC4_SetConfig+0x7c>
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	4a35      	ldr	r2, [pc, #212]	; (8011b34 <TIM_OC4_SetConfig+0x13c>)
 8011a60:	4293      	cmp	r3, r2
 8011a62:	d007      	beq.n	8011a74 <TIM_OC4_SetConfig+0x7c>
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	4a34      	ldr	r2, [pc, #208]	; (8011b38 <TIM_OC4_SetConfig+0x140>)
 8011a68:	4293      	cmp	r3, r2
 8011a6a:	d003      	beq.n	8011a74 <TIM_OC4_SetConfig+0x7c>
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	4a33      	ldr	r2, [pc, #204]	; (8011b3c <TIM_OC4_SetConfig+0x144>)
 8011a70:	4293      	cmp	r3, r2
 8011a72:	d10d      	bne.n	8011a90 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	68db      	ldr	r3, [r3, #12]
 8011a80:	031b      	lsls	r3, r3, #12
 8011a82:	697a      	ldr	r2, [r7, #20]
 8011a84:	4313      	orrs	r3, r2
 8011a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011a8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	4a27      	ldr	r2, [pc, #156]	; (8011b30 <TIM_OC4_SetConfig+0x138>)
 8011a94:	4293      	cmp	r3, r2
 8011a96:	d023      	beq.n	8011ae0 <TIM_OC4_SetConfig+0xe8>
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	4a26      	ldr	r2, [pc, #152]	; (8011b34 <TIM_OC4_SetConfig+0x13c>)
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	d01f      	beq.n	8011ae0 <TIM_OC4_SetConfig+0xe8>
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	4a25      	ldr	r2, [pc, #148]	; (8011b38 <TIM_OC4_SetConfig+0x140>)
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	d01b      	beq.n	8011ae0 <TIM_OC4_SetConfig+0xe8>
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	4a24      	ldr	r2, [pc, #144]	; (8011b3c <TIM_OC4_SetConfig+0x144>)
 8011aac:	4293      	cmp	r3, r2
 8011aae:	d017      	beq.n	8011ae0 <TIM_OC4_SetConfig+0xe8>
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	4a23      	ldr	r2, [pc, #140]	; (8011b40 <TIM_OC4_SetConfig+0x148>)
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	d013      	beq.n	8011ae0 <TIM_OC4_SetConfig+0xe8>
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	4a22      	ldr	r2, [pc, #136]	; (8011b44 <TIM_OC4_SetConfig+0x14c>)
 8011abc:	4293      	cmp	r3, r2
 8011abe:	d00f      	beq.n	8011ae0 <TIM_OC4_SetConfig+0xe8>
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	4a21      	ldr	r2, [pc, #132]	; (8011b48 <TIM_OC4_SetConfig+0x150>)
 8011ac4:	4293      	cmp	r3, r2
 8011ac6:	d00b      	beq.n	8011ae0 <TIM_OC4_SetConfig+0xe8>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	4a20      	ldr	r2, [pc, #128]	; (8011b4c <TIM_OC4_SetConfig+0x154>)
 8011acc:	4293      	cmp	r3, r2
 8011ace:	d007      	beq.n	8011ae0 <TIM_OC4_SetConfig+0xe8>
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	4a1f      	ldr	r2, [pc, #124]	; (8011b50 <TIM_OC4_SetConfig+0x158>)
 8011ad4:	4293      	cmp	r3, r2
 8011ad6:	d003      	beq.n	8011ae0 <TIM_OC4_SetConfig+0xe8>
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	4a1e      	ldr	r2, [pc, #120]	; (8011b54 <TIM_OC4_SetConfig+0x15c>)
 8011adc:	4293      	cmp	r3, r2
 8011ade:	d113      	bne.n	8011b08 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011ae6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011aee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	695b      	ldr	r3, [r3, #20]
 8011af4:	019b      	lsls	r3, r3, #6
 8011af6:	693a      	ldr	r2, [r7, #16]
 8011af8:	4313      	orrs	r3, r2
 8011afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	699b      	ldr	r3, [r3, #24]
 8011b00:	019b      	lsls	r3, r3, #6
 8011b02:	693a      	ldr	r2, [r7, #16]
 8011b04:	4313      	orrs	r3, r2
 8011b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	693a      	ldr	r2, [r7, #16]
 8011b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	68fa      	ldr	r2, [r7, #12]
 8011b12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	685a      	ldr	r2, [r3, #4]
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	697a      	ldr	r2, [r7, #20]
 8011b20:	621a      	str	r2, [r3, #32]
}
 8011b22:	bf00      	nop
 8011b24:	371c      	adds	r7, #28
 8011b26:	46bd      	mov	sp, r7
 8011b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2c:	4770      	bx	lr
 8011b2e:	bf00      	nop
 8011b30:	40012c00 	.word	0x40012c00
 8011b34:	50012c00 	.word	0x50012c00
 8011b38:	40013400 	.word	0x40013400
 8011b3c:	50013400 	.word	0x50013400
 8011b40:	40014000 	.word	0x40014000
 8011b44:	50014000 	.word	0x50014000
 8011b48:	40014400 	.word	0x40014400
 8011b4c:	50014400 	.word	0x50014400
 8011b50:	40014800 	.word	0x40014800
 8011b54:	50014800 	.word	0x50014800

08011b58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b087      	sub	sp, #28
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	6a1b      	ldr	r3, [r3, #32]
 8011b66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	6a1b      	ldr	r3, [r3, #32]
 8011b6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	685b      	ldr	r3, [r3, #4]
 8011b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	68fa      	ldr	r2, [r7, #12]
 8011b92:	4313      	orrs	r3, r2
 8011b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011b96:	693b      	ldr	r3, [r7, #16]
 8011b98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011b9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	689b      	ldr	r3, [r3, #8]
 8011ba2:	041b      	lsls	r3, r3, #16
 8011ba4:	693a      	ldr	r2, [r7, #16]
 8011ba6:	4313      	orrs	r3, r2
 8011ba8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	4a21      	ldr	r2, [pc, #132]	; (8011c34 <TIM_OC5_SetConfig+0xdc>)
 8011bae:	4293      	cmp	r3, r2
 8011bb0:	d023      	beq.n	8011bfa <TIM_OC5_SetConfig+0xa2>
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	4a20      	ldr	r2, [pc, #128]	; (8011c38 <TIM_OC5_SetConfig+0xe0>)
 8011bb6:	4293      	cmp	r3, r2
 8011bb8:	d01f      	beq.n	8011bfa <TIM_OC5_SetConfig+0xa2>
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	4a1f      	ldr	r2, [pc, #124]	; (8011c3c <TIM_OC5_SetConfig+0xe4>)
 8011bbe:	4293      	cmp	r3, r2
 8011bc0:	d01b      	beq.n	8011bfa <TIM_OC5_SetConfig+0xa2>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	4a1e      	ldr	r2, [pc, #120]	; (8011c40 <TIM_OC5_SetConfig+0xe8>)
 8011bc6:	4293      	cmp	r3, r2
 8011bc8:	d017      	beq.n	8011bfa <TIM_OC5_SetConfig+0xa2>
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	4a1d      	ldr	r2, [pc, #116]	; (8011c44 <TIM_OC5_SetConfig+0xec>)
 8011bce:	4293      	cmp	r3, r2
 8011bd0:	d013      	beq.n	8011bfa <TIM_OC5_SetConfig+0xa2>
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	4a1c      	ldr	r2, [pc, #112]	; (8011c48 <TIM_OC5_SetConfig+0xf0>)
 8011bd6:	4293      	cmp	r3, r2
 8011bd8:	d00f      	beq.n	8011bfa <TIM_OC5_SetConfig+0xa2>
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	4a1b      	ldr	r2, [pc, #108]	; (8011c4c <TIM_OC5_SetConfig+0xf4>)
 8011bde:	4293      	cmp	r3, r2
 8011be0:	d00b      	beq.n	8011bfa <TIM_OC5_SetConfig+0xa2>
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	4a1a      	ldr	r2, [pc, #104]	; (8011c50 <TIM_OC5_SetConfig+0xf8>)
 8011be6:	4293      	cmp	r3, r2
 8011be8:	d007      	beq.n	8011bfa <TIM_OC5_SetConfig+0xa2>
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	4a19      	ldr	r2, [pc, #100]	; (8011c54 <TIM_OC5_SetConfig+0xfc>)
 8011bee:	4293      	cmp	r3, r2
 8011bf0:	d003      	beq.n	8011bfa <TIM_OC5_SetConfig+0xa2>
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	4a18      	ldr	r2, [pc, #96]	; (8011c58 <TIM_OC5_SetConfig+0x100>)
 8011bf6:	4293      	cmp	r3, r2
 8011bf8:	d109      	bne.n	8011c0e <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011bfa:	697b      	ldr	r3, [r7, #20]
 8011bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011c00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	695b      	ldr	r3, [r3, #20]
 8011c06:	021b      	lsls	r3, r3, #8
 8011c08:	697a      	ldr	r2, [r7, #20]
 8011c0a:	4313      	orrs	r3, r2
 8011c0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	697a      	ldr	r2, [r7, #20]
 8011c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	68fa      	ldr	r2, [r7, #12]
 8011c18:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	685a      	ldr	r2, [r3, #4]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	693a      	ldr	r2, [r7, #16]
 8011c26:	621a      	str	r2, [r3, #32]
}
 8011c28:	bf00      	nop
 8011c2a:	371c      	adds	r7, #28
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr
 8011c34:	40012c00 	.word	0x40012c00
 8011c38:	50012c00 	.word	0x50012c00
 8011c3c:	40013400 	.word	0x40013400
 8011c40:	50013400 	.word	0x50013400
 8011c44:	40014000 	.word	0x40014000
 8011c48:	50014000 	.word	0x50014000
 8011c4c:	40014400 	.word	0x40014400
 8011c50:	50014400 	.word	0x50014400
 8011c54:	40014800 	.word	0x40014800
 8011c58:	50014800 	.word	0x50014800

08011c5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011c5c:	b480      	push	{r7}
 8011c5e:	b087      	sub	sp, #28
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6a1b      	ldr	r3, [r3, #32]
 8011c6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6a1b      	ldr	r3, [r3, #32]
 8011c70:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	021b      	lsls	r3, r3, #8
 8011c96:	68fa      	ldr	r2, [r7, #12]
 8011c98:	4313      	orrs	r3, r2
 8011c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011c9c:	693b      	ldr	r3, [r7, #16]
 8011c9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	689b      	ldr	r3, [r3, #8]
 8011ca8:	051b      	lsls	r3, r3, #20
 8011caa:	693a      	ldr	r2, [r7, #16]
 8011cac:	4313      	orrs	r3, r2
 8011cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	4a22      	ldr	r2, [pc, #136]	; (8011d3c <TIM_OC6_SetConfig+0xe0>)
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	d023      	beq.n	8011d00 <TIM_OC6_SetConfig+0xa4>
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	4a21      	ldr	r2, [pc, #132]	; (8011d40 <TIM_OC6_SetConfig+0xe4>)
 8011cbc:	4293      	cmp	r3, r2
 8011cbe:	d01f      	beq.n	8011d00 <TIM_OC6_SetConfig+0xa4>
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	4a20      	ldr	r2, [pc, #128]	; (8011d44 <TIM_OC6_SetConfig+0xe8>)
 8011cc4:	4293      	cmp	r3, r2
 8011cc6:	d01b      	beq.n	8011d00 <TIM_OC6_SetConfig+0xa4>
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	4a1f      	ldr	r2, [pc, #124]	; (8011d48 <TIM_OC6_SetConfig+0xec>)
 8011ccc:	4293      	cmp	r3, r2
 8011cce:	d017      	beq.n	8011d00 <TIM_OC6_SetConfig+0xa4>
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	4a1e      	ldr	r2, [pc, #120]	; (8011d4c <TIM_OC6_SetConfig+0xf0>)
 8011cd4:	4293      	cmp	r3, r2
 8011cd6:	d013      	beq.n	8011d00 <TIM_OC6_SetConfig+0xa4>
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	4a1d      	ldr	r2, [pc, #116]	; (8011d50 <TIM_OC6_SetConfig+0xf4>)
 8011cdc:	4293      	cmp	r3, r2
 8011cde:	d00f      	beq.n	8011d00 <TIM_OC6_SetConfig+0xa4>
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	4a1c      	ldr	r2, [pc, #112]	; (8011d54 <TIM_OC6_SetConfig+0xf8>)
 8011ce4:	4293      	cmp	r3, r2
 8011ce6:	d00b      	beq.n	8011d00 <TIM_OC6_SetConfig+0xa4>
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	4a1b      	ldr	r2, [pc, #108]	; (8011d58 <TIM_OC6_SetConfig+0xfc>)
 8011cec:	4293      	cmp	r3, r2
 8011cee:	d007      	beq.n	8011d00 <TIM_OC6_SetConfig+0xa4>
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	4a1a      	ldr	r2, [pc, #104]	; (8011d5c <TIM_OC6_SetConfig+0x100>)
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	d003      	beq.n	8011d00 <TIM_OC6_SetConfig+0xa4>
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	4a19      	ldr	r2, [pc, #100]	; (8011d60 <TIM_OC6_SetConfig+0x104>)
 8011cfc:	4293      	cmp	r3, r2
 8011cfe:	d109      	bne.n	8011d14 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011d06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	695b      	ldr	r3, [r3, #20]
 8011d0c:	029b      	lsls	r3, r3, #10
 8011d0e:	697a      	ldr	r2, [r7, #20]
 8011d10:	4313      	orrs	r3, r2
 8011d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	697a      	ldr	r2, [r7, #20]
 8011d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	68fa      	ldr	r2, [r7, #12]
 8011d1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011d20:	683b      	ldr	r3, [r7, #0]
 8011d22:	685a      	ldr	r2, [r3, #4]
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	693a      	ldr	r2, [r7, #16]
 8011d2c:	621a      	str	r2, [r3, #32]
}
 8011d2e:	bf00      	nop
 8011d30:	371c      	adds	r7, #28
 8011d32:	46bd      	mov	sp, r7
 8011d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d38:	4770      	bx	lr
 8011d3a:	bf00      	nop
 8011d3c:	40012c00 	.word	0x40012c00
 8011d40:	50012c00 	.word	0x50012c00
 8011d44:	40013400 	.word	0x40013400
 8011d48:	50013400 	.word	0x50013400
 8011d4c:	40014000 	.word	0x40014000
 8011d50:	50014000 	.word	0x50014000
 8011d54:	40014400 	.word	0x40014400
 8011d58:	50014400 	.word	0x50014400
 8011d5c:	40014800 	.word	0x40014800
 8011d60:	50014800 	.word	0x50014800

08011d64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011d64:	b480      	push	{r7}
 8011d66:	b087      	sub	sp, #28
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	60f8      	str	r0, [r7, #12]
 8011d6c:	60b9      	str	r1, [r7, #8]
 8011d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	6a1b      	ldr	r3, [r3, #32]
 8011d74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	6a1b      	ldr	r3, [r3, #32]
 8011d7a:	f023 0201 	bic.w	r2, r3, #1
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	699b      	ldr	r3, [r3, #24]
 8011d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	011b      	lsls	r3, r3, #4
 8011d94:	693a      	ldr	r2, [r7, #16]
 8011d96:	4313      	orrs	r3, r2
 8011d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	f023 030a 	bic.w	r3, r3, #10
 8011da0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011da2:	697a      	ldr	r2, [r7, #20]
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	4313      	orrs	r3, r2
 8011da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	693a      	ldr	r2, [r7, #16]
 8011dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	697a      	ldr	r2, [r7, #20]
 8011db4:	621a      	str	r2, [r3, #32]
}
 8011db6:	bf00      	nop
 8011db8:	371c      	adds	r7, #28
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc0:	4770      	bx	lr

08011dc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011dc2:	b480      	push	{r7}
 8011dc4:	b087      	sub	sp, #28
 8011dc6:	af00      	add	r7, sp, #0
 8011dc8:	60f8      	str	r0, [r7, #12]
 8011dca:	60b9      	str	r1, [r7, #8]
 8011dcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	6a1b      	ldr	r3, [r3, #32]
 8011dd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	6a1b      	ldr	r3, [r3, #32]
 8011dd8:	f023 0210 	bic.w	r2, r3, #16
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	699b      	ldr	r3, [r3, #24]
 8011de4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011dec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	031b      	lsls	r3, r3, #12
 8011df2:	693a      	ldr	r2, [r7, #16]
 8011df4:	4313      	orrs	r3, r2
 8011df6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011dfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	011b      	lsls	r3, r3, #4
 8011e04:	697a      	ldr	r2, [r7, #20]
 8011e06:	4313      	orrs	r3, r2
 8011e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	693a      	ldr	r2, [r7, #16]
 8011e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	697a      	ldr	r2, [r7, #20]
 8011e14:	621a      	str	r2, [r3, #32]
}
 8011e16:	bf00      	nop
 8011e18:	371c      	adds	r7, #28
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e20:	4770      	bx	lr

08011e22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011e22:	b480      	push	{r7}
 8011e24:	b085      	sub	sp, #20
 8011e26:	af00      	add	r7, sp, #0
 8011e28:	6078      	str	r0, [r7, #4]
 8011e2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	689b      	ldr	r3, [r3, #8]
 8011e30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8011e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011e3e:	683a      	ldr	r2, [r7, #0]
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	4313      	orrs	r3, r2
 8011e44:	f043 0307 	orr.w	r3, r3, #7
 8011e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	68fa      	ldr	r2, [r7, #12]
 8011e4e:	609a      	str	r2, [r3, #8]
}
 8011e50:	bf00      	nop
 8011e52:	3714      	adds	r7, #20
 8011e54:	46bd      	mov	sp, r7
 8011e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5a:	4770      	bx	lr

08011e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011e5c:	b480      	push	{r7}
 8011e5e:	b087      	sub	sp, #28
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	60f8      	str	r0, [r7, #12]
 8011e64:	60b9      	str	r1, [r7, #8]
 8011e66:	607a      	str	r2, [r7, #4]
 8011e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	689b      	ldr	r3, [r3, #8]
 8011e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	021a      	lsls	r2, r3, #8
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	431a      	orrs	r2, r3
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	4313      	orrs	r3, r2
 8011e84:	697a      	ldr	r2, [r7, #20]
 8011e86:	4313      	orrs	r3, r2
 8011e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	697a      	ldr	r2, [r7, #20]
 8011e8e:	609a      	str	r2, [r3, #8]
}
 8011e90:	bf00      	nop
 8011e92:	371c      	adds	r7, #28
 8011e94:	46bd      	mov	sp, r7
 8011e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9a:	4770      	bx	lr

08011e9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	b087      	sub	sp, #28
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	60f8      	str	r0, [r7, #12]
 8011ea4:	60b9      	str	r1, [r7, #8]
 8011ea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	f003 031f 	and.w	r3, r3, #31
 8011eae:	2201      	movs	r2, #1
 8011eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8011eb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	6a1a      	ldr	r2, [r3, #32]
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	43db      	mvns	r3, r3
 8011ebe:	401a      	ands	r2, r3
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	6a1a      	ldr	r2, [r3, #32]
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	f003 031f 	and.w	r3, r3, #31
 8011ece:	6879      	ldr	r1, [r7, #4]
 8011ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8011ed4:	431a      	orrs	r2, r3
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	621a      	str	r2, [r3, #32]
}
 8011eda:	bf00      	nop
 8011edc:	371c      	adds	r7, #28
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee4:	4770      	bx	lr
	...

08011ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011ee8:	b480      	push	{r7}
 8011eea:	b085      	sub	sp, #20
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011ef8:	2b01      	cmp	r3, #1
 8011efa:	d101      	bne.n	8011f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011efc:	2302      	movs	r3, #2
 8011efe:	e097      	b.n	8012030 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2201      	movs	r2, #1
 8011f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2202      	movs	r2, #2
 8011f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	685b      	ldr	r3, [r3, #4]
 8011f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	689b      	ldr	r3, [r3, #8]
 8011f1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	4a45      	ldr	r2, [pc, #276]	; (801203c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8011f26:	4293      	cmp	r3, r2
 8011f28:	d00e      	beq.n	8011f48 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	4a44      	ldr	r2, [pc, #272]	; (8012040 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8011f30:	4293      	cmp	r3, r2
 8011f32:	d009      	beq.n	8011f48 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	4a42      	ldr	r2, [pc, #264]	; (8012044 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8011f3a:	4293      	cmp	r3, r2
 8011f3c:	d004      	beq.n	8011f48 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	4a41      	ldr	r2, [pc, #260]	; (8012048 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8011f44:	4293      	cmp	r3, r2
 8011f46:	d108      	bne.n	8011f5a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011f4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	685b      	ldr	r3, [r3, #4]
 8011f54:	68fa      	ldr	r2, [r7, #12]
 8011f56:	4313      	orrs	r3, r2
 8011f58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8011f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	68fa      	ldr	r2, [r7, #12]
 8011f6c:	4313      	orrs	r3, r2
 8011f6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	68fa      	ldr	r2, [r7, #12]
 8011f76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	4a2f      	ldr	r2, [pc, #188]	; (801203c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8011f7e:	4293      	cmp	r3, r2
 8011f80:	d040      	beq.n	8012004 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	4a2e      	ldr	r2, [pc, #184]	; (8012040 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8011f88:	4293      	cmp	r3, r2
 8011f8a:	d03b      	beq.n	8012004 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011f94:	d036      	beq.n	8012004 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011f9e:	d031      	beq.n	8012004 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	4a29      	ldr	r2, [pc, #164]	; (801204c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	d02c      	beq.n	8012004 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	4a28      	ldr	r2, [pc, #160]	; (8012050 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d027      	beq.n	8012004 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	4a26      	ldr	r2, [pc, #152]	; (8012054 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	d022      	beq.n	8012004 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	4a25      	ldr	r2, [pc, #148]	; (8012058 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8011fc4:	4293      	cmp	r3, r2
 8011fc6:	d01d      	beq.n	8012004 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	4a23      	ldr	r2, [pc, #140]	; (801205c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8011fce:	4293      	cmp	r3, r2
 8011fd0:	d018      	beq.n	8012004 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	4a22      	ldr	r2, [pc, #136]	; (8012060 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8011fd8:	4293      	cmp	r3, r2
 8011fda:	d013      	beq.n	8012004 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	4a18      	ldr	r2, [pc, #96]	; (8012044 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8011fe2:	4293      	cmp	r3, r2
 8011fe4:	d00e      	beq.n	8012004 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	4a17      	ldr	r2, [pc, #92]	; (8012048 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8011fec:	4293      	cmp	r3, r2
 8011fee:	d009      	beq.n	8012004 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	4a1b      	ldr	r2, [pc, #108]	; (8012064 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8011ff6:	4293      	cmp	r3, r2
 8011ff8:	d004      	beq.n	8012004 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	4a1a      	ldr	r2, [pc, #104]	; (8012068 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8012000:	4293      	cmp	r3, r2
 8012002:	d10c      	bne.n	801201e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801200a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	689b      	ldr	r3, [r3, #8]
 8012010:	68ba      	ldr	r2, [r7, #8]
 8012012:	4313      	orrs	r3, r2
 8012014:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	68ba      	ldr	r2, [r7, #8]
 801201c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2201      	movs	r2, #1
 8012022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2200      	movs	r2, #0
 801202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801202e:	2300      	movs	r3, #0
}
 8012030:	4618      	mov	r0, r3
 8012032:	3714      	adds	r7, #20
 8012034:	46bd      	mov	sp, r7
 8012036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203a:	4770      	bx	lr
 801203c:	40012c00 	.word	0x40012c00
 8012040:	50012c00 	.word	0x50012c00
 8012044:	40013400 	.word	0x40013400
 8012048:	50013400 	.word	0x50013400
 801204c:	40000400 	.word	0x40000400
 8012050:	50000400 	.word	0x50000400
 8012054:	40000800 	.word	0x40000800
 8012058:	50000800 	.word	0x50000800
 801205c:	40000c00 	.word	0x40000c00
 8012060:	50000c00 	.word	0x50000c00
 8012064:	40014000 	.word	0x40014000
 8012068:	50014000 	.word	0x50014000

0801206c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801206c:	b480      	push	{r7}
 801206e:	b085      	sub	sp, #20
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
 8012074:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012076:	2300      	movs	r3, #0
 8012078:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012080:	2b01      	cmp	r3, #1
 8012082:	d101      	bne.n	8012088 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012084:	2302      	movs	r3, #2
 8012086:	e0a5      	b.n	80121d4 <HAL_TIMEx_ConfigBreakDeadTime+0x168>
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2201      	movs	r2, #1
 801208c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	68db      	ldr	r3, [r3, #12]
 801209a:	4313      	orrs	r3, r2
 801209c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	689b      	ldr	r3, [r3, #8]
 80120a8:	4313      	orrs	r3, r2
 80120aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	4313      	orrs	r3, r2
 80120b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	4313      	orrs	r3, r2
 80120c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	691b      	ldr	r3, [r3, #16]
 80120d2:	4313      	orrs	r3, r2
 80120d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80120dc:	683b      	ldr	r3, [r7, #0]
 80120de:	695b      	ldr	r3, [r3, #20]
 80120e0:	4313      	orrs	r3, r2
 80120e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120ee:	4313      	orrs	r3, r2
 80120f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	699b      	ldr	r3, [r3, #24]
 80120fc:	041b      	lsls	r3, r3, #16
 80120fe:	4313      	orrs	r3, r2
 8012100:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	4a36      	ldr	r2, [pc, #216]	; (80121e0 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 8012108:	4293      	cmp	r3, r2
 801210a:	d00e      	beq.n	801212a <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	4a34      	ldr	r2, [pc, #208]	; (80121e4 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8012112:	4293      	cmp	r3, r2
 8012114:	d009      	beq.n	801212a <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	4a33      	ldr	r2, [pc, #204]	; (80121e8 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 801211c:	4293      	cmp	r3, r2
 801211e:	d004      	beq.n	801212a <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	4a31      	ldr	r2, [pc, #196]	; (80121ec <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8012126:	4293      	cmp	r3, r2
 8012128:	d106      	bne.n	8012138 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	69db      	ldr	r3, [r3, #28]
 8012134:	4313      	orrs	r3, r2
 8012136:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	4a28      	ldr	r2, [pc, #160]	; (80121e0 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 801213e:	4293      	cmp	r3, r2
 8012140:	d00e      	beq.n	8012160 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	4a27      	ldr	r2, [pc, #156]	; (80121e4 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8012148:	4293      	cmp	r3, r2
 801214a:	d009      	beq.n	8012160 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	4a25      	ldr	r2, [pc, #148]	; (80121e8 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 8012152:	4293      	cmp	r3, r2
 8012154:	d004      	beq.n	8012160 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	4a24      	ldr	r2, [pc, #144]	; (80121ec <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 801215c:	4293      	cmp	r3, r2
 801215e:	d130      	bne.n	80121c2 <HAL_TIMEx_ConfigBreakDeadTime+0x156>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801216a:	051b      	lsls	r3, r3, #20
 801216c:	4313      	orrs	r3, r2
 801216e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	6a1b      	ldr	r3, [r3, #32]
 801217a:	4313      	orrs	r3, r2
 801217c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012188:	4313      	orrs	r3, r2
 801218a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	4a13      	ldr	r2, [pc, #76]	; (80121e0 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 8012192:	4293      	cmp	r3, r2
 8012194:	d00e      	beq.n	80121b4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	4a12      	ldr	r2, [pc, #72]	; (80121e4 <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 801219c:	4293      	cmp	r3, r2
 801219e:	d009      	beq.n	80121b4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	4a10      	ldr	r2, [pc, #64]	; (80121e8 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 80121a6:	4293      	cmp	r3, r2
 80121a8:	d004      	beq.n	80121b4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	4a0f      	ldr	r2, [pc, #60]	; (80121ec <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 80121b0:	4293      	cmp	r3, r2
 80121b2:	d106      	bne.n	80121c2 <HAL_TIMEx_ConfigBreakDeadTime+0x156>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121be:	4313      	orrs	r3, r2
 80121c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	68fa      	ldr	r2, [r7, #12]
 80121c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2200      	movs	r2, #0
 80121ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80121d2:	2300      	movs	r3, #0
}
 80121d4:	4618      	mov	r0, r3
 80121d6:	3714      	adds	r7, #20
 80121d8:	46bd      	mov	sp, r7
 80121da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121de:	4770      	bx	lr
 80121e0:	40012c00 	.word	0x40012c00
 80121e4:	50012c00 	.word	0x50012c00
 80121e8:	40013400 	.word	0x40013400
 80121ec:	50013400 	.word	0x50013400

080121f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80121f0:	b480      	push	{r7}
 80121f2:	b083      	sub	sp, #12
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80121f8:	bf00      	nop
 80121fa:	370c      	adds	r7, #12
 80121fc:	46bd      	mov	sp, r7
 80121fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012202:	4770      	bx	lr

08012204 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012204:	b480      	push	{r7}
 8012206:	b083      	sub	sp, #12
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801220c:	bf00      	nop
 801220e:	370c      	adds	r7, #12
 8012210:	46bd      	mov	sp, r7
 8012212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012216:	4770      	bx	lr

08012218 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012218:	b480      	push	{r7}
 801221a:	b083      	sub	sp, #12
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012220:	bf00      	nop
 8012222:	370c      	adds	r7, #12
 8012224:	46bd      	mov	sp, r7
 8012226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222a:	4770      	bx	lr

0801222c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 801222c:	b480      	push	{r7}
 801222e:	b083      	sub	sp, #12
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8012234:	bf00      	nop
 8012236:	370c      	adds	r7, #12
 8012238:	46bd      	mov	sp, r7
 801223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223e:	4770      	bx	lr

08012240 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8012240:	b480      	push	{r7}
 8012242:	b083      	sub	sp, #12
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8012248:	bf00      	nop
 801224a:	370c      	adds	r7, #12
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr

08012254 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8012254:	b480      	push	{r7}
 8012256:	b083      	sub	sp, #12
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801225c:	bf00      	nop
 801225e:	370c      	adds	r7, #12
 8012260:	46bd      	mov	sp, r7
 8012262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012266:	4770      	bx	lr

08012268 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8012268:	b480      	push	{r7}
 801226a:	b083      	sub	sp, #12
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8012270:	bf00      	nop
 8012272:	370c      	adds	r7, #12
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr

0801227c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b082      	sub	sp, #8
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d101      	bne.n	801228e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801228a:	2301      	movs	r3, #1
 801228c:	e042      	b.n	8012314 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012294:	2b00      	cmp	r3, #0
 8012296:	d106      	bne.n	80122a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	2200      	movs	r2, #0
 801229c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f7ef fdbb 	bl	8001e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	2224      	movs	r2, #36	; 0x24
 80122aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	681a      	ldr	r2, [r3, #0]
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	f022 0201 	bic.w	r2, r2, #1
 80122bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f000 f8ba 	bl	8012438 <UART_SetConfig>
 80122c4:	4603      	mov	r3, r0
 80122c6:	2b01      	cmp	r3, #1
 80122c8:	d101      	bne.n	80122ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80122ca:	2301      	movs	r3, #1
 80122cc:	e022      	b.n	8012314 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d002      	beq.n	80122dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f000 fa5c 	bl	8012794 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	685a      	ldr	r2, [r3, #4]
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80122ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	689a      	ldr	r2, [r3, #8]
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80122fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	681a      	ldr	r2, [r3, #0]
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	f042 0201 	orr.w	r2, r2, #1
 801230a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f000 fae3 	bl	80128d8 <UART_CheckIdleState>
 8012312:	4603      	mov	r3, r0
}
 8012314:	4618      	mov	r0, r3
 8012316:	3708      	adds	r7, #8
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}

0801231c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b08a      	sub	sp, #40	; 0x28
 8012320:	af02      	add	r7, sp, #8
 8012322:	60f8      	str	r0, [r7, #12]
 8012324:	60b9      	str	r1, [r7, #8]
 8012326:	603b      	str	r3, [r7, #0]
 8012328:	4613      	mov	r3, r2
 801232a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012332:	2b20      	cmp	r3, #32
 8012334:	d17b      	bne.n	801242e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d002      	beq.n	8012342 <HAL_UART_Transmit+0x26>
 801233c:	88fb      	ldrh	r3, [r7, #6]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d101      	bne.n	8012346 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012342:	2301      	movs	r3, #1
 8012344:	e074      	b.n	8012430 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	2200      	movs	r2, #0
 801234a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	2221      	movs	r2, #33	; 0x21
 8012352:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012356:	f7f5 fb51 	bl	80079fc <HAL_GetTick>
 801235a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	88fa      	ldrh	r2, [r7, #6]
 8012360:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	88fa      	ldrh	r2, [r7, #6]
 8012368:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	689b      	ldr	r3, [r3, #8]
 8012370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012374:	d108      	bne.n	8012388 <HAL_UART_Transmit+0x6c>
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	691b      	ldr	r3, [r3, #16]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d104      	bne.n	8012388 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801237e:	2300      	movs	r3, #0
 8012380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012382:	68bb      	ldr	r3, [r7, #8]
 8012384:	61bb      	str	r3, [r7, #24]
 8012386:	e003      	b.n	8012390 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801238c:	2300      	movs	r3, #0
 801238e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012390:	e030      	b.n	80123f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012392:	683b      	ldr	r3, [r7, #0]
 8012394:	9300      	str	r3, [sp, #0]
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	2200      	movs	r2, #0
 801239a:	2180      	movs	r1, #128	; 0x80
 801239c:	68f8      	ldr	r0, [r7, #12]
 801239e:	f000 fb45 	bl	8012a2c <UART_WaitOnFlagUntilTimeout>
 80123a2:	4603      	mov	r3, r0
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d005      	beq.n	80123b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	2220      	movs	r2, #32
 80123ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80123b0:	2303      	movs	r3, #3
 80123b2:	e03d      	b.n	8012430 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80123b4:	69fb      	ldr	r3, [r7, #28]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d10b      	bne.n	80123d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80123ba:	69bb      	ldr	r3, [r7, #24]
 80123bc:	881b      	ldrh	r3, [r3, #0]
 80123be:	461a      	mov	r2, r3
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80123c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80123ca:	69bb      	ldr	r3, [r7, #24]
 80123cc:	3302      	adds	r3, #2
 80123ce:	61bb      	str	r3, [r7, #24]
 80123d0:	e007      	b.n	80123e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80123d2:	69fb      	ldr	r3, [r7, #28]
 80123d4:	781a      	ldrb	r2, [r3, #0]
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80123dc:	69fb      	ldr	r3, [r7, #28]
 80123de:	3301      	adds	r3, #1
 80123e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	3b01      	subs	r3, #1
 80123ec:	b29a      	uxth	r2, r3
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d1c8      	bne.n	8012392 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	9300      	str	r3, [sp, #0]
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	2200      	movs	r2, #0
 8012408:	2140      	movs	r1, #64	; 0x40
 801240a:	68f8      	ldr	r0, [r7, #12]
 801240c:	f000 fb0e 	bl	8012a2c <UART_WaitOnFlagUntilTimeout>
 8012410:	4603      	mov	r3, r0
 8012412:	2b00      	cmp	r3, #0
 8012414:	d005      	beq.n	8012422 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	2220      	movs	r2, #32
 801241a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801241e:	2303      	movs	r3, #3
 8012420:	e006      	b.n	8012430 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	2220      	movs	r2, #32
 8012426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801242a:	2300      	movs	r3, #0
 801242c:	e000      	b.n	8012430 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801242e:	2302      	movs	r3, #2
  }
}
 8012430:	4618      	mov	r0, r3
 8012432:	3720      	adds	r7, #32
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}

08012438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801243c:	b094      	sub	sp, #80	; 0x50
 801243e:	af00      	add	r7, sp, #0
 8012440:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012442:	2300      	movs	r3, #0
 8012444:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8012448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801244a:	681a      	ldr	r2, [r3, #0]
 801244c:	4b83      	ldr	r3, [pc, #524]	; (801265c <UART_SetConfig+0x224>)
 801244e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012452:	689a      	ldr	r2, [r3, #8]
 8012454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012456:	691b      	ldr	r3, [r3, #16]
 8012458:	431a      	orrs	r2, r3
 801245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801245c:	695b      	ldr	r3, [r3, #20]
 801245e:	431a      	orrs	r2, r3
 8012460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012462:	69db      	ldr	r3, [r3, #28]
 8012464:	4313      	orrs	r3, r2
 8012466:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	497c      	ldr	r1, [pc, #496]	; (8012660 <UART_SetConfig+0x228>)
 8012470:	4019      	ands	r1, r3
 8012472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012474:	681a      	ldr	r2, [r3, #0]
 8012476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012478:	430b      	orrs	r3, r1
 801247a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	685b      	ldr	r3, [r3, #4]
 8012482:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8012486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012488:	68d9      	ldr	r1, [r3, #12]
 801248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801248c:	681a      	ldr	r2, [r3, #0]
 801248e:	ea40 0301 	orr.w	r3, r0, r1
 8012492:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012496:	699b      	ldr	r3, [r3, #24]
 8012498:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801249c:	681a      	ldr	r2, [r3, #0]
 801249e:	4b6f      	ldr	r3, [pc, #444]	; (801265c <UART_SetConfig+0x224>)
 80124a0:	429a      	cmp	r2, r3
 80124a2:	d009      	beq.n	80124b8 <UART_SetConfig+0x80>
 80124a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124a6:	681a      	ldr	r2, [r3, #0]
 80124a8:	4b6e      	ldr	r3, [pc, #440]	; (8012664 <UART_SetConfig+0x22c>)
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d004      	beq.n	80124b8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80124ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124b0:	6a1a      	ldr	r2, [r3, #32]
 80124b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124b4:	4313      	orrs	r3, r2
 80124b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80124b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	689b      	ldr	r3, [r3, #8]
 80124be:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80124c2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80124c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c8:	681a      	ldr	r2, [r3, #0]
 80124ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124cc:	430b      	orrs	r3, r1
 80124ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80124d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124d6:	f023 000f 	bic.w	r0, r3, #15
 80124da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80124de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e0:	681a      	ldr	r2, [r3, #0]
 80124e2:	ea40 0301 	orr.w	r3, r0, r1
 80124e6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80124e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ea:	681a      	ldr	r2, [r3, #0]
 80124ec:	4b5e      	ldr	r3, [pc, #376]	; (8012668 <UART_SetConfig+0x230>)
 80124ee:	429a      	cmp	r2, r3
 80124f0:	d102      	bne.n	80124f8 <UART_SetConfig+0xc0>
 80124f2:	2301      	movs	r3, #1
 80124f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80124f6:	e032      	b.n	801255e <UART_SetConfig+0x126>
 80124f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124fa:	681a      	ldr	r2, [r3, #0]
 80124fc:	4b5b      	ldr	r3, [pc, #364]	; (801266c <UART_SetConfig+0x234>)
 80124fe:	429a      	cmp	r2, r3
 8012500:	d102      	bne.n	8012508 <UART_SetConfig+0xd0>
 8012502:	2302      	movs	r3, #2
 8012504:	64bb      	str	r3, [r7, #72]	; 0x48
 8012506:	e02a      	b.n	801255e <UART_SetConfig+0x126>
 8012508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801250a:	681a      	ldr	r2, [r3, #0]
 801250c:	4b58      	ldr	r3, [pc, #352]	; (8012670 <UART_SetConfig+0x238>)
 801250e:	429a      	cmp	r2, r3
 8012510:	d102      	bne.n	8012518 <UART_SetConfig+0xe0>
 8012512:	2304      	movs	r3, #4
 8012514:	64bb      	str	r3, [r7, #72]	; 0x48
 8012516:	e022      	b.n	801255e <UART_SetConfig+0x126>
 8012518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801251a:	681a      	ldr	r2, [r3, #0]
 801251c:	4b55      	ldr	r3, [pc, #340]	; (8012674 <UART_SetConfig+0x23c>)
 801251e:	429a      	cmp	r2, r3
 8012520:	d102      	bne.n	8012528 <UART_SetConfig+0xf0>
 8012522:	2308      	movs	r3, #8
 8012524:	64bb      	str	r3, [r7, #72]	; 0x48
 8012526:	e01a      	b.n	801255e <UART_SetConfig+0x126>
 8012528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801252a:	681a      	ldr	r2, [r3, #0]
 801252c:	4b52      	ldr	r3, [pc, #328]	; (8012678 <UART_SetConfig+0x240>)
 801252e:	429a      	cmp	r2, r3
 8012530:	d102      	bne.n	8012538 <UART_SetConfig+0x100>
 8012532:	2310      	movs	r3, #16
 8012534:	64bb      	str	r3, [r7, #72]	; 0x48
 8012536:	e012      	b.n	801255e <UART_SetConfig+0x126>
 8012538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801253a:	681a      	ldr	r2, [r3, #0]
 801253c:	4b4f      	ldr	r3, [pc, #316]	; (801267c <UART_SetConfig+0x244>)
 801253e:	429a      	cmp	r2, r3
 8012540:	d103      	bne.n	801254a <UART_SetConfig+0x112>
 8012542:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8012546:	64bb      	str	r3, [r7, #72]	; 0x48
 8012548:	e009      	b.n	801255e <UART_SetConfig+0x126>
 801254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801254c:	681a      	ldr	r2, [r3, #0]
 801254e:	4b43      	ldr	r3, [pc, #268]	; (801265c <UART_SetConfig+0x224>)
 8012550:	429a      	cmp	r2, r3
 8012552:	d102      	bne.n	801255a <UART_SetConfig+0x122>
 8012554:	2320      	movs	r3, #32
 8012556:	64bb      	str	r3, [r7, #72]	; 0x48
 8012558:	e001      	b.n	801255e <UART_SetConfig+0x126>
 801255a:	2300      	movs	r3, #0
 801255c:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801255e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012560:	681a      	ldr	r2, [r3, #0]
 8012562:	4b3e      	ldr	r3, [pc, #248]	; (801265c <UART_SetConfig+0x224>)
 8012564:	429a      	cmp	r2, r3
 8012566:	d005      	beq.n	8012574 <UART_SetConfig+0x13c>
 8012568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801256a:	681a      	ldr	r2, [r3, #0]
 801256c:	4b3d      	ldr	r3, [pc, #244]	; (8012664 <UART_SetConfig+0x22c>)
 801256e:	429a      	cmp	r2, r3
 8012570:	f040 8088 	bne.w	8012684 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8012574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012576:	2200      	movs	r2, #0
 8012578:	623b      	str	r3, [r7, #32]
 801257a:	627a      	str	r2, [r7, #36]	; 0x24
 801257c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8012580:	f7fc fbfe 	bl	800ed80 <HAL_RCCEx_GetPeriphCLKFreq>
 8012584:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8012586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012588:	2b00      	cmp	r3, #0
 801258a:	f000 80eb 	beq.w	8012764 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012592:	4a3b      	ldr	r2, [pc, #236]	; (8012680 <UART_SetConfig+0x248>)
 8012594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012598:	461a      	mov	r2, r3
 801259a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801259c:	fbb3 f3f2 	udiv	r3, r3, r2
 80125a0:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80125a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125a4:	685a      	ldr	r2, [r3, #4]
 80125a6:	4613      	mov	r3, r2
 80125a8:	005b      	lsls	r3, r3, #1
 80125aa:	4413      	add	r3, r2
 80125ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125ae:	429a      	cmp	r2, r3
 80125b0:	d305      	bcc.n	80125be <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80125b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b4:	685b      	ldr	r3, [r3, #4]
 80125b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80125b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d903      	bls.n	80125c6 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80125be:	2301      	movs	r3, #1
 80125c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80125c4:	e048      	b.n	8012658 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80125c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125c8:	2200      	movs	r2, #0
 80125ca:	61bb      	str	r3, [r7, #24]
 80125cc:	61fa      	str	r2, [r7, #28]
 80125ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125d2:	4a2b      	ldr	r2, [pc, #172]	; (8012680 <UART_SetConfig+0x248>)
 80125d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80125d8:	b29b      	uxth	r3, r3
 80125da:	2200      	movs	r2, #0
 80125dc:	613b      	str	r3, [r7, #16]
 80125de:	617a      	str	r2, [r7, #20]
 80125e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80125e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80125e8:	f7ed ff86 	bl	80004f8 <__aeabi_uldivmod>
 80125ec:	4602      	mov	r2, r0
 80125ee:	460b      	mov	r3, r1
 80125f0:	4610      	mov	r0, r2
 80125f2:	4619      	mov	r1, r3
 80125f4:	f04f 0200 	mov.w	r2, #0
 80125f8:	f04f 0300 	mov.w	r3, #0
 80125fc:	020b      	lsls	r3, r1, #8
 80125fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012602:	0202      	lsls	r2, r0, #8
 8012604:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012606:	6849      	ldr	r1, [r1, #4]
 8012608:	0849      	lsrs	r1, r1, #1
 801260a:	2000      	movs	r0, #0
 801260c:	460c      	mov	r4, r1
 801260e:	4605      	mov	r5, r0
 8012610:	eb12 0804 	adds.w	r8, r2, r4
 8012614:	eb43 0905 	adc.w	r9, r3, r5
 8012618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801261a:	685b      	ldr	r3, [r3, #4]
 801261c:	2200      	movs	r2, #0
 801261e:	60bb      	str	r3, [r7, #8]
 8012620:	60fa      	str	r2, [r7, #12]
 8012622:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012626:	4640      	mov	r0, r8
 8012628:	4649      	mov	r1, r9
 801262a:	f7ed ff65 	bl	80004f8 <__aeabi_uldivmod>
 801262e:	4602      	mov	r2, r0
 8012630:	460b      	mov	r3, r1
 8012632:	4613      	mov	r3, r2
 8012634:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801263c:	d308      	bcc.n	8012650 <UART_SetConfig+0x218>
 801263e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012640:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012644:	d204      	bcs.n	8012650 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8012646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801264c:	60da      	str	r2, [r3, #12]
 801264e:	e003      	b.n	8012658 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8012650:	2301      	movs	r3, #1
 8012652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8012656:	e085      	b.n	8012764 <UART_SetConfig+0x32c>
 8012658:	e084      	b.n	8012764 <UART_SetConfig+0x32c>
 801265a:	bf00      	nop
 801265c:	46002400 	.word	0x46002400
 8012660:	cfff69f3 	.word	0xcfff69f3
 8012664:	56002400 	.word	0x56002400
 8012668:	40013800 	.word	0x40013800
 801266c:	40004400 	.word	0x40004400
 8012670:	40004800 	.word	0x40004800
 8012674:	40004c00 	.word	0x40004c00
 8012678:	40005000 	.word	0x40005000
 801267c:	40006400 	.word	0x40006400
 8012680:	0802ba68 	.word	0x0802ba68
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012686:	69db      	ldr	r3, [r3, #28]
 8012688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801268c:	d13c      	bne.n	8012708 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801268e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012690:	2200      	movs	r2, #0
 8012692:	603b      	str	r3, [r7, #0]
 8012694:	607a      	str	r2, [r7, #4]
 8012696:	e9d7 0100 	ldrd	r0, r1, [r7]
 801269a:	f7fc fb71 	bl	800ed80 <HAL_RCCEx_GetPeriphCLKFreq>
 801269e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80126a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d05e      	beq.n	8012764 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80126a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126aa:	4a39      	ldr	r2, [pc, #228]	; (8012790 <UART_SetConfig+0x358>)
 80126ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80126b0:	461a      	mov	r2, r3
 80126b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80126b8:	005a      	lsls	r2, r3, #1
 80126ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	085b      	lsrs	r3, r3, #1
 80126c0:	441a      	add	r2, r3
 80126c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80126ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80126cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126ce:	2b0f      	cmp	r3, #15
 80126d0:	d916      	bls.n	8012700 <UART_SetConfig+0x2c8>
 80126d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80126d8:	d212      	bcs.n	8012700 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80126da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126dc:	b29b      	uxth	r3, r3
 80126de:	f023 030f 	bic.w	r3, r3, #15
 80126e2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80126e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126e6:	085b      	lsrs	r3, r3, #1
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	f003 0307 	and.w	r3, r3, #7
 80126ee:	b29a      	uxth	r2, r3
 80126f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80126f2:	4313      	orrs	r3, r2
 80126f4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80126f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80126fc:	60da      	str	r2, [r3, #12]
 80126fe:	e031      	b.n	8012764 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8012700:	2301      	movs	r3, #1
 8012702:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012706:	e02d      	b.n	8012764 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8012708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801270a:	2200      	movs	r2, #0
 801270c:	469a      	mov	sl, r3
 801270e:	4693      	mov	fp, r2
 8012710:	4650      	mov	r0, sl
 8012712:	4659      	mov	r1, fp
 8012714:	f7fc fb34 	bl	800ed80 <HAL_RCCEx_GetPeriphCLKFreq>
 8012718:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 801271a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801271c:	2b00      	cmp	r3, #0
 801271e:	d021      	beq.n	8012764 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012724:	4a1a      	ldr	r2, [pc, #104]	; (8012790 <UART_SetConfig+0x358>)
 8012726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801272a:	461a      	mov	r2, r3
 801272c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801272e:	fbb3 f2f2 	udiv	r2, r3, r2
 8012732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012734:	685b      	ldr	r3, [r3, #4]
 8012736:	085b      	lsrs	r3, r3, #1
 8012738:	441a      	add	r2, r3
 801273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801273c:	685b      	ldr	r3, [r3, #4]
 801273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012742:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012746:	2b0f      	cmp	r3, #15
 8012748:	d909      	bls.n	801275e <UART_SetConfig+0x326>
 801274a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801274c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012750:	d205      	bcs.n	801275e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012754:	b29a      	uxth	r2, r3
 8012756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	60da      	str	r2, [r3, #12]
 801275c:	e002      	b.n	8012764 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 801275e:	2301      	movs	r3, #1
 8012760:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012766:	2201      	movs	r2, #1
 8012768:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801276c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276e:	2201      	movs	r2, #1
 8012770:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012776:	2200      	movs	r2, #0
 8012778:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277c:	2200      	movs	r2, #0
 801277e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8012780:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8012784:	4618      	mov	r0, r3
 8012786:	3750      	adds	r7, #80	; 0x50
 8012788:	46bd      	mov	sp, r7
 801278a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801278e:	bf00      	nop
 8012790:	0802ba68 	.word	0x0802ba68

08012794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012794:	b480      	push	{r7}
 8012796:	b083      	sub	sp, #12
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127a0:	f003 0301 	and.w	r3, r3, #1
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d00a      	beq.n	80127be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	685b      	ldr	r3, [r3, #4]
 80127ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	430a      	orrs	r2, r1
 80127bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127c2:	f003 0302 	and.w	r3, r3, #2
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d00a      	beq.n	80127e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	685b      	ldr	r3, [r3, #4]
 80127d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	430a      	orrs	r2, r1
 80127de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127e4:	f003 0304 	and.w	r3, r3, #4
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d00a      	beq.n	8012802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	430a      	orrs	r2, r1
 8012800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012806:	f003 0308 	and.w	r3, r3, #8
 801280a:	2b00      	cmp	r3, #0
 801280c:	d00a      	beq.n	8012824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	430a      	orrs	r2, r1
 8012822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012828:	f003 0310 	and.w	r3, r3, #16
 801282c:	2b00      	cmp	r3, #0
 801282e:	d00a      	beq.n	8012846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	689b      	ldr	r3, [r3, #8]
 8012836:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	430a      	orrs	r2, r1
 8012844:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801284a:	f003 0320 	and.w	r3, r3, #32
 801284e:	2b00      	cmp	r3, #0
 8012850:	d00a      	beq.n	8012868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	689b      	ldr	r3, [r3, #8]
 8012858:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	430a      	orrs	r2, r1
 8012866:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012870:	2b00      	cmp	r3, #0
 8012872:	d01a      	beq.n	80128aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	430a      	orrs	r2, r1
 8012888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801288e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012892:	d10a      	bne.n	80128aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	685b      	ldr	r3, [r3, #4]
 801289a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	430a      	orrs	r2, r1
 80128a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d00a      	beq.n	80128cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	685b      	ldr	r3, [r3, #4]
 80128bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	430a      	orrs	r2, r1
 80128ca:	605a      	str	r2, [r3, #4]
  }
}
 80128cc:	bf00      	nop
 80128ce:	370c      	adds	r7, #12
 80128d0:	46bd      	mov	sp, r7
 80128d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d6:	4770      	bx	lr

080128d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b098      	sub	sp, #96	; 0x60
 80128dc:	af02      	add	r7, sp, #8
 80128de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2200      	movs	r2, #0
 80128e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80128e8:	f7f5 f888 	bl	80079fc <HAL_GetTick>
 80128ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	f003 0308 	and.w	r3, r3, #8
 80128f8:	2b08      	cmp	r3, #8
 80128fa:	d12f      	bne.n	801295c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80128fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012900:	9300      	str	r3, [sp, #0]
 8012902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012904:	2200      	movs	r2, #0
 8012906:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f000 f88e 	bl	8012a2c <UART_WaitOnFlagUntilTimeout>
 8012910:	4603      	mov	r3, r0
 8012912:	2b00      	cmp	r3, #0
 8012914:	d022      	beq.n	801295c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801291e:	e853 3f00 	ldrex	r3, [r3]
 8012922:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801292a:	653b      	str	r3, [r7, #80]	; 0x50
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	461a      	mov	r2, r3
 8012932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012934:	647b      	str	r3, [r7, #68]	; 0x44
 8012936:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801293a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801293c:	e841 2300 	strex	r3, r2, [r1]
 8012940:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012944:	2b00      	cmp	r3, #0
 8012946:	d1e6      	bne.n	8012916 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2220      	movs	r2, #32
 801294c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2200      	movs	r2, #0
 8012954:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012958:	2303      	movs	r3, #3
 801295a:	e063      	b.n	8012a24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	f003 0304 	and.w	r3, r3, #4
 8012966:	2b04      	cmp	r3, #4
 8012968:	d149      	bne.n	80129fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801296a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801296e:	9300      	str	r3, [sp, #0]
 8012970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012972:	2200      	movs	r2, #0
 8012974:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012978:	6878      	ldr	r0, [r7, #4]
 801297a:	f000 f857 	bl	8012a2c <UART_WaitOnFlagUntilTimeout>
 801297e:	4603      	mov	r3, r0
 8012980:	2b00      	cmp	r3, #0
 8012982:	d03c      	beq.n	80129fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298c:	e853 3f00 	ldrex	r3, [r3]
 8012990:	623b      	str	r3, [r7, #32]
   return(result);
 8012992:	6a3b      	ldr	r3, [r7, #32]
 8012994:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012998:	64fb      	str	r3, [r7, #76]	; 0x4c
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	461a      	mov	r2, r3
 80129a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129a2:	633b      	str	r3, [r7, #48]	; 0x30
 80129a4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80129a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129aa:	e841 2300 	strex	r3, r2, [r1]
 80129ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80129b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d1e6      	bne.n	8012984 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	3308      	adds	r3, #8
 80129bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	e853 3f00 	ldrex	r3, [r3]
 80129c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	f023 0301 	bic.w	r3, r3, #1
 80129cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	3308      	adds	r3, #8
 80129d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80129d6:	61fa      	str	r2, [r7, #28]
 80129d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129da:	69b9      	ldr	r1, [r7, #24]
 80129dc:	69fa      	ldr	r2, [r7, #28]
 80129de:	e841 2300 	strex	r3, r2, [r1]
 80129e2:	617b      	str	r3, [r7, #20]
   return(result);
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d1e5      	bne.n	80129b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	2220      	movs	r2, #32
 80129ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2200      	movs	r2, #0
 80129f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80129fa:	2303      	movs	r3, #3
 80129fc:	e012      	b.n	8012a24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2220      	movs	r2, #32
 8012a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2220      	movs	r2, #32
 8012a0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2200      	movs	r2, #0
 8012a12:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2200      	movs	r2, #0
 8012a18:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012a22:	2300      	movs	r3, #0
}
 8012a24:	4618      	mov	r0, r3
 8012a26:	3758      	adds	r7, #88	; 0x58
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}

08012a2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b084      	sub	sp, #16
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	60f8      	str	r0, [r7, #12]
 8012a34:	60b9      	str	r1, [r7, #8]
 8012a36:	603b      	str	r3, [r7, #0]
 8012a38:	4613      	mov	r3, r2
 8012a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012a3c:	e049      	b.n	8012ad2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012a3e:	69bb      	ldr	r3, [r7, #24]
 8012a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a44:	d045      	beq.n	8012ad2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012a46:	f7f4 ffd9 	bl	80079fc <HAL_GetTick>
 8012a4a:	4602      	mov	r2, r0
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	1ad3      	subs	r3, r2, r3
 8012a50:	69ba      	ldr	r2, [r7, #24]
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d302      	bcc.n	8012a5c <UART_WaitOnFlagUntilTimeout+0x30>
 8012a56:	69bb      	ldr	r3, [r7, #24]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d101      	bne.n	8012a60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012a5c:	2303      	movs	r3, #3
 8012a5e:	e048      	b.n	8012af2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	f003 0304 	and.w	r3, r3, #4
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d031      	beq.n	8012ad2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	69db      	ldr	r3, [r3, #28]
 8012a74:	f003 0308 	and.w	r3, r3, #8
 8012a78:	2b08      	cmp	r3, #8
 8012a7a:	d110      	bne.n	8012a9e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	2208      	movs	r2, #8
 8012a82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012a84:	68f8      	ldr	r0, [r7, #12]
 8012a86:	f000 f838 	bl	8012afa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	2208      	movs	r2, #8
 8012a8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	2200      	movs	r2, #0
 8012a96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8012a9a:	2301      	movs	r3, #1
 8012a9c:	e029      	b.n	8012af2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	69db      	ldr	r3, [r3, #28]
 8012aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012aac:	d111      	bne.n	8012ad2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012ab6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012ab8:	68f8      	ldr	r0, [r7, #12]
 8012aba:	f000 f81e 	bl	8012afa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	2220      	movs	r2, #32
 8012ac2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	2200      	movs	r2, #0
 8012aca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012ace:	2303      	movs	r3, #3
 8012ad0:	e00f      	b.n	8012af2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	69da      	ldr	r2, [r3, #28]
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	4013      	ands	r3, r2
 8012adc:	68ba      	ldr	r2, [r7, #8]
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	bf0c      	ite	eq
 8012ae2:	2301      	moveq	r3, #1
 8012ae4:	2300      	movne	r3, #0
 8012ae6:	b2db      	uxtb	r3, r3
 8012ae8:	461a      	mov	r2, r3
 8012aea:	79fb      	ldrb	r3, [r7, #7]
 8012aec:	429a      	cmp	r2, r3
 8012aee:	d0a6      	beq.n	8012a3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012af0:	2300      	movs	r3, #0
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	3710      	adds	r7, #16
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bd80      	pop	{r7, pc}

08012afa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012afa:	b480      	push	{r7}
 8012afc:	b095      	sub	sp, #84	; 0x54
 8012afe:	af00      	add	r7, sp, #0
 8012b00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b0a:	e853 3f00 	ldrex	r3, [r3]
 8012b0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b20:	643b      	str	r3, [r7, #64]	; 0x40
 8012b22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012b26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012b28:	e841 2300 	strex	r3, r2, [r1]
 8012b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d1e6      	bne.n	8012b02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	3308      	adds	r3, #8
 8012b3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b3c:	6a3b      	ldr	r3, [r7, #32]
 8012b3e:	e853 3f00 	ldrex	r3, [r3]
 8012b42:	61fb      	str	r3, [r7, #28]
   return(result);
 8012b44:	69fb      	ldr	r3, [r7, #28]
 8012b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012b4a:	f023 0301 	bic.w	r3, r3, #1
 8012b4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	3308      	adds	r3, #8
 8012b56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012b58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012b5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b60:	e841 2300 	strex	r3, r2, [r1]
 8012b64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d1e3      	bne.n	8012b34 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b70:	2b01      	cmp	r3, #1
 8012b72:	d118      	bne.n	8012ba6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	e853 3f00 	ldrex	r3, [r3]
 8012b80:	60bb      	str	r3, [r7, #8]
   return(result);
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	f023 0310 	bic.w	r3, r3, #16
 8012b88:	647b      	str	r3, [r7, #68]	; 0x44
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	461a      	mov	r2, r3
 8012b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b92:	61bb      	str	r3, [r7, #24]
 8012b94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b96:	6979      	ldr	r1, [r7, #20]
 8012b98:	69ba      	ldr	r2, [r7, #24]
 8012b9a:	e841 2300 	strex	r3, r2, [r1]
 8012b9e:	613b      	str	r3, [r7, #16]
   return(result);
 8012ba0:	693b      	ldr	r3, [r7, #16]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d1e6      	bne.n	8012b74 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2220      	movs	r2, #32
 8012baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012bba:	bf00      	nop
 8012bbc:	3754      	adds	r7, #84	; 0x54
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc4:	4770      	bx	lr

08012bc6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012bc6:	b480      	push	{r7}
 8012bc8:	b085      	sub	sp, #20
 8012bca:	af00      	add	r7, sp, #0
 8012bcc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012bd4:	2b01      	cmp	r3, #1
 8012bd6:	d101      	bne.n	8012bdc <HAL_UARTEx_DisableFifoMode+0x16>
 8012bd8:	2302      	movs	r3, #2
 8012bda:	e027      	b.n	8012c2c <HAL_UARTEx_DisableFifoMode+0x66>
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2201      	movs	r2, #1
 8012be0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2224      	movs	r2, #36	; 0x24
 8012be8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	681a      	ldr	r2, [r3, #0]
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	f022 0201 	bic.w	r2, r2, #1
 8012c02:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012c0a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2200      	movs	r2, #0
 8012c10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	68fa      	ldr	r2, [r7, #12]
 8012c18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2220      	movs	r2, #32
 8012c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	2200      	movs	r2, #0
 8012c26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c2a:	2300      	movs	r3, #0
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3714      	adds	r7, #20
 8012c30:	46bd      	mov	sp, r7
 8012c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c36:	4770      	bx	lr

08012c38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b084      	sub	sp, #16
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c48:	2b01      	cmp	r3, #1
 8012c4a:	d101      	bne.n	8012c50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012c4c:	2302      	movs	r3, #2
 8012c4e:	e02d      	b.n	8012cac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	2201      	movs	r2, #1
 8012c54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2224      	movs	r2, #36	; 0x24
 8012c5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	681a      	ldr	r2, [r3, #0]
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	f022 0201 	bic.w	r2, r2, #1
 8012c76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	689b      	ldr	r3, [r3, #8]
 8012c7e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	683a      	ldr	r2, [r7, #0]
 8012c88:	430a      	orrs	r2, r1
 8012c8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f000 f84f 	bl	8012d30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	68fa      	ldr	r2, [r7, #12]
 8012c98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	2220      	movs	r2, #32
 8012c9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012caa:	2300      	movs	r3, #0
}
 8012cac:	4618      	mov	r0, r3
 8012cae:	3710      	adds	r7, #16
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}

08012cb4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b084      	sub	sp, #16
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
 8012cbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012cc4:	2b01      	cmp	r3, #1
 8012cc6:	d101      	bne.n	8012ccc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012cc8:	2302      	movs	r3, #2
 8012cca:	e02d      	b.n	8012d28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	2201      	movs	r2, #1
 8012cd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2224      	movs	r2, #36	; 0x24
 8012cd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	681a      	ldr	r2, [r3, #0]
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	f022 0201 	bic.w	r2, r2, #1
 8012cf2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	689b      	ldr	r3, [r3, #8]
 8012cfa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	683a      	ldr	r2, [r7, #0]
 8012d04:	430a      	orrs	r2, r1
 8012d06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f000 f811 	bl	8012d30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	68fa      	ldr	r2, [r7, #12]
 8012d14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	2220      	movs	r2, #32
 8012d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	2200      	movs	r2, #0
 8012d22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d26:	2300      	movs	r3, #0
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	3710      	adds	r7, #16
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bd80      	pop	{r7, pc}

08012d30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012d30:	b480      	push	{r7}
 8012d32:	b085      	sub	sp, #20
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d108      	bne.n	8012d52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2201      	movs	r2, #1
 8012d44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	2201      	movs	r2, #1
 8012d4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012d50:	e031      	b.n	8012db6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012d52:	2308      	movs	r3, #8
 8012d54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012d56:	2308      	movs	r3, #8
 8012d58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	689b      	ldr	r3, [r3, #8]
 8012d60:	0e5b      	lsrs	r3, r3, #25
 8012d62:	b2db      	uxtb	r3, r3
 8012d64:	f003 0307 	and.w	r3, r3, #7
 8012d68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	689b      	ldr	r3, [r3, #8]
 8012d70:	0f5b      	lsrs	r3, r3, #29
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	f003 0307 	and.w	r3, r3, #7
 8012d78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012d7a:	7bbb      	ldrb	r3, [r7, #14]
 8012d7c:	7b3a      	ldrb	r2, [r7, #12]
 8012d7e:	4911      	ldr	r1, [pc, #68]	; (8012dc4 <UARTEx_SetNbDataToProcess+0x94>)
 8012d80:	5c8a      	ldrb	r2, [r1, r2]
 8012d82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012d86:	7b3a      	ldrb	r2, [r7, #12]
 8012d88:	490f      	ldr	r1, [pc, #60]	; (8012dc8 <UARTEx_SetNbDataToProcess+0x98>)
 8012d8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012d8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d90:	b29a      	uxth	r2, r3
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012d98:	7bfb      	ldrb	r3, [r7, #15]
 8012d9a:	7b7a      	ldrb	r2, [r7, #13]
 8012d9c:	4909      	ldr	r1, [pc, #36]	; (8012dc4 <UARTEx_SetNbDataToProcess+0x94>)
 8012d9e:	5c8a      	ldrb	r2, [r1, r2]
 8012da0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012da4:	7b7a      	ldrb	r2, [r7, #13]
 8012da6:	4908      	ldr	r1, [pc, #32]	; (8012dc8 <UARTEx_SetNbDataToProcess+0x98>)
 8012da8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012daa:	fb93 f3f2 	sdiv	r3, r3, r2
 8012dae:	b29a      	uxth	r2, r3
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012db6:	bf00      	nop
 8012db8:	3714      	adds	r7, #20
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc0:	4770      	bx	lr
 8012dc2:	bf00      	nop
 8012dc4:	0802ba80 	.word	0x0802ba80
 8012dc8:	0802ba88 	.word	0x0802ba88

08012dcc <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8012dcc:	b480      	push	{r7}
 8012dce:	b083      	sub	sp, #12
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	f043 0201 	orr.w	r2, r3, #1
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	601a      	str	r2, [r3, #0]
}
 8012de0:	bf00      	nop
 8012de2:	370c      	adds	r7, #12
 8012de4:	46bd      	mov	sp, r7
 8012de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dea:	4770      	bx	lr

08012dec <LL_DLYB_Disable>:
  * @param  DLYBx DLYB Instance.
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Disable(DLYB_TypeDef *DLYBx)
{
 8012dec:	b480      	push	{r7}
 8012dee:	b083      	sub	sp, #12
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(DLYBx->CR, DLYB_CR_DEN);
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	f023 0201 	bic.w	r2, r3, #1
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	601a      	str	r2, [r3, #0]
}
 8012e00:	bf00      	nop
 8012e02:	370c      	adds	r7, #12
 8012e04:	46bd      	mov	sp, r7
 8012e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0a:	4770      	bx	lr

08012e0c <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b086      	sub	sp, #24
 8012e10:	af02      	add	r7, sp, #8
 8012e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012e14:	2300      	movs	r3, #0
 8012e16:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8012e18:	f7f4 fdf0 	bl	80079fc <HAL_GetTick>
 8012e1c:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d102      	bne.n	8012e2a <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8012e24:	2301      	movs	r3, #1
 8012e26:	73fb      	strb	r3, [r7, #15]
 8012e28:	e137      	b.n	801309a <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	4a76      	ldr	r2, [pc, #472]	; (8013008 <HAL_XSPI_Init+0x1fc>)
 8012e30:	4293      	cmp	r3, r2
 8012e32:	d008      	beq.n	8012e46 <HAL_XSPI_Init+0x3a>
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	4a74      	ldr	r2, [pc, #464]	; (801300c <HAL_XSPI_Init+0x200>)
 8012e3a:	4293      	cmp	r3, r2
 8012e3c:	d003      	beq.n	8012e46 <HAL_XSPI_Init+0x3a>
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	4a73      	ldr	r2, [pc, #460]	; (8013010 <HAL_XSPI_Init+0x204>)
 8012e44:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	4a72      	ldr	r2, [pc, #456]	; (8013014 <HAL_XSPI_Init+0x208>)
 8012e4c:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	4a6d      	ldr	r2, [pc, #436]	; (8013008 <HAL_XSPI_Init+0x1fc>)
 8012e54:	4293      	cmp	r3, r2
 8012e56:	d008      	beq.n	8012e6a <HAL_XSPI_Init+0x5e>
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	4a6b      	ldr	r2, [pc, #428]	; (801300c <HAL_XSPI_Init+0x200>)
 8012e5e:	4293      	cmp	r3, r2
 8012e60:	d003      	beq.n	8012e6a <HAL_XSPI_Init+0x5e>
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	4a6a      	ldr	r2, [pc, #424]	; (8013010 <HAL_XSPI_Init+0x204>)
 8012e68:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	4a66      	ldr	r2, [pc, #408]	; (8013008 <HAL_XSPI_Init+0x1fc>)
 8012e70:	4293      	cmp	r3, r2
 8012e72:	d008      	beq.n	8012e86 <HAL_XSPI_Init+0x7a>
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	4a64      	ldr	r2, [pc, #400]	; (801300c <HAL_XSPI_Init+0x200>)
 8012e7a:	4293      	cmp	r3, r2
 8012e7c:	d003      	beq.n	8012e86 <HAL_XSPI_Init+0x7a>
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	4a63      	ldr	r2, [pc, #396]	; (8013010 <HAL_XSPI_Init+0x204>)
 8012e84:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	2200      	movs	r2, #0
 8012e8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	f040 8102 	bne.w	801309a <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f7ee fe74 	bl	8001b84 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8012e9c:	f241 3188 	movw	r1, #5000	; 0x1388
 8012ea0:	6878      	ldr	r0, [r7, #4]
 8012ea2:	f000 fc82 	bl	80137aa <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	689a      	ldr	r2, [r3, #8]
 8012eac:	4b5a      	ldr	r3, [pc, #360]	; (8013018 <HAL_XSPI_Init+0x20c>)
 8012eae:	4013      	ands	r3, r2
 8012eb0:	687a      	ldr	r2, [r7, #4]
 8012eb2:	68d1      	ldr	r1, [r2, #12]
 8012eb4:	687a      	ldr	r2, [r7, #4]
 8012eb6:	6912      	ldr	r2, [r2, #16]
 8012eb8:	0412      	lsls	r2, r2, #16
 8012eba:	4311      	orrs	r1, r2
 8012ebc:	687a      	ldr	r2, [r7, #4]
 8012ebe:	6952      	ldr	r2, [r2, #20]
 8012ec0:	3a01      	subs	r2, #1
 8012ec2:	0212      	lsls	r2, r2, #8
 8012ec4:	4311      	orrs	r1, r2
 8012ec6:	687a      	ldr	r2, [r7, #4]
 8012ec8:	69d2      	ldr	r2, [r2, #28]
 8012eca:	4311      	orrs	r1, r2
 8012ecc:	687a      	ldr	r2, [r7, #4]
 8012ece:	6812      	ldr	r2, [r2, #0]
 8012ed0:	430b      	orrs	r3, r1
 8012ed2:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	4a4b      	ldr	r2, [pc, #300]	; (8013008 <HAL_XSPI_Init+0x1fc>)
 8012eda:	4293      	cmp	r3, r2
 8012edc:	d00e      	beq.n	8012efc <HAL_XSPI_Init+0xf0>
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	4a4a      	ldr	r2, [pc, #296]	; (801300c <HAL_XSPI_Init+0x200>)
 8012ee4:	4293      	cmp	r3, r2
 8012ee6:	d009      	beq.n	8012efc <HAL_XSPI_Init+0xf0>
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	4a48      	ldr	r2, [pc, #288]	; (8013010 <HAL_XSPI_Init+0x204>)
 8012eee:	4293      	cmp	r3, r2
 8012ef0:	d004      	beq.n	8012efc <HAL_XSPI_Init+0xf0>
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	4a49      	ldr	r2, [pc, #292]	; (801301c <HAL_XSPI_Init+0x210>)
 8012ef8:	4293      	cmp	r3, r2
 8012efa:	d10a      	bne.n	8012f12 <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	689b      	ldr	r3, [r3, #8]
 8012f02:	f023 0108 	bic.w	r1, r3, #8
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	430a      	orrs	r2, r1
 8012f10:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	68db      	ldr	r3, [r3, #12]
 8012f18:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	6a1a      	ldr	r2, [r3, #32]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	430a      	orrs	r2, r1
 8012f26:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	691b      	ldr	r3, [r3, #16]
 8012f2e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f36:	041a      	lsls	r2, r3, #16
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	430a      	orrs	r2, r1
 8012f3e:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	4a30      	ldr	r2, [pc, #192]	; (8013008 <HAL_XSPI_Init+0x1fc>)
 8012f46:	4293      	cmp	r3, r2
 8012f48:	d00e      	beq.n	8012f68 <HAL_XSPI_Init+0x15c>
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	4a2f      	ldr	r2, [pc, #188]	; (801300c <HAL_XSPI_Init+0x200>)
 8012f50:	4293      	cmp	r3, r2
 8012f52:	d009      	beq.n	8012f68 <HAL_XSPI_Init+0x15c>
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	4a2d      	ldr	r2, [pc, #180]	; (8013010 <HAL_XSPI_Init+0x204>)
 8012f5a:	4293      	cmp	r3, r2
 8012f5c:	d004      	beq.n	8012f68 <HAL_XSPI_Init+0x15c>
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	4a2e      	ldr	r2, [pc, #184]	; (801301c <HAL_XSPI_Init+0x210>)
 8012f64:	4293      	cmp	r3, r2
 8012f66:	d10a      	bne.n	8012f7e <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	691b      	ldr	r3, [r3, #16]
 8012f6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	430a      	orrs	r2, r1
 8012f7c:	611a      	str	r2, [r3, #16]
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	687a      	ldr	r2, [r7, #4]
 8012f84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8012f86:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	685b      	ldr	r3, [r3, #4]
 8012f96:	3b01      	subs	r3, #1
 8012f98:	021a      	lsls	r2, r3, #8
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	430a      	orrs	r2, r1
 8012fa0:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012fa6:	9300      	str	r3, [sp, #0]
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	2200      	movs	r2, #0
 8012fac:	2120      	movs	r1, #32
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	f000 fd60 	bl	8013a74 <XSPI_WaitFlagStateUntilTimeout>
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8012fb8:	7bfb      	ldrb	r3, [r7, #15]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d16d      	bne.n	801309a <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	68db      	ldr	r3, [r3, #12]
 8012fc4:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	430a      	orrs	r2, r1
 8012fd2:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	4a0e      	ldr	r2, [pc, #56]	; (8013014 <HAL_XSPI_Init+0x208>)
 8012fda:	4293      	cmp	r3, r2
 8012fdc:	d004      	beq.n	8012fe8 <HAL_XSPI_Init+0x1dc>
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	4a0f      	ldr	r2, [pc, #60]	; (8013020 <HAL_XSPI_Init+0x214>)
 8012fe4:	4293      	cmp	r3, r2
 8012fe6:	d11d      	bne.n	8013024 <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012fec:	9300      	str	r3, [sp, #0]
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	2120      	movs	r1, #32
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f000 fd3d 	bl	8013a74 <XSPI_WaitFlagStateUntilTimeout>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 8012ffe:	7bfb      	ldrb	r3, [r7, #15]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d00f      	beq.n	8013024 <HAL_XSPI_Init+0x218>
          {
            return status;
 8013004:	7bfb      	ldrb	r3, [r7, #15]
 8013006:	e049      	b.n	801309c <HAL_XSPI_Init+0x290>
 8013008:	420d1400 	.word	0x420d1400
 801300c:	520d1400 	.word	0x520d1400
 8013010:	420d2400 	.word	0x420d2400
 8013014:	420d3400 	.word	0x420d3400
 8013018:	f8e0c0fc 	.word	0xf8e0c0fc
 801301c:	520d2400 	.word	0x520d2400
 8013020:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	689a      	ldr	r2, [r3, #8]
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	430a      	orrs	r2, r1
 8013038:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8013042:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801304e:	431a      	orrs	r2, r3
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	430a      	orrs	r2, r1
 8013056:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	681a      	ldr	r2, [r3, #0]
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	f042 0201 	orr.w	r2, r2, #1
 8013068:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	699b      	ldr	r3, [r3, #24]
 801306e:	2b02      	cmp	r3, #2
 8013070:	d107      	bne.n	8013082 <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	689a      	ldr	r2, [r3, #8]
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	f042 0202 	orr.w	r2, r2, #2
 8013080:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	68db      	ldr	r3, [r3, #12]
 8013086:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801308a:	d103      	bne.n	8013094 <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	2201      	movs	r2, #1
 8013090:	655a      	str	r2, [r3, #84]	; 0x54
 8013092:	e002      	b.n	801309a <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2202      	movs	r2, #2
 8013098:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
  }
  return status;
 801309a:	7bfb      	ldrb	r3, [r7, #15]
}
 801309c:	4618      	mov	r0, r3
 801309e:	3710      	adds	r7, #16
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}

080130a4 <HAL_XSPI_DeInit>:
  * @brief  De-Initialize the XSPI peripheral.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_DeInit(XSPI_HandleTypeDef *hxspi)
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b084      	sub	sp, #16
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80130ac:	2300      	movs	r3, #0
 80130ae:	73fb      	strb	r3, [r7, #15]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d102      	bne.n	80130bc <HAL_XSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 80130b6:	2301      	movs	r3, #1
 80130b8:	73fb      	strb	r3, [r7, #15]
 80130ba:	e015      	b.n	80130e8 <HAL_XSPI_DeInit+0x44>
    /* No error code can be set as the handler is null */
  }
  else
  {
    /* Disable XSPI */
    HAL_XSPI_DISABLE(hxspi);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	681a      	ldr	r2, [r3, #0]
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	f022 0201 	bic.w	r2, r2, #1
 80130ca:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after XSPI disable */
    CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	689a      	ldr	r2, [r3, #8]
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	f022 0202 	bic.w	r2, r2, #2
 80130da:	609a      	str	r2, [r3, #8]

    /* De-initialize the low level hardware */
    hxspi->MspDeInitCallback(hxspi);
#else
    /* De-initialize the low-level hardware */
    HAL_XSPI_MspDeInit(hxspi);
 80130dc:	6878      	ldr	r0, [r7, #4]
 80130de:	f7ee fd69 	bl	8001bb4 <HAL_XSPI_MspDeInit>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hxspi->State = HAL_XSPI_STATE_RESET;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2200      	movs	r2, #0
 80130e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  return status;
 80130e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80130ea:	4618      	mov	r0, r3
 80130ec:	3710      	adds	r7, #16
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}
	...

080130f4 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b08a      	sub	sp, #40	; 0x28
 80130f8:	af02      	add	r7, sp, #8
 80130fa:	60f8      	str	r0, [r7, #12]
 80130fc:	60b9      	str	r1, [r7, #8]
 80130fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8013100:	f7f4 fc7c 	bl	80079fc <HAL_GetTick>
 8013104:	61b8      	str	r0, [r7, #24]

  /* Check the parameters of the command structure */
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	689b      	ldr	r3, [r3, #8]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d125      	bne.n	801315a <HAL_XSPI_Command+0x66>
  {
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	4a68      	ldr	r2, [pc, #416]	; (80132b4 <HAL_XSPI_Command+0x1c0>)
 8013114:	4293      	cmp	r3, r2
 8013116:	d020      	beq.n	801315a <HAL_XSPI_Command+0x66>
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	4a66      	ldr	r2, [pc, #408]	; (80132b8 <HAL_XSPI_Command+0x1c4>)
 801311e:	4293      	cmp	r3, r2
 8013120:	d01b      	beq.n	801315a <HAL_XSPI_Command+0x66>
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	4a65      	ldr	r2, [pc, #404]	; (80132bc <HAL_XSPI_Command+0x1c8>)
 8013128:	4293      	cmp	r3, r2
 801312a:	d016      	beq.n	801315a <HAL_XSPI_Command+0x66>
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	4a63      	ldr	r2, [pc, #396]	; (80132c0 <HAL_XSPI_Command+0x1cc>)
 8013132:	4293      	cmp	r3, r2
 8013134:	d011      	beq.n	801315a <HAL_XSPI_Command+0x66>
    {
      assert_param(IS_OCTOSPI_IO_SELECT(pCmd->IOSelect));
    }
#if defined(HSPI1)
    else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	4a62      	ldr	r2, [pc, #392]	; (80132c4 <HAL_XSPI_Command+0x1d0>)
 801313c:	4293      	cmp	r3, r2
 801313e:	d00c      	beq.n	801315a <HAL_XSPI_Command+0x66>
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	4a60      	ldr	r2, [pc, #384]	; (80132c8 <HAL_XSPI_Command+0x1d4>)
 8013146:	4293      	cmp	r3, r2
 8013148:	d007      	beq.n	801315a <HAL_XSPI_Command+0x66>
      assert_param(IS_HSPI_IO_SELECT(pCmd->IOSelect));
    }
#endif /* HSPI1 */
    else
    {
      hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801314e:	f043 0208 	orr.w	r2, r3, #8
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8013156:	2301      	movs	r3, #1
 8013158:	e0a8      	b.n	80132ac <HAL_XSPI_Command+0x1b8>
  {
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	4a55      	ldr	r2, [pc, #340]	; (80132b4 <HAL_XSPI_Command+0x1c0>)
 8013160:	4293      	cmp	r3, r2
 8013162:	d020      	beq.n	80131a6 <HAL_XSPI_Command+0xb2>
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	4a53      	ldr	r2, [pc, #332]	; (80132b8 <HAL_XSPI_Command+0x1c4>)
 801316a:	4293      	cmp	r3, r2
 801316c:	d01b      	beq.n	80131a6 <HAL_XSPI_Command+0xb2>
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	4a52      	ldr	r2, [pc, #328]	; (80132bc <HAL_XSPI_Command+0x1c8>)
 8013174:	4293      	cmp	r3, r2
 8013176:	d016      	beq.n	80131a6 <HAL_XSPI_Command+0xb2>
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	4a50      	ldr	r2, [pc, #320]	; (80132c0 <HAL_XSPI_Command+0x1cc>)
 801317e:	4293      	cmp	r3, r2
 8013180:	d011      	beq.n	80131a6 <HAL_XSPI_Command+0xb2>
  {
    assert_param(IS_OCTOSPI_DATA_MODE(pCmd->DataMode));
  }
#if defined(HSPI1)
  else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	4a4f      	ldr	r2, [pc, #316]	; (80132c4 <HAL_XSPI_Command+0x1d0>)
 8013188:	4293      	cmp	r3, r2
 801318a:	d00c      	beq.n	80131a6 <HAL_XSPI_Command+0xb2>
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	4a4d      	ldr	r2, [pc, #308]	; (80132c8 <HAL_XSPI_Command+0x1d4>)
 8013192:	4293      	cmp	r3, r2
 8013194:	d007      	beq.n	80131a6 <HAL_XSPI_Command+0xb2>
    assert_param(IS_HSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
  }
#endif /* HSPI1 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801319a:	f043 0208 	orr.w	r2, r3, #8
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	659a      	str	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 80131a2:	2301      	movs	r3, #1
 80131a4:	e082      	b.n	80132ac <HAL_XSPI_Command+0x1b8>
  }

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 80131a6:	68bb      	ldr	r3, [r7, #8]
 80131a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131aa:	2b00      	cmp	r3, #0

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
  assert_param(IS_XSPI_SIOO_MODE(pCmd->SIOOMode));

  /* Check the state of the driver */
  state = hxspi->State;
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131b0:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 80131b2:	697b      	ldr	r3, [r7, #20]
 80131b4:	2b02      	cmp	r3, #2
 80131b6:	d104      	bne.n	80131c2 <HAL_XSPI_Command+0xce>
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	68db      	ldr	r3, [r3, #12]
 80131bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80131c0:	d115      	bne.n	80131ee <HAL_XSPI_Command+0xfa>
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	2b14      	cmp	r3, #20
 80131c6:	d107      	bne.n	80131d8 <HAL_XSPI_Command+0xe4>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 80131c8:	68bb      	ldr	r3, [r7, #8]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	2b02      	cmp	r3, #2
 80131ce:	d00e      	beq.n	80131ee <HAL_XSPI_Command+0xfa>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 80131d0:	68bb      	ldr	r3, [r7, #8]
 80131d2:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 80131d4:	2b03      	cmp	r3, #3
 80131d6:	d00a      	beq.n	80131ee <HAL_XSPI_Command+0xfa>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 80131d8:	697b      	ldr	r3, [r7, #20]
 80131da:	2b24      	cmp	r3, #36	; 0x24
 80131dc:	d15e      	bne.n	801329c <HAL_XSPI_Command+0x1a8>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 80131e2:	2b01      	cmp	r3, #1
 80131e4:	d003      	beq.n	80131ee <HAL_XSPI_Command+0xfa>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 80131ea:	2b03      	cmp	r3, #3
 80131ec:	d156      	bne.n	801329c <HAL_XSPI_Command+0x1a8>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	9300      	str	r3, [sp, #0]
 80131f2:	69bb      	ldr	r3, [r7, #24]
 80131f4:	2200      	movs	r2, #0
 80131f6:	2120      	movs	r1, #32
 80131f8:	68f8      	ldr	r0, [r7, #12]
 80131fa:	f000 fc3b 	bl	8013a74 <XSPI_WaitFlagStateUntilTimeout>
 80131fe:	4603      	mov	r3, r0
 8013200:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8013202:	7ffb      	ldrb	r3, [r7, #31]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d146      	bne.n	8013296 <HAL_XSPI_Command+0x1a2>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	2200      	movs	r2, #0
 801320c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 801320e:	68b9      	ldr	r1, [r7, #8]
 8013210:	68f8      	ldr	r0, [r7, #12]
 8013212:	f000 fc67 	bl	8013ae4 <XSPI_ConfigCmd>
 8013216:	4603      	mov	r3, r0
 8013218:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 801321a:	7ffb      	ldrb	r3, [r7, #31]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d143      	bne.n	80132a8 <HAL_XSPI_Command+0x1b4>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 8013220:	68bb      	ldr	r3, [r7, #8]
 8013222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013224:	2b00      	cmp	r3, #0
 8013226:	d10e      	bne.n	8013246 <HAL_XSPI_Command+0x152>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	9300      	str	r3, [sp, #0]
 801322c:	69bb      	ldr	r3, [r7, #24]
 801322e:	2201      	movs	r2, #1
 8013230:	2102      	movs	r1, #2
 8013232:	68f8      	ldr	r0, [r7, #12]
 8013234:	f000 fc1e 	bl	8013a74 <XSPI_WaitFlagStateUntilTimeout>
 8013238:	4603      	mov	r3, r0
 801323a:	77fb      	strb	r3, [r7, #31]

          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	2202      	movs	r2, #2
 8013242:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8013244:	e030      	b.n	80132a8 <HAL_XSPI_Command+0x1b4>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d103      	bne.n	8013256 <HAL_XSPI_Command+0x162>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	2204      	movs	r2, #4
 8013252:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8013254:	e028      	b.n	80132a8 <HAL_XSPI_Command+0x1b4>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	2b01      	cmp	r3, #1
 801325c:	d10b      	bne.n	8013276 <HAL_XSPI_Command+0x182>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013262:	2b24      	cmp	r3, #36	; 0x24
 8013264:	d103      	bne.n	801326e <HAL_XSPI_Command+0x17a>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	2204      	movs	r2, #4
 801326a:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 801326c:	e01c      	b.n	80132a8 <HAL_XSPI_Command+0x1b4>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	2214      	movs	r2, #20
 8013272:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8013274:	e018      	b.n	80132a8 <HAL_XSPI_Command+0x1b4>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	2b02      	cmp	r3, #2
 801327c:	d114      	bne.n	80132a8 <HAL_XSPI_Command+0x1b4>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013282:	2b14      	cmp	r3, #20
 8013284:	d103      	bne.n	801328e <HAL_XSPI_Command+0x19a>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	2204      	movs	r2, #4
 801328a:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 801328c:	e00c      	b.n	80132a8 <HAL_XSPI_Command+0x1b4>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	2224      	movs	r2, #36	; 0x24
 8013292:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 8013294:	e008      	b.n	80132a8 <HAL_XSPI_Command+0x1b4>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 8013296:	2302      	movs	r3, #2
 8013298:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 801329a:	e005      	b.n	80132a8 <HAL_XSPI_Command+0x1b4>
    }
  }
  else
  {
    status = HAL_ERROR;
 801329c:	2301      	movs	r3, #1
 801329e:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	2210      	movs	r2, #16
 80132a4:	659a      	str	r2, [r3, #88]	; 0x58
 80132a6:	e000      	b.n	80132aa <HAL_XSPI_Command+0x1b6>
    if (status == HAL_OK)
 80132a8:	bf00      	nop
  }

  return status;
 80132aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3720      	adds	r7, #32
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd80      	pop	{r7, pc}
 80132b4:	420d1400 	.word	0x420d1400
 80132b8:	520d1400 	.word	0x520d1400
 80132bc:	420d2400 	.word	0x420d2400
 80132c0:	520d2400 	.word	0x520d2400
 80132c4:	420d3400 	.word	0x420d3400
 80132c8:	520d3400 	.word	0x520d3400

080132cc <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b08a      	sub	sp, #40	; 0x28
 80132d0:	af02      	add	r7, sp, #8
 80132d2:	60f8      	str	r0, [r7, #12]
 80132d4:	60b9      	str	r1, [r7, #8]
 80132d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80132d8:	f7f4 fb90 	bl	80079fc <HAL_GetTick>
 80132dc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	3350      	adds	r3, #80	; 0x50
 80132e4:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80132e6:	68bb      	ldr	r3, [r7, #8]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d105      	bne.n	80132f8 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 80132ec:	2301      	movs	r3, #1
 80132ee:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	2208      	movs	r2, #8
 80132f4:	659a      	str	r2, [r3, #88]	; 0x58
 80132f6:	e057      	b.n	80133a8 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132fc:	2b04      	cmp	r3, #4
 80132fe:	d14e      	bne.n	801339e <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013306:	1c5a      	adds	r2, r3, #1
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	649a      	str	r2, [r3, #72]	; 0x48
      hxspi->XferSize  = hxspi->XferCount;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	645a      	str	r2, [r3, #68]	; 0x44
      hxspi->pBuffPtr  = pData;
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	68ba      	ldr	r2, [r7, #8]
 8013318:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	681a      	ldr	r2, [r3, #0]
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8013328:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	9300      	str	r3, [sp, #0]
 801332e:	69bb      	ldr	r3, [r7, #24]
 8013330:	2201      	movs	r2, #1
 8013332:	2104      	movs	r1, #4
 8013334:	68f8      	ldr	r0, [r7, #12]
 8013336:	f000 fb9d 	bl	8013a74 <XSPI_WaitFlagStateUntilTimeout>
 801333a:	4603      	mov	r3, r0
 801333c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 801333e:	7ffb      	ldrb	r3, [r7, #31]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d113      	bne.n	801336c <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013348:	781a      	ldrb	r2, [r3, #0]
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013352:	1c5a      	adds	r2, r3, #1
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	641a      	str	r2, [r3, #64]	; 0x40
        hxspi->XferCount--;
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801335c:	1e5a      	subs	r2, r3, #1
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hxspi->XferCount > 0U);
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013366:	2b00      	cmp	r3, #0
 8013368:	d1df      	bne.n	801332a <HAL_XSPI_Transmit+0x5e>
 801336a:	e000      	b.n	801336e <HAL_XSPI_Transmit+0xa2>
          break;
 801336c:	bf00      	nop

      if (status == HAL_OK)
 801336e:	7ffb      	ldrb	r3, [r7, #31]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d119      	bne.n	80133a8 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	9300      	str	r3, [sp, #0]
 8013378:	69bb      	ldr	r3, [r7, #24]
 801337a:	2201      	movs	r2, #1
 801337c:	2102      	movs	r1, #2
 801337e:	68f8      	ldr	r0, [r7, #12]
 8013380:	f000 fb78 	bl	8013a74 <XSPI_WaitFlagStateUntilTimeout>
 8013384:	4603      	mov	r3, r0
 8013386:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8013388:	7ffb      	ldrb	r3, [r7, #31]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d10c      	bne.n	80133a8 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	2202      	movs	r2, #2
 8013394:	625a      	str	r2, [r3, #36]	; 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	2202      	movs	r2, #2
 801339a:	655a      	str	r2, [r3, #84]	; 0x54
 801339c:	e004      	b.n	80133a8 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 801339e:	2301      	movs	r3, #1
 80133a0:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	2210      	movs	r2, #16
 80133a6:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 80133a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80133aa:	4618      	mov	r0, r3
 80133ac:	3720      	adds	r7, #32
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}

080133b2 <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 80133b2:	b580      	push	{r7, lr}
 80133b4:	b08c      	sub	sp, #48	; 0x30
 80133b6:	af02      	add	r7, sp, #8
 80133b8:	60f8      	str	r0, [r7, #12]
 80133ba:	60b9      	str	r1, [r7, #8]
 80133bc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80133be:	f7f4 fb1d 	bl	80079fc <HAL_GetTick>
 80133c2:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	3350      	adds	r3, #80	; 0x50
 80133ca:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80133d2:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80133dc:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d106      	bne.n	80133f2 <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 80133e4:	2301      	movs	r3, #1
 80133e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	2208      	movs	r2, #8
 80133ee:	659a      	str	r2, [r3, #88]	; 0x58
 80133f0:	e07c      	b.n	80134ec <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133f6:	2b04      	cmp	r3, #4
 80133f8:	d172      	bne.n	80134e0 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013400:	1c5a      	adds	r2, r3, #1
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	649a      	str	r2, [r3, #72]	; 0x48
      hxspi->XferSize  = hxspi->XferCount;
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	645a      	str	r2, [r3, #68]	; 0x44
      hxspi->pBuffPtr  = pData;
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	68ba      	ldr	r2, [r7, #8]
 8013412:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8013426:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	68db      	ldr	r3, [r3, #12]
 801342c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8013430:	d104      	bne.n	801343c <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	69ba      	ldr	r2, [r7, #24]
 8013438:	649a      	str	r2, [r3, #72]	; 0x48
 801343a:	e011      	b.n	8013460 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8013444:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013448:	2b00      	cmp	r3, #0
 801344a:	d004      	beq.n	8013456 <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	69ba      	ldr	r2, [r7, #24]
 8013452:	649a      	str	r2, [r3, #72]	; 0x48
 8013454:	e004      	b.n	8013460 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	697a      	ldr	r2, [r7, #20]
 801345c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	9300      	str	r3, [sp, #0]
 8013464:	6a3b      	ldr	r3, [r7, #32]
 8013466:	2201      	movs	r2, #1
 8013468:	2106      	movs	r1, #6
 801346a:	68f8      	ldr	r0, [r7, #12]
 801346c:	f000 fb02 	bl	8013a74 <XSPI_WaitFlagStateUntilTimeout>
 8013470:	4603      	mov	r3, r0
 8013472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8013476:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801347a:	2b00      	cmp	r3, #0
 801347c:	d114      	bne.n	80134a8 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013482:	69fa      	ldr	r2, [r7, #28]
 8013484:	7812      	ldrb	r2, [r2, #0]
 8013486:	b2d2      	uxtb	r2, r2
 8013488:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801348e:	1c5a      	adds	r2, r3, #1
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	641a      	str	r2, [r3, #64]	; 0x40
        hxspi->XferCount--;
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013498:	1e5a      	subs	r2, r3, #1
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hxspi->XferCount > 0U);
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d1dc      	bne.n	8013460 <HAL_XSPI_Receive+0xae>
 80134a6:	e000      	b.n	80134aa <HAL_XSPI_Receive+0xf8>
          break;
 80134a8:	bf00      	nop

      if (status == HAL_OK)
 80134aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d11c      	bne.n	80134ec <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	9300      	str	r3, [sp, #0]
 80134b6:	6a3b      	ldr	r3, [r7, #32]
 80134b8:	2201      	movs	r2, #1
 80134ba:	2102      	movs	r1, #2
 80134bc:	68f8      	ldr	r0, [r7, #12]
 80134be:	f000 fad9 	bl	8013a74 <XSPI_WaitFlagStateUntilTimeout>
 80134c2:	4603      	mov	r3, r0
 80134c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 80134c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d10d      	bne.n	80134ec <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	2202      	movs	r2, #2
 80134d6:	625a      	str	r2, [r3, #36]	; 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	2202      	movs	r2, #2
 80134dc:	655a      	str	r2, [r3, #84]	; 0x54
 80134de:	e005      	b.n	80134ec <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80134e0:	2301      	movs	r3, #1
 80134e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	2210      	movs	r2, #16
 80134ea:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 80134ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80134f0:	4618      	mov	r0, r3
 80134f2:	3728      	adds	r7, #40	; 0x28
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}

080134f8 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, XSPI_AutoPollingTypeDef *const pCfg,
                                       uint32_t Timeout)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b08a      	sub	sp, #40	; 0x28
 80134fc:	af02      	add	r7, sp, #8
 80134fe:	60f8      	str	r0, [r7, #12]
 8013500:	60b9      	str	r1, [r7, #8]
 8013502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013504:	f7f4 fa7a 	bl	80079fc <HAL_GetTick>
 8013508:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013510:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 801351a:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013520:	2b04      	cmp	r3, #4
 8013522:	d167      	bne.n	80135f4 <HAL_XSPI_AutoPolling+0xfc>
 8013524:	68bb      	ldr	r3, [r7, #8]
 8013526:	68db      	ldr	r3, [r3, #12]
 8013528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801352c:	d162      	bne.n	80135f4 <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	9300      	str	r3, [sp, #0]
 8013532:	69bb      	ldr	r3, [r7, #24]
 8013534:	2200      	movs	r2, #0
 8013536:	2120      	movs	r1, #32
 8013538:	68f8      	ldr	r0, [r7, #12]
 801353a:	f000 fa9b 	bl	8013a74 <XSPI_WaitFlagStateUntilTimeout>
 801353e:	4603      	mov	r3, r0
 8013540:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8013542:	7ffb      	ldrb	r3, [r7, #31]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d152      	bne.n	80135ee <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	68ba      	ldr	r2, [r7, #8]
 801354e:	6812      	ldr	r2, [r2, #0]
 8013550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	68ba      	ldr	r2, [r7, #8]
 801355a:	6852      	ldr	r2, [r2, #4]
 801355c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	68ba      	ldr	r2, [r7, #8]
 8013566:	6912      	ldr	r2, [r2, #16]
 8013568:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8013576:	68bb      	ldr	r3, [r7, #8]
 8013578:	6899      	ldr	r1, [r3, #8]
 801357a:	68bb      	ldr	r3, [r7, #8]
 801357c:	68db      	ldr	r3, [r3, #12]
 801357e:	430b      	orrs	r3, r1
 8013580:	431a      	orrs	r2, r3
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 801358a:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	68db      	ldr	r3, [r3, #12]
 8013590:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8013594:	d104      	bne.n	80135a0 <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	697a      	ldr	r2, [r7, #20]
 801359c:	649a      	str	r2, [r3, #72]	; 0x48
 801359e:	e011      	b.n	80135c4 <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80135a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d004      	beq.n	80135ba <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	697a      	ldr	r2, [r7, #20]
 80135b6:	649a      	str	r2, [r3, #72]	; 0x48
 80135b8:	e004      	b.n	80135c4 <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	693a      	ldr	r2, [r7, #16]
 80135c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	9300      	str	r3, [sp, #0]
 80135c8:	69bb      	ldr	r3, [r7, #24]
 80135ca:	2201      	movs	r2, #1
 80135cc:	2108      	movs	r1, #8
 80135ce:	68f8      	ldr	r0, [r7, #12]
 80135d0:	f000 fa50 	bl	8013a74 <XSPI_WaitFlagStateUntilTimeout>
 80135d4:	4603      	mov	r3, r0
 80135d6:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80135d8:	7ffb      	ldrb	r3, [r7, #31]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d110      	bne.n	8013600 <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	2208      	movs	r2, #8
 80135e4:	625a      	str	r2, [r3, #36]	; 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	2202      	movs	r2, #2
 80135ea:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80135ec:	e008      	b.n	8013600 <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
 80135ee:	2302      	movs	r3, #2
 80135f0:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 80135f2:	e005      	b.n	8013600 <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
 80135f4:	2301      	movs	r3, #1
 80135f6:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	2210      	movs	r2, #16
 80135fc:	659a      	str	r2, [r3, #88]	; 0x58
 80135fe:	e000      	b.n	8013602 <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
 8013600:	bf00      	nop
  }

  return status;
 8013602:	7ffb      	ldrb	r3, [r7, #31]
}
 8013604:	4618      	mov	r0, r3
 8013606:	3720      	adds	r7, #32
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}

0801360c <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, XSPI_MemoryMappedTypeDef *const pCfg)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b086      	sub	sp, #24
 8013610:	af02      	add	r7, sp, #8
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013616:	f7f4 f9f1 	bl	80079fc <HAL_GetTick>
 801361a:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013620:	2b04      	cmp	r3, #4
 8013622:	d136      	bne.n	8013692 <HAL_XSPI_MemoryMapped+0x86>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013628:	9300      	str	r3, [sp, #0]
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	2200      	movs	r2, #0
 801362e:	2120      	movs	r1, #32
 8013630:	6878      	ldr	r0, [r7, #4]
 8013632:	f000 fa1f 	bl	8013a74 <XSPI_WaitFlagStateUntilTimeout>
 8013636:	4603      	mov	r3, r0
 8013638:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 801363a:	7bfb      	ldrb	r3, [r7, #15]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d12d      	bne.n	801369c <HAL_XSPI_MemoryMapped+0x90>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	2288      	movs	r2, #136	; 0x88
 8013644:	655a      	str	r2, [r3, #84]	; 0x54

      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	2b08      	cmp	r3, #8
 801364c:	d111      	bne.n	8013672 <HAL_XSPI_MemoryMapped+0x66>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	683a      	ldr	r2, [r7, #0]
 8013654:	6852      	ldr	r2, [r2, #4]
 8013656:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	2210      	movs	r2, #16
 8013660:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	681a      	ldr	r2, [r3, #0]
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013670:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 801367c:	f023 0308 	bic.w	r3, r3, #8
 8013680:	683a      	ldr	r2, [r7, #0]
 8013682:	6812      	ldr	r2, [r2, #0]
 8013684:	431a      	orrs	r2, r3
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 801368e:	601a      	str	r2, [r3, #0]
 8013690:	e004      	b.n	801369c <HAL_XSPI_MemoryMapped+0x90>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8013692:	2301      	movs	r3, #1
 8013694:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	2210      	movs	r2, #16
 801369a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 801369c:	7bfb      	ldrb	r3, [r7, #15]
}
 801369e:	4618      	mov	r0, r3
 80136a0:	3710      	adds	r7, #16
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}

080136a6 <HAL_XSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
 80136a6:	b580      	push	{r7, lr}
 80136a8:	b088      	sub	sp, #32
 80136aa:	af02      	add	r7, sp, #8
 80136ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80136ae:	2300      	movs	r3, #0
 80136b0:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80136b2:	f7f4 f9a3 	bl	80079fc <HAL_GetTick>
 80136b6:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hxspi->State;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136bc:	60fb      	str	r3, [r7, #12]
  if (((state & XSPI_BUSY_STATE_MASK) != 0U) || ((state & XSPI_CFG_STATE_MASK) != 0U))
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	f003 0308 	and.w	r3, r3, #8
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d104      	bne.n	80136d2 <HAL_XSPI_Abort+0x2c>
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	f003 0304 	and.w	r3, r3, #4
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d05f      	beq.n	8013792 <HAL_XSPI_Abort+0xec>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	f003 0304 	and.w	r3, r3, #4
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d021      	beq.n	8013724 <HAL_XSPI_Abort+0x7e>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	681a      	ldr	r2, [r3, #0]
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	f022 0204 	bic.w	r2, r2, #4
 80136ee:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80136f4:	4618      	mov	r0, r3
 80136f6:	f7f4 fdb9 	bl	800826c <HAL_DMA_Abort>
 80136fa:	4603      	mov	r3, r0
 80136fc:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 80136fe:	7dfb      	ldrb	r3, [r7, #23]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d002      	beq.n	801370a <HAL_XSPI_Abort+0x64>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	2204      	movs	r2, #4
 8013708:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801370e:	4618      	mov	r0, r3
 8013710:	f7f4 fdac 	bl	800826c <HAL_DMA_Abort>
 8013714:	4603      	mov	r3, r0
 8013716:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8013718:	7dfb      	ldrb	r3, [r7, #23]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d002      	beq.n	8013724 <HAL_XSPI_Abort+0x7e>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	2204      	movs	r2, #4
 8013722:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	6a1b      	ldr	r3, [r3, #32]
 801372a:	f003 0320 	and.w	r3, r3, #32
 801372e:	2b00      	cmp	r3, #0
 8013730:	d02b      	beq.n	801378a <HAL_XSPI_Abort+0xe4>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	681a      	ldr	r2, [r3, #0]
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	f042 0202 	orr.w	r2, r2, #2
 8013740:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013746:	9300      	str	r3, [sp, #0]
 8013748:	693b      	ldr	r3, [r7, #16]
 801374a:	2201      	movs	r2, #1
 801374c:	2102      	movs	r1, #2
 801374e:	6878      	ldr	r0, [r7, #4]
 8013750:	f000 f990 	bl	8013a74 <XSPI_WaitFlagStateUntilTimeout>
 8013754:	4603      	mov	r3, r0
 8013756:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8013758:	7dfb      	ldrb	r3, [r7, #23]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d11f      	bne.n	801379e <HAL_XSPI_Abort+0xf8>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	2202      	movs	r2, #2
 8013764:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801376a:	9300      	str	r3, [sp, #0]
 801376c:	693b      	ldr	r3, [r7, #16]
 801376e:	2200      	movs	r2, #0
 8013770:	2120      	movs	r1, #32
 8013772:	6878      	ldr	r0, [r7, #4]
 8013774:	f000 f97e 	bl	8013a74 <XSPI_WaitFlagStateUntilTimeout>
 8013778:	4603      	mov	r3, r0
 801377a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 801377c:	7dfb      	ldrb	r3, [r7, #23]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d10d      	bne.n	801379e <HAL_XSPI_Abort+0xf8>
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	2202      	movs	r2, #2
 8013786:	655a      	str	r2, [r3, #84]	; 0x54
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 8013788:	e009      	b.n	801379e <HAL_XSPI_Abort+0xf8>
        }
      }
    }
    else
    {
      hxspi->State = HAL_XSPI_STATE_READY;
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	2202      	movs	r2, #2
 801378e:	655a      	str	r2, [r3, #84]	; 0x54
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 8013790:	e005      	b.n	801379e <HAL_XSPI_Abort+0xf8>
    }
  }
  else
  {
    status = HAL_ERROR;
 8013792:	2301      	movs	r3, #1
 8013794:	75fb      	strb	r3, [r7, #23]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2210      	movs	r2, #16
 801379a:	659a      	str	r2, [r3, #88]	; 0x58
 801379c:	e000      	b.n	80137a0 <HAL_XSPI_Abort+0xfa>
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 801379e:	bf00      	nop
  }

  return status;
 80137a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80137a2:	4618      	mov	r0, r3
 80137a4:	3718      	adds	r7, #24
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd80      	pop	{r7, pc}

080137aa <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 80137aa:	b480      	push	{r7}
 80137ac:	b083      	sub	sp, #12
 80137ae:	af00      	add	r7, sp, #0
 80137b0:	6078      	str	r0, [r7, #4]
 80137b2:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	683a      	ldr	r2, [r7, #0]
 80137b8:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 80137ba:	2300      	movs	r3, #0
}
 80137bc:	4618      	mov	r0, r3
 80137be:	370c      	adds	r7, #12
 80137c0:	46bd      	mov	sp, r7
 80137c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c6:	4770      	bx	lr

080137c8 <HAL_XSPI_DLYB_SetConfig>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_SetConfig(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b084      	sub	sp, #16
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
 80137d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80137d2:	2301      	movs	r3, #1
 80137d4:	73fb      	strb	r3, [r7, #15]

  /* Enable XSPI Free Running Clock (mandatory) */
  SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	689a      	ldr	r2, [r3, #8]
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	f042 0202 	orr.w	r2, r2, #2
 80137e4:	609a      	str	r2, [r3, #8]

  /* Update XSPI state */
  hxspi->State = HAL_XSPI_STATE_BUSY_CMD;
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2208      	movs	r2, #8
 80137ea:	655a      	str	r2, [r3, #84]	; 0x54

  if (hxspi->Instance == OCTOSPI1)
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	4a18      	ldr	r2, [pc, #96]	; (8013854 <HAL_XSPI_DLYB_SetConfig+0x8c>)
 80137f2:	4293      	cmp	r3, r2
 80137f4:	d109      	bne.n	801380a <HAL_XSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 80137f6:	4818      	ldr	r0, [pc, #96]	; (8013858 <HAL_XSPI_DLYB_SetConfig+0x90>)
 80137f8:	f7ff fae8 	bl	8012dcc <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 80137fc:	6839      	ldr	r1, [r7, #0]
 80137fe:	4816      	ldr	r0, [pc, #88]	; (8013858 <HAL_XSPI_DLYB_SetConfig+0x90>)
 8013800:	f000 fb2e 	bl	8013e60 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8013804:	2300      	movs	r3, #0
 8013806:	73fb      	strb	r3, [r7, #15]
 8013808:	e014      	b.n	8013834 <HAL_XSPI_DLYB_SetConfig+0x6c>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	4a13      	ldr	r2, [pc, #76]	; (801385c <HAL_XSPI_DLYB_SetConfig+0x94>)
 8013810:	4293      	cmp	r3, r2
 8013812:	d109      	bne.n	8013828 <HAL_XSPI_DLYB_SetConfig+0x60>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8013814:	4812      	ldr	r0, [pc, #72]	; (8013860 <HAL_XSPI_DLYB_SetConfig+0x98>)
 8013816:	f7ff fad9 	bl	8012dcc <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 801381a:	6839      	ldr	r1, [r7, #0]
 801381c:	4810      	ldr	r0, [pc, #64]	; (8013860 <HAL_XSPI_DLYB_SetConfig+0x98>)
 801381e:	f000 fb1f 	bl	8013e60 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8013822:	2300      	movs	r3, #0
 8013824:	73fb      	strb	r3, [r7, #15]
 8013826:	e005      	b.n	8013834 <HAL_XSPI_DLYB_SetConfig+0x6c>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801382c:	f043 0208 	orr.w	r2, r3, #8
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Abort the current XSPI operation if exist */
  (void)HAL_XSPI_Abort(hxspi);
 8013834:	6878      	ldr	r0, [r7, #4]
 8013836:	f7ff ff36 	bl	80136a6 <HAL_XSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	689a      	ldr	r2, [r3, #8]
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	f022 0202 	bic.w	r2, r2, #2
 8013848:	609a      	str	r2, [r3, #8]

  return status;
 801384a:	7bfb      	ldrb	r3, [r7, #15]
}
 801384c:	4618      	mov	r0, r3
 801384e:	3710      	adds	r7, #16
 8013850:	46bd      	mov	sp, r7
 8013852:	bd80      	pop	{r7, pc}
 8013854:	420d1400 	.word	0x420d1400
 8013858:	420cf000 	.word	0x420cf000
 801385c:	420d2400 	.word	0x420d2400
 8013860:	420cf400 	.word	0x420cf400

08013864 <HAL_XSPI_DLYB_GetConfig>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_GetConfig(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b084      	sub	sp, #16
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
 801386c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801386e:	2301      	movs	r3, #1
 8013870:	73fb      	strb	r3, [r7, #15]

  if (hxspi->Instance == OCTOSPI1)
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	4a10      	ldr	r2, [pc, #64]	; (80138b8 <HAL_XSPI_DLYB_GetConfig+0x54>)
 8013878:	4293      	cmp	r3, r2
 801387a:	d106      	bne.n	801388a <HAL_XSPI_DLYB_GetConfig+0x26>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 801387c:	6839      	ldr	r1, [r7, #0]
 801387e:	480f      	ldr	r0, [pc, #60]	; (80138bc <HAL_XSPI_DLYB_GetConfig+0x58>)
 8013880:	f000 fb0d 	bl	8013e9e <LL_DLYB_GetDelay>
    status = HAL_OK;
 8013884:	2300      	movs	r3, #0
 8013886:	73fb      	strb	r3, [r7, #15]
 8013888:	e011      	b.n	80138ae <HAL_XSPI_DLYB_GetConfig+0x4a>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	4a0c      	ldr	r2, [pc, #48]	; (80138c0 <HAL_XSPI_DLYB_GetConfig+0x5c>)
 8013890:	4293      	cmp	r3, r2
 8013892:	d106      	bne.n	80138a2 <HAL_XSPI_DLYB_GetConfig+0x3e>
  {
    LL_DLYB_GetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8013894:	6839      	ldr	r1, [r7, #0]
 8013896:	480b      	ldr	r0, [pc, #44]	; (80138c4 <HAL_XSPI_DLYB_GetConfig+0x60>)
 8013898:	f000 fb01 	bl	8013e9e <LL_DLYB_GetDelay>
    status = HAL_OK;
 801389c:	2300      	movs	r3, #0
 801389e:	73fb      	strb	r3, [r7, #15]
 80138a0:	e005      	b.n	80138ae <HAL_XSPI_DLYB_GetConfig+0x4a>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80138a6:	f043 0208 	orr.w	r2, r3, #8
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 80138ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3710      	adds	r7, #16
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}
 80138b8:	420d1400 	.word	0x420d1400
 80138bc:	420cf000 	.word	0x420cf000
 80138c0:	420d2400 	.word	0x420d2400
 80138c4:	420cf400 	.word	0x420cf400

080138c8 <HAL_XSPI_DLYB_GetClockPeriod>:
  * @param  hxspi   : XSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_XSPI_DLYB_GetClockPeriod(XSPI_HandleTypeDef *hxspi, HAL_XSPI_DLYB_CfgTypeDef  *const pdlyb_cfg)
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b084      	sub	sp, #16
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
 80138d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80138d2:	2301      	movs	r3, #1
 80138d4:	73fb      	strb	r3, [r7, #15]

  /* Enable XSPI Free Running Clock (mandatory) */
  SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	689a      	ldr	r2, [r3, #8]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	f042 0202 	orr.w	r2, r2, #2
 80138e4:	609a      	str	r2, [r3, #8]

  /* Update XSPI state */
  hxspi->State = HAL_XSPI_STATE_BUSY_CMD;
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	2208      	movs	r2, #8
 80138ea:	655a      	str	r2, [r3, #84]	; 0x54

  if (hxspi->Instance == OCTOSPI1)
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	4a1e      	ldr	r2, [pc, #120]	; (801396c <HAL_XSPI_DLYB_GetClockPeriod+0xa4>)
 80138f2:	4293      	cmp	r3, r2
 80138f4:	d10f      	bne.n	8013916 <HAL_XSPI_DLYB_GetClockPeriod+0x4e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 80138f6:	481e      	ldr	r0, [pc, #120]	; (8013970 <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 80138f8:	f7ff fa68 	bl	8012dcc <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI1, pdlyb_cfg) == (uint32_t)SUCCESS)
 80138fc:	6839      	ldr	r1, [r7, #0]
 80138fe:	481c      	ldr	r0, [pc, #112]	; (8013970 <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 8013900:	f000 fae6 	bl	8013ed0 <LL_DLYB_GetClockPeriod>
 8013904:	4603      	mov	r3, r0
 8013906:	2b00      	cmp	r3, #0
 8013908:	d101      	bne.n	801390e <HAL_XSPI_DLYB_GetClockPeriod+0x46>
    {
      status = HAL_OK;
 801390a:	2300      	movs	r3, #0
 801390c:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI1);
 801390e:	4818      	ldr	r0, [pc, #96]	; (8013970 <HAL_XSPI_DLYB_GetClockPeriod+0xa8>)
 8013910:	f7ff fa6c 	bl	8012dec <LL_DLYB_Disable>
 8013914:	e01a      	b.n	801394c <HAL_XSPI_DLYB_GetClockPeriod+0x84>
  }
#if defined(OCTOSPI2)
  else if (hxspi->Instance == OCTOSPI2)
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	4a16      	ldr	r2, [pc, #88]	; (8013974 <HAL_XSPI_DLYB_GetClockPeriod+0xac>)
 801391c:	4293      	cmp	r3, r2
 801391e:	d10f      	bne.n	8013940 <HAL_XSPI_DLYB_GetClockPeriod+0x78>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8013920:	4815      	ldr	r0, [pc, #84]	; (8013978 <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 8013922:	f7ff fa53 	bl	8012dcc <LL_DLYB_Enable>

    /* try to detect Period */
    if (LL_DLYB_GetClockPeriod(DLYB_OCTOSPI2, pdlyb_cfg) == (uint32_t)SUCCESS)
 8013926:	6839      	ldr	r1, [r7, #0]
 8013928:	4813      	ldr	r0, [pc, #76]	; (8013978 <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 801392a:	f000 fad1 	bl	8013ed0 <LL_DLYB_GetClockPeriod>
 801392e:	4603      	mov	r3, r0
 8013930:	2b00      	cmp	r3, #0
 8013932:	d101      	bne.n	8013938 <HAL_XSPI_DLYB_GetClockPeriod+0x70>
    {
      status = HAL_OK;
 8013934:	2300      	movs	r3, #0
 8013936:	73fb      	strb	r3, [r7, #15]
    }

    /* Disable the DelayBlock */
    LL_DLYB_Disable(DLYB_OCTOSPI2);
 8013938:	480f      	ldr	r0, [pc, #60]	; (8013978 <HAL_XSPI_DLYB_GetClockPeriod+0xb0>)
 801393a:	f7ff fa57 	bl	8012dec <LL_DLYB_Disable>
 801393e:	e005      	b.n	801394c <HAL_XSPI_DLYB_GetClockPeriod+0x84>
  }
#endif /* OCTOSPI2 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013944:	f043 0208 	orr.w	r2, r3, #8
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Abort the current XSPI operation if exist */
  (void)HAL_XSPI_Abort(hxspi);
 801394c:	6878      	ldr	r0, [r7, #4]
 801394e:	f7ff feaa 	bl	80136a6 <HAL_XSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	689a      	ldr	r2, [r3, #8]
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	f022 0202 	bic.w	r2, r2, #2
 8013960:	609a      	str	r2, [r3, #8]

  return status;
 8013962:	7bfb      	ldrb	r3, [r7, #15]
}
 8013964:	4618      	mov	r0, r3
 8013966:	3710      	adds	r7, #16
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}
 801396c:	420d1400 	.word	0x420d1400
 8013970:	420cf000 	.word	0x420cf000
 8013974:	420d2400 	.word	0x420d2400
 8013978:	420cf400 	.word	0x420cf400

0801397c <HAL_XSPI_SetDelayValue>:
  * @param  hxspi : XSPI handle
  * @param  pCfg   : Configuration of delay value specified in DelayValueType field.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_SetDelayValue(XSPI_HandleTypeDef *hxspi, XSPI_HSCalTypeDef *const pCfg)
{
 801397c:	b480      	push	{r7}
 801397e:	b085      	sub	sp, #20
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
 8013984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013986:	2300      	movs	r3, #0
 8013988:	73fb      	strb	r3, [r7, #15]

  if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	4a37      	ldr	r2, [pc, #220]	; (8013a6c <HAL_XSPI_SetDelayValue+0xf0>)
 8013990:	4293      	cmp	r3, r2
 8013992:	d004      	beq.n	801399e <HAL_XSPI_SetDelayValue+0x22>
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	4a35      	ldr	r2, [pc, #212]	; (8013a70 <HAL_XSPI_SetDelayValue+0xf4>)
 801399a:	4293      	cmp	r3, r2
 801399c:	d159      	bne.n	8013a52 <HAL_XSPI_SetDelayValue+0xd6>
    assert_param(IS_XSPI_DELAY_TYPE(pCfg->DelayValueType));
    assert_param(IS_XSPI_FINECAL_VALUE(pCfg->FineCalibrationUnit));
    assert_param(IS_XSPI_COARSECAL_VALUE(pCfg->CoarseCalibrationUnit));

    /* Check if the state isn't in one of the busy states */
    if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139a2:	f003 0308 	and.w	r3, r3, #8
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d14c      	bne.n	8013a44 <HAL_XSPI_SetDelayValue+0xc8>
    {
      switch (pCfg->DelayValueType)
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	2b03      	cmp	r3, #3
 80139b0:	d02e      	beq.n	8013a10 <HAL_XSPI_SetDelayValue+0x94>
 80139b2:	2b03      	cmp	r3, #3
 80139b4:	d840      	bhi.n	8013a38 <HAL_XSPI_SetDelayValue+0xbc>
 80139b6:	2b01      	cmp	r3, #1
 80139b8:	d002      	beq.n	80139c0 <HAL_XSPI_SetDelayValue+0x44>
 80139ba:	2b02      	cmp	r3, #2
 80139bc:	d014      	beq.n	80139e8 <HAL_XSPI_SetDelayValue+0x6c>
 80139be:	e03b      	b.n	8013a38 <HAL_XSPI_SetDelayValue+0xbc>
      {
        case HAL_XSPI_CAL_FEEDBACK_CLK_DELAY:
          MODIFY_REG(hxspi->Instance->CALMR, (HSPI_CALMR_COARSE |  HSPI_CALMR_FINE),
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80139c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80139cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80139d0:	683a      	ldr	r2, [r7, #0]
 80139d2:	6851      	ldr	r1, [r2, #4]
 80139d4:	683a      	ldr	r2, [r7, #0]
 80139d6:	6892      	ldr	r2, [r2, #8]
 80139d8:	0412      	lsls	r2, r2, #16
 80139da:	4311      	orrs	r1, r2
 80139dc:	687a      	ldr	r2, [r7, #4]
 80139de:	6812      	ldr	r2, [r2, #0]
 80139e0:	430b      	orrs	r3, r1
 80139e2:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALMR_COARSE_Pos)));
          break;
 80139e6:	e033      	b.n	8013a50 <HAL_XSPI_SetDelayValue+0xd4>
        case HAL_XSPI_CAL_DATA_OUTPUT_DELAY:
          MODIFY_REG(hxspi->Instance->CALSOR, (HSPI_CALSOR_COARSE | HSPI_CALSOR_FINE),
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80139f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80139f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80139f8:	683a      	ldr	r2, [r7, #0]
 80139fa:	6851      	ldr	r1, [r2, #4]
 80139fc:	683a      	ldr	r2, [r7, #0]
 80139fe:	6892      	ldr	r2, [r2, #8]
 8013a00:	0412      	lsls	r2, r2, #16
 8013a02:	4311      	orrs	r1, r2
 8013a04:	687a      	ldr	r2, [r7, #4]
 8013a06:	6812      	ldr	r2, [r2, #0]
 8013a08:	430b      	orrs	r3, r1
 8013a0a:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALSOR_COARSE_Pos)));
          break;
 8013a0e:	e01f      	b.n	8013a50 <HAL_XSPI_SetDelayValue+0xd4>
        case HAL_XSPI_CAL_DQS_INPUT_DELAY:
          MODIFY_REG(hxspi->Instance->CALSIR, (HSPI_CALSIR_COARSE | HSPI_CALSIR_FINE),
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8013a18:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8013a1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013a20:	683a      	ldr	r2, [r7, #0]
 8013a22:	6851      	ldr	r1, [r2, #4]
 8013a24:	683a      	ldr	r2, [r7, #0]
 8013a26:	6892      	ldr	r2, [r2, #8]
 8013a28:	0412      	lsls	r2, r2, #16
 8013a2a:	4311      	orrs	r1, r2
 8013a2c:	687a      	ldr	r2, [r7, #4]
 8013a2e:	6812      	ldr	r2, [r2, #0]
 8013a30:	430b      	orrs	r3, r1
 8013a32:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
                     (pCfg->FineCalibrationUnit | (pCfg->CoarseCalibrationUnit << HSPI_CALSIR_COARSE_Pos)));
          break;
 8013a36:	e00b      	b.n	8013a50 <HAL_XSPI_SetDelayValue+0xd4>
        default:
          status = HAL_ERROR;
 8013a38:	2301      	movs	r3, #1
 8013a3a:	73fb      	strb	r3, [r7, #15]
          hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	2208      	movs	r2, #8
 8013a40:	659a      	str	r2, [r3, #88]	; 0x58
          break;
 8013a42:	e005      	b.n	8013a50 <HAL_XSPI_SetDelayValue+0xd4>
      }
    }
    else
    {
      status = HAL_ERROR;
 8013a44:	2301      	movs	r3, #1
 8013a46:	73fb      	strb	r3, [r7, #15]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	2210      	movs	r2, #16
 8013a4c:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
 8013a4e:	e005      	b.n	8013a5c <HAL_XSPI_SetDelayValue+0xe0>
 8013a50:	e004      	b.n	8013a5c <HAL_XSPI_SetDelayValue+0xe0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8013a52:	2301      	movs	r3, #1
 8013a54:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	2208      	movs	r2, #8
 8013a5a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return status;
 8013a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	3714      	adds	r7, #20
 8013a62:	46bd      	mov	sp, r7
 8013a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a68:	4770      	bx	lr
 8013a6a:	bf00      	nop
 8013a6c:	420d3400 	.word	0x420d3400
 8013a70:	520d3400 	.word	0x520d3400

08013a74 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b084      	sub	sp, #16
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	60f8      	str	r0, [r7, #12]
 8013a7c:	60b9      	str	r1, [r7, #8]
 8013a7e:	603b      	str	r3, [r7, #0]
 8013a80:	4613      	mov	r3, r2
 8013a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8013a84:	e01a      	b.n	8013abc <XSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013a86:	69bb      	ldr	r3, [r7, #24]
 8013a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a8c:	d016      	beq.n	8013abc <XSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013a8e:	f7f3 ffb5 	bl	80079fc <HAL_GetTick>
 8013a92:	4602      	mov	r2, r0
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	1ad3      	subs	r3, r2, r3
 8013a98:	69ba      	ldr	r2, [r7, #24]
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d302      	bcc.n	8013aa4 <XSPI_WaitFlagStateUntilTimeout+0x30>
 8013a9e:	69bb      	ldr	r3, [r7, #24]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d10b      	bne.n	8013abc <XSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hxspi->State     = HAL_XSPI_STATE_ERROR;
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013aaa:	655a      	str	r2, [r3, #84]	; 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ab0:	f043 0201 	orr.w	r2, r3, #1
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8013ab8:	2303      	movs	r3, #3
 8013aba:	e00e      	b.n	8013ada <XSPI_WaitFlagStateUntilTimeout+0x66>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	6a1a      	ldr	r2, [r3, #32]
 8013ac2:	68bb      	ldr	r3, [r7, #8]
 8013ac4:	4013      	ands	r3, r2
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	bf14      	ite	ne
 8013aca:	2301      	movne	r3, #1
 8013acc:	2300      	moveq	r3, #0
 8013ace:	b2db      	uxtb	r3, r3
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	79fb      	ldrb	r3, [r7, #7]
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d1d6      	bne.n	8013a86 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013ad8:	2300      	movs	r3, #0
}
 8013ada:	4618      	mov	r0, r3
 8013adc:	3710      	adds	r7, #16
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	bd80      	pop	{r7, pc}
	...

08013ae4 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 8013ae4:	b480      	push	{r7}
 8013ae6:	b089      	sub	sp, #36	; 0x24
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
 8013aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013aee:	2300      	movs	r3, #0
 8013af0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	681a      	ldr	r2, [r3, #0]
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8013b00:	601a      	str	r2, [r3, #0]

  if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	4a8f      	ldr	r2, [pc, #572]	; (8013d44 <XSPI_ConfigCmd+0x260>)
 8013b08:	4293      	cmp	r3, r2
 8013b0a:	d00e      	beq.n	8013b2a <XSPI_ConfigCmd+0x46>
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	4a8d      	ldr	r2, [pc, #564]	; (8013d48 <XSPI_ConfigCmd+0x264>)
 8013b12:	4293      	cmp	r3, r2
 8013b14:	d009      	beq.n	8013b2a <XSPI_ConfigCmd+0x46>
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	4a8c      	ldr	r2, [pc, #560]	; (8013d4c <XSPI_ConfigCmd+0x268>)
 8013b1c:	4293      	cmp	r3, r2
 8013b1e:	d004      	beq.n	8013b2a <XSPI_ConfigCmd+0x46>
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	4a8a      	ldr	r2, [pc, #552]	; (8013d50 <XSPI_ConfigCmd+0x26c>)
 8013b26:	4293      	cmp	r3, r2
 8013b28:	d10f      	bne.n	8013b4a <XSPI_ConfigCmd+0x66>
  {
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	689b      	ldr	r3, [r3, #8]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d12d      	bne.n	8013b8e <XSPI_ConfigCmd+0xaa>
    {
      assert_param(IS_OCTOSPI_IO_SELECT(pCmd->IOSelect));
      MODIFY_REG(hxspi->Instance->CR, OCTOSPI_CR_MSEL, pCmd->IOSelect);
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8013b3c:	683b      	ldr	r3, [r7, #0]
 8013b3e:	685a      	ldr	r2, [r3, #4]
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	430a      	orrs	r2, r1
 8013b46:	601a      	str	r2, [r3, #0]
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8013b48:	e021      	b.n	8013b8e <XSPI_ConfigCmd+0xaa>
    }
  }
#if defined(HSPI1)
  else if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	4a81      	ldr	r2, [pc, #516]	; (8013d54 <XSPI_ConfigCmd+0x270>)
 8013b50:	4293      	cmp	r3, r2
 8013b52:	d004      	beq.n	8013b5e <XSPI_ConfigCmd+0x7a>
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	4a7f      	ldr	r2, [pc, #508]	; (8013d58 <XSPI_ConfigCmd+0x274>)
 8013b5a:	4293      	cmp	r3, r2
 8013b5c:	d10f      	bne.n	8013b7e <XSPI_ConfigCmd+0x9a>
  {
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	689b      	ldr	r3, [r3, #8]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d113      	bne.n	8013b8e <XSPI_ConfigCmd+0xaa>
    {
      assert_param(IS_HSPI_IO_SELECT(pCmd->IOSelect));
      MODIFY_REG(hxspi->Instance->CR, HSPI_CR_MSEL, pCmd->IOSelect);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	685a      	ldr	r2, [r3, #4]
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	430a      	orrs	r2, r1
 8013b7a:	601a      	str	r2, [r3, #0]
    if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8013b7c:	e007      	b.n	8013b8e <XSPI_ConfigCmd+0xaa>
    }
  }
#endif /* HSPI1 */
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b82:	f043 0208 	orr.w	r2, r3, #8
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	659a      	str	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	e162      	b.n	8013e54 <XSPI_ConfigCmd+0x370>
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8013b8e:	683b      	ldr	r3, [r7, #0]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	2b02      	cmp	r3, #2
 8013b94:	d114      	bne.n	8013bc0 <XSPI_ConfigCmd+0xdc>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8013b9e:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8013ba8:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8013bb2:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8013bbc:	60fb      	str	r3, [r7, #12]
 8013bbe:	e02c      	b.n	8013c1a <XSPI_ConfigCmd+0x136>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 8013bc0:	683b      	ldr	r3, [r7, #0]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	2b03      	cmp	r3, #3
 8013bc6:	d114      	bne.n	8013bf2 <XSPI_ConfigCmd+0x10e>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8013bd0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8013bda:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013be4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013bee:	60fb      	str	r3, [r7, #12]
 8013bf0:	e013      	b.n	8013c1a <XSPI_ConfigCmd+0x136>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013bfa:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8013c04:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8013c0e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8013c18:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (pCmd->DQSMode | pCmd->SIOOMode);
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013c22:	431a      	orrs	r2, r3
 8013c24:	69bb      	ldr	r3, [r7, #24]
 8013c26:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d012      	beq.n	8013c56 <XSPI_ConfigCmd+0x172>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 8013c38:	69bb      	ldr	r3, [r7, #24]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c48:	4319      	orrs	r1, r3
 8013c4a:	683b      	ldr	r3, [r7, #0]
 8013c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c4e:	430b      	orrs	r3, r1
 8013c50:	431a      	orrs	r2, r3
 8013c52:	69bb      	ldr	r3, [r7, #24]
 8013c54:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 8013c56:	697b      	ldr	r3, [r7, #20]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	f023 021f 	bic.w	r2, r3, #31
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c62:	431a      	orrs	r2, r3
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d009      	beq.n	8013c84 <XSPI_ConfigCmd+0x1a0>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8013c70:	683b      	ldr	r3, [r7, #0]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d105      	bne.n	8013c84 <XSPI_ConfigCmd+0x1a0>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	3a01      	subs	r2, #1
 8013c82:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	68db      	ldr	r3, [r3, #12]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	f000 80a8 	beq.w	8013dde <XSPI_ConfigCmd+0x2fa>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	69db      	ldr	r3, [r3, #28]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d064      	beq.n	8013d60 <XSPI_ConfigCmd+0x27c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d01e      	beq.n	8013cdc <XSPI_ConfigCmd+0x1f8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8013c9e:	69bb      	ldr	r3, [r7, #24]
 8013ca0:	681a      	ldr	r2, [r3, #0]
 8013ca2:	4b2e      	ldr	r3, [pc, #184]	; (8013d5c <XSPI_ConfigCmd+0x278>)
 8013ca4:	4013      	ands	r3, r2
 8013ca6:	683a      	ldr	r2, [r7, #0]
 8013ca8:	68d1      	ldr	r1, [r2, #12]
 8013caa:	683a      	ldr	r2, [r7, #0]
 8013cac:	6952      	ldr	r2, [r2, #20]
 8013cae:	4311      	orrs	r1, r2
 8013cb0:	683a      	ldr	r2, [r7, #0]
 8013cb2:	6912      	ldr	r2, [r2, #16]
 8013cb4:	4311      	orrs	r1, r2
 8013cb6:	683a      	ldr	r2, [r7, #0]
 8013cb8:	69d2      	ldr	r2, [r2, #28]
 8013cba:	4311      	orrs	r1, r2
 8013cbc:	683a      	ldr	r2, [r7, #0]
 8013cbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013cc0:	4311      	orrs	r1, r2
 8013cc2:	683a      	ldr	r2, [r7, #0]
 8013cc4:	6a12      	ldr	r2, [r2, #32]
 8013cc6:	4311      	orrs	r1, r2
 8013cc8:	683a      	ldr	r2, [r7, #0]
 8013cca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013ccc:	4311      	orrs	r1, r2
 8013cce:	683a      	ldr	r2, [r7, #0]
 8013cd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8013cd2:	430a      	orrs	r2, r1
 8013cd4:	431a      	orrs	r2, r3
 8013cd6:	69bb      	ldr	r3, [r7, #24]
 8013cd8:	601a      	str	r2, [r3, #0]
 8013cda:	e028      	b.n	8013d2e <XSPI_ConfigCmd+0x24a>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8013cdc:	69bb      	ldr	r3, [r7, #24]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013ce4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8013ce8:	683a      	ldr	r2, [r7, #0]
 8013cea:	68d1      	ldr	r1, [r2, #12]
 8013cec:	683a      	ldr	r2, [r7, #0]
 8013cee:	6952      	ldr	r2, [r2, #20]
 8013cf0:	4311      	orrs	r1, r2
 8013cf2:	683a      	ldr	r2, [r7, #0]
 8013cf4:	6912      	ldr	r2, [r2, #16]
 8013cf6:	4311      	orrs	r1, r2
 8013cf8:	683a      	ldr	r2, [r7, #0]
 8013cfa:	69d2      	ldr	r2, [r2, #28]
 8013cfc:	4311      	orrs	r1, r2
 8013cfe:	683a      	ldr	r2, [r7, #0]
 8013d00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013d02:	4311      	orrs	r1, r2
 8013d04:	683a      	ldr	r2, [r7, #0]
 8013d06:	6a12      	ldr	r2, [r2, #32]
 8013d08:	430a      	orrs	r2, r1
 8013d0a:	431a      	orrs	r2, r3
 8013d0c:	69bb      	ldr	r3, [r7, #24]
 8013d0e:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013d18:	d109      	bne.n	8013d2e <XSPI_ConfigCmd+0x24a>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8013d1e:	2b08      	cmp	r3, #8
 8013d20:	d105      	bne.n	8013d2e <XSPI_ConfigCmd+0x24a>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8013d22:	69bb      	ldr	r3, [r7, #24]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8013d2a:	69bb      	ldr	r3, [r7, #24]
 8013d2c:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8013d2e:	683b      	ldr	r3, [r7, #0]
 8013d30:	689a      	ldr	r2, [r3, #8]
 8013d32:	693b      	ldr	r3, [r7, #16]
 8013d34:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	683a      	ldr	r2, [r7, #0]
 8013d3c:	6992      	ldr	r2, [r2, #24]
 8013d3e:	649a      	str	r2, [r3, #72]	; 0x48
 8013d40:	e087      	b.n	8013e52 <XSPI_ConfigCmd+0x36e>
 8013d42:	bf00      	nop
 8013d44:	420d1400 	.word	0x420d1400
 8013d48:	520d1400 	.word	0x520d1400
 8013d4c:	420d2400 	.word	0x420d2400
 8013d50:	520d2400 	.word	0x520d2400
 8013d54:	420d3400 	.word	0x420d3400
 8013d58:	520d3400 	.word	0x520d3400
 8013d5c:	f0ffc0c0 	.word	0xf0ffc0c0
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8013d60:	683b      	ldr	r3, [r7, #0]
 8013d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d017      	beq.n	8013d98 <XSPI_ConfigCmd+0x2b4>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 8013d68:	69bb      	ldr	r3, [r7, #24]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8013d70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8013d74:	683a      	ldr	r2, [r7, #0]
 8013d76:	68d1      	ldr	r1, [r2, #12]
 8013d78:	683a      	ldr	r2, [r7, #0]
 8013d7a:	6952      	ldr	r2, [r2, #20]
 8013d7c:	4311      	orrs	r1, r2
 8013d7e:	683a      	ldr	r2, [r7, #0]
 8013d80:	6912      	ldr	r2, [r2, #16]
 8013d82:	4311      	orrs	r1, r2
 8013d84:	683a      	ldr	r2, [r7, #0]
 8013d86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013d88:	4311      	orrs	r1, r2
 8013d8a:	683a      	ldr	r2, [r7, #0]
 8013d8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8013d8e:	430a      	orrs	r2, r1
 8013d90:	431a      	orrs	r2, r3
 8013d92:	69bb      	ldr	r3, [r7, #24]
 8013d94:	601a      	str	r2, [r3, #0]
 8013d96:	e01d      	b.n	8013dd4 <XSPI_ConfigCmd+0x2f0>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 8013d98:	69bb      	ldr	r3, [r7, #24]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8013da0:	683b      	ldr	r3, [r7, #0]
 8013da2:	68d9      	ldr	r1, [r3, #12]
 8013da4:	683b      	ldr	r3, [r7, #0]
 8013da6:	695b      	ldr	r3, [r3, #20]
 8013da8:	4319      	orrs	r1, r3
 8013daa:	683b      	ldr	r3, [r7, #0]
 8013dac:	691b      	ldr	r3, [r3, #16]
 8013dae:	430b      	orrs	r3, r1
 8013db0:	431a      	orrs	r2, r3
 8013db2:	69bb      	ldr	r3, [r7, #24]
 8013db4:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013dbe:	d109      	bne.n	8013dd4 <XSPI_ConfigCmd+0x2f0>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8013dc0:	683b      	ldr	r3, [r7, #0]
 8013dc2:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8013dc4:	2b08      	cmp	r3, #8
 8013dc6:	d105      	bne.n	8013dd4 <XSPI_ConfigCmd+0x2f0>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8013dc8:	69bb      	ldr	r3, [r7, #24]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8013dd0:	69bb      	ldr	r3, [r7, #24]
 8013dd2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8013dd4:	683b      	ldr	r3, [r7, #0]
 8013dd6:	689a      	ldr	r2, [r3, #8]
 8013dd8:	693b      	ldr	r3, [r7, #16]
 8013dda:	601a      	str	r2, [r3, #0]
 8013ddc:	e039      	b.n	8013e52 <XSPI_ConfigCmd+0x36e>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8013dde:	683b      	ldr	r3, [r7, #0]
 8013de0:	69db      	ldr	r3, [r3, #28]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d030      	beq.n	8013e48 <XSPI_ConfigCmd+0x364>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8013de6:	683b      	ldr	r3, [r7, #0]
 8013de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d017      	beq.n	8013e1e <XSPI_ConfigCmd+0x33a>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 8013dee:	69bb      	ldr	r3, [r7, #24]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8013df6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013dfa:	683a      	ldr	r2, [r7, #0]
 8013dfc:	69d1      	ldr	r1, [r2, #28]
 8013dfe:	683a      	ldr	r2, [r7, #0]
 8013e00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013e02:	4311      	orrs	r1, r2
 8013e04:	683a      	ldr	r2, [r7, #0]
 8013e06:	6a12      	ldr	r2, [r2, #32]
 8013e08:	4311      	orrs	r1, r2
 8013e0a:	683a      	ldr	r2, [r7, #0]
 8013e0c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8013e0e:	4311      	orrs	r1, r2
 8013e10:	683a      	ldr	r2, [r7, #0]
 8013e12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8013e14:	430a      	orrs	r2, r1
 8013e16:	431a      	orrs	r2, r3
 8013e18:	69bb      	ldr	r3, [r7, #24]
 8013e1a:	601a      	str	r2, [r3, #0]
 8013e1c:	e00e      	b.n	8013e3c <XSPI_ConfigCmd+0x358>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 8013e1e:	69bb      	ldr	r3, [r7, #24]
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8013e26:	683b      	ldr	r3, [r7, #0]
 8013e28:	69d9      	ldr	r1, [r3, #28]
 8013e2a:	683b      	ldr	r3, [r7, #0]
 8013e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e2e:	4319      	orrs	r1, r3
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	6a1b      	ldr	r3, [r3, #32]
 8013e34:	430b      	orrs	r3, r1
 8013e36:	431a      	orrs	r2, r3
 8013e38:	69bb      	ldr	r3, [r7, #24]
 8013e3a:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	683a      	ldr	r2, [r7, #0]
 8013e42:	6992      	ldr	r2, [r2, #24]
 8013e44:	649a      	str	r2, [r3, #72]	; 0x48
 8013e46:	e004      	b.n	8013e52 <XSPI_ConfigCmd+0x36e>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8013e48:	2301      	movs	r3, #1
 8013e4a:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	2208      	movs	r2, #8
 8013e50:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  return status;
 8013e52:	7ffb      	ldrb	r3, [r7, #31]
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3724      	adds	r7, #36	; 0x24
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5e:	4770      	bx	lr

08013e60 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8013e60:	b480      	push	{r7}
 8013e62:	b083      	sub	sp, #12
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
 8013e68:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	f043 0202 	orr.w	r2, r3, #2
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	685a      	ldr	r2, [r3, #4]
 8013e7a:	683b      	ldr	r3, [r7, #0]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	021b      	lsls	r3, r3, #8
 8013e80:	431a      	orrs	r2, r3
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	f023 0202 	bic.w	r2, r3, #2
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	601a      	str	r2, [r3, #0]
}
 8013e92:	bf00      	nop
 8013e94:	370c      	adds	r7, #12
 8013e96:	46bd      	mov	sp, r7
 8013e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9c:	4770      	bx	lr

08013e9e <LL_DLYB_GetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is received.
  *          - ERROR: the Delay value is not received.
  */
void LL_DLYB_GetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 8013e9e:	b480      	push	{r7}
 8013ea0:	b083      	sub	sp, #12
 8013ea2:	af00      	add	r7, sp, #0
 8013ea4:	6078      	str	r0, [r7, #4]
 8013ea6:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Fill the DelayBlock configuration structure with SEL and UNIT value */
  pdlyb_cfg->Units = ((DLYBx->CFGR & DLYB_CFGR_UNIT) >> DLYB_CFGR_UNIT_Pos);
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	685b      	ldr	r3, [r3, #4]
 8013eac:	0a1b      	lsrs	r3, r3, #8
 8013eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013eb2:	683b      	ldr	r3, [r7, #0]
 8013eb4:	601a      	str	r2, [r3, #0]
  pdlyb_cfg->PhaseSel = (DLYBx->CFGR & DLYB_CFGR_SEL);
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	685b      	ldr	r3, [r3, #4]
 8013eba:	f003 020f 	and.w	r2, r3, #15
 8013ebe:	683b      	ldr	r3, [r7, #0]
 8013ec0:	605a      	str	r2, [r3, #4]
}
 8013ec2:	bf00      	nop
 8013ec4:	370c      	adds	r7, #12
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ecc:	4770      	bx	lr
	...

08013ed0 <LL_DLYB_GetClockPeriod>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: there is a valid period detected and stored in pdlyb_cfg.
  *          - ERROR: there is no valid period detected.
  */
uint32_t LL_DLYB_GetClockPeriod(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef *pdlyb_cfg)
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b086      	sub	sp, #24
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
 8013ed8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8013eda:	2300      	movs	r3, #0
 8013edc:	617b      	str	r3, [r7, #20]

  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	f043 0202 	orr.w	r2, r3, #2
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	601a      	str	r2, [r3, #0]

  /* Delay line length detection */
  while (i < DLYB_MAX_UNIT)
 8013eea:	e02a      	b.n	8013f42 <LL_DLYB_GetClockPeriod+0x72>
  {
    /* Set the Delay of the UNIT(s)*/
    DLYBx->CFGR = DLYB_MAX_SELECT | (i << DLYB_CFGR_UNIT_Pos);
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	021b      	lsls	r3, r3, #8
 8013ef0:	f043 020c 	orr.w	r2, r3, #12
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	605a      	str	r2, [r3, #4]

    /* Waiting for a LNG valid value */
    tickstart =  HAL_GetTick();
 8013ef8:	f7f3 fd80 	bl	80079fc <HAL_GetTick>
 8013efc:	60f8      	str	r0, [r7, #12]
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8013efe:	e00c      	b.n	8013f1a <LL_DLYB_GetClockPeriod+0x4a>
    {
      if ((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 8013f00:	f7f3 fd7c 	bl	80079fc <HAL_GetTick>
 8013f04:	4602      	mov	r2, r0
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	1ad3      	subs	r3, r2, r3
 8013f0a:	2bfe      	cmp	r3, #254	; 0xfe
 8013f0c:	d905      	bls.n	8013f1a <LL_DLYB_GetClockPeriod+0x4a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	685b      	ldr	r3, [r3, #4]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	db01      	blt.n	8013f1a <LL_DLYB_GetClockPeriod+0x4a>
        {
          return (uint32_t) HAL_TIMEOUT;
 8013f16:	2303      	movs	r3, #3
 8013f18:	e042      	b.n	8013fa0 <LL_DLYB_GetClockPeriod+0xd0>
    while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	685b      	ldr	r3, [r3, #4]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	daee      	bge.n	8013f00 <LL_DLYB_GetClockPeriod+0x30>
        }
      }
    }

    if ((DLYBx->CFGR & DLYB_LNG_10_0_MASK) != 0U)
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	685a      	ldr	r2, [r3, #4]
 8013f26:	4b20      	ldr	r3, [pc, #128]	; (8013fa8 <LL_DLYB_GetClockPeriod+0xd8>)
 8013f28:	4013      	ands	r3, r2
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d006      	beq.n	8013f3c <LL_DLYB_GetClockPeriod+0x6c>
    {
      if ((DLYBx->CFGR & (DLYB_CFGR_LNG_11 | DLYB_CFGR_LNG_10)) != DLYB_LNG_11_10_MASK)
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	685b      	ldr	r3, [r3, #4]
 8013f32:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8013f36:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8013f3a:	d106      	bne.n	8013f4a <LL_DLYB_GetClockPeriod+0x7a>
      {
        /* Delay line length is configured to one input clock period*/
        break;
      }
    }
    i++;
 8013f3c:	697b      	ldr	r3, [r7, #20]
 8013f3e:	3301      	adds	r3, #1
 8013f40:	617b      	str	r3, [r7, #20]
  while (i < DLYB_MAX_UNIT)
 8013f42:	697b      	ldr	r3, [r7, #20]
 8013f44:	2b7f      	cmp	r3, #127	; 0x7f
 8013f46:	d9d1      	bls.n	8013eec <LL_DLYB_GetClockPeriod+0x1c>
 8013f48:	e000      	b.n	8013f4c <LL_DLYB_GetClockPeriod+0x7c>
        break;
 8013f4a:	bf00      	nop
  }

  if (DLYB_MAX_UNIT != i)
 8013f4c:	697b      	ldr	r3, [r7, #20]
 8013f4e:	2b80      	cmp	r3, #128	; 0x80
 8013f50:	d022      	beq.n	8013f98 <LL_DLYB_GetClockPeriod+0xc8>
  {
    /* Determine how many unit delays (nb) span one input clock period */
    lng = (DLYBx->CFGR & DLYB_CFGR_LNG) >> 16U;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	685b      	ldr	r3, [r3, #4]
 8013f56:	0c1b      	lsrs	r3, r3, #16
 8013f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013f5c:	60bb      	str	r3, [r7, #8]
    nb = 10U;
 8013f5e:	230a      	movs	r3, #10
 8013f60:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 8013f62:	e002      	b.n	8013f6a <LL_DLYB_GetClockPeriod+0x9a>
    {
      nb--;
 8013f64:	693b      	ldr	r3, [r7, #16]
 8013f66:	3b01      	subs	r3, #1
 8013f68:	613b      	str	r3, [r7, #16]
    while ((nb > 0U) && ((lng >> nb) == 0U))
 8013f6a:	693b      	ldr	r3, [r7, #16]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d005      	beq.n	8013f7c <LL_DLYB_GetClockPeriod+0xac>
 8013f70:	68ba      	ldr	r2, [r7, #8]
 8013f72:	693b      	ldr	r3, [r7, #16]
 8013f74:	fa22 f303 	lsr.w	r3, r2, r3
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d0f3      	beq.n	8013f64 <LL_DLYB_GetClockPeriod+0x94>
    }
    if (nb != 0U)
 8013f7c:	693b      	ldr	r3, [r7, #16]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d00a      	beq.n	8013f98 <LL_DLYB_GetClockPeriod+0xc8>
    {
      pdlyb_cfg->PhaseSel = nb ;
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	693a      	ldr	r2, [r7, #16]
 8013f86:	605a      	str	r2, [r3, #4]
      pdlyb_cfg->Units = i ;
 8013f88:	683b      	ldr	r3, [r7, #0]
 8013f8a:	697a      	ldr	r2, [r7, #20]
 8013f8c:	601a      	str	r2, [r3, #0]

      /* Disable the length sampling */
      DLYBx->CR = DLYB_CR_SEN;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2202      	movs	r2, #2
 8013f92:	601a      	str	r2, [r3, #0]

      return (uint32_t)SUCCESS;
 8013f94:	2300      	movs	r3, #0
 8013f96:	e003      	b.n	8013fa0 <LL_DLYB_GetClockPeriod+0xd0>
    }
  }

  /* Disable the length sampling */
  DLYBx->CR = DLYB_CR_SEN;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	2202      	movs	r2, #2
 8013f9c:	601a      	str	r2, [r3, #0]

  return (uint32_t)ERROR;
 8013f9e:	2301      	movs	r3, #1

}
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	3718      	adds	r7, #24
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	bd80      	pop	{r7, pc}
 8013fa8:	07ff0000 	.word	0x07ff0000

08013fac <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b096      	sub	sp, #88	; 0x58
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	60f8      	str	r0, [r7, #12]
 8013fb4:	60b9      	str	r1, [r7, #8]
 8013fb6:	607a      	str	r2, [r7, #4]
 8013fb8:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	3303      	adds	r3, #3
 8013fbe:	f023 0303 	bic.w	r3, r3, #3
 8013fc2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8013fc8:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8013fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8013fcc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8013fce:	b672      	cpsid	i
#endif
    return(int_posture);
 8013fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8013fd2:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013fd4:	4b55      	ldr	r3, [pc, #340]	; (801412c <_tx_byte_allocate+0x180>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013fe2:	621a      	str	r2, [r3, #32]
 8013fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013fe6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fea:	f383 8810 	msr	PRIMASK, r3
}
 8013fee:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8013ff0:	6879      	ldr	r1, [r7, #4]
 8013ff2:	68f8      	ldr	r0, [r7, #12]
 8013ff4:	f000 f9b2 	bl	801435c <_tx_byte_pool_search>
 8013ff8:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8013ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8014002:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8014004:	b672      	cpsid	i
    return(int_posture);
 8014006:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8014008:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 801400a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801400c:	2b00      	cmp	r3, #0
 801400e:	d002      	beq.n	8014016 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8014010:	2301      	movs	r3, #1
 8014012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014014:	e006      	b.n	8014024 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	6a1b      	ldr	r3, [r3, #32]
 801401a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801401c:	429a      	cmp	r2, r3
 801401e:	d101      	bne.n	8014024 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8014020:	2301      	movs	r3, #1
 8014022:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8014024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014026:	2b00      	cmp	r3, #0
 8014028:	d0d9      	beq.n	8013fde <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 801402a:	68bb      	ldr	r3, [r7, #8]
 801402c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801402e:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8014030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014032:	2b00      	cmp	r3, #0
 8014034:	d008      	beq.n	8014048 <_tx_byte_allocate+0x9c>
 8014036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014038:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801403a:	6a3b      	ldr	r3, [r7, #32]
 801403c:	f383 8810 	msr	PRIMASK, r3
}
 8014040:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8014042:	2300      	movs	r3, #0
 8014044:	653b      	str	r3, [r7, #80]	; 0x50
 8014046:	e06c      	b.n	8014122 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d061      	beq.n	8014112 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 801404e:	4b38      	ldr	r3, [pc, #224]	; (8014130 <_tx_byte_allocate+0x184>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d007      	beq.n	8014066 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8014056:	2310      	movs	r3, #16
 8014058:	653b      	str	r3, [r7, #80]	; 0x50
 801405a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801405c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801405e:	69fb      	ldr	r3, [r7, #28]
 8014060:	f383 8810 	msr	PRIMASK, r3
}
 8014064:	e05d      	b.n	8014122 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8014066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014068:	4a32      	ldr	r2, [pc, #200]	; (8014134 <_tx_byte_allocate+0x188>)
 801406a:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 801406c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801406e:	68fa      	ldr	r2, [r7, #12]
 8014070:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8014072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014074:	68ba      	ldr	r2, [r7, #8]
 8014076:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8014078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801407a:	687a      	ldr	r2, [r7, #4]
 801407c:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 801407e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014080:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014084:	1c5a      	adds	r2, r3, #1
 8014086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014088:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014090:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014096:	1c5a      	adds	r2, r3, #1
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 801409c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d109      	bne.n	80140b6 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80140a6:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80140a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80140ac:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80140ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80140b2:	675a      	str	r2, [r3, #116]	; 0x74
 80140b4:	e011      	b.n	80140da <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140ba:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80140bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80140c0:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80140c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80140c6:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80140c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140cc:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80140ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80140d2:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80140d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80140d8:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 80140da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140dc:	2209      	movs	r2, #9
 80140de:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80140e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140e2:	2201      	movs	r2, #1
 80140e4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80140e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140e8:	683a      	ldr	r2, [r7, #0]
 80140ea:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80140ec:	4b10      	ldr	r3, [pc, #64]	; (8014130 <_tx_byte_allocate+0x184>)
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	3301      	adds	r3, #1
 80140f2:	4a0f      	ldr	r2, [pc, #60]	; (8014130 <_tx_byte_allocate+0x184>)
 80140f4:	6013      	str	r3, [r2, #0]
 80140f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80140f8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80140fa:	69bb      	ldr	r3, [r7, #24]
 80140fc:	f383 8810 	msr	PRIMASK, r3
}
 8014100:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8014102:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014104:	f001 fb02 	bl	801570c <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8014108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801410a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801410e:	653b      	str	r3, [r7, #80]	; 0x50
 8014110:	e007      	b.n	8014122 <_tx_byte_allocate+0x176>
 8014112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014114:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014116:	697b      	ldr	r3, [r7, #20]
 8014118:	f383 8810 	msr	PRIMASK, r3
}
 801411c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 801411e:	2310      	movs	r3, #16
 8014120:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8014122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8014124:	4618      	mov	r0, r3
 8014126:	3758      	adds	r7, #88	; 0x58
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}
 801412c:	2019742c 	.word	0x2019742c
 8014130:	201974c4 	.word	0x201974c4
 8014134:	08014139 	.word	0x08014139

08014138 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b08e      	sub	sp, #56	; 0x38
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
 8014140:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014142:	f3ef 8310 	mrs	r3, PRIMASK
 8014146:	623b      	str	r3, [r7, #32]
    return(posture);
 8014148:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801414a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801414c:	b672      	cpsid	i
    return(int_posture);
 801414e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8014150:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014156:	4a33      	ldr	r2, [pc, #204]	; (8014224 <_tx_byte_pool_cleanup+0xec>)
 8014158:	4293      	cmp	r3, r2
 801415a:	d158      	bne.n	801420e <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014162:	683a      	ldr	r2, [r7, #0]
 8014164:	429a      	cmp	r2, r3
 8014166:	d152      	bne.n	801420e <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801416c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 801416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014170:	2b00      	cmp	r3, #0
 8014172:	d04c      	beq.n	801420e <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8014174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	4a2b      	ldr	r2, [pc, #172]	; (8014228 <_tx_byte_pool_cleanup+0xf0>)
 801417a:	4293      	cmp	r3, r2
 801417c:	d147      	bne.n	801420e <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 801417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014182:	2b00      	cmp	r3, #0
 8014184:	d043      	beq.n	801420e <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	2200      	movs	r2, #0
 801418a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 801418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014190:	1e5a      	subs	r2, r3, #1
 8014192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014194:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8014196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801419a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d103      	bne.n	80141aa <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 80141a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a4:	2200      	movs	r2, #0
 80141a6:	625a      	str	r2, [r3, #36]	; 0x24
 80141a8:	e013      	b.n	80141d2 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141ae:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141b4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80141b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141ba:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80141bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80141c0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 80141c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141c6:	687a      	ldr	r2, [r7, #4]
 80141c8:	429a      	cmp	r2, r3
 80141ca:	d102      	bne.n	80141d2 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 80141cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80141d0:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141d6:	2b09      	cmp	r3, #9
 80141d8:	d119      	bne.n	801420e <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	2210      	movs	r2, #16
 80141de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80141e2:	4b12      	ldr	r3, [pc, #72]	; (801422c <_tx_byte_pool_cleanup+0xf4>)
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	3301      	adds	r3, #1
 80141e8:	4a10      	ldr	r2, [pc, #64]	; (801422c <_tx_byte_pool_cleanup+0xf4>)
 80141ea:	6013      	str	r3, [r2, #0]
 80141ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80141f0:	693b      	ldr	r3, [r7, #16]
 80141f2:	f383 8810 	msr	PRIMASK, r3
}
 80141f6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80141f8:	6878      	ldr	r0, [r7, #4]
 80141fa:	f001 f987 	bl	801550c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80141fe:	f3ef 8310 	mrs	r3, PRIMASK
 8014202:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014204:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014206:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014208:	b672      	cpsid	i
    return(int_posture);
 801420a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801420c:	637b      	str	r3, [r7, #52]	; 0x34
 801420e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014210:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	f383 8810 	msr	PRIMASK, r3
}
 8014218:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801421a:	bf00      	nop
 801421c:	3738      	adds	r7, #56	; 0x38
 801421e:	46bd      	mov	sp, r7
 8014220:	bd80      	pop	{r7, pc}
 8014222:	bf00      	nop
 8014224:	08014139 	.word	0x08014139
 8014228:	42595445 	.word	0x42595445
 801422c:	201974c4 	.word	0x201974c4

08014230 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b08e      	sub	sp, #56	; 0x38
 8014234:	af00      	add	r7, sp, #0
 8014236:	60f8      	str	r0, [r7, #12]
 8014238:	60b9      	str	r1, [r7, #8]
 801423a:	607a      	str	r2, [r7, #4]
 801423c:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 801423e:	2234      	movs	r2, #52	; 0x34
 8014240:	2100      	movs	r1, #0
 8014242:	68f8      	ldr	r0, [r7, #12]
 8014244:	f015 f884 	bl	8029350 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	f023 0303 	bic.w	r3, r3, #3
 801424e:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	68ba      	ldr	r2, [r7, #8]
 8014254:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	687a      	ldr	r2, [r7, #4]
 801425a:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	683a      	ldr	r2, [r7, #0]
 8014260:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	687a      	ldr	r2, [r7, #4]
 8014266:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	687a      	ldr	r2, [r7, #4]
 801426c:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 801426e:	683b      	ldr	r3, [r7, #0]
 8014270:	f1a3 0208 	sub.w	r2, r3, #8
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	2202      	movs	r2, #2
 801427c:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8014282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014284:	683b      	ldr	r3, [r7, #0]
 8014286:	4413      	add	r3, r2
 8014288:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 801428a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801428c:	3b04      	subs	r3, #4
 801428e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8014294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014296:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8014298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801429a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801429c:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 801429e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142a0:	3b04      	subs	r3, #4
 80142a2:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80142a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80142a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142aa:	687a      	ldr	r2, [r7, #4]
 80142ac:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80142b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 80142b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142ba:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80142c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142c2:	3304      	adds	r3, #4
 80142c4:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80142c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142c8:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80142ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142cc:	4a1f      	ldr	r2, [pc, #124]	; (801434c <_tx_byte_pool_create+0x11c>)
 80142ce:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	2200      	movs	r2, #0
 80142d4:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80142d6:	f3ef 8310 	mrs	r3, PRIMASK
 80142da:	61bb      	str	r3, [r7, #24]
    return(posture);
 80142dc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80142de:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80142e0:	b672      	cpsid	i
    return(int_posture);
 80142e2:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80142e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	4a19      	ldr	r2, [pc, #100]	; (8014350 <_tx_byte_pool_create+0x120>)
 80142ea:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80142ec:	4b19      	ldr	r3, [pc, #100]	; (8014354 <_tx_byte_pool_create+0x124>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d109      	bne.n	8014308 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80142f4:	4a18      	ldr	r2, [pc, #96]	; (8014358 <_tx_byte_pool_create+0x128>)
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	68fa      	ldr	r2, [r7, #12]
 80142fe:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	68fa      	ldr	r2, [r7, #12]
 8014304:	631a      	str	r2, [r3, #48]	; 0x30
 8014306:	e011      	b.n	801432c <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8014308:	4b13      	ldr	r3, [pc, #76]	; (8014358 <_tx_byte_pool_create+0x128>)
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 801430e:	6a3b      	ldr	r3, [r7, #32]
 8014310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014312:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8014314:	6a3b      	ldr	r3, [r7, #32]
 8014316:	68fa      	ldr	r2, [r7, #12]
 8014318:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 801431a:	69fb      	ldr	r3, [r7, #28]
 801431c:	68fa      	ldr	r2, [r7, #12]
 801431e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	69fa      	ldr	r2, [r7, #28]
 8014324:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	6a3a      	ldr	r2, [r7, #32]
 801432a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 801432c:	4b09      	ldr	r3, [pc, #36]	; (8014354 <_tx_byte_pool_create+0x124>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	3301      	adds	r3, #1
 8014332:	4a08      	ldr	r2, [pc, #32]	; (8014354 <_tx_byte_pool_create+0x124>)
 8014334:	6013      	str	r3, [r2, #0]
 8014336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014338:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801433a:	693b      	ldr	r3, [r7, #16]
 801433c:	f383 8810 	msr	PRIMASK, r3
}
 8014340:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8014342:	2300      	movs	r3, #0
}
 8014344:	4618      	mov	r0, r3
 8014346:	3738      	adds	r7, #56	; 0x38
 8014348:	46bd      	mov	sp, r7
 801434a:	bd80      	pop	{r7, pc}
 801434c:	ffffeeee 	.word	0xffffeeee
 8014350:	42595445 	.word	0x42595445
 8014354:	20197420 	.word	0x20197420
 8014358:	2019741c 	.word	0x2019741c

0801435c <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 801435c:	b480      	push	{r7}
 801435e:	b097      	sub	sp, #92	; 0x5c
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
 8014364:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8014366:	2300      	movs	r3, #0
 8014368:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801436a:	f3ef 8310 	mrs	r3, PRIMASK
 801436e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8014370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8014372:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014374:	b672      	cpsid	i
    return(int_posture);
 8014376:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8014378:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	689a      	ldr	r2, [r3, #8]
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	68db      	ldr	r3, [r3, #12]
 8014382:	3b02      	subs	r3, #2
 8014384:	00db      	lsls	r3, r3, #3
 8014386:	4413      	add	r3, r2
 8014388:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 801438a:	683a      	ldr	r2, [r7, #0]
 801438c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801438e:	429a      	cmp	r2, r3
 8014390:	d308      	bcc.n	80143a4 <_tx_byte_pool_search+0x48>
 8014392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014394:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014396:	69fb      	ldr	r3, [r7, #28]
 8014398:	f383 8810 	msr	PRIMASK, r3
}
 801439c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 801439e:	2300      	movs	r3, #0
 80143a0:	653b      	str	r3, [r7, #80]	; 0x50
 80143a2:	e0dd      	b.n	8014560 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80143a4:	4b72      	ldr	r3, [pc, #456]	; (8014570 <_tx_byte_pool_search+0x214>)
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80143ae:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	695b      	ldr	r3, [r3, #20]
 80143b4:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	68db      	ldr	r3, [r3, #12]
 80143ba:	3301      	adds	r3, #1
 80143bc:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 80143be:	2300      	movs	r3, #0
 80143c0:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80143c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143c4:	3304      	adds	r3, #4
 80143c6:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80143c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ca:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80143cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	4a68      	ldr	r2, [pc, #416]	; (8014574 <_tx_byte_pool_search+0x218>)
 80143d2:	4293      	cmp	r3, r2
 80143d4:	d143      	bne.n	801445e <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 80143d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d104      	bne.n	80143e6 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80143e0:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 80143e2:	2301      	movs	r3, #1
 80143e4:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80143e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143e8:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 80143ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 80143f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80143f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80143f4:	1ad3      	subs	r3, r2, r3
 80143f6:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80143f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143fa:	3b08      	subs	r3, #8
 80143fc:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 80143fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	429a      	cmp	r2, r3
 8014404:	d257      	bcs.n	80144b6 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8014406:	2300      	movs	r3, #0
 8014408:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801440c:	3304      	adds	r3, #4
 801440e:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8014410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014412:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8014414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	4a56      	ldr	r2, [pc, #344]	; (8014574 <_tx_byte_pool_search+0x218>)
 801441a:	4293      	cmp	r3, r2
 801441c:	d113      	bne.n	8014446 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014420:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8014422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014424:	681a      	ldr	r2, [r3, #0]
 8014426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014428:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	68db      	ldr	r3, [r3, #12]
 801442e:	1e5a      	subs	r2, r3, #1
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	695b      	ldr	r3, [r3, #20]
 8014438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801443a:	429a      	cmp	r2, r3
 801443c:	d114      	bne.n	8014468 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014442:	615a      	str	r2, [r3, #20]
 8014444:	e010      	b.n	8014468 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8014446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014448:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 801444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8014450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014452:	2b00      	cmp	r3, #0
 8014454:	d008      	beq.n	8014468 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8014456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014458:	3b01      	subs	r3, #1
 801445a:	64bb      	str	r3, [r7, #72]	; 0x48
 801445c:	e004      	b.n	8014468 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801445e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014460:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8014462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8014468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801446a:	2b00      	cmp	r3, #0
 801446c:	d002      	beq.n	8014474 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 801446e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014470:	3b01      	subs	r3, #1
 8014472:	64bb      	str	r3, [r7, #72]	; 0x48
 8014474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014476:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014478:	693b      	ldr	r3, [r7, #16]
 801447a:	f383 8810 	msr	PRIMASK, r3
}
 801447e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014480:	f3ef 8310 	mrs	r3, PRIMASK
 8014484:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014486:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014488:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801448a:	b672      	cpsid	i
    return(int_posture);
 801448c:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 801448e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	6a1b      	ldr	r3, [r3, #32]
 8014494:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014496:	429a      	cmp	r2, r3
 8014498:	d009      	beq.n	80144ae <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	695b      	ldr	r3, [r3, #20]
 801449e:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	68db      	ldr	r3, [r3, #12]
 80144a4:	3301      	adds	r3, #1
 80144a6:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80144ac:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 80144ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d186      	bne.n	80143c2 <_tx_byte_pool_search+0x66>
 80144b4:	e000      	b.n	80144b8 <_tx_byte_pool_search+0x15c>
                    break;
 80144b6:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 80144b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d048      	beq.n	8014550 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 80144be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80144c0:	683b      	ldr	r3, [r7, #0]
 80144c2:	1ad3      	subs	r3, r2, r3
 80144c4:	2b13      	cmp	r3, #19
 80144c6:	d91e      	bls.n	8014506 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	3308      	adds	r3, #8
 80144cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80144ce:	4413      	add	r3, r2
 80144d0:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80144d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144d4:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80144d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80144d8:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 80144da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144dc:	681a      	ldr	r2, [r3, #0]
 80144de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144e0:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80144e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e4:	3304      	adds	r3, #4
 80144e6:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80144e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ea:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 80144ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144ee:	4a21      	ldr	r2, [pc, #132]	; (8014574 <_tx_byte_pool_search+0x218>)
 80144f0:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	68db      	ldr	r3, [r3, #12]
 80144f6:	1c5a      	adds	r2, r3, #1
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 80144fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014500:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8014502:	683b      	ldr	r3, [r7, #0]
 8014504:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8014506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014508:	3304      	adds	r3, #4
 801450a:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 801450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801450e:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8014510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014512:	687a      	ldr	r2, [r7, #4]
 8014514:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	689a      	ldr	r2, [r3, #8]
 801451a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801451c:	1ad3      	subs	r3, r2, r3
 801451e:	f1a3 0208 	sub.w	r2, r3, #8
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	695b      	ldr	r3, [r3, #20]
 801452a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801452c:	429a      	cmp	r2, r3
 801452e:	d105      	bne.n	801453c <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8014530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014532:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8014534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014536:	681a      	ldr	r2, [r3, #0]
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	615a      	str	r2, [r3, #20]
 801453c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801453e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	f383 8810 	msr	PRIMASK, r3
}
 8014546:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8014548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801454a:	3308      	adds	r3, #8
 801454c:	653b      	str	r3, [r7, #80]	; 0x50
 801454e:	e007      	b.n	8014560 <_tx_byte_pool_search+0x204>
 8014550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014552:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	f383 8810 	msr	PRIMASK, r3
}
 801455a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 801455c:	2300      	movs	r3, #0
 801455e:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8014560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8014562:	4618      	mov	r0, r3
 8014564:	375c      	adds	r7, #92	; 0x5c
 8014566:	46bd      	mov	sp, r7
 8014568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456c:	4770      	bx	lr
 801456e:	bf00      	nop
 8014570:	2019742c 	.word	0x2019742c
 8014574:	ffffeeee 	.word	0xffffeeee

08014578 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 801457c:	f000 ff04 	bl	8015388 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8014580:	f001 fa8c 	bl	8015a9c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8014584:	4b12      	ldr	r3, [pc, #72]	; (80145d0 <_tx_initialize_high_level+0x58>)
 8014586:	2200      	movs	r2, #0
 8014588:	601a      	str	r2, [r3, #0]
 801458a:	4b12      	ldr	r3, [pc, #72]	; (80145d4 <_tx_initialize_high_level+0x5c>)
 801458c:	2200      	movs	r2, #0
 801458e:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8014590:	4b11      	ldr	r3, [pc, #68]	; (80145d8 <_tx_initialize_high_level+0x60>)
 8014592:	2200      	movs	r2, #0
 8014594:	601a      	str	r2, [r3, #0]
 8014596:	4b11      	ldr	r3, [pc, #68]	; (80145dc <_tx_initialize_high_level+0x64>)
 8014598:	2200      	movs	r2, #0
 801459a:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 801459c:	4b10      	ldr	r3, [pc, #64]	; (80145e0 <_tx_initialize_high_level+0x68>)
 801459e:	2200      	movs	r2, #0
 80145a0:	601a      	str	r2, [r3, #0]
 80145a2:	4b10      	ldr	r3, [pc, #64]	; (80145e4 <_tx_initialize_high_level+0x6c>)
 80145a4:	2200      	movs	r2, #0
 80145a6:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80145a8:	4b0f      	ldr	r3, [pc, #60]	; (80145e8 <_tx_initialize_high_level+0x70>)
 80145aa:	2200      	movs	r2, #0
 80145ac:	601a      	str	r2, [r3, #0]
 80145ae:	4b0f      	ldr	r3, [pc, #60]	; (80145ec <_tx_initialize_high_level+0x74>)
 80145b0:	2200      	movs	r2, #0
 80145b2:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80145b4:	4b0e      	ldr	r3, [pc, #56]	; (80145f0 <_tx_initialize_high_level+0x78>)
 80145b6:	2200      	movs	r2, #0
 80145b8:	601a      	str	r2, [r3, #0]
 80145ba:	4b0e      	ldr	r3, [pc, #56]	; (80145f4 <_tx_initialize_high_level+0x7c>)
 80145bc:	2200      	movs	r2, #0
 80145be:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80145c0:	4b0d      	ldr	r3, [pc, #52]	; (80145f8 <_tx_initialize_high_level+0x80>)
 80145c2:	2200      	movs	r2, #0
 80145c4:	601a      	str	r2, [r3, #0]
 80145c6:	4b0d      	ldr	r3, [pc, #52]	; (80145fc <_tx_initialize_high_level+0x84>)
 80145c8:	2200      	movs	r2, #0
 80145ca:	601a      	str	r2, [r3, #0]
#endif
}
 80145cc:	bf00      	nop
 80145ce:	bd80      	pop	{r7, pc}
 80145d0:	201973f4 	.word	0x201973f4
 80145d4:	201973f8 	.word	0x201973f8
 80145d8:	201973fc 	.word	0x201973fc
 80145dc:	20197400 	.word	0x20197400
 80145e0:	20197404 	.word	0x20197404
 80145e4:	20197408 	.word	0x20197408
 80145e8:	20197414 	.word	0x20197414
 80145ec:	20197418 	.word	0x20197418
 80145f0:	2019741c 	.word	0x2019741c
 80145f4:	20197420 	.word	0x20197420
 80145f8:	2019740c 	.word	0x2019740c
 80145fc:	20197410 	.word	0x20197410

08014600 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8014604:	4b10      	ldr	r3, [pc, #64]	; (8014648 <_tx_initialize_kernel_enter+0x48>)
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 801460c:	d00c      	beq.n	8014628 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 801460e:	4b0e      	ldr	r3, [pc, #56]	; (8014648 <_tx_initialize_kernel_enter+0x48>)
 8014610:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8014614:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8014616:	f7eb fe49 	bl	80002ac <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 801461a:	f7ff ffad 	bl	8014578 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 801461e:	4b0b      	ldr	r3, [pc, #44]	; (801464c <_tx_initialize_kernel_enter+0x4c>)
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	3301      	adds	r3, #1
 8014624:	4a09      	ldr	r2, [pc, #36]	; (801464c <_tx_initialize_kernel_enter+0x4c>)
 8014626:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8014628:	4b07      	ldr	r3, [pc, #28]	; (8014648 <_tx_initialize_kernel_enter+0x48>)
 801462a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 801462e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8014630:	4b07      	ldr	r3, [pc, #28]	; (8014650 <_tx_initialize_kernel_enter+0x50>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	4618      	mov	r0, r3
 8014636:	f7ec f8ef 	bl	8000818 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 801463a:	4b03      	ldr	r3, [pc, #12]	; (8014648 <_tx_initialize_kernel_enter+0x48>)
 801463c:	2200      	movs	r2, #0
 801463e:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8014640:	f7eb fe70 	bl	8000324 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8014644:	bf00      	nop
 8014646:	bd80      	pop	{r7, pc}
 8014648:	20000054 	.word	0x20000054
 801464c:	201974c4 	.word	0x201974c4
 8014650:	20197424 	.word	0x20197424

08014654 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b08e      	sub	sp, #56	; 0x38
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801465e:	f3ef 8310 	mrs	r3, PRIMASK
 8014662:	623b      	str	r3, [r7, #32]
    return(posture);
 8014664:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014666:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014668:	b672      	cpsid	i
    return(int_posture);
 801466a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 801466c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014672:	4a37      	ldr	r2, [pc, #220]	; (8014750 <_tx_queue_cleanup+0xfc>)
 8014674:	4293      	cmp	r3, r2
 8014676:	d161      	bne.n	801473c <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801467e:	683a      	ldr	r2, [r7, #0]
 8014680:	429a      	cmp	r2, r3
 8014682:	d15b      	bne.n	801473c <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014688:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 801468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801468c:	2b00      	cmp	r3, #0
 801468e:	d055      	beq.n	801473c <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 8014690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	4a2f      	ldr	r2, [pc, #188]	; (8014754 <_tx_queue_cleanup+0x100>)
 8014696:	4293      	cmp	r3, r2
 8014698:	d150      	bne.n	801473c <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 801469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d04c      	beq.n	801473c <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	2200      	movs	r2, #0
 80146a6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 80146a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146ac:	1e5a      	subs	r2, r3, #1
 80146ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b0:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80146b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146b6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80146b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d103      	bne.n	80146c6 <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80146be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c0:	2200      	movs	r2, #0
 80146c2:	629a      	str	r2, [r3, #40]	; 0x28
 80146c4:	e013      	b.n	80146ee <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146ca:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80146d0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80146d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146d6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80146d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146dc:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 80146de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146e2:	687a      	ldr	r2, [r7, #4]
 80146e4:	429a      	cmp	r2, r3
 80146e6:	d102      	bne.n	80146ee <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 80146e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146ec:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146f2:	2b05      	cmp	r3, #5
 80146f4:	d122      	bne.n	801473c <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 80146f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146f8:	691b      	ldr	r3, [r3, #16]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d004      	beq.n	8014708 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	220b      	movs	r2, #11
 8014702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8014706:	e003      	b.n	8014710 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	220a      	movs	r2, #10
 801470c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8014710:	4b11      	ldr	r3, [pc, #68]	; (8014758 <_tx_queue_cleanup+0x104>)
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	3301      	adds	r3, #1
 8014716:	4a10      	ldr	r2, [pc, #64]	; (8014758 <_tx_queue_cleanup+0x104>)
 8014718:	6013      	str	r3, [r2, #0]
 801471a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801471c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801471e:	693b      	ldr	r3, [r7, #16]
 8014720:	f383 8810 	msr	PRIMASK, r3
}
 8014724:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8014726:	6878      	ldr	r0, [r7, #4]
 8014728:	f000 fef0 	bl	801550c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801472c:	f3ef 8310 	mrs	r3, PRIMASK
 8014730:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014732:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014734:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014736:	b672      	cpsid	i
    return(int_posture);
 8014738:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801473a:	637b      	str	r3, [r7, #52]	; 0x34
 801473c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801473e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	f383 8810 	msr	PRIMASK, r3
}
 8014746:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8014748:	bf00      	nop
 801474a:	3738      	adds	r7, #56	; 0x38
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}
 8014750:	08014655 	.word	0x08014655
 8014754:	51554555 	.word	0x51554555
 8014758:	201974c4 	.word	0x201974c4

0801475c <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b08c      	sub	sp, #48	; 0x30
 8014760:	af00      	add	r7, sp, #0
 8014762:	60f8      	str	r0, [r7, #12]
 8014764:	60b9      	str	r1, [r7, #8]
 8014766:	607a      	str	r2, [r7, #4]
 8014768:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 801476a:	2238      	movs	r2, #56	; 0x38
 801476c:	2100      	movs	r1, #0
 801476e:	68f8      	ldr	r0, [r7, #12]
 8014770:	f014 fdee 	bl	8029350 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	68ba      	ldr	r2, [r7, #8]
 8014778:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	687a      	ldr	r2, [r7, #4]
 801477e:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	009b      	lsls	r3, r3, #2
 8014784:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014786:	fbb2 f3f3 	udiv	r3, r2, r3
 801478a:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 801478c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801478e:	687a      	ldr	r2, [r7, #4]
 8014790:	fb02 f303 	mul.w	r3, r2, r3
 8014794:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	683a      	ldr	r2, [r7, #0]
 801479a:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	699a      	ldr	r2, [r3, #24]
 80147a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147a2:	009b      	lsls	r3, r3, #2
 80147a4:	441a      	add	r2, r3
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	683a      	ldr	r2, [r7, #0]
 80147ae:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	683a      	ldr	r2, [r7, #0]
 80147b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147ba:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147c0:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80147c2:	f3ef 8310 	mrs	r3, PRIMASK
 80147c6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80147c8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80147ca:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80147cc:	b672      	cpsid	i
    return(int_posture);
 80147ce:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 80147d0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	4a18      	ldr	r2, [pc, #96]	; (8014838 <_tx_queue_create+0xdc>)
 80147d6:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 80147d8:	4b18      	ldr	r3, [pc, #96]	; (801483c <_tx_queue_create+0xe0>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d109      	bne.n	80147f4 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 80147e0:	4a17      	ldr	r2, [pc, #92]	; (8014840 <_tx_queue_create+0xe4>)
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	68fa      	ldr	r2, [r7, #12]
 80147ea:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	68fa      	ldr	r2, [r7, #12]
 80147f0:	635a      	str	r2, [r3, #52]	; 0x34
 80147f2:	e011      	b.n	8014818 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 80147f4:	4b12      	ldr	r3, [pc, #72]	; (8014840 <_tx_queue_create+0xe4>)
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 80147fa:	6a3b      	ldr	r3, [r7, #32]
 80147fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147fe:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8014800:	6a3b      	ldr	r3, [r7, #32]
 8014802:	68fa      	ldr	r2, [r7, #12]
 8014804:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8014806:	69fb      	ldr	r3, [r7, #28]
 8014808:	68fa      	ldr	r2, [r7, #12]
 801480a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	69fa      	ldr	r2, [r7, #28]
 8014810:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	6a3a      	ldr	r2, [r7, #32]
 8014816:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8014818:	4b08      	ldr	r3, [pc, #32]	; (801483c <_tx_queue_create+0xe0>)
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	3301      	adds	r3, #1
 801481e:	4a07      	ldr	r2, [pc, #28]	; (801483c <_tx_queue_create+0xe0>)
 8014820:	6013      	str	r3, [r2, #0]
 8014822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014824:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014826:	693b      	ldr	r3, [r7, #16]
 8014828:	f383 8810 	msr	PRIMASK, r3
}
 801482c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801482e:	2300      	movs	r3, #0
}
 8014830:	4618      	mov	r0, r3
 8014832:	3730      	adds	r7, #48	; 0x30
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}
 8014838:	51554555 	.word	0x51554555
 801483c:	20197400 	.word	0x20197400
 8014840:	201973fc 	.word	0x201973fc

08014844 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b096      	sub	sp, #88	; 0x58
 8014848:	af00      	add	r7, sp, #0
 801484a:	60f8      	str	r0, [r7, #12]
 801484c:	60b9      	str	r1, [r7, #8]
 801484e:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8014850:	2300      	movs	r3, #0
 8014852:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014854:	f3ef 8310 	mrs	r3, PRIMASK
 8014858:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 801485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 801485c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 801485e:	b672      	cpsid	i
    return(int_posture);
 8014860:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 8014862:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014868:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	691b      	ldr	r3, [r3, #16]
 801486e:	2b00      	cmp	r3, #0
 8014870:	f000 8136 	beq.w	8014ae0 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8014874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014876:	2b00      	cmp	r3, #0
 8014878:	d13c      	bne.n	80148f4 <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	6a1b      	ldr	r3, [r3, #32]
 801487e:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	689b      	ldr	r3, [r3, #8]
 8014888:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 801488a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801488c:	1d13      	adds	r3, r2, #4
 801488e:	657b      	str	r3, [r7, #84]	; 0x54
 8014890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014892:	1d19      	adds	r1, r3, #4
 8014894:	6539      	str	r1, [r7, #80]	; 0x50
 8014896:	6812      	ldr	r2, [r2, #0]
 8014898:	601a      	str	r2, [r3, #0]
 801489a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801489c:	2b01      	cmp	r3, #1
 801489e:	d90e      	bls.n	80148be <_tx_queue_receive+0x7a>
 80148a0:	e007      	b.n	80148b2 <_tx_queue_receive+0x6e>
 80148a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80148a4:	1d13      	adds	r3, r2, #4
 80148a6:	657b      	str	r3, [r7, #84]	; 0x54
 80148a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148aa:	1d19      	adds	r1, r3, #4
 80148ac:	6539      	str	r1, [r7, #80]	; 0x50
 80148ae:	6812      	ldr	r2, [r2, #0]
 80148b0:	601a      	str	r2, [r3, #0]
 80148b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148b4:	3b01      	subs	r3, #1
 80148b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80148b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d1f1      	bne.n	80148a2 <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	69db      	ldr	r3, [r3, #28]
 80148c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80148c4:	429a      	cmp	r2, r3
 80148c6:	d102      	bne.n	80148ce <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	699b      	ldr	r3, [r3, #24]
 80148cc:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80148d2:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	695b      	ldr	r3, [r3, #20]
 80148d8:	1c5a      	adds	r2, r3, #1
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	691b      	ldr	r3, [r3, #16]
 80148e2:	1e5a      	subs	r2, r3, #1
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	611a      	str	r2, [r3, #16]
 80148e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80148ea:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80148ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ee:	f383 8810 	msr	PRIMASK, r3
}
 80148f2:	e163      	b.n	8014bbc <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148f8:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 80148fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014900:	2b01      	cmp	r3, #1
 8014902:	d153      	bne.n	80149ac <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8014904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014908:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 801490a:	68bb      	ldr	r3, [r7, #8]
 801490c:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	689b      	ldr	r3, [r3, #8]
 8014912:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014914:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014916:	1d13      	adds	r3, r2, #4
 8014918:	657b      	str	r3, [r7, #84]	; 0x54
 801491a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801491c:	1d19      	adds	r1, r3, #4
 801491e:	6539      	str	r1, [r7, #80]	; 0x50
 8014920:	6812      	ldr	r2, [r2, #0]
 8014922:	601a      	str	r2, [r3, #0]
 8014924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014926:	2b01      	cmp	r3, #1
 8014928:	d90e      	bls.n	8014948 <_tx_queue_receive+0x104>
 801492a:	e007      	b.n	801493c <_tx_queue_receive+0xf8>
 801492c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801492e:	1d13      	adds	r3, r2, #4
 8014930:	657b      	str	r3, [r7, #84]	; 0x54
 8014932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014934:	1d19      	adds	r1, r3, #4
 8014936:	6539      	str	r1, [r7, #80]	; 0x50
 8014938:	6812      	ldr	r2, [r2, #0]
 801493a:	601a      	str	r2, [r3, #0]
 801493c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801493e:	3b01      	subs	r3, #1
 8014940:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014944:	2b00      	cmp	r3, #0
 8014946:	d1f1      	bne.n	801492c <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8014948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801494a:	3b01      	subs	r3, #1
 801494c:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 801494e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014950:	2b00      	cmp	r3, #0
 8014952:	d103      	bne.n	801495c <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	2200      	movs	r2, #0
 8014958:	629a      	str	r2, [r3, #40]	; 0x28
 801495a:	e00e      	b.n	801497a <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 801495c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014960:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014966:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8014968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801496a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801496c:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 801496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014970:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014972:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8014974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014978:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801497e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014982:	2200      	movs	r2, #0
 8014984:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8014986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014988:	2200      	movs	r2, #0
 801498a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801498e:	4b8e      	ldr	r3, [pc, #568]	; (8014bc8 <_tx_queue_receive+0x384>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	3301      	adds	r3, #1
 8014994:	4a8c      	ldr	r2, [pc, #560]	; (8014bc8 <_tx_queue_receive+0x384>)
 8014996:	6013      	str	r3, [r2, #0]
 8014998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801499a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801499e:	f383 8810 	msr	PRIMASK, r3
}
 80149a2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 80149a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80149a6:	f000 fdb1 	bl	801550c <_tx_thread_system_resume>
 80149aa:	e107      	b.n	8014bbc <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	6a1b      	ldr	r3, [r3, #32]
 80149b0:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	689b      	ldr	r3, [r3, #8]
 80149ba:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80149bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80149be:	1d13      	adds	r3, r2, #4
 80149c0:	657b      	str	r3, [r7, #84]	; 0x54
 80149c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149c4:	1d19      	adds	r1, r3, #4
 80149c6:	6539      	str	r1, [r7, #80]	; 0x50
 80149c8:	6812      	ldr	r2, [r2, #0]
 80149ca:	601a      	str	r2, [r3, #0]
 80149cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149ce:	2b01      	cmp	r3, #1
 80149d0:	d90e      	bls.n	80149f0 <_tx_queue_receive+0x1ac>
 80149d2:	e007      	b.n	80149e4 <_tx_queue_receive+0x1a0>
 80149d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80149d6:	1d13      	adds	r3, r2, #4
 80149d8:	657b      	str	r3, [r7, #84]	; 0x54
 80149da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149dc:	1d19      	adds	r1, r3, #4
 80149de:	6539      	str	r1, [r7, #80]	; 0x50
 80149e0:	6812      	ldr	r2, [r2, #0]
 80149e2:	601a      	str	r2, [r3, #0]
 80149e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149e6:	3b01      	subs	r3, #1
 80149e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80149ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d1f1      	bne.n	80149d4 <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	69db      	ldr	r3, [r3, #28]
 80149f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80149f6:	429a      	cmp	r2, r3
 80149f8:	d102      	bne.n	8014a00 <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	699b      	ldr	r3, [r3, #24]
 80149fe:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a04:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8014a06:	4b70      	ldr	r3, [pc, #448]	; (8014bc8 <_tx_queue_receive+0x384>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	3301      	adds	r3, #1
 8014a0c:	4a6e      	ldr	r2, [pc, #440]	; (8014bc8 <_tx_queue_receive+0x384>)
 8014a0e:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8014a10:	4b6d      	ldr	r3, [pc, #436]	; (8014bc8 <_tx_queue_receive+0x384>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	3b01      	subs	r3, #1
 8014a16:	4a6c      	ldr	r2, [pc, #432]	; (8014bc8 <_tx_queue_receive+0x384>)
 8014a18:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8014a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a1e:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a24:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	689b      	ldr	r3, [r3, #8]
 8014a2a:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014a2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a2e:	1d13      	adds	r3, r2, #4
 8014a30:	657b      	str	r3, [r7, #84]	; 0x54
 8014a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a34:	1d19      	adds	r1, r3, #4
 8014a36:	6539      	str	r1, [r7, #80]	; 0x50
 8014a38:	6812      	ldr	r2, [r2, #0]
 8014a3a:	601a      	str	r2, [r3, #0]
 8014a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a3e:	2b01      	cmp	r3, #1
 8014a40:	d90e      	bls.n	8014a60 <_tx_queue_receive+0x21c>
 8014a42:	e007      	b.n	8014a54 <_tx_queue_receive+0x210>
 8014a44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a46:	1d13      	adds	r3, r2, #4
 8014a48:	657b      	str	r3, [r7, #84]	; 0x54
 8014a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a4c:	1d19      	adds	r1, r3, #4
 8014a4e:	6539      	str	r1, [r7, #80]	; 0x50
 8014a50:	6812      	ldr	r2, [r2, #0]
 8014a52:	601a      	str	r2, [r3, #0]
 8014a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a56:	3b01      	subs	r3, #1
 8014a58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d1f1      	bne.n	8014a44 <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	69db      	ldr	r3, [r3, #28]
 8014a64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014a66:	429a      	cmp	r2, r3
 8014a68:	d102      	bne.n	8014a70 <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	699b      	ldr	r3, [r3, #24]
 8014a6e:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014a74:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a7a:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8014a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a7e:	3b01      	subs	r3, #1
 8014a80:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8014a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d103      	bne.n	8014a90 <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	629a      	str	r2, [r3, #40]	; 0x28
 8014a8e:	e00e      	b.n	8014aae <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8014a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a94:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a9a:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014aa0:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8014aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014aa6:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 8014aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014aac:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014ab2:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8014aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014abc:	2200      	movs	r2, #0
 8014abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8014ac2:	4b41      	ldr	r3, [pc, #260]	; (8014bc8 <_tx_queue_receive+0x384>)
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	3301      	adds	r3, #1
 8014ac8:	4a3f      	ldr	r2, [pc, #252]	; (8014bc8 <_tx_queue_receive+0x384>)
 8014aca:	6013      	str	r3, [r2, #0]
 8014acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ace:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014ad0:	6a3b      	ldr	r3, [r7, #32]
 8014ad2:	f383 8810 	msr	PRIMASK, r3
}
 8014ad6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8014ad8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014ada:	f000 fd17 	bl	801550c <_tx_thread_system_resume>
 8014ade:	e06d      	b.n	8014bbc <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d062      	beq.n	8014bac <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8014ae6:	4b38      	ldr	r3, [pc, #224]	; (8014bc8 <_tx_queue_receive+0x384>)
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d008      	beq.n	8014b00 <_tx_queue_receive+0x2bc>
 8014aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014af0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014af2:	69fb      	ldr	r3, [r7, #28]
 8014af4:	f383 8810 	msr	PRIMASK, r3
}
 8014af8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 8014afa:	230a      	movs	r3, #10
 8014afc:	64bb      	str	r3, [r7, #72]	; 0x48
 8014afe:	e05d      	b.n	8014bbc <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014b00:	4b32      	ldr	r3, [pc, #200]	; (8014bcc <_tx_queue_receive+0x388>)
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8014b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b08:	4a31      	ldr	r2, [pc, #196]	; (8014bd0 <_tx_queue_receive+0x38c>)
 8014b0a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8014b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b0e:	68fa      	ldr	r2, [r7, #12]
 8014b10:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 8014b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b14:	68ba      	ldr	r2, [r7, #8]
 8014b16:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8014b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8014b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014b26:	1c5a      	adds	r2, r3, #1
 8014b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b2a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8014b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d109      	bne.n	8014b48 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014b38:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8014b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014b3e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8014b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014b44:	675a      	str	r2, [r3, #116]	; 0x74
 8014b46:	e011      	b.n	8014b6c <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b4c:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8014b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b52:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8014b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b58:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8014b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b5e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8014b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014b64:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8014b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014b6a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8014b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b6e:	1c5a      	adds	r2, r3, #1
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8014b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b76:	2205      	movs	r2, #5
 8014b78:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b7c:	2201      	movs	r2, #1
 8014b7e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8014b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b82:	687a      	ldr	r2, [r7, #4]
 8014b84:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014b86:	4b10      	ldr	r3, [pc, #64]	; (8014bc8 <_tx_queue_receive+0x384>)
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	3301      	adds	r3, #1
 8014b8c:	4a0e      	ldr	r2, [pc, #56]	; (8014bc8 <_tx_queue_receive+0x384>)
 8014b8e:	6013      	str	r3, [r2, #0]
 8014b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b92:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014b94:	69bb      	ldr	r3, [r7, #24]
 8014b96:	f383 8810 	msr	PRIMASK, r3
}
 8014b9a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8014b9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014b9e:	f000 fdb5 	bl	801570c <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8014ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014ba8:	64bb      	str	r3, [r7, #72]	; 0x48
 8014baa:	e007      	b.n	8014bbc <_tx_queue_receive+0x378>
 8014bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014bae:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	f383 8810 	msr	PRIMASK, r3
}
 8014bb6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 8014bb8:	230a      	movs	r3, #10
 8014bba:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 8014bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	3758      	adds	r7, #88	; 0x58
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	bd80      	pop	{r7, pc}
 8014bc6:	bf00      	nop
 8014bc8:	201974c4 	.word	0x201974c4
 8014bcc:	2019742c 	.word	0x2019742c
 8014bd0:	08014655 	.word	0x08014655

08014bd4 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b094      	sub	sp, #80	; 0x50
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	60f8      	str	r0, [r7, #12]
 8014bdc:	60b9      	str	r1, [r7, #8]
 8014bde:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8014be0:	2300      	movs	r3, #0
 8014be2:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014be4:	f3ef 8310 	mrs	r3, PRIMASK
 8014be8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014bec:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8014bee:	b672      	cpsid	i
    return(int_posture);
 8014bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8014bf2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bf8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	695b      	ldr	r3, [r3, #20]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	f000 809b 	beq.w	8014d3a <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8014c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d13c      	bne.n	8014c84 <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	695b      	ldr	r3, [r3, #20]
 8014c0e:	1e5a      	subs	r2, r3, #1
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	691b      	ldr	r3, [r3, #16]
 8014c18:	1c5a      	adds	r2, r3, #1
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8014c1e:	68bb      	ldr	r3, [r7, #8]
 8014c20:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c26:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	689b      	ldr	r3, [r3, #8]
 8014c2c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014c2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014c30:	1d13      	adds	r3, r2, #4
 8014c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c36:	1d19      	adds	r1, r3, #4
 8014c38:	64b9      	str	r1, [r7, #72]	; 0x48
 8014c3a:	6812      	ldr	r2, [r2, #0]
 8014c3c:	601a      	str	r2, [r3, #0]
 8014c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c40:	2b01      	cmp	r3, #1
 8014c42:	d90e      	bls.n	8014c62 <_tx_queue_send+0x8e>
 8014c44:	e007      	b.n	8014c56 <_tx_queue_send+0x82>
 8014c46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014c48:	1d13      	adds	r3, r2, #4
 8014c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c4e:	1d19      	adds	r1, r3, #4
 8014c50:	64b9      	str	r1, [r7, #72]	; 0x48
 8014c52:	6812      	ldr	r2, [r2, #0]
 8014c54:	601a      	str	r2, [r3, #0]
 8014c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c58:	3b01      	subs	r3, #1
 8014c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8014c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d1f1      	bne.n	8014c46 <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	69db      	ldr	r3, [r3, #28]
 8014c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014c68:	429a      	cmp	r2, r3
 8014c6a:	d102      	bne.n	8014c72 <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	699b      	ldr	r3, [r3, #24]
 8014c70:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014c76:	625a      	str	r2, [r3, #36]	; 0x24
 8014c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c7a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014c7c:	6a3b      	ldr	r3, [r7, #32]
 8014c7e:	f383 8810 	msr	PRIMASK, r3
}
 8014c82:	e0c8      	b.n	8014e16 <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c88:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8014c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c8c:	3b01      	subs	r3, #1
 8014c8e:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8014c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d103      	bne.n	8014c9e <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	2200      	movs	r2, #0
 8014c9a:	629a      	str	r2, [r3, #40]	; 0x28
 8014c9c:	e012      	b.n	8014cc4 <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8014c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ca0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8014ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014caa:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cb0:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8014cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014cbc:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8014cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cc2:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014cc8:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ccc:	2200      	movs	r2, #0
 8014cce:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8014cd0:	68bb      	ldr	r3, [r7, #8]
 8014cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8014cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cd8:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	689b      	ldr	r3, [r3, #8]
 8014cde:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014ce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014ce2:	1d13      	adds	r3, r2, #4
 8014ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ce8:	1d19      	adds	r1, r3, #4
 8014cea:	64b9      	str	r1, [r7, #72]	; 0x48
 8014cec:	6812      	ldr	r2, [r2, #0]
 8014cee:	601a      	str	r2, [r3, #0]
 8014cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014cf2:	2b01      	cmp	r3, #1
 8014cf4:	d90e      	bls.n	8014d14 <_tx_queue_send+0x140>
 8014cf6:	e007      	b.n	8014d08 <_tx_queue_send+0x134>
 8014cf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014cfa:	1d13      	adds	r3, r2, #4
 8014cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d00:	1d19      	adds	r1, r3, #4
 8014d02:	64b9      	str	r1, [r7, #72]	; 0x48
 8014d04:	6812      	ldr	r2, [r2, #0]
 8014d06:	601a      	str	r2, [r3, #0]
 8014d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d0a:	3b01      	subs	r3, #1
 8014d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8014d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d1f1      	bne.n	8014cf8 <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8014d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d16:	2200      	movs	r2, #0
 8014d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014d1c:	4b40      	ldr	r3, [pc, #256]	; (8014e20 <_tx_queue_send+0x24c>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	3301      	adds	r3, #1
 8014d22:	4a3f      	ldr	r2, [pc, #252]	; (8014e20 <_tx_queue_send+0x24c>)
 8014d24:	6013      	str	r3, [r2, #0]
 8014d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d28:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d2a:	69fb      	ldr	r3, [r7, #28]
 8014d2c:	f383 8810 	msr	PRIMASK, r3
}
 8014d30:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8014d32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014d34:	f000 fbea 	bl	801550c <_tx_thread_system_resume>
 8014d38:	e06d      	b.n	8014e16 <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d062      	beq.n	8014e06 <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8014d40:	4b37      	ldr	r3, [pc, #220]	; (8014e20 <_tx_queue_send+0x24c>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d008      	beq.n	8014d5a <_tx_queue_send+0x186>
 8014d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d4a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d4c:	69bb      	ldr	r3, [r7, #24]
 8014d4e:	f383 8810 	msr	PRIMASK, r3
}
 8014d52:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8014d54:	230b      	movs	r3, #11
 8014d56:	643b      	str	r3, [r7, #64]	; 0x40
 8014d58:	e05d      	b.n	8014e16 <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014d5a:	4b32      	ldr	r3, [pc, #200]	; (8014e24 <_tx_queue_send+0x250>)
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8014d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d62:	4a31      	ldr	r2, [pc, #196]	; (8014e28 <_tx_queue_send+0x254>)
 8014d64:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8014d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d68:	68fa      	ldr	r2, [r7, #12]
 8014d6a:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8014d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d6e:	68ba      	ldr	r2, [r7, #8]
 8014d70:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8014d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d74:	2200      	movs	r2, #0
 8014d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8014d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014d80:	1c5a      	adds	r2, r3, #1
 8014d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d84:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8014d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d109      	bne.n	8014da2 <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d92:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8014d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d98:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8014d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d9e:	675a      	str	r2, [r3, #116]	; 0x74
 8014da0:	e011      	b.n	8014dc6 <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014da6:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8014da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014dac:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8014dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014db2:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8014db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014db8:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8014dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014dbe:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8014dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014dc4:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8014dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dc8:	1c5a      	adds	r2, r3, #1
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8014dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dd0:	2205      	movs	r2, #5
 8014dd2:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dd6:	2201      	movs	r2, #1
 8014dd8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8014dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ddc:	687a      	ldr	r2, [r7, #4]
 8014dde:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014de0:	4b0f      	ldr	r3, [pc, #60]	; (8014e20 <_tx_queue_send+0x24c>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	3301      	adds	r3, #1
 8014de6:	4a0e      	ldr	r2, [pc, #56]	; (8014e20 <_tx_queue_send+0x24c>)
 8014de8:	6013      	str	r3, [r2, #0]
 8014dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014dec:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	f383 8810 	msr	PRIMASK, r3
}
 8014df4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8014df6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014df8:	f000 fc88 	bl	801570c <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8014dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014e02:	643b      	str	r3, [r7, #64]	; 0x40
 8014e04:	e007      	b.n	8014e16 <_tx_queue_send+0x242>
 8014e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e08:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	f383 8810 	msr	PRIMASK, r3
}
 8014e10:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 8014e12:	230b      	movs	r3, #11
 8014e14:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 8014e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8014e18:	4618      	mov	r0, r3
 8014e1a:	3750      	adds	r7, #80	; 0x50
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	bd80      	pop	{r7, pc}
 8014e20:	201974c4 	.word	0x201974c4
 8014e24:	2019742c 	.word	0x2019742c
 8014e28:	08014655 	.word	0x08014655

08014e2c <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b08e      	sub	sp, #56	; 0x38
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
 8014e34:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014e36:	f3ef 8310 	mrs	r3, PRIMASK
 8014e3a:	623b      	str	r3, [r7, #32]
    return(posture);
 8014e3c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014e3e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014e40:	b672      	cpsid	i
    return(int_posture);
 8014e42:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8014e44:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014e4a:	4a33      	ldr	r2, [pc, #204]	; (8014f18 <_tx_semaphore_cleanup+0xec>)
 8014e4c:	4293      	cmp	r3, r2
 8014e4e:	d158      	bne.n	8014f02 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014e56:	683a      	ldr	r2, [r7, #0]
 8014e58:	429a      	cmp	r2, r3
 8014e5a:	d152      	bne.n	8014f02 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e60:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8014e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d04c      	beq.n	8014f02 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8014e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	4a2b      	ldr	r2, [pc, #172]	; (8014f1c <_tx_semaphore_cleanup+0xf0>)
 8014e6e:	4293      	cmp	r3, r2
 8014e70:	d147      	bne.n	8014f02 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8014e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e74:	691b      	ldr	r3, [r3, #16]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d043      	beq.n	8014f02 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8014e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e82:	691b      	ldr	r3, [r3, #16]
 8014e84:	1e5a      	subs	r2, r3, #1
 8014e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e88:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8014e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e8c:	691b      	ldr	r3, [r3, #16]
 8014e8e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8014e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d103      	bne.n	8014e9e <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8014e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e98:	2200      	movs	r2, #0
 8014e9a:	60da      	str	r2, [r3, #12]
 8014e9c:	e013      	b.n	8014ec6 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ea2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ea8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8014eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014eae:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8014eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014eb4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8014eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014eb8:	68db      	ldr	r3, [r3, #12]
 8014eba:	687a      	ldr	r2, [r7, #4]
 8014ebc:	429a      	cmp	r2, r3
 8014ebe:	d102      	bne.n	8014ec6 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8014ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ec4:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014eca:	2b06      	cmp	r3, #6
 8014ecc:	d119      	bne.n	8014f02 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	220d      	movs	r2, #13
 8014ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8014ed6:	4b12      	ldr	r3, [pc, #72]	; (8014f20 <_tx_semaphore_cleanup+0xf4>)
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	3301      	adds	r3, #1
 8014edc:	4a10      	ldr	r2, [pc, #64]	; (8014f20 <_tx_semaphore_cleanup+0xf4>)
 8014ede:	6013      	str	r3, [r2, #0]
 8014ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ee2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014ee4:	693b      	ldr	r3, [r7, #16]
 8014ee6:	f383 8810 	msr	PRIMASK, r3
}
 8014eea:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8014eec:	6878      	ldr	r0, [r7, #4]
 8014eee:	f000 fb0d 	bl	801550c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8014ef6:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014ef8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014efa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014efc:	b672      	cpsid	i
    return(int_posture);
 8014efe:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8014f00:	637b      	str	r3, [r7, #52]	; 0x34
 8014f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f04:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	f383 8810 	msr	PRIMASK, r3
}
 8014f0c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8014f0e:	bf00      	nop
 8014f10:	3738      	adds	r7, #56	; 0x38
 8014f12:	46bd      	mov	sp, r7
 8014f14:	bd80      	pop	{r7, pc}
 8014f16:	bf00      	nop
 8014f18:	08014e2d 	.word	0x08014e2d
 8014f1c:	53454d41 	.word	0x53454d41
 8014f20:	201974c4 	.word	0x201974c4

08014f24 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b08a      	sub	sp, #40	; 0x28
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	60f8      	str	r0, [r7, #12]
 8014f2c:	60b9      	str	r1, [r7, #8]
 8014f2e:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8014f30:	221c      	movs	r2, #28
 8014f32:	2100      	movs	r1, #0
 8014f34:	68f8      	ldr	r0, [r7, #12]
 8014f36:	f014 fa0b 	bl	8029350 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	68ba      	ldr	r2, [r7, #8]
 8014f3e:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	687a      	ldr	r2, [r7, #4]
 8014f44:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014f46:	f3ef 8310 	mrs	r3, PRIMASK
 8014f4a:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014f4c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014f4e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014f50:	b672      	cpsid	i
    return(int_posture);
 8014f52:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8014f54:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	4a18      	ldr	r2, [pc, #96]	; (8014fbc <_tx_semaphore_create+0x98>)
 8014f5a:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8014f5c:	4b18      	ldr	r3, [pc, #96]	; (8014fc0 <_tx_semaphore_create+0x9c>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d109      	bne.n	8014f78 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8014f64:	4a17      	ldr	r2, [pc, #92]	; (8014fc4 <_tx_semaphore_create+0xa0>)
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	68fa      	ldr	r2, [r7, #12]
 8014f6e:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	68fa      	ldr	r2, [r7, #12]
 8014f74:	619a      	str	r2, [r3, #24]
 8014f76:	e011      	b.n	8014f9c <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8014f78:	4b12      	ldr	r3, [pc, #72]	; (8014fc4 <_tx_semaphore_create+0xa0>)
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8014f7e:	6a3b      	ldr	r3, [r7, #32]
 8014f80:	699b      	ldr	r3, [r3, #24]
 8014f82:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8014f84:	6a3b      	ldr	r3, [r7, #32]
 8014f86:	68fa      	ldr	r2, [r7, #12]
 8014f88:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8014f8a:	69fb      	ldr	r3, [r7, #28]
 8014f8c:	68fa      	ldr	r2, [r7, #12]
 8014f8e:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	69fa      	ldr	r2, [r7, #28]
 8014f94:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	6a3a      	ldr	r2, [r7, #32]
 8014f9a:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8014f9c:	4b08      	ldr	r3, [pc, #32]	; (8014fc0 <_tx_semaphore_create+0x9c>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	3301      	adds	r3, #1
 8014fa2:	4a07      	ldr	r2, [pc, #28]	; (8014fc0 <_tx_semaphore_create+0x9c>)
 8014fa4:	6013      	str	r3, [r2, #0]
 8014fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014faa:	693b      	ldr	r3, [r7, #16]
 8014fac:	f383 8810 	msr	PRIMASK, r3
}
 8014fb0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8014fb2:	2300      	movs	r3, #0
}
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	3728      	adds	r7, #40	; 0x28
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	bd80      	pop	{r7, pc}
 8014fbc:	53454d41 	.word	0x53454d41
 8014fc0:	201973f8 	.word	0x201973f8
 8014fc4:	201973f4 	.word	0x201973f4

08014fc8 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b08e      	sub	sp, #56	; 0x38
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
 8014fd0:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8014fda:	623b      	str	r3, [r7, #32]
    return(posture);
 8014fdc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014fde:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014fe0:	b672      	cpsid	i
    return(int_posture);
 8014fe2:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8014fe4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	689b      	ldr	r3, [r3, #8]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d00a      	beq.n	8015004 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	689b      	ldr	r3, [r3, #8]
 8014ff2:	1e5a      	subs	r2, r3, #1
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	609a      	str	r2, [r3, #8]
 8014ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ffa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014ffc:	69bb      	ldr	r3, [r7, #24]
 8014ffe:	f383 8810 	msr	PRIMASK, r3
}
 8015002:	e068      	b.n	80150d6 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8015004:	683b      	ldr	r3, [r7, #0]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d05d      	beq.n	80150c6 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801500a:	4b35      	ldr	r3, [pc, #212]	; (80150e0 <_tx_semaphore_get+0x118>)
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d008      	beq.n	8015024 <_tx_semaphore_get+0x5c>
 8015012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015014:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015016:	697b      	ldr	r3, [r7, #20]
 8015018:	f383 8810 	msr	PRIMASK, r3
}
 801501c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 801501e:	230d      	movs	r3, #13
 8015020:	637b      	str	r3, [r7, #52]	; 0x34
 8015022:	e058      	b.n	80150d6 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8015024:	4b2f      	ldr	r3, [pc, #188]	; (80150e4 <_tx_semaphore_get+0x11c>)
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 801502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801502c:	4a2e      	ldr	r2, [pc, #184]	; (80150e8 <_tx_semaphore_get+0x120>)
 801502e:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8015030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015032:	687a      	ldr	r2, [r7, #4]
 8015034:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8015036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015038:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801503c:	1c5a      	adds	r2, r3, #1
 801503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015040:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	691b      	ldr	r3, [r3, #16]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d109      	bne.n	8015060 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015050:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8015052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015056:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8015058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801505a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801505c:	675a      	str	r2, [r3, #116]	; 0x74
 801505e:	e011      	b.n	8015084 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	68db      	ldr	r3, [r3, #12]
 8015064:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8015066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801506a:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801506e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015070:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8015072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015076:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8015078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801507a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801507c:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015082:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	691b      	ldr	r3, [r3, #16]
 8015088:	1c5a      	adds	r2, r3, #1
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 801508e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015090:	2206      	movs	r2, #6
 8015092:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8015094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015096:	2201      	movs	r2, #1
 8015098:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801509c:	683a      	ldr	r2, [r7, #0]
 801509e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80150a0:	4b0f      	ldr	r3, [pc, #60]	; (80150e0 <_tx_semaphore_get+0x118>)
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	3301      	adds	r3, #1
 80150a6:	4a0e      	ldr	r2, [pc, #56]	; (80150e0 <_tx_semaphore_get+0x118>)
 80150a8:	6013      	str	r3, [r2, #0]
 80150aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ac:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	f383 8810 	msr	PRIMASK, r3
}
 80150b4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80150b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80150b8:	f000 fb28 	bl	801570c <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80150bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80150c2:	637b      	str	r3, [r7, #52]	; 0x34
 80150c4:	e007      	b.n	80150d6 <_tx_semaphore_get+0x10e>
 80150c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150c8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	f383 8810 	msr	PRIMASK, r3
}
 80150d0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 80150d2:	230d      	movs	r3, #13
 80150d4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 80150d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80150d8:	4618      	mov	r0, r3
 80150da:	3738      	adds	r7, #56	; 0x38
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd80      	pop	{r7, pc}
 80150e0:	201974c4 	.word	0x201974c4
 80150e4:	2019742c 	.word	0x2019742c
 80150e8:	08014e2d 	.word	0x08014e2d

080150ec <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b08c      	sub	sp, #48	; 0x30
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80150f4:	f3ef 8310 	mrs	r3, PRIMASK
 80150f8:	61bb      	str	r3, [r7, #24]
    return(posture);
 80150fa:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80150fc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80150fe:	b672      	cpsid	i
    return(int_posture);
 8015100:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8015102:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	691b      	ldr	r3, [r3, #16]
 8015108:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 801510a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801510c:	2b00      	cmp	r3, #0
 801510e:	d10a      	bne.n	8015126 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	689b      	ldr	r3, [r3, #8]
 8015114:	1c5a      	adds	r2, r3, #1
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	609a      	str	r2, [r3, #8]
 801511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801511c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801511e:	693b      	ldr	r3, [r7, #16]
 8015120:	f383 8810 	msr	PRIMASK, r3
}
 8015124:	e033      	b.n	801518e <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	68db      	ldr	r3, [r3, #12]
 801512a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 801512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801512e:	3b01      	subs	r3, #1
 8015130:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8015132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015134:	2b00      	cmp	r3, #0
 8015136:	d103      	bne.n	8015140 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	2200      	movs	r2, #0
 801513c:	60da      	str	r2, [r3, #12]
 801513e:	e00e      	b.n	801515e <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8015140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015144:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	6a3a      	ldr	r2, [r7, #32]
 801514a:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801514e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015150:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8015152:	6a3b      	ldr	r3, [r7, #32]
 8015154:	69fa      	ldr	r2, [r7, #28]
 8015156:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8015158:	69fb      	ldr	r3, [r7, #28]
 801515a:	6a3a      	ldr	r2, [r7, #32]
 801515c:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015162:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8015164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015166:	2200      	movs	r2, #0
 8015168:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801516c:	2200      	movs	r2, #0
 801516e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8015172:	4b09      	ldr	r3, [pc, #36]	; (8015198 <_tx_semaphore_put+0xac>)
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	3301      	adds	r3, #1
 8015178:	4a07      	ldr	r2, [pc, #28]	; (8015198 <_tx_semaphore_put+0xac>)
 801517a:	6013      	str	r3, [r2, #0]
 801517c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801517e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	f383 8810 	msr	PRIMASK, r3
}
 8015186:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8015188:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801518a:	f000 f9bf 	bl	801550c <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 801518e:	2300      	movs	r3, #0
}
 8015190:	4618      	mov	r0, r3
 8015192:	3730      	adds	r7, #48	; 0x30
 8015194:	46bd      	mov	sp, r7
 8015196:	bd80      	pop	{r7, pc}
 8015198:	201974c4 	.word	0x201974c4

0801519c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b092      	sub	sp, #72	; 0x48
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	60f8      	str	r0, [r7, #12]
 80151a4:	60b9      	str	r1, [r7, #8]
 80151a6:	607a      	str	r2, [r7, #4]
 80151a8:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80151aa:	2300      	movs	r3, #0
 80151ac:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80151ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80151b0:	21ef      	movs	r1, #239	; 0xef
 80151b2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80151b4:	f014 f8cc 	bl	8029350 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80151b8:	22b0      	movs	r2, #176	; 0xb0
 80151ba:	2100      	movs	r1, #0
 80151bc:	68f8      	ldr	r0, [r7, #12]
 80151be:	f014 f8c7 	bl	8029350 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	68ba      	ldr	r2, [r7, #8]
 80151c6:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	687a      	ldr	r2, [r7, #4]
 80151cc:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	683a      	ldr	r2, [r7, #0]
 80151d2:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80151d8:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80151de:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80151e4:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80151ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80151f2:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80151f8:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	2220      	movs	r2, #32
 80151fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8015202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015204:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8015206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015208:	3b01      	subs	r3, #1
 801520a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801520c:	4413      	add	r3, r2
 801520e:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015214:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8015216:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801521a:	429a      	cmp	r2, r3
 801521c:	d007      	beq.n	801522e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	2200      	movs	r2, #0
 8015222:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	2200      	movs	r2, #0
 8015228:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801522c:	e006      	b.n	801523c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015232:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015238:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	2203      	movs	r2, #3
 8015240:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	4a48      	ldr	r2, [pc, #288]	; (8015368 <_tx_thread_create+0x1cc>)
 8015246:	655a      	str	r2, [r3, #84]	; 0x54
 8015248:	68fa      	ldr	r2, [r7, #12]
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 801524e:	4947      	ldr	r1, [pc, #284]	; (801536c <_tx_thread_create+0x1d0>)
 8015250:	68f8      	ldr	r0, [r7, #12]
 8015252:	f7eb f8d5 	bl	8000400 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015256:	f3ef 8310 	mrs	r3, PRIMASK
 801525a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801525c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801525e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8015260:	b672      	cpsid	i
    return(int_posture);
 8015262:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8015264:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	4a41      	ldr	r2, [pc, #260]	; (8015370 <_tx_thread_create+0x1d4>)
 801526a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 801526c:	4b41      	ldr	r3, [pc, #260]	; (8015374 <_tx_thread_create+0x1d8>)
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d10b      	bne.n	801528c <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8015274:	4a40      	ldr	r2, [pc, #256]	; (8015378 <_tx_thread_create+0x1dc>)
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	68fa      	ldr	r2, [r7, #12]
 801527e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	68fa      	ldr	r2, [r7, #12]
 8015286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 801528a:	e016      	b.n	80152ba <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 801528c:	4b3a      	ldr	r3, [pc, #232]	; (8015378 <_tx_thread_create+0x1dc>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8015292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015298:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 801529a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801529c:	68fa      	ldr	r2, [r7, #12]
 801529e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80152a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152a4:	68fa      	ldr	r2, [r7, #12]
 80152a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80152b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80152ba:	4b2e      	ldr	r3, [pc, #184]	; (8015374 <_tx_thread_create+0x1d8>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	3301      	adds	r3, #1
 80152c0:	4a2c      	ldr	r2, [pc, #176]	; (8015374 <_tx_thread_create+0x1d8>)
 80152c2:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80152c4:	4b2d      	ldr	r3, [pc, #180]	; (801537c <_tx_thread_create+0x1e0>)
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	3301      	adds	r3, #1
 80152ca:	4a2c      	ldr	r2, [pc, #176]	; (801537c <_tx_thread_create+0x1e0>)
 80152cc:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80152ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80152d0:	2b01      	cmp	r3, #1
 80152d2:	d129      	bne.n	8015328 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80152d4:	f3ef 8305 	mrs	r3, IPSR
 80152d8:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80152da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80152dc:	4b28      	ldr	r3, [pc, #160]	; (8015380 <_tx_thread_create+0x1e4>)
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	4313      	orrs	r3, r2
 80152e2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80152e6:	d30d      	bcc.n	8015304 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80152e8:	4b26      	ldr	r3, [pc, #152]	; (8015384 <_tx_thread_create+0x1e8>)
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80152ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d009      	beq.n	8015308 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80152f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80152f8:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80152fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015300:	63da      	str	r2, [r3, #60]	; 0x3c
 8015302:	e001      	b.n	8015308 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8015304:	2300      	movs	r3, #0
 8015306:	647b      	str	r3, [r7, #68]	; 0x44
 8015308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801530a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801530c:	6a3b      	ldr	r3, [r7, #32]
 801530e:	f383 8810 	msr	PRIMASK, r3
}
 8015312:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8015314:	68f8      	ldr	r0, [r7, #12]
 8015316:	f000 f8f9 	bl	801550c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 801531a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801531c:	2b00      	cmp	r3, #0
 801531e:	d01e      	beq.n	801535e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8015320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015322:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015324:	63da      	str	r2, [r3, #60]	; 0x3c
 8015326:	e01a      	b.n	801535e <_tx_thread_create+0x1c2>
 8015328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801532a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801532c:	693b      	ldr	r3, [r7, #16]
 801532e:	f383 8810 	msr	PRIMASK, r3
}
 8015332:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015334:	f3ef 8310 	mrs	r3, PRIMASK
 8015338:	61bb      	str	r3, [r7, #24]
    return(posture);
 801533a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801533c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801533e:	b672      	cpsid	i
    return(int_posture);
 8015340:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8015342:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8015344:	4b0d      	ldr	r3, [pc, #52]	; (801537c <_tx_thread_create+0x1e0>)
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	3b01      	subs	r3, #1
 801534a:	4a0c      	ldr	r2, [pc, #48]	; (801537c <_tx_thread_create+0x1e0>)
 801534c:	6013      	str	r3, [r2, #0]
 801534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015350:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015352:	69fb      	ldr	r3, [r7, #28]
 8015354:	f383 8810 	msr	PRIMASK, r3
}
 8015358:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801535a:	f000 f89d 	bl	8015498 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 801535e:	2300      	movs	r3, #0
}
 8015360:	4618      	mov	r0, r3
 8015362:	3748      	adds	r7, #72	; 0x48
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}
 8015368:	080159e1 	.word	0x080159e1
 801536c:	08015401 	.word	0x08015401
 8015370:	54485244 	.word	0x54485244
 8015374:	20197438 	.word	0x20197438
 8015378:	20197434 	.word	0x20197434
 801537c:	201974c4 	.word	0x201974c4
 8015380:	20000054 	.word	0x20000054
 8015384:	20197430 	.word	0x20197430

08015388 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 801538c:	4b12      	ldr	r3, [pc, #72]	; (80153d8 <_tx_thread_initialize+0x50>)
 801538e:	2200      	movs	r2, #0
 8015390:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8015392:	4b12      	ldr	r3, [pc, #72]	; (80153dc <_tx_thread_initialize+0x54>)
 8015394:	2200      	movs	r2, #0
 8015396:	601a      	str	r2, [r3, #0]
 8015398:	4b11      	ldr	r3, [pc, #68]	; (80153e0 <_tx_thread_initialize+0x58>)
 801539a:	2200      	movs	r2, #0
 801539c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801539e:	4b11      	ldr	r3, [pc, #68]	; (80153e4 <_tx_thread_initialize+0x5c>)
 80153a0:	2220      	movs	r2, #32
 80153a2:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80153a4:	2280      	movs	r2, #128	; 0x80
 80153a6:	2100      	movs	r1, #0
 80153a8:	480f      	ldr	r0, [pc, #60]	; (80153e8 <_tx_thread_initialize+0x60>)
 80153aa:	f013 ffd1 	bl	8029350 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80153ae:	4b0f      	ldr	r3, [pc, #60]	; (80153ec <_tx_thread_initialize+0x64>)
 80153b0:	2200      	movs	r2, #0
 80153b2:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80153b4:	4b0e      	ldr	r3, [pc, #56]	; (80153f0 <_tx_thread_initialize+0x68>)
 80153b6:	2200      	movs	r2, #0
 80153b8:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80153ba:	4b0e      	ldr	r3, [pc, #56]	; (80153f4 <_tx_thread_initialize+0x6c>)
 80153bc:	2200      	movs	r2, #0
 80153be:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80153c0:	4b0d      	ldr	r3, [pc, #52]	; (80153f8 <_tx_thread_initialize+0x70>)
 80153c2:	2200      	movs	r2, #0
 80153c4:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80153c6:	4b0d      	ldr	r3, [pc, #52]	; (80153fc <_tx_thread_initialize+0x74>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 80153ce:	4a0b      	ldr	r2, [pc, #44]	; (80153fc <_tx_thread_initialize+0x74>)
 80153d0:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80153d2:	bf00      	nop
 80153d4:	bd80      	pop	{r7, pc}
 80153d6:	bf00      	nop
 80153d8:	2019742c 	.word	0x2019742c
 80153dc:	20197430 	.word	0x20197430
 80153e0:	2019743c 	.word	0x2019743c
 80153e4:	20197440 	.word	0x20197440
 80153e8:	20197444 	.word	0x20197444
 80153ec:	20197434 	.word	0x20197434
 80153f0:	20197438 	.word	0x20197438
 80153f4:	201974c4 	.word	0x201974c4
 80153f8:	201974c8 	.word	0x201974c8
 80153fc:	201974cc 	.word	0x201974cc

08015400 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b088      	sub	sp, #32
 8015404:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8015406:	4b21      	ldr	r3, [pc, #132]	; (801548c <_tx_thread_shell_entry+0x8c>)
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 801540c:	69fb      	ldr	r3, [r7, #28]
 801540e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015410:	69fa      	ldr	r2, [r7, #28]
 8015412:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8015414:	4610      	mov	r0, r2
 8015416:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8015418:	4b1d      	ldr	r3, [pc, #116]	; (8015490 <_tx_thread_shell_entry+0x90>)
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d003      	beq.n	8015428 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8015420:	4b1b      	ldr	r3, [pc, #108]	; (8015490 <_tx_thread_shell_entry+0x90>)
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	69f8      	ldr	r0, [r7, #28]
 8015426:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015428:	f3ef 8310 	mrs	r3, PRIMASK
 801542c:	607b      	str	r3, [r7, #4]
    return(posture);
 801542e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8015430:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015432:	b672      	cpsid	i
    return(int_posture);
 8015434:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8015436:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8015438:	69fb      	ldr	r3, [r7, #28]
 801543a:	2201      	movs	r2, #1
 801543c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801543e:	69fb      	ldr	r3, [r7, #28]
 8015440:	2201      	movs	r2, #1
 8015442:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8015444:	69fb      	ldr	r3, [r7, #28]
 8015446:	2200      	movs	r2, #0
 8015448:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801544a:	4b12      	ldr	r3, [pc, #72]	; (8015494 <_tx_thread_shell_entry+0x94>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	3301      	adds	r3, #1
 8015450:	4a10      	ldr	r2, [pc, #64]	; (8015494 <_tx_thread_shell_entry+0x94>)
 8015452:	6013      	str	r3, [r2, #0]
 8015454:	69bb      	ldr	r3, [r7, #24]
 8015456:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015458:	68bb      	ldr	r3, [r7, #8]
 801545a:	f383 8810 	msr	PRIMASK, r3
}
 801545e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8015460:	f3ef 8314 	mrs	r3, CONTROL
 8015464:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8015466:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8015468:	617b      	str	r3, [r7, #20]
 801546a:	697b      	ldr	r3, [r7, #20]
 801546c:	f023 0304 	bic.w	r3, r3, #4
 8015470:	617b      	str	r3, [r7, #20]
 8015472:	697b      	ldr	r3, [r7, #20]
 8015474:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8015476:	693b      	ldr	r3, [r7, #16]
 8015478:	f383 8814 	msr	CONTROL, r3
}
 801547c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 801547e:	69f8      	ldr	r0, [r7, #28]
 8015480:	f000 f944 	bl	801570c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8015484:	bf00      	nop
 8015486:	3720      	adds	r7, #32
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}
 801548c:	2019742c 	.word	0x2019742c
 8015490:	201974c8 	.word	0x201974c8
 8015494:	201974c4 	.word	0x201974c4

08015498 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8015498:	b480      	push	{r7}
 801549a:	b089      	sub	sp, #36	; 0x24
 801549c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801549e:	4b17      	ldr	r3, [pc, #92]	; (80154fc <_tx_thread_system_preempt_check+0x64>)
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80154a4:	69fb      	ldr	r3, [r7, #28]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d121      	bne.n	80154ee <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80154aa:	4b15      	ldr	r3, [pc, #84]	; (8015500 <_tx_thread_system_preempt_check+0x68>)
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80154b0:	4b14      	ldr	r3, [pc, #80]	; (8015504 <_tx_thread_system_preempt_check+0x6c>)
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80154b6:	69ba      	ldr	r2, [r7, #24]
 80154b8:	697b      	ldr	r3, [r7, #20]
 80154ba:	429a      	cmp	r2, r3
 80154bc:	d017      	beq.n	80154ee <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80154be:	4b12      	ldr	r3, [pc, #72]	; (8015508 <_tx_thread_system_preempt_check+0x70>)
 80154c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154c4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80154c6:	f3ef 8305 	mrs	r3, IPSR
 80154ca:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80154cc:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d10c      	bne.n	80154ec <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80154d2:	f3ef 8310 	mrs	r3, PRIMASK
 80154d6:	60fb      	str	r3, [r7, #12]
    return(posture);
 80154d8:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80154da:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80154dc:	b662      	cpsie	i
}
 80154de:	bf00      	nop
 80154e0:	68bb      	ldr	r3, [r7, #8]
 80154e2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	f383 8810 	msr	PRIMASK, r3
}
 80154ea:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80154ec:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80154ee:	bf00      	nop
 80154f0:	3724      	adds	r7, #36	; 0x24
 80154f2:	46bd      	mov	sp, r7
 80154f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f8:	4770      	bx	lr
 80154fa:	bf00      	nop
 80154fc:	201974c4 	.word	0x201974c4
 8015500:	2019742c 	.word	0x2019742c
 8015504:	20197430 	.word	0x20197430
 8015508:	e000ed04 	.word	0xe000ed04

0801550c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b096      	sub	sp, #88	; 0x58
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015514:	f3ef 8310 	mrs	r3, PRIMASK
 8015518:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 801551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 801551c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801551e:	b672      	cpsid	i
    return(int_posture);
 8015520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8015522:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015528:	2b00      	cmp	r3, #0
 801552a:	d005      	beq.n	8015538 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	334c      	adds	r3, #76	; 0x4c
 8015530:	4618      	mov	r0, r3
 8015532:	f000 fb91 	bl	8015c58 <_tx_timer_system_deactivate>
 8015536:	e002      	b.n	801553e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	2200      	movs	r2, #0
 801553c:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801553e:	4b6c      	ldr	r3, [pc, #432]	; (80156f0 <_tx_thread_system_resume+0x1e4>)
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	3b01      	subs	r3, #1
 8015544:	4a6a      	ldr	r2, [pc, #424]	; (80156f0 <_tx_thread_system_resume+0x1e4>)
 8015546:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801554c:	2b00      	cmp	r3, #0
 801554e:	f040 8083 	bne.w	8015658 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015556:	2b00      	cmp	r3, #0
 8015558:	f000 8097 	beq.w	801568a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015560:	2b00      	cmp	r3, #0
 8015562:	d172      	bne.n	801564a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	2200      	movs	r2, #0
 8015568:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801556e:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8015570:	4a60      	ldr	r2, [pc, #384]	; (80156f4 <_tx_thread_system_resume+0x1e8>)
 8015572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015578:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 801557a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801557c:	2b00      	cmp	r3, #0
 801557e:	d154      	bne.n	801562a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8015580:	495c      	ldr	r1, [pc, #368]	; (80156f4 <_tx_thread_system_resume+0x1e8>)
 8015582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015584:	687a      	ldr	r2, [r7, #4]
 8015586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	687a      	ldr	r2, [r7, #4]
 801558e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	687a      	ldr	r2, [r7, #4]
 8015594:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8015596:	2201      	movs	r2, #1
 8015598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801559a:	fa02 f303 	lsl.w	r3, r2, r3
 801559e:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80155a0:	4b55      	ldr	r3, [pc, #340]	; (80156f8 <_tx_thread_system_resume+0x1ec>)
 80155a2:	681a      	ldr	r2, [r3, #0]
 80155a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155a6:	4313      	orrs	r3, r2
 80155a8:	4a53      	ldr	r2, [pc, #332]	; (80156f8 <_tx_thread_system_resume+0x1ec>)
 80155aa:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80155ac:	4b53      	ldr	r3, [pc, #332]	; (80156fc <_tx_thread_system_resume+0x1f0>)
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80155b2:	429a      	cmp	r2, r3
 80155b4:	d269      	bcs.n	801568a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80155b6:	4a51      	ldr	r2, [pc, #324]	; (80156fc <_tx_thread_system_resume+0x1f0>)
 80155b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155ba:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80155bc:	4b50      	ldr	r3, [pc, #320]	; (8015700 <_tx_thread_system_resume+0x1f4>)
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80155c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d103      	bne.n	80155d0 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80155c8:	4a4d      	ldr	r2, [pc, #308]	; (8015700 <_tx_thread_system_resume+0x1f4>)
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	6013      	str	r3, [r2, #0]
 80155ce:	e05c      	b.n	801568a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80155d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80155d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80155d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80155d6:	429a      	cmp	r2, r3
 80155d8:	d257      	bcs.n	801568a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80155da:	4a49      	ldr	r2, [pc, #292]	; (8015700 <_tx_thread_system_resume+0x1f4>)
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	6013      	str	r3, [r2, #0]
 80155e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80155e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80155e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155e6:	f383 8810 	msr	PRIMASK, r3
}
 80155ea:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80155ec:	4b40      	ldr	r3, [pc, #256]	; (80156f0 <_tx_thread_system_resume+0x1e4>)
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 80155f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d174      	bne.n	80156e2 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80155f8:	4b42      	ldr	r3, [pc, #264]	; (8015704 <_tx_thread_system_resume+0x1f8>)
 80155fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155fe:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015600:	f3ef 8305 	mrs	r3, IPSR
 8015604:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8015606:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 8015608:	2b00      	cmp	r3, #0
 801560a:	d10c      	bne.n	8015626 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801560c:	f3ef 8310 	mrs	r3, PRIMASK
 8015610:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8015612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8015614:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015616:	b662      	cpsie	i
}
 8015618:	bf00      	nop
 801561a:	6a3b      	ldr	r3, [r7, #32]
 801561c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801561e:	69fb      	ldr	r3, [r7, #28]
 8015620:	f383 8810 	msr	PRIMASK, r3
}
 8015624:	bf00      	nop
}
 8015626:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8015628:	e05b      	b.n	80156e2 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 801562a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801562e:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8015630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015632:	687a      	ldr	r2, [r7, #4]
 8015634:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8015636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015638:	687a      	ldr	r2, [r7, #4]
 801563a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015640:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015646:	621a      	str	r2, [r3, #32]
 8015648:	e01f      	b.n	801568a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	2200      	movs	r2, #0
 801564e:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	2203      	movs	r2, #3
 8015654:	631a      	str	r2, [r3, #48]	; 0x30
 8015656:	e018      	b.n	801568a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801565c:	2b01      	cmp	r3, #1
 801565e:	d014      	beq.n	801568a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015664:	2b02      	cmp	r3, #2
 8015666:	d010      	beq.n	801568a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801566c:	2b00      	cmp	r3, #0
 801566e:	d106      	bne.n	801567e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	2200      	movs	r2, #0
 8015674:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	2200      	movs	r2, #0
 801567a:	631a      	str	r2, [r3, #48]	; 0x30
 801567c:	e005      	b.n	801568a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	2200      	movs	r2, #0
 8015682:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	2203      	movs	r2, #3
 8015688:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801568a:	4b1f      	ldr	r3, [pc, #124]	; (8015708 <_tx_thread_system_resume+0x1fc>)
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	63bb      	str	r3, [r7, #56]	; 0x38
 8015690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015692:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015694:	69bb      	ldr	r3, [r7, #24]
 8015696:	f383 8810 	msr	PRIMASK, r3
}
 801569a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 801569c:	4b18      	ldr	r3, [pc, #96]	; (8015700 <_tx_thread_system_resume+0x1f4>)
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80156a2:	429a      	cmp	r2, r3
 80156a4:	d020      	beq.n	80156e8 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80156a6:	4b12      	ldr	r3, [pc, #72]	; (80156f0 <_tx_thread_system_resume+0x1e4>)
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 80156ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d11a      	bne.n	80156e8 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80156b2:	4b14      	ldr	r3, [pc, #80]	; (8015704 <_tx_thread_system_resume+0x1f8>)
 80156b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156b8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80156ba:	f3ef 8305 	mrs	r3, IPSR
 80156be:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80156c0:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d10f      	bne.n	80156e6 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80156c6:	f3ef 8310 	mrs	r3, PRIMASK
 80156ca:	613b      	str	r3, [r7, #16]
    return(posture);
 80156cc:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80156ce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80156d0:	b662      	cpsie	i
}
 80156d2:	bf00      	nop
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80156d8:	68bb      	ldr	r3, [r7, #8]
 80156da:	f383 8810 	msr	PRIMASK, r3
}
 80156de:	bf00      	nop
}
 80156e0:	e001      	b.n	80156e6 <_tx_thread_system_resume+0x1da>
                                return;
 80156e2:	bf00      	nop
 80156e4:	e000      	b.n	80156e8 <_tx_thread_system_resume+0x1dc>
 80156e6:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80156e8:	3758      	adds	r7, #88	; 0x58
 80156ea:	46bd      	mov	sp, r7
 80156ec:	bd80      	pop	{r7, pc}
 80156ee:	bf00      	nop
 80156f0:	201974c4 	.word	0x201974c4
 80156f4:	20197444 	.word	0x20197444
 80156f8:	2019743c 	.word	0x2019743c
 80156fc:	20197440 	.word	0x20197440
 8015700:	20197430 	.word	0x20197430
 8015704:	e000ed04 	.word	0xe000ed04
 8015708:	2019742c 	.word	0x2019742c

0801570c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b09e      	sub	sp, #120	; 0x78
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8015714:	4b81      	ldr	r3, [pc, #516]	; (801591c <_tx_thread_system_suspend+0x210>)
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801571a:	f3ef 8310 	mrs	r3, PRIMASK
 801571e:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8015720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8015722:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8015724:	b672      	cpsid	i
    return(int_posture);
 8015726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8015728:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 801572a:	687a      	ldr	r2, [r7, #4]
 801572c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801572e:	429a      	cmp	r2, r3
 8015730:	d112      	bne.n	8015758 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015736:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8015738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801573a:	2b00      	cmp	r3, #0
 801573c:	d008      	beq.n	8015750 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 801573e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015744:	d004      	beq.n	8015750 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	334c      	adds	r3, #76	; 0x4c
 801574a:	4618      	mov	r0, r3
 801574c:	f000 fa22 	bl	8015b94 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	69db      	ldr	r3, [r3, #28]
 8015754:	4a72      	ldr	r2, [pc, #456]	; (8015920 <_tx_thread_system_suspend+0x214>)
 8015756:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8015758:	4b72      	ldr	r3, [pc, #456]	; (8015924 <_tx_thread_system_suspend+0x218>)
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	3b01      	subs	r3, #1
 801575e:	4a71      	ldr	r2, [pc, #452]	; (8015924 <_tx_thread_system_suspend+0x218>)
 8015760:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015766:	2b01      	cmp	r3, #1
 8015768:	f040 80a6 	bne.w	80158b8 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	2200      	movs	r2, #0
 8015770:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015776:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	6a1b      	ldr	r3, [r3, #32]
 801577c:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 801577e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	429a      	cmp	r2, r3
 8015784:	d015      	beq.n	80157b2 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801578a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 801578c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801578e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015790:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8015792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015794:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015796:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8015798:	4a63      	ldr	r2, [pc, #396]	; (8015928 <_tx_thread_system_suspend+0x21c>)
 801579a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801579c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80157a0:	687a      	ldr	r2, [r7, #4]
 80157a2:	429a      	cmp	r2, r3
 80157a4:	d157      	bne.n	8015856 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80157a6:	4960      	ldr	r1, [pc, #384]	; (8015928 <_tx_thread_system_suspend+0x21c>)
 80157a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80157aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80157ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80157b0:	e051      	b.n	8015856 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80157b2:	4a5d      	ldr	r2, [pc, #372]	; (8015928 <_tx_thread_system_suspend+0x21c>)
 80157b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80157b6:	2100      	movs	r1, #0
 80157b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80157bc:	2201      	movs	r2, #1
 80157be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80157c0:	fa02 f303 	lsl.w	r3, r2, r3
 80157c4:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80157c6:	4b59      	ldr	r3, [pc, #356]	; (801592c <_tx_thread_system_suspend+0x220>)
 80157c8:	681a      	ldr	r2, [r3, #0]
 80157ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80157cc:	43db      	mvns	r3, r3
 80157ce:	4013      	ands	r3, r2
 80157d0:	4a56      	ldr	r2, [pc, #344]	; (801592c <_tx_thread_system_suspend+0x220>)
 80157d2:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80157d4:	2300      	movs	r3, #0
 80157d6:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80157d8:	4b54      	ldr	r3, [pc, #336]	; (801592c <_tx_thread_system_suspend+0x220>)
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80157de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d12b      	bne.n	801583c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80157e4:	4b52      	ldr	r3, [pc, #328]	; (8015930 <_tx_thread_system_suspend+0x224>)
 80157e6:	2220      	movs	r2, #32
 80157e8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 80157ea:	4b52      	ldr	r3, [pc, #328]	; (8015934 <_tx_thread_system_suspend+0x228>)
 80157ec:	2200      	movs	r2, #0
 80157ee:	601a      	str	r2, [r3, #0]
 80157f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80157f2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80157f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80157f6:	f383 8810 	msr	PRIMASK, r3
}
 80157fa:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80157fc:	4b49      	ldr	r3, [pc, #292]	; (8015924 <_tx_thread_system_suspend+0x218>)
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8015802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015804:	2b00      	cmp	r3, #0
 8015806:	f040 8081 	bne.w	801590c <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801580a:	4b4b      	ldr	r3, [pc, #300]	; (8015938 <_tx_thread_system_suspend+0x22c>)
 801580c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015810:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015812:	f3ef 8305 	mrs	r3, IPSR
 8015816:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8015818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 801581a:	2b00      	cmp	r3, #0
 801581c:	d10c      	bne.n	8015838 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801581e:	f3ef 8310 	mrs	r3, PRIMASK
 8015822:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8015824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8015826:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015828:	b662      	cpsie	i
}
 801582a:	bf00      	nop
 801582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801582e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015832:	f383 8810 	msr	PRIMASK, r3
}
 8015836:	bf00      	nop
}
 8015838:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 801583a:	e067      	b.n	801590c <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 801583c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801583e:	fa93 f3a3 	rbit	r3, r3
 8015842:	65bb      	str	r3, [r7, #88]	; 0x58
 8015844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015846:	fab3 f383 	clz	r3, r3
 801584a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 801584c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801584e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015850:	4413      	add	r3, r2
 8015852:	4a37      	ldr	r2, [pc, #220]	; (8015930 <_tx_thread_system_suspend+0x224>)
 8015854:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8015856:	4b37      	ldr	r3, [pc, #220]	; (8015934 <_tx_thread_system_suspend+0x228>)
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	687a      	ldr	r2, [r7, #4]
 801585c:	429a      	cmp	r2, r3
 801585e:	d12b      	bne.n	80158b8 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8015860:	4b33      	ldr	r3, [pc, #204]	; (8015930 <_tx_thread_system_suspend+0x224>)
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	4a30      	ldr	r2, [pc, #192]	; (8015928 <_tx_thread_system_suspend+0x21c>)
 8015866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801586a:	4a32      	ldr	r2, [pc, #200]	; (8015934 <_tx_thread_system_suspend+0x228>)
 801586c:	6013      	str	r3, [r2, #0]
 801586e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015870:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015874:	f383 8810 	msr	PRIMASK, r3
}
 8015878:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801587a:	4b2a      	ldr	r3, [pc, #168]	; (8015924 <_tx_thread_system_suspend+0x218>)
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8015880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015882:	2b00      	cmp	r3, #0
 8015884:	d144      	bne.n	8015910 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015886:	4b2c      	ldr	r3, [pc, #176]	; (8015938 <_tx_thread_system_suspend+0x22c>)
 8015888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801588c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801588e:	f3ef 8305 	mrs	r3, IPSR
 8015892:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8015894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 8015896:	2b00      	cmp	r3, #0
 8015898:	d10c      	bne.n	80158b4 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801589a:	f3ef 8310 	mrs	r3, PRIMASK
 801589e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80158a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 80158a2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 80158a4:	b662      	cpsie	i
}
 80158a6:	bf00      	nop
 80158a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158aa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80158ac:	6a3b      	ldr	r3, [r7, #32]
 80158ae:	f383 8810 	msr	PRIMASK, r3
}
 80158b2:	bf00      	nop
}
 80158b4:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80158b6:	e02b      	b.n	8015910 <_tx_thread_system_suspend+0x204>
 80158b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80158ba:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80158bc:	69fb      	ldr	r3, [r7, #28]
 80158be:	f383 8810 	msr	PRIMASK, r3
}
 80158c2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80158c4:	4b1b      	ldr	r3, [pc, #108]	; (8015934 <_tx_thread_system_suspend+0x228>)
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80158ca:	429a      	cmp	r2, r3
 80158cc:	d022      	beq.n	8015914 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80158ce:	4b15      	ldr	r3, [pc, #84]	; (8015924 <_tx_thread_system_suspend+0x218>)
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 80158d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d11c      	bne.n	8015914 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80158da:	4b17      	ldr	r3, [pc, #92]	; (8015938 <_tx_thread_system_suspend+0x22c>)
 80158dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80158e0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80158e2:	f3ef 8305 	mrs	r3, IPSR
 80158e6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80158e8:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d10c      	bne.n	8015908 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80158ee:	f3ef 8310 	mrs	r3, PRIMASK
 80158f2:	617b      	str	r3, [r7, #20]
    return(posture);
 80158f4:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 80158f6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80158f8:	b662      	cpsie	i
}
 80158fa:	bf00      	nop
 80158fc:	693b      	ldr	r3, [r7, #16]
 80158fe:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	f383 8810 	msr	PRIMASK, r3
}
 8015906:	bf00      	nop
}
 8015908:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 801590a:	e003      	b.n	8015914 <_tx_thread_system_suspend+0x208>
                return;
 801590c:	bf00      	nop
 801590e:	e002      	b.n	8015916 <_tx_thread_system_suspend+0x20a>
            return;
 8015910:	bf00      	nop
 8015912:	e000      	b.n	8015916 <_tx_thread_system_suspend+0x20a>
    return;
 8015914:	bf00      	nop
}
 8015916:	3778      	adds	r7, #120	; 0x78
 8015918:	46bd      	mov	sp, r7
 801591a:	bd80      	pop	{r7, pc}
 801591c:	2019742c 	.word	0x2019742c
 8015920:	20197a30 	.word	0x20197a30
 8015924:	201974c4 	.word	0x201974c4
 8015928:	20197444 	.word	0x20197444
 801592c:	2019743c 	.word	0x2019743c
 8015930:	20197440 	.word	0x20197440
 8015934:	20197430 	.word	0x20197430
 8015938:	e000ed04 	.word	0xe000ed04

0801593c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 801593c:	b480      	push	{r7}
 801593e:	b087      	sub	sp, #28
 8015940:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8015942:	4b21      	ldr	r3, [pc, #132]	; (80159c8 <_tx_thread_time_slice+0x8c>)
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015948:	f3ef 8310 	mrs	r3, PRIMASK
 801594c:	60fb      	str	r3, [r7, #12]
    return(posture);
 801594e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8015950:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015952:	b672      	cpsid	i
    return(int_posture);
 8015954:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8015956:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8015958:	4b1c      	ldr	r3, [pc, #112]	; (80159cc <_tx_thread_time_slice+0x90>)
 801595a:	2200      	movs	r2, #0
 801595c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 801595e:	697b      	ldr	r3, [r7, #20]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d024      	beq.n	80159ae <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8015964:	697b      	ldr	r3, [r7, #20]
 8015966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015968:	2b00      	cmp	r3, #0
 801596a:	d120      	bne.n	80159ae <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801596c:	697b      	ldr	r3, [r7, #20]
 801596e:	69da      	ldr	r2, [r3, #28]
 8015970:	697b      	ldr	r3, [r7, #20]
 8015972:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8015974:	697b      	ldr	r3, [r7, #20]
 8015976:	699b      	ldr	r3, [r3, #24]
 8015978:	4a15      	ldr	r2, [pc, #84]	; (80159d0 <_tx_thread_time_slice+0x94>)
 801597a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 801597c:	697b      	ldr	r3, [r7, #20]
 801597e:	6a1b      	ldr	r3, [r3, #32]
 8015980:	697a      	ldr	r2, [r7, #20]
 8015982:	429a      	cmp	r2, r3
 8015984:	d013      	beq.n	80159ae <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8015986:	697b      	ldr	r3, [r7, #20]
 8015988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801598a:	697b      	ldr	r3, [r7, #20]
 801598c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801598e:	429a      	cmp	r2, r3
 8015990:	d10d      	bne.n	80159ae <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8015992:	697b      	ldr	r3, [r7, #20]
 8015994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015996:	697a      	ldr	r2, [r7, #20]
 8015998:	6a12      	ldr	r2, [r2, #32]
 801599a:	490e      	ldr	r1, [pc, #56]	; (80159d4 <_tx_thread_time_slice+0x98>)
 801599c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80159a0:	4b0d      	ldr	r3, [pc, #52]	; (80159d8 <_tx_thread_time_slice+0x9c>)
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	4a0b      	ldr	r2, [pc, #44]	; (80159d4 <_tx_thread_time_slice+0x98>)
 80159a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159aa:	4a0c      	ldr	r2, [pc, #48]	; (80159dc <_tx_thread_time_slice+0xa0>)
 80159ac:	6013      	str	r3, [r2, #0]
 80159ae:	693b      	ldr	r3, [r7, #16]
 80159b0:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	f383 8810 	msr	PRIMASK, r3
}
 80159b8:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80159ba:	bf00      	nop
 80159bc:	371c      	adds	r7, #28
 80159be:	46bd      	mov	sp, r7
 80159c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c4:	4770      	bx	lr
 80159c6:	bf00      	nop
 80159c8:	2019742c 	.word	0x2019742c
 80159cc:	201974d4 	.word	0x201974d4
 80159d0:	20197a30 	.word	0x20197a30
 80159d4:	20197444 	.word	0x20197444
 80159d8:	20197440 	.word	0x20197440
 80159dc:	20197430 	.word	0x20197430

080159e0 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b08a      	sub	sp, #40	; 0x28
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80159ec:	f3ef 8310 	mrs	r3, PRIMASK
 80159f0:	617b      	str	r3, [r7, #20]
    return(posture);
 80159f2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80159f4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80159f6:	b672      	cpsid	i
    return(int_posture);
 80159f8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 80159fa:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 80159fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a00:	2b04      	cmp	r3, #4
 8015a02:	d10e      	bne.n	8015a22 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8015a04:	4b13      	ldr	r3, [pc, #76]	; (8015a54 <_tx_thread_timeout+0x74>)
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	3301      	adds	r3, #1
 8015a0a:	4a12      	ldr	r2, [pc, #72]	; (8015a54 <_tx_thread_timeout+0x74>)
 8015a0c:	6013      	str	r3, [r2, #0]
 8015a0e:	6a3b      	ldr	r3, [r7, #32]
 8015a10:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	f383 8810 	msr	PRIMASK, r3
}
 8015a18:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8015a1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a1c:	f7ff fd76 	bl	801550c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8015a20:	e013      	b.n	8015a4a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8015a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015a26:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8015a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015a2e:	61bb      	str	r3, [r7, #24]
 8015a30:	6a3b      	ldr	r3, [r7, #32]
 8015a32:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015a34:	68bb      	ldr	r3, [r7, #8]
 8015a36:	f383 8810 	msr	PRIMASK, r3
}
 8015a3a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8015a3c:	69fb      	ldr	r3, [r7, #28]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d003      	beq.n	8015a4a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8015a42:	69fb      	ldr	r3, [r7, #28]
 8015a44:	69b9      	ldr	r1, [r7, #24]
 8015a46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015a48:	4798      	blx	r3
}
 8015a4a:	bf00      	nop
 8015a4c:	3728      	adds	r7, #40	; 0x28
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	bd80      	pop	{r7, pc}
 8015a52:	bf00      	nop
 8015a54:	201974c4 	.word	0x201974c4

08015a58 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b084      	sub	sp, #16
 8015a5c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8015a62:	607b      	str	r3, [r7, #4]
    return(posture);
 8015a64:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8015a66:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015a68:	b672      	cpsid	i
    return(int_posture);
 8015a6a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8015a6c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8015a6e:	4b09      	ldr	r3, [pc, #36]	; (8015a94 <_tx_timer_expiration_process+0x3c>)
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	3301      	adds	r3, #1
 8015a74:	4a07      	ldr	r2, [pc, #28]	; (8015a94 <_tx_timer_expiration_process+0x3c>)
 8015a76:	6013      	str	r3, [r2, #0]
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015a7c:	68bb      	ldr	r3, [r7, #8]
 8015a7e:	f383 8810 	msr	PRIMASK, r3
}
 8015a82:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8015a84:	4804      	ldr	r0, [pc, #16]	; (8015a98 <_tx_timer_expiration_process+0x40>)
 8015a86:	f7ff fd41 	bl	801550c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8015a8a:	bf00      	nop
 8015a8c:	3710      	adds	r7, #16
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	bd80      	pop	{r7, pc}
 8015a92:	bf00      	nop
 8015a94:	201974c4 	.word	0x201974c4
 8015a98:	20197574 	.word	0x20197574

08015a9c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8015a9c:	b590      	push	{r4, r7, lr}
 8015a9e:	b089      	sub	sp, #36	; 0x24
 8015aa0:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8015aa2:	4b28      	ldr	r3, [pc, #160]	; (8015b44 <_tx_timer_initialize+0xa8>)
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8015aa8:	4b27      	ldr	r3, [pc, #156]	; (8015b48 <_tx_timer_initialize+0xac>)
 8015aaa:	2200      	movs	r2, #0
 8015aac:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8015aae:	4b27      	ldr	r3, [pc, #156]	; (8015b4c <_tx_timer_initialize+0xb0>)
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8015ab4:	4b26      	ldr	r3, [pc, #152]	; (8015b50 <_tx_timer_initialize+0xb4>)
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8015aba:	4b26      	ldr	r3, [pc, #152]	; (8015b54 <_tx_timer_initialize+0xb8>)
 8015abc:	2200      	movs	r2, #0
 8015abe:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8015ac0:	2280      	movs	r2, #128	; 0x80
 8015ac2:	2100      	movs	r1, #0
 8015ac4:	4824      	ldr	r0, [pc, #144]	; (8015b58 <_tx_timer_initialize+0xbc>)
 8015ac6:	f013 fc43 	bl	8029350 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8015aca:	4b24      	ldr	r3, [pc, #144]	; (8015b5c <_tx_timer_initialize+0xc0>)
 8015acc:	4a22      	ldr	r2, [pc, #136]	; (8015b58 <_tx_timer_initialize+0xbc>)
 8015ace:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8015ad0:	4b23      	ldr	r3, [pc, #140]	; (8015b60 <_tx_timer_initialize+0xc4>)
 8015ad2:	4a21      	ldr	r2, [pc, #132]	; (8015b58 <_tx_timer_initialize+0xbc>)
 8015ad4:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8015ad6:	4b23      	ldr	r3, [pc, #140]	; (8015b64 <_tx_timer_initialize+0xc8>)
 8015ad8:	4a23      	ldr	r2, [pc, #140]	; (8015b68 <_tx_timer_initialize+0xcc>)
 8015ada:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8015adc:	4b21      	ldr	r3, [pc, #132]	; (8015b64 <_tx_timer_initialize+0xc8>)
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	3304      	adds	r3, #4
 8015ae2:	4a20      	ldr	r2, [pc, #128]	; (8015b64 <_tx_timer_initialize+0xc8>)
 8015ae4:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8015ae6:	4b21      	ldr	r3, [pc, #132]	; (8015b6c <_tx_timer_initialize+0xd0>)
 8015ae8:	4a21      	ldr	r2, [pc, #132]	; (8015b70 <_tx_timer_initialize+0xd4>)
 8015aea:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8015aec:	4b21      	ldr	r3, [pc, #132]	; (8015b74 <_tx_timer_initialize+0xd8>)
 8015aee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015af2:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8015af4:	4b20      	ldr	r3, [pc, #128]	; (8015b78 <_tx_timer_initialize+0xdc>)
 8015af6:	2200      	movs	r2, #0
 8015af8:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8015afa:	4b1c      	ldr	r3, [pc, #112]	; (8015b6c <_tx_timer_initialize+0xd0>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	4a1d      	ldr	r2, [pc, #116]	; (8015b74 <_tx_timer_initialize+0xd8>)
 8015b00:	6812      	ldr	r2, [r2, #0]
 8015b02:	491d      	ldr	r1, [pc, #116]	; (8015b78 <_tx_timer_initialize+0xdc>)
 8015b04:	6809      	ldr	r1, [r1, #0]
 8015b06:	481c      	ldr	r0, [pc, #112]	; (8015b78 <_tx_timer_initialize+0xdc>)
 8015b08:	6800      	ldr	r0, [r0, #0]
 8015b0a:	2400      	movs	r4, #0
 8015b0c:	9405      	str	r4, [sp, #20]
 8015b0e:	2400      	movs	r4, #0
 8015b10:	9404      	str	r4, [sp, #16]
 8015b12:	9003      	str	r0, [sp, #12]
 8015b14:	9102      	str	r1, [sp, #8]
 8015b16:	9201      	str	r2, [sp, #4]
 8015b18:	9300      	str	r3, [sp, #0]
 8015b1a:	4b18      	ldr	r3, [pc, #96]	; (8015b7c <_tx_timer_initialize+0xe0>)
 8015b1c:	4a18      	ldr	r2, [pc, #96]	; (8015b80 <_tx_timer_initialize+0xe4>)
 8015b1e:	4919      	ldr	r1, [pc, #100]	; (8015b84 <_tx_timer_initialize+0xe8>)
 8015b20:	4819      	ldr	r0, [pc, #100]	; (8015b88 <_tx_timer_initialize+0xec>)
 8015b22:	f7ff fb3b 	bl	801519c <_tx_thread_create>
 8015b26:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d1e5      	bne.n	8015afa <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8015b2e:	4b17      	ldr	r3, [pc, #92]	; (8015b8c <_tx_timer_initialize+0xf0>)
 8015b30:	2200      	movs	r2, #0
 8015b32:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8015b34:	4b16      	ldr	r3, [pc, #88]	; (8015b90 <_tx_timer_initialize+0xf4>)
 8015b36:	2200      	movs	r2, #0
 8015b38:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8015b3a:	bf00      	nop
 8015b3c:	370c      	adds	r7, #12
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	bd90      	pop	{r4, r7, pc}
 8015b42:	bf00      	nop
 8015b44:	201974d0 	.word	0x201974d0
 8015b48:	20197a30 	.word	0x20197a30
 8015b4c:	201974d4 	.word	0x201974d4
 8015b50:	20197564 	.word	0x20197564
 8015b54:	20197570 	.word	0x20197570
 8015b58:	201974d8 	.word	0x201974d8
 8015b5c:	20197558 	.word	0x20197558
 8015b60:	20197560 	.word	0x20197560
 8015b64:	2019755c 	.word	0x2019755c
 8015b68:	20197554 	.word	0x20197554
 8015b6c:	20197624 	.word	0x20197624
 8015b70:	20197630 	.word	0x20197630
 8015b74:	20197628 	.word	0x20197628
 8015b78:	2019762c 	.word	0x2019762c
 8015b7c:	4154494d 	.word	0x4154494d
 8015b80:	08015cc9 	.word	0x08015cc9
 8015b84:	0802a8b8 	.word	0x0802a8b8
 8015b88:	20197574 	.word	0x20197574
 8015b8c:	20197568 	.word	0x20197568
 8015b90:	2019756c 	.word	0x2019756c

08015b94 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8015b94:	b480      	push	{r7}
 8015b96:	b089      	sub	sp, #36	; 0x24
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8015ba2:	697b      	ldr	r3, [r7, #20]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d04a      	beq.n	8015c3e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8015ba8:	697b      	ldr	r3, [r7, #20]
 8015baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bae:	d046      	beq.n	8015c3e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	699b      	ldr	r3, [r3, #24]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d142      	bne.n	8015c3e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8015bb8:	697b      	ldr	r3, [r7, #20]
 8015bba:	2b20      	cmp	r3, #32
 8015bbc:	d902      	bls.n	8015bc4 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8015bbe:	231f      	movs	r3, #31
 8015bc0:	61bb      	str	r3, [r7, #24]
 8015bc2:	e002      	b.n	8015bca <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8015bc4:	697b      	ldr	r3, [r7, #20]
 8015bc6:	3b01      	subs	r3, #1
 8015bc8:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8015bca:	4b20      	ldr	r3, [pc, #128]	; (8015c4c <_tx_timer_system_activate+0xb8>)
 8015bcc:	681a      	ldr	r2, [r3, #0]
 8015bce:	69bb      	ldr	r3, [r7, #24]
 8015bd0:	009b      	lsls	r3, r3, #2
 8015bd2:	4413      	add	r3, r2
 8015bd4:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8015bd6:	4b1e      	ldr	r3, [pc, #120]	; (8015c50 <_tx_timer_system_activate+0xbc>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	69fa      	ldr	r2, [r7, #28]
 8015bdc:	429a      	cmp	r2, r3
 8015bde:	d30b      	bcc.n	8015bf8 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8015be0:	4b1b      	ldr	r3, [pc, #108]	; (8015c50 <_tx_timer_system_activate+0xbc>)
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	69fa      	ldr	r2, [r7, #28]
 8015be6:	1ad3      	subs	r3, r2, r3
 8015be8:	109b      	asrs	r3, r3, #2
 8015bea:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8015bec:	4b19      	ldr	r3, [pc, #100]	; (8015c54 <_tx_timer_system_activate+0xc0>)
 8015bee:	681a      	ldr	r2, [r3, #0]
 8015bf0:	693b      	ldr	r3, [r7, #16]
 8015bf2:	009b      	lsls	r3, r3, #2
 8015bf4:	4413      	add	r3, r2
 8015bf6:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8015bf8:	69fb      	ldr	r3, [r7, #28]
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d109      	bne.n	8015c14 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	687a      	ldr	r2, [r7, #4]
 8015c04:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	687a      	ldr	r2, [r7, #4]
 8015c0a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8015c0c:	69fb      	ldr	r3, [r7, #28]
 8015c0e:	687a      	ldr	r2, [r7, #4]
 8015c10:	601a      	str	r2, [r3, #0]
 8015c12:	e011      	b.n	8015c38 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8015c14:	69fb      	ldr	r3, [r7, #28]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	695b      	ldr	r3, [r3, #20]
 8015c1e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8015c20:	68bb      	ldr	r3, [r7, #8]
 8015c22:	687a      	ldr	r2, [r7, #4]
 8015c24:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	687a      	ldr	r2, [r7, #4]
 8015c2a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	68fa      	ldr	r2, [r7, #12]
 8015c30:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	68ba      	ldr	r2, [r7, #8]
 8015c36:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	69fa      	ldr	r2, [r7, #28]
 8015c3c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8015c3e:	bf00      	nop
 8015c40:	3724      	adds	r7, #36	; 0x24
 8015c42:	46bd      	mov	sp, r7
 8015c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c48:	4770      	bx	lr
 8015c4a:	bf00      	nop
 8015c4c:	20197560 	.word	0x20197560
 8015c50:	2019755c 	.word	0x2019755c
 8015c54:	20197558 	.word	0x20197558

08015c58 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8015c58:	b480      	push	{r7}
 8015c5a:	b087      	sub	sp, #28
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	699b      	ldr	r3, [r3, #24]
 8015c64:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8015c66:	697b      	ldr	r3, [r7, #20]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d026      	beq.n	8015cba <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	691b      	ldr	r3, [r3, #16]
 8015c70:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8015c72:	687a      	ldr	r2, [r7, #4]
 8015c74:	693b      	ldr	r3, [r7, #16]
 8015c76:	429a      	cmp	r2, r3
 8015c78:	d108      	bne.n	8015c8c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8015c7a:	697b      	ldr	r3, [r7, #20]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	687a      	ldr	r2, [r7, #4]
 8015c80:	429a      	cmp	r2, r3
 8015c82:	d117      	bne.n	8015cb4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8015c84:	697b      	ldr	r3, [r7, #20]
 8015c86:	2200      	movs	r2, #0
 8015c88:	601a      	str	r2, [r3, #0]
 8015c8a:	e013      	b.n	8015cb4 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	695b      	ldr	r3, [r3, #20]
 8015c90:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8015c92:	693b      	ldr	r3, [r7, #16]
 8015c94:	68fa      	ldr	r2, [r7, #12]
 8015c96:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	693a      	ldr	r2, [r7, #16]
 8015c9c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8015c9e:	697b      	ldr	r3, [r7, #20]
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	687a      	ldr	r2, [r7, #4]
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	d105      	bne.n	8015cb4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8015ca8:	693b      	ldr	r3, [r7, #16]
 8015caa:	697a      	ldr	r2, [r7, #20]
 8015cac:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8015cae:	697b      	ldr	r3, [r7, #20]
 8015cb0:	693a      	ldr	r2, [r7, #16]
 8015cb2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	619a      	str	r2, [r3, #24]
    }
}
 8015cba:	bf00      	nop
 8015cbc:	371c      	adds	r7, #28
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc4:	4770      	bx	lr
	...

08015cc8 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b098      	sub	sp, #96	; 0x60
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	4a73      	ldr	r2, [pc, #460]	; (8015ea4 <_tx_timer_thread_entry+0x1dc>)
 8015cd8:	4293      	cmp	r3, r2
 8015cda:	f040 80de 	bne.w	8015e9a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015cde:	f3ef 8310 	mrs	r3, PRIMASK
 8015ce2:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8015ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8015ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8015ce8:	b672      	cpsid	i
    return(int_posture);
 8015cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8015cec:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8015cee:	4b6e      	ldr	r3, [pc, #440]	; (8015ea8 <_tx_timer_thread_entry+0x1e0>)
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d003      	beq.n	8015d04 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	f107 020c 	add.w	r2, r7, #12
 8015d02:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8015d04:	4b68      	ldr	r3, [pc, #416]	; (8015ea8 <_tx_timer_thread_entry+0x1e0>)
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	2200      	movs	r2, #0
 8015d0a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8015d0c:	4b66      	ldr	r3, [pc, #408]	; (8015ea8 <_tx_timer_thread_entry+0x1e0>)
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	3304      	adds	r3, #4
 8015d12:	4a65      	ldr	r2, [pc, #404]	; (8015ea8 <_tx_timer_thread_entry+0x1e0>)
 8015d14:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8015d16:	4b64      	ldr	r3, [pc, #400]	; (8015ea8 <_tx_timer_thread_entry+0x1e0>)
 8015d18:	681a      	ldr	r2, [r3, #0]
 8015d1a:	4b64      	ldr	r3, [pc, #400]	; (8015eac <_tx_timer_thread_entry+0x1e4>)
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	429a      	cmp	r2, r3
 8015d20:	d103      	bne.n	8015d2a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8015d22:	4b63      	ldr	r3, [pc, #396]	; (8015eb0 <_tx_timer_thread_entry+0x1e8>)
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	4a60      	ldr	r2, [pc, #384]	; (8015ea8 <_tx_timer_thread_entry+0x1e0>)
 8015d28:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8015d2a:	4b62      	ldr	r3, [pc, #392]	; (8015eb4 <_tx_timer_thread_entry+0x1ec>)
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	601a      	str	r2, [r3, #0]
 8015d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015d32:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d36:	f383 8810 	msr	PRIMASK, r3
}
 8015d3a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8015d40:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8015d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8015d44:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8015d46:	b672      	cpsid	i
    return(int_posture);
 8015d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8015d4a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8015d4c:	e07f      	b.n	8015e4e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	691b      	ldr	r3, [r3, #16]
 8015d56:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8015d58:	2300      	movs	r3, #0
 8015d5a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8015d5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d60:	429a      	cmp	r2, r3
 8015d62:	d102      	bne.n	8015d6a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8015d64:	2300      	movs	r3, #0
 8015d66:	60fb      	str	r3, [r7, #12]
 8015d68:	e00e      	b.n	8015d88 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8015d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d6c:	695b      	ldr	r3, [r3, #20]
 8015d6e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8015d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d74:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8015d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015d7a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8015d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d7e:	f107 020c 	add.w	r2, r7, #12
 8015d82:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8015d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d86:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8015d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	2b20      	cmp	r3, #32
 8015d8e:	d911      	bls.n	8015db4 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8015d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8015d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d9a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8015da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015da2:	f107 0208 	add.w	r2, r7, #8
 8015da6:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8015da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015daa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015dac:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8015dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015db0:	60bb      	str	r3, [r7, #8]
 8015db2:	e01a      	b.n	8015dea <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8015db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015db6:	689b      	ldr	r3, [r3, #8]
 8015db8:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8015dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dbc:	68db      	ldr	r3, [r3, #12]
 8015dbe:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8015dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dc2:	685a      	ldr	r2, [r3, #4]
 8015dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dc6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8015dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d009      	beq.n	8015de4 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8015dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dd2:	f107 0208 	add.w	r2, r7, #8
 8015dd6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8015dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015ddc:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8015dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015de0:	60bb      	str	r3, [r7, #8]
 8015de2:	e002      	b.n	8015dea <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8015de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015de6:	2200      	movs	r2, #0
 8015de8:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8015dea:	4a33      	ldr	r2, [pc, #204]	; (8015eb8 <_tx_timer_thread_entry+0x1f0>)
 8015dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dee:	6013      	str	r3, [r2, #0]
 8015df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df6:	f383 8810 	msr	PRIMASK, r3
}
 8015dfa:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8015dfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d002      	beq.n	8015e08 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8015e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015e04:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015e06:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015e08:	f3ef 8310 	mrs	r3, PRIMASK
 8015e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8015e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8015e10:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8015e12:	b672      	cpsid	i
    return(int_posture);
 8015e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8015e16:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8015e18:	4b27      	ldr	r3, [pc, #156]	; (8015eb8 <_tx_timer_thread_entry+0x1f0>)
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8015e1e:	68bb      	ldr	r3, [r7, #8]
 8015e20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015e22:	429a      	cmp	r2, r3
 8015e24:	d105      	bne.n	8015e32 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8015e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e28:	2200      	movs	r2, #0
 8015e2a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8015e2c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015e2e:	f7ff feb1 	bl	8015b94 <_tx_timer_system_activate>
 8015e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015e34:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015e36:	69bb      	ldr	r3, [r7, #24]
 8015e38:	f383 8810 	msr	PRIMASK, r3
}
 8015e3c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8015e42:	623b      	str	r3, [r7, #32]
    return(posture);
 8015e44:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8015e46:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015e48:	b672      	cpsid	i
    return(int_posture);
 8015e4a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8015e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	f47f af7c 	bne.w	8015d4e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8015e56:	4b17      	ldr	r3, [pc, #92]	; (8015eb4 <_tx_timer_thread_entry+0x1ec>)
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d116      	bne.n	8015e8c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8015e5e:	4b17      	ldr	r3, [pc, #92]	; (8015ebc <_tx_timer_thread_entry+0x1f4>)
 8015e60:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8015e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e64:	2203      	movs	r2, #3
 8015e66:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8015e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e6a:	2201      	movs	r2, #1
 8015e6c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8015e6e:	4b14      	ldr	r3, [pc, #80]	; (8015ec0 <_tx_timer_thread_entry+0x1f8>)
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	3301      	adds	r3, #1
 8015e74:	4a12      	ldr	r2, [pc, #72]	; (8015ec0 <_tx_timer_thread_entry+0x1f8>)
 8015e76:	6013      	str	r3, [r2, #0]
 8015e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015e7a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015e7c:	697b      	ldr	r3, [r7, #20]
 8015e7e:	f383 8810 	msr	PRIMASK, r3
}
 8015e82:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8015e84:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8015e86:	f7ff fc41 	bl	801570c <_tx_thread_system_suspend>
 8015e8a:	e728      	b.n	8015cde <_tx_timer_thread_entry+0x16>
 8015e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015e8e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015e90:	693b      	ldr	r3, [r7, #16]
 8015e92:	f383 8810 	msr	PRIMASK, r3
}
 8015e96:	bf00      	nop
            TX_DISABLE
 8015e98:	e721      	b.n	8015cde <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8015e9a:	bf00      	nop
 8015e9c:	3760      	adds	r7, #96	; 0x60
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	bd80      	pop	{r7, pc}
 8015ea2:	bf00      	nop
 8015ea4:	4154494d 	.word	0x4154494d
 8015ea8:	20197560 	.word	0x20197560
 8015eac:	2019755c 	.word	0x2019755c
 8015eb0:	20197558 	.word	0x20197558
 8015eb4:	20197564 	.word	0x20197564
 8015eb8:	20197570 	.word	0x20197570
 8015ebc:	20197574 	.word	0x20197574
 8015ec0:	201974c4 	.word	0x201974c4

08015ec4 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b08a      	sub	sp, #40	; 0x28
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	60f8      	str	r0, [r7, #12]
 8015ecc:	60b9      	str	r1, [r7, #8]
 8015ece:	607a      	str	r2, [r7, #4]
 8015ed0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d102      	bne.n	8015ee2 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015edc:	2302      	movs	r3, #2
 8015ede:	627b      	str	r3, [r7, #36]	; 0x24
 8015ee0:	e029      	b.n	8015f36 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	4a2d      	ldr	r2, [pc, #180]	; (8015f9c <_txe_byte_allocate+0xd8>)
 8015ee8:	4293      	cmp	r3, r2
 8015eea:	d002      	beq.n	8015ef2 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015eec:	2302      	movs	r3, #2
 8015eee:	627b      	str	r3, [r7, #36]	; 0x24
 8015ef0:	e021      	b.n	8015f36 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d102      	bne.n	8015efe <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8015ef8:	2303      	movs	r3, #3
 8015efa:	627b      	str	r3, [r7, #36]	; 0x24
 8015efc:	e01b      	b.n	8015f36 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d102      	bne.n	8015f0a <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8015f04:	2305      	movs	r3, #5
 8015f06:	627b      	str	r3, [r7, #36]	; 0x24
 8015f08:	e015      	b.n	8015f36 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	69db      	ldr	r3, [r3, #28]
 8015f0e:	687a      	ldr	r2, [r7, #4]
 8015f10:	429a      	cmp	r2, r3
 8015f12:	d902      	bls.n	8015f1a <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8015f14:	2305      	movs	r3, #5
 8015f16:	627b      	str	r3, [r7, #36]	; 0x24
 8015f18:	e00d      	b.n	8015f36 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d00a      	beq.n	8015f36 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015f20:	f3ef 8305 	mrs	r3, IPSR
 8015f24:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8015f26:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015f28:	4b1d      	ldr	r3, [pc, #116]	; (8015fa0 <_txe_byte_allocate+0xdc>)
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	4313      	orrs	r3, r2
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d001      	beq.n	8015f36 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8015f32:	2304      	movs	r3, #4
 8015f34:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8015f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d108      	bne.n	8015f4e <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8015f3c:	4b19      	ldr	r3, [pc, #100]	; (8015fa4 <_txe_byte_allocate+0xe0>)
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8015f42:	6a3b      	ldr	r3, [r7, #32]
 8015f44:	4a18      	ldr	r2, [pc, #96]	; (8015fa8 <_txe_byte_allocate+0xe4>)
 8015f46:	4293      	cmp	r3, r2
 8015f48:	d101      	bne.n	8015f4e <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8015f4a:	2313      	movs	r3, #19
 8015f4c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8015f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d114      	bne.n	8015f7e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015f54:	f3ef 8305 	mrs	r3, IPSR
 8015f58:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015f5a:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8015f5c:	4b10      	ldr	r3, [pc, #64]	; (8015fa0 <_txe_byte_allocate+0xdc>)
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	4313      	orrs	r3, r2
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d00b      	beq.n	8015f7e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015f66:	f3ef 8305 	mrs	r3, IPSR
 8015f6a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015f6c:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8015f6e:	4b0c      	ldr	r3, [pc, #48]	; (8015fa0 <_txe_byte_allocate+0xdc>)
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	4313      	orrs	r3, r2
 8015f74:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8015f78:	d201      	bcs.n	8015f7e <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8015f7a:	2313      	movs	r3, #19
 8015f7c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8015f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d106      	bne.n	8015f92 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8015f84:	683b      	ldr	r3, [r7, #0]
 8015f86:	687a      	ldr	r2, [r7, #4]
 8015f88:	68b9      	ldr	r1, [r7, #8]
 8015f8a:	68f8      	ldr	r0, [r7, #12]
 8015f8c:	f7fe f80e 	bl	8013fac <_tx_byte_allocate>
 8015f90:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8015f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015f94:	4618      	mov	r0, r3
 8015f96:	3728      	adds	r7, #40	; 0x28
 8015f98:	46bd      	mov	sp, r7
 8015f9a:	bd80      	pop	{r7, pc}
 8015f9c:	42595445 	.word	0x42595445
 8015fa0:	20000054 	.word	0x20000054
 8015fa4:	2019742c 	.word	0x2019742c
 8015fa8:	20197574 	.word	0x20197574

08015fac <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b092      	sub	sp, #72	; 0x48
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	60f8      	str	r0, [r7, #12]
 8015fb4:	60b9      	str	r1, [r7, #8]
 8015fb6:	607a      	str	r2, [r7, #4]
 8015fb8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015fba:	2300      	movs	r3, #0
 8015fbc:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d102      	bne.n	8015fca <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015fc4:	2302      	movs	r3, #2
 8015fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8015fc8:	e075      	b.n	80160b6 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8015fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fcc:	2b34      	cmp	r3, #52	; 0x34
 8015fce:	d002      	beq.n	8015fd6 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8015fd0:	2302      	movs	r3, #2
 8015fd2:	647b      	str	r3, [r7, #68]	; 0x44
 8015fd4:	e06f      	b.n	80160b6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8015fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8015fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8015fde:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8015fe0:	b672      	cpsid	i
    return(int_posture);
 8015fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8015fe4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8015fe6:	4b3b      	ldr	r3, [pc, #236]	; (80160d4 <_txe_byte_pool_create+0x128>)
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	3301      	adds	r3, #1
 8015fec:	4a39      	ldr	r2, [pc, #228]	; (80160d4 <_txe_byte_pool_create+0x128>)
 8015fee:	6013      	str	r3, [r2, #0]
 8015ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ff2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ff6:	f383 8810 	msr	PRIMASK, r3
}
 8015ffa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8015ffc:	4b36      	ldr	r3, [pc, #216]	; (80160d8 <_txe_byte_pool_create+0x12c>)
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8016002:	2300      	movs	r3, #0
 8016004:	643b      	str	r3, [r7, #64]	; 0x40
 8016006:	e009      	b.n	801601c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8016008:	68fa      	ldr	r2, [r7, #12]
 801600a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801600c:	429a      	cmp	r2, r3
 801600e:	d00b      	beq.n	8016028 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8016010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016014:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8016016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016018:	3301      	adds	r3, #1
 801601a:	643b      	str	r3, [r7, #64]	; 0x40
 801601c:	4b2f      	ldr	r3, [pc, #188]	; (80160dc <_txe_byte_pool_create+0x130>)
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016022:	429a      	cmp	r2, r3
 8016024:	d3f0      	bcc.n	8016008 <_txe_byte_pool_create+0x5c>
 8016026:	e000      	b.n	801602a <_txe_byte_pool_create+0x7e>
                break;
 8016028:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801602a:	f3ef 8310 	mrs	r3, PRIMASK
 801602e:	623b      	str	r3, [r7, #32]
    return(posture);
 8016030:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8016032:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8016034:	b672      	cpsid	i
    return(int_posture);
 8016036:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8016038:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801603a:	4b26      	ldr	r3, [pc, #152]	; (80160d4 <_txe_byte_pool_create+0x128>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	3b01      	subs	r3, #1
 8016040:	4a24      	ldr	r2, [pc, #144]	; (80160d4 <_txe_byte_pool_create+0x128>)
 8016042:	6013      	str	r3, [r2, #0]
 8016044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016046:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801604a:	f383 8810 	msr	PRIMASK, r3
}
 801604e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8016050:	f7ff fa22 	bl	8015498 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8016054:	68fa      	ldr	r2, [r7, #12]
 8016056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016058:	429a      	cmp	r2, r3
 801605a:	d102      	bne.n	8016062 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 801605c:	2302      	movs	r3, #2
 801605e:	647b      	str	r3, [r7, #68]	; 0x44
 8016060:	e029      	b.n	80160b6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d102      	bne.n	801606e <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8016068:	2303      	movs	r3, #3
 801606a:	647b      	str	r3, [r7, #68]	; 0x44
 801606c:	e023      	b.n	80160b6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 801606e:	683b      	ldr	r3, [r7, #0]
 8016070:	2b63      	cmp	r3, #99	; 0x63
 8016072:	d802      	bhi.n	801607a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8016074:	2305      	movs	r3, #5
 8016076:	647b      	str	r3, [r7, #68]	; 0x44
 8016078:	e01d      	b.n	80160b6 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801607a:	4b19      	ldr	r3, [pc, #100]	; (80160e0 <_txe_byte_pool_create+0x134>)
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8016080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016082:	4a18      	ldr	r2, [pc, #96]	; (80160e4 <_txe_byte_pool_create+0x138>)
 8016084:	4293      	cmp	r3, r2
 8016086:	d101      	bne.n	801608c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8016088:	2313      	movs	r3, #19
 801608a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801608c:	f3ef 8305 	mrs	r3, IPSR
 8016090:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8016092:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016094:	4b14      	ldr	r3, [pc, #80]	; (80160e8 <_txe_byte_pool_create+0x13c>)
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	4313      	orrs	r3, r2
 801609a:	2b00      	cmp	r3, #0
 801609c:	d00b      	beq.n	80160b6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801609e:	f3ef 8305 	mrs	r3, IPSR
 80160a2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80160a4:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80160a6:	4b10      	ldr	r3, [pc, #64]	; (80160e8 <_txe_byte_pool_create+0x13c>)
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	4313      	orrs	r3, r2
 80160ac:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80160b0:	d201      	bcs.n	80160b6 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80160b2:	2313      	movs	r3, #19
 80160b4:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80160b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d106      	bne.n	80160ca <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80160bc:	683b      	ldr	r3, [r7, #0]
 80160be:	687a      	ldr	r2, [r7, #4]
 80160c0:	68b9      	ldr	r1, [r7, #8]
 80160c2:	68f8      	ldr	r0, [r7, #12]
 80160c4:	f7fe f8b4 	bl	8014230 <_tx_byte_pool_create>
 80160c8:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80160ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80160cc:	4618      	mov	r0, r3
 80160ce:	3748      	adds	r7, #72	; 0x48
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bd80      	pop	{r7, pc}
 80160d4:	201974c4 	.word	0x201974c4
 80160d8:	2019741c 	.word	0x2019741c
 80160dc:	20197420 	.word	0x20197420
 80160e0:	2019742c 	.word	0x2019742c
 80160e4:	20197574 	.word	0x20197574
 80160e8:	20000054 	.word	0x20000054

080160ec <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b094      	sub	sp, #80	; 0x50
 80160f0:	af02      	add	r7, sp, #8
 80160f2:	60f8      	str	r0, [r7, #12]
 80160f4:	60b9      	str	r1, [r7, #8]
 80160f6:	607a      	str	r2, [r7, #4]
 80160f8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80160fa:	2300      	movs	r3, #0
 80160fc:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d102      	bne.n	801610a <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8016104:	2309      	movs	r3, #9
 8016106:	647b      	str	r3, [r7, #68]	; 0x44
 8016108:	e083      	b.n	8016212 <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 801610a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801610c:	2b38      	cmp	r3, #56	; 0x38
 801610e:	d002      	beq.n	8016116 <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8016110:	2309      	movs	r3, #9
 8016112:	647b      	str	r3, [r7, #68]	; 0x44
 8016114:	e07d      	b.n	8016212 <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016116:	f3ef 8310 	mrs	r3, PRIMASK
 801611a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801611e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8016120:	b672      	cpsid	i
    return(int_posture);
 8016122:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8016124:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8016126:	4b43      	ldr	r3, [pc, #268]	; (8016234 <_txe_queue_create+0x148>)
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	3301      	adds	r3, #1
 801612c:	4a41      	ldr	r2, [pc, #260]	; (8016234 <_txe_queue_create+0x148>)
 801612e:	6013      	str	r3, [r2, #0]
 8016130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016132:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016136:	f383 8810 	msr	PRIMASK, r3
}
 801613a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 801613c:	4b3e      	ldr	r3, [pc, #248]	; (8016238 <_txe_queue_create+0x14c>)
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8016142:	2300      	movs	r3, #0
 8016144:	643b      	str	r3, [r7, #64]	; 0x40
 8016146:	e009      	b.n	801615c <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 8016148:	68fa      	ldr	r2, [r7, #12]
 801614a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801614c:	429a      	cmp	r2, r3
 801614e:	d00b      	beq.n	8016168 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8016150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016154:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8016156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016158:	3301      	adds	r3, #1
 801615a:	643b      	str	r3, [r7, #64]	; 0x40
 801615c:	4b37      	ldr	r3, [pc, #220]	; (801623c <_txe_queue_create+0x150>)
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016162:	429a      	cmp	r2, r3
 8016164:	d3f0      	bcc.n	8016148 <_txe_queue_create+0x5c>
 8016166:	e000      	b.n	801616a <_txe_queue_create+0x7e>
                break;
 8016168:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801616a:	f3ef 8310 	mrs	r3, PRIMASK
 801616e:	623b      	str	r3, [r7, #32]
    return(posture);
 8016170:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8016172:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8016174:	b672      	cpsid	i
    return(int_posture);
 8016176:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8016178:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801617a:	4b2e      	ldr	r3, [pc, #184]	; (8016234 <_txe_queue_create+0x148>)
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	3b01      	subs	r3, #1
 8016180:	4a2c      	ldr	r2, [pc, #176]	; (8016234 <_txe_queue_create+0x148>)
 8016182:	6013      	str	r3, [r2, #0]
 8016184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016186:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801618a:	f383 8810 	msr	PRIMASK, r3
}
 801618e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8016190:	f7ff f982 	bl	8015498 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8016194:	68fa      	ldr	r2, [r7, #12]
 8016196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016198:	429a      	cmp	r2, r3
 801619a:	d102      	bne.n	80161a2 <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 801619c:	2309      	movs	r3, #9
 801619e:	647b      	str	r3, [r7, #68]	; 0x44
 80161a0:	e037      	b.n	8016212 <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 80161a2:	683b      	ldr	r3, [r7, #0]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d102      	bne.n	80161ae <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 80161a8:	2303      	movs	r3, #3
 80161aa:	647b      	str	r3, [r7, #68]	; 0x44
 80161ac:	e031      	b.n	8016212 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d102      	bne.n	80161ba <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 80161b4:	2305      	movs	r3, #5
 80161b6:	647b      	str	r3, [r7, #68]	; 0x44
 80161b8:	e02b      	b.n	8016212 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	2b10      	cmp	r3, #16
 80161be:	d902      	bls.n	80161c6 <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 80161c0:	2305      	movs	r3, #5
 80161c2:	647b      	str	r3, [r7, #68]	; 0x44
 80161c4:	e025      	b.n	8016212 <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 80161c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161c8:	089b      	lsrs	r3, r3, #2
 80161ca:	687a      	ldr	r2, [r7, #4]
 80161cc:	429a      	cmp	r2, r3
 80161ce:	d902      	bls.n	80161d6 <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 80161d0:	2305      	movs	r3, #5
 80161d2:	647b      	str	r3, [r7, #68]	; 0x44
 80161d4:	e01d      	b.n	8016212 <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80161d6:	4b1a      	ldr	r3, [pc, #104]	; (8016240 <_txe_queue_create+0x154>)
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80161dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161de:	4a19      	ldr	r2, [pc, #100]	; (8016244 <_txe_queue_create+0x158>)
 80161e0:	4293      	cmp	r3, r2
 80161e2:	d101      	bne.n	80161e8 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80161e4:	2313      	movs	r3, #19
 80161e6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80161e8:	f3ef 8305 	mrs	r3, IPSR
 80161ec:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80161ee:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80161f0:	4b15      	ldr	r3, [pc, #84]	; (8016248 <_txe_queue_create+0x15c>)
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	4313      	orrs	r3, r2
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d00b      	beq.n	8016212 <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80161fa:	f3ef 8305 	mrs	r3, IPSR
 80161fe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016200:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8016202:	4b11      	ldr	r3, [pc, #68]	; (8016248 <_txe_queue_create+0x15c>)
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	4313      	orrs	r3, r2
 8016208:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801620c:	d201      	bcs.n	8016212 <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801620e:	2313      	movs	r3, #19
 8016210:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016214:	2b00      	cmp	r3, #0
 8016216:	d108      	bne.n	801622a <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 8016218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801621a:	9300      	str	r3, [sp, #0]
 801621c:	683b      	ldr	r3, [r7, #0]
 801621e:	687a      	ldr	r2, [r7, #4]
 8016220:	68b9      	ldr	r1, [r7, #8]
 8016222:	68f8      	ldr	r0, [r7, #12]
 8016224:	f7fe fa9a 	bl	801475c <_tx_queue_create>
 8016228:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801622a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801622c:	4618      	mov	r0, r3
 801622e:	3748      	adds	r7, #72	; 0x48
 8016230:	46bd      	mov	sp, r7
 8016232:	bd80      	pop	{r7, pc}
 8016234:	201974c4 	.word	0x201974c4
 8016238:	201973fc 	.word	0x201973fc
 801623c:	20197400 	.word	0x20197400
 8016240:	2019742c 	.word	0x2019742c
 8016244:	20197574 	.word	0x20197574
 8016248:	20000054 	.word	0x20000054

0801624c <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b088      	sub	sp, #32
 8016250:	af00      	add	r7, sp, #0
 8016252:	60f8      	str	r0, [r7, #12]
 8016254:	60b9      	str	r1, [r7, #8]
 8016256:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016258:	2300      	movs	r3, #0
 801625a:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d102      	bne.n	8016268 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8016262:	2309      	movs	r3, #9
 8016264:	61fb      	str	r3, [r7, #28]
 8016266:	e025      	b.n	80162b4 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	4a18      	ldr	r2, [pc, #96]	; (80162d0 <_txe_queue_receive+0x84>)
 801626e:	4293      	cmp	r3, r2
 8016270:	d002      	beq.n	8016278 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8016272:	2309      	movs	r3, #9
 8016274:	61fb      	str	r3, [r7, #28]
 8016276:	e01d      	b.n	80162b4 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 8016278:	68bb      	ldr	r3, [r7, #8]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d102      	bne.n	8016284 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 801627e:	2303      	movs	r3, #3
 8016280:	61fb      	str	r3, [r7, #28]
 8016282:	e017      	b.n	80162b4 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d014      	beq.n	80162b4 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801628a:	f3ef 8305 	mrs	r3, IPSR
 801628e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016290:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016292:	4b10      	ldr	r3, [pc, #64]	; (80162d4 <_txe_queue_receive+0x88>)
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	4313      	orrs	r3, r2
 8016298:	2b00      	cmp	r3, #0
 801629a:	d002      	beq.n	80162a2 <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801629c:	2304      	movs	r3, #4
 801629e:	61fb      	str	r3, [r7, #28]
 80162a0:	e008      	b.n	80162b4 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80162a2:	4b0d      	ldr	r3, [pc, #52]	; (80162d8 <_txe_queue_receive+0x8c>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80162a8:	69bb      	ldr	r3, [r7, #24]
 80162aa:	4a0c      	ldr	r2, [pc, #48]	; (80162dc <_txe_queue_receive+0x90>)
 80162ac:	4293      	cmp	r3, r2
 80162ae:	d101      	bne.n	80162b4 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80162b0:	2304      	movs	r3, #4
 80162b2:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80162b4:	69fb      	ldr	r3, [r7, #28]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d105      	bne.n	80162c6 <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 80162ba:	687a      	ldr	r2, [r7, #4]
 80162bc:	68b9      	ldr	r1, [r7, #8]
 80162be:	68f8      	ldr	r0, [r7, #12]
 80162c0:	f7fe fac0 	bl	8014844 <_tx_queue_receive>
 80162c4:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80162c6:	69fb      	ldr	r3, [r7, #28]
}
 80162c8:	4618      	mov	r0, r3
 80162ca:	3720      	adds	r7, #32
 80162cc:	46bd      	mov	sp, r7
 80162ce:	bd80      	pop	{r7, pc}
 80162d0:	51554555 	.word	0x51554555
 80162d4:	20000054 	.word	0x20000054
 80162d8:	2019742c 	.word	0x2019742c
 80162dc:	20197574 	.word	0x20197574

080162e0 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b088      	sub	sp, #32
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	60f8      	str	r0, [r7, #12]
 80162e8:	60b9      	str	r1, [r7, #8]
 80162ea:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80162ec:	2300      	movs	r3, #0
 80162ee:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d102      	bne.n	80162fc <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80162f6:	2309      	movs	r3, #9
 80162f8:	61fb      	str	r3, [r7, #28]
 80162fa:	e025      	b.n	8016348 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	4a18      	ldr	r2, [pc, #96]	; (8016364 <_txe_queue_send+0x84>)
 8016302:	4293      	cmp	r3, r2
 8016304:	d002      	beq.n	801630c <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8016306:	2309      	movs	r3, #9
 8016308:	61fb      	str	r3, [r7, #28]
 801630a:	e01d      	b.n	8016348 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 801630c:	68bb      	ldr	r3, [r7, #8]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d102      	bne.n	8016318 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8016312:	2303      	movs	r3, #3
 8016314:	61fb      	str	r3, [r7, #28]
 8016316:	e017      	b.n	8016348 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d014      	beq.n	8016348 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801631e:	f3ef 8305 	mrs	r3, IPSR
 8016322:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016324:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016326:	4b10      	ldr	r3, [pc, #64]	; (8016368 <_txe_queue_send+0x88>)
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	4313      	orrs	r3, r2
 801632c:	2b00      	cmp	r3, #0
 801632e:	d002      	beq.n	8016336 <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8016330:	2304      	movs	r3, #4
 8016332:	61fb      	str	r3, [r7, #28]
 8016334:	e008      	b.n	8016348 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8016336:	4b0d      	ldr	r3, [pc, #52]	; (801636c <_txe_queue_send+0x8c>)
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801633c:	69bb      	ldr	r3, [r7, #24]
 801633e:	4a0c      	ldr	r2, [pc, #48]	; (8016370 <_txe_queue_send+0x90>)
 8016340:	4293      	cmp	r3, r2
 8016342:	d101      	bne.n	8016348 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8016344:	2304      	movs	r3, #4
 8016346:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016348:	69fb      	ldr	r3, [r7, #28]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d105      	bne.n	801635a <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 801634e:	687a      	ldr	r2, [r7, #4]
 8016350:	68b9      	ldr	r1, [r7, #8]
 8016352:	68f8      	ldr	r0, [r7, #12]
 8016354:	f7fe fc3e 	bl	8014bd4 <_tx_queue_send>
 8016358:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 801635a:	69fb      	ldr	r3, [r7, #28]
}
 801635c:	4618      	mov	r0, r3
 801635e:	3720      	adds	r7, #32
 8016360:	46bd      	mov	sp, r7
 8016362:	bd80      	pop	{r7, pc}
 8016364:	51554555 	.word	0x51554555
 8016368:	20000054 	.word	0x20000054
 801636c:	2019742c 	.word	0x2019742c
 8016370:	20197574 	.word	0x20197574

08016374 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8016374:	b580      	push	{r7, lr}
 8016376:	b092      	sub	sp, #72	; 0x48
 8016378:	af00      	add	r7, sp, #0
 801637a:	60f8      	str	r0, [r7, #12]
 801637c:	60b9      	str	r1, [r7, #8]
 801637e:	607a      	str	r2, [r7, #4]
 8016380:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016382:	2300      	movs	r3, #0
 8016384:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d102      	bne.n	8016392 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801638c:	230c      	movs	r3, #12
 801638e:	647b      	str	r3, [r7, #68]	; 0x44
 8016390:	e054      	b.n	801643c <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8016392:	683b      	ldr	r3, [r7, #0]
 8016394:	2b1c      	cmp	r3, #28
 8016396:	d002      	beq.n	801639e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016398:	230c      	movs	r3, #12
 801639a:	647b      	str	r3, [r7, #68]	; 0x44
 801639c:	e04e      	b.n	801643c <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801639e:	f3ef 8310 	mrs	r3, PRIMASK
 80163a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80163a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80163a6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80163a8:	b672      	cpsid	i
    return(int_posture);
 80163aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80163ac:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80163ae:	4b36      	ldr	r3, [pc, #216]	; (8016488 <_txe_semaphore_create+0x114>)
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	3301      	adds	r3, #1
 80163b4:	4a34      	ldr	r2, [pc, #208]	; (8016488 <_txe_semaphore_create+0x114>)
 80163b6:	6013      	str	r3, [r2, #0]
 80163b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ba:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80163bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163be:	f383 8810 	msr	PRIMASK, r3
}
 80163c2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 80163c4:	4b31      	ldr	r3, [pc, #196]	; (801648c <_txe_semaphore_create+0x118>)
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80163ca:	2300      	movs	r3, #0
 80163cc:	643b      	str	r3, [r7, #64]	; 0x40
 80163ce:	e009      	b.n	80163e4 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 80163d0:	68fa      	ldr	r2, [r7, #12]
 80163d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163d4:	429a      	cmp	r2, r3
 80163d6:	d00b      	beq.n	80163f0 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 80163d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163da:	695b      	ldr	r3, [r3, #20]
 80163dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80163de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80163e0:	3301      	adds	r3, #1
 80163e2:	643b      	str	r3, [r7, #64]	; 0x40
 80163e4:	4b2a      	ldr	r3, [pc, #168]	; (8016490 <_txe_semaphore_create+0x11c>)
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80163ea:	429a      	cmp	r2, r3
 80163ec:	d3f0      	bcc.n	80163d0 <_txe_semaphore_create+0x5c>
 80163ee:	e000      	b.n	80163f2 <_txe_semaphore_create+0x7e>
                break;
 80163f0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80163f2:	f3ef 8310 	mrs	r3, PRIMASK
 80163f6:	623b      	str	r3, [r7, #32]
    return(posture);
 80163f8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80163fa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80163fc:	b672      	cpsid	i
    return(int_posture);
 80163fe:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8016400:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8016402:	4b21      	ldr	r3, [pc, #132]	; (8016488 <_txe_semaphore_create+0x114>)
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	3b01      	subs	r3, #1
 8016408:	4a1f      	ldr	r2, [pc, #124]	; (8016488 <_txe_semaphore_create+0x114>)
 801640a:	6013      	str	r3, [r2, #0]
 801640c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801640e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016412:	f383 8810 	msr	PRIMASK, r3
}
 8016416:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8016418:	f7ff f83e 	bl	8015498 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 801641c:	68fa      	ldr	r2, [r7, #12]
 801641e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016420:	429a      	cmp	r2, r3
 8016422:	d102      	bne.n	801642a <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8016424:	230c      	movs	r3, #12
 8016426:	647b      	str	r3, [r7, #68]	; 0x44
 8016428:	e008      	b.n	801643c <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801642a:	4b1a      	ldr	r3, [pc, #104]	; (8016494 <_txe_semaphore_create+0x120>)
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8016430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016432:	4a19      	ldr	r2, [pc, #100]	; (8016498 <_txe_semaphore_create+0x124>)
 8016434:	4293      	cmp	r3, r2
 8016436:	d101      	bne.n	801643c <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8016438:	2313      	movs	r3, #19
 801643a:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801643c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801643e:	2b00      	cmp	r3, #0
 8016440:	d114      	bne.n	801646c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016442:	f3ef 8305 	mrs	r3, IPSR
 8016446:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8016448:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801644a:	4b14      	ldr	r3, [pc, #80]	; (801649c <_txe_semaphore_create+0x128>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	4313      	orrs	r3, r2
 8016450:	2b00      	cmp	r3, #0
 8016452:	d00b      	beq.n	801646c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016454:	f3ef 8305 	mrs	r3, IPSR
 8016458:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801645a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801645c:	4b0f      	ldr	r3, [pc, #60]	; (801649c <_txe_semaphore_create+0x128>)
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	4313      	orrs	r3, r2
 8016462:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016466:	d201      	bcs.n	801646c <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8016468:	2313      	movs	r3, #19
 801646a:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801646c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801646e:	2b00      	cmp	r3, #0
 8016470:	d105      	bne.n	801647e <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8016472:	687a      	ldr	r2, [r7, #4]
 8016474:	68b9      	ldr	r1, [r7, #8]
 8016476:	68f8      	ldr	r0, [r7, #12]
 8016478:	f7fe fd54 	bl	8014f24 <_tx_semaphore_create>
 801647c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801647e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8016480:	4618      	mov	r0, r3
 8016482:	3748      	adds	r7, #72	; 0x48
 8016484:	46bd      	mov	sp, r7
 8016486:	bd80      	pop	{r7, pc}
 8016488:	201974c4 	.word	0x201974c4
 801648c:	201973f4 	.word	0x201973f4
 8016490:	201973f8 	.word	0x201973f8
 8016494:	2019742c 	.word	0x2019742c
 8016498:	20197574 	.word	0x20197574
 801649c:	20000054 	.word	0x20000054

080164a0 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b086      	sub	sp, #24
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
 80164a8:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80164aa:	2300      	movs	r3, #0
 80164ac:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d102      	bne.n	80164ba <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80164b4:	230c      	movs	r3, #12
 80164b6:	617b      	str	r3, [r7, #20]
 80164b8:	e01f      	b.n	80164fa <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	4a15      	ldr	r2, [pc, #84]	; (8016514 <_txe_semaphore_get+0x74>)
 80164c0:	4293      	cmp	r3, r2
 80164c2:	d002      	beq.n	80164ca <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80164c4:	230c      	movs	r3, #12
 80164c6:	617b      	str	r3, [r7, #20]
 80164c8:	e017      	b.n	80164fa <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80164ca:	683b      	ldr	r3, [r7, #0]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d014      	beq.n	80164fa <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80164d0:	f3ef 8305 	mrs	r3, IPSR
 80164d4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80164d6:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80164d8:	4b0f      	ldr	r3, [pc, #60]	; (8016518 <_txe_semaphore_get+0x78>)
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	4313      	orrs	r3, r2
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d002      	beq.n	80164e8 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80164e2:	2304      	movs	r3, #4
 80164e4:	617b      	str	r3, [r7, #20]
 80164e6:	e008      	b.n	80164fa <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80164e8:	4b0c      	ldr	r3, [pc, #48]	; (801651c <_txe_semaphore_get+0x7c>)
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80164ee:	693b      	ldr	r3, [r7, #16]
 80164f0:	4a0b      	ldr	r2, [pc, #44]	; (8016520 <_txe_semaphore_get+0x80>)
 80164f2:	4293      	cmp	r3, r2
 80164f4:	d101      	bne.n	80164fa <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80164f6:	2304      	movs	r3, #4
 80164f8:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80164fa:	697b      	ldr	r3, [r7, #20]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d104      	bne.n	801650a <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8016500:	6839      	ldr	r1, [r7, #0]
 8016502:	6878      	ldr	r0, [r7, #4]
 8016504:	f7fe fd60 	bl	8014fc8 <_tx_semaphore_get>
 8016508:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801650a:	697b      	ldr	r3, [r7, #20]
}
 801650c:	4618      	mov	r0, r3
 801650e:	3718      	adds	r7, #24
 8016510:	46bd      	mov	sp, r7
 8016512:	bd80      	pop	{r7, pc}
 8016514:	53454d41 	.word	0x53454d41
 8016518:	20000054 	.word	0x20000054
 801651c:	2019742c 	.word	0x2019742c
 8016520:	20197574 	.word	0x20197574

08016524 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b084      	sub	sp, #16
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d102      	bne.n	8016538 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016532:	230c      	movs	r3, #12
 8016534:	60fb      	str	r3, [r7, #12]
 8016536:	e00b      	b.n	8016550 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	4a07      	ldr	r2, [pc, #28]	; (801655c <_txe_semaphore_put+0x38>)
 801653e:	4293      	cmp	r3, r2
 8016540:	d002      	beq.n	8016548 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016542:	230c      	movs	r3, #12
 8016544:	60fb      	str	r3, [r7, #12]
 8016546:	e003      	b.n	8016550 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8016548:	6878      	ldr	r0, [r7, #4]
 801654a:	f7fe fdcf 	bl	80150ec <_tx_semaphore_put>
 801654e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8016550:	68fb      	ldr	r3, [r7, #12]
}
 8016552:	4618      	mov	r0, r3
 8016554:	3710      	adds	r7, #16
 8016556:	46bd      	mov	sp, r7
 8016558:	bd80      	pop	{r7, pc}
 801655a:	bf00      	nop
 801655c:	53454d41 	.word	0x53454d41

08016560 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b09a      	sub	sp, #104	; 0x68
 8016564:	af06      	add	r7, sp, #24
 8016566:	60f8      	str	r0, [r7, #12]
 8016568:	60b9      	str	r1, [r7, #8]
 801656a:	607a      	str	r2, [r7, #4]
 801656c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801656e:	2300      	movs	r3, #0
 8016570:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d102      	bne.n	801657e <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8016578:	230e      	movs	r3, #14
 801657a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801657c:	e0bb      	b.n	80166f6 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 801657e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016580:	2bb0      	cmp	r3, #176	; 0xb0
 8016582:	d002      	beq.n	801658a <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8016584:	230e      	movs	r3, #14
 8016586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016588:	e0b5      	b.n	80166f6 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801658a:	f3ef 8310 	mrs	r3, PRIMASK
 801658e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8016590:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8016592:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8016594:	b672      	cpsid	i
    return(int_posture);
 8016596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8016598:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801659a:	4b64      	ldr	r3, [pc, #400]	; (801672c <_txe_thread_create+0x1cc>)
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	3301      	adds	r3, #1
 80165a0:	4a62      	ldr	r2, [pc, #392]	; (801672c <_txe_thread_create+0x1cc>)
 80165a2:	6013      	str	r3, [r2, #0]
 80165a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80165a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165aa:	f383 8810 	msr	PRIMASK, r3
}
 80165ae:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 80165b0:	2300      	movs	r3, #0
 80165b2:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 80165b4:	4b5e      	ldr	r3, [pc, #376]	; (8016730 <_txe_thread_create+0x1d0>)
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80165ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80165bc:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80165be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80165c0:	3b01      	subs	r3, #1
 80165c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80165c4:	4413      	add	r3, r2
 80165c6:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80165c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ca:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80165cc:	2300      	movs	r3, #0
 80165ce:	647b      	str	r3, [r7, #68]	; 0x44
 80165d0:	e02b      	b.n	801662a <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80165d2:	68fa      	ldr	r2, [r7, #12]
 80165d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165d6:	429a      	cmp	r2, r3
 80165d8:	d101      	bne.n	80165de <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80165da:	2301      	movs	r3, #1
 80165dc:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80165de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80165e0:	2b01      	cmp	r3, #1
 80165e2:	d028      	beq.n	8016636 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80165e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165e6:	68db      	ldr	r3, [r3, #12]
 80165e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d308      	bcc.n	8016600 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80165ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165f0:	691b      	ldr	r3, [r3, #16]
 80165f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80165f4:	429a      	cmp	r2, r3
 80165f6:	d203      	bcs.n	8016600 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80165f8:	2300      	movs	r3, #0
 80165fa:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80165fc:	2301      	movs	r3, #1
 80165fe:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8016600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016602:	68db      	ldr	r3, [r3, #12]
 8016604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016606:	429a      	cmp	r2, r3
 8016608:	d308      	bcc.n	801661c <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801660a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801660c:	691b      	ldr	r3, [r3, #16]
 801660e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016610:	429a      	cmp	r2, r3
 8016612:	d203      	bcs.n	801661c <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8016614:	2300      	movs	r3, #0
 8016616:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8016618:	2301      	movs	r3, #1
 801661a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 801661c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801661e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016622:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8016624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016626:	3301      	adds	r3, #1
 8016628:	647b      	str	r3, [r7, #68]	; 0x44
 801662a:	4b42      	ldr	r3, [pc, #264]	; (8016734 <_txe_thread_create+0x1d4>)
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016630:	429a      	cmp	r2, r3
 8016632:	d3ce      	bcc.n	80165d2 <_txe_thread_create+0x72>
 8016634:	e000      	b.n	8016638 <_txe_thread_create+0xd8>
                break;
 8016636:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016638:	f3ef 8310 	mrs	r3, PRIMASK
 801663c:	61fb      	str	r3, [r7, #28]
    return(posture);
 801663e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8016640:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8016642:	b672      	cpsid	i
    return(int_posture);
 8016644:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8016646:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8016648:	4b38      	ldr	r3, [pc, #224]	; (801672c <_txe_thread_create+0x1cc>)
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	3b01      	subs	r3, #1
 801664e:	4a37      	ldr	r2, [pc, #220]	; (801672c <_txe_thread_create+0x1cc>)
 8016650:	6013      	str	r3, [r2, #0]
 8016652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016654:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016656:	6a3b      	ldr	r3, [r7, #32]
 8016658:	f383 8810 	msr	PRIMASK, r3
}
 801665c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801665e:	f7fe ff1b 	bl	8015498 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8016662:	68fa      	ldr	r2, [r7, #12]
 8016664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016666:	429a      	cmp	r2, r3
 8016668:	d102      	bne.n	8016670 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 801666a:	230e      	movs	r3, #14
 801666c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801666e:	e042      	b.n	80166f6 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8016670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016672:	2b00      	cmp	r3, #0
 8016674:	d102      	bne.n	801667c <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8016676:	2303      	movs	r3, #3
 8016678:	64fb      	str	r3, [r7, #76]	; 0x4c
 801667a:	e03c      	b.n	80166f6 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d102      	bne.n	8016688 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8016682:	2303      	movs	r3, #3
 8016684:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016686:	e036      	b.n	80166f6 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8016688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801668a:	2bc7      	cmp	r3, #199	; 0xc7
 801668c:	d802      	bhi.n	8016694 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 801668e:	2305      	movs	r3, #5
 8016690:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016692:	e030      	b.n	80166f6 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8016694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016696:	2b1f      	cmp	r3, #31
 8016698:	d902      	bls.n	80166a0 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 801669a:	230f      	movs	r3, #15
 801669c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801669e:	e02a      	b.n	80166f6 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80166a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80166a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80166a4:	429a      	cmp	r2, r3
 80166a6:	d902      	bls.n	80166ae <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80166a8:	2318      	movs	r3, #24
 80166aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80166ac:	e023      	b.n	80166f6 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80166ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80166b0:	2b01      	cmp	r3, #1
 80166b2:	d902      	bls.n	80166ba <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80166b4:	2310      	movs	r3, #16
 80166b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80166b8:	e01d      	b.n	80166f6 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80166ba:	4b1f      	ldr	r3, [pc, #124]	; (8016738 <_txe_thread_create+0x1d8>)
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80166c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166c2:	4a1e      	ldr	r2, [pc, #120]	; (801673c <_txe_thread_create+0x1dc>)
 80166c4:	4293      	cmp	r3, r2
 80166c6:	d101      	bne.n	80166cc <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80166c8:	2313      	movs	r3, #19
 80166ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80166cc:	f3ef 8305 	mrs	r3, IPSR
 80166d0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80166d2:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80166d4:	4b1a      	ldr	r3, [pc, #104]	; (8016740 <_txe_thread_create+0x1e0>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	4313      	orrs	r3, r2
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d00b      	beq.n	80166f6 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80166de:	f3ef 8305 	mrs	r3, IPSR
 80166e2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80166e4:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80166e6:	4b16      	ldr	r3, [pc, #88]	; (8016740 <_txe_thread_create+0x1e0>)
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	4313      	orrs	r3, r2
 80166ec:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80166f0:	d201      	bcs.n	80166f6 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80166f2:	2313      	movs	r3, #19
 80166f4:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80166f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d112      	bne.n	8016722 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80166fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80166fe:	9305      	str	r3, [sp, #20]
 8016700:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016702:	9304      	str	r3, [sp, #16]
 8016704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016706:	9303      	str	r3, [sp, #12]
 8016708:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801670a:	9302      	str	r3, [sp, #8]
 801670c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801670e:	9301      	str	r3, [sp, #4]
 8016710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016712:	9300      	str	r3, [sp, #0]
 8016714:	683b      	ldr	r3, [r7, #0]
 8016716:	687a      	ldr	r2, [r7, #4]
 8016718:	68b9      	ldr	r1, [r7, #8]
 801671a:	68f8      	ldr	r0, [r7, #12]
 801671c:	f7fe fd3e 	bl	801519c <_tx_thread_create>
 8016720:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8016722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8016724:	4618      	mov	r0, r3
 8016726:	3750      	adds	r7, #80	; 0x50
 8016728:	46bd      	mov	sp, r7
 801672a:	bd80      	pop	{r7, pc}
 801672c:	201974c4 	.word	0x201974c4
 8016730:	20197434 	.word	0x20197434
 8016734:	20197438 	.word	0x20197438
 8016738:	2019742c 	.word	0x2019742c
 801673c:	20197574 	.word	0x20197574
 8016740:	20000054 	.word	0x20000054

08016744 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8016744:	8880      	ldrh	r0, [r0, #4]
 8016746:	4770      	bx	lr

08016748 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8016748:	b570      	push	{r4, r5, r6, lr}
 801674a:	6803      	ldr	r3, [r0, #0]
 801674c:	4605      	mov	r5, r0
 801674e:	460c      	mov	r4, r1
 8016750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016752:	2100      	movs	r1, #0
 8016754:	4798      	blx	r3
 8016756:	682b      	ldr	r3, [r5, #0]
 8016758:	4606      	mov	r6, r0
 801675a:	6a1b      	ldr	r3, [r3, #32]
 801675c:	4628      	mov	r0, r5
 801675e:	4798      	blx	r3
 8016760:	1ba4      	subs	r4, r4, r6
 8016762:	b2a4      	uxth	r4, r4
 8016764:	fbb4 f0f0 	udiv	r0, r4, r0
 8016768:	bd70      	pop	{r4, r5, r6, pc}

0801676a <_ZN8touchgfx17AbstractPartition5clearEv>:
 801676a:	2300      	movs	r3, #0
 801676c:	8083      	strh	r3, [r0, #4]
 801676e:	4770      	bx	lr

08016770 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016770:	b510      	push	{r4, lr}
 8016772:	4604      	mov	r4, r0
 8016774:	6803      	ldr	r3, [r0, #0]
 8016776:	8881      	ldrh	r1, [r0, #4]
 8016778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801677a:	4798      	blx	r3
 801677c:	88a3      	ldrh	r3, [r4, #4]
 801677e:	3301      	adds	r3, #1
 8016780:	80a3      	strh	r3, [r4, #4]
 8016782:	bd10      	pop	{r4, pc}

08016784 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8016784:	6803      	ldr	r3, [r0, #0]
 8016786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016788:	4718      	bx	r3

0801678a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801678a:	4770      	bx	lr

0801678c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801678c:	4a02      	ldr	r2, [pc, #8]	; (8016798 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801678e:	6002      	str	r2, [r0, #0]
 8016790:	2200      	movs	r2, #0
 8016792:	8082      	strh	r2, [r0, #4]
 8016794:	4770      	bx	lr
 8016796:	bf00      	nop
 8016798:	0802ba98 	.word	0x0802ba98

0801679c <_ZN8touchgfx9Container13getFirstChildEv>:
 801679c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801679e:	4770      	bx	lr

080167a0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80167a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80167a2:	2000      	movs	r0, #0
 80167a4:	b12b      	cbz	r3, 80167b2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80167a6:	b920      	cbnz	r0, 80167b2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80167a8:	1a5a      	subs	r2, r3, r1
 80167aa:	4250      	negs	r0, r2
 80167ac:	4150      	adcs	r0, r2
 80167ae:	699b      	ldr	r3, [r3, #24]
 80167b0:	e7f8      	b.n	80167a4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80167b2:	4770      	bx	lr

080167b4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80167b4:	2300      	movs	r3, #0
 80167b6:	6148      	str	r0, [r1, #20]
 80167b8:	618b      	str	r3, [r1, #24]
 80167ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80167bc:	b913      	cbnz	r3, 80167c4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80167be:	6281      	str	r1, [r0, #40]	; 0x28
 80167c0:	4770      	bx	lr
 80167c2:	4613      	mov	r3, r2
 80167c4:	699a      	ldr	r2, [r3, #24]
 80167c6:	2a00      	cmp	r2, #0
 80167c8:	d1fb      	bne.n	80167c2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80167ca:	6199      	str	r1, [r3, #24]
 80167cc:	4770      	bx	lr

080167ce <_ZN8touchgfx9Container9removeAllEv>:
 80167ce:	2200      	movs	r2, #0
 80167d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80167d2:	b123      	cbz	r3, 80167de <_ZN8touchgfx9Container9removeAllEv+0x10>
 80167d4:	6999      	ldr	r1, [r3, #24]
 80167d6:	6281      	str	r1, [r0, #40]	; 0x28
 80167d8:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80167dc:	e7f8      	b.n	80167d0 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80167de:	4770      	bx	lr

080167e0 <_ZN8touchgfx9Container6unlinkEv>:
 80167e0:	2300      	movs	r3, #0
 80167e2:	6283      	str	r3, [r0, #40]	; 0x28
 80167e4:	4770      	bx	lr

080167e6 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80167e6:	2200      	movs	r2, #0
 80167e8:	8002      	strh	r2, [r0, #0]
 80167ea:	8042      	strh	r2, [r0, #2]
 80167ec:	8082      	strh	r2, [r0, #4]
 80167ee:	80c2      	strh	r2, [r0, #6]
 80167f0:	4770      	bx	lr

080167f2 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80167f2:	b570      	push	{r4, r5, r6, lr}
 80167f4:	460d      	mov	r5, r1
 80167f6:	4616      	mov	r6, r2
 80167f8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80167fa:	b13c      	cbz	r4, 801680c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80167fc:	6823      	ldr	r3, [r4, #0]
 80167fe:	4620      	mov	r0, r4
 8016800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016802:	4632      	mov	r2, r6
 8016804:	4629      	mov	r1, r5
 8016806:	4798      	blx	r3
 8016808:	69a4      	ldr	r4, [r4, #24]
 801680a:	e7f6      	b.n	80167fa <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801680c:	bd70      	pop	{r4, r5, r6, pc}

0801680e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801680e:	b538      	push	{r3, r4, r5, lr}
 8016810:	460d      	mov	r5, r1
 8016812:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016814:	b134      	cbz	r4, 8016824 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8016816:	682b      	ldr	r3, [r5, #0]
 8016818:	4621      	mov	r1, r4
 801681a:	689b      	ldr	r3, [r3, #8]
 801681c:	4628      	mov	r0, r5
 801681e:	4798      	blx	r3
 8016820:	69a4      	ldr	r4, [r4, #24]
 8016822:	e7f7      	b.n	8016814 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016824:	bd38      	pop	{r3, r4, r5, pc}

08016826 <_ZN8touchgfx9ContainerD1Ev>:
 8016826:	4770      	bx	lr

08016828 <_ZN8touchgfx9ContainerD0Ev>:
 8016828:	b510      	push	{r4, lr}
 801682a:	4604      	mov	r4, r0
 801682c:	212c      	movs	r1, #44	; 0x2c
 801682e:	f012 fce4 	bl	80291fa <_ZdlPvj>
 8016832:	4620      	mov	r0, r4
 8016834:	bd10      	pop	{r4, pc}

08016836 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8016836:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016838:	b19b      	cbz	r3, 8016862 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801683a:	428b      	cmp	r3, r1
 801683c:	d109      	bne.n	8016852 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801683e:	2100      	movs	r1, #0
 8016840:	699a      	ldr	r2, [r3, #24]
 8016842:	6159      	str	r1, [r3, #20]
 8016844:	6282      	str	r2, [r0, #40]	; 0x28
 8016846:	b902      	cbnz	r2, 801684a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016848:	4770      	bx	lr
 801684a:	6199      	str	r1, [r3, #24]
 801684c:	4770      	bx	lr
 801684e:	4613      	mov	r3, r2
 8016850:	b13a      	cbz	r2, 8016862 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016852:	699a      	ldr	r2, [r3, #24]
 8016854:	428a      	cmp	r2, r1
 8016856:	d1fa      	bne.n	801684e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8016858:	698a      	ldr	r2, [r1, #24]
 801685a:	619a      	str	r2, [r3, #24]
 801685c:	2300      	movs	r3, #0
 801685e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8016862:	4770      	bx	lr

08016864 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8016864:	b410      	push	{r4}
 8016866:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016868:	4604      	mov	r4, r0
 801686a:	b92b      	cbnz	r3, 8016878 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801686c:	6803      	ldr	r3, [r0, #0]
 801686e:	4611      	mov	r1, r2
 8016870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016872:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016876:	4718      	bx	r3
 8016878:	b941      	cbnz	r1, 801688c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801687a:	6193      	str	r3, [r2, #24]
 801687c:	6282      	str	r2, [r0, #40]	; 0x28
 801687e:	6154      	str	r4, [r2, #20]
 8016880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016884:	4770      	bx	lr
 8016886:	4603      	mov	r3, r0
 8016888:	2800      	cmp	r0, #0
 801688a:	d0f9      	beq.n	8016880 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801688c:	4299      	cmp	r1, r3
 801688e:	6998      	ldr	r0, [r3, #24]
 8016890:	d1f9      	bne.n	8016886 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8016892:	6190      	str	r0, [r2, #24]
 8016894:	618a      	str	r2, [r1, #24]
 8016896:	e7f2      	b.n	801687e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08016898 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8016898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801689c:	461f      	mov	r7, r3
 801689e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80168a2:	460d      	mov	r5, r1
 80168a4:	4616      	mov	r6, r2
 80168a6:	b103      	cbz	r3, 80168aa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80168a8:	6038      	str	r0, [r7, #0]
 80168aa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80168ac:	b314      	cbz	r4, 80168f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80168ae:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80168b2:	b1eb      	cbz	r3, 80168f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80168b4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80168b8:	428d      	cmp	r5, r1
 80168ba:	db19      	blt.n	80168f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80168bc:	8923      	ldrh	r3, [r4, #8]
 80168be:	b289      	uxth	r1, r1
 80168c0:	440b      	add	r3, r1
 80168c2:	b21b      	sxth	r3, r3
 80168c4:	429d      	cmp	r5, r3
 80168c6:	da13      	bge.n	80168f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80168c8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80168cc:	4296      	cmp	r6, r2
 80168ce:	db0f      	blt.n	80168f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80168d0:	8963      	ldrh	r3, [r4, #10]
 80168d2:	b292      	uxth	r2, r2
 80168d4:	4413      	add	r3, r2
 80168d6:	b21b      	sxth	r3, r3
 80168d8:	429e      	cmp	r6, r3
 80168da:	da09      	bge.n	80168f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80168dc:	6823      	ldr	r3, [r4, #0]
 80168de:	1ab2      	subs	r2, r6, r2
 80168e0:	1a69      	subs	r1, r5, r1
 80168e2:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80168e6:	b212      	sxth	r2, r2
 80168e8:	463b      	mov	r3, r7
 80168ea:	b209      	sxth	r1, r1
 80168ec:	4620      	mov	r0, r4
 80168ee:	47c0      	blx	r8
 80168f0:	69a4      	ldr	r4, [r4, #24]
 80168f2:	e7db      	b.n	80168ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80168f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080168f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80168f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168fc:	4c6c      	ldr	r4, [pc, #432]	; (8016ab0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 80168fe:	b0a1      	sub	sp, #132	; 0x84
 8016900:	6824      	ldr	r4, [r4, #0]
 8016902:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8016904:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8016908:	2400      	movs	r4, #0
 801690a:	802c      	strh	r4, [r5, #0]
 801690c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801690e:	4606      	mov	r6, r0
 8016910:	802c      	strh	r4, [r5, #0]
 8016912:	601c      	str	r4, [r3, #0]
 8016914:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8016918:	9303      	str	r3, [sp, #12]
 801691a:	f7ff ffbd 	bl	8016898 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801691e:	f1b9 0f03 	cmp.w	r9, #3
 8016922:	f340 80bf 	ble.w	8016aa4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 8016926:	4631      	mov	r1, r6
 8016928:	a80c      	add	r0, sp, #48	; 0x30
 801692a:	f003 fa2b 	bl	8019d84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801692e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8016932:	9306      	str	r3, [sp, #24]
 8016934:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016938:	9307      	str	r3, [sp, #28]
 801693a:	9b03      	ldr	r3, [sp, #12]
 801693c:	f8d3 a000 	ldr.w	sl, [r3]
 8016940:	f1ba 0f00 	cmp.w	sl, #0
 8016944:	f000 80b1 	beq.w	8016aaa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8016948:	4651      	mov	r1, sl
 801694a:	a810      	add	r0, sp, #64	; 0x40
 801694c:	f003 fa1a 	bl	8019d84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016950:	2002      	movs	r0, #2
 8016952:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8016956:	9b01      	ldr	r3, [sp, #4]
 8016958:	fb91 f1f0 	sdiv	r1, r1, r0
 801695c:	9a06      	ldr	r2, [sp, #24]
 801695e:	189d      	adds	r5, r3, r2
 8016960:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8016964:	9a07      	ldr	r2, [sp, #28]
 8016966:	4419      	add	r1, r3
 8016968:	9b02      	ldr	r3, [sp, #8]
 801696a:	1a6d      	subs	r5, r5, r1
 801696c:	4413      	add	r3, r2
 801696e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8016972:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8016976:	fb92 f2f0 	sdiv	r2, r2, r0
 801697a:	440a      	add	r2, r1
 801697c:	1a9b      	subs	r3, r3, r2
 801697e:	435b      	muls	r3, r3
 8016980:	fb05 3505 	mla	r5, r5, r5, r3
 8016984:	4f4b      	ldr	r7, [pc, #300]	; (8016ab4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8016986:	ac10      	add	r4, sp, #64	; 0x40
 8016988:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801698a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801698c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801698e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016990:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016994:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8016998:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801699c:	2303      	movs	r3, #3
 801699e:	f1b9 0f0c 	cmp.w	r9, #12
 80169a2:	bfda      	itte	le
 80169a4:	f109 32ff 	addle.w	r2, r9, #4294967295
 80169a8:	fb92 f8f3 	sdivle	r8, r2, r3
 80169ac:	4698      	movgt	r8, r3
 80169ae:	2400      	movs	r4, #0
 80169b0:	f8cd 9000 	str.w	r9, [sp]
 80169b4:	1c63      	adds	r3, r4, #1
 80169b6:	9308      	str	r3, [sp, #32]
 80169b8:	9b00      	ldr	r3, [sp, #0]
 80169ba:	f04f 0b00 	mov.w	fp, #0
 80169be:	fb93 f3f8 	sdiv	r3, r3, r8
 80169c2:	f004 0401 	and.w	r4, r4, #1
 80169c6:	aa10      	add	r2, sp, #64	; 0x40
 80169c8:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80169cc:	b29b      	uxth	r3, r3
 80169ce:	3404      	adds	r4, #4
 80169d0:	9304      	str	r3, [sp, #16]
 80169d2:	9a04      	ldr	r2, [sp, #16]
 80169d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80169d8:	fb13 f302 	smulbb	r3, r3, r2
 80169dc:	9a01      	ldr	r2, [sp, #4]
 80169de:	b29b      	uxth	r3, r3
 80169e0:	1899      	adds	r1, r3, r2
 80169e2:	9305      	str	r3, [sp, #20]
 80169e4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80169e8:	b209      	sxth	r1, r1
 80169ea:	4299      	cmp	r1, r3
 80169ec:	db4d      	blt.n	8016a8a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80169ee:	8932      	ldrh	r2, [r6, #8]
 80169f0:	4413      	add	r3, r2
 80169f2:	b21b      	sxth	r3, r3
 80169f4:	4299      	cmp	r1, r3
 80169f6:	da48      	bge.n	8016a8a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80169f8:	9b04      	ldr	r3, [sp, #16]
 80169fa:	6827      	ldr	r7, [r4, #0]
 80169fc:	fb17 f703 	smulbb	r7, r7, r3
 8016a00:	9b02      	ldr	r3, [sp, #8]
 8016a02:	b2bf      	uxth	r7, r7
 8016a04:	18fa      	adds	r2, r7, r3
 8016a06:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016a0a:	b212      	sxth	r2, r2
 8016a0c:	429a      	cmp	r2, r3
 8016a0e:	db3c      	blt.n	8016a8a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8016a10:	8970      	ldrh	r0, [r6, #10]
 8016a12:	4403      	add	r3, r0
 8016a14:	b21b      	sxth	r3, r3
 8016a16:	429a      	cmp	r2, r3
 8016a18:	da37      	bge.n	8016a8a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	4630      	mov	r0, r6
 8016a1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a20:	ab0b      	add	r3, sp, #44	; 0x2c
 8016a22:	f7ff ff39 	bl	8016898 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016a26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016a28:	b37a      	cbz	r2, 8016a8a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8016a2a:	4552      	cmp	r2, sl
 8016a2c:	d02d      	beq.n	8016a8a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8016a2e:	4611      	mov	r1, r2
 8016a30:	a80e      	add	r0, sp, #56	; 0x38
 8016a32:	9209      	str	r2, [sp, #36]	; 0x24
 8016a34:	f003 f9a6 	bl	8019d84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016a38:	f04f 0e02 	mov.w	lr, #2
 8016a3c:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8016a40:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8016a44:	fb91 f1fe 	sdiv	r1, r1, lr
 8016a48:	fb9c fcfe 	sdiv	ip, ip, lr
 8016a4c:	9a06      	ldr	r2, [sp, #24]
 8016a4e:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8016a52:	9b01      	ldr	r3, [sp, #4]
 8016a54:	4401      	add	r1, r0
 8016a56:	4413      	add	r3, r2
 8016a58:	1a58      	subs	r0, r3, r1
 8016a5a:	9a07      	ldr	r2, [sp, #28]
 8016a5c:	9b02      	ldr	r3, [sp, #8]
 8016a5e:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8016a62:	4413      	add	r3, r2
 8016a64:	448c      	add	ip, r1
 8016a66:	eba3 030c 	sub.w	r3, r3, ip
 8016a6a:	435b      	muls	r3, r3
 8016a6c:	fb00 3300 	mla	r3, r0, r0, r3
 8016a70:	42ab      	cmp	r3, r5
 8016a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a74:	d208      	bcs.n	8016a88 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 8016a76:	461d      	mov	r5, r3
 8016a78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a7a:	9803      	ldr	r0, [sp, #12]
 8016a7c:	6001      	str	r1, [r0, #0]
 8016a7e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8016a80:	9805      	ldr	r0, [sp, #20]
 8016a82:	8008      	strh	r0, [r1, #0]
 8016a84:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016a86:	800f      	strh	r7, [r1, #0]
 8016a88:	4692      	mov	sl, r2
 8016a8a:	f10b 0b01 	add.w	fp, fp, #1
 8016a8e:	f1bb 0f04 	cmp.w	fp, #4
 8016a92:	f104 0408 	add.w	r4, r4, #8
 8016a96:	d19c      	bne.n	80169d2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8016a98:	9b00      	ldr	r3, [sp, #0]
 8016a9a:	9c08      	ldr	r4, [sp, #32]
 8016a9c:	444b      	add	r3, r9
 8016a9e:	4544      	cmp	r4, r8
 8016aa0:	9300      	str	r3, [sp, #0]
 8016aa2:	d187      	bne.n	80169b4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 8016aa4:	b021      	add	sp, #132	; 0x84
 8016aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aaa:	f04f 35ff 	mov.w	r5, #4294967295
 8016aae:	e769      	b.n	8016984 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8016ab0:	20197a40 	.word	0x20197a40
 8016ab4:	0802a8cc 	.word	0x0802a8cc

08016ab8 <_ZN8touchgfx4RectaNERKS0_>:
 8016ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016abc:	f9b1 7000 	ldrsh.w	r7, [r1]
 8016ac0:	888c      	ldrh	r4, [r1, #4]
 8016ac2:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016ac6:	443c      	add	r4, r7
 8016ac8:	b2a4      	uxth	r4, r4
 8016aca:	fa0f f884 	sxth.w	r8, r4
 8016ace:	45c1      	cmp	r9, r8
 8016ad0:	da2f      	bge.n	8016b32 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016ad2:	8882      	ldrh	r2, [r0, #4]
 8016ad4:	444a      	add	r2, r9
 8016ad6:	b292      	uxth	r2, r2
 8016ad8:	fa0f fe82 	sxth.w	lr, r2
 8016adc:	4577      	cmp	r7, lr
 8016ade:	da28      	bge.n	8016b32 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016ae0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8016ae4:	88cb      	ldrh	r3, [r1, #6]
 8016ae6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8016aea:	442b      	add	r3, r5
 8016aec:	b21b      	sxth	r3, r3
 8016aee:	429e      	cmp	r6, r3
 8016af0:	da1f      	bge.n	8016b32 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016af2:	88c3      	ldrh	r3, [r0, #6]
 8016af4:	4433      	add	r3, r6
 8016af6:	b29b      	uxth	r3, r3
 8016af8:	fa0f fc83 	sxth.w	ip, r3
 8016afc:	4565      	cmp	r5, ip
 8016afe:	da18      	bge.n	8016b32 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016b00:	454f      	cmp	r7, r9
 8016b02:	bfb8      	it	lt
 8016b04:	464f      	movlt	r7, r9
 8016b06:	42b5      	cmp	r5, r6
 8016b08:	bfb8      	it	lt
 8016b0a:	4635      	movlt	r5, r6
 8016b0c:	45f0      	cmp	r8, lr
 8016b0e:	bfd8      	it	le
 8016b10:	4622      	movle	r2, r4
 8016b12:	1bd2      	subs	r2, r2, r7
 8016b14:	8082      	strh	r2, [r0, #4]
 8016b16:	884a      	ldrh	r2, [r1, #2]
 8016b18:	88c9      	ldrh	r1, [r1, #6]
 8016b1a:	8007      	strh	r7, [r0, #0]
 8016b1c:	440a      	add	r2, r1
 8016b1e:	b292      	uxth	r2, r2
 8016b20:	b211      	sxth	r1, r2
 8016b22:	458c      	cmp	ip, r1
 8016b24:	bfa8      	it	ge
 8016b26:	4613      	movge	r3, r2
 8016b28:	1b5b      	subs	r3, r3, r5
 8016b2a:	80c3      	strh	r3, [r0, #6]
 8016b2c:	8045      	strh	r5, [r0, #2]
 8016b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b32:	2300      	movs	r3, #0
 8016b34:	8003      	strh	r3, [r0, #0]
 8016b36:	8043      	strh	r3, [r0, #2]
 8016b38:	8083      	strh	r3, [r0, #4]
 8016b3a:	80c3      	strh	r3, [r0, #6]
 8016b3c:	e7f7      	b.n	8016b2e <_ZN8touchgfx4RectaNERKS0_+0x76>

08016b3e <_ZNK8touchgfx4Rect7isEmptyEv>:
 8016b3e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	dd06      	ble.n	8016b54 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8016b46:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8016b4a:	2800      	cmp	r0, #0
 8016b4c:	bfcc      	ite	gt
 8016b4e:	2000      	movgt	r0, #0
 8016b50:	2001      	movle	r0, #1
 8016b52:	4770      	bx	lr
 8016b54:	2001      	movs	r0, #1
 8016b56:	4770      	bx	lr

08016b58 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8016b58:	2300      	movs	r3, #0
 8016b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b5e:	4604      	mov	r4, r0
 8016b60:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8016b62:	8003      	strh	r3, [r0, #0]
 8016b64:	8043      	strh	r3, [r0, #2]
 8016b66:	8083      	strh	r3, [r0, #4]
 8016b68:	80c3      	strh	r3, [r0, #6]
 8016b6a:	2d00      	cmp	r5, #0
 8016b6c:	d040      	beq.n	8016bf0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8016b6e:	1d28      	adds	r0, r5, #4
 8016b70:	f7ff ffe5 	bl	8016b3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016b74:	b988      	cbnz	r0, 8016b9a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016b76:	4620      	mov	r0, r4
 8016b78:	f7ff ffe1 	bl	8016b3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016b7c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8016b80:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016b84:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8016b88:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8016b8c:	b138      	cbz	r0, 8016b9e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8016b8e:	8022      	strh	r2, [r4, #0]
 8016b90:	8063      	strh	r3, [r4, #2]
 8016b92:	f8a4 e004 	strh.w	lr, [r4, #4]
 8016b96:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016b9a:	69ad      	ldr	r5, [r5, #24]
 8016b9c:	e7e5      	b.n	8016b6a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8016b9e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016ba2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016ba6:	4290      	cmp	r0, r2
 8016ba8:	4607      	mov	r7, r0
 8016baa:	bfa8      	it	ge
 8016bac:	4617      	movge	r7, r2
 8016bae:	4299      	cmp	r1, r3
 8016bb0:	460e      	mov	r6, r1
 8016bb2:	bfa8      	it	ge
 8016bb4:	461e      	movge	r6, r3
 8016bb6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8016bba:	4472      	add	r2, lr
 8016bbc:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8016bc0:	4440      	add	r0, r8
 8016bc2:	4471      	add	r1, lr
 8016bc4:	4463      	add	r3, ip
 8016bc6:	b200      	sxth	r0, r0
 8016bc8:	b212      	sxth	r2, r2
 8016bca:	b209      	sxth	r1, r1
 8016bcc:	b21b      	sxth	r3, r3
 8016bce:	4290      	cmp	r0, r2
 8016bd0:	bfac      	ite	ge
 8016bd2:	ebc7 0200 	rsbge	r2, r7, r0
 8016bd6:	ebc7 0202 	rsblt	r2, r7, r2
 8016bda:	4299      	cmp	r1, r3
 8016bdc:	bfac      	ite	ge
 8016bde:	ebc6 0301 	rsbge	r3, r6, r1
 8016be2:	ebc6 0303 	rsblt	r3, r6, r3
 8016be6:	8027      	strh	r7, [r4, #0]
 8016be8:	8066      	strh	r6, [r4, #2]
 8016bea:	80a2      	strh	r2, [r4, #4]
 8016bec:	80e3      	strh	r3, [r4, #6]
 8016bee:	e7d4      	b.n	8016b9a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016bf0:	4620      	mov	r0, r4
 8016bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016bf6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8016bf6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016bfa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016bfe:	b383      	cbz	r3, 8016c62 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016c00:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016c02:	b374      	cbz	r4, 8016c62 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016c04:	f9b1 5000 	ldrsh.w	r5, [r1]
 8016c08:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8016c0c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8016c10:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016c14:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016c18:	b303      	cbz	r3, 8016c5c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016c1a:	4668      	mov	r0, sp
 8016c1c:	1d21      	adds	r1, r4, #4
 8016c1e:	f8ad 5000 	strh.w	r5, [sp]
 8016c22:	f8ad 6002 	strh.w	r6, [sp, #2]
 8016c26:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016c2a:	f8ad 8006 	strh.w	r8, [sp, #6]
 8016c2e:	f7ff ff43 	bl	8016ab8 <_ZN8touchgfx4RectaNERKS0_>
 8016c32:	4668      	mov	r0, sp
 8016c34:	f7ff ff83 	bl	8016b3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016c38:	b980      	cbnz	r0, 8016c5c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016c3a:	f8bd 3000 	ldrh.w	r3, [sp]
 8016c3e:	88a2      	ldrh	r2, [r4, #4]
 8016c40:	4669      	mov	r1, sp
 8016c42:	1a9b      	subs	r3, r3, r2
 8016c44:	f8ad 3000 	strh.w	r3, [sp]
 8016c48:	88e2      	ldrh	r2, [r4, #6]
 8016c4a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016c4e:	4620      	mov	r0, r4
 8016c50:	1a9b      	subs	r3, r3, r2
 8016c52:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016c56:	6823      	ldr	r3, [r4, #0]
 8016c58:	689b      	ldr	r3, [r3, #8]
 8016c5a:	4798      	blx	r3
 8016c5c:	69a4      	ldr	r4, [r4, #24]
 8016c5e:	2c00      	cmp	r4, #0
 8016c60:	d1d8      	bne.n	8016c14 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8016c62:	b002      	add	sp, #8
 8016c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016c68 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8016c68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016c6a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016c6e:	460d      	mov	r5, r1
 8016c70:	4616      	mov	r6, r2
 8016c72:	b323      	cbz	r3, 8016cbe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016c74:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016c76:	b314      	cbz	r4, 8016cbe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016c78:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016c7c:	b1eb      	cbz	r3, 8016cba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016c7e:	466b      	mov	r3, sp
 8016c80:	6828      	ldr	r0, [r5, #0]
 8016c82:	6869      	ldr	r1, [r5, #4]
 8016c84:	c303      	stmia	r3!, {r0, r1}
 8016c86:	4668      	mov	r0, sp
 8016c88:	1d21      	adds	r1, r4, #4
 8016c8a:	f7ff ff15 	bl	8016ab8 <_ZN8touchgfx4RectaNERKS0_>
 8016c8e:	4668      	mov	r0, sp
 8016c90:	f7ff ff55 	bl	8016b3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016c94:	b988      	cbnz	r0, 8016cba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016c96:	f8bd 3000 	ldrh.w	r3, [sp]
 8016c9a:	88a2      	ldrh	r2, [r4, #4]
 8016c9c:	4669      	mov	r1, sp
 8016c9e:	1a9b      	subs	r3, r3, r2
 8016ca0:	f8ad 3000 	strh.w	r3, [sp]
 8016ca4:	88e2      	ldrh	r2, [r4, #6]
 8016ca6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016caa:	4620      	mov	r0, r4
 8016cac:	1a9b      	subs	r3, r3, r2
 8016cae:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016cb2:	6823      	ldr	r3, [r4, #0]
 8016cb4:	4632      	mov	r2, r6
 8016cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016cb8:	4798      	blx	r3
 8016cba:	69a4      	ldr	r4, [r4, #24]
 8016cbc:	e7db      	b.n	8016c76 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8016cbe:	b002      	add	sp, #8
 8016cc0:	bd70      	pop	{r4, r5, r6, pc}

08016cc2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8016cc2:	b513      	push	{r0, r1, r4, lr}
 8016cc4:	6803      	ldr	r3, [r0, #0]
 8016cc6:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8016cca:	2300      	movs	r3, #0
 8016ccc:	e9cd 3300 	strd	r3, r3, [sp]
 8016cd0:	466b      	mov	r3, sp
 8016cd2:	47a0      	blx	r4
 8016cd4:	b002      	add	sp, #8
 8016cd6:	bd10      	pop	{r4, pc}

08016cd8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8016cd8:	2301      	movs	r3, #1
 8016cda:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016cde:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016ce2:	4770      	bx	lr

08016ce4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8016ce4:	2301      	movs	r3, #1
 8016ce6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016cea:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016cee:	4770      	bx	lr

08016cf0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8016cf0:	2201      	movs	r2, #1
 8016cf2:	6843      	ldr	r3, [r0, #4]
 8016cf4:	725a      	strb	r2, [r3, #9]
 8016cf6:	6840      	ldr	r0, [r0, #4]
 8016cf8:	6803      	ldr	r3, [r0, #0]
 8016cfa:	691b      	ldr	r3, [r3, #16]
 8016cfc:	4718      	bx	r3

08016cfe <_ZN8touchgfx3HAL8flushDMAEv>:
 8016cfe:	6840      	ldr	r0, [r0, #4]
 8016d00:	6803      	ldr	r3, [r0, #0]
 8016d02:	689b      	ldr	r3, [r3, #8]
 8016d04:	4718      	bx	r3

08016d06 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8016d06:	b530      	push	{r4, r5, lr}
 8016d08:	b08b      	sub	sp, #44	; 0x2c
 8016d0a:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8016d0e:	6804      	ldr	r4, [r0, #0]
 8016d10:	9509      	str	r5, [sp, #36]	; 0x24
 8016d12:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8016d16:	9508      	str	r5, [sp, #32]
 8016d18:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8016d1c:	9507      	str	r5, [sp, #28]
 8016d1e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8016d22:	9506      	str	r5, [sp, #24]
 8016d24:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8016d28:	9505      	str	r5, [sp, #20]
 8016d2a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8016d2e:	9504      	str	r5, [sp, #16]
 8016d30:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8016d34:	9503      	str	r5, [sp, #12]
 8016d36:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016d3a:	9502      	str	r5, [sp, #8]
 8016d3c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8016d40:	e9cd 3500 	strd	r3, r5, [sp]
 8016d44:	4613      	mov	r3, r2
 8016d46:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8016d48:	2200      	movs	r2, #0
 8016d4a:	47a0      	blx	r4
 8016d4c:	b00b      	add	sp, #44	; 0x2c
 8016d4e:	bd30      	pop	{r4, r5, pc}

08016d50 <_ZN8touchgfx3HAL10beginFrameEv>:
 8016d50:	4b04      	ldr	r3, [pc, #16]	; (8016d64 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8016d52:	781b      	ldrb	r3, [r3, #0]
 8016d54:	b123      	cbz	r3, 8016d60 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8016d56:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8016d5a:	f080 0001 	eor.w	r0, r0, #1
 8016d5e:	4770      	bx	lr
 8016d60:	2001      	movs	r0, #1
 8016d62:	4770      	bx	lr
 8016d64:	20197a3e 	.word	0x20197a3e

08016d68 <_ZN8touchgfx3HAL8endFrameEv>:
 8016d68:	b510      	push	{r4, lr}
 8016d6a:	4604      	mov	r4, r0
 8016d6c:	6840      	ldr	r0, [r0, #4]
 8016d6e:	6803      	ldr	r3, [r0, #0]
 8016d70:	689b      	ldr	r3, [r3, #8]
 8016d72:	4798      	blx	r3
 8016d74:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8016d78:	b113      	cbz	r3, 8016d80 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8016d7a:	2301      	movs	r3, #1
 8016d7c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016d80:	bd10      	pop	{r4, pc}

08016d82 <_ZN8touchgfx3HAL10initializeEv>:
 8016d82:	b510      	push	{r4, lr}
 8016d84:	4604      	mov	r4, r0
 8016d86:	f7eb fd65 	bl	8002854 <_ZN8touchgfx10OSWrappers10initializeEv>
 8016d8a:	f7eb fb97 	bl	80024bc <_ZN8touchgfx4GPIO4initEv>
 8016d8e:	6860      	ldr	r0, [r4, #4]
 8016d90:	6803      	ldr	r3, [r0, #0]
 8016d92:	68db      	ldr	r3, [r3, #12]
 8016d94:	4798      	blx	r3
 8016d96:	68e0      	ldr	r0, [r4, #12]
 8016d98:	6803      	ldr	r3, [r0, #0]
 8016d9a:	689b      	ldr	r3, [r3, #8]
 8016d9c:	4798      	blx	r3
 8016d9e:	6823      	ldr	r3, [r4, #0]
 8016da0:	4620      	mov	r0, r4
 8016da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016da8:	4718      	bx	r3

08016daa <_ZN8touchgfx3HAL9taskEntryEv>:
 8016daa:	4604      	mov	r4, r0
 8016dac:	b508      	push	{r3, lr}
 8016dae:	6803      	ldr	r3, [r0, #0]
 8016db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016db4:	4798      	blx	r3
 8016db6:	6823      	ldr	r3, [r4, #0]
 8016db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016dba:	4620      	mov	r0, r4
 8016dbc:	4798      	blx	r3
 8016dbe:	f7eb fe0f 	bl	80029e0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8016dc2:	6823      	ldr	r3, [r4, #0]
 8016dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016dc6:	e7f8      	b.n	8016dba <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08016dc8 <_ZN8touchgfx3HAL4tickEv>:
 8016dc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016dca:	6803      	ldr	r3, [r0, #0]
 8016dcc:	4604      	mov	r4, r0
 8016dce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016dd2:	4798      	blx	r3
 8016dd4:	4d59      	ldr	r5, [pc, #356]	; (8016f3c <_ZN8touchgfx3HAL4tickEv+0x174>)
 8016dd6:	2800      	cmp	r0, #0
 8016dd8:	f000 8095 	beq.w	8016f06 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8016ddc:	2600      	movs	r6, #0
 8016dde:	2001      	movs	r0, #1
 8016de0:	f7eb fb6e 	bl	80024c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8016de4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8016de8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8016dec:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016df0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8016df4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8016df8:	b133      	cbz	r3, 8016e08 <_ZN8touchgfx3HAL4tickEv+0x40>
 8016dfa:	6823      	ldr	r3, [r4, #0]
 8016dfc:	4620      	mov	r0, r4
 8016dfe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8016e02:	4798      	blx	r3
 8016e04:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8016e08:	2601      	movs	r6, #1
 8016e0a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8016e0e:	6862      	ldr	r2, [r4, #4]
 8016e10:	f083 0301 	eor.w	r3, r3, #1
 8016e14:	7253      	strb	r3, [r2, #9]
 8016e16:	702e      	strb	r6, [r5, #0]
 8016e18:	f001 fed4 	bl	8018bc4 <_ZN8touchgfx11Application11getInstanceEv>
 8016e1c:	6803      	ldr	r3, [r0, #0]
 8016e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e20:	4798      	blx	r3
 8016e22:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016e26:	b90b      	cbnz	r3, 8016e2c <_ZN8touchgfx3HAL4tickEv+0x64>
 8016e28:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8016e2c:	f001 feca 	bl	8018bc4 <_ZN8touchgfx11Application11getInstanceEv>
 8016e30:	6803      	ldr	r3, [r0, #0]
 8016e32:	695b      	ldr	r3, [r3, #20]
 8016e34:	4798      	blx	r3
 8016e36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e38:	6803      	ldr	r3, [r0, #0]
 8016e3a:	691b      	ldr	r3, [r3, #16]
 8016e3c:	4798      	blx	r3
 8016e3e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016e42:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8016e46:	3b01      	subs	r3, #1
 8016e48:	b2db      	uxtb	r3, r3
 8016e4a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016e4e:	b10a      	cbz	r2, 8016e54 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d1eb      	bne.n	8016e2c <_ZN8touchgfx3HAL4tickEv+0x64>
 8016e54:	4a3a      	ldr	r2, [pc, #232]	; (8016f40 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8016e56:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8016e5a:	7813      	ldrb	r3, [r2, #0]
 8016e5c:	3301      	adds	r3, #1
 8016e5e:	b25b      	sxtb	r3, r3
 8016e60:	4299      	cmp	r1, r3
 8016e62:	7013      	strb	r3, [r2, #0]
 8016e64:	dc10      	bgt.n	8016e88 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8016e66:	2300      	movs	r3, #0
 8016e68:	68e0      	ldr	r0, [r4, #12]
 8016e6a:	7013      	strb	r3, [r2, #0]
 8016e6c:	6803      	ldr	r3, [r0, #0]
 8016e6e:	aa03      	add	r2, sp, #12
 8016e70:	68db      	ldr	r3, [r3, #12]
 8016e72:	a902      	add	r1, sp, #8
 8016e74:	4798      	blx	r3
 8016e76:	6823      	ldr	r3, [r4, #0]
 8016e78:	2800      	cmp	r0, #0
 8016e7a:	d050      	beq.n	8016f1e <_ZN8touchgfx3HAL4tickEv+0x156>
 8016e7c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8016e80:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8016e84:	4620      	mov	r0, r4
 8016e86:	4798      	blx	r3
 8016e88:	2300      	movs	r3, #0
 8016e8a:	6960      	ldr	r0, [r4, #20]
 8016e8c:	f88d 3007 	strb.w	r3, [sp, #7]
 8016e90:	b158      	cbz	r0, 8016eaa <_ZN8touchgfx3HAL4tickEv+0xe2>
 8016e92:	6803      	ldr	r3, [r0, #0]
 8016e94:	f10d 0107 	add.w	r1, sp, #7
 8016e98:	68db      	ldr	r3, [r3, #12]
 8016e9a:	4798      	blx	r3
 8016e9c:	b128      	cbz	r0, 8016eaa <_ZN8touchgfx3HAL4tickEv+0xe2>
 8016e9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ea0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8016ea4:	6803      	ldr	r3, [r0, #0]
 8016ea6:	68db      	ldr	r3, [r3, #12]
 8016ea8:	4798      	blx	r3
 8016eaa:	f104 001c 	add.w	r0, r4, #28
 8016eae:	f004 fc49 	bl	801b744 <_ZN8touchgfx8Gestures4tickEv>
 8016eb2:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8016eb6:	b30b      	cbz	r3, 8016efc <_ZN8touchgfx3HAL4tickEv+0x134>
 8016eb8:	6920      	ldr	r0, [r4, #16]
 8016eba:	6803      	ldr	r3, [r0, #0]
 8016ebc:	691b      	ldr	r3, [r3, #16]
 8016ebe:	4798      	blx	r3
 8016ec0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016ec2:	4606      	mov	r6, r0
 8016ec4:	b903      	cbnz	r3, 8016ec8 <_ZN8touchgfx3HAL4tickEv+0x100>
 8016ec6:	6720      	str	r0, [r4, #112]	; 0x70
 8016ec8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016eca:	4a1e      	ldr	r2, [pc, #120]	; (8016f44 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8016ecc:	1af3      	subs	r3, r6, r3
 8016ece:	4293      	cmp	r3, r2
 8016ed0:	d914      	bls.n	8016efc <_ZN8touchgfx3HAL4tickEv+0x134>
 8016ed2:	6920      	ldr	r0, [r4, #16]
 8016ed4:	6803      	ldr	r3, [r0, #0]
 8016ed6:	699b      	ldr	r3, [r3, #24]
 8016ed8:	4798      	blx	r3
 8016eda:	2264      	movs	r2, #100	; 0x64
 8016edc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016ede:	1af3      	subs	r3, r6, r3
 8016ee0:	fbb3 f3f2 	udiv	r3, r3, r2
 8016ee4:	fbb0 f0f3 	udiv	r0, r0, r3
 8016ee8:	2800      	cmp	r0, #0
 8016eea:	dc1d      	bgt.n	8016f28 <_ZN8touchgfx3HAL4tickEv+0x160>
 8016eec:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8016ef0:	6920      	ldr	r0, [r4, #16]
 8016ef2:	2100      	movs	r1, #0
 8016ef4:	6803      	ldr	r3, [r0, #0]
 8016ef6:	69db      	ldr	r3, [r3, #28]
 8016ef8:	4798      	blx	r3
 8016efa:	6726      	str	r6, [r4, #112]	; 0x70
 8016efc:	f001 fe62 	bl	8018bc4 <_ZN8touchgfx11Application11getInstanceEv>
 8016f00:	6803      	ldr	r3, [r0, #0]
 8016f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f04:	4798      	blx	r3
 8016f06:	6823      	ldr	r3, [r4, #0]
 8016f08:	4620      	mov	r0, r4
 8016f0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016f0e:	4798      	blx	r3
 8016f10:	2001      	movs	r0, #1
 8016f12:	f7eb faf1 	bl	80024f8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8016f16:	2300      	movs	r3, #0
 8016f18:	702b      	strb	r3, [r5, #0]
 8016f1a:	b004      	add	sp, #16
 8016f1c:	bd70      	pop	{r4, r5, r6, pc}
 8016f1e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8016f22:	4620      	mov	r0, r4
 8016f24:	4798      	blx	r3
 8016f26:	e7af      	b.n	8016e88 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8016f28:	2863      	cmp	r0, #99	; 0x63
 8016f2a:	bfcb      	itete	gt
 8016f2c:	2300      	movgt	r3, #0
 8016f2e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8016f32:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8016f36:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8016f3a:	e7d9      	b.n	8016ef0 <_ZN8touchgfx3HAL4tickEv+0x128>
 8016f3c:	20197a44 	.word	0x20197a44
 8016f40:	20197a45 	.word	0x20197a45
 8016f44:	05f5e100 	.word	0x05f5e100

08016f48 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8016f48:	f7eb bcec 	b.w	8002924 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016f4c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8016f4c:	6581      	str	r1, [r0, #88]	; 0x58
 8016f4e:	301c      	adds	r0, #28
 8016f50:	f004 bbf6 	b.w	801b740 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08016f54 <_ZN8touchgfx3HAL5touchEll>:
 8016f54:	b530      	push	{r4, r5, lr}
 8016f56:	4604      	mov	r4, r0
 8016f58:	b087      	sub	sp, #28
 8016f5a:	a804      	add	r0, sp, #16
 8016f5c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016f60:	f001 fc30 	bl	80187c4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8016f64:	9b04      	ldr	r3, [sp, #16]
 8016f66:	a906      	add	r1, sp, #24
 8016f68:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016f6c:	9b05      	ldr	r3, [sp, #20]
 8016f6e:	a803      	add	r0, sp, #12
 8016f70:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8016f74:	f001 fc78 	bl	8018868 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8016f78:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8016f7c:	f104 001c 	add.w	r0, r4, #28
 8016f80:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8016f84:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016f88:	b189      	cbz	r1, 8016fae <_ZN8touchgfx3HAL5touchEll+0x5a>
 8016f8a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8016f8e:	9300      	str	r3, [sp, #0]
 8016f90:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8016f94:	4613      	mov	r3, r2
 8016f96:	462a      	mov	r2, r5
 8016f98:	f004 fbe2 	bl	801b760 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8016f9c:	b128      	cbz	r0, 8016faa <_ZN8touchgfx3HAL5touchEll+0x56>
 8016f9e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016fa2:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016fa4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016fa8:	6623      	str	r3, [r4, #96]	; 0x60
 8016faa:	b007      	add	sp, #28
 8016fac:	bd30      	pop	{r4, r5, pc}
 8016fae:	f004 fc17 	bl	801b7e0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016fb2:	2301      	movs	r3, #1
 8016fb4:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016fb8:	e7f1      	b.n	8016f9e <_ZN8touchgfx3HAL5touchEll+0x4a>

08016fba <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8016fba:	b510      	push	{r4, lr}
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d046      	beq.n	801704e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016fc0:	ea81 0002 	eor.w	r0, r1, r2
 8016fc4:	07c4      	lsls	r4, r0, #31
 8016fc6:	d508      	bpl.n	8016fda <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8016fc8:	440b      	add	r3, r1
 8016fca:	3a01      	subs	r2, #1
 8016fcc:	428b      	cmp	r3, r1
 8016fce:	d93e      	bls.n	801704e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016fd0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016fd4:	f801 0b01 	strb.w	r0, [r1], #1
 8016fd8:	e7f8      	b.n	8016fcc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8016fda:	07d0      	lsls	r0, r2, #31
 8016fdc:	bf42      	ittt	mi
 8016fde:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8016fe2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8016fe6:	f801 0b01 	strbmi.w	r0, [r1], #1
 8016fea:	2b01      	cmp	r3, #1
 8016fec:	d911      	bls.n	8017012 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016fee:	ea81 0402 	eor.w	r4, r1, r2
 8016ff2:	07a4      	lsls	r4, r4, #30
 8016ff4:	4610      	mov	r0, r2
 8016ff6:	d022      	beq.n	801703e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8016ff8:	f023 0401 	bic.w	r4, r3, #1
 8016ffc:	440c      	add	r4, r1
 8016ffe:	428c      	cmp	r4, r1
 8017000:	4602      	mov	r2, r0
 8017002:	d904      	bls.n	801700e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8017004:	8812      	ldrh	r2, [r2, #0]
 8017006:	3002      	adds	r0, #2
 8017008:	f821 2b02 	strh.w	r2, [r1], #2
 801700c:	e7f7      	b.n	8016ffe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801700e:	f003 0301 	and.w	r3, r3, #1
 8017012:	f023 0003 	bic.w	r0, r3, #3
 8017016:	4408      	add	r0, r1
 8017018:	4288      	cmp	r0, r1
 801701a:	4614      	mov	r4, r2
 801701c:	d904      	bls.n	8017028 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801701e:	6824      	ldr	r4, [r4, #0]
 8017020:	3204      	adds	r2, #4
 8017022:	f841 4b04 	str.w	r4, [r1], #4
 8017026:	e7f7      	b.n	8017018 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8017028:	f003 0303 	and.w	r3, r3, #3
 801702c:	440b      	add	r3, r1
 801702e:	3a01      	subs	r2, #1
 8017030:	428b      	cmp	r3, r1
 8017032:	d90c      	bls.n	801704e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017034:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017038:	f801 0b01 	strb.w	r0, [r1], #1
 801703c:	e7f8      	b.n	8017030 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801703e:	0790      	lsls	r0, r2, #30
 8017040:	d0e7      	beq.n	8017012 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017042:	f832 0b02 	ldrh.w	r0, [r2], #2
 8017046:	3b02      	subs	r3, #2
 8017048:	f821 0b02 	strh.w	r0, [r1], #2
 801704c:	e7e1      	b.n	8017012 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801704e:	2001      	movs	r0, #1
 8017050:	bd10      	pop	{r4, pc}

08017052 <_ZN8touchgfx3HAL7noTouchEv>:
 8017052:	b510      	push	{r4, lr}
 8017054:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8017058:	4604      	mov	r4, r0
 801705a:	b153      	cbz	r3, 8017072 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801705c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8017060:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8017064:	2101      	movs	r1, #1
 8017066:	301c      	adds	r0, #28
 8017068:	f004 fbba 	bl	801b7e0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801706c:	2300      	movs	r3, #0
 801706e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017072:	bd10      	pop	{r4, pc}

08017074 <_ZN8touchgfx8Drawable5setXYEss>:
 8017074:	b570      	push	{r4, r5, r6, lr}
 8017076:	4604      	mov	r4, r0
 8017078:	4615      	mov	r5, r2
 801707a:	6803      	ldr	r3, [r0, #0]
 801707c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801707e:	4798      	blx	r3
 8017080:	6823      	ldr	r3, [r4, #0]
 8017082:	4629      	mov	r1, r5
 8017084:	4620      	mov	r0, r4
 8017086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801708a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801708c:	4718      	bx	r3
	...

08017090 <_ZN8touchgfx3HAL3lcdEv>:
 8017090:	4b04      	ldr	r3, [pc, #16]	; (80170a4 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017098:	b10a      	cbz	r2, 801709e <_ZN8touchgfx3HAL3lcdEv+0xe>
 801709a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801709c:	b900      	cbnz	r0, 80170a0 <_ZN8touchgfx3HAL3lcdEv+0x10>
 801709e:	6898      	ldr	r0, [r3, #8]
 80170a0:	4770      	bx	lr
 80170a2:	bf00      	nop
 80170a4:	20197a40 	.word	0x20197a40

080170a8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80170a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80170ac:	4604      	mov	r4, r0
 80170ae:	2000      	movs	r0, #0
 80170b0:	b085      	sub	sp, #20
 80170b2:	ad04      	add	r5, sp, #16
 80170b4:	f845 0d04 	str.w	r0, [r5, #-4]!
 80170b8:	69a0      	ldr	r0, [r4, #24]
 80170ba:	4699      	mov	r9, r3
 80170bc:	6806      	ldr	r6, [r0, #0]
 80170be:	9501      	str	r5, [sp, #4]
 80170c0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80170c4:	460f      	mov	r7, r1
 80170c6:	9500      	str	r5, [sp, #0]
 80170c8:	6835      	ldr	r5, [r6, #0]
 80170ca:	4690      	mov	r8, r2
 80170cc:	47a8      	blx	r5
 80170ce:	4d10      	ldr	r5, [pc, #64]	; (8017110 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80170d0:	4606      	mov	r6, r0
 80170d2:	f8a5 9000 	strh.w	r9, [r5]
 80170d6:	f7ff ffdb 	bl	8017090 <_ZN8touchgfx3HAL3lcdEv>
 80170da:	6803      	ldr	r3, [r0, #0]
 80170dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170de:	4798      	blx	r3
 80170e0:	b128      	cbz	r0, 80170ee <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80170e2:	2801      	cmp	r0, #1
 80170e4:	d00b      	beq.n	80170fe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80170e6:	4630      	mov	r0, r6
 80170e8:	b005      	add	sp, #20
 80170ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80170ee:	882b      	ldrh	r3, [r5, #0]
 80170f0:	fb08 7203 	mla	r2, r8, r3, r7
 80170f4:	9b03      	ldr	r3, [sp, #12]
 80170f6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80170fa:	63e3      	str	r3, [r4, #60]	; 0x3c
 80170fc:	e7f3      	b.n	80170e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80170fe:	882a      	ldrh	r2, [r5, #0]
 8017100:	9b03      	ldr	r3, [sp, #12]
 8017102:	fb08 7202 	mla	r2, r8, r2, r7
 8017106:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801710a:	1a9a      	subs	r2, r3, r2
 801710c:	63e2      	str	r2, [r4, #60]	; 0x3c
 801710e:	e7ea      	b.n	80170e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8017110:	20197a3a 	.word	0x20197a3a

08017114 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8017114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017116:	b08b      	sub	sp, #44	; 0x2c
 8017118:	4617      	mov	r7, r2
 801711a:	4604      	mov	r4, r0
 801711c:	460e      	mov	r6, r1
 801711e:	461d      	mov	r5, r3
 8017120:	f7ff ffb6 	bl	8017090 <_ZN8touchgfx3HAL3lcdEv>
 8017124:	6803      	ldr	r3, [r0, #0]
 8017126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017128:	4798      	blx	r3
 801712a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801712e:	9007      	str	r0, [sp, #28]
 8017130:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017134:	4b0d      	ldr	r3, [pc, #52]	; (801716c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8017136:	6822      	ldr	r2, [r4, #0]
 8017138:	881b      	ldrh	r3, [r3, #0]
 801713a:	4631      	mov	r1, r6
 801713c:	9306      	str	r3, [sp, #24]
 801713e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017142:	4620      	mov	r0, r4
 8017144:	9305      	str	r3, [sp, #20]
 8017146:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801714a:	9304      	str	r3, [sp, #16]
 801714c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017150:	9303      	str	r3, [sp, #12]
 8017152:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017156:	9302      	str	r3, [sp, #8]
 8017158:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801715c:	e9cd 5300 	strd	r5, r3, [sp]
 8017160:	463b      	mov	r3, r7
 8017162:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8017164:	2200      	movs	r2, #0
 8017166:	47a8      	blx	r5
 8017168:	b00b      	add	sp, #44	; 0x2c
 801716a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801716c:	20197a3a 	.word	0x20197a3a

08017170 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8017170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017174:	4698      	mov	r8, r3
 8017176:	6803      	ldr	r3, [r0, #0]
 8017178:	b08b      	sub	sp, #44	; 0x2c
 801717a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801717c:	4b14      	ldr	r3, [pc, #80]	; (80171d0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801717e:	4617      	mov	r7, r2
 8017180:	f8b3 9000 	ldrh.w	r9, [r3]
 8017184:	460e      	mov	r6, r1
 8017186:	4604      	mov	r4, r0
 8017188:	f7ff ff82 	bl	8017090 <_ZN8touchgfx3HAL3lcdEv>
 801718c:	6803      	ldr	r3, [r0, #0]
 801718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017190:	4798      	blx	r3
 8017192:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017196:	2200      	movs	r2, #0
 8017198:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801719c:	2302      	movs	r3, #2
 801719e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80171a2:	2301      	movs	r3, #1
 80171a4:	9305      	str	r3, [sp, #20]
 80171a6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80171aa:	4631      	mov	r1, r6
 80171ac:	9304      	str	r3, [sp, #16]
 80171ae:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80171b2:	4620      	mov	r0, r4
 80171b4:	9303      	str	r3, [sp, #12]
 80171b6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80171ba:	9302      	str	r3, [sp, #8]
 80171bc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80171c0:	e9cd 8300 	strd	r8, r3, [sp]
 80171c4:	463b      	mov	r3, r7
 80171c6:	47a8      	blx	r5
 80171c8:	b00b      	add	sp, #44	; 0x2c
 80171ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171ce:	bf00      	nop
 80171d0:	20197a3a 	.word	0x20197a3a

080171d4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80171d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80171d8:	4698      	mov	r8, r3
 80171da:	6803      	ldr	r3, [r0, #0]
 80171dc:	b087      	sub	sp, #28
 80171de:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80171e0:	4b10      	ldr	r3, [pc, #64]	; (8017224 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80171e2:	460e      	mov	r6, r1
 80171e4:	f8b3 9000 	ldrh.w	r9, [r3]
 80171e8:	4617      	mov	r7, r2
 80171ea:	4604      	mov	r4, r0
 80171ec:	f7ff ff50 	bl	8017090 <_ZN8touchgfx3HAL3lcdEv>
 80171f0:	6803      	ldr	r3, [r0, #0]
 80171f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171f4:	4798      	blx	r3
 80171f6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80171fa:	f8cd 900c 	str.w	r9, [sp, #12]
 80171fe:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8017202:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017206:	463a      	mov	r2, r7
 8017208:	9302      	str	r3, [sp, #8]
 801720a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801720e:	4631      	mov	r1, r6
 8017210:	9301      	str	r3, [sp, #4]
 8017212:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017216:	4620      	mov	r0, r4
 8017218:	9300      	str	r3, [sp, #0]
 801721a:	4643      	mov	r3, r8
 801721c:	47a8      	blx	r5
 801721e:	b007      	add	sp, #28
 8017220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017224:	20197a3a 	.word	0x20197a3a

08017228 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801722c:	4604      	mov	r4, r0
 801722e:	b08f      	sub	sp, #60	; 0x3c
 8017230:	4610      	mov	r0, r2
 8017232:	460d      	mov	r5, r1
 8017234:	4691      	mov	r9, r2
 8017236:	461e      	mov	r6, r3
 8017238:	f004 f878 	bl	801b32c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801723c:	2800      	cmp	r0, #0
 801723e:	f000 809d 	beq.w	801737c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8017242:	6823      	ldr	r3, [r4, #0]
 8017244:	4620      	mov	r0, r4
 8017246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017248:	4798      	blx	r3
 801724a:	6823      	ldr	r3, [r4, #0]
 801724c:	f8df b190 	ldr.w	fp, [pc, #400]	; 80173e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8017250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017252:	4620      	mov	r0, r4
 8017254:	4798      	blx	r3
 8017256:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80173e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801725a:	f8bb 3000 	ldrh.w	r3, [fp]
 801725e:	4f5d      	ldr	r7, [pc, #372]	; (80173d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017260:	9301      	str	r3, [sp, #4]
 8017262:	f8ba 3000 	ldrh.w	r3, [sl]
 8017266:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801726a:	9302      	str	r3, [sp, #8]
 801726c:	883b      	ldrh	r3, [r7, #0]
 801726e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8017272:	9303      	str	r3, [sp, #12]
 8017274:	4b58      	ldr	r3, [pc, #352]	; (80173d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017276:	4640      	mov	r0, r8
 8017278:	881a      	ldrh	r2, [r3, #0]
 801727a:	9305      	str	r3, [sp, #20]
 801727c:	9204      	str	r2, [sp, #16]
 801727e:	f004 f8e9 	bl	801b454 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017282:	8038      	strh	r0, [r7, #0]
 8017284:	4640      	mov	r0, r8
 8017286:	f004 f919 	bl	801b4bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801728a:	9b05      	ldr	r3, [sp, #20]
 801728c:	b280      	uxth	r0, r0
 801728e:	8018      	strh	r0, [r3, #0]
 8017290:	4b52      	ldr	r3, [pc, #328]	; (80173dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8017292:	781b      	ldrb	r3, [r3, #0]
 8017294:	2b00      	cmp	r3, #0
 8017296:	d174      	bne.n	8017382 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8017298:	883b      	ldrh	r3, [r7, #0]
 801729a:	f8aa 0000 	strh.w	r0, [sl]
 801729e:	f8ab 3000 	strh.w	r3, [fp]
 80172a2:	4648      	mov	r0, r9
 80172a4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80172a8:	f004 f840 	bl	801b32c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80172ac:	2200      	movs	r2, #0
 80172ae:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80172b2:	4611      	mov	r1, r2
 80172b4:	4628      	mov	r0, r5
 80172b6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80172ba:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80172be:	f7ff fed9 	bl	8017074 <_ZN8touchgfx8Drawable5setXYEss>
 80172c2:	2301      	movs	r3, #1
 80172c4:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80172c8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80172cc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	dd5c      	ble.n	801738e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80172d4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	dd58      	ble.n	801738e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80172dc:	462a      	mov	r2, r5
 80172de:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80172e2:	ab0a      	add	r3, sp, #40	; 0x28
 80172e4:	6851      	ldr	r1, [r2, #4]
 80172e6:	c303      	stmia	r3!, {r0, r1}
 80172e8:	4631      	mov	r1, r6
 80172ea:	a80a      	add	r0, sp, #40	; 0x28
 80172ec:	f7ff fbe4 	bl	8016ab8 <_ZN8touchgfx4RectaNERKS0_>
 80172f0:	2100      	movs	r1, #0
 80172f2:	4b38      	ldr	r3, [pc, #224]	; (80173d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80172f4:	910c      	str	r1, [sp, #48]	; 0x30
 80172f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80172fa:	4b37      	ldr	r3, [pc, #220]	; (80173d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80172fc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017304:	aa0a      	add	r2, sp, #40	; 0x28
 8017306:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801730a:	ab08      	add	r3, sp, #32
 801730c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017310:	e883 0003 	stmia.w	r3, {r0, r1}
 8017314:	4618      	mov	r0, r3
 8017316:	a90c      	add	r1, sp, #48	; 0x30
 8017318:	f7ff fbce 	bl	8016ab8 <_ZN8touchgfx4RectaNERKS0_>
 801731c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801731e:	2b00      	cmp	r3, #0
 8017320:	d13c      	bne.n	801739c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8017322:	2000      	movs	r0, #0
 8017324:	2600      	movs	r6, #0
 8017326:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801732a:	696b      	ldr	r3, [r5, #20]
 801732c:	682a      	ldr	r2, [r5, #0]
 801732e:	616e      	str	r6, [r5, #20]
 8017330:	9305      	str	r3, [sp, #20]
 8017332:	6892      	ldr	r2, [r2, #8]
 8017334:	a908      	add	r1, sp, #32
 8017336:	4628      	mov	r0, r5
 8017338:	4790      	blx	r2
 801733a:	9b05      	ldr	r3, [sp, #20]
 801733c:	4652      	mov	r2, sl
 801733e:	616b      	str	r3, [r5, #20]
 8017340:	4649      	mov	r1, r9
 8017342:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8017346:	4628      	mov	r0, r5
 8017348:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801734c:	f7ff fe92 	bl	8017074 <_ZN8touchgfx8Drawable5setXYEss>
 8017350:	9a01      	ldr	r2, [sp, #4]
 8017352:	4b23      	ldr	r3, [pc, #140]	; (80173e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8017354:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8017358:	801a      	strh	r2, [r3, #0]
 801735a:	9a02      	ldr	r2, [sp, #8]
 801735c:	4b21      	ldr	r3, [pc, #132]	; (80173e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801735e:	4620      	mov	r0, r4
 8017360:	801a      	strh	r2, [r3, #0]
 8017362:	9a03      	ldr	r2, [sp, #12]
 8017364:	4b1b      	ldr	r3, [pc, #108]	; (80173d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017366:	801a      	strh	r2, [r3, #0]
 8017368:	4b1b      	ldr	r3, [pc, #108]	; (80173d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801736a:	9a04      	ldr	r2, [sp, #16]
 801736c:	801a      	strh	r2, [r3, #0]
 801736e:	6823      	ldr	r3, [r4, #0]
 8017370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017372:	4798      	blx	r3
 8017374:	6823      	ldr	r3, [r4, #0]
 8017376:	4620      	mov	r0, r4
 8017378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801737a:	4798      	blx	r3
 801737c:	b00f      	add	sp, #60	; 0x3c
 801737e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017382:	883b      	ldrh	r3, [r7, #0]
 8017384:	f8ab 0000 	strh.w	r0, [fp]
 8017388:	f8aa 3000 	strh.w	r3, [sl]
 801738c:	e789      	b.n	80172a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801738e:	462a      	mov	r2, r5
 8017390:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017394:	ab0a      	add	r3, sp, #40	; 0x28
 8017396:	6851      	ldr	r1, [r2, #4]
 8017398:	c303      	stmia	r3!, {r0, r1}
 801739a:	e7a9      	b.n	80172f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801739c:	a807      	add	r0, sp, #28
 801739e:	f004 f945 	bl	801b62c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80173a2:	4606      	mov	r6, r0
 80173a4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80173a6:	6803      	ldr	r3, [r0, #0]
 80173a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173aa:	4798      	blx	r3
 80173ac:	4286      	cmp	r6, r0
 80173ae:	d1b8      	bne.n	8017322 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80173b0:	f7ff fe6e 	bl	8017090 <_ZN8touchgfx3HAL3lcdEv>
 80173b4:	6803      	ldr	r3, [r0, #0]
 80173b6:	4606      	mov	r6, r0
 80173b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80173ba:	a807      	add	r0, sp, #28
 80173bc:	9305      	str	r3, [sp, #20]
 80173be:	f004 f935 	bl	801b62c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80173c2:	9b05      	ldr	r3, [sp, #20]
 80173c4:	4601      	mov	r1, r0
 80173c6:	4630      	mov	r0, r6
 80173c8:	4798      	blx	r3
 80173ca:	f080 0001 	eor.w	r0, r0, #1
 80173ce:	b2c0      	uxtb	r0, r0
 80173d0:	e7a8      	b.n	8017324 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80173d2:	bf00      	nop
 80173d4:	20197a34 	.word	0x20197a34
 80173d8:	20197a36 	.word	0x20197a36
 80173dc:	20197a38 	.word	0x20197a38
 80173e0:	20197a3a 	.word	0x20197a3a
 80173e4:	20197a3c 	.word	0x20197a3c

080173e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80173e8:	b510      	push	{r4, lr}
 80173ea:	4b07      	ldr	r3, [pc, #28]	; (8017408 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80173ec:	4604      	mov	r4, r0
 80173ee:	781b      	ldrb	r3, [r3, #0]
 80173f0:	b13b      	cbz	r3, 8017402 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80173f2:	6803      	ldr	r3, [r0, #0]
 80173f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173f6:	4798      	blx	r3
 80173f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80173fa:	4283      	cmp	r3, r0
 80173fc:	d101      	bne.n	8017402 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80173fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017400:	bd10      	pop	{r4, pc}
 8017402:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8017404:	e7fc      	b.n	8017400 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8017406:	bf00      	nop
 8017408:	20197a3e 	.word	0x20197a3e

0801740c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801740c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017410:	461d      	mov	r5, r3
 8017412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017416:	2400      	movs	r4, #0
 8017418:	b08a      	sub	sp, #40	; 0x28
 801741a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801741e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017422:	4690      	mov	r8, r2
 8017424:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017428:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801742c:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8017430:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017434:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017438:	4607      	mov	r7, r0
 801743a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801743e:	9404      	str	r4, [sp, #16]
 8017440:	f88d 4020 	strb.w	r4, [sp, #32]
 8017444:	f7ff ffd0 	bl	80173e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017448:	fb06 8505 	mla	r5, r6, r5, r8
 801744c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017450:	6878      	ldr	r0, [r7, #4]
 8017452:	9505      	str	r5, [sp, #20]
 8017454:	f8ad 601e 	strh.w	r6, [sp, #30]
 8017458:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801745c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8017460:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8017464:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8017468:	6803      	ldr	r3, [r0, #0]
 801746a:	a901      	add	r1, sp, #4
 801746c:	685b      	ldr	r3, [r3, #4]
 801746e:	4798      	blx	r3
 8017470:	b00a      	add	sp, #40	; 0x28
 8017472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017476 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8017476:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801747a:	2400      	movs	r4, #0
 801747c:	461d      	mov	r5, r3
 801747e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017482:	4691      	mov	r9, r2
 8017484:	b08b      	sub	sp, #44	; 0x2c
 8017486:	4688      	mov	r8, r1
 8017488:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801748c:	4607      	mov	r7, r0
 801748e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017492:	9404      	str	r4, [sp, #16]
 8017494:	f7ff ffa8 	bl	80173e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017498:	fb06 9505 	mla	r5, r6, r5, r9
 801749c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80174a0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80174a4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80174a8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80174ac:	6878      	ldr	r0, [r7, #4]
 80174ae:	9505      	str	r5, [sp, #20]
 80174b0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80174b4:	f8ad 401c 	strh.w	r4, [sp, #28]
 80174b8:	f8ad 601e 	strh.w	r6, [sp, #30]
 80174bc:	f8cd 8010 	str.w	r8, [sp, #16]
 80174c0:	f8ad 4020 	strh.w	r4, [sp, #32]
 80174c4:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80174c8:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80174cc:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80174d0:	6803      	ldr	r3, [r0, #0]
 80174d2:	a901      	add	r1, sp, #4
 80174d4:	685b      	ldr	r3, [r3, #4]
 80174d6:	4798      	blx	r3
 80174d8:	b00b      	add	sp, #44	; 0x2c
 80174da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080174e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80174e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174e4:	4698      	mov	r8, r3
 80174e6:	2300      	movs	r3, #0
 80174e8:	b08a      	sub	sp, #40	; 0x28
 80174ea:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80174ee:	4606      	mov	r6, r0
 80174f0:	2d0b      	cmp	r5, #11
 80174f2:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80174f6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80174fa:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80174fe:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8017502:	9304      	str	r3, [sp, #16]
 8017504:	d137      	bne.n	8017576 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8017506:	2380      	movs	r3, #128	; 0x80
 8017508:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801750c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017510:	f88d 0020 	strb.w	r0, [sp, #32]
 8017514:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017518:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801751c:	4630      	mov	r0, r6
 801751e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017522:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017526:	9203      	str	r2, [sp, #12]
 8017528:	f8ad 301c 	strh.w	r3, [sp, #28]
 801752c:	f7ff ff5c 	bl	80173e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017530:	2c0b      	cmp	r4, #11
 8017532:	bf8c      	ite	hi
 8017534:	2100      	movhi	r1, #0
 8017536:	4b1b      	ldrls	r3, [pc, #108]	; (80175a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8017538:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801753c:	bf98      	it	ls
 801753e:	5d19      	ldrbls	r1, [r3, r4]
 8017540:	fb02 8307 	mla	r3, r2, r7, r8
 8017544:	10c9      	asrs	r1, r1, #3
 8017546:	fb01 0003 	mla	r0, r1, r3, r0
 801754a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801754e:	9005      	str	r0, [sp, #20]
 8017550:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8017554:	2300      	movs	r3, #0
 8017556:	6870      	ldr	r0, [r6, #4]
 8017558:	f8ad 701e 	strh.w	r7, [sp, #30]
 801755c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8017560:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017564:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017568:	6803      	ldr	r3, [r0, #0]
 801756a:	a901      	add	r1, sp, #4
 801756c:	685b      	ldr	r3, [r3, #4]
 801756e:	4798      	blx	r3
 8017570:	b00a      	add	sp, #40	; 0x28
 8017572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017576:	2d02      	cmp	r5, #2
 8017578:	d109      	bne.n	801758e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801757a:	28ff      	cmp	r0, #255	; 0xff
 801757c:	d105      	bne.n	801758a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801757e:	f1bc 0f00 	cmp.w	ip, #0
 8017582:	bf14      	ite	ne
 8017584:	2340      	movne	r3, #64	; 0x40
 8017586:	2320      	moveq	r3, #32
 8017588:	e7be      	b.n	8017508 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801758a:	2340      	movs	r3, #64	; 0x40
 801758c:	e7bc      	b.n	8017508 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801758e:	28ff      	cmp	r0, #255	; 0xff
 8017590:	d105      	bne.n	801759e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8017592:	f1bc 0f00 	cmp.w	ip, #0
 8017596:	bf14      	ite	ne
 8017598:	2304      	movne	r3, #4
 801759a:	2301      	moveq	r3, #1
 801759c:	e7b4      	b.n	8017508 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801759e:	2304      	movs	r3, #4
 80175a0:	e7b2      	b.n	8017508 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80175a2:	bf00      	nop
 80175a4:	0802bb54 	.word	0x0802bb54

080175a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80175a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175ac:	b08b      	sub	sp, #44	; 0x2c
 80175ae:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80175b2:	461d      	mov	r5, r3
 80175b4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80175b8:	bf14      	ite	ne
 80175ba:	2308      	movne	r3, #8
 80175bc:	2302      	moveq	r3, #2
 80175be:	2400      	movs	r4, #0
 80175c0:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80175c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80175c8:	4688      	mov	r8, r1
 80175ca:	4693      	mov	fp, r2
 80175cc:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80175d0:	9404      	str	r4, [sp, #16]
 80175d2:	4607      	mov	r7, r0
 80175d4:	f7ff ff08 	bl	80173e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80175d8:	2e0b      	cmp	r6, #11
 80175da:	bf98      	it	ls
 80175dc:	4b15      	ldrls	r3, [pc, #84]	; (8017634 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80175de:	fb05 b50a 	mla	r5, r5, sl, fp
 80175e2:	bf98      	it	ls
 80175e4:	5d9c      	ldrbls	r4, [r3, r6]
 80175e6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80175ea:	10e4      	asrs	r4, r4, #3
 80175ec:	f8ad 3018 	strh.w	r3, [sp, #24]
 80175f0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80175f4:	fb04 0405 	mla	r4, r4, r5, r0
 80175f8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80175fc:	2300      	movs	r3, #0
 80175fe:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017602:	6878      	ldr	r0, [r7, #4]
 8017604:	9405      	str	r4, [sp, #20]
 8017606:	f8ad 301c 	strh.w	r3, [sp, #28]
 801760a:	f8ad a01e 	strh.w	sl, [sp, #30]
 801760e:	f8cd 8010 	str.w	r8, [sp, #16]
 8017612:	f88d 9020 	strb.w	r9, [sp, #32]
 8017616:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 801761a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801761e:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8017622:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8017626:	6803      	ldr	r3, [r0, #0]
 8017628:	a901      	add	r1, sp, #4
 801762a:	685b      	ldr	r3, [r3, #4]
 801762c:	4798      	blx	r3
 801762e:	b00b      	add	sp, #44	; 0x2c
 8017630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017634:	0802bb54 	.word	0x0802bb54

08017638 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8017638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801763c:	461e      	mov	r6, r3
 801763e:	4b0a      	ldr	r3, [pc, #40]	; (8017668 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8017640:	460f      	mov	r7, r1
 8017642:	881d      	ldrh	r5, [r3, #0]
 8017644:	4690      	mov	r8, r2
 8017646:	f7ff fd23 	bl	8017090 <_ZN8touchgfx3HAL3lcdEv>
 801764a:	6803      	ldr	r3, [r0, #0]
 801764c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801764e:	4798      	blx	r3
 8017650:	280b      	cmp	r0, #11
 8017652:	bf8e      	itee	hi
 8017654:	2400      	movhi	r4, #0
 8017656:	4b05      	ldrls	r3, [pc, #20]	; (801766c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8017658:	5c1c      	ldrbls	r4, [r3, r0]
 801765a:	fb08 7005 	mla	r0, r8, r5, r7
 801765e:	10e4      	asrs	r4, r4, #3
 8017660:	fb04 6000 	mla	r0, r4, r0, r6
 8017664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017668:	20197a3a 	.word	0x20197a3a
 801766c:	0802bb54 	.word	0x0802bb54

08017670 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8017670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017672:	2500      	movs	r5, #0
 8017674:	b08b      	sub	sp, #44	; 0x2c
 8017676:	461f      	mov	r7, r3
 8017678:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801767c:	4604      	mov	r4, r0
 801767e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8017682:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017686:	4616      	mov	r6, r2
 8017688:	f8ad 3018 	strh.w	r3, [sp, #24]
 801768c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017690:	9504      	str	r5, [sp, #16]
 8017692:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017696:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801769a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801769e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80176a2:	f88d 3020 	strb.w	r3, [sp, #32]
 80176a6:	f7ff fe9f 	bl	80173e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80176aa:	463a      	mov	r2, r7
 80176ac:	4631      	mov	r1, r6
 80176ae:	4603      	mov	r3, r0
 80176b0:	4620      	mov	r0, r4
 80176b2:	f7ff ffc1 	bl	8017638 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80176b6:	4b0e      	ldr	r3, [pc, #56]	; (80176f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80176b8:	9005      	str	r0, [sp, #20]
 80176ba:	881b      	ldrh	r3, [r3, #0]
 80176bc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80176c0:	f7ff fce6 	bl	8017090 <_ZN8touchgfx3HAL3lcdEv>
 80176c4:	6803      	ldr	r3, [r0, #0]
 80176c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176c8:	4798      	blx	r3
 80176ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80176cc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 80176d0:	9304      	str	r3, [sp, #16]
 80176d2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80176d6:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80176da:	6860      	ldr	r0, [r4, #4]
 80176dc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80176e0:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 80176e4:	6803      	ldr	r3, [r0, #0]
 80176e6:	a901      	add	r1, sp, #4
 80176e8:	685b      	ldr	r3, [r3, #4]
 80176ea:	4798      	blx	r3
 80176ec:	b00b      	add	sp, #44	; 0x2c
 80176ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176f0:	20197a3a 	.word	0x20197a3a

080176f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80176f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176f6:	b08d      	sub	sp, #52	; 0x34
 80176f8:	466b      	mov	r3, sp
 80176fa:	e883 0006 	stmia.w	r3, {r1, r2}
 80176fe:	2300      	movs	r3, #0
 8017700:	2501      	movs	r5, #1
 8017702:	9306      	str	r3, [sp, #24]
 8017704:	6803      	ldr	r3, [r0, #0]
 8017706:	9503      	str	r5, [sp, #12]
 8017708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801770a:	4604      	mov	r4, r0
 801770c:	f8bd 6000 	ldrh.w	r6, [sp]
 8017710:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8017714:	4798      	blx	r3
 8017716:	463a      	mov	r2, r7
 8017718:	4631      	mov	r1, r6
 801771a:	4603      	mov	r3, r0
 801771c:	4620      	mov	r0, r4
 801771e:	f7ff ff8b 	bl	8017638 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017722:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017724:	9004      	str	r0, [sp, #16]
 8017726:	9307      	str	r3, [sp, #28]
 8017728:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801772c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017730:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017734:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017738:	4b0e      	ldr	r3, [pc, #56]	; (8017774 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801773a:	881b      	ldrh	r3, [r3, #0]
 801773c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8017740:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017744:	f7ff fca4 	bl	8017090 <_ZN8touchgfx3HAL3lcdEv>
 8017748:	6803      	ldr	r3, [r0, #0]
 801774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801774c:	4798      	blx	r3
 801774e:	23ff      	movs	r3, #255	; 0xff
 8017750:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8017754:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8017758:	6860      	ldr	r0, [r4, #4]
 801775a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801775e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017762:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8017766:	6803      	ldr	r3, [r0, #0]
 8017768:	a903      	add	r1, sp, #12
 801776a:	685b      	ldr	r3, [r3, #4]
 801776c:	4798      	blx	r3
 801776e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8017770:	b00d      	add	sp, #52	; 0x34
 8017772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017774:	20197a3a 	.word	0x20197a3a

08017778 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8017778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801777c:	b08c      	sub	sp, #48	; 0x30
 801777e:	466d      	mov	r5, sp
 8017780:	461e      	mov	r6, r3
 8017782:	2300      	movs	r3, #0
 8017784:	e885 0006 	stmia.w	r5, {r1, r2}
 8017788:	2501      	movs	r5, #1
 801778a:	9306      	str	r3, [sp, #24]
 801778c:	6803      	ldr	r3, [r0, #0]
 801778e:	9503      	str	r5, [sp, #12]
 8017790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017792:	4604      	mov	r4, r0
 8017794:	f8bd 7000 	ldrh.w	r7, [sp]
 8017798:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801779c:	4798      	blx	r3
 801779e:	4642      	mov	r2, r8
 80177a0:	4639      	mov	r1, r7
 80177a2:	4603      	mov	r3, r0
 80177a4:	4620      	mov	r0, r4
 80177a6:	f7ff ff47 	bl	8017638 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80177aa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80177ae:	9004      	str	r0, [sp, #16]
 80177b0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80177b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80177b8:	9607      	str	r6, [sp, #28]
 80177ba:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80177be:	4b10      	ldr	r3, [pc, #64]	; (8017800 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80177c0:	881b      	ldrh	r3, [r3, #0]
 80177c2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80177c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80177c8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80177cc:	f7ff fc60 	bl	8017090 <_ZN8touchgfx3HAL3lcdEv>
 80177d0:	6803      	ldr	r3, [r0, #0]
 80177d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177d4:	4798      	blx	r3
 80177d6:	23ff      	movs	r3, #255	; 0xff
 80177d8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80177dc:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80177e0:	6860      	ldr	r0, [r4, #4]
 80177e2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80177e6:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80177ea:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80177ee:	6803      	ldr	r3, [r0, #0]
 80177f0:	a903      	add	r1, sp, #12
 80177f2:	685b      	ldr	r3, [r3, #4]
 80177f4:	4798      	blx	r3
 80177f6:	4630      	mov	r0, r6
 80177f8:	b00c      	add	sp, #48	; 0x30
 80177fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177fe:	bf00      	nop
 8017800:	20197a3a 	.word	0x20197a3a

08017804 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8017804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017806:	b085      	sub	sp, #20
 8017808:	ac02      	add	r4, sp, #8
 801780a:	e884 0006 	stmia.w	r4, {r1, r2}
 801780e:	4605      	mov	r5, r0
 8017810:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8017814:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8017818:	f7ff fde6 	bl	80173e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801781c:	463a      	mov	r2, r7
 801781e:	4603      	mov	r3, r0
 8017820:	4631      	mov	r1, r6
 8017822:	4628      	mov	r0, r5
 8017824:	f7ff ff08 	bl	8017638 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017828:	4a05      	ldr	r2, [pc, #20]	; (8017840 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801782a:	682b      	ldr	r3, [r5, #0]
 801782c:	8812      	ldrh	r2, [r2, #0]
 801782e:	9200      	str	r2, [sp, #0]
 8017830:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8017832:	e894 0006 	ldmia.w	r4, {r1, r2}
 8017836:	4603      	mov	r3, r0
 8017838:	4628      	mov	r0, r5
 801783a:	47b0      	blx	r6
 801783c:	b005      	add	sp, #20
 801783e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017840:	20197a3a 	.word	0x20197a3a

08017844 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8017844:	b570      	push	{r4, r5, r6, lr}
 8017846:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801784a:	4604      	mov	r4, r0
 801784c:	b19b      	cbz	r3, 8017876 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801784e:	2002      	movs	r0, #2
 8017850:	f7ea fe6e 	bl	8002530 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8017854:	2300      	movs	r3, #0
 8017856:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801785a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801785e:	6823      	ldr	r3, [r4, #0]
 8017860:	4620      	mov	r0, r4
 8017862:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8017866:	f7ff fdbf 	bl	80173e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801786a:	462b      	mov	r3, r5
 801786c:	4601      	mov	r1, r0
 801786e:	4620      	mov	r0, r4
 8017870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017874:	4718      	bx	r3
 8017876:	bd70      	pop	{r4, r5, r6, pc}

08017878 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8017878:	b570      	push	{r4, r5, r6, lr}
 801787a:	4605      	mov	r5, r0
 801787c:	460c      	mov	r4, r1
 801787e:	2003      	movs	r0, #3
 8017880:	b149      	cbz	r1, 8017896 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8017882:	f7ea fe1d 	bl	80024c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017886:	6928      	ldr	r0, [r5, #16]
 8017888:	b168      	cbz	r0, 80178a6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801788a:	2101      	movs	r1, #1
 801788c:	6803      	ldr	r3, [r0, #0]
 801788e:	695b      	ldr	r3, [r3, #20]
 8017890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017894:	4718      	bx	r3
 8017896:	f7ea fe2f 	bl	80024f8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801789a:	6928      	ldr	r0, [r5, #16]
 801789c:	b118      	cbz	r0, 80178a6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801789e:	6803      	ldr	r3, [r0, #0]
 80178a0:	4621      	mov	r1, r4
 80178a2:	695b      	ldr	r3, [r3, #20]
 80178a4:	e7f4      	b.n	8017890 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 80178a6:	bd70      	pop	{r4, r5, r6, pc}

080178a8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80178a8:	b538      	push	{r3, r4, r5, lr}
 80178aa:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 80178ae:	4604      	mov	r4, r0
 80178b0:	428b      	cmp	r3, r1
 80178b2:	460d      	mov	r5, r1
 80178b4:	d006      	beq.n	80178c4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 80178b6:	6803      	ldr	r3, [r0, #0]
 80178b8:	b929      	cbnz	r1, 80178c6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 80178ba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80178be:	4798      	blx	r3
 80178c0:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80178c4:	bd38      	pop	{r3, r4, r5, pc}
 80178c6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80178ca:	e7f8      	b.n	80178be <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080178cc <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80178cc:	b510      	push	{r4, lr}
 80178ce:	4b0d      	ldr	r3, [pc, #52]	; (8017904 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80178d0:	4604      	mov	r4, r0
 80178d2:	781b      	ldrb	r3, [r3, #0]
 80178d4:	b95b      	cbnz	r3, 80178ee <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80178d6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80178da:	2b02      	cmp	r3, #2
 80178dc:	d007      	beq.n	80178ee <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80178de:	6840      	ldr	r0, [r0, #4]
 80178e0:	f000 f914 	bl	8017b0c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80178e4:	b118      	cbz	r0, 80178ee <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80178e6:	6862      	ldr	r2, [r4, #4]
 80178e8:	7a53      	ldrb	r3, [r2, #9]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d0fc      	beq.n	80178e8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80178ee:	f7eb f803 	bl	80028f8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80178f2:	4620      	mov	r0, r4
 80178f4:	2100      	movs	r1, #0
 80178f6:	f7ff ffd7 	bl	80178a8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80178fa:	4620      	mov	r0, r4
 80178fc:	f7ff fd74 	bl	80173e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017900:	bd10      	pop	{r4, pc}
 8017902:	bf00      	nop
 8017904:	20197a3e 	.word	0x20197a3e

08017908 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8017908:	2000      	movs	r0, #0
 801790a:	4770      	bx	lr

0801790c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801790c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8017910:	1a13      	subs	r3, r2, r0
 8017912:	4258      	negs	r0, r3
 8017914:	4158      	adcs	r0, r3
 8017916:	4770      	bx	lr

08017918 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8017918:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801791c:	1a9b      	subs	r3, r3, r2
 801791e:	2b00      	cmp	r3, #0
 8017920:	bfdc      	itt	le
 8017922:	6882      	ldrle	r2, [r0, #8]
 8017924:	189b      	addle	r3, r3, r2
 8017926:	2b01      	cmp	r3, #1
 8017928:	bfcc      	ite	gt
 801792a:	2000      	movgt	r0, #0
 801792c:	2001      	movle	r0, #1
 801792e:	4770      	bx	lr

08017930 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8017930:	6902      	ldr	r2, [r0, #16]
 8017932:	6843      	ldr	r3, [r0, #4]
 8017934:	2024      	movs	r0, #36	; 0x24
 8017936:	fb00 3002 	mla	r0, r0, r2, r3
 801793a:	4770      	bx	lr

0801793c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801793c:	6803      	ldr	r3, [r0, #0]
 801793e:	691b      	ldr	r3, [r3, #16]
 8017940:	4718      	bx	r3

08017942 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8017942:	2301      	movs	r3, #1
 8017944:	b570      	push	{r4, r5, r6, lr}
 8017946:	7203      	strb	r3, [r0, #8]
 8017948:	4604      	mov	r4, r0
 801794a:	6840      	ldr	r0, [r0, #4]
 801794c:	6803      	ldr	r3, [r0, #0]
 801794e:	699b      	ldr	r3, [r3, #24]
 8017950:	4798      	blx	r3
 8017952:	6803      	ldr	r3, [r0, #0]
 8017954:	4605      	mov	r5, r0
 8017956:	2b40      	cmp	r3, #64	; 0x40
 8017958:	d00c      	beq.n	8017974 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801795a:	d810      	bhi.n	801797e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801795c:	2b04      	cmp	r3, #4
 801795e:	d01d      	beq.n	801799c <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8017960:	d804      	bhi.n	801796c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8017962:	2b01      	cmp	r3, #1
 8017964:	d006      	beq.n	8017974 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017966:	2b02      	cmp	r3, #2
 8017968:	d02c      	beq.n	80179c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801796a:	bd70      	pop	{r4, r5, r6, pc}
 801796c:	2b08      	cmp	r3, #8
 801796e:	d01d      	beq.n	80179ac <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8017970:	2b20      	cmp	r3, #32
 8017972:	d1fa      	bne.n	801796a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8017974:	6823      	ldr	r3, [r4, #0]
 8017976:	4620      	mov	r0, r4
 8017978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801797a:	4798      	blx	r3
 801797c:	e013      	b.n	80179a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801797e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017982:	d0f7      	beq.n	8017974 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017984:	d804      	bhi.n	8017990 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8017986:	2b80      	cmp	r3, #128	; 0x80
 8017988:	d0f4      	beq.n	8017974 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801798a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801798e:	e7f0      	b.n	8017972 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8017990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017994:	d0ee      	beq.n	8017974 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801799a:	e7e5      	b.n	8017968 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801799c:	6823      	ldr	r3, [r4, #0]
 801799e:	7f01      	ldrb	r1, [r0, #28]
 80179a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179a2:	4620      	mov	r0, r4
 80179a4:	4798      	blx	r3
 80179a6:	6823      	ldr	r3, [r4, #0]
 80179a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179aa:	e006      	b.n	80179ba <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80179ac:	6823      	ldr	r3, [r4, #0]
 80179ae:	7f01      	ldrb	r1, [r0, #28]
 80179b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179b2:	4620      	mov	r0, r4
 80179b4:	4798      	blx	r3
 80179b6:	6823      	ldr	r3, [r4, #0]
 80179b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80179ba:	4629      	mov	r1, r5
 80179bc:	4620      	mov	r0, r4
 80179be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80179c2:	4718      	bx	r3
 80179c4:	6823      	ldr	r3, [r4, #0]
 80179c6:	4620      	mov	r0, r4
 80179c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80179ca:	4798      	blx	r3
 80179cc:	e7f3      	b.n	80179b6 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080179ce <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80179ce:	4770      	bx	lr

080179d0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80179d0:	4770      	bx	lr

080179d2 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80179d2:	4770      	bx	lr

080179d4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80179d4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80179d8:	1ad2      	subs	r2, r2, r3
 80179da:	2a00      	cmp	r2, #0
 80179dc:	b510      	push	{r4, lr}
 80179de:	bfdc      	itt	le
 80179e0:	6884      	ldrle	r4, [r0, #8]
 80179e2:	1912      	addle	r2, r2, r4
 80179e4:	2a01      	cmp	r2, #1
 80179e6:	dd16      	ble.n	8017a16 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80179e8:	2424      	movs	r4, #36	; 0x24
 80179ea:	6842      	ldr	r2, [r0, #4]
 80179ec:	fb04 2303 	mla	r3, r4, r3, r2
 80179f0:	f101 0220 	add.w	r2, r1, #32
 80179f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80179f8:	4291      	cmp	r1, r2
 80179fa:	f843 4b04 	str.w	r4, [r3], #4
 80179fe:	d1f9      	bne.n	80179f4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8017a00:	780a      	ldrb	r2, [r1, #0]
 8017a02:	701a      	strb	r2, [r3, #0]
 8017a04:	68c3      	ldr	r3, [r0, #12]
 8017a06:	6882      	ldr	r2, [r0, #8]
 8017a08:	3301      	adds	r3, #1
 8017a0a:	429a      	cmp	r2, r3
 8017a0c:	bfd8      	it	le
 8017a0e:	1a9b      	suble	r3, r3, r2
 8017a10:	f3bf 8f5b 	dmb	ish
 8017a14:	60c3      	str	r3, [r0, #12]
 8017a16:	bd10      	pop	{r4, pc}

08017a18 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8017a18:	6903      	ldr	r3, [r0, #16]
 8017a1a:	6882      	ldr	r2, [r0, #8]
 8017a1c:	3301      	adds	r3, #1
 8017a1e:	429a      	cmp	r2, r3
 8017a20:	bfd8      	it	le
 8017a22:	1a9b      	suble	r3, r3, r2
 8017a24:	f3bf 8f5b 	dmb	ish
 8017a28:	6103      	str	r3, [r0, #16]
 8017a2a:	4770      	bx	lr

08017a2c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8017a2c:	b570      	push	{r4, r5, r6, lr}
 8017a2e:	4604      	mov	r4, r0
 8017a30:	460e      	mov	r6, r1
 8017a32:	6860      	ldr	r0, [r4, #4]
 8017a34:	6803      	ldr	r3, [r0, #0]
 8017a36:	685b      	ldr	r3, [r3, #4]
 8017a38:	4798      	blx	r3
 8017a3a:	2800      	cmp	r0, #0
 8017a3c:	d1f9      	bne.n	8017a32 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8017a3e:	4d0d      	ldr	r5, [pc, #52]	; (8017a74 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8017a40:	6828      	ldr	r0, [r5, #0]
 8017a42:	6803      	ldr	r3, [r0, #0]
 8017a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017a46:	4798      	blx	r3
 8017a48:	f7ea ff82 	bl	8002950 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8017a4c:	6828      	ldr	r0, [r5, #0]
 8017a4e:	2101      	movs	r1, #1
 8017a50:	f7ff ff2a 	bl	80178a8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8017a54:	6860      	ldr	r0, [r4, #4]
 8017a56:	4631      	mov	r1, r6
 8017a58:	6803      	ldr	r3, [r0, #0]
 8017a5a:	689b      	ldr	r3, [r3, #8]
 8017a5c:	4798      	blx	r3
 8017a5e:	6823      	ldr	r3, [r4, #0]
 8017a60:	4620      	mov	r0, r4
 8017a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a64:	4798      	blx	r3
 8017a66:	6828      	ldr	r0, [r5, #0]
 8017a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a6c:	6803      	ldr	r3, [r0, #0]
 8017a6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017a70:	4718      	bx	r3
 8017a72:	bf00      	nop
 8017a74:	20197a40 	.word	0x20197a40

08017a78 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8017a78:	b508      	push	{r3, lr}
 8017a7a:	f7ea ff3d 	bl	80028f8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017a82:	f7ea bf4f 	b.w	8002924 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017a86 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8017a86:	b510      	push	{r4, lr}
 8017a88:	4604      	mov	r4, r0
 8017a8a:	2114      	movs	r1, #20
 8017a8c:	f011 fbb5 	bl	80291fa <_ZdlPvj>
 8017a90:	4620      	mov	r0, r4
 8017a92:	bd10      	pop	{r4, pc}

08017a94 <_ZN8touchgfx13DMA_Interface5startEv>:
 8017a94:	b510      	push	{r4, lr}
 8017a96:	4604      	mov	r4, r0
 8017a98:	6840      	ldr	r0, [r0, #4]
 8017a9a:	6803      	ldr	r3, [r0, #0]
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	4798      	blx	r3
 8017aa0:	b948      	cbnz	r0, 8017ab6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017aa2:	7a63      	ldrb	r3, [r4, #9]
 8017aa4:	b13b      	cbz	r3, 8017ab6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017aa6:	7a23      	ldrb	r3, [r4, #8]
 8017aa8:	b92b      	cbnz	r3, 8017ab6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017aaa:	6823      	ldr	r3, [r4, #0]
 8017aac:	4620      	mov	r0, r4
 8017aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ab4:	4718      	bx	r3
 8017ab6:	bd10      	pop	{r4, pc}

08017ab8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8017ab8:	b570      	push	{r4, r5, r6, lr}
 8017aba:	4604      	mov	r4, r0
 8017abc:	6840      	ldr	r0, [r0, #4]
 8017abe:	6803      	ldr	r3, [r0, #0]
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	4798      	blx	r3
 8017ac4:	4605      	mov	r5, r0
 8017ac6:	b930      	cbnz	r0, 8017ad6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8017ac8:	7a23      	ldrb	r3, [r4, #8]
 8017aca:	b123      	cbz	r3, 8017ad6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8017acc:	6860      	ldr	r0, [r4, #4]
 8017ace:	6803      	ldr	r3, [r0, #0]
 8017ad0:	695b      	ldr	r3, [r3, #20]
 8017ad2:	4798      	blx	r3
 8017ad4:	7225      	strb	r5, [r4, #8]
 8017ad6:	6860      	ldr	r0, [r4, #4]
 8017ad8:	6803      	ldr	r3, [r0, #0]
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	4798      	blx	r3
 8017ade:	b928      	cbnz	r0, 8017aec <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8017ae0:	6823      	ldr	r3, [r4, #0]
 8017ae2:	4620      	mov	r0, r4
 8017ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017aea:	4718      	bx	r3
 8017aec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017af0:	f7ea bf34 	b.w	800295c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08017af4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8017af4:	6082      	str	r2, [r0, #8]
 8017af6:	2200      	movs	r2, #0
 8017af8:	b510      	push	{r4, lr}
 8017afa:	4c03      	ldr	r4, [pc, #12]	; (8017b08 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8017afc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017b00:	e9c0 4100 	strd	r4, r1, [r0]
 8017b04:	bd10      	pop	{r4, pc}
 8017b06:	bf00      	nop
 8017b08:	0802bb68 	.word	0x0802bb68

08017b0c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8017b0c:	6840      	ldr	r0, [r0, #4]
 8017b0e:	6803      	ldr	r3, [r0, #0]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	4718      	bx	r3

08017b14 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017b14:	2300      	movs	r3, #0
 8017b16:	8083      	strh	r3, [r0, #4]
 8017b18:	80c3      	strh	r3, [r0, #6]
 8017b1a:	8003      	strh	r3, [r0, #0]
 8017b1c:	8043      	strh	r3, [r0, #2]
 8017b1e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8017b22:	2bff      	cmp	r3, #255	; 0xff
 8017b24:	bf01      	itttt	eq
 8017b26:	890b      	ldrheq	r3, [r1, #8]
 8017b28:	8083      	strheq	r3, [r0, #4]
 8017b2a:	894b      	ldrheq	r3, [r1, #10]
 8017b2c:	80c3      	strheq	r3, [r0, #6]
 8017b2e:	4770      	bx	lr

08017b30 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017b32:	4604      	mov	r4, r0
 8017b34:	466b      	mov	r3, sp
 8017b36:	6808      	ldr	r0, [r1, #0]
 8017b38:	6849      	ldr	r1, [r1, #4]
 8017b3a:	c303      	stmia	r3!, {r0, r1}
 8017b3c:	6823      	ldr	r3, [r4, #0]
 8017b3e:	4669      	mov	r1, sp
 8017b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b42:	4620      	mov	r0, r4
 8017b44:	4798      	blx	r3
 8017b46:	4b08      	ldr	r3, [pc, #32]	; (8017b68 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017b4e:	b10a      	cbz	r2, 8017b54 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017b50:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017b52:	b900      	cbnz	r0, 8017b56 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017b54:	6898      	ldr	r0, [r3, #8]
 8017b56:	6803      	ldr	r3, [r0, #0]
 8017b58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017b5a:	6a1d      	ldr	r5, [r3, #32]
 8017b5c:	4669      	mov	r1, sp
 8017b5e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017b62:	47a8      	blx	r5
 8017b64:	b003      	add	sp, #12
 8017b66:	bd30      	pop	{r4, r5, pc}
 8017b68:	20197a40 	.word	0x20197a40

08017b6c <_ZN8touchgfx3BoxD1Ev>:
 8017b6c:	4770      	bx	lr

08017b6e <_ZN8touchgfx3BoxD0Ev>:
 8017b6e:	b510      	push	{r4, lr}
 8017b70:	4604      	mov	r4, r0
 8017b72:	212c      	movs	r1, #44	; 0x2c
 8017b74:	f011 fb41 	bl	80291fa <_ZdlPvj>
 8017b78:	4620      	mov	r0, r4
 8017b7a:	bd10      	pop	{r4, pc}

08017b7c <_ZNK8touchgfx3Box17invalidateContentEv>:
 8017b7c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8017b80:	b12a      	cbz	r2, 8017b8e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8017b82:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8017b86:	b112      	cbz	r2, 8017b8e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8017b88:	6803      	ldr	r3, [r0, #0]
 8017b8a:	695b      	ldr	r3, [r3, #20]
 8017b8c:	4718      	bx	r3
 8017b8e:	4770      	bx	lr

08017b90 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8017b90:	b510      	push	{r4, lr}
 8017b92:	6803      	ldr	r3, [r0, #0]
 8017b94:	460c      	mov	r4, r1
 8017b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b98:	4798      	blx	r3
 8017b9a:	1b03      	subs	r3, r0, r4
 8017b9c:	4258      	negs	r0, r3
 8017b9e:	4158      	adcs	r0, r3
 8017ba0:	bd10      	pop	{r4, pc}
	...

08017ba4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8017ba4:	4b01      	ldr	r3, [pc, #4]	; (8017bac <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8017ba6:	6019      	str	r1, [r3, #0]
 8017ba8:	4770      	bx	lr
 8017baa:	bf00      	nop
 8017bac:	20197a48 	.word	0x20197a48

08017bb0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bb4:	4696      	mov	lr, r2
 8017bb6:	4614      	mov	r4, r2
 8017bb8:	4605      	mov	r5, r0
 8017bba:	460e      	mov	r6, r1
 8017bbc:	461f      	mov	r7, r3
 8017bbe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017bc2:	b097      	sub	sp, #92	; 0x5c
 8017bc4:	f10d 0c1c 	add.w	ip, sp, #28
 8017bc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017bcc:	f8de 3000 	ldr.w	r3, [lr]
 8017bd0:	f104 0e14 	add.w	lr, r4, #20
 8017bd4:	f8cc 3000 	str.w	r3, [ip]
 8017bd8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017bdc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017be0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017be4:	f8de 3000 	ldr.w	r3, [lr]
 8017be8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017bec:	f8cc 3000 	str.w	r3, [ip]
 8017bf0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017bf4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017bf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017bfc:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8017c00:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8017c04:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8017c08:	f8de 3000 	ldr.w	r3, [lr]
 8017c0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017c0e:	f8cc 3000 	str.w	r3, [ip]
 8017c12:	9201      	str	r2, [sp, #4]
 8017c14:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017c18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017c1a:	682b      	ldr	r3, [r5, #0]
 8017c1c:	9200      	str	r2, [sp, #0]
 8017c1e:	f8cd 8008 	str.w	r8, [sp, #8]
 8017c22:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8017c26:	aa07      	add	r2, sp, #28
 8017c28:	463b      	mov	r3, r7
 8017c2a:	4631      	mov	r1, r6
 8017c2c:	4628      	mov	r0, r5
 8017c2e:	47d8      	blx	fp
 8017c30:	46a6      	mov	lr, r4
 8017c32:	f10d 0c1c 	add.w	ip, sp, #28
 8017c36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017c3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017c3e:	f8de 3000 	ldr.w	r3, [lr]
 8017c42:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017c46:	f8cc 3000 	str.w	r3, [ip]
 8017c4a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017c4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017c52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017c56:	f8de 3000 	ldr.w	r3, [lr]
 8017c5a:	343c      	adds	r4, #60	; 0x3c
 8017c5c:	f8cc 3000 	str.w	r3, [ip]
 8017c60:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017c6a:	6823      	ldr	r3, [r4, #0]
 8017c6c:	4631      	mov	r1, r6
 8017c6e:	f8cc 3000 	str.w	r3, [ip]
 8017c72:	682b      	ldr	r3, [r5, #0]
 8017c74:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017c78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017c7a:	f8cd 8008 	str.w	r8, [sp, #8]
 8017c7e:	9201      	str	r2, [sp, #4]
 8017c80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017c82:	4628      	mov	r0, r5
 8017c84:	9200      	str	r2, [sp, #0]
 8017c86:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8017c88:	aa07      	add	r2, sp, #28
 8017c8a:	463b      	mov	r3, r7
 8017c8c:	47a0      	blx	r4
 8017c8e:	b017      	add	sp, #92	; 0x5c
 8017c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017c94 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c98:	b08d      	sub	sp, #52	; 0x34
 8017c9a:	4688      	mov	r8, r1
 8017c9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017c9e:	f8d3 c000 	ldr.w	ip, [r3]
 8017ca2:	680f      	ldr	r7, [r1, #0]
 8017ca4:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8017ca8:	eba7 070c 	sub.w	r7, r7, ip
 8017cac:	42bc      	cmp	r4, r7
 8017cae:	bfa8      	it	ge
 8017cb0:	463c      	movge	r4, r7
 8017cb2:	ee07 4a90 	vmov	s15, r4
 8017cb6:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8017cba:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017cbe:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8017cc2:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8017cc6:	edd3 6a07 	vldr	s13, [r3, #28]
 8017cca:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017cce:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017cd2:	ee25 5a27 	vmul.f32	s10, s10, s15
 8017cd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017cda:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8017cde:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8017ce2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017ce6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017ce8:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8017cec:	f9b1 9000 	ldrsh.w	r9, [r1]
 8017cf0:	f9ba 1000 	ldrsh.w	r1, [sl]
 8017cf4:	eb09 0e0c 	add.w	lr, r9, ip
 8017cf8:	4571      	cmp	r1, lr
 8017cfa:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017cfe:	ee32 1a05 	vadd.f32	s2, s4, s10
 8017d02:	ee36 0a84 	vadd.f32	s0, s13, s8
 8017d06:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017d0a:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017d0e:	f340 808c 	ble.w	8017e2a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8017d12:	eba1 060e 	sub.w	r6, r1, lr
 8017d16:	fb96 f5f4 	sdiv	r5, r6, r4
 8017d1a:	ee07 5a10 	vmov	s14, r5
 8017d1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017d22:	2d00      	cmp	r5, #0
 8017d24:	fb04 6615 	mls	r6, r4, r5, r6
 8017d28:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017d2c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8017d30:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017d34:	dd12      	ble.n	8017d5c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8017d36:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017d3a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d42:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8017d46:	bf14      	ite	ne
 8017d48:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017d4c:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017d50:	ee31 2a45 	vsub.f32	s4, s2, s10
 8017d54:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017d58:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017d5c:	fb05 f204 	mul.w	r2, r5, r4
 8017d60:	1abf      	subs	r7, r7, r2
 8017d62:	4494      	add	ip, r2
 8017d64:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8017d68:	4411      	add	r1, r2
 8017d6a:	eb09 020c 	add.w	r2, r9, ip
 8017d6e:	443a      	add	r2, r7
 8017d70:	b209      	sxth	r1, r1
 8017d72:	428a      	cmp	r2, r1
 8017d74:	bfc4      	itt	gt
 8017d76:	eba1 0209 	subgt.w	r2, r1, r9
 8017d7a:	eba2 070c 	subgt.w	r7, r2, ip
 8017d7e:	2f00      	cmp	r7, #0
 8017d80:	dd50      	ble.n	8017e24 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8017d82:	fb97 f1f4 	sdiv	r1, r7, r4
 8017d86:	fb04 7211 	mls	r2, r4, r1, r7
 8017d8a:	b90a      	cbnz	r2, 8017d90 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8017d8c:	4622      	mov	r2, r4
 8017d8e:	3901      	subs	r1, #1
 8017d90:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017d94:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017d98:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017d9c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8017da0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017da4:	ee17 7a90 	vmov	r7, s15
 8017da8:	ee73 7a42 	vsub.f32	s15, s6, s4
 8017dac:	eef0 6a42 	vmov.f32	s13, s4
 8017db0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017db4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017db8:	ee17 ca90 	vmov	ip, s15
 8017dbc:	eeb0 7a61 	vmov.f32	s14, s3
 8017dc0:	6840      	ldr	r0, [r0, #4]
 8017dc2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8017dc6:	f8d0 a000 	ldr.w	sl, [r0]
 8017dca:	900b      	str	r0, [sp, #44]	; 0x2c
 8017dcc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017dce:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8017dd2:	9008      	str	r0, [sp, #32]
 8017dd4:	9818      	ldr	r0, [sp, #96]	; 0x60
 8017dd6:	695b      	ldr	r3, [r3, #20]
 8017dd8:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8017ddc:	fb9c fcf4 	sdiv	ip, ip, r4
 8017de0:	445b      	add	r3, fp
 8017de2:	9307      	str	r3, [sp, #28]
 8017de4:	ee16 3a90 	vmov	r3, s13
 8017de8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017dec:	fb0c 3306 	mla	r3, ip, r6, r3
 8017df0:	fb97 f7f4 	sdiv	r7, r7, r4
 8017df4:	9302      	str	r3, [sp, #8]
 8017df6:	ee17 3a10 	vmov	r3, s14
 8017dfa:	2900      	cmp	r1, #0
 8017dfc:	bfcc      	ite	gt
 8017dfe:	46a1      	movgt	r9, r4
 8017e00:	4691      	movle	r9, r2
 8017e02:	44b6      	add	lr, r6
 8017e04:	fb04 e505 	mla	r5, r4, r5, lr
 8017e08:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8017e0c:	fb07 3706 	mla	r7, r7, r6, r3
 8017e10:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8017e14:	e9cd 4700 	strd	r4, r7, [sp]
 8017e18:	eba9 0306 	sub.w	r3, r9, r6
 8017e1c:	f8da 4008 	ldr.w	r4, [sl, #8]
 8017e20:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017e22:	47a0      	blx	r4
 8017e24:	b00d      	add	sp, #52	; 0x34
 8017e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e2a:	2500      	movs	r5, #0
 8017e2c:	462e      	mov	r6, r5
 8017e2e:	e799      	b.n	8017d64 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08017e30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e34:	461d      	mov	r5, r3
 8017e36:	b0db      	sub	sp, #364	; 0x16c
 8017e38:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8017e3c:	910f      	str	r1, [sp, #60]	; 0x3c
 8017e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8017e40:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8017e44:	9009      	str	r0, [sp, #36]	; 0x24
 8017e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8017e48:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8017e4c:	4614      	mov	r4, r2
 8017e4e:	9310      	str	r3, [sp, #64]	; 0x40
 8017e50:	6803      	ldr	r3, [r0, #0]
 8017e52:	4629      	mov	r1, r5
 8017e54:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8017e56:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017e5a:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8017e5e:	47b8      	blx	r7
 8017e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e62:	6058      	str	r0, [r3, #4]
 8017e64:	2800      	cmp	r0, #0
 8017e66:	f000 83a1 	beq.w	80185ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017e6a:	ed94 7a02 	vldr	s14, [r4, #8]
 8017e6e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8017e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017e76:	682b      	ldr	r3, [r5, #0]
 8017e78:	9314      	str	r3, [sp, #80]	; 0x50
 8017e7a:	686b      	ldr	r3, [r5, #4]
 8017e7c:	9315      	str	r3, [sp, #84]	; 0x54
 8017e7e:	4bc1      	ldr	r3, [pc, #772]	; (8018184 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8017e80:	7819      	ldrb	r1, [r3, #0]
 8017e82:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8017e86:	2900      	cmp	r1, #0
 8017e88:	bf16      	itet	ne
 8017e8a:	4619      	movne	r1, r3
 8017e8c:	4611      	moveq	r1, r2
 8017e8e:	4613      	movne	r3, r2
 8017e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e94:	9116      	str	r1, [sp, #88]	; 0x58
 8017e96:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8017e9a:	f240 8387 	bls.w	80185ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017e9e:	ed94 7a07 	vldr	s14, [r4, #28]
 8017ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017eaa:	f240 837f 	bls.w	80185ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017eae:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8017eb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017eba:	f240 8377 	bls.w	80185ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017ebe:	6822      	ldr	r2, [r4, #0]
 8017ec0:	4bb1      	ldr	r3, [pc, #708]	; (8018188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8017ec2:	429a      	cmp	r2, r3
 8017ec4:	f2c0 8372 	blt.w	80185ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017ec8:	49b0      	ldr	r1, [pc, #704]	; (801818c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8017eca:	6963      	ldr	r3, [r4, #20]
 8017ecc:	428a      	cmp	r2, r1
 8017ece:	f300 836d 	bgt.w	80185ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017ed2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017ed6:	48ae      	ldr	r0, [pc, #696]	; (8018190 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8017ed8:	33ff      	adds	r3, #255	; 0xff
 8017eda:	4283      	cmp	r3, r0
 8017edc:	f200 8366 	bhi.w	80185ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017ee0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017ee2:	4dac      	ldr	r5, [pc, #688]	; (8018194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8017ee4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017ee8:	33ff      	adds	r3, #255	; 0xff
 8017eea:	42ab      	cmp	r3, r5
 8017eec:	f200 835e 	bhi.w	80185ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017ef0:	6862      	ldr	r2, [r4, #4]
 8017ef2:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8017ef6:	33ff      	adds	r3, #255	; 0xff
 8017ef8:	4283      	cmp	r3, r0
 8017efa:	f200 8357 	bhi.w	80185ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017efe:	69a1      	ldr	r1, [r4, #24]
 8017f00:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8017f04:	33ff      	adds	r3, #255	; 0xff
 8017f06:	4283      	cmp	r3, r0
 8017f08:	f200 8350 	bhi.w	80185ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017f0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017f0e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8017f12:	30ff      	adds	r0, #255	; 0xff
 8017f14:	42a8      	cmp	r0, r5
 8017f16:	f200 8349 	bhi.w	80185ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017f1a:	428a      	cmp	r2, r1
 8017f1c:	f280 8110 	bge.w	8018140 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8017f20:	429a      	cmp	r2, r3
 8017f22:	f300 8119 	bgt.w	8018158 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8017f26:	4299      	cmp	r1, r3
 8017f28:	f280 811d 	bge.w	8018166 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8017f2c:	2502      	movs	r5, #2
 8017f2e:	2701      	movs	r7, #1
 8017f30:	46a9      	mov	r9, r5
 8017f32:	46b8      	mov	r8, r7
 8017f34:	f04f 0a00 	mov.w	sl, #0
 8017f38:	4621      	mov	r1, r4
 8017f3a:	a849      	add	r0, sp, #292	; 0x124
 8017f3c:	f002 ffc0 	bl	801aec0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8017f40:	4622      	mov	r2, r4
 8017f42:	4653      	mov	r3, sl
 8017f44:	a949      	add	r1, sp, #292	; 0x124
 8017f46:	f8cd 9000 	str.w	r9, [sp]
 8017f4a:	a819      	add	r0, sp, #100	; 0x64
 8017f4c:	f003 f8ea 	bl	801b124 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017f50:	4622      	mov	r2, r4
 8017f52:	4653      	mov	r3, sl
 8017f54:	a949      	add	r1, sp, #292	; 0x124
 8017f56:	f8cd 8000 	str.w	r8, [sp]
 8017f5a:	a829      	add	r0, sp, #164	; 0xa4
 8017f5c:	f003 f8e2 	bl	801b124 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017f60:	4643      	mov	r3, r8
 8017f62:	4622      	mov	r2, r4
 8017f64:	a949      	add	r1, sp, #292	; 0x124
 8017f66:	f8cd 9000 	str.w	r9, [sp]
 8017f6a:	a839      	add	r0, sp, #228	; 0xe4
 8017f6c:	f003 f8da 	bl	801b124 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017f70:	42af      	cmp	r7, r5
 8017f72:	bfb5      	itete	lt
 8017f74:	2300      	movlt	r3, #0
 8017f76:	2301      	movge	r3, #1
 8017f78:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017f7a:	930e      	strge	r3, [sp, #56]	; 0x38
 8017f7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f7e:	af12      	add	r7, sp, #72	; 0x48
 8017f80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017f84:	bfb9      	ittee	lt
 8017f86:	ad29      	addlt	r5, sp, #164	; 0xa4
 8017f88:	ac19      	addlt	r4, sp, #100	; 0x64
 8017f8a:	ad19      	addge	r5, sp, #100	; 0x64
 8017f8c:	ac29      	addge	r4, sp, #164	; 0xa4
 8017f8e:	e887 0003 	stmia.w	r7, {r0, r1}
 8017f92:	b928      	cbnz	r0, 8017fa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8017f94:	4b80      	ldr	r3, [pc, #512]	; (8018198 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8017f96:	6818      	ldr	r0, [r3, #0]
 8017f98:	6803      	ldr	r3, [r0, #0]
 8017f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f9c:	4798      	blx	r3
 8017f9e:	6038      	str	r0, [r7, #0]
 8017fa0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017fa2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017fa6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017faa:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017fac:	930c      	str	r3, [sp, #48]	; 0x30
 8017fae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017fb0:	6963      	ldr	r3, [r4, #20]
 8017fb2:	440b      	add	r3, r1
 8017fb4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017fb8:	4408      	add	r0, r1
 8017fba:	b200      	sxth	r0, r0
 8017fbc:	4283      	cmp	r3, r0
 8017fbe:	900d      	str	r0, [sp, #52]	; 0x34
 8017fc0:	f280 80dd 	bge.w	801817e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8017fc4:	428b      	cmp	r3, r1
 8017fc6:	da08      	bge.n	8017fda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017fc8:	2a00      	cmp	r2, #0
 8017fca:	dd06      	ble.n	8017fda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017fcc:	1acb      	subs	r3, r1, r3
 8017fce:	429a      	cmp	r2, r3
 8017fd0:	f2c0 80e4 	blt.w	801819c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	f300 80e2 	bgt.w	801819e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8017fda:	6967      	ldr	r7, [r4, #20]
 8017fdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017fde:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8017fe2:	443b      	add	r3, r7
 8017fe4:	461f      	mov	r7, r3
 8017fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017fe8:	1bdf      	subs	r7, r3, r7
 8017fea:	4297      	cmp	r7, r2
 8017fec:	bfa8      	it	ge
 8017fee:	4617      	movge	r7, r2
 8017ff0:	2f00      	cmp	r7, #0
 8017ff2:	f340 8166 	ble.w	80182c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8017ff6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017ff8:	6829      	ldr	r1, [r5, #0]
 8017ffa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ffe:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018002:	4411      	add	r1, r2
 8018004:	4299      	cmp	r1, r3
 8018006:	6820      	ldr	r0, [r4, #0]
 8018008:	dd1a      	ble.n	8018040 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801800a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801800e:	4402      	add	r2, r0
 8018010:	440b      	add	r3, r1
 8018012:	b21b      	sxth	r3, r3
 8018014:	429a      	cmp	r2, r3
 8018016:	dc13      	bgt.n	8018040 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018018:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801801a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801801c:	a912      	add	r1, sp, #72	; 0x48
 801801e:	681b      	ldr	r3, [r3, #0]
 8018020:	9206      	str	r2, [sp, #24]
 8018022:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018024:	9500      	str	r5, [sp, #0]
 8018026:	9205      	str	r2, [sp, #20]
 8018028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801802a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801802c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018030:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8018032:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018036:	aa49      	add	r2, sp, #292	; 0x124
 8018038:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801803c:	4623      	mov	r3, r4
 801803e:	47c8      	blx	r9
 8018040:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018044:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8018048:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801804c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018054:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8018058:	ed94 6a08 	vldr	s12, [r4, #32]
 801805c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018060:	edd4 6a07 	vldr	s13, [r4, #28]
 8018064:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018068:	441a      	add	r2, r3
 801806a:	6963      	ldr	r3, [r4, #20]
 801806c:	68a1      	ldr	r1, [r4, #8]
 801806e:	3301      	adds	r3, #1
 8018070:	6163      	str	r3, [r4, #20]
 8018072:	69a3      	ldr	r3, [r4, #24]
 8018074:	6022      	str	r2, [r4, #0]
 8018076:	3b01      	subs	r3, #1
 8018078:	61a3      	str	r3, [r4, #24]
 801807a:	6923      	ldr	r3, [r4, #16]
 801807c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018080:	440b      	add	r3, r1
 8018082:	68e1      	ldr	r1, [r4, #12]
 8018084:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018088:	428b      	cmp	r3, r1
 801808a:	edc4 6a07 	vstr	s13, [r4, #28]
 801808e:	6123      	str	r3, [r4, #16]
 8018090:	db15      	blt.n	80180be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8018092:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8018096:	ee76 6a26 	vadd.f32	s13, s12, s13
 801809a:	edc4 6a07 	vstr	s13, [r4, #28]
 801809e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80180a2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80180a6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80180aa:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80180ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80180b2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80180b6:	3201      	adds	r2, #1
 80180b8:	1a5b      	subs	r3, r3, r1
 80180ba:	6022      	str	r2, [r4, #0]
 80180bc:	6123      	str	r3, [r4, #16]
 80180be:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80180c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80180c6:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80180ca:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80180ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80180d2:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80180d6:	ed95 6a08 	vldr	s12, [r5, #32]
 80180da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80180de:	edd5 6a07 	vldr	s13, [r5, #28]
 80180e2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80180e6:	441a      	add	r2, r3
 80180e8:	696b      	ldr	r3, [r5, #20]
 80180ea:	68a9      	ldr	r1, [r5, #8]
 80180ec:	3301      	adds	r3, #1
 80180ee:	616b      	str	r3, [r5, #20]
 80180f0:	69ab      	ldr	r3, [r5, #24]
 80180f2:	602a      	str	r2, [r5, #0]
 80180f4:	3b01      	subs	r3, #1
 80180f6:	61ab      	str	r3, [r5, #24]
 80180f8:	692b      	ldr	r3, [r5, #16]
 80180fa:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80180fe:	440b      	add	r3, r1
 8018100:	68e9      	ldr	r1, [r5, #12]
 8018102:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018106:	428b      	cmp	r3, r1
 8018108:	edc5 6a07 	vstr	s13, [r5, #28]
 801810c:	612b      	str	r3, [r5, #16]
 801810e:	db15      	blt.n	801813c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8018110:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8018114:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018118:	edc5 6a07 	vstr	s13, [r5, #28]
 801811c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8018120:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018124:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018128:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801812c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018130:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018134:	3201      	adds	r2, #1
 8018136:	1a5b      	subs	r3, r3, r1
 8018138:	602a      	str	r2, [r5, #0]
 801813a:	612b      	str	r3, [r5, #16]
 801813c:	3f01      	subs	r7, #1
 801813e:	e757      	b.n	8017ff0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8018140:	4299      	cmp	r1, r3
 8018142:	dc13      	bgt.n	801816c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8018144:	429a      	cmp	r2, r3
 8018146:	da14      	bge.n	8018172 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8018148:	2502      	movs	r5, #2
 801814a:	2703      	movs	r7, #3
 801814c:	46a9      	mov	r9, r5
 801814e:	f04f 0800 	mov.w	r8, #0
 8018152:	f04f 0a01 	mov.w	sl, #1
 8018156:	e6ef      	b.n	8017f38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018158:	2501      	movs	r5, #1
 801815a:	2700      	movs	r7, #0
 801815c:	46a9      	mov	r9, r5
 801815e:	46b8      	mov	r8, r7
 8018160:	f04f 0a02 	mov.w	sl, #2
 8018164:	e6e8      	b.n	8017f38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018166:	2501      	movs	r5, #1
 8018168:	2702      	movs	r7, #2
 801816a:	e6e1      	b.n	8017f30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801816c:	2500      	movs	r5, #0
 801816e:	2701      	movs	r7, #1
 8018170:	e7f4      	b.n	801815c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8018172:	2702      	movs	r7, #2
 8018174:	2503      	movs	r5, #3
 8018176:	f04f 0900 	mov.w	r9, #0
 801817a:	46b8      	mov	r8, r7
 801817c:	e7e9      	b.n	8018152 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801817e:	4613      	mov	r3, r2
 8018180:	e728      	b.n	8017fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8018182:	bf00      	nop
 8018184:	20197a38 	.word	0x20197a38
 8018188:	fffd8f01 	.word	0xfffd8f01
 801818c:	00027100 	.word	0x00027100
 8018190:	0004e1ff 	.word	0x0004e1ff
 8018194:	0004e1fe 	.word	0x0004e1fe
 8018198:	20197a40 	.word	0x20197a40
 801819c:	4613      	mov	r3, r2
 801819e:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 80181a2:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80181a6:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80181aa:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 80181ae:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 80181b2:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80181b6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80181ba:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 80181be:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 80181c2:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 80181c6:	469e      	mov	lr, r3
 80181c8:	469c      	mov	ip, r3
 80181ca:	f04f 0900 	mov.w	r9, #0
 80181ce:	992b      	ldr	r1, [sp, #172]	; 0xac
 80181d0:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80181d2:	9111      	str	r1, [sp, #68]	; 0x44
 80181d4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80181d8:	f1bc 0f00 	cmp.w	ip, #0
 80181dc:	d147      	bne.n	801826e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80181de:	eb03 0c07 	add.w	ip, r3, r7
 80181e2:	1ad7      	subs	r7, r2, r3
 80181e4:	f1b9 0f00 	cmp.w	r9, #0
 80181e8:	d009      	beq.n	80181fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80181ea:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80181ee:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80181f2:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80181f6:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80181fa:	9029      	str	r0, [sp, #164]	; 0xa4
 80181fc:	912d      	str	r1, [sp, #180]	; 0xb4
 80181fe:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018202:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018206:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801820a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801820e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018212:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8018216:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801821a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801821e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8018222:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8018226:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801822a:	f04f 0800 	mov.w	r8, #0
 801822e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018230:	9111      	str	r1, [sp, #68]	; 0x44
 8018232:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8018236:	f1be 0f00 	cmp.w	lr, #0
 801823a:	d031      	beq.n	80182a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801823c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801823e:	4450      	add	r0, sl
 8018240:	4431      	add	r1, r6
 8018242:	4549      	cmp	r1, r9
 8018244:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018248:	ee37 7a04 	vadd.f32	s14, s14, s8
 801824c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018250:	db08      	blt.n	8018264 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8018252:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018256:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801825a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801825e:	3001      	adds	r0, #1
 8018260:	eba1 0109 	sub.w	r1, r1, r9
 8018264:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018268:	f04f 0801 	mov.w	r8, #1
 801826c:	e7e3      	b.n	8018236 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801826e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018270:	4450      	add	r0, sl
 8018272:	4431      	add	r1, r6
 8018274:	4541      	cmp	r1, r8
 8018276:	ee37 7a24 	vadd.f32	s14, s14, s9
 801827a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801827e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018282:	db08      	blt.n	8018296 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8018284:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018288:	ee37 7a25 	vadd.f32	s14, s14, s11
 801828c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018290:	3001      	adds	r0, #1
 8018292:	eba1 0108 	sub.w	r1, r1, r8
 8018296:	f10c 3cff 	add.w	ip, ip, #4294967295
 801829a:	f04f 0901 	mov.w	r9, #1
 801829e:	e79b      	b.n	80181d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80182a0:	449c      	add	ip, r3
 80182a2:	1aff      	subs	r7, r7, r3
 80182a4:	f1b8 0f00 	cmp.w	r8, #0
 80182a8:	d009      	beq.n	80182be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80182aa:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80182ae:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80182b2:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80182b6:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80182ba:	9019      	str	r0, [sp, #100]	; 0x64
 80182bc:	911d      	str	r1, [sp, #116]	; 0x74
 80182be:	1ad2      	subs	r2, r2, r3
 80182c0:	e68b      	b.n	8017fda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80182c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80182c4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	f000 80d1 	beq.w	801846e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80182cc:	ad19      	add	r5, sp, #100	; 0x64
 80182ce:	ac39      	add	r4, sp, #228	; 0xe4
 80182d0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80182d2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80182d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80182da:	930c      	str	r3, [sp, #48]	; 0x30
 80182dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80182de:	6963      	ldr	r3, [r4, #20]
 80182e0:	440b      	add	r3, r1
 80182e2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80182e6:	4408      	add	r0, r1
 80182e8:	b200      	sxth	r0, r0
 80182ea:	4283      	cmp	r3, r0
 80182ec:	900d      	str	r0, [sp, #52]	; 0x34
 80182ee:	f280 80c1 	bge.w	8018474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80182f2:	428b      	cmp	r3, r1
 80182f4:	da08      	bge.n	8018308 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80182f6:	2a00      	cmp	r2, #0
 80182f8:	dd06      	ble.n	8018308 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80182fa:	1acb      	subs	r3, r1, r3
 80182fc:	429a      	cmp	r2, r3
 80182fe:	f2c0 80bb 	blt.w	8018478 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8018302:	2b00      	cmp	r3, #0
 8018304:	f300 80b9 	bgt.w	801847a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018308:	6967      	ldr	r7, [r4, #20]
 801830a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801830c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018310:	443b      	add	r3, r7
 8018312:	461f      	mov	r7, r3
 8018314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018316:	1bdf      	subs	r7, r3, r7
 8018318:	4297      	cmp	r7, r2
 801831a:	bfa8      	it	ge
 801831c:	4617      	movge	r7, r2
 801831e:	2f00      	cmp	r7, #0
 8018320:	f340 813c 	ble.w	801859c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8018324:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018326:	6829      	ldr	r1, [r5, #0]
 8018328:	f9b3 2000 	ldrsh.w	r2, [r3]
 801832c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018330:	4411      	add	r1, r2
 8018332:	4299      	cmp	r1, r3
 8018334:	6820      	ldr	r0, [r4, #0]
 8018336:	dd1a      	ble.n	801836e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018338:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801833c:	4402      	add	r2, r0
 801833e:	440b      	add	r3, r1
 8018340:	b21b      	sxth	r3, r3
 8018342:	429a      	cmp	r2, r3
 8018344:	dc13      	bgt.n	801836e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018346:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801834a:	a912      	add	r1, sp, #72	; 0x48
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	9206      	str	r2, [sp, #24]
 8018350:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018352:	9500      	str	r5, [sp, #0]
 8018354:	9205      	str	r2, [sp, #20]
 8018356:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018358:	9809      	ldr	r0, [sp, #36]	; 0x24
 801835a:	e9cd b203 	strd	fp, r2, [sp, #12]
 801835e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8018360:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018364:	aa49      	add	r2, sp, #292	; 0x124
 8018366:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801836a:	4623      	mov	r3, r4
 801836c:	47c8      	blx	r9
 801836e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018372:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8018376:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801837a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801837e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018382:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8018386:	ed94 6a08 	vldr	s12, [r4, #32]
 801838a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801838e:	edd4 6a07 	vldr	s13, [r4, #28]
 8018392:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018396:	441a      	add	r2, r3
 8018398:	6963      	ldr	r3, [r4, #20]
 801839a:	68a1      	ldr	r1, [r4, #8]
 801839c:	3301      	adds	r3, #1
 801839e:	6163      	str	r3, [r4, #20]
 80183a0:	69a3      	ldr	r3, [r4, #24]
 80183a2:	6022      	str	r2, [r4, #0]
 80183a4:	3b01      	subs	r3, #1
 80183a6:	61a3      	str	r3, [r4, #24]
 80183a8:	6923      	ldr	r3, [r4, #16]
 80183aa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80183ae:	440b      	add	r3, r1
 80183b0:	68e1      	ldr	r1, [r4, #12]
 80183b2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80183b6:	428b      	cmp	r3, r1
 80183b8:	edc4 6a07 	vstr	s13, [r4, #28]
 80183bc:	6123      	str	r3, [r4, #16]
 80183be:	db15      	blt.n	80183ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80183c0:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80183c4:	ee76 6a26 	vadd.f32	s13, s12, s13
 80183c8:	edc4 6a07 	vstr	s13, [r4, #28]
 80183cc:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80183d0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80183d4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80183d8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80183dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80183e0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80183e4:	3201      	adds	r2, #1
 80183e6:	1a5b      	subs	r3, r3, r1
 80183e8:	6022      	str	r2, [r4, #0]
 80183ea:	6123      	str	r3, [r4, #16]
 80183ec:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80183f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80183f4:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80183f8:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80183fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018400:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018404:	ed95 6a08 	vldr	s12, [r5, #32]
 8018408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801840c:	edd5 6a07 	vldr	s13, [r5, #28]
 8018410:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018414:	441a      	add	r2, r3
 8018416:	696b      	ldr	r3, [r5, #20]
 8018418:	68a9      	ldr	r1, [r5, #8]
 801841a:	3301      	adds	r3, #1
 801841c:	616b      	str	r3, [r5, #20]
 801841e:	69ab      	ldr	r3, [r5, #24]
 8018420:	602a      	str	r2, [r5, #0]
 8018422:	3b01      	subs	r3, #1
 8018424:	61ab      	str	r3, [r5, #24]
 8018426:	692b      	ldr	r3, [r5, #16]
 8018428:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801842c:	440b      	add	r3, r1
 801842e:	68e9      	ldr	r1, [r5, #12]
 8018430:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018434:	428b      	cmp	r3, r1
 8018436:	edc5 6a07 	vstr	s13, [r5, #28]
 801843a:	612b      	str	r3, [r5, #16]
 801843c:	db15      	blt.n	801846a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801843e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8018442:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018446:	edc5 6a07 	vstr	s13, [r5, #28]
 801844a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801844e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018452:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018456:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801845a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801845e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018462:	3201      	adds	r2, #1
 8018464:	1a5b      	subs	r3, r3, r1
 8018466:	602a      	str	r2, [r5, #0]
 8018468:	612b      	str	r3, [r5, #16]
 801846a:	3f01      	subs	r7, #1
 801846c:	e757      	b.n	801831e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801846e:	ad39      	add	r5, sp, #228	; 0xe4
 8018470:	ac19      	add	r4, sp, #100	; 0x64
 8018472:	e72d      	b.n	80182d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8018474:	4613      	mov	r3, r2
 8018476:	e744      	b.n	8018302 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8018478:	4613      	mov	r3, r2
 801847a:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801847e:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8018482:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8018486:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801848a:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801848e:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8018492:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8018496:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801849a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801849e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80184a2:	469e      	mov	lr, r3
 80184a4:	461f      	mov	r7, r3
 80184a6:	f04f 0900 	mov.w	r9, #0
 80184aa:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80184ac:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80184b0:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80184b2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80184b6:	960e      	str	r6, [sp, #56]	; 0x38
 80184b8:	2f00      	cmp	r7, #0
 80184ba:	d146      	bne.n	801854a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80184bc:	449c      	add	ip, r3
 80184be:	1ad7      	subs	r7, r2, r3
 80184c0:	f1b9 0f00 	cmp.w	r9, #0
 80184c4:	d009      	beq.n	80184da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80184c6:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80184ca:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80184ce:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80184d2:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80184d6:	9039      	str	r0, [sp, #228]	; 0xe4
 80184d8:	913d      	str	r1, [sp, #244]	; 0xf4
 80184da:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80184de:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80184e2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80184e6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80184ea:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80184ee:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80184f2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80184f6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80184fa:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80184fe:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8018502:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8018506:	f04f 0800 	mov.w	r8, #0
 801850a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801850c:	910e      	str	r1, [sp, #56]	; 0x38
 801850e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8018512:	f1be 0f00 	cmp.w	lr, #0
 8018516:	d030      	beq.n	801857a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8018518:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801851a:	4450      	add	r0, sl
 801851c:	4431      	add	r1, r6
 801851e:	4549      	cmp	r1, r9
 8018520:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018524:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018528:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801852c:	db08      	blt.n	8018540 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801852e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018532:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018536:	ee37 7a06 	vadd.f32	s14, s14, s12
 801853a:	3001      	adds	r0, #1
 801853c:	eba1 0109 	sub.w	r1, r1, r9
 8018540:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018544:	f04f 0801 	mov.w	r8, #1
 8018548:	e7e3      	b.n	8018512 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801854a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801854c:	4450      	add	r0, sl
 801854e:	4431      	add	r1, r6
 8018550:	4541      	cmp	r1, r8
 8018552:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018556:	ee77 7a84 	vadd.f32	s15, s15, s8
 801855a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801855e:	db08      	blt.n	8018572 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8018560:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018564:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018568:	ee77 7a86 	vadd.f32	s15, s15, s12
 801856c:	3001      	adds	r0, #1
 801856e:	eba1 0108 	sub.w	r1, r1, r8
 8018572:	3f01      	subs	r7, #1
 8018574:	f04f 0901 	mov.w	r9, #1
 8018578:	e79e      	b.n	80184b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801857a:	449c      	add	ip, r3
 801857c:	1aff      	subs	r7, r7, r3
 801857e:	f1b8 0f00 	cmp.w	r8, #0
 8018582:	d009      	beq.n	8018598 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8018584:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018588:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801858c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018590:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018594:	9019      	str	r0, [sp, #100]	; 0x64
 8018596:	911d      	str	r1, [sp, #116]	; 0x74
 8018598:	1ad2      	subs	r2, r2, r3
 801859a:	e6b5      	b.n	8018308 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801859c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	b923      	cbnz	r3, 80185ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80185a2:	4b04      	ldr	r3, [pc, #16]	; (80185b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80185a4:	6818      	ldr	r0, [r3, #0]
 80185a6:	6803      	ldr	r3, [r0, #0]
 80185a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185aa:	4798      	blx	r3
 80185ac:	b05b      	add	sp, #364	; 0x16c
 80185ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185b2:	bf00      	nop
 80185b4:	20197a40 	.word	0x20197a40

080185b8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80185b8:	2b03      	cmp	r3, #3
 80185ba:	d818      	bhi.n	80185ee <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80185bc:	e8df f003 	tbb	[pc, r3]
 80185c0:	130d0602 	.word	0x130d0602
 80185c4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80185c8:	1850      	adds	r0, r2, r1
 80185ca:	4770      	bx	lr
 80185cc:	8803      	ldrh	r3, [r0, #0]
 80185ce:	8880      	ldrh	r0, [r0, #4]
 80185d0:	4418      	add	r0, r3
 80185d2:	b200      	sxth	r0, r0
 80185d4:	1a80      	subs	r0, r0, r2
 80185d6:	3801      	subs	r0, #1
 80185d8:	4770      	bx	lr
 80185da:	8803      	ldrh	r3, [r0, #0]
 80185dc:	8880      	ldrh	r0, [r0, #4]
 80185de:	4418      	add	r0, r3
 80185e0:	b200      	sxth	r0, r0
 80185e2:	1a40      	subs	r0, r0, r1
 80185e4:	e7f7      	b.n	80185d6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80185e6:	f9b0 0000 	ldrsh.w	r0, [r0]
 80185ea:	4410      	add	r0, r2
 80185ec:	4770      	bx	lr
 80185ee:	2000      	movs	r0, #0
 80185f0:	4770      	bx	lr

080185f2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80185f2:	2b03      	cmp	r3, #3
 80185f4:	d817      	bhi.n	8018626 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80185f6:	e8df f003 	tbb	[pc, r3]
 80185fa:	0602      	.short	0x0602
 80185fc:	1009      	.short	0x1009
 80185fe:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8018602:	1850      	adds	r0, r2, r1
 8018604:	4770      	bx	lr
 8018606:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801860a:	e7fa      	b.n	8018602 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801860c:	8843      	ldrh	r3, [r0, #2]
 801860e:	88c0      	ldrh	r0, [r0, #6]
 8018610:	4418      	add	r0, r3
 8018612:	b200      	sxth	r0, r0
 8018614:	1a80      	subs	r0, r0, r2
 8018616:	3801      	subs	r0, #1
 8018618:	4770      	bx	lr
 801861a:	8843      	ldrh	r3, [r0, #2]
 801861c:	88c0      	ldrh	r0, [r0, #6]
 801861e:	4418      	add	r0, r3
 8018620:	b200      	sxth	r0, r0
 8018622:	1a40      	subs	r0, r0, r1
 8018624:	e7f7      	b.n	8018616 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8018626:	2000      	movs	r0, #0
 8018628:	4770      	bx	lr
	...

0801862c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801862c:	2200      	movs	r2, #0
 801862e:	4b01      	ldr	r3, [pc, #4]	; (8018634 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8018630:	601a      	str	r2, [r3, #0]
 8018632:	4770      	bx	lr
 8018634:	20197a48 	.word	0x20197a48

08018638 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8018638:	4603      	mov	r3, r0
 801863a:	b1c8      	cbz	r0, 8018670 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801863c:	0c02      	lsrs	r2, r0, #16
 801863e:	0412      	lsls	r2, r2, #16
 8018640:	b9a2      	cbnz	r2, 801866c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8018642:	0403      	lsls	r3, r0, #16
 8018644:	2010      	movs	r0, #16
 8018646:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801864a:	bf04      	itt	eq
 801864c:	021b      	lsleq	r3, r3, #8
 801864e:	3008      	addeq	r0, #8
 8018650:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018654:	bf04      	itt	eq
 8018656:	011b      	lsleq	r3, r3, #4
 8018658:	3004      	addeq	r0, #4
 801865a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801865e:	bf04      	itt	eq
 8018660:	009b      	lsleq	r3, r3, #2
 8018662:	3002      	addeq	r0, #2
 8018664:	2b00      	cmp	r3, #0
 8018666:	db04      	blt.n	8018672 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8018668:	3001      	adds	r0, #1
 801866a:	4770      	bx	lr
 801866c:	2000      	movs	r0, #0
 801866e:	e7ea      	b.n	8018646 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8018670:	2020      	movs	r0, #32
 8018672:	4770      	bx	lr

08018674 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8018674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018678:	b087      	sub	sp, #28
 801867a:	4681      	mov	r9, r0
 801867c:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8018680:	4610      	mov	r0, r2
 8018682:	4698      	mov	r8, r3
 8018684:	460d      	mov	r5, r1
 8018686:	b981      	cbnz	r1, 80186aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8018688:	b14b      	cbz	r3, 801869e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801868a:	460b      	mov	r3, r1
 801868c:	e9cd 4700 	strd	r4, r7, [sp]
 8018690:	464a      	mov	r2, r9
 8018692:	4641      	mov	r1, r8
 8018694:	f7ff ffee 	bl	8018674 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018698:	b007      	add	sp, #28
 801869a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801869e:	f04f 33ff 	mov.w	r3, #4294967295
 80186a2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80186a6:	603b      	str	r3, [r7, #0]
 80186a8:	e7f6      	b.n	8018698 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80186aa:	fa32 fa01 	lsrs.w	sl, r2, r1
 80186ae:	d107      	bne.n	80186c0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 80186b0:	fb09 f602 	mul.w	r6, r9, r2
 80186b4:	fbb6 f0f4 	udiv	r0, r6, r4
 80186b8:	fb04 6610 	mls	r6, r4, r0, r6
 80186bc:	603e      	str	r6, [r7, #0]
 80186be:	e7eb      	b.n	8018698 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80186c0:	fa09 fb01 	lsl.w	fp, r9, r1
 80186c4:	fbbb f3f4 	udiv	r3, fp, r4
 80186c8:	2601      	movs	r6, #1
 80186ca:	9302      	str	r3, [sp, #8]
 80186cc:	408e      	lsls	r6, r1
 80186ce:	fb0a f303 	mul.w	r3, sl, r3
 80186d2:	3e01      	subs	r6, #1
 80186d4:	4016      	ands	r6, r2
 80186d6:	4630      	mov	r0, r6
 80186d8:	9303      	str	r3, [sp, #12]
 80186da:	f7ff ffad 	bl	8018638 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80186de:	464a      	mov	r2, r9
 80186e0:	460b      	mov	r3, r1
 80186e2:	e9cd 4700 	strd	r4, r7, [sp]
 80186e6:	4601      	mov	r1, r0
 80186e8:	4630      	mov	r0, r6
 80186ea:	f7ff ffc3 	bl	8018674 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80186ee:	9b02      	ldr	r3, [sp, #8]
 80186f0:	4606      	mov	r6, r0
 80186f2:	fb04 bb13 	mls	fp, r4, r3, fp
 80186f6:	4658      	mov	r0, fp
 80186f8:	eb05 0108 	add.w	r1, r5, r8
 80186fc:	f7ff ff9c 	bl	8018638 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018700:	ab05      	add	r3, sp, #20
 8018702:	e9cd 4300 	strd	r4, r3, [sp]
 8018706:	465a      	mov	r2, fp
 8018708:	4603      	mov	r3, r0
 801870a:	4650      	mov	r0, sl
 801870c:	f7ff ffb2 	bl	8018674 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018710:	6839      	ldr	r1, [r7, #0]
 8018712:	9a05      	ldr	r2, [sp, #20]
 8018714:	9b03      	ldr	r3, [sp, #12]
 8018716:	4411      	add	r1, r2
 8018718:	fbb1 f2f4 	udiv	r2, r1, r4
 801871c:	fb04 1412 	mls	r4, r4, r2, r1
 8018720:	18d3      	adds	r3, r2, r3
 8018722:	441e      	add	r6, r3
 8018724:	4430      	add	r0, r6
 8018726:	603c      	str	r4, [r7, #0]
 8018728:	e7b6      	b.n	8018698 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801872a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801872a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801872e:	b085      	sub	sp, #20
 8018730:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018732:	f1b0 0900 	subs.w	r9, r0, #0
 8018736:	461d      	mov	r5, r3
 8018738:	bfbf      	itttt	lt
 801873a:	6823      	ldrlt	r3, [r4, #0]
 801873c:	f1c9 0900 	rsblt	r9, r9, #0
 8018740:	425b      	neglt	r3, r3
 8018742:	6023      	strlt	r3, [r4, #0]
 8018744:	bfb4      	ite	lt
 8018746:	f04f 36ff 	movlt.w	r6, #4294967295
 801874a:	2601      	movge	r6, #1
 801874c:	2a00      	cmp	r2, #0
 801874e:	4617      	mov	r7, r2
 8018750:	da04      	bge.n	801875c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8018752:	6823      	ldr	r3, [r4, #0]
 8018754:	4257      	negs	r7, r2
 8018756:	425b      	negs	r3, r3
 8018758:	4276      	negs	r6, r6
 801875a:	6023      	str	r3, [r4, #0]
 801875c:	2d00      	cmp	r5, #0
 801875e:	4638      	mov	r0, r7
 8018760:	bfba      	itte	lt
 8018762:	426d      	neglt	r5, r5
 8018764:	f04f 38ff 	movlt.w	r8, #4294967295
 8018768:	f04f 0801 	movge.w	r8, #1
 801876c:	f7ff ff64 	bl	8018638 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018770:	ab03      	add	r3, sp, #12
 8018772:	e9cd 5300 	strd	r5, r3, [sp]
 8018776:	463a      	mov	r2, r7
 8018778:	4603      	mov	r3, r0
 801877a:	4648      	mov	r0, r9
 801877c:	f7ff ff7a 	bl	8018674 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018780:	6823      	ldr	r3, [r4, #0]
 8018782:	9a03      	ldr	r2, [sp, #12]
 8018784:	4546      	cmp	r6, r8
 8018786:	441a      	add	r2, r3
 8018788:	fb92 f3f5 	sdiv	r3, r2, r5
 801878c:	4418      	add	r0, r3
 801878e:	fb05 2313 	mls	r3, r5, r3, r2
 8018792:	bf18      	it	ne
 8018794:	4240      	negne	r0, r0
 8018796:	1c72      	adds	r2, r6, #1
 8018798:	6023      	str	r3, [r4, #0]
 801879a:	d105      	bne.n	80187a8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801879c:	2b00      	cmp	r3, #0
 801879e:	f1c3 0200 	rsb	r2, r3, #0
 80187a2:	db0b      	blt.n	80187bc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80187a4:	6022      	str	r2, [r4, #0]
 80187a6:	e006      	b.n	80187b6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80187a8:	2e01      	cmp	r6, #1
 80187aa:	d104      	bne.n	80187b6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	da02      	bge.n	80187b6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80187b0:	442b      	add	r3, r5
 80187b2:	3801      	subs	r0, #1
 80187b4:	6023      	str	r3, [r4, #0]
 80187b6:	b005      	add	sp, #20
 80187b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187bc:	3801      	subs	r0, #1
 80187be:	1b52      	subs	r2, r2, r5
 80187c0:	e7f0      	b.n	80187a4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080187c4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80187c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80187c8:	4c1c      	ldr	r4, [pc, #112]	; (801883c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80187ca:	4605      	mov	r5, r0
 80187cc:	69a3      	ldr	r3, [r4, #24]
 80187ce:	6807      	ldr	r7, [r0, #0]
 80187d0:	b92b      	cbnz	r3, 80187de <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80187d2:	6840      	ldr	r0, [r0, #4]
 80187d4:	e9c5 7000 	strd	r7, r0, [r5]
 80187d8:	b004      	add	sp, #16
 80187da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187de:	f04f 0802 	mov.w	r8, #2
 80187e2:	fb93 f1f8 	sdiv	r1, r3, r8
 80187e6:	68a2      	ldr	r2, [r4, #8]
 80187e8:	ae04      	add	r6, sp, #16
 80187ea:	440a      	add	r2, r1
 80187ec:	f846 2d04 	str.w	r2, [r6, #-4]!
 80187f0:	69e1      	ldr	r1, [r4, #28]
 80187f2:	463a      	mov	r2, r7
 80187f4:	9600      	str	r6, [sp, #0]
 80187f6:	6820      	ldr	r0, [r4, #0]
 80187f8:	f7ff ff97 	bl	801872a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80187fc:	69a3      	ldr	r3, [r4, #24]
 80187fe:	4607      	mov	r7, r0
 8018800:	686a      	ldr	r2, [r5, #4]
 8018802:	6a21      	ldr	r1, [r4, #32]
 8018804:	9600      	str	r6, [sp, #0]
 8018806:	6860      	ldr	r0, [r4, #4]
 8018808:	f7ff ff8f 	bl	801872a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801880c:	69a3      	ldr	r3, [r4, #24]
 801880e:	6962      	ldr	r2, [r4, #20]
 8018810:	fb93 f8f8 	sdiv	r8, r3, r8
 8018814:	4442      	add	r2, r8
 8018816:	9203      	str	r2, [sp, #12]
 8018818:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801881a:	682a      	ldr	r2, [r5, #0]
 801881c:	4407      	add	r7, r0
 801881e:	9600      	str	r6, [sp, #0]
 8018820:	68e0      	ldr	r0, [r4, #12]
 8018822:	f7ff ff82 	bl	801872a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018826:	9600      	str	r6, [sp, #0]
 8018828:	4680      	mov	r8, r0
 801882a:	69a3      	ldr	r3, [r4, #24]
 801882c:	686a      	ldr	r2, [r5, #4]
 801882e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018830:	6920      	ldr	r0, [r4, #16]
 8018832:	f7ff ff7a 	bl	801872a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018836:	4440      	add	r0, r8
 8018838:	e7cc      	b.n	80187d4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801883a:	bf00      	nop
 801883c:	20197a4c 	.word	0x20197a4c

08018840 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018840:	4b07      	ldr	r3, [pc, #28]	; (8018860 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8018842:	781b      	ldrb	r3, [r3, #0]
 8018844:	2b01      	cmp	r3, #1
 8018846:	d109      	bne.n	801885c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8018848:	f9b1 3000 	ldrsh.w	r3, [r1]
 801884c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018850:	8003      	strh	r3, [r0, #0]
 8018852:	4b04      	ldr	r3, [pc, #16]	; (8018864 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8018854:	881b      	ldrh	r3, [r3, #0]
 8018856:	3b01      	subs	r3, #1
 8018858:	1a9b      	subs	r3, r3, r2
 801885a:	800b      	strh	r3, [r1, #0]
 801885c:	4770      	bx	lr
 801885e:	bf00      	nop
 8018860:	20197a38 	.word	0x20197a38
 8018864:	20197a34 	.word	0x20197a34

08018868 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018868:	b510      	push	{r4, lr}
 801886a:	4b07      	ldr	r3, [pc, #28]	; (8018888 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801886c:	781b      	ldrb	r3, [r3, #0]
 801886e:	2b01      	cmp	r3, #1
 8018870:	d108      	bne.n	8018884 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8018872:	4b06      	ldr	r3, [pc, #24]	; (801888c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018874:	880c      	ldrh	r4, [r1, #0]
 8018876:	881b      	ldrh	r3, [r3, #0]
 8018878:	f9b0 2000 	ldrsh.w	r2, [r0]
 801887c:	3b01      	subs	r3, #1
 801887e:	1b1b      	subs	r3, r3, r4
 8018880:	8003      	strh	r3, [r0, #0]
 8018882:	800a      	strh	r2, [r1, #0]
 8018884:	bd10      	pop	{r4, pc}
 8018886:	bf00      	nop
 8018888:	20197a38 	.word	0x20197a38
 801888c:	20197a34 	.word	0x20197a34

08018890 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018890:	b510      	push	{r4, lr}
 8018892:	4b0a      	ldr	r3, [pc, #40]	; (80188bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8018894:	781b      	ldrb	r3, [r3, #0]
 8018896:	2b01      	cmp	r3, #1
 8018898:	d10e      	bne.n	80188b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801889a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801889e:	8843      	ldrh	r3, [r0, #2]
 80188a0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80188a4:	18ca      	adds	r2, r1, r3
 80188a6:	4b06      	ldr	r3, [pc, #24]	; (80188c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80188a8:	8044      	strh	r4, [r0, #2]
 80188aa:	881b      	ldrh	r3, [r3, #0]
 80188ac:	1a9b      	subs	r3, r3, r2
 80188ae:	8003      	strh	r3, [r0, #0]
 80188b0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80188b4:	8081      	strh	r1, [r0, #4]
 80188b6:	80c3      	strh	r3, [r0, #6]
 80188b8:	bd10      	pop	{r4, pc}
 80188ba:	bf00      	nop
 80188bc:	20197a38 	.word	0x20197a38
 80188c0:	20197a34 	.word	0x20197a34

080188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80188c4:	4b08      	ldr	r3, [pc, #32]	; (80188e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80188c6:	781b      	ldrb	r3, [r3, #0]
 80188c8:	2b01      	cmp	r3, #1
 80188ca:	d10c      	bne.n	80188e6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80188cc:	8803      	ldrh	r3, [r0, #0]
 80188ce:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80188d2:	8842      	ldrh	r2, [r0, #2]
 80188d4:	8002      	strh	r2, [r0, #0]
 80188d6:	185a      	adds	r2, r3, r1
 80188d8:	4b04      	ldr	r3, [pc, #16]	; (80188ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80188da:	881b      	ldrh	r3, [r3, #0]
 80188dc:	1a9b      	subs	r3, r3, r2
 80188de:	8043      	strh	r3, [r0, #2]
 80188e0:	88c3      	ldrh	r3, [r0, #6]
 80188e2:	80c1      	strh	r1, [r0, #6]
 80188e4:	8083      	strh	r3, [r0, #4]
 80188e6:	4770      	bx	lr
 80188e8:	20197a38 	.word	0x20197a38
 80188ec:	20197a34 	.word	0x20197a34

080188f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80188f0:	b510      	push	{r4, lr}
 80188f2:	4b07      	ldr	r3, [pc, #28]	; (8018910 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80188f4:	781b      	ldrb	r3, [r3, #0]
 80188f6:	2b01      	cmp	r3, #1
 80188f8:	d108      	bne.n	801890c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80188fa:	f9b1 3000 	ldrsh.w	r3, [r1]
 80188fe:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018902:	8003      	strh	r3, [r0, #0]
 8018904:	8893      	ldrh	r3, [r2, #4]
 8018906:	3b01      	subs	r3, #1
 8018908:	1b1b      	subs	r3, r3, r4
 801890a:	800b      	strh	r3, [r1, #0]
 801890c:	bd10      	pop	{r4, pc}
 801890e:	bf00      	nop
 8018910:	20197a38 	.word	0x20197a38

08018914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018914:	b510      	push	{r4, lr}
 8018916:	4b0a      	ldr	r3, [pc, #40]	; (8018940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8018918:	460a      	mov	r2, r1
 801891a:	781b      	ldrb	r3, [r3, #0]
 801891c:	2b01      	cmp	r3, #1
 801891e:	d10d      	bne.n	801893c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018920:	8881      	ldrh	r1, [r0, #4]
 8018922:	8803      	ldrh	r3, [r0, #0]
 8018924:	440b      	add	r3, r1
 8018926:	4601      	mov	r1, r0
 8018928:	3b01      	subs	r3, #1
 801892a:	f821 3b02 	strh.w	r3, [r1], #2
 801892e:	f7ff ffdf 	bl	80188f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018932:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018936:	88c2      	ldrh	r2, [r0, #6]
 8018938:	80c3      	strh	r3, [r0, #6]
 801893a:	8082      	strh	r2, [r0, #4]
 801893c:	bd10      	pop	{r4, pc}
 801893e:	bf00      	nop
 8018940:	20197a38 	.word	0x20197a38

08018944 <_ZN8touchgfx11Application13requestRedrawEv>:
 8018944:	2100      	movs	r1, #0
 8018946:	4b06      	ldr	r3, [pc, #24]	; (8018960 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8018948:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801894c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018950:	4b04      	ldr	r3, [pc, #16]	; (8018964 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8018952:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8018956:	f9b3 3000 	ldrsh.w	r3, [r3]
 801895a:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801895e:	4770      	bx	lr
 8018960:	20197a34 	.word	0x20197a34
 8018964:	20197a36 	.word	0x20197a36

08018968 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8018968:	4b03      	ldr	r3, [pc, #12]	; (8018978 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801896a:	6818      	ldr	r0, [r3, #0]
 801896c:	b110      	cbz	r0, 8018974 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801896e:	6803      	ldr	r3, [r0, #0]
 8018970:	699b      	ldr	r3, [r3, #24]
 8018972:	4718      	bx	r3
 8018974:	4770      	bx	lr
 8018976:	bf00      	nop
 8018978:	20197a7c 	.word	0x20197a7c

0801897c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801897c:	4770      	bx	lr
	...

08018980 <_ZN8touchgfx11Application4drawEv>:
 8018980:	b507      	push	{r0, r1, r2, lr}
 8018982:	2100      	movs	r1, #0
 8018984:	4b08      	ldr	r3, [pc, #32]	; (80189a8 <_ZN8touchgfx11Application4drawEv+0x28>)
 8018986:	9100      	str	r1, [sp, #0]
 8018988:	f9b3 2000 	ldrsh.w	r2, [r3]
 801898c:	4b07      	ldr	r3, [pc, #28]	; (80189ac <_ZN8touchgfx11Application4drawEv+0x2c>)
 801898e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018996:	4669      	mov	r1, sp
 8018998:	f8ad 3006 	strh.w	r3, [sp, #6]
 801899c:	6803      	ldr	r3, [r0, #0]
 801899e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80189a0:	4798      	blx	r3
 80189a2:	b003      	add	sp, #12
 80189a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80189a8:	20197a34 	.word	0x20197a34
 80189ac:	20197a36 	.word	0x20197a36

080189b0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80189b0:	4b03      	ldr	r3, [pc, #12]	; (80189c0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80189b2:	6818      	ldr	r0, [r3, #0]
 80189b4:	b110      	cbz	r0, 80189bc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80189b6:	6803      	ldr	r3, [r0, #0]
 80189b8:	69db      	ldr	r3, [r3, #28]
 80189ba:	4718      	bx	r3
 80189bc:	4770      	bx	lr
 80189be:	bf00      	nop
 80189c0:	20197a7c 	.word	0x20197a7c

080189c4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80189c4:	4b03      	ldr	r3, [pc, #12]	; (80189d4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80189c6:	6818      	ldr	r0, [r3, #0]
 80189c8:	b110      	cbz	r0, 80189d0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80189ca:	6803      	ldr	r3, [r0, #0]
 80189cc:	6a1b      	ldr	r3, [r3, #32]
 80189ce:	4718      	bx	r3
 80189d0:	4770      	bx	lr
 80189d2:	bf00      	nop
 80189d4:	20197a7c 	.word	0x20197a7c

080189d8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80189d8:	2300      	movs	r3, #0
 80189da:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 80189de:	4770      	bx	lr

080189e0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80189e0:	4b03      	ldr	r3, [pc, #12]	; (80189f0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80189e2:	6818      	ldr	r0, [r3, #0]
 80189e4:	b110      	cbz	r0, 80189ec <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80189e6:	6803      	ldr	r3, [r0, #0]
 80189e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189ea:	4718      	bx	r3
 80189ec:	4770      	bx	lr
 80189ee:	bf00      	nop
 80189f0:	20197a7c 	.word	0x20197a7c

080189f4 <_ZN8touchgfx11ApplicationD1Ev>:
 80189f4:	4770      	bx	lr

080189f6 <_ZN8touchgfx11ApplicationD0Ev>:
 80189f6:	b510      	push	{r4, lr}
 80189f8:	4604      	mov	r4, r0
 80189fa:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80189fe:	f010 fbfc 	bl	80291fa <_ZdlPvj>
 8018a02:	4620      	mov	r0, r4
 8018a04:	bd10      	pop	{r4, pc}

08018a06 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018a06:	b510      	push	{r4, lr}
 8018a08:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018a0c:	888a      	ldrh	r2, [r1, #4]
 8018a0e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018a12:	4422      	add	r2, r4
 8018a14:	b212      	sxth	r2, r2
 8018a16:	4293      	cmp	r3, r2
 8018a18:	da15      	bge.n	8018a46 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018a1a:	8882      	ldrh	r2, [r0, #4]
 8018a1c:	4413      	add	r3, r2
 8018a1e:	b21b      	sxth	r3, r3
 8018a20:	429c      	cmp	r4, r3
 8018a22:	da10      	bge.n	8018a46 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018a24:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018a28:	88c9      	ldrh	r1, [r1, #6]
 8018a2a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018a2e:	4419      	add	r1, r3
 8018a30:	b209      	sxth	r1, r1
 8018a32:	428a      	cmp	r2, r1
 8018a34:	da07      	bge.n	8018a46 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018a36:	88c0      	ldrh	r0, [r0, #6]
 8018a38:	4410      	add	r0, r2
 8018a3a:	b200      	sxth	r0, r0
 8018a3c:	4283      	cmp	r3, r0
 8018a3e:	bfac      	ite	ge
 8018a40:	2000      	movge	r0, #0
 8018a42:	2001      	movlt	r0, #1
 8018a44:	bd10      	pop	{r4, pc}
 8018a46:	2000      	movs	r0, #0
 8018a48:	e7fc      	b.n	8018a44 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018a4a <_ZN8touchgfx4Rect10restrictToEss>:
 8018a4a:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018a4e:	b510      	push	{r4, lr}
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	da04      	bge.n	8018a5e <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8018a54:	8884      	ldrh	r4, [r0, #4]
 8018a56:	4423      	add	r3, r4
 8018a58:	8083      	strh	r3, [r0, #4]
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	8003      	strh	r3, [r0, #0]
 8018a5e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018a62:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018a66:	1b09      	subs	r1, r1, r4
 8018a68:	428b      	cmp	r3, r1
 8018a6a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018a6e:	bfc8      	it	gt
 8018a70:	8081      	strhgt	r1, [r0, #4]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	da04      	bge.n	8018a80 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8018a76:	88c1      	ldrh	r1, [r0, #6]
 8018a78:	440b      	add	r3, r1
 8018a7a:	80c3      	strh	r3, [r0, #6]
 8018a7c:	2300      	movs	r3, #0
 8018a7e:	8043      	strh	r3, [r0, #2]
 8018a80:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8018a84:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8018a88:	1a52      	subs	r2, r2, r1
 8018a8a:	4293      	cmp	r3, r2
 8018a8c:	bfc8      	it	gt
 8018a8e:	80c2      	strhgt	r2, [r0, #6]
 8018a90:	bd10      	pop	{r4, pc}
	...

08018a94 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8018a94:	b510      	push	{r4, lr}
 8018a96:	460c      	mov	r4, r1
 8018a98:	4b0f      	ldr	r3, [pc, #60]	; (8018ad8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8018a9a:	4620      	mov	r0, r4
 8018a9c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018aa0:	4b0e      	ldr	r3, [pc, #56]	; (8018adc <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8018aa2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018aa6:	f7ff ffd0 	bl	8018a4a <_ZN8touchgfx4Rect10restrictToEss>
 8018aaa:	4b0d      	ldr	r3, [pc, #52]	; (8018ae0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8018aac:	6818      	ldr	r0, [r3, #0]
 8018aae:	b190      	cbz	r0, 8018ad6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8018ab0:	6803      	ldr	r3, [r0, #0]
 8018ab2:	4621      	mov	r1, r4
 8018ab4:	689b      	ldr	r3, [r3, #8]
 8018ab6:	4798      	blx	r3
 8018ab8:	4b0a      	ldr	r3, [pc, #40]	; (8018ae4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8018aba:	6818      	ldr	r0, [r3, #0]
 8018abc:	b118      	cbz	r0, 8018ac6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8018abe:	6803      	ldr	r3, [r0, #0]
 8018ac0:	4621      	mov	r1, r4
 8018ac2:	689b      	ldr	r3, [r3, #8]
 8018ac4:	4798      	blx	r3
 8018ac6:	4b08      	ldr	r3, [pc, #32]	; (8018ae8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8018ac8:	4621      	mov	r1, r4
 8018aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ace:	6818      	ldr	r0, [r3, #0]
 8018ad0:	6803      	ldr	r3, [r0, #0]
 8018ad2:	69db      	ldr	r3, [r3, #28]
 8018ad4:	4718      	bx	r3
 8018ad6:	bd10      	pop	{r4, pc}
 8018ad8:	20197a36 	.word	0x20197a36
 8018adc:	20197a34 	.word	0x20197a34
 8018ae0:	20197a7c 	.word	0x20197a7c
 8018ae4:	20197a78 	.word	0x20197a78
 8018ae8:	20197a40 	.word	0x20197a40

08018aec <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018aee:	4606      	mov	r6, r0
 8018af0:	4608      	mov	r0, r1
 8018af2:	460f      	mov	r7, r1
 8018af4:	f7fe f823 	bl	8016b3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018af8:	b9e8      	cbnz	r0, 8018b36 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018afa:	f9b7 5000 	ldrsh.w	r5, [r7]
 8018afe:	f9b6 4000 	ldrsh.w	r4, [r6]
 8018b02:	42a5      	cmp	r5, r4
 8018b04:	db17      	blt.n	8018b36 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018b06:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8018b0a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8018b0e:	429a      	cmp	r2, r3
 8018b10:	db11      	blt.n	8018b36 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018b12:	88b9      	ldrh	r1, [r7, #4]
 8018b14:	440d      	add	r5, r1
 8018b16:	88b1      	ldrh	r1, [r6, #4]
 8018b18:	b22d      	sxth	r5, r5
 8018b1a:	440c      	add	r4, r1
 8018b1c:	b224      	sxth	r4, r4
 8018b1e:	42a5      	cmp	r5, r4
 8018b20:	dc09      	bgt.n	8018b36 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018b22:	88f8      	ldrh	r0, [r7, #6]
 8018b24:	4410      	add	r0, r2
 8018b26:	88f2      	ldrh	r2, [r6, #6]
 8018b28:	b200      	sxth	r0, r0
 8018b2a:	4413      	add	r3, r2
 8018b2c:	b21b      	sxth	r3, r3
 8018b2e:	4298      	cmp	r0, r3
 8018b30:	bfcc      	ite	gt
 8018b32:	2000      	movgt	r0, #0
 8018b34:	2001      	movle	r0, #1
 8018b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018b38 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8018b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b3a:	4604      	mov	r4, r0
 8018b3c:	4608      	mov	r0, r1
 8018b3e:	460d      	mov	r5, r1
 8018b40:	f7fd fffd 	bl	8016b3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018b44:	b978      	cbnz	r0, 8018b66 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8018b46:	4620      	mov	r0, r4
 8018b48:	f7fd fff9 	bl	8016b3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018b4c:	f9b5 6000 	ldrsh.w	r6, [r5]
 8018b50:	b150      	cbz	r0, 8018b68 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8018b52:	8026      	strh	r6, [r4, #0]
 8018b54:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018b58:	8063      	strh	r3, [r4, #2]
 8018b5a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8018b5e:	80a3      	strh	r3, [r4, #4]
 8018b60:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018b64:	80e3      	strh	r3, [r4, #6]
 8018b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b68:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018b6c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018b70:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8018b74:	42b1      	cmp	r1, r6
 8018b76:	460f      	mov	r7, r1
 8018b78:	bfa8      	it	ge
 8018b7a:	4637      	movge	r7, r6
 8018b7c:	4293      	cmp	r3, r2
 8018b7e:	4618      	mov	r0, r3
 8018b80:	bfa8      	it	ge
 8018b82:	4610      	movge	r0, r2
 8018b84:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8018b88:	88ed      	ldrh	r5, [r5, #6]
 8018b8a:	4466      	add	r6, ip
 8018b8c:	442a      	add	r2, r5
 8018b8e:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018b92:	88e5      	ldrh	r5, [r4, #6]
 8018b94:	4461      	add	r1, ip
 8018b96:	442b      	add	r3, r5
 8018b98:	b236      	sxth	r6, r6
 8018b9a:	b209      	sxth	r1, r1
 8018b9c:	b212      	sxth	r2, r2
 8018b9e:	b21b      	sxth	r3, r3
 8018ba0:	428e      	cmp	r6, r1
 8018ba2:	bfac      	ite	ge
 8018ba4:	ebc7 0106 	rsbge	r1, r7, r6
 8018ba8:	ebc7 0101 	rsblt	r1, r7, r1
 8018bac:	429a      	cmp	r2, r3
 8018bae:	bfac      	ite	ge
 8018bb0:	ebc0 0202 	rsbge	r2, r0, r2
 8018bb4:	ebc0 0203 	rsblt	r2, r0, r3
 8018bb8:	8027      	strh	r7, [r4, #0]
 8018bba:	8060      	strh	r0, [r4, #2]
 8018bbc:	80a1      	strh	r1, [r4, #4]
 8018bbe:	80e2      	strh	r2, [r4, #6]
 8018bc0:	e7d1      	b.n	8018b66 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08018bc4 <_ZN8touchgfx11Application11getInstanceEv>:
 8018bc4:	4b01      	ldr	r3, [pc, #4]	; (8018bcc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018bc6:	6818      	ldr	r0, [r3, #0]
 8018bc8:	4770      	bx	lr
 8018bca:	bf00      	nop
 8018bcc:	20197a8c 	.word	0x20197a8c

08018bd0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	b510      	push	{r4, lr}
 8018bd4:	4604      	mov	r4, r0
 8018bd6:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8018bda:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8018bde:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8018be2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8018be6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8018bea:	429a      	cmp	r2, r3
 8018bec:	d90e      	bls.n	8018c0c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8018bee:	18e2      	adds	r2, r4, r3
 8018bf0:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8018bf4:	b122      	cbz	r2, 8018c00 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8018bf6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8018bfa:	6803      	ldr	r3, [r0, #0]
 8018bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018bfe:	4798      	blx	r3
 8018c00:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8018c04:	3301      	adds	r3, #1
 8018c06:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8018c0a:	e7ea      	b.n	8018be2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8018c0c:	bd10      	pop	{r4, pc}

08018c0e <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8018c0e:	2300      	movs	r3, #0
 8018c10:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8018c14:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8018c18:	30a4      	adds	r0, #164	; 0xa4
 8018c1a:	f802 3b01 	strb.w	r3, [r2], #1
 8018c1e:	4282      	cmp	r2, r0
 8018c20:	d1fb      	bne.n	8018c1a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8018c22:	4770      	bx	lr

08018c24 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018c24:	b570      	push	{r4, r5, r6, lr}
 8018c26:	4c0b      	ldr	r4, [pc, #44]	; (8018c54 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8018c28:	4605      	mov	r5, r0
 8018c2a:	6820      	ldr	r0, [r4, #0]
 8018c2c:	460e      	mov	r6, r1
 8018c2e:	b110      	cbz	r0, 8018c36 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8018c30:	6803      	ldr	r3, [r0, #0]
 8018c32:	695b      	ldr	r3, [r3, #20]
 8018c34:	4798      	blx	r3
 8018c36:	1d28      	adds	r0, r5, #4
 8018c38:	f7ff ffe9 	bl	8018c0e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8018c3c:	6026      	str	r6, [r4, #0]
 8018c3e:	6833      	ldr	r3, [r6, #0]
 8018c40:	4630      	mov	r0, r6
 8018c42:	68db      	ldr	r3, [r3, #12]
 8018c44:	4798      	blx	r3
 8018c46:	682b      	ldr	r3, [r5, #0]
 8018c48:	4628      	mov	r0, r5
 8018c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c50:	4718      	bx	r3
 8018c52:	bf00      	nop
 8018c54:	20197a7c 	.word	0x20197a7c

08018c58 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8018c58:	2300      	movs	r3, #0
 8018c5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c5c:	461a      	mov	r2, r3
 8018c5e:	461c      	mov	r4, r3
 8018c60:	461d      	mov	r5, r3
 8018c62:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8018c66:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8018c6a:	459c      	cmp	ip, r3
 8018c6c:	dd1a      	ble.n	8018ca4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8018c6e:	18c6      	adds	r6, r0, r3
 8018c70:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8018c74:	b16e      	cbz	r6, 8018c92 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8018c76:	429a      	cmp	r2, r3
 8018c78:	d008      	beq.n	8018c8c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8018c7a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8018c7e:	fa1f fe82 	uxth.w	lr, r2
 8018c82:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8018c86:	1887      	adds	r7, r0, r2
 8018c88:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8018c8c:	3201      	adds	r2, #1
 8018c8e:	3301      	adds	r3, #1
 8018c90:	e7eb      	b.n	8018c6a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8018c92:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8018c96:	4299      	cmp	r1, r3
 8018c98:	bfa8      	it	ge
 8018c9a:	3501      	addge	r5, #1
 8018c9c:	429e      	cmp	r6, r3
 8018c9e:	bfc8      	it	gt
 8018ca0:	3401      	addgt	r4, #1
 8018ca2:	e7f4      	b.n	8018c8e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8018ca4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8018ca8:	1b49      	subs	r1, r1, r5
 8018caa:	1b1b      	subs	r3, r3, r4
 8018cac:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8018cb0:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8018cb4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8018cb8:	4293      	cmp	r3, r2
 8018cba:	dd03      	ble.n	8018cc4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8018cbc:	3b01      	subs	r3, #1
 8018cbe:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8018cc2:	e7f7      	b.n	8018cb4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8018cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018cc8 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018cc8:	b570      	push	{r4, r5, r6, lr}
 8018cca:	4d16      	ldr	r5, [pc, #88]	; (8018d24 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8018ccc:	4604      	mov	r4, r0
 8018cce:	6828      	ldr	r0, [r5, #0]
 8018cd0:	b140      	cbz	r0, 8018ce4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018cd2:	7a03      	ldrb	r3, [r0, #8]
 8018cd4:	b933      	cbnz	r3, 8018ce4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018cd6:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8018cda:	6803      	ldr	r3, [r0, #0]
 8018cdc:	689b      	ldr	r3, [r3, #8]
 8018cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ce2:	4718      	bx	r3
 8018ce4:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8018ce8:	4e0f      	ldr	r6, [pc, #60]	; (8018d28 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8018cea:	b973      	cbnz	r3, 8018d0a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018cec:	b168      	cbz	r0, 8018d0a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018cee:	7a03      	ldrb	r3, [r0, #8]
 8018cf0:	b15b      	cbz	r3, 8018d0a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018cf2:	6830      	ldr	r0, [r6, #0]
 8018cf4:	b110      	cbz	r0, 8018cfc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8018cf6:	6803      	ldr	r3, [r0, #0]
 8018cf8:	691b      	ldr	r3, [r3, #16]
 8018cfa:	4798      	blx	r3
 8018cfc:	6828      	ldr	r0, [r5, #0]
 8018cfe:	6803      	ldr	r3, [r0, #0]
 8018d00:	68db      	ldr	r3, [r3, #12]
 8018d02:	4798      	blx	r3
 8018d04:	2301      	movs	r3, #1
 8018d06:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8018d0a:	3404      	adds	r4, #4
 8018d0c:	4620      	mov	r0, r4
 8018d0e:	f7ff ff5f 	bl	8018bd0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8018d12:	4620      	mov	r0, r4
 8018d14:	f7ff ffa0 	bl	8018c58 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8018d18:	6830      	ldr	r0, [r6, #0]
 8018d1a:	b110      	cbz	r0, 8018d22 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8018d1c:	6803      	ldr	r3, [r0, #0]
 8018d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d20:	e7dd      	b.n	8018cde <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8018d22:	bd70      	pop	{r4, r5, r6, pc}
 8018d24:	20197a80 	.word	0x20197a80
 8018d28:	20197a7c 	.word	0x20197a7c

08018d2c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018d2c:	4603      	mov	r3, r0
 8018d2e:	2200      	movs	r2, #0
 8018d30:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018d34:	801a      	strh	r2, [r3, #0]
 8018d36:	805a      	strh	r2, [r3, #2]
 8018d38:	809a      	strh	r2, [r3, #4]
 8018d3a:	80da      	strh	r2, [r3, #6]
 8018d3c:	3308      	adds	r3, #8
 8018d3e:	428b      	cmp	r3, r1
 8018d40:	d1f8      	bne.n	8018d34 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018d42:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018d46:	4770      	bx	lr

08018d48 <_ZN8touchgfx11ApplicationC1Ev>:
 8018d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d4a:	4606      	mov	r6, r0
 8018d4c:	4604      	mov	r4, r0
 8018d4e:	2500      	movs	r5, #0
 8018d50:	4b1b      	ldr	r3, [pc, #108]	; (8018dc0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8018d52:	22a8      	movs	r2, #168	; 0xa8
 8018d54:	f846 3b04 	str.w	r3, [r6], #4
 8018d58:	2100      	movs	r1, #0
 8018d5a:	4630      	mov	r0, r6
 8018d5c:	f010 faf8 	bl	8029350 <memset>
 8018d60:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8018d64:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8018d68:	f7ff ffe0 	bl	8018d2c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018d6c:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8018d70:	f7ff ffdc 	bl	8018d2c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018d74:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8018d78:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8018d7c:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8018d80:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8018d84:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8018d88:	490e      	ldr	r1, [pc, #56]	; (8018dc4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8018d8a:	480f      	ldr	r0, [pc, #60]	; (8018dc8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8018d8c:	f002 fc86 	bl	801b69c <CRC_Lock>
 8018d90:	4f0e      	ldr	r7, [pc, #56]	; (8018dcc <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8018d92:	4b0f      	ldr	r3, [pc, #60]	; (8018dd0 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8018d94:	b158      	cbz	r0, 8018dae <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8018d96:	801d      	strh	r5, [r3, #0]
 8018d98:	2300      	movs	r3, #0
 8018d9a:	4a0e      	ldr	r2, [pc, #56]	; (8018dd4 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8018d9c:	4630      	mov	r0, r6
 8018d9e:	6013      	str	r3, [r2, #0]
 8018da0:	4a0d      	ldr	r2, [pc, #52]	; (8018dd8 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8018da2:	603b      	str	r3, [r7, #0]
 8018da4:	6013      	str	r3, [r2, #0]
 8018da6:	f7ff ff32 	bl	8018c0e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8018daa:	4620      	mov	r0, r4
 8018dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018dae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018db2:	2002      	movs	r0, #2
 8018db4:	801a      	strh	r2, [r3, #0]
 8018db6:	6038      	str	r0, [r7, #0]
 8018db8:	f001 fa28 	bl	801a20c <_ZN8touchgfx6Screen4drawEv>
 8018dbc:	e7ec      	b.n	8018d98 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8018dbe:	bf00      	nop
 8018dc0:	0802bbf4 	.word	0x0802bbf4
 8018dc4:	b5e8b5cd 	.word	0xb5e8b5cd
 8018dc8:	f407a5c2 	.word	0xf407a5c2
 8018dcc:	20197a7c 	.word	0x20197a7c
 8018dd0:	20000058 	.word	0x20000058
 8018dd4:	20197a8c 	.word	0x20197a8c
 8018dd8:	20197a80 	.word	0x20197a80

08018ddc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018ddc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8018de0:	b510      	push	{r4, lr}
 8018de2:	3b01      	subs	r3, #1
 8018de4:	b29b      	uxth	r3, r3
 8018de6:	428b      	cmp	r3, r1
 8018de8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8018dec:	d908      	bls.n	8018e00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8018dee:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8018df2:	681a      	ldr	r2, [r3, #0]
 8018df4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8018df8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8018dfc:	685a      	ldr	r2, [r3, #4]
 8018dfe:	6062      	str	r2, [r4, #4]
 8018e00:	bd10      	pop	{r4, pc}
	...

08018e04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e08:	4b8f      	ldr	r3, [pc, #572]	; (8019048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8018e0a:	b08f      	sub	sp, #60	; 0x3c
 8018e0c:	ac0a      	add	r4, sp, #40	; 0x28
 8018e0e:	e884 0006 	stmia.w	r4, {r1, r2}
 8018e12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018e16:	4b8d      	ldr	r3, [pc, #564]	; (801904c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8018e18:	4683      	mov	fp, r0
 8018e1a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018e1e:	4620      	mov	r0, r4
 8018e20:	f7ff fe13 	bl	8018a4a <_ZN8touchgfx4Rect10restrictToEss>
 8018e24:	4620      	mov	r0, r4
 8018e26:	f7fd fe8a 	bl	8016b3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018e2a:	2800      	cmp	r0, #0
 8018e2c:	d16a      	bne.n	8018f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018e2e:	9403      	str	r4, [sp, #12]
 8018e30:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8018e34:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8018e38:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8018e3c:	35a4      	adds	r5, #164	; 0xa4
 8018e3e:	9301      	str	r3, [sp, #4]
 8018e40:	b15c      	cbz	r4, 8018e5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8018e42:	4629      	mov	r1, r5
 8018e44:	9803      	ldr	r0, [sp, #12]
 8018e46:	f7ff fe51 	bl	8018aec <_ZNK8touchgfx4Rect8includesERKS0_>
 8018e4a:	3c01      	subs	r4, #1
 8018e4c:	b118      	cbz	r0, 8018e56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8018e4e:	b2a1      	uxth	r1, r4
 8018e50:	9801      	ldr	r0, [sp, #4]
 8018e52:	f7ff ffc3 	bl	8018ddc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018e56:	3d08      	subs	r5, #8
 8018e58:	e7f2      	b.n	8018e40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8018e5a:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 8018e5e:	f108 33ff 	add.w	r3, r8, #4294967295
 8018e62:	9302      	str	r3, [sp, #8]
 8018e64:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8018e68:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8018e6c:	f8cd 8010 	str.w	r8, [sp, #16]
 8018e70:	9306      	str	r3, [sp, #24]
 8018e72:	445c      	add	r4, fp
 8018e74:	2500      	movs	r5, #0
 8018e76:	4626      	mov	r6, r4
 8018e78:	462f      	mov	r7, r5
 8018e7a:	f8cd 8014 	str.w	r8, [sp, #20]
 8018e7e:	9b05      	ldr	r3, [sp, #20]
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d073      	beq.n	8018f6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8018e84:	9903      	ldr	r1, [sp, #12]
 8018e86:	4630      	mov	r0, r6
 8018e88:	f7ff fdbd 	bl	8018a06 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018e8c:	b350      	cbz	r0, 8018ee4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8018e8e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8018e92:	f9b6 c000 	ldrsh.w	ip, [r6]
 8018e96:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8018e9a:	45e6      	cmp	lr, ip
 8018e9c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8018ea0:	db33      	blt.n	8018f0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8018ea2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8018ea6:	88b3      	ldrh	r3, [r6, #4]
 8018ea8:	4472      	add	r2, lr
 8018eaa:	4463      	add	r3, ip
 8018eac:	b212      	sxth	r2, r2
 8018eae:	b21b      	sxth	r3, r3
 8018eb0:	429a      	cmp	r2, r3
 8018eb2:	dc2a      	bgt.n	8018f0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8018eb4:	88f3      	ldrh	r3, [r6, #6]
 8018eb6:	fa1f f289 	uxth.w	r2, r9
 8018eba:	4413      	add	r3, r2
 8018ebc:	b29b      	uxth	r3, r3
 8018ebe:	45ca      	cmp	sl, r9
 8018ec0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8018ec4:	fa0f fe83 	sxth.w	lr, r3
 8018ec8:	fa1f fc8a 	uxth.w	ip, sl
 8018ecc:	db0f      	blt.n	8018eee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8018ece:	eba3 030c 	sub.w	r3, r3, ip
 8018ed2:	1ac9      	subs	r1, r1, r3
 8018ed4:	b209      	sxth	r1, r1
 8018ed6:	2900      	cmp	r1, #0
 8018ed8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8018edc:	dd12      	ble.n	8018f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018ede:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8018ee2:	4605      	mov	r5, r0
 8018ee4:	9b05      	ldr	r3, [sp, #20]
 8018ee6:	3e08      	subs	r6, #8
 8018ee8:	3b01      	subs	r3, #1
 8018eea:	9305      	str	r3, [sp, #20]
 8018eec:	e7c7      	b.n	8018e7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8018eee:	4461      	add	r1, ip
 8018ef0:	b209      	sxth	r1, r1
 8018ef2:	4571      	cmp	r1, lr
 8018ef4:	dc38      	bgt.n	8018f68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018ef6:	eba2 020c 	sub.w	r2, r2, ip
 8018efa:	b212      	sxth	r2, r2
 8018efc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8018f00:	2a00      	cmp	r2, #0
 8018f02:	dcee      	bgt.n	8018ee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8018f04:	b00f      	add	sp, #60	; 0x3c
 8018f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f0a:	45ca      	cmp	sl, r9
 8018f0c:	db2c      	blt.n	8018f68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018f0e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8018f12:	449a      	add	sl, r3
 8018f14:	88f3      	ldrh	r3, [r6, #6]
 8018f16:	fa0f fa8a 	sxth.w	sl, sl
 8018f1a:	4499      	add	r9, r3
 8018f1c:	fa0f f989 	sxth.w	r9, r9
 8018f20:	45ca      	cmp	sl, r9
 8018f22:	dc21      	bgt.n	8018f68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018f24:	88b3      	ldrh	r3, [r6, #4]
 8018f26:	fa1f f28c 	uxth.w	r2, ip
 8018f2a:	4413      	add	r3, r2
 8018f2c:	b29b      	uxth	r3, r3
 8018f2e:	45e6      	cmp	lr, ip
 8018f30:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8018f34:	fa1f f98e 	uxth.w	r9, lr
 8018f38:	fa0f fa83 	sxth.w	sl, r3
 8018f3c:	db0a      	blt.n	8018f54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8018f3e:	eba3 0309 	sub.w	r3, r3, r9
 8018f42:	1ac9      	subs	r1, r1, r3
 8018f44:	b209      	sxth	r1, r1
 8018f46:	2900      	cmp	r1, #0
 8018f48:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8018f4c:	ddda      	ble.n	8018f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018f4e:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8018f52:	e7c6      	b.n	8018ee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8018f54:	4449      	add	r1, r9
 8018f56:	b209      	sxth	r1, r1
 8018f58:	4551      	cmp	r1, sl
 8018f5a:	dc05      	bgt.n	8018f68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018f5c:	eba2 0209 	sub.w	r2, r2, r9
 8018f60:	b212      	sxth	r2, r2
 8018f62:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8018f66:	e7cb      	b.n	8018f00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8018f68:	4607      	mov	r7, r0
 8018f6a:	e7bb      	b.n	8018ee4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8018f6c:	2d00      	cmp	r5, #0
 8018f6e:	d181      	bne.n	8018e74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8018f70:	2f00      	cmp	r7, #0
 8018f72:	f000 81de 	beq.w	8019332 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8018f76:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8018f7a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8018f7e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8018f82:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8018f86:	b2b9      	uxth	r1, r7
 8018f88:	b2b3      	uxth	r3, r6
 8018f8a:	441a      	add	r2, r3
 8018f8c:	448a      	add	sl, r1
 8018f8e:	b292      	uxth	r2, r2
 8018f90:	fa1f fa8a 	uxth.w	sl, sl
 8018f94:	fa0f f882 	sxth.w	r8, r2
 8018f98:	9105      	str	r1, [sp, #20]
 8018f9a:	fa0f f98a 	sxth.w	r9, sl
 8018f9e:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8018fa2:	9b04      	ldr	r3, [sp, #16]
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d053      	beq.n	8019050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8018fa8:	9903      	ldr	r1, [sp, #12]
 8018faa:	4620      	mov	r0, r4
 8018fac:	f7ff fd2b 	bl	8018a06 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018fb0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018fb4:	b1c0      	cbz	r0, 8018fe8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018fb6:	f9b4 e000 	ldrsh.w	lr, [r4]
 8018fba:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018fbe:	4576      	cmp	r6, lr
 8018fc0:	dc23      	bgt.n	801900a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018fc2:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018fc6:	44f4      	add	ip, lr
 8018fc8:	fa0f fc8c 	sxth.w	ip, ip
 8018fcc:	45e0      	cmp	r8, ip
 8018fce:	db1c      	blt.n	801900a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018fd0:	428f      	cmp	r7, r1
 8018fd2:	fa1f fc81 	uxth.w	ip, r1
 8018fd6:	88e1      	ldrh	r1, [r4, #6]
 8018fd8:	dc0d      	bgt.n	8018ff6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8018fda:	ebaa 0c0c 	sub.w	ip, sl, ip
 8018fde:	eba1 010c 	sub.w	r1, r1, ip
 8018fe2:	f8a4 9002 	strh.w	r9, [r4, #2]
 8018fe6:	80e1      	strh	r1, [r4, #6]
 8018fe8:	4628      	mov	r0, r5
 8018fea:	9904      	ldr	r1, [sp, #16]
 8018fec:	3c08      	subs	r4, #8
 8018fee:	3901      	subs	r1, #1
 8018ff0:	9104      	str	r1, [sp, #16]
 8018ff2:	4605      	mov	r5, r0
 8018ff4:	e7d3      	b.n	8018f9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 8018ff6:	4461      	add	r1, ip
 8018ff8:	b209      	sxth	r1, r1
 8018ffa:	4549      	cmp	r1, r9
 8018ffc:	dcf5      	bgt.n	8018fea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018ffe:	9905      	ldr	r1, [sp, #20]
 8019000:	eba1 0c0c 	sub.w	ip, r1, ip
 8019004:	f8a4 c006 	strh.w	ip, [r4, #6]
 8019008:	e7ee      	b.n	8018fe8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801900a:	428f      	cmp	r7, r1
 801900c:	dced      	bgt.n	8018fea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801900e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8019012:	4461      	add	r1, ip
 8019014:	b209      	sxth	r1, r1
 8019016:	4589      	cmp	r9, r1
 8019018:	dbe7      	blt.n	8018fea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801901a:	4576      	cmp	r6, lr
 801901c:	fa1f fc8e 	uxth.w	ip, lr
 8019020:	88a1      	ldrh	r1, [r4, #4]
 8019022:	dc07      	bgt.n	8019034 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8019024:	eba2 0c0c 	sub.w	ip, r2, ip
 8019028:	eba1 010c 	sub.w	r1, r1, ip
 801902c:	f8a4 8000 	strh.w	r8, [r4]
 8019030:	80a1      	strh	r1, [r4, #4]
 8019032:	e7d9      	b.n	8018fe8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8019034:	4461      	add	r1, ip
 8019036:	b209      	sxth	r1, r1
 8019038:	4588      	cmp	r8, r1
 801903a:	dbd6      	blt.n	8018fea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801903c:	eba3 0c0c 	sub.w	ip, r3, ip
 8019040:	f8a4 c004 	strh.w	ip, [r4, #4]
 8019044:	e7d0      	b.n	8018fe8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8019046:	bf00      	nop
 8019048:	20197a36 	.word	0x20197a36
 801904c:	20197a34 	.word	0x20197a34
 8019050:	2d00      	cmp	r5, #0
 8019052:	f000 816e 	beq.w	8019332 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8019056:	9b06      	ldr	r3, [sp, #24]
 8019058:	445b      	add	r3, fp
 801905a:	461c      	mov	r4, r3
 801905c:	9b02      	ldr	r3, [sp, #8]
 801905e:	3301      	adds	r3, #1
 8019060:	f000 8167 	beq.w	8019332 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8019064:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8019068:	4629      	mov	r1, r5
 801906a:	9803      	ldr	r0, [sp, #12]
 801906c:	f7ff fd3e 	bl	8018aec <_ZNK8touchgfx4Rect8includesERKS0_>
 8019070:	b120      	cbz	r0, 801907c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8019072:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8019076:	9801      	ldr	r0, [sp, #4]
 8019078:	f7ff feb0 	bl	8018ddc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801907c:	9903      	ldr	r1, [sp, #12]
 801907e:	4628      	mov	r0, r5
 8019080:	f7ff fcc1 	bl	8018a06 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019084:	2800      	cmp	r0, #0
 8019086:	f000 809c 	beq.w	80191c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801908a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801908e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8019092:	fa1f f189 	uxth.w	r1, r9
 8019096:	eb01 0c03 	add.w	ip, r1, r3
 801909a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801909e:	fa1f fa8c 	uxth.w	sl, ip
 80190a2:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 80190a6:	9309      	str	r3, [sp, #36]	; 0x24
 80190a8:	b283      	uxth	r3, r0
 80190aa:	eb03 050c 	add.w	r5, r3, ip
 80190ae:	b2ad      	uxth	r5, r5
 80190b0:	9505      	str	r5, [sp, #20]
 80190b2:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 80190b6:	4548      	cmp	r0, r9
 80190b8:	9504      	str	r5, [sp, #16]
 80190ba:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 80190be:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 80190c2:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 80190c6:	f340 8099 	ble.w	80191fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 80190ca:	1a5b      	subs	r3, r3, r1
 80190cc:	b29b      	uxth	r3, r3
 80190ce:	4596      	cmp	lr, r2
 80190d0:	fa0f f08a 	sxth.w	r0, sl
 80190d4:	b21e      	sxth	r6, r3
 80190d6:	dd2e      	ble.n	8019136 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 80190d8:	9f02      	ldr	r7, [sp, #8]
 80190da:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 80190de:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 80190e2:	9f04      	ldr	r7, [sp, #16]
 80190e4:	fa1f fe8e 	uxth.w	lr, lr
 80190e8:	1a3f      	subs	r7, r7, r0
 80190ea:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 80190ee:	b292      	uxth	r2, r2
 80190f0:	ebae 0102 	sub.w	r1, lr, r2
 80190f4:	44a6      	add	lr, r4
 80190f6:	4402      	add	r2, r0
 80190f8:	b289      	uxth	r1, r1
 80190fa:	fa0f fe8e 	sxth.w	lr, lr
 80190fe:	b212      	sxth	r2, r2
 8019100:	b20d      	sxth	r5, r1
 8019102:	ebae 0202 	sub.w	r2, lr, r2
 8019106:	436f      	muls	r7, r5
 8019108:	4372      	muls	r2, r6
 801910a:	4297      	cmp	r7, r2
 801910c:	db09      	blt.n	8019122 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801910e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8019112:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 8019116:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801911a:	449c      	add	ip, r3
 801911c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8019120:	e686      	b.n	8018e30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019122:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8019126:	4421      	add	r1, r4
 8019128:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801912c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8019130:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8019134:	e67c      	b.n	8018e30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019136:	9f04      	ldr	r7, [sp, #16]
 8019138:	42b8      	cmp	r0, r7
 801913a:	da27      	bge.n	801918c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801913c:	9902      	ldr	r1, [sp, #8]
 801913e:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8019142:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8019146:	eb05 010e 	add.w	r1, r5, lr
 801914a:	fa1f f881 	uxth.w	r8, r1
 801914e:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8019152:	fa0f f988 	sxth.w	r9, r8
 8019156:	4411      	add	r1, r2
 8019158:	eba1 0108 	sub.w	r1, r1, r8
 801915c:	b289      	uxth	r1, r1
 801915e:	fa0f f881 	sxth.w	r8, r1
 8019162:	eba2 020e 	sub.w	r2, r2, lr
 8019166:	1a3f      	subs	r7, r7, r0
 8019168:	4372      	muls	r2, r6
 801916a:	fb08 f707 	mul.w	r7, r8, r7
 801916e:	42ba      	cmp	r2, r7
 8019170:	dc06      	bgt.n	8019180 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8019172:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 8019176:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801917a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801917e:	e7ca      	b.n	8019116 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8019180:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8019184:	4429      	add	r1, r5
 8019186:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801918a:	e651      	b.n	8018e30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801918c:	9805      	ldr	r0, [sp, #20]
 801918e:	2d06      	cmp	r5, #6
 8019190:	ebaa 0000 	sub.w	r0, sl, r0
 8019194:	b280      	uxth	r0, r0
 8019196:	fa0f fe80 	sxth.w	lr, r0
 801919a:	d817      	bhi.n	80191cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801919c:	9b04      	ldr	r3, [sp, #16]
 801919e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 80191a2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80191a6:	1c6b      	adds	r3, r5, #1
 80191a8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 80191ac:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 80191b0:	9b01      	ldr	r3, [sp, #4]
 80191b2:	9801      	ldr	r0, [sp, #4]
 80191b4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80191b8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80191bc:	805a      	strh	r2, [r3, #2]
 80191be:	809e      	strh	r6, [r3, #4]
 80191c0:	80d9      	strh	r1, [r3, #6]
 80191c2:	9b02      	ldr	r3, [sp, #8]
 80191c4:	3c08      	subs	r4, #8
 80191c6:	3b01      	subs	r3, #1
 80191c8:	9302      	str	r3, [sp, #8]
 80191ca:	e747      	b.n	801905c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 80191cc:	9a02      	ldr	r2, [sp, #8]
 80191ce:	45b6      	cmp	lr, r6
 80191d0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80191d4:	db0d      	blt.n	80191f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80191d6:	449c      	add	ip, r3
 80191d8:	fa1f fc8c 	uxth.w	ip, ip
 80191dc:	445a      	add	r2, fp
 80191de:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80191e2:	448c      	add	ip, r1
 80191e4:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 80191e8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 80191ec:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 80191f0:	e61e      	b.n	8018e30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80191f2:	445a      	add	r2, fp
 80191f4:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 80191f8:	4484      	add	ip, r0
 80191fa:	e78f      	b.n	801911c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80191fc:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8019200:	fa1f f18e 	uxth.w	r1, lr
 8019204:	eb01 0806 	add.w	r8, r1, r6
 8019208:	b293      	uxth	r3, r2
 801920a:	fa1f f888 	uxth.w	r8, r8
 801920e:	9306      	str	r3, [sp, #24]
 8019210:	fa0f f388 	sxth.w	r3, r8
 8019214:	9307      	str	r3, [sp, #28]
 8019216:	9f06      	ldr	r7, [sp, #24]
 8019218:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801921c:	4596      	cmp	lr, r2
 801921e:	443b      	add	r3, r7
 8019220:	b29b      	uxth	r3, r3
 8019222:	9308      	str	r3, [sp, #32]
 8019224:	da24      	bge.n	8019270 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8019226:	9905      	ldr	r1, [sp, #20]
 8019228:	eba3 0308 	sub.w	r3, r3, r8
 801922c:	ebaa 0401 	sub.w	r4, sl, r1
 8019230:	b2a4      	uxth	r4, r4
 8019232:	b29b      	uxth	r3, r3
 8019234:	b225      	sxth	r5, r4
 8019236:	b219      	sxth	r1, r3
 8019238:	eba2 020e 	sub.w	r2, r2, lr
 801923c:	eba9 0000 	sub.w	r0, r9, r0
 8019240:	436a      	muls	r2, r5
 8019242:	4348      	muls	r0, r1
 8019244:	4282      	cmp	r2, r0
 8019246:	9a02      	ldr	r2, [sp, #8]
 8019248:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801924c:	445a      	add	r2, fp
 801924e:	dc06      	bgt.n	801925e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8019250:	9b07      	ldr	r3, [sp, #28]
 8019252:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 8019256:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801925a:	44a4      	add	ip, r4
 801925c:	e75e      	b.n	801911c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801925e:	9904      	ldr	r1, [sp, #16]
 8019260:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8019264:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8019268:	4433      	add	r3, r6
 801926a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801926e:	e5df      	b.n	8018e30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019270:	9f06      	ldr	r7, [sp, #24]
 8019272:	9b04      	ldr	r3, [sp, #16]
 8019274:	1bc9      	subs	r1, r1, r7
 8019276:	fa0f f78a 	sxth.w	r7, sl
 801927a:	b289      	uxth	r1, r1
 801927c:	429f      	cmp	r7, r3
 801927e:	fa0f fe81 	sxth.w	lr, r1
 8019282:	dd24      	ble.n	80192ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4ca>
 8019284:	9a05      	ldr	r2, [sp, #20]
 8019286:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801928a:	ebaa 0202 	sub.w	r2, sl, r2
 801928e:	9d07      	ldr	r5, [sp, #28]
 8019290:	b292      	uxth	r2, r2
 8019292:	eba5 0a03 	sub.w	sl, r5, r3
 8019296:	b214      	sxth	r4, r2
 8019298:	eba9 0000 	sub.w	r0, r9, r0
 801929c:	fb0e f000 	mul.w	r0, lr, r0
 80192a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80192a4:	9b02      	ldr	r3, [sp, #8]
 80192a6:	4550      	cmp	r0, sl
 80192a8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80192ac:	445b      	add	r3, fp
 80192ae:	db03      	blt.n	80192b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b4>
 80192b0:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 80192b4:	4494      	add	ip, r2
 80192b6:	e731      	b.n	801911c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80192b8:	9a04      	ldr	r2, [sp, #16]
 80192ba:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 80192be:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80192c2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 80192c6:	4431      	add	r1, r6
 80192c8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80192cc:	e75b      	b.n	8019186 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 80192ce:	9b08      	ldr	r3, [sp, #32]
 80192d0:	2d06      	cmp	r5, #6
 80192d2:	eba3 0308 	sub.w	r3, r3, r8
 80192d6:	b29b      	uxth	r3, r3
 80192d8:	b218      	sxth	r0, r3
 80192da:	d813      	bhi.n	8019304 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x500>
 80192dc:	9b07      	ldr	r3, [sp, #28]
 80192de:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 80192e2:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 80192e6:	1c6b      	adds	r3, r5, #1
 80192e8:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 80192ec:	9b01      	ldr	r3, [sp, #4]
 80192ee:	9901      	ldr	r1, [sp, #4]
 80192f0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80192f4:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 80192f8:	805a      	strh	r2, [r3, #2]
 80192fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80192fc:	f8a3 e006 	strh.w	lr, [r3, #6]
 8019300:	809a      	strh	r2, [r3, #4]
 8019302:	e75e      	b.n	80191c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8019304:	9c02      	ldr	r4, [sp, #8]
 8019306:	4570      	cmp	r0, lr
 8019308:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801930c:	db0d      	blt.n	801932a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x526>
 801930e:	4431      	add	r1, r6
 8019310:	9b06      	ldr	r3, [sp, #24]
 8019312:	b289      	uxth	r1, r1
 8019314:	445c      	add	r4, fp
 8019316:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801931a:	4419      	add	r1, r3
 801931c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8019320:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8019324:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8019328:	e582      	b.n	8018e30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801932a:	445c      	add	r4, fp
 801932c:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8019330:	e79a      	b.n	8019268 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8019332:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8019336:	2e07      	cmp	r6, #7
 8019338:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801933c:	d812      	bhi.n	8019364 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x560>
 801933e:	1c75      	adds	r5, r6, #1
 8019340:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 8019344:	9d01      	ldr	r5, [sp, #4]
 8019346:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801934a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801934e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8019352:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8019356:	442c      	add	r4, r5
 8019358:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801935c:	8061      	strh	r1, [r4, #2]
 801935e:	80a2      	strh	r2, [r4, #4]
 8019360:	80e3      	strh	r3, [r4, #6]
 8019362:	e5cf      	b.n	8018f04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8019364:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8019368:	f04f 37ff 	mov.w	r7, #4294967295
 801936c:	2500      	movs	r5, #0
 801936e:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8019372:	3e01      	subs	r6, #1
 8019374:	445c      	add	r4, fp
 8019376:	9305      	str	r3, [sp, #20]
 8019378:	1e72      	subs	r2, r6, #1
 801937a:	4691      	mov	r9, r2
 801937c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8019380:	9302      	str	r3, [sp, #8]
 8019382:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8019386:	9304      	str	r3, [sp, #16]
 8019388:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801938c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8019390:	bf16      	itet	ne
 8019392:	9905      	ldrne	r1, [sp, #20]
 8019394:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8019398:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801939c:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80193a0:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80193a4:	6818      	ldr	r0, [r3, #0]
 80193a6:	fb18 f801 	smulbb	r8, r8, r1
 80193aa:	6859      	ldr	r1, [r3, #4]
 80193ac:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80193b0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80193b4:	4671      	mov	r1, lr
 80193b6:	a80c      	add	r0, sp, #48	; 0x30
 80193b8:	9207      	str	r2, [sp, #28]
 80193ba:	9306      	str	r3, [sp, #24]
 80193bc:	f7ff fbbc 	bl	8018b38 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80193c0:	f04f 0c08 	mov.w	ip, #8
 80193c4:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80193c8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80193cc:	9b04      	ldr	r3, [sp, #16]
 80193ce:	9a02      	ldr	r2, [sp, #8]
 80193d0:	fb10 f001 	smulbb	r0, r0, r1
 80193d4:	fb02 8803 	mla	r8, r2, r3, r8
 80193d8:	eba0 0108 	sub.w	r1, r0, r8
 80193dc:	fb90 f0fc 	sdiv	r0, r0, ip
 80193e0:	4288      	cmp	r0, r1
 80193e2:	dc20      	bgt.n	8019426 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 80193e4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80193e8:	4551      	cmp	r1, sl
 80193ea:	da03      	bge.n	80193f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
 80193ec:	b1d9      	cbz	r1, 8019426 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 80193ee:	468a      	mov	sl, r1
 80193f0:	464f      	mov	r7, r9
 80193f2:	4635      	mov	r5, r6
 80193f4:	f109 39ff 	add.w	r9, r9, #4294967295
 80193f8:	f119 0f02 	cmn.w	r9, #2
 80193fc:	d1c6      	bne.n	801938c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x588>
 80193fe:	4616      	mov	r6, r2
 8019400:	3201      	adds	r2, #1
 8019402:	f1a4 0408 	sub.w	r4, r4, #8
 8019406:	d1b7      	bne.n	8019378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8019408:	9b01      	ldr	r3, [sp, #4]
 801940a:	b2ac      	uxth	r4, r5
 801940c:	00ed      	lsls	r5, r5, #3
 801940e:	1958      	adds	r0, r3, r5
 8019410:	1c7b      	adds	r3, r7, #1
 8019412:	d10b      	bne.n	801942c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x628>
 8019414:	4601      	mov	r1, r0
 8019416:	9803      	ldr	r0, [sp, #12]
 8019418:	f7ff fb8e 	bl	8018b38 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801941c:	4621      	mov	r1, r4
 801941e:	9801      	ldr	r0, [sp, #4]
 8019420:	f7ff fcdc 	bl	8018ddc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019424:	e504      	b.n	8018e30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019426:	464f      	mov	r7, r9
 8019428:	4635      	mov	r5, r6
 801942a:	e7ed      	b.n	8019408 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 801942c:	9b01      	ldr	r3, [sp, #4]
 801942e:	00ff      	lsls	r7, r7, #3
 8019430:	19d9      	adds	r1, r3, r7
 8019432:	f7ff fb81 	bl	8018b38 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019436:	9b03      	ldr	r3, [sp, #12]
 8019438:	445f      	add	r7, fp
 801943a:	cb03      	ldmia	r3!, {r0, r1}
 801943c:	445d      	add	r5, fp
 801943e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8019442:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8019446:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801944a:	9b03      	ldr	r3, [sp, #12]
 801944c:	6869      	ldr	r1, [r5, #4]
 801944e:	c303      	stmia	r3!, {r0, r1}
 8019450:	e7e4      	b.n	801941c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x618>
 8019452:	bf00      	nop

08019454 <_ZN8touchgfx11Application10invalidateEv>:
 8019454:	2100      	movs	r1, #0
 8019456:	4b09      	ldr	r3, [pc, #36]	; (801947c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8019458:	b082      	sub	sp, #8
 801945a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801945e:	4b08      	ldr	r3, [pc, #32]	; (8019480 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8019460:	9100      	str	r1, [sp, #0]
 8019462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019466:	f8ad 2004 	strh.w	r2, [sp, #4]
 801946a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801946e:	ab02      	add	r3, sp, #8
 8019470:	e913 0006 	ldmdb	r3, {r1, r2}
 8019474:	b002      	add	sp, #8
 8019476:	f7ff bcc5 	b.w	8018e04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801947a:	bf00      	nop
 801947c:	20197a34 	.word	0x20197a34
 8019480:	20197a36 	.word	0x20197a36

08019484 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8019484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019488:	f500 7698 	add.w	r6, r0, #304	; 0x130
 801948c:	b09b      	sub	sp, #108	; 0x6c
 801948e:	4604      	mov	r4, r0
 8019490:	4630      	mov	r0, r6
 8019492:	f7fd fb54 	bl	8016b3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019496:	4605      	mov	r5, r0
 8019498:	b940      	cbnz	r0, 80194ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801949a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801949e:	4620      	mov	r0, r4
 80194a0:	f7ff fcb0 	bl	8018e04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80194a4:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80194a8:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 80194ac:	4bc9      	ldr	r3, [pc, #804]	; (80197d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d03e      	beq.n	8019532 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80194b4:	4dc8      	ldr	r5, [pc, #800]	; (80197d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80194b6:	4628      	mov	r0, r5
 80194b8:	f7fd fb41 	bl	8016b3e <_ZNK8touchgfx4Rect7isEmptyEv>
 80194bc:	4606      	mov	r6, r0
 80194be:	2800      	cmp	r0, #0
 80194c0:	d137      	bne.n	8019532 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80194c2:	4628      	mov	r0, r5
 80194c4:	f7ff f9e4 	bl	8018890 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80194c8:	6829      	ldr	r1, [r5, #0]
 80194ca:	686a      	ldr	r2, [r5, #4]
 80194cc:	4620      	mov	r0, r4
 80194ce:	f7ff fc99 	bl	8018e04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80194d2:	802e      	strh	r6, [r5, #0]
 80194d4:	806e      	strh	r6, [r5, #2]
 80194d6:	80ae      	strh	r6, [r5, #4]
 80194d8:	80ee      	strh	r6, [r5, #6]
 80194da:	ae09      	add	r6, sp, #36	; 0x24
 80194dc:	4630      	mov	r0, r6
 80194de:	f7ff fc25 	bl	8018d2c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80194e2:	4abe      	ldr	r2, [pc, #760]	; (80197dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80194e4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 80194e8:	8815      	ldrh	r5, [r2, #0]
 80194ea:	9202      	str	r2, [sp, #8]
 80194ec:	462b      	mov	r3, r5
 80194ee:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80194f2:	429f      	cmp	r7, r3
 80194f4:	d924      	bls.n	8019540 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 80194f6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80194fa:	2907      	cmp	r1, #7
 80194fc:	d816      	bhi.n	801952c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 80194fe:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8019502:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8019506:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801950a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801950e:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8019512:	1c4a      	adds	r2, r1, #1
 8019514:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8019518:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801951c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8019520:	f8a2 9002 	strh.w	r9, [r2, #2]
 8019524:	f8a2 e004 	strh.w	lr, [r2, #4]
 8019528:	f8a2 c006 	strh.w	ip, [r2, #6]
 801952c:	3301      	adds	r3, #1
 801952e:	b29b      	uxth	r3, r3
 8019530:	e7df      	b.n	80194f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8019532:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8019536:	2b00      	cmp	r3, #0
 8019538:	d1cf      	bne.n	80194da <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801953a:	b01b      	add	sp, #108	; 0x6c
 801953c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019540:	462f      	mov	r7, r5
 8019542:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8019546:	42bb      	cmp	r3, r7
 8019548:	d90b      	bls.n	8019562 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801954a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801954e:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8019552:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8019556:	4620      	mov	r0, r4
 8019558:	3701      	adds	r7, #1
 801955a:	f7ff fc53 	bl	8018e04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801955e:	b2bf      	uxth	r7, r7
 8019560:	e7ef      	b.n	8019542 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8019562:	4a9f      	ldr	r2, [pc, #636]	; (80197e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8019564:	6813      	ldr	r3, [r2, #0]
 8019566:	4690      	mov	r8, r2
 8019568:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801956c:	2b01      	cmp	r3, #1
 801956e:	f040 80e6 	bne.w	801973e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 8019572:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8019576:	4629      	mov	r1, r5
 8019578:	2500      	movs	r5, #0
 801957a:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801957e:	33ae      	adds	r3, #174	; 0xae
 8019580:	428f      	cmp	r7, r1
 8019582:	f103 0308 	add.w	r3, r3, #8
 8019586:	dd0a      	ble.n	801959e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8019588:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801958c:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8019590:	3101      	adds	r1, #1
 8019592:	4402      	add	r2, r0
 8019594:	b212      	sxth	r2, r2
 8019596:	4295      	cmp	r5, r2
 8019598:	bfb8      	it	lt
 801959a:	4615      	movlt	r5, r2
 801959c:	e7f0      	b.n	8019580 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801959e:	4b91      	ldr	r3, [pc, #580]	; (80197e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 80195a0:	f8df b23c 	ldr.w	fp, [pc, #572]	; 80197e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 80195a4:	881b      	ldrh	r3, [r3, #0]
 80195a6:	46d8      	mov	r8, fp
 80195a8:	2b0f      	cmp	r3, #15
 80195aa:	bf88      	it	hi
 80195ac:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 80195b0:	f04f 0300 	mov.w	r3, #0
 80195b4:	bf98      	it	ls
 80195b6:	f04f 0a01 	movls.w	sl, #1
 80195ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80195be:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 80195c2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80195c6:	4438      	add	r0, r7
 80195c8:	b207      	sxth	r7, r0
 80195ca:	f8db 0000 	ldr.w	r0, [fp]
 80195ce:	42bd      	cmp	r5, r7
 80195d0:	6803      	ldr	r3, [r0, #0]
 80195d2:	f340 8084 	ble.w	80196de <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80195d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80195da:	4798      	blx	r3
 80195dc:	eb07 030a 	add.w	r3, r7, sl
 80195e0:	4298      	cmp	r0, r3
 80195e2:	da07      	bge.n	80195f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 80195e4:	4285      	cmp	r5, r0
 80195e6:	dd05      	ble.n	80195f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 80195e8:	4287      	cmp	r7, r0
 80195ea:	dd6d      	ble.n	80196c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 80195ec:	2f00      	cmp	r7, #0
 80195ee:	dd6b      	ble.n	80196c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 80195f0:	4628      	mov	r0, r5
 80195f2:	e004      	b.n	80195fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 80195f4:	4287      	cmp	r7, r0
 80195f6:	dcfb      	bgt.n	80195f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 80195f8:	42a8      	cmp	r0, r5
 80195fa:	bfa8      	it	ge
 80195fc:	4628      	movge	r0, r5
 80195fe:	2200      	movs	r2, #0
 8019600:	4b79      	ldr	r3, [pc, #484]	; (80197e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8019602:	1bc0      	subs	r0, r0, r7
 8019604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019608:	f8ad 7016 	strh.w	r7, [sp, #22]
 801960c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019610:	9b02      	ldr	r3, [sp, #8]
 8019612:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019616:	881f      	ldrh	r7, [r3, #0]
 8019618:	f8ad 001a 	strh.w	r0, [sp, #26]
 801961c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8019620:	42bb      	cmp	r3, r7
 8019622:	d9cc      	bls.n	80195be <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8019624:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8019628:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801962c:	ab07      	add	r3, sp, #28
 801962e:	6851      	ldr	r1, [r2, #4]
 8019630:	c303      	stmia	r3!, {r0, r1}
 8019632:	a905      	add	r1, sp, #20
 8019634:	a807      	add	r0, sp, #28
 8019636:	f7ff f9e6 	bl	8018a06 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801963a:	2800      	cmp	r0, #0
 801963c:	d04c      	beq.n	80196d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 801963e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8019642:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8019646:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801964a:	4686      	mov	lr, r0
 801964c:	4290      	cmp	r0, r2
 801964e:	4448      	add	r0, r9
 8019650:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8019654:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8019658:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801965c:	bfb8      	it	lt
 801965e:	4696      	movlt	lr, r2
 8019660:	444a      	add	r2, r9
 8019662:	4299      	cmp	r1, r3
 8019664:	b280      	uxth	r0, r0
 8019666:	b292      	uxth	r2, r2
 8019668:	468c      	mov	ip, r1
 801966a:	9303      	str	r3, [sp, #12]
 801966c:	bfb8      	it	lt
 801966e:	469c      	movlt	ip, r3
 8019670:	fa0f f982 	sxth.w	r9, r2
 8019674:	b203      	sxth	r3, r0
 8019676:	454b      	cmp	r3, r9
 8019678:	bfb8      	it	lt
 801967a:	4602      	movlt	r2, r0
 801967c:	eba2 020e 	sub.w	r2, r2, lr
 8019680:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019684:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8019688:	9b03      	ldr	r3, [sp, #12]
 801968a:	4411      	add	r1, r2
 801968c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019690:	b289      	uxth	r1, r1
 8019692:	4413      	add	r3, r2
 8019694:	b29b      	uxth	r3, r3
 8019696:	b208      	sxth	r0, r1
 8019698:	b21a      	sxth	r2, r3
 801969a:	4290      	cmp	r0, r2
 801969c:	bfb8      	it	lt
 801969e:	460b      	movlt	r3, r1
 80196a0:	eba3 030c 	sub.w	r3, r3, ip
 80196a4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80196a8:	f8ad e01c 	strh.w	lr, [sp, #28]
 80196ac:	f8ad c01e 	strh.w	ip, [sp, #30]
 80196b0:	a807      	add	r0, sp, #28
 80196b2:	f7fd fa44 	bl	8016b3e <_ZNK8touchgfx4Rect7isEmptyEv>
 80196b6:	b920      	cbnz	r0, 80196c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 80196b8:	6823      	ldr	r3, [r4, #0]
 80196ba:	a907      	add	r1, sp, #28
 80196bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80196be:	4620      	mov	r0, r4
 80196c0:	4798      	blx	r3
 80196c2:	3701      	adds	r7, #1
 80196c4:	b2bf      	uxth	r7, r7
 80196c6:	e7a9      	b.n	801961c <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 80196c8:	f8d8 0000 	ldr.w	r0, [r8]
 80196cc:	2101      	movs	r1, #1
 80196ce:	6803      	ldr	r3, [r0, #0]
 80196d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80196d4:	4798      	blx	r3
 80196d6:	e772      	b.n	80195be <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 80196d8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80196dc:	e7e8      	b.n	80196b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 80196de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196e0:	4798      	blx	r3
 80196e2:	4b42      	ldr	r3, [pc, #264]	; (80197ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 80196e4:	781b      	ldrb	r3, [r3, #0]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	f43f af27 	beq.w	801953a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 80196ec:	2300      	movs	r3, #0
 80196ee:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 80196f2:	9b02      	ldr	r3, [sp, #8]
 80196f4:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80196f8:	881b      	ldrh	r3, [r3, #0]
 80196fa:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 80196fe:	429d      	cmp	r5, r3
 8019700:	f67f af1b 	bls.w	801953a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8019704:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8019708:	2907      	cmp	r1, #7
 801970a:	d815      	bhi.n	8019738 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 801970c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8019710:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8019714:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8019718:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801971c:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8019720:	1c4a      	adds	r2, r1, #1
 8019722:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8019726:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801972a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801972e:	f8a2 e002 	strh.w	lr, [r2, #2]
 8019732:	f8a2 c004 	strh.w	ip, [r2, #4]
 8019736:	80d7      	strh	r7, [r2, #6]
 8019738:	3301      	adds	r3, #1
 801973a:	b29b      	uxth	r3, r3
 801973c:	e7df      	b.n	80196fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 801973e:	2b02      	cmp	r3, #2
 8019740:	f040 8136 	bne.w	80199b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8019744:	4b2a      	ldr	r3, [pc, #168]	; (80197f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 8019746:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 801974a:	781b      	ldrb	r3, [r3, #0]
 801974c:	2b01      	cmp	r3, #1
 801974e:	f000 809c 	beq.w	801988a <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8019752:	9b02      	ldr	r3, [sp, #8]
 8019754:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 8019758:	f8b3 b000 	ldrh.w	fp, [r3]
 801975c:	f10b 0b01 	add.w	fp, fp, #1
 8019760:	fa1f fb8b 	uxth.w	fp, fp
 8019764:	2a00      	cmp	r2, #0
 8019766:	d0bc      	beq.n	80196e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8019768:	4659      	mov	r1, fp
 801976a:	f04f 0800 	mov.w	r8, #0
 801976e:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 8019772:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8019776:	441d      	add	r5, r3
 8019778:	b22d      	sxth	r5, r5
 801977a:	b28b      	uxth	r3, r1
 801977c:	429a      	cmp	r2, r3
 801977e:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8019782:	f240 80c1 	bls.w	8019908 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 8019786:	4427      	add	r7, r4
 8019788:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801978c:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8019790:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 8019794:	4608      	mov	r0, r1
 8019796:	4563      	cmp	r3, ip
 8019798:	f340 80a3 	ble.w	80198e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 801979c:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 80197a0:	4465      	add	r5, ip
 80197a2:	b22d      	sxth	r5, r5
 80197a4:	429d      	cmp	r5, r3
 80197a6:	bfa8      	it	ge
 80197a8:	461d      	movge	r5, r3
 80197aa:	3101      	adds	r1, #1
 80197ac:	4680      	mov	r8, r0
 80197ae:	e7e4      	b.n	801977a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 80197b0:	d10b      	bne.n	80197ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 80197b2:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 80197b6:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 80197ba:	458c      	cmp	ip, r1
 80197bc:	bfb4      	ite	lt
 80197be:	469c      	movlt	ip, r3
 80197c0:	46bc      	movge	ip, r7
 80197c2:	4572      	cmp	r2, lr
 80197c4:	bfb8      	it	lt
 80197c6:	4672      	movlt	r2, lr
 80197c8:	e088      	b.n	80198dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80197ca:	428a      	cmp	r2, r1
 80197cc:	bfb8      	it	lt
 80197ce:	460a      	movlt	r2, r1
 80197d0:	46bc      	mov	ip, r7
 80197d2:	e083      	b.n	80198dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80197d4:	20197a78 	.word	0x20197a78
 80197d8:	20197a84 	.word	0x20197a84
 80197dc:	20000058 	.word	0x20000058
 80197e0:	20197a40 	.word	0x20197a40
 80197e4:	20197a36 	.word	0x20197a36
 80197e8:	20197a34 	.word	0x20197a34
 80197ec:	20197a3e 	.word	0x20197a3e
 80197f0:	20197a38 	.word	0x20197a38
 80197f4:	1961      	adds	r1, r4, r5
 80197f6:	f851 0fac 	ldr.w	r0, [r1, #172]!
 80197fa:	ab07      	add	r3, sp, #28
 80197fc:	6849      	ldr	r1, [r1, #4]
 80197fe:	c303      	stmia	r3!, {r0, r1}
 8019800:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019804:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019808:	2b13      	cmp	r3, #19
 801980a:	bfd8      	it	le
 801980c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8019810:	440b      	add	r3, r1
 8019812:	1a9b      	subs	r3, r3, r2
 8019814:	a807      	add	r0, sp, #28
 8019816:	f8ad 3020 	strh.w	r3, [sp, #32]
 801981a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801981e:	f7ff f851 	bl	80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019822:	a807      	add	r0, sp, #28
 8019824:	f7fd f98b 	bl	8016b3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019828:	bb78      	cbnz	r0, 801988a <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801982a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801982e:	f8d8 0000 	ldr.w	r0, [r8]
 8019832:	f1bc 0f14 	cmp.w	ip, #20
 8019836:	bfa8      	it	ge
 8019838:	f04f 0c14 	movge.w	ip, #20
 801983c:	f8d0 e000 	ldr.w	lr, [r0]
 8019840:	fa1f fc8c 	uxth.w	ip, ip
 8019844:	f8cd c000 	str.w	ip, [sp]
 8019848:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801984c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019850:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8019854:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019858:	47d0      	blx	sl
 801985a:	4682      	mov	sl, r0
 801985c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019860:	a807      	add	r0, sp, #28
 8019862:	f7ff f815 	bl	8018890 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019866:	6823      	ldr	r3, [r4, #0]
 8019868:	4620      	mov	r0, r4
 801986a:	4425      	add	r5, r4
 801986c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801986e:	a907      	add	r1, sp, #28
 8019870:	4798      	blx	r3
 8019872:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 8019876:	eba0 000a 	sub.w	r0, r0, sl
 801987a:	b200      	sxth	r0, r0
 801987c:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 8019880:	b918      	cbnz	r0, 801988a <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8019882:	b2b9      	uxth	r1, r7
 8019884:	4648      	mov	r0, r9
 8019886:	f7ff faa9 	bl	8018ddc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801988a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801988e:	f1bb 0f00 	cmp.w	fp, #0
 8019892:	f43f af26 	beq.w	80196e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8019896:	2700      	movs	r7, #0
 8019898:	9b02      	ldr	r3, [sp, #8]
 801989a:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801989e:	881b      	ldrh	r3, [r3, #0]
 80198a0:	3301      	adds	r3, #1
 80198a2:	b29b      	uxth	r3, r3
 80198a4:	b299      	uxth	r1, r3
 80198a6:	458b      	cmp	fp, r1
 80198a8:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 80198ac:	d9a2      	bls.n	80197f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 80198ae:	4425      	add	r5, r4
 80198b0:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 80198b4:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 80198b8:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80198bc:	4408      	add	r0, r1
 80198be:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 80198c2:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 80198c6:	b200      	sxth	r0, r0
 80198c8:	4471      	add	r1, lr
 80198ca:	b209      	sxth	r1, r1
 80198cc:	4288      	cmp	r0, r1
 80198ce:	469c      	mov	ip, r3
 80198d0:	f6bf af6e 	bge.w	80197b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 80198d4:	4586      	cmp	lr, r0
 80198d6:	4672      	mov	r2, lr
 80198d8:	bfb8      	it	lt
 80198da:	4602      	movlt	r2, r0
 80198dc:	3301      	adds	r3, #1
 80198de:	4667      	mov	r7, ip
 80198e0:	e7e0      	b.n	80198a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 80198e2:	d10c      	bne.n	80198fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 80198e4:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 80198e8:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 80198ec:	4287      	cmp	r7, r0
 80198ee:	bfb4      	ite	lt
 80198f0:	4608      	movlt	r0, r1
 80198f2:	4640      	movge	r0, r8
 80198f4:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 80198f8:	443b      	add	r3, r7
 80198fa:	b21b      	sxth	r3, r3
 80198fc:	e752      	b.n	80197a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 80198fe:	4565      	cmp	r5, ip
 8019900:	bfa8      	it	ge
 8019902:	4665      	movge	r5, ip
 8019904:	4640      	mov	r0, r8
 8019906:	e750      	b.n	80197aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 8019908:	eb09 0007 	add.w	r0, r9, r7
 801990c:	4427      	add	r7, r4
 801990e:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 8019912:	9203      	str	r2, [sp, #12]
 8019914:	f1ba 0f13 	cmp.w	sl, #19
 8019918:	bfde      	ittt	le
 801991a:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 801991e:	4455      	addle	r5, sl
 8019920:	b22d      	sxthle	r5, r5
 8019922:	f7fd f90c 	bl	8016b3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019926:	9a03      	ldr	r2, [sp, #12]
 8019928:	2800      	cmp	r0, #0
 801992a:	f47f af1b 	bne.w	8019764 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 801992e:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8019932:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019936:	1aad      	subs	r5, r5, r2
 8019938:	2d14      	cmp	r5, #20
 801993a:	bfa8      	it	ge
 801993c:	2514      	movge	r5, #20
 801993e:	4828      	ldr	r0, [pc, #160]	; (80199e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 8019940:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8019944:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8019948:	6800      	ldr	r0, [r0, #0]
 801994a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801994e:	f8ad 201e 	strh.w	r2, [sp, #30]
 8019952:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019956:	f8d0 c000 	ldr.w	ip, [r0]
 801995a:	b2ad      	uxth	r5, r5
 801995c:	fa1f fa8a 	uxth.w	sl, sl
 8019960:	4555      	cmp	r5, sl
 8019962:	bf94      	ite	ls
 8019964:	9500      	strls	r5, [sp, #0]
 8019966:	f8cd a000 	strhi.w	sl, [sp]
 801996a:	b292      	uxth	r2, r2
 801996c:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8019970:	b29b      	uxth	r3, r3
 8019972:	b289      	uxth	r1, r1
 8019974:	47a8      	blx	r5
 8019976:	6823      	ldr	r3, [r4, #0]
 8019978:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801997c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801997e:	a907      	add	r1, sp, #28
 8019980:	4620      	mov	r0, r4
 8019982:	4798      	blx	r3
 8019984:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8019988:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801998c:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8019990:	1a5b      	subs	r3, r3, r1
 8019992:	440a      	add	r2, r1
 8019994:	b21b      	sxth	r3, r3
 8019996:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801999a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801999e:	2b00      	cmp	r3, #0
 80199a0:	f47f aed7 	bne.w	8019752 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 80199a4:	fa1f f188 	uxth.w	r1, r8
 80199a8:	4648      	mov	r0, r9
 80199aa:	f7ff fa17 	bl	8018ddc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80199ae:	e6d0      	b.n	8019752 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 80199b0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80199b4:	42ab      	cmp	r3, r5
 80199b6:	f67f ae94 	bls.w	80196e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80199ba:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80199be:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80199c2:	ab07      	add	r3, sp, #28
 80199c4:	6851      	ldr	r1, [r2, #4]
 80199c6:	c303      	stmia	r3!, {r0, r1}
 80199c8:	a807      	add	r0, sp, #28
 80199ca:	f7fd f8b8 	bl	8016b3e <_ZNK8touchgfx4Rect7isEmptyEv>
 80199ce:	b920      	cbnz	r0, 80199da <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 80199d0:	6823      	ldr	r3, [r4, #0]
 80199d2:	a907      	add	r1, sp, #28
 80199d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80199d6:	4620      	mov	r0, r4
 80199d8:	4798      	blx	r3
 80199da:	3501      	adds	r5, #1
 80199dc:	b2ad      	uxth	r5, r5
 80199de:	e7e7      	b.n	80199b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 80199e0:	20197a40 	.word	0x20197a40

080199e4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80199e4:	2200      	movs	r2, #0
 80199e6:	4b03      	ldr	r3, [pc, #12]	; (80199f4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80199e8:	801a      	strh	r2, [r3, #0]
 80199ea:	805a      	strh	r2, [r3, #2]
 80199ec:	809a      	strh	r2, [r3, #4]
 80199ee:	80da      	strh	r2, [r3, #6]
 80199f0:	4770      	bx	lr
 80199f2:	bf00      	nop
 80199f4:	20197a84 	.word	0x20197a84

080199f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80199f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199fc:	4606      	mov	r6, r0
 80199fe:	b09d      	sub	sp, #116	; 0x74
 8019a00:	a803      	add	r0, sp, #12
 8019a02:	4614      	mov	r4, r2
 8019a04:	468a      	mov	sl, r1
 8019a06:	461d      	mov	r5, r3
 8019a08:	f000 fd7a 	bl	801a500 <_ZN8touchgfx12TextProviderC1Ev>
 8019a0c:	6833      	ldr	r3, [r6, #0]
 8019a0e:	4630      	mov	r0, r6
 8019a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019a12:	4798      	blx	r3
 8019a14:	6833      	ldr	r3, [r6, #0]
 8019a16:	4607      	mov	r7, r0
 8019a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a1a:	4630      	mov	r0, r6
 8019a1c:	4798      	blx	r3
 8019a1e:	462a      	mov	r2, r5
 8019a20:	2500      	movs	r5, #0
 8019a22:	9000      	str	r0, [sp, #0]
 8019a24:	4621      	mov	r1, r4
 8019a26:	463b      	mov	r3, r7
 8019a28:	a803      	add	r0, sp, #12
 8019a2a:	f000 fdbc 	bl	801a5a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019a2e:	462c      	mov	r4, r5
 8019a30:	46a9      	mov	r9, r5
 8019a32:	46a8      	mov	r8, r5
 8019a34:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8019a38:	2300      	movs	r3, #0
 8019a3a:	9302      	str	r3, [sp, #8]
 8019a3c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019a40:	429c      	cmp	r4, r3
 8019a42:	d002      	beq.n	8019a4a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8019a44:	455c      	cmp	r4, fp
 8019a46:	bf18      	it	ne
 8019a48:	4625      	movne	r5, r4
 8019a4a:	ab02      	add	r3, sp, #8
 8019a4c:	4632      	mov	r2, r6
 8019a4e:	4651      	mov	r1, sl
 8019a50:	a803      	add	r0, sp, #12
 8019a52:	f001 f897 	bl	801ab84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019a56:	4604      	mov	r4, r0
 8019a58:	b108      	cbz	r0, 8019a5e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8019a5a:	280a      	cmp	r0, #10
 8019a5c:	d10a      	bne.n	8019a74 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8019a5e:	45c1      	cmp	r9, r8
 8019a60:	bf38      	it	cc
 8019a62:	46c1      	movcc	r9, r8
 8019a64:	f04f 0800 	mov.w	r8, #0
 8019a68:	2c00      	cmp	r4, #0
 8019a6a:	d1e5      	bne.n	8019a38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8019a6c:	4648      	mov	r0, r9
 8019a6e:	b01d      	add	sp, #116	; 0x74
 8019a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a74:	9a02      	ldr	r2, [sp, #8]
 8019a76:	2a00      	cmp	r2, #0
 8019a78:	d0de      	beq.n	8019a38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8019a7a:	7b57      	ldrb	r7, [r2, #13]
 8019a7c:	6833      	ldr	r3, [r6, #0]
 8019a7e:	007f      	lsls	r7, r7, #1
 8019a80:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8019a84:	7a97      	ldrb	r7, [r2, #10]
 8019a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a88:	4307      	orrs	r7, r0
 8019a8a:	4629      	mov	r1, r5
 8019a8c:	4630      	mov	r0, r6
 8019a8e:	8894      	ldrh	r4, [r2, #4]
 8019a90:	4798      	blx	r3
 8019a92:	4438      	add	r0, r7
 8019a94:	4480      	add	r8, r0
 8019a96:	fa1f f888 	uxth.w	r8, r8
 8019a9a:	e7e5      	b.n	8019a68 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08019a9c <_ZNK8touchgfx4Font12getCharWidthEt>:
 8019a9c:	b508      	push	{r3, lr}
 8019a9e:	6803      	ldr	r3, [r0, #0]
 8019aa0:	68db      	ldr	r3, [r3, #12]
 8019aa2:	4798      	blx	r3
 8019aa4:	b128      	cbz	r0, 8019ab2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8019aa6:	7b43      	ldrb	r3, [r0, #13]
 8019aa8:	7a80      	ldrb	r0, [r0, #10]
 8019aaa:	005b      	lsls	r3, r3, #1
 8019aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019ab0:	4318      	orrs	r0, r3
 8019ab2:	bd08      	pop	{r3, pc}

08019ab4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019ab4:	b40e      	push	{r1, r2, r3}
 8019ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ab8:	4605      	mov	r5, r0
 8019aba:	b09e      	sub	sp, #120	; 0x78
 8019abc:	ab23      	add	r3, sp, #140	; 0x8c
 8019abe:	f853 4b04 	ldr.w	r4, [r3], #4
 8019ac2:	a805      	add	r0, sp, #20
 8019ac4:	9303      	str	r3, [sp, #12]
 8019ac6:	f000 fd1b 	bl	801a500 <_ZN8touchgfx12TextProviderC1Ev>
 8019aca:	682b      	ldr	r3, [r5, #0]
 8019acc:	4628      	mov	r0, r5
 8019ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019ad0:	4798      	blx	r3
 8019ad2:	682b      	ldr	r3, [r5, #0]
 8019ad4:	4606      	mov	r6, r0
 8019ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019ad8:	4628      	mov	r0, r5
 8019ada:	4798      	blx	r3
 8019adc:	4621      	mov	r1, r4
 8019ade:	2400      	movs	r4, #0
 8019ae0:	4633      	mov	r3, r6
 8019ae2:	9000      	str	r0, [sp, #0]
 8019ae4:	9a03      	ldr	r2, [sp, #12]
 8019ae6:	ae1e      	add	r6, sp, #120	; 0x78
 8019ae8:	a805      	add	r0, sp, #20
 8019aea:	f000 fd5c 	bl	801a5a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019aee:	f846 4d68 	str.w	r4, [r6, #-104]!
 8019af2:	4633      	mov	r3, r6
 8019af4:	462a      	mov	r2, r5
 8019af6:	4621      	mov	r1, r4
 8019af8:	a805      	add	r0, sp, #20
 8019afa:	f001 f843 	bl	801ab84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019afe:	b1f0      	cbz	r0, 8019b3e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8019b00:	280a      	cmp	r0, #10
 8019b02:	d018      	beq.n	8019b36 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8019b04:	9f04      	ldr	r7, [sp, #16]
 8019b06:	b1b7      	cbz	r7, 8019b36 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8019b08:	7b78      	ldrb	r0, [r7, #13]
 8019b0a:	7a3b      	ldrb	r3, [r7, #8]
 8019b0c:	00c1      	lsls	r1, r0, #3
 8019b0e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019b12:	4319      	orrs	r1, r3
 8019b14:	0643      	lsls	r3, r0, #25
 8019b16:	bf44      	itt	mi
 8019b18:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8019b1c:	b219      	sxthmi	r1, r3
 8019b1e:	0100      	lsls	r0, r0, #4
 8019b20:	79fb      	ldrb	r3, [r7, #7]
 8019b22:	88ea      	ldrh	r2, [r5, #6]
 8019b24:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019b28:	4303      	orrs	r3, r0
 8019b2a:	4413      	add	r3, r2
 8019b2c:	1a5b      	subs	r3, r3, r1
 8019b2e:	b21b      	sxth	r3, r3
 8019b30:	429c      	cmp	r4, r3
 8019b32:	bfb8      	it	lt
 8019b34:	461c      	movlt	r4, r3
 8019b36:	4633      	mov	r3, r6
 8019b38:	462a      	mov	r2, r5
 8019b3a:	2100      	movs	r1, #0
 8019b3c:	e7dc      	b.n	8019af8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8019b3e:	b2a0      	uxth	r0, r4
 8019b40:	b01e      	add	sp, #120	; 0x78
 8019b42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019b46:	b003      	add	sp, #12
 8019b48:	4770      	bx	lr

08019b4a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8019b4a:	7a43      	ldrb	r3, [r0, #9]
 8019b4c:	8880      	ldrh	r0, [r0, #4]
 8019b4e:	4418      	add	r0, r3
 8019b50:	b280      	uxth	r0, r0
 8019b52:	4770      	bx	lr

08019b54 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8019b54:	6803      	ldr	r3, [r0, #0]
 8019b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b58:	4718      	bx	r3

08019b5a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019b5a:	b40e      	push	{r1, r2, r3}
 8019b5c:	b570      	push	{r4, r5, r6, lr}
 8019b5e:	4604      	mov	r4, r0
 8019b60:	b09d      	sub	sp, #116	; 0x74
 8019b62:	ab21      	add	r3, sp, #132	; 0x84
 8019b64:	f853 5b04 	ldr.w	r5, [r3], #4
 8019b68:	a803      	add	r0, sp, #12
 8019b6a:	9302      	str	r3, [sp, #8]
 8019b6c:	f000 fcc8 	bl	801a500 <_ZN8touchgfx12TextProviderC1Ev>
 8019b70:	6823      	ldr	r3, [r4, #0]
 8019b72:	4620      	mov	r0, r4
 8019b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019b76:	4798      	blx	r3
 8019b78:	6823      	ldr	r3, [r4, #0]
 8019b7a:	4606      	mov	r6, r0
 8019b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019b7e:	4620      	mov	r0, r4
 8019b80:	4798      	blx	r3
 8019b82:	4633      	mov	r3, r6
 8019b84:	9000      	str	r0, [sp, #0]
 8019b86:	9a02      	ldr	r2, [sp, #8]
 8019b88:	4629      	mov	r1, r5
 8019b8a:	a803      	add	r0, sp, #12
 8019b8c:	f000 fd0b 	bl	801a5a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019b90:	a803      	add	r0, sp, #12
 8019b92:	f001 f879 	bl	801ac88 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019b96:	2401      	movs	r4, #1
 8019b98:	b2a3      	uxth	r3, r4
 8019b9a:	b140      	cbz	r0, 8019bae <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8019b9c:	280a      	cmp	r0, #10
 8019b9e:	bf08      	it	eq
 8019ba0:	3301      	addeq	r3, #1
 8019ba2:	a803      	add	r0, sp, #12
 8019ba4:	bf08      	it	eq
 8019ba6:	b21c      	sxtheq	r4, r3
 8019ba8:	f001 f86e 	bl	801ac88 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019bac:	e7f4      	b.n	8019b98 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8019bae:	4618      	mov	r0, r3
 8019bb0:	b01d      	add	sp, #116	; 0x74
 8019bb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019bb6:	b003      	add	sp, #12
 8019bb8:	4770      	bx	lr

08019bba <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019bba:	b40e      	push	{r1, r2, r3}
 8019bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019bbe:	4604      	mov	r4, r0
 8019bc0:	b09e      	sub	sp, #120	; 0x78
 8019bc2:	ab23      	add	r3, sp, #140	; 0x8c
 8019bc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8019bc8:	a805      	add	r0, sp, #20
 8019bca:	9303      	str	r3, [sp, #12]
 8019bcc:	f000 fc98 	bl	801a500 <_ZN8touchgfx12TextProviderC1Ev>
 8019bd0:	6823      	ldr	r3, [r4, #0]
 8019bd2:	4620      	mov	r0, r4
 8019bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019bd6:	4798      	blx	r3
 8019bd8:	6823      	ldr	r3, [r4, #0]
 8019bda:	4606      	mov	r6, r0
 8019bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019bde:	4620      	mov	r0, r4
 8019be0:	4798      	blx	r3
 8019be2:	4633      	mov	r3, r6
 8019be4:	4629      	mov	r1, r5
 8019be6:	9000      	str	r0, [sp, #0]
 8019be8:	9a03      	ldr	r2, [sp, #12]
 8019bea:	a805      	add	r0, sp, #20
 8019bec:	f000 fcdb 	bl	801a5a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019bf0:	2100      	movs	r1, #0
 8019bf2:	ad1e      	add	r5, sp, #120	; 0x78
 8019bf4:	f845 1d68 	str.w	r1, [r5, #-104]!
 8019bf8:	462b      	mov	r3, r5
 8019bfa:	4622      	mov	r2, r4
 8019bfc:	a805      	add	r0, sp, #20
 8019bfe:	f000 ffc1 	bl	801ab84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019c02:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8019c06:	b1d8      	cbz	r0, 8019c40 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8019c08:	280a      	cmp	r0, #10
 8019c0a:	d012      	beq.n	8019c32 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019c0c:	9804      	ldr	r0, [sp, #16]
 8019c0e:	b180      	cbz	r0, 8019c32 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019c10:	7b47      	ldrb	r7, [r0, #13]
 8019c12:	88e2      	ldrh	r2, [r4, #6]
 8019c14:	00fb      	lsls	r3, r7, #3
 8019c16:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019c1a:	7a03      	ldrb	r3, [r0, #8]
 8019c1c:	430b      	orrs	r3, r1
 8019c1e:	0679      	lsls	r1, r7, #25
 8019c20:	bf44      	itt	mi
 8019c22:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019c26:	b21b      	sxthmi	r3, r3
 8019c28:	1ad3      	subs	r3, r2, r3
 8019c2a:	b21b      	sxth	r3, r3
 8019c2c:	429e      	cmp	r6, r3
 8019c2e:	bfa8      	it	ge
 8019c30:	461e      	movge	r6, r3
 8019c32:	462b      	mov	r3, r5
 8019c34:	4622      	mov	r2, r4
 8019c36:	2100      	movs	r1, #0
 8019c38:	a805      	add	r0, sp, #20
 8019c3a:	f000 ffa3 	bl	801ab84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019c3e:	e7e2      	b.n	8019c06 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8019c40:	4630      	mov	r0, r6
 8019c42:	b01e      	add	sp, #120	; 0x78
 8019c44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019c48:	b003      	add	sp, #12
 8019c4a:	4770      	bx	lr

08019c4c <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019c4c:	b513      	push	{r0, r1, r4, lr}
 8019c4e:	2400      	movs	r4, #0
 8019c50:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019c54:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019c58:	6803      	ldr	r3, [r0, #0]
 8019c5a:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019c5e:	9400      	str	r4, [sp, #0]
 8019c60:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019c64:	691b      	ldr	r3, [r3, #16]
 8019c66:	4669      	mov	r1, sp
 8019c68:	4798      	blx	r3
 8019c6a:	b002      	add	sp, #8
 8019c6c:	bd10      	pop	{r4, pc}

08019c6e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019c6e:	b538      	push	{r3, r4, r5, lr}
 8019c70:	460c      	mov	r4, r1
 8019c72:	4605      	mov	r5, r0
 8019c74:	680b      	ldr	r3, [r1, #0]
 8019c76:	68db      	ldr	r3, [r3, #12]
 8019c78:	4798      	blx	r3
 8019c7a:	6823      	ldr	r3, [r4, #0]
 8019c7c:	4620      	mov	r0, r4
 8019c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c80:	4629      	mov	r1, r5
 8019c82:	4798      	blx	r3
 8019c84:	4628      	mov	r0, r5
 8019c86:	bd38      	pop	{r3, r4, r5, pc}

08019c88 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019c88:	b410      	push	{r4}
 8019c8a:	880a      	ldrh	r2, [r1, #0]
 8019c8c:	8884      	ldrh	r4, [r0, #4]
 8019c8e:	4422      	add	r2, r4
 8019c90:	800a      	strh	r2, [r1, #0]
 8019c92:	88c4      	ldrh	r4, [r0, #6]
 8019c94:	884a      	ldrh	r2, [r1, #2]
 8019c96:	4422      	add	r2, r4
 8019c98:	804a      	strh	r2, [r1, #2]
 8019c9a:	6940      	ldr	r0, [r0, #20]
 8019c9c:	b120      	cbz	r0, 8019ca8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019c9e:	6803      	ldr	r3, [r0, #0]
 8019ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ca6:	4718      	bx	r3
 8019ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019cac:	4770      	bx	lr

08019cae <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019cae:	b570      	push	{r4, r5, r6, lr}
 8019cb0:	460c      	mov	r4, r1
 8019cb2:	8882      	ldrh	r2, [r0, #4]
 8019cb4:	880b      	ldrh	r3, [r1, #0]
 8019cb6:	4605      	mov	r5, r0
 8019cb8:	4413      	add	r3, r2
 8019cba:	800b      	strh	r3, [r1, #0]
 8019cbc:	88c2      	ldrh	r2, [r0, #6]
 8019cbe:	884b      	ldrh	r3, [r1, #2]
 8019cc0:	4413      	add	r3, r2
 8019cc2:	804b      	strh	r3, [r1, #2]
 8019cc4:	1d01      	adds	r1, r0, #4
 8019cc6:	4620      	mov	r0, r4
 8019cc8:	f7fc fef6 	bl	8016ab8 <_ZN8touchgfx4RectaNERKS0_>
 8019ccc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	dd0b      	ble.n	8019cec <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019cd4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	dd07      	ble.n	8019cec <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019cdc:	6968      	ldr	r0, [r5, #20]
 8019cde:	b128      	cbz	r0, 8019cec <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019ce0:	6803      	ldr	r3, [r0, #0]
 8019ce2:	4621      	mov	r1, r4
 8019ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019cea:	4718      	bx	r3
 8019cec:	bd70      	pop	{r4, r5, r6, pc}
	...

08019cf0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019cf0:	b570      	push	{r4, r5, r6, lr}
 8019cf2:	460c      	mov	r4, r1
 8019cf4:	8882      	ldrh	r2, [r0, #4]
 8019cf6:	880b      	ldrh	r3, [r1, #0]
 8019cf8:	4605      	mov	r5, r0
 8019cfa:	4413      	add	r3, r2
 8019cfc:	800b      	strh	r3, [r1, #0]
 8019cfe:	88c2      	ldrh	r2, [r0, #6]
 8019d00:	884b      	ldrh	r3, [r1, #2]
 8019d02:	4413      	add	r3, r2
 8019d04:	804b      	strh	r3, [r1, #2]
 8019d06:	1d01      	adds	r1, r0, #4
 8019d08:	4620      	mov	r0, r4
 8019d0a:	f7fc fed5 	bl	8016ab8 <_ZN8touchgfx4RectaNERKS0_>
 8019d0e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	dd18      	ble.n	8019d48 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8019d16:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	dd14      	ble.n	8019d48 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8019d1e:	6968      	ldr	r0, [r5, #20]
 8019d20:	b128      	cbz	r0, 8019d2e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8019d22:	6803      	ldr	r3, [r0, #0]
 8019d24:	4621      	mov	r1, r4
 8019d26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d2a:	691b      	ldr	r3, [r3, #16]
 8019d2c:	4718      	bx	r3
 8019d2e:	4b07      	ldr	r3, [pc, #28]	; (8019d4c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	3304      	adds	r3, #4
 8019d34:	429d      	cmp	r5, r3
 8019d36:	d107      	bne.n	8019d48 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8019d38:	f7fe ff44 	bl	8018bc4 <_ZN8touchgfx11Application11getInstanceEv>
 8019d3c:	6821      	ldr	r1, [r4, #0]
 8019d3e:	6862      	ldr	r2, [r4, #4]
 8019d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d44:	f7ff b85e 	b.w	8018e04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019d48:	bd70      	pop	{r4, r5, r6, pc}
 8019d4a:	bf00      	nop
 8019d4c:	20197a7c 	.word	0x20197a7c

08019d50 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019d50:	b570      	push	{r4, r5, r6, lr}
 8019d52:	4604      	mov	r4, r0
 8019d54:	4616      	mov	r6, r2
 8019d56:	460d      	mov	r5, r1
 8019d58:	b901      	cbnz	r1, 8019d5c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019d5a:	b192      	cbz	r2, 8019d82 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8019d5c:	6823      	ldr	r3, [r4, #0]
 8019d5e:	4620      	mov	r0, r4
 8019d60:	699b      	ldr	r3, [r3, #24]
 8019d62:	4798      	blx	r3
 8019d64:	88e2      	ldrh	r2, [r4, #6]
 8019d66:	88a1      	ldrh	r1, [r4, #4]
 8019d68:	4432      	add	r2, r6
 8019d6a:	4429      	add	r1, r5
 8019d6c:	4620      	mov	r0, r4
 8019d6e:	b212      	sxth	r2, r2
 8019d70:	b209      	sxth	r1, r1
 8019d72:	f7fd f97f 	bl	8017074 <_ZN8touchgfx8Drawable5setXYEss>
 8019d76:	6823      	ldr	r3, [r4, #0]
 8019d78:	4620      	mov	r0, r4
 8019d7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d7e:	699b      	ldr	r3, [r3, #24]
 8019d80:	4718      	bx	r3
 8019d82:	bd70      	pop	{r4, r5, r6, pc}

08019d84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019d84:	b510      	push	{r4, lr}
 8019d86:	2300      	movs	r3, #0
 8019d88:	4604      	mov	r4, r0
 8019d8a:	4608      	mov	r0, r1
 8019d8c:	8023      	strh	r3, [r4, #0]
 8019d8e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019d92:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019d96:	8063      	strh	r3, [r4, #2]
 8019d98:	6803      	ldr	r3, [r0, #0]
 8019d9a:	80a1      	strh	r1, [r4, #4]
 8019d9c:	80e2      	strh	r2, [r4, #6]
 8019d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019da0:	4621      	mov	r1, r4
 8019da2:	4798      	blx	r3
 8019da4:	4620      	mov	r0, r4
 8019da6:	bd10      	pop	{r4, pc}

08019da8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8019da8:	b530      	push	{r4, r5, lr}
 8019daa:	8083      	strh	r3, [r0, #4]
 8019dac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019db0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8019db4:	80c3      	strh	r3, [r0, #6]
 8019db6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8019dba:	6141      	str	r1, [r0, #20]
 8019dbc:	7203      	strb	r3, [r0, #8]
 8019dbe:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019dc2:	8302      	strh	r2, [r0, #24]
 8019dc4:	7243      	strb	r3, [r0, #9]
 8019dc6:	7a83      	ldrb	r3, [r0, #10]
 8019dc8:	f365 0306 	bfi	r3, r5, #0, #7
 8019dcc:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8019dd0:	f365 13c7 	bfi	r3, r5, #7, #1
 8019dd4:	7283      	strb	r3, [r0, #10]
 8019dd6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8019dda:	72c3      	strb	r3, [r0, #11]
 8019ddc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8019de0:	7303      	strb	r3, [r0, #12]
 8019de2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8019de6:	81c3      	strh	r3, [r0, #14]
 8019de8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8019dec:	8203      	strh	r3, [r0, #16]
 8019dee:	4b01      	ldr	r3, [pc, #4]	; (8019df4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8019df0:	6003      	str	r3, [r0, #0]
 8019df2:	bd30      	pop	{r4, r5, pc}
 8019df4:	0802bc40 	.word	0x0802bc40

08019df8 <_ZNK8touchgfx9ConstFont4findEt>:
 8019df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019dfa:	6944      	ldr	r4, [r0, #20]
 8019dfc:	b3bc      	cbz	r4, 8019e6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019dfe:	88a3      	ldrh	r3, [r4, #4]
 8019e00:	8b02      	ldrh	r2, [r0, #24]
 8019e02:	1acb      	subs	r3, r1, r3
 8019e04:	f102 32ff 	add.w	r2, r2, #4294967295
 8019e08:	d431      	bmi.n	8019e6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019e0a:	4293      	cmp	r3, r2
 8019e0c:	dd0c      	ble.n	8019e28 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019e0e:	230e      	movs	r3, #14
 8019e10:	fb03 4302 	mla	r3, r3, r2, r4
 8019e14:	889b      	ldrh	r3, [r3, #4]
 8019e16:	1a5b      	subs	r3, r3, r1
 8019e18:	1ad3      	subs	r3, r2, r3
 8019e1a:	429a      	cmp	r2, r3
 8019e1c:	db27      	blt.n	8019e6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	bfbc      	itt	lt
 8019e22:	2302      	movlt	r3, #2
 8019e24:	fb92 f3f3 	sdivlt	r3, r2, r3
 8019e28:	2500      	movs	r5, #0
 8019e2a:	260e      	movs	r6, #14
 8019e2c:	4295      	cmp	r5, r2
 8019e2e:	dc1e      	bgt.n	8019e6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019e30:	fb06 4003 	mla	r0, r6, r3, r4
 8019e34:	8887      	ldrh	r7, [r0, #4]
 8019e36:	42b9      	cmp	r1, r7
 8019e38:	d01a      	beq.n	8019e70 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8019e3a:	d20d      	bcs.n	8019e58 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8019e3c:	1e5a      	subs	r2, r3, #1
 8019e3e:	4295      	cmp	r5, r2
 8019e40:	dc15      	bgt.n	8019e6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019e42:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8019e46:	1a5b      	subs	r3, r3, r1
 8019e48:	1ad3      	subs	r3, r2, r3
 8019e4a:	429a      	cmp	r2, r3
 8019e4c:	db0f      	blt.n	8019e6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019e4e:	429d      	cmp	r5, r3
 8019e50:	ddec      	ble.n	8019e2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019e52:	1953      	adds	r3, r2, r5
 8019e54:	105b      	asrs	r3, r3, #1
 8019e56:	e7e9      	b.n	8019e2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019e58:	1c5d      	adds	r5, r3, #1
 8019e5a:	42aa      	cmp	r2, r5
 8019e5c:	db07      	blt.n	8019e6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019e5e:	8a43      	ldrh	r3, [r0, #18]
 8019e60:	1acb      	subs	r3, r1, r3
 8019e62:	442b      	add	r3, r5
 8019e64:	429d      	cmp	r5, r3
 8019e66:	dc02      	bgt.n	8019e6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019e68:	429a      	cmp	r2, r3
 8019e6a:	dadf      	bge.n	8019e2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019e6c:	e7f1      	b.n	8019e52 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8019e6e:	2000      	movs	r0, #0
 8019e70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019e72 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e74:	4604      	mov	r4, r0
 8019e76:	4617      	mov	r7, r2
 8019e78:	461e      	mov	r6, r3
 8019e7a:	b911      	cbnz	r1, 8019e82 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019e7c:	2500      	movs	r5, #0
 8019e7e:	4628      	mov	r0, r5
 8019e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e82:	290a      	cmp	r1, #10
 8019e84:	d0fa      	beq.n	8019e7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019e86:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019e8a:	4291      	cmp	r1, r2
 8019e8c:	d0f6      	beq.n	8019e7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019e8e:	f242 020b 	movw	r2, #8203	; 0x200b
 8019e92:	4291      	cmp	r1, r2
 8019e94:	d0f2      	beq.n	8019e7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019e96:	f7ff ffaf 	bl	8019df8 <_ZNK8touchgfx9ConstFont4findEt>
 8019e9a:	4605      	mov	r5, r0
 8019e9c:	b950      	cbnz	r0, 8019eb4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8019e9e:	6823      	ldr	r3, [r4, #0]
 8019ea0:	4620      	mov	r0, r4
 8019ea2:	691b      	ldr	r3, [r3, #16]
 8019ea4:	4798      	blx	r3
 8019ea6:	4601      	mov	r1, r0
 8019ea8:	4620      	mov	r0, r4
 8019eaa:	f7ff ffa5 	bl	8019df8 <_ZNK8touchgfx9ConstFont4findEt>
 8019eae:	4605      	mov	r5, r0
 8019eb0:	2800      	cmp	r0, #0
 8019eb2:	d0e3      	beq.n	8019e7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019eb4:	6823      	ldr	r3, [r4, #0]
 8019eb6:	4629      	mov	r1, r5
 8019eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019eba:	4620      	mov	r0, r4
 8019ebc:	4798      	blx	r3
 8019ebe:	6038      	str	r0, [r7, #0]
 8019ec0:	6823      	ldr	r3, [r4, #0]
 8019ec2:	4620      	mov	r0, r4
 8019ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ec6:	4798      	blx	r3
 8019ec8:	7030      	strb	r0, [r6, #0]
 8019eca:	e7d8      	b.n	8019e7e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08019ecc <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8019ecc:	2000      	movs	r0, #0
 8019ece:	4770      	bx	lr

08019ed0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8019ed0:	2001      	movs	r0, #1
 8019ed2:	4770      	bx	lr

08019ed4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8019ed4:	2002      	movs	r0, #2
 8019ed6:	4770      	bx	lr

08019ed8 <_ZN8touchgfx6ScreenD1Ev>:
 8019ed8:	4770      	bx	lr

08019eda <_ZN8touchgfx12GestureEventD1Ev>:
 8019eda:	4770      	bx	lr

08019edc <_ZN8touchgfx9DragEventD1Ev>:
 8019edc:	4770      	bx	lr

08019ede <_ZN8touchgfx10ClickEventD1Ev>:
 8019ede:	4770      	bx	lr

08019ee0 <_ZN8touchgfx10ClickEventD0Ev>:
 8019ee0:	b510      	push	{r4, lr}
 8019ee2:	4604      	mov	r4, r0
 8019ee4:	210c      	movs	r1, #12
 8019ee6:	f00f f988 	bl	80291fa <_ZdlPvj>
 8019eea:	4620      	mov	r0, r4
 8019eec:	bd10      	pop	{r4, pc}

08019eee <_ZN8touchgfx9DragEventD0Ev>:
 8019eee:	b510      	push	{r4, lr}
 8019ef0:	4604      	mov	r4, r0
 8019ef2:	2110      	movs	r1, #16
 8019ef4:	f00f f981 	bl	80291fa <_ZdlPvj>
 8019ef8:	4620      	mov	r0, r4
 8019efa:	bd10      	pop	{r4, pc}

08019efc <_ZN8touchgfx12GestureEventD0Ev>:
 8019efc:	b510      	push	{r4, lr}
 8019efe:	4604      	mov	r4, r0
 8019f00:	210c      	movs	r1, #12
 8019f02:	f00f f97a 	bl	80291fa <_ZdlPvj>
 8019f06:	4620      	mov	r0, r4
 8019f08:	bd10      	pop	{r4, pc}

08019f0a <_ZN8touchgfx6ScreenD0Ev>:
 8019f0a:	b510      	push	{r4, lr}
 8019f0c:	4604      	mov	r4, r0
 8019f0e:	213c      	movs	r1, #60	; 0x3c
 8019f10:	f00f f973 	bl	80291fa <_ZdlPvj>
 8019f14:	4620      	mov	r0, r4
 8019f16:	bd10      	pop	{r4, pc}

08019f18 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019f18:	b530      	push	{r4, r5, lr}
 8019f1a:	460d      	mov	r5, r1
 8019f1c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019f1e:	b087      	sub	sp, #28
 8019f20:	4604      	mov	r4, r0
 8019f22:	b301      	cbz	r1, 8019f66 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019f24:	a801      	add	r0, sp, #4
 8019f26:	f7ff ff2d 	bl	8019d84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019f2a:	892a      	ldrh	r2, [r5, #8]
 8019f2c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019f30:	7928      	ldrb	r0, [r5, #4]
 8019f32:	1ad2      	subs	r2, r2, r3
 8019f34:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019f36:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019f3a:	441a      	add	r2, r3
 8019f3c:	896b      	ldrh	r3, [r5, #10]
 8019f3e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019f42:	f88d 0010 	strb.w	r0, [sp, #16]
 8019f46:	1b5b      	subs	r3, r3, r5
 8019f48:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8019f4a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019f4c:	442b      	add	r3, r5
 8019f4e:	4d07      	ldr	r5, [pc, #28]	; (8019f6c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019f50:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019f54:	9503      	str	r5, [sp, #12]
 8019f56:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019f5a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019f5e:	6803      	ldr	r3, [r0, #0]
 8019f60:	a903      	add	r1, sp, #12
 8019f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019f64:	4798      	blx	r3
 8019f66:	b007      	add	sp, #28
 8019f68:	bd30      	pop	{r4, r5, pc}
 8019f6a:	bf00      	nop
 8019f6c:	0802bcc8 	.word	0x0802bcc8

08019f70 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f74:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8019f76:	b08a      	sub	sp, #40	; 0x28
 8019f78:	4604      	mov	r4, r0
 8019f7a:	460d      	mov	r5, r1
 8019f7c:	b113      	cbz	r3, 8019f84 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8019f7e:	790b      	ldrb	r3, [r1, #4]
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d044      	beq.n	801a00e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019f84:	f104 0804 	add.w	r8, r4, #4
 8019f88:	4641      	mov	r1, r8
 8019f8a:	a803      	add	r0, sp, #12
 8019f8c:	f7ff fefa 	bl	8019d84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019f90:	792b      	ldrb	r3, [r5, #4]
 8019f92:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8019f96:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8019f9a:	b983      	cbnz	r3, 8019fbe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8019f9c:	892a      	ldrh	r2, [r5, #8]
 8019f9e:	88e9      	ldrh	r1, [r5, #6]
 8019fa0:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8019fa4:	1b92      	subs	r2, r2, r6
 8019fa6:	1bc9      	subs	r1, r1, r7
 8019fa8:	9301      	str	r3, [sp, #4]
 8019faa:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8019fae:	9300      	str	r3, [sp, #0]
 8019fb0:	b212      	sxth	r2, r2
 8019fb2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8019fb6:	b209      	sxth	r1, r1
 8019fb8:	4640      	mov	r0, r8
 8019fba:	f7fc fc9d 	bl	80168f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8019fbe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019fc0:	b329      	cbz	r1, 801a00e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019fc2:	a805      	add	r0, sp, #20
 8019fc4:	f7ff fede 	bl	8019d84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019fc8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019fcc:	792b      	ldrb	r3, [r5, #4]
 8019fce:	1abf      	subs	r7, r7, r2
 8019fd0:	88ea      	ldrh	r2, [r5, #6]
 8019fd2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019fd4:	4417      	add	r7, r2
 8019fd6:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8019fd8:	f88d 3020 	strb.w	r3, [sp, #32]
 8019fdc:	4417      	add	r7, r2
 8019fde:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019fe2:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8019fe6:	1ab6      	subs	r6, r6, r2
 8019fe8:	892a      	ldrh	r2, [r5, #8]
 8019fea:	a907      	add	r1, sp, #28
 8019fec:	4416      	add	r6, r2
 8019fee:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019ff0:	4416      	add	r6, r2
 8019ff2:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8019ff6:	2600      	movs	r6, #0
 8019ff8:	4a06      	ldr	r2, [pc, #24]	; (801a014 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8019ffa:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8019ffe:	9207      	str	r2, [sp, #28]
 801a000:	6803      	ldr	r3, [r0, #0]
 801a002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a004:	4798      	blx	r3
 801a006:	792b      	ldrb	r3, [r5, #4]
 801a008:	b10b      	cbz	r3, 801a00e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a00a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801a00e:	b00a      	add	sp, #40	; 0x28
 801a010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a014:	0802bca0 	.word	0x0802bca0

0801a018 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a01c:	460c      	mov	r4, r1
 801a01e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a020:	b088      	sub	sp, #32
 801a022:	4605      	mov	r5, r0
 801a024:	2900      	cmp	r1, #0
 801a026:	d06d      	beq.n	801a104 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801a028:	4668      	mov	r0, sp
 801a02a:	f7ff feab 	bl	8019d84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a02e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801a030:	88e3      	ldrh	r3, [r4, #6]
 801a032:	f9bd 8000 	ldrsh.w	r8, [sp]
 801a036:	440b      	add	r3, r1
 801a038:	b21b      	sxth	r3, r3
 801a03a:	4543      	cmp	r3, r8
 801a03c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801a040:	db31      	blt.n	801a0a6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a042:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801a046:	44c4      	add	ip, r8
 801a048:	fa0f fc8c 	sxth.w	ip, ip
 801a04c:	4563      	cmp	r3, ip
 801a04e:	da2a      	bge.n	801a0a6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a050:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801a052:	8926      	ldrh	r6, [r4, #8]
 801a054:	4416      	add	r6, r2
 801a056:	b236      	sxth	r6, r6
 801a058:	42be      	cmp	r6, r7
 801a05a:	db24      	blt.n	801a0a6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a05c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801a060:	4438      	add	r0, r7
 801a062:	b200      	sxth	r0, r0
 801a064:	4286      	cmp	r6, r0
 801a066:	da1e      	bge.n	801a0a6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a068:	8963      	ldrh	r3, [r4, #10]
 801a06a:	4419      	add	r1, r3
 801a06c:	b209      	sxth	r1, r1
 801a06e:	4541      	cmp	r1, r8
 801a070:	db08      	blt.n	801a084 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a072:	4561      	cmp	r1, ip
 801a074:	da06      	bge.n	801a084 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a076:	89a3      	ldrh	r3, [r4, #12]
 801a078:	441a      	add	r2, r3
 801a07a:	b212      	sxth	r2, r2
 801a07c:	42ba      	cmp	r2, r7
 801a07e:	db01      	blt.n	801a084 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a080:	4282      	cmp	r2, r0
 801a082:	db10      	blt.n	801a0a6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a084:	4b21      	ldr	r3, [pc, #132]	; (801a10c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801a086:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a088:	9304      	str	r3, [sp, #16]
 801a08a:	2302      	movs	r3, #2
 801a08c:	f88d 3014 	strb.w	r3, [sp, #20]
 801a090:	2300      	movs	r3, #0
 801a092:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a096:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a09a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a09e:	6803      	ldr	r3, [r0, #0]
 801a0a0:	a904      	add	r1, sp, #16
 801a0a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0a4:	4798      	blx	r3
 801a0a6:	1d29      	adds	r1, r5, #4
 801a0a8:	a802      	add	r0, sp, #8
 801a0aa:	f7ff fe6b 	bl	8019d84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a0ae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a0b2:	88e0      	ldrh	r0, [r4, #6]
 801a0b4:	eba3 0808 	sub.w	r8, r3, r8
 801a0b8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a0bc:	7921      	ldrb	r1, [r4, #4]
 801a0be:	1bdf      	subs	r7, r3, r7
 801a0c0:	b2bb      	uxth	r3, r7
 801a0c2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801a0c6:	fa1f f888 	uxth.w	r8, r8
 801a0ca:	8922      	ldrh	r2, [r4, #8]
 801a0cc:	8967      	ldrh	r7, [r4, #10]
 801a0ce:	89a4      	ldrh	r4, [r4, #12]
 801a0d0:	4440      	add	r0, r8
 801a0d2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801a0d4:	4460      	add	r0, ip
 801a0d6:	441a      	add	r2, r3
 801a0d8:	44b8      	add	r8, r7
 801a0da:	4423      	add	r3, r4
 801a0dc:	4c0c      	ldr	r4, [pc, #48]	; (801a110 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801a0de:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a0e2:	4433      	add	r3, r6
 801a0e4:	4432      	add	r2, r6
 801a0e6:	44e0      	add	r8, ip
 801a0e8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a0ea:	f88d 1014 	strb.w	r1, [sp, #20]
 801a0ee:	9404      	str	r4, [sp, #16]
 801a0f0:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a0f4:	f8ad 801a 	strh.w	r8, [sp, #26]
 801a0f8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a0fc:	6803      	ldr	r3, [r0, #0]
 801a0fe:	a904      	add	r1, sp, #16
 801a100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a102:	4798      	blx	r3
 801a104:	b008      	add	sp, #32
 801a106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a10a:	bf00      	nop
 801a10c:	0802bca0 	.word	0x0802bca0
 801a110:	0802bcb4 	.word	0x0802bcb4

0801a114 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a116:	4604      	mov	r4, r0
 801a118:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a11c:	3201      	adds	r2, #1
 801a11e:	d112      	bne.n	801a146 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a120:	2500      	movs	r5, #0
 801a122:	9500      	str	r5, [sp, #0]
 801a124:	466d      	mov	r5, sp
 801a126:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a12a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a12e:	6803      	ldr	r3, [r0, #0]
 801a130:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a134:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a138:	4629      	mov	r1, r5
 801a13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a13c:	4798      	blx	r3
 801a13e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a142:	e884 0003 	stmia.w	r4, {r0, r1}
 801a146:	4620      	mov	r0, r4
 801a148:	b003      	add	sp, #12
 801a14a:	bd30      	pop	{r4, r5, pc}

0801a14c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a14c:	b513      	push	{r0, r1, r4, lr}
 801a14e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a152:	4604      	mov	r4, r0
 801a154:	3301      	adds	r3, #1
 801a156:	d109      	bne.n	801a16c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a158:	4601      	mov	r1, r0
 801a15a:	4668      	mov	r0, sp
 801a15c:	f7ff fe12 	bl	8019d84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a160:	f8bd 3000 	ldrh.w	r3, [sp]
 801a164:	8423      	strh	r3, [r4, #32]
 801a166:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a16a:	8463      	strh	r3, [r4, #34]	; 0x22
 801a16c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a170:	b002      	add	sp, #8
 801a172:	bd10      	pop	{r4, pc}

0801a174 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a174:	b513      	push	{r0, r1, r4, lr}
 801a176:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a17a:	4604      	mov	r4, r0
 801a17c:	3301      	adds	r3, #1
 801a17e:	d109      	bne.n	801a194 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a180:	4601      	mov	r1, r0
 801a182:	4668      	mov	r0, sp
 801a184:	f7ff fdfe 	bl	8019d84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a188:	f8bd 3000 	ldrh.w	r3, [sp]
 801a18c:	8423      	strh	r3, [r4, #32]
 801a18e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a192:	8463      	strh	r3, [r4, #34]	; 0x22
 801a194:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a198:	b002      	add	sp, #8
 801a19a:	bd10      	pop	{r4, pc}

0801a19c <_ZN8touchgfx6ScreenC1Ev>:
 801a19c:	b570      	push	{r4, r5, r6, lr}
 801a19e:	4605      	mov	r5, r0
 801a1a0:	4b16      	ldr	r3, [pc, #88]	; (801a1fc <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801a1a2:	2101      	movs	r1, #1
 801a1a4:	f845 3b04 	str.w	r3, [r5], #4
 801a1a8:	2300      	movs	r3, #0
 801a1aa:	4604      	mov	r4, r0
 801a1ac:	8103      	strh	r3, [r0, #8]
 801a1ae:	8143      	strh	r3, [r0, #10]
 801a1b0:	8183      	strh	r3, [r0, #12]
 801a1b2:	81c3      	strh	r3, [r0, #14]
 801a1b4:	8203      	strh	r3, [r0, #16]
 801a1b6:	8243      	strh	r3, [r0, #18]
 801a1b8:	8283      	strh	r3, [r0, #20]
 801a1ba:	82c3      	strh	r3, [r0, #22]
 801a1bc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801a1c0:	6203      	str	r3, [r0, #32]
 801a1c2:	8483      	strh	r3, [r0, #36]	; 0x24
 801a1c4:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a1c6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801a1ca:	4a0d      	ldr	r2, [pc, #52]	; (801a200 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a1cc:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801a1d0:	6343      	str	r3, [r0, #52]	; 0x34
 801a1d2:	4b0c      	ldr	r3, [pc, #48]	; (801a204 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a1d4:	6042      	str	r2, [r0, #4]
 801a1d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a1da:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801a1dc:	4a0a      	ldr	r2, [pc, #40]	; (801a208 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a1de:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801a1e2:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801a1e6:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a1ea:	4628      	mov	r0, r5
 801a1ec:	4798      	blx	r3
 801a1ee:	6863      	ldr	r3, [r4, #4]
 801a1f0:	4628      	mov	r0, r5
 801a1f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a1f4:	4631      	mov	r1, r6
 801a1f6:	4798      	blx	r3
 801a1f8:	4620      	mov	r0, r4
 801a1fa:	bd70      	pop	{r4, r5, r6, pc}
 801a1fc:	0802bcdc 	.word	0x0802bcdc
 801a200:	0802bacc 	.word	0x0802bacc
 801a204:	20197a36 	.word	0x20197a36
 801a208:	20197a34 	.word	0x20197a34

0801a20c <_ZN8touchgfx6Screen4drawEv>:
 801a20c:	b507      	push	{r0, r1, r2, lr}
 801a20e:	2100      	movs	r1, #0
 801a210:	4b08      	ldr	r3, [pc, #32]	; (801a234 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a212:	9100      	str	r1, [sp, #0]
 801a214:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a218:	4b07      	ldr	r3, [pc, #28]	; (801a238 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a21a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a21e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a222:	4669      	mov	r1, sp
 801a224:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a228:	6803      	ldr	r3, [r0, #0]
 801a22a:	689b      	ldr	r3, [r3, #8]
 801a22c:	4798      	blx	r3
 801a22e:	b003      	add	sp, #12
 801a230:	f85d fb04 	ldr.w	pc, [sp], #4
 801a234:	20197a34 	.word	0x20197a34
 801a238:	20197a36 	.word	0x20197a36

0801a23c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a240:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a244:	b089      	sub	sp, #36	; 0x24
 801a246:	2b00      	cmp	r3, #0
 801a248:	4680      	mov	r8, r0
 801a24a:	460c      	mov	r4, r1
 801a24c:	4615      	mov	r5, r2
 801a24e:	dd0e      	ble.n	801a26e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a250:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a254:	2b00      	cmp	r3, #0
 801a256:	dd0a      	ble.n	801a26e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a258:	4628      	mov	r0, r5
 801a25a:	f7ff ff5b 	bl	801a114 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a25e:	4621      	mov	r1, r4
 801a260:	f7fe fbd1 	bl	8018a06 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a264:	69eb      	ldr	r3, [r5, #28]
 801a266:	b928      	cbnz	r0, 801a274 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a268:	461d      	mov	r5, r3
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d1f4      	bne.n	801a258 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a26e:	b009      	add	sp, #36	; 0x24
 801a270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a274:	ae04      	add	r6, sp, #16
 801a276:	2b00      	cmp	r3, #0
 801a278:	f000 80b5 	beq.w	801a3e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a27c:	682b      	ldr	r3, [r5, #0]
 801a27e:	4629      	mov	r1, r5
 801a280:	68db      	ldr	r3, [r3, #12]
 801a282:	a802      	add	r0, sp, #8
 801a284:	4798      	blx	r3
 801a286:	4628      	mov	r0, r5
 801a288:	f7ff ff60 	bl	801a14c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a28c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a290:	4407      	add	r7, r0
 801a292:	4628      	mov	r0, r5
 801a294:	f7ff ff6e 	bl	801a174 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a298:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a29c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a2a0:	4418      	add	r0, r3
 801a2a2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a2a6:	4621      	mov	r1, r4
 801a2a8:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a2ac:	b23f      	sxth	r7, r7
 801a2ae:	4630      	mov	r0, r6
 801a2b0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a2b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a2b8:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a2bc:	f7fc fbfc 	bl	8016ab8 <_ZN8touchgfx4RectaNERKS0_>
 801a2c0:	4628      	mov	r0, r5
 801a2c2:	f7ff ff27 	bl	801a114 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a2c6:	4602      	mov	r2, r0
 801a2c8:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a2cc:	ab06      	add	r3, sp, #24
 801a2ce:	e883 0003 	stmia.w	r3, {r0, r1}
 801a2d2:	4611      	mov	r1, r2
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	f7fc fbef 	bl	8016ab8 <_ZN8touchgfx4RectaNERKS0_>
 801a2da:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a2de:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a2e2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a2e6:	4299      	cmp	r1, r3
 801a2e8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a2ec:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a2f0:	d10b      	bne.n	801a30a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a2f2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a2f6:	4552      	cmp	r2, sl
 801a2f8:	d107      	bne.n	801a30a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a2fa:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a2fe:	455a      	cmp	r2, fp
 801a300:	d103      	bne.n	801a30a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a302:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a306:	454a      	cmp	r2, r9
 801a308:	d06d      	beq.n	801a3e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a30a:	f1bb 0f00 	cmp.w	fp, #0
 801a30e:	dd65      	ble.n	801a3dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a310:	f1b9 0f00 	cmp.w	r9, #0
 801a314:	dd62      	ble.n	801a3dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a316:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a31a:	fa1f f08a 	uxth.w	r0, sl
 801a31e:	4552      	cmp	r2, sl
 801a320:	9000      	str	r0, [sp, #0]
 801a322:	da12      	bge.n	801a34a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801a324:	9301      	str	r3, [sp, #4]
 801a326:	9b00      	ldr	r3, [sp, #0]
 801a328:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a32c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a330:	1a9a      	subs	r2, r3, r2
 801a332:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a336:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a33a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a33e:	69ea      	ldr	r2, [r5, #28]
 801a340:	4631      	mov	r1, r6
 801a342:	4640      	mov	r0, r8
 801a344:	f7ff ff7a 	bl	801a23c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a348:	9b01      	ldr	r3, [sp, #4]
 801a34a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a34e:	b29f      	uxth	r7, r3
 801a350:	429a      	cmp	r2, r3
 801a352:	da0d      	bge.n	801a370 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801a354:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a358:	1aba      	subs	r2, r7, r2
 801a35a:	f8ad a012 	strh.w	sl, [sp, #18]
 801a35e:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a362:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a366:	69ea      	ldr	r2, [r5, #28]
 801a368:	4631      	mov	r1, r6
 801a36a:	4640      	mov	r0, r8
 801a36c:	f7ff ff66 	bl	801a23c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a370:	8822      	ldrh	r2, [r4, #0]
 801a372:	88a3      	ldrh	r3, [r4, #4]
 801a374:	445f      	add	r7, fp
 801a376:	4413      	add	r3, r2
 801a378:	b29b      	uxth	r3, r3
 801a37a:	b2bf      	uxth	r7, r7
 801a37c:	b23a      	sxth	r2, r7
 801a37e:	b219      	sxth	r1, r3
 801a380:	4291      	cmp	r1, r2
 801a382:	dd0d      	ble.n	801a3a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801a384:	1bdb      	subs	r3, r3, r7
 801a386:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a38a:	f8ad a012 	strh.w	sl, [sp, #18]
 801a38e:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a392:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a396:	69ea      	ldr	r2, [r5, #28]
 801a398:	4631      	mov	r1, r6
 801a39a:	4640      	mov	r0, r8
 801a39c:	f7ff ff4e 	bl	801a23c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a3a0:	88e2      	ldrh	r2, [r4, #6]
 801a3a2:	8863      	ldrh	r3, [r4, #2]
 801a3a4:	4413      	add	r3, r2
 801a3a6:	9a00      	ldr	r2, [sp, #0]
 801a3a8:	b29b      	uxth	r3, r3
 801a3aa:	444a      	add	r2, r9
 801a3ac:	fa1f f982 	uxth.w	r9, r2
 801a3b0:	fa0f f289 	sxth.w	r2, r9
 801a3b4:	b219      	sxth	r1, r3
 801a3b6:	428a      	cmp	r2, r1
 801a3b8:	da15      	bge.n	801a3e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a3ba:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a3be:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a3c2:	eba3 0309 	sub.w	r3, r3, r9
 801a3c6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a3ca:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a3ce:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a3d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a3d6:	69ea      	ldr	r2, [r5, #28]
 801a3d8:	4631      	mov	r1, r6
 801a3da:	e001      	b.n	801a3e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801a3dc:	4621      	mov	r1, r4
 801a3de:	69ea      	ldr	r2, [r5, #28]
 801a3e0:	4640      	mov	r0, r8
 801a3e2:	f7ff ff2b 	bl	801a23c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a3e6:	4628      	mov	r0, r5
 801a3e8:	f7ff fe94 	bl	801a114 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a3ec:	4633      	mov	r3, r6
 801a3ee:	4602      	mov	r2, r0
 801a3f0:	6861      	ldr	r1, [r4, #4]
 801a3f2:	6820      	ldr	r0, [r4, #0]
 801a3f4:	c303      	stmia	r3!, {r0, r1}
 801a3f6:	4611      	mov	r1, r2
 801a3f8:	4630      	mov	r0, r6
 801a3fa:	f7fc fb5d 	bl	8016ab8 <_ZN8touchgfx4RectaNERKS0_>
 801a3fe:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a402:	2b00      	cmp	r3, #0
 801a404:	f77f af33 	ble.w	801a26e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a408:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	f77f af2e 	ble.w	801a26e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a412:	4628      	mov	r0, r5
 801a414:	f7ff fe9a 	bl	801a14c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a418:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a41c:	1a18      	subs	r0, r3, r0
 801a41e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a422:	4628      	mov	r0, r5
 801a424:	f7ff fea6 	bl	801a174 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a428:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a42c:	4631      	mov	r1, r6
 801a42e:	1a18      	subs	r0, r3, r0
 801a430:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a434:	682b      	ldr	r3, [r5, #0]
 801a436:	4628      	mov	r0, r5
 801a438:	689b      	ldr	r3, [r3, #8]
 801a43a:	4798      	blx	r3
 801a43c:	e717      	b.n	801a26e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801a43e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a43e:	b570      	push	{r4, r5, r6, lr}
 801a440:	2300      	movs	r3, #0
 801a442:	460c      	mov	r4, r1
 801a444:	b086      	sub	sp, #24
 801a446:	1d06      	adds	r6, r0, #4
 801a448:	4631      	mov	r1, r6
 801a44a:	4605      	mov	r5, r0
 801a44c:	a802      	add	r0, sp, #8
 801a44e:	9301      	str	r3, [sp, #4]
 801a450:	f7ff fc98 	bl	8019d84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a454:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a458:	8822      	ldrh	r2, [r4, #0]
 801a45a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801a45e:	1ad2      	subs	r2, r2, r3
 801a460:	8863      	ldrh	r3, [r4, #2]
 801a462:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a466:	1a5b      	subs	r3, r3, r1
 801a468:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801a46c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a470:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a474:	f8ad 1016 	strh.w	r1, [sp, #22]
 801a478:	aa01      	add	r2, sp, #4
 801a47a:	a904      	add	r1, sp, #16
 801a47c:	4630      	mov	r0, r6
 801a47e:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a482:	f7fc fbf1 	bl	8016c68 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a486:	9a01      	ldr	r2, [sp, #4]
 801a488:	b11a      	cbz	r2, 801a492 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801a48a:	4621      	mov	r1, r4
 801a48c:	4628      	mov	r0, r5
 801a48e:	f7ff fed5 	bl	801a23c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a492:	b006      	add	sp, #24
 801a494:	bd70      	pop	{r4, r5, r6, pc}

0801a496 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a496:	b530      	push	{r4, r5, lr}
 801a498:	4602      	mov	r2, r0
 801a49a:	b085      	sub	sp, #20
 801a49c:	460d      	mov	r5, r1
 801a49e:	466b      	mov	r3, sp
 801a4a0:	4604      	mov	r4, r0
 801a4a2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a4a6:	6851      	ldr	r1, [r2, #4]
 801a4a8:	c303      	stmia	r3!, {r0, r1}
 801a4aa:	4629      	mov	r1, r5
 801a4ac:	4668      	mov	r0, sp
 801a4ae:	f7fc fb03 	bl	8016ab8 <_ZN8touchgfx4RectaNERKS0_>
 801a4b2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a4b6:	b12b      	cbz	r3, 801a4c4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801a4b8:	4669      	mov	r1, sp
 801a4ba:	4620      	mov	r0, r4
 801a4bc:	f7ff ffbf 	bl	801a43e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a4c0:	b005      	add	sp, #20
 801a4c2:	bd30      	pop	{r4, r5, pc}
 801a4c4:	3404      	adds	r4, #4
 801a4c6:	4621      	mov	r1, r4
 801a4c8:	a802      	add	r0, sp, #8
 801a4ca:	f7ff fc5b 	bl	8019d84 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a4ce:	f8bd 3000 	ldrh.w	r3, [sp]
 801a4d2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a4d6:	4669      	mov	r1, sp
 801a4d8:	1a9b      	subs	r3, r3, r2
 801a4da:	f8ad 3000 	strh.w	r3, [sp]
 801a4de:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a4e2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a4e6:	4620      	mov	r0, r4
 801a4e8:	1a9b      	subs	r3, r3, r2
 801a4ea:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a4ee:	f7fc fb82 	bl	8016bf6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a4f2:	e7e5      	b.n	801a4c0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801a4f4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a4f4:	460b      	mov	r3, r1
 801a4f6:	680a      	ldr	r2, [r1, #0]
 801a4f8:	1d01      	adds	r1, r0, #4
 801a4fa:	6992      	ldr	r2, [r2, #24]
 801a4fc:	4618      	mov	r0, r3
 801a4fe:	4710      	bx	r2

0801a500 <_ZN8touchgfx12TextProviderC1Ev>:
 801a500:	b538      	push	{r3, r4, r5, lr}
 801a502:	2500      	movs	r5, #0
 801a504:	2302      	movs	r3, #2
 801a506:	4604      	mov	r4, r0
 801a508:	e9c0 5500 	strd	r5, r5, [r0]
 801a50c:	7403      	strb	r3, [r0, #16]
 801a50e:	6145      	str	r5, [r0, #20]
 801a510:	7605      	strb	r5, [r0, #24]
 801a512:	83c5      	strh	r5, [r0, #30]
 801a514:	8405      	strh	r5, [r0, #32]
 801a516:	86c5      	strh	r5, [r0, #54]	; 0x36
 801a518:	8705      	strh	r5, [r0, #56]	; 0x38
 801a51a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801a51c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801a520:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801a524:	220e      	movs	r2, #14
 801a526:	4629      	mov	r1, r5
 801a528:	304c      	adds	r0, #76	; 0x4c
 801a52a:	f00e ff11 	bl	8029350 <memset>
 801a52e:	2301      	movs	r3, #1
 801a530:	4620      	mov	r0, r4
 801a532:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801a536:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a53a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801a53e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801a542:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801a546:	f7e9 fb01 	bl	8003b4c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a54a:	4620      	mov	r0, r4
 801a54c:	bd38      	pop	{r3, r4, r5, pc}

0801a54e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a54e:	b530      	push	{r4, r5, lr}
 801a550:	2500      	movs	r5, #0
 801a552:	2401      	movs	r4, #1
 801a554:	6843      	ldr	r3, [r0, #4]
 801a556:	b913      	cbnz	r3, 801a55e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a558:	6803      	ldr	r3, [r0, #0]
 801a55a:	b313      	cbz	r3, 801a5a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a55c:	6043      	str	r3, [r0, #4]
 801a55e:	7e03      	ldrb	r3, [r0, #24]
 801a560:	b143      	cbz	r3, 801a574 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a562:	6943      	ldr	r3, [r0, #20]
 801a564:	b12b      	cbz	r3, 801a572 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a566:	881a      	ldrh	r2, [r3, #0]
 801a568:	b11a      	cbz	r2, 801a572 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a56a:	1c9a      	adds	r2, r3, #2
 801a56c:	6142      	str	r2, [r0, #20]
 801a56e:	8818      	ldrh	r0, [r3, #0]
 801a570:	bd30      	pop	{r4, r5, pc}
 801a572:	7605      	strb	r5, [r0, #24]
 801a574:	6843      	ldr	r3, [r0, #4]
 801a576:	8819      	ldrh	r1, [r3, #0]
 801a578:	b199      	cbz	r1, 801a5a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a57a:	1c9a      	adds	r2, r3, #2
 801a57c:	2902      	cmp	r1, #2
 801a57e:	6042      	str	r2, [r0, #4]
 801a580:	d1f5      	bne.n	801a56e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a582:	7c03      	ldrb	r3, [r0, #16]
 801a584:	2b01      	cmp	r3, #1
 801a586:	d8e5      	bhi.n	801a554 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a588:	1c5a      	adds	r2, r3, #1
 801a58a:	7402      	strb	r2, [r0, #16]
 801a58c:	3302      	adds	r3, #2
 801a58e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801a592:	6143      	str	r3, [r0, #20]
 801a594:	2b00      	cmp	r3, #0
 801a596:	d0dd      	beq.n	801a554 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a598:	881b      	ldrh	r3, [r3, #0]
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d0da      	beq.n	801a554 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a59e:	7604      	strb	r4, [r0, #24]
 801a5a0:	e7d8      	b.n	801a554 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a5a2:	2000      	movs	r0, #0
 801a5a4:	e7e4      	b.n	801a570 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a5a6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801a5a6:	6001      	str	r1, [r0, #0]
 801a5a8:	2100      	movs	r1, #0
 801a5aa:	b430      	push	{r4, r5}
 801a5ac:	6041      	str	r1, [r0, #4]
 801a5ae:	6815      	ldr	r5, [r2, #0]
 801a5b0:	6085      	str	r5, [r0, #8]
 801a5b2:	6852      	ldr	r2, [r2, #4]
 801a5b4:	6443      	str	r3, [r0, #68]	; 0x44
 801a5b6:	9b02      	ldr	r3, [sp, #8]
 801a5b8:	60c2      	str	r2, [r0, #12]
 801a5ba:	7401      	strb	r1, [r0, #16]
 801a5bc:	6141      	str	r1, [r0, #20]
 801a5be:	7601      	strb	r1, [r0, #24]
 801a5c0:	8701      	strh	r1, [r0, #56]	; 0x38
 801a5c2:	8401      	strh	r1, [r0, #32]
 801a5c4:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801a5c8:	6483      	str	r3, [r0, #72]	; 0x48
 801a5ca:	bc30      	pop	{r4, r5}
 801a5cc:	f7e9 babe 	b.w	8003b4c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a5d0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5d2:	4605      	mov	r5, r0
 801a5d4:	4608      	mov	r0, r1
 801a5d6:	b1e9      	cbz	r1, 801a614 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801a5d8:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801a5dc:	460b      	mov	r3, r1
 801a5de:	4622      	mov	r2, r4
 801a5e0:	f101 0708 	add.w	r7, r1, #8
 801a5e4:	4626      	mov	r6, r4
 801a5e6:	6818      	ldr	r0, [r3, #0]
 801a5e8:	6859      	ldr	r1, [r3, #4]
 801a5ea:	3308      	adds	r3, #8
 801a5ec:	c603      	stmia	r6!, {r0, r1}
 801a5ee:	42bb      	cmp	r3, r7
 801a5f0:	4634      	mov	r4, r6
 801a5f2:	d1f7      	bne.n	801a5e4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a5f4:	6818      	ldr	r0, [r3, #0]
 801a5f6:	6030      	str	r0, [r6, #0]
 801a5f8:	4610      	mov	r0, r2
 801a5fa:	889b      	ldrh	r3, [r3, #4]
 801a5fc:	80b3      	strh	r3, [r6, #4]
 801a5fe:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801a602:	015b      	lsls	r3, r3, #5
 801a604:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a608:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801a60c:	430b      	orrs	r3, r1
 801a60e:	425b      	negs	r3, r3
 801a610:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a614:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a616 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a616:	b538      	push	{r3, r4, r5, lr}
 801a618:	460c      	mov	r4, r1
 801a61a:	6811      	ldr	r1, [r2, #0]
 801a61c:	4610      	mov	r0, r2
 801a61e:	68cd      	ldr	r5, [r1, #12]
 801a620:	4619      	mov	r1, r3
 801a622:	47a8      	blx	r5
 801a624:	2800      	cmp	r0, #0
 801a626:	bf08      	it	eq
 801a628:	4620      	moveq	r0, r4
 801a62a:	bd38      	pop	{r3, r4, r5, pc}

0801a62c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a62e:	4604      	mov	r4, r0
 801a630:	4615      	mov	r5, r2
 801a632:	4608      	mov	r0, r1
 801a634:	b93a      	cbnz	r2, 801a646 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a636:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801a63a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801a63e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801a642:	4628      	mov	r0, r5
 801a644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a646:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801a64a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801a64e:	8893      	ldrh	r3, [r2, #4]
 801a650:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801a654:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a658:	79ee      	ldrb	r6, [r5, #7]
 801a65a:	4316      	orrs	r6, r2
 801a65c:	19da      	adds	r2, r3, r7
 801a65e:	b291      	uxth	r1, r2
 801a660:	291d      	cmp	r1, #29
 801a662:	b2b7      	uxth	r7, r6
 801a664:	d879      	bhi.n	801a75a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 801a666:	2201      	movs	r2, #1
 801a668:	408a      	lsls	r2, r1
 801a66a:	4974      	ldr	r1, [pc, #464]	; (801a83c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 801a66c:	10f6      	asrs	r6, r6, #3
 801a66e:	420a      	tst	r2, r1
 801a670:	d12d      	bne.n	801a6ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 801a672:	f412 7f60 	tst.w	r2, #896	; 0x380
 801a676:	d070      	beq.n	801a75a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 801a678:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801a67c:	462b      	mov	r3, r5
 801a67e:	f105 0e08 	add.w	lr, r5, #8
 801a682:	4615      	mov	r5, r2
 801a684:	4694      	mov	ip, r2
 801a686:	6818      	ldr	r0, [r3, #0]
 801a688:	6859      	ldr	r1, [r3, #4]
 801a68a:	3308      	adds	r3, #8
 801a68c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a690:	4573      	cmp	r3, lr
 801a692:	4662      	mov	r2, ip
 801a694:	d1f6      	bne.n	801a684 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801a696:	6818      	ldr	r0, [r3, #0]
 801a698:	f8cc 0000 	str.w	r0, [ip]
 801a69c:	889b      	ldrh	r3, [r3, #4]
 801a69e:	f8ac 3004 	strh.w	r3, [ip, #4]
 801a6a2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801a6a6:	b2b3      	uxth	r3, r6
 801a6a8:	1aca      	subs	r2, r1, r3
 801a6aa:	b292      	uxth	r2, r2
 801a6ac:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801a6b0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801a6b4:	10d2      	asrs	r2, r2, #3
 801a6b6:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801a6ba:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801a6be:	4302      	orrs	r2, r0
 801a6c0:	1bcf      	subs	r7, r1, r7
 801a6c2:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801a6c6:	1afb      	subs	r3, r7, r3
 801a6c8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801a6cc:	e7b9      	b.n	801a642 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a6ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a6d0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a6d4:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801a6d6:	f640 6333 	movw	r3, #3635	; 0xe33
 801a6da:	4299      	cmp	r1, r3
 801a6dc:	d110      	bne.n	801a700 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 801a6de:	6803      	ldr	r3, [r0, #0]
 801a6e0:	68db      	ldr	r3, [r3, #12]
 801a6e2:	4798      	blx	r3
 801a6e4:	7b41      	ldrb	r1, [r0, #13]
 801a6e6:	00cb      	lsls	r3, r1, #3
 801a6e8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a6ec:	7a03      	ldrb	r3, [r0, #8]
 801a6ee:	0648      	lsls	r0, r1, #25
 801a6f0:	ea43 0302 	orr.w	r3, r3, r2
 801a6f4:	bf44      	itt	mi
 801a6f6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a6fa:	b21b      	sxthmi	r3, r3
 801a6fc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a700:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801a704:	462a      	mov	r2, r5
 801a706:	443b      	add	r3, r7
 801a708:	4433      	add	r3, r6
 801a70a:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801a70e:	f105 0c08 	add.w	ip, r5, #8
 801a712:	4635      	mov	r5, r6
 801a714:	b29b      	uxth	r3, r3
 801a716:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a71a:	4637      	mov	r7, r6
 801a71c:	6810      	ldr	r0, [r2, #0]
 801a71e:	6851      	ldr	r1, [r2, #4]
 801a720:	3208      	adds	r2, #8
 801a722:	c703      	stmia	r7!, {r0, r1}
 801a724:	4562      	cmp	r2, ip
 801a726:	463e      	mov	r6, r7
 801a728:	d1f7      	bne.n	801a71a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 801a72a:	6810      	ldr	r0, [r2, #0]
 801a72c:	6038      	str	r0, [r7, #0]
 801a72e:	8892      	ldrh	r2, [r2, #4]
 801a730:	80ba      	strh	r2, [r7, #4]
 801a732:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a736:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a73a:	10db      	asrs	r3, r3, #3
 801a73c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a740:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a744:	4313      	orrs	r3, r2
 801a746:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a74a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801a74e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801a752:	1a9b      	subs	r3, r3, r2
 801a754:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801a758:	e773      	b.n	801a642 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a75a:	f640 611b 	movw	r1, #3611	; 0xe1b
 801a75e:	f023 0204 	bic.w	r2, r3, #4
 801a762:	428a      	cmp	r2, r1
 801a764:	d003      	beq.n	801a76e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801a766:	f640 621d 	movw	r2, #3613	; 0xe1d
 801a76a:	4293      	cmp	r3, r2
 801a76c:	d120      	bne.n	801a7b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 801a76e:	3b01      	subs	r3, #1
 801a770:	4602      	mov	r2, r0
 801a772:	b29b      	uxth	r3, r3
 801a774:	4629      	mov	r1, r5
 801a776:	4620      	mov	r0, r4
 801a778:	f7ff ff4d 	bl	801a616 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a77c:	7b41      	ldrb	r1, [r0, #13]
 801a77e:	00cb      	lsls	r3, r1, #3
 801a780:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a784:	7a03      	ldrb	r3, [r0, #8]
 801a786:	0649      	lsls	r1, r1, #25
 801a788:	ea43 0302 	orr.w	r3, r3, r2
 801a78c:	bf44      	itt	mi
 801a78e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a792:	b21b      	sxthmi	r3, r3
 801a794:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a798:	7b6b      	ldrb	r3, [r5, #13]
 801a79a:	7aaa      	ldrb	r2, [r5, #10]
 801a79c:	005b      	lsls	r3, r3, #1
 801a79e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a7a2:	4313      	orrs	r3, r2
 801a7a4:	115a      	asrs	r2, r3, #5
 801a7a6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a7aa:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801a7ae:	e036      	b.n	801a81e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 801a7b0:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801a7b4:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801a7b8:	7a2a      	ldrb	r2, [r5, #8]
 801a7ba:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801a7be:	ea42 0201 	orr.w	r2, r2, r1
 801a7c2:	f640 6109 	movw	r1, #3593	; 0xe09
 801a7c6:	bf1c      	itt	ne
 801a7c8:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801a7cc:	b212      	sxthne	r2, r2
 801a7ce:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801a7d2:	f023 0210 	bic.w	r2, r3, #16
 801a7d6:	428a      	cmp	r2, r1
 801a7d8:	d003      	beq.n	801a7e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 801a7da:	f640 6213 	movw	r2, #3603	; 0xe13
 801a7de:	4293      	cmp	r3, r2
 801a7e0:	d12a      	bne.n	801a838 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 801a7e2:	7b6e      	ldrb	r6, [r5, #13]
 801a7e4:	4629      	mov	r1, r5
 801a7e6:	0076      	lsls	r6, r6, #1
 801a7e8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a7ec:	7aae      	ldrb	r6, [r5, #10]
 801a7ee:	4316      	orrs	r6, r2
 801a7f0:	f640 6213 	movw	r2, #3603	; 0xe13
 801a7f4:	4293      	cmp	r3, r2
 801a7f6:	bf18      	it	ne
 801a7f8:	f103 33ff 	addne.w	r3, r3, #4294967295
 801a7fc:	4602      	mov	r2, r0
 801a7fe:	bf14      	ite	ne
 801a800:	b29b      	uxthne	r3, r3
 801a802:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a806:	4620      	mov	r0, r4
 801a808:	f7ff ff05 	bl	801a616 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a80c:	7b43      	ldrb	r3, [r0, #13]
 801a80e:	7a82      	ldrb	r2, [r0, #10]
 801a810:	005b      	lsls	r3, r3, #1
 801a812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a816:	4313      	orrs	r3, r2
 801a818:	1af6      	subs	r6, r6, r3
 801a81a:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801a81e:	7b69      	ldrb	r1, [r5, #13]
 801a820:	00cb      	lsls	r3, r1, #3
 801a822:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a826:	7a2b      	ldrb	r3, [r5, #8]
 801a828:	4313      	orrs	r3, r2
 801a82a:	064a      	lsls	r2, r1, #25
 801a82c:	bf44      	itt	mi
 801a82e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a832:	b21b      	sxthmi	r3, r3
 801a834:	1bdb      	subs	r3, r3, r7
 801a836:	e747      	b.n	801a6c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 801a838:	2300      	movs	r3, #0
 801a83a:	e7b6      	b.n	801a7aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 801a83c:	3fc00079 	.word	0x3fc00079

0801a840 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801a840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a844:	4604      	mov	r4, r0
 801a846:	b942      	cbnz	r2, 801a85a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801a848:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a84c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801a850:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801a854:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801a858:	e047      	b.n	801a8ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801a85a:	7b51      	ldrb	r1, [r2, #13]
 801a85c:	8893      	ldrh	r3, [r2, #4]
 801a85e:	010d      	lsls	r5, r1, #4
 801a860:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801a864:	79d5      	ldrb	r5, [r2, #7]
 801a866:	4305      	orrs	r5, r0
 801a868:	2d04      	cmp	r5, #4
 801a86a:	bfcc      	ite	gt
 801a86c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801a870:	f04f 0e01 	movle.w	lr, #1
 801a874:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801a878:	f200 80ab 	bhi.w	801a9d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801a87c:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801a880:	4283      	cmp	r3, r0
 801a882:	d216      	bcs.n	801a8b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a884:	f240 605b 	movw	r0, #1627	; 0x65b
 801a888:	4283      	cmp	r3, r0
 801a88a:	d859      	bhi.n	801a940 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801a88c:	f240 6057 	movw	r0, #1623	; 0x657
 801a890:	4283      	cmp	r3, r0
 801a892:	d20e      	bcs.n	801a8b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a894:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801a898:	d24a      	bcs.n	801a930 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801a89a:	f240 604e 	movw	r0, #1614	; 0x64e
 801a89e:	4283      	cmp	r3, r0
 801a8a0:	d207      	bcs.n	801a8b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a8a2:	f240 601a 	movw	r0, #1562	; 0x61a
 801a8a6:	4283      	cmp	r3, r0
 801a8a8:	d02a      	beq.n	801a900 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a8aa:	d821      	bhi.n	801a8f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801a8ac:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801a8b0:	d35b      	bcc.n	801a96a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a8b2:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801a8b6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a8ba:	f040 80d0 	bne.w	801aa5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801a8be:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801a8c2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a8c6:	f040 80ca 	bne.w	801aa5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801a8ca:	00cb      	lsls	r3, r1, #3
 801a8cc:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a8d0:	7a13      	ldrb	r3, [r2, #8]
 801a8d2:	0649      	lsls	r1, r1, #25
 801a8d4:	ea43 0300 	orr.w	r3, r3, r0
 801a8d8:	bf44      	itt	mi
 801a8da:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a8de:	b21b      	sxthmi	r3, r3
 801a8e0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a8e4:	1b5d      	subs	r5, r3, r5
 801a8e6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a8ea:	4610      	mov	r0, r2
 801a8ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a8f0:	f240 604b 	movw	r0, #1611	; 0x64b
 801a8f4:	4283      	cmp	r3, r0
 801a8f6:	d338      	bcc.n	801a96a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a8f8:	f240 604c 	movw	r0, #1612	; 0x64c
 801a8fc:	4283      	cmp	r3, r0
 801a8fe:	d9d8      	bls.n	801a8b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a900:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801a904:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801a908:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a90c:	f040 80f2 	bne.w	801aaf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801a910:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a914:	f040 80ee 	bne.w	801aaf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801a918:	00cb      	lsls	r3, r1, #3
 801a91a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a91e:	7a13      	ldrb	r3, [r2, #8]
 801a920:	064e      	lsls	r6, r1, #25
 801a922:	ea43 0300 	orr.w	r3, r3, r0
 801a926:	bf44      	itt	mi
 801a928:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a92c:	b21b      	sxthmi	r3, r3
 801a92e:	e7d9      	b.n	801a8e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801a930:	f240 6054 	movw	r0, #1620	; 0x654
 801a934:	4283      	cmp	r3, r0
 801a936:	d8e3      	bhi.n	801a900 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a938:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801a93c:	d9e0      	bls.n	801a900 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a93e:	e7b8      	b.n	801a8b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a940:	f240 6074 	movw	r0, #1652	; 0x674
 801a944:	4283      	cmp	r3, r0
 801a946:	d0b4      	beq.n	801a8b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a948:	d82d      	bhi.n	801a9a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801a94a:	f240 605e 	movw	r0, #1630	; 0x65e
 801a94e:	4283      	cmp	r3, r0
 801a950:	d804      	bhi.n	801a95c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801a952:	f240 605d 	movw	r0, #1629	; 0x65d
 801a956:	4283      	cmp	r3, r0
 801a958:	d3d2      	bcc.n	801a900 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a95a:	e7aa      	b.n	801a8b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a95c:	f240 605f 	movw	r0, #1631	; 0x65f
 801a960:	4283      	cmp	r3, r0
 801a962:	d0cd      	beq.n	801a900 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a964:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801a968:	d0a3      	beq.n	801a8b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a96a:	00cb      	lsls	r3, r1, #3
 801a96c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a970:	7a13      	ldrb	r3, [r2, #8]
 801a972:	0649      	lsls	r1, r1, #25
 801a974:	ea43 0300 	orr.w	r3, r3, r0
 801a978:	bf44      	itt	mi
 801a97a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a97e:	b21b      	sxthmi	r3, r3
 801a980:	1b5d      	subs	r5, r3, r5
 801a982:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a986:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a98a:	7b53      	ldrb	r3, [r2, #13]
 801a98c:	015b      	lsls	r3, r3, #5
 801a98e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a992:	7993      	ldrb	r3, [r2, #6]
 801a994:	430b      	orrs	r3, r1
 801a996:	2105      	movs	r1, #5
 801a998:	005b      	lsls	r3, r3, #1
 801a99a:	fb93 f3f1 	sdiv	r3, r3, r1
 801a99e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801a9a2:	440b      	add	r3, r1
 801a9a4:	e756      	b.n	801a854 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801a9a6:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801a9aa:	4283      	cmp	r3, r0
 801a9ac:	d809      	bhi.n	801a9c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801a9ae:	f240 60df 	movw	r0, #1759	; 0x6df
 801a9b2:	4283      	cmp	r3, r0
 801a9b4:	f4bf af7d 	bcs.w	801a8b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a9b8:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801a9bc:	2b05      	cmp	r3, #5
 801a9be:	d8d4      	bhi.n	801a96a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a9c0:	e777      	b.n	801a8b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a9c2:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801a9c6:	4283      	cmp	r3, r0
 801a9c8:	d09a      	beq.n	801a900 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a9ca:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801a9ce:	4283      	cmp	r3, r0
 801a9d0:	e7ca      	b.n	801a968 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a9d2:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801a9d6:	d22b      	bcs.n	801aa30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801a9d8:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801a9dc:	4283      	cmp	r3, r0
 801a9de:	d28f      	bcs.n	801a900 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a9e0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a9e4:	4283      	cmp	r3, r0
 801a9e6:	d816      	bhi.n	801aa16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801a9e8:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801a9ec:	4283      	cmp	r3, r0
 801a9ee:	f4bf af60 	bcs.w	801a8b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a9f2:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801a9f6:	4283      	cmp	r3, r0
 801a9f8:	d80a      	bhi.n	801aa10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801a9fa:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801a9fe:	4283      	cmp	r3, r0
 801aa00:	f4bf af57 	bcs.w	801a8b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801aa04:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801aa08:	4283      	cmp	r3, r0
 801aa0a:	f43f af79 	beq.w	801a900 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801aa0e:	e7ac      	b.n	801a96a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801aa10:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801aa14:	e7f8      	b.n	801aa08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801aa16:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801aa1a:	4283      	cmp	r3, r0
 801aa1c:	d802      	bhi.n	801aa24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801aa1e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801aa22:	e798      	b.n	801a956 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801aa24:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801aa28:	4283      	cmp	r3, r0
 801aa2a:	f47f af42 	bne.w	801a8b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801aa2e:	e767      	b.n	801a900 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801aa30:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801aa34:	4283      	cmp	r3, r0
 801aa36:	f43f af63 	beq.w	801a900 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801aa3a:	d802      	bhi.n	801aa42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801aa3c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801aa40:	e7f2      	b.n	801aa28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801aa42:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801aa46:	4283      	cmp	r3, r0
 801aa48:	d805      	bhi.n	801aa56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801aa4a:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801aa4e:	4283      	cmp	r3, r0
 801aa50:	f4ff af2f 	bcc.w	801a8b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801aa54:	e754      	b.n	801a900 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801aa56:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801aa5a:	4283      	cmp	r3, r0
 801aa5c:	e7af      	b.n	801a9be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801aa5e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801aa62:	4617      	mov	r7, r2
 801aa64:	4666      	mov	r6, ip
 801aa66:	f102 0808 	add.w	r8, r2, #8
 801aa6a:	46e6      	mov	lr, ip
 801aa6c:	6838      	ldr	r0, [r7, #0]
 801aa6e:	6879      	ldr	r1, [r7, #4]
 801aa70:	3708      	adds	r7, #8
 801aa72:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801aa76:	4547      	cmp	r7, r8
 801aa78:	46f4      	mov	ip, lr
 801aa7a:	d1f6      	bne.n	801aa6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801aa7c:	6838      	ldr	r0, [r7, #0]
 801aa7e:	f8ce 0000 	str.w	r0, [lr]
 801aa82:	88b9      	ldrh	r1, [r7, #4]
 801aa84:	f8ae 1004 	strh.w	r1, [lr, #4]
 801aa88:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801aa8c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801aa90:	d009      	beq.n	801aaa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801aa92:	7b51      	ldrb	r1, [r2, #13]
 801aa94:	7992      	ldrb	r2, [r2, #6]
 801aa96:	0149      	lsls	r1, r1, #5
 801aa98:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801aa9c:	4311      	orrs	r1, r2
 801aa9e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801aaa2:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801aaa6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801aaaa:	b2ad      	uxth	r5, r5
 801aaac:	d00d      	beq.n	801aaca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 801aaae:	442b      	add	r3, r5
 801aab0:	b29b      	uxth	r3, r3
 801aab2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801aab6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801aaba:	10db      	asrs	r3, r3, #3
 801aabc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801aac0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801aac4:	4313      	orrs	r3, r2
 801aac6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801aaca:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801aace:	00cb      	lsls	r3, r1, #3
 801aad0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801aad4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801aad8:	064f      	lsls	r7, r1, #25
 801aada:	ea43 0302 	orr.w	r3, r3, r2
 801aade:	bf44      	itt	mi
 801aae0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aae4:	b21b      	sxthmi	r3, r3
 801aae6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801aaea:	1b5b      	subs	r3, r3, r5
 801aaec:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801aaf0:	4632      	mov	r2, r6
 801aaf2:	e6fa      	b.n	801a8ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801aaf4:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801aaf8:	4617      	mov	r7, r2
 801aafa:	4666      	mov	r6, ip
 801aafc:	f102 0908 	add.w	r9, r2, #8
 801ab00:	46e0      	mov	r8, ip
 801ab02:	6838      	ldr	r0, [r7, #0]
 801ab04:	6879      	ldr	r1, [r7, #4]
 801ab06:	3708      	adds	r7, #8
 801ab08:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801ab0c:	454f      	cmp	r7, r9
 801ab0e:	46c4      	mov	ip, r8
 801ab10:	d1f6      	bne.n	801ab00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801ab12:	6838      	ldr	r0, [r7, #0]
 801ab14:	f8c8 0000 	str.w	r0, [r8]
 801ab18:	88b9      	ldrh	r1, [r7, #4]
 801ab1a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801ab1e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801ab22:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ab26:	d009      	beq.n	801ab3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801ab28:	7b51      	ldrb	r1, [r2, #13]
 801ab2a:	7992      	ldrb	r2, [r2, #6]
 801ab2c:	0149      	lsls	r1, r1, #5
 801ab2e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ab32:	4311      	orrs	r1, r2
 801ab34:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ab38:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801ab3c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ab40:	d00e      	beq.n	801ab60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801ab42:	eba3 030e 	sub.w	r3, r3, lr
 801ab46:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801ab4a:	b29b      	uxth	r3, r3
 801ab4c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801ab50:	10db      	asrs	r3, r3, #3
 801ab52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ab56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ab5a:	4313      	orrs	r3, r2
 801ab5c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801ab60:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801ab64:	00cb      	lsls	r3, r1, #3
 801ab66:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ab6a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801ab6e:	0648      	lsls	r0, r1, #25
 801ab70:	ea43 0302 	orr.w	r3, r3, r2
 801ab74:	bf44      	itt	mi
 801ab76:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ab7a:	b21b      	sxthmi	r3, r3
 801ab7c:	1b5d      	subs	r5, r3, r5
 801ab7e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801ab82:	e7b5      	b.n	801aaf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801ab84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801ab84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab88:	461e      	mov	r6, r3
 801ab8a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ab8c:	4604      	mov	r4, r0
 801ab8e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ab92:	4617      	mov	r7, r2
 801ab94:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801ab98:	f7e8 ff96 	bl	8003ac8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ab9c:	4605      	mov	r5, r0
 801ab9e:	b918      	cbnz	r0, 801aba8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801aba0:	6030      	str	r0, [r6, #0]
 801aba2:	4628      	mov	r0, r5
 801aba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aba8:	683b      	ldr	r3, [r7, #0]
 801abaa:	4601      	mov	r1, r0
 801abac:	68db      	ldr	r3, [r3, #12]
 801abae:	4638      	mov	r0, r7
 801abb0:	4798      	blx	r3
 801abb2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801abb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801abba:	4602      	mov	r2, r0
 801abbc:	6030      	str	r0, [r6, #0]
 801abbe:	d213      	bcs.n	801abe8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801abc0:	4643      	mov	r3, r8
 801abc2:	4639      	mov	r1, r7
 801abc4:	4620      	mov	r0, r4
 801abc6:	f7ff fe3b 	bl	801a840 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801abca:	6030      	str	r0, [r6, #0]
 801abcc:	6833      	ldr	r3, [r6, #0]
 801abce:	b143      	cbz	r3, 801abe2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801abd0:	7b5a      	ldrb	r2, [r3, #13]
 801abd2:	7a9b      	ldrb	r3, [r3, #10]
 801abd4:	0052      	lsls	r2, r2, #1
 801abd6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801abda:	4313      	orrs	r3, r2
 801abdc:	bf0c      	ite	eq
 801abde:	2301      	moveq	r3, #1
 801abe0:	2300      	movne	r3, #0
 801abe2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801abe6:	e7dc      	b.n	801aba2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801abe8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801abec:	b29b      	uxth	r3, r3
 801abee:	2b7f      	cmp	r3, #127	; 0x7f
 801abf0:	d804      	bhi.n	801abfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801abf2:	4639      	mov	r1, r7
 801abf4:	4620      	mov	r0, r4
 801abf6:	f7ff fd19 	bl	801a62c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801abfa:	e7e6      	b.n	801abca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801abfc:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	d0e3      	beq.n	801abcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801ac04:	f640 1302 	movw	r3, #2306	; 0x902
 801ac08:	429d      	cmp	r5, r3
 801ac0a:	d1df      	bne.n	801abcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801ac0c:	4601      	mov	r1, r0
 801ac0e:	4620      	mov	r0, r4
 801ac10:	f7ff fcde 	bl	801a5d0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ac14:	e7d9      	b.n	801abca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801ac16 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801ac16:	b510      	push	{r4, lr}
 801ac18:	4604      	mov	r4, r0
 801ac1a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801ac1e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ac20:	b1f1      	cbz	r1, 801ac60 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801ac22:	2b0a      	cmp	r3, #10
 801ac24:	d02f      	beq.n	801ac86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801ac26:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801ac28:	3901      	subs	r1, #1
 801ac2a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801ac2e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801ac30:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801ac34:	1c51      	adds	r1, r2, #1
 801ac36:	b289      	uxth	r1, r1
 801ac38:	2901      	cmp	r1, #1
 801ac3a:	bf84      	itt	hi
 801ac3c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801ac40:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801ac42:	f103 0201 	add.w	r2, r3, #1
 801ac46:	8722      	strh	r2, [r4, #56]	; 0x38
 801ac48:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801ac4a:	bf98      	it	ls
 801ac4c:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801ac4e:	4413      	add	r3, r2
 801ac50:	b29b      	uxth	r3, r3
 801ac52:	2b09      	cmp	r3, #9
 801ac54:	bf88      	it	hi
 801ac56:	3b0a      	subhi	r3, #10
 801ac58:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ac5c:	8458      	strh	r0, [r3, #34]	; 0x22
 801ac5e:	e7dc      	b.n	801ac1a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801ac60:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ac62:	2b0a      	cmp	r3, #10
 801ac64:	d00f      	beq.n	801ac86 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801ac66:	4620      	mov	r0, r4
 801ac68:	f7ff fc71 	bl	801a54e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ac6c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ac6e:	1c5a      	adds	r2, r3, #1
 801ac70:	8722      	strh	r2, [r4, #56]	; 0x38
 801ac72:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801ac74:	4413      	add	r3, r2
 801ac76:	b29b      	uxth	r3, r3
 801ac78:	2b09      	cmp	r3, #9
 801ac7a:	bf88      	it	hi
 801ac7c:	3b0a      	subhi	r3, #10
 801ac7e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ac82:	8458      	strh	r0, [r3, #34]	; 0x22
 801ac84:	e7ec      	b.n	801ac60 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801ac86:	bd10      	pop	{r4, pc}

0801ac88 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801ac88:	b538      	push	{r3, r4, r5, lr}
 801ac8a:	4604      	mov	r4, r0
 801ac8c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ac8e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801ac92:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801ac94:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801ac96:	3a01      	subs	r2, #1
 801ac98:	8702      	strh	r2, [r0, #56]	; 0x38
 801ac9a:	1c5a      	adds	r2, r3, #1
 801ac9c:	b292      	uxth	r2, r2
 801ac9e:	2a09      	cmp	r2, #9
 801aca0:	bf86      	itte	hi
 801aca2:	3b09      	subhi	r3, #9
 801aca4:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801aca6:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801aca8:	f7ff ffb5 	bl	801ac16 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801acac:	8c23      	ldrh	r3, [r4, #32]
 801acae:	2b01      	cmp	r3, #1
 801acb0:	bf9c      	itt	ls
 801acb2:	3301      	addls	r3, #1
 801acb4:	8423      	strhls	r3, [r4, #32]
 801acb6:	8be3      	ldrh	r3, [r4, #30]
 801acb8:	b90b      	cbnz	r3, 801acbe <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801acba:	2302      	movs	r3, #2
 801acbc:	83e3      	strh	r3, [r4, #30]
 801acbe:	8be3      	ldrh	r3, [r4, #30]
 801acc0:	4628      	mov	r0, r5
 801acc2:	3b01      	subs	r3, #1
 801acc4:	b29b      	uxth	r3, r3
 801acc6:	83e3      	strh	r3, [r4, #30]
 801acc8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801accc:	8365      	strh	r5, [r4, #26]
 801acce:	bd38      	pop	{r3, r4, r5, pc}

0801acd0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801acd0:	428a      	cmp	r2, r1
 801acd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801acd6:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801acd8:	d931      	bls.n	801ad3e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801acda:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801acdc:	1a54      	subs	r4, r2, r1
 801acde:	19ee      	adds	r6, r5, r7
 801ace0:	3e01      	subs	r6, #1
 801ace2:	fa1f fe84 	uxth.w	lr, r4
 801ace6:	b2b4      	uxth	r4, r6
 801ace8:	eba4 090e 	sub.w	r9, r4, lr
 801acec:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801acf0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801acf4:	fa1f f989 	uxth.w	r9, r9
 801acf8:	2c09      	cmp	r4, #9
 801acfa:	4626      	mov	r6, r4
 801acfc:	bf88      	it	hi
 801acfe:	f1a4 060a 	subhi.w	r6, r4, #10
 801ad02:	f1bc 0f00 	cmp.w	ip, #0
 801ad06:	bf08      	it	eq
 801ad08:	f04f 0c02 	moveq.w	ip, #2
 801ad0c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ad10:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ad14:	3c01      	subs	r4, #1
 801ad16:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801ad1a:	fa1f fc8c 	uxth.w	ip, ip
 801ad1e:	b2a4      	uxth	r4, r4
 801ad20:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801ad24:	454c      	cmp	r4, r9
 801ad26:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801ad2a:	d1e5      	bne.n	801acf8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801ad2c:	eba5 050e 	sub.w	r5, r5, lr
 801ad30:	eb0e 0408 	add.w	r4, lr, r8
 801ad34:	8705      	strh	r5, [r0, #56]	; 0x38
 801ad36:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801ad3a:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801ad3e:	250a      	movs	r5, #10
 801ad40:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801ad42:	1a64      	subs	r4, r4, r1
 801ad44:	4439      	add	r1, r7
 801ad46:	b289      	uxth	r1, r1
 801ad48:	2909      	cmp	r1, #9
 801ad4a:	bf88      	it	hi
 801ad4c:	390a      	subhi	r1, #10
 801ad4e:	8704      	strh	r4, [r0, #56]	; 0x38
 801ad50:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ad52:	b18a      	cbz	r2, 801ad78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 801ad54:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801ad56:	3a01      	subs	r2, #1
 801ad58:	3101      	adds	r1, #1
 801ad5a:	b292      	uxth	r2, r2
 801ad5c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801ad60:	8701      	strh	r1, [r0, #56]	; 0x38
 801ad62:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ad64:	b901      	cbnz	r1, 801ad68 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 801ad66:	86c5      	strh	r5, [r0, #54]	; 0x36
 801ad68:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ad6a:	3901      	subs	r1, #1
 801ad6c:	b289      	uxth	r1, r1
 801ad6e:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ad70:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801ad74:	844c      	strh	r4, [r1, #34]	; 0x22
 801ad76:	e7ec      	b.n	801ad52 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 801ad78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad7c:	f7ff bf4b 	b.w	801ac16 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801ad80 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801ad80:	b570      	push	{r4, r5, r6, lr}
 801ad82:	2500      	movs	r5, #0
 801ad84:	4295      	cmp	r5, r2
 801ad86:	d011      	beq.n	801adac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801ad88:	8bc4      	ldrh	r4, [r0, #30]
 801ad8a:	f831 6b02 	ldrh.w	r6, [r1], #2
 801ad8e:	4414      	add	r4, r2
 801ad90:	3c01      	subs	r4, #1
 801ad92:	1b64      	subs	r4, r4, r5
 801ad94:	b2a4      	uxth	r4, r4
 801ad96:	2c01      	cmp	r4, #1
 801ad98:	bf88      	it	hi
 801ad9a:	3c02      	subhi	r4, #2
 801ad9c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801ada0:	8b64      	ldrh	r4, [r4, #26]
 801ada2:	42b4      	cmp	r4, r6
 801ada4:	d117      	bne.n	801add6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801ada6:	3501      	adds	r5, #1
 801ada8:	b2ad      	uxth	r5, r5
 801adaa:	e7eb      	b.n	801ad84 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801adac:	2400      	movs	r4, #0
 801adae:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801adb2:	4413      	add	r3, r2
 801adb4:	b2a2      	uxth	r2, r4
 801adb6:	429a      	cmp	r2, r3
 801adb8:	da0f      	bge.n	801adda <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801adba:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801adbc:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801adc0:	4432      	add	r2, r6
 801adc2:	b292      	uxth	r2, r2
 801adc4:	2a09      	cmp	r2, #9
 801adc6:	bf88      	it	hi
 801adc8:	3a0a      	subhi	r2, #10
 801adca:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801adce:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801add0:	3401      	adds	r4, #1
 801add2:	42aa      	cmp	r2, r5
 801add4:	d0ee      	beq.n	801adb4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801add6:	2000      	movs	r0, #0
 801add8:	bd70      	pop	{r4, r5, r6, pc}
 801adda:	2001      	movs	r0, #1
 801addc:	e7fc      	b.n	801add8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801adde <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801adde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ade2:	4605      	mov	r5, r0
 801ade4:	4616      	mov	r6, r2
 801ade6:	1c8c      	adds	r4, r1, #2
 801ade8:	8809      	ldrh	r1, [r1, #0]
 801adea:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801adee:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801adf2:	42b3      	cmp	r3, r6
 801adf4:	d124      	bne.n	801ae40 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801adf6:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801adfa:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801adfe:	f001 070f 	and.w	r7, r1, #15
 801ae02:	f8cd 8000 	str.w	r8, [sp]
 801ae06:	464b      	mov	r3, r9
 801ae08:	4652      	mov	r2, sl
 801ae0a:	4621      	mov	r1, r4
 801ae0c:	4628      	mov	r0, r5
 801ae0e:	f7ff ffb7 	bl	801ad80 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801ae12:	4683      	mov	fp, r0
 801ae14:	b168      	cbz	r0, 801ae32 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801ae16:	eb0a 0109 	add.w	r1, sl, r9
 801ae1a:	4441      	add	r1, r8
 801ae1c:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ae20:	463a      	mov	r2, r7
 801ae22:	4649      	mov	r1, r9
 801ae24:	4628      	mov	r0, r5
 801ae26:	f7ff ff53 	bl	801acd0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ae2a:	4658      	mov	r0, fp
 801ae2c:	b003      	add	sp, #12
 801ae2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae32:	eb07 010a 	add.w	r1, r7, sl
 801ae36:	4449      	add	r1, r9
 801ae38:	4441      	add	r1, r8
 801ae3a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ae3e:	e7d2      	b.n	801ade6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801ae40:	f04f 0b00 	mov.w	fp, #0
 801ae44:	e7f1      	b.n	801ae2a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801ae46 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801ae46:	b570      	push	{r4, r5, r6, lr}
 801ae48:	8810      	ldrh	r0, [r2, #0]
 801ae4a:	4298      	cmp	r0, r3
 801ae4c:	d817      	bhi.n	801ae7e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ae4e:	1e48      	subs	r0, r1, #1
 801ae50:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801ae54:	4298      	cmp	r0, r3
 801ae56:	d312      	bcc.n	801ae7e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ae58:	2400      	movs	r4, #0
 801ae5a:	428c      	cmp	r4, r1
 801ae5c:	d20f      	bcs.n	801ae7e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ae5e:	1860      	adds	r0, r4, r1
 801ae60:	1040      	asrs	r0, r0, #1
 801ae62:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801ae66:	0085      	lsls	r5, r0, #2
 801ae68:	42b3      	cmp	r3, r6
 801ae6a:	d902      	bls.n	801ae72 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801ae6c:	3001      	adds	r0, #1
 801ae6e:	b284      	uxth	r4, r0
 801ae70:	e7f3      	b.n	801ae5a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ae72:	d201      	bcs.n	801ae78 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801ae74:	b281      	uxth	r1, r0
 801ae76:	e7f0      	b.n	801ae5a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ae78:	442a      	add	r2, r5
 801ae7a:	8850      	ldrh	r0, [r2, #2]
 801ae7c:	bd70      	pop	{r4, r5, r6, pc}
 801ae7e:	2000      	movs	r0, #0
 801ae80:	e7fc      	b.n	801ae7c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801ae82 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801ae82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae86:	4604      	mov	r4, r0
 801ae88:	260b      	movs	r6, #11
 801ae8a:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801ae8c:	886f      	ldrh	r7, [r5, #2]
 801ae8e:	087f      	lsrs	r7, r7, #1
 801ae90:	3e01      	subs	r6, #1
 801ae92:	d013      	beq.n	801aebc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801ae94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801ae96:	462a      	mov	r2, r5
 801ae98:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ae9c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801aea0:	4639      	mov	r1, r7
 801aea2:	4643      	mov	r3, r8
 801aea4:	4620      	mov	r0, r4
 801aea6:	f7ff ffce 	bl	801ae46 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801aeaa:	b138      	cbz	r0, 801aebc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801aeac:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801aeb0:	4642      	mov	r2, r8
 801aeb2:	4620      	mov	r0, r4
 801aeb4:	f7ff ff93 	bl	801adde <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801aeb8:	2800      	cmp	r0, #0
 801aeba:	d1e9      	bne.n	801ae90 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801aebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801aec0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801aec0:	b570      	push	{r4, r5, r6, lr}
 801aec2:	694a      	ldr	r2, [r1, #20]
 801aec4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801aec6:	684b      	ldr	r3, [r1, #4]
 801aec8:	1b54      	subs	r4, r2, r5
 801aeca:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801aecc:	f000 8107 	beq.w	801b0de <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 801aed0:	1b9b      	subs	r3, r3, r6
 801aed2:	d003      	beq.n	801aedc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801aed4:	2210      	movs	r2, #16
 801aed6:	4363      	muls	r3, r4
 801aed8:	fb93 f3f2 	sdiv	r3, r3, r2
 801aedc:	680c      	ldr	r4, [r1, #0]
 801aede:	698a      	ldr	r2, [r1, #24]
 801aee0:	1b65      	subs	r5, r4, r5
 801aee2:	f000 80fe 	beq.w	801b0e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 801aee6:	1b92      	subs	r2, r2, r6
 801aee8:	d003      	beq.n	801aef2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801aeea:	2410      	movs	r4, #16
 801aeec:	436a      	muls	r2, r5
 801aeee:	fb92 f2f4 	sdiv	r2, r2, r4
 801aef2:	1a9b      	subs	r3, r3, r2
 801aef4:	ee07 3a90 	vmov	s15, r3
 801aef8:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801b120 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 801aefc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801af04:	ee67 7a84 	vmul.f32	s15, s15, s8
 801af08:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801af0c:	460a      	mov	r2, r1
 801af0e:	eeb1 6a43 	vneg.f32	s12, s6
 801af12:	4603      	mov	r3, r0
 801af14:	f100 040c 	add.w	r4, r0, #12
 801af18:	edd2 7a02 	vldr	s15, [r2, #8]
 801af1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801af20:	ece3 6a01 	vstmia	r3!, {s13}
 801af24:	edd2 7a03 	vldr	s15, [r2, #12]
 801af28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801af2c:	edc3 7a02 	vstr	s15, [r3, #8]
 801af30:	edd2 7a04 	vldr	s15, [r2, #16]
 801af34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801af38:	429c      	cmp	r4, r3
 801af3a:	edc3 7a05 	vstr	s15, [r3, #20]
 801af3e:	f102 0214 	add.w	r2, r2, #20
 801af42:	d1e9      	bne.n	801af18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801af44:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801af46:	698b      	ldr	r3, [r1, #24]
 801af48:	edd0 4a02 	vldr	s9, [r0, #8]
 801af4c:	1a9b      	subs	r3, r3, r2
 801af4e:	ee07 3a90 	vmov	s15, r3
 801af52:	684b      	ldr	r3, [r1, #4]
 801af54:	edd0 3a00 	vldr	s7, [r0]
 801af58:	1a9b      	subs	r3, r3, r2
 801af5a:	edd0 6a01 	vldr	s13, [r0, #4]
 801af5e:	ee07 3a10 	vmov	s14, r3
 801af62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af66:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801af6a:	ee67 7a84 	vmul.f32	s15, s15, s8
 801af6e:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801af72:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801af76:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801af7a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801af7e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801af82:	ee67 7a83 	vmul.f32	s15, s15, s6
 801af86:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801af8a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801af8c:	694a      	ldr	r2, [r1, #20]
 801af8e:	ed90 5a05 	vldr	s10, [r0, #20]
 801af92:	1b13      	subs	r3, r2, r4
 801af94:	ee07 3a10 	vmov	s14, r3
 801af98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801af9c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801afa0:	680b      	ldr	r3, [r1, #0]
 801afa2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801afa6:	1b1b      	subs	r3, r3, r4
 801afa8:	ee07 3a10 	vmov	s14, r3
 801afac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801afb0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801afb4:	eee6 4a87 	vfma.f32	s9, s13, s14
 801afb8:	ee64 4a86 	vmul.f32	s9, s9, s12
 801afbc:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801afc0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801afc2:	698b      	ldr	r3, [r1, #24]
 801afc4:	ed90 2a03 	vldr	s4, [r0, #12]
 801afc8:	1a9b      	subs	r3, r3, r2
 801afca:	ee06 3a90 	vmov	s13, r3
 801afce:	684b      	ldr	r3, [r1, #4]
 801afd0:	edd0 5a04 	vldr	s11, [r0, #16]
 801afd4:	1a9b      	subs	r3, r3, r2
 801afd6:	ee07 3a10 	vmov	s14, r3
 801afda:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801afde:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801afe2:	ee66 6a84 	vmul.f32	s13, s13, s8
 801afe6:	ee32 5a45 	vsub.f32	s10, s4, s10
 801afea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801afee:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801aff2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801aff6:	eee5 6a87 	vfma.f32	s13, s11, s14
 801affa:	ee66 6a83 	vmul.f32	s13, s13, s6
 801affe:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801b002:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b004:	694a      	ldr	r2, [r1, #20]
 801b006:	ed90 1a07 	vldr	s2, [r0, #28]
 801b00a:	1b13      	subs	r3, r2, r4
 801b00c:	ee07 3a10 	vmov	s14, r3
 801b010:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b014:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b018:	680b      	ldr	r3, [r1, #0]
 801b01a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801b01e:	1b1b      	subs	r3, r3, r4
 801b020:	ee07 3a10 	vmov	s14, r3
 801b024:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b028:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b02c:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b030:	ee25 5a06 	vmul.f32	s10, s10, s12
 801b034:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801b038:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b03a:	698b      	ldr	r3, [r1, #24]
 801b03c:	edd0 5a08 	vldr	s11, [r0, #32]
 801b040:	1a9b      	subs	r3, r3, r2
 801b042:	ee07 3a10 	vmov	s14, r3
 801b046:	684b      	ldr	r3, [r1, #4]
 801b048:	edd0 2a06 	vldr	s5, [r0, #24]
 801b04c:	1a9b      	subs	r3, r3, r2
 801b04e:	ee01 3a90 	vmov	s3, r3
 801b052:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b056:	ee31 1a65 	vsub.f32	s2, s2, s11
 801b05a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b05e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801b062:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b066:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801b06a:	ee61 1a84 	vmul.f32	s3, s3, s8
 801b06e:	eea1 7a21 	vfma.f32	s14, s2, s3
 801b072:	ee27 7a03 	vmul.f32	s14, s14, s6
 801b076:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801b07a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b07c:	694a      	ldr	r2, [r1, #20]
 801b07e:	1b13      	subs	r3, r2, r4
 801b080:	ee03 3a10 	vmov	s6, r3
 801b084:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b088:	ee23 3a04 	vmul.f32	s6, s6, s8
 801b08c:	680b      	ldr	r3, [r1, #0]
 801b08e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801b092:	1b1b      	subs	r3, r3, r4
 801b094:	ee03 3a10 	vmov	s6, r3
 801b098:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b09c:	ee23 4a04 	vmul.f32	s8, s6, s8
 801b0a0:	eee1 5a04 	vfma.f32	s11, s2, s8
 801b0a4:	ee25 6a86 	vmul.f32	s12, s11, s12
 801b0a8:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801b0ac:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801b0b0:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0b8:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801b0bc:	dd13      	ble.n	801b0e6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801b0be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b0c2:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801b0c6:	eee3 7a87 	vfma.f32	s15, s7, s14
 801b0ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0d2:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b0d4:	dd15      	ble.n	801b102 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801b0d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b0da:	6403      	str	r3, [r0, #64]	; 0x40
 801b0dc:	bd70      	pop	{r4, r5, r6, pc}
 801b0de:	4623      	mov	r3, r4
 801b0e0:	e6fc      	b.n	801aedc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b0e2:	462a      	mov	r2, r5
 801b0e4:	e705      	b.n	801aef2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b0e6:	d502      	bpl.n	801b0ee <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 801b0e8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b0ec:	e7e9      	b.n	801b0c2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 801b0ee:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801b0f2:	eea3 2a85 	vfma.f32	s4, s7, s10
 801b0f6:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801b0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0fe:	dade      	bge.n	801b0be <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 801b100:	e7f2      	b.n	801b0e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 801b102:	d502      	bpl.n	801b10a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 801b104:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b108:	e7e7      	b.n	801b0da <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 801b10a:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801b10e:	eee3 4a86 	vfma.f32	s9, s7, s12
 801b112:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801b116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b11a:	dadc      	bge.n	801b0d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 801b11c:	e7f2      	b.n	801b104 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 801b11e:	bf00      	nop
 801b120:	3d800000 	.word	0x3d800000

0801b124 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801b124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b128:	2714      	movs	r7, #20
 801b12a:	435f      	muls	r7, r3
 801b12c:	eb02 0c07 	add.w	ip, r2, r7
 801b130:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801b134:	f115 0e0f 	adds.w	lr, r5, #15
 801b138:	f100 80a2 	bmi.w	801b280 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801b13c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801b140:	2614      	movs	r6, #20
 801b142:	9c08      	ldr	r4, [sp, #32]
 801b144:	f8c0 e014 	str.w	lr, [r0, #20]
 801b148:	4366      	muls	r6, r4
 801b14a:	eb02 0806 	add.w	r8, r2, r6
 801b14e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b152:	f115 040f 	adds.w	r4, r5, #15
 801b156:	f100 809f 	bmi.w	801b298 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801b15a:	1124      	asrs	r4, r4, #4
 801b15c:	eba4 040e 	sub.w	r4, r4, lr
 801b160:	6184      	str	r4, [r0, #24]
 801b162:	2c00      	cmp	r4, #0
 801b164:	f000 808a 	beq.w	801b27c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801b168:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801b16c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801b170:	5995      	ldr	r5, [r2, r6]
 801b172:	eba4 0809 	sub.w	r8, r4, r9
 801b176:	59d4      	ldr	r4, [r2, r7]
 801b178:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801b17c:	eba5 0a04 	sub.w	sl, r5, r4
 801b180:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801b184:	fb0e fe05 	mul.w	lr, lr, r5
 801b188:	fb0a ee19 	mls	lr, sl, r9, lr
 801b18c:	fb08 e404 	mla	r4, r8, r4, lr
 801b190:	3c01      	subs	r4, #1
 801b192:	19a4      	adds	r4, r4, r6
 801b194:	f100 808c 	bmi.w	801b2b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801b198:	fb94 fef6 	sdiv	lr, r4, r6
 801b19c:	fb06 441e 	mls	r4, r6, lr, r4
 801b1a0:	f8c0 e000 	str.w	lr, [r0]
 801b1a4:	6104      	str	r4, [r0, #16]
 801b1a6:	2d00      	cmp	r5, #0
 801b1a8:	f2c0 8095 	blt.w	801b2d6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801b1ac:	fb95 f4f6 	sdiv	r4, r5, r6
 801b1b0:	fb06 5514 	mls	r5, r6, r4, r5
 801b1b4:	6044      	str	r4, [r0, #4]
 801b1b6:	6085      	str	r5, [r0, #8]
 801b1b8:	60c6      	str	r6, [r0, #12]
 801b1ba:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801b1be:	6945      	ldr	r5, [r0, #20]
 801b1c0:	59d2      	ldr	r2, [r2, r7]
 801b1c2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801b1c6:	ee07 4a10 	vmov	s14, r4
 801b1ca:	6804      	ldr	r4, [r0, #0]
 801b1cc:	eddf 6a4a 	vldr	s13, [pc, #296]	; 801b2f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801b1d0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801b1d4:	ee07 2a90 	vmov	s15, r2
 801b1d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b1dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b1e0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b1e4:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801b1e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b1ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b1f0:	edd3 6a00 	vldr	s13, [r3]
 801b1f4:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b1f8:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801b1fc:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b200:	edc0 6a07 	vstr	s13, [r0, #28]
 801b204:	edd0 6a01 	vldr	s13, [r0, #4]
 801b208:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801b20c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801b210:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b214:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b218:	ed80 6a08 	vstr	s12, [r0, #32]
 801b21c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801b21e:	6242      	str	r2, [r0, #36]	; 0x24
 801b220:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801b224:	ed93 6a03 	vldr	s12, [r3, #12]
 801b228:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b22c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801b230:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801b234:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801b238:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801b23c:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801b240:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b244:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801b248:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b24a:	6302      	str	r2, [r0, #48]	; 0x30
 801b24c:	ed93 6a06 	vldr	s12, [r3, #24]
 801b250:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801b254:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b258:	eeb0 7a46 	vmov.f32	s14, s12
 801b25c:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801b260:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b264:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801b268:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801b26c:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801b270:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b274:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801b278:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801b27a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b280:	2410      	movs	r4, #16
 801b282:	f1c5 0501 	rsb	r5, r5, #1
 801b286:	f015 050f 	ands.w	r5, r5, #15
 801b28a:	fb9e fef4 	sdiv	lr, lr, r4
 801b28e:	bf18      	it	ne
 801b290:	2501      	movne	r5, #1
 801b292:	ebae 0e05 	sub.w	lr, lr, r5
 801b296:	e753      	b.n	801b140 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801b298:	f04f 0910 	mov.w	r9, #16
 801b29c:	f1c5 0501 	rsb	r5, r5, #1
 801b2a0:	f015 050f 	ands.w	r5, r5, #15
 801b2a4:	fb94 f4f9 	sdiv	r4, r4, r9
 801b2a8:	bf18      	it	ne
 801b2aa:	2501      	movne	r5, #1
 801b2ac:	1b64      	subs	r4, r4, r5
 801b2ae:	e755      	b.n	801b15c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801b2b0:	4264      	negs	r4, r4
 801b2b2:	fb94 fef6 	sdiv	lr, r4, r6
 801b2b6:	fb06 441e 	mls	r4, r6, lr, r4
 801b2ba:	f1ce 0800 	rsb	r8, lr, #0
 801b2be:	f8c0 8000 	str.w	r8, [r0]
 801b2c2:	6104      	str	r4, [r0, #16]
 801b2c4:	2c00      	cmp	r4, #0
 801b2c6:	f43f af6e 	beq.w	801b1a6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801b2ca:	ea6f 0e0e 	mvn.w	lr, lr
 801b2ce:	1b34      	subs	r4, r6, r4
 801b2d0:	f8c0 e000 	str.w	lr, [r0]
 801b2d4:	e766      	b.n	801b1a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801b2d6:	426d      	negs	r5, r5
 801b2d8:	fb95 f4f6 	sdiv	r4, r5, r6
 801b2dc:	fb06 5514 	mls	r5, r6, r4, r5
 801b2e0:	f1c4 0e00 	rsb	lr, r4, #0
 801b2e4:	f8c0 e004 	str.w	lr, [r0, #4]
 801b2e8:	6085      	str	r5, [r0, #8]
 801b2ea:	2d00      	cmp	r5, #0
 801b2ec:	f43f af64 	beq.w	801b1b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801b2f0:	43e4      	mvns	r4, r4
 801b2f2:	1b75      	subs	r5, r6, r5
 801b2f4:	6044      	str	r4, [r0, #4]
 801b2f6:	e75e      	b.n	801b1b6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801b2f8:	3d800000 	.word	0x3d800000

0801b2fc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b2fc:	4b01      	ldr	r3, [pc, #4]	; (801b304 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b2fe:	6018      	str	r0, [r3, #0]
 801b300:	4770      	bx	lr
 801b302:	bf00      	nop
 801b304:	20197aa0 	.word	0x20197aa0

0801b308 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801b308:	4b06      	ldr	r3, [pc, #24]	; (801b324 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801b30a:	881a      	ldrh	r2, [r3, #0]
 801b30c:	4282      	cmp	r2, r0
 801b30e:	d807      	bhi.n	801b320 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801b310:	4b05      	ldr	r3, [pc, #20]	; (801b328 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801b312:	881b      	ldrh	r3, [r3, #0]
 801b314:	4413      	add	r3, r2
 801b316:	4298      	cmp	r0, r3
 801b318:	bfac      	ite	ge
 801b31a:	2000      	movge	r0, #0
 801b31c:	2001      	movlt	r0, #1
 801b31e:	4770      	bx	lr
 801b320:	2000      	movs	r0, #0
 801b322:	4770      	bx	lr
 801b324:	20197ac0 	.word	0x20197ac0
 801b328:	20197ac4 	.word	0x20197ac4

0801b32c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b32c:	b508      	push	{r3, lr}
 801b32e:	4601      	mov	r1, r0
 801b330:	f7ff ffea 	bl	801b308 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801b334:	b118      	cbz	r0, 801b33e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801b336:	4b02      	ldr	r3, [pc, #8]	; (801b340 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801b33e:	bd08      	pop	{r3, pc}
 801b340:	20197aa4 	.word	0x20197aa4

0801b344 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b344:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b346:	4c24      	ldr	r4, [pc, #144]	; (801b3d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801b348:	6823      	ldr	r3, [r4, #0]
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d042      	beq.n	801b3d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b34e:	4a23      	ldr	r2, [pc, #140]	; (801b3dc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801b350:	4d23      	ldr	r5, [pc, #140]	; (801b3e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801b352:	8811      	ldrh	r1, [r2, #0]
 801b354:	f8b5 c000 	ldrh.w	ip, [r5]
 801b358:	4822      	ldr	r0, [pc, #136]	; (801b3e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801b35a:	4461      	add	r1, ip
 801b35c:	1c4a      	adds	r2, r1, #1
 801b35e:	f022 0201 	bic.w	r2, r2, #1
 801b362:	008f      	lsls	r7, r1, #2
 801b364:	0412      	lsls	r2, r2, #16
 801b366:	19de      	adds	r6, r3, r7
 801b368:	0c12      	lsrs	r2, r2, #16
 801b36a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801b36e:	6006      	str	r6, [r0, #0]
 801b370:	4e1d      	ldr	r6, [pc, #116]	; (801b3e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801b372:	19da      	adds	r2, r3, r7
 801b374:	6032      	str	r2, [r6, #0]
 801b376:	220e      	movs	r2, #14
 801b378:	fb02 f20c 	mul.w	r2, r2, ip
 801b37c:	3203      	adds	r2, #3
 801b37e:	f022 0203 	bic.w	r2, r2, #3
 801b382:	443a      	add	r2, r7
 801b384:	4f19      	ldr	r7, [pc, #100]	; (801b3ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b386:	4413      	add	r3, r2
 801b388:	603b      	str	r3, [r7, #0]
 801b38a:	2300      	movs	r3, #0
 801b38c:	4f18      	ldr	r7, [pc, #96]	; (801b3f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b38e:	469c      	mov	ip, r3
 801b390:	803b      	strh	r3, [r7, #0]
 801b392:	4f18      	ldr	r7, [pc, #96]	; (801b3f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b394:	683f      	ldr	r7, [r7, #0]
 801b396:	1aba      	subs	r2, r7, r2
 801b398:	4f17      	ldr	r7, [pc, #92]	; (801b3f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b39a:	603a      	str	r2, [r7, #0]
 801b39c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801b3a0:	4a16      	ldr	r2, [pc, #88]	; (801b3fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b3a2:	8013      	strh	r3, [r2, #0]
 801b3a4:	428b      	cmp	r3, r1
 801b3a6:	d10d      	bne.n	801b3c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801b3a8:	2300      	movs	r3, #0
 801b3aa:	240e      	movs	r4, #14
 801b3ac:	882d      	ldrh	r5, [r5, #0]
 801b3ae:	6830      	ldr	r0, [r6, #0]
 801b3b0:	429d      	cmp	r5, r3
 801b3b2:	d90f      	bls.n	801b3d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b3b4:	fb04 0203 	mla	r2, r4, r3, r0
 801b3b8:	7b11      	ldrb	r1, [r2, #12]
 801b3ba:	3301      	adds	r3, #1
 801b3bc:	f36f 1145 	bfc	r1, #5, #1
 801b3c0:	7311      	strb	r1, [r2, #12]
 801b3c2:	e7f5      	b.n	801b3b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801b3c4:	6822      	ldr	r2, [r4, #0]
 801b3c6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b3ca:	6802      	ldr	r2, [r0, #0]
 801b3cc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801b3d0:	3301      	adds	r3, #1
 801b3d2:	e7e7      	b.n	801b3a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801b3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3d6:	bf00      	nop
 801b3d8:	20197aa4 	.word	0x20197aa4
 801b3dc:	20197ac0 	.word	0x20197ac0
 801b3e0:	20197ac4 	.word	0x20197ac4
 801b3e4:	20197ab8 	.word	0x20197ab8
 801b3e8:	20197aa8 	.word	0x20197aa8
 801b3ec:	20197ab0 	.word	0x20197ab0
 801b3f0:	20197ac2 	.word	0x20197ac2
 801b3f4:	20197aac 	.word	0x20197aac
 801b3f8:	20197abc 	.word	0x20197abc
 801b3fc:	20197ab4 	.word	0x20197ab4

0801b400 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b400:	4b06      	ldr	r3, [pc, #24]	; (801b41c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	b943      	cbnz	r3, 801b418 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b406:	b139      	cbz	r1, 801b418 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b408:	4b05      	ldr	r3, [pc, #20]	; (801b420 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801b40a:	801a      	strh	r2, [r3, #0]
 801b40c:	4b05      	ldr	r3, [pc, #20]	; (801b424 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801b40e:	6019      	str	r1, [r3, #0]
 801b410:	4b05      	ldr	r3, [pc, #20]	; (801b428 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801b412:	6018      	str	r0, [r3, #0]
 801b414:	f7ff bf96 	b.w	801b344 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b418:	4770      	bx	lr
 801b41a:	bf00      	nop
 801b41c:	20197ab0 	.word	0x20197ab0
 801b420:	20197ac4 	.word	0x20197ac4
 801b424:	20197aac 	.word	0x20197aac
 801b428:	20197aa4 	.word	0x20197aa4

0801b42c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b42c:	b470      	push	{r4, r5, r6}
 801b42e:	4c07      	ldr	r4, [pc, #28]	; (801b44c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b430:	4605      	mov	r5, r0
 801b432:	6826      	ldr	r6, [r4, #0]
 801b434:	4610      	mov	r0, r2
 801b436:	9a03      	ldr	r2, [sp, #12]
 801b438:	b936      	cbnz	r6, 801b448 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b43a:	6025      	str	r5, [r4, #0]
 801b43c:	4c04      	ldr	r4, [pc, #16]	; (801b450 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b43e:	8021      	strh	r1, [r4, #0]
 801b440:	bc70      	pop	{r4, r5, r6}
 801b442:	4619      	mov	r1, r3
 801b444:	f7ff bfdc 	b.w	801b400 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b448:	bc70      	pop	{r4, r5, r6}
 801b44a:	4770      	bx	lr
 801b44c:	20197ac8 	.word	0x20197ac8
 801b450:	20197ac0 	.word	0x20197ac0

0801b454 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b454:	4a12      	ldr	r2, [pc, #72]	; (801b4a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801b456:	8803      	ldrh	r3, [r0, #0]
 801b458:	8812      	ldrh	r2, [r2, #0]
 801b45a:	4293      	cmp	r3, r2
 801b45c:	d207      	bcs.n	801b46e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801b45e:	2114      	movs	r1, #20
 801b460:	4a10      	ldr	r2, [pc, #64]	; (801b4a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801b462:	6812      	ldr	r2, [r2, #0]
 801b464:	fb01 2303 	mla	r3, r1, r3, r2
 801b468:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801b46c:	4770      	bx	lr
 801b46e:	490e      	ldr	r1, [pc, #56]	; (801b4a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b470:	8809      	ldrh	r1, [r1, #0]
 801b472:	4411      	add	r1, r2
 801b474:	428b      	cmp	r3, r1
 801b476:	da04      	bge.n	801b482 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801b478:	1a9b      	subs	r3, r3, r2
 801b47a:	4a0c      	ldr	r2, [pc, #48]	; (801b4ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b47c:	210e      	movs	r1, #14
 801b47e:	6812      	ldr	r2, [r2, #0]
 801b480:	e7f0      	b.n	801b464 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801b482:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b486:	4293      	cmp	r3, r2
 801b488:	d108      	bne.n	801b49c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801b48a:	4b09      	ldr	r3, [pc, #36]	; (801b4b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b48c:	781b      	ldrb	r3, [r3, #0]
 801b48e:	b91b      	cbnz	r3, 801b498 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801b490:	4b08      	ldr	r3, [pc, #32]	; (801b4b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b492:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b496:	4770      	bx	lr
 801b498:	4b07      	ldr	r3, [pc, #28]	; (801b4b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b49a:	e7fa      	b.n	801b492 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801b49c:	2000      	movs	r0, #0
 801b49e:	4770      	bx	lr
 801b4a0:	20197ac0 	.word	0x20197ac0
 801b4a4:	20197ac8 	.word	0x20197ac8
 801b4a8:	20197ac4 	.word	0x20197ac4
 801b4ac:	20197aa8 	.word	0x20197aa8
 801b4b0:	20197a38 	.word	0x20197a38
 801b4b4:	20197a3a 	.word	0x20197a3a
 801b4b8:	20197a3c 	.word	0x20197a3c

0801b4bc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b4bc:	4a12      	ldr	r2, [pc, #72]	; (801b508 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801b4be:	8803      	ldrh	r3, [r0, #0]
 801b4c0:	8812      	ldrh	r2, [r2, #0]
 801b4c2:	4293      	cmp	r3, r2
 801b4c4:	d207      	bcs.n	801b4d6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801b4c6:	2114      	movs	r1, #20
 801b4c8:	4a10      	ldr	r2, [pc, #64]	; (801b50c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801b4ca:	6812      	ldr	r2, [r2, #0]
 801b4cc:	fb01 2303 	mla	r3, r1, r3, r2
 801b4d0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801b4d4:	4770      	bx	lr
 801b4d6:	490e      	ldr	r1, [pc, #56]	; (801b510 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b4d8:	8809      	ldrh	r1, [r1, #0]
 801b4da:	4411      	add	r1, r2
 801b4dc:	428b      	cmp	r3, r1
 801b4de:	da04      	bge.n	801b4ea <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801b4e0:	1a9b      	subs	r3, r3, r2
 801b4e2:	4a0c      	ldr	r2, [pc, #48]	; (801b514 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b4e4:	210e      	movs	r1, #14
 801b4e6:	6812      	ldr	r2, [r2, #0]
 801b4e8:	e7f0      	b.n	801b4cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801b4ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b4ee:	4293      	cmp	r3, r2
 801b4f0:	d108      	bne.n	801b504 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801b4f2:	4b09      	ldr	r3, [pc, #36]	; (801b518 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b4f4:	781b      	ldrb	r3, [r3, #0]
 801b4f6:	b91b      	cbnz	r3, 801b500 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801b4f8:	4b08      	ldr	r3, [pc, #32]	; (801b51c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b4fa:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b4fe:	4770      	bx	lr
 801b500:	4b07      	ldr	r3, [pc, #28]	; (801b520 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b502:	e7fa      	b.n	801b4fa <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801b504:	2000      	movs	r0, #0
 801b506:	4770      	bx	lr
 801b508:	20197ac0 	.word	0x20197ac0
 801b50c:	20197ac8 	.word	0x20197ac8
 801b510:	20197ac4 	.word	0x20197ac4
 801b514:	20197aa8 	.word	0x20197aa8
 801b518:	20197a38 	.word	0x20197a38
 801b51c:	20197a3c 	.word	0x20197a3c
 801b520:	20197a3a 	.word	0x20197a3a

0801b524 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b524:	4a12      	ldr	r2, [pc, #72]	; (801b570 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b526:	8803      	ldrh	r3, [r0, #0]
 801b528:	8811      	ldrh	r1, [r2, #0]
 801b52a:	428b      	cmp	r3, r1
 801b52c:	d20b      	bcs.n	801b546 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801b52e:	4a11      	ldr	r2, [pc, #68]	; (801b574 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b530:	6812      	ldr	r2, [r2, #0]
 801b532:	b112      	cbz	r2, 801b53a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b534:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b538:	b9c0      	cbnz	r0, 801b56c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801b53a:	4a0f      	ldr	r2, [pc, #60]	; (801b578 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b53c:	6811      	ldr	r1, [r2, #0]
 801b53e:	2214      	movs	r2, #20
 801b540:	4353      	muls	r3, r2
 801b542:	58c8      	ldr	r0, [r1, r3]
 801b544:	4770      	bx	lr
 801b546:	4a0d      	ldr	r2, [pc, #52]	; (801b57c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b548:	8812      	ldrh	r2, [r2, #0]
 801b54a:	440a      	add	r2, r1
 801b54c:	4293      	cmp	r3, r2
 801b54e:	da04      	bge.n	801b55a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801b550:	4a08      	ldr	r2, [pc, #32]	; (801b574 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b552:	6812      	ldr	r2, [r2, #0]
 801b554:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b558:	4770      	bx	lr
 801b55a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b55e:	4293      	cmp	r3, r2
 801b560:	d103      	bne.n	801b56a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b562:	4b07      	ldr	r3, [pc, #28]	; (801b580 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b564:	681b      	ldr	r3, [r3, #0]
 801b566:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b568:	4770      	bx	lr
 801b56a:	2000      	movs	r0, #0
 801b56c:	4770      	bx	lr
 801b56e:	bf00      	nop
 801b570:	20197ac0 	.word	0x20197ac0
 801b574:	20197aa4 	.word	0x20197aa4
 801b578:	20197ac8 	.word	0x20197ac8
 801b57c:	20197ac4 	.word	0x20197ac4
 801b580:	20197a40 	.word	0x20197a40

0801b584 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b584:	4b24      	ldr	r3, [pc, #144]	; (801b618 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801b586:	8802      	ldrh	r2, [r0, #0]
 801b588:	8818      	ldrh	r0, [r3, #0]
 801b58a:	4282      	cmp	r2, r0
 801b58c:	d221      	bcs.n	801b5d2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801b58e:	4b23      	ldr	r3, [pc, #140]	; (801b61c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b590:	6819      	ldr	r1, [r3, #0]
 801b592:	2314      	movs	r3, #20
 801b594:	fb03 1302 	mla	r3, r3, r2, r1
 801b598:	6858      	ldr	r0, [r3, #4]
 801b59a:	2800      	cmp	r0, #0
 801b59c:	d03a      	beq.n	801b614 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b59e:	4920      	ldr	r1, [pc, #128]	; (801b620 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b5a0:	6809      	ldr	r1, [r1, #0]
 801b5a2:	2900      	cmp	r1, #0
 801b5a4:	d036      	beq.n	801b614 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b5a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b5aa:	2900      	cmp	r1, #0
 801b5ac:	d032      	beq.n	801b614 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b5ae:	891a      	ldrh	r2, [r3, #8]
 801b5b0:	8958      	ldrh	r0, [r3, #10]
 801b5b2:	4350      	muls	r0, r2
 801b5b4:	7c5a      	ldrb	r2, [r3, #17]
 801b5b6:	7cdb      	ldrb	r3, [r3, #19]
 801b5b8:	0952      	lsrs	r2, r2, #5
 801b5ba:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b5be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b5c2:	2b0b      	cmp	r3, #11
 801b5c4:	bf18      	it	ne
 801b5c6:	0040      	lslne	r0, r0, #1
 801b5c8:	3003      	adds	r0, #3
 801b5ca:	f020 0003 	bic.w	r0, r0, #3
 801b5ce:	4408      	add	r0, r1
 801b5d0:	4770      	bx	lr
 801b5d2:	4b14      	ldr	r3, [pc, #80]	; (801b624 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b5d4:	881b      	ldrh	r3, [r3, #0]
 801b5d6:	4403      	add	r3, r0
 801b5d8:	429a      	cmp	r2, r3
 801b5da:	da1a      	bge.n	801b612 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b5dc:	210e      	movs	r1, #14
 801b5de:	4b12      	ldr	r3, [pc, #72]	; (801b628 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b5e0:	1a10      	subs	r0, r2, r0
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	fb01 3000 	mla	r0, r1, r0, r3
 801b5e8:	7b03      	ldrb	r3, [r0, #12]
 801b5ea:	f003 031f 	and.w	r3, r3, #31
 801b5ee:	2b0b      	cmp	r3, #11
 801b5f0:	d10b      	bne.n	801b60a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801b5f2:	8903      	ldrh	r3, [r0, #8]
 801b5f4:	8940      	ldrh	r0, [r0, #10]
 801b5f6:	4358      	muls	r0, r3
 801b5f8:	4b09      	ldr	r3, [pc, #36]	; (801b620 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b5fa:	3003      	adds	r0, #3
 801b5fc:	6819      	ldr	r1, [r3, #0]
 801b5fe:	f020 0303 	bic.w	r3, r0, #3
 801b602:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b606:	4418      	add	r0, r3
 801b608:	4770      	bx	lr
 801b60a:	2b0d      	cmp	r3, #13
 801b60c:	d101      	bne.n	801b612 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b60e:	300d      	adds	r0, #13
 801b610:	4770      	bx	lr
 801b612:	2000      	movs	r0, #0
 801b614:	4770      	bx	lr
 801b616:	bf00      	nop
 801b618:	20197ac0 	.word	0x20197ac0
 801b61c:	20197ac8 	.word	0x20197ac8
 801b620:	20197aa4 	.word	0x20197aa4
 801b624:	20197ac4 	.word	0x20197ac4
 801b628:	20197aa8 	.word	0x20197aa8

0801b62c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b62c:	b510      	push	{r4, lr}
 801b62e:	4a17      	ldr	r2, [pc, #92]	; (801b68c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801b630:	8803      	ldrh	r3, [r0, #0]
 801b632:	8812      	ldrh	r2, [r2, #0]
 801b634:	4293      	cmp	r3, r2
 801b636:	d20c      	bcs.n	801b652 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b638:	2114      	movs	r1, #20
 801b63a:	4a15      	ldr	r2, [pc, #84]	; (801b690 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801b63c:	6812      	ldr	r2, [r2, #0]
 801b63e:	fb01 2303 	mla	r3, r1, r3, r2
 801b642:	7c58      	ldrb	r0, [r3, #17]
 801b644:	0942      	lsrs	r2, r0, #5
 801b646:	7cd8      	ldrb	r0, [r3, #19]
 801b648:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b64c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b650:	bd10      	pop	{r4, pc}
 801b652:	4910      	ldr	r1, [pc, #64]	; (801b694 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b654:	8809      	ldrh	r1, [r1, #0]
 801b656:	4411      	add	r1, r2
 801b658:	428b      	cmp	r3, r1
 801b65a:	da09      	bge.n	801b670 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b65c:	210e      	movs	r1, #14
 801b65e:	1a9b      	subs	r3, r3, r2
 801b660:	4a0d      	ldr	r2, [pc, #52]	; (801b698 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801b662:	6812      	ldr	r2, [r2, #0]
 801b664:	fb01 2303 	mla	r3, r1, r3, r2
 801b668:	7b18      	ldrb	r0, [r3, #12]
 801b66a:	f000 001f 	and.w	r0, r0, #31
 801b66e:	e7ef      	b.n	801b650 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801b670:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b674:	4293      	cmp	r3, r2
 801b676:	d106      	bne.n	801b686 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801b678:	f7fb fd0a 	bl	8017090 <_ZN8touchgfx3HAL3lcdEv>
 801b67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b680:	6803      	ldr	r3, [r0, #0]
 801b682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b684:	4718      	bx	r3
 801b686:	2000      	movs	r0, #0
 801b688:	e7e2      	b.n	801b650 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801b68a:	bf00      	nop
 801b68c:	20197ac0 	.word	0x20197ac0
 801b690:	20197ac8 	.word	0x20197ac8
 801b694:	20197ac4 	.word	0x20197ac4
 801b698:	20197aa8 	.word	0x20197aa8

0801b69c <CRC_Lock>:
 801b69c:	b530      	push	{r4, r5, lr}
 801b69e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801b6a2:	f24c 2540 	movw	r5, #49728	; 0xc240
 801b6a6:	4a1e      	ldr	r2, [pc, #120]	; (801b720 <CRC_Lock+0x84>)
 801b6a8:	6813      	ldr	r3, [r2, #0]
 801b6aa:	f023 0301 	bic.w	r3, r3, #1
 801b6ae:	6013      	str	r3, [r2, #0]
 801b6b0:	4b1c      	ldr	r3, [pc, #112]	; (801b724 <CRC_Lock+0x88>)
 801b6b2:	681a      	ldr	r2, [r3, #0]
 801b6b4:	4022      	ands	r2, r4
 801b6b6:	42aa      	cmp	r2, r5
 801b6b8:	d005      	beq.n	801b6c6 <CRC_Lock+0x2a>
 801b6ba:	f24c 2270 	movw	r2, #49776	; 0xc270
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	4023      	ands	r3, r4
 801b6c2:	4293      	cmp	r3, r2
 801b6c4:	d124      	bne.n	801b710 <CRC_Lock+0x74>
 801b6c6:	4b18      	ldr	r3, [pc, #96]	; (801b728 <CRC_Lock+0x8c>)
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	bb0b      	cbnz	r3, 801b710 <CRC_Lock+0x74>
 801b6cc:	4b17      	ldr	r3, [pc, #92]	; (801b72c <CRC_Lock+0x90>)
 801b6ce:	681a      	ldr	r2, [r3, #0]
 801b6d0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801b6d4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b6d8:	d00d      	beq.n	801b6f6 <CRC_Lock+0x5a>
 801b6da:	f240 4483 	movw	r4, #1155	; 0x483
 801b6de:	681a      	ldr	r2, [r3, #0]
 801b6e0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801b6e4:	42a2      	cmp	r2, r4
 801b6e6:	d006      	beq.n	801b6f6 <CRC_Lock+0x5a>
 801b6e8:	f240 4285 	movw	r2, #1157	; 0x485
 801b6ec:	681b      	ldr	r3, [r3, #0]
 801b6ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b6f2:	4293      	cmp	r3, r2
 801b6f4:	d10c      	bne.n	801b710 <CRC_Lock+0x74>
 801b6f6:	2201      	movs	r2, #1
 801b6f8:	4b0d      	ldr	r3, [pc, #52]	; (801b730 <CRC_Lock+0x94>)
 801b6fa:	601a      	str	r2, [r3, #0]
 801b6fc:	681a      	ldr	r2, [r3, #0]
 801b6fe:	2a00      	cmp	r2, #0
 801b700:	d1fc      	bne.n	801b6fc <CRC_Lock+0x60>
 801b702:	4b0c      	ldr	r3, [pc, #48]	; (801b734 <CRC_Lock+0x98>)
 801b704:	6018      	str	r0, [r3, #0]
 801b706:	6818      	ldr	r0, [r3, #0]
 801b708:	1a43      	subs	r3, r0, r1
 801b70a:	4258      	negs	r0, r3
 801b70c:	4158      	adcs	r0, r3
 801b70e:	bd30      	pop	{r4, r5, pc}
 801b710:	2201      	movs	r2, #1
 801b712:	4b09      	ldr	r3, [pc, #36]	; (801b738 <CRC_Lock+0x9c>)
 801b714:	601a      	str	r2, [r3, #0]
 801b716:	681a      	ldr	r2, [r3, #0]
 801b718:	2a00      	cmp	r2, #0
 801b71a:	d1fc      	bne.n	801b716 <CRC_Lock+0x7a>
 801b71c:	4b07      	ldr	r3, [pc, #28]	; (801b73c <CRC_Lock+0xa0>)
 801b71e:	e7f1      	b.n	801b704 <CRC_Lock+0x68>
 801b720:	e0002000 	.word	0xe0002000
 801b724:	e000ed00 	.word	0xe000ed00
 801b728:	e0042000 	.word	0xe0042000
 801b72c:	5c001000 	.word	0x5c001000
 801b730:	58024c08 	.word	0x58024c08
 801b734:	58024c00 	.word	0x58024c00
 801b738:	40023008 	.word	0x40023008
 801b73c:	40023000 	.word	0x40023000

0801b740 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801b740:	6101      	str	r1, [r0, #16]
 801b742:	4770      	bx	lr

0801b744 <_ZN8touchgfx8Gestures4tickEv>:
 801b744:	7b83      	ldrb	r3, [r0, #14]
 801b746:	b14b      	cbz	r3, 801b75c <_ZN8touchgfx8Gestures4tickEv+0x18>
 801b748:	8903      	ldrh	r3, [r0, #8]
 801b74a:	3301      	adds	r3, #1
 801b74c:	b29b      	uxth	r3, r3
 801b74e:	2b07      	cmp	r3, #7
 801b750:	8103      	strh	r3, [r0, #8]
 801b752:	bf81      	itttt	hi
 801b754:	2300      	movhi	r3, #0
 801b756:	8143      	strhhi	r3, [r0, #10]
 801b758:	8183      	strhhi	r3, [r0, #12]
 801b75a:	7383      	strbhi	r3, [r0, #14]
 801b75c:	4770      	bx	lr
	...

0801b760 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801b760:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b764:	4698      	mov	r8, r3
 801b766:	4604      	mov	r4, r0
 801b768:	8883      	ldrh	r3, [r0, #4]
 801b76a:	460e      	mov	r6, r1
 801b76c:	88c1      	ldrh	r1, [r0, #6]
 801b76e:	2000      	movs	r0, #0
 801b770:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b774:	eba8 0303 	sub.w	r3, r8, r3
 801b778:	b21b      	sxth	r3, r3
 801b77a:	4617      	mov	r7, r2
 801b77c:	4a17      	ldr	r2, [pc, #92]	; (801b7dc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801b77e:	2b00      	cmp	r3, #0
 801b780:	bfb8      	it	lt
 801b782:	425b      	neglt	r3, r3
 801b784:	9200      	str	r2, [sp, #0]
 801b786:	8aa2      	ldrh	r2, [r4, #20]
 801b788:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801b78c:	b21b      	sxth	r3, r3
 801b78e:	4293      	cmp	r3, r2
 801b790:	f88d 0004 	strb.w	r0, [sp, #4]
 801b794:	f8ad 1008 	strh.w	r1, [sp, #8]
 801b798:	f8ad 800a 	strh.w	r8, [sp, #10]
 801b79c:	f8ad 500c 	strh.w	r5, [sp, #12]
 801b7a0:	dc07      	bgt.n	801b7b2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801b7a2:	1a69      	subs	r1, r5, r1
 801b7a4:	b209      	sxth	r1, r1
 801b7a6:	2900      	cmp	r1, #0
 801b7a8:	bfb8      	it	lt
 801b7aa:	4249      	neglt	r1, r1
 801b7ac:	b209      	sxth	r1, r1
 801b7ae:	428a      	cmp	r2, r1
 801b7b0:	da10      	bge.n	801b7d4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801b7b2:	6920      	ldr	r0, [r4, #16]
 801b7b4:	4669      	mov	r1, sp
 801b7b6:	6803      	ldr	r3, [r0, #0]
 801b7b8:	eba8 0606 	sub.w	r6, r8, r6
 801b7bc:	685b      	ldr	r3, [r3, #4]
 801b7be:	4798      	blx	r3
 801b7c0:	2300      	movs	r3, #0
 801b7c2:	2001      	movs	r0, #1
 801b7c4:	1bef      	subs	r7, r5, r7
 801b7c6:	8123      	strh	r3, [r4, #8]
 801b7c8:	8166      	strh	r6, [r4, #10]
 801b7ca:	81a7      	strh	r7, [r4, #12]
 801b7cc:	f8a4 8004 	strh.w	r8, [r4, #4]
 801b7d0:	80e5      	strh	r5, [r4, #6]
 801b7d2:	73a0      	strb	r0, [r4, #14]
 801b7d4:	b004      	add	sp, #16
 801b7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7da:	bf00      	nop
 801b7dc:	0802bcb4 	.word	0x0802bcb4

0801b7e0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801b7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7e2:	461e      	mov	r6, r3
 801b7e4:	1e4b      	subs	r3, r1, #1
 801b7e6:	2b01      	cmp	r3, #1
 801b7e8:	b085      	sub	sp, #20
 801b7ea:	4604      	mov	r4, r0
 801b7ec:	460d      	mov	r5, r1
 801b7ee:	4617      	mov	r7, r2
 801b7f0:	d84b      	bhi.n	801b88a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801b7f2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b7f6:	1cd3      	adds	r3, r2, #3
 801b7f8:	b29b      	uxth	r3, r3
 801b7fa:	2b06      	cmp	r3, #6
 801b7fc:	d916      	bls.n	801b82c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801b7fe:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801b8a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801b802:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b806:	f8cd c004 	str.w	ip, [sp, #4]
 801b80a:	f04f 0c00 	mov.w	ip, #0
 801b80e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b812:	6900      	ldr	r0, [r0, #16]
 801b814:	f8ad 100c 	strh.w	r1, [sp, #12]
 801b818:	f88d c008 	strb.w	ip, [sp, #8]
 801b81c:	f8ad 200a 	strh.w	r2, [sp, #10]
 801b820:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b824:	6803      	ldr	r3, [r0, #0]
 801b826:	a901      	add	r1, sp, #4
 801b828:	689b      	ldr	r3, [r3, #8]
 801b82a:	4798      	blx	r3
 801b82c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b830:	1cd3      	adds	r3, r2, #3
 801b832:	b29b      	uxth	r3, r3
 801b834:	2b06      	cmp	r3, #6
 801b836:	d916      	bls.n	801b866 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b838:	f8df c064 	ldr.w	ip, [pc, #100]	; 801b8a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801b83c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b840:	f8cd c004 	str.w	ip, [sp, #4]
 801b844:	f04f 0c01 	mov.w	ip, #1
 801b848:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b84c:	6920      	ldr	r0, [r4, #16]
 801b84e:	f8ad 100c 	strh.w	r1, [sp, #12]
 801b852:	f88d c008 	strb.w	ip, [sp, #8]
 801b856:	f8ad 200a 	strh.w	r2, [sp, #10]
 801b85a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b85e:	6803      	ldr	r3, [r0, #0]
 801b860:	a901      	add	r1, sp, #4
 801b862:	689b      	ldr	r3, [r3, #8]
 801b864:	4798      	blx	r3
 801b866:	4b0d      	ldr	r3, [pc, #52]	; (801b89c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801b868:	6920      	ldr	r0, [r4, #16]
 801b86a:	9301      	str	r3, [sp, #4]
 801b86c:	2300      	movs	r3, #0
 801b86e:	f88d 5008 	strb.w	r5, [sp, #8]
 801b872:	f8ad 700a 	strh.w	r7, [sp, #10]
 801b876:	f8ad 600c 	strh.w	r6, [sp, #12]
 801b87a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b87e:	6803      	ldr	r3, [r0, #0]
 801b880:	a901      	add	r1, sp, #4
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	4798      	blx	r3
 801b886:	b005      	add	sp, #20
 801b888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b88a:	2900      	cmp	r1, #0
 801b88c:	d1eb      	bne.n	801b866 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b88e:	80a2      	strh	r2, [r4, #4]
 801b890:	80c6      	strh	r6, [r0, #6]
 801b892:	60a1      	str	r1, [r4, #8]
 801b894:	81a1      	strh	r1, [r4, #12]
 801b896:	73a1      	strb	r1, [r4, #14]
 801b898:	e7e5      	b.n	801b866 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801b89a:	bf00      	nop
 801b89c:	0802bca0 	.word	0x0802bca0
 801b8a0:	0802bcc8 	.word	0x0802bcc8

0801b8a4 <nema_rb_init>:
 801b8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8a8:	6805      	ldr	r5, [r0, #0]
 801b8aa:	4f23      	ldr	r7, [pc, #140]	; (801b938 <nema_rb_init+0x94>)
 801b8ac:	2d00      	cmp	r5, #0
 801b8ae:	603d      	str	r5, [r7, #0]
 801b8b0:	dd3c      	ble.n	801b92c <nema_rb_init+0x88>
 801b8b2:	f8df c090 	ldr.w	ip, [pc, #144]	; 801b944 <nema_rb_init+0xa0>
 801b8b6:	10ab      	asrs	r3, r5, #2
 801b8b8:	3b04      	subs	r3, #4
 801b8ba:	f8df e08c 	ldr.w	lr, [pc, #140]	; 801b948 <nema_rb_init+0xa4>
 801b8be:	6886      	ldr	r6, [r0, #8]
 801b8c0:	4c1e      	ldr	r4, [pc, #120]	; (801b93c <nema_rb_init+0x98>)
 801b8c2:	f8cc 3000 	str.w	r3, [ip]
 801b8c6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 801b94c <nema_rb_init+0xa8>
 801b8ca:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801b8ce:	f8ce 0000 	str.w	r0, [lr]
 801b8d2:	6026      	str	r6, [r4, #0]
 801b8d4:	f8c8 c000 	str.w	ip, [r8]
 801b8d8:	b329      	cbz	r1, 801b926 <nema_rb_init+0x82>
 801b8da:	2400      	movs	r4, #0
 801b8dc:	f8df e070 	ldr.w	lr, [pc, #112]	; 801b950 <nema_rb_init+0xac>
 801b8e0:	4917      	ldr	r1, [pc, #92]	; (801b940 <nema_rb_init+0x9c>)
 801b8e2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801b8e6:	f846 e023 	str.w	lr, [r6, r3, lsl #2]
 801b8ea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b8ee:	e9c3 1502 	strd	r1, r5, [r3, #8]
 801b8f2:	f8c3 c004 	str.w	ip, [r3, #4]
 801b8f6:	f7e7 fd8c 	bl	8003412 <nema_buffer_flush>
 801b8fa:	4621      	mov	r1, r4
 801b8fc:	f44f 70a4 	mov.w	r0, #328	; 0x148
 801b900:	f7e7 fcd2 	bl	80032a8 <nema_reg_write>
 801b904:	f8d8 1000 	ldr.w	r1, [r8]
 801b908:	20ec      	movs	r0, #236	; 0xec
 801b90a:	f041 0106 	orr.w	r1, r1, #6
 801b90e:	f7e7 fccb 	bl	80032a8 <nema_reg_write>
 801b912:	f8d8 1000 	ldr.w	r1, [r8]
 801b916:	20f0      	movs	r0, #240	; 0xf0
 801b918:	f7e7 fcc6 	bl	80032a8 <nema_reg_write>
 801b91c:	6839      	ldr	r1, [r7, #0]
 801b91e:	20f4      	movs	r0, #244	; 0xf4
 801b920:	f7e7 fcc2 	bl	80032a8 <nema_reg_write>
 801b924:	4621      	mov	r1, r4
 801b926:	4608      	mov	r0, r1
 801b928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b92c:	2004      	movs	r0, #4
 801b92e:	f000 fa25 	bl	801bd7c <nema_set_error>
 801b932:	f04f 31ff 	mov.w	r1, #4294967295
 801b936:	e7f6      	b.n	801b926 <nema_rb_init+0x82>
 801b938:	20197adc 	.word	0x20197adc
 801b93c:	20197ad4 	.word	0x20197ad4
 801b940:	ff0000f4 	.word	0xff0000f4
 801b944:	20197ad8 	.word	0x20197ad8
 801b948:	20197acc 	.word	0x20197acc
 801b94c:	20197ad0 	.word	0x20197ad0
 801b950:	ff0000f0 	.word	0xff0000f0

0801b954 <nema_rb_submit_cmdlist2>:
 801b954:	2900      	cmp	r1, #0
 801b956:	d074      	beq.n	801ba42 <nema_rb_submit_cmdlist2+0xee>
 801b958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b95c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 801ba58 <nema_rb_submit_cmdlist2+0x104>
 801b960:	4b39      	ldr	r3, [pc, #228]	; (801ba48 <nema_rb_submit_cmdlist2+0xf4>)
 801b962:	f8d8 2000 	ldr.w	r2, [r8]
 801b966:	681d      	ldr	r5, [r3, #0]
 801b968:	6913      	ldr	r3, [r2, #16]
 801b96a:	468c      	mov	ip, r1
 801b96c:	4c37      	ldr	r4, [pc, #220]	; (801ba4c <nema_rb_submit_cmdlist2+0xf8>)
 801b96e:	1d19      	adds	r1, r3, #4
 801b970:	42a9      	cmp	r1, r5
 801b972:	6824      	ldr	r4, [r4, #0]
 801b974:	db0a      	blt.n	801b98c <nema_rb_submit_cmdlist2+0x38>
 801b976:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801b97a:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 801b97e:	6913      	ldr	r3, [r2, #16]
 801b980:	3301      	adds	r3, #1
 801b982:	429d      	cmp	r5, r3
 801b984:	6113      	str	r3, [r2, #16]
 801b986:	dc59      	bgt.n	801ba3c <nema_rb_submit_cmdlist2+0xe8>
 801b988:	2300      	movs	r3, #0
 801b98a:	6113      	str	r3, [r2, #16]
 801b98c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801b990:	f04f 0e00 	mov.w	lr, #0
 801b994:	e009      	b.n	801b9aa <nema_rb_submit_cmdlist2+0x56>
 801b996:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 801b99a:	6913      	ldr	r3, [r2, #16]
 801b99c:	3301      	adds	r3, #1
 801b99e:	429d      	cmp	r5, r3
 801b9a0:	6113      	str	r3, [r2, #16]
 801b9a2:	bfdc      	itt	le
 801b9a4:	2300      	movle	r3, #0
 801b9a6:	f8c2 e010 	strle.w	lr, [r2, #16]
 801b9aa:	f013 0703 	ands.w	r7, r3, #3
 801b9ae:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b9b2:	d1f0      	bne.n	801b996 <nema_rb_submit_cmdlist2+0x42>
 801b9b4:	23f0      	movs	r3, #240	; 0xf0
 801b9b6:	6033      	str	r3, [r6, #0]
 801b9b8:	6913      	ldr	r3, [r2, #16]
 801b9ba:	3301      	adds	r3, #1
 801b9bc:	429d      	cmp	r5, r3
 801b9be:	bfd3      	iteet	le
 801b9c0:	4623      	movle	r3, r4
 801b9c2:	6113      	strgt	r3, [r2, #16]
 801b9c4:	eb04 0383 	addgt.w	r3, r4, r3, lsl #2
 801b9c8:	6117      	strle	r7, [r2, #16]
 801b9ca:	6018      	str	r0, [r3, #0]
 801b9cc:	6913      	ldr	r3, [r2, #16]
 801b9ce:	3301      	adds	r3, #1
 801b9d0:	429d      	cmp	r5, r3
 801b9d2:	dd2f      	ble.n	801ba34 <nema_rb_submit_cmdlist2+0xe0>
 801b9d4:	6113      	str	r3, [r2, #16]
 801b9d6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b9da:	491d      	ldr	r1, [pc, #116]	; (801ba50 <nema_rb_submit_cmdlist2+0xfc>)
 801b9dc:	4610      	mov	r0, r2
 801b9de:	6019      	str	r1, [r3, #0]
 801b9e0:	6913      	ldr	r3, [r2, #16]
 801b9e2:	3301      	adds	r3, #1
 801b9e4:	429d      	cmp	r5, r3
 801b9e6:	bfd3      	iteet	le
 801b9e8:	2300      	movle	r3, #0
 801b9ea:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
 801b9ee:	6113      	strgt	r3, [r2, #16]
 801b9f0:	6113      	strle	r3, [r2, #16]
 801b9f2:	f8c4 c000 	str.w	ip, [r4]
 801b9f6:	6913      	ldr	r3, [r2, #16]
 801b9f8:	3301      	adds	r3, #1
 801b9fa:	429d      	cmp	r5, r3
 801b9fc:	bfd8      	it	le
 801b9fe:	2300      	movle	r3, #0
 801ba00:	6113      	str	r3, [r2, #16]
 801ba02:	f7e7 fd06 	bl	8003412 <nema_buffer_flush>
 801ba06:	4a13      	ldr	r2, [pc, #76]	; (801ba54 <nema_rb_submit_cmdlist2+0x100>)
 801ba08:	f8d8 3000 	ldr.w	r3, [r8]
 801ba0c:	6811      	ldr	r1, [r2, #0]
 801ba0e:	691b      	ldr	r3, [r3, #16]
 801ba10:	20ec      	movs	r0, #236	; 0xec
 801ba12:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801ba16:	f041 0104 	orr.w	r1, r1, #4
 801ba1a:	f7e7 fc45 	bl	80032a8 <nema_reg_write>
 801ba1e:	f8d8 3000 	ldr.w	r3, [r8]
 801ba22:	6958      	ldr	r0, [r3, #20]
 801ba24:	3001      	adds	r0, #1
 801ba26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 801ba2a:	bfa8      	it	ge
 801ba2c:	2000      	movge	r0, #0
 801ba2e:	6158      	str	r0, [r3, #20]
 801ba30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba34:	2100      	movs	r1, #0
 801ba36:	4623      	mov	r3, r4
 801ba38:	6111      	str	r1, [r2, #16]
 801ba3a:	e7ce      	b.n	801b9da <nema_rb_submit_cmdlist2+0x86>
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	d19c      	bne.n	801b97a <nema_rb_submit_cmdlist2+0x26>
 801ba40:	e7a4      	b.n	801b98c <nema_rb_submit_cmdlist2+0x38>
 801ba42:	f04f 30ff 	mov.w	r0, #4294967295
 801ba46:	4770      	bx	lr
 801ba48:	20197ad8 	.word	0x20197ad8
 801ba4c:	20197ad4 	.word	0x20197ad4
 801ba50:	000200f4 	.word	0x000200f4
 801ba54:	20197ad0 	.word	0x20197ad0
 801ba58:	20197acc 	.word	0x20197acc

0801ba5c <nema_rb_submit_cmdlist>:
 801ba5c:	68c0      	ldr	r0, [r0, #12]
 801ba5e:	f7ff bf79 	b.w	801b954 <nema_rb_submit_cmdlist2>
 801ba62:	bf00      	nop

0801ba64 <nema_rb_inline_cmd>:
 801ba64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba66:	4e21      	ldr	r6, [pc, #132]	; (801baec <nema_rb_inline_cmd+0x88>)
 801ba68:	4b21      	ldr	r3, [pc, #132]	; (801baf0 <nema_rb_inline_cmd+0x8c>)
 801ba6a:	6832      	ldr	r2, [r6, #0]
 801ba6c:	681d      	ldr	r5, [r3, #0]
 801ba6e:	6913      	ldr	r3, [r2, #16]
 801ba70:	4c20      	ldr	r4, [pc, #128]	; (801baf4 <nema_rb_inline_cmd+0x90>)
 801ba72:	1c5f      	adds	r7, r3, #1
 801ba74:	42af      	cmp	r7, r5
 801ba76:	6824      	ldr	r4, [r4, #0]
 801ba78:	db24      	blt.n	801bac4 <nema_rb_inline_cmd+0x60>
 801ba7a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 801ba7e:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 801ba82:	6913      	ldr	r3, [r2, #16]
 801ba84:	3301      	adds	r3, #1
 801ba86:	429d      	cmp	r5, r3
 801ba88:	6113      	str	r3, [r2, #16]
 801ba8a:	dc17      	bgt.n	801babc <nema_rb_inline_cmd+0x58>
 801ba8c:	2700      	movs	r7, #0
 801ba8e:	4623      	mov	r3, r4
 801ba90:	6117      	str	r7, [r2, #16]
 801ba92:	6018      	str	r0, [r3, #0]
 801ba94:	6913      	ldr	r3, [r2, #16]
 801ba96:	3301      	adds	r3, #1
 801ba98:	429d      	cmp	r5, r3
 801ba9a:	bfd3      	iteet	le
 801ba9c:	2300      	movle	r3, #0
 801ba9e:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
 801baa2:	6113      	strgt	r3, [r2, #16]
 801baa4:	6113      	strle	r3, [r2, #16]
 801baa6:	6021      	str	r1, [r4, #0]
 801baa8:	6913      	ldr	r3, [r2, #16]
 801baaa:	3301      	adds	r3, #1
 801baac:	429d      	cmp	r5, r3
 801baae:	bfd8      	it	le
 801bab0:	2300      	movle	r3, #0
 801bab2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801bab6:	6113      	str	r3, [r2, #16]
 801bab8:	d107      	bne.n	801baca <nema_rb_inline_cmd+0x66>
 801baba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801babc:	2b00      	cmp	r3, #0
 801babe:	d1de      	bne.n	801ba7e <nema_rb_inline_cmd+0x1a>
 801bac0:	4623      	mov	r3, r4
 801bac2:	e7e6      	b.n	801ba92 <nema_rb_inline_cmd+0x2e>
 801bac4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801bac8:	e7e3      	b.n	801ba92 <nema_rb_inline_cmd+0x2e>
 801baca:	4610      	mov	r0, r2
 801bacc:	f7e7 fca1 	bl	8003412 <nema_buffer_flush>
 801bad0:	6833      	ldr	r3, [r6, #0]
 801bad2:	4a09      	ldr	r2, [pc, #36]	; (801baf8 <nema_rb_inline_cmd+0x94>)
 801bad4:	691b      	ldr	r3, [r3, #16]
 801bad6:	6811      	ldr	r1, [r2, #0]
 801bad8:	20ec      	movs	r0, #236	; 0xec
 801bada:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801bade:	f041 0104 	orr.w	r1, r1, #4
 801bae2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801bae6:	f7e7 bbdf 	b.w	80032a8 <nema_reg_write>
 801baea:	bf00      	nop
 801baec:	20197acc 	.word	0x20197acc
 801baf0:	20197ad8 	.word	0x20197ad8
 801baf4:	20197ad4 	.word	0x20197ad4
 801baf8:	20197ad0 	.word	0x20197ad0

0801bafc <nema_rb_force_flush>:
 801bafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bafe:	4e36      	ldr	r6, [pc, #216]	; (801bbd8 <nema_rb_force_flush+0xdc>)
 801bb00:	4b36      	ldr	r3, [pc, #216]	; (801bbdc <nema_rb_force_flush+0xe0>)
 801bb02:	6830      	ldr	r0, [r6, #0]
 801bb04:	6819      	ldr	r1, [r3, #0]
 801bb06:	6903      	ldr	r3, [r0, #16]
 801bb08:	4a35      	ldr	r2, [pc, #212]	; (801bbe0 <nema_rb_force_flush+0xe4>)
 801bb0a:	1d1c      	adds	r4, r3, #4
 801bb0c:	428c      	cmp	r4, r1
 801bb0e:	6812      	ldr	r2, [r2, #0]
 801bb10:	db0a      	blt.n	801bb28 <nema_rb_force_flush+0x2c>
 801bb12:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801bb16:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 801bb1a:	6903      	ldr	r3, [r0, #16]
 801bb1c:	3301      	adds	r3, #1
 801bb1e:	4299      	cmp	r1, r3
 801bb20:	6103      	str	r3, [r0, #16]
 801bb22:	dc51      	bgt.n	801bbc8 <nema_rb_force_flush+0xcc>
 801bb24:	2300      	movs	r3, #0
 801bb26:	6103      	str	r3, [r0, #16]
 801bb28:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 801bb2c:	2700      	movs	r7, #0
 801bb2e:	e008      	b.n	801bb42 <nema_rb_force_flush+0x46>
 801bb30:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 801bb34:	6903      	ldr	r3, [r0, #16]
 801bb36:	3301      	adds	r3, #1
 801bb38:	4299      	cmp	r1, r3
 801bb3a:	6103      	str	r3, [r0, #16]
 801bb3c:	bfdc      	itt	le
 801bb3e:	2300      	movle	r3, #0
 801bb40:	6107      	strle	r7, [r0, #16]
 801bb42:	f013 0c03 	ands.w	ip, r3, #3
 801bb46:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 801bb4a:	d1f1      	bne.n	801bb30 <nema_rb_force_flush+0x34>
 801bb4c:	4d25      	ldr	r5, [pc, #148]	; (801bbe4 <nema_rb_force_flush+0xe8>)
 801bb4e:	4f26      	ldr	r7, [pc, #152]	; (801bbe8 <nema_rb_force_flush+0xec>)
 801bb50:	6025      	str	r5, [r4, #0]
 801bb52:	6904      	ldr	r4, [r0, #16]
 801bb54:	683d      	ldr	r5, [r7, #0]
 801bb56:	3401      	adds	r4, #1
 801bb58:	42a1      	cmp	r1, r4
 801bb5a:	bfd8      	it	le
 801bb5c:	4614      	movle	r4, r2
 801bb5e:	f103 0304 	add.w	r3, r3, #4
 801bb62:	bfc8      	it	gt
 801bb64:	6104      	strgt	r4, [r0, #16]
 801bb66:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801bb6a:	bfcc      	ite	gt
 801bb6c:	eb02 0484 	addgt.w	r4, r2, r4, lsl #2
 801bb70:	f8c0 c010 	strle.w	ip, [r0, #16]
 801bb74:	6023      	str	r3, [r4, #0]
 801bb76:	6903      	ldr	r3, [r0, #16]
 801bb78:	3301      	adds	r3, #1
 801bb7a:	4299      	cmp	r1, r3
 801bb7c:	dd27      	ble.n	801bbce <nema_rb_force_flush+0xd2>
 801bb7e:	6103      	str	r3, [r0, #16]
 801bb80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bb84:	4c19      	ldr	r4, [pc, #100]	; (801bbec <nema_rb_force_flush+0xf0>)
 801bb86:	601c      	str	r4, [r3, #0]
 801bb88:	6903      	ldr	r3, [r0, #16]
 801bb8a:	3301      	adds	r3, #1
 801bb8c:	4299      	cmp	r1, r3
 801bb8e:	bfd5      	itete	le
 801bb90:	2300      	movle	r3, #0
 801bb92:	6103      	strgt	r3, [r0, #16]
 801bb94:	6103      	strle	r3, [r0, #16]
 801bb96:	eb02 0283 	addgt.w	r2, r2, r3, lsl #2
 801bb9a:	4b15      	ldr	r3, [pc, #84]	; (801bbf0 <nema_rb_force_flush+0xf4>)
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	6013      	str	r3, [r2, #0]
 801bba0:	6903      	ldr	r3, [r0, #16]
 801bba2:	3301      	adds	r3, #1
 801bba4:	4299      	cmp	r1, r3
 801bba6:	bfd8      	it	le
 801bba8:	2300      	movle	r3, #0
 801bbaa:	6103      	str	r3, [r0, #16]
 801bbac:	f7e7 fc31 	bl	8003412 <nema_buffer_flush>
 801bbb0:	6833      	ldr	r3, [r6, #0]
 801bbb2:	6839      	ldr	r1, [r7, #0]
 801bbb4:	691b      	ldr	r3, [r3, #16]
 801bbb6:	20ec      	movs	r0, #236	; 0xec
 801bbb8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801bbbc:	f041 0104 	orr.w	r1, r1, #4
 801bbc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801bbc4:	f7e7 bb70 	b.w	80032a8 <nema_reg_write>
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d1a4      	bne.n	801bb16 <nema_rb_force_flush+0x1a>
 801bbcc:	e7ac      	b.n	801bb28 <nema_rb_force_flush+0x2c>
 801bbce:	2400      	movs	r4, #0
 801bbd0:	4613      	mov	r3, r2
 801bbd2:	6104      	str	r4, [r0, #16]
 801bbd4:	e7d6      	b.n	801bb84 <nema_rb_force_flush+0x88>
 801bbd6:	bf00      	nop
 801bbd8:	20197acc 	.word	0x20197acc
 801bbdc:	20197ad8 	.word	0x20197ad8
 801bbe0:	20197ad4 	.word	0x20197ad4
 801bbe4:	ff0000f0 	.word	0xff0000f0
 801bbe8:	20197ad0 	.word	0x20197ad0
 801bbec:	ff0000f4 	.word	0xff0000f4
 801bbf0:	20197adc 	.word	0x20197adc

0801bbf4 <nema_rb_submit_cl_id>:
 801bbf4:	b510      	push	{r4, lr}
 801bbf6:	1e04      	subs	r4, r0, #0
 801bbf8:	dd40      	ble.n	801bc7c <nema_rb_submit_cl_id+0x88>
 801bbfa:	2000      	movs	r0, #0
 801bbfc:	f7e7 fc13 	bl	8003426 <nema_mutex_lock>
 801bc00:	4621      	mov	r1, r4
 801bc02:	f44f 70a4 	mov.w	r0, #328	; 0x148
 801bc06:	f7ff ff2d 	bl	801ba64 <nema_rb_inline_cmd>
 801bc0a:	4a1d      	ldr	r2, [pc, #116]	; (801bc80 <nema_rb_submit_cl_id+0x8c>)
 801bc0c:	4b1d      	ldr	r3, [pc, #116]	; (801bc84 <nema_rb_submit_cl_id+0x90>)
 801bc0e:	6812      	ldr	r2, [r2, #0]
 801bc10:	6818      	ldr	r0, [r3, #0]
 801bc12:	6913      	ldr	r3, [r2, #16]
 801bc14:	1c59      	adds	r1, r3, #1
 801bc16:	4281      	cmp	r1, r0
 801bc18:	db0e      	blt.n	801bc38 <nema_rb_submit_cl_id+0x44>
 801bc1a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801bc1e:	491a      	ldr	r1, [pc, #104]	; (801bc88 <nema_rb_submit_cl_id+0x94>)
 801bc20:	6809      	ldr	r1, [r1, #0]
 801bc22:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 801bc26:	6913      	ldr	r3, [r2, #16]
 801bc28:	3301      	adds	r3, #1
 801bc2a:	4298      	cmp	r0, r3
 801bc2c:	6113      	str	r3, [r2, #16]
 801bc2e:	dc21      	bgt.n	801bc74 <nema_rb_submit_cl_id+0x80>
 801bc30:	2400      	movs	r4, #0
 801bc32:	460b      	mov	r3, r1
 801bc34:	6114      	str	r4, [r2, #16]
 801bc36:	e003      	b.n	801bc40 <nema_rb_submit_cl_id+0x4c>
 801bc38:	4913      	ldr	r1, [pc, #76]	; (801bc88 <nema_rb_submit_cl_id+0x94>)
 801bc3a:	6809      	ldr	r1, [r1, #0]
 801bc3c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801bc40:	24f8      	movs	r4, #248	; 0xf8
 801bc42:	601c      	str	r4, [r3, #0]
 801bc44:	6913      	ldr	r3, [r2, #16]
 801bc46:	3301      	adds	r3, #1
 801bc48:	4298      	cmp	r0, r3
 801bc4a:	bfd5      	itete	le
 801bc4c:	2300      	movle	r3, #0
 801bc4e:	6113      	strgt	r3, [r2, #16]
 801bc50:	6113      	strle	r3, [r2, #16]
 801bc52:	eb01 0183 	addgt.w	r1, r1, r3, lsl #2
 801bc56:	2301      	movs	r3, #1
 801bc58:	600b      	str	r3, [r1, #0]
 801bc5a:	6913      	ldr	r3, [r2, #16]
 801bc5c:	3301      	adds	r3, #1
 801bc5e:	4298      	cmp	r0, r3
 801bc60:	bfd8      	it	le
 801bc62:	2300      	movle	r3, #0
 801bc64:	6113      	str	r3, [r2, #16]
 801bc66:	f7ff ff49 	bl	801bafc <nema_rb_force_flush>
 801bc6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc6e:	2000      	movs	r0, #0
 801bc70:	f7e7 bbe6 	b.w	8003440 <nema_mutex_unlock>
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d1d4      	bne.n	801bc22 <nema_rb_submit_cl_id+0x2e>
 801bc78:	460b      	mov	r3, r1
 801bc7a:	e7e1      	b.n	801bc40 <nema_rb_submit_cl_id+0x4c>
 801bc7c:	bd10      	pop	{r4, pc}
 801bc7e:	bf00      	nop
 801bc80:	20197acc 	.word	0x20197acc
 801bc84:	20197ad8 	.word	0x20197ad8
 801bc88:	20197ad4 	.word	0x20197ad4

0801bc8c <init_nema_regs>:
 801bc8c:	b538      	push	{r3, r4, r5, lr}
 801bc8e:	2100      	movs	r1, #0
 801bc90:	20e8      	movs	r0, #232	; 0xe8
 801bc92:	f7e7 fb09 	bl	80032a8 <nema_reg_write>
 801bc96:	2100      	movs	r1, #0
 801bc98:	20fc      	movs	r0, #252	; 0xfc
 801bc9a:	f7e7 fb05 	bl	80032a8 <nema_reg_write>
 801bc9e:	2101      	movs	r1, #1
 801bca0:	f44f 7062 	mov.w	r0, #904	; 0x388
 801bca4:	f7e7 fb00 	bl	80032a8 <nema_reg_write>
 801bca8:	2000      	movs	r0, #0
 801bcaa:	f001 f8f7 	bl	801ce9c <nema_set_interrupt_ctrl>
 801bcae:	f001 fe93 	bl	801d9d8 <nema_blender_init>
 801bcb2:	2100      	movs	r1, #0
 801bcb4:	f44f 7000 	mov.w	r0, #512	; 0x200
 801bcb8:	f001 fda0 	bl	801d7fc <nema_cl_add_cmd>
 801bcbc:	f04f 31ff 	mov.w	r1, #4294967295
 801bcc0:	f44f 7001 	mov.w	r0, #516	; 0x204
 801bcc4:	f001 fd9a 	bl	801d7fc <nema_cl_add_cmd>
 801bcc8:	f000 fec6 	bl	801ca58 <nema_readHwConfig>
 801bccc:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
 801bcd0:	d015      	beq.n	801bcfe <init_nema_regs+0x72>
 801bcd2:	2007      	movs	r0, #7
 801bcd4:	f001 f82e 	bl	801cd34 <nema_set_depth_ctrl>
 801bcd8:	2300      	movs	r3, #0
 801bcda:	4c10      	ldr	r4, [pc, #64]	; (801bd1c <init_nema_regs+0x90>)
 801bcdc:	7820      	ldrb	r0, [r4, #0]
 801bcde:	7063      	strb	r3, [r4, #1]
 801bce0:	f000 fecc 	bl	801ca7c <nema_enable_tiling>
 801bce4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801bce8:	2500      	movs	r5, #0
 801bcea:	6962      	ldr	r2, [r4, #20]
 801bcec:	430b      	orrs	r3, r1
 801bcee:	4313      	orrs	r3, r2
 801bcf0:	e9c4 5303 	strd	r5, r3, [r4, #12]
 801bcf4:	f000 febe 	bl	801ca74 <nema_readHwConfigH>
 801bcf8:	0583      	lsls	r3, r0, #22
 801bcfa:	d403      	bmi.n	801bd04 <init_nema_regs+0x78>
 801bcfc:	bd38      	pop	{r3, r4, r5, pc}
 801bcfe:	4c07      	ldr	r4, [pc, #28]	; (801bd1c <init_nema_regs+0x90>)
 801bd00:	70a0      	strb	r0, [r4, #2]
 801bd02:	e7ef      	b.n	801bce4 <init_nema_regs+0x58>
 801bd04:	4629      	mov	r1, r5
 801bd06:	f44f 705d 	mov.w	r0, #884	; 0x374
 801bd0a:	f7e7 facd 	bl	80032a8 <nema_reg_write>
 801bd0e:	4629      	mov	r1, r5
 801bd10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bd14:	f44f 705a 	mov.w	r0, #872	; 0x368
 801bd18:	f7e7 bac6 	b.w	80032a8 <nema_reg_write>
 801bd1c:	20197e7c 	.word	0x20197e7c

0801bd20 <nema_init>:
 801bd20:	b510      	push	{r4, lr}
 801bd22:	f7e7 fa4b 	bl	80031bc <nema_sys_init>
 801bd26:	1e04      	subs	r4, r0, #0
 801bd28:	db11      	blt.n	801bd4e <nema_init+0x2e>
 801bd2a:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
 801bd2e:	f7e7 faab 	bl	8003288 <nema_reg_read>
 801bd32:	4b10      	ldr	r3, [pc, #64]	; (801bd74 <nema_init+0x54>)
 801bd34:	4298      	cmp	r0, r3
 801bd36:	d114      	bne.n	801bd62 <nema_init+0x42>
 801bd38:	f001 fc7e 	bl	801d638 <nema_cl_unbind>
 801bd3c:	22d0      	movs	r2, #208	; 0xd0
 801bd3e:	2100      	movs	r1, #0
 801bd40:	480d      	ldr	r0, [pc, #52]	; (801bd78 <nema_init+0x58>)
 801bd42:	f00d fb05 	bl	8029350 <memset>
 801bd46:	b14c      	cbz	r4, 801bd5c <nema_init+0x3c>
 801bd48:	2400      	movs	r4, #0
 801bd4a:	4620      	mov	r0, r4
 801bd4c:	bd10      	pop	{r4, pc}
 801bd4e:	4a0a      	ldr	r2, [pc, #40]	; (801bd78 <nema_init+0x58>)
 801bd50:	4620      	mov	r0, r4
 801bd52:	6993      	ldr	r3, [r2, #24]
 801bd54:	f043 0301 	orr.w	r3, r3, #1
 801bd58:	6193      	str	r3, [r2, #24]
 801bd5a:	bd10      	pop	{r4, pc}
 801bd5c:	f7ff ff96 	bl	801bc8c <init_nema_regs>
 801bd60:	e7f3      	b.n	801bd4a <nema_init+0x2a>
 801bd62:	4a05      	ldr	r2, [pc, #20]	; (801bd78 <nema_init+0x58>)
 801bd64:	f04f 34ff 	mov.w	r4, #4294967295
 801bd68:	6993      	ldr	r3, [r2, #24]
 801bd6a:	f043 0302 	orr.w	r3, r3, #2
 801bd6e:	6193      	str	r3, [r2, #24]
 801bd70:	e7eb      	b.n	801bd4a <nema_init+0x2a>
 801bd72:	bf00      	nop
 801bd74:	86362000 	.word	0x86362000
 801bd78:	20197e7c 	.word	0x20197e7c

0801bd7c <nema_set_error>:
 801bd7c:	4a02      	ldr	r2, [pc, #8]	; (801bd88 <nema_set_error+0xc>)
 801bd7e:	6993      	ldr	r3, [r2, #24]
 801bd80:	4318      	orrs	r0, r3
 801bd82:	6190      	str	r0, [r2, #24]
 801bd84:	4770      	bx	lr
 801bd86:	bf00      	nop
 801bd88:	20197e7c 	.word	0x20197e7c

0801bd8c <nema_set_tex_color>:
 801bd8c:	4601      	mov	r1, r0
 801bd8e:	201c      	movs	r0, #28
 801bd90:	f001 bd34 	b.w	801d7fc <nema_cl_add_cmd>

0801bd94 <nema_set_const_reg>:
 801bd94:	3080      	adds	r0, #128	; 0x80
 801bd96:	0080      	lsls	r0, r0, #2
 801bd98:	f5b0 7f03 	cmp.w	r0, #524	; 0x20c
 801bd9c:	d900      	bls.n	801bda0 <nema_set_const_reg+0xc>
 801bd9e:	4770      	bx	lr
 801bda0:	f001 bd2c 	b.w	801d7fc <nema_cl_add_cmd>

0801bda4 <nema_set_clip>:
 801bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bda6:	460c      	mov	r4, r1
 801bda8:	4607      	mov	r7, r0
 801bdaa:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 801bdae:	4d0c      	ldr	r5, [pc, #48]	; (801bde0 <nema_set_clip+0x3c>)
 801bdb0:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 801bdb4:	b289      	uxth	r1, r1
 801bdb6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801bdba:	19d6      	adds	r6, r2, r7
 801bdbc:	f44f 7088 	mov.w	r0, #272	; 0x110
 801bdc0:	e9c5 7407 	strd	r7, r4, [r5, #28]
 801bdc4:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
 801bdc8:	441c      	add	r4, r3
 801bdca:	f001 fd17 	bl	801d7fc <nema_cl_add_cmd>
 801bdce:	b2b1      	uxth	r1, r6
 801bdd0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801bdd4:	f44f 708a 	mov.w	r0, #276	; 0x114
 801bdd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801bddc:	f001 bd0e 	b.w	801d7fc <nema_cl_add_cmd>
 801bde0:	20197e7c 	.word	0x20197e7c

0801bde4 <nema_enable_gradient>:
 801bde4:	2800      	cmp	r0, #0
 801bde6:	bf14      	ite	ne
 801bde8:	f04f 6100 	movne.w	r1, #134217728	; 0x8000000
 801bdec:	2100      	moveq	r1, #0
 801bdee:	b410      	push	{r4}
 801bdf0:	4a05      	ldr	r2, [pc, #20]	; (801be08 <nema_enable_gradient+0x24>)
 801bdf2:	6950      	ldr	r0, [r2, #20]
 801bdf4:	e9d2 3401 	ldrd	r3, r4, [r2, #4]
 801bdf8:	4323      	orrs	r3, r4
 801bdfa:	4303      	orrs	r3, r0
 801bdfc:	430b      	orrs	r3, r1
 801bdfe:	e9c2 1303 	strd	r1, r3, [r2, #12]
 801be02:	f85d 4b04 	ldr.w	r4, [sp], #4
 801be06:	4770      	bx	lr
 801be08:	20197e7c 	.word	0x20197e7c

0801be0c <nema_rgba>:
 801be0c:	061b      	lsls	r3, r3, #24
 801be0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801be12:	4318      	orrs	r0, r3
 801be14:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801be18:	4770      	bx	lr
 801be1a:	bf00      	nop

0801be1c <nema_bind_src_tex>:
 801be1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be20:	9c06      	ldr	r4, [sp, #24]
 801be22:	460e      	mov	r6, r1
 801be24:	1c61      	adds	r1, r4, #1
 801be26:	4605      	mov	r5, r0
 801be28:	4617      	mov	r7, r2
 801be2a:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801be2e:	d022      	beq.n	801be76 <nema_bind_src_tex+0x5a>
 801be30:	2201      	movs	r2, #1
 801be32:	0400      	lsls	r0, r0, #16
 801be34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801bf08 <nema_bind_src_tex+0xec>
 801be38:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 801be3c:	b2a4      	uxth	r4, r4
 801be3e:	4323      	orrs	r3, r4
 801be40:	2003      	movs	r0, #3
 801be42:	f8c8 3050 	str.w	r3, [r8, #80]	; 0x50
 801be46:	e9c8 5611 	strd	r5, r6, [r8, #68]	; 0x44
 801be4a:	f8c8 704c 	str.w	r7, [r8, #76]	; 0x4c
 801be4e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 801be52:	f001 fc75 	bl	801d740 <nema_cl_get_space>
 801be56:	b160      	cbz	r0, 801be72 <nema_bind_src_tex+0x56>
 801be58:	2110      	movs	r1, #16
 801be5a:	2214      	movs	r2, #20
 801be5c:	2318      	movs	r3, #24
 801be5e:	e9c0 1500 	strd	r1, r5, [r0]
 801be62:	6082      	str	r2, [r0, #8]
 801be64:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 801be68:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 801be6c:	e9c0 2303 	strd	r2, r3, [r0, #12]
 801be70:	6146      	str	r6, [r0, #20]
 801be72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be76:	06c2      	lsls	r2, r0, #27
 801be78:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 801be7c:	d41c      	bmi.n	801beb8 <nema_bind_src_tex+0x9c>
 801be7e:	4634      	mov	r4, r6
 801be80:	f1a1 020b 	sub.w	r2, r1, #11
 801be84:	2a2a      	cmp	r2, #42	; 0x2a
 801be86:	d833      	bhi.n	801bef0 <nema_bind_src_tex+0xd4>
 801be88:	e8df f002 	tbb	[pc, r2]
 801be8c:	32322a2a 	.word	0x32322a2a
 801be90:	30323232 	.word	0x30323232
 801be94:	1c323232 	.word	0x1c323232
 801be98:	3232321c 	.word	0x3232321c
 801be9c:	32323232 	.word	0x32323232
 801bea0:	32323232 	.word	0x32323232
 801bea4:	32323232 	.word	0x32323232
 801bea8:	2a241f2a 	.word	0x2a241f2a
 801beac:	3232241f 	.word	0x3232241f
 801beb0:	321f1f32 	.word	0x321f1f32
 801beb4:	2432      	.short	0x2432
 801beb6:	24          	.byte	0x24
 801beb7:	00          	.byte	0x00
 801beb8:	1cf4      	adds	r4, r6, #3
 801beba:	bf48      	it	mi
 801bebc:	1db4      	addmi	r4, r6, #6
 801bebe:	f024 0403 	bic.w	r4, r4, #3
 801bec2:	e7dd      	b.n	801be80 <nema_bind_src_tex+0x64>
 801bec4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bec8:	e7b2      	b.n	801be30 <nema_bind_src_tex+0x14>
 801beca:	0062      	lsls	r2, r4, #1
 801becc:	1dd4      	adds	r4, r2, #7
 801bece:	d404      	bmi.n	801beda <nema_bind_src_tex+0xbe>
 801bed0:	10e4      	asrs	r4, r4, #3
 801bed2:	e7ad      	b.n	801be30 <nema_bind_src_tex+0x14>
 801bed4:	00a2      	lsls	r2, r4, #2
 801bed6:	1dd4      	adds	r4, r2, #7
 801bed8:	d5fa      	bpl.n	801bed0 <nema_bind_src_tex+0xb4>
 801beda:	f102 040e 	add.w	r4, r2, #14
 801bede:	e7f7      	b.n	801bed0 <nema_bind_src_tex+0xb4>
 801bee0:	1de2      	adds	r2, r4, #7
 801bee2:	bf48      	it	mi
 801bee4:	f104 020e 	addmi.w	r2, r4, #14
 801bee8:	10d4      	asrs	r4, r2, #3
 801beea:	e7a1      	b.n	801be30 <nema_bind_src_tex+0x14>
 801beec:	0064      	lsls	r4, r4, #1
 801beee:	e79f      	b.n	801be30 <nema_bind_src_tex+0x14>
 801bef0:	3904      	subs	r1, #4
 801bef2:	2947      	cmp	r1, #71	; 0x47
 801bef4:	bf8e      	itee	hi
 801bef6:	2204      	movhi	r2, #4
 801bef8:	4a02      	ldrls	r2, [pc, #8]	; (801bf04 <nema_bind_src_tex+0xe8>)
 801befa:	5652      	ldrsbls	r2, [r2, r1]
 801befc:	fb02 f404 	mul.w	r4, r2, r4
 801bf00:	e796      	b.n	801be30 <nema_bind_src_tex+0x14>
 801bf02:	bf00      	nop
 801bf04:	0802bd08 	.word	0x0802bd08
 801bf08:	20197e7c 	.word	0x20197e7c

0801bf0c <nema_bind_dst_tex>:
 801bf0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf10:	9c08      	ldr	r4, [sp, #32]
 801bf12:	4699      	mov	r9, r3
 801bf14:	4617      	mov	r7, r2
 801bf16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801bf1a:	1c63      	adds	r3, r4, #1
 801bf1c:	4680      	mov	r8, r0
 801bf1e:	460e      	mov	r6, r1
 801bf20:	d02c      	beq.n	801bf7c <nema_bind_dst_tex+0x70>
 801bf22:	2a12      	cmp	r2, #18
 801bf24:	d009      	beq.n	801bf3a <nema_bind_dst_tex+0x2e>
 801bf26:	3a16      	subs	r2, #22
 801bf28:	2a01      	cmp	r2, #1
 801bf2a:	d906      	bls.n	801bf3a <nema_bind_dst_tex+0x2e>
 801bf2c:	4d50      	ldr	r5, [pc, #320]	; (801c070 <nema_bind_dst_tex+0x164>)
 801bf2e:	7868      	ldrb	r0, [r5, #1]
 801bf30:	f000 fda4 	bl	801ca7c <nema_enable_tiling>
 801bf34:	e007      	b.n	801bf46 <nema_bind_dst_tex+0x3a>
 801bf36:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 801bf3a:	2301      	movs	r3, #1
 801bf3c:	4d4c      	ldr	r5, [pc, #304]	; (801c070 <nema_bind_dst_tex+0x164>)
 801bf3e:	4618      	mov	r0, r3
 801bf40:	702b      	strb	r3, [r5, #0]
 801bf42:	f000 fd9b 	bl	801ca7c <nema_enable_tiling>
 801bf46:	2201      	movs	r2, #1
 801bf48:	b2a4      	uxth	r4, r4
 801bf4a:	ea44 6409 	orr.w	r4, r4, r9, lsl #24
 801bf4e:	2003      	movs	r0, #3
 801bf50:	63ec      	str	r4, [r5, #60]	; 0x3c
 801bf52:	e9c5 860c 	strd	r8, r6, [r5, #48]	; 0x30
 801bf56:	63af      	str	r7, [r5, #56]	; 0x38
 801bf58:	642a      	str	r2, [r5, #64]	; 0x40
 801bf5a:	f001 fbf1 	bl	801d740 <nema_cl_get_space>
 801bf5e:	b158      	cbz	r0, 801bf78 <nema_bind_dst_tex+0x6c>
 801bf60:	2100      	movs	r1, #0
 801bf62:	2204      	movs	r2, #4
 801bf64:	2308      	movs	r3, #8
 801bf66:	e9c0 1800 	strd	r1, r8, [r0]
 801bf6a:	6082      	str	r2, [r0, #8]
 801bf6c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 801bf6e:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 801bf72:	e9c0 2303 	strd	r2, r3, [r0, #12]
 801bf76:	6146      	str	r6, [r0, #20]
 801bf78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf7c:	f1a2 030b 	sub.w	r3, r2, #11
 801bf80:	2b2a      	cmp	r3, #42	; 0x2a
 801bf82:	d86b      	bhi.n	801c05c <nema_bind_dst_tex+0x150>
 801bf84:	a101      	add	r1, pc, #4	; (adr r1, 801bf8c <nema_bind_dst_tex+0x80>)
 801bf86:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bf8a:	bf00      	nop
 801bf8c:	0801c04f 	.word	0x0801c04f
 801bf90:	0801c04f 	.word	0x0801c04f
 801bf94:	0801c05d 	.word	0x0801c05d
 801bf98:	0801c05d 	.word	0x0801c05d
 801bf9c:	0801c05d 	.word	0x0801c05d
 801bfa0:	0801c05d 	.word	0x0801c05d
 801bfa4:	0801c05d 	.word	0x0801c05d
 801bfa8:	0801c059 	.word	0x0801c059
 801bfac:	0801c05d 	.word	0x0801c05d
 801bfb0:	0801c05d 	.word	0x0801c05d
 801bfb4:	0801c05d 	.word	0x0801c05d
 801bfb8:	0801bf37 	.word	0x0801bf37
 801bfbc:	0801bf37 	.word	0x0801bf37
 801bfc0:	0801c05d 	.word	0x0801c05d
 801bfc4:	0801c05d 	.word	0x0801c05d
 801bfc8:	0801c05d 	.word	0x0801c05d
 801bfcc:	0801c05d 	.word	0x0801c05d
 801bfd0:	0801c05d 	.word	0x0801c05d
 801bfd4:	0801c05d 	.word	0x0801c05d
 801bfd8:	0801c05d 	.word	0x0801c05d
 801bfdc:	0801c05d 	.word	0x0801c05d
 801bfe0:	0801c05d 	.word	0x0801c05d
 801bfe4:	0801c05d 	.word	0x0801c05d
 801bfe8:	0801c05d 	.word	0x0801c05d
 801bfec:	0801c05d 	.word	0x0801c05d
 801bff0:	0801c05d 	.word	0x0801c05d
 801bff4:	0801c05d 	.word	0x0801c05d
 801bff8:	0801c05d 	.word	0x0801c05d
 801bffc:	0801c04f 	.word	0x0801c04f
 801c000:	0801c043 	.word	0x0801c043
 801c004:	0801c039 	.word	0x0801c039
 801c008:	0801c04f 	.word	0x0801c04f
 801c00c:	0801c043 	.word	0x0801c043
 801c010:	0801c039 	.word	0x0801c039
 801c014:	0801c05d 	.word	0x0801c05d
 801c018:	0801c05d 	.word	0x0801c05d
 801c01c:	0801c05d 	.word	0x0801c05d
 801c020:	0801c043 	.word	0x0801c043
 801c024:	0801c043 	.word	0x0801c043
 801c028:	0801c05d 	.word	0x0801c05d
 801c02c:	0801c05d 	.word	0x0801c05d
 801c030:	0801c039 	.word	0x0801c039
 801c034:	0801c039 	.word	0x0801c039
 801c038:	00b3      	lsls	r3, r6, #2
 801c03a:	1ddc      	adds	r4, r3, #7
 801c03c:	d404      	bmi.n	801c048 <nema_bind_dst_tex+0x13c>
 801c03e:	10e4      	asrs	r4, r4, #3
 801c040:	e76f      	b.n	801bf22 <nema_bind_dst_tex+0x16>
 801c042:	0073      	lsls	r3, r6, #1
 801c044:	1ddc      	adds	r4, r3, #7
 801c046:	d5fa      	bpl.n	801c03e <nema_bind_dst_tex+0x132>
 801c048:	f103 040e 	add.w	r4, r3, #14
 801c04c:	e7f7      	b.n	801c03e <nema_bind_dst_tex+0x132>
 801c04e:	1df4      	adds	r4, r6, #7
 801c050:	d5f5      	bpl.n	801c03e <nema_bind_dst_tex+0x132>
 801c052:	f106 040e 	add.w	r4, r6, #14
 801c056:	e7f2      	b.n	801c03e <nema_bind_dst_tex+0x132>
 801c058:	0074      	lsls	r4, r6, #1
 801c05a:	e76e      	b.n	801bf3a <nema_bind_dst_tex+0x2e>
 801c05c:	1f13      	subs	r3, r2, #4
 801c05e:	2b47      	cmp	r3, #71	; 0x47
 801c060:	bf8e      	itee	hi
 801c062:	2404      	movhi	r4, #4
 801c064:	4903      	ldrls	r1, [pc, #12]	; (801c074 <nema_bind_dst_tex+0x168>)
 801c066:	56cc      	ldrsbls	r4, [r1, r3]
 801c068:	fb06 f404 	mul.w	r4, r6, r4
 801c06c:	e759      	b.n	801bf22 <nema_bind_dst_tex+0x16>
 801c06e:	bf00      	nop
 801c070:	20197e7c 	.word	0x20197e7c
 801c074:	0802bd08 	.word	0x0802bd08

0801c078 <nema_fill_rect>:
 801c078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c07c:	4604      	mov	r4, r0
 801c07e:	460d      	mov	r5, r1
 801c080:	4616      	mov	r6, r2
 801c082:	461f      	mov	r7, r3
 801c084:	9806      	ldr	r0, [sp, #24]
 801c086:	f000 fe5b 	bl	801cd40 <nema_set_raster_color>
 801c08a:	463b      	mov	r3, r7
 801c08c:	4632      	mov	r2, r6
 801c08e:	4629      	mov	r1, r5
 801c090:	4620      	mov	r0, r4
 801c092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c096:	f000 be95 	b.w	801cdc4 <nema_raster_rect>
 801c09a:	bf00      	nop

0801c09c <nema_blit>:
 801c09c:	ee07 0a90 	vmov	s15, r0
 801c0a0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801c0a4:	ee07 1a90 	vmov	s15, r1
 801c0a8:	b500      	push	{lr}
 801c0aa:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801c0ae:	b083      	sub	sp, #12
 801c0b0:	e9cd 0100 	strd	r0, r1, [sp]
 801c0b4:	f000 fdde 	bl	801cc74 <nema_set_matrix_translate>
 801c0b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c0bc:	4a03      	ldr	r2, [pc, #12]	; (801c0cc <nema_blit+0x30>)
 801c0be:	e9d2 2312 	ldrd	r2, r3, [r2, #72]	; 0x48
 801c0c2:	b003      	add	sp, #12
 801c0c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801c0c8:	f000 be7c 	b.w	801cdc4 <nema_raster_rect>
 801c0cc:	20197e7c 	.word	0x20197e7c

0801c0d0 <nema_blit_rotate>:
 801c0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0d2:	2600      	movs	r6, #0
 801c0d4:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 801c0d8:	4b68      	ldr	r3, [pc, #416]	; (801c27c <nema_blit_rotate+0x1ac>)
 801c0da:	b08b      	sub	sp, #44	; 0x2c
 801c0dc:	3a01      	subs	r2, #1
 801c0de:	9607      	str	r6, [sp, #28]
 801c0e0:	9608      	str	r6, [sp, #32]
 801c0e2:	9709      	str	r7, [sp, #36]	; 0x24
 801c0e4:	4604      	mov	r4, r0
 801c0e6:	e9d3 6712 	ldrd	r6, r7, [r3, #72]	; 0x48
 801c0ea:	460d      	mov	r5, r1
 801c0ec:	2a0e      	cmp	r2, #14
 801c0ee:	f200 80b0 	bhi.w	801c252 <nema_blit_rotate+0x182>
 801c0f2:	e8df f002 	tbb	[pc, r2]
 801c0f6:	4730      	.short	0x4730
 801c0f8:	9a836f58 	.word	0x9a836f58
 801c0fc:	6f089a08 	.word	0x6f089a08
 801c100:	ae584783 	.word	0xae584783
 801c104:	30          	.byte	0x30
 801c105:	00          	.byte	0x00
 801c106:	1970      	adds	r0, r6, r5
 801c108:	ee07 0a10 	vmov	s14, r0
 801c10c:	1938      	adds	r0, r7, r4
 801c10e:	4631      	mov	r1, r6
 801c110:	ee07 0a90 	vmov	s15, r0
 801c114:	2200      	movs	r2, #0
 801c116:	463e      	mov	r6, r7
 801c118:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c11c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c120:	460f      	mov	r7, r1
 801c122:	4b57      	ldr	r3, [pc, #348]	; (801c280 <nema_blit_rotate+0x1b0>)
 801c124:	9201      	str	r2, [sp, #4]
 801c126:	9205      	str	r2, [sp, #20]
 801c128:	9302      	str	r3, [sp, #8]
 801c12a:	9304      	str	r3, [sp, #16]
 801c12c:	eddf 6a55 	vldr	s13, [pc, #340]	; 801c284 <nema_blit_rotate+0x1b4>
 801c130:	ee37 7a26 	vadd.f32	s14, s14, s13
 801c134:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c138:	a801      	add	r0, sp, #4
 801c13a:	ed8d 7a03 	vstr	s14, [sp, #12]
 801c13e:	edcd 7a06 	vstr	s15, [sp, #24]
 801c142:	f000 fcdd 	bl	801cb00 <nema_set_matrix>
 801c146:	463b      	mov	r3, r7
 801c148:	4632      	mov	r2, r6
 801c14a:	4629      	mov	r1, r5
 801c14c:	4620      	mov	r0, r4
 801c14e:	f000 fe39 	bl	801cdc4 <nema_raster_rect>
 801c152:	b00b      	add	sp, #44	; 0x2c
 801c154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c156:	ee07 4a90 	vmov	s15, r4
 801c15a:	4630      	mov	r0, r6
 801c15c:	442e      	add	r6, r5
 801c15e:	2300      	movs	r3, #0
 801c160:	ee07 6a10 	vmov	s14, r6
 801c164:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801c168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c16c:	4944      	ldr	r1, [pc, #272]	; (801c280 <nema_blit_rotate+0x1b0>)
 801c16e:	463e      	mov	r6, r7
 801c170:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c174:	9301      	str	r3, [sp, #4]
 801c176:	4607      	mov	r7, r0
 801c178:	9305      	str	r3, [sp, #20]
 801c17a:	9102      	str	r1, [sp, #8]
 801c17c:	9204      	str	r2, [sp, #16]
 801c17e:	eef1 7a67 	vneg.f32	s15, s15
 801c182:	e7d3      	b.n	801c12c <nema_blit_rotate+0x5c>
 801c184:	4b3e      	ldr	r3, [pc, #248]	; (801c280 <nema_blit_rotate+0x1b0>)
 801c186:	2200      	movs	r2, #0
 801c188:	9301      	str	r3, [sp, #4]
 801c18a:	9305      	str	r3, [sp, #20]
 801c18c:	1833      	adds	r3, r6, r0
 801c18e:	ee07 3a90 	vmov	s15, r3
 801c192:	1878      	adds	r0, r7, r1
 801c194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c198:	ee07 0a90 	vmov	s15, r0
 801c19c:	9202      	str	r2, [sp, #8]
 801c19e:	9204      	str	r2, [sp, #16]
 801c1a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c1a4:	e7c2      	b.n	801c12c <nema_blit_rotate+0x5c>
 801c1a6:	ee07 5a10 	vmov	s14, r5
 801c1aa:	4630      	mov	r0, r6
 801c1ac:	193e      	adds	r6, r7, r4
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	ee07 6a90 	vmov	s15, r6
 801c1b4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801c1b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c1bc:	4a30      	ldr	r2, [pc, #192]	; (801c280 <nema_blit_rotate+0x1b0>)
 801c1be:	463e      	mov	r6, r7
 801c1c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c1c4:	4607      	mov	r7, r0
 801c1c6:	9301      	str	r3, [sp, #4]
 801c1c8:	9305      	str	r3, [sp, #20]
 801c1ca:	9102      	str	r1, [sp, #8]
 801c1cc:	eeb1 7a47 	vneg.f32	s14, s14
 801c1d0:	9204      	str	r2, [sp, #16]
 801c1d2:	e7ab      	b.n	801c12c <nema_blit_rotate+0x5c>
 801c1d4:	ee07 4a90 	vmov	s15, r4
 801c1d8:	1978      	adds	r0, r7, r5
 801c1da:	2300      	movs	r3, #0
 801c1dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c1e0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801c1e4:	ee07 0a90 	vmov	s15, r0
 801c1e8:	4a25      	ldr	r2, [pc, #148]	; (801c280 <nema_blit_rotate+0x1b0>)
 801c1ea:	9101      	str	r1, [sp, #4]
 801c1ec:	9302      	str	r3, [sp, #8]
 801c1ee:	9304      	str	r3, [sp, #16]
 801c1f0:	eeb1 7a47 	vneg.f32	s14, s14
 801c1f4:	9205      	str	r2, [sp, #20]
 801c1f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c1fa:	e797      	b.n	801c12c <nema_blit_rotate+0x5c>
 801c1fc:	ee07 5a90 	vmov	s15, r5
 801c200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c204:	ee07 0a90 	vmov	s15, r0
 801c208:	4631      	mov	r1, r6
 801c20a:	2200      	movs	r2, #0
 801c20c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801c210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c214:	463e      	mov	r6, r7
 801c216:	eeb1 7a47 	vneg.f32	s14, s14
 801c21a:	460f      	mov	r7, r1
 801c21c:	eef1 7a67 	vneg.f32	s15, s15
 801c220:	9201      	str	r2, [sp, #4]
 801c222:	9205      	str	r2, [sp, #20]
 801c224:	9302      	str	r3, [sp, #8]
 801c226:	9304      	str	r3, [sp, #16]
 801c228:	e780      	b.n	801c12c <nema_blit_rotate+0x5c>
 801c22a:	ee07 5a90 	vmov	s15, r5
 801c22e:	1830      	adds	r0, r6, r0
 801c230:	2300      	movs	r3, #0
 801c232:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801c236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c23a:	ee07 0a10 	vmov	s14, r0
 801c23e:	4910      	ldr	r1, [pc, #64]	; (801c280 <nema_blit_rotate+0x1b0>)
 801c240:	9302      	str	r3, [sp, #8]
 801c242:	9101      	str	r1, [sp, #4]
 801c244:	9304      	str	r3, [sp, #16]
 801c246:	9205      	str	r2, [sp, #20]
 801c248:	eef1 7a67 	vneg.f32	s15, s15
 801c24c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c250:	e76c      	b.n	801c12c <nema_blit_rotate+0x5c>
 801c252:	ee07 0a90 	vmov	s15, r0
 801c256:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c25a:	ee07 1a90 	vmov	s15, r1
 801c25e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801c262:	2300      	movs	r3, #0
 801c264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c268:	9201      	str	r2, [sp, #4]
 801c26a:	9205      	str	r2, [sp, #20]
 801c26c:	9302      	str	r3, [sp, #8]
 801c26e:	9304      	str	r3, [sp, #16]
 801c270:	eeb1 7a47 	vneg.f32	s14, s14
 801c274:	eef1 7a67 	vneg.f32	s15, s15
 801c278:	e758      	b.n	801c12c <nema_blit_rotate+0x5c>
 801c27a:	bf00      	nop
 801c27c:	20197e7c 	.word	0x20197e7c
 801c280:	bf800000 	.word	0xbf800000
 801c284:	00000000 	.word	0x00000000

0801c288 <nema_blit_tri_fit>:
 801c288:	2803      	cmp	r0, #3
 801c28a:	d801      	bhi.n	801c290 <nema_blit_tri_fit+0x8>
 801c28c:	2903      	cmp	r1, #3
 801c28e:	d900      	bls.n	801c292 <nema_blit_tri_fit+0xa>
 801c290:	4770      	bx	lr
 801c292:	2a03      	cmp	r2, #3
 801c294:	d8fc      	bhi.n	801c290 <nema_blit_tri_fit+0x8>
 801c296:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c29a:	460c      	mov	r4, r1
 801c29c:	493b      	ldr	r1, [pc, #236]	; (801c38c <nema_blit_tri_fit+0x104>)
 801c29e:	4603      	mov	r3, r0
 801c2a0:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 801c2a4:	ee07 0a90 	vmov	s15, r0
 801c2a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c2ac:	ee07 1a90 	vmov	s15, r1
 801c2b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c2b4:	b08a      	sub	sp, #40	; 0x28
 801c2b6:	f04f 0c00 	mov.w	ip, #0
 801c2ba:	edcd 7a08 	vstr	s15, [sp, #32]
 801c2be:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 801c2c2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801c2c6:	ed8d 7a03 	vstr	s14, [sp, #12]
 801c2ca:	ed8d 7a04 	vstr	s14, [sp, #16]
 801c2ce:	ee12 8a10 	vmov	r8, s4
 801c2d2:	ee11 9a90 	vmov	r9, s3
 801c2d6:	ee11 aa10 	vmov	sl, s2
 801c2da:	ee10 6a10 	vmov	r6, s0
 801c2de:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 801c2e2:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 801c2e6:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
 801c2ea:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 801c2ee:	f8cd c008 	str.w	ip, [sp, #8]
 801c2f2:	f8cd c014 	str.w	ip, [sp, #20]
 801c2f6:	f8cd c018 	str.w	ip, [sp, #24]
 801c2fa:	f8cd c01c 	str.w	ip, [sp, #28]
 801c2fe:	ed52 6a08 	vldr	s13, [r2, #-32]	; 0xffffffe0
 801c302:	ed14 4a08 	vldr	s8, [r4, #-32]	; 0xffffffe0
 801c306:	ed53 1a08 	vldr	s3, [r3, #-32]	; 0xffffffe0
 801c30a:	ed12 7a04 	vldr	s14, [r2, #-16]
 801c30e:	ed54 4a04 	vldr	s9, [r4, #-16]
 801c312:	ed13 2a04 	vldr	s4, [r3, #-16]
 801c316:	eef0 5a62 	vmov.f32	s11, s5
 801c31a:	ee05 8a10 	vmov	s10, r8
 801c31e:	ee03 9a10 	vmov	s6, r9
 801c322:	eef0 3a46 	vmov.f32	s7, s12
 801c326:	eeb0 1a46 	vmov.f32	s2, s12
 801c32a:	ee12 7a90 	vmov	r7, s5
 801c32e:	ee02 aa90 	vmov	s5, sl
 801c332:	ee10 5a90 	vmov	r5, s1
 801c336:	f000 f889 	bl	801c44c <nema_interpolate_tx_ty>
 801c33a:	ee00 6a10 	vmov	s0, r6
 801c33e:	f000 f90f 	bl	801c560 <nema_f2fx>
 801c342:	ee00 5a10 	vmov	s0, r5
 801c346:	4604      	mov	r4, r0
 801c348:	f000 f90a 	bl	801c560 <nema_f2fx>
 801c34c:	ee00 aa10 	vmov	s0, sl
 801c350:	4605      	mov	r5, r0
 801c352:	f000 f905 	bl	801c560 <nema_f2fx>
 801c356:	ee00 9a10 	vmov	s0, r9
 801c35a:	4606      	mov	r6, r0
 801c35c:	f000 f900 	bl	801c560 <nema_f2fx>
 801c360:	ee00 8a10 	vmov	s0, r8
 801c364:	4681      	mov	r9, r0
 801c366:	f000 f8fb 	bl	801c560 <nema_f2fx>
 801c36a:	ee00 7a10 	vmov	s0, r7
 801c36e:	4680      	mov	r8, r0
 801c370:	f000 f8f6 	bl	801c560 <nema_f2fx>
 801c374:	464b      	mov	r3, r9
 801c376:	e9cd 8000 	strd	r8, r0, [sp]
 801c37a:	4632      	mov	r2, r6
 801c37c:	4629      	mov	r1, r5
 801c37e:	4620      	mov	r0, r4
 801c380:	f000 fce4 	bl	801cd4c <nema_raster_triangle_fx>
 801c384:	b00a      	add	sp, #40	; 0x28
 801c386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c38a:	bf00      	nop
 801c38c:	20197e7c 	.word	0x20197e7c

0801c390 <nema_blit_quad_fit>:
 801c390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c394:	ed2d 8b08 	vpush	{d8-d11}
 801c398:	4b2b      	ldr	r3, [pc, #172]	; (801c448 <nema_blit_quad_fit+0xb8>)
 801c39a:	b08e      	sub	sp, #56	; 0x38
 801c39c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 801c3a0:	aa05      	add	r2, sp, #20
 801c3a2:	eef0 ba40 	vmov.f32	s23, s0
 801c3a6:	eeb0 ba60 	vmov.f32	s22, s1
 801c3aa:	eef0 aa41 	vmov.f32	s21, s2
 801c3ae:	eeb0 aa61 	vmov.f32	s20, s3
 801c3b2:	eef0 9a42 	vmov.f32	s19, s4
 801c3b6:	eeb0 9a62 	vmov.f32	s18, s5
 801c3ba:	eef0 8a43 	vmov.f32	s17, s6
 801c3be:	eeb0 8a63 	vmov.f32	s16, s7
 801c3c2:	f000 f9e1 	bl	801c788 <nema_mat3x3_quad_to_rect>
 801c3c6:	b120      	cbz	r0, 801c3d2 <nema_blit_quad_fit+0x42>
 801c3c8:	b00e      	add	sp, #56	; 0x38
 801c3ca:	ecbd 8b08 	vpop	{d8-d11}
 801c3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c3d2:	a805      	add	r0, sp, #20
 801c3d4:	f000 fb94 	bl	801cb00 <nema_set_matrix>
 801c3d8:	eeb0 0a6b 	vmov.f32	s0, s23
 801c3dc:	f000 f8c0 	bl	801c560 <nema_f2fx>
 801c3e0:	eeb0 0a4b 	vmov.f32	s0, s22
 801c3e4:	4604      	mov	r4, r0
 801c3e6:	f000 f8bb 	bl	801c560 <nema_f2fx>
 801c3ea:	eeb0 0a6a 	vmov.f32	s0, s21
 801c3ee:	4605      	mov	r5, r0
 801c3f0:	f000 f8b6 	bl	801c560 <nema_f2fx>
 801c3f4:	eeb0 0a4a 	vmov.f32	s0, s20
 801c3f8:	4606      	mov	r6, r0
 801c3fa:	f000 f8b1 	bl	801c560 <nema_f2fx>
 801c3fe:	eeb0 0a69 	vmov.f32	s0, s19
 801c402:	4607      	mov	r7, r0
 801c404:	f000 f8ac 	bl	801c560 <nema_f2fx>
 801c408:	eeb0 0a49 	vmov.f32	s0, s18
 801c40c:	4682      	mov	sl, r0
 801c40e:	f000 f8a7 	bl	801c560 <nema_f2fx>
 801c412:	eeb0 0a68 	vmov.f32	s0, s17
 801c416:	4680      	mov	r8, r0
 801c418:	f000 f8a2 	bl	801c560 <nema_f2fx>
 801c41c:	eeb0 0a48 	vmov.f32	s0, s16
 801c420:	4681      	mov	r9, r0
 801c422:	f000 f89d 	bl	801c560 <nema_f2fx>
 801c426:	f8cd a000 	str.w	sl, [sp]
 801c42a:	e9cd 9002 	strd	r9, r0, [sp, #8]
 801c42e:	f8cd 8004 	str.w	r8, [sp, #4]
 801c432:	463b      	mov	r3, r7
 801c434:	4632      	mov	r2, r6
 801c436:	4629      	mov	r1, r5
 801c438:	4620      	mov	r0, r4
 801c43a:	f000 fced 	bl	801ce18 <nema_raster_quad_fx>
 801c43e:	b00e      	add	sp, #56	; 0x38
 801c440:	ecbd 8b08 	vpop	{d8-d11}
 801c444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c448:	20197e7c 	.word	0x20197e7c

0801c44c <nema_interpolate_tx_ty>:
 801c44c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 801c450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c454:	d407      	bmi.n	801c466 <nema_interpolate_tx_ty+0x1a>
 801c456:	eddf 7a40 	vldr	s15, [pc, #256]	; 801c558 <nema_interpolate_tx_ty+0x10c>
 801c45a:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801c45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c462:	d807      	bhi.n	801c474 <nema_interpolate_tx_ty+0x28>
 801c464:	4770      	bx	lr
 801c466:	eddf 7a3d 	vldr	s15, [pc, #244]	; 801c55c <nema_interpolate_tx_ty+0x110>
 801c46a:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801c46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c472:	daf7      	bge.n	801c464 <nema_interpolate_tx_ty+0x18>
 801c474:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 801c478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c47c:	d45b      	bmi.n	801c536 <nema_interpolate_tx_ty+0xea>
 801c47e:	eddf 7a36 	vldr	s15, [pc, #216]	; 801c558 <nema_interpolate_tx_ty+0x10c>
 801c482:	eef4 3ae7 	vcmpe.f32	s7, s15
 801c486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c48a:	d9eb      	bls.n	801c464 <nema_interpolate_tx_ty+0x18>
 801c48c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801c490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c494:	d457      	bmi.n	801c546 <nema_interpolate_tx_ty+0xfa>
 801c496:	eddf 7a30 	vldr	s15, [pc, #192]	; 801c558 <nema_interpolate_tx_ty+0x10c>
 801c49a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801c49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4a2:	d9df      	bls.n	801c464 <nema_interpolate_tx_ty+0x18>
 801c4a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c4a8:	b570      	push	{r4, r5, r6, lr}
 801c4aa:	ee15 3a90 	vmov	r3, s11
 801c4ae:	ee13 2a10 	vmov	r2, s6
 801c4b2:	eec7 5a86 	vdiv.f32	s11, s15, s12
 801c4b6:	ee87 3a81 	vdiv.f32	s6, s15, s2
 801c4ba:	ee15 4a10 	vmov	r4, s10
 801c4be:	ee87 5aa3 	vdiv.f32	s10, s15, s7
 801c4c2:	ee63 1a21 	vmul.f32	s3, s6, s3
 801c4c6:	ee23 2a02 	vmul.f32	s4, s6, s4
 801c4ca:	ee25 4a04 	vmul.f32	s8, s10, s8
 801c4ce:	ee65 4a24 	vmul.f32	s9, s10, s9
 801c4d2:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801c4d6:	ee25 7a87 	vmul.f32	s14, s11, s14
 801c4da:	b092      	sub	sp, #72	; 0x48
 801c4dc:	a809      	add	r0, sp, #36	; 0x24
 801c4de:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 801c4e2:	edcd 2a0a 	vstr	s5, [sp, #40]	; 0x28
 801c4e6:	edcd 0a0c 	vstr	s1, [sp, #48]	; 0x30
 801c4ea:	920d      	str	r2, [sp, #52]	; 0x34
 801c4ec:	930e      	str	r3, [sp, #56]	; 0x38
 801c4ee:	edcd 1a00 	vstr	s3, [sp]
 801c4f2:	ed8d 2a03 	vstr	s4, [sp, #12]
 801c4f6:	ed8d 4a01 	vstr	s8, [sp, #4]
 801c4fa:	edcd 4a04 	vstr	s9, [sp, #16]
 801c4fe:	edcd 6a02 	vstr	s13, [sp, #8]
 801c502:	ed8d 7a05 	vstr	s14, [sp, #20]
 801c506:	ed8d 3a06 	vstr	s6, [sp, #24]
 801c50a:	ed8d 5a07 	vstr	s10, [sp, #28]
 801c50e:	edcd 5a08 	vstr	s11, [sp, #32]
 801c512:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 801c516:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801c51a:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 801c51e:	940b      	str	r4, [sp, #44]	; 0x2c
 801c520:	f000 f8d2 	bl	801c6c8 <nema_mat3x3_adj>
 801c524:	a909      	add	r1, sp, #36	; 0x24
 801c526:	4668      	mov	r0, sp
 801c528:	f000 f838 	bl	801c59c <nema_mat3x3_mul>
 801c52c:	4668      	mov	r0, sp
 801c52e:	f000 fae7 	bl	801cb00 <nema_set_matrix>
 801c532:	b012      	add	sp, #72	; 0x48
 801c534:	bd70      	pop	{r4, r5, r6, pc}
 801c536:	eddf 7a09 	vldr	s15, [pc, #36]	; 801c55c <nema_interpolate_tx_ty+0x110>
 801c53a:	eef4 3ae7 	vcmpe.f32	s7, s15
 801c53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c542:	da8f      	bge.n	801c464 <nema_interpolate_tx_ty+0x18>
 801c544:	e7a2      	b.n	801c48c <nema_interpolate_tx_ty+0x40>
 801c546:	eddf 7a05 	vldr	s15, [pc, #20]	; 801c55c <nema_interpolate_tx_ty+0x110>
 801c54a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801c54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c552:	da87      	bge.n	801c464 <nema_interpolate_tx_ty+0x18>
 801c554:	e7a6      	b.n	801c4a4 <nema_interpolate_tx_ty+0x58>
 801c556:	bf00      	nop
 801c558:	3727c5ac 	.word	0x3727c5ac
 801c55c:	b727c5ac 	.word	0xb727c5ac

0801c560 <nema_f2fx>:
 801c560:	eddf 7a06 	vldr	s15, [pc, #24]	; 801c57c <nema_f2fx+0x1c>
 801c564:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801c568:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c56c:	ee30 0a07 	vadd.f32	s0, s0, s14
 801c570:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801c574:	ee17 0a90 	vmov	r0, s15
 801c578:	4770      	bx	lr
 801c57a:	bf00      	nop
 801c57c:	47800000 	.word	0x47800000

0801c580 <nema_mat3x3_load_identity>:
 801c580:	2300      	movs	r3, #0
 801c582:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801c586:	61c3      	str	r3, [r0, #28]
 801c588:	6202      	str	r2, [r0, #32]
 801c58a:	6102      	str	r2, [r0, #16]
 801c58c:	6002      	str	r2, [r0, #0]
 801c58e:	6183      	str	r3, [r0, #24]
 801c590:	6143      	str	r3, [r0, #20]
 801c592:	60c3      	str	r3, [r0, #12]
 801c594:	6083      	str	r3, [r0, #8]
 801c596:	6043      	str	r3, [r0, #4]
 801c598:	4770      	bx	lr
 801c59a:	bf00      	nop

0801c59c <nema_mat3x3_mul>:
 801c59c:	edd1 4a01 	vldr	s9, [r1, #4]
 801c5a0:	ed91 0a04 	vldr	s0, [r1, #16]
 801c5a4:	edd1 0a05 	vldr	s1, [r1, #20]
 801c5a8:	ed2d 8b0c 	vpush	{d8-d13}
 801c5ac:	ed91 6a00 	vldr	s12, [r1]
 801c5b0:	ed91 4a03 	vldr	s8, [r1, #12]
 801c5b4:	ed91 aa02 	vldr	s20, [r1, #8]
 801c5b8:	edd0 3a03 	vldr	s7, [r0, #12]
 801c5bc:	ed90 8a04 	vldr	s16, [r0, #16]
 801c5c0:	ed90 9a00 	vldr	s18, [r0]
 801c5c4:	edd0 8a01 	vldr	s17, [r0, #4]
 801c5c8:	edd0 9a06 	vldr	s19, [r0, #24]
 801c5cc:	ed90 1a07 	vldr	s2, [r0, #28]
 801c5d0:	edd1 aa06 	vldr	s21, [r1, #24]
 801c5d4:	edd1 6a07 	vldr	s13, [r1, #28]
 801c5d8:	ed91 7a08 	vldr	s14, [r1, #32]
 801c5dc:	ed90 5a02 	vldr	s10, [r0, #8]
 801c5e0:	edd0 5a05 	vldr	s11, [r0, #20]
 801c5e4:	ee69 da06 	vmul.f32	s27, s18, s12
 801c5e8:	ee29 da24 	vmul.f32	s26, s18, s9
 801c5ec:	ee66 ca23 	vmul.f32	s25, s12, s7
 801c5f0:	ee24 caa3 	vmul.f32	s24, s9, s7
 801c5f4:	ee68 1a84 	vmul.f32	s3, s17, s8
 801c5f8:	ee29 9a0a 	vmul.f32	s18, s18, s20
 801c5fc:	ee28 2a80 	vmul.f32	s4, s17, s0
 801c600:	ee26 6a29 	vmul.f32	s12, s12, s19
 801c604:	ee64 2a08 	vmul.f32	s5, s8, s16
 801c608:	ee6a ba23 	vmul.f32	s23, s20, s7
 801c60c:	ee24 baa9 	vmul.f32	s22, s9, s19
 801c610:	ee20 3a08 	vmul.f32	s6, s0, s16
 801c614:	ee60 3a88 	vmul.f32	s7, s1, s16
 801c618:	ee60 4a01 	vmul.f32	s9, s0, s2
 801c61c:	ee68 8aa0 	vmul.f32	s17, s17, s1
 801c620:	ee24 4a01 	vmul.f32	s8, s8, s2
 801c624:	ee6a 7a29 	vmul.f32	s15, s20, s19
 801c628:	ee20 1a81 	vmul.f32	s2, s1, s2
 801c62c:	edd0 0a08 	vldr	s1, [r0, #32]
 801c630:	ee25 0a2a 	vmul.f32	s0, s10, s21
 801c634:	ee79 8a28 	vadd.f32	s17, s18, s17
 801c638:	ee2a 8aa5 	vmul.f32	s16, s21, s11
 801c63c:	ee25 9a26 	vmul.f32	s18, s10, s13
 801c640:	ee7d 1aa1 	vadd.f32	s3, s27, s3
 801c644:	ee3d 2a02 	vadd.f32	s4, s26, s4
 801c648:	ee7c 2aa2 	vadd.f32	s5, s25, s5
 801c64c:	ee3c 3a03 	vadd.f32	s6, s24, s6
 801c650:	ee7b 3aa3 	vadd.f32	s7, s23, s7
 801c654:	ee36 4a04 	vadd.f32	s8, s12, s8
 801c658:	ee7b 4a24 	vadd.f32	s9, s22, s9
 801c65c:	ee77 7a81 	vadd.f32	s15, s15, s2
 801c660:	ee25 5a07 	vmul.f32	s10, s10, s14
 801c664:	ee26 1aa5 	vmul.f32	s2, s13, s11
 801c668:	ee2a 6aa0 	vmul.f32	s12, s21, s1
 801c66c:	ee67 5a25 	vmul.f32	s11, s14, s11
 801c670:	ee66 6aa0 	vmul.f32	s13, s13, s1
 801c674:	ee27 7a20 	vmul.f32	s14, s14, s1
 801c678:	ee32 2a09 	vadd.f32	s4, s4, s18
 801c67c:	ee38 5a85 	vadd.f32	s10, s17, s10
 801c680:	ee72 2a88 	vadd.f32	s5, s5, s16
 801c684:	ee71 1a80 	vadd.f32	s3, s3, s0
 801c688:	ee33 3a01 	vadd.f32	s6, s6, s2
 801c68c:	ee73 5aa5 	vadd.f32	s11, s7, s11
 801c690:	ee34 6a06 	vadd.f32	s12, s8, s12
 801c694:	ee74 6aa6 	vadd.f32	s13, s9, s13
 801c698:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c69c:	edc0 1a00 	vstr	s3, [r0]
 801c6a0:	ed80 2a01 	vstr	s4, [r0, #4]
 801c6a4:	ed80 5a02 	vstr	s10, [r0, #8]
 801c6a8:	edc0 2a03 	vstr	s5, [r0, #12]
 801c6ac:	ed80 3a04 	vstr	s6, [r0, #16]
 801c6b0:	edc0 5a05 	vstr	s11, [r0, #20]
 801c6b4:	ed80 6a06 	vstr	s12, [r0, #24]
 801c6b8:	edc0 6a07 	vstr	s13, [r0, #28]
 801c6bc:	edc0 7a08 	vstr	s15, [r0, #32]
 801c6c0:	ecbd 8b0c 	vpop	{d8-d13}
 801c6c4:	4770      	bx	lr
 801c6c6:	bf00      	nop

0801c6c8 <nema_mat3x3_adj>:
 801c6c8:	edd0 3a03 	vldr	s7, [r0, #12]
 801c6cc:	edd0 4a04 	vldr	s9, [r0, #16]
 801c6d0:	ed90 6a08 	vldr	s12, [r0, #32]
 801c6d4:	ed90 5a07 	vldr	s10, [r0, #28]
 801c6d8:	ed90 4a05 	vldr	s8, [r0, #20]
 801c6dc:	edd0 7a00 	vldr	s15, [r0]
 801c6e0:	edd0 6a02 	vldr	s13, [r0, #8]
 801c6e4:	edd0 5a01 	vldr	s11, [r0, #4]
 801c6e8:	ed90 7a06 	vldr	s14, [r0, #24]
 801c6ec:	ed2d 8b04 	vpush	{d8-d9}
 801c6f0:	ee24 1a86 	vmul.f32	s2, s9, s12
 801c6f4:	ee25 9a04 	vmul.f32	s18, s10, s8
 801c6f8:	ee66 8a25 	vmul.f32	s17, s12, s11
 801c6fc:	ee24 8aa6 	vmul.f32	s16, s9, s13
 801c700:	ee65 1a26 	vmul.f32	s3, s10, s13
 801c704:	ee24 2a25 	vmul.f32	s4, s8, s11
 801c708:	ee64 2a07 	vmul.f32	s5, s8, s14
 801c70c:	ee66 0a87 	vmul.f32	s1, s13, s14
 801c710:	ee25 3a23 	vmul.f32	s6, s10, s7
 801c714:	ee24 4a27 	vmul.f32	s8, s8, s15
 801c718:	ee26 0a23 	vmul.f32	s0, s12, s7
 801c71c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801c720:	ee26 6a27 	vmul.f32	s12, s12, s15
 801c724:	ee25 5a27 	vmul.f32	s10, s10, s15
 801c728:	ee64 7aa7 	vmul.f32	s15, s9, s15
 801c72c:	ee64 4a87 	vmul.f32	s9, s9, s14
 801c730:	ee25 7a87 	vmul.f32	s14, s11, s14
 801c734:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801c738:	ee31 1a49 	vsub.f32	s2, s2, s18
 801c73c:	ee71 1ae8 	vsub.f32	s3, s3, s17
 801c740:	ee32 2a48 	vsub.f32	s4, s4, s16
 801c744:	ecbd 8b04 	vpop	{d8-d9}
 801c748:	ee72 3ac0 	vsub.f32	s7, s5, s0
 801c74c:	ee36 6a60 	vsub.f32	s12, s12, s1
 801c750:	ee76 6ac4 	vsub.f32	s13, s13, s8
 801c754:	ee73 4a64 	vsub.f32	s9, s6, s9
 801c758:	ee37 7a45 	vsub.f32	s14, s14, s10
 801c75c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801c760:	ed80 1a00 	vstr	s2, [r0]
 801c764:	edc0 1a01 	vstr	s3, [r0, #4]
 801c768:	ed80 2a02 	vstr	s4, [r0, #8]
 801c76c:	edc0 3a03 	vstr	s7, [r0, #12]
 801c770:	ed80 6a04 	vstr	s12, [r0, #16]
 801c774:	edc0 6a05 	vstr	s13, [r0, #20]
 801c778:	edc0 4a06 	vstr	s9, [r0, #24]
 801c77c:	ed80 7a07 	vstr	s14, [r0, #28]
 801c780:	edc0 7a08 	vstr	s15, [r0, #32]
 801c784:	4770      	bx	lr
 801c786:	bf00      	nop

0801c788 <nema_mat3x3_quad_to_rect>:
 801c788:	ee70 6a41 	vsub.f32	s13, s0, s2
 801c78c:	ee76 6a82 	vadd.f32	s13, s13, s4
 801c790:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801c794:	ee30 6ae1 	vsub.f32	s12, s1, s3
 801c798:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801c79c:	ee36 6a22 	vadd.f32	s12, s12, s5
 801c7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7a4:	ed2d 8b06 	vpush	{d8-d10}
 801c7a8:	ee36 6a63 	vsub.f32	s12, s12, s7
 801c7ac:	ee09 0a10 	vmov	s18, r0
 801c7b0:	ee08 1a90 	vmov	s17, r1
 801c7b4:	f100 812e 	bmi.w	801ca14 <nema_mat3x3_quad_to_rect+0x28c>
 801c7b8:	eddf 7aa4 	vldr	s15, [pc, #656]	; 801ca4c <nema_mat3x3_quad_to_rect+0x2c4>
 801c7bc:	eef4 6ae7 	vcmpe.f32	s13, s15
 801c7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7c4:	d80d      	bhi.n	801c7e2 <nema_mat3x3_quad_to_rect+0x5a>
 801c7c6:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801c7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7ce:	f100 80f7 	bmi.w	801c9c0 <nema_mat3x3_quad_to_rect+0x238>
 801c7d2:	eddf 7a9e 	vldr	s15, [pc, #632]	; 801ca4c <nema_mat3x3_quad_to_rect+0x2c4>
 801c7d6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801c7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7de:	f240 80f7 	bls.w	801c9d0 <nema_mat3x3_quad_to_rect+0x248>
 801c7e2:	ee31 7a42 	vsub.f32	s14, s2, s4
 801c7e6:	ee73 7ae2 	vsub.f32	s15, s7, s5
 801c7ea:	ee33 2a42 	vsub.f32	s4, s6, s4
 801c7ee:	ee71 2ae2 	vsub.f32	s5, s3, s5
 801c7f2:	ee67 5a27 	vmul.f32	s11, s14, s15
 801c7f6:	ee22 5a22 	vmul.f32	s10, s4, s5
 801c7fa:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801c7fe:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801c806:	ee26 7a07 	vmul.f32	s14, s12, s14
 801c80a:	ee66 6aa2 	vmul.f32	s13, s13, s5
 801c80e:	ee26 6a02 	vmul.f32	s12, s12, s4
 801c812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c816:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801c81a:	ee77 6a66 	vsub.f32	s13, s14, s13
 801c81e:	f100 80c5 	bmi.w	801c9ac <nema_mat3x3_quad_to_rect+0x224>
 801c822:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801ca4c <nema_mat3x3_quad_to_rect+0x2c4>
 801c826:	eef4 5ac7 	vcmpe.f32	s11, s14
 801c82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c82e:	bf94      	ite	ls
 801c830:	2301      	movls	r3, #1
 801c832:	2300      	movhi	r3, #0
 801c834:	2b00      	cmp	r3, #0
 801c836:	f040 8106 	bne.w	801ca46 <nema_mat3x3_quad_to_rect+0x2be>
 801c83a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c83e:	ee87 6a25 	vdiv.f32	s12, s14, s11
 801c842:	ee67 7a86 	vmul.f32	s15, s15, s12
 801c846:	ee66 6a86 	vmul.f32	s13, s13, s12
 801c84a:	ee21 5a27 	vmul.f32	s10, s2, s15
 801c84e:	ee61 5aa7 	vmul.f32	s11, s3, s15
 801c852:	ee63 2aa6 	vmul.f32	s5, s7, s13
 801c856:	ee31 1a40 	vsub.f32	s2, s2, s0
 801c85a:	ee23 6a26 	vmul.f32	s12, s6, s13
 801c85e:	ee33 2a40 	vsub.f32	s4, s6, s0
 801c862:	ee71 1ae0 	vsub.f32	s3, s3, s1
 801c866:	ee73 3ae0 	vsub.f32	s7, s7, s1
 801c86a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c86e:	ee32 2a06 	vadd.f32	s4, s4, s12
 801c872:	ee71 1aa5 	vadd.f32	s3, s3, s11
 801c876:	ee73 2aa2 	vadd.f32	s5, s7, s5
 801c87a:	ed82 0a02 	vstr	s0, [r2, #8]
 801c87e:	edc2 0a05 	vstr	s1, [r2, #20]
 801c882:	edc2 7a06 	vstr	s15, [r2, #24]
 801c886:	edc2 6a07 	vstr	s13, [r2, #28]
 801c88a:	ed82 7a08 	vstr	s14, [r2, #32]
 801c88e:	ed82 1a00 	vstr	s2, [r2]
 801c892:	ed82 2a01 	vstr	s4, [r2, #4]
 801c896:	edc2 1a03 	vstr	s3, [r2, #12]
 801c89a:	edc2 2a04 	vstr	s5, [r2, #16]
 801c89e:	ee20 4aa6 	vmul.f32	s8, s1, s13
 801c8a2:	ee60 5aa7 	vmul.f32	s11, s1, s15
 801c8a6:	ee32 3ac4 	vsub.f32	s6, s5, s8
 801c8aa:	ee31 7ae5 	vsub.f32	s14, s3, s11
 801c8ae:	ee21 8aa6 	vmul.f32	s16, s3, s13
 801c8b2:	ee22 6aa7 	vmul.f32	s12, s5, s15
 801c8b6:	ee27 7a02 	vmul.f32	s14, s14, s4
 801c8ba:	ee23 4a01 	vmul.f32	s8, s6, s2
 801c8be:	ee38 8a46 	vsub.f32	s16, s16, s12
 801c8c2:	ee34 4a47 	vsub.f32	s8, s8, s14
 801c8c6:	ee20 7a08 	vmul.f32	s14, s0, s16
 801c8ca:	ee34 4a07 	vadd.f32	s8, s8, s14
 801c8ce:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 801c8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8d6:	f100 80ac 	bmi.w	801ca32 <nema_mat3x3_quad_to_rect+0x2aa>
 801c8da:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 801ca4c <nema_mat3x3_quad_to_rect+0x2c4>
 801c8de:	eeb4 4ac7 	vcmpe.f32	s8, s14
 801c8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8e6:	bf94      	ite	ls
 801c8e8:	2001      	movls	r0, #1
 801c8ea:	2000      	movhi	r0, #0
 801c8ec:	2800      	cmp	r0, #0
 801c8ee:	f040 80aa 	bne.w	801ca46 <nema_mat3x3_quad_to_rect+0x2be>
 801c8f2:	ee20 5a82 	vmul.f32	s10, s1, s4
 801c8f6:	ee60 4a26 	vmul.f32	s9, s0, s13
 801c8fa:	ee20 6a27 	vmul.f32	s12, s0, s15
 801c8fe:	ee60 9a22 	vmul.f32	s19, s0, s5
 801c902:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 801c906:	ee60 0a81 	vmul.f32	s1, s1, s2
 801c90a:	ee20 7a21 	vmul.f32	s14, s0, s3
 801c90e:	eeca 3a04 	vdiv.f32	s7, s20, s8
 801c912:	ee74 4ac2 	vsub.f32	s9, s9, s4
 801c916:	ee61 6a26 	vmul.f32	s13, s2, s13
 801c91a:	ee67 7a82 	vmul.f32	s15, s15, s4
 801c91e:	ee35 5a69 	vsub.f32	s10, s10, s19
 801c922:	ee75 5ae1 	vsub.f32	s11, s11, s3
 801c926:	ee31 6a46 	vsub.f32	s12, s2, s12
 801c92a:	ee62 2a81 	vmul.f32	s5, s5, s2
 801c92e:	ee37 7a60 	vsub.f32	s14, s14, s1
 801c932:	ee21 2a82 	vmul.f32	s4, s3, s4
 801c936:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801c93a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801c93e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c942:	ee23 4a23 	vmul.f32	s8, s6, s7
 801c946:	ee65 6a23 	vmul.f32	s13, s10, s7
 801c94a:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801c94e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 801c952:	ee26 6a23 	vmul.f32	s12, s12, s7
 801c956:	ee27 7a23 	vmul.f32	s14, s14, s7
 801c95a:	ee72 2ac2 	vsub.f32	s5, s5, s4
 801c95e:	ee24 4a09 	vmul.f32	s8, s8, s18
 801c962:	ee65 5aa8 	vmul.f32	s11, s11, s17
 801c966:	ee28 8a23 	vmul.f32	s16, s16, s7
 801c96a:	ee24 5a89 	vmul.f32	s10, s9, s18
 801c96e:	ee26 6a28 	vmul.f32	s12, s12, s17
 801c972:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801c976:	ee66 6a89 	vmul.f32	s13, s13, s18
 801c97a:	ee27 7a28 	vmul.f32	s14, s14, s17
 801c97e:	ee62 2aa3 	vmul.f32	s5, s5, s7
 801c982:	ed82 4a00 	vstr	s8, [r2]
 801c986:	edc2 5a03 	vstr	s11, [r2, #12]
 801c98a:	ed82 8a06 	vstr	s16, [r2, #24]
 801c98e:	ed82 5a01 	vstr	s10, [r2, #4]
 801c992:	ed82 6a04 	vstr	s12, [r2, #16]
 801c996:	edc2 7a07 	vstr	s15, [r2, #28]
 801c99a:	edc2 6a02 	vstr	s13, [r2, #8]
 801c99e:	ed82 7a05 	vstr	s14, [r2, #20]
 801c9a2:	edc2 2a08 	vstr	s5, [r2, #32]
 801c9a6:	ecbd 8b06 	vpop	{d8-d10}
 801c9aa:	4770      	bx	lr
 801c9ac:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801ca50 <nema_mat3x3_quad_to_rect+0x2c8>
 801c9b0:	eef4 5ac7 	vcmpe.f32	s11, s14
 801c9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9b8:	bfac      	ite	ge
 801c9ba:	2301      	movge	r3, #1
 801c9bc:	2300      	movlt	r3, #0
 801c9be:	e739      	b.n	801c834 <nema_mat3x3_quad_to_rect+0xac>
 801c9c0:	eddf 7a23 	vldr	s15, [pc, #140]	; 801ca50 <nema_mat3x3_quad_to_rect+0x2c8>
 801c9c4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801c9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9cc:	f6ff af09 	blt.w	801c7e2 <nema_mat3x3_quad_to_rect+0x5a>
 801c9d0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801ca54 <nema_mat3x3_quad_to_rect+0x2cc>
 801c9d4:	ee32 2a41 	vsub.f32	s4, s4, s2
 801c9d8:	ee72 2ae1 	vsub.f32	s5, s5, s3
 801c9dc:	ee31 1a40 	vsub.f32	s2, s2, s0
 801c9e0:	ee71 1ae0 	vsub.f32	s3, s3, s1
 801c9e4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801c9e8:	eef0 7a47 	vmov.f32	s15, s14
 801c9ec:	ed82 2a01 	vstr	s4, [r2, #4]
 801c9f0:	ed82 1a00 	vstr	s2, [r2]
 801c9f4:	edc2 2a04 	vstr	s5, [r2, #16]
 801c9f8:	edc2 1a03 	vstr	s3, [r2, #12]
 801c9fc:	ed82 0a02 	vstr	s0, [r2, #8]
 801ca00:	edc2 0a05 	vstr	s1, [r2, #20]
 801ca04:	ed82 7a06 	vstr	s14, [r2, #24]
 801ca08:	ed82 7a07 	vstr	s14, [r2, #28]
 801ca0c:	eef0 6a47 	vmov.f32	s13, s14
 801ca10:	6213      	str	r3, [r2, #32]
 801ca12:	e744      	b.n	801c89e <nema_mat3x3_quad_to_rect+0x116>
 801ca14:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801ca50 <nema_mat3x3_quad_to_rect+0x2c8>
 801ca18:	eef4 6ae7 	vcmpe.f32	s13, s15
 801ca1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca20:	f6ff aedf 	blt.w	801c7e2 <nema_mat3x3_quad_to_rect+0x5a>
 801ca24:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801ca28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca2c:	f57f aed1 	bpl.w	801c7d2 <nema_mat3x3_quad_to_rect+0x4a>
 801ca30:	e7c6      	b.n	801c9c0 <nema_mat3x3_quad_to_rect+0x238>
 801ca32:	ed9f 7a07 	vldr	s14, [pc, #28]	; 801ca50 <nema_mat3x3_quad_to_rect+0x2c8>
 801ca36:	eeb4 4ac7 	vcmpe.f32	s8, s14
 801ca3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca3e:	bfac      	ite	ge
 801ca40:	2001      	movge	r0, #1
 801ca42:	2000      	movlt	r0, #0
 801ca44:	e752      	b.n	801c8ec <nema_mat3x3_quad_to_rect+0x164>
 801ca46:	f04f 30ff 	mov.w	r0, #4294967295
 801ca4a:	e7ac      	b.n	801c9a6 <nema_mat3x3_quad_to_rect+0x21e>
 801ca4c:	3727c5ac 	.word	0x3727c5ac
 801ca50:	b727c5ac 	.word	0xb727c5ac
 801ca54:	00000000 	.word	0x00000000

0801ca58 <nema_readHwConfig>:
 801ca58:	b510      	push	{r4, lr}
 801ca5a:	4c05      	ldr	r4, [pc, #20]	; (801ca70 <nema_readHwConfig+0x18>)
 801ca5c:	6820      	ldr	r0, [r4, #0]
 801ca5e:	b100      	cbz	r0, 801ca62 <nema_readHwConfig+0xa>
 801ca60:	bd10      	pop	{r4, pc}
 801ca62:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 801ca66:	f7e6 fc0f 	bl	8003288 <nema_reg_read>
 801ca6a:	6020      	str	r0, [r4, #0]
 801ca6c:	bd10      	pop	{r4, pc}
 801ca6e:	bf00      	nop
 801ca70:	20197ae0 	.word	0x20197ae0

0801ca74 <nema_readHwConfigH>:
 801ca74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801ca78:	f7e6 bc06 	b.w	8003288 <nema_reg_read>

0801ca7c <nema_enable_tiling>:
 801ca7c:	2800      	cmp	r0, #0
 801ca7e:	bf14      	ite	ne
 801ca80:	f04f 4080 	movne.w	r0, #1073741824	; 0x40000000
 801ca84:	2000      	moveq	r0, #0
 801ca86:	b410      	push	{r4}
 801ca88:	4a05      	ldr	r2, [pc, #20]	; (801caa0 <nema_enable_tiling+0x24>)
 801ca8a:	6951      	ldr	r1, [r2, #20]
 801ca8c:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
 801ca90:	4323      	orrs	r3, r4
 801ca92:	430b      	orrs	r3, r1
 801ca94:	4303      	orrs	r3, r0
 801ca96:	6050      	str	r0, [r2, #4]
 801ca98:	6113      	str	r3, [r2, #16]
 801ca9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ca9e:	4770      	bx	lr
 801caa0:	20197e7c 	.word	0x20197e7c

0801caa4 <nema_enable_aa>:
 801caa4:	2800      	cmp	r0, #0
 801caa6:	b410      	push	{r4}
 801caa8:	bf19      	ittee	ne
 801caaa:	f04f 6080 	movne.w	r0, #67108864	; 0x4000000
 801caae:	f04f 64c0 	movne.w	r4, #100663296	; 0x6000000
 801cab2:	f04f 7400 	moveq.w	r4, #33554432	; 0x2000000
 801cab6:	2000      	moveq	r0, #0
 801cab8:	2900      	cmp	r1, #0
 801caba:	bf08      	it	eq
 801cabc:	4604      	moveq	r4, r0
 801cabe:	b10a      	cbz	r2, 801cac4 <nema_enable_aa+0x20>
 801cac0:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 801cac4:	b10b      	cbz	r3, 801caca <nema_enable_aa+0x26>
 801cac6:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 801caca:	4a06      	ldr	r2, [pc, #24]	; (801cae4 <nema_enable_aa+0x40>)
 801cacc:	6853      	ldr	r3, [r2, #4]
 801cace:	e9d2 1002 	ldrd	r1, r0, [r2, #8]
 801cad2:	4303      	orrs	r3, r0
 801cad4:	430b      	orrs	r3, r1
 801cad6:	4323      	orrs	r3, r4
 801cad8:	6950      	ldr	r0, [r2, #20]
 801cada:	e9c2 3404 	strd	r3, r4, [r2, #16]
 801cade:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cae2:	4770      	bx	lr
 801cae4:	20197e7c 	.word	0x20197e7c

0801cae8 <nema_matmul_bypass>:
 801cae8:	b920      	cbnz	r0, 801caf4 <nema_matmul_bypass+0xc>
 801caea:	4601      	mov	r1, r0
 801caec:	f44f 708c 	mov.w	r0, #280	; 0x118
 801caf0:	f000 be84 	b.w	801d7fc <nema_cl_add_cmd>
 801caf4:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
 801caf8:	f44f 708c 	mov.w	r0, #280	; 0x118
 801cafc:	f000 be7e 	b.w	801d7fc <nema_cl_add_cmd>

0801cb00 <nema_set_matrix>:
 801cb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb04:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801cc6c <nema_set_matrix+0x16c>
 801cb08:	edd0 7a06 	vldr	s15, [r0, #24]
 801cb0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801cb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb14:	4604      	mov	r4, r0
 801cb16:	d506      	bpl.n	801cb26 <nema_set_matrix+0x26>
 801cb18:	eddf 6a55 	vldr	s13, [pc, #340]	; 801cc70 <nema_set_matrix+0x170>
 801cb1c:	eef4 7ae6 	vcmpe.f32	s15, s13
 801cb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb24:	dc47      	bgt.n	801cbb6 <nema_set_matrix+0xb6>
 801cb26:	2009      	movs	r0, #9
 801cb28:	f000 fe0a 	bl	801d740 <nema_cl_get_space>
 801cb2c:	2800      	cmp	r0, #0
 801cb2e:	d040      	beq.n	801cbb2 <nema_set_matrix+0xb2>
 801cb30:	f44f 73ba 	mov.w	r3, #372	; 0x174
 801cb34:	6003      	str	r3, [r0, #0]
 801cb36:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801cb3a:	6962      	ldr	r2, [r4, #20]
 801cb3c:	6083      	str	r3, [r0, #8]
 801cb3e:	f44f 73bc 	mov.w	r3, #376	; 0x178
 801cb42:	6042      	str	r2, [r0, #4]
 801cb44:	68a2      	ldr	r2, [r4, #8]
 801cb46:	6103      	str	r3, [r0, #16]
 801cb48:	f44f 73be 	mov.w	r3, #380	; 0x17c
 801cb4c:	60c2      	str	r2, [r0, #12]
 801cb4e:	69a2      	ldr	r2, [r4, #24]
 801cb50:	6183      	str	r3, [r0, #24]
 801cb52:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801cb56:	6142      	str	r2, [r0, #20]
 801cb58:	69e2      	ldr	r2, [r4, #28]
 801cb5a:	6203      	str	r3, [r0, #32]
 801cb5c:	61c2      	str	r2, [r0, #28]
 801cb5e:	6a23      	ldr	r3, [r4, #32]
 801cb60:	2544      	movs	r5, #68	; 0x44
 801cb62:	6243      	str	r3, [r0, #36]	; 0x24
 801cb64:	2640      	movs	r6, #64	; 0x40
 801cb66:	233c      	movs	r3, #60	; 0x3c
 801cb68:	2738      	movs	r7, #56	; 0x38
 801cb6a:	2234      	movs	r2, #52	; 0x34
 801cb6c:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801cb70:	212c      	movs	r1, #44	; 0x2c
 801cb72:	f04f 0e28 	mov.w	lr, #40	; 0x28
 801cb76:	f44f 78b0 	mov.w	r8, #352	; 0x160
 801cb7a:	f840 800e 	str.w	r8, [r0, lr]
 801cb7e:	f44f 7eb2 	mov.w	lr, #356	; 0x164
 801cb82:	f8d4 8000 	ldr.w	r8, [r4]
 801cb86:	4401      	add	r1, r0
 801cb88:	f8c1 8000 	str.w	r8, [r1]
 801cb8c:	f840 e00c 	str.w	lr, [r0, ip]
 801cb90:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 801cb94:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801cb98:	4402      	add	r2, r0
 801cb9a:	f8c2 c000 	str.w	ip, [r2]
 801cb9e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801cba2:	51c1      	str	r1, [r0, r7]
 801cba4:	68e1      	ldr	r1, [r4, #12]
 801cba6:	4403      	add	r3, r0
 801cba8:	6019      	str	r1, [r3, #0]
 801cbaa:	5182      	str	r2, [r0, r6]
 801cbac:	6923      	ldr	r3, [r4, #16]
 801cbae:	4428      	add	r0, r5
 801cbb0:	6003      	str	r3, [r0, #0]
 801cbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cbb6:	ed90 6a07 	vldr	s12, [r0, #28]
 801cbba:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801cbbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbc2:	d5b0      	bpl.n	801cb26 <nema_set_matrix+0x26>
 801cbc4:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801cbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbcc:	ddab      	ble.n	801cb26 <nema_set_matrix+0x26>
 801cbce:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801cbd2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801cbd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 801cbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbde:	d43f      	bmi.n	801cc60 <nema_set_matrix+0x160>
 801cbe0:	edd4 7a08 	vldr	s15, [r4, #32]
 801cbe4:	ed94 5a00 	vldr	s10, [r4]
 801cbe8:	edd4 5a01 	vldr	s11, [r4, #4]
 801cbec:	ed94 6a02 	vldr	s12, [r4, #8]
 801cbf0:	edd4 6a03 	vldr	s13, [r4, #12]
 801cbf4:	ed94 7a04 	vldr	s14, [r4, #16]
 801cbf8:	ed94 4a05 	vldr	s8, [r4, #20]
 801cbfc:	eec5 4a27 	vdiv.f32	s9, s10, s15
 801cc00:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 801cc04:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801cc08:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801cc0c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801cc10:	ee84 7a27 	vdiv.f32	s14, s8, s15
 801cc14:	edc4 4a00 	vstr	s9, [r4]
 801cc18:	ed84 5a01 	vstr	s10, [r4, #4]
 801cc1c:	edc4 5a02 	vstr	s11, [r4, #8]
 801cc20:	ed84 6a03 	vstr	s12, [r4, #12]
 801cc24:	edc4 6a04 	vstr	s13, [r4, #16]
 801cc28:	ed84 7a05 	vstr	s14, [r4, #20]
 801cc2c:	2006      	movs	r0, #6
 801cc2e:	f000 fd87 	bl	801d740 <nema_cl_get_space>
 801cc32:	2800      	cmp	r0, #0
 801cc34:	d0bd      	beq.n	801cbb2 <nema_set_matrix+0xb2>
 801cc36:	f44f 73ba 	mov.w	r3, #372	; 0x174
 801cc3a:	6003      	str	r3, [r0, #0]
 801cc3c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801cc40:	6962      	ldr	r2, [r4, #20]
 801cc42:	6083      	str	r3, [r0, #8]
 801cc44:	6042      	str	r2, [r0, #4]
 801cc46:	68a3      	ldr	r3, [r4, #8]
 801cc48:	252c      	movs	r5, #44	; 0x2c
 801cc4a:	60c3      	str	r3, [r0, #12]
 801cc4c:	2628      	movs	r6, #40	; 0x28
 801cc4e:	2324      	movs	r3, #36	; 0x24
 801cc50:	2720      	movs	r7, #32
 801cc52:	221c      	movs	r2, #28
 801cc54:	f04f 0c18 	mov.w	ip, #24
 801cc58:	2114      	movs	r1, #20
 801cc5a:	f04f 0e10 	mov.w	lr, #16
 801cc5e:	e78a      	b.n	801cb76 <nema_set_matrix+0x76>
 801cc60:	eef4 7ae6 	vcmpe.f32	s15, s13
 801cc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc68:	dce0      	bgt.n	801cc2c <nema_set_matrix+0x12c>
 801cc6a:	e7b9      	b.n	801cbe0 <nema_set_matrix+0xe0>
 801cc6c:	33d6bf95 	.word	0x33d6bf95
 801cc70:	b3d6bf95 	.word	0xb3d6bf95

0801cc74 <nema_set_matrix_translate>:
 801cc74:	b508      	push	{r3, lr}
 801cc76:	2002      	movs	r0, #2
 801cc78:	ed2d 8b02 	vpush	{d8}
 801cc7c:	eeb0 8a40 	vmov.f32	s16, s0
 801cc80:	eef0 8a60 	vmov.f32	s17, s1
 801cc84:	f000 fd5c 	bl	801d740 <nema_cl_get_space>
 801cc88:	b1c8      	cbz	r0, 801ccbe <nema_set_matrix_translate+0x4a>
 801cc8a:	eddf 7a13 	vldr	s15, [pc, #76]	; 801ccd8 <nema_set_matrix_translate+0x64>
 801cc8e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801cc92:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801cc96:	eef1 6a68 	vneg.f32	s13, s17
 801cc9a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801cc9e:	eeb1 7a48 	vneg.f32	s14, s16
 801cca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cca6:	6002      	str	r2, [r0, #0]
 801cca8:	edc0 6a01 	vstr	s13, [r0, #4]
 801ccac:	6083      	str	r3, [r0, #8]
 801ccae:	ed80 7a03 	vstr	s14, [r0, #12]
 801ccb2:	dc07      	bgt.n	801ccc4 <nema_set_matrix_translate+0x50>
 801ccb4:	eef4 8ae7 	vcmpe.f32	s17, s15
 801ccb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccbc:	dc02      	bgt.n	801ccc4 <nema_set_matrix_translate+0x50>
 801ccbe:	ecbd 8b02 	vpop	{d8}
 801ccc2:	bd08      	pop	{r3, pc}
 801ccc4:	ecbd 8b02 	vpop	{d8}
 801ccc8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801cccc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ccd0:	f44f 708c 	mov.w	r0, #280	; 0x118
 801ccd4:	f000 bd92 	b.w	801d7fc <nema_cl_add_cmd>
 801ccd8:	45000000 	.word	0x45000000

0801ccdc <nema_load_frag_shader>:
 801ccdc:	b570      	push	{r4, r5, r6, lr}
 801ccde:	460e      	mov	r6, r1
 801cce0:	4604      	mov	r4, r0
 801cce2:	4611      	mov	r1, r2
 801cce4:	20c4      	movs	r0, #196	; 0xc4
 801cce6:	f000 fd89 	bl	801d7fc <nema_cl_add_cmd>
 801ccea:	b186      	cbz	r6, 801cd0e <nema_load_frag_shader+0x32>
 801ccec:	2500      	movs	r5, #0
 801ccee:	3408      	adds	r4, #8
 801ccf0:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801ccf4:	20c8      	movs	r0, #200	; 0xc8
 801ccf6:	f000 fd81 	bl	801d7fc <nema_cl_add_cmd>
 801ccfa:	3501      	adds	r5, #1
 801ccfc:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801cd00:	20cc      	movs	r0, #204	; 0xcc
 801cd02:	f000 fd7b 	bl	801d7fc <nema_cl_add_cmd>
 801cd06:	42ae      	cmp	r6, r5
 801cd08:	f104 0408 	add.w	r4, r4, #8
 801cd0c:	d1f0      	bne.n	801ccf0 <nema_load_frag_shader+0x14>
 801cd0e:	bd70      	pop	{r4, r5, r6, pc}

0801cd10 <nema_set_frag_ptr>:
 801cd10:	4601      	mov	r1, r0
 801cd12:	f44f 708e 	mov.w	r0, #284	; 0x11c
 801cd16:	f000 bd71 	b.w	801d7fc <nema_cl_add_cmd>
 801cd1a:	bf00      	nop

0801cd1c <nema_set_rop_blend_mode>:
 801cd1c:	4601      	mov	r1, r0
 801cd1e:	f44f 70e8 	mov.w	r0, #464	; 0x1d0
 801cd22:	f000 bd6b 	b.w	801d7fc <nema_cl_add_cmd>
 801cd26:	bf00      	nop

0801cd28 <nema_set_rop_const_color>:
 801cd28:	4601      	mov	r1, r0
 801cd2a:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 801cd2e:	f000 bd65 	b.w	801d7fc <nema_cl_add_cmd>
 801cd32:	bf00      	nop

0801cd34 <nema_set_depth_ctrl>:
 801cd34:	4601      	mov	r1, r0
 801cd36:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 801cd3a:	f000 bd5f 	b.w	801d7fc <nema_cl_add_cmd>
 801cd3e:	bf00      	nop

0801cd40 <nema_set_raster_color>:
 801cd40:	4601      	mov	r1, r0
 801cd42:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801cd46:	f000 bd59 	b.w	801d7fc <nema_cl_add_cmd>
 801cd4a:	bf00      	nop

0801cd4c <nema_raster_triangle_fx>:
 801cd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd50:	4607      	mov	r7, r0
 801cd52:	2007      	movs	r0, #7
 801cd54:	460e      	mov	r6, r1
 801cd56:	4615      	mov	r5, r2
 801cd58:	461c      	mov	r4, r3
 801cd5a:	f000 fcf1 	bl	801d740 <nema_cl_get_space>
 801cd5e:	b350      	cbz	r0, 801cdb6 <nema_raster_triangle_fx+0x6a>
 801cd60:	f44f 7398 	mov.w	r3, #304	; 0x130
 801cd64:	f44f 7292 	mov.w	r2, #292	; 0x124
 801cd68:	f44f 7890 	mov.w	r8, #288	; 0x120
 801cd6c:	f44f 7e9a 	mov.w	lr, #308	; 0x134
 801cd70:	f44f 7ca0 	mov.w	ip, #320	; 0x140
 801cd74:	f44f 71a2 	mov.w	r1, #324	; 0x144
 801cd78:	6103      	str	r3, [r0, #16]
 801cd7a:	4b10      	ldr	r3, [pc, #64]	; (801cdbc <nema_raster_triangle_fx+0x70>)
 801cd7c:	6047      	str	r7, [r0, #4]
 801cd7e:	60c6      	str	r6, [r0, #12]
 801cd80:	f8c0 8000 	str.w	r8, [r0]
 801cd84:	6082      	str	r2, [r0, #8]
 801cd86:	691a      	ldr	r2, [r3, #16]
 801cd88:	4b0d      	ldr	r3, [pc, #52]	; (801cdc0 <nema_raster_triangle_fx+0x74>)
 801cd8a:	61c4      	str	r4, [r0, #28]
 801cd8c:	9c06      	ldr	r4, [sp, #24]
 801cd8e:	6303      	str	r3, [r0, #48]	; 0x30
 801cd90:	01d3      	lsls	r3, r2, #7
 801cd92:	6244      	str	r4, [r0, #36]	; 0x24
 801cd94:	bf48      	it	mi
 801cd96:	f442 0200 	orrmi.w	r2, r2, #8388608	; 0x800000
 801cd9a:	9c07      	ldr	r4, [sp, #28]
 801cd9c:	bf58      	it	pl
 801cd9e:	f422 0200 	bicpl.w	r2, r2, #8388608	; 0x800000
 801cda2:	f042 0204 	orr.w	r2, r2, #4
 801cda6:	6145      	str	r5, [r0, #20]
 801cda8:	62c4      	str	r4, [r0, #44]	; 0x2c
 801cdaa:	f8c0 e018 	str.w	lr, [r0, #24]
 801cdae:	f8c0 c020 	str.w	ip, [r0, #32]
 801cdb2:	6281      	str	r1, [r0, #40]	; 0x28
 801cdb4:	6342      	str	r2, [r0, #52]	; 0x34
 801cdb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdba:	bf00      	nop
 801cdbc:	20197e7c 	.word	0x20197e7c
 801cdc0:	ff000100 	.word	0xff000100

0801cdc4 <nema_raster_rect>:
 801cdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cdc6:	1e17      	subs	r7, r2, #0
 801cdc8:	dd20      	ble.n	801ce0c <nema_raster_rect+0x48>
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	dd1e      	ble.n	801ce0c <nema_raster_rect+0x48>
 801cdce:	4604      	mov	r4, r0
 801cdd0:	2003      	movs	r0, #3
 801cdd2:	461d      	mov	r5, r3
 801cdd4:	460e      	mov	r6, r1
 801cdd6:	f000 fcb3 	bl	801d740 <nema_cl_get_space>
 801cdda:	b1b8      	cbz	r0, 801ce0c <nema_raster_rect+0x48>
 801cddc:	f44f 7c82 	mov.w	ip, #260	; 0x104
 801cde0:	f44f 7184 	mov.w	r1, #264	; 0x108
 801cde4:	193a      	adds	r2, r7, r4
 801cde6:	b292      	uxth	r2, r2
 801cde8:	19ab      	adds	r3, r5, r6
 801cdea:	b2a4      	uxth	r4, r4
 801cdec:	4d08      	ldr	r5, [pc, #32]	; (801ce10 <nema_raster_rect+0x4c>)
 801cdee:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 801cdf2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 801cdf6:	4a07      	ldr	r2, [pc, #28]	; (801ce14 <nema_raster_rect+0x50>)
 801cdf8:	6044      	str	r4, [r0, #4]
 801cdfa:	60c3      	str	r3, [r0, #12]
 801cdfc:	f8c0 c000 	str.w	ip, [r0]
 801ce00:	6081      	str	r1, [r0, #8]
 801ce02:	6105      	str	r5, [r0, #16]
 801ce04:	6913      	ldr	r3, [r2, #16]
 801ce06:	f043 0302 	orr.w	r3, r3, #2
 801ce0a:	6143      	str	r3, [r0, #20]
 801ce0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ce0e:	bf00      	nop
 801ce10:	ff000100 	.word	0xff000100
 801ce14:	20197e7c 	.word	0x20197e7c

0801ce18 <nema_raster_quad_fx>:
 801ce18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce1c:	4607      	mov	r7, r0
 801ce1e:	2009      	movs	r0, #9
 801ce20:	460e      	mov	r6, r1
 801ce22:	4615      	mov	r5, r2
 801ce24:	461c      	mov	r4, r3
 801ce26:	f000 fc8b 	bl	801d740 <nema_cl_get_space>
 801ce2a:	2800      	cmp	r0, #0
 801ce2c:	d02f      	beq.n	801ce8e <nema_raster_quad_fx+0x76>
 801ce2e:	f44f 7398 	mov.w	r3, #304	; 0x130
 801ce32:	f44f 7292 	mov.w	r2, #292	; 0x124
 801ce36:	f44f 7a90 	mov.w	sl, #288	; 0x120
 801ce3a:	f44f 799a 	mov.w	r9, #308	; 0x134
 801ce3e:	f44f 78a0 	mov.w	r8, #320	; 0x140
 801ce42:	f44f 7ea2 	mov.w	lr, #324	; 0x144
 801ce46:	f44f 7ca8 	mov.w	ip, #336	; 0x150
 801ce4a:	f44f 71aa 	mov.w	r1, #340	; 0x154
 801ce4e:	6103      	str	r3, [r0, #16]
 801ce50:	4b10      	ldr	r3, [pc, #64]	; (801ce94 <nema_raster_quad_fx+0x7c>)
 801ce52:	6047      	str	r7, [r0, #4]
 801ce54:	60c6      	str	r6, [r0, #12]
 801ce56:	f8c0 a000 	str.w	sl, [r0]
 801ce5a:	6082      	str	r2, [r0, #8]
 801ce5c:	691a      	ldr	r2, [r3, #16]
 801ce5e:	9b08      	ldr	r3, [sp, #32]
 801ce60:	f042 0205 	orr.w	r2, r2, #5
 801ce64:	6243      	str	r3, [r0, #36]	; 0x24
 801ce66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce68:	6145      	str	r5, [r0, #20]
 801ce6a:	62c3      	str	r3, [r0, #44]	; 0x2c
 801ce6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ce6e:	61c4      	str	r4, [r0, #28]
 801ce70:	6343      	str	r3, [r0, #52]	; 0x34
 801ce72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce74:	6442      	str	r2, [r0, #68]	; 0x44
 801ce76:	63c3      	str	r3, [r0, #60]	; 0x3c
 801ce78:	4b07      	ldr	r3, [pc, #28]	; (801ce98 <nema_raster_quad_fx+0x80>)
 801ce7a:	f8c0 9018 	str.w	r9, [r0, #24]
 801ce7e:	f8c0 8020 	str.w	r8, [r0, #32]
 801ce82:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
 801ce86:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
 801ce8a:	6381      	str	r1, [r0, #56]	; 0x38
 801ce8c:	6403      	str	r3, [r0, #64]	; 0x40
 801ce8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce92:	bf00      	nop
 801ce94:	20197e7c 	.word	0x20197e7c
 801ce98:	ff000100 	.word	0xff000100

0801ce9c <nema_set_interrupt_ctrl>:
 801ce9c:	4601      	mov	r1, r0
 801ce9e:	20f8      	movs	r0, #248	; 0xf8
 801cea0:	f000 bcac 	b.w	801d7fc <nema_cl_add_cmd>

0801cea4 <nema_vg_init>:
 801cea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cea6:	4606      	mov	r6, r0
 801cea8:	460f      	mov	r7, r1
 801ceaa:	b08f      	sub	sp, #60	; 0x3c
 801ceac:	ac02      	add	r4, sp, #8
 801ceae:	460a      	mov	r2, r1
 801ceb0:	2300      	movs	r3, #0
 801ceb2:	4601      	mov	r1, r0
 801ceb4:	4620      	mov	r0, r4
 801ceb6:	f000 f889 	bl	801cfcc <stencil_buffer_create>
 801ceba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801cebe:	ad0a      	add	r5, sp, #40	; 0x28
 801cec0:	ac06      	add	r4, sp, #24
 801cec2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801cec6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801ceca:	f000 f827 	bl	801cf1c <context_reset>
 801cece:	ab0e      	add	r3, sp, #56	; 0x38
 801ced0:	e913 0003 	ldmdb	r3, {r0, r1}
 801ced4:	e895 000c 	ldmia.w	r5, {r2, r3}
 801ced8:	e88d 0003 	stmia.w	sp, {r0, r1}
 801cedc:	4639      	mov	r1, r7
 801cede:	4630      	mov	r0, r6
 801cee0:	f000 f888 	bl	801cff4 <stencil_buffer_set>
 801cee4:	f000 f8c2 	bl	801d06c <lut_buffer_create>
 801cee8:	f000 f94e 	bl	801d188 <tsvg_init>
 801ceec:	4639      	mov	r1, r7
 801ceee:	4630      	mov	r0, r6
 801cef0:	f000 f940 	bl	801d174 <set_tsvg_text_max_size>
 801cef4:	f000 f866 	bl	801cfc4 <nema_vg_get_context>
 801cef8:	4c06      	ldr	r4, [pc, #24]	; (801cf14 <nema_vg_init+0x70>)
 801cefa:	6020      	str	r0, [r4, #0]
 801cefc:	f000 f8b0 	bl	801d060 <nema_vg_get_stencil>
 801cf00:	6822      	ldr	r2, [r4, #0]
 801cf02:	4905      	ldr	r1, [pc, #20]	; (801cf18 <nema_vg_init+0x74>)
 801cf04:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801cf06:	6008      	str	r0, [r1, #0]
 801cf08:	f043 0320 	orr.w	r3, r3, #32
 801cf0c:	6313      	str	r3, [r2, #48]	; 0x30
 801cf0e:	b00f      	add	sp, #60	; 0x3c
 801cf10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf12:	bf00      	nop
 801cf14:	20197ae4 	.word	0x20197ae4
 801cf18:	20197ae8 	.word	0x20197ae8

0801cf1c <context_reset>:
 801cf1c:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 801cf20:	4c26      	ldr	r4, [pc, #152]	; (801cfbc <context_reset+0xa0>)
 801cf22:	6820      	ldr	r0, [r4, #0]
 801cf24:	b110      	cbz	r0, 801cf2c <context_reset+0x10>
 801cf26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cf28:	069b      	lsls	r3, r3, #26
 801cf2a:	d440      	bmi.n	801cfae <context_reset+0x92>
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	6962      	ldr	r2, [r4, #20]
 801cf30:	e9c4 3300 	strd	r3, r3, [r4]
 801cf34:	60a3      	str	r3, [r4, #8]
 801cf36:	b112      	cbz	r2, 801cf3e <context_reset+0x22>
 801cf38:	4821      	ldr	r0, [pc, #132]	; (801cfc0 <context_reset+0xa4>)
 801cf3a:	f7e6 fa4a 	bl	80033d2 <nema_buffer_destroy>
 801cf3e:	2300      	movs	r3, #0
 801cf40:	f04f 0800 	mov.w	r8, #0
 801cf44:	f240 5901 	movw	r9, #1281	; 0x501
 801cf48:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 801cf4c:	f04f 67f0 	mov.w	r7, #125829120	; 0x7800000
 801cf50:	2000      	movs	r0, #0
 801cf52:	2100      	movs	r1, #0
 801cf54:	6423      	str	r3, [r4, #64]	; 0x40
 801cf56:	6463      	str	r3, [r4, #68]	; 0x44
 801cf58:	64e3      	str	r3, [r4, #76]	; 0x4c
 801cf5a:	6723      	str	r3, [r4, #112]	; 0x70
 801cf5c:	6523      	str	r3, [r4, #80]	; 0x50
 801cf5e:	6763      	str	r3, [r4, #116]	; 0x74
 801cf60:	6563      	str	r3, [r4, #84]	; 0x54
 801cf62:	67a3      	str	r3, [r4, #120]	; 0x78
 801cf64:	65a3      	str	r3, [r4, #88]	; 0x58
 801cf66:	67e3      	str	r3, [r4, #124]	; 0x7c
 801cf68:	65e3      	str	r3, [r4, #92]	; 0x5c
 801cf6a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 801cf6e:	6623      	str	r3, [r4, #96]	; 0x60
 801cf70:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 801cf74:	6663      	str	r3, [r4, #100]	; 0x64
 801cf76:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801cf7a:	66a3      	str	r3, [r4, #104]	; 0x68
 801cf7c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 801cf80:	66e3      	str	r3, [r4, #108]	; 0x6c
 801cf82:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 801cf86:	2202      	movs	r2, #2
 801cf88:	2300      	movs	r3, #0
 801cf8a:	e9c4 8908 	strd	r8, r9, [r4, #32]
 801cf8e:	e9c4 670a 	strd	r6, r7, [r4, #40]	; 0x28
 801cf92:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
 801cf96:	e9c4 3303 	strd	r3, r3, [r4, #12]
 801cf9a:	e9c4 3305 	strd	r3, r3, [r4, #20]
 801cf9e:	77a3      	strb	r3, [r4, #30]
 801cfa0:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801cfa4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801cfa8:	83a2      	strh	r2, [r4, #28]
 801cfaa:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 801cfae:	6883      	ldr	r3, [r0, #8]
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	d0bb      	beq.n	801cf2c <context_reset+0x10>
 801cfb4:	f7e6 fa0d 	bl	80033d2 <nema_buffer_destroy>
 801cfb8:	e7b8      	b.n	801cf2c <context_reset+0x10>
 801cfba:	bf00      	nop
 801cfbc:	20197af0 	.word	0x20197af0
 801cfc0:	20197afc 	.word	0x20197afc

0801cfc4 <nema_vg_get_context>:
 801cfc4:	4800      	ldr	r0, [pc, #0]	; (801cfc8 <nema_vg_get_context+0x4>)
 801cfc6:	4770      	bx	lr
 801cfc8:	20197af0 	.word	0x20197af0

0801cfcc <stencil_buffer_create>:
 801cfcc:	b538      	push	{r3, r4, r5, lr}
 801cfce:	4605      	mov	r5, r0
 801cfd0:	1cc8      	adds	r0, r1, #3
 801cfd2:	bf48      	it	mi
 801cfd4:	1d88      	addmi	r0, r1, #6
 801cfd6:	1cd4      	adds	r4, r2, #3
 801cfd8:	bf48      	it	mi
 801cfda:	1d94      	addmi	r4, r2, #6
 801cfdc:	1080      	asrs	r0, r0, #2
 801cfde:	0080      	lsls	r0, r0, #2
 801cfe0:	f024 0203 	bic.w	r2, r4, #3
 801cfe4:	fb02 f200 	mul.w	r2, r2, r0
 801cfe8:	4619      	mov	r1, r3
 801cfea:	4628      	mov	r0, r5
 801cfec:	f7e6 f9d6 	bl	800339c <nema_buffer_create_pool>
 801cff0:	4628      	mov	r0, r5
 801cff2:	bd38      	pop	{r3, r4, r5, pc}

0801cff4 <stencil_buffer_set>:
 801cff4:	b082      	sub	sp, #8
 801cff6:	b470      	push	{r4, r5, r6}
 801cff8:	4606      	mov	r6, r0
 801cffa:	460d      	mov	r5, r1
 801cffc:	a803      	add	r0, sp, #12
 801cffe:	e880 000c 	stmia.w	r0, {r2, r3}
 801d002:	4c15      	ldr	r4, [pc, #84]	; (801d058 <stencil_buffer_set+0x64>)
 801d004:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801d006:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d00a:	1cf3      	adds	r3, r6, #3
 801d00c:	bf48      	it	mi
 801d00e:	1db3      	addmi	r3, r6, #6
 801d010:	1cea      	adds	r2, r5, #3
 801d012:	bf48      	it	mi
 801d014:	1daa      	addmi	r2, r5, #6
 801d016:	f022 0203 	bic.w	r2, r2, #3
 801d01a:	ee07 2a90 	vmov	s15, r2
 801d01e:	f023 0303 	bic.w	r3, r3, #3
 801d022:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d026:	ee07 3a90 	vmov	s15, r3
 801d02a:	2100      	movs	r1, #0
 801d02c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d030:	61a1      	str	r1, [r4, #24]
 801d032:	61e1      	str	r1, [r4, #28]
 801d034:	6261      	str	r1, [r4, #36]	; 0x24
 801d036:	6321      	str	r1, [r4, #48]	; 0x30
 801d038:	4908      	ldr	r1, [pc, #32]	; (801d05c <stencil_buffer_set+0x68>)
 801d03a:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 801d03e:	600c      	str	r4, [r1, #0]
 801d040:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801d044:	edc4 7a08 	vstr	s15, [r4, #32]
 801d048:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 801d04c:	e9c4 3204 	strd	r3, r2, [r4, #16]
 801d050:	bc70      	pop	{r4, r5, r6}
 801d052:	b002      	add	sp, #8
 801d054:	4770      	bx	lr
 801d056:	bf00      	nop
 801d058:	20197b84 	.word	0x20197b84
 801d05c:	20197af0 	.word	0x20197af0

0801d060 <nema_vg_get_stencil>:
 801d060:	4b01      	ldr	r3, [pc, #4]	; (801d068 <nema_vg_get_stencil+0x8>)
 801d062:	6818      	ldr	r0, [r3, #0]
 801d064:	4770      	bx	lr
 801d066:	bf00      	nop
 801d068:	20197af0 	.word	0x20197af0

0801d06c <lut_buffer_create>:
 801d06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d06e:	4d1a      	ldr	r5, [pc, #104]	; (801d0d8 <lut_buffer_create+0x6c>)
 801d070:	b085      	sub	sp, #20
 801d072:	69ac      	ldr	r4, [r5, #24]
 801d074:	b10c      	cbz	r4, 801d07a <lut_buffer_create+0xe>
 801d076:	b005      	add	sp, #20
 801d078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d07a:	466e      	mov	r6, sp
 801d07c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801d080:	4630      	mov	r0, r6
 801d082:	4621      	mov	r1, r4
 801d084:	f7e6 f98a 	bl	800339c <nema_buffer_create_pool>
 801d088:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801d08c:	f105 060c 	add.w	r6, r5, #12
 801d090:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801d094:	4627      	mov	r7, r4
 801d096:	4623      	mov	r3, r4
 801d098:	696d      	ldr	r5, [r5, #20]
 801d09a:	26ff      	movs	r6, #255	; 0xff
 801d09c:	e008      	b.n	801d0b0 <lut_buffer_create+0x44>
 801d09e:	2880      	cmp	r0, #128	; 0x80
 801d0a0:	f1c4 0100 	rsb	r1, r4, #0
 801d0a4:	d016      	beq.n	801d0d4 <lut_buffer_create+0x68>
 801d0a6:	bfcc      	ite	gt
 801d0a8:	b2e1      	uxtbgt	r1, r4
 801d0aa:	b2c9      	uxtble	r1, r1
 801d0ac:	54a9      	strb	r1, [r5, r2]
 801d0ae:	3410      	adds	r4, #16
 801d0b0:	ea44 1213 	orr.w	r2, r4, r3, lsr #4
 801d0b4:	3301      	adds	r3, #1
 801d0b6:	f1a3 0172 	sub.w	r1, r3, #114	; 0x72
 801d0ba:	291e      	cmp	r1, #30
 801d0bc:	f103 30ff 	add.w	r0, r3, #4294967295
 801d0c0:	b2d2      	uxtb	r2, r2
 801d0c2:	d9ec      	bls.n	801d09e <lut_buffer_create+0x32>
 801d0c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d0c8:	54ae      	strb	r6, [r5, r2]
 801d0ca:	d1f0      	bne.n	801d0ae <lut_buffer_create+0x42>
 801d0cc:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 801d0d0:	b005      	add	sp, #20
 801d0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d0d4:	54af      	strb	r7, [r5, r2]
 801d0d6:	e7ea      	b.n	801d0ae <lut_buffer_create+0x42>
 801d0d8:	20197af0 	.word	0x20197af0

0801d0dc <nema_vg_set_error>:
 801d0dc:	4b01      	ldr	r3, [pc, #4]	; (801d0e4 <nema_vg_set_error+0x8>)
 801d0de:	6218      	str	r0, [r3, #32]
 801d0e0:	4770      	bx	lr
 801d0e2:	bf00      	nop
 801d0e4:	20197af0 	.word	0x20197af0

0801d0e8 <nema_vg_paint_create>:
 801d0e8:	b538      	push	{r3, r4, r5, lr}
 801d0ea:	20e0      	movs	r0, #224	; 0xe0
 801d0ec:	f7e6 f917 	bl	800331e <nema_host_malloc>
 801d0f0:	4604      	mov	r4, r0
 801d0f2:	b1e8      	cbz	r0, 801d130 <nema_vg_paint_create+0x48>
 801d0f4:	2500      	movs	r5, #0
 801d0f6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801d0fa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 801d0fe:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
 801d102:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 801d106:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
 801d10a:	f880 50dd 	strb.w	r5, [r0, #221]	; 0xdd
 801d10e:	f880 50d0 	strb.w	r5, [r0, #208]	; 0xd0
 801d112:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
 801d116:	e9c0 5500 	strd	r5, r5, [r0]
 801d11a:	3038      	adds	r0, #56	; 0x38
 801d11c:	f7ff fa30 	bl	801c580 <nema_mat3x3_load_identity>
 801d120:	f104 0008 	add.w	r0, r4, #8
 801d124:	f7ff fa2c 	bl	801c580 <nema_mat3x3_load_identity>
 801d128:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 801d12c:	4620      	mov	r0, r4
 801d12e:	bd38      	pop	{r3, r4, r5, pc}
 801d130:	2001      	movs	r0, #1
 801d132:	f7ff ffd3 	bl	801d0dc <nema_vg_set_error>
 801d136:	4620      	mov	r0, r4
 801d138:	bd38      	pop	{r3, r4, r5, pc}
 801d13a:	bf00      	nop

0801d13c <nema_vg_grad_create>:
 801d13c:	b530      	push	{r4, r5, lr}
 801d13e:	2010      	movs	r0, #16
 801d140:	b085      	sub	sp, #20
 801d142:	f7e6 f8ec 	bl	800331e <nema_host_malloc>
 801d146:	466d      	mov	r5, sp
 801d148:	4604      	mov	r4, r0
 801d14a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801d14e:	4628      	mov	r0, r5
 801d150:	2100      	movs	r1, #0
 801d152:	f7e6 f923 	bl	800339c <nema_buffer_create_pool>
 801d156:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801d15a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d15e:	4620      	mov	r0, r4
 801d160:	b005      	add	sp, #20
 801d162:	bd30      	pop	{r4, r5, pc}

0801d164 <nema_vg_path_create>:
 801d164:	b508      	push	{r3, lr}
 801d166:	2088      	movs	r0, #136	; 0x88
 801d168:	f7e6 f8d9 	bl	800331e <nema_host_malloc>
 801d16c:	2200      	movs	r2, #0
 801d16e:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 801d172:	bd08      	pop	{r3, pc}

0801d174 <set_tsvg_text_max_size>:
 801d174:	4a02      	ldr	r2, [pc, #8]	; (801d180 <set_tsvg_text_max_size+0xc>)
 801d176:	4b03      	ldr	r3, [pc, #12]	; (801d184 <set_tsvg_text_max_size+0x10>)
 801d178:	6010      	str	r0, [r2, #0]
 801d17a:	6019      	str	r1, [r3, #0]
 801d17c:	4770      	bx	lr
 801d17e:	bf00      	nop
 801d180:	2000005c 	.word	0x2000005c
 801d184:	20000060 	.word	0x20000060

0801d188 <tsvg_init>:
 801d188:	b508      	push	{r3, lr}
 801d18a:	f7ff ffad 	bl	801d0e8 <nema_vg_paint_create>
 801d18e:	4b05      	ldr	r3, [pc, #20]	; (801d1a4 <tsvg_init+0x1c>)
 801d190:	6018      	str	r0, [r3, #0]
 801d192:	f7ff ffe7 	bl	801d164 <nema_vg_path_create>
 801d196:	4b04      	ldr	r3, [pc, #16]	; (801d1a8 <tsvg_init+0x20>)
 801d198:	6018      	str	r0, [r3, #0]
 801d19a:	f7ff ffcf 	bl	801d13c <nema_vg_grad_create>
 801d19e:	4b03      	ldr	r3, [pc, #12]	; (801d1ac <tsvg_init+0x24>)
 801d1a0:	6018      	str	r0, [r3, #0]
 801d1a2:	bd08      	pop	{r3, pc}
 801d1a4:	20197bc0 	.word	0x20197bc0
 801d1a8:	20197bc4 	.word	0x20197bc4
 801d1ac:	20197bbc 	.word	0x20197bbc

0801d1b0 <tsi_malloc_init_pool>:
 801d1b0:	b4f0      	push	{r4, r5, r6, r7}
 801d1b2:	2807      	cmp	r0, #7
 801d1b4:	9e04      	ldr	r6, [sp, #16]
 801d1b6:	d81c      	bhi.n	801d1f2 <tsi_malloc_init_pool+0x42>
 801d1b8:	4f0f      	ldr	r7, [pc, #60]	; (801d1f8 <tsi_malloc_init_pool+0x48>)
 801d1ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d1be:	0084      	lsls	r4, r0, #2
 801d1c0:	193d      	adds	r5, r7, r4
 801d1c2:	513a      	str	r2, [r7, r4]
 801d1c4:	185a      	adds	r2, r3, r1
 801d1c6:	60e9      	str	r1, [r5, #12]
 801d1c8:	6069      	str	r1, [r5, #4]
 801d1ca:	612b      	str	r3, [r5, #16]
 801d1cc:	60aa      	str	r2, [r5, #8]
 801d1ce:	b16e      	cbz	r6, 801d1ec <tsi_malloc_init_pool+0x3c>
 801d1d0:	2200      	movs	r2, #0
 801d1d2:	2010      	movs	r0, #16
 801d1d4:	4d09      	ldr	r5, [pc, #36]	; (801d1fc <tsi_malloc_init_pool+0x4c>)
 801d1d6:	180c      	adds	r4, r1, r0
 801d1d8:	e9c1 5001 	strd	r5, r0, [r1, #4]
 801d1dc:	4610      	mov	r0, r2
 801d1de:	3b20      	subs	r3, #32
 801d1e0:	610b      	str	r3, [r1, #16]
 801d1e2:	600a      	str	r2, [r1, #0]
 801d1e4:	e9c4 5201 	strd	r5, r2, [r4, #4]
 801d1e8:	bcf0      	pop	{r4, r5, r6, r7}
 801d1ea:	4770      	bx	lr
 801d1ec:	4630      	mov	r0, r6
 801d1ee:	bcf0      	pop	{r4, r5, r6, r7}
 801d1f0:	4770      	bx	lr
 801d1f2:	f04f 30ff 	mov.w	r0, #4294967295
 801d1f6:	e7f7      	b.n	801d1e8 <tsi_malloc_init_pool+0x38>
 801d1f8:	20197bc8 	.word	0x20197bc8
 801d1fc:	000f1fa1 	.word	0x000f1fa1

0801d200 <tsi_malloc_pool>:
 801d200:	2807      	cmp	r0, #7
 801d202:	d832      	bhi.n	801d26a <tsi_malloc_pool+0x6a>
 801d204:	4b1b      	ldr	r3, [pc, #108]	; (801d274 <tsi_malloc_pool+0x74>)
 801d206:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d20a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801d20e:	68c2      	ldr	r2, [r0, #12]
 801d210:	b35a      	cbz	r2, 801d26a <tsi_malloc_pool+0x6a>
 801d212:	2910      	cmp	r1, #16
 801d214:	bfb8      	it	lt
 801d216:	2110      	movlt	r1, #16
 801d218:	b470      	push	{r4, r5, r6}
 801d21a:	310f      	adds	r1, #15
 801d21c:	6814      	ldr	r4, [r2, #0]
 801d21e:	f021 010f 	bic.w	r1, r1, #15
 801d222:	42a1      	cmp	r1, r4
 801d224:	dd23      	ble.n	801d26e <tsi_malloc_pool+0x6e>
 801d226:	6890      	ldr	r0, [r2, #8]
 801d228:	b1d0      	cbz	r0, 801d260 <tsi_malloc_pool+0x60>
 801d22a:	4615      	mov	r5, r2
 801d22c:	e002      	b.n	801d234 <tsi_malloc_pool+0x34>
 801d22e:	6898      	ldr	r0, [r3, #8]
 801d230:	461d      	mov	r5, r3
 801d232:	b1a8      	cbz	r0, 801d260 <tsi_malloc_pool+0x60>
 801d234:	5814      	ldr	r4, [r2, r0]
 801d236:	1813      	adds	r3, r2, r0
 801d238:	428c      	cmp	r4, r1
 801d23a:	dbf8      	blt.n	801d22e <tsi_malloc_pool+0x2e>
 801d23c:	f101 0010 	add.w	r0, r1, #16
 801d240:	42a0      	cmp	r0, r4
 801d242:	da0f      	bge.n	801d264 <tsi_malloc_pool+0x64>
 801d244:	4e0c      	ldr	r6, [pc, #48]	; (801d278 <tsi_malloc_pool+0x78>)
 801d246:	1a24      	subs	r4, r4, r0
 801d248:	50c4      	str	r4, [r0, r3]
 801d24a:	18c4      	adds	r4, r0, r3
 801d24c:	6066      	str	r6, [r4, #4]
 801d24e:	689e      	ldr	r6, [r3, #8]
 801d250:	1aa2      	subs	r2, r4, r2
 801d252:	60a6      	str	r6, [r4, #8]
 801d254:	60aa      	str	r2, [r5, #8]
 801d256:	6019      	str	r1, [r3, #0]
 801d258:	4a08      	ldr	r2, [pc, #32]	; (801d27c <tsi_malloc_pool+0x7c>)
 801d25a:	f103 0010 	add.w	r0, r3, #16
 801d25e:	605a      	str	r2, [r3, #4]
 801d260:	bc70      	pop	{r4, r5, r6}
 801d262:	4770      	bx	lr
 801d264:	689a      	ldr	r2, [r3, #8]
 801d266:	60aa      	str	r2, [r5, #8]
 801d268:	e7f6      	b.n	801d258 <tsi_malloc_pool+0x58>
 801d26a:	2000      	movs	r0, #0
 801d26c:	4770      	bx	lr
 801d26e:	4615      	mov	r5, r2
 801d270:	4613      	mov	r3, r2
 801d272:	e7e3      	b.n	801d23c <tsi_malloc_pool+0x3c>
 801d274:	20197bc8 	.word	0x20197bc8
 801d278:	000f1fa1 	.word	0x000f1fa1
 801d27c:	000f1fa2 	.word	0x000f1fa2

0801d280 <tsi_free>:
 801d280:	2800      	cmp	r0, #0
 801d282:	d045      	beq.n	801d310 <tsi_free+0x90>
 801d284:	4a45      	ldr	r2, [pc, #276]	; (801d39c <tsi_free+0x11c>)
 801d286:	68d3      	ldr	r3, [r2, #12]
 801d288:	b12b      	cbz	r3, 801d296 <tsi_free+0x16>
 801d28a:	6851      	ldr	r1, [r2, #4]
 801d28c:	4281      	cmp	r1, r0
 801d28e:	d802      	bhi.n	801d296 <tsi_free+0x16>
 801d290:	6891      	ldr	r1, [r2, #8]
 801d292:	4288      	cmp	r0, r1
 801d294:	d33d      	bcc.n	801d312 <tsi_free+0x92>
 801d296:	6a13      	ldr	r3, [r2, #32]
 801d298:	b12b      	cbz	r3, 801d2a6 <tsi_free+0x26>
 801d29a:	6991      	ldr	r1, [r2, #24]
 801d29c:	4288      	cmp	r0, r1
 801d29e:	d302      	bcc.n	801d2a6 <tsi_free+0x26>
 801d2a0:	69d1      	ldr	r1, [r2, #28]
 801d2a2:	4288      	cmp	r0, r1
 801d2a4:	d335      	bcc.n	801d312 <tsi_free+0x92>
 801d2a6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801d2a8:	b12b      	cbz	r3, 801d2b6 <tsi_free+0x36>
 801d2aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801d2ac:	4281      	cmp	r1, r0
 801d2ae:	d802      	bhi.n	801d2b6 <tsi_free+0x36>
 801d2b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801d2b2:	4281      	cmp	r1, r0
 801d2b4:	d82d      	bhi.n	801d312 <tsi_free+0x92>
 801d2b6:	6c93      	ldr	r3, [r2, #72]	; 0x48
 801d2b8:	b12b      	cbz	r3, 801d2c6 <tsi_free+0x46>
 801d2ba:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801d2bc:	4288      	cmp	r0, r1
 801d2be:	d302      	bcc.n	801d2c6 <tsi_free+0x46>
 801d2c0:	6c51      	ldr	r1, [r2, #68]	; 0x44
 801d2c2:	4288      	cmp	r0, r1
 801d2c4:	d325      	bcc.n	801d312 <tsi_free+0x92>
 801d2c6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801d2c8:	b12b      	cbz	r3, 801d2d6 <tsi_free+0x56>
 801d2ca:	6d51      	ldr	r1, [r2, #84]	; 0x54
 801d2cc:	4288      	cmp	r0, r1
 801d2ce:	d302      	bcc.n	801d2d6 <tsi_free+0x56>
 801d2d0:	6d91      	ldr	r1, [r2, #88]	; 0x58
 801d2d2:	4288      	cmp	r0, r1
 801d2d4:	d31d      	bcc.n	801d312 <tsi_free+0x92>
 801d2d6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 801d2d8:	b12b      	cbz	r3, 801d2e6 <tsi_free+0x66>
 801d2da:	6e91      	ldr	r1, [r2, #104]	; 0x68
 801d2dc:	4288      	cmp	r0, r1
 801d2de:	d302      	bcc.n	801d2e6 <tsi_free+0x66>
 801d2e0:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 801d2e2:	4288      	cmp	r0, r1
 801d2e4:	d315      	bcc.n	801d312 <tsi_free+0x92>
 801d2e6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 801d2ea:	b133      	cbz	r3, 801d2fa <tsi_free+0x7a>
 801d2ec:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 801d2ee:	4288      	cmp	r0, r1
 801d2f0:	d303      	bcc.n	801d2fa <tsi_free+0x7a>
 801d2f2:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 801d2f6:	4288      	cmp	r0, r1
 801d2f8:	d30b      	bcc.n	801d312 <tsi_free+0x92>
 801d2fa:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 801d2fe:	b13b      	cbz	r3, 801d310 <tsi_free+0x90>
 801d300:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 801d304:	4281      	cmp	r1, r0
 801d306:	d803      	bhi.n	801d310 <tsi_free+0x90>
 801d308:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 801d30c:	4282      	cmp	r2, r0
 801d30e:	d800      	bhi.n	801d312 <tsi_free+0x92>
 801d310:	4770      	bx	lr
 801d312:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d314:	f1a0 0410 	sub.w	r4, r0, #16
 801d318:	6861      	ldr	r1, [r4, #4]
 801d31a:	4a21      	ldr	r2, [pc, #132]	; (801d3a0 <tsi_free+0x120>)
 801d31c:	4291      	cmp	r1, r2
 801d31e:	d000      	beq.n	801d322 <tsi_free+0xa2>
 801d320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d322:	4a20      	ldr	r2, [pc, #128]	; (801d3a4 <tsi_free+0x124>)
 801d324:	6062      	str	r2, [r4, #4]
 801d326:	6899      	ldr	r1, [r3, #8]
 801d328:	18ca      	adds	r2, r1, r3
 801d32a:	4294      	cmp	r4, r2
 801d32c:	d929      	bls.n	801d382 <tsi_free+0x102>
 801d32e:	b909      	cbnz	r1, 801d334 <tsi_free+0xb4>
 801d330:	e027      	b.n	801d382 <tsi_free+0x102>
 801d332:	b129      	cbz	r1, 801d340 <tsi_free+0xc0>
 801d334:	6891      	ldr	r1, [r2, #8]
 801d336:	4615      	mov	r5, r2
 801d338:	4616      	mov	r6, r2
 801d33a:	185a      	adds	r2, r3, r1
 801d33c:	4294      	cmp	r4, r2
 801d33e:	d8f8      	bhi.n	801d332 <tsi_free+0xb2>
 801d340:	f850 7c10 	ldr.w	r7, [r0, #-16]
 801d344:	42ab      	cmp	r3, r5
 801d346:	eba4 0e03 	sub.w	lr, r4, r3
 801d34a:	4407      	add	r7, r0
 801d34c:	d01e      	beq.n	801d38c <tsi_free+0x10c>
 801d34e:	682b      	ldr	r3, [r5, #0]
 801d350:	f105 0c10 	add.w	ip, r5, #16
 801d354:	4463      	add	r3, ip
 801d356:	429c      	cmp	r4, r3
 801d358:	f8c5 e008 	str.w	lr, [r5, #8]
 801d35c:	60a1      	str	r1, [r4, #8]
 801d35e:	d11a      	bne.n	801d396 <tsi_free+0x116>
 801d360:	f850 0c10 	ldr.w	r0, [r0, #-16]
 801d364:	682b      	ldr	r3, [r5, #0]
 801d366:	3010      	adds	r0, #16
 801d368:	4403      	add	r3, r0
 801d36a:	60a9      	str	r1, [r5, #8]
 801d36c:	602b      	str	r3, [r5, #0]
 801d36e:	4297      	cmp	r7, r2
 801d370:	d1d6      	bne.n	801d320 <tsi_free+0xa0>
 801d372:	683a      	ldr	r2, [r7, #0]
 801d374:	6833      	ldr	r3, [r6, #0]
 801d376:	3210      	adds	r2, #16
 801d378:	4413      	add	r3, r2
 801d37a:	6033      	str	r3, [r6, #0]
 801d37c:	68bb      	ldr	r3, [r7, #8]
 801d37e:	60b3      	str	r3, [r6, #8]
 801d380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d382:	f850 7c10 	ldr.w	r7, [r0, #-16]
 801d386:	eba4 0e03 	sub.w	lr, r4, r3
 801d38a:	4407      	add	r7, r0
 801d38c:	f8c3 e008 	str.w	lr, [r3, #8]
 801d390:	4626      	mov	r6, r4
 801d392:	60a1      	str	r1, [r4, #8]
 801d394:	e7eb      	b.n	801d36e <tsi_free+0xee>
 801d396:	4626      	mov	r6, r4
 801d398:	e7e9      	b.n	801d36e <tsi_free+0xee>
 801d39a:	bf00      	nop
 801d39c:	20197bc8 	.word	0x20197bc8
 801d3a0:	000f1fa2 	.word	0x000f1fa2
 801d3a4:	000f1fa1 	.word	0x000f1fa1

0801d3a8 <nema_cl_create_sized>:
 801d3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d3aa:	b093      	sub	sp, #76	; 0x4c
 801d3ac:	466d      	mov	r5, sp
 801d3ae:	4606      	mov	r6, r0
 801d3b0:	460a      	mov	r2, r1
 801d3b2:	4628      	mov	r0, r5
 801d3b4:	2100      	movs	r1, #0
 801d3b6:	f7e5 fff1 	bl	800339c <nema_buffer_create_pool>
 801d3ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801d3be:	2500      	movs	r5, #0
 801d3c0:	ac04      	add	r4, sp, #16
 801d3c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d3c6:	4620      	mov	r0, r4
 801d3c8:	f7e5 fff7 	bl	80033ba <nema_buffer_map>
 801d3cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801d3d0:	ac08      	add	r4, sp, #32
 801d3d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d3d6:	2110      	movs	r1, #16
 801d3d8:	f04f 32ff 	mov.w	r2, #4294967295
 801d3dc:	9b04      	ldr	r3, [sp, #16]
 801d3de:	950d      	str	r5, [sp, #52]	; 0x34
 801d3e0:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
 801d3e4:	42ab      	cmp	r3, r5
 801d3e6:	4635      	mov	r5, r6
 801d3e8:	bfb8      	it	lt
 801d3ea:	3307      	addlt	r3, #7
 801d3ec:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 801d3f0:	10db      	asrs	r3, r3, #3
 801d3f2:	005b      	lsls	r3, r3, #1
 801d3f4:	930c      	str	r3, [sp, #48]	; 0x30
 801d3f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d3f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d3fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d3fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801d3fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 801d402:	2700      	movs	r7, #0
 801d404:	e885 0003 	stmia.w	r5, {r0, r1}
 801d408:	4630      	mov	r0, r6
 801d40a:	61b7      	str	r7, [r6, #24]
 801d40c:	b013      	add	sp, #76	; 0x4c
 801d40e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d410 <nema_extend_bound_cl>:
 801d410:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d412:	4d6e      	ldr	r5, [pc, #440]	; (801d5cc <nema_extend_bound_cl+0x1bc>)
 801d414:	b09f      	sub	sp, #124	; 0x7c
 801d416:	682b      	ldr	r3, [r5, #0]
 801d418:	2b00      	cmp	r3, #0
 801d41a:	f000 80c1 	beq.w	801d5a0 <nema_extend_bound_cl+0x190>
 801d41e:	4606      	mov	r6, r0
 801d420:	6998      	ldr	r0, [r3, #24]
 801d422:	0784      	lsls	r4, r0, #30
 801d424:	f140 80b6 	bpl.w	801d594 <nema_extend_bound_cl+0x184>
 801d428:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 801d42c:	0680      	lsls	r0, r0, #26
 801d42e:	d44e      	bmi.n	801d4ce <nema_extend_bound_cl+0xbe>
 801d430:	1a89      	subs	r1, r1, r2
 801d432:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801d436:	1049      	asrs	r1, r1, #1
 801d438:	2902      	cmp	r1, #2
 801d43a:	dd13      	ble.n	801d464 <nema_extend_bound_cl+0x54>
 801d43c:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 801d440:	2700      	movs	r7, #0
 801d442:	1e94      	subs	r4, r2, #2
 801d444:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801d448:	1c91      	adds	r1, r2, #2
 801d44a:	0092      	lsls	r2, r2, #2
 801d44c:	6898      	ldr	r0, [r3, #8]
 801d44e:	f840 c002 	str.w	ip, [r0, r2]
 801d452:	6898      	ldr	r0, [r3, #8]
 801d454:	4410      	add	r0, r2
 801d456:	6047      	str	r7, [r0, #4]
 801d458:	6159      	str	r1, [r3, #20]
 801d45a:	3102      	adds	r1, #2
 801d45c:	428c      	cmp	r4, r1
 801d45e:	f102 0208 	add.w	r2, r2, #8
 801d462:	d1f3      	bne.n	801d44c <nema_extend_bound_cl+0x3c>
 801d464:	6a1c      	ldr	r4, [r3, #32]
 801d466:	2c00      	cmp	r4, #0
 801d468:	d050      	beq.n	801d50c <nema_extend_bound_cl+0xfc>
 801d46a:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
 801d46e:	26f0      	movs	r6, #240	; 0xf0
 801d470:	27f4      	movs	r7, #244	; 0xf4
 801d472:	6898      	ldr	r0, [r3, #8]
 801d474:	f041 0104 	orr.w	r1, r1, #4
 801d478:	6199      	str	r1, [r3, #24]
 801d47a:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
 801d47e:	6899      	ldr	r1, [r3, #8]
 801d480:	68e6      	ldr	r6, [r4, #12]
 801d482:	0090      	lsls	r0, r2, #2
 801d484:	4401      	add	r1, r0
 801d486:	604e      	str	r6, [r1, #4]
 801d488:	6899      	ldr	r1, [r3, #8]
 801d48a:	1c96      	adds	r6, r2, #2
 801d48c:	4401      	add	r1, r0
 801d48e:	615e      	str	r6, [r3, #20]
 801d490:	608f      	str	r7, [r1, #8]
 801d492:	6899      	ldr	r1, [r3, #8]
 801d494:	6926      	ldr	r6, [r4, #16]
 801d496:	4401      	add	r1, r0
 801d498:	1d17      	adds	r7, r2, #4
 801d49a:	60ce      	str	r6, [r1, #12]
 801d49c:	621c      	str	r4, [r3, #32]
 801d49e:	615f      	str	r7, [r3, #20]
 801d4a0:	68e1      	ldr	r1, [r4, #12]
 801d4a2:	f011 0107 	ands.w	r1, r1, #7
 801d4a6:	d120      	bne.n	801d4ea <nema_extend_bound_cl+0xda>
 801d4a8:	691e      	ldr	r6, [r3, #16]
 801d4aa:	3205      	adds	r2, #5
 801d4ac:	42b2      	cmp	r2, r6
 801d4ae:	db23      	blt.n	801d4f8 <nema_extend_bound_cl+0xe8>
 801d4b0:	699a      	ldr	r2, [r3, #24]
 801d4b2:	f022 0220 	bic.w	r2, r2, #32
 801d4b6:	619a      	str	r2, [r3, #24]
 801d4b8:	69a3      	ldr	r3, [r4, #24]
 801d4ba:	075a      	lsls	r2, r3, #29
 801d4bc:	d503      	bpl.n	801d4c6 <nema_extend_bound_cl+0xb6>
 801d4be:	6a24      	ldr	r4, [r4, #32]
 801d4c0:	69a3      	ldr	r3, [r4, #24]
 801d4c2:	075b      	lsls	r3, r3, #29
 801d4c4:	d4fb      	bmi.n	801d4be <nema_extend_bound_cl+0xae>
 801d4c6:	2000      	movs	r0, #0
 801d4c8:	602c      	str	r4, [r5, #0]
 801d4ca:	b01f      	add	sp, #124	; 0x7c
 801d4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d4ce:	2900      	cmp	r1, #0
 801d4d0:	bfb8      	it	lt
 801d4d2:	3103      	addlt	r1, #3
 801d4d4:	1089      	asrs	r1, r1, #2
 801d4d6:	0049      	lsls	r1, r1, #1
 801d4d8:	4291      	cmp	r1, r2
 801d4da:	bfcc      	ite	gt
 801d4dc:	4610      	movgt	r0, r2
 801d4de:	1a50      	suble	r0, r2, r1
 801d4e0:	1a09      	subs	r1, r1, r0
 801d4e2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801d4e6:	1049      	asrs	r1, r1, #1
 801d4e8:	e7a6      	b.n	801d438 <nema_extend_bound_cl+0x28>
 801d4ea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801d4ee:	f7fe fc45 	bl	801bd7c <nema_set_error>
 801d4f2:	2000      	movs	r0, #0
 801d4f4:	b01f      	add	sp, #124	; 0x7c
 801d4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d4f8:	f44f 26a0 	mov.w	r6, #327680	; 0x50000
 801d4fc:	689a      	ldr	r2, [r3, #8]
 801d4fe:	4410      	add	r0, r2
 801d500:	e9c0 6104 	strd	r6, r1, [r0, #16]
 801d504:	699a      	ldr	r2, [r3, #24]
 801d506:	f022 0208 	bic.w	r2, r2, #8
 801d50a:	e7d2      	b.n	801d4b2 <nema_extend_bound_cl+0xa2>
 801d50c:	2028      	movs	r0, #40	; 0x28
 801d50e:	f7e5 ff06 	bl	800331e <nema_host_malloc>
 801d512:	4604      	mov	r4, r0
 801d514:	2800      	cmp	r0, #0
 801d516:	d052      	beq.n	801d5be <nema_extend_bound_cl+0x1ae>
 801d518:	1cb1      	adds	r1, r6, #2
 801d51a:	00c9      	lsls	r1, r1, #3
 801d51c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801d520:	dd1a      	ble.n	801d558 <nema_extend_bound_cl+0x148>
 801d522:	466e      	mov	r6, sp
 801d524:	4627      	mov	r7, r4
 801d526:	4668      	mov	r0, sp
 801d528:	f7ff ff3e 	bl	801d3a8 <nema_cl_create_sized>
 801d52c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d52e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d530:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d532:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d534:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d538:	e887 0003 	stmia.w	r7, {r0, r1}
 801d53c:	68a3      	ldr	r3, [r4, #8]
 801d53e:	2b00      	cmp	r3, #0
 801d540:	d034      	beq.n	801d5ac <nema_extend_bound_cl+0x19c>
 801d542:	682b      	ldr	r3, [r5, #0]
 801d544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d546:	2a00      	cmp	r2, #0
 801d548:	bf08      	it	eq
 801d54a:	461a      	moveq	r2, r3
 801d54c:	6262      	str	r2, [r4, #36]	; 0x24
 801d54e:	699a      	ldr	r2, [r3, #24]
 801d550:	f022 020c 	bic.w	r2, r2, #12
 801d554:	61a2      	str	r2, [r4, #24]
 801d556:	e788      	b.n	801d46a <nema_extend_bound_cl+0x5a>
 801d558:	a80a      	add	r0, sp, #40	; 0x28
 801d55a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d55e:	f7ff ff23 	bl	801d3a8 <nema_cl_create_sized>
 801d562:	2302      	movs	r3, #2
 801d564:	46a4      	mov	ip, r4
 801d566:	9310      	str	r3, [sp, #64]	; 0x40
 801d568:	ae0a      	add	r6, sp, #40	; 0x28
 801d56a:	af14      	add	r7, sp, #80	; 0x50
 801d56c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d56e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d570:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d572:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801d574:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d578:	ae14      	add	r6, sp, #80	; 0x50
 801d57a:	e887 0003 	stmia.w	r7, {r0, r1}
 801d57e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d580:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d584:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d586:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d58a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801d58e:	e88c 0003 	stmia.w	ip, {r0, r1}
 801d592:	e7d3      	b.n	801d53c <nema_extend_bound_cl+0x12c>
 801d594:	2008      	movs	r0, #8
 801d596:	f7fe fbf1 	bl	801bd7c <nema_set_error>
 801d59a:	f04f 30ff 	mov.w	r0, #4294967295
 801d59e:	e7a9      	b.n	801d4f4 <nema_extend_bound_cl+0xe4>
 801d5a0:	2080      	movs	r0, #128	; 0x80
 801d5a2:	f7fe fbeb 	bl	801bd7c <nema_set_error>
 801d5a6:	f04f 30ff 	mov.w	r0, #4294967295
 801d5aa:	e7a3      	b.n	801d4f4 <nema_extend_bound_cl+0xe4>
 801d5ac:	2010      	movs	r0, #16
 801d5ae:	f7fe fbe5 	bl	801bd7c <nema_set_error>
 801d5b2:	4620      	mov	r0, r4
 801d5b4:	f7e5 fea8 	bl	8003308 <nema_host_free>
 801d5b8:	f04f 30ff 	mov.w	r0, #4294967295
 801d5bc:	e79a      	b.n	801d4f4 <nema_extend_bound_cl+0xe4>
 801d5be:	2010      	movs	r0, #16
 801d5c0:	f7fe fbdc 	bl	801bd7c <nema_set_error>
 801d5c4:	f04f 30ff 	mov.w	r0, #4294967295
 801d5c8:	e794      	b.n	801d4f4 <nema_extend_bound_cl+0xe4>
 801d5ca:	bf00      	nop
 801d5cc:	20197c68 	.word	0x20197c68

0801d5d0 <nema_cl_bind_circular>:
 801d5d0:	b358      	cbz	r0, 801d62a <nema_cl_bind_circular+0x5a>
 801d5d2:	68c3      	ldr	r3, [r0, #12]
 801d5d4:	f013 0207 	ands.w	r2, r3, #7
 801d5d8:	d117      	bne.n	801d60a <nema_cl_bind_circular+0x3a>
 801d5da:	b4f0      	push	{r4, r5, r6, r7}
 801d5dc:	4c15      	ldr	r4, [pc, #84]	; (801d634 <nema_cl_bind_circular+0x64>)
 801d5de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801d5e0:	6821      	ldr	r1, [r4, #0]
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	bf08      	it	eq
 801d5e6:	4603      	moveq	r3, r0
 801d5e8:	b141      	cbz	r1, 801d5fc <nema_cl_bind_circular+0x2c>
 801d5ea:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
 801d5ee:	1c46      	adds	r6, r0, #1
 801d5f0:	42ae      	cmp	r6, r5
 801d5f2:	db0e      	blt.n	801d612 <nema_cl_bind_circular+0x42>
 801d5f4:	698a      	ldr	r2, [r1, #24]
 801d5f6:	f022 0220 	bic.w	r2, r2, #32
 801d5fa:	618a      	str	r2, [r1, #24]
 801d5fc:	699a      	ldr	r2, [r3, #24]
 801d5fe:	6023      	str	r3, [r4, #0]
 801d600:	f042 0220 	orr.w	r2, r2, #32
 801d604:	619a      	str	r2, [r3, #24]
 801d606:	bcf0      	pop	{r4, r5, r6, r7}
 801d608:	4770      	bx	lr
 801d60a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801d60e:	f7fe bbb5 	b.w	801bd7c <nema_set_error>
 801d612:	f44f 27a0 	mov.w	r7, #327680	; 0x50000
 801d616:	688d      	ldr	r5, [r1, #8]
 801d618:	eb05 0680 	add.w	r6, r5, r0, lsl #2
 801d61c:	f845 7020 	str.w	r7, [r5, r0, lsl #2]
 801d620:	6072      	str	r2, [r6, #4]
 801d622:	698a      	ldr	r2, [r1, #24]
 801d624:	f022 0208 	bic.w	r2, r2, #8
 801d628:	e7e5      	b.n	801d5f6 <nema_cl_bind_circular+0x26>
 801d62a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801d62e:	f7fe bba5 	b.w	801bd7c <nema_set_error>
 801d632:	bf00      	nop
 801d634:	20197c68 	.word	0x20197c68

0801d638 <nema_cl_unbind>:
 801d638:	4910      	ldr	r1, [pc, #64]	; (801d67c <nema_cl_unbind+0x44>)
 801d63a:	680b      	ldr	r3, [r1, #0]
 801d63c:	b1d3      	cbz	r3, 801d674 <nema_cl_unbind+0x3c>
 801d63e:	b430      	push	{r4, r5}
 801d640:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 801d644:	1c54      	adds	r4, r2, #1
 801d646:	4284      	cmp	r4, r0
 801d648:	db07      	blt.n	801d65a <nema_cl_unbind+0x22>
 801d64a:	699a      	ldr	r2, [r3, #24]
 801d64c:	f022 0220 	bic.w	r2, r2, #32
 801d650:	619a      	str	r2, [r3, #24]
 801d652:	2300      	movs	r3, #0
 801d654:	600b      	str	r3, [r1, #0]
 801d656:	bc30      	pop	{r4, r5}
 801d658:	4770      	bx	lr
 801d65a:	f44f 25a0 	mov.w	r5, #327680	; 0x50000
 801d65e:	2400      	movs	r4, #0
 801d660:	6898      	ldr	r0, [r3, #8]
 801d662:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
 801d666:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801d66a:	6054      	str	r4, [r2, #4]
 801d66c:	699a      	ldr	r2, [r3, #24]
 801d66e:	f022 0208 	bic.w	r2, r2, #8
 801d672:	e7eb      	b.n	801d64c <nema_cl_unbind+0x14>
 801d674:	2300      	movs	r3, #0
 801d676:	600b      	str	r3, [r1, #0]
 801d678:	4770      	bx	lr
 801d67a:	bf00      	nop
 801d67c:	20197c68 	.word	0x20197c68

0801d680 <nema_cl_submit_no_irq>:
 801d680:	2800      	cmp	r0, #0
 801d682:	d059      	beq.n	801d738 <nema_cl_submit_no_irq+0xb8>
 801d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d686:	6983      	ldr	r3, [r0, #24]
 801d688:	4605      	mov	r5, r0
 801d68a:	069c      	lsls	r4, r3, #26
 801d68c:	d429      	bmi.n	801d6e2 <nema_cl_submit_no_irq+0x62>
 801d68e:	4604      	mov	r4, r0
 801d690:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 801d694:	e012      	b.n	801d6bc <nema_cl_submit_no_irq+0x3c>
 801d696:	6923      	ldr	r3, [r4, #16]
 801d698:	6949      	ldr	r1, [r1, #20]
 801d69a:	4433      	add	r3, r6
 801d69c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801d6a0:	69a3      	ldr	r3, [r4, #24]
 801d6a2:	4620      	mov	r0, r4
 801d6a4:	f023 0308 	bic.w	r3, r3, #8
 801d6a8:	61a3      	str	r3, [r4, #24]
 801d6aa:	f7e5 feb2 	bl	8003412 <nema_buffer_flush>
 801d6ae:	69a3      	ldr	r3, [r4, #24]
 801d6b0:	f043 0308 	orr.w	r3, r3, #8
 801d6b4:	61a3      	str	r3, [r4, #24]
 801d6b6:	6a24      	ldr	r4, [r4, #32]
 801d6b8:	b134      	cbz	r4, 801d6c8 <nema_cl_submit_no_irq+0x48>
 801d6ba:	69a3      	ldr	r3, [r4, #24]
 801d6bc:	0758      	lsls	r0, r3, #29
 801d6be:	68a2      	ldr	r2, [r4, #8]
 801d6c0:	6a21      	ldr	r1, [r4, #32]
 801d6c2:	d4e8      	bmi.n	801d696 <nema_cl_submit_no_irq+0x16>
 801d6c4:	071b      	lsls	r3, r3, #28
 801d6c6:	d52a      	bpl.n	801d71e <nema_cl_submit_no_irq+0x9e>
 801d6c8:	2000      	movs	r0, #0
 801d6ca:	f7e5 feac 	bl	8003426 <nema_mutex_lock>
 801d6ce:	6969      	ldr	r1, [r5, #20]
 801d6d0:	4628      	mov	r0, r5
 801d6d2:	f7fe f9c3 	bl	801ba5c <nema_rb_submit_cmdlist>
 801d6d6:	61e8      	str	r0, [r5, #28]
 801d6d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801d6dc:	2000      	movs	r0, #0
 801d6de:	f7e5 beaf 	b.w	8003440 <nema_mutex_unlock>
 801d6e2:	6903      	ldr	r3, [r0, #16]
 801d6e4:	6946      	ldr	r6, [r0, #20]
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	bfb8      	it	lt
 801d6ea:	3303      	addlt	r3, #3
 801d6ec:	109b      	asrs	r3, r3, #2
 801d6ee:	005c      	lsls	r4, r3, #1
 801d6f0:	68c7      	ldr	r7, [r0, #12]
 801d6f2:	69c0      	ldr	r0, [r0, #28]
 801d6f4:	42a6      	cmp	r6, r4
 801d6f6:	bfa4      	itt	ge
 801d6f8:	1b36      	subge	r6, r6, r4
 801d6fa:	eb07 07c3 	addge.w	r7, r7, r3, lsl #3
 801d6fe:	2800      	cmp	r0, #0
 801d700:	da15      	bge.n	801d72e <nema_cl_submit_no_irq+0xae>
 801d702:	f04f 33ff 	mov.w	r3, #4294967295
 801d706:	61eb      	str	r3, [r5, #28]
 801d708:	4631      	mov	r1, r6
 801d70a:	4638      	mov	r0, r7
 801d70c:	f7fe f922 	bl	801b954 <nema_rb_submit_cmdlist2>
 801d710:	696b      	ldr	r3, [r5, #20]
 801d712:	61e8      	str	r0, [r5, #28]
 801d714:	42a3      	cmp	r3, r4
 801d716:	bfa8      	it	ge
 801d718:	2400      	movge	r4, #0
 801d71a:	616c      	str	r4, [r5, #20]
 801d71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d71e:	4620      	mov	r0, r4
 801d720:	f7e5 fe77 	bl	8003412 <nema_buffer_flush>
 801d724:	69a3      	ldr	r3, [r4, #24]
 801d726:	f043 0308 	orr.w	r3, r3, #8
 801d72a:	61a3      	str	r3, [r4, #24]
 801d72c:	e7cc      	b.n	801d6c8 <nema_cl_submit_no_irq+0x48>
 801d72e:	f7e5 fdd7 	bl	80032e0 <nema_wait_irq_cl>
 801d732:	2800      	cmp	r0, #0
 801d734:	dae5      	bge.n	801d702 <nema_cl_submit_no_irq+0x82>
 801d736:	e7e7      	b.n	801d708 <nema_cl_submit_no_irq+0x88>
 801d738:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801d73c:	f7fe bb1e 	b.w	801bd7c <nema_set_error>

0801d740 <nema_cl_get_space>:
 801d740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d742:	4e2d      	ldr	r6, [pc, #180]	; (801d7f8 <nema_cl_get_space+0xb8>)
 801d744:	6834      	ldr	r4, [r6, #0]
 801d746:	2c00      	cmp	r4, #0
 801d748:	d039      	beq.n	801d7be <nema_cl_get_space+0x7e>
 801d74a:	69a7      	ldr	r7, [r4, #24]
 801d74c:	4605      	mov	r5, r0
 801d74e:	f027 0208 	bic.w	r2, r7, #8
 801d752:	f017 0720 	ands.w	r7, r7, #32
 801d756:	61a2      	str	r2, [r4, #24]
 801d758:	6923      	ldr	r3, [r4, #16]
 801d75a:	6962      	ldr	r2, [r4, #20]
 801d75c:	d016      	beq.n	801d78c <nema_cl_get_space+0x4c>
 801d75e:	2b00      	cmp	r3, #0
 801d760:	bfb8      	it	lt
 801d762:	3303      	addlt	r3, #3
 801d764:	109b      	asrs	r3, r3, #2
 801d766:	005b      	lsls	r3, r3, #1
 801d768:	4293      	cmp	r3, r2
 801d76a:	bfcc      	ite	gt
 801d76c:	4611      	movgt	r1, r2
 801d76e:	1ad1      	suble	r1, r2, r3
 801d770:	1a5b      	subs	r3, r3, r1
 801d772:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801d776:	1c41      	adds	r1, r0, #1
 801d778:	ebb1 0f63 	cmp.w	r1, r3, asr #1
 801d77c:	da1a      	bge.n	801d7b4 <nema_cl_get_space+0x74>
 801d77e:	68a0      	ldr	r0, [r4, #8]
 801d780:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801d784:	6165      	str	r5, [r4, #20]
 801d786:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801d78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d78c:	1a9b      	subs	r3, r3, r2
 801d78e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801d792:	105b      	asrs	r3, r3, #1
 801d794:	3b01      	subs	r3, #1
 801d796:	4283      	cmp	r3, r0
 801d798:	dcf1      	bgt.n	801d77e <nema_cl_get_space+0x3e>
 801d79a:	f7ff fe39 	bl	801d410 <nema_extend_bound_cl>
 801d79e:	2800      	cmp	r0, #0
 801d7a0:	db27      	blt.n	801d7f2 <nema_cl_get_space+0xb2>
 801d7a2:	6834      	ldr	r4, [r6, #0]
 801d7a4:	6962      	ldr	r2, [r4, #20]
 801d7a6:	68a0      	ldr	r0, [r4, #8]
 801d7a8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801d7ac:	6165      	str	r5, [r4, #20]
 801d7ae:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801d7b2:	e7ea      	b.n	801d78a <nema_cl_get_space+0x4a>
 801d7b4:	b942      	cbnz	r2, 801d7c8 <nema_cl_get_space+0x88>
 801d7b6:	f04f 33ff 	mov.w	r3, #4294967295
 801d7ba:	61e3      	str	r3, [r4, #28]
 801d7bc:	e7df      	b.n	801d77e <nema_cl_get_space+0x3e>
 801d7be:	2080      	movs	r0, #128	; 0x80
 801d7c0:	f7fe fadc 	bl	801bd7c <nema_set_error>
 801d7c4:	4620      	mov	r0, r4
 801d7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d7c8:	4620      	mov	r0, r4
 801d7ca:	f7ff ff59 	bl	801d680 <nema_cl_submit_no_irq>
 801d7ce:	69e0      	ldr	r0, [r4, #28]
 801d7d0:	f7fe fa10 	bl	801bbf4 <nema_rb_submit_cl_id>
 801d7d4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801d7d8:	69e0      	ldr	r0, [r4, #28]
 801d7da:	4298      	cmp	r0, r3
 801d7dc:	d1e1      	bne.n	801d7a2 <nema_cl_get_space+0x62>
 801d7de:	f7e5 fd7f 	bl	80032e0 <nema_wait_irq_cl>
 801d7e2:	2800      	cmp	r0, #0
 801d7e4:	dbdd      	blt.n	801d7a2 <nema_cl_get_space+0x62>
 801d7e6:	f04f 33ff 	mov.w	r3, #4294967295
 801d7ea:	61e3      	str	r3, [r4, #28]
 801d7ec:	6834      	ldr	r4, [r6, #0]
 801d7ee:	6962      	ldr	r2, [r4, #20]
 801d7f0:	e7c5      	b.n	801d77e <nema_cl_get_space+0x3e>
 801d7f2:	4638      	mov	r0, r7
 801d7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d7f6:	bf00      	nop
 801d7f8:	20197c68 	.word	0x20197c68

0801d7fc <nema_cl_add_cmd>:
 801d7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d800:	4e30      	ldr	r6, [pc, #192]	; (801d8c4 <nema_cl_add_cmd+0xc8>)
 801d802:	4607      	mov	r7, r0
 801d804:	6834      	ldr	r4, [r6, #0]
 801d806:	4688      	mov	r8, r1
 801d808:	b35c      	cbz	r4, 801d862 <nema_cl_add_cmd+0x66>
 801d80a:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 801d80e:	f025 0308 	bic.w	r3, r5, #8
 801d812:	f015 0020 	ands.w	r0, r5, #32
 801d816:	61a3      	str	r3, [r4, #24]
 801d818:	6923      	ldr	r3, [r4, #16]
 801d81a:	d016      	beq.n	801d84a <nema_cl_add_cmd+0x4e>
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	bfb8      	it	lt
 801d820:	3303      	addlt	r3, #3
 801d822:	109b      	asrs	r3, r3, #2
 801d824:	005b      	lsls	r3, r3, #1
 801d826:	4293      	cmp	r3, r2
 801d828:	bfcc      	ite	gt
 801d82a:	4611      	movgt	r1, r2
 801d82c:	1ad1      	suble	r1, r2, r3
 801d82e:	1a5b      	subs	r3, r3, r1
 801d830:	2b03      	cmp	r3, #3
 801d832:	dd2a      	ble.n	801d88a <nema_cl_add_cmd+0x8e>
 801d834:	1c51      	adds	r1, r2, #1
 801d836:	68a0      	ldr	r0, [r4, #8]
 801d838:	1c93      	adds	r3, r2, #2
 801d83a:	f840 7022 	str.w	r7, [r0, r2, lsl #2]
 801d83e:	68a2      	ldr	r2, [r4, #8]
 801d840:	f842 8021 	str.w	r8, [r2, r1, lsl #2]
 801d844:	6163      	str	r3, [r4, #20]
 801d846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d84a:	07a9      	lsls	r1, r5, #30
 801d84c:	d515      	bpl.n	801d87a <nema_cl_add_cmd+0x7e>
 801d84e:	1d11      	adds	r1, r2, #4
 801d850:	4299      	cmp	r1, r3
 801d852:	dbef      	blt.n	801d834 <nema_cl_add_cmd+0x38>
 801d854:	f7ff fddc 	bl	801d410 <nema_extend_bound_cl>
 801d858:	2800      	cmp	r0, #0
 801d85a:	dbf4      	blt.n	801d846 <nema_cl_add_cmd+0x4a>
 801d85c:	6834      	ldr	r4, [r6, #0]
 801d85e:	6962      	ldr	r2, [r4, #20]
 801d860:	e7e8      	b.n	801d834 <nema_cl_add_cmd+0x38>
 801d862:	4620      	mov	r0, r4
 801d864:	f7e5 fddf 	bl	8003426 <nema_mutex_lock>
 801d868:	4638      	mov	r0, r7
 801d86a:	4641      	mov	r1, r8
 801d86c:	f7fe f8fa 	bl	801ba64 <nema_rb_inline_cmd>
 801d870:	4620      	mov	r0, r4
 801d872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d876:	f7e5 bde3 	b.w	8003440 <nema_mutex_unlock>
 801d87a:	1c51      	adds	r1, r2, #1
 801d87c:	4299      	cmp	r1, r3
 801d87e:	dbda      	blt.n	801d836 <nema_cl_add_cmd+0x3a>
 801d880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d884:	2008      	movs	r0, #8
 801d886:	f7fe ba79 	b.w	801bd7c <nema_set_error>
 801d88a:	b922      	cbnz	r2, 801d896 <nema_cl_add_cmd+0x9a>
 801d88c:	f04f 33ff 	mov.w	r3, #4294967295
 801d890:	2101      	movs	r1, #1
 801d892:	61e3      	str	r3, [r4, #28]
 801d894:	e7cf      	b.n	801d836 <nema_cl_add_cmd+0x3a>
 801d896:	4620      	mov	r0, r4
 801d898:	f7ff fef2 	bl	801d680 <nema_cl_submit_no_irq>
 801d89c:	69e0      	ldr	r0, [r4, #28]
 801d89e:	f7fe f9a9 	bl	801bbf4 <nema_rb_submit_cl_id>
 801d8a2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801d8a6:	69e0      	ldr	r0, [r4, #28]
 801d8a8:	4298      	cmp	r0, r3
 801d8aa:	d1d7      	bne.n	801d85c <nema_cl_add_cmd+0x60>
 801d8ac:	f7e5 fd18 	bl	80032e0 <nema_wait_irq_cl>
 801d8b0:	2800      	cmp	r0, #0
 801d8b2:	dbd3      	blt.n	801d85c <nema_cl_add_cmd+0x60>
 801d8b4:	f04f 33ff 	mov.w	r3, #4294967295
 801d8b8:	61e3      	str	r3, [r4, #28]
 801d8ba:	6834      	ldr	r4, [r6, #0]
 801d8bc:	6962      	ldr	r2, [r4, #20]
 801d8be:	1c51      	adds	r1, r2, #1
 801d8c0:	e7b9      	b.n	801d836 <nema_cl_add_cmd+0x3a>
 801d8c2:	bf00      	nop
 801d8c4:	20197c68 	.word	0x20197c68

0801d8c8 <nema_cl_submit>:
 801d8c8:	2800      	cmp	r0, #0
 801d8ca:	d05c      	beq.n	801d986 <nema_cl_submit+0xbe>
 801d8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8ce:	6944      	ldr	r4, [r0, #20]
 801d8d0:	4605      	mov	r5, r0
 801d8d2:	b91c      	cbnz	r4, 801d8dc <nema_cl_submit+0x14>
 801d8d4:	f04f 33ff 	mov.w	r3, #4294967295
 801d8d8:	61eb      	str	r3, [r5, #28]
 801d8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d8dc:	6983      	ldr	r3, [r0, #24]
 801d8de:	069e      	lsls	r6, r3, #26
 801d8e0:	d527      	bpl.n	801d932 <nema_cl_submit+0x6a>
 801d8e2:	6903      	ldr	r3, [r0, #16]
 801d8e4:	68c7      	ldr	r7, [r0, #12]
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	bfb8      	it	lt
 801d8ea:	3303      	addlt	r3, #3
 801d8ec:	109b      	asrs	r3, r3, #2
 801d8ee:	005e      	lsls	r6, r3, #1
 801d8f0:	69c0      	ldr	r0, [r0, #28]
 801d8f2:	42b4      	cmp	r4, r6
 801d8f4:	bfa4      	itt	ge
 801d8f6:	1ba4      	subge	r4, r4, r6
 801d8f8:	eb07 07c3 	addge.w	r7, r7, r3, lsl #3
 801d8fc:	2800      	cmp	r0, #0
 801d8fe:	da46      	bge.n	801d98e <nema_cl_submit+0xc6>
 801d900:	f04f 33ff 	mov.w	r3, #4294967295
 801d904:	61eb      	str	r3, [r5, #28]
 801d906:	4621      	mov	r1, r4
 801d908:	4638      	mov	r0, r7
 801d90a:	f7fe f823 	bl	801b954 <nema_rb_submit_cmdlist2>
 801d90e:	696b      	ldr	r3, [r5, #20]
 801d910:	61e8      	str	r0, [r5, #28]
 801d912:	429e      	cmp	r6, r3
 801d914:	bfd8      	it	le
 801d916:	2600      	movle	r6, #0
 801d918:	616e      	str	r6, [r5, #20]
 801d91a:	f7fe f96b 	bl	801bbf4 <nema_rb_submit_cl_id>
 801d91e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801d922:	69e8      	ldr	r0, [r5, #28]
 801d924:	4298      	cmp	r0, r3
 801d926:	d1d8      	bne.n	801d8da <nema_cl_submit+0x12>
 801d928:	f7e5 fcda 	bl	80032e0 <nema_wait_irq_cl>
 801d92c:	2800      	cmp	r0, #0
 801d92e:	dad1      	bge.n	801d8d4 <nema_cl_submit+0xc>
 801d930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d932:	4604      	mov	r4, r0
 801d934:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 801d938:	e012      	b.n	801d960 <nema_cl_submit+0x98>
 801d93a:	6923      	ldr	r3, [r4, #16]
 801d93c:	6949      	ldr	r1, [r1, #20]
 801d93e:	4433      	add	r3, r6
 801d940:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801d944:	69a3      	ldr	r3, [r4, #24]
 801d946:	4620      	mov	r0, r4
 801d948:	f023 0308 	bic.w	r3, r3, #8
 801d94c:	61a3      	str	r3, [r4, #24]
 801d94e:	f7e5 fd60 	bl	8003412 <nema_buffer_flush>
 801d952:	69a3      	ldr	r3, [r4, #24]
 801d954:	f043 0308 	orr.w	r3, r3, #8
 801d958:	61a3      	str	r3, [r4, #24]
 801d95a:	6a24      	ldr	r4, [r4, #32]
 801d95c:	b134      	cbz	r4, 801d96c <nema_cl_submit+0xa4>
 801d95e:	69a3      	ldr	r3, [r4, #24]
 801d960:	0758      	lsls	r0, r3, #29
 801d962:	68a2      	ldr	r2, [r4, #8]
 801d964:	6a21      	ldr	r1, [r4, #32]
 801d966:	d4e8      	bmi.n	801d93a <nema_cl_submit+0x72>
 801d968:	071b      	lsls	r3, r3, #28
 801d96a:	d515      	bpl.n	801d998 <nema_cl_submit+0xd0>
 801d96c:	2000      	movs	r0, #0
 801d96e:	f7e5 fd5a 	bl	8003426 <nema_mutex_lock>
 801d972:	6969      	ldr	r1, [r5, #20]
 801d974:	4628      	mov	r0, r5
 801d976:	f7fe f871 	bl	801ba5c <nema_rb_submit_cmdlist>
 801d97a:	61e8      	str	r0, [r5, #28]
 801d97c:	2000      	movs	r0, #0
 801d97e:	f7e5 fd5f 	bl	8003440 <nema_mutex_unlock>
 801d982:	69e8      	ldr	r0, [r5, #28]
 801d984:	e7c9      	b.n	801d91a <nema_cl_submit+0x52>
 801d986:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801d98a:	f7fe b9f7 	b.w	801bd7c <nema_set_error>
 801d98e:	f7e5 fca7 	bl	80032e0 <nema_wait_irq_cl>
 801d992:	2800      	cmp	r0, #0
 801d994:	dab4      	bge.n	801d900 <nema_cl_submit+0x38>
 801d996:	e7b6      	b.n	801d906 <nema_cl_submit+0x3e>
 801d998:	4620      	mov	r0, r4
 801d99a:	f7e5 fd3a 	bl	8003412 <nema_buffer_flush>
 801d99e:	69a3      	ldr	r3, [r4, #24]
 801d9a0:	f043 0308 	orr.w	r3, r3, #8
 801d9a4:	61a3      	str	r3, [r4, #24]
 801d9a6:	e7e1      	b.n	801d96c <nema_cl_submit+0xa4>

0801d9a8 <nema_cl_wait>:
 801d9a8:	b510      	push	{r4, lr}
 801d9aa:	b170      	cbz	r0, 801d9ca <nema_cl_wait+0x22>
 801d9ac:	4604      	mov	r4, r0
 801d9ae:	69c0      	ldr	r0, [r0, #28]
 801d9b0:	2800      	cmp	r0, #0
 801d9b2:	da04      	bge.n	801d9be <nema_cl_wait+0x16>
 801d9b4:	f04f 33ff 	mov.w	r3, #4294967295
 801d9b8:	61e3      	str	r3, [r4, #28]
 801d9ba:	2000      	movs	r0, #0
 801d9bc:	bd10      	pop	{r4, pc}
 801d9be:	f7e5 fc8f 	bl	80032e0 <nema_wait_irq_cl>
 801d9c2:	2800      	cmp	r0, #0
 801d9c4:	daf6      	bge.n	801d9b4 <nema_cl_wait+0xc>
 801d9c6:	2000      	movs	r0, #0
 801d9c8:	bd10      	pop	{r4, pc}
 801d9ca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801d9ce:	f7fe f9d5 	bl	801bd7c <nema_set_error>
 801d9d2:	f04f 30ff 	mov.w	r0, #4294967295
 801d9d6:	bd10      	pop	{r4, pc}

0801d9d8 <nema_blender_init>:
 801d9d8:	b530      	push	{r4, r5, lr}
 801d9da:	b085      	sub	sp, #20
 801d9dc:	466d      	mov	r5, sp
 801d9de:	2418      	movs	r4, #24
 801d9e0:	4b11      	ldr	r3, [pc, #68]	; (801da28 <nema_blender_init+0x50>)
 801d9e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d9e4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801d9e8:	2101      	movs	r1, #1
 801d9ea:	4622      	mov	r2, r4
 801d9ec:	4628      	mov	r0, r5
 801d9ee:	440c      	add	r4, r1
 801d9f0:	f7ff f974 	bl	801ccdc <nema_load_frag_shader>
 801d9f4:	2c1f      	cmp	r4, #31
 801d9f6:	d1f7      	bne.n	801d9e8 <nema_blender_init+0x10>
 801d9f8:	4622      	mov	r2, r4
 801d9fa:	2101      	movs	r1, #1
 801d9fc:	a802      	add	r0, sp, #8
 801d9fe:	f7ff f96d 	bl	801ccdc <nema_load_frag_shader>
 801da02:	f7ff f829 	bl	801ca58 <nema_readHwConfig>
 801da06:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 801da0a:	2800      	cmp	r0, #0
 801da0c:	bf14      	ite	ne
 801da0e:	2201      	movne	r2, #1
 801da10:	2200      	moveq	r2, #0
 801da12:	4b06      	ldr	r3, [pc, #24]	; (801da2c <nema_blender_init+0x54>)
 801da14:	701a      	strb	r2, [r3, #0]
 801da16:	d005      	beq.n	801da24 <nema_blender_init+0x4c>
 801da18:	2200      	movs	r2, #0
 801da1a:	4b05      	ldr	r3, [pc, #20]	; (801da30 <nema_blender_init+0x58>)
 801da1c:	2001      	movs	r0, #1
 801da1e:	601a      	str	r2, [r3, #0]
 801da20:	f7ff f97c 	bl	801cd1c <nema_set_rop_blend_mode>
 801da24:	b005      	add	sp, #20
 801da26:	bd30      	pop	{r4, r5, pc}
 801da28:	0802a90c 	.word	0x0802a90c
 801da2c:	20197c6d 	.word	0x20197c6d
 801da30:	20000064 	.word	0x20000064

0801da34 <nema_set_blend>:
 801da34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da38:	4ca5      	ldr	r4, [pc, #660]	; (801dcd0 <nema_set_blend+0x29c>)
 801da3a:	4683      	mov	fp, r0
 801da3c:	7820      	ldrb	r0, [r4, #0]
 801da3e:	b0a7      	sub	sp, #156	; 0x9c
 801da40:	9102      	str	r1, [sp, #8]
 801da42:	9200      	str	r2, [sp, #0]
 801da44:	2800      	cmp	r0, #0
 801da46:	f040 8233 	bne.w	801deb0 <nema_set_blend+0x47c>
 801da4a:	469a      	mov	sl, r3
 801da4c:	465c      	mov	r4, fp
 801da4e:	ea4f 535b 	mov.w	r3, fp, lsr #21
 801da52:	055b      	lsls	r3, r3, #21
 801da54:	930e      	str	r3, [sp, #56]	; 0x38
 801da56:	f40b 0300 	and.w	r3, fp, #8388608	; 0x800000
 801da5a:	930c      	str	r3, [sp, #48]	; 0x30
 801da5c:	f40b 0380 	and.w	r3, fp, #4194304	; 0x400000
 801da60:	f00b 010f 	and.w	r1, fp, #15
 801da64:	930d      	str	r3, [sp, #52]	; 0x34
 801da66:	f40b 1300 	and.w	r3, fp, #2097152	; 0x200000
 801da6a:	930b      	str	r3, [sp, #44]	; 0x2c
 801da6c:	9101      	str	r1, [sp, #4]
 801da6e:	b2d2      	uxtb	r2, r2
 801da70:	fa5f f38a 	uxtb.w	r3, sl
 801da74:	f3cb 2903 	ubfx	r9, fp, #8, #4
 801da78:	f00b 7100 	and.w	r1, fp, #33554432	; 0x2000000
 801da7c:	f3cb 6840 	ubfx	r8, fp, #25, #1
 801da80:	9d02      	ldr	r5, [sp, #8]
 801da82:	b2e8      	uxtb	r0, r5
 801da84:	2804      	cmp	r0, #4
 801da86:	4628      	mov	r0, r5
 801da88:	bf28      	it	cs
 801da8a:	2000      	movcs	r0, #0
 801da8c:	2a04      	cmp	r2, #4
 801da8e:	9a00      	ldr	r2, [sp, #0]
 801da90:	bf28      	it	cs
 801da92:	f04f 32ff 	movcs.w	r2, #4294967295
 801da96:	2b04      	cmp	r3, #4
 801da98:	9002      	str	r0, [sp, #8]
 801da9a:	9200      	str	r2, [sp, #0]
 801da9c:	bf28      	it	cs
 801da9e:	4682      	movcs	sl, r0
 801daa0:	4602      	mov	r2, r0
 801daa2:	bf34      	ite	cc
 801daa4:	4650      	movcc	r0, sl
 801daa6:	2002      	movcs	r0, #2
 801daa8:	4b8a      	ldr	r3, [pc, #552]	; (801dcd4 <nema_set_blend+0x2a0>)
 801daaa:	9010      	str	r0, [sp, #64]	; 0x40
 801daac:	781b      	ldrb	r3, [r3, #0]
 801daae:	b14b      	cbz	r3, 801dac4 <nema_set_blend+0x90>
 801dab0:	f01b 7380 	ands.w	r3, fp, #16777216	; 0x1000000
 801dab4:	9303      	str	r3, [sp, #12]
 801dab6:	d102      	bne.n	801dabe <nema_set_blend+0x8a>
 801dab8:	4552      	cmp	r2, sl
 801daba:	f000 830c 	beq.w	801e0d6 <nema_set_blend+0x6a2>
 801dabe:	2001      	movs	r0, #1
 801dac0:	f7ff f92c 	bl	801cd1c <nema_set_rop_blend_mode>
 801dac4:	2c00      	cmp	r4, #0
 801dac6:	bfac      	ite	ge
 801dac8:	4642      	movge	r2, r8
 801daca:	2201      	movlt	r2, #1
 801dacc:	4b82      	ldr	r3, [pc, #520]	; (801dcd8 <nema_set_blend+0x2a4>)
 801dace:	f1bb 0f01 	cmp.w	fp, #1
 801dad2:	789b      	ldrb	r3, [r3, #2]
 801dad4:	9207      	str	r2, [sp, #28]
 801dad6:	9305      	str	r3, [sp, #20]
 801dad8:	f000 80e0 	beq.w	801dc9c <nema_set_blend+0x268>
 801dadc:	f00b 4380 	and.w	r3, fp, #1073741824	; 0x40000000
 801dae0:	9315      	str	r3, [sp, #84]	; 0x54
 801dae2:	f3cb 7380 	ubfx	r3, fp, #30, #1
 801dae6:	9306      	str	r3, [sp, #24]
 801dae8:	f00b 5300 	and.w	r3, fp, #536870912	; 0x20000000
 801daec:	9309      	str	r3, [sp, #36]	; 0x24
 801daee:	9b01      	ldr	r3, [sp, #4]
 801daf0:	f00b 5280 	and.w	r2, fp, #268435456	; 0x10000000
 801daf4:	2b05      	cmp	r3, #5
 801daf6:	f240 80df 	bls.w	801dcb8 <nema_set_blend+0x284>
 801dafa:	2301      	movs	r3, #1
 801dafc:	930a      	str	r3, [sp, #40]	; 0x28
 801dafe:	9304      	str	r3, [sp, #16]
 801db00:	2303      	movs	r3, #3
 801db02:	4976      	ldr	r1, [pc, #472]	; (801dcdc <nema_set_blend+0x2a8>)
 801db04:	9303      	str	r3, [sp, #12]
 801db06:	9108      	str	r1, [sp, #32]
 801db08:	4d75      	ldr	r5, [pc, #468]	; (801dce0 <nema_set_blend+0x2ac>)
 801db0a:	2a00      	cmp	r2, #0
 801db0c:	4b75      	ldr	r3, [pc, #468]	; (801dce4 <nema_set_blend+0x2b0>)
 801db0e:	bf18      	it	ne
 801db10:	462b      	movne	r3, r5
 801db12:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 801db16:	f105 0502 	add.w	r5, r5, #2
 801db1a:	9312      	str	r3, [sp, #72]	; 0x48
 801db1c:	4b72      	ldr	r3, [pc, #456]	; (801dce8 <nema_set_blend+0x2b4>)
 801db1e:	bf08      	it	eq
 801db20:	462b      	moveq	r3, r5
 801db22:	f8df e20c 	ldr.w	lr, [pc, #524]	; 801dd30 <nema_set_blend+0x2fc>
 801db26:	f8df c20c 	ldr.w	ip, [pc, #524]	; 801dd34 <nema_set_blend+0x300>
 801db2a:	9311      	str	r3, [sp, #68]	; 0x44
 801db2c:	bf14      	ite	ne
 801db2e:	4673      	movne	r3, lr
 801db30:	4663      	moveq	r3, ip
 801db32:	4f6e      	ldr	r7, [pc, #440]	; (801dcec <nema_set_blend+0x2b8>)
 801db34:	9314      	str	r3, [sp, #80]	; 0x50
 801db36:	4b6e      	ldr	r3, [pc, #440]	; (801dcf0 <nema_set_blend+0x2bc>)
 801db38:	bf18      	it	ne
 801db3a:	463b      	movne	r3, r7
 801db3c:	f5a5 25c8 	sub.w	r5, r5, #409600	; 0x64000
 801db40:	9313      	str	r3, [sp, #76]	; 0x4c
 801db42:	4b6c      	ldr	r3, [pc, #432]	; (801dcf4 <nema_set_blend+0x2c0>)
 801db44:	f1a5 0542 	sub.w	r5, r5, #66	; 0x42
 801db48:	496b      	ldr	r1, [pc, #428]	; (801dcf8 <nema_set_blend+0x2c4>)
 801db4a:	bf18      	it	ne
 801db4c:	4619      	movne	r1, r3
 801db4e:	f1a3 033e 	sub.w	r3, r3, #62	; 0x3e
 801db52:	bf18      	it	ne
 801db54:	462b      	movne	r3, r5
 801db56:	4e69      	ldr	r6, [pc, #420]	; (801dcfc <nema_set_blend+0x2c8>)
 801db58:	4f69      	ldr	r7, [pc, #420]	; (801dd00 <nema_set_blend+0x2cc>)
 801db5a:	461d      	mov	r5, r3
 801db5c:	4b69      	ldr	r3, [pc, #420]	; (801dd04 <nema_set_blend+0x2d0>)
 801db5e:	486a      	ldr	r0, [pc, #424]	; (801dd08 <nema_set_blend+0x2d4>)
 801db60:	bf18      	it	ne
 801db62:	4630      	movne	r0, r6
 801db64:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 801db68:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 801dd38 <nema_set_blend+0x304>
 801db6c:	f506 3650 	add.w	r6, r6, #212992	; 0x34000
 801db70:	bf04      	itt	eq
 801db72:	46bc      	moveq	ip, r7
 801db74:	461e      	moveq	r6, r3
 801db76:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 801db7a:	f1a3 0340 	sub.w	r3, r3, #64	; 0x40
 801db7e:	f1a7 0742 	sub.w	r7, r7, #66	; 0x42
 801db82:	bf08      	it	eq
 801db84:	461f      	moveq	r7, r3
 801db86:	4c61      	ldr	r4, [pc, #388]	; (801dd0c <nema_set_blend+0x2d8>)
 801db88:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 801dd3c <nema_set_blend+0x308>
 801db8c:	4a60      	ldr	r2, [pc, #384]	; (801dd10 <nema_set_blend+0x2dc>)
 801db8e:	bf18      	it	ne
 801db90:	4622      	movne	r2, r4
 801db92:	f504 3450 	add.w	r4, r4, #212992	; 0x34000
 801db96:	bf08      	it	eq
 801db98:	4674      	moveq	r4, lr
 801db9a:	f8dd e018 	ldr.w	lr, [sp, #24]
 801db9e:	f1b8 0f00 	cmp.w	r8, #0
 801dba2:	f040 8109 	bne.w	801ddb8 <nema_set_blend+0x384>
 801dba6:	9b07      	ldr	r3, [sp, #28]
 801dba8:	2b00      	cmp	r3, #0
 801dbaa:	bf0c      	ite	eq
 801dbac:	2300      	moveq	r3, #0
 801dbae:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 801dbb2:	930f      	str	r3, [sp, #60]	; 0x3c
 801dbb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbb6:	2b00      	cmp	r3, #0
 801dbb8:	f040 8105 	bne.w	801ddc6 <nema_set_blend+0x392>
 801dbbc:	f01b 6f80 	tst.w	fp, #67108864	; 0x4000000
 801dbc0:	f000 81b4 	beq.w	801df2c <nema_set_blend+0x4f8>
 801dbc4:	4684      	mov	ip, r0
 801dbc6:	460e      	mov	r6, r1
 801dbc8:	4614      	mov	r4, r2
 801dbca:	462f      	mov	r7, r5
 801dbcc:	f04f 0804 	mov.w	r8, #4
 801dbd0:	2200      	movs	r2, #0
 801dbd2:	4850      	ldr	r0, [pc, #320]	; (801dd14 <nema_set_blend+0x2e0>)
 801dbd4:	f00b 53c0 	and.w	r3, fp, #402653184	; 0x18000000
 801dbd8:	4293      	cmp	r3, r2
 801dbda:	f850 302a 	ldr.w	r3, [r0, sl, lsl #2]
 801dbde:	bf18      	it	ne
 801dbe0:	463e      	movne	r6, r7
 801dbe2:	9309      	str	r3, [sp, #36]	; 0x24
 801dbe4:	9b05      	ldr	r3, [sp, #20]
 801dbe6:	bf16      	itet	ne
 801dbe8:	46a4      	movne	ip, r4
 801dbea:	270e      	moveq	r7, #14
 801dbec:	270c      	movne	r7, #12
 801dbee:	9216      	str	r2, [sp, #88]	; 0x58
 801dbf0:	2b00      	cmp	r3, #0
 801dbf2:	f000 80eb 	beq.w	801ddcc <nema_set_blend+0x398>
 801dbf6:	4b48      	ldr	r3, [pc, #288]	; (801dd18 <nema_set_blend+0x2e4>)
 801dbf8:	4948      	ldr	r1, [pc, #288]	; (801dd1c <nema_set_blend+0x2e8>)
 801dbfa:	9800      	ldr	r0, [sp, #0]
 801dbfc:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
 801dc00:	1c43      	adds	r3, r0, #1
 801dc02:	f000 8257 	beq.w	801e0b4 <nema_set_blend+0x680>
 801dc06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801dc0a:	4b45      	ldr	r3, [pc, #276]	; (801dd20 <nema_set_blend+0x2ec>)
 801dc0c:	9204      	str	r2, [sp, #16]
 801dc0e:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801dc12:	e9cd 3118 	strd	r3, r1, [sp, #96]	; 0x60
 801dc16:	2203      	movs	r2, #3
 801dc18:	2102      	movs	r1, #2
 801dc1a:	4c42      	ldr	r4, [pc, #264]	; (801dd24 <nema_set_blend+0x2f0>)
 801dc1c:	f1b9 0f01 	cmp.w	r9, #1
 801dc20:	f240 8110 	bls.w	801de44 <nema_set_blend+0x410>
 801dc24:	9b01      	ldr	r3, [sp, #4]
 801dc26:	2b05      	cmp	r3, #5
 801dc28:	d803      	bhi.n	801dc32 <nema_set_blend+0x1fe>
 801dc2a:	f01b 5f70 	tst.w	fp, #1006632960	; 0x3c000000
 801dc2e:	f000 8087 	beq.w	801dd40 <nema_set_blend+0x30c>
 801dc32:	9b03      	ldr	r3, [sp, #12]
 801dc34:	b933      	cbnz	r3, 801dc44 <nema_set_blend+0x210>
 801dc36:	f1b9 0f00 	cmp.w	r9, #0
 801dc3a:	d103      	bne.n	801dc44 <nema_set_blend+0x210>
 801dc3c:	9b07      	ldr	r3, [sp, #28]
 801dc3e:	2b00      	cmp	r3, #0
 801dc40:	f000 81ca 	beq.w	801dfd8 <nema_set_blend+0x5a4>
 801dc44:	f1b8 0f1d 	cmp.w	r8, #29
 801dc48:	f000 8150 	beq.w	801deec <nema_set_blend+0x4b8>
 801dc4c:	4b36      	ldr	r3, [pc, #216]	; (801dd28 <nema_set_blend+0x2f4>)
 801dc4e:	a826      	add	r0, sp, #152	; 0x98
 801dc50:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801dc54:	ea43 13ca 	orr.w	r3, r3, sl, lsl #7
 801dc58:	9803      	ldr	r0, [sp, #12]
 801dc5a:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 801dc5e:	4303      	orrs	r3, r0
 801dc60:	e941 3c10 	strd	r3, ip, [r1, #-64]	; 0x40
 801dc64:	1c55      	adds	r5, r2, #1
 801dc66:	f1b9 0f00 	cmp.w	r9, #0
 801dc6a:	f040 8150 	bne.w	801df0e <nema_set_blend+0x4da>
 801dc6e:	46ce      	mov	lr, r9
 801dc70:	4b2d      	ldr	r3, [pc, #180]	; (801dd28 <nema_set_blend+0x2f4>)
 801dc72:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801dc76:	f8cd 9018 	str.w	r9, [sp, #24]
 801dc7a:	9308      	str	r3, [sp, #32]
 801dc7c:	9b07      	ldr	r3, [sp, #28]
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	d163      	bne.n	801dd4a <nema_set_blend+0x316>
 801dc82:	4b2a      	ldr	r3, [pc, #168]	; (801dd2c <nema_set_blend+0x2f8>)
 801dc84:	f8dd a008 	ldr.w	sl, [sp, #8]
 801dc88:	9308      	str	r3, [sp, #32]
 801dc8a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801dc8e:	9f01      	ldr	r7, [sp, #4]
 801dc90:	e061      	b.n	801dd56 <nema_set_blend+0x322>
 801dc92:	f04f 0900 	mov.w	r9, #0
 801dc96:	46c8      	mov	r8, r9
 801dc98:	f8cd 901c 	str.w	r9, [sp, #28]
 801dc9c:	2b00      	cmp	r3, #0
 801dc9e:	f000 8153 	beq.w	801df48 <nema_set_blend+0x514>
 801dca2:	9b01      	ldr	r3, [sp, #4]
 801dca4:	2b05      	cmp	r3, #5
 801dca6:	f200 8169 	bhi.w	801df7c <nema_set_blend+0x548>
 801dcaa:	2300      	movs	r3, #0
 801dcac:	f04f 0b01 	mov.w	fp, #1
 801dcb0:	461a      	mov	r2, r3
 801dcb2:	9306      	str	r3, [sp, #24]
 801dcb4:	9309      	str	r3, [sp, #36]	; 0x24
 801dcb6:	9315      	str	r3, [sp, #84]	; 0x54
 801dcb8:	9b07      	ldr	r3, [sp, #28]
 801dcba:	2b00      	cmp	r3, #0
 801dcbc:	f000 8200 	beq.w	801e0c0 <nema_set_blend+0x68c>
 801dcc0:	930a      	str	r3, [sp, #40]	; 0x28
 801dcc2:	4b06      	ldr	r3, [pc, #24]	; (801dcdc <nema_set_blend+0x2a8>)
 801dcc4:	2001      	movs	r0, #1
 801dcc6:	9308      	str	r3, [sp, #32]
 801dcc8:	2303      	movs	r3, #3
 801dcca:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801dcce:	e71b      	b.n	801db08 <nema_set_blend+0xd4>
 801dcd0:	20197c6c 	.word	0x20197c6c
 801dcd4:	20197c6d 	.word	0x20197c6d
 801dcd8:	20197e7c 	.word	0x20197e7c
 801dcdc:	080c0003 	.word	0x080c0003
 801dce0:	000761c5 	.word	0x000761c5
 801dce4:	000761c7 	.word	0x000761c7
 801dce8:	800761c5 	.word	0x800761c5
 801dcec:	80076185 	.word	0x80076185
 801dcf0:	80076187 	.word	0x80076187
 801dcf4:	800121c5 	.word	0x800121c5
 801dcf8:	800121c7 	.word	0x800121c7
 801dcfc:	000121c5 	.word	0x000121c5
 801dd00:	000461c7 	.word	0x000461c7
 801dd04:	800461c7 	.word	0x800461c7
 801dd08:	000121c7 	.word	0x000121c7
 801dd0c:	00012185 	.word	0x00012185
 801dd10:	00012187 	.word	0x00012187
 801dd14:	0802bd50 	.word	0x0802bd50
 801dd18:	02009408 	.word	0x02009408
 801dd1c:	00f40182 	.word	0x00f40182
 801dd20:	000c100b 	.word	0x000c100b
 801dd24:	1000fc00 	.word	0x1000fc00
 801dd28:	080c0000 	.word	0x080c0000
 801dd2c:	080c0002 	.word	0x080c0002
 801dd30:	00076185 	.word	0x00076185
 801dd34:	00076187 	.word	0x00076187
 801dd38:	000461c5 	.word	0x000461c5
 801dd3c:	00046187 	.word	0x00046187
 801dd40:	4615      	mov	r5, r2
 801dd42:	460a      	mov	r2, r1
 801dd44:	f1b9 0f00 	cmp.w	r9, #0
 801dd48:	d098      	beq.n	801dc7c <nema_set_blend+0x248>
 801dd4a:	9b06      	ldr	r3, [sp, #24]
 801dd4c:	2b00      	cmp	r3, #0
 801dd4e:	f000 8202 	beq.w	801e156 <nema_set_blend+0x722>
 801dd52:	2600      	movs	r6, #0
 801dd54:	9f01      	ldr	r7, [sp, #4]
 801dd56:	48c1      	ldr	r0, [pc, #772]	; (801e05c <nema_set_blend+0x628>)
 801dd58:	49c1      	ldr	r1, [pc, #772]	; (801e060 <nema_set_blend+0x62c>)
 801dd5a:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
 801dd5e:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801dd62:	015b      	lsls	r3, r3, #5
 801dd64:	ea43 3387 	orr.w	r3, r3, r7, lsl #14
 801dd68:	9f08      	ldr	r7, [sp, #32]
 801dd6a:	ea47 5e0e 	orr.w	lr, r7, lr, lsl #20
 801dd6e:	4fbd      	ldr	r7, [pc, #756]	; (801e064 <nema_set_blend+0x630>)
 801dd70:	ea4e 1eca 	orr.w	lr, lr, sl, lsl #7
 801dd74:	431f      	orrs	r7, r3
 801dd76:	ab26      	add	r3, sp, #152	; 0x98
 801dd78:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801dd7c:	4337      	orrs	r7, r6
 801dd7e:	e942 e710 	strd	lr, r7, [r2, #-64]	; 0x40
 801dd82:	2e00      	cmp	r6, #0
 801dd84:	f000 813f 	beq.w	801e006 <nema_set_blend+0x5d2>
 801dd88:	9804      	ldr	r0, [sp, #16]
 801dd8a:	f7fe fead 	bl	801cae8 <nema_matmul_bypass>
 801dd8e:	4629      	mov	r1, r5
 801dd90:	2200      	movs	r2, #0
 801dd92:	a816      	add	r0, sp, #88	; 0x58
 801dd94:	f7fe ffa2 	bl	801ccdc <nema_load_frag_shader>
 801dd98:	4bb3      	ldr	r3, [pc, #716]	; (801e068 <nema_set_blend+0x634>)
 801dd9a:	f1c5 0520 	rsb	r5, r5, #32
 801dd9e:	6818      	ldr	r0, [r3, #0]
 801dda0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dda2:	ea43 0800 	orr.w	r8, r3, r0
 801dda6:	ea48 0005 	orr.w	r0, r8, r5
 801ddaa:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 801ddae:	f7fe ffaf 	bl	801cd10 <nema_set_frag_ptr>
 801ddb2:	b027      	add	sp, #156	; 0x9c
 801ddb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801ddbc:	930f      	str	r3, [sp, #60]	; 0x3c
 801ddbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ddc0:	2b00      	cmp	r3, #0
 801ddc2:	f43f aefb 	beq.w	801dbbc <nema_set_blend+0x188>
 801ddc6:	f04f 0811 	mov.w	r8, #17
 801ddca:	e701      	b.n	801dbd0 <nema_set_blend+0x19c>
 801ddcc:	9b00      	ldr	r3, [sp, #0]
 801ddce:	1c5a      	adds	r2, r3, #1
 801ddd0:	f000 8136 	beq.w	801e040 <nema_set_blend+0x60c>
 801ddd4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801ddd8:	9a05      	ldr	r2, [sp, #20]
 801ddda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801ddde:	9204      	str	r2, [sp, #16]
 801dde0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dde2:	2a00      	cmp	r2, #0
 801dde4:	f000 80a9 	beq.w	801df3a <nema_set_blend+0x506>
 801dde8:	f44f 2440 	mov.w	r4, #786432	; 0xc0000
 801ddec:	499f      	ldr	r1, [pc, #636]	; (801e06c <nema_set_blend+0x638>)
 801ddee:	4aa0      	ldr	r2, [pc, #640]	; (801e070 <nema_set_blend+0x63c>)
 801ddf0:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 801ddf4:	9219      	str	r2, [sp, #100]	; 0x64
 801ddf6:	2204      	movs	r2, #4
 801ddf8:	9116      	str	r1, [sp, #88]	; 0x58
 801ddfa:	9205      	str	r2, [sp, #20]
 801ddfc:	2102      	movs	r1, #2
 801ddfe:	2203      	movs	r2, #3
 801de00:	e9cd 5417 	strd	r5, r4, [sp, #92]	; 0x5c
 801de04:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801de06:	2c00      	cmp	r4, #0
 801de08:	d04f      	beq.n	801deaa <nema_set_blend+0x476>
 801de0a:	9c00      	ldr	r4, [sp, #0]
 801de0c:	f1b4 3fff 	cmp.w	r4, #4294967295
 801de10:	d04b      	beq.n	801deaa <nema_set_blend+0x476>
 801de12:	f241 050b 	movw	r5, #4107	; 0x100b
 801de16:	2300      	movs	r3, #0
 801de18:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 801de1c:	a826      	add	r0, sp, #152	; 0x98
 801de1e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801de22:	9910      	ldr	r1, [sp, #64]	; 0x40
 801de24:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 801de28:	ea45 11c1 	orr.w	r1, r5, r1, lsl #7
 801de2c:	f1b9 0f01 	cmp.w	r9, #1
 801de30:	f840 1c40 	str.w	r1, [r0, #-64]
 801de34:	f444 4420 	orr.w	r4, r4, #40960	; 0xa000
 801de38:	4611      	mov	r1, r2
 801de3a:	f840 3c3c 	str.w	r3, [r0, #-60]
 801de3e:	9a05      	ldr	r2, [sp, #20]
 801de40:	f63f aef0 	bhi.w	801dc24 <nema_set_blend+0x1f0>
 801de44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de46:	2b00      	cmp	r3, #0
 801de48:	f47f aeec 	bne.w	801dc24 <nema_set_blend+0x1f0>
 801de4c:	9b00      	ldr	r3, [sp, #0]
 801de4e:	3301      	adds	r3, #1
 801de50:	f47f aee8 	bne.w	801dc24 <nema_set_blend+0x1f0>
 801de54:	9b02      	ldr	r3, [sp, #8]
 801de56:	4553      	cmp	r3, sl
 801de58:	f47f aee4 	bne.w	801dc24 <nema_set_blend+0x1f0>
 801de5c:	f1b9 0f00 	cmp.w	r9, #0
 801de60:	bf15      	itete	ne
 801de62:	f44f 6600 	movne.w	r6, #2048	; 0x800
 801de66:	f44f 5600 	moveq.w	r6, #8192	; 0x2000
 801de6a:	f44f 1500 	movne.w	r5, #2097152	; 0x200000
 801de6e:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
 801de72:	9f01      	ldr	r7, [sp, #4]
 801de74:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 801e05c <nema_set_blend+0x628>
 801de78:	4879      	ldr	r0, [pc, #484]	; (801e060 <nema_set_blend+0x62c>)
 801de7a:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 801de7e:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
 801de82:	015b      	lsls	r3, r3, #5
 801de84:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 801de88:	f043 430a 	orr.w	r3, r3, #2315255808	; 0x8a000000
 801de8c:	f043 0306 	orr.w	r3, r3, #6
 801de90:	4333      	orrs	r3, r6
 801de92:	432b      	orrs	r3, r5
 801de94:	4877      	ldr	r0, [pc, #476]	; (801e074 <nema_set_blend+0x640>)
 801de96:	9d02      	ldr	r5, [sp, #8]
 801de98:	ae26      	add	r6, sp, #152	; 0x98
 801de9a:	ea40 10c5 	orr.w	r0, r0, r5, lsl #7
 801de9e:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 801dea2:	4615      	mov	r5, r2
 801dea4:	e941 0310 	strd	r0, r3, [r1, #-64]	; 0x40
 801dea8:	e76e      	b.n	801dd88 <nema_set_blend+0x354>
 801deaa:	f043 5480 	orr.w	r4, r3, #268435456	; 0x10000000
 801deae:	e6b5      	b.n	801dc1c <nema_set_blend+0x1e8>
 801deb0:	f04f 3020 	mov.w	r0, #538976288	; 0x20202020
 801deb4:	f7fe ff44 	bl	801cd40 <nema_set_raster_color>
 801deb8:	2000      	movs	r0, #0
 801deba:	f7fd ff93 	bl	801bde4 <nema_enable_gradient>
 801debe:	f04f 0800 	mov.w	r8, #0
 801dec2:	f04f 0901 	mov.w	r9, #1
 801dec6:	23ff      	movs	r3, #255	; 0xff
 801dec8:	f240 1401 	movw	r4, #257	; 0x101
 801decc:	f04f 3aff 	mov.w	sl, #4294967295
 801ded0:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801ded4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801ded8:	e9cd 880c 	strd	r8, r8, [sp, #48]	; 0x30
 801dedc:	4641      	mov	r1, r8
 801dede:	f8cd 9004 	str.w	r9, [sp, #4]
 801dee2:	461a      	mov	r2, r3
 801dee4:	46a3      	mov	fp, r4
 801dee6:	f8cd a000 	str.w	sl, [sp]
 801deea:	e5c9      	b.n	801da80 <nema_set_blend+0x4c>
 801deec:	2f0e      	cmp	r7, #14
 801deee:	f47f aead 	bne.w	801dc4c <nema_set_blend+0x218>
 801def2:	9b03      	ldr	r3, [sp, #12]
 801def4:	2b00      	cmp	r3, #0
 801def6:	f47f aea9 	bne.w	801dc4c <nema_set_blend+0x218>
 801defa:	9b06      	ldr	r3, [sp, #24]
 801defc:	2b00      	cmp	r3, #0
 801defe:	f47f aea5 	bne.w	801dc4c <nema_set_blend+0x218>
 801df02:	4615      	mov	r5, r2
 801df04:	460a      	mov	r2, r1
 801df06:	f1b9 0f00 	cmp.w	r9, #0
 801df0a:	f43f aeb0 	beq.w	801dc6e <nema_set_blend+0x23a>
 801df0e:	f04f 0e00 	mov.w	lr, #0
 801df12:	4b59      	ldr	r3, [pc, #356]	; (801e078 <nema_set_blend+0x644>)
 801df14:	9308      	str	r3, [sp, #32]
 801df16:	9b01      	ldr	r3, [sp, #4]
 801df18:	2b00      	cmp	r3, #0
 801df1a:	f000 8123 	beq.w	801e164 <nema_set_blend+0x730>
 801df1e:	2b01      	cmp	r3, #1
 801df20:	f04f 0600 	mov.w	r6, #0
 801df24:	f000 8137 	beq.w	801e196 <nema_set_blend+0x762>
 801df28:	461f      	mov	r7, r3
 801df2a:	e714      	b.n	801dd56 <nema_set_blend+0x322>
 801df2c:	e9dd 6c11 	ldrd	r6, ip, [sp, #68]	; 0x44
 801df30:	e9dd 7413 	ldrd	r7, r4, [sp, #76]	; 0x4c
 801df34:	f04f 081d 	mov.w	r8, #29
 801df38:	e64a      	b.n	801dbd0 <nema_set_blend+0x19c>
 801df3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801df3c:	2a00      	cmp	r2, #0
 801df3e:	d046      	beq.n	801dfce <nema_set_blend+0x59a>
 801df40:	f44f 2440 	mov.w	r4, #786432	; 0xc0000
 801df44:	494d      	ldr	r1, [pc, #308]	; (801e07c <nema_set_blend+0x648>)
 801df46:	e752      	b.n	801ddee <nema_set_blend+0x3ba>
 801df48:	9b02      	ldr	r3, [sp, #8]
 801df4a:	2b00      	cmp	r3, #0
 801df4c:	f47f aea9 	bne.w	801dca2 <nema_set_blend+0x26e>
 801df50:	9b00      	ldr	r3, [sp, #0]
 801df52:	3301      	adds	r3, #1
 801df54:	f000 8114 	beq.w	801e180 <nema_set_blend+0x74c>
 801df58:	9802      	ldr	r0, [sp, #8]
 801df5a:	f7fe fdc5 	bl	801cae8 <nema_matmul_bypass>
 801df5e:	4b42      	ldr	r3, [pc, #264]	; (801e068 <nema_set_blend+0x634>)
 801df60:	4947      	ldr	r1, [pc, #284]	; (801e080 <nema_set_blend+0x64c>)
 801df62:	9800      	ldr	r0, [sp, #0]
 801df64:	681a      	ldr	r2, [r3, #0]
 801df66:	4b47      	ldr	r3, [pc, #284]	; (801e084 <nema_set_blend+0x650>)
 801df68:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 801df6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801df70:	4318      	orrs	r0, r3
 801df72:	f7fe fecd 	bl	801cd10 <nema_set_frag_ptr>
 801df76:	b027      	add	sp, #156	; 0x9c
 801df78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df7c:	2301      	movs	r3, #1
 801df7e:	930a      	str	r3, [sp, #40]	; 0x28
 801df80:	9304      	str	r3, [sp, #16]
 801df82:	469b      	mov	fp, r3
 801df84:	2303      	movs	r3, #3
 801df86:	f04f 0e00 	mov.w	lr, #0
 801df8a:	9303      	str	r3, [sp, #12]
 801df8c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 801df90:	f503 2340 	add.w	r3, r3, #786432	; 0xc0000
 801df94:	9308      	str	r3, [sp, #32]
 801df96:	4b3c      	ldr	r3, [pc, #240]	; (801e088 <nema_set_blend+0x654>)
 801df98:	f8cd e018 	str.w	lr, [sp, #24]
 801df9c:	9312      	str	r3, [sp, #72]	; 0x48
 801df9e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801dfa2:	9311      	str	r3, [sp, #68]	; 0x44
 801dfa4:	4b39      	ldr	r3, [pc, #228]	; (801e08c <nema_set_blend+0x658>)
 801dfa6:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 801dfaa:	9314      	str	r3, [sp, #80]	; 0x50
 801dfac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801dfb0:	9313      	str	r3, [sp, #76]	; 0x4c
 801dfb2:	f5a3 23c8 	sub.w	r3, r3, #409600	; 0x64000
 801dfb6:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 801dfba:	4835      	ldr	r0, [pc, #212]	; (801e090 <nema_set_blend+0x65c>)
 801dfbc:	4935      	ldr	r1, [pc, #212]	; (801e094 <nema_set_blend+0x660>)
 801dfbe:	4a36      	ldr	r2, [pc, #216]	; (801e098 <nema_set_blend+0x664>)
 801dfc0:	461d      	mov	r5, r3
 801dfc2:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 801e0b0 <nema_set_blend+0x67c>
 801dfc6:	4e35      	ldr	r6, [pc, #212]	; (801e09c <nema_set_blend+0x668>)
 801dfc8:	4c35      	ldr	r4, [pc, #212]	; (801e0a0 <nema_set_blend+0x66c>)
 801dfca:	4f36      	ldr	r7, [pc, #216]	; (801e0a4 <nema_set_blend+0x670>)
 801dfcc:	e5e7      	b.n	801db9e <nema_set_blend+0x16a>
 801dfce:	4611      	mov	r1, r2
 801dfd0:	2202      	movs	r2, #2
 801dfd2:	9205      	str	r2, [sp, #20]
 801dfd4:	2201      	movs	r2, #1
 801dfd6:	e715      	b.n	801de04 <nema_set_blend+0x3d0>
 801dfd8:	9b01      	ldr	r3, [sp, #4]
 801dfda:	2b01      	cmp	r3, #1
 801dfdc:	f47f ae32 	bne.w	801dc44 <nema_set_blend+0x210>
 801dfe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dfe2:	2b00      	cmp	r3, #0
 801dfe4:	f47f ae2e 	bne.w	801dc44 <nema_set_blend+0x210>
 801dfe8:	a826      	add	r0, sp, #152	; 0x98
 801dfea:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801dfee:	4b21      	ldr	r3, [pc, #132]	; (801e074 <nema_set_blend+0x640>)
 801dff0:	9802      	ldr	r0, [sp, #8]
 801dff2:	f841 6c3c 	str.w	r6, [r1, #-60]
 801dff6:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801dffa:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 801dffe:	4615      	mov	r5, r2
 801e000:	f841 3c40 	str.w	r3, [r1, #-64]
 801e004:	e6c0      	b.n	801dd88 <nema_set_blend+0x354>
 801e006:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 801e00a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 801e00e:	462a      	mov	r2, r5
 801e010:	3501      	adds	r5, #1
 801e012:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 801e016:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
 801e01a:	0140      	lsls	r0, r0, #5
 801e01c:	4b22      	ldr	r3, [pc, #136]	; (801e0a8 <nema_set_blend+0x674>)
 801e01e:	ea40 3081 	orr.w	r0, r0, r1, lsl #14
 801e022:	4303      	orrs	r3, r0
 801e024:	4921      	ldr	r1, [pc, #132]	; (801e0ac <nema_set_blend+0x678>)
 801e026:	9802      	ldr	r0, [sp, #8]
 801e028:	433b      	orrs	r3, r7
 801e02a:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 801e02e:	a826      	add	r0, sp, #152	; 0x98
 801e030:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 801e034:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e036:	4333      	orrs	r3, r6
 801e038:	4301      	orrs	r1, r0
 801e03a:	e942 1310 	strd	r1, r3, [r2, #-64]	; 0x40
 801e03e:	e6a3      	b.n	801dd88 <nema_set_blend+0x354>
 801e040:	9b04      	ldr	r3, [sp, #16]
 801e042:	2b00      	cmp	r3, #0
 801e044:	f000 8082 	beq.w	801e14c <nema_set_blend+0x718>
 801e048:	9a05      	ldr	r2, [sp, #20]
 801e04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e04c:	9203      	str	r2, [sp, #12]
 801e04e:	920a      	str	r2, [sp, #40]	; 0x28
 801e050:	4a09      	ldr	r2, [pc, #36]	; (801e078 <nema_set_blend+0x644>)
 801e052:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 801e056:	9208      	str	r2, [sp, #32]
 801e058:	e6c2      	b.n	801dde0 <nema_set_blend+0x3ac>
 801e05a:	bf00      	nop
 801e05c:	0802bd60 	.word	0x0802bd60
 801e060:	0802bd90 	.word	0x0802bd90
 801e064:	0a002007 	.word	0x0a002007
 801e068:	20000064 	.word	0x20000064
 801e06c:	100c118b 	.word	0x100c118b
 801e070:	0081a042 	.word	0x0081a042
 801e074:	080c0002 	.word	0x080c0002
 801e078:	080c0000 	.word	0x080c0000
 801e07c:	100c1183 	.word	0x100c1183
 801e080:	0802bd50 	.word	0x0802bd50
 801e084:	141f801f 	.word	0x141f801f
 801e088:	000761c7 	.word	0x000761c7
 801e08c:	00076187 	.word	0x00076187
 801e090:	000121c7 	.word	0x000121c7
 801e094:	800121c7 	.word	0x800121c7
 801e098:	00012187 	.word	0x00012187
 801e09c:	800461c7 	.word	0x800461c7
 801e0a0:	00046187 	.word	0x00046187
 801e0a4:	80046187 	.word	0x80046187
 801e0a8:	80080206 	.word	0x80080206
 801e0ac:	004e0002 	.word	0x004e0002
 801e0b0:	000461c7 	.word	0x000461c7
 801e0b4:	2301      	movs	r3, #1
 801e0b6:	2202      	movs	r2, #2
 801e0b8:	9304      	str	r3, [sp, #16]
 801e0ba:	4619      	mov	r1, r3
 801e0bc:	4c38      	ldr	r4, [pc, #224]	; (801e1a0 <nema_set_blend+0x76c>)
 801e0be:	e5ad      	b.n	801dc1c <nema_set_blend+0x1e8>
 801e0c0:	f1b9 0f00 	cmp.w	r9, #0
 801e0c4:	d055      	beq.n	801e172 <nema_set_blend+0x73e>
 801e0c6:	2301      	movs	r3, #1
 801e0c8:	2103      	movs	r1, #3
 801e0ca:	930a      	str	r3, [sp, #40]	; 0x28
 801e0cc:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801e0d0:	4b34      	ldr	r3, [pc, #208]	; (801e1a4 <nema_set_blend+0x770>)
 801e0d2:	9308      	str	r3, [sp, #32]
 801e0d4:	e518      	b.n	801db08 <nema_set_blend+0xd4>
 801e0d6:	2c00      	cmp	r4, #0
 801e0d8:	bfbd      	ittte	lt
 801e0da:	f02b 4b00 	biclt.w	fp, fp, #2147483648	; 0x80000000
 801e0de:	f04f 4202 	movlt.w	r2, #2181038080	; 0x82000000
 801e0e2:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 801e0e6:	f04f 7200 	movge.w	r2, #33554432	; 0x2000000
 801e0ea:	b111      	cbz	r1, 801e0f2 <nema_set_blend+0x6be>
 801e0ec:	4613      	mov	r3, r2
 801e0ee:	f02b 7b00 	bic.w	fp, fp, #33554432	; 0x2000000
 801e0f2:	9a01      	ldr	r2, [sp, #4]
 801e0f4:	ea42 2009 	orr.w	r0, r2, r9, lsl #8
 801e0f8:	4318      	orrs	r0, r3
 801e0fa:	f7fe fe0f 	bl	801cd1c <nema_set_rop_blend_mode>
 801e0fe:	ea4f 505b 	mov.w	r0, fp, lsr #21
 801e102:	4b29      	ldr	r3, [pc, #164]	; (801e1a8 <nema_set_blend+0x774>)
 801e104:	0540      	lsls	r0, r0, #21
 801e106:	f040 0201 	orr.w	r2, r0, #1
 801e10a:	789b      	ldrb	r3, [r3, #2]
 801e10c:	2a01      	cmp	r2, #1
 801e10e:	9201      	str	r2, [sp, #4]
 801e110:	9305      	str	r3, [sp, #20]
 801e112:	f43f adbe 	beq.w	801dc92 <nema_set_blend+0x25e>
 801e116:	f00b 4380 	and.w	r3, fp, #1073741824	; 0x40000000
 801e11a:	9315      	str	r3, [sp, #84]	; 0x54
 801e11c:	f3cb 7380 	ubfx	r3, fp, #30, #1
 801e120:	9306      	str	r3, [sp, #24]
 801e122:	f00b 5300 	and.w	r3, fp, #536870912	; 0x20000000
 801e126:	9309      	str	r3, [sp, #36]	; 0x24
 801e128:	2301      	movs	r3, #1
 801e12a:	f04f 0900 	mov.w	r9, #0
 801e12e:	f00b 5280 	and.w	r2, fp, #268435456	; 0x10000000
 801e132:	f8dd b004 	ldr.w	fp, [sp, #4]
 801e136:	9301      	str	r3, [sp, #4]
 801e138:	4b1c      	ldr	r3, [pc, #112]	; (801e1ac <nema_set_blend+0x778>)
 801e13a:	46c8      	mov	r8, r9
 801e13c:	f8cd 901c 	str.w	r9, [sp, #28]
 801e140:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801e144:	f8cd 9010 	str.w	r9, [sp, #16]
 801e148:	9308      	str	r3, [sp, #32]
 801e14a:	e4dd      	b.n	801db08 <nema_set_blend+0xd4>
 801e14c:	2201      	movs	r2, #1
 801e14e:	9b05      	ldr	r3, [sp, #20]
 801e150:	9204      	str	r2, [sp, #16]
 801e152:	930a      	str	r3, [sp, #40]	; 0x28
 801e154:	e644      	b.n	801dde0 <nema_set_blend+0x3ac>
 801e156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e158:	2b00      	cmp	r3, #0
 801e15a:	f43f aedc 	beq.w	801df16 <nema_set_blend+0x4e2>
 801e15e:	9e06      	ldr	r6, [sp, #24]
 801e160:	9f01      	ldr	r7, [sp, #4]
 801e162:	e5f8      	b.n	801dd56 <nema_set_blend+0x322>
 801e164:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 801e168:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 801e16c:	4910      	ldr	r1, [pc, #64]	; (801e1b0 <nema_set_blend+0x77c>)
 801e16e:	4811      	ldr	r0, [pc, #68]	; (801e1b4 <nema_set_blend+0x780>)
 801e170:	e74f      	b.n	801e012 <nema_set_blend+0x5de>
 801e172:	4b0e      	ldr	r3, [pc, #56]	; (801e1ac <nema_set_blend+0x778>)
 801e174:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801e178:	9308      	str	r3, [sp, #32]
 801e17a:	e9cd 9903 	strd	r9, r9, [sp, #12]
 801e17e:	e4c3      	b.n	801db08 <nema_set_blend+0xd4>
 801e180:	2001      	movs	r0, #1
 801e182:	f7fe fcb1 	bl	801cae8 <nema_matmul_bypass>
 801e186:	4a0c      	ldr	r2, [pc, #48]	; (801e1b8 <nema_set_blend+0x784>)
 801e188:	4b0c      	ldr	r3, [pc, #48]	; (801e1bc <nema_set_blend+0x788>)
 801e18a:	6810      	ldr	r0, [r2, #0]
 801e18c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801e190:	f7fe fdbe 	bl	801cd10 <nema_set_frag_ptr>
 801e194:	e6ef      	b.n	801df76 <nema_set_blend+0x542>
 801e196:	4637      	mov	r7, r6
 801e198:	4905      	ldr	r1, [pc, #20]	; (801e1b0 <nema_set_blend+0x77c>)
 801e19a:	4806      	ldr	r0, [pc, #24]	; (801e1b4 <nema_set_blend+0x780>)
 801e19c:	e739      	b.n	801e012 <nema_set_blend+0x5de>
 801e19e:	bf00      	nop
 801e1a0:	1000fc00 	.word	0x1000fc00
 801e1a4:	080c0003 	.word	0x080c0003
 801e1a8:	20197e7c 	.word	0x20197e7c
 801e1ac:	080c0000 	.word	0x080c0000
 801e1b0:	0802bd90 	.word	0x0802bd90
 801e1b4:	0802bd60 	.word	0x0802bd60
 801e1b8:	20000064 	.word	0x20000064
 801e1bc:	141f001f 	.word	0x141f001f

0801e1c0 <nema_set_const_color>:
 801e1c0:	b510      	push	{r4, lr}
 801e1c2:	4604      	mov	r4, r0
 801e1c4:	2001      	movs	r0, #1
 801e1c6:	4621      	mov	r1, r4
 801e1c8:	f7fd fde4 	bl	801bd94 <nema_set_const_reg>
 801e1cc:	4b04      	ldr	r3, [pc, #16]	; (801e1e0 <nema_set_const_color+0x20>)
 801e1ce:	781b      	ldrb	r3, [r3, #0]
 801e1d0:	b903      	cbnz	r3, 801e1d4 <nema_set_const_color+0x14>
 801e1d2:	bd10      	pop	{r4, pc}
 801e1d4:	4620      	mov	r0, r4
 801e1d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e1da:	f7fe bda5 	b.w	801cd28 <nema_set_rop_const_color>
 801e1de:	bf00      	nop
 801e1e0:	20197c6d 	.word	0x20197c6d

0801e1e4 <_ZN8touchgfx8HALGPU2D17unlockFrameBufferEv>:
 801e1e4:	f7f8 beb0 	b.w	8016f48 <_ZN8touchgfx3HAL17unlockFrameBufferEv>

0801e1e8 <_ZN8touchgfx8HALGPU2D10beginFrameEv>:
 801e1e8:	2200      	movs	r2, #0
 801e1ea:	f880 20a5 	strb.w	r2, [r0, #165]	; 0xa5
 801e1ee:	f7f8 bdaf 	b.w	8016d50 <_ZN8touchgfx3HAL10beginFrameEv>
 801e1f2:	bf00      	nop

0801e1f4 <_ZN8touchgfx8HALGPU2D15lockFrameBufferEv>:
 801e1f4:	b510      	push	{r4, lr}
 801e1f6:	4604      	mov	r4, r0
 801e1f8:	307c      	adds	r0, #124	; 0x7c
 801e1fa:	f7ff fbd5 	bl	801d9a8 <nema_cl_wait>
 801e1fe:	4620      	mov	r0, r4
 801e200:	f7f9 fb64 	bl	80178cc <_ZN8touchgfx3HAL15lockFrameBufferEv>
 801e204:	2300      	movs	r3, #0
 801e206:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 801e20a:	bd10      	pop	{r4, pc}

0801e20c <_ZN8touchgfx8HALGPU2D8endFrameEv>:
 801e20c:	b510      	push	{r4, lr}
 801e20e:	4604      	mov	r4, r0
 801e210:	f7f8 fdaa 	bl	8016d68 <_ZN8touchgfx3HAL8endFrameEv>
 801e214:	2200      	movs	r2, #0
 801e216:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 801e21a:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
 801e21e:	347c      	adds	r4, #124	; 0x7c
 801e220:	b113      	cbz	r3, 801e228 <_ZN8touchgfx8HALGPU2D8endFrameEv+0x1c>
 801e222:	4620      	mov	r0, r4
 801e224:	f7ff fb50 	bl	801d8c8 <nema_cl_submit>
 801e228:	4620      	mov	r0, r4
 801e22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e22e:	f7ff bbbb 	b.w	801d9a8 <nema_cl_wait>
 801e232:	bf00      	nop

0801e234 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>:
 801e234:	b508      	push	{r3, lr}
 801e236:	4a03      	ldr	r2, [pc, #12]	; (801e244 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x10>)
 801e238:	4b03      	ldr	r3, [pc, #12]	; (801e248 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x14>)
 801e23a:	2118      	movs	r1, #24
 801e23c:	4803      	ldr	r0, [pc, #12]	; (801e24c <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x18>)
 801e23e:	f00b f809 	bl	8029254 <__assert_func>
 801e242:	bf00      	nop
 801e244:	0802bf14 	.word	0x0802bf14
 801e248:	0802bdc0 	.word	0x0802bdc0
 801e24c:	0802be18 	.word	0x0802be18

0801e250 <_ZN8touchgfx8HALGPU2D10initializeEv>:
 801e250:	b570      	push	{r4, r5, r6, lr}
 801e252:	4606      	mov	r6, r0
 801e254:	b08a      	sub	sp, #40	; 0x28
 801e256:	466c      	mov	r4, sp
 801e258:	f7f8 fd93 	bl	8016d82 <_ZN8touchgfx3HAL10initializeEv>
 801e25c:	f106 057c 	add.w	r5, r6, #124	; 0x7c
 801e260:	4668      	mov	r0, sp
 801e262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801e266:	f7ff f89f 	bl	801d3a8 <nema_cl_create_sized>
 801e26a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e26c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e26e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e272:	e894 0003 	ldmia.w	r4, {r0, r1}
 801e276:	e885 0003 	stmia.w	r5, {r0, r1}
 801e27a:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801e27e:	b10b      	cbz	r3, 801e284 <_ZN8touchgfx8HALGPU2D10initializeEv+0x34>
 801e280:	b00a      	add	sp, #40	; 0x28
 801e282:	bd70      	pop	{r4, r5, r6, pc}
 801e284:	f7ff ffd6 	bl	801e234 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>

0801e288 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
 801e288:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e28a:	f04f 0c01 	mov.w	ip, #1
 801e28e:	2500      	movs	r5, #0
 801e290:	f8bd 7014 	ldrh.w	r7, [sp, #20]
 801e294:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 801e298:	60c3      	str	r3, [r0, #12]
 801e29a:	42b7      	cmp	r7, r6
 801e29c:	bf2c      	ite	cs
 801e29e:	f04f 0e00 	movcs.w	lr, #0
 801e2a2:	f04f 0e01 	movcc.w	lr, #1
 801e2a6:	4b23      	ldr	r3, [pc, #140]	; (801e334 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xac>)
 801e2a8:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801e2ac:	6643      	str	r3, [r0, #100]	; 0x64
 801e2ae:	4b22      	ldr	r3, [pc, #136]	; (801e338 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb0>)
 801e2b0:	6105      	str	r5, [r0, #16]
 801e2b2:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801e2b6:	61c5      	str	r5, [r0, #28]
 801e2b8:	6205      	str	r5, [r0, #32]
 801e2ba:	8485      	strh	r5, [r0, #36]	; 0x24
 801e2bc:	f8c0 5026 	str.w	r5, [r0, #38]	; 0x26
 801e2c0:	f880 502a 	strb.w	r5, [r0, #42]	; 0x2a
 801e2c4:	62c5      	str	r5, [r0, #44]	; 0x2c
 801e2c6:	8605      	strh	r5, [r0, #48]	; 0x30
 801e2c8:	e9c0 550e 	strd	r5, r5, [r0, #56]	; 0x38
 801e2cc:	e9c0 5510 	strd	r5, r5, [r0, #64]	; 0x40
 801e2d0:	f880 5048 	strb.w	r5, [r0, #72]	; 0x48
 801e2d4:	f880 504a 	strb.w	r5, [r0, #74]	; 0x4a
 801e2d8:	f880 504b 	strb.w	r5, [r0, #75]	; 0x4b
 801e2dc:	e9c0 5513 	strd	r5, r5, [r0, #76]	; 0x4c
 801e2e0:	e9c0 5515 	strd	r5, r5, [r0, #84]	; 0x54
 801e2e4:	e9c0 5517 	strd	r5, r5, [r0, #92]	; 0x5c
 801e2e8:	6685      	str	r5, [r0, #104]	; 0x68
 801e2ea:	f880 506c 	strb.w	r5, [r0, #108]	; 0x6c
 801e2ee:	4a13      	ldr	r2, [pc, #76]	; (801e33c <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb4>)
 801e2f0:	f880 c049 	strb.w	ip, [r0, #73]	; 0x49
 801e2f4:	6018      	str	r0, [r3, #0]
 801e2f6:	4b12      	ldr	r3, [pc, #72]	; (801e340 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb8>)
 801e2f8:	8017      	strh	r7, [r2, #0]
 801e2fa:	801f      	strh	r7, [r3, #0]
 801e2fc:	4a11      	ldr	r2, [pc, #68]	; (801e344 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xbc>)
 801e2fe:	4b12      	ldr	r3, [pc, #72]	; (801e348 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc0>)
 801e300:	8016      	strh	r6, [r2, #0]
 801e302:	801e      	strh	r6, [r3, #0]
 801e304:	4911      	ldr	r1, [pc, #68]	; (801e34c <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc4>)
 801e306:	4a12      	ldr	r2, [pc, #72]	; (801e350 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc8>)
 801e308:	4b12      	ldr	r3, [pc, #72]	; (801e354 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xcc>)
 801e30a:	700d      	strb	r5, [r1, #0]
 801e30c:	6002      	str	r2, [r0, #0]
 801e30e:	6018      	str	r0, [r3, #0]
 801e310:	6705      	str	r5, [r0, #112]	; 0x70
 801e312:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
 801e316:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
 801e31a:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
 801e31e:	f880 c077 	strb.w	ip, [r0, #119]	; 0x77
 801e322:	f880 c078 	strb.w	ip, [r0, #120]	; 0x78
 801e326:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
 801e32a:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
 801e32e:	f880 e034 	strb.w	lr, [r0, #52]	; 0x34
 801e332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e334:	01000001 	.word	0x01000001
 801e338:	20197a40 	.word	0x20197a40
 801e33c:	20197a34 	.word	0x20197a34
 801e340:	20197a3a 	.word	0x20197a3a
 801e344:	20197a36 	.word	0x20197a36
 801e348:	20197a3c 	.word	0x20197a3c
 801e34c:	20197a38 	.word	0x20197a38
 801e350:	0802be44 	.word	0x0802be44
 801e354:	20197c70 	.word	0x20197c70

0801e358 <_ZN8touchgfx8HALGPU2D10initializeEi>:
 801e358:	b570      	push	{r4, r5, r6, lr}
 801e35a:	460c      	mov	r4, r1
 801e35c:	b08a      	sub	sp, #40	; 0x28
 801e35e:	4606      	mov	r6, r0
 801e360:	f7f8 fd0f 	bl	8016d82 <_ZN8touchgfx3HAL10initializeEv>
 801e364:	4621      	mov	r1, r4
 801e366:	466c      	mov	r4, sp
 801e368:	4668      	mov	r0, sp
 801e36a:	f106 057c 	add.w	r5, r6, #124	; 0x7c
 801e36e:	f7ff f81b 	bl	801d3a8 <nema_cl_create_sized>
 801e372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e37a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801e37e:	e885 0003 	stmia.w	r5, {r0, r1}
 801e382:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801e386:	b10b      	cbz	r3, 801e38c <_ZN8touchgfx8HALGPU2D10initializeEi+0x34>
 801e388:	b00a      	add	sp, #40	; 0x28
 801e38a:	bd70      	pop	{r4, r5, r6, pc}
 801e38c:	f7ff ff52 	bl	801e234 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>

0801e390 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>:
 801e390:	b510      	push	{r4, lr}
 801e392:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 801e396:	4604      	mov	r4, r0
 801e398:	b94b      	cbnz	r3, 801e3ae <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x1e>
 801e39a:	4620      	mov	r0, r4
 801e39c:	2101      	movs	r1, #1
 801e39e:	f7f9 fa83 	bl	80178a8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801e3a2:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 801e3a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e3aa:	f7ff b911 	b.w	801d5d0 <nema_cl_bind_circular>
 801e3ae:	6840      	ldr	r0, [r0, #4]
 801e3b0:	4906      	ldr	r1, [pc, #24]	; (801e3cc <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x3c>)
 801e3b2:	6803      	ldr	r3, [r0, #0]
 801e3b4:	689a      	ldr	r2, [r3, #8]
 801e3b6:	428a      	cmp	r2, r1
 801e3b8:	d105      	bne.n	801e3c6 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x36>
 801e3ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e3bc:	4798      	blx	r3
 801e3be:	2300      	movs	r3, #0
 801e3c0:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 801e3c4:	e7e9      	b.n	801e39a <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0xa>
 801e3c6:	4790      	blx	r2
 801e3c8:	e7f9      	b.n	801e3be <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x2e>
 801e3ca:	bf00      	nop
 801e3cc:	08002a25 	.word	0x08002a25

0801e3d0 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>:
 801e3d0:	4603      	mov	r3, r0
 801e3d2:	2200      	movs	r2, #0
 801e3d4:	307c      	adds	r0, #124	; 0x7c
 801e3d6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 801e3da:	f7ff ba75 	b.w	801d8c8 <nema_cl_submit>
 801e3de:	bf00      	nop

0801e3e0 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 801e3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3e4:	b091      	sub	sp, #68	; 0x44
 801e3e6:	4604      	mov	r4, r0
 801e3e8:	461d      	mov	r5, r3
 801e3ea:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801e3ee:	e9cd 210e 	strd	r2, r1, [sp, #56]	; 0x38
 801e3f2:	930d      	str	r3, [sp, #52]	; 0x34
 801e3f4:	f89d 2088 	ldrb.w	r2, [sp, #136]	; 0x88
 801e3f8:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801e3fc:	307c      	adds	r0, #124	; 0x7c
 801e3fe:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
 801e402:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801e406:	f8bd 8070 	ldrh.w	r8, [sp, #112]	; 0x70
 801e40a:	f8bd 9074 	ldrh.w	r9, [sp, #116]	; 0x74
 801e40e:	f89d a078 	ldrb.w	sl, [sp, #120]	; 0x78
 801e412:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801e416:	930b      	str	r3, [sp, #44]	; 0x2c
 801e418:	920c      	str	r2, [sp, #48]	; 0x30
 801e41a:	f7ff fac5 	bl	801d9a8 <nema_cl_wait>
 801e41e:	f04f 0e01 	mov.w	lr, #1
 801e422:	2000      	movs	r0, #0
 801e424:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e428:	9208      	str	r2, [sp, #32]
 801e42a:	f8d4 c000 	ldr.w	ip, [r4]
 801e42e:	9307      	str	r3, [sp, #28]
 801e430:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e432:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801e436:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
 801e43a:	e9cd b305 	strd	fp, r3, [sp, #20]
 801e43e:	e9cd 7801 	strd	r7, r8, [sp, #4]
 801e442:	9600      	str	r6, [sp, #0]
 801e444:	f884 e0a4 	strb.w	lr, [r4, #164]	; 0xa4
 801e448:	9009      	str	r0, [sp, #36]	; 0x24
 801e44a:	462b      	mov	r3, r5
 801e44c:	4620      	mov	r0, r4
 801e44e:	f8dc 403c 	ldr.w	r4, [ip, #60]	; 0x3c
 801e452:	47a0      	blx	r4
 801e454:	b011      	add	sp, #68	; 0x44
 801e456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e45a:	bf00      	nop

0801e45c <_ZN8touchgfx8LCDGPU2DD1Ev>:
 801e45c:	4770      	bx	lr
 801e45e:	bf00      	nop

0801e460 <_ZNK8touchgfx8LCDGPU2D8bitDepthEv>:
 801e460:	7a03      	ldrb	r3, [r0, #8]
 801e462:	2b02      	cmp	r3, #2
 801e464:	d004      	beq.n	801e470 <_ZNK8touchgfx8LCDGPU2D8bitDepthEv+0x10>
 801e466:	2b01      	cmp	r3, #1
 801e468:	bf0c      	ite	eq
 801e46a:	2018      	moveq	r0, #24
 801e46c:	2010      	movne	r0, #16
 801e46e:	4770      	bx	lr
 801e470:	2020      	movs	r0, #32
 801e472:	4770      	bx	lr

0801e474 <_ZNK8touchgfx8LCDGPU2D17framebufferFormatEv>:
 801e474:	7a00      	ldrb	r0, [r0, #8]
 801e476:	4770      	bx	lr

0801e478 <_ZN8touchgfx8LCDGPU2D4initEv>:
 801e478:	4770      	bx	lr
 801e47a:	bf00      	nop

0801e47c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e480:	b087      	sub	sp, #28
 801e482:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801e486:	9102      	str	r1, [sp, #8]
 801e488:	ea6f 0c05 	mvn.w	ip, r5
 801e48c:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801e490:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e492:	9203      	str	r2, [sp, #12]
 801e494:	e9dd 4215 	ldrd	r4, r2, [sp, #84]	; 0x54
 801e498:	6860      	ldr	r0, [r4, #4]
 801e49a:	fa5f fc8c 	uxtb.w	ip, ip
 801e49e:	fb00 2e01 	mla	lr, r0, r1, r2
 801e4a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e4a4:	6820      	ldr	r0, [r4, #0]
 801e4a6:	e9d2 2400 	ldrd	r2, r4, [r2]
 801e4aa:	3404      	adds	r4, #4
 801e4ac:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 801e4b0:	fa1f fb85 	uxth.w	fp, r5
 801e4b4:	9405      	str	r4, [sp, #20]
 801e4b6:	9200      	str	r2, [sp, #0]
 801e4b8:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801e4bc:	9c02      	ldr	r4, [sp, #8]
 801e4be:	2c00      	cmp	r4, #0
 801e4c0:	dc03      	bgt.n	801e4ca <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801e4c2:	9c03      	ldr	r4, [sp, #12]
 801e4c4:	2c00      	cmp	r4, #0
 801e4c6:	f340 80c2 	ble.w	801e64e <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e4ca:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	e9d4 ea02 	ldrd	lr, sl, [r4, #8]
 801e4d2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e4d6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e4da:	fa0f f48e 	sxth.w	r4, lr
 801e4de:	fa0f f88a 	sxth.w	r8, sl
 801e4e2:	f340 80b7 	ble.w	801e654 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801e4e6:	1415      	asrs	r5, r2, #16
 801e4e8:	d406      	bmi.n	801e4f8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e4ea:	42a5      	cmp	r5, r4
 801e4ec:	da04      	bge.n	801e4f8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e4ee:	ea5f 4921 	movs.w	r9, r1, asr #16
 801e4f2:	d401      	bmi.n	801e4f8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e4f4:	45c1      	cmp	r9, r8
 801e4f6:	db3e      	blt.n	801e576 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e4f8:	3b01      	subs	r3, #1
 801e4fa:	4432      	add	r2, r6
 801e4fc:	4439      	add	r1, r7
 801e4fe:	f100 0002 	add.w	r0, r0, #2
 801e502:	d1f0      	bne.n	801e4e6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e504:	9b02      	ldr	r3, [sp, #8]
 801e506:	2b00      	cmp	r3, #0
 801e508:	f340 80a1 	ble.w	801e64e <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e50c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e510:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e514:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e518:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e51c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e520:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e524:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e528:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e52c:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e530:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e534:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e538:	ee16 2a90 	vmov	r2, s13
 801e53c:	3b01      	subs	r3, #1
 801e53e:	9302      	str	r3, [sp, #8]
 801e540:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e542:	9c03      	ldr	r4, [sp, #12]
 801e544:	fb92 f6f3 	sdiv	r6, r2, r3
 801e548:	ee17 2a10 	vmov	r2, s14
 801e54c:	eeb0 7a43 	vmov.f32	s14, s6
 801e550:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e554:	ee17 1a10 	vmov	r1, s14
 801e558:	eeb0 7a62 	vmov.f32	s14, s5
 801e55c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e560:	fb92 f7f3 	sdiv	r7, r2, r3
 801e564:	eeb0 3a67 	vmov.f32	s6, s15
 801e568:	ee17 2a10 	vmov	r2, s14
 801e56c:	eef0 2a46 	vmov.f32	s5, s12
 801e570:	bf08      	it	eq
 801e572:	4623      	moveq	r3, r4
 801e574:	e7a2      	b.n	801e4bc <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e576:	9501      	str	r5, [sp, #4]
 801e578:	1e5d      	subs	r5, r3, #1
 801e57a:	fb05 2906 	mla	r9, r5, r6, r2
 801e57e:	ea5f 4929 	movs.w	r9, r9, asr #16
 801e582:	9504      	str	r5, [sp, #16]
 801e584:	d570      	bpl.n	801e668 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801e586:	4680      	mov	r8, r0
 801e588:	9d01      	ldr	r5, [sp, #4]
 801e58a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e58e:	4654      	mov	r4, sl
 801e590:	4673      	mov	r3, lr
 801e592:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801e596:	e002      	b.n	801e59e <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801e598:	1415      	asrs	r5, r2, #16
 801e59a:	e9d9 3402 	ldrd	r3, r4, [r9, #8]
 801e59e:	2d00      	cmp	r5, #0
 801e5a0:	4432      	add	r2, r6
 801e5a2:	db4b      	blt.n	801e63c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801e5a4:	429d      	cmp	r5, r3
 801e5a6:	da49      	bge.n	801e63c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801e5a8:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801e5ac:	d446      	bmi.n	801e63c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801e5ae:	45a6      	cmp	lr, r4
 801e5b0:	da44      	bge.n	801e63c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801e5b2:	9c00      	ldr	r4, [sp, #0]
 801e5b4:	b21b      	sxth	r3, r3
 801e5b6:	fb0e 4303 	mla	r3, lr, r3, r4
 801e5ba:	5d5b      	ldrb	r3, [r3, r5]
 801e5bc:	9d05      	ldr	r5, [sp, #20]
 801e5be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e5c2:	441d      	add	r5, r3
 801e5c4:	f895 a002 	ldrb.w	sl, [r5, #2]
 801e5c8:	786d      	ldrb	r5, [r5, #1]
 801e5ca:	f8b8 4000 	ldrh.w	r4, [r8]
 801e5ce:	fb15 f50b 	smulbb	r5, r5, fp
 801e5d2:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 801e5d6:	fa5f fe8e 	uxtb.w	lr, lr
 801e5da:	9501      	str	r5, [sp, #4]
 801e5dc:	fb1e fe0c 	smulbb	lr, lr, ip
 801e5e0:	9d05      	ldr	r5, [sp, #20]
 801e5e2:	fb1a fa0b 	smulbb	sl, sl, fp
 801e5e6:	5ced      	ldrb	r5, [r5, r3]
 801e5e8:	1223      	asrs	r3, r4, #8
 801e5ea:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e5ee:	fb05 ee0b 	mla	lr, r5, fp, lr
 801e5f2:	fb03 aa0c 	mla	sl, r3, ip, sl
 801e5f6:	9d01      	ldr	r5, [sp, #4]
 801e5f8:	10e4      	asrs	r4, r4, #3
 801e5fa:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801e5fe:	fb04 540c 	mla	r4, r4, ip, r5
 801e602:	fa1f fe8e 	uxth.w	lr, lr
 801e606:	fa1f fa8a 	uxth.w	sl, sl
 801e60a:	f10e 0301 	add.w	r3, lr, #1
 801e60e:	f10a 0501 	add.w	r5, sl, #1
 801e612:	9301      	str	r3, [sp, #4]
 801e614:	b2a4      	uxth	r4, r4
 801e616:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801e61a:	9d01      	ldr	r5, [sp, #4]
 801e61c:	1c63      	adds	r3, r4, #1
 801e61e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801e622:	eb05 251e 	add.w	r5, r5, lr, lsr #8
 801e626:	f40a 4378 	and.w	r3, sl, #63488	; 0xf800
 801e62a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e62e:	0964      	lsrs	r4, r4, #5
 801e630:	432b      	orrs	r3, r5
 801e632:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801e636:	4323      	orrs	r3, r4
 801e638:	f8a8 3000 	strh.w	r3, [r8]
 801e63c:	f108 0802 	add.w	r8, r8, #2
 801e640:	4580      	cmp	r8, r0
 801e642:	4439      	add	r1, r7
 801e644:	d1a8      	bne.n	801e598 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e646:	9b02      	ldr	r3, [sp, #8]
 801e648:	2b00      	cmp	r3, #0
 801e64a:	f73f af5f 	bgt.w	801e50c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e64e:	b007      	add	sp, #28
 801e650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e654:	f43f af56 	beq.w	801e504 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e658:	1e5d      	subs	r5, r3, #1
 801e65a:	fb05 2906 	mla	r9, r5, r6, r2
 801e65e:	ea5f 4929 	movs.w	r9, r9, asr #16
 801e662:	9504      	str	r5, [sp, #16]
 801e664:	f53f af4e 	bmi.w	801e504 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e668:	454c      	cmp	r4, r9
 801e66a:	dd5b      	ble.n	801e724 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801e66c:	9d04      	ldr	r5, [sp, #16]
 801e66e:	fb05 1507 	mla	r5, r5, r7, r1
 801e672:	142d      	asrs	r5, r5, #16
 801e674:	d456      	bmi.n	801e724 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801e676:	4545      	cmp	r5, r8
 801e678:	da54      	bge.n	801e724 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801e67a:	2b00      	cmp	r3, #0
 801e67c:	f77f af42 	ble.w	801e504 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e680:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e684:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801e688:	9301      	str	r3, [sp, #4]
 801e68a:	e002      	b.n	801e692 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801e68c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e68e:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 801e692:	9d00      	ldr	r5, [sp, #0]
 801e694:	140b      	asrs	r3, r1, #16
 801e696:	fb04 5303 	mla	r3, r4, r3, r5
 801e69a:	1414      	asrs	r4, r2, #16
 801e69c:	5d1b      	ldrb	r3, [r3, r4]
 801e69e:	8804      	ldrh	r4, [r0, #0]
 801e6a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e6a4:	eb08 0503 	add.w	r5, r8, r3
 801e6a8:	f895 a002 	ldrb.w	sl, [r5, #2]
 801e6ac:	f895 9001 	ldrb.w	r9, [r5, #1]
 801e6b0:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 801e6b4:	fa5f fe8e 	uxtb.w	lr, lr
 801e6b8:	fb1e fe0c 	smulbb	lr, lr, ip
 801e6bc:	fb19 f90b 	smulbb	r9, r9, fp
 801e6c0:	fb1a fa0b 	smulbb	sl, sl, fp
 801e6c4:	f818 5003 	ldrb.w	r5, [r8, r3]
 801e6c8:	1223      	asrs	r3, r4, #8
 801e6ca:	10e4      	asrs	r4, r4, #3
 801e6cc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e6d0:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801e6d4:	fb05 e50b 	mla	r5, r5, fp, lr
 801e6d8:	fb03 aa0c 	mla	sl, r3, ip, sl
 801e6dc:	fb04 940c 	mla	r4, r4, ip, r9
 801e6e0:	b2ad      	uxth	r5, r5
 801e6e2:	fa1f fa8a 	uxth.w	sl, sl
 801e6e6:	b2a4      	uxth	r4, r4
 801e6e8:	f10a 0301 	add.w	r3, sl, #1
 801e6ec:	f105 0e01 	add.w	lr, r5, #1
 801e6f0:	f104 0901 	add.w	r9, r4, #1
 801e6f4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801e6f8:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 801e6fc:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801e700:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801e704:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801e708:	0964      	lsrs	r4, r4, #5
 801e70a:	ea43 030e 	orr.w	r3, r3, lr
 801e70e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801e712:	4323      	orrs	r3, r4
 801e714:	f820 3b02 	strh.w	r3, [r0], #2
 801e718:	9b01      	ldr	r3, [sp, #4]
 801e71a:	4439      	add	r1, r7
 801e71c:	4298      	cmp	r0, r3
 801e71e:	4432      	add	r2, r6
 801e720:	d1b4      	bne.n	801e68c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e722:	e6ef      	b.n	801e504 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e724:	2b00      	cmp	r3, #0
 801e726:	f77f aeed 	ble.w	801e504 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801e72a:	1414      	asrs	r4, r2, #16
 801e72c:	4680      	mov	r8, r0
 801e72e:	9401      	str	r4, [sp, #4]
 801e730:	4625      	mov	r5, r4
 801e732:	e72a      	b.n	801e58a <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>

0801e734 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e738:	4689      	mov	r9, r1
 801e73a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801e73e:	46ca      	mov	sl, r9
 801e740:	b087      	sub	sp, #28
 801e742:	9203      	str	r2, [sp, #12]
 801e744:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 801e748:	6854      	ldr	r4, [r2, #4]
 801e74a:	e9dd 0c17 	ldrd	r0, ip, [sp, #92]	; 0x5c
 801e74e:	fb04 1000 	mla	r0, r4, r0, r1
 801e752:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801e756:	6815      	ldr	r5, [r2, #0]
 801e758:	e9dc 2400 	ldrd	r2, r4, [ip]
 801e75c:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 801e760:	f104 0b04 	add.w	fp, r4, #4
 801e764:	9205      	str	r2, [sp, #20]
 801e766:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801e76a:	f1ba 0f00 	cmp.w	sl, #0
 801e76e:	dc03      	bgt.n	801e778 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e770:	9c03      	ldr	r4, [sp, #12]
 801e772:	2c00      	cmp	r4, #0
 801e774:	f340 8095 	ble.w	801e8a2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801e778:	e9dc e802 	ldrd	lr, r8, [ip, #8]
 801e77c:	2b00      	cmp	r3, #0
 801e77e:	fa0f f588 	sxth.w	r5, r8
 801e782:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e786:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e78a:	fa0f f48e 	sxth.w	r4, lr
 801e78e:	9502      	str	r5, [sp, #8]
 801e790:	f340 808a 	ble.w	801e8a8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e794:	46f1      	mov	r9, lr
 801e796:	9401      	str	r4, [sp, #4]
 801e798:	1415      	asrs	r5, r2, #16
 801e79a:	d408      	bmi.n	801e7ae <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e79c:	9c01      	ldr	r4, [sp, #4]
 801e79e:	42a5      	cmp	r5, r4
 801e7a0:	da05      	bge.n	801e7ae <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e7a2:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801e7a6:	d402      	bmi.n	801e7ae <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e7a8:	9c02      	ldr	r4, [sp, #8]
 801e7aa:	45a6      	cmp	lr, r4
 801e7ac:	db3b      	blt.n	801e826 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf2>
 801e7ae:	3b01      	subs	r3, #1
 801e7b0:	4432      	add	r2, r6
 801e7b2:	4439      	add	r1, r7
 801e7b4:	f100 0002 	add.w	r0, r0, #2
 801e7b8:	d1ee      	bne.n	801e798 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e7ba:	f1ba 0f00 	cmp.w	sl, #0
 801e7be:	dd70      	ble.n	801e8a2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801e7c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e7c4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e7c8:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801e7cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e7d0:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e7d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e7d8:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e7dc:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e7e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e7e4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e7e8:	ee16 2a90 	vmov	r2, s13
 801e7ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e7ee:	9c03      	ldr	r4, [sp, #12]
 801e7f0:	fb92 f6f3 	sdiv	r6, r2, r3
 801e7f4:	ee17 2a10 	vmov	r2, s14
 801e7f8:	eeb0 7a43 	vmov.f32	s14, s6
 801e7fc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e800:	ee17 1a10 	vmov	r1, s14
 801e804:	eeb0 7a62 	vmov.f32	s14, s5
 801e808:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e80c:	f1ba 0a01 	subs.w	sl, sl, #1
 801e810:	fb92 f7f3 	sdiv	r7, r2, r3
 801e814:	eeb0 3a67 	vmov.f32	s6, s15
 801e818:	ee17 2a10 	vmov	r2, s14
 801e81c:	eef0 2a46 	vmov.f32	s5, s12
 801e820:	bf08      	it	eq
 801e822:	4623      	moveq	r3, r4
 801e824:	e7a1      	b.n	801e76a <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e826:	9c01      	ldr	r4, [sp, #4]
 801e828:	9501      	str	r5, [sp, #4]
 801e82a:	1e5d      	subs	r5, r3, #1
 801e82c:	46ce      	mov	lr, r9
 801e82e:	fb05 2906 	mla	r9, r5, r6, r2
 801e832:	ea5f 4929 	movs.w	r9, r9, asr #16
 801e836:	9504      	str	r5, [sp, #16]
 801e838:	d53e      	bpl.n	801e8b8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801e83a:	4604      	mov	r4, r0
 801e83c:	9d01      	ldr	r5, [sp, #4]
 801e83e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e842:	4673      	mov	r3, lr
 801e844:	46b6      	mov	lr, r6
 801e846:	4646      	mov	r6, r8
 801e848:	e002      	b.n	801e850 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e84a:	1415      	asrs	r5, r2, #16
 801e84c:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801e850:	2d00      	cmp	r5, #0
 801e852:	4472      	add	r2, lr
 801e854:	db1e      	blt.n	801e894 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801e856:	429d      	cmp	r5, r3
 801e858:	da1c      	bge.n	801e894 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801e85a:	ea5f 4821 	movs.w	r8, r1, asr #16
 801e85e:	d419      	bmi.n	801e894 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801e860:	45b0      	cmp	r8, r6
 801e862:	da17      	bge.n	801e894 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801e864:	9e05      	ldr	r6, [sp, #20]
 801e866:	b21b      	sxth	r3, r3
 801e868:	fb08 6303 	mla	r3, r8, r3, r6
 801e86c:	5d5e      	ldrb	r6, [r3, r5]
 801e86e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e872:	eb0b 0306 	add.w	r3, fp, r6
 801e876:	785d      	ldrb	r5, [r3, #1]
 801e878:	789b      	ldrb	r3, [r3, #2]
 801e87a:	00ed      	lsls	r5, r5, #3
 801e87c:	f405 68fc 	and.w	r8, r5, #2016	; 0x7e0
 801e880:	4d2d      	ldr	r5, [pc, #180]	; (801e938 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>)
 801e882:	f81b 6006 	ldrb.w	r6, [fp, r6]
 801e886:	ea05 2303 	and.w	r3, r5, r3, lsl #8
 801e88a:	ea43 0308 	orr.w	r3, r3, r8
 801e88e:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
 801e892:	8023      	strh	r3, [r4, #0]
 801e894:	3402      	adds	r4, #2
 801e896:	4284      	cmp	r4, r0
 801e898:	4439      	add	r1, r7
 801e89a:	d1d6      	bne.n	801e84a <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e89c:	f1ba 0f00 	cmp.w	sl, #0
 801e8a0:	dc8e      	bgt.n	801e7c0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e8a2:	b007      	add	sp, #28
 801e8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8a8:	d087      	beq.n	801e7ba <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e8aa:	1e5d      	subs	r5, r3, #1
 801e8ac:	fb05 2906 	mla	r9, r5, r6, r2
 801e8b0:	ea5f 4929 	movs.w	r9, r9, asr #16
 801e8b4:	9504      	str	r5, [sp, #16]
 801e8b6:	d480      	bmi.n	801e7ba <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e8b8:	454c      	cmp	r4, r9
 801e8ba:	dd35      	ble.n	801e928 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e8bc:	9d04      	ldr	r5, [sp, #16]
 801e8be:	fb05 1507 	mla	r5, r5, r7, r1
 801e8c2:	ea5f 4925 	movs.w	r9, r5, asr #16
 801e8c6:	d42f      	bmi.n	801e928 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e8c8:	9d02      	ldr	r5, [sp, #8]
 801e8ca:	45a9      	cmp	r9, r5
 801e8cc:	da2c      	bge.n	801e928 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801e8ce:	2b00      	cmp	r3, #0
 801e8d0:	f77f af73 	ble.w	801e7ba <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e8d4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e8d8:	9d05      	ldr	r5, [sp, #20]
 801e8da:	4699      	mov	r9, r3
 801e8dc:	46a6      	mov	lr, r4
 801e8de:	e001      	b.n	801e8e4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801e8e0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e8e4:	140c      	asrs	r4, r1, #16
 801e8e6:	fb0e 5404 	mla	r4, lr, r4, r5
 801e8ea:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801e8ee:	f814 e00e 	ldrb.w	lr, [r4, lr]
 801e8f2:	4b11      	ldr	r3, [pc, #68]	; (801e938 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>)
 801e8f4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e8f8:	eb0b 040e 	add.w	r4, fp, lr
 801e8fc:	f894 8001 	ldrb.w	r8, [r4, #1]
 801e900:	78a4      	ldrb	r4, [r4, #2]
 801e902:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e906:	f81b e00e 	ldrb.w	lr, [fp, lr]
 801e90a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e90e:	ea03 2404 	and.w	r4, r3, r4, lsl #8
 801e912:	ea44 0408 	orr.w	r4, r4, r8
 801e916:	ea44 04de 	orr.w	r4, r4, lr, lsr #3
 801e91a:	f820 4b02 	strh.w	r4, [r0], #2
 801e91e:	4548      	cmp	r0, r9
 801e920:	4439      	add	r1, r7
 801e922:	4432      	add	r2, r6
 801e924:	d1dc      	bne.n	801e8e0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e926:	e748      	b.n	801e7ba <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e928:	2b00      	cmp	r3, #0
 801e92a:	f77f af46 	ble.w	801e7ba <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e92e:	1415      	asrs	r5, r2, #16
 801e930:	4604      	mov	r4, r0
 801e932:	9501      	str	r5, [sp, #4]
 801e934:	e783      	b.n	801e83e <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801e936:	bf00      	nop
 801e938:	fffff800 	.word	0xfffff800

0801e93c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e93c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801e940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e944:	b087      	sub	sp, #28
 801e946:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801e94a:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 801e94e:	e9dd 0b17 	ldrd	r0, fp, [sp, #92]	; 0x5c
 801e952:	6854      	ldr	r4, [r2, #4]
 801e954:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801e958:	fb04 1100 	mla	r1, r4, r0, r1
 801e95c:	e9dd 9a13 	ldrd	r9, sl, [sp, #76]	; 0x4c
 801e960:	6810      	ldr	r0, [r2, #0]
 801e962:	e9db 2400 	ldrd	r2, r4, [fp]
 801e966:	eb00 0e41 	add.w	lr, r0, r1, lsl #1
 801e96a:	1d21      	adds	r1, r4, #4
 801e96c:	9505      	str	r5, [sp, #20]
 801e96e:	9102      	str	r1, [sp, #8]
 801e970:	9201      	str	r2, [sp, #4]
 801e972:	e9dd 7211 	ldrd	r7, r2, [sp, #68]	; 0x44
 801e976:	9903      	ldr	r1, [sp, #12]
 801e978:	2900      	cmp	r1, #0
 801e97a:	dc03      	bgt.n	801e984 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e97c:	9904      	ldr	r1, [sp, #16]
 801e97e:	2900      	cmp	r1, #0
 801e980:	f340 80b6 	ble.w	801eaf0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e984:	e9db 4602 	ldrd	r4, r6, [fp, #8]
 801e988:	2b00      	cmp	r3, #0
 801e98a:	f507 4700 	add.w	r7, r7, #32768	; 0x8000
 801e98e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e992:	b221      	sxth	r1, r4
 801e994:	b235      	sxth	r5, r6
 801e996:	f340 80ae 	ble.w	801eaf6 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e99a:	1438      	asrs	r0, r7, #16
 801e99c:	d406      	bmi.n	801e9ac <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e99e:	4288      	cmp	r0, r1
 801e9a0:	da04      	bge.n	801e9ac <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e9a2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e9a6:	d401      	bmi.n	801e9ac <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e9a8:	45ac      	cmp	ip, r5
 801e9aa:	db3c      	blt.n	801ea26 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801e9ac:	3b01      	subs	r3, #1
 801e9ae:	444f      	add	r7, r9
 801e9b0:	4452      	add	r2, sl
 801e9b2:	f10e 0e02 	add.w	lr, lr, #2
 801e9b6:	d1f0      	bne.n	801e99a <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e9b8:	9b03      	ldr	r3, [sp, #12]
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	f340 8098 	ble.w	801eaf0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e9c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e9c4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e9c8:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801e9cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e9d0:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801e9d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e9d8:	ee76 6a62 	vsub.f32	s13, s12, s5
 801e9dc:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801e9e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e9e4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801e9e8:	ee16 2a90 	vmov	r2, s13
 801e9ec:	3b01      	subs	r3, #1
 801e9ee:	9303      	str	r3, [sp, #12]
 801e9f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e9f2:	9904      	ldr	r1, [sp, #16]
 801e9f4:	fb92 f9f3 	sdiv	r9, r2, r3
 801e9f8:	ee17 2a10 	vmov	r2, s14
 801e9fc:	eeb0 7a43 	vmov.f32	s14, s6
 801ea00:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ea04:	fb92 faf3 	sdiv	sl, r2, r3
 801ea08:	ee17 2a10 	vmov	r2, s14
 801ea0c:	eeb0 7a62 	vmov.f32	s14, s5
 801ea10:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ea14:	eeb0 3a67 	vmov.f32	s6, s15
 801ea18:	ee17 7a10 	vmov	r7, s14
 801ea1c:	eef0 2a46 	vmov.f32	s5, s12
 801ea20:	bf08      	it	eq
 801ea22:	460b      	moveq	r3, r1
 801ea24:	e7a7      	b.n	801e976 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ea26:	f103 38ff 	add.w	r8, r3, #4294967295
 801ea2a:	fb08 7c09 	mla	ip, r8, r9, r7
 801ea2e:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801ea32:	d56a      	bpl.n	801eb0a <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 801ea34:	4675      	mov	r5, lr
 801ea36:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 801ea3a:	e002      	b.n	801ea42 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801ea3c:	1438      	asrs	r0, r7, #16
 801ea3e:	e9db 4602 	ldrd	r4, r6, [fp, #8]
 801ea42:	2800      	cmp	r0, #0
 801ea44:	444f      	add	r7, r9
 801ea46:	db4b      	blt.n	801eae0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801ea48:	42a0      	cmp	r0, r4
 801ea4a:	da49      	bge.n	801eae0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801ea4c:	1413      	asrs	r3, r2, #16
 801ea4e:	d447      	bmi.n	801eae0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801ea50:	42b3      	cmp	r3, r6
 801ea52:	b224      	sxth	r4, r4
 801ea54:	da44      	bge.n	801eae0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801ea56:	9901      	ldr	r1, [sp, #4]
 801ea58:	fb03 1404 	mla	r4, r3, r4, r1
 801ea5c:	9902      	ldr	r1, [sp, #8]
 801ea5e:	5c23      	ldrb	r3, [r4, r0]
 801ea60:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801ea64:	0e0b      	lsrs	r3, r1, #24
 801ea66:	d03b      	beq.n	801eae0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801ea68:	9805      	ldr	r0, [sp, #20]
 801ea6a:	f3c1 4807 	ubfx	r8, r1, #16, #8
 801ea6e:	fb00 f003 	mul.w	r0, r0, r3
 801ea72:	1c43      	adds	r3, r0, #1
 801ea74:	eb03 2320 	add.w	r3, r3, r0, asr #8
 801ea78:	121b      	asrs	r3, r3, #8
 801ea7a:	43d8      	mvns	r0, r3
 801ea7c:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 801ea80:	b29b      	uxth	r3, r3
 801ea82:	b2c9      	uxtb	r1, r1
 801ea84:	882e      	ldrh	r6, [r5, #0]
 801ea86:	fb1c fc03 	smulbb	ip, ip, r3
 801ea8a:	fb18 f803 	smulbb	r8, r8, r3
 801ea8e:	fb11 f303 	smulbb	r3, r1, r3
 801ea92:	10f4      	asrs	r4, r6, #3
 801ea94:	1231      	asrs	r1, r6, #8
 801ea96:	00f6      	lsls	r6, r6, #3
 801ea98:	b2c0      	uxtb	r0, r0
 801ea9a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ea9e:	b2f6      	uxtb	r6, r6
 801eaa0:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801eaa4:	fb01 8800 	mla	r8, r1, r0, r8
 801eaa8:	fb04 c400 	mla	r4, r4, r0, ip
 801eaac:	fb06 3100 	mla	r1, r6, r0, r3
 801eab0:	fa1f fc88 	uxth.w	ip, r8
 801eab4:	b289      	uxth	r1, r1
 801eab6:	b2a4      	uxth	r4, r4
 801eab8:	1c4e      	adds	r6, r1, #1
 801eaba:	1c60      	adds	r0, r4, #1
 801eabc:	f10c 0301 	add.w	r3, ip, #1
 801eac0:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801eac4:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801eac8:	eb00 2114 	add.w	r1, r0, r4, lsr #8
 801eacc:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801ead0:	f3c6 20c4 	ubfx	r0, r6, #11, #5
 801ead4:	0949      	lsrs	r1, r1, #5
 801ead6:	4303      	orrs	r3, r0
 801ead8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801eadc:	430b      	orrs	r3, r1
 801eade:	802b      	strh	r3, [r5, #0]
 801eae0:	3502      	adds	r5, #2
 801eae2:	4575      	cmp	r5, lr
 801eae4:	4452      	add	r2, sl
 801eae6:	d1a9      	bne.n	801ea3c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801eae8:	9b03      	ldr	r3, [sp, #12]
 801eaea:	2b00      	cmp	r3, #0
 801eaec:	f73f af68 	bgt.w	801e9c0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eaf0:	b007      	add	sp, #28
 801eaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eaf6:	f43f af5f 	beq.w	801e9b8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801eafa:	f103 38ff 	add.w	r8, r3, #4294967295
 801eafe:	fb08 7c09 	mla	ip, r8, r9, r7
 801eb02:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801eb06:	f53f af57 	bmi.w	801e9b8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801eb0a:	4561      	cmp	r1, ip
 801eb0c:	dd5c      	ble.n	801ebc8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801eb0e:	fb08 280a 	mla	r8, r8, sl, r2
 801eb12:	ea5f 4828 	movs.w	r8, r8, asr #16
 801eb16:	d457      	bmi.n	801ebc8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801eb18:	45a8      	cmp	r8, r5
 801eb1a:	da55      	bge.n	801ebc8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	f77f af4b 	ble.w	801e9b8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801eb22:	eb0e 0843 	add.w	r8, lr, r3, lsl #1
 801eb26:	e001      	b.n	801eb2c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801eb28:	f9bb 1008 	ldrsh.w	r1, [fp, #8]
 801eb2c:	9801      	ldr	r0, [sp, #4]
 801eb2e:	1413      	asrs	r3, r2, #16
 801eb30:	fb01 0303 	mla	r3, r1, r3, r0
 801eb34:	1439      	asrs	r1, r7, #16
 801eb36:	5c5b      	ldrb	r3, [r3, r1]
 801eb38:	9902      	ldr	r1, [sp, #8]
 801eb3a:	444f      	add	r7, r9
 801eb3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801eb40:	4452      	add	r2, sl
 801eb42:	0e18      	lsrs	r0, r3, #24
 801eb44:	d03b      	beq.n	801ebbe <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801eb46:	9905      	ldr	r1, [sp, #20]
 801eb48:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801eb4c:	fb01 f100 	mul.w	r1, r1, r0
 801eb50:	1c48      	adds	r0, r1, #1
 801eb52:	eb00 2021 	add.w	r0, r0, r1, asr #8
 801eb56:	1200      	asrs	r0, r0, #8
 801eb58:	43c1      	mvns	r1, r0
 801eb5a:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801eb5e:	b280      	uxth	r0, r0
 801eb60:	b2db      	uxtb	r3, r3
 801eb62:	f8be 5000 	ldrh.w	r5, [lr]
 801eb66:	fb16 f600 	smulbb	r6, r6, r0
 801eb6a:	fb1c fc00 	smulbb	ip, ip, r0
 801eb6e:	fb13 f300 	smulbb	r3, r3, r0
 801eb72:	122c      	asrs	r4, r5, #8
 801eb74:	10e8      	asrs	r0, r5, #3
 801eb76:	00ed      	lsls	r5, r5, #3
 801eb78:	b2c9      	uxtb	r1, r1
 801eb7a:	b2ed      	uxtb	r5, r5
 801eb7c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801eb80:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801eb84:	fb00 6001 	mla	r0, r0, r1, r6
 801eb88:	fb05 3301 	mla	r3, r5, r1, r3
 801eb8c:	fb04 c401 	mla	r4, r4, r1, ip
 801eb90:	b280      	uxth	r0, r0
 801eb92:	b2a4      	uxth	r4, r4
 801eb94:	b29b      	uxth	r3, r3
 801eb96:	1c65      	adds	r5, r4, #1
 801eb98:	1c5e      	adds	r6, r3, #1
 801eb9a:	1c41      	adds	r1, r0, #1
 801eb9c:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801eba0:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801eba4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801eba8:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801ebac:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ebb0:	0949      	lsrs	r1, r1, #5
 801ebb2:	431c      	orrs	r4, r3
 801ebb4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ebb8:	430c      	orrs	r4, r1
 801ebba:	f8ae 4000 	strh.w	r4, [lr]
 801ebbe:	f10e 0e02 	add.w	lr, lr, #2
 801ebc2:	45c6      	cmp	lr, r8
 801ebc4:	d1b0      	bne.n	801eb28 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801ebc6:	e6f7      	b.n	801e9b8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ebc8:	2b00      	cmp	r3, #0
 801ebca:	f77f aef5 	ble.w	801e9b8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ebce:	4675      	mov	r5, lr
 801ebd0:	1438      	asrs	r0, r7, #16
 801ebd2:	e730      	b.n	801ea36 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>

0801ebd4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ebd4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801ebd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebdc:	b085      	sub	sp, #20
 801ebde:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801ebe2:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 801ebe6:	e9dd 0b15 	ldrd	r0, fp, [sp, #84]	; 0x54
 801ebea:	6854      	ldr	r4, [r2, #4]
 801ebec:	e9dd 9a11 	ldrd	r9, sl, [sp, #68]	; 0x44
 801ebf0:	fb04 1000 	mla	r0, r4, r0, r1
 801ebf4:	6814      	ldr	r4, [r2, #0]
 801ebf6:	e9db 2500 	ldrd	r2, r5, [fp]
 801ebfa:	eb04 0e40 	add.w	lr, r4, r0, lsl #1
 801ebfe:	1d28      	adds	r0, r5, #4
 801ec00:	9001      	str	r0, [sp, #4]
 801ec02:	9200      	str	r2, [sp, #0]
 801ec04:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
 801ec08:	9802      	ldr	r0, [sp, #8]
 801ec0a:	2800      	cmp	r0, #0
 801ec0c:	dc03      	bgt.n	801ec16 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ec0e:	9803      	ldr	r0, [sp, #12]
 801ec10:	2800      	cmp	r0, #0
 801ec12:	f340 80b8 	ble.w	801ed86 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801ec16:	e9db 5602 	ldrd	r5, r6, [fp, #8]
 801ec1a:	2b00      	cmp	r3, #0
 801ec1c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801ec20:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ec24:	b228      	sxth	r0, r5
 801ec26:	b237      	sxth	r7, r6
 801ec28:	f340 80b0 	ble.w	801ed8c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801ec2c:	140c      	asrs	r4, r1, #16
 801ec2e:	d406      	bmi.n	801ec3e <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ec30:	4284      	cmp	r4, r0
 801ec32:	da04      	bge.n	801ec3e <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ec34:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ec38:	d401      	bmi.n	801ec3e <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ec3a:	45bc      	cmp	ip, r7
 801ec3c:	db3c      	blt.n	801ecb8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801ec3e:	3b01      	subs	r3, #1
 801ec40:	4449      	add	r1, r9
 801ec42:	4452      	add	r2, sl
 801ec44:	f10e 0e02 	add.w	lr, lr, #2
 801ec48:	d1f0      	bne.n	801ec2c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801ec4a:	9b02      	ldr	r3, [sp, #8]
 801ec4c:	2b00      	cmp	r3, #0
 801ec4e:	f340 809a 	ble.w	801ed86 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801ec52:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ec56:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ec5a:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801ec5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ec62:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801ec66:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ec6a:	ee76 6a62 	vsub.f32	s13, s12, s5
 801ec6e:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801ec72:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ec76:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ec7a:	ee16 2a90 	vmov	r2, s13
 801ec7e:	3b01      	subs	r3, #1
 801ec80:	9302      	str	r3, [sp, #8]
 801ec82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec84:	9803      	ldr	r0, [sp, #12]
 801ec86:	fb92 f9f3 	sdiv	r9, r2, r3
 801ec8a:	ee17 2a10 	vmov	r2, s14
 801ec8e:	eeb0 7a43 	vmov.f32	s14, s6
 801ec92:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ec96:	fb92 faf3 	sdiv	sl, r2, r3
 801ec9a:	ee17 2a10 	vmov	r2, s14
 801ec9e:	eeb0 7a62 	vmov.f32	s14, s5
 801eca2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801eca6:	eeb0 3a67 	vmov.f32	s6, s15
 801ecaa:	ee17 1a10 	vmov	r1, s14
 801ecae:	eef0 2a46 	vmov.f32	s5, s12
 801ecb2:	bf08      	it	eq
 801ecb4:	4603      	moveq	r3, r0
 801ecb6:	e7a7      	b.n	801ec08 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ecb8:	f103 38ff 	add.w	r8, r3, #4294967295
 801ecbc:	fb08 1c09 	mla	ip, r8, r9, r1
 801ecc0:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801ecc4:	d56c      	bpl.n	801eda0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 801ecc6:	4677      	mov	r7, lr
 801ecc8:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 801eccc:	e002      	b.n	801ecd4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801ecce:	140c      	asrs	r4, r1, #16
 801ecd0:	e9db 5602 	ldrd	r5, r6, [fp, #8]
 801ecd4:	2c00      	cmp	r4, #0
 801ecd6:	db4d      	blt.n	801ed74 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801ecd8:	42ac      	cmp	r4, r5
 801ecda:	da4b      	bge.n	801ed74 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801ecdc:	1413      	asrs	r3, r2, #16
 801ecde:	d449      	bmi.n	801ed74 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801ece0:	42b3      	cmp	r3, r6
 801ece2:	b22d      	sxth	r5, r5
 801ece4:	da46      	bge.n	801ed74 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801ece6:	9800      	ldr	r0, [sp, #0]
 801ece8:	fb03 0505 	mla	r5, r3, r5, r0
 801ecec:	9801      	ldr	r0, [sp, #4]
 801ecee:	5d2b      	ldrb	r3, [r5, r4]
 801ecf0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801ecf4:	0e18      	lsrs	r0, r3, #24
 801ecf6:	28ff      	cmp	r0, #255	; 0xff
 801ecf8:	f000 80c0 	beq.w	801ee7c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801ecfc:	b2c4      	uxtb	r4, r0
 801ecfe:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801ed02:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801ed06:	b2a5      	uxth	r5, r4
 801ed08:	b2db      	uxtb	r3, r3
 801ed0a:	b398      	cbz	r0, 801ed74 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801ed0c:	43e4      	mvns	r4, r4
 801ed0e:	f8b7 8000 	ldrh.w	r8, [r7]
 801ed12:	fb16 f605 	smulbb	r6, r6, r5
 801ed16:	fb1c fc05 	smulbb	ip, ip, r5
 801ed1a:	fb13 f505 	smulbb	r5, r3, r5
 801ed1e:	ea4f 2028 	mov.w	r0, r8, asr #8
 801ed22:	b2e3      	uxtb	r3, r4
 801ed24:	ea4f 04e8 	mov.w	r4, r8, asr #3
 801ed28:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ed2c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ed30:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801ed34:	fa5f f888 	uxtb.w	r8, r8
 801ed38:	fb04 6403 	mla	r4, r4, r3, r6
 801ed3c:	fb00 cc03 	mla	ip, r0, r3, ip
 801ed40:	fb08 5303 	mla	r3, r8, r3, r5
 801ed44:	fa1f fc8c 	uxth.w	ip, ip
 801ed48:	b298      	uxth	r0, r3
 801ed4a:	b2a5      	uxth	r5, r4
 801ed4c:	f10c 0301 	add.w	r3, ip, #1
 801ed50:	1c44      	adds	r4, r0, #1
 801ed52:	1c6e      	adds	r6, r5, #1
 801ed54:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801ed58:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801ed5c:	eb06 2015 	add.w	r0, r6, r5, lsr #8
 801ed60:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801ed64:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801ed68:	0940      	lsrs	r0, r0, #5
 801ed6a:	4323      	orrs	r3, r4
 801ed6c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ed70:	4303      	orrs	r3, r0
 801ed72:	803b      	strh	r3, [r7, #0]
 801ed74:	3702      	adds	r7, #2
 801ed76:	4577      	cmp	r7, lr
 801ed78:	4449      	add	r1, r9
 801ed7a:	4452      	add	r2, sl
 801ed7c:	d1a7      	bne.n	801ecce <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801ed7e:	9b02      	ldr	r3, [sp, #8]
 801ed80:	2b00      	cmp	r3, #0
 801ed82:	f73f af66 	bgt.w	801ec52 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ed86:	b005      	add	sp, #20
 801ed88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed8c:	f43f af5d 	beq.w	801ec4a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ed90:	f103 38ff 	add.w	r8, r3, #4294967295
 801ed94:	fb08 1c09 	mla	ip, r8, r9, r1
 801ed98:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801ed9c:	f53f af55 	bmi.w	801ec4a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801eda0:	4560      	cmp	r0, ip
 801eda2:	dd65      	ble.n	801ee70 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801eda4:	fb08 280a 	mla	r8, r8, sl, r2
 801eda8:	ea5f 4828 	movs.w	r8, r8, asr #16
 801edac:	d460      	bmi.n	801ee70 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801edae:	45b8      	cmp	r8, r7
 801edb0:	da5e      	bge.n	801ee70 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801edb2:	2b00      	cmp	r3, #0
 801edb4:	f77f af49 	ble.w	801ec4a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801edb8:	eb0e 0843 	add.w	r8, lr, r3, lsl #1
 801edbc:	e03f      	b.n	801ee3e <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801edbe:	b2f0      	uxtb	r0, r6
 801edc0:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801edc4:	f3c3 2707 	ubfx	r7, r3, #8, #8
 801edc8:	b284      	uxth	r4, r0
 801edca:	b2db      	uxtb	r3, r3
 801edcc:	b376      	cbz	r6, 801ee2c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801edce:	43c0      	mvns	r0, r0
 801edd0:	f8be 6000 	ldrh.w	r6, [lr]
 801edd4:	fb17 f704 	smulbb	r7, r7, r4
 801edd8:	fb1c fc04 	smulbb	ip, ip, r4
 801eddc:	fb13 f304 	smulbb	r3, r3, r4
 801ede0:	1235      	asrs	r5, r6, #8
 801ede2:	10f4      	asrs	r4, r6, #3
 801ede4:	00f6      	lsls	r6, r6, #3
 801ede6:	b2c0      	uxtb	r0, r0
 801ede8:	b2f6      	uxtb	r6, r6
 801edea:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801edee:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801edf2:	fb04 7400 	mla	r4, r4, r0, r7
 801edf6:	fb06 3300 	mla	r3, r6, r0, r3
 801edfa:	fb05 c500 	mla	r5, r5, r0, ip
 801edfe:	b2a4      	uxth	r4, r4
 801ee00:	b2ad      	uxth	r5, r5
 801ee02:	b29b      	uxth	r3, r3
 801ee04:	1c6e      	adds	r6, r5, #1
 801ee06:	1c5f      	adds	r7, r3, #1
 801ee08:	1c60      	adds	r0, r4, #1
 801ee0a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801ee0e:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801ee12:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801ee16:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ee1a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ee1e:	0940      	lsrs	r0, r0, #5
 801ee20:	432b      	orrs	r3, r5
 801ee22:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ee26:	4303      	orrs	r3, r0
 801ee28:	f8ae 3000 	strh.w	r3, [lr]
 801ee2c:	f10e 0e02 	add.w	lr, lr, #2
 801ee30:	45c6      	cmp	lr, r8
 801ee32:	4449      	add	r1, r9
 801ee34:	4452      	add	r2, sl
 801ee36:	f43f af08 	beq.w	801ec4a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ee3a:	f9bb 0008 	ldrsh.w	r0, [fp, #8]
 801ee3e:	9c00      	ldr	r4, [sp, #0]
 801ee40:	1413      	asrs	r3, r2, #16
 801ee42:	fb00 4303 	mla	r3, r0, r3, r4
 801ee46:	1408      	asrs	r0, r1, #16
 801ee48:	5c1b      	ldrb	r3, [r3, r0]
 801ee4a:	9801      	ldr	r0, [sp, #4]
 801ee4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801ee50:	0e1e      	lsrs	r6, r3, #24
 801ee52:	2eff      	cmp	r6, #255	; 0xff
 801ee54:	d1b3      	bne.n	801edbe <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ee56:	0958      	lsrs	r0, r3, #5
 801ee58:	f400 64fc 	and.w	r4, r0, #2016	; 0x7e0
 801ee5c:	480d      	ldr	r0, [pc, #52]	; (801ee94 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801ee5e:	ea00 2013 	and.w	r0, r0, r3, lsr #8
 801ee62:	4320      	orrs	r0, r4
 801ee64:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801ee68:	4303      	orrs	r3, r0
 801ee6a:	f8ae 3000 	strh.w	r3, [lr]
 801ee6e:	e7dd      	b.n	801ee2c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801ee70:	2b00      	cmp	r3, #0
 801ee72:	f77f aeea 	ble.w	801ec4a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ee76:	4677      	mov	r7, lr
 801ee78:	140c      	asrs	r4, r1, #16
 801ee7a:	e725      	b.n	801ecc8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801ee7c:	0958      	lsrs	r0, r3, #5
 801ee7e:	f400 64fc 	and.w	r4, r0, #2016	; 0x7e0
 801ee82:	4804      	ldr	r0, [pc, #16]	; (801ee94 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801ee84:	ea00 2013 	and.w	r0, r0, r3, lsr #8
 801ee88:	4320      	orrs	r0, r4
 801ee8a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801ee8e:	4303      	orrs	r3, r0
 801ee90:	803b      	strh	r3, [r7, #0]
 801ee92:	e76f      	b.n	801ed74 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801ee94:	fffff800 	.word	0xfffff800

0801ee98 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ee98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee9c:	b089      	sub	sp, #36	; 0x24
 801ee9e:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 801eea2:	9104      	str	r1, [sp, #16]
 801eea4:	ea6f 0c05 	mvn.w	ip, r5
 801eea8:	e9dd 4117 	ldrd	r4, r1, [sp, #92]	; 0x5c
 801eeac:	e9dd 6715 	ldrd	r6, r7, [sp, #84]	; 0x54
 801eeb0:	6860      	ldr	r0, [r4, #4]
 801eeb2:	9205      	str	r2, [sp, #20]
 801eeb4:	e9dd 2b19 	ldrd	r2, fp, [sp, #100]	; 0x64
 801eeb8:	fb00 1102 	mla	r1, r0, r2, r1
 801eebc:	6824      	ldr	r4, [r4, #0]
 801eebe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801eec2:	4421      	add	r1, r4
 801eec4:	f8db 4004 	ldr.w	r4, [fp, #4]
 801eec8:	f8db 2000 	ldr.w	r2, [fp]
 801eecc:	3404      	adds	r4, #4
 801eece:	fa5f fc8c 	uxtb.w	ip, ip
 801eed2:	fa1f f985 	uxth.w	r9, r5
 801eed6:	9407      	str	r4, [sp, #28]
 801eed8:	9202      	str	r2, [sp, #8]
 801eeda:	e9dd 2013 	ldrd	r2, r0, [sp, #76]	; 0x4c
 801eede:	9c04      	ldr	r4, [sp, #16]
 801eee0:	2c00      	cmp	r4, #0
 801eee2:	dc03      	bgt.n	801eeec <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801eee4:	9c05      	ldr	r4, [sp, #20]
 801eee6:	2c00      	cmp	r4, #0
 801eee8:	f340 80b1 	ble.w	801f04e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801eeec:	e9db e802 	ldrd	lr, r8, [fp, #8]
 801eef0:	2b00      	cmp	r3, #0
 801eef2:	fa0f f588 	sxth.w	r5, r8
 801eef6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801eefa:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 801eefe:	fa0f f48e 	sxth.w	r4, lr
 801ef02:	9503      	str	r5, [sp, #12]
 801ef04:	f340 80a6 	ble.w	801f054 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801ef08:	46f2      	mov	sl, lr
 801ef0a:	9401      	str	r4, [sp, #4]
 801ef0c:	1415      	asrs	r5, r2, #16
 801ef0e:	d408      	bmi.n	801ef22 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ef10:	9c01      	ldr	r4, [sp, #4]
 801ef12:	42a5      	cmp	r5, r4
 801ef14:	da05      	bge.n	801ef22 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ef16:	ea5f 4e20 	movs.w	lr, r0, asr #16
 801ef1a:	d402      	bmi.n	801ef22 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ef1c:	9c03      	ldr	r4, [sp, #12]
 801ef1e:	45a6      	cmp	lr, r4
 801ef20:	db3e      	blt.n	801efa0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801ef22:	3b01      	subs	r3, #1
 801ef24:	4432      	add	r2, r6
 801ef26:	4438      	add	r0, r7
 801ef28:	f101 0103 	add.w	r1, r1, #3
 801ef2c:	d1ee      	bne.n	801ef0c <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ef2e:	9b04      	ldr	r3, [sp, #16]
 801ef30:	2b00      	cmp	r3, #0
 801ef32:	f340 808c 	ble.w	801f04e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801ef36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ef3a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ef3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ef42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ef46:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ef4a:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801ef4e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ef52:	ee76 6a62 	vsub.f32	s13, s12, s5
 801ef56:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801ef5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ef5e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ef62:	ee16 2a90 	vmov	r2, s13
 801ef66:	3b01      	subs	r3, #1
 801ef68:	9304      	str	r3, [sp, #16]
 801ef6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ef6c:	9c05      	ldr	r4, [sp, #20]
 801ef6e:	fb92 f6f3 	sdiv	r6, r2, r3
 801ef72:	ee17 2a10 	vmov	r2, s14
 801ef76:	eeb0 7a43 	vmov.f32	s14, s6
 801ef7a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ef7e:	ee17 0a10 	vmov	r0, s14
 801ef82:	eeb0 7a62 	vmov.f32	s14, s5
 801ef86:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ef8a:	fb92 f7f3 	sdiv	r7, r2, r3
 801ef8e:	eeb0 3a67 	vmov.f32	s6, s15
 801ef92:	ee17 2a10 	vmov	r2, s14
 801ef96:	eef0 2a46 	vmov.f32	s5, s12
 801ef9a:	bf08      	it	eq
 801ef9c:	4623      	moveq	r3, r4
 801ef9e:	e79e      	b.n	801eede <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801efa0:	9506      	str	r5, [sp, #24]
 801efa2:	1e5d      	subs	r5, r3, #1
 801efa4:	46d6      	mov	lr, sl
 801efa6:	fb05 2a06 	mla	sl, r5, r6, r2
 801efaa:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801efae:	9c01      	ldr	r4, [sp, #4]
 801efb0:	9501      	str	r5, [sp, #4]
 801efb2:	d559      	bpl.n	801f068 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801efb4:	460c      	mov	r4, r1
 801efb6:	9d06      	ldr	r5, [sp, #24]
 801efb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801efbc:	4419      	add	r1, r3
 801efbe:	4673      	mov	r3, lr
 801efc0:	46b6      	mov	lr, r6
 801efc2:	4646      	mov	r6, r8
 801efc4:	e002      	b.n	801efcc <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801efc6:	1415      	asrs	r5, r2, #16
 801efc8:	e9db 3602 	ldrd	r3, r6, [fp, #8]
 801efcc:	2d00      	cmp	r5, #0
 801efce:	4472      	add	r2, lr
 801efd0:	db35      	blt.n	801f03e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801efd2:	429d      	cmp	r5, r3
 801efd4:	da33      	bge.n	801f03e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801efd6:	ea5f 4820 	movs.w	r8, r0, asr #16
 801efda:	d430      	bmi.n	801f03e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801efdc:	45b0      	cmp	r8, r6
 801efde:	b21b      	sxth	r3, r3
 801efe0:	da2d      	bge.n	801f03e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801efe2:	9e02      	ldr	r6, [sp, #8]
 801efe4:	fb08 6303 	mla	r3, r8, r3, r6
 801efe8:	7826      	ldrb	r6, [r4, #0]
 801efea:	5d5b      	ldrb	r3, [r3, r5]
 801efec:	fb16 f80c 	smulbb	r8, r6, ip
 801eff0:	9d07      	ldr	r5, [sp, #28]
 801eff2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eff6:	5cee      	ldrb	r6, [r5, r3]
 801eff8:	442b      	add	r3, r5
 801effa:	fb06 8609 	mla	r6, r6, r9, r8
 801effe:	b2b6      	uxth	r6, r6
 801f000:	7865      	ldrb	r5, [r4, #1]
 801f002:	f106 0801 	add.w	r8, r6, #1
 801f006:	eb08 2616 	add.w	r6, r8, r6, lsr #8
 801f00a:	1236      	asrs	r6, r6, #8
 801f00c:	fb15 f80c 	smulbb	r8, r5, ip
 801f010:	7026      	strb	r6, [r4, #0]
 801f012:	785d      	ldrb	r5, [r3, #1]
 801f014:	78a6      	ldrb	r6, [r4, #2]
 801f016:	fb05 8509 	mla	r5, r5, r9, r8
 801f01a:	b2ad      	uxth	r5, r5
 801f01c:	f105 0801 	add.w	r8, r5, #1
 801f020:	eb08 2515 	add.w	r5, r8, r5, lsr #8
 801f024:	122d      	asrs	r5, r5, #8
 801f026:	fb16 f60c 	smulbb	r6, r6, ip
 801f02a:	7065      	strb	r5, [r4, #1]
 801f02c:	789b      	ldrb	r3, [r3, #2]
 801f02e:	fb03 6309 	mla	r3, r3, r9, r6
 801f032:	b29b      	uxth	r3, r3
 801f034:	1c5d      	adds	r5, r3, #1
 801f036:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801f03a:	121b      	asrs	r3, r3, #8
 801f03c:	70a3      	strb	r3, [r4, #2]
 801f03e:	3403      	adds	r4, #3
 801f040:	428c      	cmp	r4, r1
 801f042:	4438      	add	r0, r7
 801f044:	d1bf      	bne.n	801efc6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 801f046:	9b04      	ldr	r3, [sp, #16]
 801f048:	2b00      	cmp	r3, #0
 801f04a:	f73f af74 	bgt.w	801ef36 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f04e:	b009      	add	sp, #36	; 0x24
 801f050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f054:	f43f af6b 	beq.w	801ef2e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f058:	1e5d      	subs	r5, r3, #1
 801f05a:	fb05 2a06 	mla	sl, r5, r6, r2
 801f05e:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801f062:	9501      	str	r5, [sp, #4]
 801f064:	f53f af63 	bmi.w	801ef2e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f068:	4554      	cmp	r4, sl
 801f06a:	dd54      	ble.n	801f116 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f06c:	9d01      	ldr	r5, [sp, #4]
 801f06e:	fb05 0507 	mla	r5, r5, r7, r0
 801f072:	ea5f 4a25 	movs.w	sl, r5, asr #16
 801f076:	d44e      	bmi.n	801f116 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f078:	9d03      	ldr	r5, [sp, #12]
 801f07a:	45aa      	cmp	sl, r5
 801f07c:	da4b      	bge.n	801f116 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f07e:	2b00      	cmp	r3, #0
 801f080:	f77f af55 	ble.w	801ef2e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f084:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f088:	eb01 0e03 	add.w	lr, r1, r3
 801f08c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801f090:	3103      	adds	r1, #3
 801f092:	e002      	b.n	801f09a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f094:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801f098:	3103      	adds	r1, #3
 801f09a:	9d02      	ldr	r5, [sp, #8]
 801f09c:	1403      	asrs	r3, r0, #16
 801f09e:	fb04 5303 	mla	r3, r4, r3, r5
 801f0a2:	1415      	asrs	r5, r2, #16
 801f0a4:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 801f0a8:	5d5b      	ldrb	r3, [r3, r5]
 801f0aa:	fb14 f40c 	smulbb	r4, r4, ip
 801f0ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f0b2:	f818 5003 	ldrb.w	r5, [r8, r3]
 801f0b6:	4443      	add	r3, r8
 801f0b8:	fb05 4509 	mla	r5, r5, r9, r4
 801f0bc:	b2ad      	uxth	r5, r5
 801f0be:	f105 0a01 	add.w	sl, r5, #1
 801f0c2:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 801f0c6:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801f0ca:	122d      	asrs	r5, r5, #8
 801f0cc:	fb14 f40c 	smulbb	r4, r4, ip
 801f0d0:	f801 5c03 	strb.w	r5, [r1, #-3]
 801f0d4:	785d      	ldrb	r5, [r3, #1]
 801f0d6:	f811 ac01 	ldrb.w	sl, [r1, #-1]
 801f0da:	fb05 4409 	mla	r4, r5, r9, r4
 801f0de:	b2a4      	uxth	r4, r4
 801f0e0:	1c65      	adds	r5, r4, #1
 801f0e2:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801f0e6:	1224      	asrs	r4, r4, #8
 801f0e8:	fb1a fa0c 	smulbb	sl, sl, ip
 801f0ec:	f801 4c02 	strb.w	r4, [r1, #-2]
 801f0f0:	789b      	ldrb	r3, [r3, #2]
 801f0f2:	458e      	cmp	lr, r1
 801f0f4:	fb03 aa09 	mla	sl, r3, r9, sl
 801f0f8:	fa1f fa8a 	uxth.w	sl, sl
 801f0fc:	f10a 0301 	add.w	r3, sl, #1
 801f100:	eb03 2a1a 	add.w	sl, r3, sl, lsr #8
 801f104:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f108:	4438      	add	r0, r7
 801f10a:	4432      	add	r2, r6
 801f10c:	f801 ac01 	strb.w	sl, [r1, #-1]
 801f110:	d1c0      	bne.n	801f094 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f112:	4671      	mov	r1, lr
 801f114:	e70b      	b.n	801ef2e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f116:	2b00      	cmp	r3, #0
 801f118:	f77f af09 	ble.w	801ef2e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f11c:	1415      	asrs	r5, r2, #16
 801f11e:	460c      	mov	r4, r1
 801f120:	9506      	str	r5, [sp, #24]
 801f122:	e749      	b.n	801efb8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>

0801f124 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f128:	4689      	mov	r9, r1
 801f12a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801f12e:	46c8      	mov	r8, r9
 801f130:	b087      	sub	sp, #28
 801f132:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801f136:	684c      	ldr	r4, [r1, #4]
 801f138:	9203      	str	r2, [sp, #12]
 801f13a:	e9dd 2c17 	ldrd	r2, ip, [sp, #92]	; 0x5c
 801f13e:	fb04 0202 	mla	r2, r4, r2, r0
 801f142:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801f146:	680d      	ldr	r5, [r1, #0]
 801f148:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801f14c:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801f150:	f8dc 2000 	ldr.w	r2, [ip]
 801f154:	4428      	add	r0, r5
 801f156:	f104 0b04 	add.w	fp, r4, #4
 801f15a:	9205      	str	r2, [sp, #20]
 801f15c:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801f160:	f1b8 0f00 	cmp.w	r8, #0
 801f164:	dc03      	bgt.n	801f16e <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f166:	9c03      	ldr	r4, [sp, #12]
 801f168:	2c00      	cmp	r4, #0
 801f16a:	f340 808d 	ble.w	801f288 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f16e:	e9dc ea02 	ldrd	lr, sl, [ip, #8]
 801f172:	2b00      	cmp	r3, #0
 801f174:	fa0f f58a 	sxth.w	r5, sl
 801f178:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f17c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801f180:	fa0f f48e 	sxth.w	r4, lr
 801f184:	9502      	str	r5, [sp, #8]
 801f186:	f340 8082 	ble.w	801f28e <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801f18a:	46f1      	mov	r9, lr
 801f18c:	9401      	str	r4, [sp, #4]
 801f18e:	1415      	asrs	r5, r2, #16
 801f190:	d408      	bmi.n	801f1a4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f192:	9c01      	ldr	r4, [sp, #4]
 801f194:	42a5      	cmp	r5, r4
 801f196:	da05      	bge.n	801f1a4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f198:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801f19c:	d402      	bmi.n	801f1a4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f19e:	9c02      	ldr	r4, [sp, #8]
 801f1a0:	45a6      	cmp	lr, r4
 801f1a2:	db3b      	blt.n	801f21c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801f1a4:	3b01      	subs	r3, #1
 801f1a6:	4432      	add	r2, r6
 801f1a8:	4439      	add	r1, r7
 801f1aa:	f100 0003 	add.w	r0, r0, #3
 801f1ae:	d1ee      	bne.n	801f18e <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f1b0:	f1b8 0f00 	cmp.w	r8, #0
 801f1b4:	dd68      	ble.n	801f288 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f1b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f1ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f1be:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801f1c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f1c6:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801f1ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f1ce:	ee76 6a62 	vsub.f32	s13, s12, s5
 801f1d2:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801f1d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f1da:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f1de:	ee16 2a90 	vmov	r2, s13
 801f1e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f1e4:	9c03      	ldr	r4, [sp, #12]
 801f1e6:	fb92 f6f3 	sdiv	r6, r2, r3
 801f1ea:	ee17 2a10 	vmov	r2, s14
 801f1ee:	eeb0 7a43 	vmov.f32	s14, s6
 801f1f2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f1f6:	ee17 1a10 	vmov	r1, s14
 801f1fa:	eeb0 7a62 	vmov.f32	s14, s5
 801f1fe:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f202:	f1b8 0801 	subs.w	r8, r8, #1
 801f206:	fb92 f7f3 	sdiv	r7, r2, r3
 801f20a:	eeb0 3a67 	vmov.f32	s6, s15
 801f20e:	ee17 2a10 	vmov	r2, s14
 801f212:	eef0 2a46 	vmov.f32	s5, s12
 801f216:	bf08      	it	eq
 801f218:	4623      	moveq	r3, r4
 801f21a:	e7a1      	b.n	801f160 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f21c:	9c01      	ldr	r4, [sp, #4]
 801f21e:	9501      	str	r5, [sp, #4]
 801f220:	1e5d      	subs	r5, r3, #1
 801f222:	46ce      	mov	lr, r9
 801f224:	fb06 2905 	mla	r9, r6, r5, r2
 801f228:	ea5f 4929 	movs.w	r9, r9, asr #16
 801f22c:	9504      	str	r5, [sp, #16]
 801f22e:	d536      	bpl.n	801f29e <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801f230:	4604      	mov	r4, r0
 801f232:	9d01      	ldr	r5, [sp, #4]
 801f234:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f238:	4418      	add	r0, r3
 801f23a:	4673      	mov	r3, lr
 801f23c:	46b6      	mov	lr, r6
 801f23e:	4656      	mov	r6, sl
 801f240:	e002      	b.n	801f248 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801f242:	1415      	asrs	r5, r2, #16
 801f244:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801f248:	2d00      	cmp	r5, #0
 801f24a:	4472      	add	r2, lr
 801f24c:	db15      	blt.n	801f27a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f24e:	429d      	cmp	r5, r3
 801f250:	da13      	bge.n	801f27a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f252:	ea5f 4921 	movs.w	r9, r1, asr #16
 801f256:	d410      	bmi.n	801f27a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f258:	45b1      	cmp	r9, r6
 801f25a:	da0e      	bge.n	801f27a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f25c:	9e05      	ldr	r6, [sp, #20]
 801f25e:	b21b      	sxth	r3, r3
 801f260:	fb09 6303 	mla	r3, r9, r3, r6
 801f264:	5d5b      	ldrb	r3, [r3, r5]
 801f266:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f26a:	f81b 5003 	ldrb.w	r5, [fp, r3]
 801f26e:	445b      	add	r3, fp
 801f270:	7025      	strb	r5, [r4, #0]
 801f272:	785d      	ldrb	r5, [r3, #1]
 801f274:	7065      	strb	r5, [r4, #1]
 801f276:	789b      	ldrb	r3, [r3, #2]
 801f278:	70a3      	strb	r3, [r4, #2]
 801f27a:	3403      	adds	r4, #3
 801f27c:	4284      	cmp	r4, r0
 801f27e:	4439      	add	r1, r7
 801f280:	d1df      	bne.n	801f242 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f282:	f1b8 0f00 	cmp.w	r8, #0
 801f286:	dc96      	bgt.n	801f1b6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f288:	b007      	add	sp, #28
 801f28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f28e:	d08f      	beq.n	801f1b0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f290:	1e5d      	subs	r5, r3, #1
 801f292:	fb06 2905 	mla	r9, r6, r5, r2
 801f296:	ea5f 4929 	movs.w	r9, r9, asr #16
 801f29a:	9504      	str	r5, [sp, #16]
 801f29c:	d488      	bmi.n	801f1b0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f29e:	45a1      	cmp	r9, r4
 801f2a0:	da2d      	bge.n	801f2fe <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801f2a2:	9d04      	ldr	r5, [sp, #16]
 801f2a4:	fb07 1505 	mla	r5, r7, r5, r1
 801f2a8:	ea5f 4925 	movs.w	r9, r5, asr #16
 801f2ac:	d427      	bmi.n	801f2fe <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801f2ae:	9d02      	ldr	r5, [sp, #8]
 801f2b0:	454d      	cmp	r5, r9
 801f2b2:	dd24      	ble.n	801f2fe <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801f2b4:	2b00      	cmp	r3, #0
 801f2b6:	f77f af7b 	ble.w	801f1b0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f2ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f2be:	18c5      	adds	r5, r0, r3
 801f2c0:	f8dd e014 	ldr.w	lr, [sp, #20]
 801f2c4:	3003      	adds	r0, #3
 801f2c6:	e002      	b.n	801f2ce <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801f2c8:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 801f2cc:	3003      	adds	r0, #3
 801f2ce:	140b      	asrs	r3, r1, #16
 801f2d0:	fb04 e303 	mla	r3, r4, r3, lr
 801f2d4:	1414      	asrs	r4, r2, #16
 801f2d6:	5d1b      	ldrb	r3, [r3, r4]
 801f2d8:	4285      	cmp	r5, r0
 801f2da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f2de:	f81b 4003 	ldrb.w	r4, [fp, r3]
 801f2e2:	445b      	add	r3, fp
 801f2e4:	f800 4c03 	strb.w	r4, [r0, #-3]
 801f2e8:	785c      	ldrb	r4, [r3, #1]
 801f2ea:	4439      	add	r1, r7
 801f2ec:	f800 4c02 	strb.w	r4, [r0, #-2]
 801f2f0:	789b      	ldrb	r3, [r3, #2]
 801f2f2:	4432      	add	r2, r6
 801f2f4:	f800 3c01 	strb.w	r3, [r0, #-1]
 801f2f8:	d1e6      	bne.n	801f2c8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f2fa:	4628      	mov	r0, r5
 801f2fc:	e758      	b.n	801f1b0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f2fe:	2b00      	cmp	r3, #0
 801f300:	f77f af56 	ble.w	801f1b0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f304:	1415      	asrs	r5, r2, #16
 801f306:	4604      	mov	r4, r0
 801f308:	9501      	str	r5, [sp, #4]
 801f30a:	e793      	b.n	801f234 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>

0801f30c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f310:	b087      	sub	sp, #28
 801f312:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801f316:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801f31a:	e9dd 2c17 	ldrd	r2, ip, [sp, #92]	; 0x5c
 801f31e:	684c      	ldr	r4, [r1, #4]
 801f320:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801f324:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801f328:	fb04 0202 	mla	r2, r4, r2, r0
 801f32c:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 801f330:	f8dc 2000 	ldr.w	r2, [ip]
 801f334:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801f338:	9201      	str	r2, [sp, #4]
 801f33a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f33e:	6808      	ldr	r0, [r1, #0]
 801f340:	9204      	str	r2, [sp, #16]
 801f342:	1d22      	adds	r2, r4, #4
 801f344:	e9dd e111 	ldrd	lr, r1, [sp, #68]	; 0x44
 801f348:	9205      	str	r2, [sp, #20]
 801f34a:	4672      	mov	r2, lr
 801f34c:	4428      	add	r0, r5
 801f34e:	9c02      	ldr	r4, [sp, #8]
 801f350:	2c00      	cmp	r4, #0
 801f352:	dc03      	bgt.n	801f35c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801f354:	9c03      	ldr	r4, [sp, #12]
 801f356:	2c00      	cmp	r4, #0
 801f358:	f340 80ba 	ble.w	801f4d0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801f35c:	e9dc e802 	ldrd	lr, r8, [ip, #8]
 801f360:	2b00      	cmp	r3, #0
 801f362:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f366:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801f36a:	fa0f f48e 	sxth.w	r4, lr
 801f36e:	fa0f f988 	sxth.w	r9, r8
 801f372:	f340 80b0 	ble.w	801f4d6 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801f376:	1415      	asrs	r5, r2, #16
 801f378:	d406      	bmi.n	801f388 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f37a:	42a5      	cmp	r5, r4
 801f37c:	da04      	bge.n	801f388 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f37e:	ea5f 4a21 	movs.w	sl, r1, asr #16
 801f382:	d401      	bmi.n	801f388 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f384:	45ca      	cmp	sl, r9
 801f386:	db3c      	blt.n	801f402 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801f388:	3b01      	subs	r3, #1
 801f38a:	4432      	add	r2, r6
 801f38c:	4439      	add	r1, r7
 801f38e:	f100 0003 	add.w	r0, r0, #3
 801f392:	d1f0      	bne.n	801f376 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f394:	9b02      	ldr	r3, [sp, #8]
 801f396:	2b00      	cmp	r3, #0
 801f398:	f340 809a 	ble.w	801f4d0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801f39c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f3a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f3a4:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801f3a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f3ac:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801f3b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f3b4:	ee76 6a62 	vsub.f32	s13, s12, s5
 801f3b8:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801f3bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3c0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f3c4:	ee16 2a90 	vmov	r2, s13
 801f3c8:	3b01      	subs	r3, #1
 801f3ca:	9302      	str	r3, [sp, #8]
 801f3cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f3ce:	9c03      	ldr	r4, [sp, #12]
 801f3d0:	fb92 f6f3 	sdiv	r6, r2, r3
 801f3d4:	ee17 2a10 	vmov	r2, s14
 801f3d8:	eeb0 7a43 	vmov.f32	s14, s6
 801f3dc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f3e0:	ee17 1a10 	vmov	r1, s14
 801f3e4:	eeb0 7a62 	vmov.f32	s14, s5
 801f3e8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f3ec:	fb92 f7f3 	sdiv	r7, r2, r3
 801f3f0:	eeb0 3a67 	vmov.f32	s6, s15
 801f3f4:	ee17 2a10 	vmov	r2, s14
 801f3f8:	eef0 2a46 	vmov.f32	s5, s12
 801f3fc:	bf08      	it	eq
 801f3fe:	4623      	moveq	r3, r4
 801f400:	e7a5      	b.n	801f34e <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801f402:	f103 3bff 	add.w	fp, r3, #4294967295
 801f406:	fb0b 2a06 	mla	sl, fp, r6, r2
 801f40a:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801f40e:	d56c      	bpl.n	801f4ea <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801f410:	4604      	mov	r4, r0
 801f412:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f416:	4418      	add	r0, r3
 801f418:	4673      	mov	r3, lr
 801f41a:	46b6      	mov	lr, r6
 801f41c:	4646      	mov	r6, r8
 801f41e:	e002      	b.n	801f426 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801f420:	1415      	asrs	r5, r2, #16
 801f422:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801f426:	2d00      	cmp	r5, #0
 801f428:	4472      	add	r2, lr
 801f42a:	db49      	blt.n	801f4c0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f42c:	429d      	cmp	r5, r3
 801f42e:	da47      	bge.n	801f4c0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f430:	ea5f 4821 	movs.w	r8, r1, asr #16
 801f434:	d444      	bmi.n	801f4c0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f436:	45b0      	cmp	r8, r6
 801f438:	b21b      	sxth	r3, r3
 801f43a:	da41      	bge.n	801f4c0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f43c:	9e01      	ldr	r6, [sp, #4]
 801f43e:	fb08 6303 	mla	r3, r8, r3, r6
 801f442:	5d5b      	ldrb	r3, [r3, r5]
 801f444:	9d05      	ldr	r5, [sp, #20]
 801f446:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f44a:	0e1d      	lsrs	r5, r3, #24
 801f44c:	d038      	beq.n	801f4c0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f44e:	9e04      	ldr	r6, [sp, #16]
 801f450:	fa5f f983 	uxtb.w	r9, r3
 801f454:	fb06 f605 	mul.w	r6, r6, r5
 801f458:	1c75      	adds	r5, r6, #1
 801f45a:	eb05 2526 	add.w	r5, r5, r6, asr #8
 801f45e:	122d      	asrs	r5, r5, #8
 801f460:	43ee      	mvns	r6, r5
 801f462:	b2ad      	uxth	r5, r5
 801f464:	fb19 f905 	smulbb	r9, r9, r5
 801f468:	f3c3 2807 	ubfx	r8, r3, #8, #8
 801f46c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f470:	f894 a000 	ldrb.w	sl, [r4]
 801f474:	fb18 f805 	smulbb	r8, r8, r5
 801f478:	fb13 f305 	smulbb	r3, r3, r5
 801f47c:	b2f5      	uxtb	r5, r6
 801f47e:	fb0a 9605 	mla	r6, sl, r5, r9
 801f482:	f894 b001 	ldrb.w	fp, [r4, #1]
 801f486:	f894 9002 	ldrb.w	r9, [r4, #2]
 801f48a:	fb0b 8805 	mla	r8, fp, r5, r8
 801f48e:	fb09 3305 	mla	r3, r9, r5, r3
 801f492:	fa1f fa86 	uxth.w	sl, r6
 801f496:	fa1f f888 	uxth.w	r8, r8
 801f49a:	b29b      	uxth	r3, r3
 801f49c:	f10a 0601 	add.w	r6, sl, #1
 801f4a0:	f108 0501 	add.w	r5, r8, #1
 801f4a4:	f103 0901 	add.w	r9, r3, #1
 801f4a8:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 801f4ac:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 801f4b0:	eb09 2313 	add.w	r3, r9, r3, lsr #8
 801f4b4:	1236      	asrs	r6, r6, #8
 801f4b6:	122d      	asrs	r5, r5, #8
 801f4b8:	121b      	asrs	r3, r3, #8
 801f4ba:	7026      	strb	r6, [r4, #0]
 801f4bc:	7065      	strb	r5, [r4, #1]
 801f4be:	70a3      	strb	r3, [r4, #2]
 801f4c0:	3403      	adds	r4, #3
 801f4c2:	4284      	cmp	r4, r0
 801f4c4:	4439      	add	r1, r7
 801f4c6:	d1ab      	bne.n	801f420 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f4c8:	9b02      	ldr	r3, [sp, #8]
 801f4ca:	2b00      	cmp	r3, #0
 801f4cc:	f73f af66 	bgt.w	801f39c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f4d0:	b007      	add	sp, #28
 801f4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4d6:	f43f af5d 	beq.w	801f394 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f4da:	f103 3bff 	add.w	fp, r3, #4294967295
 801f4de:	fb0b 2a06 	mla	sl, fp, r6, r2
 801f4e2:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801f4e6:	f53f af55 	bmi.w	801f394 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f4ea:	4554      	cmp	r4, sl
 801f4ec:	dd64      	ble.n	801f5b8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801f4ee:	fb0b 1b07 	mla	fp, fp, r7, r1
 801f4f2:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801f4f6:	d45f      	bmi.n	801f5b8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801f4f8:	45cb      	cmp	fp, r9
 801f4fa:	da5d      	bge.n	801f5b8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801f4fc:	2b00      	cmp	r3, #0
 801f4fe:	f77f af49 	ble.w	801f394 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f502:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f506:	eb00 0e03 	add.w	lr, r0, r3
 801f50a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801f50e:	3003      	adds	r0, #3
 801f510:	e002      	b.n	801f518 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801f512:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 801f516:	3003      	adds	r0, #3
 801f518:	9d01      	ldr	r5, [sp, #4]
 801f51a:	140b      	asrs	r3, r1, #16
 801f51c:	fb04 5303 	mla	r3, r4, r3, r5
 801f520:	1414      	asrs	r4, r2, #16
 801f522:	5d1b      	ldrb	r3, [r3, r4]
 801f524:	4432      	add	r2, r6
 801f526:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801f52a:	4439      	add	r1, r7
 801f52c:	ea5f 6a13 	movs.w	sl, r3, lsr #24
 801f530:	d03e      	beq.n	801f5b0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801f532:	9c04      	ldr	r4, [sp, #16]
 801f534:	fa5f f983 	uxtb.w	r9, r3
 801f538:	fb04 f40a 	mul.w	r4, r4, sl
 801f53c:	f104 0a01 	add.w	sl, r4, #1
 801f540:	eb0a 2a24 	add.w	sl, sl, r4, asr #8
 801f544:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f548:	ea6f 040a 	mvn.w	r4, sl
 801f54c:	fa1f fa8a 	uxth.w	sl, sl
 801f550:	fb19 f90a 	smulbb	r9, r9, sl
 801f554:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801f558:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f55c:	fb15 fb0a 	smulbb	fp, r5, sl
 801f560:	fb13 f30a 	smulbb	r3, r3, sl
 801f564:	f810 ac03 	ldrb.w	sl, [r0, #-3]
 801f568:	b2e4      	uxtb	r4, r4
 801f56a:	fb0a 9904 	mla	r9, sl, r4, r9
 801f56e:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 801f572:	f810 ac01 	ldrb.w	sl, [r0, #-1]
 801f576:	fb05 b504 	mla	r5, r5, r4, fp
 801f57a:	fb0a 3304 	mla	r3, sl, r4, r3
 801f57e:	fa1f f989 	uxth.w	r9, r9
 801f582:	b2ad      	uxth	r5, r5
 801f584:	b29b      	uxth	r3, r3
 801f586:	f109 0b01 	add.w	fp, r9, #1
 801f58a:	f105 0a01 	add.w	sl, r5, #1
 801f58e:	1c5c      	adds	r4, r3, #1
 801f590:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f594:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801f598:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f59c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f5a0:	122d      	asrs	r5, r5, #8
 801f5a2:	121b      	asrs	r3, r3, #8
 801f5a4:	f800 9c03 	strb.w	r9, [r0, #-3]
 801f5a8:	f800 5c02 	strb.w	r5, [r0, #-2]
 801f5ac:	f800 3c01 	strb.w	r3, [r0, #-1]
 801f5b0:	4586      	cmp	lr, r0
 801f5b2:	d1ae      	bne.n	801f512 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f5b4:	4670      	mov	r0, lr
 801f5b6:	e6ed      	b.n	801f394 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f5b8:	2b00      	cmp	r3, #0
 801f5ba:	f77f aeeb 	ble.w	801f394 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f5be:	4604      	mov	r4, r0
 801f5c0:	1415      	asrs	r5, r2, #16
 801f5c2:	e726      	b.n	801f412 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>

0801f5c4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f5c4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801f5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5cc:	b087      	sub	sp, #28
 801f5ce:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801f5d2:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	; 0x54
 801f5d6:	e9dd 2b17 	ldrd	r2, fp, [sp, #92]	; 0x5c
 801f5da:	684c      	ldr	r4, [r1, #4]
 801f5dc:	680d      	ldr	r5, [r1, #0]
 801f5de:	fb04 0202 	mla	r2, r4, r2, r0
 801f5e2:	e9dd 8913 	ldrd	r8, r9, [sp, #76]	; 0x4c
 801f5e6:	f8db 4004 	ldr.w	r4, [fp, #4]
 801f5ea:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801f5ee:	3404      	adds	r4, #4
 801f5f0:	f8db 2000 	ldr.w	r2, [fp]
 801f5f4:	4428      	add	r0, r5
 801f5f6:	9402      	str	r4, [sp, #8]
 801f5f8:	9201      	str	r2, [sp, #4]
 801f5fa:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801f5fe:	9c03      	ldr	r4, [sp, #12]
 801f600:	2c00      	cmp	r4, #0
 801f602:	dc03      	bgt.n	801f60c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f604:	9c04      	ldr	r4, [sp, #16]
 801f606:	2c00      	cmp	r4, #0
 801f608:	f340 80b7 	ble.w	801f77a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801f60c:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801f610:	2b00      	cmp	r3, #0
 801f612:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f616:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801f61a:	b234      	sxth	r4, r6
 801f61c:	fa0f fc87 	sxth.w	ip, r7
 801f620:	f340 80ae 	ble.w	801f780 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801f624:	1415      	asrs	r5, r2, #16
 801f626:	d406      	bmi.n	801f636 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f628:	42a5      	cmp	r5, r4
 801f62a:	da04      	bge.n	801f636 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f62c:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801f630:	d401      	bmi.n	801f636 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f632:	45e6      	cmp	lr, ip
 801f634:	db3c      	blt.n	801f6b0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xec>
 801f636:	3b01      	subs	r3, #1
 801f638:	4442      	add	r2, r8
 801f63a:	4449      	add	r1, r9
 801f63c:	f100 0003 	add.w	r0, r0, #3
 801f640:	d1f0      	bne.n	801f624 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f642:	9b03      	ldr	r3, [sp, #12]
 801f644:	2b00      	cmp	r3, #0
 801f646:	f340 8098 	ble.w	801f77a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801f64a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f64e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f652:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801f656:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f65a:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801f65e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f662:	ee76 6a62 	vsub.f32	s13, s12, s5
 801f666:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801f66a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f66e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f672:	ee16 2a90 	vmov	r2, s13
 801f676:	3b01      	subs	r3, #1
 801f678:	9303      	str	r3, [sp, #12]
 801f67a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f67c:	9c04      	ldr	r4, [sp, #16]
 801f67e:	fb92 f8f3 	sdiv	r8, r2, r3
 801f682:	ee17 2a10 	vmov	r2, s14
 801f686:	eeb0 7a43 	vmov.f32	s14, s6
 801f68a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f68e:	ee17 1a10 	vmov	r1, s14
 801f692:	eeb0 7a62 	vmov.f32	s14, s5
 801f696:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f69a:	fb92 f9f3 	sdiv	r9, r2, r3
 801f69e:	eeb0 3a67 	vmov.f32	s6, s15
 801f6a2:	ee17 2a10 	vmov	r2, s14
 801f6a6:	eef0 2a46 	vmov.f32	s5, s12
 801f6aa:	bf08      	it	eq
 801f6ac:	4623      	moveq	r3, r4
 801f6ae:	e7a6      	b.n	801f5fe <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f6b0:	f103 3aff 	add.w	sl, r3, #4294967295
 801f6b4:	fb0a 2e08 	mla	lr, sl, r8, r2
 801f6b8:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801f6bc:	d56a      	bpl.n	801f794 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801f6be:	4604      	mov	r4, r0
 801f6c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f6c4:	4418      	add	r0, r3
 801f6c6:	e002      	b.n	801f6ce <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801f6c8:	1415      	asrs	r5, r2, #16
 801f6ca:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801f6ce:	2d00      	cmp	r5, #0
 801f6d0:	db4a      	blt.n	801f768 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f6d2:	42b5      	cmp	r5, r6
 801f6d4:	da48      	bge.n	801f768 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f6d6:	140b      	asrs	r3, r1, #16
 801f6d8:	d446      	bmi.n	801f768 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f6da:	42bb      	cmp	r3, r7
 801f6dc:	b236      	sxth	r6, r6
 801f6de:	da43      	bge.n	801f768 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f6e0:	9f01      	ldr	r7, [sp, #4]
 801f6e2:	fb03 7606 	mla	r6, r3, r6, r7
 801f6e6:	5d73      	ldrb	r3, [r6, r5]
 801f6e8:	9d02      	ldr	r5, [sp, #8]
 801f6ea:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f6ee:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f6f2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f6f6:	f000 80be 	beq.w	801f876 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 801f6fa:	b2df      	uxtb	r7, r3
 801f6fc:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801f700:	f3c3 4a07 	ubfx	sl, r3, #16, #8
 801f704:	fa5f f38c 	uxtb.w	r3, ip
 801f708:	b29d      	uxth	r5, r3
 801f70a:	f1bc 0f00 	cmp.w	ip, #0
 801f70e:	d02b      	beq.n	801f768 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f710:	43db      	mvns	r3, r3
 801f712:	b2db      	uxtb	r3, r3
 801f714:	9305      	str	r3, [sp, #20]
 801f716:	f894 e001 	ldrb.w	lr, [r4, #1]
 801f71a:	fb17 f305 	smulbb	r3, r7, r5
 801f71e:	9f05      	ldr	r7, [sp, #20]
 801f720:	f894 c002 	ldrb.w	ip, [r4, #2]
 801f724:	fb1e fe07 	smulbb	lr, lr, r7
 801f728:	fb1c fc07 	smulbb	ip, ip, r7
 801f72c:	fb06 ee05 	mla	lr, r6, r5, lr
 801f730:	7827      	ldrb	r7, [r4, #0]
 801f732:	9e05      	ldr	r6, [sp, #20]
 801f734:	fb0a c505 	mla	r5, sl, r5, ip
 801f738:	fb07 3706 	mla	r7, r7, r6, r3
 801f73c:	b2ab      	uxth	r3, r5
 801f73e:	b2bf      	uxth	r7, r7
 801f740:	fa1f f68e 	uxth.w	r6, lr
 801f744:	1c7d      	adds	r5, r7, #1
 801f746:	f106 0e01 	add.w	lr, r6, #1
 801f74a:	f103 0c01 	add.w	ip, r3, #1
 801f74e:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801f752:	eb0c 2613 	add.w	r6, ip, r3, lsr #8
 801f756:	eb05 2317 	add.w	r3, r5, r7, lsr #8
 801f75a:	121b      	asrs	r3, r3, #8
 801f75c:	ea4f 272e 	mov.w	r7, lr, asr #8
 801f760:	1235      	asrs	r5, r6, #8
 801f762:	7067      	strb	r7, [r4, #1]
 801f764:	70a5      	strb	r5, [r4, #2]
 801f766:	7023      	strb	r3, [r4, #0]
 801f768:	3403      	adds	r4, #3
 801f76a:	4284      	cmp	r4, r0
 801f76c:	4442      	add	r2, r8
 801f76e:	4449      	add	r1, r9
 801f770:	d1aa      	bne.n	801f6c8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801f772:	9b03      	ldr	r3, [sp, #12]
 801f774:	2b00      	cmp	r3, #0
 801f776:	f73f af68 	bgt.w	801f64a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f77a:	b007      	add	sp, #28
 801f77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f780:	f43f af5f 	beq.w	801f642 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f784:	f103 3aff 	add.w	sl, r3, #4294967295
 801f788:	fb0a 2e08 	mla	lr, sl, r8, r2
 801f78c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801f790:	f53f af57 	bmi.w	801f642 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f794:	4574      	cmp	r4, lr
 801f796:	dd68      	ble.n	801f86a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f798:	fb0a 1a09 	mla	sl, sl, r9, r1
 801f79c:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801f7a0:	d463      	bmi.n	801f86a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f7a2:	45e2      	cmp	sl, ip
 801f7a4:	da61      	bge.n	801f86a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f7a6:	2b00      	cmp	r3, #0
 801f7a8:	f77f af4b 	ble.w	801f642 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f7ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f7b0:	eb00 0e03 	add.w	lr, r0, r3
 801f7b4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801f7b8:	3003      	adds	r0, #3
 801f7ba:	e03b      	b.n	801f834 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 801f7bc:	b2fc      	uxtb	r4, r7
 801f7be:	fa5f fc83 	uxtb.w	ip, r3
 801f7c2:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801f7c6:	b2a5      	uxth	r5, r4
 801f7c8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f7cc:	b357      	cbz	r7, 801f824 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801f7ce:	43e4      	mvns	r4, r4
 801f7d0:	f810 ac02 	ldrb.w	sl, [r0, #-2]
 801f7d4:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801f7d8:	b2e4      	uxtb	r4, r4
 801f7da:	fb1c fc05 	smulbb	ip, ip, r5
 801f7de:	fb18 f804 	smulbb	r8, r8, r4
 801f7e2:	fb1a fa04 	smulbb	sl, sl, r4
 801f7e6:	f810 7c03 	ldrb.w	r7, [r0, #-3]
 801f7ea:	fb03 8305 	mla	r3, r3, r5, r8
 801f7ee:	fb06 a605 	mla	r6, r6, r5, sl
 801f7f2:	fb07 c404 	mla	r4, r7, r4, ip
 801f7f6:	b2b6      	uxth	r6, r6
 801f7f8:	b2a4      	uxth	r4, r4
 801f7fa:	b29b      	uxth	r3, r3
 801f7fc:	f106 0c01 	add.w	ip, r6, #1
 801f800:	f103 0801 	add.w	r8, r3, #1
 801f804:	1c65      	adds	r5, r4, #1
 801f806:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f80a:	eb08 2313 	add.w	r3, r8, r3, lsr #8
 801f80e:	eb05 2514 	add.w	r5, r5, r4, lsr #8
 801f812:	1236      	asrs	r6, r6, #8
 801f814:	121b      	asrs	r3, r3, #8
 801f816:	122d      	asrs	r5, r5, #8
 801f818:	f800 6c02 	strb.w	r6, [r0, #-2]
 801f81c:	f800 3c01 	strb.w	r3, [r0, #-1]
 801f820:	f800 5c03 	strb.w	r5, [r0, #-3]
 801f824:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f826:	4586      	cmp	lr, r0
 801f828:	441a      	add	r2, r3
 801f82a:	4449      	add	r1, r9
 801f82c:	d01b      	beq.n	801f866 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f82e:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801f832:	3003      	adds	r0, #3
 801f834:	9d01      	ldr	r5, [sp, #4]
 801f836:	140b      	asrs	r3, r1, #16
 801f838:	fb04 5303 	mla	r3, r4, r3, r5
 801f83c:	1414      	asrs	r4, r2, #16
 801f83e:	5d1b      	ldrb	r3, [r3, r4]
 801f840:	9c02      	ldr	r4, [sp, #8]
 801f842:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801f846:	0e1f      	lsrs	r7, r3, #24
 801f848:	2fff      	cmp	r7, #255	; 0xff
 801f84a:	d1b7      	bne.n	801f7bc <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801f84c:	0a1d      	lsrs	r5, r3, #8
 801f84e:	0c1c      	lsrs	r4, r3, #16
 801f850:	f800 3c03 	strb.w	r3, [r0, #-3]
 801f854:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f856:	4586      	cmp	lr, r0
 801f858:	f800 5c02 	strb.w	r5, [r0, #-2]
 801f85c:	f800 4c01 	strb.w	r4, [r0, #-1]
 801f860:	441a      	add	r2, r3
 801f862:	4449      	add	r1, r9
 801f864:	d1e3      	bne.n	801f82e <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801f866:	4670      	mov	r0, lr
 801f868:	e6eb      	b.n	801f642 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f86a:	2b00      	cmp	r3, #0
 801f86c:	f77f aee9 	ble.w	801f642 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f870:	4604      	mov	r4, r0
 801f872:	1415      	asrs	r5, r2, #16
 801f874:	e724      	b.n	801f6c0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801f876:	0a1e      	lsrs	r6, r3, #8
 801f878:	0c1d      	lsrs	r5, r3, #16
 801f87a:	7023      	strb	r3, [r4, #0]
 801f87c:	7066      	strb	r6, [r4, #1]
 801f87e:	70a5      	strb	r5, [r4, #2]
 801f880:	e772      	b.n	801f768 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f882:	bf00      	nop

0801f884 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f888:	b089      	sub	sp, #36	; 0x24
 801f88a:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 801f88e:	9101      	str	r1, [sp, #4]
 801f890:	ea6f 0a00 	mvn.w	sl, r0
 801f894:	e9dd e815 	ldrd	lr, r8, [sp, #84]	; 0x54
 801f898:	9919      	ldr	r1, [sp, #100]	; 0x64
 801f89a:	9202      	str	r2, [sp, #8]
 801f89c:	e9dd 5217 	ldrd	r5, r2, [sp, #92]	; 0x5c
 801f8a0:	686c      	ldr	r4, [r5, #4]
 801f8a2:	682f      	ldr	r7, [r5, #0]
 801f8a4:	fb04 2401 	mla	r4, r4, r1, r2
 801f8a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f8aa:	b280      	uxth	r0, r0
 801f8ac:	e9d2 2100 	ldrd	r2, r1, [r2]
 801f8b0:	3104      	adds	r1, #4
 801f8b2:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 801f8b6:	fa5f fa8a 	uxtb.w	sl, sl
 801f8ba:	9007      	str	r0, [sp, #28]
 801f8bc:	9105      	str	r1, [sp, #20]
 801f8be:	9200      	str	r2, [sp, #0]
 801f8c0:	e9dd 2513 	ldrd	r2, r5, [sp, #76]	; 0x4c
 801f8c4:	9901      	ldr	r1, [sp, #4]
 801f8c6:	2900      	cmp	r1, #0
 801f8c8:	dc03      	bgt.n	801f8d2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801f8ca:	9902      	ldr	r1, [sp, #8]
 801f8cc:	2900      	cmp	r1, #0
 801f8ce:	f340 80b6 	ble.w	801fa3e <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f8d2:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f8d4:	2b00      	cmp	r3, #0
 801f8d6:	e9d1 4602 	ldrd	r4, r6, [r1, #8]
 801f8da:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f8de:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 801f8e2:	b221      	sxth	r1, r4
 801f8e4:	fa0f fc86 	sxth.w	ip, r6
 801f8e8:	f340 80ac 	ble.w	801fa44 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801f8ec:	1410      	asrs	r0, r2, #16
 801f8ee:	d406      	bmi.n	801f8fe <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f8f0:	4288      	cmp	r0, r1
 801f8f2:	da04      	bge.n	801f8fe <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f8f4:	ea5f 4925 	movs.w	r9, r5, asr #16
 801f8f8:	d401      	bmi.n	801f8fe <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f8fa:	45e1      	cmp	r9, ip
 801f8fc:	db3e      	blt.n	801f97c <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801f8fe:	3b01      	subs	r3, #1
 801f900:	4472      	add	r2, lr
 801f902:	4445      	add	r5, r8
 801f904:	f107 0704 	add.w	r7, r7, #4
 801f908:	d1f0      	bne.n	801f8ec <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f90a:	9b01      	ldr	r3, [sp, #4]
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	f340 8096 	ble.w	801fa3e <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f916:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f91a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f91e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f922:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f926:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801f92a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f92e:	ee76 6a62 	vsub.f32	s13, s12, s5
 801f932:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801f936:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f93a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f93e:	ee16 2a90 	vmov	r2, s13
 801f942:	3b01      	subs	r3, #1
 801f944:	9301      	str	r3, [sp, #4]
 801f946:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f948:	9902      	ldr	r1, [sp, #8]
 801f94a:	fb92 fef3 	sdiv	lr, r2, r3
 801f94e:	ee17 2a10 	vmov	r2, s14
 801f952:	eeb0 7a43 	vmov.f32	s14, s6
 801f956:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f95a:	ee17 5a10 	vmov	r5, s14
 801f95e:	eeb0 7a62 	vmov.f32	s14, s5
 801f962:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801f966:	fb92 f8f3 	sdiv	r8, r2, r3
 801f96a:	eeb0 3a67 	vmov.f32	s6, s15
 801f96e:	ee17 2a10 	vmov	r2, s14
 801f972:	eef0 2a46 	vmov.f32	s5, s12
 801f976:	bf08      	it	eq
 801f978:	460b      	moveq	r3, r1
 801f97a:	e7a3      	b.n	801f8c4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f97c:	f103 39ff 	add.w	r9, r3, #4294967295
 801f980:	fb09 2b0e 	mla	fp, r9, lr, r2
 801f984:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801f988:	d566      	bpl.n	801fa58 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f98a:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801f98e:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f990:	e002      	b.n	801f998 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f992:	1410      	asrs	r0, r2, #16
 801f994:	e9d1 4602 	ldrd	r4, r6, [r1, #8]
 801f998:	2800      	cmp	r0, #0
 801f99a:	f109 39ff 	add.w	r9, r9, #4294967295
 801f99e:	4472      	add	r2, lr
 801f9a0:	db3f      	blt.n	801fa22 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f9a2:	42a0      	cmp	r0, r4
 801f9a4:	da3d      	bge.n	801fa22 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f9a6:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801f9aa:	d43a      	bmi.n	801fa22 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f9ac:	45b4      	cmp	ip, r6
 801f9ae:	da38      	bge.n	801fa22 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f9b0:	9e00      	ldr	r6, [sp, #0]
 801f9b2:	b224      	sxth	r4, r4
 801f9b4:	fb0c 6404 	mla	r4, ip, r4, r6
 801f9b8:	f814 b000 	ldrb.w	fp, [r4, r0]
 801f9bc:	7838      	ldrb	r0, [r7, #0]
 801f9be:	9c05      	ldr	r4, [sp, #20]
 801f9c0:	fb10 f30a 	smulbb	r3, r0, sl
 801f9c4:	9306      	str	r3, [sp, #24]
 801f9c6:	9b07      	ldr	r3, [sp, #28]
 801f9c8:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801f9cc:	4618      	mov	r0, r3
 801f9ce:	eb04 060b 	add.w	r6, r4, fp
 801f9d2:	78b4      	ldrb	r4, [r6, #2]
 801f9d4:	7876      	ldrb	r6, [r6, #1]
 801f9d6:	fb14 fc03 	smulbb	ip, r4, r3
 801f9da:	9c05      	ldr	r4, [sp, #20]
 801f9dc:	fb16 f603 	smulbb	r6, r6, r3
 801f9e0:	f814 400b 	ldrb.w	r4, [r4, fp]
 801f9e4:	9b06      	ldr	r3, [sp, #24]
 801f9e6:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f9ea:	fb04 3000 	mla	r0, r4, r0, r3
 801f9ee:	78bc      	ldrb	r4, [r7, #2]
 801f9f0:	fb0b 660a 	mla	r6, fp, sl, r6
 801f9f4:	fb04 c40a 	mla	r4, r4, sl, ip
 801f9f8:	b2b6      	uxth	r6, r6
 801f9fa:	b280      	uxth	r0, r0
 801f9fc:	b2a4      	uxth	r4, r4
 801f9fe:	f106 0c01 	add.w	ip, r6, #1
 801fa02:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801fa06:	f104 0b01 	add.w	fp, r4, #1
 801fa0a:	f100 0c01 	add.w	ip, r0, #1
 801fa0e:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801fa12:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 801fa16:	1236      	asrs	r6, r6, #8
 801fa18:	1224      	asrs	r4, r4, #8
 801fa1a:	1200      	asrs	r0, r0, #8
 801fa1c:	707e      	strb	r6, [r7, #1]
 801fa1e:	70bc      	strb	r4, [r7, #2]
 801fa20:	7038      	strb	r0, [r7, #0]
 801fa22:	f1b9 3fff 	cmp.w	r9, #4294967295
 801fa26:	f107 0704 	add.w	r7, r7, #4
 801fa2a:	4445      	add	r5, r8
 801fa2c:	d1b1      	bne.n	801f992 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801fa2e:	e9dd b303 	ldrd	fp, r3, [sp, #12]
 801fa32:	eb0b 0783 	add.w	r7, fp, r3, lsl #2
 801fa36:	9b01      	ldr	r3, [sp, #4]
 801fa38:	2b00      	cmp	r3, #0
 801fa3a:	f73f af6a 	bgt.w	801f912 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fa3e:	b009      	add	sp, #36	; 0x24
 801fa40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa44:	f43f af61 	beq.w	801f90a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fa48:	f103 39ff 	add.w	r9, r3, #4294967295
 801fa4c:	fb09 2b0e 	mla	fp, r9, lr, r2
 801fa50:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801fa54:	f53f af59 	bmi.w	801f90a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fa58:	4559      	cmp	r1, fp
 801fa5a:	dd57      	ble.n	801fb0c <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801fa5c:	fb09 5008 	mla	r0, r9, r8, r5
 801fa60:	1400      	asrs	r0, r0, #16
 801fa62:	d453      	bmi.n	801fb0c <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801fa64:	4560      	cmp	r0, ip
 801fa66:	da51      	bge.n	801fb0c <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801fa68:	2b00      	cmp	r3, #0
 801fa6a:	f77f af4e 	ble.w	801f90a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fa6e:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801fa72:	f107 0c04 	add.w	ip, r7, #4
 801fa76:	f8dd b014 	ldr.w	fp, [sp, #20]
 801fa7a:	460b      	mov	r3, r1
 801fa7c:	9f07      	ldr	r7, [sp, #28]
 801fa7e:	e002      	b.n	801fa86 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801fa80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801fa82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801fa86:	9800      	ldr	r0, [sp, #0]
 801fa88:	1429      	asrs	r1, r5, #16
 801fa8a:	fb03 0301 	mla	r3, r3, r1, r0
 801fa8e:	1411      	asrs	r1, r2, #16
 801fa90:	5c5e      	ldrb	r6, [r3, r1]
 801fa92:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801fa96:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fa9a:	eb0b 0006 	add.w	r0, fp, r6
 801fa9e:	7881      	ldrb	r1, [r0, #2]
 801faa0:	7840      	ldrb	r0, [r0, #1]
 801faa2:	fb13 f30a 	smulbb	r3, r3, sl
 801faa6:	fb10 f007 	smulbb	r0, r0, r7
 801faaa:	fb11 f407 	smulbb	r4, r1, r7
 801faae:	f81b 1006 	ldrb.w	r1, [fp, r6]
 801fab2:	f81c 6c03 	ldrb.w	r6, [ip, #-3]
 801fab6:	fb01 3307 	mla	r3, r1, r7, r3
 801faba:	f81c 1c02 	ldrb.w	r1, [ip, #-2]
 801fabe:	fb06 000a 	mla	r0, r6, sl, r0
 801fac2:	fb01 410a 	mla	r1, r1, sl, r4
 801fac6:	b280      	uxth	r0, r0
 801fac8:	b29b      	uxth	r3, r3
 801faca:	b289      	uxth	r1, r1
 801facc:	1c44      	adds	r4, r0, #1
 801face:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801fad2:	1c4e      	adds	r6, r1, #1
 801fad4:	1c5c      	adds	r4, r3, #1
 801fad6:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801fada:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801fade:	f109 39ff 	add.w	r9, r9, #4294967295
 801fae2:	1200      	asrs	r0, r0, #8
 801fae4:	1209      	asrs	r1, r1, #8
 801fae6:	121b      	asrs	r3, r3, #8
 801fae8:	f1b9 3fff 	cmp.w	r9, #4294967295
 801faec:	f80c 0c03 	strb.w	r0, [ip, #-3]
 801faf0:	f80c 1c02 	strb.w	r1, [ip, #-2]
 801faf4:	f80c 3c04 	strb.w	r3, [ip, #-4]
 801faf8:	4445      	add	r5, r8
 801fafa:	4472      	add	r2, lr
 801fafc:	f10c 0c04 	add.w	ip, ip, #4
 801fb00:	d1be      	bne.n	801fa80 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801fb02:	e9dd 7303 	ldrd	r7, r3, [sp, #12]
 801fb06:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 801fb0a:	e6fe      	b.n	801f90a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fb0c:	2b00      	cmp	r3, #0
 801fb0e:	f77f aefc 	ble.w	801f90a <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801fb12:	1410      	asrs	r0, r2, #16
 801fb14:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801fb18:	991a      	ldr	r1, [sp, #104]	; 0x68
 801fb1a:	e73d      	b.n	801f998 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>

0801fb1c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb20:	468a      	mov	sl, r1
 801fb22:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801fb26:	46d1      	mov	r9, sl
 801fb28:	b087      	sub	sp, #28
 801fb2a:	e9dd 1415 	ldrd	r1, r4, [sp, #84]	; 0x54
 801fb2e:	684d      	ldr	r5, [r1, #4]
 801fb30:	9203      	str	r2, [sp, #12]
 801fb32:	e9dd 2e17 	ldrd	r2, lr, [sp, #92]	; 0x5c
 801fb36:	fb05 4402 	mla	r4, r5, r2, r4
 801fb3a:	e9de 2000 	ldrd	r2, r0, [lr]
 801fb3e:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	; 0x4c
 801fb42:	680d      	ldr	r5, [r1, #0]
 801fb44:	f100 0b04 	add.w	fp, r0, #4
 801fb48:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801fb4c:	9205      	str	r2, [sp, #20]
 801fb4e:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801fb52:	f1b9 0f00 	cmp.w	r9, #0
 801fb56:	dc03      	bgt.n	801fb60 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801fb58:	9803      	ldr	r0, [sp, #12]
 801fb5a:	2800      	cmp	r0, #0
 801fb5c:	f340 8091 	ble.w	801fc82 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801fb60:	e9de 8a02 	ldrd	r8, sl, [lr, #8]
 801fb64:	2b00      	cmp	r3, #0
 801fb66:	fa0f f088 	sxth.w	r0, r8
 801fb6a:	fa0f f48a 	sxth.w	r4, sl
 801fb6e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fb72:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801fb76:	9001      	str	r0, [sp, #4]
 801fb78:	9402      	str	r4, [sp, #8]
 801fb7a:	f340 8085 	ble.w	801fc88 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801fb7e:	1414      	asrs	r4, r2, #16
 801fb80:	d408      	bmi.n	801fb94 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fb82:	9801      	ldr	r0, [sp, #4]
 801fb84:	4284      	cmp	r4, r0
 801fb86:	da05      	bge.n	801fb94 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fb88:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801fb8c:	d402      	bmi.n	801fb94 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fb8e:	9802      	ldr	r0, [sp, #8]
 801fb90:	4584      	cmp	ip, r0
 801fb92:	db3b      	blt.n	801fc0c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801fb94:	3b01      	subs	r3, #1
 801fb96:	4432      	add	r2, r6
 801fb98:	4439      	add	r1, r7
 801fb9a:	f105 0504 	add.w	r5, r5, #4
 801fb9e:	d1ee      	bne.n	801fb7e <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fba0:	f1b9 0f00 	cmp.w	r9, #0
 801fba4:	dd6d      	ble.n	801fc82 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801fba6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fbaa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fbae:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801fbb2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fbb6:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801fbba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fbbe:	ee76 6a62 	vsub.f32	s13, s12, s5
 801fbc2:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801fbc6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fbca:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fbce:	ee16 2a90 	vmov	r2, s13
 801fbd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fbd4:	9803      	ldr	r0, [sp, #12]
 801fbd6:	fb92 f6f3 	sdiv	r6, r2, r3
 801fbda:	ee17 2a10 	vmov	r2, s14
 801fbde:	eeb0 7a43 	vmov.f32	s14, s6
 801fbe2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fbe6:	ee17 1a10 	vmov	r1, s14
 801fbea:	eeb0 7a62 	vmov.f32	s14, s5
 801fbee:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fbf2:	f1b9 0901 	subs.w	r9, r9, #1
 801fbf6:	fb92 f7f3 	sdiv	r7, r2, r3
 801fbfa:	eeb0 3a67 	vmov.f32	s6, s15
 801fbfe:	ee17 2a10 	vmov	r2, s14
 801fc02:	eef0 2a46 	vmov.f32	s5, s12
 801fc06:	bf08      	it	eq
 801fc08:	4603      	moveq	r3, r0
 801fc0a:	e7a2      	b.n	801fb52 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801fc0c:	f103 3cff 	add.w	ip, r3, #4294967295
 801fc10:	9404      	str	r4, [sp, #16]
 801fc12:	fb06 240c 	mla	r4, r6, ip, r2
 801fc16:	1424      	asrs	r4, r4, #16
 801fc18:	d578      	bpl.n	801fd0c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fc1a:	9613      	str	r6, [sp, #76]	; 0x4c
 801fc1c:	2000      	movs	r0, #0
 801fc1e:	4646      	mov	r6, r8
 801fc20:	46d4      	mov	ip, sl
 801fc22:	9c04      	ldr	r4, [sp, #16]
 801fc24:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 801fc28:	e002      	b.n	801fc30 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801fc2a:	1414      	asrs	r4, r2, #16
 801fc2c:	e9de 6c02 	ldrd	r6, ip, [lr, #8]
 801fc30:	2c00      	cmp	r4, #0
 801fc32:	4442      	add	r2, r8
 801fc34:	db1c      	blt.n	801fc70 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801fc36:	42b4      	cmp	r4, r6
 801fc38:	da1a      	bge.n	801fc70 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801fc3a:	ea5f 4a21 	movs.w	sl, r1, asr #16
 801fc3e:	d417      	bmi.n	801fc70 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801fc40:	45e2      	cmp	sl, ip
 801fc42:	da15      	bge.n	801fc70 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801fc44:	fa0f fc86 	sxth.w	ip, r6
 801fc48:	9e05      	ldr	r6, [sp, #20]
 801fc4a:	fb0a 6c0c 	mla	ip, sl, ip, r6
 801fc4e:	f81c 4004 	ldrb.w	r4, [ip, r4]
 801fc52:	eb05 0680 	add.w	r6, r5, r0, lsl #2
 801fc56:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fc5a:	f81b c004 	ldrb.w	ip, [fp, r4]
 801fc5e:	445c      	add	r4, fp
 801fc60:	f805 c020 	strb.w	ip, [r5, r0, lsl #2]
 801fc64:	f894 c001 	ldrb.w	ip, [r4, #1]
 801fc68:	f886 c001 	strb.w	ip, [r6, #1]
 801fc6c:	78a4      	ldrb	r4, [r4, #2]
 801fc6e:	70b4      	strb	r4, [r6, #2]
 801fc70:	3001      	adds	r0, #1
 801fc72:	4283      	cmp	r3, r0
 801fc74:	4439      	add	r1, r7
 801fc76:	d1d8      	bne.n	801fc2a <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801fc78:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801fc7c:	f1b9 0f00 	cmp.w	r9, #0
 801fc80:	dc91      	bgt.n	801fba6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801fc82:	b007      	add	sp, #28
 801fc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc88:	d08a      	beq.n	801fba0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fc8a:	f103 3cff 	add.w	ip, r3, #4294967295
 801fc8e:	fb0c 2406 	mla	r4, ip, r6, r2
 801fc92:	1424      	asrs	r4, r4, #16
 801fc94:	d484      	bmi.n	801fba0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fc96:	42a0      	cmp	r0, r4
 801fc98:	dd32      	ble.n	801fd00 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801fc9a:	fb07 140c 	mla	r4, r7, ip, r1
 801fc9e:	1420      	asrs	r0, r4, #16
 801fca0:	d42e      	bmi.n	801fd00 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801fca2:	9c02      	ldr	r4, [sp, #8]
 801fca4:	4284      	cmp	r4, r0
 801fca6:	dd2b      	ble.n	801fd00 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801fca8:	2b00      	cmp	r3, #0
 801fcaa:	f77f af79 	ble.w	801fba0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fcae:	1d2c      	adds	r4, r5, #4
 801fcb0:	f8dd a014 	ldr.w	sl, [sp, #20]
 801fcb4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801fcb8:	e001      	b.n	801fcbe <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801fcba:	f9be 8008 	ldrsh.w	r8, [lr, #8]
 801fcbe:	1408      	asrs	r0, r1, #16
 801fcc0:	fb08 a000 	mla	r0, r8, r0, sl
 801fcc4:	ea4f 4822 	mov.w	r8, r2, asr #16
 801fcc8:	f810 0008 	ldrb.w	r0, [r0, r8]
 801fccc:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fcd0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fcd4:	f81b 8000 	ldrb.w	r8, [fp, r0]
 801fcd8:	4458      	add	r0, fp
 801fcda:	f804 8c04 	strb.w	r8, [r4, #-4]
 801fcde:	f890 8001 	ldrb.w	r8, [r0, #1]
 801fce2:	f1bc 3fff 	cmp.w	ip, #4294967295
 801fce6:	f804 8c03 	strb.w	r8, [r4, #-3]
 801fcea:	7880      	ldrb	r0, [r0, #2]
 801fcec:	4439      	add	r1, r7
 801fcee:	f804 0c02 	strb.w	r0, [r4, #-2]
 801fcf2:	4432      	add	r2, r6
 801fcf4:	f104 0404 	add.w	r4, r4, #4
 801fcf8:	d1df      	bne.n	801fcba <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801fcfa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801fcfe:	e7bd      	b.n	801fc7c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801fd00:	2b00      	cmp	r3, #0
 801fd02:	f77f af4d 	ble.w	801fba0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fd06:	1410      	asrs	r0, r2, #16
 801fd08:	9004      	str	r0, [sp, #16]
 801fd0a:	e786      	b.n	801fc1a <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfe>
 801fd0c:	9801      	ldr	r0, [sp, #4]
 801fd0e:	e7c2      	b.n	801fc96 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>

0801fd10 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fd10:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801fd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd18:	b08b      	sub	sp, #44	; 0x2c
 801fd1a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801fd1e:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	; 0x64
 801fd22:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801fd24:	6854      	ldr	r4, [r2, #4]
 801fd26:	6816      	ldr	r6, [r2, #0]
 801fd28:	fb04 1000 	mla	r0, r4, r0, r1
 801fd2c:	e9dd 4b17 	ldrd	r4, fp, [sp, #92]	; 0x5c
 801fd30:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801fd32:	f89d 7074 	ldrb.w	r7, [sp, #116]	; 0x74
 801fd36:	e9d2 2500 	ldrd	r2, r5, [r2]
 801fd3a:	3504      	adds	r5, #4
 801fd3c:	9703      	str	r7, [sp, #12]
 801fd3e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 801fd42:	9507      	str	r5, [sp, #28]
 801fd44:	9206      	str	r2, [sp, #24]
 801fd46:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	; 0x54
 801fd4a:	9d01      	ldr	r5, [sp, #4]
 801fd4c:	2d00      	cmp	r5, #0
 801fd4e:	dc03      	bgt.n	801fd58 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fd50:	9d02      	ldr	r5, [sp, #8]
 801fd52:	2d00      	cmp	r5, #0
 801fd54:	f340 80d5 	ble.w	801ff02 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801fd58:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801fd5a:	2b00      	cmp	r3, #0
 801fd5c:	e9d5 7c02 	ldrd	r7, ip, [r5, #8]
 801fd60:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fd64:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801fd68:	b23d      	sxth	r5, r7
 801fd6a:	fa0f fe8c 	sxth.w	lr, ip
 801fd6e:	f340 80cb 	ble.w	801ff08 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801fd72:	1416      	asrs	r6, r2, #16
 801fd74:	d406      	bmi.n	801fd84 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fd76:	42ae      	cmp	r6, r5
 801fd78:	da04      	bge.n	801fd84 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fd7a:	ea5f 4821 	movs.w	r8, r1, asr #16
 801fd7e:	d401      	bmi.n	801fd84 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fd80:	45f0      	cmp	r8, lr
 801fd82:	db3c      	blt.n	801fdfe <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 801fd84:	3b01      	subs	r3, #1
 801fd86:	4422      	add	r2, r4
 801fd88:	4459      	add	r1, fp
 801fd8a:	f100 0004 	add.w	r0, r0, #4
 801fd8e:	d1f0      	bne.n	801fd72 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fd90:	9b01      	ldr	r3, [sp, #4]
 801fd92:	2b00      	cmp	r3, #0
 801fd94:	f340 80b5 	ble.w	801ff02 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801fd98:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd9c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fda0:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801fda4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fda8:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801fdac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fdb0:	ee76 6a62 	vsub.f32	s13, s12, s5
 801fdb4:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801fdb8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fdbc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fdc0:	ee16 2a90 	vmov	r2, s13
 801fdc4:	3b01      	subs	r3, #1
 801fdc6:	9301      	str	r3, [sp, #4]
 801fdc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fdca:	9d02      	ldr	r5, [sp, #8]
 801fdcc:	fb92 f4f3 	sdiv	r4, r2, r3
 801fdd0:	ee17 2a10 	vmov	r2, s14
 801fdd4:	eeb0 7a43 	vmov.f32	s14, s6
 801fdd8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fddc:	ee17 1a10 	vmov	r1, s14
 801fde0:	eeb0 7a62 	vmov.f32	s14, s5
 801fde4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801fde8:	fb92 fbf3 	sdiv	fp, r2, r3
 801fdec:	eeb0 3a67 	vmov.f32	s6, s15
 801fdf0:	ee17 2a10 	vmov	r2, s14
 801fdf4:	eef0 2a46 	vmov.f32	s5, s12
 801fdf8:	bf08      	it	eq
 801fdfa:	462b      	moveq	r3, r5
 801fdfc:	e7a5      	b.n	801fd4a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801fdfe:	f103 38ff 	add.w	r8, r3, #4294967295
 801fe02:	fb08 2904 	mla	r9, r8, r4, r2
 801fe06:	ea5f 4929 	movs.w	r9, r9, asr #16
 801fe0a:	f140 8087 	bpl.w	801ff1c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801fe0e:	f1c3 0900 	rsb	r9, r3, #0
 801fe12:	4698      	mov	r8, r3
 801fe14:	2500      	movs	r5, #0
 801fe16:	9004      	str	r0, [sp, #16]
 801fe18:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fe1a:	e002      	b.n	801fe22 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801fe1c:	1416      	asrs	r6, r2, #16
 801fe1e:	e9d3 7c02 	ldrd	r7, ip, [r3, #8]
 801fe22:	2e00      	cmp	r6, #0
 801fe24:	4422      	add	r2, r4
 801fe26:	db61      	blt.n	801feec <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801fe28:	42be      	cmp	r6, r7
 801fe2a:	da5f      	bge.n	801feec <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801fe2c:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801fe30:	d45c      	bmi.n	801feec <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801fe32:	45e6      	cmp	lr, ip
 801fe34:	b23f      	sxth	r7, r7
 801fe36:	da59      	bge.n	801feec <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801fe38:	9806      	ldr	r0, [sp, #24]
 801fe3a:	fb0e 0707 	mla	r7, lr, r7, r0
 801fe3e:	9807      	ldr	r0, [sp, #28]
 801fe40:	5dbe      	ldrb	r6, [r7, r6]
 801fe42:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 801fe46:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
 801fe4a:	9804      	ldr	r0, [sp, #16]
 801fe4c:	9705      	str	r7, [sp, #20]
 801fe4e:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 801fe52:	0e37      	lsrs	r7, r6, #24
 801fe54:	9008      	str	r0, [sp, #32]
 801fe56:	d049      	beq.n	801feec <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801fe58:	9803      	ldr	r0, [sp, #12]
 801fe5a:	fa5f fa86 	uxtb.w	sl, r6
 801fe5e:	fb00 f707 	mul.w	r7, r0, r7
 801fe62:	9805      	ldr	r0, [sp, #20]
 801fe64:	f107 0c01 	add.w	ip, r7, #1
 801fe68:	eb0c 2c27 	add.w	ip, ip, r7, asr #8
 801fe6c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fe70:	4686      	mov	lr, r0
 801fe72:	ea6f 070c 	mvn.w	r7, ip
 801fe76:	fa1f fc8c 	uxth.w	ip, ip
 801fe7a:	fb1a fa0c 	smulbb	sl, sl, ip
 801fe7e:	9804      	ldr	r0, [sp, #16]
 801fe80:	b2ff      	uxtb	r7, r7
 801fe82:	f810 e02e 	ldrb.w	lr, [r0, lr, lsl #2]
 801fe86:	9805      	ldr	r0, [sp, #20]
 801fe88:	fb0e ae07 	mla	lr, lr, r7, sl
 801fe8c:	fa1f fe8e 	uxth.w	lr, lr
 801fe90:	f10e 0a01 	add.w	sl, lr, #1
 801fe94:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801fe98:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 801fe9c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801fea0:	fb16 f60c 	smulbb	r6, r6, ip
 801fea4:	9609      	str	r6, [sp, #36]	; 0x24
 801fea6:	4606      	mov	r6, r0
 801fea8:	9804      	ldr	r0, [sp, #16]
 801feaa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801feae:	f800 e026 	strb.w	lr, [r0, r6, lsl #2]
 801feb2:	fb1a fa0c 	smulbb	sl, sl, ip
 801feb6:	9808      	ldr	r0, [sp, #32]
 801feb8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801feba:	f890 e002 	ldrb.w	lr, [r0, #2]
 801febe:	f890 c001 	ldrb.w	ip, [r0, #1]
 801fec2:	fb0e 6607 	mla	r6, lr, r7, r6
 801fec6:	fb0c ac07 	mla	ip, ip, r7, sl
 801feca:	b2b6      	uxth	r6, r6
 801fecc:	fa1f fe8c 	uxth.w	lr, ip
 801fed0:	1c77      	adds	r7, r6, #1
 801fed2:	f10e 0c01 	add.w	ip, lr, #1
 801fed6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801feda:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801fede:	ea4f 272c 	mov.w	r7, ip, asr #8
 801fee2:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801fee6:	7047      	strb	r7, [r0, #1]
 801fee8:	f880 c002 	strb.w	ip, [r0, #2]
 801feec:	3d01      	subs	r5, #1
 801feee:	45a9      	cmp	r9, r5
 801fef0:	4459      	add	r1, fp
 801fef2:	d193      	bne.n	801fe1c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801fef4:	9b01      	ldr	r3, [sp, #4]
 801fef6:	9804      	ldr	r0, [sp, #16]
 801fef8:	2b00      	cmp	r3, #0
 801fefa:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801fefe:	f73f af4b 	bgt.w	801fd98 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801ff02:	b00b      	add	sp, #44	; 0x2c
 801ff04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff08:	f43f af42 	beq.w	801fd90 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ff0c:	f103 38ff 	add.w	r8, r3, #4294967295
 801ff10:	fb08 2904 	mla	r9, r8, r4, r2
 801ff14:	ea5f 4929 	movs.w	r9, r9, asr #16
 801ff18:	f53f af3a 	bmi.w	801fd90 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ff1c:	454d      	cmp	r5, r9
 801ff1e:	dd68      	ble.n	801fff2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801ff20:	fb08 160b 	mla	r6, r8, fp, r1
 801ff24:	1436      	asrs	r6, r6, #16
 801ff26:	d464      	bmi.n	801fff2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801ff28:	4576      	cmp	r6, lr
 801ff2a:	da62      	bge.n	801fff2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801ff2c:	2b00      	cmp	r3, #0
 801ff2e:	f77f af2f 	ble.w	801fd90 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ff32:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 801ff36:	f100 0e04 	add.w	lr, r0, #4
 801ff3a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801ff3e:	e002      	b.n	801ff46 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801ff40:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ff42:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 801ff46:	140b      	asrs	r3, r1, #16
 801ff48:	fb05 6303 	mla	r3, r5, r3, r6
 801ff4c:	1410      	asrs	r0, r2, #16
 801ff4e:	5c1b      	ldrb	r3, [r3, r0]
 801ff50:	f108 38ff 	add.w	r8, r8, #4294967295
 801ff54:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801ff58:	4422      	add	r2, r4
 801ff5a:	0e18      	lsrs	r0, r3, #24
 801ff5c:	4459      	add	r1, fp
 801ff5e:	d03e      	beq.n	801ffde <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 801ff60:	9d03      	ldr	r5, [sp, #12]
 801ff62:	fa5f fc83 	uxtb.w	ip, r3
 801ff66:	fb05 f000 	mul.w	r0, r5, r0
 801ff6a:	f100 0901 	add.w	r9, r0, #1
 801ff6e:	eb09 2920 	add.w	r9, r9, r0, asr #8
 801ff72:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ff76:	ea6f 0009 	mvn.w	r0, r9
 801ff7a:	fa1f f989 	uxth.w	r9, r9
 801ff7e:	fb1c fc09 	smulbb	ip, ip, r9
 801ff82:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801ff86:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801ff8a:	fb15 fa09 	smulbb	sl, r5, r9
 801ff8e:	fb13 f309 	smulbb	r3, r3, r9
 801ff92:	f81e 9c04 	ldrb.w	r9, [lr, #-4]
 801ff96:	b2c0      	uxtb	r0, r0
 801ff98:	fb09 cc00 	mla	ip, r9, r0, ip
 801ff9c:	f81e 5c03 	ldrb.w	r5, [lr, #-3]
 801ffa0:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 801ffa4:	fb05 a500 	mla	r5, r5, r0, sl
 801ffa8:	fb09 3300 	mla	r3, r9, r0, r3
 801ffac:	fa1f fc8c 	uxth.w	ip, ip
 801ffb0:	b2ad      	uxth	r5, r5
 801ffb2:	b29b      	uxth	r3, r3
 801ffb4:	f10c 0a01 	add.w	sl, ip, #1
 801ffb8:	f105 0901 	add.w	r9, r5, #1
 801ffbc:	1c58      	adds	r0, r3, #1
 801ffbe:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801ffc2:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801ffc6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801ffca:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ffce:	122d      	asrs	r5, r5, #8
 801ffd0:	121b      	asrs	r3, r3, #8
 801ffd2:	f80e cc04 	strb.w	ip, [lr, #-4]
 801ffd6:	f80e 5c03 	strb.w	r5, [lr, #-3]
 801ffda:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ffde:	f1b8 3fff 	cmp.w	r8, #4294967295
 801ffe2:	f10e 0e04 	add.w	lr, lr, #4
 801ffe6:	d1ab      	bne.n	801ff40 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801ffe8:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 801ffec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801fff0:	e6ce      	b.n	801fd90 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801fff2:	2b00      	cmp	r3, #0
 801fff4:	f77f aecc 	ble.w	801fd90 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801fff8:	1416      	asrs	r6, r2, #16
 801fffa:	e708      	b.n	801fe0e <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfe>

0801fffc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fffc:	4770      	bx	lr
 801fffe:	bf00      	nop

08020000 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020000:	4770      	bx	lr
 8020002:	bf00      	nop

08020004 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020004:	4770      	bx	lr
 8020006:	bf00      	nop

08020008 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020008:	4770      	bx	lr
 802000a:	bf00      	nop

0802000c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802000c:	4770      	bx	lr
 802000e:	bf00      	nop

08020010 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020010:	4770      	bx	lr
 8020012:	bf00      	nop

08020014 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020014:	4770      	bx	lr
 8020016:	bf00      	nop

08020018 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020018:	4770      	bx	lr
 802001a:	bf00      	nop

0802001c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802001c:	4770      	bx	lr
 802001e:	bf00      	nop

08020020 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020020:	4770      	bx	lr
 8020022:	bf00      	nop

08020024 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020024:	4770      	bx	lr
 8020026:	bf00      	nop

08020028 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020028:	4770      	bx	lr
 802002a:	bf00      	nop

0802002c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802002c:	4770      	bx	lr
 802002e:	bf00      	nop

08020030 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020030:	4770      	bx	lr
 8020032:	bf00      	nop

08020034 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020034:	4770      	bx	lr
 8020036:	bf00      	nop

08020038 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020038:	4770      	bx	lr
 802003a:	bf00      	nop

0802003c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802003c:	4770      	bx	lr
 802003e:	bf00      	nop

08020040 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020040:	4770      	bx	lr
 8020042:	bf00      	nop

08020044 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020044:	4770      	bx	lr
 8020046:	bf00      	nop

08020048 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020048:	4770      	bx	lr
 802004a:	bf00      	nop

0802004c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802004c:	4770      	bx	lr
 802004e:	bf00      	nop

08020050 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020050:	4770      	bx	lr
 8020052:	bf00      	nop

08020054 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv>:
 8020054:	b508      	push	{r3, lr}
 8020056:	4b0d      	ldr	r3, [pc, #52]	; (802008c <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x38>)
 8020058:	881b      	ldrh	r3, [r3, #0]
 802005a:	b17b      	cbz	r3, 802007c <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x28>
 802005c:	7a02      	ldrb	r2, [r0, #8]
 802005e:	2a02      	cmp	r2, #2
 8020060:	d007      	beq.n	8020072 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x1e>
 8020062:	2a01      	cmp	r2, #1
 8020064:	bf0c      	ite	eq
 8020066:	2003      	moveq	r0, #3
 8020068:	2002      	movne	r0, #2
 802006a:	fb13 f000 	smulbb	r0, r3, r0
 802006e:	b280      	uxth	r0, r0
 8020070:	bd08      	pop	{r3, pc}
 8020072:	2004      	movs	r0, #4
 8020074:	fb13 f000 	smulbb	r0, r3, r0
 8020078:	b280      	uxth	r0, r0
 802007a:	bd08      	pop	{r3, pc}
 802007c:	4b04      	ldr	r3, [pc, #16]	; (8020090 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x3c>)
 802007e:	4a05      	ldr	r2, [pc, #20]	; (8020094 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x40>)
 8020080:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8020084:	4804      	ldr	r0, [pc, #16]	; (8020098 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x44>)
 8020086:	f009 f8e5 	bl	8029254 <__assert_func>
 802008a:	bf00      	nop
 802008c:	20197a3a 	.word	0x20197a3a
 8020090:	0802c638 	.word	0x0802c638
 8020094:	0802d3f4 	.word	0x0802d3f4
 8020098:	0802c67c 	.word	0x0802c67c

0802009c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv>:
 802009c:	b530      	push	{r4, r5, lr}
 802009e:	4b26      	ldr	r3, [pc, #152]	; (8020138 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x9c>)
 80200a0:	b083      	sub	sp, #12
 80200a2:	681c      	ldr	r4, [r3, #0]
 80200a4:	2c00      	cmp	r4, #0
 80200a6:	d040      	beq.n	802012a <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x8e>
 80200a8:	4b24      	ldr	r3, [pc, #144]	; (802013c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa0>)
 80200aa:	4605      	mov	r5, r0
 80200ac:	781b      	ldrb	r3, [r3, #0]
 80200ae:	b9f3      	cbnz	r3, 80200ee <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x52>
 80200b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80200b2:	7a2a      	ldrb	r2, [r5, #8]
 80200b4:	2a01      	cmp	r2, #1
 80200b6:	d025      	beq.n	8020104 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x68>
 80200b8:	d30d      	bcc.n	80200d6 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x3a>
 80200ba:	2a02      	cmp	r2, #2
 80200bc:	d12f      	bne.n	802011e <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x82>
 80200be:	4920      	ldr	r1, [pc, #128]	; (8020140 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 80200c0:	4a20      	ldr	r2, [pc, #128]	; (8020144 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 80200c2:	8809      	ldrh	r1, [r1, #0]
 80200c4:	8812      	ldrh	r2, [r2, #0]
 80200c6:	008c      	lsls	r4, r1, #2
 80200c8:	4618      	mov	r0, r3
 80200ca:	9400      	str	r4, [sp, #0]
 80200cc:	2310      	movs	r3, #16
 80200ce:	f7fb ff1d 	bl	801bf0c <nema_bind_dst_tex>
 80200d2:	b003      	add	sp, #12
 80200d4:	bd30      	pop	{r4, r5, pc}
 80200d6:	491a      	ldr	r1, [pc, #104]	; (8020140 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 80200d8:	4a1a      	ldr	r2, [pc, #104]	; (8020144 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 80200da:	8809      	ldrh	r1, [r1, #0]
 80200dc:	8812      	ldrh	r2, [r2, #0]
 80200de:	004c      	lsls	r4, r1, #1
 80200e0:	4618      	mov	r0, r3
 80200e2:	9400      	str	r4, [sp, #0]
 80200e4:	2304      	movs	r3, #4
 80200e6:	f7fb ff11 	bl	801bf0c <nema_bind_dst_tex>
 80200ea:	b003      	add	sp, #12
 80200ec:	bd30      	pop	{r4, r5, pc}
 80200ee:	6823      	ldr	r3, [r4, #0]
 80200f0:	4620      	mov	r0, r4
 80200f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80200f4:	4798      	blx	r3
 80200f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80200f8:	4283      	cmp	r3, r0
 80200fa:	d1da      	bne.n	80200b2 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x16>
 80200fc:	7a2a      	ldrb	r2, [r5, #8]
 80200fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020100:	2a01      	cmp	r2, #1
 8020102:	d1d9      	bne.n	80200b8 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x1c>
 8020104:	490e      	ldr	r1, [pc, #56]	; (8020140 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 8020106:	4a0f      	ldr	r2, [pc, #60]	; (8020144 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 8020108:	8809      	ldrh	r1, [r1, #0]
 802010a:	8812      	ldrh	r2, [r2, #0]
 802010c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8020110:	4618      	mov	r0, r3
 8020112:	9400      	str	r4, [sp, #0]
 8020114:	2339      	movs	r3, #57	; 0x39
 8020116:	f7fb fef9 	bl	801bf0c <nema_bind_dst_tex>
 802011a:	b003      	add	sp, #12
 802011c:	bd30      	pop	{r4, r5, pc}
 802011e:	4b0a      	ldr	r3, [pc, #40]	; (8020148 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xac>)
 8020120:	4a0a      	ldr	r2, [pc, #40]	; (802014c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb0>)
 8020122:	2140      	movs	r1, #64	; 0x40
 8020124:	480a      	ldr	r0, [pc, #40]	; (8020150 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb4>)
 8020126:	f009 f895 	bl	8029254 <__assert_func>
 802012a:	4b0a      	ldr	r3, [pc, #40]	; (8020154 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb8>)
 802012c:	4a0a      	ldr	r2, [pc, #40]	; (8020158 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xbc>)
 802012e:	217c      	movs	r1, #124	; 0x7c
 8020130:	480a      	ldr	r0, [pc, #40]	; (802015c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xc0>)
 8020132:	f009 f88f 	bl	8029254 <__assert_func>
 8020136:	bf00      	nop
 8020138:	20197c70 	.word	0x20197c70
 802013c:	20197a3e 	.word	0x20197a3e
 8020140:	20197a3a 	.word	0x20197a3a
 8020144:	20197a3c 	.word	0x20197a3c
 8020148:	0802c11c 	.word	0x0802c11c
 802014c:	0802cc30 	.word	0x0802cc30
 8020150:	0802c164 	.word	0x0802c164
 8020154:	0802c0c0 	.word	0x0802c0c0
 8020158:	0802c8c8 	.word	0x0802c8c8
 802015c:	0802c0e8 	.word	0x0802c0e8

08020160 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh>:
 8020160:	2b00      	cmp	r3, #0
 8020162:	d058      	beq.n	8020216 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 8020164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020168:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 802016c:	b085      	sub	sp, #20
 802016e:	2c00      	cmp	r4, #0
 8020170:	dd4e      	ble.n	8020210 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb0>
 8020172:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
 8020176:	2c00      	cmp	r4, #0
 8020178:	dd4a      	ble.n	8020210 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb0>
 802017a:	4616      	mov	r6, r2
 802017c:	4605      	mov	r5, r0
 802017e:	6808      	ldr	r0, [r1, #0]
 8020180:	6849      	ldr	r1, [r1, #4]
 8020182:	461c      	mov	r4, r3
 8020184:	4f27      	ldr	r7, [pc, #156]	; (8020224 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xc4>)
 8020186:	ab02      	add	r3, sp, #8
 8020188:	c303      	stmia	r3!, {r0, r1}
 802018a:	a802      	add	r0, sp, #8
 802018c:	f7f8 fb9a 	bl	80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020190:	6838      	ldr	r0, [r7, #0]
 8020192:	f3c6 4807 	ubfx	r8, r6, #16, #8
 8020196:	f3c6 2907 	ubfx	r9, r6, #8, #8
 802019a:	b2f6      	uxtb	r6, r6
 802019c:	2800      	cmp	r0, #0
 802019e:	d03b      	beq.n	8020218 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb8>
 80201a0:	f7fe f8f6 	bl	801e390 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 80201a4:	682b      	ldr	r3, [r5, #0]
 80201a6:	4628      	mov	r0, r5
 80201a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80201aa:	4798      	blx	r3
 80201ac:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80201b0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80201b4:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 80201b8:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80201bc:	f7fb fdf2 	bl	801bda4 <nema_set_clip>
 80201c0:	f04f 33ff 	mov.w	r3, #4294967295
 80201c4:	2100      	movs	r1, #0
 80201c6:	461a      	mov	r2, r3
 80201c8:	4817      	ldr	r0, [pc, #92]	; (8020228 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xc8>)
 80201ca:	f7fd fc33 	bl	801da34 <nema_set_blend>
 80201ce:	2200      	movs	r2, #0
 80201d0:	4623      	mov	r3, r4
 80201d2:	4611      	mov	r1, r2
 80201d4:	4610      	mov	r0, r2
 80201d6:	f7fb fe19 	bl	801be0c <nema_rgba>
 80201da:	f7fd fff1 	bl	801e1c0 <nema_set_const_color>
 80201de:	4632      	mov	r2, r6
 80201e0:	4649      	mov	r1, r9
 80201e2:	4640      	mov	r0, r8
 80201e4:	23ff      	movs	r3, #255	; 0xff
 80201e6:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 80201ea:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 80201ee:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80201f2:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 80201f6:	f7fb fe09 	bl	801be0c <nema_rgba>
 80201fa:	4643      	mov	r3, r8
 80201fc:	9000      	str	r0, [sp, #0]
 80201fe:	4632      	mov	r2, r6
 8020200:	4620      	mov	r0, r4
 8020202:	4629      	mov	r1, r5
 8020204:	f7fb ff38 	bl	801c078 <nema_fill_rect>
 8020208:	6838      	ldr	r0, [r7, #0]
 802020a:	b128      	cbz	r0, 8020218 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb8>
 802020c:	f7fe f8e0 	bl	801e3d0 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8020210:	b005      	add	sp, #20
 8020212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020216:	4770      	bx	lr
 8020218:	4b04      	ldr	r3, [pc, #16]	; (802022c <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xcc>)
 802021a:	4a05      	ldr	r2, [pc, #20]	; (8020230 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd0>)
 802021c:	217c      	movs	r1, #124	; 0x7c
 802021e:	4805      	ldr	r0, [pc, #20]	; (8020234 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd4>)
 8020220:	f009 f818 	bl	8029254 <__assert_func>
 8020224:	20197c70 	.word	0x20197c70
 8020228:	08000504 	.word	0x08000504
 802022c:	0802c0c0 	.word	0x0802c0c0
 8020230:	0802c8c8 	.word	0x0802c8c8
 8020234:	0802c0e8 	.word	0x0802c0e8

08020238 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8020238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802023c:	b085      	sub	sp, #20
 802023e:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8020242:	2c00      	cmp	r4, #0
 8020244:	d063      	beq.n	802030e <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 8020246:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 802024a:	2d00      	cmp	r5, #0
 802024c:	dd5f      	ble.n	802030e <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 802024e:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8020252:	2d00      	cmp	r5, #0
 8020254:	dd5b      	ble.n	802030e <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 8020256:	460f      	mov	r7, r1
 8020258:	4606      	mov	r6, r0
 802025a:	6859      	ldr	r1, [r3, #4]
 802025c:	6818      	ldr	r0, [r3, #0]
 802025e:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8020384 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14c>
 8020262:	ab02      	add	r3, sp, #8
 8020264:	c303      	stmia	r3!, {r0, r1}
 8020266:	a802      	add	r0, sp, #8
 8020268:	4690      	mov	r8, r2
 802026a:	f7f8 fb2b 	bl	80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802026e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020270:	f8d9 0000 	ldr.w	r0, [r9]
 8020274:	f3c3 4a07 	ubfx	sl, r3, #16, #8
 8020278:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 802027c:	b2dd      	uxtb	r5, r3
 802027e:	2800      	cmp	r0, #0
 8020280:	d060      	beq.n	8020344 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10c>
 8020282:	f7fe f885 	bl	801e390 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8020286:	7a33      	ldrb	r3, [r6, #8]
 8020288:	2b01      	cmp	r3, #1
 802028a:	d043      	beq.n	8020314 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xdc>
 802028c:	d34e      	bcc.n	802032c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf4>
 802028e:	2b02      	cmp	r3, #2
 8020290:	d15e      	bne.n	8020350 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8020292:	4b33      	ldr	r3, [pc, #204]	; (8020360 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 8020294:	4a33      	ldr	r2, [pc, #204]	; (8020364 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 8020296:	8819      	ldrh	r1, [r3, #0]
 8020298:	ea4f 0388 	mov.w	r3, r8, lsl #2
 802029c:	8812      	ldrh	r2, [r2, #0]
 802029e:	4638      	mov	r0, r7
 80202a0:	9300      	str	r3, [sp, #0]
 80202a2:	2310      	movs	r3, #16
 80202a4:	f7fb fe32 	bl	801bf0c <nema_bind_dst_tex>
 80202a8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80202ac:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80202b0:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 80202b4:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80202b8:	f7fb fd74 	bl	801bda4 <nema_set_clip>
 80202bc:	f04f 33ff 	mov.w	r3, #4294967295
 80202c0:	2100      	movs	r1, #0
 80202c2:	461a      	mov	r2, r3
 80202c4:	4828      	ldr	r0, [pc, #160]	; (8020368 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x130>)
 80202c6:	f7fd fbb5 	bl	801da34 <nema_set_blend>
 80202ca:	2200      	movs	r2, #0
 80202cc:	4623      	mov	r3, r4
 80202ce:	4611      	mov	r1, r2
 80202d0:	4610      	mov	r0, r2
 80202d2:	f7fb fd9b 	bl	801be0c <nema_rgba>
 80202d6:	f7fd ff73 	bl	801e1c0 <nema_set_const_color>
 80202da:	462a      	mov	r2, r5
 80202dc:	4659      	mov	r1, fp
 80202de:	23ff      	movs	r3, #255	; 0xff
 80202e0:	4650      	mov	r0, sl
 80202e2:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 80202e6:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 80202ea:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80202ee:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80202f2:	f7fb fd8b 	bl	801be0c <nema_rgba>
 80202f6:	463b      	mov	r3, r7
 80202f8:	9000      	str	r0, [sp, #0]
 80202fa:	4632      	mov	r2, r6
 80202fc:	4620      	mov	r0, r4
 80202fe:	4629      	mov	r1, r5
 8020300:	f7fb feba 	bl	801c078 <nema_fill_rect>
 8020304:	f8d9 0000 	ldr.w	r0, [r9]
 8020308:	b1e0      	cbz	r0, 8020344 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10c>
 802030a:	f7fe f861 	bl	801e3d0 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 802030e:	b005      	add	sp, #20
 8020310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020314:	4b12      	ldr	r3, [pc, #72]	; (8020360 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 8020316:	4a13      	ldr	r2, [pc, #76]	; (8020364 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 8020318:	8819      	ldrh	r1, [r3, #0]
 802031a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 802031e:	8812      	ldrh	r2, [r2, #0]
 8020320:	4638      	mov	r0, r7
 8020322:	9300      	str	r3, [sp, #0]
 8020324:	2339      	movs	r3, #57	; 0x39
 8020326:	f7fb fdf1 	bl	801bf0c <nema_bind_dst_tex>
 802032a:	e7bd      	b.n	80202a8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 802032c:	4b0c      	ldr	r3, [pc, #48]	; (8020360 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 802032e:	4a0d      	ldr	r2, [pc, #52]	; (8020364 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 8020330:	8819      	ldrh	r1, [r3, #0]
 8020332:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8020336:	8812      	ldrh	r2, [r2, #0]
 8020338:	4638      	mov	r0, r7
 802033a:	9300      	str	r3, [sp, #0]
 802033c:	2304      	movs	r3, #4
 802033e:	f7fb fde5 	bl	801bf0c <nema_bind_dst_tex>
 8020342:	e7b1      	b.n	80202a8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8020344:	4b09      	ldr	r3, [pc, #36]	; (802036c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>)
 8020346:	4a0a      	ldr	r2, [pc, #40]	; (8020370 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x138>)
 8020348:	217c      	movs	r1, #124	; 0x7c
 802034a:	480a      	ldr	r0, [pc, #40]	; (8020374 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13c>)
 802034c:	f008 ff82 	bl	8029254 <__assert_func>
 8020350:	4b09      	ldr	r3, [pc, #36]	; (8020378 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x140>)
 8020352:	4a0a      	ldr	r2, [pc, #40]	; (802037c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>)
 8020354:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8020358:	4809      	ldr	r0, [pc, #36]	; (8020380 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>)
 802035a:	f008 ff7b 	bl	8029254 <__assert_func>
 802035e:	bf00      	nop
 8020360:	20197a3a 	.word	0x20197a3a
 8020364:	20197a3c 	.word	0x20197a3c
 8020368:	08000504 	.word	0x08000504
 802036c:	0802c0c0 	.word	0x0802c0c0
 8020370:	0802c8c8 	.word	0x0802c8c8
 8020374:	0802c0e8 	.word	0x0802c0e8
 8020378:	0802c11c 	.word	0x0802c11c
 802037c:	0802c984 	.word	0x0802c984
 8020380:	0802c164 	.word	0x0802c164
 8020384:	20197c70 	.word	0x20197c70

08020388 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8020388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802038c:	b091      	sub	sp, #68	; 0x44
 802038e:	f89d 108c 	ldrb.w	r1, [sp, #140]	; 0x8c
 8020392:	ac0a      	add	r4, sp, #40	; 0x28
 8020394:	e884 000c 	stmia.w	r4, {r2, r3}
 8020398:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 802039c:	1e4f      	subs	r7, r1, #1
 802039e:	fa5f fc87 	uxtb.w	ip, r7
 80203a2:	4682      	mov	sl, r0
 80203a4:	9303      	str	r3, [sp, #12]
 80203a6:	f89d 0090 	ldrb.w	r0, [sp, #144]	; 0x90
 80203aa:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 80203ae:	f1bc 0f01 	cmp.w	ip, #1
 80203b2:	9304      	str	r3, [sp, #16]
 80203b4:	f9bd 8068 	ldrsh.w	r8, [sp, #104]	; 0x68
 80203b8:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	; 0x6c
 80203bc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80203be:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80203c2:	9005      	str	r0, [sp, #20]
 80203c4:	f89d 6094 	ldrb.w	r6, [sp, #148]	; 0x94
 80203c8:	d905      	bls.n	80203d6 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4e>
 80203ca:	2904      	cmp	r1, #4
 80203cc:	f000 80d0 	beq.w	8020570 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e8>
 80203d0:	2908      	cmp	r1, #8
 80203d2:	f040 816f 	bne.w	80206b4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x32c>
 80203d6:	7b53      	ldrb	r3, [r2, #13]
 80203d8:	7990      	ldrb	r0, [r2, #6]
 80203da:	0159      	lsls	r1, r3, #5
 80203dc:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80203e0:	ea50 0901 	orrs.w	r9, r0, r1
 80203e4:	f000 80c1 	beq.w	802056a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80203e8:	011b      	lsls	r3, r3, #4
 80203ea:	79d0      	ldrb	r0, [r2, #7]
 80203ec:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80203f0:	ea50 0301 	orrs.w	r3, r0, r1
 80203f4:	9306      	str	r3, [sp, #24]
 80203f6:	f000 80b8 	beq.w	802056a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80203fa:	f992 3009 	ldrsb.w	r3, [r2, #9]
 80203fe:	9a03      	ldr	r2, [sp, #12]
 8020400:	b29b      	uxth	r3, r3
 8020402:	2a00      	cmp	r2, #0
 8020404:	f040 80be 	bne.w	8020584 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fc>
 8020408:	4498      	add	r8, r3
 802040a:	fa0f f888 	sxth.w	r8, r8
 802040e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020414:	4543      	cmp	r3, r8
 8020416:	dd06      	ble.n	8020426 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x9e>
 8020418:	9a03      	ldr	r2, [sp, #12]
 802041a:	441a      	add	r2, r3
 802041c:	eba2 0508 	sub.w	r5, r2, r8
 8020420:	4698      	mov	r8, r3
 8020422:	b2ab      	uxth	r3, r5
 8020424:	9303      	str	r3, [sp, #12]
 8020426:	f8df c30c 	ldr.w	ip, [pc, #780]	; 8020734 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 802042a:	465a      	mov	r2, fp
 802042c:	f89c 5000 	ldrb.w	r5, [ip]
 8020430:	4641      	mov	r1, r8
 8020432:	4633      	mov	r3, r6
 8020434:	4620      	mov	r0, r4
 8020436:	9507      	str	r5, [sp, #28]
 8020438:	f7f8 f8be 	bl	80185b8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 802043c:	465a      	mov	r2, fp
 802043e:	4641      	mov	r1, r8
 8020440:	4633      	mov	r3, r6
 8020442:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8020446:	4620      	mov	r0, r4
 8020448:	f7f8 f8d3 	bl	80185f2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 802044c:	a910      	add	r1, sp, #64	; 0x40
 802044e:	f821 0d0a 	strh.w	r0, [r1, #-10]!
 8020452:	a80d      	add	r0, sp, #52	; 0x34
 8020454:	f7f8 f9f4 	bl	8018840 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8020458:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802045a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 802045e:	9308      	str	r3, [sp, #32]
 8020460:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020462:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 8020466:	fa5f f883 	uxtb.w	r8, r3
 802046a:	2f07      	cmp	r7, #7
 802046c:	f200 811f 	bhi.w	80206ae <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x326>
 8020470:	e8df f017 	tbh	[pc, r7, lsl #1]
 8020474:	009b00a1 	.word	0x009b00a1
 8020478:	0095011d 	.word	0x0095011d
 802047c:	011d011d 	.word	0x011d011d
 8020480:	0008011d 	.word	0x0008011d
 8020484:	2708      	movs	r7, #8
 8020486:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 802048a:	4ca1      	ldr	r4, [pc, #644]	; (8020710 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 802048c:	6820      	ldr	r0, [r4, #0]
 802048e:	2800      	cmp	r0, #0
 8020490:	f000 8137 	beq.w	8020702 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 8020494:	f7fd ff7c 	bl	801e390 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8020498:	f8da 3000 	ldr.w	r3, [sl]
 802049c:	4650      	mov	r0, sl
 802049e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80204a0:	4798      	blx	r3
 80204a2:	2e02      	cmp	r6, #2
 80204a4:	f000 80e6 	beq.w	8020674 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>
 80204a8:	2e03      	cmp	r6, #3
 80204aa:	f000 80c7 	beq.w	802063c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b4>
 80204ae:	2e01      	cmp	r6, #1
 80204b0:	f000 80a8 	beq.w	8020604 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 80204b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80204b6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80204ba:	8819      	ldrh	r1, [r3, #0]
 80204bc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80204c0:	440a      	add	r2, r1
 80204c2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80204c4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80204c8:	8848      	ldrh	r0, [r1, #2]
 80204ca:	6849      	ldr	r1, [r1, #4]
 80204cc:	4403      	add	r3, r0
 80204ce:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80204d2:	910f      	str	r1, [sp, #60]	; 0x3c
 80204d4:	a80e      	add	r0, sp, #56	; 0x38
 80204d6:	f7f8 f9f5 	bl	80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80204da:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80204de:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80204e2:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80204e6:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80204ea:	f7fb fc5b 	bl	801bda4 <nema_set_clip>
 80204ee:	2200      	movs	r2, #0
 80204f0:	9d05      	ldr	r5, [sp, #20]
 80204f2:	4611      	mov	r1, r2
 80204f4:	462b      	mov	r3, r5
 80204f6:	4610      	mov	r0, r2
 80204f8:	f7fb fc88 	bl	801be0c <nema_rgba>
 80204fc:	f7fd fe60 	bl	801e1c0 <nema_set_const_color>
 8020500:	462b      	mov	r3, r5
 8020502:	4642      	mov	r2, r8
 8020504:	4659      	mov	r1, fp
 8020506:	9808      	ldr	r0, [sp, #32]
 8020508:	f7fb fc80 	bl	801be0c <nema_rgba>
 802050c:	f7fb fc3e 	bl	801bd8c <nema_set_tex_color>
 8020510:	f04f 33ff 	mov.w	r3, #4294967295
 8020514:	2201      	movs	r2, #1
 8020516:	2100      	movs	r1, #0
 8020518:	487e      	ldr	r0, [pc, #504]	; (8020714 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 802051a:	f7fd fa8b 	bl	801da34 <nema_set_blend>
 802051e:	2200      	movs	r2, #0
 8020520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020522:	9201      	str	r2, [sp, #4]
 8020524:	9300      	str	r3, [sp, #0]
 8020526:	4649      	mov	r1, r9
 8020528:	463b      	mov	r3, r7
 802052a:	9820      	ldr	r0, [sp, #128]	; 0x80
 802052c:	9a06      	ldr	r2, [sp, #24]
 802052e:	f7fb fc75 	bl	801be1c <nema_bind_src_tex>
 8020532:	9b07      	ldr	r3, [sp, #28]
 8020534:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8020538:	2b01      	cmp	r3, #1
 802053a:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 802053e:	d040      	beq.n	80205c2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x23a>
 8020540:	2e02      	cmp	r6, #2
 8020542:	d051      	beq.n	80205e8 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 8020544:	2e03      	cmp	r6, #3
 8020546:	f000 80c7 	beq.w	80206d8 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 802054a:	2e01      	cmp	r6, #1
 802054c:	9b04      	ldr	r3, [sp, #16]
 802054e:	f000 80b8 	beq.w	80206c2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 8020552:	1ac9      	subs	r1, r1, r3
 8020554:	9b03      	ldr	r3, [sp, #12]
 8020556:	1ac0      	subs	r0, r0, r3
 8020558:	f7fb fda0 	bl	801c09c <nema_blit>
 802055c:	6823      	ldr	r3, [r4, #0]
 802055e:	2b00      	cmp	r3, #0
 8020560:	f000 80cf 	beq.w	8020702 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 8020564:	2201      	movs	r2, #1
 8020566:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 802056a:	b011      	add	sp, #68	; 0x44
 802056c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020570:	2b00      	cmp	r3, #0
 8020572:	f47f af30 	bne.w	80203d6 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4e>
 8020576:	4b68      	ldr	r3, [pc, #416]	; (8020718 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 8020578:	4a68      	ldr	r2, [pc, #416]	; (802071c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 802057a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 802057e:	4868      	ldr	r0, [pc, #416]	; (8020720 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 8020580:	f008 fe68 	bl	8029254 <__assert_func>
 8020584:	1ad5      	subs	r5, r2, r3
 8020586:	b2ab      	uxth	r3, r5
 8020588:	041a      	lsls	r2, r3, #16
 802058a:	9303      	str	r3, [sp, #12]
 802058c:	f57f af3f 	bpl.w	802040e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 8020590:	eba8 0803 	sub.w	r8, r8, r3
 8020594:	2300      	movs	r3, #0
 8020596:	fa0f f888 	sxth.w	r8, r8
 802059a:	9303      	str	r3, [sp, #12]
 802059c:	e737      	b.n	802040e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 802059e:	f109 0301 	add.w	r3, r9, #1
 80205a2:	105b      	asrs	r3, r3, #1
 80205a4:	9309      	str	r3, [sp, #36]	; 0x24
 80205a6:	2729      	movs	r7, #41	; 0x29
 80205a8:	e76f      	b.n	802048a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 80205aa:	f109 0303 	add.w	r3, r9, #3
 80205ae:	109b      	asrs	r3, r3, #2
 80205b0:	9309      	str	r3, [sp, #36]	; 0x24
 80205b2:	2728      	movs	r7, #40	; 0x28
 80205b4:	e769      	b.n	802048a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 80205b6:	f109 0307 	add.w	r3, r9, #7
 80205ba:	10db      	asrs	r3, r3, #3
 80205bc:	9309      	str	r3, [sp, #36]	; 0x24
 80205be:	2727      	movs	r7, #39	; 0x27
 80205c0:	e763      	b.n	802048a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 80205c2:	2e02      	cmp	r6, #2
 80205c4:	f000 8093 	beq.w	80206ee <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x366>
 80205c8:	2e03      	cmp	r6, #3
 80205ca:	d00d      	beq.n	80205e8 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 80205cc:	2e01      	cmp	r6, #1
 80205ce:	f000 8091 	beq.w	80206f4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 80205d2:	461a      	mov	r2, r3
 80205d4:	9b03      	ldr	r3, [sp, #12]
 80205d6:	4419      	add	r1, r3
 80205d8:	9b04      	ldr	r3, [sp, #16]
 80205da:	eba1 0109 	sub.w	r1, r1, r9
 80205de:	3101      	adds	r1, #1
 80205e0:	1ac0      	subs	r0, r0, r3
 80205e2:	f7fb fd75 	bl	801c0d0 <nema_blit_rotate>
 80205e6:	e7b9      	b.n	802055c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 80205e8:	9b04      	ldr	r3, [sp, #16]
 80205ea:	2202      	movs	r2, #2
 80205ec:	4419      	add	r1, r3
 80205ee:	9b03      	ldr	r3, [sp, #12]
 80205f0:	4418      	add	r0, r3
 80205f2:	9b06      	ldr	r3, [sp, #24]
 80205f4:	eba0 0009 	sub.w	r0, r0, r9
 80205f8:	1ac9      	subs	r1, r1, r3
 80205fa:	3101      	adds	r1, #1
 80205fc:	3001      	adds	r0, #1
 80205fe:	f7fb fd67 	bl	801c0d0 <nema_blit_rotate>
 8020602:	e7ab      	b.n	802055c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 8020604:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8020608:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 802060c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802060e:	440b      	add	r3, r1
 8020610:	8852      	ldrh	r2, [r2, #2]
 8020612:	981e      	ldr	r0, [sp, #120]	; 0x78
 8020614:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020616:	1a9b      	subs	r3, r3, r2
 8020618:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 802061c:	f8b0 c000 	ldrh.w	ip, [r0]
 8020620:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8020624:	8880      	ldrh	r0, [r0, #4]
 8020626:	1a5b      	subs	r3, r3, r1
 8020628:	4462      	add	r2, ip
 802062a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 802062e:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
 8020632:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8020636:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 802063a:	e74b      	b.n	80204d4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 802063c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8020640:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020644:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020646:	440b      	add	r3, r1
 8020648:	8812      	ldrh	r2, [r2, #0]
 802064a:	981e      	ldr	r0, [sp, #120]	; 0x78
 802064c:	991e      	ldr	r1, [sp, #120]	; 0x78
 802064e:	1a9b      	subs	r3, r3, r2
 8020650:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8020654:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 8020658:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802065c:	88c0      	ldrh	r0, [r0, #6]
 802065e:	1a5b      	subs	r3, r3, r1
 8020660:	4462      	add	r2, ip
 8020662:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020666:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
 802066a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 802066e:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8020672:	e72f      	b.n	80204d4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 8020674:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8020678:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802067c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020680:	440a      	add	r2, r1
 8020682:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020684:	8808      	ldrh	r0, [r1, #0]
 8020686:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 802068a:	1a12      	subs	r2, r2, r0
 802068c:	440b      	add	r3, r1
 802068e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020690:	981e      	ldr	r0, [sp, #120]	; 0x78
 8020692:	8849      	ldrh	r1, [r1, #2]
 8020694:	8880      	ldrh	r0, [r0, #4]
 8020696:	1a5b      	subs	r3, r3, r1
 8020698:	991e      	ldr	r1, [sp, #120]	; 0x78
 802069a:	1a12      	subs	r2, r2, r0
 802069c:	88c8      	ldrh	r0, [r1, #6]
 802069e:	6849      	ldr	r1, [r1, #4]
 80206a0:	1a1b      	subs	r3, r3, r0
 80206a2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80206a6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80206aa:	910f      	str	r1, [sp, #60]	; 0x3c
 80206ac:	e712      	b.n	80204d4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 80206ae:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80206b2:	e6ea      	b.n	802048a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 80206b4:	4b1b      	ldr	r3, [pc, #108]	; (8020724 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 80206b6:	4a19      	ldr	r2, [pc, #100]	; (802071c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 80206b8:	f240 11ab 	movw	r1, #427	; 0x1ab
 80206bc:	4818      	ldr	r0, [pc, #96]	; (8020720 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 80206be:	f008 fdc9 	bl	8029254 <__assert_func>
 80206c2:	4403      	add	r3, r0
 80206c4:	4618      	mov	r0, r3
 80206c6:	9b06      	ldr	r3, [sp, #24]
 80206c8:	2203      	movs	r2, #3
 80206ca:	1ac0      	subs	r0, r0, r3
 80206cc:	9b03      	ldr	r3, [sp, #12]
 80206ce:	3001      	adds	r0, #1
 80206d0:	1ac9      	subs	r1, r1, r3
 80206d2:	f7fb fcfd 	bl	801c0d0 <nema_blit_rotate>
 80206d6:	e741      	b.n	802055c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 80206d8:	9b03      	ldr	r3, [sp, #12]
 80206da:	2201      	movs	r2, #1
 80206dc:	4419      	add	r1, r3
 80206de:	9b04      	ldr	r3, [sp, #16]
 80206e0:	eba1 0109 	sub.w	r1, r1, r9
 80206e4:	3101      	adds	r1, #1
 80206e6:	1ac0      	subs	r0, r0, r3
 80206e8:	f7fb fcf2 	bl	801c0d0 <nema_blit_rotate>
 80206ec:	e736      	b.n	802055c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 80206ee:	9b04      	ldr	r3, [sp, #16]
 80206f0:	4418      	add	r0, r3
 80206f2:	e7e8      	b.n	80206c6 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 80206f4:	9b04      	ldr	r3, [sp, #16]
 80206f6:	1ac9      	subs	r1, r1, r3
 80206f8:	9b03      	ldr	r3, [sp, #12]
 80206fa:	1ac0      	subs	r0, r0, r3
 80206fc:	f7fb fcce 	bl	801c09c <nema_blit>
 8020700:	e72c      	b.n	802055c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 8020702:	4b09      	ldr	r3, [pc, #36]	; (8020728 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8020704:	4a09      	ldr	r2, [pc, #36]	; (802072c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8020706:	217c      	movs	r1, #124	; 0x7c
 8020708:	4809      	ldr	r0, [pc, #36]	; (8020730 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 802070a:	f008 fda3 	bl	8029254 <__assert_func>
 802070e:	bf00      	nop
 8020710:	20197c70 	.word	0x20197c70
 8020714:	08000504 	.word	0x08000504
 8020718:	0802c5d4 	.word	0x0802c5d4
 802071c:	0802d2fc 	.word	0x0802d2fc
 8020720:	0802c164 	.word	0x0802c164
 8020724:	0802c544 	.word	0x0802c544
 8020728:	0802c0c0 	.word	0x0802c0c0
 802072c:	0802c8c8 	.word	0x0802c8c8
 8020730:	0802c0e8 	.word	0x0802c0e8
 8020734:	20197a38 	.word	0x20197a38

08020738 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8020738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802073c:	b087      	sub	sp, #28
 802073e:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8020742:	e9dd 8410 	ldrd	r8, r4, [sp, #64]	; 0x40
 8020746:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 802074a:	f8bd e050 	ldrh.w	lr, [sp, #80]	; 0x50
 802074e:	2e00      	cmp	r6, #0
 8020750:	d065      	beq.n	802081e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 8020752:	f9b4 a004 	ldrsh.w	sl, [r4, #4]
 8020756:	f1ba 0f00 	cmp.w	sl, #0
 802075a:	dd60      	ble.n	802081e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 802075c:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8020760:	f1ba 0f00 	cmp.w	sl, #0
 8020764:	dd5b      	ble.n	802081e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 8020766:	f3c7 0a87 	ubfx	sl, r7, #2, #8
 802076a:	f1ba 0f0b 	cmp.w	sl, #11
 802076e:	d059      	beq.n	8020824 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xec>
 8020770:	469c      	mov	ip, r3
 8020772:	4b7e      	ldr	r3, [pc, #504]	; (802096c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x234>)
 8020774:	4615      	mov	r5, r2
 8020776:	f893 b000 	ldrb.w	fp, [r3]
 802077a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 802077e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8020782:	9303      	str	r3, [sp, #12]
 8020784:	f1bb 0f01 	cmp.w	fp, #1
 8020788:	f8dc 300c 	ldr.w	r3, [ip, #12]
 802078c:	9205      	str	r2, [sp, #20]
 802078e:	bf08      	it	eq
 8020790:	9a03      	ldreq	r2, [sp, #12]
 8020792:	9302      	str	r3, [sp, #8]
 8020794:	bf08      	it	eq
 8020796:	e9cd 2302 	strdeq	r2, r3, [sp, #8]
 802079a:	f1ba 0f0d 	cmp.w	sl, #13
 802079e:	4681      	mov	r9, r0
 80207a0:	d034      	beq.n	802080c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd4>
 80207a2:	4b73      	ldr	r3, [pc, #460]	; (8020970 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x238>)
 80207a4:	6818      	ldr	r0, [r3, #0]
 80207a6:	2800      	cmp	r0, #0
 80207a8:	f000 80d3 	beq.w	8020952 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x21a>
 80207ac:	f8dc 3000 	ldr.w	r3, [ip]
 80207b0:	9304      	str	r3, [sp, #16]
 80207b2:	f7fd fded 	bl	801e390 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 80207b6:	f8d9 3000 	ldr.w	r3, [r9]
 80207ba:	4648      	mov	r0, r9
 80207bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80207be:	4798      	blx	r3
 80207c0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80207c4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80207c8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80207cc:	f9b4 0000 	ldrsh.w	r0, [r4]
 80207d0:	f7fb fae8 	bl	801bda4 <nema_set_clip>
 80207d4:	2200      	movs	r2, #0
 80207d6:	4633      	mov	r3, r6
 80207d8:	4611      	mov	r1, r2
 80207da:	4610      	mov	r0, r2
 80207dc:	f7fb fb16 	bl	801be0c <nema_rgba>
 80207e0:	f7fd fcee 	bl	801e1c0 <nema_set_const_color>
 80207e4:	f04f 33ff 	mov.w	r3, #4294967295
 80207e8:	2201      	movs	r2, #1
 80207ea:	2100      	movs	r1, #0
 80207ec:	4861      	ldr	r0, [pc, #388]	; (8020974 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23c>)
 80207ee:	f7fd f921 	bl	801da34 <nema_set_blend>
 80207f2:	f1ba 0f0d 	cmp.w	sl, #13
 80207f6:	f200 80b2 	bhi.w	802095e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x226>
 80207fa:	e8df f00a 	tbb	[pc, sl]
 80207fe:	8d1b      	.short	0x8d1b
 8020800:	b0b0b08b 	.word	0xb0b0b08b
 8020804:	b0b0b0b0 	.word	0xb0b0b0b0
 8020808:	888fb0b0 	.word	0x888fb0b0
 802080c:	9b05      	ldr	r3, [sp, #20]
 802080e:	b133      	cbz	r3, 802081e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xe6>
 8020810:	781b      	ldrb	r3, [r3, #0]
 8020812:	f1a3 0216 	sub.w	r2, r3, #22
 8020816:	2a01      	cmp	r2, #1
 8020818:	d9c3      	bls.n	80207a2 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6a>
 802081a:	2b12      	cmp	r3, #18
 802081c:	d0c1      	beq.n	80207a2 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6a>
 802081e:	b007      	add	sp, #28
 8020820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020824:	e9cd 6e13 	strd	r6, lr, [sp, #76]	; 0x4c
 8020828:	9712      	str	r7, [sp, #72]	; 0x48
 802082a:	b007      	add	sp, #28
 802082c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020830:	f7f7 b9be 	b.w	8017bb0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 8020834:	2304      	movs	r3, #4
 8020836:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802083a:	f04f 34ff 	mov.w	r4, #4294967295
 802083e:	f007 0701 	and.w	r7, r7, #1
 8020842:	9804      	ldr	r0, [sp, #16]
 8020844:	9701      	str	r7, [sp, #4]
 8020846:	9400      	str	r4, [sp, #0]
 8020848:	f7fb fae8 	bl	801be1c <nema_bind_src_tex>
 802084c:	2001      	movs	r0, #1
 802084e:	f7fc f915 	bl	801ca7c <nema_enable_tiling>
 8020852:	2301      	movs	r3, #1
 8020854:	461a      	mov	r2, r3
 8020856:	4619      	mov	r1, r3
 8020858:	4618      	mov	r0, r3
 802085a:	f7fc f923 	bl	801caa4 <nema_enable_aa>
 802085e:	f1bb 0f01 	cmp.w	fp, #1
 8020862:	d069      	beq.n	8020938 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x200>
 8020864:	edd5 2a00 	vldr	s5, [r5]
 8020868:	ed95 4a01 	vldr	s8, [r5, #4]
 802086c:	edd5 4a05 	vldr	s9, [r5, #20]
 8020870:	ed95 5a06 	vldr	s10, [r5, #24]
 8020874:	edd5 5a0a 	vldr	s11, [r5, #40]	; 0x28
 8020878:	ed95 6a0b 	vldr	s12, [r5, #44]	; 0x2c
 802087c:	353c      	adds	r5, #60	; 0x3c
 802087e:	f9b8 3000 	ldrsh.w	r3, [r8]
 8020882:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8020978 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x240>
 8020886:	ee00 3a10 	vmov	s0, r3
 802088a:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 802088e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8020892:	ee03 3a90 	vmov	s7, r3
 8020896:	edd5 6a00 	vldr	s13, [r5]
 802089a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 802089e:	ed95 7a01 	vldr	s14, [r5, #4]
 80208a2:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 80208a6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80208aa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80208ae:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80208b2:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80208b6:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80208ba:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80208be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80208c2:	eeb0 3a40 	vmov.f32	s6, s0
 80208c6:	eeb0 2a40 	vmov.f32	s4, s0
 80208ca:	eeb0 1a40 	vmov.f32	s2, s0
 80208ce:	eef0 1a63 	vmov.f32	s3, s7
 80208d2:	eea2 0aa7 	vfma.f32	s0, s5, s15
 80208d6:	eef0 0a63 	vmov.f32	s1, s7
 80208da:	eef0 2a63 	vmov.f32	s5, s7
 80208de:	eea6 3aa7 	vfma.f32	s6, s13, s15
 80208e2:	eea5 2aa7 	vfma.f32	s4, s11, s15
 80208e6:	eea4 1aa7 	vfma.f32	s2, s9, s15
 80208ea:	eee6 2a27 	vfma.f32	s5, s12, s15
 80208ee:	eee5 1a27 	vfma.f32	s3, s10, s15
 80208f2:	eee4 0a27 	vfma.f32	s1, s8, s15
 80208f6:	eee7 3a27 	vfma.f32	s7, s14, s15
 80208fa:	f7fb fd49 	bl	801c390 <nema_blit_quad_fit>
 80208fe:	4b1c      	ldr	r3, [pc, #112]	; (8020970 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x238>)
 8020900:	6818      	ldr	r0, [r3, #0]
 8020902:	b330      	cbz	r0, 8020952 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x21a>
 8020904:	b007      	add	sp, #28
 8020906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802090a:	f7fd bd61 	b.w	801e3d0 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 802090e:	9b05      	ldr	r3, [sp, #20]
 8020910:	781b      	ldrb	r3, [r3, #0]
 8020912:	e790      	b.n	8020836 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 8020914:	2310      	movs	r3, #16
 8020916:	e78e      	b.n	8020836 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 8020918:	2339      	movs	r3, #57	; 0x39
 802091a:	e78c      	b.n	8020836 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 802091c:	4a17      	ldr	r2, [pc, #92]	; (802097c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x244>)
 802091e:	23ff      	movs	r3, #255	; 0xff
 8020920:	6810      	ldr	r0, [r2, #0]
 8020922:	b2c2      	uxtb	r2, r0
 8020924:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8020928:	f3c0 4007 	ubfx	r0, r0, #16, #8
 802092c:	f7fb fa6e 	bl	801be0c <nema_rgba>
 8020930:	f7fb fa2c 	bl	801bd8c <nema_set_tex_color>
 8020934:	2329      	movs	r3, #41	; 0x29
 8020936:	e77e      	b.n	8020836 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xfe>
 8020938:	edd5 2a05 	vldr	s5, [r5, #20]
 802093c:	ed95 4a06 	vldr	s8, [r5, #24]
 8020940:	edd5 4a0a 	vldr	s9, [r5, #40]	; 0x28
 8020944:	ed95 5a0b 	vldr	s10, [r5, #44]	; 0x2c
 8020948:	edd5 5a0f 	vldr	s11, [r5, #60]	; 0x3c
 802094c:	ed95 6a10 	vldr	s12, [r5, #64]	; 0x40
 8020950:	e795      	b.n	802087e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x146>
 8020952:	4b0b      	ldr	r3, [pc, #44]	; (8020980 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x248>)
 8020954:	4a0b      	ldr	r2, [pc, #44]	; (8020984 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x24c>)
 8020956:	217c      	movs	r1, #124	; 0x7c
 8020958:	480b      	ldr	r0, [pc, #44]	; (8020988 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x250>)
 802095a:	f008 fc7b 	bl	8029254 <__assert_func>
 802095e:	4b0b      	ldr	r3, [pc, #44]	; (802098c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x254>)
 8020960:	4a0b      	ldr	r2, [pc, #44]	; (8020990 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x258>)
 8020962:	f240 314f 	movw	r1, #847	; 0x34f
 8020966:	480b      	ldr	r0, [pc, #44]	; (8020994 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x25c>)
 8020968:	f008 fc74 	bl	8029254 <__assert_func>
 802096c:	20197a38 	.word	0x20197a38
 8020970:	20197c70 	.word	0x20197c70
 8020974:	08000504 	.word	0x08000504
 8020978:	3d800000 	.word	0x3d800000
 802097c:	20197a48 	.word	0x20197a48
 8020980:	0802c0c0 	.word	0x0802c0c0
 8020984:	0802c8c8 	.word	0x0802c8c8
 8020988:	0802c0e8 	.word	0x0802c0e8
 802098c:	0802bfb8 	.word	0x0802bfb8
 8020990:	0802ca80 	.word	0x0802ca80
 8020994:	0802c164 	.word	0x0802c164

08020998 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8020998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802099c:	4680      	mov	r8, r0
 802099e:	460f      	mov	r7, r1
 80209a0:	4614      	mov	r4, r2
 80209a2:	461e      	mov	r6, r3
 80209a4:	4db2      	ldr	r5, [pc, #712]	; (8020c70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2d8>)
 80209a6:	e8d5 3f8f 	ldab	r3, [r5]
 80209aa:	07da      	lsls	r2, r3, #31
 80209ac:	f140 823a 	bpl.w	8020e24 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48c>
 80209b0:	4db0      	ldr	r5, [pc, #704]	; (8020c74 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2dc>)
 80209b2:	e8d5 3f8f 	ldab	r3, [r5]
 80209b6:	07db      	lsls	r3, r3, #31
 80209b8:	f140 8225 	bpl.w	8020e06 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46e>
 80209bc:	4dae      	ldr	r5, [pc, #696]	; (8020c78 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e0>)
 80209be:	e8d5 3f8f 	ldab	r3, [r5]
 80209c2:	07d8      	lsls	r0, r3, #31
 80209c4:	f140 8210 	bpl.w	8020de8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x450>
 80209c8:	4dac      	ldr	r5, [pc, #688]	; (8020c7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e4>)
 80209ca:	e8d5 3f8f 	ldab	r3, [r5]
 80209ce:	07d9      	lsls	r1, r3, #31
 80209d0:	f140 81fb 	bpl.w	8020dca <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x432>
 80209d4:	4daa      	ldr	r5, [pc, #680]	; (8020c80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e8>)
 80209d6:	e8d5 3f8f 	ldab	r3, [r5]
 80209da:	07da      	lsls	r2, r3, #31
 80209dc:	f140 81e6 	bpl.w	8020dac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x414>
 80209e0:	4da8      	ldr	r5, [pc, #672]	; (8020c84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2ec>)
 80209e2:	e8d5 3f8f 	ldab	r3, [r5]
 80209e6:	07db      	lsls	r3, r3, #31
 80209e8:	f140 81d1 	bpl.w	8020d8e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3f6>
 80209ec:	4da6      	ldr	r5, [pc, #664]	; (8020c88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f0>)
 80209ee:	e8d5 3f8f 	ldab	r3, [r5]
 80209f2:	07d8      	lsls	r0, r3, #31
 80209f4:	f140 81bc 	bpl.w	8020d70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3d8>
 80209f8:	4da4      	ldr	r5, [pc, #656]	; (8020c8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f4>)
 80209fa:	e8d5 3f8f 	ldab	r3, [r5]
 80209fe:	07d9      	lsls	r1, r3, #31
 8020a00:	f140 81a7 	bpl.w	8020d52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3ba>
 8020a04:	4da2      	ldr	r5, [pc, #648]	; (8020c90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f8>)
 8020a06:	e8d5 3f8f 	ldab	r3, [r5]
 8020a0a:	07da      	lsls	r2, r3, #31
 8020a0c:	f140 8192 	bpl.w	8020d34 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x39c>
 8020a10:	4da0      	ldr	r5, [pc, #640]	; (8020c94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2fc>)
 8020a12:	e8d5 3f8f 	ldab	r3, [r5]
 8020a16:	07db      	lsls	r3, r3, #31
 8020a18:	f140 811a 	bpl.w	8020c50 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2b8>
 8020a1c:	4d9e      	ldr	r5, [pc, #632]	; (8020c98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x300>)
 8020a1e:	e8d5 3f8f 	ldab	r3, [r5]
 8020a22:	07d8      	lsls	r0, r3, #31
 8020a24:	f140 8105 	bpl.w	8020c32 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x29a>
 8020a28:	4d9c      	ldr	r5, [pc, #624]	; (8020c9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x304>)
 8020a2a:	e8d5 3f8f 	ldab	r3, [r5]
 8020a2e:	07d9      	lsls	r1, r3, #31
 8020a30:	f140 80f0 	bpl.w	8020c14 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x27c>
 8020a34:	4d9a      	ldr	r5, [pc, #616]	; (8020ca0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x308>)
 8020a36:	e8d5 3f8f 	ldab	r3, [r5]
 8020a3a:	07da      	lsls	r2, r3, #31
 8020a3c:	f140 80db 	bpl.w	8020bf6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x25e>
 8020a40:	4d98      	ldr	r5, [pc, #608]	; (8020ca4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30c>)
 8020a42:	e8d5 3f8f 	ldab	r3, [r5]
 8020a46:	07db      	lsls	r3, r3, #31
 8020a48:	f140 80c6 	bpl.w	8020bd8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x240>
 8020a4c:	4d96      	ldr	r5, [pc, #600]	; (8020ca8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x310>)
 8020a4e:	e8d5 3f8f 	ldab	r3, [r5]
 8020a52:	07d8      	lsls	r0, r3, #31
 8020a54:	f140 80b1 	bpl.w	8020bba <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x222>
 8020a58:	4d94      	ldr	r5, [pc, #592]	; (8020cac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x314>)
 8020a5a:	e8d5 3f8f 	ldab	r3, [r5]
 8020a5e:	07d9      	lsls	r1, r3, #31
 8020a60:	f140 809c 	bpl.w	8020b9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x204>
 8020a64:	4d92      	ldr	r5, [pc, #584]	; (8020cb0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x318>)
 8020a66:	e8d5 3f8f 	ldab	r3, [r5]
 8020a6a:	07da      	lsls	r2, r3, #31
 8020a6c:	f140 8087 	bpl.w	8020b7e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e6>
 8020a70:	4d90      	ldr	r5, [pc, #576]	; (8020cb4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x31c>)
 8020a72:	e8d5 3f8f 	ldab	r3, [r5]
 8020a76:	07db      	lsls	r3, r3, #31
 8020a78:	d573      	bpl.n	8020b62 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ca>
 8020a7a:	4d8f      	ldr	r5, [pc, #572]	; (8020cb8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x320>)
 8020a7c:	e8d5 3f8f 	ldab	r3, [r5]
 8020a80:	07d8      	lsls	r0, r3, #31
 8020a82:	d560      	bpl.n	8020b46 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ae>
 8020a84:	4d8d      	ldr	r5, [pc, #564]	; (8020cbc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x324>)
 8020a86:	e8d5 3f8f 	ldab	r3, [r5]
 8020a8a:	07d9      	lsls	r1, r3, #31
 8020a8c:	d54d      	bpl.n	8020b2a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x192>
 8020a8e:	4d8c      	ldr	r5, [pc, #560]	; (8020cc0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x328>)
 8020a90:	e8d5 3f8f 	ldab	r3, [r5]
 8020a94:	07da      	lsls	r2, r3, #31
 8020a96:	d53a      	bpl.n	8020b0e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 8020a98:	4d8a      	ldr	r5, [pc, #552]	; (8020cc4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x32c>)
 8020a9a:	e8d5 3f8f 	ldab	r3, [r5]
 8020a9e:	07db      	lsls	r3, r3, #31
 8020aa0:	d517      	bpl.n	8020ad2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8020aa2:	f898 3008 	ldrb.w	r3, [r8, #8]
 8020aa6:	2b01      	cmp	r3, #1
 8020aa8:	d024      	beq.n	8020af4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15c>
 8020aaa:	f0c0 81ca 	bcc.w	8020e42 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4aa>
 8020aae:	2b02      	cmp	r3, #2
 8020ab0:	d002      	beq.n	8020ab8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8020ab2:	2000      	movs	r0, #0
 8020ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020ab8:	2eff      	cmp	r6, #255	; 0xff
 8020aba:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 8020abe:	f000 81cb 	beq.w	8020e58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c0>
 8020ac2:	2c03      	cmp	r4, #3
 8020ac4:	d8f5      	bhi.n	8020ab2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020ac6:	e8df f014 	tbh	[pc, r4, lsl #1]
 8020aca:	01ff      	.short	0x01ff
 8020acc:	01e701ee 	.word	0x01e701ee
 8020ad0:	01e0      	.short	0x01e0
 8020ad2:	4628      	mov	r0, r5
 8020ad4:	f008 fb93 	bl	80291fe <__cxa_guard_acquire>
 8020ad8:	2800      	cmp	r0, #0
 8020ada:	d0e2      	beq.n	8020aa2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10a>
 8020adc:	4628      	mov	r0, r5
 8020ade:	f008 fb9a 	bl	8029216 <__cxa_guard_release>
 8020ae2:	4a79      	ldr	r2, [pc, #484]	; (8020cc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020ae4:	4979      	ldr	r1, [pc, #484]	; (8020ccc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x334>)
 8020ae6:	487a      	ldr	r0, [pc, #488]	; (8020cd0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x338>)
 8020ae8:	f008 fb82 	bl	80291f0 <__aeabi_atexit>
 8020aec:	f898 3008 	ldrb.w	r3, [r8, #8]
 8020af0:	2b01      	cmp	r3, #1
 8020af2:	d1da      	bne.n	8020aaa <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x112>
 8020af4:	2eff      	cmp	r6, #255	; 0xff
 8020af6:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 8020afa:	f000 81b6 	beq.w	8020e6a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4d2>
 8020afe:	2c03      	cmp	r4, #3
 8020b00:	d8d7      	bhi.n	8020ab2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020b02:	e8df f014 	tbh	[pc, r4, lsl #1]
 8020b06:	0233      	.short	0x0233
 8020b08:	021b0222 	.word	0x021b0222
 8020b0c:	0214      	.short	0x0214
 8020b0e:	4628      	mov	r0, r5
 8020b10:	f008 fb75 	bl	80291fe <__cxa_guard_acquire>
 8020b14:	2800      	cmp	r0, #0
 8020b16:	d0bf      	beq.n	8020a98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8020b18:	4628      	mov	r0, r5
 8020b1a:	f008 fb7c 	bl	8029216 <__cxa_guard_release>
 8020b1e:	4a6a      	ldr	r2, [pc, #424]	; (8020cc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020b20:	496c      	ldr	r1, [pc, #432]	; (8020cd4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x33c>)
 8020b22:	486d      	ldr	r0, [pc, #436]	; (8020cd8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x340>)
 8020b24:	f008 fb64 	bl	80291f0 <__aeabi_atexit>
 8020b28:	e7b6      	b.n	8020a98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8020b2a:	4628      	mov	r0, r5
 8020b2c:	f008 fb67 	bl	80291fe <__cxa_guard_acquire>
 8020b30:	2800      	cmp	r0, #0
 8020b32:	d0ac      	beq.n	8020a8e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf6>
 8020b34:	4628      	mov	r0, r5
 8020b36:	f008 fb6e 	bl	8029216 <__cxa_guard_release>
 8020b3a:	4a63      	ldr	r2, [pc, #396]	; (8020cc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020b3c:	4967      	ldr	r1, [pc, #412]	; (8020cdc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x344>)
 8020b3e:	4868      	ldr	r0, [pc, #416]	; (8020ce0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x348>)
 8020b40:	f008 fb56 	bl	80291f0 <__aeabi_atexit>
 8020b44:	e7a3      	b.n	8020a8e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf6>
 8020b46:	4628      	mov	r0, r5
 8020b48:	f008 fb59 	bl	80291fe <__cxa_guard_acquire>
 8020b4c:	2800      	cmp	r0, #0
 8020b4e:	d099      	beq.n	8020a84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8020b50:	4628      	mov	r0, r5
 8020b52:	f008 fb60 	bl	8029216 <__cxa_guard_release>
 8020b56:	4a5c      	ldr	r2, [pc, #368]	; (8020cc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020b58:	4962      	ldr	r1, [pc, #392]	; (8020ce4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x34c>)
 8020b5a:	4863      	ldr	r0, [pc, #396]	; (8020ce8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x350>)
 8020b5c:	f008 fb48 	bl	80291f0 <__aeabi_atexit>
 8020b60:	e790      	b.n	8020a84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8020b62:	4628      	mov	r0, r5
 8020b64:	f008 fb4b 	bl	80291fe <__cxa_guard_acquire>
 8020b68:	2800      	cmp	r0, #0
 8020b6a:	d086      	beq.n	8020a7a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8020b6c:	4628      	mov	r0, r5
 8020b6e:	f008 fb52 	bl	8029216 <__cxa_guard_release>
 8020b72:	4a55      	ldr	r2, [pc, #340]	; (8020cc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020b74:	495d      	ldr	r1, [pc, #372]	; (8020cec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x354>)
 8020b76:	485e      	ldr	r0, [pc, #376]	; (8020cf0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x358>)
 8020b78:	f008 fb3a 	bl	80291f0 <__aeabi_atexit>
 8020b7c:	e77d      	b.n	8020a7a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8020b7e:	4628      	mov	r0, r5
 8020b80:	f008 fb3d 	bl	80291fe <__cxa_guard_acquire>
 8020b84:	2800      	cmp	r0, #0
 8020b86:	f43f af73 	beq.w	8020a70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 8020b8a:	4628      	mov	r0, r5
 8020b8c:	f008 fb43 	bl	8029216 <__cxa_guard_release>
 8020b90:	4a4d      	ldr	r2, [pc, #308]	; (8020cc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020b92:	4958      	ldr	r1, [pc, #352]	; (8020cf4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x35c>)
 8020b94:	4858      	ldr	r0, [pc, #352]	; (8020cf8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x360>)
 8020b96:	f008 fb2b 	bl	80291f0 <__aeabi_atexit>
 8020b9a:	e769      	b.n	8020a70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 8020b9c:	4628      	mov	r0, r5
 8020b9e:	f008 fb2e 	bl	80291fe <__cxa_guard_acquire>
 8020ba2:	2800      	cmp	r0, #0
 8020ba4:	f43f af5e 	beq.w	8020a64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8020ba8:	4628      	mov	r0, r5
 8020baa:	f008 fb34 	bl	8029216 <__cxa_guard_release>
 8020bae:	4a46      	ldr	r2, [pc, #280]	; (8020cc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020bb0:	4952      	ldr	r1, [pc, #328]	; (8020cfc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x364>)
 8020bb2:	4853      	ldr	r0, [pc, #332]	; (8020d00 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x368>)
 8020bb4:	f008 fb1c 	bl	80291f0 <__aeabi_atexit>
 8020bb8:	e754      	b.n	8020a64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8020bba:	4628      	mov	r0, r5
 8020bbc:	f008 fb1f 	bl	80291fe <__cxa_guard_acquire>
 8020bc0:	2800      	cmp	r0, #0
 8020bc2:	f43f af49 	beq.w	8020a58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8020bc6:	4628      	mov	r0, r5
 8020bc8:	f008 fb25 	bl	8029216 <__cxa_guard_release>
 8020bcc:	4a3e      	ldr	r2, [pc, #248]	; (8020cc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020bce:	494d      	ldr	r1, [pc, #308]	; (8020d04 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x36c>)
 8020bd0:	484d      	ldr	r0, [pc, #308]	; (8020d08 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x370>)
 8020bd2:	f008 fb0d 	bl	80291f0 <__aeabi_atexit>
 8020bd6:	e73f      	b.n	8020a58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8020bd8:	4628      	mov	r0, r5
 8020bda:	f008 fb10 	bl	80291fe <__cxa_guard_acquire>
 8020bde:	2800      	cmp	r0, #0
 8020be0:	f43f af34 	beq.w	8020a4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 8020be4:	4628      	mov	r0, r5
 8020be6:	f008 fb16 	bl	8029216 <__cxa_guard_release>
 8020bea:	4a37      	ldr	r2, [pc, #220]	; (8020cc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020bec:	4947      	ldr	r1, [pc, #284]	; (8020d0c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x374>)
 8020bee:	4848      	ldr	r0, [pc, #288]	; (8020d10 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x378>)
 8020bf0:	f008 fafe 	bl	80291f0 <__aeabi_atexit>
 8020bf4:	e72a      	b.n	8020a4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 8020bf6:	4628      	mov	r0, r5
 8020bf8:	f008 fb01 	bl	80291fe <__cxa_guard_acquire>
 8020bfc:	2800      	cmp	r0, #0
 8020bfe:	f43f af1f 	beq.w	8020a40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8020c02:	4628      	mov	r0, r5
 8020c04:	f008 fb07 	bl	8029216 <__cxa_guard_release>
 8020c08:	4a2f      	ldr	r2, [pc, #188]	; (8020cc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020c0a:	4942      	ldr	r1, [pc, #264]	; (8020d14 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x37c>)
 8020c0c:	4842      	ldr	r0, [pc, #264]	; (8020d18 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x380>)
 8020c0e:	f008 faef 	bl	80291f0 <__aeabi_atexit>
 8020c12:	e715      	b.n	8020a40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8020c14:	4628      	mov	r0, r5
 8020c16:	f008 faf2 	bl	80291fe <__cxa_guard_acquire>
 8020c1a:	2800      	cmp	r0, #0
 8020c1c:	f43f af0a 	beq.w	8020a34 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9c>
 8020c20:	4628      	mov	r0, r5
 8020c22:	f008 faf8 	bl	8029216 <__cxa_guard_release>
 8020c26:	4a28      	ldr	r2, [pc, #160]	; (8020cc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020c28:	493c      	ldr	r1, [pc, #240]	; (8020d1c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x384>)
 8020c2a:	483d      	ldr	r0, [pc, #244]	; (8020d20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x388>)
 8020c2c:	f008 fae0 	bl	80291f0 <__aeabi_atexit>
 8020c30:	e700      	b.n	8020a34 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9c>
 8020c32:	4628      	mov	r0, r5
 8020c34:	f008 fae3 	bl	80291fe <__cxa_guard_acquire>
 8020c38:	2800      	cmp	r0, #0
 8020c3a:	f43f aef5 	beq.w	8020a28 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x90>
 8020c3e:	4628      	mov	r0, r5
 8020c40:	f008 fae9 	bl	8029216 <__cxa_guard_release>
 8020c44:	4a20      	ldr	r2, [pc, #128]	; (8020cc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020c46:	4937      	ldr	r1, [pc, #220]	; (8020d24 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x38c>)
 8020c48:	4837      	ldr	r0, [pc, #220]	; (8020d28 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x390>)
 8020c4a:	f008 fad1 	bl	80291f0 <__aeabi_atexit>
 8020c4e:	e6eb      	b.n	8020a28 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x90>
 8020c50:	4628      	mov	r0, r5
 8020c52:	f008 fad4 	bl	80291fe <__cxa_guard_acquire>
 8020c56:	2800      	cmp	r0, #0
 8020c58:	f43f aee0 	beq.w	8020a1c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 8020c5c:	4628      	mov	r0, r5
 8020c5e:	f008 fada 	bl	8029216 <__cxa_guard_release>
 8020c62:	4a19      	ldr	r2, [pc, #100]	; (8020cc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 8020c64:	4931      	ldr	r1, [pc, #196]	; (8020d2c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x394>)
 8020c66:	4832      	ldr	r0, [pc, #200]	; (8020d30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x398>)
 8020c68:	f008 fac2 	bl	80291f0 <__aeabi_atexit>
 8020c6c:	e6d6      	b.n	8020a1c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 8020c6e:	bf00      	nop
 8020c70:	20197c98 	.word	0x20197c98
 8020c74:	20197cac 	.word	0x20197cac
 8020c78:	20197c74 	.word	0x20197c74
 8020c7c:	20197c80 	.word	0x20197c80
 8020c80:	20197cb8 	.word	0x20197cb8
 8020c84:	20197cc4 	.word	0x20197cc4
 8020c88:	20197c8c 	.word	0x20197c8c
 8020c8c:	20197ca4 	.word	0x20197ca4
 8020c90:	20197c9c 	.word	0x20197c9c
 8020c94:	20197cb0 	.word	0x20197cb0
 8020c98:	20197c78 	.word	0x20197c78
 8020c9c:	20197c84 	.word	0x20197c84
 8020ca0:	20197cbc 	.word	0x20197cbc
 8020ca4:	20197cc8 	.word	0x20197cc8
 8020ca8:	20197c90 	.word	0x20197c90
 8020cac:	20197ca8 	.word	0x20197ca8
 8020cb0:	20197ca0 	.word	0x20197ca0
 8020cb4:	20197cb4 	.word	0x20197cb4
 8020cb8:	20197c7c 	.word	0x20197c7c
 8020cbc:	20197c88 	.word	0x20197c88
 8020cc0:	20197cc0 	.word	0x20197cc0
 8020cc4:	20197c94 	.word	0x20197c94
 8020cc8:	20000000 	.word	0x20000000
 8020ccc:	08020001 	.word	0x08020001
 8020cd0:	20000088 	.word	0x20000088
 8020cd4:	0801fffd 	.word	0x0801fffd
 8020cd8:	200000b4 	.word	0x200000b4
 8020cdc:	0802000d 	.word	0x0802000d
 8020ce0:	2000007c 	.word	0x2000007c
 8020ce4:	08020011 	.word	0x08020011
 8020ce8:	20000070 	.word	0x20000070
 8020cec:	08020005 	.word	0x08020005
 8020cf0:	200000a8 	.word	0x200000a8
 8020cf4:	08020009 	.word	0x08020009
 8020cf8:	20000094 	.word	0x20000094
 8020cfc:	0802001d 	.word	0x0802001d
 8020d00:	2000009c 	.word	0x2000009c
 8020d04:	08020021 	.word	0x08020021
 8020d08:	20000084 	.word	0x20000084
 8020d0c:	08020015 	.word	0x08020015
 8020d10:	200000bc 	.word	0x200000bc
 8020d14:	08020019 	.word	0x08020019
 8020d18:	200000b0 	.word	0x200000b0
 8020d1c:	0802002d 	.word	0x0802002d
 8020d20:	20000078 	.word	0x20000078
 8020d24:	08020031 	.word	0x08020031
 8020d28:	2000006c 	.word	0x2000006c
 8020d2c:	08020025 	.word	0x08020025
 8020d30:	200000a4 	.word	0x200000a4
 8020d34:	4628      	mov	r0, r5
 8020d36:	f008 fa62 	bl	80291fe <__cxa_guard_acquire>
 8020d3a:	2800      	cmp	r0, #0
 8020d3c:	f43f ae68 	beq.w	8020a10 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78>
 8020d40:	4628      	mov	r0, r5
 8020d42:	f008 fa68 	bl	8029216 <__cxa_guard_release>
 8020d46:	4aa6      	ldr	r2, [pc, #664]	; (8020fe0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020d48:	49a6      	ldr	r1, [pc, #664]	; (8020fe4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64c>)
 8020d4a:	48a7      	ldr	r0, [pc, #668]	; (8020fe8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x650>)
 8020d4c:	f008 fa50 	bl	80291f0 <__aeabi_atexit>
 8020d50:	e65e      	b.n	8020a10 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78>
 8020d52:	4628      	mov	r0, r5
 8020d54:	f008 fa53 	bl	80291fe <__cxa_guard_acquire>
 8020d58:	2800      	cmp	r0, #0
 8020d5a:	f43f ae53 	beq.w	8020a04 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8020d5e:	4628      	mov	r0, r5
 8020d60:	f008 fa59 	bl	8029216 <__cxa_guard_release>
 8020d64:	4a9e      	ldr	r2, [pc, #632]	; (8020fe0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020d66:	49a1      	ldr	r1, [pc, #644]	; (8020fec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x654>)
 8020d68:	48a1      	ldr	r0, [pc, #644]	; (8020ff0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x658>)
 8020d6a:	f008 fa41 	bl	80291f0 <__aeabi_atexit>
 8020d6e:	e649      	b.n	8020a04 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8020d70:	4628      	mov	r0, r5
 8020d72:	f008 fa44 	bl	80291fe <__cxa_guard_acquire>
 8020d76:	2800      	cmp	r0, #0
 8020d78:	f43f ae3e 	beq.w	80209f8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 8020d7c:	4628      	mov	r0, r5
 8020d7e:	f008 fa4a 	bl	8029216 <__cxa_guard_release>
 8020d82:	4a97      	ldr	r2, [pc, #604]	; (8020fe0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020d84:	499b      	ldr	r1, [pc, #620]	; (8020ff4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x65c>)
 8020d86:	489c      	ldr	r0, [pc, #624]	; (8020ff8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x660>)
 8020d88:	f008 fa32 	bl	80291f0 <__aeabi_atexit>
 8020d8c:	e634      	b.n	80209f8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 8020d8e:	4628      	mov	r0, r5
 8020d90:	f008 fa35 	bl	80291fe <__cxa_guard_acquire>
 8020d94:	2800      	cmp	r0, #0
 8020d96:	f43f ae29 	beq.w	80209ec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 8020d9a:	4628      	mov	r0, r5
 8020d9c:	f008 fa3b 	bl	8029216 <__cxa_guard_release>
 8020da0:	4a8f      	ldr	r2, [pc, #572]	; (8020fe0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020da2:	4996      	ldr	r1, [pc, #600]	; (8020ffc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x664>)
 8020da4:	4896      	ldr	r0, [pc, #600]	; (8021000 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x668>)
 8020da6:	f008 fa23 	bl	80291f0 <__aeabi_atexit>
 8020daa:	e61f      	b.n	80209ec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 8020dac:	4628      	mov	r0, r5
 8020dae:	f008 fa26 	bl	80291fe <__cxa_guard_acquire>
 8020db2:	2800      	cmp	r0, #0
 8020db4:	f43f ae14 	beq.w	80209e0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48>
 8020db8:	4628      	mov	r0, r5
 8020dba:	f008 fa2c 	bl	8029216 <__cxa_guard_release>
 8020dbe:	4a88      	ldr	r2, [pc, #544]	; (8020fe0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020dc0:	4990      	ldr	r1, [pc, #576]	; (8021004 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66c>)
 8020dc2:	4891      	ldr	r0, [pc, #580]	; (8021008 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x670>)
 8020dc4:	f008 fa14 	bl	80291f0 <__aeabi_atexit>
 8020dc8:	e60a      	b.n	80209e0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48>
 8020dca:	4628      	mov	r0, r5
 8020dcc:	f008 fa17 	bl	80291fe <__cxa_guard_acquire>
 8020dd0:	2800      	cmp	r0, #0
 8020dd2:	f43f adff 	beq.w	80209d4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3c>
 8020dd6:	4628      	mov	r0, r5
 8020dd8:	f008 fa1d 	bl	8029216 <__cxa_guard_release>
 8020ddc:	4a80      	ldr	r2, [pc, #512]	; (8020fe0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020dde:	498b      	ldr	r1, [pc, #556]	; (802100c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x674>)
 8020de0:	488b      	ldr	r0, [pc, #556]	; (8021010 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x678>)
 8020de2:	f008 fa05 	bl	80291f0 <__aeabi_atexit>
 8020de6:	e5f5      	b.n	80209d4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3c>
 8020de8:	4628      	mov	r0, r5
 8020dea:	f008 fa08 	bl	80291fe <__cxa_guard_acquire>
 8020dee:	2800      	cmp	r0, #0
 8020df0:	f43f adea 	beq.w	80209c8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30>
 8020df4:	4628      	mov	r0, r5
 8020df6:	f008 fa0e 	bl	8029216 <__cxa_guard_release>
 8020dfa:	4a79      	ldr	r2, [pc, #484]	; (8020fe0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020dfc:	4985      	ldr	r1, [pc, #532]	; (8021014 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x67c>)
 8020dfe:	4886      	ldr	r0, [pc, #536]	; (8021018 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x680>)
 8020e00:	f008 f9f6 	bl	80291f0 <__aeabi_atexit>
 8020e04:	e5e0      	b.n	80209c8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30>
 8020e06:	4628      	mov	r0, r5
 8020e08:	f008 f9f9 	bl	80291fe <__cxa_guard_acquire>
 8020e0c:	2800      	cmp	r0, #0
 8020e0e:	f43f add5 	beq.w	80209bc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8020e12:	4628      	mov	r0, r5
 8020e14:	f008 f9ff 	bl	8029216 <__cxa_guard_release>
 8020e18:	4a71      	ldr	r2, [pc, #452]	; (8020fe0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020e1a:	4980      	ldr	r1, [pc, #512]	; (802101c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x684>)
 8020e1c:	4880      	ldr	r0, [pc, #512]	; (8021020 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x688>)
 8020e1e:	f008 f9e7 	bl	80291f0 <__aeabi_atexit>
 8020e22:	e5cb      	b.n	80209bc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8020e24:	4628      	mov	r0, r5
 8020e26:	f008 f9ea 	bl	80291fe <__cxa_guard_acquire>
 8020e2a:	2800      	cmp	r0, #0
 8020e2c:	f43f adc0 	beq.w	80209b0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8020e30:	4628      	mov	r0, r5
 8020e32:	f008 f9f0 	bl	8029216 <__cxa_guard_release>
 8020e36:	4a6a      	ldr	r2, [pc, #424]	; (8020fe0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 8020e38:	497a      	ldr	r1, [pc, #488]	; (8021024 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x68c>)
 8020e3a:	487b      	ldr	r0, [pc, #492]	; (8021028 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x690>)
 8020e3c:	f008 f9d8 	bl	80291f0 <__aeabi_atexit>
 8020e40:	e5b6      	b.n	80209b0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8020e42:	2eff      	cmp	r6, #255	; 0xff
 8020e44:	f1a4 042c 	sub.w	r4, r4, #44	; 0x2c
 8020e48:	d018      	beq.n	8020e7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e4>
 8020e4a:	2c03      	cmp	r4, #3
 8020e4c:	f63f ae31 	bhi.w	8020ab2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020e50:	e8df f004 	tbb	[pc, r4]
 8020e54:	4b525963 	.word	0x4b525963
 8020e58:	2c03      	cmp	r4, #3
 8020e5a:	f63f ae2a 	bhi.w	8020ab2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020e5e:	e8df f014 	tbh	[pc, r4, lsl #1]
 8020e62:	012d      	.short	0x012d
 8020e64:	001b011e 	.word	0x001b011e
 8020e68:	0014      	.short	0x0014
 8020e6a:	2c03      	cmp	r4, #3
 8020e6c:	f63f ae21 	bhi.w	8020ab2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020e70:	e8df f014 	tbh	[pc, r4, lsl #1]
 8020e74:	00f000ff 	.word	0x00f000ff
 8020e78:	00af010e 	.word	0x00af010e
 8020e7c:	2c03      	cmp	r4, #3
 8020e7e:	f63f ae18 	bhi.w	8020ab2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020e82:	e8df f004 	tbb	[pc, r4]
 8020e86:	929c      	.short	0x929c
 8020e88:	848b      	.short	0x848b
 8020e8a:	687b      	ldr	r3, [r7, #4]
 8020e8c:	4867      	ldr	r0, [pc, #412]	; (802102c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x694>)
 8020e8e:	781b      	ldrb	r3, [r3, #0]
 8020e90:	2b00      	cmp	r3, #0
 8020e92:	bf18      	it	ne
 8020e94:	2000      	movne	r0, #0
 8020e96:	e60d      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020e98:	687b      	ldr	r3, [r7, #4]
 8020e9a:	4865      	ldr	r0, [pc, #404]	; (8021030 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x698>)
 8020e9c:	781b      	ldrb	r3, [r3, #0]
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	bf18      	it	ne
 8020ea2:	2000      	movne	r0, #0
 8020ea4:	e606      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020ea6:	687b      	ldr	r3, [r7, #4]
 8020ea8:	781b      	ldrb	r3, [r3, #0]
 8020eaa:	2b01      	cmp	r3, #1
 8020eac:	f000 811b 	beq.w	80210e6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x74e>
 8020eb0:	f0c0 8113 	bcc.w	80210da <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x742>
 8020eb4:	2b02      	cmp	r3, #2
 8020eb6:	f47f adfc 	bne.w	8020ab2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020eba:	4b5e      	ldr	r3, [pc, #376]	; (8021034 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x69c>)
 8020ebc:	4a5e      	ldr	r2, [pc, #376]	; (8021038 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 8020ebe:	f240 616e 	movw	r1, #1646	; 0x66e
 8020ec2:	485e      	ldr	r0, [pc, #376]	; (802103c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 8020ec4:	f008 f9c6 	bl	8029254 <__assert_func>
 8020ec8:	687b      	ldr	r3, [r7, #4]
 8020eca:	781b      	ldrb	r3, [r3, #0]
 8020ecc:	2b01      	cmp	r3, #1
 8020ece:	f000 8108 	beq.w	80210e2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x74a>
 8020ed2:	f0c0 8104 	bcc.w	80210de <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x746>
 8020ed6:	2b02      	cmp	r3, #2
 8020ed8:	f47f adeb 	bne.w	8020ab2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020edc:	4b55      	ldr	r3, [pc, #340]	; (8021034 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x69c>)
 8020ede:	4a56      	ldr	r2, [pc, #344]	; (8021038 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 8020ee0:	f240 617a 	movw	r1, #1658	; 0x67a
 8020ee4:	4855      	ldr	r0, [pc, #340]	; (802103c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 8020ee6:	f008 f9b5 	bl	8029254 <__assert_func>
 8020eea:	687b      	ldr	r3, [r7, #4]
 8020eec:	4846      	ldr	r0, [pc, #280]	; (8021008 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x670>)
 8020eee:	781b      	ldrb	r3, [r3, #0]
 8020ef0:	2b00      	cmp	r3, #0
 8020ef2:	bf18      	it	ne
 8020ef4:	2000      	movne	r0, #0
 8020ef6:	e5dd      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020ef8:	687b      	ldr	r3, [r7, #4]
 8020efa:	483f      	ldr	r0, [pc, #252]	; (8020ff8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x660>)
 8020efc:	781b      	ldrb	r3, [r3, #0]
 8020efe:	2b00      	cmp	r3, #0
 8020f00:	bf18      	it	ne
 8020f02:	2000      	movne	r0, #0
 8020f04:	e5d6      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f06:	687b      	ldr	r3, [r7, #4]
 8020f08:	781b      	ldrb	r3, [r3, #0]
 8020f0a:	2b00      	cmp	r3, #0
 8020f0c:	f000 80ed 	beq.w	80210ea <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x752>
 8020f10:	2b01      	cmp	r3, #1
 8020f12:	4845      	ldr	r0, [pc, #276]	; (8021028 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x690>)
 8020f14:	bf18      	it	ne
 8020f16:	2000      	movne	r0, #0
 8020f18:	e5cc      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f1a:	687b      	ldr	r3, [r7, #4]
 8020f1c:	781b      	ldrb	r3, [r3, #0]
 8020f1e:	2b00      	cmp	r3, #0
 8020f20:	f000 80e5 	beq.w	80210ee <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x756>
 8020f24:	2b01      	cmp	r3, #1
 8020f26:	483c      	ldr	r0, [pc, #240]	; (8021018 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x680>)
 8020f28:	bf18      	it	ne
 8020f2a:	2000      	movne	r0, #0
 8020f2c:	e5c2      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f2e:	687b      	ldr	r3, [r7, #4]
 8020f30:	4843      	ldr	r0, [pc, #268]	; (8021040 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a8>)
 8020f32:	781b      	ldrb	r3, [r3, #0]
 8020f34:	2b00      	cmp	r3, #0
 8020f36:	bf18      	it	ne
 8020f38:	2000      	movne	r0, #0
 8020f3a:	e5bb      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f3c:	687b      	ldr	r3, [r7, #4]
 8020f3e:	4841      	ldr	r0, [pc, #260]	; (8021044 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6ac>)
 8020f40:	781b      	ldrb	r3, [r3, #0]
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	bf18      	it	ne
 8020f46:	2000      	movne	r0, #0
 8020f48:	e5b4      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f4a:	687b      	ldr	r3, [r7, #4]
 8020f4c:	781b      	ldrb	r3, [r3, #0]
 8020f4e:	2b01      	cmp	r3, #1
 8020f50:	f000 80d5 	beq.w	80210fe <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x766>
 8020f54:	f0c0 80d1 	bcc.w	80210fa <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x762>
 8020f58:	2b02      	cmp	r3, #2
 8020f5a:	f47f adaa 	bne.w	8020ab2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020f5e:	4b3a      	ldr	r3, [pc, #232]	; (8021048 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b0>)
 8020f60:	4a35      	ldr	r2, [pc, #212]	; (8021038 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 8020f62:	f240 6113 	movw	r1, #1555	; 0x613
 8020f66:	4835      	ldr	r0, [pc, #212]	; (802103c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 8020f68:	f008 f974 	bl	8029254 <__assert_func>
 8020f6c:	687b      	ldr	r3, [r7, #4]
 8020f6e:	781b      	ldrb	r3, [r3, #0]
 8020f70:	2b01      	cmp	r3, #1
 8020f72:	f000 80c0 	beq.w	80210f6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x75e>
 8020f76:	f0c0 80bc 	bcc.w	80210f2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x75a>
 8020f7a:	2b02      	cmp	r3, #2
 8020f7c:	f47f ad99 	bne.w	8020ab2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8020f80:	4b32      	ldr	r3, [pc, #200]	; (802104c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b4>)
 8020f82:	4a2d      	ldr	r2, [pc, #180]	; (8021038 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 8020f84:	f240 611f 	movw	r1, #1567	; 0x61f
 8020f88:	482c      	ldr	r0, [pc, #176]	; (802103c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 8020f8a:	f008 f963 	bl	8029254 <__assert_func>
 8020f8e:	687b      	ldr	r3, [r7, #4]
 8020f90:	481b      	ldr	r0, [pc, #108]	; (8021000 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x668>)
 8020f92:	781b      	ldrb	r3, [r3, #0]
 8020f94:	2b00      	cmp	r3, #0
 8020f96:	bf18      	it	ne
 8020f98:	2000      	movne	r0, #0
 8020f9a:	e58b      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020f9c:	687b      	ldr	r3, [r7, #4]
 8020f9e:	4814      	ldr	r0, [pc, #80]	; (8020ff0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x658>)
 8020fa0:	781b      	ldrb	r3, [r3, #0]
 8020fa2:	2b00      	cmp	r3, #0
 8020fa4:	bf18      	it	ne
 8020fa6:	2000      	movne	r0, #0
 8020fa8:	e584      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020faa:	687b      	ldr	r3, [r7, #4]
 8020fac:	781b      	ldrb	r3, [r3, #0]
 8020fae:	2b00      	cmp	r3, #0
 8020fb0:	f000 80af 	beq.w	8021112 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x77a>
 8020fb4:	2b01      	cmp	r3, #1
 8020fb6:	481a      	ldr	r0, [pc, #104]	; (8021020 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x688>)
 8020fb8:	bf18      	it	ne
 8020fba:	2000      	movne	r0, #0
 8020fbc:	e57a      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020fbe:	687b      	ldr	r3, [r7, #4]
 8020fc0:	781b      	ldrb	r3, [r3, #0]
 8020fc2:	2b00      	cmp	r3, #0
 8020fc4:	f000 80a7 	beq.w	8021116 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x77e>
 8020fc8:	2b01      	cmp	r3, #1
 8020fca:	4811      	ldr	r0, [pc, #68]	; (8021010 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x678>)
 8020fcc:	bf18      	it	ne
 8020fce:	2000      	movne	r0, #0
 8020fd0:	e570      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020fd2:	687b      	ldr	r3, [r7, #4]
 8020fd4:	481e      	ldr	r0, [pc, #120]	; (8021050 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b8>)
 8020fd6:	781b      	ldrb	r3, [r3, #0]
 8020fd8:	2b00      	cmp	r3, #0
 8020fda:	bf18      	it	ne
 8020fdc:	2000      	movne	r0, #0
 8020fde:	e569      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8020fe0:	20000000 	.word	0x20000000
 8020fe4:	08020029 	.word	0x08020029
 8020fe8:	20000090 	.word	0x20000090
 8020fec:	0802003d 	.word	0x0802003d
 8020ff0:	20000098 	.word	0x20000098
 8020ff4:	08020041 	.word	0x08020041
 8020ff8:	20000080 	.word	0x20000080
 8020ffc:	08020035 	.word	0x08020035
 8021000:	200000b8 	.word	0x200000b8
 8021004:	08020039 	.word	0x08020039
 8021008:	200000ac 	.word	0x200000ac
 802100c:	0802004d 	.word	0x0802004d
 8021010:	20000074 	.word	0x20000074
 8021014:	08020051 	.word	0x08020051
 8021018:	20000068 	.word	0x20000068
 802101c:	08020045 	.word	0x08020045
 8021020:	200000a0 	.word	0x200000a0
 8021024:	08020049 	.word	0x08020049
 8021028:	2000008c 	.word	0x2000008c
 802102c:	200000b4 	.word	0x200000b4
 8021030:	20000088 	.word	0x20000088
 8021034:	0802c2bc 	.word	0x0802c2bc
 8021038:	0802d09c 	.word	0x0802d09c
 802103c:	0802c164 	.word	0x0802c164
 8021040:	200000b0 	.word	0x200000b0
 8021044:	20000084 	.word	0x20000084
 8021048:	0802c228 	.word	0x0802c228
 802104c:	0802c270 	.word	0x0802c270
 8021050:	200000bc 	.word	0x200000bc
 8021054:	687b      	ldr	r3, [r7, #4]
 8021056:	781b      	ldrb	r3, [r3, #0]
 8021058:	2b01      	cmp	r3, #1
 802105a:	d060      	beq.n	802111e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x786>
 802105c:	d35d      	bcc.n	802111a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x782>
 802105e:	2b02      	cmp	r3, #2
 8021060:	f47f ad27 	bne.w	8020ab2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8021064:	4b2f      	ldr	r3, [pc, #188]	; (8021124 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 8021066:	4a30      	ldr	r2, [pc, #192]	; (8021128 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 8021068:	f240 613e 	movw	r1, #1598	; 0x63e
 802106c:	482f      	ldr	r0, [pc, #188]	; (802112c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 802106e:	f008 f8f1 	bl	8029254 <__assert_func>
 8021072:	687b      	ldr	r3, [r7, #4]
 8021074:	781b      	ldrb	r3, [r3, #0]
 8021076:	2b01      	cmp	r3, #1
 8021078:	d049      	beq.n	802110e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x776>
 802107a:	d346      	bcc.n	802110a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x772>
 802107c:	2b02      	cmp	r3, #2
 802107e:	f47f ad18 	bne.w	8020ab2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 8021082:	4b28      	ldr	r3, [pc, #160]	; (8021124 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 8021084:	4a28      	ldr	r2, [pc, #160]	; (8021128 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 8021086:	f240 614a 	movw	r1, #1610	; 0x64a
 802108a:	4828      	ldr	r0, [pc, #160]	; (802112c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 802108c:	f008 f8e2 	bl	8029254 <__assert_func>
 8021090:	687b      	ldr	r3, [r7, #4]
 8021092:	4827      	ldr	r0, [pc, #156]	; (8021130 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x798>)
 8021094:	781b      	ldrb	r3, [r3, #0]
 8021096:	2b00      	cmp	r3, #0
 8021098:	bf18      	it	ne
 802109a:	2000      	movne	r0, #0
 802109c:	e50a      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 802109e:	687b      	ldr	r3, [r7, #4]
 80210a0:	781b      	ldrb	r3, [r3, #0]
 80210a2:	2b01      	cmp	r3, #1
 80210a4:	d02d      	beq.n	8021102 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76a>
 80210a6:	d318      	bcc.n	80210da <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x742>
 80210a8:	2b02      	cmp	r3, #2
 80210aa:	f47f ad02 	bne.w	8020ab2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 80210ae:	4b1d      	ldr	r3, [pc, #116]	; (8021124 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 80210b0:	4a1d      	ldr	r2, [pc, #116]	; (8021128 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 80210b2:	f240 619b 	movw	r1, #1691	; 0x69b
 80210b6:	481d      	ldr	r0, [pc, #116]	; (802112c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 80210b8:	f008 f8cc 	bl	8029254 <__assert_func>
 80210bc:	687b      	ldr	r3, [r7, #4]
 80210be:	781b      	ldrb	r3, [r3, #0]
 80210c0:	2b01      	cmp	r3, #1
 80210c2:	d020      	beq.n	8021106 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76e>
 80210c4:	d30b      	bcc.n	80210de <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x746>
 80210c6:	2b02      	cmp	r3, #2
 80210c8:	f47f acf3 	bne.w	8020ab2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 80210cc:	4b15      	ldr	r3, [pc, #84]	; (8021124 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 80210ce:	4a16      	ldr	r2, [pc, #88]	; (8021128 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 80210d0:	f240 61a7 	movw	r1, #1703	; 0x6a7
 80210d4:	4815      	ldr	r0, [pc, #84]	; (802112c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 80210d6:	f008 f8bd 	bl	8029254 <__assert_func>
 80210da:	4816      	ldr	r0, [pc, #88]	; (8021134 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x79c>)
 80210dc:	e4ea      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80210de:	4816      	ldr	r0, [pc, #88]	; (8021138 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a0>)
 80210e0:	e4e8      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80210e2:	4816      	ldr	r0, [pc, #88]	; (802113c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a4>)
 80210e4:	e4e6      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80210e6:	4816      	ldr	r0, [pc, #88]	; (8021140 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a8>)
 80210e8:	e4e4      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80210ea:	4816      	ldr	r0, [pc, #88]	; (8021144 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7ac>)
 80210ec:	e4e2      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80210ee:	4816      	ldr	r0, [pc, #88]	; (8021148 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b0>)
 80210f0:	e4e0      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80210f2:	4816      	ldr	r0, [pc, #88]	; (802114c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b4>)
 80210f4:	e4de      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80210f6:	4816      	ldr	r0, [pc, #88]	; (8021150 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b8>)
 80210f8:	e4dc      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80210fa:	4816      	ldr	r0, [pc, #88]	; (8021154 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7bc>)
 80210fc:	e4da      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 80210fe:	4816      	ldr	r0, [pc, #88]	; (8021158 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c0>)
 8021100:	e4d8      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8021102:	4816      	ldr	r0, [pc, #88]	; (802115c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c4>)
 8021104:	e4d6      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8021106:	4816      	ldr	r0, [pc, #88]	; (8021160 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c8>)
 8021108:	e4d4      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 802110a:	4809      	ldr	r0, [pc, #36]	; (8021130 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x798>)
 802110c:	e4d2      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 802110e:	4815      	ldr	r0, [pc, #84]	; (8021164 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7cc>)
 8021110:	e4d0      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8021112:	4815      	ldr	r0, [pc, #84]	; (8021168 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d0>)
 8021114:	e4ce      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8021116:	4815      	ldr	r0, [pc, #84]	; (802116c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d4>)
 8021118:	e4cc      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 802111a:	4815      	ldr	r0, [pc, #84]	; (8021170 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d8>)
 802111c:	e4ca      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 802111e:	4815      	ldr	r0, [pc, #84]	; (8021174 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7dc>)
 8021120:	e4c8      	b.n	8020ab4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 8021122:	bf00      	nop
 8021124:	0802c270 	.word	0x0802c270
 8021128:	0802d09c 	.word	0x0802d09c
 802112c:	0802c164 	.word	0x0802c164
 8021130:	2000009c 	.word	0x2000009c
 8021134:	200000b4 	.word	0x200000b4
 8021138:	20000088 	.word	0x20000088
 802113c:	20000070 	.word	0x20000070
 8021140:	20000094 	.word	0x20000094
 8021144:	200000ac 	.word	0x200000ac
 8021148:	20000080 	.word	0x20000080
 802114c:	20000084 	.word	0x20000084
 8021150:	2000006c 	.word	0x2000006c
 8021154:	200000b0 	.word	0x200000b0
 8021158:	20000090 	.word	0x20000090
 802115c:	200000a8 	.word	0x200000a8
 8021160:	2000007c 	.word	0x2000007c
 8021164:	20000078 	.word	0x20000078
 8021168:	200000b8 	.word	0x200000b8
 802116c:	20000098 	.word	0x20000098
 8021170:	200000bc 	.word	0x200000bc
 8021174:	200000a4 	.word	0x200000a4

08021178 <_ZN8touchgfx8LCDGPU2DD0Ev>:
 8021178:	b510      	push	{r4, lr}
 802117a:	4604      	mov	r4, r0
 802117c:	210c      	movs	r1, #12
 802117e:	f008 f83c 	bl	80291fa <_ZdlPvj>
 8021182:	4620      	mov	r0, r4
 8021184:	bd10      	pop	{r4, pc}
 8021186:	bf00      	nop

08021188 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021188:	b510      	push	{r4, lr}
 802118a:	4604      	mov	r4, r0
 802118c:	2104      	movs	r1, #4
 802118e:	f008 f834 	bl	80291fa <_ZdlPvj>
 8021192:	4620      	mov	r0, r4
 8021194:	bd10      	pop	{r4, pc}
 8021196:	bf00      	nop

08021198 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021198:	b510      	push	{r4, lr}
 802119a:	4604      	mov	r4, r0
 802119c:	2104      	movs	r1, #4
 802119e:	f008 f82c 	bl	80291fa <_ZdlPvj>
 80211a2:	4620      	mov	r0, r4
 80211a4:	bd10      	pop	{r4, pc}
 80211a6:	bf00      	nop

080211a8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80211a8:	b510      	push	{r4, lr}
 80211aa:	4604      	mov	r4, r0
 80211ac:	2104      	movs	r1, #4
 80211ae:	f008 f824 	bl	80291fa <_ZdlPvj>
 80211b2:	4620      	mov	r0, r4
 80211b4:	bd10      	pop	{r4, pc}
 80211b6:	bf00      	nop

080211b8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80211b8:	b510      	push	{r4, lr}
 80211ba:	4604      	mov	r4, r0
 80211bc:	2104      	movs	r1, #4
 80211be:	f008 f81c 	bl	80291fa <_ZdlPvj>
 80211c2:	4620      	mov	r0, r4
 80211c4:	bd10      	pop	{r4, pc}
 80211c6:	bf00      	nop

080211c8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80211c8:	b510      	push	{r4, lr}
 80211ca:	4604      	mov	r4, r0
 80211cc:	2104      	movs	r1, #4
 80211ce:	f008 f814 	bl	80291fa <_ZdlPvj>
 80211d2:	4620      	mov	r0, r4
 80211d4:	bd10      	pop	{r4, pc}
 80211d6:	bf00      	nop

080211d8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80211d8:	b510      	push	{r4, lr}
 80211da:	4604      	mov	r4, r0
 80211dc:	2104      	movs	r1, #4
 80211de:	f008 f80c 	bl	80291fa <_ZdlPvj>
 80211e2:	4620      	mov	r0, r4
 80211e4:	bd10      	pop	{r4, pc}
 80211e6:	bf00      	nop

080211e8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80211e8:	b510      	push	{r4, lr}
 80211ea:	4604      	mov	r4, r0
 80211ec:	2104      	movs	r1, #4
 80211ee:	f008 f804 	bl	80291fa <_ZdlPvj>
 80211f2:	4620      	mov	r0, r4
 80211f4:	bd10      	pop	{r4, pc}
 80211f6:	bf00      	nop

080211f8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80211f8:	b510      	push	{r4, lr}
 80211fa:	4604      	mov	r4, r0
 80211fc:	2104      	movs	r1, #4
 80211fe:	f007 fffc 	bl	80291fa <_ZdlPvj>
 8021202:	4620      	mov	r0, r4
 8021204:	bd10      	pop	{r4, pc}
 8021206:	bf00      	nop

08021208 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021208:	b510      	push	{r4, lr}
 802120a:	4604      	mov	r4, r0
 802120c:	2104      	movs	r1, #4
 802120e:	f007 fff4 	bl	80291fa <_ZdlPvj>
 8021212:	4620      	mov	r0, r4
 8021214:	bd10      	pop	{r4, pc}
 8021216:	bf00      	nop

08021218 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021218:	b510      	push	{r4, lr}
 802121a:	4604      	mov	r4, r0
 802121c:	2104      	movs	r1, #4
 802121e:	f007 ffec 	bl	80291fa <_ZdlPvj>
 8021222:	4620      	mov	r0, r4
 8021224:	bd10      	pop	{r4, pc}
 8021226:	bf00      	nop

08021228 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021228:	b510      	push	{r4, lr}
 802122a:	4604      	mov	r4, r0
 802122c:	2104      	movs	r1, #4
 802122e:	f007 ffe4 	bl	80291fa <_ZdlPvj>
 8021232:	4620      	mov	r0, r4
 8021234:	bd10      	pop	{r4, pc}
 8021236:	bf00      	nop

08021238 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021238:	b510      	push	{r4, lr}
 802123a:	4604      	mov	r4, r0
 802123c:	2104      	movs	r1, #4
 802123e:	f007 ffdc 	bl	80291fa <_ZdlPvj>
 8021242:	4620      	mov	r0, r4
 8021244:	bd10      	pop	{r4, pc}
 8021246:	bf00      	nop

08021248 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021248:	b510      	push	{r4, lr}
 802124a:	4604      	mov	r4, r0
 802124c:	2104      	movs	r1, #4
 802124e:	f007 ffd4 	bl	80291fa <_ZdlPvj>
 8021252:	4620      	mov	r0, r4
 8021254:	bd10      	pop	{r4, pc}
 8021256:	bf00      	nop

08021258 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021258:	b510      	push	{r4, lr}
 802125a:	4604      	mov	r4, r0
 802125c:	2104      	movs	r1, #4
 802125e:	f007 ffcc 	bl	80291fa <_ZdlPvj>
 8021262:	4620      	mov	r0, r4
 8021264:	bd10      	pop	{r4, pc}
 8021266:	bf00      	nop

08021268 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021268:	b510      	push	{r4, lr}
 802126a:	4604      	mov	r4, r0
 802126c:	2104      	movs	r1, #4
 802126e:	f007 ffc4 	bl	80291fa <_ZdlPvj>
 8021272:	4620      	mov	r0, r4
 8021274:	bd10      	pop	{r4, pc}
 8021276:	bf00      	nop

08021278 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8021278:	b510      	push	{r4, lr}
 802127a:	4604      	mov	r4, r0
 802127c:	2104      	movs	r1, #4
 802127e:	f007 ffbc 	bl	80291fa <_ZdlPvj>
 8021282:	4620      	mov	r0, r4
 8021284:	bd10      	pop	{r4, pc}
 8021286:	bf00      	nop

08021288 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021288:	b510      	push	{r4, lr}
 802128a:	4604      	mov	r4, r0
 802128c:	2104      	movs	r1, #4
 802128e:	f007 ffb4 	bl	80291fa <_ZdlPvj>
 8021292:	4620      	mov	r0, r4
 8021294:	bd10      	pop	{r4, pc}
 8021296:	bf00      	nop

08021298 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021298:	b510      	push	{r4, lr}
 802129a:	4604      	mov	r4, r0
 802129c:	2104      	movs	r1, #4
 802129e:	f007 ffac 	bl	80291fa <_ZdlPvj>
 80212a2:	4620      	mov	r0, r4
 80212a4:	bd10      	pop	{r4, pc}
 80212a6:	bf00      	nop

080212a8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80212a8:	b510      	push	{r4, lr}
 80212aa:	4604      	mov	r4, r0
 80212ac:	2104      	movs	r1, #4
 80212ae:	f007 ffa4 	bl	80291fa <_ZdlPvj>
 80212b2:	4620      	mov	r0, r4
 80212b4:	bd10      	pop	{r4, pc}
 80212b6:	bf00      	nop

080212b8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80212b8:	b510      	push	{r4, lr}
 80212ba:	4604      	mov	r4, r0
 80212bc:	2104      	movs	r1, #4
 80212be:	f007 ff9c 	bl	80291fa <_ZdlPvj>
 80212c2:	4620      	mov	r0, r4
 80212c4:	bd10      	pop	{r4, pc}
 80212c6:	bf00      	nop

080212c8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80212c8:	b510      	push	{r4, lr}
 80212ca:	4604      	mov	r4, r0
 80212cc:	2104      	movs	r1, #4
 80212ce:	f007 ff94 	bl	80291fa <_ZdlPvj>
 80212d2:	4620      	mov	r0, r4
 80212d4:	bd10      	pop	{r4, pc}
 80212d6:	bf00      	nop

080212d8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80212d8:	b510      	push	{r4, lr}
 80212da:	4604      	mov	r4, r0
 80212dc:	2104      	movs	r1, #4
 80212de:	f007 ff8c 	bl	80291fa <_ZdlPvj>
 80212e2:	4620      	mov	r0, r4
 80212e4:	bd10      	pop	{r4, pc}
 80212e6:	bf00      	nop

080212e8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>:
 80212e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80212ec:	461c      	mov	r4, r3
 80212ee:	4617      	mov	r7, r2
 80212f0:	b086      	sub	sp, #24
 80212f2:	4606      	mov	r6, r0
 80212f4:	4688      	mov	r8, r1
 80212f6:	6818      	ldr	r0, [r3, #0]
 80212f8:	6859      	ldr	r1, [r3, #4]
 80212fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80212fc:	ad02      	add	r5, sp, #8
 80212fe:	c503      	stmia	r5!, {r0, r1}
 8021300:	6818      	ldr	r0, [r3, #0]
 8021302:	6859      	ldr	r1, [r3, #4]
 8021304:	ad04      	add	r5, sp, #16
 8021306:	c503      	stmia	r5!, {r0, r1}
 8021308:	a802      	add	r0, sp, #8
 802130a:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
 802130e:	f7f7 fad9 	bl	80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021312:	4621      	mov	r1, r4
 8021314:	a804      	add	r0, sp, #16
 8021316:	f7f7 fafd 	bl	8018914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802131a:	2f01      	cmp	r7, #1
 802131c:	d05c      	beq.n	80213d8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf0>
 802131e:	d357      	bcc.n	80213d0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xe8>
 8021320:	2f02      	cmp	r7, #2
 8021322:	d163      	bne.n	80213ec <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x104>
 8021324:	f04f 0910 	mov.w	r9, #16
 8021328:	2504      	movs	r5, #4
 802132a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802132e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021332:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8021336:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 802133a:	fb14 2403 	smlabb	r4, r4, r3, r2
 802133e:	4f2e      	ldr	r7, [pc, #184]	; (80213f8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x110>)
 8021340:	440a      	add	r2, r1
 8021342:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8021346:	6838      	ldr	r0, [r7, #0]
 8021348:	440b      	add	r3, r1
 802134a:	fb05 8404 	mla	r4, r5, r4, r8
 802134e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8021352:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021356:	2800      	cmp	r0, #0
 8021358:	d042      	beq.n	80213e0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf8>
 802135a:	f7fd f819 	bl	801e390 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 802135e:	6833      	ldr	r3, [r6, #0]
 8021360:	4630      	mov	r0, r6
 8021362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021364:	4798      	blx	r3
 8021366:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 802136a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802136e:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8021372:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8021376:	f7fa fd15 	bl	801bda4 <nema_set_clip>
 802137a:	2200      	movs	r2, #0
 802137c:	2600      	movs	r6, #0
 802137e:	4611      	mov	r1, r2
 8021380:	4653      	mov	r3, sl
 8021382:	4610      	mov	r0, r2
 8021384:	f7fa fd42 	bl	801be0c <nema_rgba>
 8021388:	f7fc ff1a 	bl	801e1c0 <nema_set_const_color>
 802138c:	f04f 33ff 	mov.w	r3, #4294967295
 8021390:	2201      	movs	r2, #1
 8021392:	2100      	movs	r1, #0
 8021394:	4819      	ldr	r0, [pc, #100]	; (80213fc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x114>)
 8021396:	f7fc fb4d 	bl	801da34 <nema_set_blend>
 802139a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802139e:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80213a2:	fb05 f503 	mul.w	r5, r5, r3
 80213a6:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 80213aa:	464b      	mov	r3, r9
 80213ac:	4620      	mov	r0, r4
 80213ae:	e9cd 5600 	strd	r5, r6, [sp]
 80213b2:	f7fa fd33 	bl	801be1c <nema_bind_src_tex>
 80213b6:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80213ba:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80213be:	f7fa fe6d 	bl	801c09c <nema_blit>
 80213c2:	6838      	ldr	r0, [r7, #0]
 80213c4:	b160      	cbz	r0, 80213e0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf8>
 80213c6:	f7fd f803 	bl	801e3d0 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 80213ca:	b006      	add	sp, #24
 80213cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80213d0:	f04f 0904 	mov.w	r9, #4
 80213d4:	2502      	movs	r5, #2
 80213d6:	e7a8      	b.n	802132a <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x42>
 80213d8:	f04f 0939 	mov.w	r9, #57	; 0x39
 80213dc:	2503      	movs	r5, #3
 80213de:	e7a4      	b.n	802132a <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x42>
 80213e0:	4b07      	ldr	r3, [pc, #28]	; (8021400 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x118>)
 80213e2:	4a08      	ldr	r2, [pc, #32]	; (8021404 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x11c>)
 80213e4:	217c      	movs	r1, #124	; 0x7c
 80213e6:	4808      	ldr	r0, [pc, #32]	; (8021408 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x120>)
 80213e8:	f007 ff34 	bl	8029254 <__assert_func>
 80213ec:	4b07      	ldr	r3, [pc, #28]	; (802140c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x124>)
 80213ee:	4a08      	ldr	r2, [pc, #32]	; (8021410 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x128>)
 80213f0:	21c1      	movs	r1, #193	; 0xc1
 80213f2:	4808      	ldr	r0, [pc, #32]	; (8021414 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x12c>)
 80213f4:	f007 ff2e 	bl	8029254 <__assert_func>
 80213f8:	20197c70 	.word	0x20197c70
 80213fc:	08000504 	.word	0x08000504
 8021400:	0802c0c0 	.word	0x0802c0c0
 8021404:	0802c8c8 	.word	0x0802c8c8
 8021408:	0802c0e8 	.word	0x0802c0e8
 802140c:	0802c50c 	.word	0x0802c50c
 8021410:	0802d264 	.word	0x0802d264
 8021414:	0802c164 	.word	0x0802c164

08021418 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb>:
 8021418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802141c:	4c1e      	ldr	r4, [pc, #120]	; (8021498 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x80>)
 802141e:	6806      	ldr	r6, [r0, #0]
 8021420:	6824      	ldr	r4, [r4, #0]
 8021422:	4605      	mov	r5, r0
 8021424:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
 8021428:	b087      	sub	sp, #28
 802142a:	6937      	ldr	r7, [r6, #16]
 802142c:	4690      	mov	r8, r2
 802142e:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8021432:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8021436:	b170      	cbz	r0, 8021456 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x3e>
 8021438:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 802143a:	b160      	cbz	r0, 8021456 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x3e>
 802143c:	6804      	ldr	r4, [r0, #0]
 802143e:	4a17      	ldr	r2, [pc, #92]	; (802149c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x84>)
 8021440:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8021442:	4294      	cmp	r4, r2
 8021444:	d10d      	bne.n	8021462 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x4a>
 8021446:	4c16      	ldr	r4, [pc, #88]	; (80214a0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x88>)
 8021448:	7a02      	ldrb	r2, [r0, #8]
 802144a:	42a7      	cmp	r7, r4
 802144c:	d112      	bne.n	8021474 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x5c>
 802144e:	b9d6      	cbnz	r6, 8021486 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x6e>
 8021450:	b007      	add	sp, #28
 8021452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021456:	68a0      	ldr	r0, [r4, #8]
 8021458:	4a10      	ldr	r2, [pc, #64]	; (802149c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x84>)
 802145a:	6804      	ldr	r4, [r0, #0]
 802145c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 802145e:	4294      	cmp	r4, r2
 8021460:	d0f1      	beq.n	8021446 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x2e>
 8021462:	e9cd 1304 	strd	r1, r3, [sp, #16]
 8021466:	47a0      	blx	r4
 8021468:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
 802146c:	4c0c      	ldr	r4, [pc, #48]	; (80214a0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x88>)
 802146e:	4602      	mov	r2, r0
 8021470:	42a7      	cmp	r7, r4
 8021472:	d0ec      	beq.n	802144e <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x36>
 8021474:	9300      	str	r3, [sp, #0]
 8021476:	e9cd 6901 	strd	r6, r9, [sp, #4]
 802147a:	4643      	mov	r3, r8
 802147c:	4628      	mov	r0, r5
 802147e:	47b8      	blx	r7
 8021480:	b007      	add	sp, #28
 8021482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021486:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
 802148a:	4628      	mov	r0, r5
 802148c:	4643      	mov	r3, r8
 802148e:	b007      	add	sp, #28
 8021490:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021494:	f7ff bf28 	b.w	80212e8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>
 8021498:	20197a40 	.word	0x20197a40
 802149c:	0801e475 	.word	0x0801e475
 80214a0:	080214a5 	.word	0x080214a5

080214a4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80214a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80214a8:	b087      	sub	sp, #28
 80214aa:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80214ae:	b915      	cbnz	r5, 80214b6 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x12>
 80214b0:	b007      	add	sp, #28
 80214b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80214b6:	461c      	mov	r4, r3
 80214b8:	4617      	mov	r7, r2
 80214ba:	4688      	mov	r8, r1
 80214bc:	4606      	mov	r6, r0
 80214be:	6859      	ldr	r1, [r3, #4]
 80214c0:	6818      	ldr	r0, [r3, #0]
 80214c2:	ab02      	add	r3, sp, #8
 80214c4:	c303      	stmia	r3!, {r0, r1}
 80214c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80214c8:	6818      	ldr	r0, [r3, #0]
 80214ca:	6859      	ldr	r1, [r3, #4]
 80214cc:	ab04      	add	r3, sp, #16
 80214ce:	c303      	stmia	r3!, {r0, r1}
 80214d0:	a802      	add	r0, sp, #8
 80214d2:	f7f7 f9f7 	bl	80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80214d6:	4621      	mov	r1, r4
 80214d8:	a804      	add	r0, sp, #16
 80214da:	f7f7 fa1b 	bl	8018914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80214de:	2f01      	cmp	r7, #1
 80214e0:	d05c      	beq.n	802159c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0xf8>
 80214e2:	d357      	bcc.n	8021594 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0xf0>
 80214e4:	2f02      	cmp	r7, #2
 80214e6:	d163      	bne.n	80215b0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x10c>
 80214e8:	f04f 0910 	mov.w	r9, #16
 80214ec:	2404      	movs	r4, #4
 80214ee:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80214f2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80214f6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80214fa:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80214fe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021502:	4f2e      	ldr	r7, [pc, #184]	; (80215bc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x118>)
 8021504:	fb04 8801 	mla	r8, r4, r1, r8
 8021508:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 802150c:	4402      	add	r2, r0
 802150e:	6838      	ldr	r0, [r7, #0]
 8021510:	440b      	add	r3, r1
 8021512:	f8ad 2010 	strh.w	r2, [sp, #16]
 8021516:	f8ad 3012 	strh.w	r3, [sp, #18]
 802151a:	2800      	cmp	r0, #0
 802151c:	d042      	beq.n	80215a4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x100>
 802151e:	f7fc ff37 	bl	801e390 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8021522:	6833      	ldr	r3, [r6, #0]
 8021524:	4630      	mov	r0, r6
 8021526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021528:	4798      	blx	r3
 802152a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 802152e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8021532:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8021536:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 802153a:	f7fa fc33 	bl	801bda4 <nema_set_clip>
 802153e:	2200      	movs	r2, #0
 8021540:	462b      	mov	r3, r5
 8021542:	2500      	movs	r5, #0
 8021544:	4611      	mov	r1, r2
 8021546:	4610      	mov	r0, r2
 8021548:	f7fa fc60 	bl	801be0c <nema_rgba>
 802154c:	f7fc fe38 	bl	801e1c0 <nema_set_const_color>
 8021550:	f04f 33ff 	mov.w	r3, #4294967295
 8021554:	2201      	movs	r2, #1
 8021556:	2100      	movs	r1, #0
 8021558:	4819      	ldr	r0, [pc, #100]	; (80215c0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x11c>)
 802155a:	f7fc fa6b 	bl	801da34 <nema_set_blend>
 802155e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021562:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8021566:	fb04 f403 	mul.w	r4, r4, r3
 802156a:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 802156e:	464b      	mov	r3, r9
 8021570:	4640      	mov	r0, r8
 8021572:	e9cd 4500 	strd	r4, r5, [sp]
 8021576:	f7fa fc51 	bl	801be1c <nema_bind_src_tex>
 802157a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 802157e:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8021582:	f7fa fd8b 	bl	801c09c <nema_blit>
 8021586:	6838      	ldr	r0, [r7, #0]
 8021588:	b160      	cbz	r0, 80215a4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x100>
 802158a:	f7fc ff21 	bl	801e3d0 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 802158e:	b007      	add	sp, #28
 8021590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021594:	f04f 0904 	mov.w	r9, #4
 8021598:	2402      	movs	r4, #2
 802159a:	e7a8      	b.n	80214ee <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4a>
 802159c:	f04f 0939 	mov.w	r9, #57	; 0x39
 80215a0:	2403      	movs	r4, #3
 80215a2:	e7a4      	b.n	80214ee <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4a>
 80215a4:	4b07      	ldr	r3, [pc, #28]	; (80215c4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x120>)
 80215a6:	4a08      	ldr	r2, [pc, #32]	; (80215c8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x124>)
 80215a8:	217c      	movs	r1, #124	; 0x7c
 80215aa:	4808      	ldr	r0, [pc, #32]	; (80215cc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x128>)
 80215ac:	f007 fe52 	bl	8029254 <__assert_func>
 80215b0:	4b07      	ldr	r3, [pc, #28]	; (80215d0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x12c>)
 80215b2:	4a08      	ldr	r2, [pc, #32]	; (80215d4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x130>)
 80215b4:	21c1      	movs	r1, #193	; 0xc1
 80215b6:	4808      	ldr	r0, [pc, #32]	; (80215d8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x134>)
 80215b8:	f007 fe4c 	bl	8029254 <__assert_func>
 80215bc:	20197c70 	.word	0x20197c70
 80215c0:	08000504 	.word	0x08000504
 80215c4:	0802c0c0 	.word	0x0802c0c0
 80215c8:	0802c8c8 	.word	0x0802c8c8
 80215cc:	0802c0e8 	.word	0x0802c0e8
 80215d0:	0802c50c 	.word	0x0802c50c
 80215d4:	0802d264 	.word	0x0802d264
 80215d8:	0802c164 	.word	0x0802c164

080215dc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80215dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215e0:	4682      	mov	sl, r0
 80215e2:	4851      	ldr	r0, [pc, #324]	; (8021728 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x14c>)
 80215e4:	b08f      	sub	sp, #60	; 0x3c
 80215e6:	6800      	ldr	r0, [r0, #0]
 80215e8:	9104      	str	r1, [sp, #16]
 80215ea:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 80215ee:	f9bd 0064 	ldrsh.w	r0, [sp, #100]	; 0x64
 80215f2:	2902      	cmp	r1, #2
 80215f4:	9003      	str	r0, [sp, #12]
 80215f6:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
 80215fa:	9006      	str	r0, [sp, #24]
 80215fc:	f000 81cd 	beq.w	802199a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3be>
 8021600:	9918      	ldr	r1, [sp, #96]	; 0x60
 8021602:	2900      	cmp	r1, #0
 8021604:	f000 81c3 	beq.w	802198e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3b2>
 8021608:	f9b3 5000 	ldrsh.w	r5, [r3]
 802160c:	8899      	ldrh	r1, [r3, #4]
 802160e:	b2ae      	uxth	r6, r5
 8021610:	4431      	add	r1, r6
 8021612:	b289      	uxth	r1, r1
 8021614:	fa0f fc81 	sxth.w	ip, r1
 8021618:	4565      	cmp	r5, ip
 802161a:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 802161e:	da28      	bge.n	8021672 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 8021620:	9803      	ldr	r0, [sp, #12]
 8021622:	1830      	adds	r0, r6, r0
 8021624:	b280      	uxth	r0, r0
 8021626:	9005      	str	r0, [sp, #20]
 8021628:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 802162c:	4575      	cmp	r5, lr
 802162e:	da20      	bge.n	8021672 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 8021630:	f8b3 8006 	ldrh.w	r8, [r3, #6]
 8021634:	b2a7      	uxth	r7, r4
 8021636:	4638      	mov	r0, r7
 8021638:	4447      	add	r7, r8
 802163a:	b2bf      	uxth	r7, r7
 802163c:	fa0f f987 	sxth.w	r9, r7
 8021640:	454c      	cmp	r4, r9
 8021642:	da16      	bge.n	8021672 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 8021644:	4680      	mov	r8, r0
 8021646:	9007      	str	r0, [sp, #28]
 8021648:	9806      	ldr	r0, [sp, #24]
 802164a:	4480      	add	r8, r0
 802164c:	fa1f f888 	uxth.w	r8, r8
 8021650:	fa0f fb88 	sxth.w	fp, r8
 8021654:	455c      	cmp	r4, fp
 8021656:	da0c      	bge.n	8021672 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 8021658:	9805      	ldr	r0, [sp, #20]
 802165a:	45d9      	cmp	r9, fp
 802165c:	bfc8      	it	gt
 802165e:	4647      	movgt	r7, r8
 8021660:	45f4      	cmp	ip, lr
 8021662:	bfc8      	it	gt
 8021664:	4601      	movgt	r1, r0
 8021666:	9807      	ldr	r0, [sp, #28]
 8021668:	1b89      	subs	r1, r1, r6
 802166a:	1a3f      	subs	r7, r7, r0
 802166c:	b209      	sxth	r1, r1
 802166e:	b23f      	sxth	r7, r7
 8021670:	e005      	b.n	802167e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xa2>
 8021672:	2700      	movs	r7, #0
 8021674:	463c      	mov	r4, r7
 8021676:	4639      	mov	r1, r7
 8021678:	463e      	mov	r6, r7
 802167a:	463d      	mov	r5, r7
 802167c:	9707      	str	r7, [sp, #28]
 802167e:	f9b2 b000 	ldrsh.w	fp, [r2]
 8021682:	8890      	ldrh	r0, [r2, #4]
 8021684:	4458      	add	r0, fp
 8021686:	b280      	uxth	r0, r0
 8021688:	fa0f fc80 	sxth.w	ip, r0
 802168c:	45ac      	cmp	ip, r5
 802168e:	dd51      	ble.n	8021734 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 8021690:	4431      	add	r1, r6
 8021692:	b289      	uxth	r1, r1
 8021694:	fa0f fe81 	sxth.w	lr, r1
 8021698:	45f3      	cmp	fp, lr
 802169a:	da4b      	bge.n	8021734 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 802169c:	f9b2 8002 	ldrsh.w	r8, [r2, #2]
 80216a0:	88d6      	ldrh	r6, [r2, #6]
 80216a2:	4446      	add	r6, r8
 80216a4:	b2b6      	uxth	r6, r6
 80216a6:	fa0f f986 	sxth.w	r9, r6
 80216aa:	454c      	cmp	r4, r9
 80216ac:	da42      	bge.n	8021734 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 80216ae:	9a07      	ldr	r2, [sp, #28]
 80216b0:	443a      	add	r2, r7
 80216b2:	b297      	uxth	r7, r2
 80216b4:	b23a      	sxth	r2, r7
 80216b6:	4590      	cmp	r8, r2
 80216b8:	9205      	str	r2, [sp, #20]
 80216ba:	da3b      	bge.n	8021734 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 80216bc:	45ab      	cmp	fp, r5
 80216be:	bfb8      	it	lt
 80216c0:	46ab      	movlt	fp, r5
 80216c2:	4544      	cmp	r4, r8
 80216c4:	bfb8      	it	lt
 80216c6:	4644      	movlt	r4, r8
 80216c8:	45f4      	cmp	ip, lr
 80216ca:	bfc8      	it	gt
 80216cc:	4608      	movgt	r0, r1
 80216ce:	9905      	ldr	r1, [sp, #20]
 80216d0:	465a      	mov	r2, fp
 80216d2:	4589      	cmp	r9, r1
 80216d4:	bfc8      	it	gt
 80216d6:	463e      	movgt	r6, r7
 80216d8:	f8df c054 	ldr.w	ip, [pc, #84]	; 8021730 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x154>
 80216dc:	4f13      	ldr	r7, [pc, #76]	; (802172c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x150>)
 80216de:	fa1f f58b 	uxth.w	r5, fp
 80216e2:	1b36      	subs	r6, r6, r4
 80216e4:	1b41      	subs	r1, r0, r5
 80216e6:	f8bc c000 	ldrh.w	ip, [ip]
 80216ea:	883f      	ldrh	r7, [r7, #0]
 80216ec:	fa0f fb86 	sxth.w	fp, r6
 80216f0:	fa0f f981 	sxth.w	r9, r1
 80216f4:	2a00      	cmp	r2, #0
 80216f6:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 80216fa:	f8ad 2020 	strh.w	r2, [sp, #32]
 80216fe:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
 8021702:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 8021706:	fa0f f68c 	sxth.w	r6, ip
 802170a:	b239      	sxth	r1, r7
 802170c:	f280 812b 	bge.w	8021966 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x38a>
 8021710:	f04f 0e00 	mov.w	lr, #0
 8021714:	fa0f f980 	sxth.w	r9, r0
 8021718:	4675      	mov	r5, lr
 802171a:	4672      	mov	r2, lr
 802171c:	4648      	mov	r0, r9
 802171e:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 8021722:	f8ad e020 	strh.w	lr, [sp, #32]
 8021726:	e015      	b.n	8021754 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 8021728:	20197a40 	.word	0x20197a40
 802172c:	20197a36 	.word	0x20197a36
 8021730:	20197a34 	.word	0x20197a34
 8021734:	2200      	movs	r2, #0
 8021736:	48a3      	ldr	r0, [pc, #652]	; (80219c4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3e8>)
 8021738:	4615      	mov	r5, r2
 802173a:	f8b0 c000 	ldrh.w	ip, [r0]
 802173e:	4693      	mov	fp, r2
 8021740:	4614      	mov	r4, r2
 8021742:	4610      	mov	r0, r2
 8021744:	4691      	mov	r9, r2
 8021746:	49a0      	ldr	r1, [pc, #640]	; (80219c8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3ec>)
 8021748:	e9cd 2208 	strd	r2, r2, [sp, #32]
 802174c:	880f      	ldrh	r7, [r1, #0]
 802174e:	fa0f f68c 	sxth.w	r6, ip
 8021752:	b239      	sxth	r1, r7
 8021754:	1ab2      	subs	r2, r6, r2
 8021756:	4282      	cmp	r2, r0
 8021758:	da05      	bge.n	8021766 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x18a>
 802175a:	ebac 0c05 	sub.w	ip, ip, r5
 802175e:	fa0f f98c 	sxth.w	r9, ip
 8021762:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
 8021766:	2c00      	cmp	r4, #0
 8021768:	f2c0 80e8 	blt.w	802193c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x360>
 802176c:	4622      	mov	r2, r4
 802176e:	1a89      	subs	r1, r1, r2
 8021770:	458b      	cmp	fp, r1
 8021772:	dd04      	ble.n	802177e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a2>
 8021774:	1b3f      	subs	r7, r7, r4
 8021776:	fa0f fb87 	sxth.w	fp, r7
 802177a:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 802177e:	f1b9 0f00 	cmp.w	r9, #0
 8021782:	f340 80d2 	ble.w	802192a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34e>
 8021786:	f1bb 0f00 	cmp.w	fp, #0
 802178a:	f340 80ce 	ble.w	802192a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34e>
 802178e:	2200      	movs	r2, #0
 8021790:	8819      	ldrh	r1, [r3, #0]
 8021792:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 8021796:	9b03      	ldr	r3, [sp, #12]
 8021798:	1a6d      	subs	r5, r5, r1
 802179a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 802179e:	eba4 0408 	sub.w	r4, r4, r8
 80217a2:	9b06      	ldr	r3, [sp, #24]
 80217a4:	a90c      	add	r1, sp, #48	; 0x30
 80217a6:	a80a      	add	r0, sp, #40	; 0x28
 80217a8:	b22d      	sxth	r5, r5
 80217aa:	b224      	sxth	r4, r4
 80217ac:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80217b0:	920c      	str	r2, [sp, #48]	; 0x30
 80217b2:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 80217b6:	f8ad b02e 	strh.w	fp, [sp, #46]	; 0x2e
 80217ba:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 80217be:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
 80217c2:	f7f7 f8a7 	bl	8018914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80217c6:	a808      	add	r0, sp, #32
 80217c8:	f7f7 f87c 	bl	80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80217cc:	a80c      	add	r0, sp, #48	; 0x30
 80217ce:	f7f7 f879 	bl	80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80217d2:	4b7e      	ldr	r3, [pc, #504]	; (80219cc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f0>)
 80217d4:	681b      	ldr	r3, [r3, #0]
 80217d6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80217da:	2a00      	cmp	r2, #0
 80217dc:	f040 80ba 	bne.w	8021954 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x378>
 80217e0:	6898      	ldr	r0, [r3, #8]
 80217e2:	6803      	ldr	r3, [r0, #0]
 80217e4:	4a7a      	ldr	r2, [pc, #488]	; (80219d0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f4>)
 80217e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80217e8:	4293      	cmp	r3, r2
 80217ea:	f040 80c4 	bne.w	8021976 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x39a>
 80217ee:	7a00      	ldrb	r0, [r0, #8]
 80217f0:	2801      	cmp	r0, #1
 80217f2:	f000 80ba 	beq.w	802196a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x38e>
 80217f6:	f0c0 80b2 	bcc.w	802195e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x382>
 80217fa:	2802      	cmp	r0, #2
 80217fc:	f040 80da 	bne.w	80219b4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3d8>
 8021800:	2310      	movs	r3, #16
 8021802:	2604      	movs	r6, #4
 8021804:	9305      	str	r3, [sp, #20]
 8021806:	9b04      	ldr	r3, [sp, #16]
 8021808:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 802180c:	681b      	ldr	r3, [r3, #0]
 802180e:	fb06 f101 	mul.w	r1, r6, r1
 8021812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021814:	4a6f      	ldr	r2, [pc, #444]	; (80219d4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f8>)
 8021816:	9103      	str	r1, [sp, #12]
 8021818:	4293      	cmp	r3, r2
 802181a:	f040 80ae 	bne.w	802197a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x39e>
 802181e:	4b6e      	ldr	r3, [pc, #440]	; (80219d8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3fc>)
 8021820:	881f      	ldrh	r7, [r3, #0]
 8021822:	2f00      	cmp	r7, #0
 8021824:	f000 80bf 	beq.w	80219a6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3ca>
 8021828:	9b04      	ldr	r3, [sp, #16]
 802182a:	7a1b      	ldrb	r3, [r3, #8]
 802182c:	2b02      	cmp	r3, #2
 802182e:	f000 80a0 	beq.w	8021972 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x396>
 8021832:	2b01      	cmp	r3, #1
 8021834:	bf14      	ite	ne
 8021836:	2302      	movne	r3, #2
 8021838:	2303      	moveq	r3, #3
 802183a:	fb17 f703 	smulbb	r7, r7, r3
 802183e:	b2bf      	uxth	r7, r7
 8021840:	4a62      	ldr	r2, [pc, #392]	; (80219cc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f0>)
 8021842:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8021846:	6810      	ldr	r0, [r2, #0]
 8021848:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 802184c:	9a03      	ldr	r2, [sp, #12]
 802184e:	fb02 3808 	mla	r8, r2, r8, r3
 8021852:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021854:	6803      	ldr	r3, [r0, #0]
 8021856:	4442      	add	r2, r8
 8021858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802185a:	9204      	str	r2, [sp, #16]
 802185c:	4798      	blx	r3
 802185e:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8021862:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8021866:	fb07 f202 	mul.w	r2, r7, r2
 802186a:	fb06 2303 	mla	r3, r6, r3, r2
 802186e:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8021a08 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x42c>
 8021872:	18c3      	adds	r3, r0, r3
 8021874:	f8d8 2000 	ldr.w	r2, [r8]
 8021878:	9306      	str	r3, [sp, #24]
 802187a:	2a00      	cmp	r2, #0
 802187c:	f000 8081 	beq.w	8021982 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 8021880:	2600      	movs	r6, #0
 8021882:	4610      	mov	r0, r2
 8021884:	f7fc fd84 	bl	801e390 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8021888:	9b03      	ldr	r3, [sp, #12]
 802188a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 802188e:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 8021892:	9300      	str	r3, [sp, #0]
 8021894:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 8021898:	f7fa fb38 	bl	801bf0c <nema_bind_dst_tex>
 802189c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80218a0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80218a4:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80218a8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80218ac:	f7fa fa7a 	bl	801bda4 <nema_set_clip>
 80218b0:	f04f 33ff 	mov.w	r3, #4294967295
 80218b4:	2201      	movs	r2, #1
 80218b6:	4631      	mov	r1, r6
 80218b8:	f240 5004 	movw	r0, #1284	; 0x504
 80218bc:	f7fc f8ba 	bl	801da34 <nema_set_blend>
 80218c0:	e9dd 3005 	ldrd	r3, r0, [sp, #20]
 80218c4:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 80218c8:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 80218cc:	9700      	str	r7, [sp, #0]
 80218ce:	9601      	str	r6, [sp, #4]
 80218d0:	f7fa faa4 	bl	801be1c <nema_bind_src_tex>
 80218d4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80218d8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80218dc:	f7fa fbde 	bl	801c09c <nema_blit>
 80218e0:	f8d8 0000 	ldr.w	r0, [r8]
 80218e4:	2800      	cmp	r0, #0
 80218e6:	d04c      	beq.n	8021982 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 80218e8:	f7fc fd72 	bl	801e3d0 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 80218ec:	f8d8 0000 	ldr.w	r0, [r8]
 80218f0:	2800      	cmp	r0, #0
 80218f2:	d046      	beq.n	8021982 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 80218f4:	6803      	ldr	r3, [r0, #0]
 80218f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80218f8:	4798      	blx	r3
 80218fa:	f8d8 0000 	ldr.w	r0, [r8]
 80218fe:	2800      	cmp	r0, #0
 8021900:	d03f      	beq.n	8021982 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 8021902:	6803      	ldr	r3, [r0, #0]
 8021904:	4637      	mov	r7, r6
 8021906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021908:	4798      	blx	r3
 802190a:	4650      	mov	r0, sl
 802190c:	f365 060f 	bfi	r6, r5, #0, #16
 8021910:	f369 070f 	bfi	r7, r9, #0, #16
 8021914:	f364 461f 	bfi	r6, r4, #16, #16
 8021918:	f36b 471f 	bfi	r7, fp, #16, #16
 802191c:	f8ca 6000 	str.w	r6, [sl]
 8021920:	f8ca 7004 	str.w	r7, [sl, #4]
 8021924:	b00f      	add	sp, #60	; 0x3c
 8021926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802192a:	2300      	movs	r3, #0
 802192c:	4650      	mov	r0, sl
 802192e:	f8ca 3000 	str.w	r3, [sl]
 8021932:	f8ca 3004 	str.w	r3, [sl, #4]
 8021936:	b00f      	add	sp, #60	; 0x3c
 8021938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802193c:	2000      	movs	r0, #0
 802193e:	eb0b 0604 	add.w	r6, fp, r4
 8021942:	fa0f fb86 	sxth.w	fp, r6
 8021946:	4604      	mov	r4, r0
 8021948:	4602      	mov	r2, r0
 802194a:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
 802194e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8021952:	e70c      	b.n	802176e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x192>
 8021954:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8021956:	2800      	cmp	r0, #0
 8021958:	f47f af43 	bne.w	80217e2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x206>
 802195c:	e740      	b.n	80217e0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x204>
 802195e:	2304      	movs	r3, #4
 8021960:	2602      	movs	r6, #2
 8021962:	9305      	str	r3, [sp, #20]
 8021964:	e74f      	b.n	8021806 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22a>
 8021966:	4648      	mov	r0, r9
 8021968:	e6f4      	b.n	8021754 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 802196a:	2339      	movs	r3, #57	; 0x39
 802196c:	2603      	movs	r6, #3
 802196e:	9305      	str	r3, [sp, #20]
 8021970:	e749      	b.n	8021806 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22a>
 8021972:	2304      	movs	r3, #4
 8021974:	e761      	b.n	802183a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x25e>
 8021976:	4798      	blx	r3
 8021978:	e73a      	b.n	80217f0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>
 802197a:	9804      	ldr	r0, [sp, #16]
 802197c:	4798      	blx	r3
 802197e:	4607      	mov	r7, r0
 8021980:	e75e      	b.n	8021840 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x264>
 8021982:	4b16      	ldr	r3, [pc, #88]	; (80219dc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x400>)
 8021984:	4a16      	ldr	r2, [pc, #88]	; (80219e0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x404>)
 8021986:	217c      	movs	r1, #124	; 0x7c
 8021988:	4816      	ldr	r0, [pc, #88]	; (80219e4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x408>)
 802198a:	f007 fc63 	bl	8029254 <__assert_func>
 802198e:	4b16      	ldr	r3, [pc, #88]	; (80219e8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x40c>)
 8021990:	4a16      	ldr	r2, [pc, #88]	; (80219ec <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 8021992:	21f1      	movs	r1, #241	; 0xf1
 8021994:	4816      	ldr	r0, [pc, #88]	; (80219f0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 8021996:	f007 fc5d 	bl	8029254 <__assert_func>
 802199a:	4b16      	ldr	r3, [pc, #88]	; (80219f4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x418>)
 802199c:	4a13      	ldr	r2, [pc, #76]	; (80219ec <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 802199e:	21f0      	movs	r1, #240	; 0xf0
 80219a0:	4813      	ldr	r0, [pc, #76]	; (80219f0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 80219a2:	f007 fc57 	bl	8029254 <__assert_func>
 80219a6:	4b14      	ldr	r3, [pc, #80]	; (80219f8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x41c>)
 80219a8:	4a14      	ldr	r2, [pc, #80]	; (80219fc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x420>)
 80219aa:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80219ae:	4814      	ldr	r0, [pc, #80]	; (8021a00 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x424>)
 80219b0:	f007 fc50 	bl	8029254 <__assert_func>
 80219b4:	4b13      	ldr	r3, [pc, #76]	; (8021a04 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x428>)
 80219b6:	4a0d      	ldr	r2, [pc, #52]	; (80219ec <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 80219b8:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80219bc:	480c      	ldr	r0, [pc, #48]	; (80219f0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 80219be:	f007 fc49 	bl	8029254 <__assert_func>
 80219c2:	bf00      	nop
 80219c4:	20197a34 	.word	0x20197a34
 80219c8:	20197a36 	.word	0x20197a36
 80219cc:	20197a40 	.word	0x20197a40
 80219d0:	0801e475 	.word	0x0801e475
 80219d4:	08020055 	.word	0x08020055
 80219d8:	20197a3a 	.word	0x20197a3a
 80219dc:	0802c0c0 	.word	0x0802c0c0
 80219e0:	0802c8c8 	.word	0x0802c8c8
 80219e4:	0802c0e8 	.word	0x0802c0e8
 80219e8:	0802c3bc 	.word	0x0802c3bc
 80219ec:	0802d148 	.word	0x0802d148
 80219f0:	0802c164 	.word	0x0802c164
 80219f4:	0802c308 	.word	0x0802c308
 80219f8:	0802c638 	.word	0x0802c638
 80219fc:	0802d3f4 	.word	0x0802d3f4
 8021a00:	0802c67c 	.word	0x0802c67c
 8021a04:	0802c40c 	.word	0x0802c40c
 8021a08:	20197c70 	.word	0x20197c70

08021a0c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8021a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a10:	b085      	sub	sp, #20
 8021a12:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8021a16:	e9dd 950e 	ldrd	r9, r5, [sp, #56]	; 0x38
 8021a1a:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8021a1e:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 8021a22:	2e00      	cmp	r6, #0
 8021a24:	d05b      	beq.n	8021ade <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 8021a26:	f9b5 e004 	ldrsh.w	lr, [r5, #4]
 8021a2a:	f1be 0f00 	cmp.w	lr, #0
 8021a2e:	dd56      	ble.n	8021ade <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 8021a30:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8021a34:	f1be 0f00 	cmp.w	lr, #0
 8021a38:	dd51      	ble.n	8021ade <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 8021a3a:	f3c8 0b87 	ubfx	fp, r8, #2, #8
 8021a3e:	f1bb 0f0b 	cmp.w	fp, #11
 8021a42:	f000 8165 	beq.w	8021d10 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x304>
 8021a46:	f1bb 0f0d 	cmp.w	fp, #13
 8021a4a:	4684      	mov	ip, r0
 8021a4c:	4614      	mov	r4, r2
 8021a4e:	461f      	mov	r7, r3
 8021a50:	d03c      	beq.n	8021acc <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xc0>
 8021a52:	f8df a368 	ldr.w	sl, [pc, #872]	; 8021dbc <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3b0>
 8021a56:	f8da 0000 	ldr.w	r0, [sl]
 8021a5a:	2800      	cmp	r0, #0
 8021a5c:	f000 818d 	beq.w	8021d7a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8021a60:	f8cd c00c 	str.w	ip, [sp, #12]
 8021a64:	f7fc fc94 	bl	801e390 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8021a68:	9b03      	ldr	r3, [sp, #12]
 8021a6a:	681a      	ldr	r2, [r3, #0]
 8021a6c:	4618      	mov	r0, r3
 8021a6e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8021a70:	4798      	blx	r3
 8021a72:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8021a76:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8021a7a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8021a7e:	f9b5 0000 	ldrsh.w	r0, [r5]
 8021a82:	f7fa f98f 	bl	801bda4 <nema_set_clip>
 8021a86:	2200      	movs	r2, #0
 8021a88:	4633      	mov	r3, r6
 8021a8a:	4611      	mov	r1, r2
 8021a8c:	4610      	mov	r0, r2
 8021a8e:	f7fa f9bd 	bl	801be0c <nema_rgba>
 8021a92:	f7fc fb95 	bl	801e1c0 <nema_set_const_color>
 8021a96:	f04f 33ff 	mov.w	r3, #4294967295
 8021a9a:	2201      	movs	r2, #1
 8021a9c:	2100      	movs	r1, #0
 8021a9e:	48bd      	ldr	r0, [pc, #756]	; (8021d94 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x388>)
 8021aa0:	f7fb ffc8 	bl	801da34 <nema_set_blend>
 8021aa4:	f1bb 0f0d 	cmp.w	fp, #13
 8021aa8:	f200 816d 	bhi.w	8021d86 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x37a>
 8021aac:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8021ab0:	00c700d3 	.word	0x00c700d3
 8021ab4:	016b00dc 	.word	0x016b00dc
 8021ab8:	016b016b 	.word	0x016b016b
 8021abc:	016b016b 	.word	0x016b016b
 8021ac0:	016b016b 	.word	0x016b016b
 8021ac4:	016b016b 	.word	0x016b016b
 8021ac8:	001a00b2 	.word	0x001a00b2
 8021acc:	685b      	ldr	r3, [r3, #4]
 8021ace:	b133      	cbz	r3, 8021ade <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 8021ad0:	781b      	ldrb	r3, [r3, #0]
 8021ad2:	f1a3 0216 	sub.w	r2, r3, #22
 8021ad6:	2a01      	cmp	r2, #1
 8021ad8:	d9bb      	bls.n	8021a52 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x46>
 8021ada:	2b12      	cmp	r3, #18
 8021adc:	d0b9      	beq.n	8021a52 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x46>
 8021ade:	b005      	add	sp, #20
 8021ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ae4:	f04f 36ff 	mov.w	r6, #4294967295
 8021ae8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021aec:	687b      	ldr	r3, [r7, #4]
 8021aee:	6838      	ldr	r0, [r7, #0]
 8021af0:	781b      	ldrb	r3, [r3, #0]
 8021af2:	f008 0501 	and.w	r5, r8, #1
 8021af6:	e9cd 6500 	strd	r6, r5, [sp]
 8021afa:	f7fa f98f 	bl	801be1c <nema_bind_src_tex>
 8021afe:	2001      	movs	r0, #1
 8021b00:	f7fa ffbc 	bl	801ca7c <nema_enable_tiling>
 8021b04:	2300      	movs	r3, #0
 8021b06:	461a      	mov	r2, r3
 8021b08:	4619      	mov	r1, r3
 8021b0a:	4618      	mov	r0, r3
 8021b0c:	f7fa ffca 	bl	801caa4 <nema_enable_aa>
 8021b10:	f9b9 3000 	ldrsh.w	r3, [r9]
 8021b14:	edd4 7a00 	vldr	s15, [r4]
 8021b18:	ee02 3a10 	vmov	s4, r3
 8021b1c:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 8021b20:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8021b24:	ee02 3a90 	vmov	s5, r3
 8021b28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021b2c:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8021d98 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8021b30:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8021b34:	edd4 7a01 	vldr	s15, [r4, #4]
 8021b38:	eeb0 0a42 	vmov.f32	s0, s4
 8021b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021b40:	eea7 0a26 	vfma.f32	s0, s14, s13
 8021b44:	eef0 0a62 	vmov.f32	s1, s5
 8021b48:	ed94 7a03 	vldr	s14, [r4, #12]
 8021b4c:	4b93      	ldr	r3, [pc, #588]	; (8021d9c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x390>)
 8021b4e:	eee7 0aa6 	vfma.f32	s1, s15, s13
 8021b52:	781b      	ldrb	r3, [r3, #0]
 8021b54:	edd4 7a04 	vldr	s15, [r4, #16]
 8021b58:	2b01      	cmp	r3, #1
 8021b5a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021b5e:	f000 808c 	beq.w	8021c7a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x26e>
 8021b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021b6a:	f240 80ea 	bls.w	8021d42 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8021b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b72:	bf94      	ite	ls
 8021b74:	2001      	movls	r0, #1
 8021b76:	2002      	movhi	r0, #2
 8021b78:	edd4 7a05 	vldr	s15, [r4, #20]
 8021b7c:	ed94 6a08 	vldr	s12, [r4, #32]
 8021b80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021b84:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8021b88:	edd4 7a06 	vldr	s15, [r4, #24]
 8021b8c:	eddf 6a82 	vldr	s13, [pc, #520]	; 8021d98 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8021b90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021b94:	eeb0 1a42 	vmov.f32	s2, s4
 8021b98:	eef0 1a62 	vmov.f32	s3, s5
 8021b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ba0:	eee7 1aa6 	vfma.f32	s3, s15, s13
 8021ba4:	eea7 1a26 	vfma.f32	s2, s14, s13
 8021ba8:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8021bac:	f240 80c1 	bls.w	8021d32 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x326>
 8021bb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021bb8:	bf94      	ite	ls
 8021bba:	2101      	movls	r1, #1
 8021bbc:	2102      	movhi	r1, #2
 8021bbe:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8021bc2:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8021bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021bca:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8021bce:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8021bd2:	eddf 6a71 	vldr	s13, [pc, #452]	; 8021d98 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8021bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021bde:	eee7 2aa6 	vfma.f32	s5, s15, s13
 8021be2:	eea7 2a26 	vfma.f32	s4, s14, s13
 8021be6:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8021bea:	f240 809a 	bls.w	8021d22 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x316>
 8021bee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021bf6:	bf94      	ite	ls
 8021bf8:	2201      	movls	r2, #1
 8021bfa:	2202      	movhi	r2, #2
 8021bfc:	f7fa fb44 	bl	801c288 <nema_blit_tri_fit>
 8021c00:	f8da 0000 	ldr.w	r0, [sl]
 8021c04:	2800      	cmp	r0, #0
 8021c06:	f000 80b8 	beq.w	8021d7a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8021c0a:	b005      	add	sp, #20
 8021c0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c10:	f7fc bbde 	b.w	801e3d0 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8021c14:	4a62      	ldr	r2, [pc, #392]	; (8021da0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x394>)
 8021c16:	23ff      	movs	r3, #255	; 0xff
 8021c18:	6810      	ldr	r0, [r2, #0]
 8021c1a:	f008 0501 	and.w	r5, r8, #1
 8021c1e:	b2c2      	uxtb	r2, r0
 8021c20:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8021c24:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8021c28:	f7fa f8f0 	bl	801be0c <nema_rgba>
 8021c2c:	f7fa f8ae 	bl	801bd8c <nema_set_tex_color>
 8021c30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021c34:	6838      	ldr	r0, [r7, #0]
 8021c36:	2329      	movs	r3, #41	; 0x29
 8021c38:	f04f 36ff 	mov.w	r6, #4294967295
 8021c3c:	e75b      	b.n	8021af6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 8021c3e:	2339      	movs	r3, #57	; 0x39
 8021c40:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021c44:	f04f 0c03 	mov.w	ip, #3
 8021c48:	6838      	ldr	r0, [r7, #0]
 8021c4a:	f008 0501 	and.w	r5, r8, #1
 8021c4e:	693e      	ldr	r6, [r7, #16]
 8021c50:	fb06 f60c 	mul.w	r6, r6, ip
 8021c54:	e74f      	b.n	8021af6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 8021c56:	f008 0501 	and.w	r5, r8, #1
 8021c5a:	6838      	ldr	r0, [r7, #0]
 8021c5c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021c60:	2304      	movs	r3, #4
 8021c62:	f04f 0c02 	mov.w	ip, #2
 8021c66:	e7f2      	b.n	8021c4e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x242>
 8021c68:	2310      	movs	r3, #16
 8021c6a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8021c6e:	f04f 0c04 	mov.w	ip, #4
 8021c72:	6838      	ldr	r0, [r7, #0]
 8021c74:	f008 0501 	and.w	r5, r8, #1
 8021c78:	e7e9      	b.n	8021c4e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x242>
 8021c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021c82:	d974      	bls.n	8021d6e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x362>
 8021c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c88:	bf94      	ite	ls
 8021c8a:	2002      	movls	r0, #2
 8021c8c:	2003      	movhi	r0, #3
 8021c8e:	edd4 7a05 	vldr	s15, [r4, #20]
 8021c92:	ed94 6a08 	vldr	s12, [r4, #32]
 8021c96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021c9a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8021c9e:	edd4 7a06 	vldr	s15, [r4, #24]
 8021ca2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8021d98 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8021ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021caa:	eeb0 1a42 	vmov.f32	s2, s4
 8021cae:	eef0 1a62 	vmov.f32	s3, s5
 8021cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021cb6:	eee7 1aa6 	vfma.f32	s3, s15, s13
 8021cba:	eea7 1a26 	vfma.f32	s2, s14, s13
 8021cbe:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8021cc2:	d94c      	bls.n	8021d5e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x352>
 8021cc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ccc:	bf94      	ite	ls
 8021cce:	2102      	movls	r1, #2
 8021cd0:	2103      	movhi	r1, #3
 8021cd2:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8021cd6:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8021cda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8021cde:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8021ce2:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8021ce6:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8021d98 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>
 8021cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021cf2:	eee7 2aa6 	vfma.f32	s5, s15, s13
 8021cf6:	eea7 2a26 	vfma.f32	s4, s14, s13
 8021cfa:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8021cfe:	d926      	bls.n	8021d4e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8021d00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d08:	bf94      	ite	ls
 8021d0a:	2202      	movls	r2, #2
 8021d0c:	2203      	movhi	r2, #3
 8021d0e:	e775      	b.n	8021bfc <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 8021d10:	e9cd 6a11 	strd	r6, sl, [sp, #68]	; 0x44
 8021d14:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8021d18:	b005      	add	sp, #20
 8021d1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d1e:	f7f6 b887 	b.w	8017e30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 8021d22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d2a:	bf94      	ite	ls
 8021d2c:	2200      	movls	r2, #0
 8021d2e:	2203      	movhi	r2, #3
 8021d30:	e764      	b.n	8021bfc <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 8021d32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d3a:	bf94      	ite	ls
 8021d3c:	2100      	movls	r1, #0
 8021d3e:	2103      	movhi	r1, #3
 8021d40:	e73d      	b.n	8021bbe <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1b2>
 8021d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d46:	bf94      	ite	ls
 8021d48:	2000      	movls	r0, #0
 8021d4a:	2003      	movhi	r0, #3
 8021d4c:	e714      	b.n	8021b78 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x16c>
 8021d4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d56:	bf94      	ite	ls
 8021d58:	2201      	movls	r2, #1
 8021d5a:	2200      	movhi	r2, #0
 8021d5c:	e74e      	b.n	8021bfc <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 8021d5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d66:	bf94      	ite	ls
 8021d68:	2101      	movls	r1, #1
 8021d6a:	2100      	movhi	r1, #0
 8021d6c:	e7b1      	b.n	8021cd2 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c6>
 8021d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d72:	bf94      	ite	ls
 8021d74:	2001      	movls	r0, #1
 8021d76:	2000      	movhi	r0, #0
 8021d78:	e789      	b.n	8021c8e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x282>
 8021d7a:	4b0a      	ldr	r3, [pc, #40]	; (8021da4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x398>)
 8021d7c:	4a0a      	ldr	r2, [pc, #40]	; (8021da8 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x39c>)
 8021d7e:	217c      	movs	r1, #124	; 0x7c
 8021d80:	480a      	ldr	r0, [pc, #40]	; (8021dac <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a0>)
 8021d82:	f007 fa67 	bl	8029254 <__assert_func>
 8021d86:	4b0a      	ldr	r3, [pc, #40]	; (8021db0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a4>)
 8021d88:	4a0a      	ldr	r2, [pc, #40]	; (8021db4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>)
 8021d8a:	f240 21d3 	movw	r1, #723	; 0x2d3
 8021d8e:	480a      	ldr	r0, [pc, #40]	; (8021db8 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ac>)
 8021d90:	f007 fa60 	bl	8029254 <__assert_func>
 8021d94:	08000504 	.word	0x08000504
 8021d98:	3d800000 	.word	0x3d800000
 8021d9c:	20197a38 	.word	0x20197a38
 8021da0:	20197a48 	.word	0x20197a48
 8021da4:	0802c0c0 	.word	0x0802c0c0
 8021da8:	0802c8c8 	.word	0x0802c8c8
 8021dac:	0802c0e8 	.word	0x0802c0e8
 8021db0:	0802bfb8 	.word	0x0802bfb8
 8021db4:	0802cc6c 	.word	0x0802cc6c
 8021db8:	0802c164 	.word	0x0802c164
 8021dbc:	20197c70 	.word	0x20197c70

08021dc0 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8021dc0:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8021dc4:	2700      	movs	r7, #0
 8021dc6:	4a2b      	ldr	r2, [pc, #172]	; (8021e74 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xb4>)
 8021dc8:	4b2b      	ldr	r3, [pc, #172]	; (8021e78 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xb8>)
 8021dca:	4d2c      	ldr	r5, [pc, #176]	; (8021e7c <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xbc>)
 8021dcc:	8812      	ldrh	r2, [r2, #0]
 8021dce:	881b      	ldrh	r3, [r3, #0]
 8021dd0:	b088      	sub	sp, #32
 8021dd2:	4604      	mov	r4, r0
 8021dd4:	6828      	ldr	r0, [r5, #0]
 8021dd6:	f8ad 201c 	strh.w	r2, [sp, #28]
 8021dda:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021dde:	9706      	str	r7, [sp, #24]
 8021de0:	6803      	ldr	r3, [r0, #0]
 8021de2:	4689      	mov	r9, r1
 8021de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021de6:	4798      	blx	r3
 8021de8:	6823      	ldr	r3, [r4, #0]
 8021dea:	4a25      	ldr	r2, [pc, #148]	; (8021e80 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc0>)
 8021dec:	68de      	ldr	r6, [r3, #12]
 8021dee:	4601      	mov	r1, r0
 8021df0:	4296      	cmp	r6, r2
 8021df2:	d134      	bne.n	8021e5e <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x9e>
 8021df4:	682a      	ldr	r2, [r5, #0]
 8021df6:	691d      	ldr	r5, [r3, #16]
 8021df8:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8021dfc:	b9a3      	cbnz	r3, 8021e28 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x68>
 8021dfe:	6890      	ldr	r0, [r2, #8]
 8021e00:	4a20      	ldr	r2, [pc, #128]	; (8021e84 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc4>)
 8021e02:	6803      	ldr	r3, [r0, #0]
 8021e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e06:	4293      	cmp	r3, r2
 8021e08:	d116      	bne.n	8021e38 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x78>
 8021e0a:	4b1f      	ldr	r3, [pc, #124]	; (8021e88 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc8>)
 8021e0c:	7a02      	ldrb	r2, [r0, #8]
 8021e0e:	429d      	cmp	r5, r3
 8021e10:	d119      	bne.n	8021e46 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8021e12:	23ff      	movs	r3, #255	; 0xff
 8021e14:	f8cd 9000 	str.w	r9, [sp]
 8021e18:	9301      	str	r3, [sp, #4]
 8021e1a:	4620      	mov	r0, r4
 8021e1c:	ab06      	add	r3, sp, #24
 8021e1e:	f7ff fa63 	bl	80212e8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>
 8021e22:	b008      	add	sp, #32
 8021e24:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8021e28:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8021e2a:	2800      	cmp	r0, #0
 8021e2c:	d0e7      	beq.n	8021dfe <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x3e>
 8021e2e:	6803      	ldr	r3, [r0, #0]
 8021e30:	4a14      	ldr	r2, [pc, #80]	; (8021e84 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc4>)
 8021e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e34:	4293      	cmp	r3, r2
 8021e36:	d0e8      	beq.n	8021e0a <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x4a>
 8021e38:	9105      	str	r1, [sp, #20]
 8021e3a:	4798      	blx	r3
 8021e3c:	4b12      	ldr	r3, [pc, #72]	; (8021e88 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc8>)
 8021e3e:	4602      	mov	r2, r0
 8021e40:	429d      	cmp	r5, r3
 8021e42:	9905      	ldr	r1, [sp, #20]
 8021e44:	d0e5      	beq.n	8021e12 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x52>
 8021e46:	2600      	movs	r6, #0
 8021e48:	23ff      	movs	r3, #255	; 0xff
 8021e4a:	f8cd 9000 	str.w	r9, [sp]
 8021e4e:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8021e52:	4620      	mov	r0, r4
 8021e54:	ab06      	add	r3, sp, #24
 8021e56:	47a8      	blx	r5
 8021e58:	b008      	add	sp, #32
 8021e5a:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8021e5e:	22ff      	movs	r2, #255	; 0xff
 8021e60:	9701      	str	r7, [sp, #4]
 8021e62:	9200      	str	r2, [sp, #0]
 8021e64:	464b      	mov	r3, r9
 8021e66:	4620      	mov	r0, r4
 8021e68:	aa06      	add	r2, sp, #24
 8021e6a:	47b0      	blx	r6
 8021e6c:	b008      	add	sp, #32
 8021e6e:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8021e72:	bf00      	nop
 8021e74:	20197a3a 	.word	0x20197a3a
 8021e78:	20197a3c 	.word	0x20197a3c
 8021e7c:	20197a40 	.word	0x20197a40
 8021e80:	08021419 	.word	0x08021419
 8021e84:	0801e475 	.word	0x0801e475
 8021e88:	080214a5 	.word	0x080214a5

08021e8c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8021e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e90:	4604      	mov	r4, r0
 8021e92:	4865      	ldr	r0, [pc, #404]	; (8022028 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19c>)
 8021e94:	460f      	mov	r7, r1
 8021e96:	6800      	ldr	r0, [r0, #0]
 8021e98:	b093      	sub	sp, #76	; 0x4c
 8021e9a:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8021e9e:	2902      	cmp	r1, #2
 8021ea0:	f000 81f2 	beq.w	8022288 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3fc>
 8021ea4:	f10d 0948 	add.w	r9, sp, #72	; 0x48
 8021ea8:	f829 3d1c 	strh.w	r3, [r9, #-28]!
 8021eac:	4648      	mov	r0, r9
 8021eae:	4615      	mov	r5, r2
 8021eb0:	f7f9 fbbc 	bl	801b62c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021eb4:	6823      	ldr	r3, [r4, #0]
 8021eb6:	4a5d      	ldr	r2, [pc, #372]	; (802202c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a0>)
 8021eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021eba:	4680      	mov	r8, r0
 8021ebc:	4293      	cmp	r3, r2
 8021ebe:	f040 81b5 	bne.w	802222c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3a0>
 8021ec2:	7a20      	ldrb	r0, [r4, #8]
 8021ec4:	4580      	cmp	r8, r0
 8021ec6:	f040 81d9 	bne.w	802227c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3f0>
 8021eca:	4648      	mov	r0, r9
 8021ecc:	f7f9 fb2a 	bl	801b524 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021ed0:	4683      	mov	fp, r0
 8021ed2:	2800      	cmp	r0, #0
 8021ed4:	f000 81cc 	beq.w	8022270 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3e4>
 8021ed8:	6823      	ldr	r3, [r4, #0]
 8021eda:	4648      	mov	r0, r9
 8021edc:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8021ee0:	f7f9 fab8 	bl	801b454 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021ee4:	9005      	str	r0, [sp, #20]
 8021ee6:	4648      	mov	r0, r9
 8021ee8:	f7f9 fae8 	bl	801b4bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021eec:	4b50      	ldr	r3, [pc, #320]	; (8022030 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a4>)
 8021eee:	9006      	str	r0, [sp, #24]
 8021ef0:	4598      	cmp	r8, r3
 8021ef2:	f040 818e 	bne.w	8022212 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x386>
 8021ef6:	4b4c      	ldr	r3, [pc, #304]	; (8022028 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19c>)
 8021ef8:	681b      	ldr	r3, [r3, #0]
 8021efa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8021efe:	2b02      	cmp	r3, #2
 8021f00:	f000 81c8 	beq.w	8022294 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x408>
 8021f04:	f9b5 8000 	ldrsh.w	r8, [r5]
 8021f08:	88ab      	ldrh	r3, [r5, #4]
 8021f0a:	fa1f fe88 	uxth.w	lr, r8
 8021f0e:	4473      	add	r3, lr
 8021f10:	b29b      	uxth	r3, r3
 8021f12:	b218      	sxth	r0, r3
 8021f14:	4580      	cmp	r8, r0
 8021f16:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
 8021f1a:	da2a      	bge.n	8021f72 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8021f1c:	9a05      	ldr	r2, [sp, #20]
 8021f1e:	eb0e 0102 	add.w	r1, lr, r2
 8021f22:	b28a      	uxth	r2, r1
 8021f24:	9207      	str	r2, [sp, #28]
 8021f26:	f9bd c01c 	ldrsh.w	ip, [sp, #28]
 8021f2a:	45e0      	cmp	r8, ip
 8021f2c:	da21      	bge.n	8021f72 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8021f2e:	88ea      	ldrh	r2, [r5, #6]
 8021f30:	fa1f f68a 	uxth.w	r6, sl
 8021f34:	4432      	add	r2, r6
 8021f36:	b292      	uxth	r2, r2
 8021f38:	b211      	sxth	r1, r2
 8021f3a:	458a      	cmp	sl, r1
 8021f3c:	9108      	str	r1, [sp, #32]
 8021f3e:	da18      	bge.n	8021f72 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8021f40:	9906      	ldr	r1, [sp, #24]
 8021f42:	eb06 0901 	add.w	r9, r6, r1
 8021f46:	fa1f f989 	uxth.w	r9, r9
 8021f4a:	fa0f f189 	sxth.w	r1, r9
 8021f4e:	458a      	cmp	sl, r1
 8021f50:	9109      	str	r1, [sp, #36]	; 0x24
 8021f52:	da0e      	bge.n	8021f72 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 8021f54:	9907      	ldr	r1, [sp, #28]
 8021f56:	4560      	cmp	r0, ip
 8021f58:	bfc8      	it	gt
 8021f5a:	460b      	movgt	r3, r1
 8021f5c:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8021f60:	4281      	cmp	r1, r0
 8021f62:	bfc8      	it	gt
 8021f64:	464a      	movgt	r2, r9
 8021f66:	eba3 030e 	sub.w	r3, r3, lr
 8021f6a:	1b92      	subs	r2, r2, r6
 8021f6c:	b21b      	sxth	r3, r3
 8021f6e:	b212      	sxth	r2, r2
 8021f70:	e005      	b.n	8021f7e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xf2>
 8021f72:	2200      	movs	r2, #0
 8021f74:	4616      	mov	r6, r2
 8021f76:	4692      	mov	sl, r2
 8021f78:	4613      	mov	r3, r2
 8021f7a:	4696      	mov	lr, r2
 8021f7c:	4690      	mov	r8, r2
 8021f7e:	f9b7 0000 	ldrsh.w	r0, [r7]
 8021f82:	88b9      	ldrh	r1, [r7, #4]
 8021f84:	4401      	add	r1, r0
 8021f86:	b289      	uxth	r1, r1
 8021f88:	fa0f f981 	sxth.w	r9, r1
 8021f8c:	45c8      	cmp	r8, r9
 8021f8e:	da55      	bge.n	802203c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8021f90:	449e      	add	lr, r3
 8021f92:	fa1f fe8e 	uxth.w	lr, lr
 8021f96:	fa0f f38e 	sxth.w	r3, lr
 8021f9a:	4298      	cmp	r0, r3
 8021f9c:	9307      	str	r3, [sp, #28]
 8021f9e:	da4d      	bge.n	802203c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8021fa0:	f9b7 c002 	ldrsh.w	ip, [r7, #2]
 8021fa4:	88fb      	ldrh	r3, [r7, #6]
 8021fa6:	4463      	add	r3, ip
 8021fa8:	b29b      	uxth	r3, r3
 8021faa:	b21f      	sxth	r7, r3
 8021fac:	45ba      	cmp	sl, r7
 8021fae:	da45      	bge.n	802203c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8021fb0:	4416      	add	r6, r2
 8021fb2:	b2b2      	uxth	r2, r6
 8021fb4:	b216      	sxth	r6, r2
 8021fb6:	45b4      	cmp	ip, r6
 8021fb8:	9608      	str	r6, [sp, #32]
 8021fba:	da3f      	bge.n	802203c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 8021fbc:	4540      	cmp	r0, r8
 8021fbe:	9e07      	ldr	r6, [sp, #28]
 8021fc0:	bfb8      	it	lt
 8021fc2:	4640      	movlt	r0, r8
 8021fc4:	45d4      	cmp	ip, sl
 8021fc6:	bfb8      	it	lt
 8021fc8:	46d4      	movlt	ip, sl
 8021fca:	45b1      	cmp	r9, r6
 8021fcc:	bfc8      	it	gt
 8021fce:	4671      	movgt	r1, lr
 8021fd0:	9e08      	ldr	r6, [sp, #32]
 8021fd2:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8022034 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a8>
 8021fd6:	42b7      	cmp	r7, r6
 8021fd8:	bfc8      	it	gt
 8021fda:	4613      	movgt	r3, r2
 8021fdc:	f8df e058 	ldr.w	lr, [pc, #88]	; 8022038 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ac>
 8021fe0:	b282      	uxth	r2, r0
 8021fe2:	eba3 030c 	sub.w	r3, r3, ip
 8021fe6:	1a8f      	subs	r7, r1, r2
 8021fe8:	f8b8 a000 	ldrh.w	sl, [r8]
 8021fec:	f8be 9000 	ldrh.w	r9, [lr]
 8021ff0:	b21b      	sxth	r3, r3
 8021ff2:	b23f      	sxth	r7, r7
 8021ff4:	2800      	cmp	r0, #0
 8021ff6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8021ffa:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8021ffe:	f8ad c032 	strh.w	ip, [sp, #50]	; 0x32
 8022002:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 8022006:	fa0f f88a 	sxth.w	r8, sl
 802200a:	fa0f fe89 	sxth.w	lr, r9
 802200e:	f280 8115 	bge.w	802223c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3b0>
 8022012:	2200      	movs	r2, #0
 8022014:	f04f 0600 	mov.w	r6, #0
 8022018:	b20f      	sxth	r7, r1
 802201a:	4610      	mov	r0, r2
 802201c:	4639      	mov	r1, r7
 802201e:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 8022022:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8022026:	e01b      	b.n	8022060 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d4>
 8022028:	20197a40 	.word	0x20197a40
 802202c:	0801e475 	.word	0x0801e475
 8022030:	080215dd 	.word	0x080215dd
 8022034:	20197a34 	.word	0x20197a34
 8022038:	20197a36 	.word	0x20197a36
 802203c:	2300      	movs	r3, #0
 802203e:	489f      	ldr	r0, [pc, #636]	; (80222bc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x430>)
 8022040:	499f      	ldr	r1, [pc, #636]	; (80222c0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x434>)
 8022042:	f8b0 a000 	ldrh.w	sl, [r0]
 8022046:	f8b1 9000 	ldrh.w	r9, [r1]
 802204a:	461a      	mov	r2, r3
 802204c:	469c      	mov	ip, r3
 802204e:	4618      	mov	r0, r3
 8022050:	4619      	mov	r1, r3
 8022052:	461f      	mov	r7, r3
 8022054:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8022058:	fa0f f88a 	sxth.w	r8, sl
 802205c:	fa0f fe89 	sxth.w	lr, r9
 8022060:	eba8 0000 	sub.w	r0, r8, r0
 8022064:	4288      	cmp	r0, r1
 8022066:	da04      	bge.n	8022072 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1e6>
 8022068:	ebaa 0702 	sub.w	r7, sl, r2
 802206c:	b23f      	sxth	r7, r7
 802206e:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 8022072:	f1bc 0f00 	cmp.w	ip, #0
 8022076:	f2c0 80c2 	blt.w	80221fe <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x372>
 802207a:	4661      	mov	r1, ip
 802207c:	ebae 0e01 	sub.w	lr, lr, r1
 8022080:	4573      	cmp	r3, lr
 8022082:	dd04      	ble.n	802208e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x202>
 8022084:	eba9 030c 	sub.w	r3, r9, ip
 8022088:	b21b      	sxth	r3, r3
 802208a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 802208e:	2f00      	cmp	r7, #0
 8022090:	f340 80b1 	ble.w	80221f6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x36a>
 8022094:	2b00      	cmp	r3, #0
 8022096:	f340 80ae 	ble.w	80221f6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x36a>
 802209a:	f04f 0e00 	mov.w	lr, #0
 802209e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80220a2:	9b05      	ldr	r3, [sp, #20]
 80220a4:	8868      	ldrh	r0, [r5, #2]
 80220a6:	8829      	ldrh	r1, [r5, #0]
 80220a8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80220ac:	9b06      	ldr	r3, [sp, #24]
 80220ae:	1a52      	subs	r2, r2, r1
 80220b0:	ebac 0c00 	sub.w	ip, ip, r0
 80220b4:	a910      	add	r1, sp, #64	; 0x40
 80220b6:	a80e      	add	r0, sp, #56	; 0x38
 80220b8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 80220bc:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80220c0:	f8ad c03a 	strh.w	ip, [sp, #58]	; 0x3a
 80220c4:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 80220c8:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 80220cc:	f7f6 fc22 	bl	8018914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80220d0:	a80c      	add	r0, sp, #48	; 0x30
 80220d2:	f7f6 fbf7 	bl	80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80220d6:	a810      	add	r0, sp, #64	; 0x40
 80220d8:	f7f6 fbf4 	bl	80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80220dc:	4b79      	ldr	r3, [pc, #484]	; (80222c4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x438>)
 80220de:	681b      	ldr	r3, [r3, #0]
 80220e0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80220e4:	2a00      	cmp	r2, #0
 80220e6:	f040 80a4 	bne.w	8022232 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3a6>
 80220ea:	6898      	ldr	r0, [r3, #8]
 80220ec:	6803      	ldr	r3, [r0, #0]
 80220ee:	4a76      	ldr	r2, [pc, #472]	; (80222c8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x43c>)
 80220f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80220f2:	4293      	cmp	r3, r2
 80220f4:	f040 80b0 	bne.w	8022258 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3cc>
 80220f8:	7a00      	ldrb	r0, [r0, #8]
 80220fa:	2801      	cmp	r0, #1
 80220fc:	f000 80a5 	beq.w	802224a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3be>
 8022100:	f0c0 809e 	bcc.w	8022240 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3b4>
 8022104:	2802      	cmp	r0, #2
 8022106:	f040 80d2 	bne.w	80222ae <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x422>
 802210a:	f04f 0810 	mov.w	r8, #16
 802210e:	f04f 0a04 	mov.w	sl, #4
 8022112:	6823      	ldr	r3, [r4, #0]
 8022114:	4a6d      	ldr	r2, [pc, #436]	; (80222cc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x440>)
 8022116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022118:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 802211c:	4293      	cmp	r3, r2
 802211e:	fb0a f707 	mul.w	r7, sl, r7
 8022122:	f040 809b 	bne.w	802225c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d0>
 8022126:	4b6a      	ldr	r3, [pc, #424]	; (80222d0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x444>)
 8022128:	881b      	ldrh	r3, [r3, #0]
 802212a:	2b00      	cmp	r3, #0
 802212c:	f000 80b8 	beq.w	80222a0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x414>
 8022130:	7a22      	ldrb	r2, [r4, #8]
 8022132:	2a02      	cmp	r2, #2
 8022134:	f000 808e 	beq.w	8022254 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3c8>
 8022138:	2a01      	cmp	r2, #1
 802213a:	bf14      	ite	ne
 802213c:	2402      	movne	r4, #2
 802213e:	2403      	moveq	r4, #3
 8022140:	fb13 f404 	smulbb	r4, r3, r4
 8022144:	b2a4      	uxth	r4, r4
 8022146:	4a5f      	ldr	r2, [pc, #380]	; (80222c4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x438>)
 8022148:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 802214c:	f9bd 903a 	ldrsh.w	r9, [sp, #58]	; 0x3a
 8022150:	6810      	ldr	r0, [r2, #0]
 8022152:	fb07 3909 	mla	r9, r7, r9, r3
 8022156:	6803      	ldr	r3, [r0, #0]
 8022158:	4e5e      	ldr	r6, [pc, #376]	; (80222d4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x448>)
 802215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802215c:	4798      	blx	r3
 802215e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8022162:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	; 0x30
 8022166:	fb04 f303 	mul.w	r3, r4, r3
 802216a:	fb0a 3505 	mla	r5, sl, r5, r3
 802216e:	4405      	add	r5, r0
 8022170:	6830      	ldr	r0, [r6, #0]
 8022172:	44d9      	add	r9, fp
 8022174:	2800      	cmp	r0, #0
 8022176:	d075      	beq.n	8022264 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 8022178:	f7fc f90a 	bl	801e390 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 802217c:	9700      	str	r7, [sp, #0]
 802217e:	2700      	movs	r7, #0
 8022180:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 8022184:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8022188:	4648      	mov	r0, r9
 802218a:	4643      	mov	r3, r8
 802218c:	f7f9 febe 	bl	801bf0c <nema_bind_dst_tex>
 8022190:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8022194:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8022198:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 802219c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80221a0:	f7f9 fe00 	bl	801bda4 <nema_set_clip>
 80221a4:	f04f 33ff 	mov.w	r3, #4294967295
 80221a8:	2201      	movs	r2, #1
 80221aa:	2100      	movs	r1, #0
 80221ac:	f240 5004 	movw	r0, #1284	; 0x504
 80221b0:	f7fb fc40 	bl	801da34 <nema_set_blend>
 80221b4:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 80221b8:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 80221bc:	4643      	mov	r3, r8
 80221be:	4628      	mov	r0, r5
 80221c0:	9400      	str	r4, [sp, #0]
 80221c2:	9701      	str	r7, [sp, #4]
 80221c4:	f7f9 fe2a 	bl	801be1c <nema_bind_src_tex>
 80221c8:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80221cc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80221d0:	f7f9 ff64 	bl	801c09c <nema_blit>
 80221d4:	6830      	ldr	r0, [r6, #0]
 80221d6:	2800      	cmp	r0, #0
 80221d8:	d044      	beq.n	8022264 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 80221da:	f7fc f8f9 	bl	801e3d0 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 80221de:	6830      	ldr	r0, [r6, #0]
 80221e0:	2800      	cmp	r0, #0
 80221e2:	d03f      	beq.n	8022264 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 80221e4:	6803      	ldr	r3, [r0, #0]
 80221e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80221e8:	4798      	blx	r3
 80221ea:	6830      	ldr	r0, [r6, #0]
 80221ec:	2800      	cmp	r0, #0
 80221ee:	d039      	beq.n	8022264 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 80221f0:	6803      	ldr	r3, [r0, #0]
 80221f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80221f4:	4798      	blx	r3
 80221f6:	4658      	mov	r0, fp
 80221f8:	b013      	add	sp, #76	; 0x4c
 80221fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221fe:	2000      	movs	r0, #0
 8022200:	4463      	add	r3, ip
 8022202:	b21b      	sxth	r3, r3
 8022204:	4684      	mov	ip, r0
 8022206:	4601      	mov	r1, r0
 8022208:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 802220c:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8022210:	e734      	b.n	802207c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f0>
 8022212:	9b05      	ldr	r3, [sp, #20]
 8022214:	9002      	str	r0, [sp, #8]
 8022216:	e9cd b300 	strd	fp, r3, [sp]
 802221a:	a810      	add	r0, sp, #64	; 0x40
 802221c:	462b      	mov	r3, r5
 802221e:	463a      	mov	r2, r7
 8022220:	4621      	mov	r1, r4
 8022222:	47c0      	blx	r8
 8022224:	4658      	mov	r0, fp
 8022226:	b013      	add	sp, #76	; 0x4c
 8022228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802222c:	4620      	mov	r0, r4
 802222e:	4798      	blx	r3
 8022230:	e648      	b.n	8021ec4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x38>
 8022232:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8022234:	2800      	cmp	r0, #0
 8022236:	f47f af59 	bne.w	80220ec <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x260>
 802223a:	e756      	b.n	80220ea <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 802223c:	4639      	mov	r1, r7
 802223e:	e70f      	b.n	8022060 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d4>
 8022240:	f04f 0804 	mov.w	r8, #4
 8022244:	f04f 0a02 	mov.w	sl, #2
 8022248:	e763      	b.n	8022112 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 802224a:	f04f 0839 	mov.w	r8, #57	; 0x39
 802224e:	f04f 0a03 	mov.w	sl, #3
 8022252:	e75e      	b.n	8022112 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 8022254:	2404      	movs	r4, #4
 8022256:	e773      	b.n	8022140 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b4>
 8022258:	4798      	blx	r3
 802225a:	e74e      	b.n	80220fa <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26e>
 802225c:	4620      	mov	r0, r4
 802225e:	4798      	blx	r3
 8022260:	4604      	mov	r4, r0
 8022262:	e770      	b.n	8022146 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ba>
 8022264:	4b1c      	ldr	r3, [pc, #112]	; (80222d8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x44c>)
 8022266:	4a1d      	ldr	r2, [pc, #116]	; (80222dc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x450>)
 8022268:	217c      	movs	r1, #124	; 0x7c
 802226a:	481d      	ldr	r0, [pc, #116]	; (80222e0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x454>)
 802226c:	f006 fff2 	bl	8029254 <__assert_func>
 8022270:	4b1c      	ldr	r3, [pc, #112]	; (80222e4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x458>)
 8022272:	4a1d      	ldr	r2, [pc, #116]	; (80222e8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 8022274:	21e9      	movs	r1, #233	; 0xe9
 8022276:	481d      	ldr	r0, [pc, #116]	; (80222ec <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 8022278:	f006 ffec 	bl	8029254 <__assert_func>
 802227c:	4b1c      	ldr	r3, [pc, #112]	; (80222f0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x464>)
 802227e:	4a1a      	ldr	r2, [pc, #104]	; (80222e8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 8022280:	21e7      	movs	r1, #231	; 0xe7
 8022282:	481a      	ldr	r0, [pc, #104]	; (80222ec <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 8022284:	f006 ffe6 	bl	8029254 <__assert_func>
 8022288:	4b1a      	ldr	r3, [pc, #104]	; (80222f4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x468>)
 802228a:	4a17      	ldr	r2, [pc, #92]	; (80222e8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 802228c:	21e5      	movs	r1, #229	; 0xe5
 802228e:	4817      	ldr	r0, [pc, #92]	; (80222ec <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 8022290:	f006 ffe0 	bl	8029254 <__assert_func>
 8022294:	4b17      	ldr	r3, [pc, #92]	; (80222f4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x468>)
 8022296:	4a18      	ldr	r2, [pc, #96]	; (80222f8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x46c>)
 8022298:	21f0      	movs	r1, #240	; 0xf0
 802229a:	4814      	ldr	r0, [pc, #80]	; (80222ec <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 802229c:	f006 ffda 	bl	8029254 <__assert_func>
 80222a0:	4b16      	ldr	r3, [pc, #88]	; (80222fc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x470>)
 80222a2:	4a17      	ldr	r2, [pc, #92]	; (8022300 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x474>)
 80222a4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80222a8:	4816      	ldr	r0, [pc, #88]	; (8022304 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x478>)
 80222aa:	f006 ffd3 	bl	8029254 <__assert_func>
 80222ae:	4b16      	ldr	r3, [pc, #88]	; (8022308 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x47c>)
 80222b0:	4a11      	ldr	r2, [pc, #68]	; (80222f8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x46c>)
 80222b2:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80222b6:	480d      	ldr	r0, [pc, #52]	; (80222ec <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 80222b8:	f006 ffcc 	bl	8029254 <__assert_func>
 80222bc:	20197a34 	.word	0x20197a34
 80222c0:	20197a36 	.word	0x20197a36
 80222c4:	20197a40 	.word	0x20197a40
 80222c8:	0801e475 	.word	0x0801e475
 80222cc:	08020055 	.word	0x08020055
 80222d0:	20197a3a 	.word	0x20197a3a
 80222d4:	20197c70 	.word	0x20197c70
 80222d8:	0802c0c0 	.word	0x0802c0c0
 80222dc:	0802c8c8 	.word	0x0802c8c8
 80222e0:	0802c0e8 	.word	0x0802c0e8
 80222e4:	0802c4b8 	.word	0x0802c4b8
 80222e8:	0802d1dc 	.word	0x0802d1dc
 80222ec:	0802c164 	.word	0x0802c164
 80222f0:	0802c460 	.word	0x0802c460
 80222f4:	0802c308 	.word	0x0802c308
 80222f8:	0802d148 	.word	0x0802d148
 80222fc:	0802c638 	.word	0x0802c638
 8022300:	0802d3f4 	.word	0x0802d3f4
 8022304:	0802c67c 	.word	0x0802c67c
 8022308:	0802c40c 	.word	0x0802c40c

0802230c <_ZN8touchgfx8LCDGPU2DC1Ev>:
 802230c:	b410      	push	{r4}
 802230e:	2400      	movs	r4, #0
 8022310:	220d      	movs	r2, #13
 8022312:	4903      	ldr	r1, [pc, #12]	; (8022320 <_ZN8touchgfx8LCDGPU2DC1Ev+0x14>)
 8022314:	7202      	strb	r2, [r0, #8]
 8022316:	e9c0 1400 	strd	r1, r4, [r0]
 802231a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802231e:	4770      	bx	lr
 8022320:	0802c870 	.word	0x0802c870

08022324 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE>:
 8022324:	2902      	cmp	r1, #2
 8022326:	d906      	bls.n	8022336 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x12>
 8022328:	b508      	push	{r3, lr}
 802232a:	4a04      	ldr	r2, [pc, #16]	; (802233c <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x18>)
 802232c:	4b04      	ldr	r3, [pc, #16]	; (8022340 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x1c>)
 802232e:	212a      	movs	r1, #42	; 0x2a
 8022330:	4804      	ldr	r0, [pc, #16]	; (8022344 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x20>)
 8022332:	f006 ff8f 	bl	8029254 <__assert_func>
 8022336:	7201      	strb	r1, [r0, #8]
 8022338:	4770      	bx	lr
 802233a:	bf00      	nop
 802233c:	0802cbe0 	.word	0x0802cbe0
 8022340:	0802bff8 	.word	0x0802bff8
 8022344:	0802c164 	.word	0x0802c164

08022348 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>:
 8022348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802234c:	b093      	sub	sp, #76	; 0x4c
 802234e:	4691      	mov	r9, r2
 8022350:	468a      	mov	sl, r1
 8022352:	8812      	ldrh	r2, [r2, #0]
 8022354:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
 8022358:	461c      	mov	r4, r3
 802235a:	910a      	str	r1, [sp, #40]	; 0x28
 802235c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802235e:	2a00      	cmp	r2, #0
 8022360:	f040 8109 	bne.w	8022576 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x22e>
 8022364:	6820      	ldr	r0, [r4, #0]
 8022366:	6861      	ldr	r1, [r4, #4]
 8022368:	aa0e      	add	r2, sp, #56	; 0x38
 802236a:	c203      	stmia	r2!, {r0, r1}
 802236c:	6818      	ldr	r0, [r3, #0]
 802236e:	6859      	ldr	r1, [r3, #4]
 8022370:	aa10      	add	r2, sp, #64	; 0x40
 8022372:	c203      	stmia	r2!, {r0, r1}
 8022374:	a80e      	add	r0, sp, #56	; 0x38
 8022376:	f7f6 faa5 	bl	80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802237a:	4621      	mov	r1, r4
 802237c:	a810      	add	r0, sp, #64	; 0x40
 802237e:	f7f6 fac9 	bl	8018914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022382:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 8022386:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
 802238a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 802238e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8022392:	487c      	ldr	r0, [pc, #496]	; (8022584 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8022394:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8022398:	4422      	add	r2, r4
 802239a:	442b      	add	r3, r5
 802239c:	6800      	ldr	r0, [r0, #0]
 802239e:	fb11 4105 	smlabb	r1, r1, r5, r4
 80223a2:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80223a6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80223aa:	6802      	ldr	r2, [r0, #0]
 80223ac:	4d76      	ldr	r5, [pc, #472]	; (8022588 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 80223ae:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 80223b2:	448a      	add	sl, r1
 80223b4:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80223b8:	42ab      	cmp	r3, r5
 80223ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80223bc:	f9bd 4046 	ldrsh.w	r4, [sp, #70]	; 0x46
 80223c0:	f040 80a6 	bne.w	8022510 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c8>
 80223c4:	6841      	ldr	r1, [r0, #4]
 80223c6:	4d71      	ldr	r5, [pc, #452]	; (802258c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 80223c8:	680b      	ldr	r3, [r1, #0]
 80223ca:	699b      	ldr	r3, [r3, #24]
 80223cc:	42ab      	cmp	r3, r5
 80223ce:	f040 80c4 	bne.w	802255a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x212>
 80223d2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80223d4:	4798      	blx	r3
 80223d6:	4b6e      	ldr	r3, [pc, #440]	; (8022590 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 80223d8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80223dc:	881b      	ldrh	r3, [r3, #0]
 80223de:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80223e2:	fb03 f404 	mul.w	r4, r3, r4
 80223e6:	fb03 1202 	mla	r2, r3, r2, r1
 80223ea:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80223ee:	eb00 0244 	add.w	r2, r0, r4, lsl #1
 80223f2:	4290      	cmp	r0, r2
 80223f4:	920c      	str	r2, [sp, #48]	; 0x30
 80223f6:	f080 8083 	bcs.w	8022500 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 80223fa:	f04f 0b04 	mov.w	fp, #4
 80223fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022400:	0052      	lsls	r2, r2, #1
 8022402:	920d      	str	r2, [sp, #52]	; 0x34
 8022404:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022406:	eb00 0802 	add.w	r8, r0, r2
 802240a:	4580      	cmp	r8, r0
 802240c:	d96d      	bls.n	80224ea <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a2>
 802240e:	4684      	mov	ip, r0
 8022410:	f10a 3eff 	add.w	lr, sl, #4294967295
 8022414:	e03e      	b.n	8022494 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x14c>
 8022416:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022418:	f3c5 4707 	ubfx	r7, r5, #16, #8
 802241c:	fb02 f303 	mul.w	r3, r2, r3
 8022420:	1c59      	adds	r1, r3, #1
 8022422:	eb01 2323 	add.w	r3, r1, r3, asr #8
 8022426:	121b      	asrs	r3, r3, #8
 8022428:	43da      	mvns	r2, r3
 802242a:	b299      	uxth	r1, r3
 802242c:	b2f6      	uxtb	r6, r6
 802242e:	b2eb      	uxtb	r3, r5
 8022430:	fb17 f701 	smulbb	r7, r7, r1
 8022434:	f8bc 5000 	ldrh.w	r5, [ip]
 8022438:	fb13 f301 	smulbb	r3, r3, r1
 802243c:	fb16 f601 	smulbb	r6, r6, r1
 8022440:	122c      	asrs	r4, r5, #8
 8022442:	10e9      	asrs	r1, r5, #3
 8022444:	00ed      	lsls	r5, r5, #3
 8022446:	b2d2      	uxtb	r2, r2
 8022448:	b2ed      	uxtb	r5, r5
 802244a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802244e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022452:	fb04 7402 	mla	r4, r4, r2, r7
 8022456:	fb01 6102 	mla	r1, r1, r2, r6
 802245a:	fb05 3202 	mla	r2, r5, r2, r3
 802245e:	b2a4      	uxth	r4, r4
 8022460:	b292      	uxth	r2, r2
 8022462:	b289      	uxth	r1, r1
 8022464:	1c55      	adds	r5, r2, #1
 8022466:	1c67      	adds	r7, r4, #1
 8022468:	1c4b      	adds	r3, r1, #1
 802246a:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 802246e:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8022472:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022476:	f404 4278 	and.w	r2, r4, #63488	; 0xf800
 802247a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802247e:	095b      	lsrs	r3, r3, #5
 8022480:	432a      	orrs	r2, r5
 8022482:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022486:	431a      	orrs	r2, r3
 8022488:	f8ac 2000 	strh.w	r2, [ip]
 802248c:	f10c 0c02 	add.w	ip, ip, #2
 8022490:	45e0      	cmp	r8, ip
 8022492:	d91f      	bls.n	80224d4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 8022494:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8022498:	fb1b b303 	smlabb	r3, fp, r3, fp
 802249c:	f859 5003 	ldr.w	r5, [r9, r3]
 80224a0:	0e2b      	lsrs	r3, r5, #24
 80224a2:	d0f3      	beq.n	802248c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x144>
 80224a4:	2bff      	cmp	r3, #255	; 0xff
 80224a6:	ea4f 2615 	mov.w	r6, r5, lsr #8
 80224aa:	d1b4      	bne.n	8022416 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xce>
 80224ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80224ae:	2aff      	cmp	r2, #255	; 0xff
 80224b0:	d1b1      	bne.n	8022416 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xce>
 80224b2:	096b      	lsrs	r3, r5, #5
 80224b4:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80224b8:	f026 0607 	bic.w	r6, r6, #7
 80224bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80224c0:	431e      	orrs	r6, r3
 80224c2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80224c6:	4335      	orrs	r5, r6
 80224c8:	f8ac 5000 	strh.w	r5, [ip]
 80224cc:	f10c 0c02 	add.w	ip, ip, #2
 80224d0:	45e0      	cmp	r8, ip
 80224d2:	d8df      	bhi.n	8022494 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x14c>
 80224d4:	43c3      	mvns	r3, r0
 80224d6:	4498      	add	r8, r3
 80224d8:	4b2d      	ldr	r3, [pc, #180]	; (8022590 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 80224da:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80224de:	f108 0801 	add.w	r8, r8, #1
 80224e2:	881b      	ldrh	r3, [r3, #0]
 80224e4:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 80224e8:	44c2      	add	sl, r8
 80224ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80224ec:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80224f0:	1b19      	subs	r1, r3, r4
 80224f2:	1b12      	subs	r2, r2, r4
 80224f4:	4492      	add	sl, r2
 80224f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80224f8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80224fc:	4282      	cmp	r2, r0
 80224fe:	d881      	bhi.n	8022404 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 8022500:	4b20      	ldr	r3, [pc, #128]	; (8022584 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8022502:	6818      	ldr	r0, [r3, #0]
 8022504:	6803      	ldr	r3, [r0, #0]
 8022506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022508:	4798      	blx	r3
 802250a:	b013      	add	sp, #76	; 0x4c
 802250c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022510:	4798      	blx	r3
 8022512:	4603      	mov	r3, r0
 8022514:	2b01      	cmp	r3, #1
 8022516:	d124      	bne.n	8022562 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8022518:	4a1e      	ldr	r2, [pc, #120]	; (8022594 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 802251a:	6810      	ldr	r0, [r2, #0]
 802251c:	b328      	cbz	r0, 802256a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x222>
 802251e:	2700      	movs	r7, #0
 8022520:	260b      	movs	r6, #11
 8022522:	4a1b      	ldr	r2, [pc, #108]	; (8022590 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8022524:	b2a1      	uxth	r1, r4
 8022526:	8814      	ldrh	r4, [r2, #0]
 8022528:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 802252c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8022530:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8022534:	9406      	str	r4, [sp, #24]
 8022536:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022538:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 802253c:	9305      	str	r3, [sp, #20]
 802253e:	9204      	str	r2, [sp, #16]
 8022540:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8022544:	464a      	mov	r2, r9
 8022546:	4651      	mov	r1, sl
 8022548:	e9cd 6707 	strd	r6, r7, [sp, #28]
 802254c:	9503      	str	r5, [sp, #12]
 802254e:	9400      	str	r4, [sp, #0]
 8022550:	f7fb ff46 	bl	801e3e0 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8022554:	b013      	add	sp, #76	; 0x4c
 8022556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802255a:	4608      	mov	r0, r1
 802255c:	4798      	blx	r3
 802255e:	4603      	mov	r3, r0
 8022560:	e7d8      	b.n	8022514 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1cc>
 8022562:	4b08      	ldr	r3, [pc, #32]	; (8022584 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8022564:	6818      	ldr	r0, [r3, #0]
 8022566:	6802      	ldr	r2, [r0, #0]
 8022568:	e733      	b.n	80223d2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 802256a:	4b0b      	ldr	r3, [pc, #44]	; (8022598 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 802256c:	4a0b      	ldr	r2, [pc, #44]	; (802259c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 802256e:	217c      	movs	r1, #124	; 0x7c
 8022570:	480b      	ldr	r0, [pc, #44]	; (80225a0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8022572:	f006 fe6f 	bl	8029254 <__assert_func>
 8022576:	4b0b      	ldr	r3, [pc, #44]	; (80225a4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8022578:	4a0b      	ldr	r2, [pc, #44]	; (80225a8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x260>)
 802257a:	f240 31c2 	movw	r1, #962	; 0x3c2
 802257e:	480b      	ldr	r0, [pc, #44]	; (80225ac <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x264>)
 8022580:	f006 fe68 	bl	8029254 <__assert_func>
 8022584:	20197a40 	.word	0x20197a40
 8022588:	08002599 	.word	0x08002599
 802258c:	08017909 	.word	0x08017909
 8022590:	20197a3a 	.word	0x20197a3a
 8022594:	20197c70 	.word	0x20197c70
 8022598:	0802c0c0 	.word	0x0802c0c0
 802259c:	0802c8c8 	.word	0x0802c8c8
 80225a0:	0802c0e8 	.word	0x0802c0e8
 80225a4:	0802c1d8 	.word	0x0802c1d8
 80225a8:	0802cef8 	.word	0x0802cef8
 80225ac:	0802c164 	.word	0x0802c164

080225b0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>:
 80225b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225b4:	4691      	mov	r9, r2
 80225b6:	8812      	ldrh	r2, [r2, #0]
 80225b8:	b093      	sub	sp, #76	; 0x4c
 80225ba:	2a01      	cmp	r2, #1
 80225bc:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 80225c0:	f040 8129 	bne.w	8022816 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x266>
 80225c4:	b914      	cbnz	r4, 80225cc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c>
 80225c6:	b013      	add	sp, #76	; 0x4c
 80225c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225cc:	461d      	mov	r5, r3
 80225ce:	468a      	mov	sl, r1
 80225d0:	6818      	ldr	r0, [r3, #0]
 80225d2:	6859      	ldr	r1, [r3, #4]
 80225d4:	ab0e      	add	r3, sp, #56	; 0x38
 80225d6:	c303      	stmia	r3!, {r0, r1}
 80225d8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80225da:	6818      	ldr	r0, [r3, #0]
 80225dc:	6859      	ldr	r1, [r3, #4]
 80225de:	ab10      	add	r3, sp, #64	; 0x40
 80225e0:	c303      	stmia	r3!, {r0, r1}
 80225e2:	a80e      	add	r0, sp, #56	; 0x38
 80225e4:	f7f6 f96e 	bl	80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80225e8:	4629      	mov	r1, r5
 80225ea:	a810      	add	r0, sp, #64	; 0x40
 80225ec:	f7f6 f992 	bl	8018914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80225f0:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
 80225f4:	f9bd 6042 	ldrsh.w	r6, [sp, #66]	; 0x42
 80225f8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80225fc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8022600:	488b      	ldr	r0, [pc, #556]	; (8022830 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 8022602:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8022606:	442a      	add	r2, r5
 8022608:	4433      	add	r3, r6
 802260a:	6800      	ldr	r0, [r0, #0]
 802260c:	fb11 5106 	smlabb	r1, r1, r6, r5
 8022610:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8022614:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8022618:	6802      	ldr	r2, [r0, #0]
 802261a:	4e86      	ldr	r6, [pc, #536]	; (8022834 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x284>)
 802261c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8022620:	448a      	add	sl, r1
 8022622:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8022626:	42b3      	cmp	r3, r6
 8022628:	910b      	str	r1, [sp, #44]	; 0x2c
 802262a:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 802262e:	f040 80c8 	bne.w	80227c2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x212>
 8022632:	6841      	ldr	r1, [r0, #4]
 8022634:	4e80      	ldr	r6, [pc, #512]	; (8022838 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x288>)
 8022636:	680b      	ldr	r3, [r1, #0]
 8022638:	699b      	ldr	r3, [r3, #24]
 802263a:	42b3      	cmp	r3, r6
 802263c:	f040 80e4 	bne.w	8022808 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x258>
 8022640:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8022642:	4798      	blx	r3
 8022644:	4b7d      	ldr	r3, [pc, #500]	; (802283c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 8022646:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 802264a:	881b      	ldrh	r3, [r3, #0]
 802264c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8022650:	2cff      	cmp	r4, #255	; 0xff
 8022652:	fb03 1202 	mla	r2, r3, r2, r1
 8022656:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802265a:	d06f      	beq.n	802273c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 802265c:	43e2      	mvns	r2, r4
 802265e:	fb05 f503 	mul.w	r5, r5, r3
 8022662:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 8022666:	4288      	cmp	r0, r1
 8022668:	910c      	str	r1, [sp, #48]	; 0x30
 802266a:	b2d2      	uxtb	r2, r2
 802266c:	d25e      	bcs.n	802272c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 802266e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022670:	fa1f f884 	uxth.w	r8, r4
 8022674:	0049      	lsls	r1, r1, #1
 8022676:	b292      	uxth	r2, r2
 8022678:	910d      	str	r1, [sp, #52]	; 0x34
 802267a:	990d      	ldr	r1, [sp, #52]	; 0x34
 802267c:	eb00 0b01 	add.w	fp, r0, r1
 8022680:	4583      	cmp	fp, r0
 8022682:	d948      	bls.n	8022716 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x166>
 8022684:	4684      	mov	ip, r0
 8022686:	f10a 3eff 	add.w	lr, sl, #4294967295
 802268a:	2103      	movs	r1, #3
 802268c:	2404      	movs	r4, #4
 802268e:	f81e 6f01 	ldrb.w	r6, [lr, #1]!
 8022692:	f8bc 3000 	ldrh.w	r3, [ip]
 8022696:	fb11 4606 	smlabb	r6, r1, r6, r4
 802269a:	eb09 0106 	add.w	r1, r9, r6
 802269e:	788d      	ldrb	r5, [r1, #2]
 80226a0:	784f      	ldrb	r7, [r1, #1]
 80226a2:	00dc      	lsls	r4, r3, #3
 80226a4:	b2e4      	uxtb	r4, r4
 80226a6:	fb14 f402 	smulbb	r4, r4, r2
 80226aa:	fb15 f508 	smulbb	r5, r5, r8
 80226ae:	fb17 f708 	smulbb	r7, r7, r8
 80226b2:	f819 6006 	ldrb.w	r6, [r9, r6]
 80226b6:	1219      	asrs	r1, r3, #8
 80226b8:	10db      	asrs	r3, r3, #3
 80226ba:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80226be:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80226c2:	fb06 4608 	mla	r6, r6, r8, r4
 80226c6:	fb01 5102 	mla	r1, r1, r2, r5
 80226ca:	fb03 7302 	mla	r3, r3, r2, r7
 80226ce:	b2b6      	uxth	r6, r6
 80226d0:	b29b      	uxth	r3, r3
 80226d2:	b28d      	uxth	r5, r1
 80226d4:	1c5c      	adds	r4, r3, #1
 80226d6:	1c69      	adds	r1, r5, #1
 80226d8:	1c77      	adds	r7, r6, #1
 80226da:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80226de:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 80226e2:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80226e6:	f401 4378 	and.w	r3, r1, #63488	; 0xf800
 80226ea:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80226ee:	0961      	lsrs	r1, r4, #5
 80226f0:	4333      	orrs	r3, r6
 80226f2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80226f6:	430b      	orrs	r3, r1
 80226f8:	f82c 3b02 	strh.w	r3, [ip], #2
 80226fc:	45e3      	cmp	fp, ip
 80226fe:	d8c4      	bhi.n	802268a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xda>
 8022700:	43c3      	mvns	r3, r0
 8022702:	449b      	add	fp, r3
 8022704:	4b4d      	ldr	r3, [pc, #308]	; (802283c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 8022706:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 802270a:	f10b 0b01 	add.w	fp, fp, #1
 802270e:	881b      	ldrh	r3, [r3, #0]
 8022710:	eb00 004b 	add.w	r0, r0, fp, lsl #1
 8022714:	44da      	add	sl, fp
 8022716:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022718:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 802271c:	1b5c      	subs	r4, r3, r5
 802271e:	1b49      	subs	r1, r1, r5
 8022720:	448a      	add	sl, r1
 8022722:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022724:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8022728:	4281      	cmp	r1, r0
 802272a:	d8a6      	bhi.n	802267a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xca>
 802272c:	4b40      	ldr	r3, [pc, #256]	; (8022830 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 802272e:	6818      	ldr	r0, [r3, #0]
 8022730:	6803      	ldr	r3, [r0, #0]
 8022732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022734:	4798      	blx	r3
 8022736:	b013      	add	sp, #76	; 0x4c
 8022738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802273c:	fb05 f503 	mul.w	r5, r5, r3
 8022740:	eb00 0e45 	add.w	lr, r0, r5, lsl #1
 8022744:	4570      	cmp	r0, lr
 8022746:	d2f1      	bcs.n	802272c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 8022748:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802274a:	f04f 0c03 	mov.w	ip, #3
 802274e:	2704      	movs	r7, #4
 8022750:	4693      	mov	fp, r2
 8022752:	0051      	lsls	r1, r2, #1
 8022754:	4e3a      	ldr	r6, [pc, #232]	; (8022840 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x290>)
 8022756:	910b      	str	r1, [sp, #44]	; 0x2c
 8022758:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802275a:	eb00 0802 	add.w	r8, r0, r2
 802275e:	4580      	cmp	r8, r0
 8022760:	d923      	bls.n	80227aa <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1fa>
 8022762:	4604      	mov	r4, r0
 8022764:	f10a 35ff 	add.w	r5, sl, #4294967295
 8022768:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 802276c:	fb1c 7202 	smlabb	r2, ip, r2, r7
 8022770:	eb09 0302 	add.w	r3, r9, r2
 8022774:	7859      	ldrb	r1, [r3, #1]
 8022776:	789b      	ldrb	r3, [r3, #2]
 8022778:	00c9      	lsls	r1, r1, #3
 802277a:	f819 2002 	ldrb.w	r2, [r9, r2]
 802277e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022782:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 8022786:	430b      	orrs	r3, r1
 8022788:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 802278c:	f824 3b02 	strh.w	r3, [r4], #2
 8022790:	45a0      	cmp	r8, r4
 8022792:	d8e9      	bhi.n	8022768 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 8022794:	43c3      	mvns	r3, r0
 8022796:	4498      	add	r8, r3
 8022798:	4b28      	ldr	r3, [pc, #160]	; (802283c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 802279a:	ea4f 0858 	mov.w	r8, r8, lsr #1
 802279e:	f108 0801 	add.w	r8, r8, #1
 80227a2:	881b      	ldrh	r3, [r3, #0]
 80227a4:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 80227a8:	44c2      	add	sl, r8
 80227aa:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80227ae:	eba3 010b 	sub.w	r1, r3, fp
 80227b2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80227b6:	eba2 020b 	sub.w	r2, r2, fp
 80227ba:	4586      	cmp	lr, r0
 80227bc:	4492      	add	sl, r2
 80227be:	d8cb      	bhi.n	8022758 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 80227c0:	e7b4      	b.n	802272c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 80227c2:	4798      	blx	r3
 80227c4:	2801      	cmp	r0, #1
 80227c6:	d122      	bne.n	802280e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x25e>
 80227c8:	4b1e      	ldr	r3, [pc, #120]	; (8022844 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x294>)
 80227ca:	6818      	ldr	r0, [r3, #0]
 80227cc:	b350      	cbz	r0, 8022824 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x274>
 80227ce:	2600      	movs	r6, #0
 80227d0:	270b      	movs	r7, #11
 80227d2:	4b1a      	ldr	r3, [pc, #104]	; (802283c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 80227d4:	b2aa      	uxth	r2, r5
 80227d6:	881d      	ldrh	r5, [r3, #0]
 80227d8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80227dc:	9404      	str	r4, [sp, #16]
 80227de:	9506      	str	r5, [sp, #24]
 80227e0:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 80227e4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80227e8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80227ec:	4651      	mov	r1, sl
 80227ee:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80227f2:	464a      	mov	r2, r9
 80227f4:	9608      	str	r6, [sp, #32]
 80227f6:	9605      	str	r6, [sp, #20]
 80227f8:	9707      	str	r7, [sp, #28]
 80227fa:	9503      	str	r5, [sp, #12]
 80227fc:	9400      	str	r4, [sp, #0]
 80227fe:	f7fb fdef 	bl	801e3e0 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8022802:	b013      	add	sp, #76	; 0x4c
 8022804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022808:	4608      	mov	r0, r1
 802280a:	4798      	blx	r3
 802280c:	e7da      	b.n	80227c4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x214>
 802280e:	4b08      	ldr	r3, [pc, #32]	; (8022830 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 8022810:	6818      	ldr	r0, [r3, #0]
 8022812:	6802      	ldr	r2, [r0, #0]
 8022814:	e714      	b.n	8022640 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x90>
 8022816:	4b0c      	ldr	r3, [pc, #48]	; (8022848 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x298>)
 8022818:	4a0c      	ldr	r2, [pc, #48]	; (802284c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x29c>)
 802281a:	f240 411b 	movw	r1, #1051	; 0x41b
 802281e:	480c      	ldr	r0, [pc, #48]	; (8022850 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a0>)
 8022820:	f006 fd18 	bl	8029254 <__assert_func>
 8022824:	4b0b      	ldr	r3, [pc, #44]	; (8022854 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a4>)
 8022826:	4a0c      	ldr	r2, [pc, #48]	; (8022858 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a8>)
 8022828:	217c      	movs	r1, #124	; 0x7c
 802282a:	480c      	ldr	r0, [pc, #48]	; (802285c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2ac>)
 802282c:	f006 fd12 	bl	8029254 <__assert_func>
 8022830:	20197a40 	.word	0x20197a40
 8022834:	08002599 	.word	0x08002599
 8022838:	08017909 	.word	0x08017909
 802283c:	20197a3a 	.word	0x20197a3a
 8022840:	fffff800 	.word	0xfffff800
 8022844:	20197c70 	.word	0x20197c70
 8022848:	0802c188 	.word	0x0802c188
 802284c:	0802cd60 	.word	0x0802cd60
 8022850:	0802c164 	.word	0x0802c164
 8022854:	0802c0c0 	.word	0x0802c0c0
 8022858:	0802c8c8 	.word	0x0802c8c8
 802285c:	0802c0e8 	.word	0x0802c0e8

08022860 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>:
 8022860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022864:	4690      	mov	r8, r2
 8022866:	8812      	ldrh	r2, [r2, #0]
 8022868:	b093      	sub	sp, #76	; 0x4c
 802286a:	461c      	mov	r4, r3
 802286c:	f89d a074 	ldrb.w	sl, [sp, #116]	; 0x74
 8022870:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022872:	2a00      	cmp	r2, #0
 8022874:	f040 80fb 	bne.w	8022a6e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 8022878:	4689      	mov	r9, r1
 802287a:	6820      	ldr	r0, [r4, #0]
 802287c:	6861      	ldr	r1, [r4, #4]
 802287e:	aa0e      	add	r2, sp, #56	; 0x38
 8022880:	c203      	stmia	r2!, {r0, r1}
 8022882:	6818      	ldr	r0, [r3, #0]
 8022884:	6859      	ldr	r1, [r3, #4]
 8022886:	aa10      	add	r2, sp, #64	; 0x40
 8022888:	c203      	stmia	r2!, {r0, r1}
 802288a:	a80e      	add	r0, sp, #56	; 0x38
 802288c:	f7f6 f81a 	bl	80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022890:	4621      	mov	r1, r4
 8022892:	a810      	add	r0, sp, #64	; 0x40
 8022894:	f7f6 f83e 	bl	8018914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022898:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 802289c:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
 80228a0:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80228a4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80228a8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80228ac:	4873      	ldr	r0, [pc, #460]	; (8022a7c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 80228ae:	fb11 4105 	smlabb	r1, r1, r5, r4
 80228b2:	4422      	add	r2, r4
 80228b4:	442b      	add	r3, r5
 80228b6:	6800      	ldr	r0, [r0, #0]
 80228b8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80228bc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80228c0:	6802      	ldr	r2, [r0, #0]
 80228c2:	4489      	add	r9, r1
 80228c4:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80228c8:	4c6d      	ldr	r4, [pc, #436]	; (8022a80 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x220>)
 80228ca:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 80228ce:	910a      	str	r1, [sp, #40]	; 0x28
 80228d0:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 80228d4:	42a3      	cmp	r3, r4
 80228d6:	910c      	str	r1, [sp, #48]	; 0x30
 80228d8:	f040 8096 	bne.w	8022a08 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 80228dc:	6841      	ldr	r1, [r0, #4]
 80228de:	4c69      	ldr	r4, [pc, #420]	; (8022a84 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x224>)
 80228e0:	680b      	ldr	r3, [r1, #0]
 80228e2:	699b      	ldr	r3, [r3, #24]
 80228e4:	42a3      	cmp	r3, r4
 80228e6:	f040 80b4 	bne.w	8022a52 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1f2>
 80228ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80228ec:	4798      	blx	r3
 80228ee:	4b66      	ldr	r3, [pc, #408]	; (8022a88 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 80228f0:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80228f4:	881b      	ldrh	r3, [r3, #0]
 80228f6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80228fa:	fb01 2303 	mla	r3, r1, r3, r2
 80228fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022902:	4418      	add	r0, r3
 8022904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022906:	2b00      	cmp	r3, #0
 8022908:	dd76      	ble.n	80229f8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x198>
 802290a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802290c:	2b00      	cmp	r3, #0
 802290e:	dd73      	ble.n	80229f8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x198>
 8022910:	2200      	movs	r2, #0
 8022912:	2104      	movs	r1, #4
 8022914:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022918:	920b      	str	r2, [sp, #44]	; 0x2c
 802291a:	930d      	str	r3, [sp, #52]	; 0x34
 802291c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802291e:	464e      	mov	r6, r9
 8022920:	1cc5      	adds	r5, r0, #3
 8022922:	eb09 0c03 	add.w	ip, r9, r3
 8022926:	e039      	b.n	802299c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 8022928:	fb0a f303 	mul.w	r3, sl, r3
 802292c:	1c5a      	adds	r2, r3, #1
 802292e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022932:	121b      	asrs	r3, r3, #8
 8022934:	43df      	mvns	r7, r3
 8022936:	b29b      	uxth	r3, r3
 8022938:	fb1e f203 	smulbb	r2, lr, r3
 802293c:	f815 ec03 	ldrb.w	lr, [r5, #-3]
 8022940:	b2ff      	uxtb	r7, r7
 8022942:	fb0e 2e07 	mla	lr, lr, r7, r2
 8022946:	fa1f fe8e 	uxth.w	lr, lr
 802294a:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 802294e:	f10e 0b01 	add.w	fp, lr, #1
 8022952:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8022956:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802295a:	fb12 fb07 	smulbb	fp, r2, r7
 802295e:	f805 ec03 	strb.w	lr, [r5, #-3]
 8022962:	7862      	ldrb	r2, [r4, #1]
 8022964:	f815 ec01 	ldrb.w	lr, [r5, #-1]
 8022968:	fb02 b203 	mla	r2, r2, r3, fp
 802296c:	b292      	uxth	r2, r2
 802296e:	f102 0b01 	add.w	fp, r2, #1
 8022972:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8022976:	1212      	asrs	r2, r2, #8
 8022978:	fb1e f707 	smulbb	r7, lr, r7
 802297c:	f805 2c02 	strb.w	r2, [r5, #-2]
 8022980:	78a2      	ldrb	r2, [r4, #2]
 8022982:	fb02 7303 	mla	r3, r2, r3, r7
 8022986:	b29b      	uxth	r3, r3
 8022988:	1c5a      	adds	r2, r3, #1
 802298a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802298e:	121b      	asrs	r3, r3, #8
 8022990:	f805 3c01 	strb.w	r3, [r5, #-1]
 8022994:	45b4      	cmp	ip, r6
 8022996:	f105 0503 	add.w	r5, r5, #3
 802299a:	d01b      	beq.n	80229d4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x174>
 802299c:	f816 2b01 	ldrb.w	r2, [r6], #1
 80229a0:	fb11 1202 	smlabb	r2, r1, r2, r1
 80229a4:	eb08 0402 	add.w	r4, r8, r2
 80229a8:	78e3      	ldrb	r3, [r4, #3]
 80229aa:	2b00      	cmp	r3, #0
 80229ac:	d0f2      	beq.n	8022994 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x134>
 80229ae:	2bff      	cmp	r3, #255	; 0xff
 80229b0:	f818 e002 	ldrb.w	lr, [r8, r2]
 80229b4:	d1b8      	bne.n	8022928 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 80229b6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80229ba:	d1b5      	bne.n	8022928 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 80229bc:	f805 ec03 	strb.w	lr, [r5, #-3]
 80229c0:	7863      	ldrb	r3, [r4, #1]
 80229c2:	45b4      	cmp	ip, r6
 80229c4:	f805 3c02 	strb.w	r3, [r5, #-2]
 80229c8:	78a3      	ldrb	r3, [r4, #2]
 80229ca:	f105 0503 	add.w	r5, r5, #3
 80229ce:	f805 3c04 	strb.w	r3, [r5, #-4]
 80229d2:	d1e3      	bne.n	802299c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 80229d4:	4b2c      	ldr	r3, [pc, #176]	; (8022a88 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 80229d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80229d8:	881b      	ldrh	r3, [r3, #0]
 80229da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80229dc:	1a9b      	subs	r3, r3, r2
 80229de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80229e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80229e4:	442b      	add	r3, r5
 80229e6:	4418      	add	r0, r3
 80229e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80229ea:	3401      	adds	r4, #1
 80229ec:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80229f0:	42a3      	cmp	r3, r4
 80229f2:	940b      	str	r4, [sp, #44]	; 0x2c
 80229f4:	4491      	add	r9, r2
 80229f6:	d191      	bne.n	802291c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 80229f8:	4b20      	ldr	r3, [pc, #128]	; (8022a7c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 80229fa:	6818      	ldr	r0, [r3, #0]
 80229fc:	6803      	ldr	r3, [r0, #0]
 80229fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022a00:	4798      	blx	r3
 8022a02:	b013      	add	sp, #76	; 0x4c
 8022a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a08:	4798      	blx	r3
 8022a0a:	4602      	mov	r2, r0
 8022a0c:	2a01      	cmp	r2, #1
 8022a0e:	d124      	bne.n	8022a5a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1fa>
 8022a10:	4b1e      	ldr	r3, [pc, #120]	; (8022a8c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x22c>)
 8022a12:	6818      	ldr	r0, [r3, #0]
 8022a14:	b328      	cbz	r0, 8022a62 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x202>
 8022a16:	260b      	movs	r6, #11
 8022a18:	4b1b      	ldr	r3, [pc, #108]	; (8022a88 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 8022a1a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8022a1e:	881f      	ldrh	r7, [r3, #0]
 8022a20:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8022a24:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8022a28:	f8bd 4042 	ldrh.w	r4, [sp, #66]	; 0x42
 8022a2c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8022a30:	9208      	str	r2, [sp, #32]
 8022a32:	9205      	str	r2, [sp, #20]
 8022a34:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8022a38:	f8cd a010 	str.w	sl, [sp, #16]
 8022a3c:	4642      	mov	r2, r8
 8022a3e:	4649      	mov	r1, r9
 8022a40:	e9cd 7606 	strd	r7, r6, [sp, #24]
 8022a44:	9503      	str	r5, [sp, #12]
 8022a46:	9400      	str	r4, [sp, #0]
 8022a48:	f7fb fcca 	bl	801e3e0 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8022a4c:	b013      	add	sp, #76	; 0x4c
 8022a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a52:	4608      	mov	r0, r1
 8022a54:	4798      	blx	r3
 8022a56:	4602      	mov	r2, r0
 8022a58:	e7d8      	b.n	8022a0c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ac>
 8022a5a:	4b08      	ldr	r3, [pc, #32]	; (8022a7c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 8022a5c:	6818      	ldr	r0, [r3, #0]
 8022a5e:	6802      	ldr	r2, [r0, #0]
 8022a60:	e743      	b.n	80228ea <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8022a62:	4b0b      	ldr	r3, [pc, #44]	; (8022a90 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x230>)
 8022a64:	4a0b      	ldr	r2, [pc, #44]	; (8022a94 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8022a66:	217c      	movs	r1, #124	; 0x7c
 8022a68:	480b      	ldr	r0, [pc, #44]	; (8022a98 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 8022a6a:	f006 fbf3 	bl	8029254 <__assert_func>
 8022a6e:	4b0b      	ldr	r3, [pc, #44]	; (8022a9c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8022a70:	4a0b      	ldr	r2, [pc, #44]	; (8022aa0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022a72:	f240 417d 	movw	r1, #1149	; 0x47d
 8022a76:	480b      	ldr	r0, [pc, #44]	; (8022aa4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8022a78:	f006 fbec 	bl	8029254 <__assert_func>
 8022a7c:	20197a40 	.word	0x20197a40
 8022a80:	08002599 	.word	0x08002599
 8022a84:	08017909 	.word	0x08017909
 8022a88:	20197a3a 	.word	0x20197a3a
 8022a8c:	20197c70 	.word	0x20197c70
 8022a90:	0802c0c0 	.word	0x0802c0c0
 8022a94:	0802c8c8 	.word	0x0802c8c8
 8022a98:	0802c0e8 	.word	0x0802c0e8
 8022a9c:	0802c1d8 	.word	0x0802c1d8
 8022aa0:	0802cf84 	.word	0x0802cf84
 8022aa4:	0802c164 	.word	0x0802c164

08022aa8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>:
 8022aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022aac:	4617      	mov	r7, r2
 8022aae:	b095      	sub	sp, #84	; 0x54
 8022ab0:	8812      	ldrh	r2, [r2, #0]
 8022ab2:	4688      	mov	r8, r1
 8022ab4:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 8022ab8:	2a01      	cmp	r2, #1
 8022aba:	461c      	mov	r4, r3
 8022abc:	910d      	str	r1, [sp, #52]	; 0x34
 8022abe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022ac0:	f040 8105 	bne.w	8022cce <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x226>
 8022ac4:	6820      	ldr	r0, [r4, #0]
 8022ac6:	6861      	ldr	r1, [r4, #4]
 8022ac8:	aa10      	add	r2, sp, #64	; 0x40
 8022aca:	c203      	stmia	r2!, {r0, r1}
 8022acc:	6818      	ldr	r0, [r3, #0]
 8022ace:	6859      	ldr	r1, [r3, #4]
 8022ad0:	aa12      	add	r2, sp, #72	; 0x48
 8022ad2:	c203      	stmia	r2!, {r0, r1}
 8022ad4:	a810      	add	r0, sp, #64	; 0x40
 8022ad6:	f7f5 fef5 	bl	80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022ada:	4621      	mov	r1, r4
 8022adc:	a812      	add	r0, sp, #72	; 0x48
 8022ade:	f7f5 ff19 	bl	8018914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022ae2:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 8022ae6:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 8022aea:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8022aee:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8022af2:	487a      	ldr	r0, [pc, #488]	; (8022cdc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8022af4:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8022af8:	4422      	add	r2, r4
 8022afa:	442b      	add	r3, r5
 8022afc:	6800      	ldr	r0, [r0, #0]
 8022afe:	fb11 4105 	smlabb	r1, r1, r5, r4
 8022b02:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8022b06:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8022b0a:	6802      	ldr	r2, [r0, #0]
 8022b0c:	4c74      	ldr	r4, [pc, #464]	; (8022ce0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 8022b0e:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8022b12:	4488      	add	r8, r1
 8022b14:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8022b18:	42a3      	cmp	r3, r4
 8022b1a:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8022b1e:	910c      	str	r1, [sp, #48]	; 0x30
 8022b20:	f040 809f 	bne.w	8022c62 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 8022b24:	6841      	ldr	r1, [r0, #4]
 8022b26:	4c6f      	ldr	r4, [pc, #444]	; (8022ce4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8022b28:	680b      	ldr	r3, [r1, #0]
 8022b2a:	699b      	ldr	r3, [r3, #24]
 8022b2c:	42a3      	cmp	r3, r4
 8022b2e:	f040 80c0 	bne.w	8022cb2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20a>
 8022b32:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8022b34:	4798      	blx	r3
 8022b36:	4a6c      	ldr	r2, [pc, #432]	; (8022ce8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022b38:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 8022b3c:	8814      	ldrh	r4, [r2, #0]
 8022b3e:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8022b42:	fb04 2303 	mla	r3, r4, r3, r2
 8022b46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022b4a:	4418      	add	r0, r3
 8022b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022b4e:	2b00      	cmp	r3, #0
 8022b50:	dd67      	ble.n	8022c22 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x17a>
 8022b52:	2300      	movs	r3, #0
 8022b54:	f04f 0903 	mov.w	r9, #3
 8022b58:	2104      	movs	r1, #4
 8022b5a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022b5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8022b5e:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 8022b62:	930e      	str	r3, [sp, #56]	; 0x38
 8022b64:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
 8022b68:	444b      	add	r3, r9
 8022b6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8022b6c:	b292      	uxth	r2, r2
 8022b6e:	fa1f fc85 	uxth.w	ip, r5
 8022b72:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8022b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b78:	2b00      	cmp	r3, #0
 8022b7a:	dd43      	ble.n	8022c04 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x15c>
 8022b7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022b7e:	2bff      	cmp	r3, #255	; 0xff
 8022b80:	d057      	beq.n	8022c32 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x18a>
 8022b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022b84:	1cc5      	adds	r5, r0, #3
 8022b86:	f108 3eff 	add.w	lr, r8, #4294967295
 8022b8a:	eb00 0a03 	add.w	sl, r0, r3
 8022b8e:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8022b92:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 8022b96:	fb19 1303 	smlabb	r3, r9, r3, r1
 8022b9a:	fb16 f402 	smulbb	r4, r6, r2
 8022b9e:	5cfe      	ldrb	r6, [r7, r3]
 8022ba0:	443b      	add	r3, r7
 8022ba2:	fb06 460c 	mla	r6, r6, ip, r4
 8022ba6:	b2b6      	uxth	r6, r6
 8022ba8:	f815 4c02 	ldrb.w	r4, [r5, #-2]
 8022bac:	f106 0b01 	add.w	fp, r6, #1
 8022bb0:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 8022bb4:	1236      	asrs	r6, r6, #8
 8022bb6:	fb14 fb02 	smulbb	fp, r4, r2
 8022bba:	f805 6c03 	strb.w	r6, [r5, #-3]
 8022bbe:	785c      	ldrb	r4, [r3, #1]
 8022bc0:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8022bc4:	fb04 b40c 	mla	r4, r4, ip, fp
 8022bc8:	b2a4      	uxth	r4, r4
 8022bca:	f104 0b01 	add.w	fp, r4, #1
 8022bce:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8022bd2:	1224      	asrs	r4, r4, #8
 8022bd4:	fb16 f602 	smulbb	r6, r6, r2
 8022bd8:	f805 4c02 	strb.w	r4, [r5, #-2]
 8022bdc:	789b      	ldrb	r3, [r3, #2]
 8022bde:	3503      	adds	r5, #3
 8022be0:	fb03 630c 	mla	r3, r3, ip, r6
 8022be4:	b29b      	uxth	r3, r3
 8022be6:	1c5c      	adds	r4, r3, #1
 8022be8:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8022bec:	121b      	asrs	r3, r3, #8
 8022bee:	f805 3c04 	strb.w	r3, [r5, #-4]
 8022bf2:	45aa      	cmp	sl, r5
 8022bf4:	d1cb      	bne.n	8022b8e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xe6>
 8022bf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022bf8:	4418      	add	r0, r3
 8022bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022bfc:	4498      	add	r8, r3
 8022bfe:	4b3a      	ldr	r3, [pc, #232]	; (8022ce8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022c00:	881c      	ldrh	r4, [r3, #0]
 8022c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c04:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 8022c08:	eba4 0e03 	sub.w	lr, r4, r3
 8022c0c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022c0e:	1aed      	subs	r5, r5, r3
 8022c10:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 8022c14:	4418      	add	r0, r3
 8022c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c18:	3601      	adds	r6, #1
 8022c1a:	42b3      	cmp	r3, r6
 8022c1c:	960b      	str	r6, [sp, #44]	; 0x2c
 8022c1e:	44a8      	add	r8, r5
 8022c20:	d1a9      	bne.n	8022b76 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8022c22:	4b2e      	ldr	r3, [pc, #184]	; (8022cdc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8022c24:	6818      	ldr	r0, [r3, #0]
 8022c26:	6803      	ldr	r3, [r0, #0]
 8022c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022c2a:	4798      	blx	r3
 8022c2c:	b015      	add	sp, #84	; 0x54
 8022c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022c34:	1cc4      	adds	r4, r0, #3
 8022c36:	f108 35ff 	add.w	r5, r8, #4294967295
 8022c3a:	eb00 0e03 	add.w	lr, r0, r3
 8022c3e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8022c42:	3403      	adds	r4, #3
 8022c44:	fb19 1303 	smlabb	r3, r9, r3, r1
 8022c48:	5cfe      	ldrb	r6, [r7, r3]
 8022c4a:	443b      	add	r3, r7
 8022c4c:	f804 6c06 	strb.w	r6, [r4, #-6]
 8022c50:	785e      	ldrb	r6, [r3, #1]
 8022c52:	f804 6c05 	strb.w	r6, [r4, #-5]
 8022c56:	789b      	ldrb	r3, [r3, #2]
 8022c58:	f804 3c04 	strb.w	r3, [r4, #-4]
 8022c5c:	45a6      	cmp	lr, r4
 8022c5e:	d1ee      	bne.n	8022c3e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x196>
 8022c60:	e7c9      	b.n	8022bf6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x14e>
 8022c62:	4798      	blx	r3
 8022c64:	4603      	mov	r3, r0
 8022c66:	2b01      	cmp	r3, #1
 8022c68:	d127      	bne.n	8022cba <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x212>
 8022c6a:	4a20      	ldr	r2, [pc, #128]	; (8022cec <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8022c6c:	6810      	ldr	r0, [r2, #0]
 8022c6e:	b340      	cbz	r0, 8022cc2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8022c70:	f04f 0c0b 	mov.w	ip, #11
 8022c74:	2600      	movs	r6, #0
 8022c76:	4a1c      	ldr	r2, [pc, #112]	; (8022ce8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022c78:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8022c7c:	8814      	ldrh	r4, [r2, #0]
 8022c7e:	fa1f f28a 	uxth.w	r2, sl
 8022c82:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8022c86:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8022c8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022c8c:	9406      	str	r4, [sp, #24]
 8022c8e:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 8022c92:	9308      	str	r3, [sp, #32]
 8022c94:	9204      	str	r2, [sp, #16]
 8022c96:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8022c9a:	463a      	mov	r2, r7
 8022c9c:	4641      	mov	r1, r8
 8022c9e:	f8cd c01c 	str.w	ip, [sp, #28]
 8022ca2:	9605      	str	r6, [sp, #20]
 8022ca4:	9503      	str	r5, [sp, #12]
 8022ca6:	9400      	str	r4, [sp, #0]
 8022ca8:	f7fb fb9a 	bl	801e3e0 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8022cac:	b015      	add	sp, #84	; 0x54
 8022cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cb2:	4608      	mov	r0, r1
 8022cb4:	4798      	blx	r3
 8022cb6:	4603      	mov	r3, r0
 8022cb8:	e7d5      	b.n	8022c66 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1be>
 8022cba:	4b08      	ldr	r3, [pc, #32]	; (8022cdc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8022cbc:	6818      	ldr	r0, [r3, #0]
 8022cbe:	6802      	ldr	r2, [r0, #0]
 8022cc0:	e737      	b.n	8022b32 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8022cc2:	4b0b      	ldr	r3, [pc, #44]	; (8022cf0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8022cc4:	4a0b      	ldr	r2, [pc, #44]	; (8022cf4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8022cc6:	217c      	movs	r1, #124	; 0x7c
 8022cc8:	480b      	ldr	r0, [pc, #44]	; (8022cf8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8022cca:	f006 fac3 	bl	8029254 <__assert_func>
 8022cce:	4b0b      	ldr	r3, [pc, #44]	; (8022cfc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8022cd0:	4a0b      	ldr	r2, [pc, #44]	; (8022d00 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8022cd2:	f240 41c7 	movw	r1, #1223	; 0x4c7
 8022cd6:	480b      	ldr	r0, [pc, #44]	; (8022d04 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8022cd8:	f006 fabc 	bl	8029254 <__assert_func>
 8022cdc:	20197a40 	.word	0x20197a40
 8022ce0:	08002599 	.word	0x08002599
 8022ce4:	08017909 	.word	0x08017909
 8022ce8:	20197a3a 	.word	0x20197a3a
 8022cec:	20197c70 	.word	0x20197c70
 8022cf0:	0802c0c0 	.word	0x0802c0c0
 8022cf4:	0802c8c8 	.word	0x0802c8c8
 8022cf8:	0802c0e8 	.word	0x0802c0e8
 8022cfc:	0802c188 	.word	0x0802c188
 8022d00:	0802cde8 	.word	0x0802cde8
 8022d04:	0802c164 	.word	0x0802c164

08022d08 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8022d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d0c:	4690      	mov	r8, r2
 8022d0e:	8812      	ldrh	r2, [r2, #0]
 8022d10:	b095      	sub	sp, #84	; 0x54
 8022d12:	2a01      	cmp	r2, #1
 8022d14:	461c      	mov	r4, r3
 8022d16:	f89d 907c 	ldrb.w	r9, [sp, #124]	; 0x7c
 8022d1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022d1c:	f040 8107 	bne.w	8022f2e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x226>
 8022d20:	468a      	mov	sl, r1
 8022d22:	6820      	ldr	r0, [r4, #0]
 8022d24:	6861      	ldr	r1, [r4, #4]
 8022d26:	aa10      	add	r2, sp, #64	; 0x40
 8022d28:	c203      	stmia	r2!, {r0, r1}
 8022d2a:	6818      	ldr	r0, [r3, #0]
 8022d2c:	6859      	ldr	r1, [r3, #4]
 8022d2e:	aa12      	add	r2, sp, #72	; 0x48
 8022d30:	c203      	stmia	r2!, {r0, r1}
 8022d32:	a810      	add	r0, sp, #64	; 0x40
 8022d34:	f7f5 fdc6 	bl	80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022d38:	4621      	mov	r1, r4
 8022d3a:	a812      	add	r0, sp, #72	; 0x48
 8022d3c:	f7f5 fdea 	bl	8018914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022d40:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 8022d44:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 8022d48:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8022d4c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8022d50:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8022d54:	4879      	ldr	r0, [pc, #484]	; (8022f3c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8022d56:	fb11 4105 	smlabb	r1, r1, r5, r4
 8022d5a:	4422      	add	r2, r4
 8022d5c:	442b      	add	r3, r5
 8022d5e:	6800      	ldr	r0, [r0, #0]
 8022d60:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8022d64:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8022d68:	6802      	ldr	r2, [r0, #0]
 8022d6a:	448a      	add	sl, r1
 8022d6c:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8022d70:	4c73      	ldr	r4, [pc, #460]	; (8022f40 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 8022d72:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8022d76:	910c      	str	r1, [sp, #48]	; 0x30
 8022d78:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8022d7c:	42a3      	cmp	r3, r4
 8022d7e:	910e      	str	r1, [sp, #56]	; 0x38
 8022d80:	f040 80a2 	bne.w	8022ec8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c0>
 8022d84:	6841      	ldr	r1, [r0, #4]
 8022d86:	4c6f      	ldr	r4, [pc, #444]	; (8022f44 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8022d88:	680b      	ldr	r3, [r1, #0]
 8022d8a:	699b      	ldr	r3, [r3, #24]
 8022d8c:	42a3      	cmp	r3, r4
 8022d8e:	f040 80c1 	bne.w	8022f14 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x20c>
 8022d92:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8022d94:	4798      	blx	r3
 8022d96:	4b6c      	ldr	r3, [pc, #432]	; (8022f48 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022d98:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 8022d9c:	881b      	ldrh	r3, [r3, #0]
 8022d9e:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8022da2:	fb01 2303 	mla	r3, r1, r3, r2
 8022da6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8022daa:	930b      	str	r3, [sp, #44]	; 0x2c
 8022dac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022dae:	2b00      	cmp	r3, #0
 8022db0:	f340 8082 	ble.w	8022eb8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b0>
 8022db4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022db6:	2b00      	cmp	r3, #0
 8022db8:	dd7e      	ble.n	8022eb8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b0>
 8022dba:	2200      	movs	r2, #0
 8022dbc:	f04f 0e03 	mov.w	lr, #3
 8022dc0:	f04f 0c04 	mov.w	ip, #4
 8022dc4:	f1c9 07ff 	rsb	r7, r9, #255	; 0xff
 8022dc8:	009b      	lsls	r3, r3, #2
 8022dca:	920d      	str	r2, [sp, #52]	; 0x34
 8022dcc:	b2bf      	uxth	r7, r7
 8022dce:	930f      	str	r3, [sp, #60]	; 0x3c
 8022dd0:	fa1f f289 	uxth.w	r2, r9
 8022dd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022dd6:	4655      	mov	r5, sl
 8022dd8:	1d18      	adds	r0, r3, #4
 8022dda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022ddc:	eb0a 0603 	add.w	r6, sl, r3
 8022de0:	e03e      	b.n	8022e60 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8022de2:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 8022de6:	f810 4c03 	ldrb.w	r4, [r0, #-3]
 8022dea:	fb13 f307 	smulbb	r3, r3, r7
 8022dee:	fb0b 3302 	mla	r3, fp, r2, r3
 8022df2:	b29b      	uxth	r3, r3
 8022df4:	f103 0b01 	add.w	fp, r3, #1
 8022df8:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8022dfc:	121b      	asrs	r3, r3, #8
 8022dfe:	fb14 f407 	smulbb	r4, r4, r7
 8022e02:	f800 3c04 	strb.w	r3, [r0, #-4]
 8022e06:	784b      	ldrb	r3, [r1, #1]
 8022e08:	f810 bc02 	ldrb.w	fp, [r0, #-2]
 8022e0c:	fb03 4302 	mla	r3, r3, r2, r4
 8022e10:	b29b      	uxth	r3, r3
 8022e12:	1c5c      	adds	r4, r3, #1
 8022e14:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8022e18:	121b      	asrs	r3, r3, #8
 8022e1a:	fb1b fb07 	smulbb	fp, fp, r7
 8022e1e:	f800 3c03 	strb.w	r3, [r0, #-3]
 8022e22:	788c      	ldrb	r4, [r1, #2]
 8022e24:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8022e28:	fb04 b402 	mla	r4, r4, r2, fp
 8022e2c:	b2a4      	uxth	r4, r4
 8022e2e:	f104 0b01 	add.w	fp, r4, #1
 8022e32:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8022e36:	1224      	asrs	r4, r4, #8
 8022e38:	fb13 fb07 	smulbb	fp, r3, r7
 8022e3c:	f800 4c02 	strb.w	r4, [r0, #-2]
 8022e40:	78cb      	ldrb	r3, [r1, #3]
 8022e42:	42ae      	cmp	r6, r5
 8022e44:	fb03 b302 	mla	r3, r3, r2, fp
 8022e48:	b29b      	uxth	r3, r3
 8022e4a:	f103 0101 	add.w	r1, r3, #1
 8022e4e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022e52:	ea4f 2323 	mov.w	r3, r3, asr #8
 8022e56:	f800 3c01 	strb.w	r3, [r0, #-1]
 8022e5a:	f100 0004 	add.w	r0, r0, #4
 8022e5e:	d018      	beq.n	8022e92 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x18a>
 8022e60:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022e64:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022e68:	fb1e c303 	smlabb	r3, lr, r3, ip
 8022e6c:	eb08 0103 	add.w	r1, r8, r3
 8022e70:	f818 b003 	ldrb.w	fp, [r8, r3]
 8022e74:	d1b5      	bne.n	8022de2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xda>
 8022e76:	f800 bc04 	strb.w	fp, [r0, #-4]
 8022e7a:	784b      	ldrb	r3, [r1, #1]
 8022e7c:	42ae      	cmp	r6, r5
 8022e7e:	f800 3c03 	strb.w	r3, [r0, #-3]
 8022e82:	788b      	ldrb	r3, [r1, #2]
 8022e84:	f100 0004 	add.w	r0, r0, #4
 8022e88:	f800 9c05 	strb.w	r9, [r0, #-5]
 8022e8c:	f800 3c06 	strb.w	r3, [r0, #-6]
 8022e90:	d1e6      	bne.n	8022e60 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8022e92:	4b2d      	ldr	r3, [pc, #180]	; (8022f48 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022e94:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022e96:	881b      	ldrh	r3, [r3, #0]
 8022e98:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022e9a:	1a1b      	subs	r3, r3, r0
 8022e9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8022ea0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022ea2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022ea4:	441c      	add	r4, r3
 8022ea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022ea8:	3001      	adds	r0, #1
 8022eaa:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8022eae:	4283      	cmp	r3, r0
 8022eb0:	900d      	str	r0, [sp, #52]	; 0x34
 8022eb2:	940b      	str	r4, [sp, #44]	; 0x2c
 8022eb4:	448a      	add	sl, r1
 8022eb6:	d18d      	bne.n	8022dd4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xcc>
 8022eb8:	4b20      	ldr	r3, [pc, #128]	; (8022f3c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8022eba:	6818      	ldr	r0, [r3, #0]
 8022ebc:	6803      	ldr	r3, [r0, #0]
 8022ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022ec0:	4798      	blx	r3
 8022ec2:	b015      	add	sp, #84	; 0x54
 8022ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ec8:	4798      	blx	r3
 8022eca:	2801      	cmp	r0, #1
 8022ecc:	d125      	bne.n	8022f1a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x212>
 8022ece:	4b1f      	ldr	r3, [pc, #124]	; (8022f4c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8022ed0:	6818      	ldr	r0, [r3, #0]
 8022ed2:	b330      	cbz	r0, 8022f22 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8022ed4:	2502      	movs	r5, #2
 8022ed6:	240b      	movs	r4, #11
 8022ed8:	2600      	movs	r6, #0
 8022eda:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8022ede:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8022ee2:	9302      	str	r3, [sp, #8]
 8022ee4:	4b18      	ldr	r3, [pc, #96]	; (8022f48 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022ee6:	9201      	str	r2, [sp, #4]
 8022ee8:	881b      	ldrh	r3, [r3, #0]
 8022eea:	9508      	str	r5, [sp, #32]
 8022eec:	9407      	str	r4, [sp, #28]
 8022eee:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8022ef2:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 8022ef6:	9306      	str	r3, [sp, #24]
 8022ef8:	f8cd 9010 	str.w	r9, [sp, #16]
 8022efc:	4642      	mov	r2, r8
 8022efe:	4651      	mov	r1, sl
 8022f00:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8022f04:	9605      	str	r6, [sp, #20]
 8022f06:	9503      	str	r5, [sp, #12]
 8022f08:	9400      	str	r4, [sp, #0]
 8022f0a:	f7fb fa69 	bl	801e3e0 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8022f0e:	b015      	add	sp, #84	; 0x54
 8022f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f14:	4608      	mov	r0, r1
 8022f16:	4798      	blx	r3
 8022f18:	e7d7      	b.n	8022eca <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8022f1a:	4b08      	ldr	r3, [pc, #32]	; (8022f3c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8022f1c:	6818      	ldr	r0, [r3, #0]
 8022f1e:	6802      	ldr	r2, [r0, #0]
 8022f20:	e737      	b.n	8022d92 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8022f22:	4b0b      	ldr	r3, [pc, #44]	; (8022f50 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8022f24:	4a0b      	ldr	r2, [pc, #44]	; (8022f54 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8022f26:	217c      	movs	r1, #124	; 0x7c
 8022f28:	480b      	ldr	r0, [pc, #44]	; (8022f58 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8022f2a:	f006 f993 	bl	8029254 <__assert_func>
 8022f2e:	4b0b      	ldr	r3, [pc, #44]	; (8022f5c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8022f30:	4a0b      	ldr	r2, [pc, #44]	; (8022f60 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8022f32:	f240 5109 	movw	r1, #1289	; 0x509
 8022f36:	480b      	ldr	r0, [pc, #44]	; (8022f64 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8022f38:	f006 f98c 	bl	8029254 <__assert_func>
 8022f3c:	20197a40 	.word	0x20197a40
 8022f40:	08002599 	.word	0x08002599
 8022f44:	08017909 	.word	0x08017909
 8022f48:	20197a3a 	.word	0x20197a3a
 8022f4c:	20197c70 	.word	0x20197c70
 8022f50:	0802c0c0 	.word	0x0802c0c0
 8022f54:	0802c8c8 	.word	0x0802c8c8
 8022f58:	0802c0e8 	.word	0x0802c0e8
 8022f5c:	0802c188 	.word	0x0802c188
 8022f60:	0802ce70 	.word	0x0802ce70
 8022f64:	0802c164 	.word	0x0802c164

08022f68 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8022f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f6c:	4617      	mov	r7, r2
 8022f6e:	8812      	ldrh	r2, [r2, #0]
 8022f70:	b095      	sub	sp, #84	; 0x54
 8022f72:	461c      	mov	r4, r3
 8022f74:	f89d 907c 	ldrb.w	r9, [sp, #124]	; 0x7c
 8022f78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022f7a:	2a00      	cmp	r2, #0
 8022f7c:	f040 8112 	bne.w	80231a4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>
 8022f80:	4688      	mov	r8, r1
 8022f82:	6820      	ldr	r0, [r4, #0]
 8022f84:	6861      	ldr	r1, [r4, #4]
 8022f86:	aa10      	add	r2, sp, #64	; 0x40
 8022f88:	c203      	stmia	r2!, {r0, r1}
 8022f8a:	6818      	ldr	r0, [r3, #0]
 8022f8c:	6859      	ldr	r1, [r3, #4]
 8022f8e:	aa12      	add	r2, sp, #72	; 0x48
 8022f90:	c203      	stmia	r2!, {r0, r1}
 8022f92:	a810      	add	r0, sp, #64	; 0x40
 8022f94:	f7f5 fc96 	bl	80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022f98:	4621      	mov	r1, r4
 8022f9a:	a812      	add	r0, sp, #72	; 0x48
 8022f9c:	f7f5 fcba 	bl	8018914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022fa0:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 8022fa4:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	; 0x4a
 8022fa8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8022fac:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8022fb0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8022fb4:	487f      	ldr	r0, [pc, #508]	; (80231b4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8022fb6:	fb11 4105 	smlabb	r1, r1, r5, r4
 8022fba:	4422      	add	r2, r4
 8022fbc:	442b      	add	r3, r5
 8022fbe:	6800      	ldr	r0, [r0, #0]
 8022fc0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8022fc4:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8022fc8:	6802      	ldr	r2, [r0, #0]
 8022fca:	4488      	add	r8, r1
 8022fcc:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8022fd0:	4c79      	ldr	r4, [pc, #484]	; (80231b8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8022fd2:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8022fd6:	910c      	str	r1, [sp, #48]	; 0x30
 8022fd8:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8022fdc:	42a3      	cmp	r3, r4
 8022fde:	910e      	str	r1, [sp, #56]	; 0x38
 8022fe0:	f040 80ab 	bne.w	802313a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d2>
 8022fe4:	6841      	ldr	r1, [r0, #4]
 8022fe6:	4c75      	ldr	r4, [pc, #468]	; (80231bc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8022fe8:	680b      	ldr	r3, [r1, #0]
 8022fea:	699b      	ldr	r3, [r3, #24]
 8022fec:	42a3      	cmp	r3, r4
 8022fee:	f040 80cb 	bne.w	8023188 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x220>
 8022ff2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8022ff4:	4798      	blx	r3
 8022ff6:	4b72      	ldr	r3, [pc, #456]	; (80231c0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8022ff8:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 8022ffc:	881b      	ldrh	r3, [r3, #0]
 8022ffe:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8023002:	fb01 2303 	mla	r3, r1, r3, r2
 8023006:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802300a:	930b      	str	r3, [sp, #44]	; 0x2c
 802300c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802300e:	2b00      	cmp	r3, #0
 8023010:	f340 808b 	ble.w	802312a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8023014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023016:	2b00      	cmp	r3, #0
 8023018:	f340 8087 	ble.w	802312a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 802301c:	2200      	movs	r2, #0
 802301e:	f04f 0c04 	mov.w	ip, #4
 8023022:	009b      	lsls	r3, r3, #2
 8023024:	920d      	str	r2, [sp, #52]	; 0x34
 8023026:	930f      	str	r3, [sp, #60]	; 0x3c
 8023028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802302a:	4645      	mov	r5, r8
 802302c:	1d1c      	adds	r4, r3, #4
 802302e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023030:	eb08 0e03 	add.w	lr, r8, r3
 8023034:	e048      	b.n	80230c8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 8023036:	fb09 f303 	mul.w	r3, r9, r3
 802303a:	1c5a      	adds	r2, r3, #1
 802303c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023040:	121b      	asrs	r3, r3, #8
 8023042:	b2d8      	uxtb	r0, r3
 8023044:	43c1      	mvns	r1, r0
 8023046:	b29b      	uxth	r3, r3
 8023048:	fb1a f203 	smulbb	r2, sl, r3
 802304c:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8023050:	b2c9      	uxtb	r1, r1
 8023052:	fb0a 2a01 	mla	sl, sl, r1, r2
 8023056:	fa1f fa8a 	uxth.w	sl, sl
 802305a:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 802305e:	f10a 0b01 	add.w	fp, sl, #1
 8023062:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8023066:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802306a:	fb12 fb01 	smulbb	fp, r2, r1
 802306e:	f804 ac04 	strb.w	sl, [r4, #-4]
 8023072:	7872      	ldrb	r2, [r6, #1]
 8023074:	f814 ac02 	ldrb.w	sl, [r4, #-2]
 8023078:	fb02 b203 	mla	r2, r2, r3, fp
 802307c:	b292      	uxth	r2, r2
 802307e:	f102 0b01 	add.w	fp, r2, #1
 8023082:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8023086:	fb1a fa01 	smulbb	sl, sl, r1
 802308a:	1212      	asrs	r2, r2, #8
 802308c:	f804 2c03 	strb.w	r2, [r4, #-3]
 8023090:	78b1      	ldrb	r1, [r6, #2]
 8023092:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8023096:	fb01 a103 	mla	r1, r1, r3, sl
 802309a:	fb12 f303 	smulbb	r3, r2, r3
 802309e:	b289      	uxth	r1, r1
 80230a0:	b29b      	uxth	r3, r3
 80230a2:	f101 0a01 	add.w	sl, r1, #1
 80230a6:	1c5e      	adds	r6, r3, #1
 80230a8:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 80230ac:	4402      	add	r2, r0
 80230ae:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80230b2:	1209      	asrs	r1, r1, #8
 80230b4:	eba2 2313 	sub.w	r3, r2, r3, lsr #8
 80230b8:	f804 1c02 	strb.w	r1, [r4, #-2]
 80230bc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80230c0:	45ae      	cmp	lr, r5
 80230c2:	f104 0404 	add.w	r4, r4, #4
 80230c6:	d01c      	beq.n	8023102 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x19a>
 80230c8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80230cc:	fb1c c202 	smlabb	r2, ip, r2, ip
 80230d0:	18be      	adds	r6, r7, r2
 80230d2:	78f3      	ldrb	r3, [r6, #3]
 80230d4:	2b00      	cmp	r3, #0
 80230d6:	d0f3      	beq.n	80230c0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 80230d8:	2bff      	cmp	r3, #255	; 0xff
 80230da:	f817 a002 	ldrb.w	sl, [r7, r2]
 80230de:	d1aa      	bne.n	8023036 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xce>
 80230e0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80230e4:	d1a7      	bne.n	8023036 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xce>
 80230e6:	f804 ac04 	strb.w	sl, [r4, #-4]
 80230ea:	7873      	ldrb	r3, [r6, #1]
 80230ec:	45ae      	cmp	lr, r5
 80230ee:	f804 3c03 	strb.w	r3, [r4, #-3]
 80230f2:	78b3      	ldrb	r3, [r6, #2]
 80230f4:	f104 0404 	add.w	r4, r4, #4
 80230f8:	f804 9c05 	strb.w	r9, [r4, #-5]
 80230fc:	f804 3c06 	strb.w	r3, [r4, #-6]
 8023100:	d1e2      	bne.n	80230c8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 8023102:	4b2f      	ldr	r3, [pc, #188]	; (80231c0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8023104:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023106:	881b      	ldrh	r3, [r3, #0]
 8023108:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802310a:	1a5b      	subs	r3, r3, r1
 802310c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8023110:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023112:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023114:	4418      	add	r0, r3
 8023116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023118:	3101      	adds	r1, #1
 802311a:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 802311e:	428b      	cmp	r3, r1
 8023120:	910d      	str	r1, [sp, #52]	; 0x34
 8023122:	900b      	str	r0, [sp, #44]	; 0x2c
 8023124:	4490      	add	r8, r2
 8023126:	f47f af7f 	bne.w	8023028 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xc0>
 802312a:	4b22      	ldr	r3, [pc, #136]	; (80231b4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 802312c:	6818      	ldr	r0, [r3, #0]
 802312e:	6803      	ldr	r3, [r0, #0]
 8023130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023132:	4798      	blx	r3
 8023134:	b015      	add	sp, #84	; 0x54
 8023136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802313a:	4798      	blx	r3
 802313c:	4603      	mov	r3, r0
 802313e:	2b01      	cmp	r3, #1
 8023140:	d126      	bne.n	8023190 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x228>
 8023142:	4a20      	ldr	r2, [pc, #128]	; (80231c4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8023144:	6810      	ldr	r0, [r2, #0]
 8023146:	b338      	cbz	r0, 8023198 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x230>
 8023148:	f04f 0c02 	mov.w	ip, #2
 802314c:	260b      	movs	r6, #11
 802314e:	4a1c      	ldr	r2, [pc, #112]	; (80231c0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8023150:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8023154:	8814      	ldrh	r4, [r2, #0]
 8023156:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 802315a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 802315e:	9406      	str	r4, [sp, #24]
 8023160:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 8023164:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8023168:	9305      	str	r3, [sp, #20]
 802316a:	f8cd 9010 	str.w	r9, [sp, #16]
 802316e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8023172:	463a      	mov	r2, r7
 8023174:	4641      	mov	r1, r8
 8023176:	e9cd 6c07 	strd	r6, ip, [sp, #28]
 802317a:	9503      	str	r5, [sp, #12]
 802317c:	9400      	str	r4, [sp, #0]
 802317e:	f7fb f92f 	bl	801e3e0 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8023182:	b015      	add	sp, #84	; 0x54
 8023184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023188:	4608      	mov	r0, r1
 802318a:	4798      	blx	r3
 802318c:	4603      	mov	r3, r0
 802318e:	e7d6      	b.n	802313e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d6>
 8023190:	4b08      	ldr	r3, [pc, #32]	; (80231b4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8023192:	6818      	ldr	r0, [r3, #0]
 8023194:	6802      	ldr	r2, [r0, #0]
 8023196:	e72c      	b.n	8022ff2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8023198:	4b0b      	ldr	r3, [pc, #44]	; (80231c8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x260>)
 802319a:	4a0c      	ldr	r2, [pc, #48]	; (80231cc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x264>)
 802319c:	217c      	movs	r1, #124	; 0x7c
 802319e:	480c      	ldr	r0, [pc, #48]	; (80231d0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x268>)
 80231a0:	f006 f858 	bl	8029254 <__assert_func>
 80231a4:	4b0b      	ldr	r3, [pc, #44]	; (80231d4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x26c>)
 80231a6:	4a0c      	ldr	r2, [pc, #48]	; (80231d8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x270>)
 80231a8:	f240 514d 	movw	r1, #1357	; 0x54d
 80231ac:	480b      	ldr	r0, [pc, #44]	; (80231dc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x274>)
 80231ae:	f006 f851 	bl	8029254 <__assert_func>
 80231b2:	bf00      	nop
 80231b4:	20197a40 	.word	0x20197a40
 80231b8:	08002599 	.word	0x08002599
 80231bc:	08017909 	.word	0x08017909
 80231c0:	20197a3a 	.word	0x20197a3a
 80231c4:	20197c70 	.word	0x20197c70
 80231c8:	0802c0c0 	.word	0x0802c0c0
 80231cc:	0802c8c8 	.word	0x0802c8c8
 80231d0:	0802c0e8 	.word	0x0802c0e8
 80231d4:	0802c1d8 	.word	0x0802c1d8
 80231d8:	0802d010 	.word	0x0802d010
 80231dc:	0802c164 	.word	0x0802c164

080231e0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80231e0:	b570      	push	{r4, r5, r6, lr}
 80231e2:	7814      	ldrb	r4, [r2, #0]
 80231e4:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80231e8:	2c01      	cmp	r4, #1
 80231ea:	d00e      	beq.n	802320a <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 80231ec:	d302      	bcc.n	80231f4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x14>
 80231ee:	2c02      	cmp	r4, #2
 80231f0:	d02a      	beq.n	8023248 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x68>
 80231f2:	bd70      	pop	{r4, r5, r6, pc}
 80231f4:	7a04      	ldrb	r4, [r0, #8]
 80231f6:	2c01      	cmp	r4, #1
 80231f8:	d021      	beq.n	802323e <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x5e>
 80231fa:	d311      	bcc.n	8023220 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80231fc:	2c02      	cmp	r4, #2
 80231fe:	d12a      	bne.n	8023256 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x76>
 8023200:	9505      	str	r5, [sp, #20]
 8023202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023206:	f7ff beaf 	b.w	8022f68 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>
 802320a:	7a04      	ldrb	r4, [r0, #8]
 802320c:	2c01      	cmp	r4, #1
 802320e:	d011      	beq.n	8023234 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8023210:	d30b      	bcc.n	802322a <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x4a>
 8023212:	2c02      	cmp	r4, #2
 8023214:	d126      	bne.n	8023264 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 8023216:	9505      	str	r5, [sp, #20]
 8023218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802321c:	f7ff bd74 	b.w	8022d08 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>
 8023220:	9505      	str	r5, [sp, #20]
 8023222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023226:	f7ff b88f 	b.w	8022348 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>
 802322a:	9505      	str	r5, [sp, #20]
 802322c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023230:	f7ff b9be 	b.w	80225b0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>
 8023234:	9505      	str	r5, [sp, #20]
 8023236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802323a:	f7ff bc35 	b.w	8022aa8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>
 802323e:	9505      	str	r5, [sp, #20]
 8023240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023244:	f7ff bb0c 	b.w	8022860 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>
 8023248:	4b0a      	ldr	r3, [pc, #40]	; (8023274 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x94>)
 802324a:	4a0b      	ldr	r2, [pc, #44]	; (8023278 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 802324c:	f240 3199 	movw	r1, #921	; 0x399
 8023250:	480a      	ldr	r0, [pc, #40]	; (802327c <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 8023252:	f005 ffff 	bl	8029254 <__assert_func>
 8023256:	4b0a      	ldr	r3, [pc, #40]	; (8023280 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>)
 8023258:	4a07      	ldr	r2, [pc, #28]	; (8023278 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 802325a:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 802325e:	4807      	ldr	r0, [pc, #28]	; (802327c <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 8023260:	f005 fff8 	bl	8029254 <__assert_func>
 8023264:	4b06      	ldr	r3, [pc, #24]	; (8023280 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>)
 8023266:	4a04      	ldr	r2, [pc, #16]	; (8023278 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x98>)
 8023268:	f240 31b9 	movw	r1, #953	; 0x3b9
 802326c:	4803      	ldr	r0, [pc, #12]	; (802327c <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>)
 802326e:	f005 fff1 	bl	8029254 <__assert_func>
 8023272:	bf00      	nop
 8023274:	0802bf40 	.word	0x0802bf40
 8023278:	0802c908 	.word	0x0802c908
 802327c:	0802c164 	.word	0x0802c164
 8023280:	0802bf7c 	.word	0x0802bf7c

08023284 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8023284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023288:	b089      	sub	sp, #36	; 0x24
 802328a:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
 802328e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023290:	b13c      	cbz	r4, 80232a2 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 8023292:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 8023296:	2e00      	cmp	r6, #0
 8023298:	dd03      	ble.n	80232a2 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 802329a:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 802329e:	2e00      	cmp	r6, #0
 80232a0:	dc02      	bgt.n	80232a8 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x24>
 80232a2:	b009      	add	sp, #36	; 0x24
 80232a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80232a8:	f04f 0800 	mov.w	r8, #0
 80232ac:	4606      	mov	r6, r0
 80232ae:	f362 080f 	bfi	r8, r2, #0, #16
 80232b2:	4608      	mov	r0, r1
 80232b4:	460f      	mov	r7, r1
 80232b6:	f363 481f 	bfi	r8, r3, #16, #16
 80232ba:	f7f8 f8cb 	bl	801b454 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80232be:	4681      	mov	r9, r0
 80232c0:	4638      	mov	r0, r7
 80232c2:	f7f8 f8fb 	bl	801b4bc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80232c6:	2300      	movs	r3, #0
 80232c8:	f369 030f 	bfi	r3, r9, #0, #16
 80232cc:	f360 431f 	bfi	r3, r0, #16, #16
 80232d0:	4638      	mov	r0, r7
 80232d2:	e9cd 8302 	strd	r8, r3, [sp, #8]
 80232d6:	f7f8 f9a9 	bl	801b62c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80232da:	280b      	cmp	r0, #11
 80232dc:	d023      	beq.n	8023326 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 80232de:	aa04      	add	r2, sp, #16
 80232e0:	f10d 0808 	add.w	r8, sp, #8
 80232e4:	e898 0003 	ldmia.w	r8, {r0, r1}
 80232e8:	e882 0003 	stmia.w	r2, {r0, r1}
 80232ec:	6828      	ldr	r0, [r5, #0]
 80232ee:	6869      	ldr	r1, [r5, #4]
 80232f0:	ab06      	add	r3, sp, #24
 80232f2:	c303      	stmia	r3!, {r0, r1}
 80232f4:	4610      	mov	r0, r2
 80232f6:	f7f5 fae5 	bl	80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80232fa:	4641      	mov	r1, r8
 80232fc:	a806      	add	r0, sp, #24
 80232fe:	f7f5 fb09 	bl	8018914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023302:	4638      	mov	r0, r7
 8023304:	f7f8 f90e 	bl	801b524 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023308:	4680      	mov	r8, r0
 802330a:	4638      	mov	r0, r7
 802330c:	f7f8 f98e 	bl	801b62c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023310:	280d      	cmp	r0, #13
 8023312:	d871      	bhi.n	80233f8 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 8023314:	e8df f000 	tbb	[pc, r0]
 8023318:	70176163 	.word	0x70176163
 802331c:	70707070 	.word	0x70707070
 8023320:	70707070 	.word	0x70707070
 8023324:	6570      	.short	0x6570
 8023326:	4638      	mov	r0, r7
 8023328:	f7f8 f8fc 	bl	801b524 <_ZNK8touchgfx6Bitmap7getDataEv>
 802332c:	4680      	mov	r8, r0
 802332e:	4638      	mov	r0, r7
 8023330:	f7f8 f928 	bl	801b584 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8023334:	4641      	mov	r1, r8
 8023336:	4602      	mov	r2, r0
 8023338:	e9cd 5400 	strd	r5, r4, [sp]
 802333c:	4630      	mov	r0, r6
 802333e:	ab02      	add	r3, sp, #8
 8023340:	f7ff ff4e 	bl	80231e0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8023344:	e7ad      	b.n	80232a2 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 8023346:	2710      	movs	r7, #16
 8023348:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 802334c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8023350:	4d2c      	ldr	r5, [pc, #176]	; (8023404 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>)
 8023352:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8023356:	440a      	add	r2, r1
 8023358:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 802335c:	6828      	ldr	r0, [r5, #0]
 802335e:	440b      	add	r3, r1
 8023360:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023364:	f8ad 301a 	strh.w	r3, [sp, #26]
 8023368:	2800      	cmp	r0, #0
 802336a:	d03f      	beq.n	80233ec <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x168>
 802336c:	f7fb f810 	bl	801e390 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8023370:	6833      	ldr	r3, [r6, #0]
 8023372:	4630      	mov	r0, r6
 8023374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023376:	4798      	blx	r3
 8023378:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 802337c:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8023380:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8023384:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8023388:	f7f8 fd0c 	bl	801bda4 <nema_set_clip>
 802338c:	2200      	movs	r2, #0
 802338e:	4623      	mov	r3, r4
 8023390:	2600      	movs	r6, #0
 8023392:	f04f 34ff 	mov.w	r4, #4294967295
 8023396:	4611      	mov	r1, r2
 8023398:	4610      	mov	r0, r2
 802339a:	f7f8 fd37 	bl	801be0c <nema_rgba>
 802339e:	f7fa ff0f 	bl	801e1c0 <nema_set_const_color>
 80233a2:	f04f 33ff 	mov.w	r3, #4294967295
 80233a6:	2201      	movs	r2, #1
 80233a8:	2100      	movs	r1, #0
 80233aa:	4817      	ldr	r0, [pc, #92]	; (8023408 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x184>)
 80233ac:	f7fa fb42 	bl	801da34 <nema_set_blend>
 80233b0:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 80233b4:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 80233b8:	463b      	mov	r3, r7
 80233ba:	4640      	mov	r0, r8
 80233bc:	e9cd 4600 	strd	r4, r6, [sp]
 80233c0:	f7f8 fd2c 	bl	801be1c <nema_bind_src_tex>
 80233c4:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80233c8:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80233cc:	f7f8 fe66 	bl	801c09c <nema_blit>
 80233d0:	6828      	ldr	r0, [r5, #0]
 80233d2:	b158      	cbz	r0, 80233ec <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x168>
 80233d4:	f7fa fffc 	bl	801e3d0 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 80233d8:	e763      	b.n	80232a2 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 80233da:	2739      	movs	r7, #57	; 0x39
 80233dc:	e7b4      	b.n	8023348 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 80233de:	2704      	movs	r7, #4
 80233e0:	e7b2      	b.n	8023348 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 80233e2:	4638      	mov	r0, r7
 80233e4:	f7f8 f8ce 	bl	801b584 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80233e8:	7807      	ldrb	r7, [r0, #0]
 80233ea:	e7ad      	b.n	8023348 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 80233ec:	4b07      	ldr	r3, [pc, #28]	; (802340c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x188>)
 80233ee:	4a08      	ldr	r2, [pc, #32]	; (8023410 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>)
 80233f0:	217c      	movs	r1, #124	; 0x7c
 80233f2:	4808      	ldr	r0, [pc, #32]	; (8023414 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x190>)
 80233f4:	f005 ff2e 	bl	8029254 <__assert_func>
 80233f8:	4b07      	ldr	r3, [pc, #28]	; (8023418 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x194>)
 80233fa:	4a08      	ldr	r2, [pc, #32]	; (802341c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x198>)
 80233fc:	2174      	movs	r1, #116	; 0x74
 80233fe:	4808      	ldr	r0, [pc, #32]	; (8023420 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x19c>)
 8023400:	f005 ff28 	bl	8029254 <__assert_func>
 8023404:	20197c70 	.word	0x20197c70
 8023408:	08000504 	.word	0x08000504
 802340c:	0802c0c0 	.word	0x0802c0c0
 8023410:	0802c8c8 	.word	0x0802c8c8
 8023414:	0802c0e8 	.word	0x0802c0e8
 8023418:	0802bfb8 	.word	0x0802bfb8
 802341c:	0802c9fc 	.word	0x0802c9fc
 8023420:	0802c164 	.word	0x0802c164

08023424 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8023424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023428:	b089      	sub	sp, #36	; 0x24
 802342a:	9f15      	ldr	r7, [sp, #84]	; 0x54
 802342c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 802342e:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
 8023432:	9104      	str	r1, [sp, #16]
 8023434:	8809      	ldrh	r1, [r1, #0]
 8023436:	fb07 6c04 	mla	ip, r7, r4, r6
 802343a:	10c8      	asrs	r0, r1, #3
 802343c:	120d      	asrs	r5, r1, #8
 802343e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023442:	f005 0af8 	and.w	sl, r5, #248	; 0xf8
 8023446:	9002      	str	r0, [sp, #8]
 8023448:	00c9      	lsls	r1, r1, #3
 802344a:	0200      	lsls	r0, r0, #8
 802344c:	b2c9      	uxtb	r1, r1
 802344e:	4690      	mov	r8, r2
 8023450:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8023454:	469e      	mov	lr, r3
 8023456:	eb02 030c 	add.w	r3, r2, ip
 802345a:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 802345e:	4308      	orrs	r0, r1
 8023460:	2f00      	cmp	r7, #0
 8023462:	9103      	str	r1, [sp, #12]
 8023464:	9305      	str	r3, [sp, #20]
 8023466:	9007      	str	r0, [sp, #28]
 8023468:	f107 0501 	add.w	r5, r7, #1
 802346c:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	; 0x4c
 8023470:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8023474:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8023478:	9200      	str	r2, [sp, #0]
 802347a:	db02      	blt.n	8023482 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x5e>
 802347c:	42be      	cmp	r6, r7
 802347e:	f300 80a3 	bgt.w	80235c8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1a4>
 8023482:	fa5f fb80 	uxtb.w	fp, r0
 8023486:	af07      	add	r7, sp, #28
 8023488:	465a      	mov	r2, fp
 802348a:	46b8      	mov	r8, r7
 802348c:	2d00      	cmp	r5, #0
 802348e:	db01      	blt.n	8023494 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x70>
 8023490:	42ae      	cmp	r6, r5
 8023492:	dc79      	bgt.n	8023588 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x164>
 8023494:	f10d 0e1c 	add.w	lr, sp, #28
 8023498:	46f1      	mov	r9, lr
 802349a:	b2c0      	uxtb	r0, r0
 802349c:	9001      	str	r0, [sp, #4]
 802349e:	2b0f      	cmp	r3, #15
 80234a0:	f200 80ce 	bhi.w	8023640 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 80234a4:	290f      	cmp	r1, #15
 80234a6:	f200 80cb 	bhi.w	8023640 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 80234aa:	9c00      	ldr	r4, [sp, #0]
 80234ac:	b29b      	uxth	r3, r3
 80234ae:	43e4      	mvns	r4, r4
 80234b0:	b289      	uxth	r1, r1
 80234b2:	fb03 f501 	mul.w	r5, r3, r1
 80234b6:	011b      	lsls	r3, r3, #4
 80234b8:	1b5e      	subs	r6, r3, r5
 80234ba:	b2b6      	uxth	r6, r6
 80234bc:	f897 c002 	ldrb.w	ip, [r7, #2]
 80234c0:	ebc5 1101 	rsb	r1, r5, r1, lsl #4
 80234c4:	787f      	ldrb	r7, [r7, #1]
 80234c6:	fb06 f202 	mul.w	r2, r6, r2
 80234ca:	b289      	uxth	r1, r1
 80234cc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80234d0:	fb06 fc0c 	mul.w	ip, r6, ip
 80234d4:	1a5b      	subs	r3, r3, r1
 80234d6:	fb06 f607 	mul.w	r6, r6, r7
 80234da:	b29b      	uxth	r3, r3
 80234dc:	f898 7001 	ldrb.w	r7, [r8, #1]
 80234e0:	fb03 220b 	mla	r2, r3, fp, r2
 80234e4:	f898 b002 	ldrb.w	fp, [r8, #2]
 80234e8:	fb03 6607 	mla	r6, r3, r7, r6
 80234ec:	fb03 cc0b 	mla	ip, r3, fp, ip
 80234f0:	f899 8002 	ldrb.w	r8, [r9, #2]
 80234f4:	f899 7001 	ldrb.w	r7, [r9, #1]
 80234f8:	9b01      	ldr	r3, [sp, #4]
 80234fa:	fb01 cc08 	mla	ip, r1, r8, ip
 80234fe:	fb01 2203 	mla	r2, r1, r3, r2
 8023502:	fb01 6607 	mla	r6, r1, r7, r6
 8023506:	f89e 8002 	ldrb.w	r8, [lr, #2]
 802350a:	f89e 7001 	ldrb.w	r7, [lr, #1]
 802350e:	9b03      	ldr	r3, [sp, #12]
 8023510:	9902      	ldr	r1, [sp, #8]
 8023512:	fb05 2200 	mla	r2, r5, r0, r2
 8023516:	b2e4      	uxtb	r4, r4
 8023518:	fb05 cc08 	mla	ip, r5, r8, ip
 802351c:	fb05 6607 	mla	r6, r5, r7, r6
 8023520:	fb13 f004 	smulbb	r0, r3, r4
 8023524:	fb1a f304 	smulbb	r3, sl, r4
 8023528:	fb11 f404 	smulbb	r4, r1, r4
 802352c:	f8bd e000 	ldrh.w	lr, [sp]
 8023530:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023534:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023538:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802353c:	fb02 020e 	mla	r2, r2, lr, r0
 8023540:	fb0c 330e 	mla	r3, ip, lr, r3
 8023544:	fb06 4e0e 	mla	lr, r6, lr, r4
 8023548:	fa1f fc83 	uxth.w	ip, r3
 802354c:	b292      	uxth	r2, r2
 802354e:	fa1f fe8e 	uxth.w	lr, lr
 8023552:	f10c 0301 	add.w	r3, ip, #1
 8023556:	1c50      	adds	r0, r2, #1
 8023558:	f10e 0101 	add.w	r1, lr, #1
 802355c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023560:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8023564:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8023568:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802356c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023570:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023574:	4313      	orrs	r3, r2
 8023576:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802357a:	9a04      	ldr	r2, [sp, #16]
 802357c:	ea43 030e 	orr.w	r3, r3, lr
 8023580:	8013      	strh	r3, [r2, #0]
 8023582:	b009      	add	sp, #36	; 0x24
 8023584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023588:	2900      	cmp	r1, #0
 802358a:	d036      	beq.n	80235fa <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d6>
 802358c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802358e:	2d00      	cmp	r5, #0
 8023590:	db45      	blt.n	802361e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1fa>
 8023592:	42ac      	cmp	r4, r5
 8023594:	dd43      	ble.n	802361e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1fa>
 8023596:	9d05      	ldr	r5, [sp, #20]
 8023598:	f815 9004 	ldrb.w	r9, [r5, r4]
 802359c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80235a0:	44f1      	add	r9, lr
 80235a2:	f899 5000 	ldrb.w	r5, [r9]
 80235a6:	9501      	str	r5, [sp, #4]
 80235a8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80235aa:	3501      	adds	r5, #1
 80235ac:	d433      	bmi.n	8023616 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1f2>
 80235ae:	42ac      	cmp	r4, r5
 80235b0:	dd31      	ble.n	8023616 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1f2>
 80235b2:	2b00      	cmp	r3, #0
 80235b4:	d040      	beq.n	8023638 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x214>
 80235b6:	9805      	ldr	r0, [sp, #20]
 80235b8:	4420      	add	r0, r4
 80235ba:	7840      	ldrb	r0, [r0, #1]
 80235bc:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 80235c0:	f81e 0004 	ldrb.w	r0, [lr, r4]
 80235c4:	44a6      	add	lr, r4
 80235c6:	e76a      	b.n	802349e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x7a>
 80235c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80235ca:	2a00      	cmp	r2, #0
 80235cc:	db01      	blt.n	80235d2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ae>
 80235ce:	4294      	cmp	r4, r2
 80235d0:	dc1b      	bgt.n	802360a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1e6>
 80235d2:	f10d 081c 	add.w	r8, sp, #28
 80235d6:	3201      	adds	r2, #1
 80235d8:	f898 b000 	ldrb.w	fp, [r8]
 80235dc:	d40a      	bmi.n	80235f4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>
 80235de:	4294      	cmp	r4, r2
 80235e0:	dd08      	ble.n	80235f4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>
 80235e2:	b1fb      	cbz	r3, 8023624 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x200>
 80235e4:	9a05      	ldr	r2, [sp, #20]
 80235e6:	7857      	ldrb	r7, [r2, #1]
 80235e8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80235ec:	f81e 2007 	ldrb.w	r2, [lr, r7]
 80235f0:	4477      	add	r7, lr
 80235f2:	e74b      	b.n	802348c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x68>
 80235f4:	b2c2      	uxtb	r2, r0
 80235f6:	af07      	add	r7, sp, #28
 80235f8:	e748      	b.n	802348c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x68>
 80235fa:	b2c0      	uxtb	r0, r0
 80235fc:	2b0f      	cmp	r3, #15
 80235fe:	9001      	str	r0, [sp, #4]
 8023600:	d81e      	bhi.n	8023640 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 8023602:	f10d 0e1c 	add.w	lr, sp, #28
 8023606:	46f1      	mov	r9, lr
 8023608:	e74f      	b.n	80234aa <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x86>
 802360a:	f818 800c 	ldrb.w	r8, [r8, ip]
 802360e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023612:	44f0      	add	r8, lr
 8023614:	e7df      	b.n	80235d6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1b2>
 8023616:	b2c0      	uxtb	r0, r0
 8023618:	f10d 0e1c 	add.w	lr, sp, #28
 802361c:	e73f      	b.n	802349e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x7a>
 802361e:	f10d 091c 	add.w	r9, sp, #28
 8023622:	e7be      	b.n	80235a2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x17e>
 8023624:	2d00      	cmp	r5, #0
 8023626:	b2c2      	uxtb	r2, r0
 8023628:	af07      	add	r7, sp, #28
 802362a:	f6bf af31 	bge.w	8023490 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 802362e:	46be      	mov	lr, r7
 8023630:	46b9      	mov	r9, r7
 8023632:	4610      	mov	r0, r2
 8023634:	9201      	str	r2, [sp, #4]
 8023636:	e735      	b.n	80234a4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8023638:	b2c0      	uxtb	r0, r0
 802363a:	f10d 0e1c 	add.w	lr, sp, #28
 802363e:	e731      	b.n	80234a4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8023640:	4b03      	ldr	r3, [pc, #12]	; (8023650 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x22c>)
 8023642:	4a04      	ldr	r2, [pc, #16]	; (8023654 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x230>)
 8023644:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8023648:	4803      	ldr	r0, [pc, #12]	; (8023658 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x234>)
 802364a:	f005 fe03 	bl	8029254 <__assert_func>
 802364e:	bf00      	nop
 8023650:	0802c4f8 	.word	0x0802c4f8
 8023654:	0802cb70 	.word	0x0802cb70
 8023658:	0802c67c 	.word	0x0802c67c

0802365c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802365c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023660:	ed2d 8b08 	vpush	{d8-d11}
 8023664:	b095      	sub	sp, #84	; 0x54
 8023666:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 802366a:	e9dd 512b 	ldrd	r5, r1, [sp, #172]	; 0xac
 802366e:	e9dd b827 	ldrd	fp, r8, [sp, #156]	; 0x9c
 8023672:	686c      	ldr	r4, [r5, #4]
 8023674:	461a      	mov	r2, r3
 8023676:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023678:	f89d 60bc 	ldrb.w	r6, [sp, #188]	; 0xbc
 802367c:	fb04 1303 	mla	r3, r4, r3, r1
 8023680:	682c      	ldr	r4, [r5, #0]
 8023682:	e9cd 0612 	strd	r0, r6, [sp, #72]	; 0x48
 8023686:	43f0      	mvns	r0, r6
 8023688:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802368c:	eeb0 aa40 	vmov.f32	s20, s0
 8023690:	eef0 9a60 	vmov.f32	s19, s1
 8023694:	eeb0 9a41 	vmov.f32	s18, s2
 8023698:	eef0 8a62 	vmov.f32	s17, s5
 802369c:	eeb0 8a43 	vmov.f32	s16, s6
 80236a0:	eef0 ba44 	vmov.f32	s23, s8
 80236a4:	eeb0 ba64 	vmov.f32	s22, s9
 80236a8:	eef0 aa45 	vmov.f32	s21, s10
 80236ac:	469a      	mov	sl, r3
 80236ae:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80236b0:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 80236b2:	6849      	ldr	r1, [r1, #4]
 80236b4:	682d      	ldr	r5, [r5, #0]
 80236b6:	3104      	adds	r1, #4
 80236b8:	b2c0      	uxtb	r0, r0
 80236ba:	9108      	str	r1, [sp, #32]
 80236bc:	b2b1      	uxth	r1, r6
 80236be:	950b      	str	r5, [sp, #44]	; 0x2c
 80236c0:	900c      	str	r0, [sp, #48]	; 0x30
 80236c2:	910d      	str	r1, [sp, #52]	; 0x34
 80236c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80236c6:	2b00      	cmp	r3, #0
 80236c8:	dc02      	bgt.n	80236d0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80236ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80236cc:	2b00      	cmp	r3, #0
 80236ce:	dd65      	ble.n	802379c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80236d0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80236d2:	2a00      	cmp	r2, #0
 80236d4:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 80236d8:	b225      	sxth	r5, r4
 80236da:	fa0f f78e 	sxth.w	r7, lr
 80236de:	f340 8233 	ble.w	8023b48 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 80236e2:	1e6e      	subs	r6, r5, #1
 80236e4:	f107 3cff 	add.w	ip, r7, #4294967295
 80236e8:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 80236ec:	e9dd e929 	ldrd	lr, r9, [sp, #164]	; 0xa4
 80236f0:	ea5f 432b 	movs.w	r3, fp, asr #16
 80236f4:	ea4f 4128 	mov.w	r1, r8, asr #16
 80236f8:	d405      	bmi.n	8023706 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80236fa:	42b3      	cmp	r3, r6
 80236fc:	da03      	bge.n	8023706 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80236fe:	2900      	cmp	r1, #0
 8023700:	db01      	blt.n	8023706 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023702:	4561      	cmp	r1, ip
 8023704:	db4f      	blt.n	80237a6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8023706:	1c58      	adds	r0, r3, #1
 8023708:	d406      	bmi.n	8023718 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 802370a:	42a8      	cmp	r0, r5
 802370c:	dc04      	bgt.n	8023718 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 802370e:	1c48      	adds	r0, r1, #1
 8023710:	d402      	bmi.n	8023718 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8023712:	42b8      	cmp	r0, r7
 8023714:	f340 817e 	ble.w	8023a14 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8023718:	3a01      	subs	r2, #1
 802371a:	44f3      	add	fp, lr
 802371c:	44c8      	add	r8, r9
 802371e:	f10a 0a02 	add.w	sl, sl, #2
 8023722:	d1e5      	bne.n	80236f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8023724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023726:	2b00      	cmp	r3, #0
 8023728:	dd38      	ble.n	802379c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802372a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802372e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023732:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023736:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802373a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802373e:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8023742:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023746:	ee76 6a68 	vsub.f32	s13, s12, s17
 802374a:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802374e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023752:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023756:	ee16 2a90 	vmov	r2, s13
 802375a:	3b01      	subs	r3, #1
 802375c:	930e      	str	r3, [sp, #56]	; 0x38
 802375e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023760:	fb92 f3f3 	sdiv	r3, r2, r3
 8023764:	ee17 2a10 	vmov	r2, s14
 8023768:	eeb0 7a48 	vmov.f32	s14, s16
 802376c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023770:	ee17 8a10 	vmov	r8, s14
 8023774:	eeb0 7a68 	vmov.f32	s14, s17
 8023778:	9329      	str	r3, [sp, #164]	; 0xa4
 802377a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802377c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023780:	fb92 f3f3 	sdiv	r3, r2, r3
 8023784:	932a      	str	r3, [sp, #168]	; 0xa8
 8023786:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023788:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802378a:	ee17 ba10 	vmov	fp, s14
 802378e:	eeb0 8a67 	vmov.f32	s16, s15
 8023792:	eef0 8a46 	vmov.f32	s17, s12
 8023796:	bf18      	it	ne
 8023798:	461a      	movne	r2, r3
 802379a:	e793      	b.n	80236c4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802379c:	b015      	add	sp, #84	; 0x54
 802379e:	ecbd 8b08 	vpop	{d8-d11}
 80237a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237a6:	46d4      	mov	ip, sl
 80237a8:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80237ac:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80237ae:	1e51      	subs	r1, r2, #1
 80237b0:	fb00 b301 	mla	r3, r0, r1, fp
 80237b4:	141b      	asrs	r3, r3, #16
 80237b6:	910a      	str	r1, [sp, #40]	; 0x28
 80237b8:	f100 80cc 	bmi.w	8023954 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80237bc:	42b3      	cmp	r3, r6
 80237be:	f280 80c9 	bge.w	8023954 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80237c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80237c4:	fb03 8301 	mla	r3, r3, r1, r8
 80237c8:	141b      	asrs	r3, r3, #16
 80237ca:	f100 80c3 	bmi.w	8023954 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80237ce:	3f01      	subs	r7, #1
 80237d0:	42bb      	cmp	r3, r7
 80237d2:	f280 80bf 	bge.w	8023954 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80237d6:	2a00      	cmp	r2, #0
 80237d8:	dda4      	ble.n	8023724 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80237da:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
 80237de:	e9cd ca09 	strd	ip, sl, [sp, #36]	; 0x24
 80237e2:	e08e      	b.n	8023902 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80237e4:	f891 c001 	ldrb.w	ip, [r1, #1]
 80237e8:	194c      	adds	r4, r1, r5
 80237ea:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80237ee:	44bc      	add	ip, r7
 80237f0:	2a00      	cmp	r2, #0
 80237f2:	f000 80a6 	beq.w	8023942 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 80237f6:	5d48      	ldrb	r0, [r1, r5]
 80237f8:	7865      	ldrb	r5, [r4, #1]
 80237fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80237fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023802:	4438      	add	r0, r7
 8023804:	443d      	add	r5, r7
 8023806:	b29b      	uxth	r3, r3
 8023808:	b292      	uxth	r2, r2
 802380a:	fb03 f402 	mul.w	r4, r3, r2
 802380e:	011b      	lsls	r3, r3, #4
 8023810:	1b19      	subs	r1, r3, r4
 8023812:	f89c 9000 	ldrb.w	r9, [ip]
 8023816:	f89c e002 	ldrb.w	lr, [ip, #2]
 802381a:	b289      	uxth	r1, r1
 802381c:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023820:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8023824:	fb01 f909 	mul.w	r9, r1, r9
 8023828:	b292      	uxth	r2, r2
 802382a:	fb01 fe0e 	mul.w	lr, r1, lr
 802382e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8023832:	fb01 f10c 	mul.w	r1, r1, ip
 8023836:	f817 a00a 	ldrb.w	sl, [r7, sl]
 802383a:	1a9b      	subs	r3, r3, r2
 802383c:	f896 c002 	ldrb.w	ip, [r6, #2]
 8023840:	b29b      	uxth	r3, r3
 8023842:	7876      	ldrb	r6, [r6, #1]
 8023844:	fb03 990a 	mla	r9, r3, sl, r9
 8023848:	fb03 ec0c 	mla	ip, r3, ip, lr
 802384c:	fb03 1306 	mla	r3, r3, r6, r1
 8023850:	7801      	ldrb	r1, [r0, #0]
 8023852:	f890 e002 	ldrb.w	lr, [r0, #2]
 8023856:	fb02 9901 	mla	r9, r2, r1, r9
 802385a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802385c:	fb02 ce0e 	mla	lr, r2, lr, ip
 8023860:	7829      	ldrb	r1, [r5, #0]
 8023862:	f8b7 c000 	ldrh.w	ip, [r7]
 8023866:	7840      	ldrb	r0, [r0, #1]
 8023868:	78ae      	ldrb	r6, [r5, #2]
 802386a:	fb02 3200 	mla	r2, r2, r0, r3
 802386e:	fb04 9901 	mla	r9, r4, r1, r9
 8023872:	7868      	ldrb	r0, [r5, #1]
 8023874:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023876:	ea4f 252c 	mov.w	r5, ip, asr #8
 802387a:	fb04 ee06 	mla	lr, r4, r6, lr
 802387e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023882:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8023886:	fb15 f501 	smulbb	r5, r5, r1
 802388a:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802388e:	b2db      	uxtb	r3, r3
 8023890:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8023894:	fb13 f301 	smulbb	r3, r3, r1
 8023898:	fb1c fc01 	smulbb	ip, ip, r1
 802389c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802389e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80238a2:	fb04 2200 	mla	r2, r4, r0, r2
 80238a6:	fb0e 5501 	mla	r5, lr, r1, r5
 80238aa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80238ae:	b2ad      	uxth	r5, r5
 80238b0:	fb02 cc01 	mla	ip, r2, r1, ip
 80238b4:	1c6a      	adds	r2, r5, #1
 80238b6:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 80238ba:	463a      	mov	r2, r7
 80238bc:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80238c0:	fb09 3301 	mla	r3, r9, r1, r3
 80238c4:	fa1f f18c 	uxth.w	r1, ip
 80238c8:	b29b      	uxth	r3, r3
 80238ca:	1c5c      	adds	r4, r3, #1
 80238cc:	1c48      	adds	r0, r1, #1
 80238ce:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80238d2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80238d6:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80238da:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80238de:	0949      	lsrs	r1, r1, #5
 80238e0:	432b      	orrs	r3, r5
 80238e2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80238e6:	430b      	orrs	r3, r1
 80238e8:	f822 3b02 	strh.w	r3, [r2], #2
 80238ec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80238ee:	9209      	str	r2, [sp, #36]	; 0x24
 80238f0:	449b      	add	fp, r3
 80238f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80238f4:	4498      	add	r8, r3
 80238f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80238f8:	429a      	cmp	r2, r3
 80238fa:	d029      	beq.n	8023950 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80238fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80238fe:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8023902:	ea4f 432b 	mov.w	r3, fp, asr #16
 8023906:	ea4f 4128 	mov.w	r1, r8, asr #16
 802390a:	fb05 3101 	mla	r1, r5, r1, r3
 802390e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023910:	9f08      	ldr	r7, [sp, #32]
 8023912:	f812 a001 	ldrb.w	sl, [r2, r1]
 8023916:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802391a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802391e:	4411      	add	r1, r2
 8023920:	eb07 060a 	add.w	r6, r7, sl
 8023924:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8023928:	2b00      	cmp	r3, #0
 802392a:	f47f af5b 	bne.w	80237e4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802392e:	b15a      	cbz	r2, 8023948 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>
 8023930:	5d48      	ldrb	r0, [r1, r5]
 8023932:	9908      	ldr	r1, [sp, #32]
 8023934:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023938:	4635      	mov	r5, r6
 802393a:	4408      	add	r0, r1
 802393c:	46b4      	mov	ip, r6
 802393e:	460f      	mov	r7, r1
 8023940:	e761      	b.n	8023806 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8023942:	4635      	mov	r5, r6
 8023944:	4630      	mov	r0, r6
 8023946:	e75e      	b.n	8023806 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8023948:	4635      	mov	r5, r6
 802394a:	4630      	mov	r0, r6
 802394c:	46b4      	mov	ip, r6
 802394e:	e75a      	b.n	8023806 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8023950:	469a      	mov	sl, r3
 8023952:	e6e7      	b.n	8023724 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8023954:	2a00      	cmp	r2, #0
 8023956:	f77f aee5 	ble.w	8023724 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 802395a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802395c:	ea4f 432b 	mov.w	r3, fp, asr #16
 8023960:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023964:	4675      	mov	r5, lr
 8023966:	46d1      	mov	r9, sl
 8023968:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 802396c:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 8023970:	9609      	str	r6, [sp, #36]	; 0x24
 8023972:	2b00      	cmp	r3, #0
 8023974:	f3cb 3703 	ubfx	r7, fp, #12, #4
 8023978:	f3c8 3203 	ubfx	r2, r8, #12, #4
 802397c:	db27      	blt.n	80239ce <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 802397e:	1e60      	subs	r0, r4, #1
 8023980:	4283      	cmp	r3, r0
 8023982:	da24      	bge.n	80239ce <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8023984:	2900      	cmp	r1, #0
 8023986:	db22      	blt.n	80239ce <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8023988:	1e68      	subs	r0, r5, #1
 802398a:	4281      	cmp	r1, r0
 802398c:	da1f      	bge.n	80239ce <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 802398e:	b220      	sxth	r0, r4
 8023990:	fb01 3300 	mla	r3, r1, r0, r3
 8023994:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023996:	5ccd      	ldrb	r5, [r1, r3]
 8023998:	440b      	add	r3, r1
 802399a:	9908      	ldr	r1, [sp, #32]
 802399c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80239a0:	460e      	mov	r6, r1
 80239a2:	eb01 0c05 	add.w	ip, r1, r5
 80239a6:	2f00      	cmp	r7, #0
 80239a8:	d04b      	beq.n	8023a42 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80239aa:	785c      	ldrb	r4, [r3, #1]
 80239ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80239b0:	440c      	add	r4, r1
 80239b2:	2a00      	cmp	r2, #0
 80239b4:	f000 80c4 	beq.w	8023b40 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80239b8:	1819      	adds	r1, r3, r0
 80239ba:	7849      	ldrb	r1, [r1, #1]
 80239bc:	5c18      	ldrb	r0, [r3, r0]
 80239be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80239c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80239c6:	1873      	adds	r3, r6, r1
 80239c8:	9311      	str	r3, [sp, #68]	; 0x44
 80239ca:	4430      	add	r0, r6
 80239cc:	e03f      	b.n	8023a4e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80239ce:	1c58      	adds	r0, r3, #1
 80239d0:	d405      	bmi.n	80239de <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80239d2:	42a0      	cmp	r0, r4
 80239d4:	dc03      	bgt.n	80239de <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80239d6:	1c48      	adds	r0, r1, #1
 80239d8:	d401      	bmi.n	80239de <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80239da:	42a8      	cmp	r0, r5
 80239dc:	dd20      	ble.n	8023a20 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c4>
 80239de:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80239e0:	f109 0902 	add.w	r9, r9, #2
 80239e4:	449b      	add	fp, r3
 80239e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80239e8:	4498      	add	r8, r3
 80239ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239ec:	2b00      	cmp	r3, #0
 80239ee:	dd08      	ble.n	8023a02 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80239f0:	e9da 4502 	ldrd	r4, r5, [sl, #8]
 80239f4:	3b01      	subs	r3, #1
 80239f6:	9309      	str	r3, [sp, #36]	; 0x24
 80239f8:	ea4f 4128 	mov.w	r1, r8, asr #16
 80239fc:	ea4f 432b 	mov.w	r3, fp, asr #16
 8023a00:	e7b7      	b.n	8023972 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8023a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a04:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8023a08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023a0c:	3301      	adds	r3, #1
 8023a0e:	eb0a 0a43 	add.w	sl, sl, r3, lsl #1
 8023a12:	e687      	b.n	8023724 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8023a14:	3a01      	subs	r2, #1
 8023a16:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8023a1a:	920a      	str	r2, [sp, #40]	; 0x28
 8023a1c:	4616      	mov	r6, r2
 8023a1e:	e7a1      	b.n	8023964 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8023a20:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023a22:	b22d      	sxth	r5, r5
 8023a24:	b224      	sxth	r4, r4
 8023a26:	e9cd 2005 	strd	r2, r0, [sp, #20]
 8023a2a:	e9cd 1703 	strd	r1, r7, [sp, #12]
 8023a2e:	9302      	str	r3, [sp, #8]
 8023a30:	e9cd 4500 	strd	r4, r5, [sp]
 8023a34:	9b08      	ldr	r3, [sp, #32]
 8023a36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023a38:	4649      	mov	r1, r9
 8023a3a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8023a3c:	f7ff fcf2 	bl	8023424 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8023a40:	e7cd      	b.n	80239de <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8023a42:	2a00      	cmp	r2, #0
 8023a44:	d173      	bne.n	8023b2e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d2>
 8023a46:	4660      	mov	r0, ip
 8023a48:	4664      	mov	r4, ip
 8023a4a:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8023a4e:	b2bb      	uxth	r3, r7
 8023a50:	b292      	uxth	r2, r2
 8023a52:	fb03 f702 	mul.w	r7, r3, r2
 8023a56:	011b      	lsls	r3, r3, #4
 8023a58:	1bd9      	subs	r1, r3, r7
 8023a5a:	7826      	ldrb	r6, [r4, #0]
 8023a5c:	f894 e002 	ldrb.w	lr, [r4, #2]
 8023a60:	7864      	ldrb	r4, [r4, #1]
 8023a62:	b289      	uxth	r1, r1
 8023a64:	fb01 f606 	mul.w	r6, r1, r6
 8023a68:	fb01 fe0e 	mul.w	lr, r1, lr
 8023a6c:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8023a70:	fb01 f104 	mul.w	r1, r1, r4
 8023a74:	9c08      	ldr	r4, [sp, #32]
 8023a76:	b292      	uxth	r2, r2
 8023a78:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8023a7c:	5d65      	ldrb	r5, [r4, r5]
 8023a7e:	1a9b      	subs	r3, r3, r2
 8023a80:	f89c 4002 	ldrb.w	r4, [ip, #2]
 8023a84:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023a88:	b29b      	uxth	r3, r3
 8023a8a:	fb03 e404 	mla	r4, r3, r4, lr
 8023a8e:	fb03 6505 	mla	r5, r3, r5, r6
 8023a92:	fb03 130c 	mla	r3, r3, ip, r1
 8023a96:	f890 c001 	ldrb.w	ip, [r0, #1]
 8023a9a:	7801      	ldrb	r1, [r0, #0]
 8023a9c:	f890 e002 	ldrb.w	lr, [r0, #2]
 8023aa0:	fb02 3c0c 	mla	ip, r2, ip, r3
 8023aa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023aa6:	fb02 5601 	mla	r6, r2, r1, r5
 8023aaa:	fb02 4e0e 	mla	lr, r2, lr, r4
 8023aae:	7899      	ldrb	r1, [r3, #2]
 8023ab0:	781a      	ldrb	r2, [r3, #0]
 8023ab2:	785b      	ldrb	r3, [r3, #1]
 8023ab4:	f8b9 0000 	ldrh.w	r0, [r9]
 8023ab8:	fb07 c303 	mla	r3, r7, r3, ip
 8023abc:	fb07 6202 	mla	r2, r7, r2, r6
 8023ac0:	00c5      	lsls	r5, r0, #3
 8023ac2:	1204      	asrs	r4, r0, #8
 8023ac4:	fb07 e101 	mla	r1, r7, r1, lr
 8023ac8:	10c0      	asrs	r0, r0, #3
 8023aca:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023acc:	b2ed      	uxtb	r5, r5
 8023ace:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8023ad2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023ad6:	fb15 f507 	smulbb	r5, r5, r7
 8023ada:	fb14 f407 	smulbb	r4, r4, r7
 8023ade:	fb10 f007 	smulbb	r0, r0, r7
 8023ae2:	f3c3 2707 	ubfx	r7, r3, #8, #8
 8023ae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023ae8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023aec:	461e      	mov	r6, r3
 8023aee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023af2:	fb02 5203 	mla	r2, r2, r3, r5
 8023af6:	fb07 0006 	mla	r0, r7, r6, r0
 8023afa:	fb01 4303 	mla	r3, r1, r3, r4
 8023afe:	b281      	uxth	r1, r0
 8023b00:	b294      	uxth	r4, r2
 8023b02:	b29b      	uxth	r3, r3
 8023b04:	1c4a      	adds	r2, r1, #1
 8023b06:	1c5d      	adds	r5, r3, #1
 8023b08:	1c60      	adds	r0, r4, #1
 8023b0a:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8023b0e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8023b12:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8023b16:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8023b1a:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 8023b1e:	0952      	lsrs	r2, r2, #5
 8023b20:	430b      	orrs	r3, r1
 8023b22:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023b26:	4313      	orrs	r3, r2
 8023b28:	f8a9 3000 	strh.w	r3, [r9]
 8023b2c:	e757      	b.n	80239de <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8023b2e:	5c18      	ldrb	r0, [r3, r0]
 8023b30:	9b08      	ldr	r3, [sp, #32]
 8023b32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023b36:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8023b3a:	4418      	add	r0, r3
 8023b3c:	4664      	mov	r4, ip
 8023b3e:	e786      	b.n	8023a4e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8023b40:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8023b44:	4660      	mov	r0, ip
 8023b46:	e782      	b.n	8023a4e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8023b48:	f43f adec 	beq.w	8023724 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8023b4c:	1e6e      	subs	r6, r5, #1
 8023b4e:	46d4      	mov	ip, sl
 8023b50:	e62c      	b.n	80237ac <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8023b52:	bf00      	nop

08023b54 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8023b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b58:	4692      	mov	sl, r2
 8023b5a:	b083      	sub	sp, #12
 8023b5c:	880a      	ldrh	r2, [r1, #0]
 8023b5e:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8023b62:	e9dd 740e 	ldrd	r7, r4, [sp, #56]	; 0x38
 8023b66:	0215      	lsls	r5, r2, #8
 8023b68:	0150      	lsls	r0, r2, #5
 8023b6a:	fb04 7e0c 	mla	lr, r4, ip, r7
 8023b6e:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8023b72:	f405 0578 	and.w	r5, r5, #16252928	; 0xf80000
 8023b76:	00d2      	lsls	r2, r2, #3
 8023b78:	4305      	orrs	r5, r0
 8023b7a:	b2d2      	uxtb	r2, r2
 8023b7c:	4315      	orrs	r5, r2
 8023b7e:	2c00      	cmp	r4, #0
 8023b80:	9501      	str	r5, [sp, #4]
 8023b82:	eb0a 020e 	add.w	r2, sl, lr
 8023b86:	f104 0801 	add.w	r8, r4, #1
 8023b8a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8023b8e:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8023b92:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8023b96:	db01      	blt.n	8023b9c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x48>
 8023b98:	45a1      	cmp	r9, r4
 8023b9a:	dc71      	bgt.n	8023c80 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x12c>
 8023b9c:	fa5f fa85 	uxtb.w	sl, r5
 8023ba0:	f10d 0b04 	add.w	fp, sp, #4
 8023ba4:	4654      	mov	r4, sl
 8023ba6:	46de      	mov	lr, fp
 8023ba8:	f1b8 0f00 	cmp.w	r8, #0
 8023bac:	db01      	blt.n	8023bb2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5e>
 8023bae:	45c1      	cmp	r9, r8
 8023bb0:	dc4c      	bgt.n	8023c4c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xf8>
 8023bb2:	fa5f f985 	uxtb.w	r9, r5
 8023bb6:	ab01      	add	r3, sp, #4
 8023bb8:	464d      	mov	r5, r9
 8023bba:	4698      	mov	r8, r3
 8023bbc:	2e0f      	cmp	r6, #15
 8023bbe:	f200 809b 	bhi.w	8023cf8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8023bc2:	280f      	cmp	r0, #15
 8023bc4:	f200 8098 	bhi.w	8023cf8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8023bc8:	b2b2      	uxth	r2, r6
 8023bca:	b280      	uxth	r0, r0
 8023bcc:	fb02 f700 	mul.w	r7, r2, r0
 8023bd0:	0112      	lsls	r2, r2, #4
 8023bd2:	f89b c002 	ldrb.w	ip, [fp, #2]
 8023bd6:	1bd6      	subs	r6, r2, r7
 8023bd8:	f89b b001 	ldrb.w	fp, [fp, #1]
 8023bdc:	b2b6      	uxth	r6, r6
 8023bde:	ebc7 1000 	rsb	r0, r7, r0, lsl #4
 8023be2:	fb06 f404 	mul.w	r4, r6, r4
 8023be6:	fb06 fc0c 	mul.w	ip, r6, ip
 8023bea:	fb06 f60b 	mul.w	r6, r6, fp
 8023bee:	b280      	uxth	r0, r0
 8023bf0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023bf4:	f89e b002 	ldrb.w	fp, [lr, #2]
 8023bf8:	1a12      	subs	r2, r2, r0
 8023bfa:	f89e e001 	ldrb.w	lr, [lr, #1]
 8023bfe:	b292      	uxth	r2, r2
 8023c00:	fb02 440a 	mla	r4, r2, sl, r4
 8023c04:	fb02 660e 	mla	r6, r2, lr, r6
 8023c08:	fb02 cc0b 	mla	ip, r2, fp, ip
 8023c0c:	f898 a002 	ldrb.w	sl, [r8, #2]
 8023c10:	f898 8001 	ldrb.w	r8, [r8, #1]
 8023c14:	fb00 4909 	mla	r9, r0, r9, r4
 8023c18:	fb00 cc0a 	mla	ip, r0, sl, ip
 8023c1c:	fb00 6008 	mla	r0, r0, r8, r6
 8023c20:	789e      	ldrb	r6, [r3, #2]
 8023c22:	785b      	ldrb	r3, [r3, #1]
 8023c24:	fb07 9905 	mla	r9, r7, r5, r9
 8023c28:	fb07 c506 	mla	r5, r7, r6, ip
 8023c2c:	fb07 0703 	mla	r7, r7, r3, r0
 8023c30:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8023c34:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023c38:	097f      	lsrs	r7, r7, #5
 8023c3a:	ea45 0509 	orr.w	r5, r5, r9
 8023c3e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023c42:	433d      	orrs	r5, r7
 8023c44:	800d      	strh	r5, [r1, #0]
 8023c46:	b003      	add	sp, #12
 8023c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c4c:	b388      	cbz	r0, 8023cb2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x15e>
 8023c4e:	2f00      	cmp	r7, #0
 8023c50:	db40      	blt.n	8023cd4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x180>
 8023c52:	45bc      	cmp	ip, r7
 8023c54:	dd3e      	ble.n	8023cd4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x180>
 8023c56:	f812 800c 	ldrb.w	r8, [r2, ip]
 8023c5a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023c5e:	4498      	add	r8, r3
 8023c60:	3701      	adds	r7, #1
 8023c62:	f898 9000 	ldrb.w	r9, [r8]
 8023c66:	d432      	bmi.n	8023cce <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x17a>
 8023c68:	45bc      	cmp	ip, r7
 8023c6a:	dd30      	ble.n	8023cce <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x17a>
 8023c6c:	2e00      	cmp	r6, #0
 8023c6e:	d040      	beq.n	8023cf2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x19e>
 8023c70:	4494      	add	ip, r2
 8023c72:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8023c76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023c7a:	5c9d      	ldrb	r5, [r3, r2]
 8023c7c:	4413      	add	r3, r2
 8023c7e:	e79d      	b.n	8023bbc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x68>
 8023c80:	2f00      	cmp	r7, #0
 8023c82:	db01      	blt.n	8023c88 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x134>
 8023c84:	45bc      	cmp	ip, r7
 8023c86:	dc1c      	bgt.n	8023cc2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16e>
 8023c88:	f10d 0e04 	add.w	lr, sp, #4
 8023c8c:	1c7c      	adds	r4, r7, #1
 8023c8e:	f89e a000 	ldrb.w	sl, [lr]
 8023c92:	d40a      	bmi.n	8023caa <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x156>
 8023c94:	45a4      	cmp	ip, r4
 8023c96:	dd08      	ble.n	8023caa <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x156>
 8023c98:	b1fe      	cbz	r6, 8023cda <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x186>
 8023c9a:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023c9e:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8023ca2:	f813 400b 	ldrb.w	r4, [r3, fp]
 8023ca6:	449b      	add	fp, r3
 8023ca8:	e77e      	b.n	8023ba8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x54>
 8023caa:	b2ec      	uxtb	r4, r5
 8023cac:	f10d 0b04 	add.w	fp, sp, #4
 8023cb0:	e77a      	b.n	8023ba8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x54>
 8023cb2:	2e0f      	cmp	r6, #15
 8023cb4:	fa5f f985 	uxtb.w	r9, r5
 8023cb8:	d81e      	bhi.n	8023cf8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8023cba:	ab01      	add	r3, sp, #4
 8023cbc:	4698      	mov	r8, r3
 8023cbe:	464d      	mov	r5, r9
 8023cc0:	e782      	b.n	8023bc8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x74>
 8023cc2:	f81a e00e 	ldrb.w	lr, [sl, lr]
 8023cc6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8023cca:	449e      	add	lr, r3
 8023ccc:	e7de      	b.n	8023c8c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8023cce:	b2ed      	uxtb	r5, r5
 8023cd0:	ab01      	add	r3, sp, #4
 8023cd2:	e773      	b.n	8023bbc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x68>
 8023cd4:	f10d 0804 	add.w	r8, sp, #4
 8023cd8:	e7c2      	b.n	8023c60 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x10c>
 8023cda:	f1b8 0f00 	cmp.w	r8, #0
 8023cde:	b2ec      	uxtb	r4, r5
 8023ce0:	f10d 0b04 	add.w	fp, sp, #4
 8023ce4:	f6bf af63 	bge.w	8023bae <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8023ce8:	465b      	mov	r3, fp
 8023cea:	46d8      	mov	r8, fp
 8023cec:	4625      	mov	r5, r4
 8023cee:	46a1      	mov	r9, r4
 8023cf0:	e767      	b.n	8023bc2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023cf2:	b2ed      	uxtb	r5, r5
 8023cf4:	ab01      	add	r3, sp, #4
 8023cf6:	e764      	b.n	8023bc2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023cf8:	4b03      	ldr	r3, [pc, #12]	; (8023d08 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1b4>)
 8023cfa:	4a04      	ldr	r2, [pc, #16]	; (8023d0c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1b8>)
 8023cfc:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8023d00:	4803      	ldr	r0, [pc, #12]	; (8023d10 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1bc>)
 8023d02:	f005 faa7 	bl	8029254 <__assert_func>
 8023d06:	bf00      	nop
 8023d08:	0802c4f8 	.word	0x0802c4f8
 8023d0c:	0802cb70 	.word	0x0802cb70
 8023d10:	0802c67c 	.word	0x0802c67c

08023d14 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d18:	ed2d 8b0a 	vpush	{d8-d12}
 8023d1c:	eeb0 aa40 	vmov.f32	s20, s0
 8023d20:	eef0 9a60 	vmov.f32	s19, s1
 8023d24:	eeb0 9a41 	vmov.f32	s18, s2
 8023d28:	eef0 8a62 	vmov.f32	s17, s5
 8023d2c:	eeb0 8a43 	vmov.f32	s16, s6
 8023d30:	eeb0 ca44 	vmov.f32	s24, s8
 8023d34:	eef0 ba64 	vmov.f32	s23, s9
 8023d38:	eeb0 ba45 	vmov.f32	s22, s10
 8023d3c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8023d40:	b093      	sub	sp, #76	; 0x4c
 8023d42:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8023d46:	e9dd 412b 	ldrd	r4, r1, [sp, #172]	; 0xac
 8023d4a:	e9dd 9827 	ldrd	r9, r8, [sp, #156]	; 0x9c
 8023d4e:	9011      	str	r0, [sp, #68]	; 0x44
 8023d50:	461a      	mov	r2, r3
 8023d52:	6860      	ldr	r0, [r4, #4]
 8023d54:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023d56:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
 8023d5a:	fb00 1303 	mla	r3, r0, r3, r1
 8023d5e:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8023d60:	6820      	ldr	r0, [r4, #0]
 8023d62:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8023d64:	6849      	ldr	r1, [r1, #4]
 8023d66:	6824      	ldr	r4, [r4, #0]
 8023d68:	eb00 0b43 	add.w	fp, r0, r3, lsl #1
 8023d6c:	1d0b      	adds	r3, r1, #4
 8023d6e:	9409      	str	r4, [sp, #36]	; 0x24
 8023d70:	930c      	str	r3, [sp, #48]	; 0x30
 8023d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d74:	2b00      	cmp	r3, #0
 8023d76:	dc02      	bgt.n	8023d7e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8023d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023d7a:	2b00      	cmp	r3, #0
 8023d7c:	dd61      	ble.n	8023e42 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 8023d7e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023d80:	2a00      	cmp	r2, #0
 8023d82:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 8023d86:	b225      	sxth	r5, r4
 8023d88:	fa0f f78e 	sxth.w	r7, lr
 8023d8c:	f340 81d9 	ble.w	8024142 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8023d90:	f8cd e01c 	str.w	lr, [sp, #28]
 8023d94:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
 8023d98:	1e6e      	subs	r6, r5, #1
 8023d9a:	f107 3cff 	add.w	ip, r7, #4294967295
 8023d9e:	ea5f 4329 	movs.w	r3, r9, asr #16
 8023da2:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023da6:	d405      	bmi.n	8023db4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023da8:	42b3      	cmp	r3, r6
 8023daa:	da03      	bge.n	8023db4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023dac:	2900      	cmp	r1, #0
 8023dae:	db01      	blt.n	8023db4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023db0:	4561      	cmp	r1, ip
 8023db2:	db4b      	blt.n	8023e4c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8023db4:	1c58      	adds	r0, r3, #1
 8023db6:	d406      	bmi.n	8023dc6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023db8:	42a8      	cmp	r0, r5
 8023dba:	dc04      	bgt.n	8023dc6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023dbc:	1c48      	adds	r0, r1, #1
 8023dbe:	d402      	bmi.n	8023dc6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023dc0:	42b8      	cmp	r0, r7
 8023dc2:	f340 8149 	ble.w	8024058 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8023dc6:	3a01      	subs	r2, #1
 8023dc8:	44d1      	add	r9, sl
 8023dca:	44f0      	add	r8, lr
 8023dcc:	f10b 0b02 	add.w	fp, fp, #2
 8023dd0:	d1e5      	bne.n	8023d9e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023dd4:	2b00      	cmp	r3, #0
 8023dd6:	dd34      	ble.n	8023e42 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 8023dd8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8023ddc:	ee79 9aab 	vadd.f32	s19, s19, s23
 8023de0:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8023de4:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8023de8:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8023dec:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023df0:	ee76 6a68 	vsub.f32	s13, s12, s17
 8023df4:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8023df8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023dfc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023e00:	ee16 2a90 	vmov	r2, s13
 8023e04:	3b01      	subs	r3, #1
 8023e06:	930a      	str	r3, [sp, #40]	; 0x28
 8023e08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023e0a:	fb92 faf3 	sdiv	sl, r2, r3
 8023e0e:	ee17 2a10 	vmov	r2, s14
 8023e12:	eeb0 7a48 	vmov.f32	s14, s16
 8023e16:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023e1a:	ee17 8a10 	vmov	r8, s14
 8023e1e:	eeb0 7a68 	vmov.f32	s14, s17
 8023e22:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e26:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023e2a:	932a      	str	r3, [sp, #168]	; 0xa8
 8023e2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023e2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023e30:	ee17 9a10 	vmov	r9, s14
 8023e34:	eeb0 8a67 	vmov.f32	s16, s15
 8023e38:	eef0 8a46 	vmov.f32	s17, s12
 8023e3c:	bf18      	it	ne
 8023e3e:	461a      	movne	r2, r3
 8023e40:	e797      	b.n	8023d72 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8023e42:	b013      	add	sp, #76	; 0x4c
 8023e44:	ecbd 8b0a 	vpop	{d8-d12}
 8023e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e4c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8023e50:	f8cd b01c 	str.w	fp, [sp, #28]
 8023e54:	1e51      	subs	r1, r2, #1
 8023e56:	fb0a 9301 	mla	r3, sl, r1, r9
 8023e5a:	141b      	asrs	r3, r3, #16
 8023e5c:	9108      	str	r1, [sp, #32]
 8023e5e:	f100 809e 	bmi.w	8023f9e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8023e62:	42b3      	cmp	r3, r6
 8023e64:	f280 809b 	bge.w	8023f9e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8023e68:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023e6a:	fb03 8301 	mla	r3, r3, r1, r8
 8023e6e:	141b      	asrs	r3, r3, #16
 8023e70:	f100 8095 	bmi.w	8023f9e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8023e74:	3f01      	subs	r7, #1
 8023e76:	42bb      	cmp	r3, r7
 8023e78:	f280 8091 	bge.w	8023f9e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8023e7c:	2a00      	cmp	r2, #0
 8023e7e:	dda8      	ble.n	8023dd2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023e80:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8023e84:	f8cd a0a4 	str.w	sl, [sp, #164]	; 0xa4
 8023e88:	f8cd b020 	str.w	fp, [sp, #32]
 8023e8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8023e90:	e060      	b.n	8023f54 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023e92:	784f      	ldrb	r7, [r1, #1]
 8023e94:	194c      	adds	r4, r1, r5
 8023e96:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023e9a:	4457      	add	r7, sl
 8023e9c:	2a00      	cmp	r2, #0
 8023e9e:	d075      	beq.n	8023f8c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8023ea0:	5d48      	ldrb	r0, [r1, r5]
 8023ea2:	7865      	ldrb	r5, [r4, #1]
 8023ea4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023ea8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023eac:	4450      	add	r0, sl
 8023eae:	4455      	add	r5, sl
 8023eb0:	b29b      	uxth	r3, r3
 8023eb2:	b292      	uxth	r2, r2
 8023eb4:	fb03 f402 	mul.w	r4, r3, r2
 8023eb8:	011b      	lsls	r3, r3, #4
 8023eba:	f897 e000 	ldrb.w	lr, [r7]
 8023ebe:	f897 c002 	ldrb.w	ip, [r7, #2]
 8023ec2:	1b19      	subs	r1, r3, r4
 8023ec4:	787f      	ldrb	r7, [r7, #1]
 8023ec6:	b289      	uxth	r1, r1
 8023ec8:	fb01 fc0c 	mul.w	ip, r1, ip
 8023ecc:	fb01 fe0e 	mul.w	lr, r1, lr
 8023ed0:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8023ed4:	fb01 f107 	mul.w	r1, r1, r7
 8023ed8:	b292      	uxth	r2, r2
 8023eda:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8023ede:	f81a b00b 	ldrb.w	fp, [sl, fp]
 8023ee2:	78b7      	ldrb	r7, [r6, #2]
 8023ee4:	1a9b      	subs	r3, r3, r2
 8023ee6:	7876      	ldrb	r6, [r6, #1]
 8023ee8:	b29b      	uxth	r3, r3
 8023eea:	fb03 ee0b 	mla	lr, r3, fp, lr
 8023eee:	fb03 c707 	mla	r7, r3, r7, ip
 8023ef2:	fb03 1306 	mla	r3, r3, r6, r1
 8023ef6:	f890 b000 	ldrb.w	fp, [r0]
 8023efa:	f890 c002 	ldrb.w	ip, [r0, #2]
 8023efe:	7841      	ldrb	r1, [r0, #1]
 8023f00:	fb02 ee0b 	mla	lr, r2, fp, lr
 8023f04:	fb02 3301 	mla	r3, r2, r1, r3
 8023f08:	fb02 770c 	mla	r7, r2, ip, r7
 8023f0c:	f895 b000 	ldrb.w	fp, [r5]
 8023f10:	f895 c002 	ldrb.w	ip, [r5, #2]
 8023f14:	7869      	ldrb	r1, [r5, #1]
 8023f16:	fb04 ee0b 	mla	lr, r4, fp, lr
 8023f1a:	fb04 3101 	mla	r1, r4, r1, r3
 8023f1e:	fb04 7c0c 	mla	ip, r4, ip, r7
 8023f22:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023f24:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8023f28:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023f2c:	0949      	lsrs	r1, r1, #5
 8023f2e:	4491      	add	r9, r2
 8023f30:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023f32:	9b07      	ldr	r3, [sp, #28]
 8023f34:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023f38:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023f3c:	ea4e 0e01 	orr.w	lr, lr, r1
 8023f40:	4490      	add	r8, r2
 8023f42:	9a08      	ldr	r2, [sp, #32]
 8023f44:	f823 eb02 	strh.w	lr, [r3], #2
 8023f48:	4293      	cmp	r3, r2
 8023f4a:	9307      	str	r3, [sp, #28]
 8023f4c:	d025      	beq.n	8023f9a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8023f4e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023f50:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8023f54:	ea4f 4329 	mov.w	r3, r9, asr #16
 8023f58:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023f5c:	fb05 3101 	mla	r1, r5, r1, r3
 8023f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023f62:	f3c9 3303 	ubfx	r3, r9, #12, #4
 8023f66:	f812 b001 	ldrb.w	fp, [r2, r1]
 8023f6a:	4411      	add	r1, r2
 8023f6c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8023f70:	eb0a 060b 	add.w	r6, sl, fp
 8023f74:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8023f78:	2b00      	cmp	r3, #0
 8023f7a:	d18a      	bne.n	8023e92 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8023f7c:	b14a      	cbz	r2, 8023f92 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8023f7e:	5d48      	ldrb	r0, [r1, r5]
 8023f80:	4637      	mov	r7, r6
 8023f82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023f86:	4635      	mov	r5, r6
 8023f88:	4450      	add	r0, sl
 8023f8a:	e791      	b.n	8023eb0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8023f8c:	4635      	mov	r5, r6
 8023f8e:	4630      	mov	r0, r6
 8023f90:	e78e      	b.n	8023eb0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8023f92:	4635      	mov	r5, r6
 8023f94:	4630      	mov	r0, r6
 8023f96:	4637      	mov	r7, r6
 8023f98:	e78a      	b.n	8023eb0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8023f9a:	4693      	mov	fp, r2
 8023f9c:	e719      	b.n	8023dd2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023f9e:	2a00      	cmp	r2, #0
 8023fa0:	f77f af17 	ble.w	8023dd2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023fa4:	9e08      	ldr	r6, [sp, #32]
 8023fa6:	ea4f 4329 	mov.w	r3, r9, asr #16
 8023faa:	ea4f 4128 	mov.w	r1, r8, asr #16
 8023fae:	465f      	mov	r7, fp
 8023fb0:	f8cd b01c 	str.w	fp, [sp, #28]
 8023fb4:	f8dd b0b8 	ldr.w	fp, [sp, #184]	; 0xb8
 8023fb8:	2b00      	cmp	r3, #0
 8023fba:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8023fbe:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8023fc2:	db2a      	blt.n	802401a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023fc4:	1e65      	subs	r5, r4, #1
 8023fc6:	42ab      	cmp	r3, r5
 8023fc8:	da27      	bge.n	802401a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023fca:	2900      	cmp	r1, #0
 8023fcc:	db25      	blt.n	802401a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023fce:	f10e 35ff 	add.w	r5, lr, #4294967295
 8023fd2:	42a9      	cmp	r1, r5
 8023fd4:	da21      	bge.n	802401a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8023fd6:	b224      	sxth	r4, r4
 8023fd8:	fb01 3304 	mla	r3, r1, r4, r3
 8023fdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023fde:	f811 c003 	ldrb.w	ip, [r1, r3]
 8023fe2:	440b      	add	r3, r1
 8023fe4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023fe6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023fea:	eb01 0e0c 	add.w	lr, r1, ip
 8023fee:	2800      	cmp	r0, #0
 8023ff0:	d048      	beq.n	8024084 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8023ff2:	785d      	ldrb	r5, [r3, #1]
 8023ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023ff8:	440d      	add	r5, r1
 8023ffa:	2a00      	cmp	r2, #0
 8023ffc:	f000 809e 	beq.w	802413c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8024000:	1919      	adds	r1, r3, r4
 8024002:	7849      	ldrb	r1, [r1, #1]
 8024004:	5d1c      	ldrb	r4, [r3, r4]
 8024006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024008:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802400c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024010:	1859      	adds	r1, r3, r1
 8024012:	18e3      	adds	r3, r4, r3
 8024014:	910f      	str	r1, [sp, #60]	; 0x3c
 8024016:	9310      	str	r3, [sp, #64]	; 0x40
 8024018:	e039      	b.n	802408e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802401a:	1c5d      	adds	r5, r3, #1
 802401c:	d405      	bmi.n	802402a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 802401e:	42a5      	cmp	r5, r4
 8024020:	dc03      	bgt.n	802402a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8024022:	1c4d      	adds	r5, r1, #1
 8024024:	d401      	bmi.n	802402a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8024026:	4575      	cmp	r5, lr
 8024028:	dd1c      	ble.n	8024064 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802402a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802402c:	2e00      	cmp	r6, #0
 802402e:	f107 0702 	add.w	r7, r7, #2
 8024032:	44d1      	add	r9, sl
 8024034:	4498      	add	r8, r3
 8024036:	dd07      	ble.n	8024048 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8024038:	e9db 4e02 	ldrd	r4, lr, [fp, #8]
 802403c:	3e01      	subs	r6, #1
 802403e:	ea4f 4329 	mov.w	r3, r9, asr #16
 8024042:	ea4f 4128 	mov.w	r1, r8, asr #16
 8024046:	e7b7      	b.n	8023fb8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8024048:	e9dd b307 	ldrd	fp, r3, [sp, #28]
 802404c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024050:	3301      	adds	r3, #1
 8024052:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8024056:	e6bc      	b.n	8023dd2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024058:	3a01      	subs	r2, #1
 802405a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802405e:	9208      	str	r2, [sp, #32]
 8024060:	4616      	mov	r6, r2
 8024062:	e7a4      	b.n	8023fae <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8024064:	fa0f f58e 	sxth.w	r5, lr
 8024068:	b224      	sxth	r4, r4
 802406a:	e9cd 0204 	strd	r0, r2, [sp, #16]
 802406e:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8024072:	e9cd 4500 	strd	r4, r5, [sp]
 8024076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802407a:	4639      	mov	r1, r7
 802407c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802407e:	f7ff fd69 	bl	8023b54 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8024082:	e7d2      	b.n	802402a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8024084:	2a00      	cmp	r2, #0
 8024086:	d14f      	bne.n	8024128 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8024088:	4675      	mov	r5, lr
 802408a:	e9cd ee0f 	strd	lr, lr, [sp, #60]	; 0x3c
 802408e:	b283      	uxth	r3, r0
 8024090:	b292      	uxth	r2, r2
 8024092:	fb03 f002 	mul.w	r0, r3, r2
 8024096:	782c      	ldrb	r4, [r5, #0]
 8024098:	011b      	lsls	r3, r3, #4
 802409a:	940e      	str	r4, [sp, #56]	; 0x38
 802409c:	78ac      	ldrb	r4, [r5, #2]
 802409e:	1a19      	subs	r1, r3, r0
 80240a0:	940d      	str	r4, [sp, #52]	; 0x34
 80240a2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80240a4:	b289      	uxth	r1, r1
 80240a6:	fb01 f404 	mul.w	r4, r1, r4
 80240aa:	940e      	str	r4, [sp, #56]	; 0x38
 80240ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80240ae:	786d      	ldrb	r5, [r5, #1]
 80240b0:	fb01 f404 	mul.w	r4, r1, r4
 80240b4:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 80240b8:	fb01 f105 	mul.w	r1, r1, r5
 80240bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80240be:	b292      	uxth	r2, r2
 80240c0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80240c4:	f815 c00c 	ldrb.w	ip, [r5, ip]
 80240c8:	940d      	str	r4, [sp, #52]	; 0x34
 80240ca:	1a9b      	subs	r3, r3, r2
 80240cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80240ce:	b29b      	uxth	r3, r3
 80240d0:	f89e 5002 	ldrb.w	r5, [lr, #2]
 80240d4:	fb03 4c0c 	mla	ip, r3, ip, r4
 80240d8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80240dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80240de:	fb03 4505 	mla	r5, r3, r5, r4
 80240e2:	fb03 130e 	mla	r3, r3, lr, r1
 80240e6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80240e8:	78a1      	ldrb	r1, [r4, #2]
 80240ea:	f894 e000 	ldrb.w	lr, [r4]
 80240ee:	7864      	ldrb	r4, [r4, #1]
 80240f0:	fb02 5501 	mla	r5, r2, r1, r5
 80240f4:	fb02 cc0e 	mla	ip, r2, lr, ip
 80240f8:	fb02 3104 	mla	r1, r2, r4, r3
 80240fc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80240fe:	7822      	ldrb	r2, [r4, #0]
 8024100:	78a3      	ldrb	r3, [r4, #2]
 8024102:	7864      	ldrb	r4, [r4, #1]
 8024104:	fb00 cc02 	mla	ip, r0, r2, ip
 8024108:	fb00 5303 	mla	r3, r0, r3, r5
 802410c:	fb00 1204 	mla	r2, r0, r4, r1
 8024110:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024114:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8024118:	0952      	lsrs	r2, r2, #5
 802411a:	ea43 030c 	orr.w	r3, r3, ip
 802411e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024122:	4313      	orrs	r3, r2
 8024124:	803b      	strh	r3, [r7, #0]
 8024126:	e780      	b.n	802402a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8024128:	5d1c      	ldrb	r4, [r3, r4]
 802412a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802412c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024130:	18e3      	adds	r3, r4, r3
 8024132:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8024136:	9310      	str	r3, [sp, #64]	; 0x40
 8024138:	4675      	mov	r5, lr
 802413a:	e7a8      	b.n	802408e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802413c:	e9cd ee0f 	strd	lr, lr, [sp, #60]	; 0x3c
 8024140:	e7a5      	b.n	802408e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8024142:	f43f ae46 	beq.w	8023dd2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024146:	1e6e      	subs	r6, r5, #1
 8024148:	f8cd b01c 	str.w	fp, [sp, #28]
 802414c:	e682      	b.n	8023e54 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802414e:	bf00      	nop

08024150 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8024150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024154:	b08b      	sub	sp, #44	; 0x2c
 8024156:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
 802415a:	f8b1 c000 	ldrh.w	ip, [r1]
 802415e:	e9dd 6416 	ldrd	r6, r4, [sp, #88]	; 0x58
 8024162:	fb04 6507 	mla	r5, r4, r7, r6
 8024166:	9107      	str	r1, [sp, #28]
 8024168:	ea4f 01ec 	mov.w	r1, ip, asr #3
 802416c:	ea4f 202c 	mov.w	r0, ip, asr #8
 8024170:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024174:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024178:	469a      	mov	sl, r3
 802417a:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 802417e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024182:	9105      	str	r1, [sp, #20]
 8024184:	2c00      	cmp	r4, #0
 8024186:	fa5f f18c 	uxtb.w	r1, ip
 802418a:	9004      	str	r0, [sp, #16]
 802418c:	9106      	str	r1, [sp, #24]
 802418e:	eb02 0e05 	add.w	lr, r2, r5
 8024192:	f104 0801 	add.w	r8, r4, #1
 8024196:	f9bd 9054 	ldrsh.w	r9, [sp, #84]	; 0x54
 802419a:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 802419e:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 80241a2:	9308      	str	r3, [sp, #32]
 80241a4:	db02      	blt.n	80241ac <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80241a6:	45a1      	cmp	r9, r4
 80241a8:	f300 8119 	bgt.w	80243de <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28e>
 80241ac:	f04f 0c00 	mov.w	ip, #0
 80241b0:	4665      	mov	r5, ip
 80241b2:	4662      	mov	r2, ip
 80241b4:	4664      	mov	r4, ip
 80241b6:	f1b8 0f00 	cmp.w	r8, #0
 80241ba:	db02      	blt.n	80241c2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x72>
 80241bc:	45c1      	cmp	r9, r8
 80241be:	f300 8127 	bgt.w	8024410 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c0>
 80241c2:	f04f 0e00 	mov.w	lr, #0
 80241c6:	46f0      	mov	r8, lr
 80241c8:	4676      	mov	r6, lr
 80241ca:	46f1      	mov	r9, lr
 80241cc:	290f      	cmp	r1, #15
 80241ce:	f200 815e 	bhi.w	802448e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 80241d2:	280f      	cmp	r0, #15
 80241d4:	f200 815b 	bhi.w	802448e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 80241d8:	b280      	uxth	r0, r0
 80241da:	b289      	uxth	r1, r1
 80241dc:	fb00 fa01 	mul.w	sl, r0, r1
 80241e0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80241e4:	b280      	uxth	r0, r0
 80241e6:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 80241ea:	fb00 fb08 	mul.w	fp, r0, r8
 80241ee:	fb0a f70e 	mul.w	r7, sl, lr
 80241f2:	9301      	str	r3, [sp, #4]
 80241f4:	f009 13ff 	and.w	r3, r9, #16711935	; 0xff00ff
 80241f8:	9302      	str	r3, [sp, #8]
 80241fa:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 80241fe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024202:	9303      	str	r3, [sp, #12]
 8024204:	0109      	lsls	r1, r1, #4
 8024206:	eba1 090a 	sub.w	r9, r1, sl
 802420a:	fa1f f989 	uxth.w	r9, r9
 802420e:	fb09 f30c 	mul.w	r3, r9, ip
 8024212:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8024216:	1a09      	subs	r1, r1, r0
 8024218:	b289      	uxth	r1, r1
 802421a:	fb01 3305 	mla	r3, r1, r5, r3
 802421e:	445b      	add	r3, fp
 8024220:	443b      	add	r3, r7
 8024222:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024226:	2dff      	cmp	r5, #255	; 0xff
 8024228:	9309      	str	r3, [sp, #36]	; 0x24
 802422a:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802422e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024232:	d019      	beq.n	8024268 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x118>
 8024234:	fb03 f305 	mul.w	r3, r3, r5
 8024238:	fb04 f405 	mul.w	r4, r4, r5
 802423c:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8024240:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024244:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8024248:	f504 7780 	add.w	r7, r4, #256	; 0x100
 802424c:	445b      	add	r3, fp
 802424e:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8024252:	0a1b      	lsrs	r3, r3, #8
 8024254:	0a24      	lsrs	r4, r4, #8
 8024256:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802425a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802425e:	431c      	orrs	r4, r3
 8024260:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8024264:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024268:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802426c:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8024270:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024274:	d018      	beq.n	80242a8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x158>
 8024276:	fb05 f50c 	mul.w	r5, r5, ip
 802427a:	fb02 f20c 	mul.w	r2, r2, ip
 802427e:	0a2f      	lsrs	r7, r5, #8
 8024280:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024284:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8024288:	f502 7c80 	add.w	ip, r2, #256	; 0x100
 802428c:	443d      	add	r5, r7
 802428e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024292:	0a2d      	lsrs	r5, r5, #8
 8024294:	0a12      	lsrs	r2, r2, #8
 8024296:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802429a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802429e:	432a      	orrs	r2, r5
 80242a0:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 80242a4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80242a8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80242ac:	d01f      	beq.n	80242ee <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x19e>
 80242ae:	9f02      	ldr	r7, [sp, #8]
 80242b0:	fb07 fb08 	mul.w	fp, r7, r8
 80242b4:	9f03      	ldr	r7, [sp, #12]
 80242b6:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80242ba:	fb07 f808 	mul.w	r8, r7, r8
 80242be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80242c2:	f508 7780 	add.w	r7, r8, #256	; 0x100
 80242c6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80242ca:	eb07 2718 	add.w	r7, r7, r8, lsr #8
 80242ce:	44dc      	add	ip, fp
 80242d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80242d4:	0a3f      	lsrs	r7, r7, #8
 80242d6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80242da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80242de:	ea4c 0807 	orr.w	r8, ip, r7
 80242e2:	f008 17ff 	and.w	r7, r8, #16711935	; 0xff00ff
 80242e6:	9702      	str	r7, [sp, #8]
 80242e8:	f408 477f 	and.w	r7, r8, #65280	; 0xff00
 80242ec:	9703      	str	r7, [sp, #12]
 80242ee:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80242f2:	d01d      	beq.n	8024330 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1e0>
 80242f4:	9f01      	ldr	r7, [sp, #4]
 80242f6:	fb06 f60e 	mul.w	r6, r6, lr
 80242fa:	fb07 f80e 	mul.w	r8, r7, lr
 80242fe:	ea4f 2c18 	mov.w	ip, r8, lsr #8
 8024302:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8024306:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802430a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802430e:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8024312:	44e0      	add	r8, ip
 8024314:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024318:	0a36      	lsrs	r6, r6, #8
 802431a:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802431e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024322:	ea48 0606 	orr.w	r6, r8, r6
 8024326:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 802432a:	9701      	str	r7, [sp, #4]
 802432c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024330:	f8bd e020 	ldrh.w	lr, [sp, #32]
 8024334:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024336:	fb05 f509 	mul.w	r5, r5, r9
 802433a:	fb07 f70e 	mul.w	r7, r7, lr
 802433e:	f107 0c01 	add.w	ip, r7, #1
 8024342:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8024346:	ea6f 2c1c 	mvn.w	ip, ip, lsr #8
 802434a:	fb02 f209 	mul.w	r2, r2, r9
 802434e:	fb03 5501 	mla	r5, r3, r1, r5
 8024352:	fb04 2201 	mla	r2, r4, r1, r2
 8024356:	9b02      	ldr	r3, [sp, #8]
 8024358:	fa5f fc8c 	uxtb.w	ip, ip
 802435c:	fb03 5500 	mla	r5, r3, r0, r5
 8024360:	9b03      	ldr	r3, [sp, #12]
 8024362:	fb03 2200 	mla	r2, r3, r0, r2
 8024366:	9b01      	ldr	r3, [sp, #4]
 8024368:	fb03 550a 	mla	r5, r3, sl, r5
 802436c:	fb06 2a0a 	mla	sl, r6, sl, r2
 8024370:	9a05      	ldr	r2, [sp, #20]
 8024372:	9b04      	ldr	r3, [sp, #16]
 8024374:	fb12 f10c 	smulbb	r1, r2, ip
 8024378:	9a06      	ldr	r2, [sp, #24]
 802437a:	0a2e      	lsrs	r6, r5, #8
 802437c:	fb13 f30c 	smulbb	r3, r3, ip
 8024380:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024384:	fb12 fc0c 	smulbb	ip, r2, ip
 8024388:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802438c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024390:	ea46 060a 	orr.w	r6, r6, sl
 8024394:	0c30      	lsrs	r0, r6, #16
 8024396:	f3c6 2207 	ubfx	r2, r6, #8, #8
 802439a:	b2f6      	uxtb	r6, r6
 802439c:	fb00 330e 	mla	r3, r0, lr, r3
 80243a0:	fb02 120e 	mla	r2, r2, lr, r1
 80243a4:	fb06 c60e 	mla	r6, r6, lr, ip
 80243a8:	b298      	uxth	r0, r3
 80243aa:	b291      	uxth	r1, r2
 80243ac:	b2b6      	uxth	r6, r6
 80243ae:	1c43      	adds	r3, r0, #1
 80243b0:	f106 0e01 	add.w	lr, r6, #1
 80243b4:	1c4a      	adds	r2, r1, #1
 80243b6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80243ba:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80243be:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80243c2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80243c6:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80243ca:	0952      	lsrs	r2, r2, #5
 80243cc:	4333      	orrs	r3, r6
 80243ce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80243d2:	4313      	orrs	r3, r2
 80243d4:	9a07      	ldr	r2, [sp, #28]
 80243d6:	8013      	strh	r3, [r2, #0]
 80243d8:	b00b      	add	sp, #44	; 0x2c
 80243da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243de:	2e00      	cmp	r6, #0
 80243e0:	db01      	blt.n	80243e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x296>
 80243e2:	42b7      	cmp	r7, r6
 80243e4:	dc3c      	bgt.n	8024460 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x310>
 80243e6:	2500      	movs	r5, #0
 80243e8:	462c      	mov	r4, r5
 80243ea:	1c72      	adds	r2, r6, #1
 80243ec:	d427      	bmi.n	802443e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2ee>
 80243ee:	4297      	cmp	r7, r2
 80243f0:	dd25      	ble.n	802443e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2ee>
 80243f2:	b131      	cbz	r1, 8024402 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2b2>
 80243f4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80243f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80243fc:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8024400:	e6d9      	b.n	80241b6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 8024402:	f1b8 0f00 	cmp.w	r8, #0
 8024406:	db3b      	blt.n	8024480 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x330>
 8024408:	45c1      	cmp	r9, r8
 802440a:	dd39      	ble.n	8024480 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x330>
 802440c:	468c      	mov	ip, r1
 802440e:	460a      	mov	r2, r1
 8024410:	b1c8      	cbz	r0, 8024446 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2f6>
 8024412:	2e00      	cmp	r6, #0
 8024414:	db2d      	blt.n	8024472 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x322>
 8024416:	42b7      	cmp	r7, r6
 8024418:	dd2b      	ble.n	8024472 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x322>
 802441a:	f81e 8007 	ldrb.w	r8, [lr, r7]
 802441e:	f85a 9028 	ldr.w	r9, [sl, r8, lsl #2]
 8024422:	ea4f 6819 	mov.w	r8, r9, lsr #24
 8024426:	3601      	adds	r6, #1
 8024428:	d41f      	bmi.n	802446a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x31a>
 802442a:	42b7      	cmp	r7, r6
 802442c:	dd1d      	ble.n	802446a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x31a>
 802442e:	b321      	cbz	r1, 802447a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x32a>
 8024430:	4477      	add	r7, lr
 8024432:	787e      	ldrb	r6, [r7, #1]
 8024434:	f85a 6026 	ldr.w	r6, [sl, r6, lsl #2]
 8024438:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 802443c:	e6c6      	b.n	80241cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x7c>
 802443e:	f04f 0c00 	mov.w	ip, #0
 8024442:	4662      	mov	r2, ip
 8024444:	e6b7      	b.n	80241b6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 8024446:	290f      	cmp	r1, #15
 8024448:	d821      	bhi.n	802448e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 802444a:	b289      	uxth	r1, r1
 802444c:	4682      	mov	sl, r0
 802444e:	4607      	mov	r7, r0
 8024450:	4683      	mov	fp, r0
 8024452:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8024456:	4606      	mov	r6, r0
 8024458:	9001      	str	r0, [sp, #4]
 802445a:	4686      	mov	lr, r0
 802445c:	4680      	mov	r8, r0
 802445e:	e6d1      	b.n	8024204 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb4>
 8024460:	5d52      	ldrb	r2, [r2, r5]
 8024462:	f85a 4022 	ldr.w	r4, [sl, r2, lsl #2]
 8024466:	0e25      	lsrs	r5, r4, #24
 8024468:	e7bf      	b.n	80243ea <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x29a>
 802446a:	f04f 0e00 	mov.w	lr, #0
 802446e:	4676      	mov	r6, lr
 8024470:	e6ac      	b.n	80241cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x7c>
 8024472:	f04f 0800 	mov.w	r8, #0
 8024476:	46c1      	mov	r9, r8
 8024478:	e7d5      	b.n	8024426 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2d6>
 802447a:	460e      	mov	r6, r1
 802447c:	468e      	mov	lr, r1
 802447e:	e6a8      	b.n	80241d2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8024480:	460a      	mov	r2, r1
 8024482:	460e      	mov	r6, r1
 8024484:	4689      	mov	r9, r1
 8024486:	468e      	mov	lr, r1
 8024488:	4688      	mov	r8, r1
 802448a:	468c      	mov	ip, r1
 802448c:	e6a1      	b.n	80241d2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 802448e:	4b03      	ldr	r3, [pc, #12]	; (802449c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x34c>)
 8024490:	4a03      	ldr	r2, [pc, #12]	; (80244a0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x350>)
 8024492:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8024496:	4803      	ldr	r0, [pc, #12]	; (80244a4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x354>)
 8024498:	f004 fedc 	bl	8029254 <__assert_func>
 802449c:	0802c4f8 	.word	0x0802c4f8
 80244a0:	0802cb70 	.word	0x0802cb70
 80244a4:	0802c67c 	.word	0x0802c67c

080244a8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80244a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244ac:	ed2d 8b08 	vpush	{d8-d11}
 80244b0:	b0a9      	sub	sp, #164	; 0xa4
 80244b2:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 80244b4:	9022      	str	r0, [sp, #136]	; 0x88
 80244b6:	9115      	str	r1, [sp, #84]	; 0x54
 80244b8:	6860      	ldr	r0, [r4, #4]
 80244ba:	9940      	ldr	r1, [sp, #256]	; 0x100
 80244bc:	9219      	str	r2, [sp, #100]	; 0x64
 80244be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80244c0:	e9dd ba3b 	ldrd	fp, sl, [sp, #236]	; 0xec
 80244c4:	fb00 1202 	mla	r2, r0, r2, r1
 80244c8:	6820      	ldr	r0, [r4, #0]
 80244ca:	46d1      	mov	r9, sl
 80244cc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80244d0:	46da      	mov	sl, fp
 80244d2:	eeb0 aa40 	vmov.f32	s20, s0
 80244d6:	eef0 9a60 	vmov.f32	s19, s1
 80244da:	eeb0 9a41 	vmov.f32	s18, s2
 80244de:	eef0 8a62 	vmov.f32	s17, s5
 80244e2:	eeb0 8a43 	vmov.f32	s16, s6
 80244e6:	eef0 ba44 	vmov.f32	s23, s8
 80244ea:	eeb0 ba64 	vmov.f32	s22, s9
 80244ee:	eef0 aa45 	vmov.f32	s21, s10
 80244f2:	4693      	mov	fp, r2
 80244f4:	9942      	ldr	r1, [sp, #264]	; 0x108
 80244f6:	9d42      	ldr	r5, [sp, #264]	; 0x108
 80244f8:	6849      	ldr	r1, [r1, #4]
 80244fa:	f89d 410c 	ldrb.w	r4, [sp, #268]	; 0x10c
 80244fe:	3104      	adds	r1, #4
 8024500:	682d      	ldr	r5, [r5, #0]
 8024502:	910e      	str	r1, [sp, #56]	; 0x38
 8024504:	b2a1      	uxth	r1, r4
 8024506:	9423      	str	r4, [sp, #140]	; 0x8c
 8024508:	9511      	str	r5, [sp, #68]	; 0x44
 802450a:	9112      	str	r1, [sp, #72]	; 0x48
 802450c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802450e:	2a00      	cmp	r2, #0
 8024510:	dc02      	bgt.n	8024518 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024512:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8024514:	2a00      	cmp	r2, #0
 8024516:	dd65      	ble.n	80245e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8024518:	9a42      	ldr	r2, [sp, #264]	; 0x108
 802451a:	2b00      	cmp	r3, #0
 802451c:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8024520:	b234      	sxth	r4, r6
 8024522:	fa0f f78c 	sxth.w	r7, ip
 8024526:	f340 8396 	ble.w	8024c56 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ae>
 802452a:	1e65      	subs	r5, r4, #1
 802452c:	f107 3eff 	add.w	lr, r7, #4294967295
 8024530:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8024534:	e9dd c83d 	ldrd	ip, r8, [sp, #244]	; 0xf4
 8024538:	ea5f 422a 	movs.w	r2, sl, asr #16
 802453c:	ea4f 4129 	mov.w	r1, r9, asr #16
 8024540:	d405      	bmi.n	802454e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8024542:	42aa      	cmp	r2, r5
 8024544:	da03      	bge.n	802454e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8024546:	2900      	cmp	r1, #0
 8024548:	db01      	blt.n	802454e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802454a:	4571      	cmp	r1, lr
 802454c:	db4f      	blt.n	80245ee <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802454e:	1c50      	adds	r0, r2, #1
 8024550:	d406      	bmi.n	8024560 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024552:	42a0      	cmp	r0, r4
 8024554:	dc04      	bgt.n	8024560 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024556:	1c48      	adds	r0, r1, #1
 8024558:	d402      	bmi.n	8024560 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802455a:	42b8      	cmp	r0, r7
 802455c:	f340 834f 	ble.w	8024bfe <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 8024560:	3b01      	subs	r3, #1
 8024562:	44e2      	add	sl, ip
 8024564:	44c1      	add	r9, r8
 8024566:	f10b 0b02 	add.w	fp, fp, #2
 802456a:	d1e5      	bne.n	8024538 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802456c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802456e:	2b00      	cmp	r3, #0
 8024570:	dd38      	ble.n	80245e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8024572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024576:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802457a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802457e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024582:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024586:	ee29 6aa7 	vmul.f32	s12, s19, s15
 802458a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802458e:	ee76 6a68 	vsub.f32	s13, s12, s17
 8024592:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8024596:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802459a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802459e:	ee16 2a90 	vmov	r2, s13
 80245a2:	3b01      	subs	r3, #1
 80245a4:	9315      	str	r3, [sp, #84]	; 0x54
 80245a6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80245a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80245ac:	ee17 2a10 	vmov	r2, s14
 80245b0:	eeb0 7a48 	vmov.f32	s14, s16
 80245b4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80245b8:	ee17 9a10 	vmov	r9, s14
 80245bc:	eeb0 7a68 	vmov.f32	s14, s17
 80245c0:	933d      	str	r3, [sp, #244]	; 0xf4
 80245c2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80245c4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80245c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80245cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80245ce:	933e      	str	r3, [sp, #248]	; 0xf8
 80245d0:	ee17 aa10 	vmov	sl, s14
 80245d4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80245d6:	eeb0 8a67 	vmov.f32	s16, s15
 80245da:	eef0 8a46 	vmov.f32	s17, s12
 80245de:	bf08      	it	eq
 80245e0:	4613      	moveq	r3, r2
 80245e2:	e793      	b.n	802450c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80245e4:	b029      	add	sp, #164	; 0xa4
 80245e6:	ecbd 8b08 	vpop	{d8-d11}
 80245ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80245ee:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80245f2:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80245f6:	983d      	ldr	r0, [sp, #244]	; 0xf4
 80245f8:	1e59      	subs	r1, r3, #1
 80245fa:	fb00 a201 	mla	r2, r0, r1, sl
 80245fe:	1412      	asrs	r2, r2, #16
 8024600:	910d      	str	r1, [sp, #52]	; 0x34
 8024602:	f100 8161 	bmi.w	80248c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8024606:	42aa      	cmp	r2, r5
 8024608:	f280 815e 	bge.w	80248c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802460c:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 802460e:	fb02 9201 	mla	r2, r2, r1, r9
 8024612:	1412      	asrs	r2, r2, #16
 8024614:	f100 8158 	bmi.w	80248c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8024618:	3f01      	subs	r7, #1
 802461a:	42ba      	cmp	r2, r7
 802461c:	f280 8154 	bge.w	80248c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8024620:	2b00      	cmp	r3, #0
 8024622:	dda3      	ble.n	802456c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8024624:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8024628:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 802462c:	46d0      	mov	r8, sl
 802462e:	4621      	mov	r1, r4
 8024630:	e129      	b.n	8024886 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8024632:	f893 c001 	ldrb.w	ip, [r3, #1]
 8024636:	f856 502c 	ldr.w	r5, [r6, ip, lsl #2]
 802463a:	9513      	str	r5, [sp, #76]	; 0x4c
 802463c:	0e2d      	lsrs	r5, r5, #24
 802463e:	950a      	str	r5, [sp, #40]	; 0x28
 8024640:	b162      	cbz	r2, 802465c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8024642:	185d      	adds	r5, r3, r1
 8024644:	786d      	ldrb	r5, [r5, #1]
 8024646:	5c5b      	ldrb	r3, [r3, r1]
 8024648:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 802464c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024650:	9116      	str	r1, [sp, #88]	; 0x58
 8024652:	9314      	str	r3, [sp, #80]	; 0x50
 8024654:	0e09      	lsrs	r1, r1, #24
 8024656:	0e1b      	lsrs	r3, r3, #24
 8024658:	910c      	str	r1, [sp, #48]	; 0x30
 802465a:	930b      	str	r3, [sp, #44]	; 0x2c
 802465c:	b2a4      	uxth	r4, r4
 802465e:	b292      	uxth	r2, r2
 8024660:	fb04 f502 	mul.w	r5, r4, r2
 8024664:	0124      	lsls	r4, r4, #4
 8024666:	1b66      	subs	r6, r4, r5
 8024668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802466a:	b2b6      	uxth	r6, r6
 802466c:	fb06 f103 	mul.w	r1, r6, r3
 8024670:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8024674:	b292      	uxth	r2, r2
 8024676:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 802467a:	1a9b      	subs	r3, r3, r2
 802467c:	b29b      	uxth	r3, r3
 802467e:	fb03 1100 	mla	r1, r3, r0, r1
 8024682:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024684:	fb02 1104 	mla	r1, r2, r4, r1
 8024688:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802468a:	fb05 1104 	mla	r1, r5, r4, r1
 802468e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024692:	2900      	cmp	r1, #0
 8024694:	f000 80ea 	beq.w	802486c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c4>
 8024698:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 802469c:	28ff      	cmp	r0, #255	; 0xff
 802469e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80246a2:	940f      	str	r4, [sp, #60]	; 0x3c
 80246a4:	970d      	str	r7, [sp, #52]	; 0x34
 80246a6:	d01c      	beq.n	80246e2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80246a8:	fb04 f400 	mul.w	r4, r4, r0
 80246ac:	4627      	mov	r7, r4
 80246ae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80246b0:	fb04 fe00 	mul.w	lr, r4, r0
 80246b4:	0a3c      	lsrs	r4, r7, #8
 80246b6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80246ba:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80246be:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 80246c2:	4427      	add	r7, r4
 80246c4:	eb00 201e 	add.w	r0, r0, lr, lsr #8
 80246c8:	0a3f      	lsrs	r7, r7, #8
 80246ca:	0a00      	lsrs	r0, r0, #8
 80246cc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80246d0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80246d4:	4307      	orrs	r7, r0
 80246d6:	f007 10ff 	and.w	r0, r7, #16711935	; 0xff00ff
 80246da:	900f      	str	r0, [sp, #60]	; 0x3c
 80246dc:	f407 407f 	and.w	r0, r7, #65280	; 0xff00
 80246e0:	900d      	str	r0, [sp, #52]	; 0x34
 80246e2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80246e4:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 80246e8:	f400 4e7f 	and.w	lr, r0, #65280	; 0xff00
 80246ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80246ee:	28ff      	cmp	r0, #255	; 0xff
 80246f0:	d01c      	beq.n	802472c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80246f2:	fb0c fc00 	mul.w	ip, ip, r0
 80246f6:	fb0e fe00 	mul.w	lr, lr, r0
 80246fa:	ea4f 241c 	mov.w	r4, ip, lsr #8
 80246fe:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024702:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024706:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 802470a:	44a4      	add	ip, r4
 802470c:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8024710:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024714:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024718:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802471c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024720:	ea4c 0e0e 	orr.w	lr, ip, lr
 8024724:	f00e 1cff 	and.w	ip, lr, #16711935	; 0xff00ff
 8024728:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802472c:	9814      	ldr	r0, [sp, #80]	; 0x50
 802472e:	f000 17ff 	and.w	r7, r0, #16711935	; 0xff00ff
 8024732:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 8024736:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024738:	28ff      	cmp	r0, #255	; 0xff
 802473a:	d01a      	beq.n	8024772 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802473c:	fb07 f700 	mul.w	r7, r7, r0
 8024740:	fb0a fa00 	mul.w	sl, sl, r0
 8024744:	0a3c      	lsrs	r4, r7, #8
 8024746:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802474a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802474e:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8024752:	4427      	add	r7, r4
 8024754:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024758:	0a3f      	lsrs	r7, r7, #8
 802475a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802475e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024762:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024766:	ea47 0a0a 	orr.w	sl, r7, sl
 802476a:	f00a 17ff 	and.w	r7, sl, #16711935	; 0xff00ff
 802476e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024772:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024774:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8024778:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802477c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802477e:	2cff      	cmp	r4, #255	; 0xff
 8024780:	d01d      	beq.n	80247be <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8024782:	fb00 f004 	mul.w	r0, r0, r4
 8024786:	fb0b fb04 	mul.w	fp, fp, r4
 802478a:	0a04      	lsrs	r4, r0, #8
 802478c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024790:	9418      	str	r4, [sp, #96]	; 0x60
 8024792:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 8024796:	9417      	str	r4, [sp, #92]	; 0x5c
 8024798:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802479a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802479e:	4420      	add	r0, r4
 80247a0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80247a2:	0a00      	lsrs	r0, r0, #8
 80247a4:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 80247a8:	0a24      	lsrs	r4, r4, #8
 80247aa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80247ae:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80247b2:	ea40 0b0b 	orr.w	fp, r0, fp
 80247b6:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 80247ba:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80247be:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80247c0:	fb0c fc06 	mul.w	ip, ip, r6
 80247c4:	fb01 f104 	mul.w	r1, r1, r4
 80247c8:	1c4c      	adds	r4, r1, #1
 80247ca:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 80247ce:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80247d2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80247d4:	fb0e f606 	mul.w	r6, lr, r6
 80247d8:	fb04 cc03 	mla	ip, r4, r3, ip
 80247dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80247de:	fb07 cc02 	mla	ip, r7, r2, ip
 80247e2:	fb04 6603 	mla	r6, r4, r3, r6
 80247e6:	fb0a 6602 	mla	r6, sl, r2, r6
 80247ea:	fb00 cc05 	mla	ip, r0, r5, ip
 80247ee:	fb0b 6605 	mla	r6, fp, r5, r6
 80247f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80247f6:	0a36      	lsrs	r6, r6, #8
 80247f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80247fc:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 8024800:	ea4c 0303 	orr.w	r3, ip, r3
 8024804:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024806:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024808:	0c1f      	lsrs	r7, r3, #16
 802480a:	f3c3 2607 	ubfx	r6, r3, #8, #8
 802480e:	b2db      	uxtb	r3, r3
 8024810:	8805      	ldrh	r5, [r0, #0]
 8024812:	fb13 f302 	smulbb	r3, r3, r2
 8024816:	fb17 f702 	smulbb	r7, r7, r2
 802481a:	fb16 f602 	smulbb	r6, r6, r2
 802481e:	1228      	asrs	r0, r5, #8
 8024820:	10ea      	asrs	r2, r5, #3
 8024822:	00ed      	lsls	r5, r5, #3
 8024824:	b2c9      	uxtb	r1, r1
 8024826:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802482a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802482e:	b2ed      	uxtb	r5, r5
 8024830:	fb00 7001 	mla	r0, r0, r1, r7
 8024834:	fb02 6201 	mla	r2, r2, r1, r6
 8024838:	fb05 3101 	mla	r1, r5, r1, r3
 802483c:	b280      	uxth	r0, r0
 802483e:	b292      	uxth	r2, r2
 8024840:	b289      	uxth	r1, r1
 8024842:	1c43      	adds	r3, r0, #1
 8024844:	1c4c      	adds	r4, r1, #1
 8024846:	f102 0c01 	add.w	ip, r2, #1
 802484a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802484e:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8024852:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024856:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802485a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802485e:	0952      	lsrs	r2, r2, #5
 8024860:	4308      	orrs	r0, r1
 8024862:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024866:	4302      	orrs	r2, r0
 8024868:	9809      	ldr	r0, [sp, #36]	; 0x24
 802486a:	8002      	strh	r2, [r0, #0]
 802486c:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 802486e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024870:	4490      	add	r8, r2
 8024872:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8024874:	3302      	adds	r3, #2
 8024876:	4491      	add	r9, r2
 8024878:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802487a:	9309      	str	r3, [sp, #36]	; 0x24
 802487c:	4293      	cmp	r3, r2
 802487e:	d021      	beq.n	80248c4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8024880:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8024882:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024886:	ea4f 4228 	mov.w	r2, r8, asr #16
 802488a:	ea4f 4329 	mov.w	r3, r9, asr #16
 802488e:	fb01 2303 	mla	r3, r1, r3, r2
 8024892:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024894:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8024896:	5cc2      	ldrb	r2, [r0, r3]
 8024898:	f3c8 3403 	ubfx	r4, r8, #12, #4
 802489c:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80248a0:	4403      	add	r3, r0
 80248a2:	f3c9 3203 	ubfx	r2, r9, #12, #4
 80248a6:	0e38      	lsrs	r0, r7, #24
 80248a8:	2c00      	cmp	r4, #0
 80248aa:	f47f aec2 	bne.w	8024632 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80248ae:	2a00      	cmp	r2, #0
 80248b0:	f43f aed4 	beq.w	802465c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80248b4:	5c5b      	ldrb	r3, [r3, r1]
 80248b6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80248b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80248bc:	9314      	str	r3, [sp, #80]	; 0x50
 80248be:	0e1b      	lsrs	r3, r3, #24
 80248c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80248c2:	e6cb      	b.n	802465c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80248c4:	4693      	mov	fp, r2
 80248c6:	e651      	b.n	802456c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 80248c8:	2b00      	cmp	r3, #0
 80248ca:	f77f ae4f 	ble.w	802456c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 80248ce:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80248d2:	ea4f 422a 	mov.w	r2, sl, asr #16
 80248d6:	ea4f 4129 	mov.w	r1, r9, asr #16
 80248da:	2a00      	cmp	r2, #0
 80248dc:	465f      	mov	r7, fp
 80248de:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80248e2:	9c42      	ldr	r4, [sp, #264]	; 0x108
 80248e4:	e9dd 5b3d 	ldrd	r5, fp, [sp, #244]	; 0xf4
 80248e8:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80248ec:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 80248f0:	f2c0 815c 	blt.w	8024bac <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80248f4:	1e73      	subs	r3, r6, #1
 80248f6:	429a      	cmp	r2, r3
 80248f8:	f280 8158 	bge.w	8024bac <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80248fc:	2900      	cmp	r1, #0
 80248fe:	f2c0 8155 	blt.w	8024bac <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8024902:	f10c 33ff 	add.w	r3, ip, #4294967295
 8024906:	4299      	cmp	r1, r3
 8024908:	f280 8150 	bge.w	8024bac <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 802490c:	b233      	sxth	r3, r6
 802490e:	fb01 2203 	mla	r2, r1, r3, r2
 8024912:	9911      	ldr	r1, [sp, #68]	; 0x44
 8024914:	930f      	str	r3, [sp, #60]	; 0x3c
 8024916:	5c8b      	ldrb	r3, [r1, r2]
 8024918:	440a      	add	r2, r1
 802491a:	4616      	mov	r6, r2
 802491c:	9210      	str	r2, [sp, #64]	; 0x40
 802491e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024920:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8024924:	0e0b      	lsrs	r3, r1, #24
 8024926:	2800      	cmp	r0, #0
 8024928:	f000 816f 	beq.w	8024c0a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x762>
 802492c:	f896 c001 	ldrb.w	ip, [r6, #1]
 8024930:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8024934:	9224      	str	r2, [sp, #144]	; 0x90
 8024936:	0e12      	lsrs	r2, r2, #24
 8024938:	921a      	str	r2, [sp, #104]	; 0x68
 802493a:	f1be 0f00 	cmp.w	lr, #0
 802493e:	f040 8172 	bne.w	8024c26 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 8024942:	b280      	uxth	r0, r0
 8024944:	fa1f fc8e 	uxth.w	ip, lr
 8024948:	fb00 f20c 	mul.w	r2, r0, ip
 802494c:	0106      	lsls	r6, r0, #4
 802494e:	1ab0      	subs	r0, r6, r2
 8024950:	b280      	uxth	r0, r0
 8024952:	4686      	mov	lr, r0
 8024954:	900f      	str	r0, [sp, #60]	; 0x3c
 8024956:	981a      	ldr	r0, [sp, #104]	; 0x68
 8024958:	ebc2 1c0c 	rsb	ip, r2, ip, lsl #4
 802495c:	fb0e f000 	mul.w	r0, lr, r0
 8024960:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 8024964:	fa1f fe8c 	uxth.w	lr, ip
 8024968:	eba6 060e 	sub.w	r6, r6, lr
 802496c:	b2b6      	uxth	r6, r6
 802496e:	fb06 0003 	mla	r0, r6, r3, r0
 8024972:	9610      	str	r6, [sp, #64]	; 0x40
 8024974:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8024976:	fb0e 0006 	mla	r0, lr, r6, r0
 802497a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 802497c:	fb02 0006 	mla	r0, r2, r6, r0
 8024980:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024984:	9017      	str	r0, [sp, #92]	; 0x5c
 8024986:	2800      	cmp	r0, #0
 8024988:	f000 80fa 	beq.w	8024b80 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 802498c:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 8024990:	2bff      	cmp	r3, #255	; 0xff
 8024992:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024996:	9018      	str	r0, [sp, #96]	; 0x60
 8024998:	911d      	str	r1, [sp, #116]	; 0x74
 802499a:	d01b      	beq.n	80249d4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52c>
 802499c:	fb01 f103 	mul.w	r1, r1, r3
 80249a0:	fb00 f003 	mul.w	r0, r0, r3
 80249a4:	460b      	mov	r3, r1
 80249a6:	0a01      	lsrs	r1, r0, #8
 80249a8:	f100 1601 	add.w	r6, r0, #65537	; 0x10001
 80249ac:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80249b0:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80249b4:	4431      	add	r1, r6
 80249b6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80249ba:	0a09      	lsrs	r1, r1, #8
 80249bc:	0a1b      	lsrs	r3, r3, #8
 80249be:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80249c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80249c6:	430b      	orrs	r3, r1
 80249c8:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 80249cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80249d0:	9118      	str	r1, [sp, #96]	; 0x60
 80249d2:	931d      	str	r3, [sp, #116]	; 0x74
 80249d4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80249d6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80249d8:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 80249dc:	2eff      	cmp	r6, #255	; 0xff
 80249de:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80249e2:	931e      	str	r3, [sp, #120]	; 0x78
 80249e4:	911f      	str	r1, [sp, #124]	; 0x7c
 80249e6:	d01b      	beq.n	8024a20 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x578>
 80249e8:	fb01 f106 	mul.w	r1, r1, r6
 80249ec:	fb03 f306 	mul.w	r3, r3, r6
 80249f0:	460e      	mov	r6, r1
 80249f2:	0a19      	lsrs	r1, r3, #8
 80249f4:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 80249f8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80249fc:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8024a00:	4401      	add	r1, r0
 8024a02:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8024a06:	0a09      	lsrs	r1, r1, #8
 8024a08:	0a1b      	lsrs	r3, r3, #8
 8024a0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024a0e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024a12:	4319      	orrs	r1, r3
 8024a14:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8024a18:	931e      	str	r3, [sp, #120]	; 0x78
 8024a1a:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
 8024a1e:	931f      	str	r3, [sp, #124]	; 0x7c
 8024a20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024a22:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8024a26:	f403 4c7f 	and.w	ip, r3, #65280	; 0xff00
 8024a2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8024a2c:	9120      	str	r1, [sp, #128]	; 0x80
 8024a2e:	2bff      	cmp	r3, #255	; 0xff
 8024a30:	d01c      	beq.n	8024a6c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8024a32:	fb01 f103 	mul.w	r1, r1, r3
 8024a36:	4608      	mov	r0, r1
 8024a38:	fb0c fc03 	mul.w	ip, ip, r3
 8024a3c:	0a09      	lsrs	r1, r1, #8
 8024a3e:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 8024a42:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024a46:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024a4a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024a4e:	4408      	add	r0, r1
 8024a50:	0a00      	lsrs	r0, r0, #8
 8024a52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a56:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024a5a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024a5e:	ea40 0c0c 	orr.w	ip, r0, ip
 8024a62:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8024a66:	9320      	str	r3, [sp, #128]	; 0x80
 8024a68:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024a6c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8024a6e:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8024a72:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 8024a76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8024a78:	9321      	str	r3, [sp, #132]	; 0x84
 8024a7a:	29ff      	cmp	r1, #255	; 0xff
 8024a7c:	d019      	beq.n	8024ab2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 8024a7e:	fb03 f301 	mul.w	r3, r3, r1
 8024a82:	fb06 f601 	mul.w	r6, r6, r1
 8024a86:	0a19      	lsrs	r1, r3, #8
 8024a88:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024a8c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8024a90:	f506 7080 	add.w	r0, r6, #256	; 0x100
 8024a94:	4419      	add	r1, r3
 8024a96:	eb00 2616 	add.w	r6, r0, r6, lsr #8
 8024a9a:	0a09      	lsrs	r1, r1, #8
 8024a9c:	0a36      	lsrs	r6, r6, #8
 8024a9e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024aa2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024aa6:	430e      	orrs	r6, r1
 8024aa8:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8024aac:	9321      	str	r3, [sp, #132]	; 0x84
 8024aae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024ab2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024ab4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8024ab6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024ab8:	fb00 f001 	mul.w	r0, r0, r1
 8024abc:	4601      	mov	r1, r0
 8024abe:	3001      	adds	r0, #1
 8024ac0:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8024ac4:	ea6f 2011 	mvn.w	r0, r1, lsr #8
 8024ac8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024aca:	9025      	str	r0, [sp, #148]	; 0x94
 8024acc:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024ace:	fb00 f001 	mul.w	r0, r0, r1
 8024ad2:	900f      	str	r0, [sp, #60]	; 0x3c
 8024ad4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024ad6:	fb00 f001 	mul.w	r0, r0, r1
 8024ada:	9017      	str	r0, [sp, #92]	; 0x5c
 8024adc:	9818      	ldr	r0, [sp, #96]	; 0x60
 8024ade:	4601      	mov	r1, r0
 8024ae0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024ae2:	fb01 0003 	mla	r0, r1, r3, r0
 8024ae6:	900f      	str	r0, [sp, #60]	; 0x3c
 8024ae8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8024aea:	4601      	mov	r1, r0
 8024aec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024aee:	fb01 0103 	mla	r1, r1, r3, r0
 8024af2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024af4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024af6:	fb0c 110e 	mla	r1, ip, lr, r1
 8024afa:	fb03 000e 	mla	r0, r3, lr, r0
 8024afe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024b00:	f89d e094 	ldrb.w	lr, [sp, #148]	; 0x94
 8024b04:	fb03 0002 	mla	r0, r3, r2, r0
 8024b08:	fb06 1302 	mla	r3, r6, r2, r1
 8024b0c:	0a02      	lsrs	r2, r0, #8
 8024b0e:	0a1b      	lsrs	r3, r3, #8
 8024b10:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024b14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b18:	4313      	orrs	r3, r2
 8024b1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024b1c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8024b20:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8024b24:	b2db      	uxtb	r3, r3
 8024b26:	8838      	ldrh	r0, [r7, #0]
 8024b28:	fb16 f602 	smulbb	r6, r6, r2
 8024b2c:	fb1c fc02 	smulbb	ip, ip, r2
 8024b30:	fb13 f302 	smulbb	r3, r3, r2
 8024b34:	1201      	asrs	r1, r0, #8
 8024b36:	10c2      	asrs	r2, r0, #3
 8024b38:	00c0      	lsls	r0, r0, #3
 8024b3a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024b3e:	b2c0      	uxtb	r0, r0
 8024b40:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024b44:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024b48:	fb02 620e 	mla	r2, r2, lr, r6
 8024b4c:	fb00 330e 	mla	r3, r0, lr, r3
 8024b50:	b296      	uxth	r6, r2
 8024b52:	b29b      	uxth	r3, r3
 8024b54:	fa1f fc8c 	uxth.w	ip, ip
 8024b58:	1c58      	adds	r0, r3, #1
 8024b5a:	f10c 0201 	add.w	r2, ip, #1
 8024b5e:	1c71      	adds	r1, r6, #1
 8024b60:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 8024b64:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024b68:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8024b6c:	f402 4378 	and.w	r3, r2, #63488	; 0xf800
 8024b70:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8024b74:	094a      	lsrs	r2, r1, #5
 8024b76:	4303      	orrs	r3, r0
 8024b78:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024b7c:	4313      	orrs	r3, r2
 8024b7e:	803b      	strh	r3, [r7, #0]
 8024b80:	f1b8 0f00 	cmp.w	r8, #0
 8024b84:	f107 0702 	add.w	r7, r7, #2
 8024b88:	44aa      	add	sl, r5
 8024b8a:	44d9      	add	r9, fp
 8024b8c:	dd2e      	ble.n	8024bec <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8024b8e:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8024b92:	ea4f 422a 	mov.w	r2, sl, asr #16
 8024b96:	2a00      	cmp	r2, #0
 8024b98:	f108 38ff 	add.w	r8, r8, #4294967295
 8024b9c:	ea4f 4129 	mov.w	r1, r9, asr #16
 8024ba0:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8024ba4:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 8024ba8:	f6bf aea4 	bge.w	80248f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8024bac:	1c53      	adds	r3, r2, #1
 8024bae:	d4e7      	bmi.n	8024b80 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8024bb0:	42b3      	cmp	r3, r6
 8024bb2:	dce5      	bgt.n	8024b80 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8024bb4:	1c4b      	adds	r3, r1, #1
 8024bb6:	d4e3      	bmi.n	8024b80 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8024bb8:	4563      	cmp	r3, ip
 8024bba:	dce1      	bgt.n	8024b80 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8024bbc:	fa0f f38c 	sxth.w	r3, ip
 8024bc0:	b236      	sxth	r6, r6
 8024bc2:	e9cd 6300 	strd	r6, r3, [sp]
 8024bc6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024bc8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8024bcc:	e9cd e305 	strd	lr, r3, [sp, #20]
 8024bd0:	9202      	str	r2, [sp, #8]
 8024bd2:	4639      	mov	r1, r7
 8024bd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024bd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024bd8:	9822      	ldr	r0, [sp, #136]	; 0x88
 8024bda:	f7ff fab9 	bl	8024150 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8024bde:	f1b8 0f00 	cmp.w	r8, #0
 8024be2:	f107 0702 	add.w	r7, r7, #2
 8024be6:	44aa      	add	sl, r5
 8024be8:	44d9      	add	r9, fp
 8024bea:	dcd0      	bgt.n	8024b8e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e6>
 8024bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024bee:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024bf2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024bf6:	3301      	adds	r3, #1
 8024bf8:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8024bfc:	e4b6      	b.n	802456c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8024bfe:	3b01      	subs	r3, #1
 8024c00:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8024c04:	930d      	str	r3, [sp, #52]	; 0x34
 8024c06:	4698      	mov	r8, r3
 8024c08:	e667      	b.n	80248da <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8024c0a:	f1be 0f00 	cmp.w	lr, #0
 8024c0e:	f43f ae98 	beq.w	8024942 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8024c12:	4632      	mov	r2, r6
 8024c14:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8024c16:	5d92      	ldrb	r2, [r2, r6]
 8024c18:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8024c1a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8024c1e:	9226      	str	r2, [sp, #152]	; 0x98
 8024c20:	0e12      	lsrs	r2, r2, #24
 8024c22:	921b      	str	r2, [sp, #108]	; 0x6c
 8024c24:	e68d      	b.n	8024942 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8024c26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024c28:	eb06 0c02 	add.w	ip, r6, r2
 8024c2c:	4632      	mov	r2, r6
 8024c2e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8024c30:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024c34:	5d92      	ldrb	r2, [r2, r6]
 8024c36:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8024c38:	9210      	str	r2, [sp, #64]	; 0x40
 8024c3a:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 8024c3e:	920f      	str	r2, [sp, #60]	; 0x3c
 8024c40:	9227      	str	r2, [sp, #156]	; 0x9c
 8024c42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024c44:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8024c48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024c4a:	9626      	str	r6, [sp, #152]	; 0x98
 8024c4c:	0e12      	lsrs	r2, r2, #24
 8024c4e:	921c      	str	r2, [sp, #112]	; 0x70
 8024c50:	0e32      	lsrs	r2, r6, #24
 8024c52:	921b      	str	r2, [sp, #108]	; 0x6c
 8024c54:	e675      	b.n	8024942 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8024c56:	f43f ac89 	beq.w	802456c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8024c5a:	1e65      	subs	r5, r4, #1
 8024c5c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8024c60:	e4c9      	b.n	80245f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8024c62:	bf00      	nop

08024c64 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8024c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c68:	b089      	sub	sp, #36	; 0x24
 8024c6a:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
 8024c6e:	880f      	ldrh	r7, [r1, #0]
 8024c70:	e9dd 5014 	ldrd	r5, r0, [sp, #80]	; 0x50
 8024c74:	fb00 5408 	mla	r4, r0, r8, r5
 8024c78:	9106      	str	r1, [sp, #24]
 8024c7a:	10f9      	asrs	r1, r7, #3
 8024c7c:	123e      	asrs	r6, r7, #8
 8024c7e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024c82:	00ff      	lsls	r7, r7, #3
 8024c84:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8024c88:	9104      	str	r1, [sp, #16]
 8024c8a:	2800      	cmp	r0, #0
 8024c8c:	b2f9      	uxtb	r1, r7
 8024c8e:	9105      	str	r1, [sp, #20]
 8024c90:	9603      	str	r6, [sp, #12]
 8024c92:	eb02 0704 	add.w	r7, r2, r4
 8024c96:	f100 0c01 	add.w	ip, r0, #1
 8024c9a:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8024c9e:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8024ca2:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 8024ca6:	db02      	blt.n	8024cae <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x4a>
 8024ca8:	4582      	cmp	sl, r0
 8024caa:	f300 8113 	bgt.w	8024ed4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8024cae:	2600      	movs	r6, #0
 8024cb0:	46b1      	mov	r9, r6
 8024cb2:	4630      	mov	r0, r6
 8024cb4:	4634      	mov	r4, r6
 8024cb6:	f1bc 0f00 	cmp.w	ip, #0
 8024cba:	db02      	blt.n	8024cc2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5e>
 8024cbc:	45e2      	cmp	sl, ip
 8024cbe:	f300 8123 	bgt.w	8024f08 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a4>
 8024cc2:	2700      	movs	r7, #0
 8024cc4:	46bc      	mov	ip, r7
 8024cc6:	463d      	mov	r5, r7
 8024cc8:	9702      	str	r7, [sp, #8]
 8024cca:	f1be 0f0f 	cmp.w	lr, #15
 8024cce:	f200 8160 	bhi.w	8024f92 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8024cd2:	290f      	cmp	r1, #15
 8024cd4:	f200 815d 	bhi.w	8024f92 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8024cd8:	b289      	uxth	r1, r1
 8024cda:	fa1f f38e 	uxth.w	r3, lr
 8024cde:	fb01 f803 	mul.w	r8, r1, r3
 8024ce2:	f005 12ff 	and.w	r2, r5, #16711935	; 0xff00ff
 8024ce6:	9200      	str	r2, [sp, #0]
 8024ce8:	9a02      	ldr	r2, [sp, #8]
 8024cea:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8024cee:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024cf2:	b289      	uxth	r1, r1
 8024cf4:	9201      	str	r2, [sp, #4]
 8024cf6:	fb01 fa0c 	mul.w	sl, r1, ip
 8024cfa:	9a02      	ldr	r2, [sp, #8]
 8024cfc:	fb08 fb07 	mul.w	fp, r8, r7
 8024d00:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024d04:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024d08:	9202      	str	r2, [sp, #8]
 8024d0a:	011b      	lsls	r3, r3, #4
 8024d0c:	eba3 0e08 	sub.w	lr, r3, r8
 8024d10:	fa1f fe8e 	uxth.w	lr, lr
 8024d14:	fb0e f206 	mul.w	r2, lr, r6
 8024d18:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8024d1c:	1a5b      	subs	r3, r3, r1
 8024d1e:	b29b      	uxth	r3, r3
 8024d20:	fb03 2209 	mla	r2, r3, r9, r2
 8024d24:	4452      	add	r2, sl
 8024d26:	445a      	add	r2, fp
 8024d28:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024d2c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024d30:	9207      	str	r2, [sp, #28]
 8024d32:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 8024d36:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024d3a:	d019      	beq.n	8024d70 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x10c>
 8024d3c:	fb02 f209 	mul.w	r2, r2, r9
 8024d40:	fb04 f409 	mul.w	r4, r4, r9
 8024d44:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 8024d48:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024d4c:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8024d50:	f504 7a80 	add.w	sl, r4, #256	; 0x100
 8024d54:	445a      	add	r2, fp
 8024d56:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8024d5a:	0a12      	lsrs	r2, r2, #8
 8024d5c:	0a24      	lsrs	r4, r4, #8
 8024d5e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024d62:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024d66:	4314      	orrs	r4, r2
 8024d68:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 8024d6c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024d70:	2eff      	cmp	r6, #255	; 0xff
 8024d72:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 8024d76:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024d7a:	d01b      	beq.n	8024db4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x150>
 8024d7c:	fb0a fa06 	mul.w	sl, sl, r6
 8024d80:	fb00 f006 	mul.w	r0, r0, r6
 8024d84:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8024d88:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024d8c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024d90:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8024d94:	44da      	add	sl, fp
 8024d96:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8024d9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024d9e:	0a00      	lsrs	r0, r0, #8
 8024da0:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8024da4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024da8:	ea4a 0000 	orr.w	r0, sl, r0
 8024dac:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 8024db0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024db4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024db8:	d020      	beq.n	8024dfc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x198>
 8024dba:	9e01      	ldr	r6, [sp, #4]
 8024dbc:	fb06 fb0c 	mul.w	fp, r6, ip
 8024dc0:	9e02      	ldr	r6, [sp, #8]
 8024dc2:	ea4f 291b 	mov.w	r9, fp, lsr #8
 8024dc6:	fb06 fc0c 	mul.w	ip, r6, ip
 8024dca:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8024dce:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8024dd2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024dd6:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8024dda:	44cb      	add	fp, r9
 8024ddc:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024de0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024de4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024de8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024dec:	ea4b 0c0c 	orr.w	ip, fp, ip
 8024df0:	f00c 16ff 	and.w	r6, ip, #16711935	; 0xff00ff
 8024df4:	9601      	str	r6, [sp, #4]
 8024df6:	f40c 467f 	and.w	r6, ip, #65280	; 0xff00
 8024dfa:	9602      	str	r6, [sp, #8]
 8024dfc:	2fff      	cmp	r7, #255	; 0xff
 8024dfe:	d01d      	beq.n	8024e3c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d8>
 8024e00:	9e00      	ldr	r6, [sp, #0]
 8024e02:	fb05 f507 	mul.w	r5, r5, r7
 8024e06:	fb06 fb07 	mul.w	fp, r6, r7
 8024e0a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8024e0e:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8024e12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024e16:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024e1a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8024e1e:	44e3      	add	fp, ip
 8024e20:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024e24:	0a2d      	lsrs	r5, r5, #8
 8024e26:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024e2a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024e2e:	ea4b 0505 	orr.w	r5, fp, r5
 8024e32:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8024e36:	9600      	str	r6, [sp, #0]
 8024e38:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024e3c:	9e07      	ldr	r6, [sp, #28]
 8024e3e:	fb0a fa0e 	mul.w	sl, sl, lr
 8024e42:	43f7      	mvns	r7, r6
 8024e44:	fb00 f00e 	mul.w	r0, r0, lr
 8024e48:	fb02 aa03 	mla	sl, r2, r3, sl
 8024e4c:	fb04 0003 	mla	r0, r4, r3, r0
 8024e50:	9b01      	ldr	r3, [sp, #4]
 8024e52:	b2ff      	uxtb	r7, r7
 8024e54:	fb03 aa01 	mla	sl, r3, r1, sl
 8024e58:	9b02      	ldr	r3, [sp, #8]
 8024e5a:	fb03 0c01 	mla	ip, r3, r1, r0
 8024e5e:	9b00      	ldr	r3, [sp, #0]
 8024e60:	9803      	ldr	r0, [sp, #12]
 8024e62:	fb03 aa08 	mla	sl, r3, r8, sl
 8024e66:	9b05      	ldr	r3, [sp, #20]
 8024e68:	9904      	ldr	r1, [sp, #16]
 8024e6a:	fb03 f307 	mul.w	r3, r3, r7
 8024e6e:	fb00 f007 	mul.w	r0, r0, r7
 8024e72:	fb01 f107 	mul.w	r1, r1, r7
 8024e76:	461f      	mov	r7, r3
 8024e78:	fb05 c808 	mla	r8, r5, r8, ip
 8024e7c:	ea4f 251a 	mov.w	r5, sl, lsr #8
 8024e80:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024e84:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024e88:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024e8c:	ea45 0508 	orr.w	r5, r5, r8
 8024e90:	f100 0c01 	add.w	ip, r0, #1
 8024e94:	1c4e      	adds	r6, r1, #1
 8024e96:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8024e9a:	0c2c      	lsrs	r4, r5, #16
 8024e9c:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8024ea0:	1c78      	adds	r0, r7, #1
 8024ea2:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8024ea6:	4b3e      	ldr	r3, [pc, #248]	; (8024fa0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x33c>)
 8024ea8:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8024eac:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8024eb0:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8024eb4:	b2ed      	uxtb	r5, r5
 8024eb6:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 8024eba:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8024ebe:	00d2      	lsls	r2, r2, #3
 8024ec0:	ea43 05d5 	orr.w	r5, r3, r5, lsr #3
 8024ec4:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8024ec8:	431d      	orrs	r5, r3
 8024eca:	9b06      	ldr	r3, [sp, #24]
 8024ecc:	801d      	strh	r5, [r3, #0]
 8024ece:	b009      	add	sp, #36	; 0x24
 8024ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ed4:	2d00      	cmp	r5, #0
 8024ed6:	db01      	blt.n	8024edc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x278>
 8024ed8:	45a8      	cmp	r8, r5
 8024eda:	dc41      	bgt.n	8024f60 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2fc>
 8024edc:	f04f 0900 	mov.w	r9, #0
 8024ee0:	464c      	mov	r4, r9
 8024ee2:	1c6a      	adds	r2, r5, #1
 8024ee4:	d42a      	bmi.n	8024f3c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2d8>
 8024ee6:	4590      	cmp	r8, r2
 8024ee8:	dd28      	ble.n	8024f3c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2d8>
 8024eea:	f1be 0f00 	cmp.w	lr, #0
 8024eee:	d004      	beq.n	8024efa <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x296>
 8024ef0:	787a      	ldrb	r2, [r7, #1]
 8024ef2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024ef6:	0e06      	lsrs	r6, r0, #24
 8024ef8:	e6dd      	b.n	8024cb6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x52>
 8024efa:	f1bc 0f00 	cmp.w	ip, #0
 8024efe:	db40      	blt.n	8024f82 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x31e>
 8024f00:	45e2      	cmp	sl, ip
 8024f02:	dd3e      	ble.n	8024f82 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x31e>
 8024f04:	4676      	mov	r6, lr
 8024f06:	4670      	mov	r0, lr
 8024f08:	b1d9      	cbz	r1, 8024f42 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2de>
 8024f0a:	2d00      	cmp	r5, #0
 8024f0c:	db31      	blt.n	8024f72 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x30e>
 8024f0e:	45a8      	cmp	r8, r5
 8024f10:	dd2f      	ble.n	8024f72 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x30e>
 8024f12:	f817 2008 	ldrb.w	r2, [r7, r8]
 8024f16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024f1a:	9202      	str	r2, [sp, #8]
 8024f1c:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8024f20:	3501      	adds	r5, #1
 8024f22:	d423      	bmi.n	8024f6c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x308>
 8024f24:	45a8      	cmp	r8, r5
 8024f26:	dd21      	ble.n	8024f6c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x308>
 8024f28:	f1be 0f00 	cmp.w	lr, #0
 8024f2c:	d026      	beq.n	8024f7c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x318>
 8024f2e:	44b8      	add	r8, r7
 8024f30:	f898 5001 	ldrb.w	r5, [r8, #1]
 8024f34:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8024f38:	0e2f      	lsrs	r7, r5, #24
 8024f3a:	e6c6      	b.n	8024cca <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 8024f3c:	2600      	movs	r6, #0
 8024f3e:	4630      	mov	r0, r6
 8024f40:	e6b9      	b.n	8024cb6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x52>
 8024f42:	f1be 0f0f 	cmp.w	lr, #15
 8024f46:	d824      	bhi.n	8024f92 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8024f48:	fa1f f38e 	uxth.w	r3, lr
 8024f4c:	4688      	mov	r8, r1
 8024f4e:	468b      	mov	fp, r1
 8024f50:	468a      	mov	sl, r1
 8024f52:	e9cd 1101 	strd	r1, r1, [sp, #4]
 8024f56:	460d      	mov	r5, r1
 8024f58:	9100      	str	r1, [sp, #0]
 8024f5a:	460f      	mov	r7, r1
 8024f5c:	468c      	mov	ip, r1
 8024f5e:	e6d4      	b.n	8024d0a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 8024f60:	5d12      	ldrb	r2, [r2, r4]
 8024f62:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8024f66:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024f6a:	e7ba      	b.n	8024ee2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27e>
 8024f6c:	2700      	movs	r7, #0
 8024f6e:	463d      	mov	r5, r7
 8024f70:	e6ab      	b.n	8024cca <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 8024f72:	f04f 0c00 	mov.w	ip, #0
 8024f76:	f8cd c008 	str.w	ip, [sp, #8]
 8024f7a:	e7d1      	b.n	8024f20 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2bc>
 8024f7c:	4675      	mov	r5, lr
 8024f7e:	4677      	mov	r7, lr
 8024f80:	e6a7      	b.n	8024cd2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6e>
 8024f82:	4670      	mov	r0, lr
 8024f84:	4675      	mov	r5, lr
 8024f86:	f8cd e008 	str.w	lr, [sp, #8]
 8024f8a:	4677      	mov	r7, lr
 8024f8c:	46f4      	mov	ip, lr
 8024f8e:	4676      	mov	r6, lr
 8024f90:	e69f      	b.n	8024cd2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6e>
 8024f92:	4b04      	ldr	r3, [pc, #16]	; (8024fa4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x340>)
 8024f94:	4a04      	ldr	r2, [pc, #16]	; (8024fa8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x344>)
 8024f96:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8024f9a:	4804      	ldr	r0, [pc, #16]	; (8024fac <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x348>)
 8024f9c:	f004 f95a 	bl	8029254 <__assert_func>
 8024fa0:	fffff800 	.word	0xfffff800
 8024fa4:	0802c4f8 	.word	0x0802c4f8
 8024fa8:	0802cb70 	.word	0x0802cb70
 8024fac:	0802c67c 	.word	0x0802c67c

08024fb0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024fb4:	ed2d 8b08 	vpush	{d8-d11}
 8024fb8:	b0a3      	sub	sp, #140	; 0x8c
 8024fba:	901e      	str	r0, [sp, #120]	; 0x78
 8024fbc:	9111      	str	r1, [sp, #68]	; 0x44
 8024fbe:	9215      	str	r2, [sp, #84]	; 0x54
 8024fc0:	e9dd 4139 	ldrd	r4, r1, [sp, #228]	; 0xe4
 8024fc4:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8024fc6:	6860      	ldr	r0, [r4, #4]
 8024fc8:	e9dd 8b35 	ldrd	r8, fp, [sp, #212]	; 0xd4
 8024fcc:	fb00 1202 	mla	r2, r0, r2, r1
 8024fd0:	6820      	ldr	r0, [r4, #0]
 8024fd2:	46c1      	mov	r9, r8
 8024fd4:	eb00 0a42 	add.w	sl, r0, r2, lsl #1
 8024fd8:	46d8      	mov	r8, fp
 8024fda:	eeb0 aa40 	vmov.f32	s20, s0
 8024fde:	eef0 9a60 	vmov.f32	s19, s1
 8024fe2:	eeb0 9a41 	vmov.f32	s18, s2
 8024fe6:	eef0 8a62 	vmov.f32	s17, s5
 8024fea:	eeb0 8a43 	vmov.f32	s16, s6
 8024fee:	eef0 ba44 	vmov.f32	s23, s8
 8024ff2:	eeb0 ba64 	vmov.f32	s22, s9
 8024ff6:	eef0 aa45 	vmov.f32	s21, s10
 8024ffa:	46d3      	mov	fp, sl
 8024ffc:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8024ffe:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
 8025000:	6849      	ldr	r1, [r1, #4]
 8025002:	6824      	ldr	r4, [r4, #0]
 8025004:	1d0a      	adds	r2, r1, #4
 8025006:	940e      	str	r4, [sp, #56]	; 0x38
 8025008:	920b      	str	r2, [sp, #44]	; 0x2c
 802500a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802500c:	2a00      	cmp	r2, #0
 802500e:	dc02      	bgt.n	8025016 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8025010:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8025012:	2a00      	cmp	r2, #0
 8025014:	dd65      	ble.n	80250e2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8025016:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8025018:	2b00      	cmp	r3, #0
 802501a:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 802501e:	b234      	sxth	r4, r6
 8025020:	fa0f f78c 	sxth.w	r7, ip
 8025024:	f340 836d 	ble.w	8025702 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8025028:	1e65      	subs	r5, r4, #1
 802502a:	f107 3eff 	add.w	lr, r7, #4294967295
 802502e:	f8cd c01c 	str.w	ip, [sp, #28]
 8025032:	e9dd ca37 	ldrd	ip, sl, [sp, #220]	; 0xdc
 8025036:	ea5f 4229 	movs.w	r2, r9, asr #16
 802503a:	ea4f 4128 	mov.w	r1, r8, asr #16
 802503e:	d405      	bmi.n	802504c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025040:	42aa      	cmp	r2, r5
 8025042:	da03      	bge.n	802504c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025044:	2900      	cmp	r1, #0
 8025046:	db01      	blt.n	802504c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025048:	4571      	cmp	r1, lr
 802504a:	db4f      	blt.n	80250ec <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802504c:	1c50      	adds	r0, r2, #1
 802504e:	d406      	bmi.n	802505e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8025050:	42a0      	cmp	r0, r4
 8025052:	dc04      	bgt.n	802505e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8025054:	1c48      	adds	r0, r1, #1
 8025056:	d402      	bmi.n	802505e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8025058:	42b8      	cmp	r0, r7
 802505a:	f340 832f 	ble.w	80256bc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 802505e:	3b01      	subs	r3, #1
 8025060:	44e1      	add	r9, ip
 8025062:	44d0      	add	r8, sl
 8025064:	f10b 0b02 	add.w	fp, fp, #2
 8025068:	d1e5      	bne.n	8025036 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802506a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802506c:	2b00      	cmp	r3, #0
 802506e:	dd38      	ble.n	80250e2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8025070:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025074:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025078:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802507c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025080:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025084:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8025088:	ee69 7a27 	vmul.f32	s15, s18, s15
 802508c:	ee76 6a68 	vsub.f32	s13, s12, s17
 8025090:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8025094:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025098:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802509c:	ee16 2a90 	vmov	r2, s13
 80250a0:	3b01      	subs	r3, #1
 80250a2:	9311      	str	r3, [sp, #68]	; 0x44
 80250a4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80250a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80250aa:	ee17 2a10 	vmov	r2, s14
 80250ae:	eeb0 7a48 	vmov.f32	s14, s16
 80250b2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80250b6:	ee17 8a10 	vmov	r8, s14
 80250ba:	eeb0 7a68 	vmov.f32	s14, s17
 80250be:	9337      	str	r3, [sp, #220]	; 0xdc
 80250c0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80250c2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80250c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80250ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80250cc:	9338      	str	r3, [sp, #224]	; 0xe0
 80250ce:	ee17 9a10 	vmov	r9, s14
 80250d2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80250d4:	eeb0 8a67 	vmov.f32	s16, s15
 80250d8:	eef0 8a46 	vmov.f32	s17, s12
 80250dc:	bf08      	it	eq
 80250de:	4613      	moveq	r3, r2
 80250e0:	e793      	b.n	802500a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80250e2:	b023      	add	sp, #140	; 0x8c
 80250e4:	ecbd 8b08 	vpop	{d8-d11}
 80250e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80250ec:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80250f0:	f8cd b01c 	str.w	fp, [sp, #28]
 80250f4:	9837      	ldr	r0, [sp, #220]	; 0xdc
 80250f6:	1e59      	subs	r1, r3, #1
 80250f8:	fb00 9201 	mla	r2, r0, r1, r9
 80250fc:	1412      	asrs	r2, r2, #16
 80250fe:	910c      	str	r1, [sp, #48]	; 0x30
 8025100:	f100 815e 	bmi.w	80253c0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8025104:	42aa      	cmp	r2, r5
 8025106:	f280 815b 	bge.w	80253c0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 802510a:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 802510c:	fb02 8201 	mla	r2, r2, r1, r8
 8025110:	1412      	asrs	r2, r2, #16
 8025112:	f100 8155 	bmi.w	80253c0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8025116:	3f01      	subs	r7, #1
 8025118:	42ba      	cmp	r2, r7
 802511a:	f280 8151 	bge.w	80253c0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 802511e:	2b00      	cmp	r3, #0
 8025120:	dda3      	ble.n	802506a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8025122:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8025126:	4621      	mov	r1, r4
 8025128:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 802512c:	f8cd 90d4 	str.w	r9, [sp, #212]	; 0xd4
 8025130:	464a      	mov	r2, r9
 8025132:	464c      	mov	r4, r9
 8025134:	e122      	b.n	802537c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025136:	f893 c001 	ldrb.w	ip, [r3, #1]
 802513a:	f856 502c 	ldr.w	r5, [r6, ip, lsl #2]
 802513e:	950f      	str	r5, [sp, #60]	; 0x3c
 8025140:	0e2d      	lsrs	r5, r5, #24
 8025142:	9508      	str	r5, [sp, #32]
 8025144:	b162      	cbz	r2, 8025160 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8025146:	185d      	adds	r5, r3, r1
 8025148:	786d      	ldrb	r5, [r5, #1]
 802514a:	5c5b      	ldrb	r3, [r3, r1]
 802514c:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8025150:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025154:	9112      	str	r1, [sp, #72]	; 0x48
 8025156:	9310      	str	r3, [sp, #64]	; 0x40
 8025158:	0e09      	lsrs	r1, r1, #24
 802515a:	0e1b      	lsrs	r3, r3, #24
 802515c:	910a      	str	r1, [sp, #40]	; 0x28
 802515e:	9309      	str	r3, [sp, #36]	; 0x24
 8025160:	b2a4      	uxth	r4, r4
 8025162:	b292      	uxth	r2, r2
 8025164:	fb04 f502 	mul.w	r5, r4, r2
 8025168:	0124      	lsls	r4, r4, #4
 802516a:	1b66      	subs	r6, r4, r5
 802516c:	9b08      	ldr	r3, [sp, #32]
 802516e:	b2b6      	uxth	r6, r6
 8025170:	fb06 f103 	mul.w	r1, r6, r3
 8025174:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8025178:	b292      	uxth	r2, r2
 802517a:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 802517e:	1a9b      	subs	r3, r3, r2
 8025180:	b29b      	uxth	r3, r3
 8025182:	fb03 1100 	mla	r1, r3, r0, r1
 8025186:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025188:	fb02 1104 	mla	r1, r2, r4, r1
 802518c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802518e:	fb05 1104 	mla	r1, r5, r4, r1
 8025192:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025196:	2900      	cmp	r1, #0
 8025198:	f000 80df 	beq.w	802535a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802519c:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 80251a0:	28ff      	cmp	r0, #255	; 0xff
 80251a2:	940c      	str	r4, [sp, #48]	; 0x30
 80251a4:	f407 497f 	and.w	r9, r7, #65280	; 0xff00
 80251a8:	d01a      	beq.n	80251e0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80251aa:	fb04 f400 	mul.w	r4, r4, r0
 80251ae:	4627      	mov	r7, r4
 80251b0:	fb09 fc00 	mul.w	ip, r9, r0
 80251b4:	0a24      	lsrs	r4, r4, #8
 80251b6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80251ba:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80251be:	f50c 7080 	add.w	r0, ip, #256	; 0x100
 80251c2:	4427      	add	r7, r4
 80251c4:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 80251c8:	0a3f      	lsrs	r7, r7, #8
 80251ca:	0a00      	lsrs	r0, r0, #8
 80251cc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80251d0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80251d4:	4307      	orrs	r7, r0
 80251d6:	f007 10ff 	and.w	r0, r7, #16711935	; 0xff00ff
 80251da:	900c      	str	r0, [sp, #48]	; 0x30
 80251dc:	f407 497f 	and.w	r9, r7, #65280	; 0xff00
 80251e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80251e2:	f000 17ff 	and.w	r7, r0, #16711935	; 0xff00ff
 80251e6:	f400 4c7f 	and.w	ip, r0, #65280	; 0xff00
 80251ea:	9808      	ldr	r0, [sp, #32]
 80251ec:	28ff      	cmp	r0, #255	; 0xff
 80251ee:	d01a      	beq.n	8025226 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80251f0:	fb07 f700 	mul.w	r7, r7, r0
 80251f4:	fb0c fc00 	mul.w	ip, ip, r0
 80251f8:	0a3c      	lsrs	r4, r7, #8
 80251fa:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80251fe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025202:	f50c 7080 	add.w	r0, ip, #256	; 0x100
 8025206:	4427      	add	r7, r4
 8025208:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 802520c:	0a3f      	lsrs	r7, r7, #8
 802520e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025212:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025216:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802521a:	ea47 0c0c 	orr.w	ip, r7, ip
 802521e:	f00c 17ff 	and.w	r7, ip, #16711935	; 0xff00ff
 8025222:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025226:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025228:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 802522c:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 8025230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025232:	28ff      	cmp	r0, #255	; 0xff
 8025234:	d01c      	beq.n	8025270 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 8025236:	fb0e fe00 	mul.w	lr, lr, r0
 802523a:	fb0a fa00 	mul.w	sl, sl, r0
 802523e:	ea4f 241e 	mov.w	r4, lr, lsr #8
 8025242:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025246:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802524a:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802524e:	44a6      	add	lr, r4
 8025250:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8025254:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025258:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802525c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025260:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025264:	ea4e 0a0a 	orr.w	sl, lr, sl
 8025268:	f00a 1eff 	and.w	lr, sl, #16711935	; 0xff00ff
 802526c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025270:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025272:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8025276:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802527a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802527c:	2cff      	cmp	r4, #255	; 0xff
 802527e:	d01d      	beq.n	80252bc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8025280:	fb00 f004 	mul.w	r0, r0, r4
 8025284:	fb0b fb04 	mul.w	fp, fp, r4
 8025288:	0a04      	lsrs	r4, r0, #8
 802528a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802528e:	9414      	str	r4, [sp, #80]	; 0x50
 8025290:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 8025294:	9413      	str	r4, [sp, #76]	; 0x4c
 8025296:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025298:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802529c:	4420      	add	r0, r4
 802529e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80252a0:	0a00      	lsrs	r0, r0, #8
 80252a2:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 80252a6:	0a24      	lsrs	r4, r4, #8
 80252a8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80252ac:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80252b0:	ea40 0b0b 	orr.w	fp, r0, fp
 80252b4:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 80252b8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80252bc:	43c9      	mvns	r1, r1
 80252be:	fb07 f706 	mul.w	r7, r7, r6
 80252c2:	fb0c f606 	mul.w	r6, ip, r6
 80252c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80252c8:	fb09 6603 	mla	r6, r9, r3, r6
 80252cc:	fb04 7703 	mla	r7, r4, r3, r7
 80252d0:	9b07      	ldr	r3, [sp, #28]
 80252d2:	fb0e 7702 	mla	r7, lr, r2, r7
 80252d6:	fb0a 6602 	mla	r6, sl, r2, r6
 80252da:	f8b3 e000 	ldrh.w	lr, [r3]
 80252de:	b2c9      	uxtb	r1, r1
 80252e0:	ea4f 242e 	mov.w	r4, lr, asr #8
 80252e4:	fb00 7005 	mla	r0, r0, r5, r7
 80252e8:	fb0b 6605 	mla	r6, fp, r5, r6
 80252ec:	ea4f 09ee 	mov.w	r9, lr, asr #3
 80252f0:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80252f4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80252f8:	fb04 f401 	mul.w	r4, r4, r1
 80252fc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8025300:	fa5f fe8e 	uxtb.w	lr, lr
 8025304:	fb09 f901 	mul.w	r9, r9, r1
 8025308:	fb0e f101 	mul.w	r1, lr, r1
 802530c:	0a00      	lsrs	r0, r0, #8
 802530e:	0a36      	lsrs	r6, r6, #8
 8025310:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8025314:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025318:	1c62      	adds	r2, r4, #1
 802531a:	ea40 0306 	orr.w	r3, r0, r6
 802531e:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8025322:	f109 0001 	add.w	r0, r9, #1
 8025326:	1c4a      	adds	r2, r1, #1
 8025328:	0c1e      	lsrs	r6, r3, #16
 802532a:	f3c3 2507 	ubfx	r5, r3, #8, #8
 802532e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025332:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8025336:	4a21      	ldr	r2, [pc, #132]	; (80253bc <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40c>)
 8025338:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 802533c:	b2db      	uxtb	r3, r3
 802533e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025342:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025346:	ea02 2404 	and.w	r4, r2, r4, lsl #8
 802534a:	00c0      	lsls	r0, r0, #3
 802534c:	ea44 04d3 	orr.w	r4, r4, r3, lsr #3
 8025350:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025354:	9b07      	ldr	r3, [sp, #28]
 8025356:	4320      	orrs	r0, r4
 8025358:	8018      	strh	r0, [r3, #0]
 802535a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802535c:	9937      	ldr	r1, [sp, #220]	; 0xdc
 802535e:	9b07      	ldr	r3, [sp, #28]
 8025360:	440a      	add	r2, r1
 8025362:	9235      	str	r2, [sp, #212]	; 0xd4
 8025364:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8025366:	3302      	adds	r3, #2
 8025368:	4490      	add	r8, r2
 802536a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802536c:	9307      	str	r3, [sp, #28]
 802536e:	4293      	cmp	r3, r2
 8025370:	d022      	beq.n	80253b8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8025372:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8025374:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8025376:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802537a:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 802537c:	1412      	asrs	r2, r2, #16
 802537e:	ea4f 4328 	mov.w	r3, r8, asr #16
 8025382:	fb01 2303 	mla	r3, r1, r3, r2
 8025386:	980e      	ldr	r0, [sp, #56]	; 0x38
 8025388:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802538a:	5cc2      	ldrb	r2, [r0, r3]
 802538c:	f3c4 3403 	ubfx	r4, r4, #12, #4
 8025390:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8025394:	4403      	add	r3, r0
 8025396:	f3c8 3203 	ubfx	r2, r8, #12, #4
 802539a:	0e38      	lsrs	r0, r7, #24
 802539c:	2c00      	cmp	r4, #0
 802539e:	f47f aeca 	bne.w	8025136 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80253a2:	2a00      	cmp	r2, #0
 80253a4:	f43f aedc 	beq.w	8025160 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80253a8:	5c5b      	ldrb	r3, [r3, r1]
 80253aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80253ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80253b0:	9310      	str	r3, [sp, #64]	; 0x40
 80253b2:	0e1b      	lsrs	r3, r3, #24
 80253b4:	9309      	str	r3, [sp, #36]	; 0x24
 80253b6:	e6d3      	b.n	8025160 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80253b8:	4693      	mov	fp, r2
 80253ba:	e656      	b.n	802506a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80253bc:	fffff800 	.word	0xfffff800
 80253c0:	2b00      	cmp	r3, #0
 80253c2:	f77f ae52 	ble.w	802506a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80253c6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80253ca:	ea4f 4229 	mov.w	r2, r9, asr #16
 80253ce:	ea4f 4128 	mov.w	r1, r8, asr #16
 80253d2:	2a00      	cmp	r2, #0
 80253d4:	465f      	mov	r7, fp
 80253d6:	f8cd b01c 	str.w	fp, [sp, #28]
 80253da:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
 80253dc:	e9dd b337 	ldrd	fp, r3, [sp, #220]	; 0xdc
 80253e0:	f3c9 3003 	ubfx	r0, r9, #12, #4
 80253e4:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 80253e8:	f2c0 8147 	blt.w	802567a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 80253ec:	1e73      	subs	r3, r6, #1
 80253ee:	429a      	cmp	r2, r3
 80253f0:	f280 8143 	bge.w	802567a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 80253f4:	2900      	cmp	r1, #0
 80253f6:	f2c0 8140 	blt.w	802567a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 80253fa:	f10c 33ff 	add.w	r3, ip, #4294967295
 80253fe:	4299      	cmp	r1, r3
 8025400:	f280 813b 	bge.w	802567a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8025404:	b236      	sxth	r6, r6
 8025406:	fb01 2106 	mla	r1, r1, r6, r2
 802540a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802540c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802540e:	5c53      	ldrb	r3, [r2, r1]
 8025410:	4411      	add	r1, r2
 8025412:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8025416:	910d      	str	r1, [sp, #52]	; 0x34
 8025418:	0e13      	lsrs	r3, r2, #24
 802541a:	2800      	cmp	r0, #0
 802541c:	f000 8154 	beq.w	80256c8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8025420:	f891 c001 	ldrb.w	ip, [r1, #1]
 8025424:	9513      	str	r5, [sp, #76]	; 0x4c
 8025426:	f855 102c 	ldr.w	r1, [r5, ip, lsl #2]
 802542a:	911f      	str	r1, [sp, #124]	; 0x7c
 802542c:	0e09      	lsrs	r1, r1, #24
 802542e:	9116      	str	r1, [sp, #88]	; 0x58
 8025430:	f1be 0f00 	cmp.w	lr, #0
 8025434:	f040 8153 	bne.w	80256de <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8025438:	b286      	uxth	r6, r0
 802543a:	fa1f fc8e 	uxth.w	ip, lr
 802543e:	fb06 f00c 	mul.w	r0, r6, ip
 8025442:	0136      	lsls	r6, r6, #4
 8025444:	1a31      	subs	r1, r6, r0
 8025446:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8025448:	b289      	uxth	r1, r1
 802544a:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802544e:	9113      	str	r1, [sp, #76]	; 0x4c
 8025450:	fb01 f105 	mul.w	r1, r1, r5
 8025454:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 8025458:	fa1f f58c 	uxth.w	r5, ip
 802545c:	1b76      	subs	r6, r6, r5
 802545e:	b2b6      	uxth	r6, r6
 8025460:	fb06 1c03 	mla	ip, r6, r3, r1
 8025464:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8025466:	9514      	str	r5, [sp, #80]	; 0x50
 8025468:	fb05 cc01 	mla	ip, r5, r1, ip
 802546c:	9918      	ldr	r1, [sp, #96]	; 0x60
 802546e:	9619      	str	r6, [sp, #100]	; 0x64
 8025470:	fb00 cc01 	mla	ip, r0, r1, ip
 8025474:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8025478:	f1bc 0f00 	cmp.w	ip, #0
 802547c:	f000 80e6 	beq.w	802564c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8025480:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 8025484:	2bff      	cmp	r3, #255	; 0xff
 8025486:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802548a:	911a      	str	r1, [sp, #104]	; 0x68
 802548c:	921b      	str	r2, [sp, #108]	; 0x6c
 802548e:	d01b      	beq.n	80254c8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8025490:	fb02 f203 	mul.w	r2, r2, r3
 8025494:	fb01 f103 	mul.w	r1, r1, r3
 8025498:	4613      	mov	r3, r2
 802549a:	0a0a      	lsrs	r2, r1, #8
 802549c:	f101 1601 	add.w	r6, r1, #65537	; 0x10001
 80254a0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80254a4:	f503 7180 	add.w	r1, r3, #256	; 0x100
 80254a8:	4432      	add	r2, r6
 80254aa:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80254ae:	0a12      	lsrs	r2, r2, #8
 80254b0:	0a1b      	lsrs	r3, r3, #8
 80254b2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80254b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80254ba:	4313      	orrs	r3, r2
 80254bc:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 80254c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80254c4:	921a      	str	r2, [sp, #104]	; 0x68
 80254c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80254c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80254ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80254cc:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 80254d0:	2aff      	cmp	r2, #255	; 0xff
 80254d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80254d6:	931c      	str	r3, [sp, #112]	; 0x70
 80254d8:	d01b      	beq.n	8025512 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 80254da:	fb03 f302 	mul.w	r3, r3, r2
 80254de:	461e      	mov	r6, r3
 80254e0:	fb01 f102 	mul.w	r1, r1, r2
 80254e4:	0a0a      	lsrs	r2, r1, #8
 80254e6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80254ea:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 80254ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80254f2:	440a      	add	r2, r1
 80254f4:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 80254f8:	0a12      	lsrs	r2, r2, #8
 80254fa:	0a1b      	lsrs	r3, r3, #8
 80254fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025500:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025504:	ea42 0603 	orr.w	r6, r2, r3
 8025508:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 802550c:	f006 11ff 	and.w	r1, r6, #16711935	; 0xff00ff
 8025510:	931c      	str	r3, [sp, #112]	; 0x70
 8025512:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025514:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8025516:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802551a:	2aff      	cmp	r2, #255	; 0xff
 802551c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025520:	931d      	str	r3, [sp, #116]	; 0x74
 8025522:	d01b      	beq.n	802555c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 8025524:	fb03 f302 	mul.w	r3, r3, r2
 8025528:	fb06 f602 	mul.w	r6, r6, r2
 802552c:	461a      	mov	r2, r3
 802552e:	0a33      	lsrs	r3, r6, #8
 8025530:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8025534:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8025538:	f502 7380 	add.w	r3, r2, #256	; 0x100
 802553c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025540:	4476      	add	r6, lr
 8025542:	0a36      	lsrs	r6, r6, #8
 8025544:	0a1b      	lsrs	r3, r3, #8
 8025546:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802554a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802554e:	ea46 0203 	orr.w	r2, r6, r3
 8025552:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 8025556:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802555a:	931d      	str	r3, [sp, #116]	; 0x74
 802555c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802555e:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025562:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8025566:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025568:	930d      	str	r3, [sp, #52]	; 0x34
 802556a:	2aff      	cmp	r2, #255	; 0xff
 802556c:	d01b      	beq.n	80255a6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 802556e:	fb03 f302 	mul.w	r3, r3, r2
 8025572:	fb0e fe02 	mul.w	lr, lr, r2
 8025576:	0a1a      	lsrs	r2, r3, #8
 8025578:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802557c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8025580:	f50e 7580 	add.w	r5, lr, #256	; 0x100
 8025584:	441a      	add	r2, r3
 8025586:	eb05 2e1e 	add.w	lr, r5, lr, lsr #8
 802558a:	0a12      	lsrs	r2, r2, #8
 802558c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025590:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025594:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025598:	ea42 0e0e 	orr.w	lr, r2, lr
 802559c:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80255a0:	930d      	str	r3, [sp, #52]	; 0x34
 80255a2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80255a6:	ea6f 0c0c 	mvn.w	ip, ip
 80255aa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80255ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80255ae:	fb01 f305 	mul.w	r3, r1, r5
 80255b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80255b4:	fa5f fc8c 	uxtb.w	ip, ip
 80255b8:	fb01 f105 	mul.w	r1, r1, r5
 80255bc:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80255be:	fb02 3305 	mla	r3, r2, r5, r3
 80255c2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80255c4:	fb02 1105 	mla	r1, r2, r5, r1
 80255c8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80255ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80255cc:	fb06 3605 	mla	r6, r6, r5, r3
 80255d0:	fb02 1205 	mla	r2, r2, r5, r1
 80255d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80255d6:	8839      	ldrh	r1, [r7, #0]
 80255d8:	fb03 6300 	mla	r3, r3, r0, r6
 80255dc:	fb0e 2e00 	mla	lr, lr, r0, r2
 80255e0:	10c8      	asrs	r0, r1, #3
 80255e2:	120a      	asrs	r2, r1, #8
 80255e4:	f000 06fc 	and.w	r6, r0, #252	; 0xfc
 80255e8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80255ec:	00c9      	lsls	r1, r1, #3
 80255ee:	fb02 f20c 	mul.w	r2, r2, ip
 80255f2:	fb06 f60c 	mul.w	r6, r6, ip
 80255f6:	b2c9      	uxtb	r1, r1
 80255f8:	fb01 f00c 	mul.w	r0, r1, ip
 80255fc:	0a1b      	lsrs	r3, r3, #8
 80255fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025602:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8025606:	f40e 437f 	and.w	r3, lr, #65280	; 0xff00
 802560a:	430b      	orrs	r3, r1
 802560c:	f106 0e01 	add.w	lr, r6, #1
 8025610:	1c51      	adds	r1, r2, #1
 8025612:	0c1d      	lsrs	r5, r3, #16
 8025614:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025618:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802561c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8025620:	fa5f fe83 	uxtb.w	lr, r3
 8025624:	f100 0c01 	add.w	ip, r0, #1
 8025628:	4b39      	ldr	r3, [pc, #228]	; (8025710 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>)
 802562a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802562e:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8025632:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8025636:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 802563a:	00c9      	lsls	r1, r1, #3
 802563c:	eb0e 2310 	add.w	r3, lr, r0, lsr #8
 8025640:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 8025644:	f401 62fc 	and.w	r2, r1, #2016	; 0x7e0
 8025648:	4313      	orrs	r3, r2
 802564a:	803b      	strh	r3, [r7, #0]
 802564c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802564e:	f1ba 0f00 	cmp.w	sl, #0
 8025652:	f107 0702 	add.w	r7, r7, #2
 8025656:	44d9      	add	r9, fp
 8025658:	4498      	add	r8, r3
 802565a:	dd26      	ble.n	80256aa <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802565c:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8025660:	ea4f 4229 	mov.w	r2, r9, asr #16
 8025664:	2a00      	cmp	r2, #0
 8025666:	f10a 3aff 	add.w	sl, sl, #4294967295
 802566a:	ea4f 4128 	mov.w	r1, r8, asr #16
 802566e:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8025672:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 8025676:	f6bf aeb9 	bge.w	80253ec <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 802567a:	1c53      	adds	r3, r2, #1
 802567c:	d4e6      	bmi.n	802564c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 802567e:	42b3      	cmp	r3, r6
 8025680:	dce4      	bgt.n	802564c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8025682:	1c4b      	adds	r3, r1, #1
 8025684:	d4e2      	bmi.n	802564c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8025686:	4563      	cmp	r3, ip
 8025688:	dce0      	bgt.n	802564c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 802568a:	fa0f f38c 	sxth.w	r3, ip
 802568e:	b236      	sxth	r6, r6
 8025690:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8025694:	e9cd 6300 	strd	r6, r3, [sp]
 8025698:	e9cd 0e04 	strd	r0, lr, [sp, #16]
 802569c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802569e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80256a0:	4639      	mov	r1, r7
 80256a2:	981e      	ldr	r0, [sp, #120]	; 0x78
 80256a4:	f7ff fade 	bl	8024c64 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80256a8:	e7d0      	b.n	802564c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80256aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80256ac:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80256b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80256b4:	3301      	adds	r3, #1
 80256b6:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 80256ba:	e4d6      	b.n	802506a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80256bc:	3b01      	subs	r3, #1
 80256be:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80256c2:	930c      	str	r3, [sp, #48]	; 0x30
 80256c4:	469a      	mov	sl, r3
 80256c6:	e684      	b.n	80253d2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x422>
 80256c8:	f1be 0f00 	cmp.w	lr, #0
 80256cc:	f43f aeb4 	beq.w	8025438 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80256d0:	5d89      	ldrb	r1, [r1, r6]
 80256d2:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80256d6:	9120      	str	r1, [sp, #128]	; 0x80
 80256d8:	0e09      	lsrs	r1, r1, #24
 80256da:	9117      	str	r1, [sp, #92]	; 0x5c
 80256dc:	e6ac      	b.n	8025438 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80256de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80256e0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80256e2:	eb01 0c06 	add.w	ip, r1, r6
 80256e6:	f89c c001 	ldrb.w	ip, [ip, #1]
 80256ea:	5d89      	ldrb	r1, [r1, r6]
 80256ec:	f855 602c 	ldr.w	r6, [r5, ip, lsl #2]
 80256f0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80256f4:	0e35      	lsrs	r5, r6, #24
 80256f6:	9120      	str	r1, [sp, #128]	; 0x80
 80256f8:	0e09      	lsrs	r1, r1, #24
 80256fa:	9621      	str	r6, [sp, #132]	; 0x84
 80256fc:	9518      	str	r5, [sp, #96]	; 0x60
 80256fe:	9117      	str	r1, [sp, #92]	; 0x5c
 8025700:	e69a      	b.n	8025438 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8025702:	f43f acb2 	beq.w	802506a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8025706:	1e65      	subs	r5, r4, #1
 8025708:	f8cd b01c 	str.w	fp, [sp, #28]
 802570c:	e4f2      	b.n	80250f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 802570e:	bf00      	nop
 8025710:	fffff800 	.word	0xfffff800

08025714 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8025714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025718:	b08b      	sub	sp, #44	; 0x2c
 802571a:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
 802571e:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 8025722:	ea6f 0b00 	mvn.w	fp, r0
 8025726:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025728:	f9bd 5050 	ldrsh.w	r5, [sp, #80]	; 0x50
 802572c:	9005      	str	r0, [sp, #20]
 802572e:	fb0c 4805 	mla	r8, ip, r5, r4
 8025732:	7848      	ldrb	r0, [r1, #1]
 8025734:	788e      	ldrb	r6, [r1, #2]
 8025736:	0204      	lsls	r4, r0, #8
 8025738:	780f      	ldrb	r7, [r1, #0]
 802573a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 802573e:	9306      	str	r3, [sp, #24]
 8025740:	fa5f f38b 	uxtb.w	r3, fp
 8025744:	433c      	orrs	r4, r7
 8025746:	9304      	str	r3, [sp, #16]
 8025748:	f1bc 0f00 	cmp.w	ip, #0
 802574c:	eb02 0308 	add.w	r3, r2, r8
 8025750:	9003      	str	r0, [sp, #12]
 8025752:	9602      	str	r6, [sp, #8]
 8025754:	9307      	str	r3, [sp, #28]
 8025756:	9409      	str	r4, [sp, #36]	; 0x24
 8025758:	f10c 0601 	add.w	r6, ip, #1
 802575c:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 8025760:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8025764:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 8025768:	db02      	blt.n	8025770 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x5c>
 802576a:	45e6      	cmp	lr, ip
 802576c:	f300 80a0 	bgt.w	80258b0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x19c>
 8025770:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8025774:	46e0      	mov	r8, ip
 8025776:	fa5f fb84 	uxtb.w	fp, r4
 802577a:	f8cd b004 	str.w	fp, [sp, #4]
 802577e:	2e00      	cmp	r6, #0
 8025780:	db01      	blt.n	8025786 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x72>
 8025782:	45b6      	cmp	lr, r6
 8025784:	dc73      	bgt.n	802586e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x15a>
 8025786:	fa5f fa84 	uxtb.w	sl, r4
 802578a:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 802578e:	4654      	mov	r4, sl
 8025790:	46f1      	mov	r9, lr
 8025792:	2b0f      	cmp	r3, #15
 8025794:	f200 80cb 	bhi.w	802592e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x21a>
 8025798:	280f      	cmp	r0, #15
 802579a:	f200 80c8 	bhi.w	802592e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x21a>
 802579e:	b29b      	uxth	r3, r3
 80257a0:	b280      	uxth	r0, r0
 80257a2:	fb03 f600 	mul.w	r6, r3, r0
 80257a6:	011b      	lsls	r3, r3, #4
 80257a8:	1b9d      	subs	r5, r3, r6
 80257aa:	9a01      	ldr	r2, [sp, #4]
 80257ac:	b2ad      	uxth	r5, r5
 80257ae:	ebc6 1000 	rsb	r0, r6, r0, lsl #4
 80257b2:	fb05 f202 	mul.w	r2, r5, r2
 80257b6:	b280      	uxth	r0, r0
 80257b8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80257bc:	1a1b      	subs	r3, r3, r0
 80257be:	b29b      	uxth	r3, r3
 80257c0:	fb03 220b 	mla	r2, r3, fp, r2
 80257c4:	fb00 2a0a 	mla	sl, r0, sl, r2
 80257c8:	f8bd b010 	ldrh.w	fp, [sp, #16]
 80257cc:	fb06 a404 	mla	r4, r6, r4, sl
 80257d0:	fb17 f70b 	smulbb	r7, r7, fp
 80257d4:	f8bd a014 	ldrh.w	sl, [sp, #20]
 80257d8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80257dc:	fb04 770a 	mla	r7, r4, sl, r7
 80257e0:	b2bf      	uxth	r7, r7
 80257e2:	1c7a      	adds	r2, r7, #1
 80257e4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80257e8:	123f      	asrs	r7, r7, #8
 80257ea:	700f      	strb	r7, [r1, #0]
 80257ec:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80257f0:	f898 7001 	ldrb.w	r7, [r8, #1]
 80257f4:	fb05 f204 	mul.w	r2, r5, r4
 80257f8:	fb03 2407 	mla	r4, r3, r7, r2
 80257fc:	f899 2001 	ldrb.w	r2, [r9, #1]
 8025800:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8025804:	fb00 4202 	mla	r2, r0, r2, r4
 8025808:	9c03      	ldr	r4, [sp, #12]
 802580a:	fb06 2207 	mla	r2, r6, r7, r2
 802580e:	fb14 f40b 	smulbb	r4, r4, fp
 8025812:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025816:	fb02 420a 	mla	r2, r2, sl, r4
 802581a:	b292      	uxth	r2, r2
 802581c:	1c54      	adds	r4, r2, #1
 802581e:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8025822:	1212      	asrs	r2, r2, #8
 8025824:	704a      	strb	r2, [r1, #1]
 8025826:	f89c 4002 	ldrb.w	r4, [ip, #2]
 802582a:	f898 2002 	ldrb.w	r2, [r8, #2]
 802582e:	fb05 f504 	mul.w	r5, r5, r4
 8025832:	fb03 5502 	mla	r5, r3, r2, r5
 8025836:	f899 4002 	ldrb.w	r4, [r9, #2]
 802583a:	f89e 2002 	ldrb.w	r2, [lr, #2]
 802583e:	fb00 5004 	mla	r0, r0, r4, r5
 8025842:	9b02      	ldr	r3, [sp, #8]
 8025844:	fb06 0602 	mla	r6, r6, r2, r0
 8025848:	fb13 fb0b 	smulbb	fp, r3, fp
 802584c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025850:	fb06 ba0a 	mla	sl, r6, sl, fp
 8025854:	fa1f fa8a 	uxth.w	sl, sl
 8025858:	f10a 0b01 	add.w	fp, sl, #1
 802585c:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8025860:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8025864:	f881 a002 	strb.w	sl, [r1, #2]
 8025868:	b00b      	add	sp, #44	; 0x2c
 802586a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802586e:	2800      	cmp	r0, #0
 8025870:	d089      	beq.n	8025786 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x72>
 8025872:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8025874:	2e00      	cmp	r6, #0
 8025876:	db47      	blt.n	8025908 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1f4>
 8025878:	42b5      	cmp	r5, r6
 802587a:	dd45      	ble.n	8025908 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1f4>
 802587c:	9a07      	ldr	r2, [sp, #28]
 802587e:	f812 9005 	ldrb.w	r9, [r2, r5]
 8025882:	9a06      	ldr	r2, [sp, #24]
 8025884:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8025888:	4491      	add	r9, r2
 802588a:	3601      	adds	r6, #1
 802588c:	f899 a000 	ldrb.w	sl, [r9]
 8025890:	d436      	bmi.n	8025900 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ec>
 8025892:	42b5      	cmp	r5, r6
 8025894:	dd34      	ble.n	8025900 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ec>
 8025896:	2b00      	cmp	r3, #0
 8025898:	d045      	beq.n	8025926 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x212>
 802589a:	9a07      	ldr	r2, [sp, #28]
 802589c:	442a      	add	r2, r5
 802589e:	f892 e001 	ldrb.w	lr, [r2, #1]
 80258a2:	9a06      	ldr	r2, [sp, #24]
 80258a4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80258a8:	f812 400e 	ldrb.w	r4, [r2, lr]
 80258ac:	4496      	add	lr, r2
 80258ae:	e770      	b.n	8025792 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7e>
 80258b0:	4691      	mov	r9, r2
 80258b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80258b4:	2a00      	cmp	r2, #0
 80258b6:	db01      	blt.n	80258bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1a8>
 80258b8:	4295      	cmp	r5, r2
 80258ba:	dc19      	bgt.n	80258f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>
 80258bc:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 80258c0:	3201      	adds	r2, #1
 80258c2:	f898 b000 	ldrb.w	fp, [r8]
 80258c6:	d40e      	bmi.n	80258e6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d2>
 80258c8:	4295      	cmp	r5, r2
 80258ca:	dd0c      	ble.n	80258e6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d2>
 80258cc:	b1fb      	cbz	r3, 802590e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1fa>
 80258ce:	9a07      	ldr	r2, [sp, #28]
 80258d0:	f892 c001 	ldrb.w	ip, [r2, #1]
 80258d4:	9a06      	ldr	r2, [sp, #24]
 80258d6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80258da:	f812 200c 	ldrb.w	r2, [r2, ip]
 80258de:	9201      	str	r2, [sp, #4]
 80258e0:	9a06      	ldr	r2, [sp, #24]
 80258e2:	4494      	add	ip, r2
 80258e4:	e74b      	b.n	802577e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6a>
 80258e6:	b2e2      	uxtb	r2, r4
 80258e8:	9201      	str	r2, [sp, #4]
 80258ea:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 80258ee:	e746      	b.n	802577e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6a>
 80258f0:	f819 8008 	ldrb.w	r8, [r9, r8]
 80258f4:	9a06      	ldr	r2, [sp, #24]
 80258f6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80258fa:	4490      	add	r8, r2
 80258fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80258fe:	e7df      	b.n	80258c0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ac>
 8025900:	b2e4      	uxtb	r4, r4
 8025902:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 8025906:	e744      	b.n	8025792 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7e>
 8025908:	f10d 0924 	add.w	r9, sp, #36	; 0x24
 802590c:	e7bd      	b.n	802588a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x176>
 802590e:	b2e2      	uxtb	r2, r4
 8025910:	2e00      	cmp	r6, #0
 8025912:	9201      	str	r2, [sp, #4]
 8025914:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8025918:	f6bf af33 	bge.w	8025782 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6e>
 802591c:	46e6      	mov	lr, ip
 802591e:	46e1      	mov	r9, ip
 8025920:	4692      	mov	sl, r2
 8025922:	4614      	mov	r4, r2
 8025924:	e738      	b.n	8025798 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x84>
 8025926:	b2e4      	uxtb	r4, r4
 8025928:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 802592c:	e734      	b.n	8025798 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x84>
 802592e:	4b03      	ldr	r3, [pc, #12]	; (802593c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x228>)
 8025930:	4a03      	ldr	r2, [pc, #12]	; (8025940 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x22c>)
 8025932:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8025936:	4803      	ldr	r0, [pc, #12]	; (8025944 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x230>)
 8025938:	f003 fc8c 	bl	8029254 <__assert_func>
 802593c:	0802c4f8 	.word	0x0802c4f8
 8025940:	0802cb70 	.word	0x0802cb70
 8025944:	0802c67c 	.word	0x0802c67c

08025948 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802594c:	ed2d 8b08 	vpush	{d8-d11}
 8025950:	b097      	sub	sp, #92	; 0x5c
 8025952:	f89d 60c4 	ldrb.w	r6, [sp, #196]	; 0xc4
 8025956:	eeb0 aa40 	vmov.f32	s20, s0
 802595a:	e9dd b729 	ldrd	fp, r7, [sp, #164]	; 0xa4
 802595e:	e9cd 0614 	strd	r0, r6, [sp, #80]	; 0x50
 8025962:	43f0      	mvns	r0, r6
 8025964:	eef0 9a60 	vmov.f32	s19, s1
 8025968:	eeb0 9a41 	vmov.f32	s18, s2
 802596c:	eef0 8a62 	vmov.f32	s17, s5
 8025970:	eeb0 8a43 	vmov.f32	s16, s6
 8025974:	eef0 ba44 	vmov.f32	s23, s8
 8025978:	eeb0 ba64 	vmov.f32	s22, s9
 802597c:	eef0 aa45 	vmov.f32	s21, s10
 8025980:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8025984:	e9dd 512d 	ldrd	r5, r1, [sp, #180]	; 0xb4
 8025988:	461a      	mov	r2, r3
 802598a:	686c      	ldr	r4, [r5, #4]
 802598c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802598e:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
 8025992:	fb04 1303 	mla	r3, r4, r3, r1
 8025996:	9c30      	ldr	r4, [sp, #192]	; 0xc0
 8025998:	6829      	ldr	r1, [r5, #0]
 802599a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802599e:	6865      	ldr	r5, [r4, #4]
 80259a0:	eb01 0a03 	add.w	sl, r1, r3
 80259a4:	b2c3      	uxtb	r3, r0
 80259a6:	6824      	ldr	r4, [r4, #0]
 80259a8:	9309      	str	r3, [sp, #36]	; 0x24
 80259aa:	1d2b      	adds	r3, r5, #4
 80259ac:	930a      	str	r3, [sp, #40]	; 0x28
 80259ae:	b2b3      	uxth	r3, r6
 80259b0:	940d      	str	r4, [sp, #52]	; 0x34
 80259b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80259b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80259b6:	2b00      	cmp	r3, #0
 80259b8:	dc02      	bgt.n	80259c0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80259ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80259bc:	2b00      	cmp	r3, #0
 80259be:	dd63      	ble.n	8025a88 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80259c0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80259c2:	2a00      	cmp	r2, #0
 80259c4:	e9d3 6e02 	ldrd	r6, lr, [r3, #8]
 80259c8:	b234      	sxth	r4, r6
 80259ca:	fa0f fc8e 	sxth.w	ip, lr
 80259ce:	f340 825b 	ble.w	8025e88 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>
 80259d2:	f8cd e020 	str.w	lr, [sp, #32]
 80259d6:	f8dd e0b0 	ldr.w	lr, [sp, #176]	; 0xb0
 80259da:	1e65      	subs	r5, r4, #1
 80259dc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80259e0:	ea5f 432b 	movs.w	r3, fp, asr #16
 80259e4:	ea4f 4127 	mov.w	r1, r7, asr #16
 80259e8:	d405      	bmi.n	80259f6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80259ea:	42ab      	cmp	r3, r5
 80259ec:	da03      	bge.n	80259f6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80259ee:	2900      	cmp	r1, #0
 80259f0:	db01      	blt.n	80259f6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80259f2:	4541      	cmp	r1, r8
 80259f4:	db4d      	blt.n	8025a92 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80259f6:	1c58      	adds	r0, r3, #1
 80259f8:	d406      	bmi.n	8025a08 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 80259fa:	42a0      	cmp	r0, r4
 80259fc:	dc04      	bgt.n	8025a08 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 80259fe:	1c48      	adds	r0, r1, #1
 8025a00:	d402      	bmi.n	8025a08 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8025a02:	4560      	cmp	r0, ip
 8025a04:	f340 819b 	ble.w	8025d3e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8025a08:	3a01      	subs	r2, #1
 8025a0a:	44cb      	add	fp, r9
 8025a0c:	4477      	add	r7, lr
 8025a0e:	f10a 0a03 	add.w	sl, sl, #3
 8025a12:	d1e5      	bne.n	80259e0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8025a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025a16:	2b00      	cmp	r3, #0
 8025a18:	dd36      	ble.n	8025a88 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8025a1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025a1e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025a22:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025a26:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025a2a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025a2e:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8025a32:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025a36:	ee76 6a68 	vsub.f32	s13, s12, s17
 8025a3a:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8025a3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025a42:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8025a46:	ee16 2a90 	vmov	r2, s13
 8025a4a:	3b01      	subs	r3, #1
 8025a4c:	930e      	str	r3, [sp, #56]	; 0x38
 8025a4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025a50:	fb92 f9f3 	sdiv	r9, r2, r3
 8025a54:	ee17 2a10 	vmov	r2, s14
 8025a58:	eeb0 7a48 	vmov.f32	s14, s16
 8025a5c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8025a60:	ee17 7a10 	vmov	r7, s14
 8025a64:	eeb0 7a68 	vmov.f32	s14, s17
 8025a68:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a6c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8025a70:	932c      	str	r3, [sp, #176]	; 0xb0
 8025a72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025a74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025a76:	ee17 ba10 	vmov	fp, s14
 8025a7a:	eeb0 8a67 	vmov.f32	s16, s15
 8025a7e:	eef0 8a46 	vmov.f32	s17, s12
 8025a82:	bf18      	it	ne
 8025a84:	461a      	movne	r2, r3
 8025a86:	e795      	b.n	80259b4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025a88:	b017      	add	sp, #92	; 0x5c
 8025a8a:	ecbd 8b08 	vpop	{d8-d11}
 8025a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a92:	f8dd e020 	ldr.w	lr, [sp, #32]
 8025a96:	1e51      	subs	r1, r2, #1
 8025a98:	fb09 b301 	mla	r3, r9, r1, fp
 8025a9c:	141b      	asrs	r3, r3, #16
 8025a9e:	9108      	str	r1, [sp, #32]
 8025aa0:	f100 80e7 	bmi.w	8025c72 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8025aa4:	42ab      	cmp	r3, r5
 8025aa6:	f280 80e4 	bge.w	8025c72 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8025aaa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025aac:	fb03 7301 	mla	r3, r3, r1, r7
 8025ab0:	141b      	asrs	r3, r3, #16
 8025ab2:	f100 80de 	bmi.w	8025c72 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8025ab6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8025aba:	4563      	cmp	r3, ip
 8025abc:	f280 80d9 	bge.w	8025c72 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8025ac0:	2a00      	cmp	r2, #0
 8025ac2:	dda7      	ble.n	8025a14 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8025ac4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025ac8:	eb0a 0302 	add.w	r3, sl, r2
 8025acc:	930c      	str	r3, [sp, #48]	; 0x30
 8025ace:	f10a 0c03 	add.w	ip, sl, #3
 8025ad2:	e9cd 792a 	strd	r7, r9, [sp, #168]	; 0xa8
 8025ad6:	463b      	mov	r3, r7
 8025ad8:	e09a      	b.n	8025c10 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8025ada:	784d      	ldrb	r5, [r1, #1]
 8025adc:	1908      	adds	r0, r1, r4
 8025ade:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025ae2:	4435      	add	r5, r6
 8025ae4:	2a00      	cmp	r2, #0
 8025ae6:	f000 80b5 	beq.w	8025c54 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8025aea:	5d0c      	ldrb	r4, [r1, r4]
 8025aec:	f890 e001 	ldrb.w	lr, [r0, #1]
 8025af0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025af4:	19a1      	adds	r1, r4, r6
 8025af6:	9108      	str	r1, [sp, #32]
 8025af8:	4631      	mov	r1, r6
 8025afa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8025afe:	9f08      	ldr	r7, [sp, #32]
 8025b00:	44b6      	add	lr, r6
 8025b02:	b29b      	uxth	r3, r3
 8025b04:	b292      	uxth	r2, r2
 8025b06:	fb03 f602 	mul.w	r6, r3, r2
 8025b0a:	011b      	lsls	r3, r3, #4
 8025b0c:	f895 9000 	ldrb.w	r9, [r5]
 8025b10:	1b98      	subs	r0, r3, r6
 8025b12:	b280      	uxth	r0, r0
 8025b14:	fb00 f909 	mul.w	r9, r0, r9
 8025b18:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8025b1c:	b292      	uxth	r2, r2
 8025b1e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8025b22:	f811 100a 	ldrb.w	r1, [r1, sl]
 8025b26:	1a9b      	subs	r3, r3, r2
 8025b28:	b29b      	uxth	r3, r3
 8025b2a:	fb03 9101 	mla	r1, r3, r1, r9
 8025b2e:	f897 9000 	ldrb.w	r9, [r7]
 8025b32:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8025b34:	fb02 1109 	mla	r1, r2, r9, r1
 8025b38:	f89e a000 	ldrb.w	sl, [lr]
 8025b3c:	f81c 9c03 	ldrb.w	r9, [ip, #-3]
 8025b40:	44a3      	add	fp, r4
 8025b42:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025b44:	fb06 110a 	mla	r1, r6, sl, r1
 8025b48:	fb19 f904 	smulbb	r9, r9, r4
 8025b4c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025b4e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025b52:	fb01 9904 	mla	r9, r1, r4, r9
 8025b56:	fa1f f989 	uxth.w	r9, r9
 8025b5a:	f109 0101 	add.w	r1, r9, #1
 8025b5e:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8025b62:	ea4f 2929 	mov.w	r9, r9, asr #8
 8025b66:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8025b6a:	7869      	ldrb	r1, [r5, #1]
 8025b6c:	f898 9001 	ldrb.w	r9, [r8, #1]
 8025b70:	fb00 f101 	mul.w	r1, r0, r1
 8025b74:	9c08      	ldr	r4, [sp, #32]
 8025b76:	fb03 1109 	mla	r1, r3, r9, r1
 8025b7a:	f894 9001 	ldrb.w	r9, [r4, #1]
 8025b7e:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 8025b80:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8025b82:	fb02 1109 	mla	r1, r2, r9, r1
 8025b86:	f89e a001 	ldrb.w	sl, [lr, #1]
 8025b8a:	443c      	add	r4, r7
 8025b8c:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
 8025b90:	942a      	str	r4, [sp, #168]	; 0xa8
 8025b92:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025b94:	fb06 110a 	mla	r1, r6, sl, r1
 8025b98:	fb19 f904 	smulbb	r9, r9, r4
 8025b9c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8025b9e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025ba2:	fb01 9907 	mla	r9, r1, r7, r9
 8025ba6:	fa1f f989 	uxth.w	r9, r9
 8025baa:	f109 0101 	add.w	r1, r9, #1
 8025bae:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8025bb2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8025bb6:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8025bba:	78a9      	ldrb	r1, [r5, #2]
 8025bbc:	f898 5002 	ldrb.w	r5, [r8, #2]
 8025bc0:	fb00 f001 	mul.w	r0, r0, r1
 8025bc4:	fb03 0005 	mla	r0, r3, r5, r0
 8025bc8:	9b08      	ldr	r3, [sp, #32]
 8025bca:	f89e 4002 	ldrb.w	r4, [lr, #2]
 8025bce:	789b      	ldrb	r3, [r3, #2]
 8025bd0:	f81c ec01 	ldrb.w	lr, [ip, #-1]
 8025bd4:	fb02 0003 	mla	r0, r2, r3, r0
 8025bd8:	fb06 0004 	mla	r0, r6, r4, r0
 8025bdc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025bde:	fb1e f404 	smulbb	r4, lr, r4
 8025be2:	f3c0 2e07 	ubfx	lr, r0, #8, #8
 8025be6:	fb0e 4e07 	mla	lr, lr, r7, r4
 8025bea:	fa1f fe8e 	uxth.w	lr, lr
 8025bee:	f10e 0301 	add.w	r3, lr, #1
 8025bf2:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8025bf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025bf8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025bfc:	4563      	cmp	r3, ip
 8025bfe:	f80c ec01 	strb.w	lr, [ip, #-1]
 8025c02:	d034      	beq.n	8025c6e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8025c04:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025c06:	f10c 0c03 	add.w	ip, ip, #3
 8025c0a:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 8025c0e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025c10:	1419      	asrs	r1, r3, #16
 8025c12:	ea4f 432b 	mov.w	r3, fp, asr #16
 8025c16:	fb04 3101 	mla	r1, r4, r1, r3
 8025c1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025c1c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8025c1e:	f812 a001 	ldrb.w	sl, [r2, r1]
 8025c22:	4411      	add	r1, r2
 8025c24:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025c26:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8025c2a:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025c2e:	eb06 080a 	add.w	r8, r6, sl
 8025c32:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8025c36:	2b00      	cmp	r3, #0
 8025c38:	f47f af4f 	bne.w	8025ada <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8025c3c:	b182      	cbz	r2, 8025c60 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8025c3e:	5d0c      	ldrb	r4, [r1, r4]
 8025c40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025c42:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025c46:	1861      	adds	r1, r4, r1
 8025c48:	9108      	str	r1, [sp, #32]
 8025c4a:	46c6      	mov	lr, r8
 8025c4c:	4645      	mov	r5, r8
 8025c4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025c50:	9f08      	ldr	r7, [sp, #32]
 8025c52:	e756      	b.n	8025b02 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025c54:	46c6      	mov	lr, r8
 8025c56:	f8cd 8020 	str.w	r8, [sp, #32]
 8025c5a:	4631      	mov	r1, r6
 8025c5c:	4647      	mov	r7, r8
 8025c5e:	e750      	b.n	8025b02 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025c60:	46c6      	mov	lr, r8
 8025c62:	f8cd 8020 	str.w	r8, [sp, #32]
 8025c66:	4645      	mov	r5, r8
 8025c68:	4631      	mov	r1, r6
 8025c6a:	4647      	mov	r7, r8
 8025c6c:	e749      	b.n	8025b02 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025c6e:	469a      	mov	sl, r3
 8025c70:	e6d0      	b.n	8025a14 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8025c72:	2a00      	cmp	r2, #0
 8025c74:	f77f aece 	ble.w	8025a14 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8025c78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025c7c:	ea4f 432b 	mov.w	r3, fp, asr #16
 8025c80:	1439      	asrs	r1, r7, #16
 8025c82:	4654      	mov	r4, sl
 8025c84:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8025c86:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8025c8a:	2b00      	cmp	r3, #0
 8025c8c:	f3cb 3003 	ubfx	r0, fp, #12, #4
 8025c90:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8025c94:	db2f      	blt.n	8025cf6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025c96:	f106 3cff 	add.w	ip, r6, #4294967295
 8025c9a:	4563      	cmp	r3, ip
 8025c9c:	da2b      	bge.n	8025cf6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025c9e:	2900      	cmp	r1, #0
 8025ca0:	db29      	blt.n	8025cf6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025ca2:	f10e 3cff 	add.w	ip, lr, #4294967295
 8025ca6:	4561      	cmp	r1, ip
 8025ca8:	da25      	bge.n	8025cf6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025caa:	fa0f fa86 	sxth.w	sl, r6
 8025cae:	fb01 330a 	mla	r3, r1, sl, r3
 8025cb2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025cb4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8025cb6:	f811 e003 	ldrb.w	lr, [r1, r3]
 8025cba:	440b      	add	r3, r1
 8025cbc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8025cc0:	eb06 0c0e 	add.w	ip, r6, lr
 8025cc4:	2800      	cmp	r0, #0
 8025cc6:	d052      	beq.n	8025d6e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x426>
 8025cc8:	7859      	ldrb	r1, [r3, #1]
 8025cca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025cce:	1871      	adds	r1, r6, r1
 8025cd0:	910c      	str	r1, [sp, #48]	; 0x30
 8025cd2:	2a00      	cmp	r2, #0
 8025cd4:	f000 80d5 	beq.w	8025e82 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53a>
 8025cd8:	eb03 010a 	add.w	r1, r3, sl
 8025cdc:	7849      	ldrb	r1, [r1, #1]
 8025cde:	f813 300a 	ldrb.w	r3, [r3, sl]
 8025ce2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025ce6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025cea:	1871      	adds	r1, r6, r1
 8025cec:	18f3      	adds	r3, r6, r3
 8025cee:	9110      	str	r1, [sp, #64]	; 0x40
 8025cf0:	9311      	str	r3, [sp, #68]	; 0x44
 8025cf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025cf4:	e042      	b.n	8025d7c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025cf6:	f113 0c01 	adds.w	ip, r3, #1
 8025cfa:	d406      	bmi.n	8025d0a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8025cfc:	45b4      	cmp	ip, r6
 8025cfe:	dc04      	bgt.n	8025d0a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8025d00:	f111 0c01 	adds.w	ip, r1, #1
 8025d04:	d401      	bmi.n	8025d0a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8025d06:	45f4      	cmp	ip, lr
 8025d08:	dd1f      	ble.n	8025d4a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8025d0a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025d0c:	f1b8 0f00 	cmp.w	r8, #0
 8025d10:	f104 0403 	add.w	r4, r4, #3
 8025d14:	44cb      	add	fp, r9
 8025d16:	441f      	add	r7, r3
 8025d18:	dd07      	ble.n	8025d2a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8025d1a:	e9d5 6e02 	ldrd	r6, lr, [r5, #8]
 8025d1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8025d22:	ea4f 432b 	mov.w	r3, fp, asr #16
 8025d26:	1439      	asrs	r1, r7, #16
 8025d28:	e7af      	b.n	8025c8a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025d2a:	9b08      	ldr	r3, [sp, #32]
 8025d2c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8025d30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025d34:	3301      	adds	r3, #1
 8025d36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025d3a:	449a      	add	sl, r3
 8025d3c:	e66a      	b.n	8025a14 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8025d3e:	3a01      	subs	r2, #1
 8025d40:	f8dd e020 	ldr.w	lr, [sp, #32]
 8025d44:	4690      	mov	r8, r2
 8025d46:	9208      	str	r2, [sp, #32]
 8025d48:	e79b      	b.n	8025c82 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8025d4a:	fa0f fe8e 	sxth.w	lr, lr
 8025d4e:	b236      	sxth	r6, r6
 8025d50:	e9cd 6e00 	strd	r6, lr, [sp]
 8025d54:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8025d56:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8025d5a:	e9cd 2605 	strd	r2, r6, [sp, #20]
 8025d5e:	9302      	str	r3, [sp, #8]
 8025d60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025d64:	4621      	mov	r1, r4
 8025d66:	9814      	ldr	r0, [sp, #80]	; 0x50
 8025d68:	f7ff fcd4 	bl	8025714 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8025d6c:	e7cd      	b.n	8025d0a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8025d6e:	2a00      	cmp	r2, #0
 8025d70:	d17b      	bne.n	8025e6a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x522>
 8025d72:	4661      	mov	r1, ip
 8025d74:	e9cd cc10 	strd	ip, ip, [sp, #64]	; 0x40
 8025d78:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8025d7c:	b283      	uxth	r3, r0
 8025d7e:	b292      	uxth	r2, r2
 8025d80:	fb03 f602 	mul.w	r6, r3, r2
 8025d84:	011b      	lsls	r3, r3, #4
 8025d86:	7809      	ldrb	r1, [r1, #0]
 8025d88:	1b98      	subs	r0, r3, r6
 8025d8a:	b280      	uxth	r0, r0
 8025d8c:	9012      	str	r0, [sp, #72]	; 0x48
 8025d8e:	fb00 f101 	mul.w	r1, r0, r1
 8025d92:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8025d96:	980a      	ldr	r0, [sp, #40]	; 0x28
 8025d98:	b292      	uxth	r2, r2
 8025d9a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8025d9e:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8025da2:	1a9b      	subs	r3, r3, r2
 8025da4:	b29b      	uxth	r3, r3
 8025da6:	fb03 110e 	mla	r1, r3, lr, r1
 8025daa:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025dac:	f890 a000 	ldrb.w	sl, [r0]
 8025db0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025db2:	fb02 110a 	mla	r1, r2, sl, r1
 8025db6:	f890 e000 	ldrb.w	lr, [r0]
 8025dba:	f894 a000 	ldrb.w	sl, [r4]
 8025dbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025dc0:	fb06 110e 	mla	r1, r6, lr, r1
 8025dc4:	fb1a fa00 	smulbb	sl, sl, r0
 8025dc8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025dca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025dce:	fb01 a100 	mla	r1, r1, r0, sl
 8025dd2:	b289      	uxth	r1, r1
 8025dd4:	f101 0e01 	add.w	lr, r1, #1
 8025dd8:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 8025ddc:	1209      	asrs	r1, r1, #8
 8025dde:	7021      	strb	r1, [r4, #0]
 8025de0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025de2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8025de4:	7849      	ldrb	r1, [r1, #1]
 8025de6:	f89c e001 	ldrb.w	lr, [ip, #1]
 8025dea:	fb00 f101 	mul.w	r1, r0, r1
 8025dee:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025df0:	fb03 110e 	mla	r1, r3, lr, r1
 8025df4:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025df8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025dfa:	fb02 110a 	mla	r1, r2, sl, r1
 8025dfe:	f890 e001 	ldrb.w	lr, [r0, #1]
 8025e02:	f894 a001 	ldrb.w	sl, [r4, #1]
 8025e06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025e08:	fb06 110e 	mla	r1, r6, lr, r1
 8025e0c:	fb1a fa00 	smulbb	sl, sl, r0
 8025e10:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025e12:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025e16:	fb01 a100 	mla	r1, r1, r0, sl
 8025e1a:	b289      	uxth	r1, r1
 8025e1c:	f101 0e01 	add.w	lr, r1, #1
 8025e20:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 8025e24:	1209      	asrs	r1, r1, #8
 8025e26:	7061      	strb	r1, [r4, #1]
 8025e28:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025e2a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8025e2c:	7889      	ldrb	r1, [r1, #2]
 8025e2e:	f89c c002 	ldrb.w	ip, [ip, #2]
 8025e32:	fb00 f001 	mul.w	r0, r0, r1
 8025e36:	fb03 010c 	mla	r1, r3, ip, r0
 8025e3a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025e3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025e3e:	7880      	ldrb	r0, [r0, #2]
 8025e40:	789b      	ldrb	r3, [r3, #2]
 8025e42:	fb02 1100 	mla	r1, r2, r0, r1
 8025e46:	78a2      	ldrb	r2, [r4, #2]
 8025e48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025e4a:	fb06 1303 	mla	r3, r6, r3, r1
 8025e4e:	fb12 f200 	smulbb	r2, r2, r0
 8025e52:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025e54:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025e58:	fb03 2300 	mla	r3, r3, r0, r2
 8025e5c:	b29b      	uxth	r3, r3
 8025e5e:	1c5a      	adds	r2, r3, #1
 8025e60:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025e64:	121b      	asrs	r3, r3, #8
 8025e66:	70a3      	strb	r3, [r4, #2]
 8025e68:	e74f      	b.n	8025d0a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8025e6a:	f813 300a 	ldrb.w	r3, [r3, sl]
 8025e6e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8025e72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025e76:	18f3      	adds	r3, r6, r3
 8025e78:	9311      	str	r3, [sp, #68]	; 0x44
 8025e7a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8025e7e:	4661      	mov	r1, ip
 8025e80:	e77c      	b.n	8025d7c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025e82:	e9cd cc10 	strd	ip, ip, [sp, #64]	; 0x40
 8025e86:	e779      	b.n	8025d7c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025e88:	f43f adc4 	beq.w	8025a14 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8025e8c:	1e65      	subs	r5, r4, #1
 8025e8e:	e602      	b.n	8025a96 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>

08025e90 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8025e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e94:	b083      	sub	sp, #12
 8025e96:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 8025e9a:	f891 9001 	ldrb.w	r9, [r1, #1]
 8025e9e:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8025ea2:	7888      	ldrb	r0, [r1, #2]
 8025ea4:	fb07 6c08 	mla	ip, r7, r8, r6
 8025ea8:	ea4f 2909 	mov.w	r9, r9, lsl #8
 8025eac:	780c      	ldrb	r4, [r1, #0]
 8025eae:	ea49 4900 	orr.w	r9, r9, r0, lsl #16
 8025eb2:	ea49 0404 	orr.w	r4, r9, r4
 8025eb6:	2f00      	cmp	r7, #0
 8025eb8:	9401      	str	r4, [sp, #4]
 8025eba:	eb02 090c 	add.w	r9, r2, ip
 8025ebe:	f107 0e01 	add.w	lr, r7, #1
 8025ec2:	f9bd a034 	ldrsh.w	sl, [sp, #52]	; 0x34
 8025ec6:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8025eca:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8025ece:	db01      	blt.n	8025ed4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x44>
 8025ed0:	45ba      	cmp	sl, r7
 8025ed2:	dc6e      	bgt.n	8025fb2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x122>
 8025ed4:	fa5f fb84 	uxtb.w	fp, r4
 8025ed8:	af01      	add	r7, sp, #4
 8025eda:	465a      	mov	r2, fp
 8025edc:	46bc      	mov	ip, r7
 8025ede:	f1be 0f00 	cmp.w	lr, #0
 8025ee2:	db01      	blt.n	8025ee8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x58>
 8025ee4:	45f2      	cmp	sl, lr
 8025ee6:	dc49      	bgt.n	8025f7c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xec>
 8025ee8:	fa5f fa84 	uxtb.w	sl, r4
 8025eec:	ab01      	add	r3, sp, #4
 8025eee:	46d1      	mov	r9, sl
 8025ef0:	469e      	mov	lr, r3
 8025ef2:	280f      	cmp	r0, #15
 8025ef4:	f200 8098 	bhi.w	8026028 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8025ef8:	2d0f      	cmp	r5, #15
 8025efa:	f200 8095 	bhi.w	8026028 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8025efe:	b280      	uxth	r0, r0
 8025f00:	b2ad      	uxth	r5, r5
 8025f02:	fb00 f805 	mul.w	r8, r0, r5
 8025f06:	0104      	lsls	r4, r0, #4
 8025f08:	eba4 0608 	sub.w	r6, r4, r8
 8025f0c:	b2b6      	uxth	r6, r6
 8025f0e:	fb06 f002 	mul.w	r0, r6, r2
 8025f12:	ebc8 1505 	rsb	r5, r8, r5, lsl #4
 8025f16:	b2ad      	uxth	r5, r5
 8025f18:	f5c4 7280 	rsb	r2, r4, #256	; 0x100
 8025f1c:	1b52      	subs	r2, r2, r5
 8025f1e:	b292      	uxth	r2, r2
 8025f20:	fb02 000b 	mla	r0, r2, fp, r0
 8025f24:	fb05 000a 	mla	r0, r5, sl, r0
 8025f28:	fb08 0009 	mla	r0, r8, r9, r0
 8025f2c:	1200      	asrs	r0, r0, #8
 8025f2e:	7008      	strb	r0, [r1, #0]
 8025f30:	f897 9001 	ldrb.w	r9, [r7, #1]
 8025f34:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8025f38:	fb06 f909 	mul.w	r9, r6, r9
 8025f3c:	fb02 9904 	mla	r9, r2, r4, r9
 8025f40:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8025f44:	7858      	ldrb	r0, [r3, #1]
 8025f46:	fb05 9404 	mla	r4, r5, r4, r9
 8025f4a:	fb08 4000 	mla	r0, r8, r0, r4
 8025f4e:	1200      	asrs	r0, r0, #8
 8025f50:	7048      	strb	r0, [r1, #1]
 8025f52:	78bc      	ldrb	r4, [r7, #2]
 8025f54:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8025f58:	fb06 f604 	mul.w	r6, r6, r4
 8025f5c:	fb02 6600 	mla	r6, r2, r0, r6
 8025f60:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8025f64:	789b      	ldrb	r3, [r3, #2]
 8025f66:	fb05 6500 	mla	r5, r5, r0, r6
 8025f6a:	fb08 5803 	mla	r8, r8, r3, r5
 8025f6e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025f72:	f881 8002 	strb.w	r8, [r1, #2]
 8025f76:	b003      	add	sp, #12
 8025f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f7c:	b385      	cbz	r5, 8025fe0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x150>
 8025f7e:	2e00      	cmp	r6, #0
 8025f80:	db40      	blt.n	8026004 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x174>
 8025f82:	45b0      	cmp	r8, r6
 8025f84:	dd3e      	ble.n	8026004 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x174>
 8025f86:	f819 e008 	ldrb.w	lr, [r9, r8]
 8025f8a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8025f8e:	449e      	add	lr, r3
 8025f90:	3601      	adds	r6, #1
 8025f92:	f89e a000 	ldrb.w	sl, [lr]
 8025f96:	d431      	bmi.n	8025ffc <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x16c>
 8025f98:	45b0      	cmp	r8, r6
 8025f9a:	dd2f      	ble.n	8025ffc <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x16c>
 8025f9c:	2800      	cmp	r0, #0
 8025f9e:	d03f      	beq.n	8026020 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x190>
 8025fa0:	44c8      	add	r8, r9
 8025fa2:	f898 4001 	ldrb.w	r4, [r8, #1]
 8025fa6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025faa:	f813 9004 	ldrb.w	r9, [r3, r4]
 8025fae:	4423      	add	r3, r4
 8025fb0:	e79f      	b.n	8025ef2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x62>
 8025fb2:	2e00      	cmp	r6, #0
 8025fb4:	db01      	blt.n	8025fba <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8025fb6:	45b0      	cmp	r8, r6
 8025fb8:	dc1a      	bgt.n	8025ff0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>
 8025fba:	f10d 0c04 	add.w	ip, sp, #4
 8025fbe:	1c72      	adds	r2, r6, #1
 8025fc0:	f89c b000 	ldrb.w	fp, [ip]
 8025fc4:	d409      	bmi.n	8025fda <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x14a>
 8025fc6:	4590      	cmp	r8, r2
 8025fc8:	dd07      	ble.n	8025fda <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x14a>
 8025fca:	b1f0      	cbz	r0, 802600a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x17a>
 8025fcc:	f899 7001 	ldrb.w	r7, [r9, #1]
 8025fd0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025fd4:	5dda      	ldrb	r2, [r3, r7]
 8025fd6:	441f      	add	r7, r3
 8025fd8:	e781      	b.n	8025ede <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8025fda:	b2e2      	uxtb	r2, r4
 8025fdc:	af01      	add	r7, sp, #4
 8025fde:	e77e      	b.n	8025ede <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8025fe0:	280f      	cmp	r0, #15
 8025fe2:	fa5f fa84 	uxtb.w	sl, r4
 8025fe6:	d81f      	bhi.n	8026028 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8025fe8:	ab01      	add	r3, sp, #4
 8025fea:	469e      	mov	lr, r3
 8025fec:	46d1      	mov	r9, sl
 8025fee:	e786      	b.n	8025efe <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x6e>
 8025ff0:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8025ff4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025ff8:	449c      	add	ip, r3
 8025ffa:	e7e0      	b.n	8025fbe <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8025ffc:	fa5f f984 	uxtb.w	r9, r4
 8026000:	ab01      	add	r3, sp, #4
 8026002:	e776      	b.n	8025ef2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x62>
 8026004:	f10d 0e04 	add.w	lr, sp, #4
 8026008:	e7c2      	b.n	8025f90 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x100>
 802600a:	f1be 0f00 	cmp.w	lr, #0
 802600e:	b2e2      	uxtb	r2, r4
 8026010:	af01      	add	r7, sp, #4
 8026012:	f6bf af67 	bge.w	8025ee4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x54>
 8026016:	463b      	mov	r3, r7
 8026018:	46be      	mov	lr, r7
 802601a:	4691      	mov	r9, r2
 802601c:	4692      	mov	sl, r2
 802601e:	e76b      	b.n	8025ef8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8026020:	fa5f f984 	uxtb.w	r9, r4
 8026024:	ab01      	add	r3, sp, #4
 8026026:	e767      	b.n	8025ef8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8026028:	4b03      	ldr	r3, [pc, #12]	; (8026038 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1a8>)
 802602a:	4a04      	ldr	r2, [pc, #16]	; (802603c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1ac>)
 802602c:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8026030:	4803      	ldr	r0, [pc, #12]	; (8026040 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1b0>)
 8026032:	f003 f90f 	bl	8029254 <__assert_func>
 8026036:	bf00      	nop
 8026038:	0802c4f8 	.word	0x0802c4f8
 802603c:	0802cb70 	.word	0x0802cb70
 8026040:	0802c67c 	.word	0x0802c67c

08026044 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026048:	ed2d 8b0a 	vpush	{d8-d12}
 802604c:	eeb0 aa40 	vmov.f32	s20, s0
 8026050:	eef0 9a60 	vmov.f32	s19, s1
 8026054:	eeb0 9a41 	vmov.f32	s18, s2
 8026058:	eef0 8a62 	vmov.f32	s17, s5
 802605c:	eeb0 8a43 	vmov.f32	s16, s6
 8026060:	eeb0 ca44 	vmov.f32	s24, s8
 8026064:	eef0 ba64 	vmov.f32	s23, s9
 8026068:	eeb0 ba45 	vmov.f32	s22, s10
 802606c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8026070:	b093      	sub	sp, #76	; 0x4c
 8026072:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8026076:	e9dd 412b 	ldrd	r4, r1, [sp, #172]	; 0xac
 802607a:	e9dd 9b27 	ldrd	r9, fp, [sp, #156]	; 0x9c
 802607e:	9011      	str	r0, [sp, #68]	; 0x44
 8026080:	461a      	mov	r2, r3
 8026082:	6860      	ldr	r0, [r4, #4]
 8026084:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026086:	fb00 1803 	mla	r8, r0, r3, r1
 802608a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802608c:	982e      	ldr	r0, [sp, #184]	; 0xb8
 802608e:	6821      	ldr	r1, [r4, #0]
 8026090:	685b      	ldr	r3, [r3, #4]
 8026092:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8026096:	6800      	ldr	r0, [r0, #0]
 8026098:	eb01 0a08 	add.w	sl, r1, r8
 802609c:	3304      	adds	r3, #4
 802609e:	f8dd 80a4 	ldr.w	r8, [sp, #164]	; 0xa4
 80260a2:	9009      	str	r0, [sp, #36]	; 0x24
 80260a4:	9307      	str	r3, [sp, #28]
 80260a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80260a8:	2b00      	cmp	r3, #0
 80260aa:	dc02      	bgt.n	80260b2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80260ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80260ae:	2b00      	cmp	r3, #0
 80260b0:	dd61      	ble.n	8026176 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 80260b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80260b4:	2a00      	cmp	r2, #0
 80260b6:	e9d3 6e02 	ldrd	r6, lr, [r3, #8]
 80260ba:	b230      	sxth	r0, r6
 80260bc:	fa0f f78e 	sxth.w	r7, lr
 80260c0:	f340 81fe 	ble.w	80264c0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47c>
 80260c4:	f8cd e018 	str.w	lr, [sp, #24]
 80260c8:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
 80260cc:	1e45      	subs	r5, r0, #1
 80260ce:	f107 3cff 	add.w	ip, r7, #4294967295
 80260d2:	ea5f 4329 	movs.w	r3, r9, asr #16
 80260d6:	ea4f 412b 	mov.w	r1, fp, asr #16
 80260da:	d405      	bmi.n	80260e8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80260dc:	42ab      	cmp	r3, r5
 80260de:	da03      	bge.n	80260e8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80260e0:	2900      	cmp	r1, #0
 80260e2:	db01      	blt.n	80260e8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80260e4:	4561      	cmp	r1, ip
 80260e6:	db4b      	blt.n	8026180 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80260e8:	1c5c      	adds	r4, r3, #1
 80260ea:	d406      	bmi.n	80260fa <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80260ec:	4284      	cmp	r4, r0
 80260ee:	dc04      	bgt.n	80260fa <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80260f0:	1c4c      	adds	r4, r1, #1
 80260f2:	d402      	bmi.n	80260fa <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80260f4:	42bc      	cmp	r4, r7
 80260f6:	f340 815e 	ble.w	80263b6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80260fa:	3a01      	subs	r2, #1
 80260fc:	44c1      	add	r9, r8
 80260fe:	44f3      	add	fp, lr
 8026100:	f10a 0a03 	add.w	sl, sl, #3
 8026104:	d1e5      	bne.n	80260d2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026108:	2b00      	cmp	r3, #0
 802610a:	dd34      	ble.n	8026176 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 802610c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8026110:	ee79 9aab 	vadd.f32	s19, s19, s23
 8026114:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8026118:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802611c:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8026120:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026124:	ee76 6a68 	vsub.f32	s13, s12, s17
 8026128:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802612c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026130:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026134:	ee16 2a90 	vmov	r2, s13
 8026138:	3b01      	subs	r3, #1
 802613a:	930a      	str	r3, [sp, #40]	; 0x28
 802613c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802613e:	fb92 f8f3 	sdiv	r8, r2, r3
 8026142:	ee17 2a10 	vmov	r2, s14
 8026146:	eeb0 7a48 	vmov.f32	s14, s16
 802614a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802614e:	ee17 ba10 	vmov	fp, s14
 8026152:	eeb0 7a68 	vmov.f32	s14, s17
 8026156:	fb92 f3f3 	sdiv	r3, r2, r3
 802615a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802615e:	932a      	str	r3, [sp, #168]	; 0xa8
 8026160:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026162:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026164:	ee17 9a10 	vmov	r9, s14
 8026168:	eeb0 8a67 	vmov.f32	s16, s15
 802616c:	eef0 8a46 	vmov.f32	s17, s12
 8026170:	bf18      	it	ne
 8026172:	461a      	movne	r2, r3
 8026174:	e797      	b.n	80260a6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8026176:	b013      	add	sp, #76	; 0x4c
 8026178:	ecbd 8b0a 	vpop	{d8-d12}
 802617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026180:	f8dd e018 	ldr.w	lr, [sp, #24]
 8026184:	1e51      	subs	r1, r2, #1
 8026186:	fb08 9301 	mla	r3, r8, r1, r9
 802618a:	141b      	asrs	r3, r3, #16
 802618c:	9106      	str	r1, [sp, #24]
 802618e:	f100 80aa 	bmi.w	80262e6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8026192:	42ab      	cmp	r3, r5
 8026194:	f280 80a7 	bge.w	80262e6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8026198:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802619a:	fb03 b301 	mla	r3, r3, r1, fp
 802619e:	141b      	asrs	r3, r3, #16
 80261a0:	f100 80a1 	bmi.w	80262e6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80261a4:	3f01      	subs	r7, #1
 80261a6:	42bb      	cmp	r3, r7
 80261a8:	f280 809d 	bge.w	80262e6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80261ac:	2a00      	cmp	r2, #0
 80261ae:	ddaa      	ble.n	8026106 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80261b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80261b4:	eb0a 0302 	add.w	r3, sl, r2
 80261b8:	9308      	str	r3, [sp, #32]
 80261ba:	f10a 0a03 	add.w	sl, sl, #3
 80261be:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
 80261c2:	e062      	b.n	802628a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80261c4:	784c      	ldrb	r4, [r1, #1]
 80261c6:	180d      	adds	r5, r1, r0
 80261c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80261cc:	4434      	add	r4, r6
 80261ce:	2a00      	cmp	r2, #0
 80261d0:	d07c      	beq.n	80262cc <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80261d2:	5c08      	ldrb	r0, [r1, r0]
 80261d4:	786f      	ldrb	r7, [r5, #1]
 80261d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80261da:	1981      	adds	r1, r0, r6
 80261dc:	4608      	mov	r0, r1
 80261de:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80261e2:	9106      	str	r1, [sp, #24]
 80261e4:	4437      	add	r7, r6
 80261e6:	b29b      	uxth	r3, r3
 80261e8:	b292      	uxth	r2, r2
 80261ea:	fb03 f502 	mul.w	r5, r3, r2
 80261ee:	011b      	lsls	r3, r3, #4
 80261f0:	f894 e000 	ldrb.w	lr, [r4]
 80261f4:	1b59      	subs	r1, r3, r5
 80261f6:	b289      	uxth	r1, r1
 80261f8:	fb01 fe0e 	mul.w	lr, r1, lr
 80261fc:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8026200:	b292      	uxth	r2, r2
 8026202:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8026206:	f816 6008 	ldrb.w	r6, [r6, r8]
 802620a:	1a9b      	subs	r3, r3, r2
 802620c:	b29b      	uxth	r3, r3
 802620e:	fb03 e606 	mla	r6, r3, r6, lr
 8026212:	f890 e000 	ldrb.w	lr, [r0]
 8026216:	f897 8000 	ldrb.w	r8, [r7]
 802621a:	fb02 660e 	mla	r6, r2, lr, r6
 802621e:	fb05 6808 	mla	r8, r5, r8, r6
 8026222:	ea4f 2828 	mov.w	r8, r8, asr #8
 8026226:	f80a 8c03 	strb.w	r8, [sl, #-3]
 802622a:	f894 8001 	ldrb.w	r8, [r4, #1]
 802622e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8026230:	fb01 f608 	mul.w	r6, r1, r8
 8026234:	f89c e001 	ldrb.w	lr, [ip, #1]
 8026238:	4481      	add	r9, r0
 802623a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 802623c:	fb03 680e 	mla	r8, r3, lr, r6
 8026240:	4483      	add	fp, r0
 8026242:	9806      	ldr	r0, [sp, #24]
 8026244:	787e      	ldrb	r6, [r7, #1]
 8026246:	f890 e001 	ldrb.w	lr, [r0, #1]
 802624a:	fb02 8e0e 	mla	lr, r2, lr, r8
 802624e:	fb05 ee06 	mla	lr, r5, r6, lr
 8026252:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8026256:	f80a ec02 	strb.w	lr, [sl, #-2]
 802625a:	78a4      	ldrb	r4, [r4, #2]
 802625c:	f89c 6002 	ldrb.w	r6, [ip, #2]
 8026260:	fb01 f104 	mul.w	r1, r1, r4
 8026264:	fb03 1106 	mla	r1, r3, r6, r1
 8026268:	7883      	ldrb	r3, [r0, #2]
 802626a:	78b8      	ldrb	r0, [r7, #2]
 802626c:	fb02 1103 	mla	r1, r2, r3, r1
 8026270:	fb05 1500 	mla	r5, r5, r0, r1
 8026274:	9b08      	ldr	r3, [sp, #32]
 8026276:	122d      	asrs	r5, r5, #8
 8026278:	4553      	cmp	r3, sl
 802627a:	f80a 5c01 	strb.w	r5, [sl, #-1]
 802627e:	d030      	beq.n	80262e2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8026280:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026282:	f10a 0a03 	add.w	sl, sl, #3
 8026286:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802628a:	ea4f 4329 	mov.w	r3, r9, asr #16
 802628e:	ea4f 412b 	mov.w	r1, fp, asr #16
 8026292:	fb00 3101 	mla	r1, r0, r1, r3
 8026296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026298:	9e07      	ldr	r6, [sp, #28]
 802629a:	f812 8001 	ldrb.w	r8, [r2, r1]
 802629e:	f3c9 3303 	ubfx	r3, r9, #12, #4
 80262a2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80262a6:	4411      	add	r1, r2
 80262a8:	eb06 0c08 	add.w	ip, r6, r8
 80262ac:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80262b0:	2b00      	cmp	r3, #0
 80262b2:	d187      	bne.n	80261c4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x180>
 80262b4:	b17a      	cbz	r2, 80262d6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80262b6:	5c08      	ldrb	r0, [r1, r0]
 80262b8:	9907      	ldr	r1, [sp, #28]
 80262ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80262be:	1841      	adds	r1, r0, r1
 80262c0:	4667      	mov	r7, ip
 80262c2:	9106      	str	r1, [sp, #24]
 80262c4:	4664      	mov	r4, ip
 80262c6:	9e07      	ldr	r6, [sp, #28]
 80262c8:	4608      	mov	r0, r1
 80262ca:	e78c      	b.n	80261e6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80262cc:	4667      	mov	r7, ip
 80262ce:	f8cd c018 	str.w	ip, [sp, #24]
 80262d2:	4660      	mov	r0, ip
 80262d4:	e787      	b.n	80261e6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80262d6:	4667      	mov	r7, ip
 80262d8:	f8cd c018 	str.w	ip, [sp, #24]
 80262dc:	4664      	mov	r4, ip
 80262de:	4660      	mov	r0, ip
 80262e0:	e781      	b.n	80261e6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80262e2:	469a      	mov	sl, r3
 80262e4:	e70f      	b.n	8026106 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80262e6:	2a00      	cmp	r2, #0
 80262e8:	f77f af0d 	ble.w	8026106 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80262ec:	9d06      	ldr	r5, [sp, #24]
 80262ee:	ea4f 4329 	mov.w	r3, r9, asr #16
 80262f2:	ea4f 412b 	mov.w	r1, fp, asr #16
 80262f6:	4657      	mov	r7, sl
 80262f8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80262fc:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 80262fe:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 8026302:	2b00      	cmp	r3, #0
 8026304:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8026308:	f3cb 3203 	ubfx	r2, fp, #12, #4
 802630c:	db31      	blt.n	8026372 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802630e:	f106 3cff 	add.w	ip, r6, #4294967295
 8026312:	4563      	cmp	r3, ip
 8026314:	da2d      	bge.n	8026372 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8026316:	2900      	cmp	r1, #0
 8026318:	db2b      	blt.n	8026372 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802631a:	f10e 3cff 	add.w	ip, lr, #4294967295
 802631e:	4561      	cmp	r1, ip
 8026320:	da27      	bge.n	8026372 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8026322:	fa0f fc86 	sxth.w	ip, r6
 8026326:	fb01 330c 	mla	r3, r1, ip, r3
 802632a:	9e07      	ldr	r6, [sp, #28]
 802632c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802632e:	f811 e003 	ldrb.w	lr, [r1, r3]
 8026332:	440b      	add	r3, r1
 8026334:	4631      	mov	r1, r6
 8026336:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802633a:	4471      	add	r1, lr
 802633c:	910e      	str	r1, [sp, #56]	; 0x38
 802633e:	2800      	cmp	r0, #0
 8026340:	d04f      	beq.n	80263e2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8026342:	7859      	ldrb	r1, [r3, #1]
 8026344:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026348:	1871      	adds	r1, r6, r1
 802634a:	9108      	str	r1, [sp, #32]
 802634c:	2a00      	cmp	r2, #0
 802634e:	f000 80b2 	beq.w	80264b6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 8026352:	eb03 010c 	add.w	r1, r3, ip
 8026356:	f813 600c 	ldrb.w	r6, [r3, ip]
 802635a:	7849      	ldrb	r1, [r1, #1]
 802635c:	9b07      	ldr	r3, [sp, #28]
 802635e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8026362:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026366:	1859      	adds	r1, r3, r1
 8026368:	18f3      	adds	r3, r6, r3
 802636a:	910c      	str	r1, [sp, #48]	; 0x30
 802636c:	930d      	str	r3, [sp, #52]	; 0x34
 802636e:	9e08      	ldr	r6, [sp, #32]
 8026370:	e03d      	b.n	80263ee <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026372:	f113 0c01 	adds.w	ip, r3, #1
 8026376:	d406      	bmi.n	8026386 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026378:	45b4      	cmp	ip, r6
 802637a:	dc04      	bgt.n	8026386 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802637c:	f111 0c01 	adds.w	ip, r1, #1
 8026380:	d401      	bmi.n	8026386 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026382:	45f4      	cmp	ip, lr
 8026384:	dd1d      	ble.n	80263c2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026386:	2d00      	cmp	r5, #0
 8026388:	f107 0703 	add.w	r7, r7, #3
 802638c:	44c1      	add	r9, r8
 802638e:	44d3      	add	fp, sl
 8026390:	dd07      	ble.n	80263a2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8026392:	e9d4 6e02 	ldrd	r6, lr, [r4, #8]
 8026396:	3d01      	subs	r5, #1
 8026398:	ea4f 4329 	mov.w	r3, r9, asr #16
 802639c:	ea4f 412b 	mov.w	r1, fp, asr #16
 80263a0:	e7af      	b.n	8026302 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 80263a2:	9b06      	ldr	r3, [sp, #24]
 80263a4:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80263a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80263ac:	3301      	adds	r3, #1
 80263ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80263b2:	449a      	add	sl, r3
 80263b4:	e6a7      	b.n	8026106 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80263b6:	3a01      	subs	r2, #1
 80263b8:	f8dd e018 	ldr.w	lr, [sp, #24]
 80263bc:	4615      	mov	r5, r2
 80263be:	9206      	str	r2, [sp, #24]
 80263c0:	e799      	b.n	80262f6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 80263c2:	fa0f fe8e 	sxth.w	lr, lr
 80263c6:	b236      	sxth	r6, r6
 80263c8:	e9cd 0204 	strd	r0, r2, [sp, #16]
 80263cc:	e9cd 3102 	strd	r3, r1, [sp, #8]
 80263d0:	e9cd 6e00 	strd	r6, lr, [sp]
 80263d4:	9b07      	ldr	r3, [sp, #28]
 80263d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80263d8:	4639      	mov	r1, r7
 80263da:	9811      	ldr	r0, [sp, #68]	; 0x44
 80263dc:	f7ff fd58 	bl	8025e90 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80263e0:	e7d1      	b.n	8026386 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80263e2:	2a00      	cmp	r2, #0
 80263e4:	d15b      	bne.n	802649e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 80263e6:	460e      	mov	r6, r1
 80263e8:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 80263ec:	9108      	str	r1, [sp, #32]
 80263ee:	b283      	uxth	r3, r0
 80263f0:	b292      	uxth	r2, r2
 80263f2:	fb03 f002 	mul.w	r0, r3, r2
 80263f6:	011b      	lsls	r3, r3, #4
 80263f8:	f896 c000 	ldrb.w	ip, [r6]
 80263fc:	1a19      	subs	r1, r3, r0
 80263fe:	b289      	uxth	r1, r1
 8026400:	fb01 fc0c 	mul.w	ip, r1, ip
 8026404:	9e07      	ldr	r6, [sp, #28]
 8026406:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 802640a:	b292      	uxth	r2, r2
 802640c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8026410:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8026414:	1a9b      	subs	r3, r3, r2
 8026416:	b29b      	uxth	r3, r3
 8026418:	fb03 cc0e 	mla	ip, r3, lr, ip
 802641c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802641e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8026422:	f896 e000 	ldrb.w	lr, [r6]
 8026426:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8026428:	f896 c000 	ldrb.w	ip, [r6]
 802642c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802642e:	fb02 6e0e 	mla	lr, r2, lr, r6
 8026432:	fb00 ec0c 	mla	ip, r0, ip, lr
 8026436:	9e08      	ldr	r6, [sp, #32]
 8026438:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802643c:	f887 c000 	strb.w	ip, [r7]
 8026440:	f896 c001 	ldrb.w	ip, [r6, #1]
 8026444:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8026446:	fb01 fc0c 	mul.w	ip, r1, ip
 802644a:	f896 e001 	ldrb.w	lr, [r6, #1]
 802644e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8026450:	fb03 ce0e 	mla	lr, r3, lr, ip
 8026454:	f896 c001 	ldrb.w	ip, [r6, #1]
 8026458:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802645a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 802645e:	f896 c001 	ldrb.w	ip, [r6, #1]
 8026462:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8026464:	fb02 ee06 	mla	lr, r2, r6, lr
 8026468:	fb00 ec0c 	mla	ip, r0, ip, lr
 802646c:	9e08      	ldr	r6, [sp, #32]
 802646e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8026472:	f887 c001 	strb.w	ip, [r7, #1]
 8026476:	f896 c002 	ldrb.w	ip, [r6, #2]
 802647a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 802647c:	fb01 f10c 	mul.w	r1, r1, ip
 8026480:	f896 e002 	ldrb.w	lr, [r6, #2]
 8026484:	fb03 110e 	mla	r1, r3, lr, r1
 8026488:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802648a:	789e      	ldrb	r6, [r3, #2]
 802648c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802648e:	fb02 1206 	mla	r2, r2, r6, r1
 8026492:	789b      	ldrb	r3, [r3, #2]
 8026494:	fb00 2303 	mla	r3, r0, r3, r2
 8026498:	121b      	asrs	r3, r3, #8
 802649a:	70bb      	strb	r3, [r7, #2]
 802649c:	e773      	b.n	8026386 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802649e:	4631      	mov	r1, r6
 80264a0:	f813 600c 	ldrb.w	r6, [r3, ip]
 80264a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80264a6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80264aa:	1871      	adds	r1, r6, r1
 80264ac:	930c      	str	r3, [sp, #48]	; 0x30
 80264ae:	910d      	str	r1, [sp, #52]	; 0x34
 80264b0:	9308      	str	r3, [sp, #32]
 80264b2:	461e      	mov	r6, r3
 80264b4:	e79b      	b.n	80263ee <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80264b6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80264b8:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
 80264bc:	460e      	mov	r6, r1
 80264be:	e796      	b.n	80263ee <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80264c0:	f43f ae21 	beq.w	8026106 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80264c4:	1e45      	subs	r5, r0, #1
 80264c6:	e65d      	b.n	8026184 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>

080264c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80264c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264cc:	b087      	sub	sp, #28
 80264ce:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 80264d2:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 80264d6:	fb06 080c 	mla	r8, r6, ip, r0
 80264da:	2e00      	cmp	r6, #0
 80264dc:	4696      	mov	lr, r2
 80264de:	eb02 0a08 	add.w	sl, r2, r8
 80264e2:	f106 0b01 	add.w	fp, r6, #1
 80264e6:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 80264ea:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
 80264ee:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80264f2:	f89d 4058 	ldrb.w	r4, [sp, #88]	; 0x58
 80264f6:	db02      	blt.n	80264fe <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 80264f8:	42b2      	cmp	r2, r6
 80264fa:	f300 80f1 	bgt.w	80266e0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x218>
 80264fe:	2600      	movs	r6, #0
 8026500:	46b1      	mov	r9, r6
 8026502:	46b0      	mov	r8, r6
 8026504:	46b6      	mov	lr, r6
 8026506:	f1bb 0f00 	cmp.w	fp, #0
 802650a:	db02      	blt.n	8026512 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x4a>
 802650c:	455a      	cmp	r2, fp
 802650e:	f300 8101 	bgt.w	8026714 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8026512:	f04f 0c00 	mov.w	ip, #0
 8026516:	e9cd cc02 	strd	ip, ip, [sp, #8]
 802651a:	f8cd c004 	str.w	ip, [sp, #4]
 802651e:	2f0f      	cmp	r7, #15
 8026520:	f200 813a 	bhi.w	8026798 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 8026524:	2d0f      	cmp	r5, #15
 8026526:	f200 8137 	bhi.w	8026798 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 802652a:	b2a8      	uxth	r0, r5
 802652c:	b2bb      	uxth	r3, r7
 802652e:	fb00 f503 	mul.w	r5, r0, r3
 8026532:	9a01      	ldr	r2, [sp, #4]
 8026534:	ebc5 1000 	rsb	r0, r5, r0, lsl #4
 8026538:	b280      	uxth	r0, r0
 802653a:	fb00 fa02 	mul.w	sl, r0, r2
 802653e:	fb05 fb0c 	mul.w	fp, r5, ip
 8026542:	011b      	lsls	r3, r3, #4
 8026544:	1b5f      	subs	r7, r3, r5
 8026546:	b2bf      	uxth	r7, r7
 8026548:	fb07 f206 	mul.w	r2, r7, r6
 802654c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8026550:	1a1b      	subs	r3, r3, r0
 8026552:	b29b      	uxth	r3, r3
 8026554:	fb03 2209 	mla	r2, r3, r9, r2
 8026558:	4452      	add	r2, sl
 802655a:	445a      	add	r2, fp
 802655c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026560:	2a00      	cmp	r2, #0
 8026562:	f000 80ba 	beq.w	80266da <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x212>
 8026566:	b2a4      	uxth	r4, r4
 8026568:	fb02 f204 	mul.w	r2, r2, r4
 802656c:	f102 0a01 	add.w	sl, r2, #1
 8026570:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8026574:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8026578:	9205      	str	r2, [sp, #20]
 802657a:	f008 12ff 	and.w	r2, r8, #16711935	; 0xff00ff
 802657e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026582:	fb06 f202 	mul.w	r2, r6, r2
 8026586:	fb06 f608 	mul.w	r6, r6, r8
 802658a:	f00e 1bff 	and.w	fp, lr, #16711935	; 0xff00ff
 802658e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026592:	fb09 fb0b 	mul.w	fp, r9, fp
 8026596:	fb09 fe0e 	mul.w	lr, r9, lr
 802659a:	f506 7980 	add.w	r9, r6, #256	; 0x100
 802659e:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 80265a2:	0a36      	lsrs	r6, r6, #8
 80265a4:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80265a8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80265ac:	fb07 f606 	mul.w	r6, r7, r6
 80265b0:	9404      	str	r4, [sp, #16]
 80265b2:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 80265b6:	9c03      	ldr	r4, [sp, #12]
 80265b8:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80265bc:	4490      	add	r8, r2
 80265be:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80265c2:	f004 12ff 	and.w	r2, r4, #16711935	; 0xff00ff
 80265c6:	fb0c f202 	mul.w	r2, ip, r2
 80265ca:	f404 497f 	and.w	r9, r4, #65280	; 0xff00
 80265ce:	ea4f 2a1b 	mov.w	sl, fp, lsr #8
 80265d2:	9c02      	ldr	r4, [sp, #8]
 80265d4:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80265d8:	fb0c fc09 	mul.w	ip, ip, r9
 80265dc:	fb08 f807 	mul.w	r8, r8, r7
 80265e0:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 80265e4:	9603      	str	r6, [sp, #12]
 80265e6:	f50e 7980 	add.w	r9, lr, #256	; 0x100
 80265ea:	9e01      	ldr	r6, [sp, #4]
 80265ec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80265f0:	44d3      	add	fp, sl
 80265f2:	eb09 2e1e 	add.w	lr, r9, lr, lsr #8
 80265f6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80265fa:	f404 497f 	and.w	r9, r4, #65280	; 0xff00
 80265fe:	fb06 f707 	mul.w	r7, r6, r7
 8026602:	fb06 f909 	mul.w	r9, r6, r9
 8026606:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802660a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802660e:	9e03      	ldr	r6, [sp, #12]
 8026610:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8026614:	ea4f 2a12 	mov.w	sl, r2, lsr #8
 8026618:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802661c:	fb0b 8803 	mla	r8, fp, r3, r8
 8026620:	fb03 660e 	mla	r6, r3, lr, r6
 8026624:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8026628:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 802662c:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8026630:	4492      	add	sl, r2
 8026632:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8026636:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 802663a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802663e:	0a3a      	lsrs	r2, r7, #8
 8026640:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8026644:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026648:	fb0b 8b05 	mla	fp, fp, r5, r8
 802664c:	fb05 660e 	mla	r6, r5, lr, r6
 8026650:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8026654:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026658:	f509 7580 	add.w	r5, r9, #256	; 0x100
 802665c:	44b8      	add	r8, r7
 802665e:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8026662:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026666:	0a2d      	lsrs	r5, r5, #8
 8026668:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802666c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026670:	fb00 6505 	mla	r5, r0, r5, r6
 8026674:	fb08 b800 	mla	r8, r8, r0, fp
 8026678:	0a2d      	lsrs	r5, r5, #8
 802667a:	ea4f 2018 	mov.w	r0, r8, lsr #8
 802667e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026682:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026686:	4328      	orrs	r0, r5
 8026688:	784b      	ldrb	r3, [r1, #1]
 802668a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 802668e:	9c04      	ldr	r4, [sp, #16]
 8026690:	788d      	ldrb	r5, [r1, #2]
 8026692:	fa5f fa80 	uxtb.w	sl, r0
 8026696:	fb13 f602 	smulbb	r6, r3, r2
 802669a:	fb15 f502 	smulbb	r5, r5, r2
 802669e:	fb1a fa04 	smulbb	sl, sl, r4
 80266a2:	780f      	ldrb	r7, [r1, #0]
 80266a4:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 80266a8:	0c00      	lsrs	r0, r0, #16
 80266aa:	fb0c 6304 	mla	r3, ip, r4, r6
 80266ae:	fb07 a202 	mla	r2, r7, r2, sl
 80266b2:	fb00 5404 	mla	r4, r0, r4, r5
 80266b6:	b29b      	uxth	r3, r3
 80266b8:	b292      	uxth	r2, r2
 80266ba:	b2a4      	uxth	r4, r4
 80266bc:	1c56      	adds	r6, r2, #1
 80266be:	1c5d      	adds	r5, r3, #1
 80266c0:	1c60      	adds	r0, r4, #1
 80266c2:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80266c6:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80266ca:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80266ce:	1212      	asrs	r2, r2, #8
 80266d0:	121b      	asrs	r3, r3, #8
 80266d2:	1224      	asrs	r4, r4, #8
 80266d4:	700a      	strb	r2, [r1, #0]
 80266d6:	704b      	strb	r3, [r1, #1]
 80266d8:	708c      	strb	r4, [r1, #2]
 80266da:	b007      	add	sp, #28
 80266dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80266e0:	2800      	cmp	r0, #0
 80266e2:	db01      	blt.n	80266e8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x220>
 80266e4:	4584      	cmp	ip, r0
 80266e6:	dc3d      	bgt.n	8026764 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>
 80266e8:	f04f 0900 	mov.w	r9, #0
 80266ec:	46ce      	mov	lr, r9
 80266ee:	1c46      	adds	r6, r0, #1
 80266f0:	d42a      	bmi.n	8026748 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x280>
 80266f2:	45b4      	cmp	ip, r6
 80266f4:	dd28      	ble.n	8026748 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x280>
 80266f6:	b137      	cbz	r7, 8026706 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x23e>
 80266f8:	f89a 6001 	ldrb.w	r6, [sl, #1]
 80266fc:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 8026700:	ea4f 6618 	mov.w	r6, r8, lsr #24
 8026704:	e6ff      	b.n	8026506 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8026706:	f1bb 0f00 	cmp.w	fp, #0
 802670a:	db3e      	blt.n	802678a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2c2>
 802670c:	455a      	cmp	r2, fp
 802670e:	dd3c      	ble.n	802678a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2c2>
 8026710:	463e      	mov	r6, r7
 8026712:	46b8      	mov	r8, r7
 8026714:	b1dd      	cbz	r5, 802674e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x286>
 8026716:	2800      	cmp	r0, #0
 8026718:	db30      	blt.n	802677c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2b4>
 802671a:	4584      	cmp	ip, r0
 802671c:	dd2e      	ble.n	802677c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2b4>
 802671e:	f81a 200c 	ldrb.w	r2, [sl, ip]
 8026722:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026726:	9202      	str	r2, [sp, #8]
 8026728:	0e12      	lsrs	r2, r2, #24
 802672a:	9201      	str	r2, [sp, #4]
 802672c:	3001      	adds	r0, #1
 802672e:	d420      	bmi.n	8026772 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2aa>
 8026730:	4584      	cmp	ip, r0
 8026732:	dd1e      	ble.n	8026772 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2aa>
 8026734:	b337      	cbz	r7, 8026784 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2bc>
 8026736:	44d4      	add	ip, sl
 8026738:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802673c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8026740:	9303      	str	r3, [sp, #12]
 8026742:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026746:	e6ea      	b.n	802651e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x56>
 8026748:	2600      	movs	r6, #0
 802674a:	46b0      	mov	r8, r6
 802674c:	e6db      	b.n	8026506 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 802674e:	2f0f      	cmp	r7, #15
 8026750:	d822      	bhi.n	8026798 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 8026752:	b2bb      	uxth	r3, r7
 8026754:	4628      	mov	r0, r5
 8026756:	46ab      	mov	fp, r5
 8026758:	46aa      	mov	sl, r5
 802675a:	e9cd 5502 	strd	r5, r5, [sp, #8]
 802675e:	46ac      	mov	ip, r5
 8026760:	9501      	str	r5, [sp, #4]
 8026762:	e6ee      	b.n	8026542 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8026764:	f81e 6008 	ldrb.w	r6, [lr, r8]
 8026768:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
 802676c:	ea4f 691e 	mov.w	r9, lr, lsr #24
 8026770:	e7bd      	b.n	80266ee <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x226>
 8026772:	f04f 0c00 	mov.w	ip, #0
 8026776:	f8cd c00c 	str.w	ip, [sp, #12]
 802677a:	e6d0      	b.n	802651e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x56>
 802677c:	2200      	movs	r2, #0
 802677e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8026782:	e7d3      	b.n	802672c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8026784:	9703      	str	r7, [sp, #12]
 8026786:	46bc      	mov	ip, r7
 8026788:	e6cc      	b.n	8026524 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x5c>
 802678a:	46b8      	mov	r8, r7
 802678c:	e9cd 7702 	strd	r7, r7, [sp, #8]
 8026790:	46bc      	mov	ip, r7
 8026792:	9701      	str	r7, [sp, #4]
 8026794:	463e      	mov	r6, r7
 8026796:	e6c5      	b.n	8026524 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x5c>
 8026798:	4b03      	ldr	r3, [pc, #12]	; (80267a8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e0>)
 802679a:	4a04      	ldr	r2, [pc, #16]	; (80267ac <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e4>)
 802679c:	f44f 710f 	mov.w	r1, #572	; 0x23c
 80267a0:	4803      	ldr	r0, [pc, #12]	; (80267b0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e8>)
 80267a2:	f002 fd57 	bl	8029254 <__assert_func>
 80267a6:	bf00      	nop
 80267a8:	0802c4f8 	.word	0x0802c4f8
 80267ac:	0802cb70 	.word	0x0802cb70
 80267b0:	0802c67c 	.word	0x0802c67c

080267b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80267b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267b8:	ed2d 8b08 	vpush	{d8-d11}
 80267bc:	b0a9      	sub	sp, #164	; 0xa4
 80267be:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 80267c0:	9022      	str	r0, [sp, #136]	; 0x88
 80267c2:	9114      	str	r1, [sp, #80]	; 0x50
 80267c4:	6860      	ldr	r0, [r4, #4]
 80267c6:	9940      	ldr	r1, [sp, #256]	; 0x100
 80267c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80267ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80267cc:	eeb0 aa40 	vmov.f32	s20, s0
 80267d0:	fb00 1b02 	mla	fp, r0, r2, r1
 80267d4:	6821      	ldr	r1, [r4, #0]
 80267d6:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
 80267da:	eb01 0800 	add.w	r8, r1, r0
 80267de:	e9dd ab3b 	ldrd	sl, fp, [sp, #236]	; 0xec
 80267e2:	eef0 9a60 	vmov.f32	s19, s1
 80267e6:	eeb0 9a41 	vmov.f32	s18, s2
 80267ea:	eef0 8a62 	vmov.f32	s17, s5
 80267ee:	eeb0 8a43 	vmov.f32	s16, s6
 80267f2:	eef0 ba44 	vmov.f32	s23, s8
 80267f6:	eeb0 ba64 	vmov.f32	s22, s9
 80267fa:	eef0 aa45 	vmov.f32	s21, s10
 80267fe:	46c1      	mov	r9, r8
 8026800:	465f      	mov	r7, fp
 8026802:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8026804:	9d42      	ldr	r5, [sp, #264]	; 0x108
 8026806:	6852      	ldr	r2, [r2, #4]
 8026808:	f89d 410c 	ldrb.w	r4, [sp, #268]	; 0x10c
 802680c:	3204      	adds	r2, #4
 802680e:	682d      	ldr	r5, [r5, #0]
 8026810:	920a      	str	r2, [sp, #40]	; 0x28
 8026812:	b2a2      	uxth	r2, r4
 8026814:	9423      	str	r4, [sp, #140]	; 0x8c
 8026816:	9511      	str	r5, [sp, #68]	; 0x44
 8026818:	9216      	str	r2, [sp, #88]	; 0x58
 802681a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802681c:	2a00      	cmp	r2, #0
 802681e:	dc02      	bgt.n	8026826 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026820:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8026822:	2a00      	cmp	r2, #0
 8026824:	dd65      	ble.n	80268f2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8026826:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8026828:	2b00      	cmp	r3, #0
 802682a:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 802682e:	b235      	sxth	r5, r6
 8026830:	fa0f f88c 	sxth.w	r8, ip
 8026834:	f340 838b 	ble.w	8026f4e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79a>
 8026838:	1e6c      	subs	r4, r5, #1
 802683a:	f108 3eff 	add.w	lr, r8, #4294967295
 802683e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8026842:	e9dd cb3d 	ldrd	ip, fp, [sp, #244]	; 0xf4
 8026846:	ea5f 422a 	movs.w	r2, sl, asr #16
 802684a:	ea4f 4127 	mov.w	r1, r7, asr #16
 802684e:	d405      	bmi.n	802685c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026850:	42a2      	cmp	r2, r4
 8026852:	da03      	bge.n	802685c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026854:	2900      	cmp	r1, #0
 8026856:	db01      	blt.n	802685c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026858:	4571      	cmp	r1, lr
 802685a:	db4f      	blt.n	80268fc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802685c:	1c50      	adds	r0, r2, #1
 802685e:	d406      	bmi.n	802686e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8026860:	42a8      	cmp	r0, r5
 8026862:	dc04      	bgt.n	802686e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8026864:	1c48      	adds	r0, r1, #1
 8026866:	d402      	bmi.n	802686e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8026868:	4540      	cmp	r0, r8
 802686a:	f340 834c 	ble.w	8026f06 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 802686e:	3b01      	subs	r3, #1
 8026870:	44e2      	add	sl, ip
 8026872:	445f      	add	r7, fp
 8026874:	f109 0903 	add.w	r9, r9, #3
 8026878:	d1e5      	bne.n	8026846 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802687a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802687c:	2b00      	cmp	r3, #0
 802687e:	dd38      	ble.n	80268f2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8026880:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026884:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026888:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802688c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026890:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026894:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8026898:	ee69 7a27 	vmul.f32	s15, s18, s15
 802689c:	ee76 6a68 	vsub.f32	s13, s12, s17
 80268a0:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80268a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80268a8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80268ac:	ee16 2a90 	vmov	r2, s13
 80268b0:	3b01      	subs	r3, #1
 80268b2:	9314      	str	r3, [sp, #80]	; 0x50
 80268b4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80268b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80268ba:	ee17 2a10 	vmov	r2, s14
 80268be:	eeb0 7a48 	vmov.f32	s14, s16
 80268c2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80268c6:	ee17 7a10 	vmov	r7, s14
 80268ca:	eeb0 7a68 	vmov.f32	s14, s17
 80268ce:	933d      	str	r3, [sp, #244]	; 0xf4
 80268d0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80268d2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80268d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80268da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80268dc:	933e      	str	r3, [sp, #248]	; 0xf8
 80268de:	ee17 aa10 	vmov	sl, s14
 80268e2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80268e4:	eeb0 8a67 	vmov.f32	s16, s15
 80268e8:	eef0 8a46 	vmov.f32	s17, s12
 80268ec:	bf08      	it	eq
 80268ee:	4613      	moveq	r3, r2
 80268f0:	e793      	b.n	802681a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80268f2:	b029      	add	sp, #164	; 0xa4
 80268f4:	ecbd 8b08 	vpop	{d8-d11}
 80268f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80268fc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8026900:	983d      	ldr	r0, [sp, #244]	; 0xf4
 8026902:	1e59      	subs	r1, r3, #1
 8026904:	fb00 a201 	mla	r2, r0, r1, sl
 8026908:	1412      	asrs	r2, r2, #16
 802690a:	9109      	str	r1, [sp, #36]	; 0x24
 802690c:	f100 8168 	bmi.w	8026be0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 8026910:	42a2      	cmp	r2, r4
 8026912:	f280 8165 	bge.w	8026be0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 8026916:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8026918:	fb02 7201 	mla	r2, r2, r1, r7
 802691c:	1412      	asrs	r2, r2, #16
 802691e:	f100 815f 	bmi.w	8026be0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 8026922:	f108 31ff 	add.w	r1, r8, #4294967295
 8026926:	428a      	cmp	r2, r1
 8026928:	f280 815a 	bge.w	8026be0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 802692c:	2b00      	cmp	r3, #0
 802692e:	dda4      	ble.n	802687a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8026930:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026934:	444b      	add	r3, r9
 8026936:	9310      	str	r3, [sp, #64]	; 0x40
 8026938:	f109 0303 	add.w	r3, r9, #3
 802693c:	9309      	str	r3, [sp, #36]	; 0x24
 802693e:	46d1      	mov	r9, sl
 8026940:	973c      	str	r7, [sp, #240]	; 0xf0
 8026942:	462e      	mov	r6, r5
 8026944:	463b      	mov	r3, r7
 8026946:	e12b      	b.n	8026ba0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8026948:	785f      	ldrb	r7, [r3, #1]
 802694a:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 802694e:	9712      	str	r7, [sp, #72]	; 0x48
 8026950:	0e3f      	lsrs	r7, r7, #24
 8026952:	970b      	str	r7, [sp, #44]	; 0x2c
 8026954:	b16a      	cbz	r2, 8026972 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8026956:	199f      	adds	r7, r3, r6
 8026958:	5d9b      	ldrb	r3, [r3, r6]
 802695a:	4626      	mov	r6, r4
 802695c:	787f      	ldrb	r7, [r7, #1]
 802695e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026962:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
 8026966:	9313      	str	r3, [sp, #76]	; 0x4c
 8026968:	9415      	str	r4, [sp, #84]	; 0x54
 802696a:	0e1b      	lsrs	r3, r3, #24
 802696c:	0e24      	lsrs	r4, r4, #24
 802696e:	940d      	str	r4, [sp, #52]	; 0x34
 8026970:	930c      	str	r3, [sp, #48]	; 0x30
 8026972:	fa1f fc81 	uxth.w	ip, r1
 8026976:	b292      	uxth	r2, r2
 8026978:	fb0c f602 	mul.w	r6, ip, r2
 802697c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8026980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026982:	ebac 0706 	sub.w	r7, ip, r6
 8026986:	b2bf      	uxth	r7, r7
 8026988:	fb07 f103 	mul.w	r1, r7, r3
 802698c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8026990:	b292      	uxth	r2, r2
 8026992:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8026996:	1a9b      	subs	r3, r3, r2
 8026998:	b29b      	uxth	r3, r3
 802699a:	fb03 1100 	mla	r1, r3, r0, r1
 802699e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80269a0:	fb02 1104 	mla	r1, r2, r4, r1
 80269a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80269a6:	fb06 1104 	mla	r1, r6, r4, r1
 80269aa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80269ae:	2900      	cmp	r1, #0
 80269b0:	f000 80e5 	beq.w	8026b7e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80269b4:	f005 14ff 	and.w	r4, r5, #16711935	; 0xff00ff
 80269b8:	28ff      	cmp	r0, #255	; 0xff
 80269ba:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80269be:	940e      	str	r4, [sp, #56]	; 0x38
 80269c0:	950f      	str	r5, [sp, #60]	; 0x3c
 80269c2:	d01d      	beq.n	8026a00 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 80269c4:	fb04 fe00 	mul.w	lr, r4, r0
 80269c8:	fb05 f800 	mul.w	r8, r5, r0
 80269cc:	ea4f 251e 	mov.w	r5, lr, lsr #8
 80269d0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80269d4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80269d8:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80269dc:	44ae      	add	lr, r5
 80269de:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80269e2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80269e6:	0a00      	lsrs	r0, r0, #8
 80269e8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80269ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80269f0:	ea4e 0e00 	orr.w	lr, lr, r0
 80269f4:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80269f8:	900e      	str	r0, [sp, #56]	; 0x38
 80269fa:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 80269fe:	900f      	str	r0, [sp, #60]	; 0x3c
 8026a00:	9812      	ldr	r0, [sp, #72]	; 0x48
 8026a02:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 8026a06:	f400 487f 	and.w	r8, r0, #65280	; 0xff00
 8026a0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8026a0c:	28ff      	cmp	r0, #255	; 0xff
 8026a0e:	d01c      	beq.n	8026a4a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8026a10:	fb0e fe00 	mul.w	lr, lr, r0
 8026a14:	fb08 f800 	mul.w	r8, r8, r0
 8026a18:	ea4f 251e 	mov.w	r5, lr, lsr #8
 8026a1c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026a20:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8026a24:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8026a28:	44ae      	add	lr, r5
 8026a2a:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8026a2e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026a32:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026a36:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026a3a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026a3e:	ea4e 0808 	orr.w	r8, lr, r8
 8026a42:	f008 1eff 	and.w	lr, r8, #16711935	; 0xff00ff
 8026a46:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026a4a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8026a4c:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 8026a50:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 8026a54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026a56:	28ff      	cmp	r0, #255	; 0xff
 8026a58:	d01c      	beq.n	8026a94 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8026a5a:	fb0c fc00 	mul.w	ip, ip, r0
 8026a5e:	fb0a fa00 	mul.w	sl, sl, r0
 8026a62:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8026a66:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026a6a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026a6e:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026a72:	44ac      	add	ip, r5
 8026a74:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8026a78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a7c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026a80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026a84:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026a88:	ea4c 0a0a 	orr.w	sl, ip, sl
 8026a8c:	f00a 1cff 	and.w	ip, sl, #16711935	; 0xff00ff
 8026a90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026a94:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026a96:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8026a9a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8026a9e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026aa0:	2cff      	cmp	r4, #255	; 0xff
 8026aa2:	d019      	beq.n	8026ad8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8026aa4:	fb00 f004 	mul.w	r0, r0, r4
 8026aa8:	fb0b fb04 	mul.w	fp, fp, r4
 8026aac:	0a05      	lsrs	r5, r0, #8
 8026aae:	f005 14ff 	and.w	r4, r5, #16711935	; 0xff00ff
 8026ab2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026ab6:	f50b 7580 	add.w	r5, fp, #256	; 0x100
 8026aba:	eb05 251b 	add.w	r5, r5, fp, lsr #8
 8026abe:	4420      	add	r0, r4
 8026ac0:	0a00      	lsrs	r0, r0, #8
 8026ac2:	0a2d      	lsrs	r5, r5, #8
 8026ac4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026ac8:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8026acc:	ea40 0b0b 	orr.w	fp, r0, fp
 8026ad0:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 8026ad4:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8026ad8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026ada:	fb0e fe07 	mul.w	lr, lr, r7
 8026ade:	fb01 f104 	mul.w	r1, r1, r4
 8026ae2:	1c4d      	adds	r5, r1, #1
 8026ae4:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8026ae8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026aec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026aee:	fb08 f707 	mul.w	r7, r8, r7
 8026af2:	fb05 ee03 	mla	lr, r5, r3, lr
 8026af6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026af8:	fb0c ee02 	mla	lr, ip, r2, lr
 8026afc:	fb05 7703 	mla	r7, r5, r3, r7
 8026b00:	fb0a 7702 	mla	r7, sl, r2, r7
 8026b04:	fb00 ee06 	mla	lr, r0, r6, lr
 8026b08:	fb0b 7706 	mla	r7, fp, r6, r7
 8026b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026b0e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026b12:	0a3f      	lsrs	r7, r7, #8
 8026b14:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026b18:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026b1c:	ea4e 0307 	orr.w	r3, lr, r7
 8026b20:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8026b24:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8026b28:	b2c9      	uxtb	r1, r1
 8026b2a:	fa5f fc83 	uxtb.w	ip, r3
 8026b2e:	fb16 f601 	smulbb	r6, r6, r1
 8026b32:	fb17 f701 	smulbb	r7, r7, r1
 8026b36:	fb1c fc04 	smulbb	ip, ip, r4
 8026b3a:	f810 0c03 	ldrb.w	r0, [r0, #-3]
 8026b3e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8026b42:	0c1b      	lsrs	r3, r3, #16
 8026b44:	fb00 c101 	mla	r1, r0, r1, ip
 8026b48:	fb03 6304 	mla	r3, r3, r4, r6
 8026b4c:	fb02 7204 	mla	r2, r2, r4, r7
 8026b50:	b289      	uxth	r1, r1
 8026b52:	b292      	uxth	r2, r2
 8026b54:	b29b      	uxth	r3, r3
 8026b56:	f101 0e01 	add.w	lr, r1, #1
 8026b5a:	1c56      	adds	r6, r2, #1
 8026b5c:	1c5d      	adds	r5, r3, #1
 8026b5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026b60:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 8026b64:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8026b68:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8026b6c:	1209      	asrs	r1, r1, #8
 8026b6e:	1212      	asrs	r2, r2, #8
 8026b70:	121b      	asrs	r3, r3, #8
 8026b72:	f800 1c03 	strb.w	r1, [r0, #-3]
 8026b76:	f800 2c02 	strb.w	r2, [r0, #-2]
 8026b7a:	f800 3c01 	strb.w	r3, [r0, #-1]
 8026b7e:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8026b80:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8026b82:	4499      	add	r9, r3
 8026b84:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8026b86:	4413      	add	r3, r2
 8026b88:	933c      	str	r3, [sp, #240]	; 0xf0
 8026b8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026b8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026b8e:	4293      	cmp	r3, r2
 8026b90:	d024      	beq.n	8026bdc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8026b92:	4613      	mov	r3, r2
 8026b94:	3303      	adds	r3, #3
 8026b96:	9309      	str	r3, [sp, #36]	; 0x24
 8026b98:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8026b9a:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8026b9e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8026ba0:	ea4f 4229 	mov.w	r2, r9, asr #16
 8026ba4:	141b      	asrs	r3, r3, #16
 8026ba6:	fb06 2303 	mla	r3, r6, r3, r2
 8026baa:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026bac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026bae:	5cc2      	ldrb	r2, [r0, r3]
 8026bb0:	f3c9 3103 	ubfx	r1, r9, #12, #4
 8026bb4:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 8026bb8:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8026bba:	4403      	add	r3, r0
 8026bbc:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8026bc0:	0e28      	lsrs	r0, r5, #24
 8026bc2:	2900      	cmp	r1, #0
 8026bc4:	f47f aec0 	bne.w	8026948 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x194>
 8026bc8:	2a00      	cmp	r2, #0
 8026bca:	f43f aed2 	beq.w	8026972 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8026bce:	5d9b      	ldrb	r3, [r3, r6]
 8026bd0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8026bd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8026bd6:	0e1b      	lsrs	r3, r3, #24
 8026bd8:	930c      	str	r3, [sp, #48]	; 0x30
 8026bda:	e6ca      	b.n	8026972 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8026bdc:	4699      	mov	r9, r3
 8026bde:	e64c      	b.n	802687a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8026be0:	2b00      	cmp	r3, #0
 8026be2:	f77f ae4a 	ble.w	802687a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8026be6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8026bea:	ea4f 422a 	mov.w	r2, sl, asr #16
 8026bee:	1439      	asrs	r1, r7, #16
 8026bf0:	2a00      	cmp	r2, #0
 8026bf2:	46cb      	mov	fp, r9
 8026bf4:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8026bf8:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8026bfa:	e9dd 953d 	ldrd	r9, r5, [sp, #244]	; 0xf4
 8026bfe:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8026c02:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8026c06:	f2c0 8154 	blt.w	8026eb2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8026c0a:	1e73      	subs	r3, r6, #1
 8026c0c:	429a      	cmp	r2, r3
 8026c0e:	f280 8150 	bge.w	8026eb2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8026c12:	2900      	cmp	r1, #0
 8026c14:	f2c0 814d 	blt.w	8026eb2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8026c18:	f10c 33ff 	add.w	r3, ip, #4294967295
 8026c1c:	4299      	cmp	r1, r3
 8026c1e:	f280 8148 	bge.w	8026eb2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8026c22:	b236      	sxth	r6, r6
 8026c24:	fb01 2206 	mla	r2, r1, r6, r2
 8026c28:	9911      	ldr	r1, [sp, #68]	; 0x44
 8026c2a:	5c8b      	ldrb	r3, [r1, r2]
 8026c2c:	440a      	add	r2, r1
 8026c2e:	9210      	str	r2, [sp, #64]	; 0x40
 8026c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8026c36:	930e      	str	r3, [sp, #56]	; 0x38
 8026c38:	0e1b      	lsrs	r3, r3, #24
 8026c3a:	2800      	cmp	r0, #0
 8026c3c:	f000 8169 	beq.w	8026f12 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8026c40:	9910      	ldr	r1, [sp, #64]	; 0x40
 8026c42:	f891 c001 	ldrb.w	ip, [r1, #1]
 8026c46:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8026c4a:	9224      	str	r2, [sp, #144]	; 0x90
 8026c4c:	0e12      	lsrs	r2, r2, #24
 8026c4e:	9218      	str	r2, [sp, #96]	; 0x60
 8026c50:	f1be 0f00 	cmp.w	lr, #0
 8026c54:	f040 816a 	bne.w	8026f2c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>
 8026c58:	b280      	uxth	r0, r0
 8026c5a:	fa1f fc8e 	uxth.w	ip, lr
 8026c5e:	fb00 f20c 	mul.w	r2, r0, ip
 8026c62:	4611      	mov	r1, r2
 8026c64:	0106      	lsls	r6, r0, #4
 8026c66:	1ab0      	subs	r0, r6, r2
 8026c68:	9210      	str	r2, [sp, #64]	; 0x40
 8026c6a:	b282      	uxth	r2, r0
 8026c6c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8026c6e:	ebc1 1c0c 	rsb	ip, r1, ip, lsl #4
 8026c72:	fb02 f000 	mul.w	r0, r2, r0
 8026c76:	921b      	str	r2, [sp, #108]	; 0x6c
 8026c78:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 8026c7c:	fa1f f28c 	uxth.w	r2, ip
 8026c80:	1ab6      	subs	r6, r6, r2
 8026c82:	b2b6      	uxth	r6, r6
 8026c84:	fb06 0c03 	mla	ip, r6, r3, r0
 8026c88:	9819      	ldr	r0, [sp, #100]	; 0x64
 8026c8a:	921c      	str	r2, [sp, #112]	; 0x70
 8026c8c:	fb02 cc00 	mla	ip, r2, r0, ip
 8026c90:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8026c92:	961d      	str	r6, [sp, #116]	; 0x74
 8026c94:	fb01 cc02 	mla	ip, r1, r2, ip
 8026c98:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8026c9c:	f1bc 0f00 	cmp.w	ip, #0
 8026ca0:	f000 80f1 	beq.w	8026e86 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8026ca4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026ca6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8026ca8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026cac:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8026cb0:	2bff      	cmp	r3, #255	; 0xff
 8026cb2:	921e      	str	r2, [sp, #120]	; 0x78
 8026cb4:	910e      	str	r1, [sp, #56]	; 0x38
 8026cb6:	d01b      	beq.n	8026cf0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8026cb8:	fb01 f103 	mul.w	r1, r1, r3
 8026cbc:	fb02 f203 	mul.w	r2, r2, r3
 8026cc0:	460b      	mov	r3, r1
 8026cc2:	0a11      	lsrs	r1, r2, #8
 8026cc4:	f102 1601 	add.w	r6, r2, #65537	; 0x10001
 8026cc8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026ccc:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8026cd0:	4431      	add	r1, r6
 8026cd2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026cd6:	0a09      	lsrs	r1, r1, #8
 8026cd8:	0a1b      	lsrs	r3, r3, #8
 8026cda:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026cde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026ce2:	430b      	orrs	r3, r1
 8026ce4:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8026ce8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026cec:	921e      	str	r2, [sp, #120]	; 0x78
 8026cee:	930e      	str	r3, [sp, #56]	; 0x38
 8026cf0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8026cf2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8026cf4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8026cf8:	29ff      	cmp	r1, #255	; 0xff
 8026cfa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026cfe:	931f      	str	r3, [sp, #124]	; 0x7c
 8026d00:	9220      	str	r2, [sp, #128]	; 0x80
 8026d02:	d01b      	beq.n	8026d3c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8026d04:	fb03 f301 	mul.w	r3, r3, r1
 8026d08:	fb02 f201 	mul.w	r2, r2, r1
 8026d0c:	0a19      	lsrs	r1, r3, #8
 8026d0e:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8026d12:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026d16:	f502 7380 	add.w	r3, r2, #256	; 0x100
 8026d1a:	4401      	add	r1, r0
 8026d1c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026d20:	0a09      	lsrs	r1, r1, #8
 8026d22:	0a1b      	lsrs	r3, r3, #8
 8026d24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026d28:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026d2c:	ea41 0003 	orr.w	r0, r1, r3
 8026d30:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8026d34:	931f      	str	r3, [sp, #124]	; 0x7c
 8026d36:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8026d3a:	9320      	str	r3, [sp, #128]	; 0x80
 8026d3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026d3e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8026d40:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8026d44:	2aff      	cmp	r2, #255	; 0xff
 8026d46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026d4a:	9321      	str	r3, [sp, #132]	; 0x84
 8026d4c:	d01a      	beq.n	8026d84 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d0>
 8026d4e:	fb03 f302 	mul.w	r3, r3, r2
 8026d52:	4618      	mov	r0, r3
 8026d54:	fb06 f602 	mul.w	r6, r6, r2
 8026d58:	0a31      	lsrs	r1, r6, #8
 8026d5a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026d5e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8026d62:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8026d66:	440e      	add	r6, r1
 8026d68:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026d6c:	0a36      	lsrs	r6, r6, #8
 8026d6e:	0a1b      	lsrs	r3, r3, #8
 8026d70:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026d74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026d78:	4333      	orrs	r3, r6
 8026d7a:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8026d7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026d82:	9321      	str	r3, [sp, #132]	; 0x84
 8026d84:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026d86:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8026d8a:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8026d8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8026d90:	2aff      	cmp	r2, #255	; 0xff
 8026d92:	d01a      	beq.n	8026dca <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x616>
 8026d94:	fb03 f302 	mul.w	r3, r3, r2
 8026d98:	fb0e fe02 	mul.w	lr, lr, r2
 8026d9c:	0a19      	lsrs	r1, r3, #8
 8026d9e:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8026da2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026da6:	f50e 7380 	add.w	r3, lr, #256	; 0x100
 8026daa:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8026dae:	4401      	add	r1, r0
 8026db0:	0a09      	lsrs	r1, r1, #8
 8026db2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026db6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026dba:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026dbe:	ea41 0e0e 	orr.w	lr, r1, lr
 8026dc2:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8026dc6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026dca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8026dcc:	fb0c f102 	mul.w	r1, ip, r2
 8026dd0:	1c48      	adds	r0, r1, #1
 8026dd2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8026dd6:	ea6f 2211 	mvn.w	r2, r1, lsr #8
 8026dda:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8026ddc:	9225      	str	r2, [sp, #148]	; 0x94
 8026dde:	4684      	mov	ip, r0
 8026de0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8026de2:	9820      	ldr	r0, [sp, #128]	; 0x80
 8026de4:	fb0c fc02 	mul.w	ip, ip, r2
 8026de8:	fb00 f002 	mul.w	r0, r0, r2
 8026dec:	4601      	mov	r1, r0
 8026dee:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8026df0:	981e      	ldr	r0, [sp, #120]	; 0x78
 8026df2:	fb00 cc02 	mla	ip, r0, r2, ip
 8026df6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8026df8:	fb00 1102 	mla	r1, r0, r2, r1
 8026dfc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8026dfe:	9821      	ldr	r0, [sp, #132]	; 0x84
 8026e00:	fb06 c602 	mla	r6, r6, r2, ip
 8026e04:	fb00 1002 	mla	r0, r0, r2, r1
 8026e08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026e0a:	f89d 1094 	ldrb.w	r1, [sp, #148]	; 0x94
 8026e0e:	fb03 6602 	mla	r6, r3, r2, r6
 8026e12:	fb0e 0302 	mla	r3, lr, r2, r0
 8026e16:	0a32      	lsrs	r2, r6, #8
 8026e18:	0a1b      	lsrs	r3, r3, #8
 8026e1a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8026e1e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026e22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026e26:	4313      	orrs	r3, r2
 8026e28:	fb16 f001 	smulbb	r0, r6, r1
 8026e2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8026e2e:	fa5f fe83 	uxtb.w	lr, r3
 8026e32:	fb1e fe02 	smulbb	lr, lr, r2
 8026e36:	f89b c001 	ldrb.w	ip, [fp, #1]
 8026e3a:	900e      	str	r0, [sp, #56]	; 0x38
 8026e3c:	f89b 0000 	ldrb.w	r0, [fp]
 8026e40:	fb1c fc01 	smulbb	ip, ip, r1
 8026e44:	fb00 e001 	mla	r0, r0, r1, lr
 8026e48:	4611      	mov	r1, r2
 8026e4a:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8026e4e:	fb06 c202 	mla	r2, r6, r2, ip
 8026e52:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8026e54:	0c1b      	lsrs	r3, r3, #16
 8026e56:	fb03 6301 	mla	r3, r3, r1, r6
 8026e5a:	b280      	uxth	r0, r0
 8026e5c:	b296      	uxth	r6, r2
 8026e5e:	b29b      	uxth	r3, r3
 8026e60:	1c5a      	adds	r2, r3, #1
 8026e62:	f100 0c01 	add.w	ip, r0, #1
 8026e66:	1c71      	adds	r1, r6, #1
 8026e68:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026e6c:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8026e70:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8026e74:	1200      	asrs	r0, r0, #8
 8026e76:	120a      	asrs	r2, r1, #8
 8026e78:	121b      	asrs	r3, r3, #8
 8026e7a:	f88b 0000 	strb.w	r0, [fp]
 8026e7e:	f88b 2001 	strb.w	r2, [fp, #1]
 8026e82:	f88b 3002 	strb.w	r3, [fp, #2]
 8026e86:	f1b8 0f00 	cmp.w	r8, #0
 8026e8a:	f10b 0b03 	add.w	fp, fp, #3
 8026e8e:	44ca      	add	sl, r9
 8026e90:	442f      	add	r7, r5
 8026e92:	dd2e      	ble.n	8026ef2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73e>
 8026e94:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8026e98:	ea4f 422a 	mov.w	r2, sl, asr #16
 8026e9c:	2a00      	cmp	r2, #0
 8026e9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8026ea2:	ea4f 4127 	mov.w	r1, r7, asr #16
 8026ea6:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8026eaa:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8026eae:	f6bf aeac 	bge.w	8026c0a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8026eb2:	1c53      	adds	r3, r2, #1
 8026eb4:	d4e7      	bmi.n	8026e86 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8026eb6:	42b3      	cmp	r3, r6
 8026eb8:	dce5      	bgt.n	8026e86 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8026eba:	1c4b      	adds	r3, r1, #1
 8026ebc:	d4e3      	bmi.n	8026e86 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8026ebe:	4563      	cmp	r3, ip
 8026ec0:	dce1      	bgt.n	8026e86 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8026ec2:	fa0f f38c 	sxth.w	r3, ip
 8026ec6:	b236      	sxth	r6, r6
 8026ec8:	e9cd 6300 	strd	r6, r3, [sp]
 8026ecc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026ece:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8026ed2:	e9cd e305 	strd	lr, r3, [sp, #20]
 8026ed6:	9202      	str	r2, [sp, #8]
 8026ed8:	4659      	mov	r1, fp
 8026eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026edc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026ede:	9822      	ldr	r0, [sp, #136]	; 0x88
 8026ee0:	f7ff faf2 	bl	80264c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8026ee4:	f1b8 0f00 	cmp.w	r8, #0
 8026ee8:	f10b 0b03 	add.w	fp, fp, #3
 8026eec:	44ca      	add	sl, r9
 8026eee:	442f      	add	r7, r5
 8026ef0:	dcd0      	bgt.n	8026e94 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8026ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ef4:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8026ef8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026efc:	3301      	adds	r3, #1
 8026efe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026f02:	4499      	add	r9, r3
 8026f04:	e4b9      	b.n	802687a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8026f06:	3b01      	subs	r3, #1
 8026f08:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8026f0c:	4698      	mov	r8, r3
 8026f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8026f10:	e66e      	b.n	8026bf0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8026f12:	f1be 0f00 	cmp.w	lr, #0
 8026f16:	f43f ae9f 	beq.w	8026c58 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8026f1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026f1c:	5d92      	ldrb	r2, [r2, r6]
 8026f1e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8026f20:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8026f24:	9226      	str	r2, [sp, #152]	; 0x98
 8026f26:	0e12      	lsrs	r2, r2, #24
 8026f28:	9219      	str	r2, [sp, #100]	; 0x64
 8026f2a:	e695      	b.n	8026c58 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8026f2c:	eb01 0c06 	add.w	ip, r1, r6
 8026f30:	f89c c001 	ldrb.w	ip, [ip, #1]
 8026f34:	5d89      	ldrb	r1, [r1, r6]
 8026f36:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8026f38:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 8026f3c:	f856 6021 	ldr.w	r6, [r6, r1, lsl #2]
 8026f40:	9227      	str	r2, [sp, #156]	; 0x9c
 8026f42:	0e12      	lsrs	r2, r2, #24
 8026f44:	921a      	str	r2, [sp, #104]	; 0x68
 8026f46:	0e32      	lsrs	r2, r6, #24
 8026f48:	9626      	str	r6, [sp, #152]	; 0x98
 8026f4a:	9219      	str	r2, [sp, #100]	; 0x64
 8026f4c:	e684      	b.n	8026c58 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8026f4e:	f43f ac94 	beq.w	802687a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8026f52:	1e6c      	subs	r4, r5, #1
 8026f54:	e4d4      	b.n	8026900 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8026f56:	bf00      	nop

08026f58 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8026f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f5c:	b089      	sub	sp, #36	; 0x24
 8026f5e:	f9bd b048 	ldrsh.w	fp, [sp, #72]	; 0x48
 8026f62:	e9dd 4014 	ldrd	r4, r0, [sp, #80]	; 0x50
 8026f66:	fb00 450b 	mla	r5, r0, fp, r4
 8026f6a:	2800      	cmp	r0, #0
 8026f6c:	4694      	mov	ip, r2
 8026f6e:	f100 0601 	add.w	r6, r0, #1
 8026f72:	442a      	add	r2, r5
 8026f74:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8026f78:	f89d a058 	ldrb.w	sl, [sp, #88]	; 0x58
 8026f7c:	f89d 705c 	ldrb.w	r7, [sp, #92]	; 0x5c
 8026f80:	db02      	blt.n	8026f88 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x30>
 8026f82:	4580      	cmp	r8, r0
 8026f84:	f300 810a 	bgt.w	802719c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x244>
 8026f88:	f04f 0c00 	mov.w	ip, #0
 8026f8c:	46e6      	mov	lr, ip
 8026f8e:	4665      	mov	r5, ip
 8026f90:	46e1      	mov	r9, ip
 8026f92:	2e00      	cmp	r6, #0
 8026f94:	db02      	blt.n	8026f9c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x44>
 8026f96:	45b0      	cmp	r8, r6
 8026f98:	f300 811a 	bgt.w	80271d0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x278>
 8026f9c:	2400      	movs	r4, #0
 8026f9e:	46a0      	mov	r8, r4
 8026fa0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8026fa4:	f1ba 0f0f 	cmp.w	sl, #15
 8026fa8:	f200 8158 	bhi.w	802725c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8026fac:	2f0f      	cmp	r7, #15
 8026fae:	f200 8155 	bhi.w	802725c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8026fb2:	b2ba      	uxth	r2, r7
 8026fb4:	fa1f f38a 	uxth.w	r3, sl
 8026fb8:	fb02 f703 	mul.w	r7, r2, r3
 8026fbc:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8026fc0:	b292      	uxth	r2, r2
 8026fc2:	fb02 fa08 	mul.w	sl, r2, r8
 8026fc6:	fb07 fb04 	mul.w	fp, r7, r4
 8026fca:	011b      	lsls	r3, r3, #4
 8026fcc:	1bd8      	subs	r0, r3, r7
 8026fce:	b280      	uxth	r0, r0
 8026fd0:	9001      	str	r0, [sp, #4]
 8026fd2:	fb00 f00c 	mul.w	r0, r0, ip
 8026fd6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8026fda:	1a9b      	subs	r3, r3, r2
 8026fdc:	b29b      	uxth	r3, r3
 8026fde:	fb03 000e 	mla	r0, r3, lr, r0
 8026fe2:	4450      	add	r0, sl
 8026fe4:	4458      	add	r0, fp
 8026fe6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026fea:	9002      	str	r0, [sp, #8]
 8026fec:	2800      	cmp	r0, #0
 8026fee:	f000 80d2 	beq.w	8027196 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8026ff2:	f009 10ff 	and.w	r0, r9, #16711935	; 0xff00ff
 8026ff6:	f409 467f 	and.w	r6, r9, #65280	; 0xff00
 8026ffa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026ffe:	9005      	str	r0, [sp, #20]
 8027000:	9606      	str	r6, [sp, #24]
 8027002:	d01e      	beq.n	8027042 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xea>
 8027004:	fb00 fb0e 	mul.w	fp, r0, lr
 8027008:	fb06 fe0e 	mul.w	lr, r6, lr
 802700c:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8027010:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027014:	f50e 7a80 	add.w	sl, lr, #256	; 0x100
 8027018:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802701c:	4483      	add	fp, r0
 802701e:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8027022:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027026:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 802702a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802702e:	f40a 4e7f 	and.w	lr, sl, #65280	; 0xff00
 8027032:	ea4b 0e0e 	orr.w	lr, fp, lr
 8027036:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 802703a:	9005      	str	r0, [sp, #20]
 802703c:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 8027040:	9006      	str	r0, [sp, #24]
 8027042:	f405 407f 	and.w	r0, r5, #65280	; 0xff00
 8027046:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802704a:	f005 1aff 	and.w	sl, r5, #16711935	; 0xff00ff
 802704e:	9007      	str	r0, [sp, #28]
 8027050:	d01d      	beq.n	802708e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x136>
 8027052:	fb0a fa0c 	mul.w	sl, sl, ip
 8027056:	fb00 f50c 	mul.w	r5, r0, ip
 802705a:	ea4f 201a 	mov.w	r0, sl, lsr #8
 802705e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027062:	f505 7b80 	add.w	fp, r5, #256	; 0x100
 8027066:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802706a:	4482      	add	sl, r0
 802706c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8027070:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027074:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8027078:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 802707c:	f40b 457f 	and.w	r5, fp, #65280	; 0xff00
 8027080:	ea4a 0505 	orr.w	r5, sl, r5
 8027084:	f405 407f 	and.w	r0, r5, #65280	; 0xff00
 8027088:	f005 1aff 	and.w	sl, r5, #16711935	; 0xff00ff
 802708c:	9007      	str	r0, [sp, #28]
 802708e:	9803      	ldr	r0, [sp, #12]
 8027090:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027094:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8027098:	f400 467f 	and.w	r6, r0, #65280	; 0xff00
 802709c:	d01b      	beq.n	80270d6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x17e>
 802709e:	fb09 f908 	mul.w	r9, r9, r8
 80270a2:	fb06 f608 	mul.w	r6, r6, r8
 80270a6:	ea4f 2c19 	mov.w	ip, r9, lsr #8
 80270aa:	f506 7080 	add.w	r0, r6, #256	; 0x100
 80270ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80270b2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80270b6:	eb00 2616 	add.w	r6, r0, r6, lsr #8
 80270ba:	44e1      	add	r9, ip
 80270bc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80270c0:	0a30      	lsrs	r0, r6, #8
 80270c2:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 80270c6:	f400 467f 	and.w	r6, r0, #65280	; 0xff00
 80270ca:	ea49 0606 	orr.w	r6, r9, r6
 80270ce:	f006 19ff 	and.w	r9, r6, #16711935	; 0xff00ff
 80270d2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80270d6:	9d04      	ldr	r5, [sp, #16]
 80270d8:	2cff      	cmp	r4, #255	; 0xff
 80270da:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 80270de:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80270e2:	d01a      	beq.n	802711a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1c2>
 80270e4:	fb00 f004 	mul.w	r0, r0, r4
 80270e8:	fb0e f404 	mul.w	r4, lr, r4
 80270ec:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 80270f0:	f504 7e80 	add.w	lr, r4, #256	; 0x100
 80270f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80270f8:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80270fc:	eb0e 2414 	add.w	r4, lr, r4, lsr #8
 8027100:	4460      	add	r0, ip
 8027102:	0a00      	lsrs	r0, r0, #8
 8027104:	0a24      	lsrs	r4, r4, #8
 8027106:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802710a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802710e:	ea40 0e0e 	orr.w	lr, r0, lr
 8027112:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8027116:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802711a:	9c02      	ldr	r4, [sp, #8]
 802711c:	9d07      	ldr	r5, [sp, #28]
 802711e:	ea6f 0c04 	mvn.w	ip, r4
 8027122:	9c01      	ldr	r4, [sp, #4]
 8027124:	fa5f fc8c 	uxtb.w	ip, ip
 8027128:	fb0a fb04 	mul.w	fp, sl, r4
 802712c:	fb05 f504 	mul.w	r5, r5, r4
 8027130:	9c05      	ldr	r4, [sp, #20]
 8027132:	fb04 bb03 	mla	fp, r4, r3, fp
 8027136:	9c06      	ldr	r4, [sp, #24]
 8027138:	fb09 b902 	mla	r9, r9, r2, fp
 802713c:	fb04 5303 	mla	r3, r4, r3, r5
 8027140:	fb06 3602 	mla	r6, r6, r2, r3
 8027144:	780c      	ldrb	r4, [r1, #0]
 8027146:	fb00 9007 	mla	r0, r0, r7, r9
 802714a:	784a      	ldrb	r2, [r1, #1]
 802714c:	fb0e 6707 	mla	r7, lr, r7, r6
 8027150:	788b      	ldrb	r3, [r1, #2]
 8027152:	fb02 f20c 	mul.w	r2, r2, ip
 8027156:	fb03 f30c 	mul.w	r3, r3, ip
 802715a:	fb04 fc0c 	mul.w	ip, r4, ip
 802715e:	0a00      	lsrs	r0, r0, #8
 8027160:	0a3f      	lsrs	r7, r7, #8
 8027162:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027166:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802716a:	4338      	orrs	r0, r7
 802716c:	1c54      	adds	r4, r2, #1
 802716e:	1c5f      	adds	r7, r3, #1
 8027170:	f10c 0601 	add.w	r6, ip, #1
 8027174:	0a05      	lsrs	r5, r0, #8
 8027176:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 802717a:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 802717e:	0c04      	lsrs	r4, r0, #16
 8027180:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8027184:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8027188:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802718c:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8027190:	704a      	strb	r2, [r1, #1]
 8027192:	708b      	strb	r3, [r1, #2]
 8027194:	7008      	strb	r0, [r1, #0]
 8027196:	b009      	add	sp, #36	; 0x24
 8027198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802719c:	2c00      	cmp	r4, #0
 802719e:	db01      	blt.n	80271a4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24c>
 80271a0:	45a3      	cmp	fp, r4
 80271a2:	dc41      	bgt.n	8027228 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2d0>
 80271a4:	f04f 0e00 	mov.w	lr, #0
 80271a8:	46f1      	mov	r9, lr
 80271aa:	1c60      	adds	r0, r4, #1
 80271ac:	d42b      	bmi.n	8027206 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ae>
 80271ae:	4583      	cmp	fp, r0
 80271b0:	dd29      	ble.n	8027206 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ae>
 80271b2:	f1ba 0f00 	cmp.w	sl, #0
 80271b6:	d005      	beq.n	80271c4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x26c>
 80271b8:	7850      	ldrb	r0, [r2, #1]
 80271ba:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80271be:	ea4f 6c15 	mov.w	ip, r5, lsr #24
 80271c2:	e6e6      	b.n	8026f92 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3a>
 80271c4:	2e00      	cmp	r6, #0
 80271c6:	db42      	blt.n	802724e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2f6>
 80271c8:	45b0      	cmp	r8, r6
 80271ca:	dd40      	ble.n	802724e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2f6>
 80271cc:	46d4      	mov	ip, sl
 80271ce:	4655      	mov	r5, sl
 80271d0:	b1ef      	cbz	r7, 802720e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2b6>
 80271d2:	2c00      	cmp	r4, #0
 80271d4:	db32      	blt.n	802723c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2e4>
 80271d6:	45a3      	cmp	fp, r4
 80271d8:	dd30      	ble.n	802723c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2e4>
 80271da:	f812 000b 	ldrb.w	r0, [r2, fp]
 80271de:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80271e2:	9003      	str	r0, [sp, #12]
 80271e4:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80271e8:	3401      	adds	r4, #1
 80271ea:	d424      	bmi.n	8027236 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2de>
 80271ec:	45a3      	cmp	fp, r4
 80271ee:	dd22      	ble.n	8027236 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2de>
 80271f0:	f1ba 0f00 	cmp.w	sl, #0
 80271f4:	d027      	beq.n	8027246 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ee>
 80271f6:	4493      	add	fp, r2
 80271f8:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80271fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027200:	9304      	str	r3, [sp, #16]
 8027202:	0e1c      	lsrs	r4, r3, #24
 8027204:	e6ce      	b.n	8026fa4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x4c>
 8027206:	f04f 0c00 	mov.w	ip, #0
 802720a:	4665      	mov	r5, ip
 802720c:	e6c1      	b.n	8026f92 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3a>
 802720e:	f1ba 0f0f 	cmp.w	sl, #15
 8027212:	d823      	bhi.n	802725c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8027214:	fa1f f38a 	uxth.w	r3, sl
 8027218:	463a      	mov	r2, r7
 802721a:	46bb      	mov	fp, r7
 802721c:	46ba      	mov	sl, r7
 802721e:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8027222:	463c      	mov	r4, r7
 8027224:	46b8      	mov	r8, r7
 8027226:	e6d0      	b.n	8026fca <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x72>
 8027228:	f81c 0005 	ldrb.w	r0, [ip, r5]
 802722c:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8027230:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 8027234:	e7b9      	b.n	80271aa <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8027236:	2400      	movs	r4, #0
 8027238:	9404      	str	r4, [sp, #16]
 802723a:	e6b3      	b.n	8026fa4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x4c>
 802723c:	f04f 0800 	mov.w	r8, #0
 8027240:	f8cd 800c 	str.w	r8, [sp, #12]
 8027244:	e7d0      	b.n	80271e8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>
 8027246:	f8cd a010 	str.w	sl, [sp, #16]
 802724a:	4654      	mov	r4, sl
 802724c:	e6ae      	b.n	8026fac <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x54>
 802724e:	4655      	mov	r5, sl
 8027250:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8027254:	4654      	mov	r4, sl
 8027256:	46d0      	mov	r8, sl
 8027258:	46d4      	mov	ip, sl
 802725a:	e6a7      	b.n	8026fac <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x54>
 802725c:	4b03      	ldr	r3, [pc, #12]	; (802726c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x314>)
 802725e:	4a04      	ldr	r2, [pc, #16]	; (8027270 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x318>)
 8027260:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8027264:	4803      	ldr	r0, [pc, #12]	; (8027274 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x31c>)
 8027266:	f001 fff5 	bl	8029254 <__assert_func>
 802726a:	bf00      	nop
 802726c:	0802c4f8 	.word	0x0802c4f8
 8027270:	0802cb70 	.word	0x0802cb70
 8027274:	0802c67c 	.word	0x0802c67c

08027278 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802727c:	ed2d 8b0a 	vpush	{d8-d12}
 8027280:	eeb0 aa40 	vmov.f32	s20, s0
 8027284:	eef0 9a60 	vmov.f32	s19, s1
 8027288:	eeb0 9a41 	vmov.f32	s18, s2
 802728c:	eef0 8a62 	vmov.f32	s17, s5
 8027290:	eeb0 8a43 	vmov.f32	s16, s6
 8027294:	eeb0 ca44 	vmov.f32	s24, s8
 8027298:	eef0 ba64 	vmov.f32	s23, s9
 802729c:	eeb0 ba45 	vmov.f32	s22, s10
 80272a0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80272a4:	b0a3      	sub	sp, #140	; 0x8c
 80272a6:	901e      	str	r0, [sp, #120]	; 0x78
 80272a8:	9111      	str	r1, [sp, #68]	; 0x44
 80272aa:	9213      	str	r2, [sp, #76]	; 0x4c
 80272ac:	e9dd 413b 	ldrd	r4, r1, [sp, #236]	; 0xec
 80272b0:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 80272b2:	6860      	ldr	r0, [r4, #4]
 80272b4:	fb00 1b02 	mla	fp, r0, r2, r1
 80272b8:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80272ba:	6821      	ldr	r1, [r4, #0]
 80272bc:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 80272be:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
 80272c2:	6852      	ldr	r2, [r2, #4]
 80272c4:	eb01 0800 	add.w	r8, r1, r0
 80272c8:	6824      	ldr	r4, [r4, #0]
 80272ca:	e9dd 7b37 	ldrd	r7, fp, [sp, #220]	; 0xdc
 80272ce:	3204      	adds	r2, #4
 80272d0:	46c3      	mov	fp, r8
 80272d2:	46b8      	mov	r8, r7
 80272d4:	9f38      	ldr	r7, [sp, #224]	; 0xe0
 80272d6:	940e      	str	r4, [sp, #56]	; 0x38
 80272d8:	920a      	str	r2, [sp, #40]	; 0x28
 80272da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80272dc:	2a00      	cmp	r2, #0
 80272de:	dc02      	bgt.n	80272e6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80272e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80272e2:	2a00      	cmp	r2, #0
 80272e4:	dd63      	ble.n	80273ae <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80272e6:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80272e8:	2b00      	cmp	r3, #0
 80272ea:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 80272ee:	b234      	sxth	r4, r6
 80272f0:	fa0f f98c 	sxth.w	r9, ip
 80272f4:	f340 835f 	ble.w	80279b6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73e>
 80272f8:	1e65      	subs	r5, r4, #1
 80272fa:	f109 3eff 	add.w	lr, r9, #4294967295
 80272fe:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8027302:	e9dd ca39 	ldrd	ip, sl, [sp, #228]	; 0xe4
 8027306:	ea5f 4228 	movs.w	r2, r8, asr #16
 802730a:	ea4f 4127 	mov.w	r1, r7, asr #16
 802730e:	d405      	bmi.n	802731c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8027310:	42aa      	cmp	r2, r5
 8027312:	da03      	bge.n	802731c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8027314:	2900      	cmp	r1, #0
 8027316:	db01      	blt.n	802731c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8027318:	4571      	cmp	r1, lr
 802731a:	db4d      	blt.n	80273b8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802731c:	1c50      	adds	r0, r2, #1
 802731e:	d406      	bmi.n	802732e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8027320:	42a0      	cmp	r0, r4
 8027322:	dc04      	bgt.n	802732e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8027324:	1c48      	adds	r0, r1, #1
 8027326:	d402      	bmi.n	802732e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8027328:	4548      	cmp	r0, r9
 802732a:	f340 831e 	ble.w	802796a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 802732e:	3b01      	subs	r3, #1
 8027330:	44e0      	add	r8, ip
 8027332:	4457      	add	r7, sl
 8027334:	f10b 0b03 	add.w	fp, fp, #3
 8027338:	d1e5      	bne.n	8027306 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802733a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802733c:	2b00      	cmp	r3, #0
 802733e:	dd36      	ble.n	80273ae <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8027340:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8027344:	ee79 9aab 	vadd.f32	s19, s19, s23
 8027348:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802734c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8027350:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8027354:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027358:	ee76 6a68 	vsub.f32	s13, s12, s17
 802735c:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8027360:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027364:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027368:	ee16 2a90 	vmov	r2, s13
 802736c:	3b01      	subs	r3, #1
 802736e:	9311      	str	r3, [sp, #68]	; 0x44
 8027370:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027372:	fb92 f3f3 	sdiv	r3, r2, r3
 8027376:	ee17 2a10 	vmov	r2, s14
 802737a:	eeb0 7a48 	vmov.f32	s14, s16
 802737e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027382:	ee17 7a10 	vmov	r7, s14
 8027386:	eeb0 7a68 	vmov.f32	s14, s17
 802738a:	9339      	str	r3, [sp, #228]	; 0xe4
 802738c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802738e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027392:	fb92 f3f3 	sdiv	r3, r2, r3
 8027396:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027398:	933a      	str	r3, [sp, #232]	; 0xe8
 802739a:	ee17 8a10 	vmov	r8, s14
 802739e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80273a0:	eeb0 8a67 	vmov.f32	s16, s15
 80273a4:	eef0 8a46 	vmov.f32	s17, s12
 80273a8:	bf08      	it	eq
 80273aa:	4613      	moveq	r3, r2
 80273ac:	e795      	b.n	80272da <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80273ae:	b023      	add	sp, #140	; 0x8c
 80273b0:	ecbd 8b0a 	vpop	{d8-d12}
 80273b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273b8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80273bc:	9839      	ldr	r0, [sp, #228]	; 0xe4
 80273be:	1e59      	subs	r1, r3, #1
 80273c0:	fb00 8201 	mla	r2, r0, r1, r8
 80273c4:	1412      	asrs	r2, r2, #16
 80273c6:	9109      	str	r1, [sp, #36]	; 0x24
 80273c8:	f100 8151 	bmi.w	802766e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80273cc:	42aa      	cmp	r2, r5
 80273ce:	f280 814e 	bge.w	802766e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80273d2:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 80273d4:	fb02 7201 	mla	r2, r2, r1, r7
 80273d8:	1412      	asrs	r2, r2, #16
 80273da:	f100 8148 	bmi.w	802766e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80273de:	f109 31ff 	add.w	r1, r9, #4294967295
 80273e2:	428a      	cmp	r2, r1
 80273e4:	f280 8143 	bge.w	802766e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80273e8:	2b00      	cmp	r3, #0
 80273ea:	dda6      	ble.n	802733a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80273ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80273f0:	445b      	add	r3, fp
 80273f2:	930d      	str	r3, [sp, #52]	; 0x34
 80273f4:	f10b 0c03 	add.w	ip, fp, #3
 80273f8:	46c1      	mov	r9, r8
 80273fa:	9738      	str	r7, [sp, #224]	; 0xe0
 80273fc:	4621      	mov	r1, r4
 80273fe:	463b      	mov	r3, r7
 8027400:	e114      	b.n	802762c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8027402:	f893 e001 	ldrb.w	lr, [r3, #1]
 8027406:	f856 502e 	ldr.w	r5, [r6, lr, lsl #2]
 802740a:	950f      	str	r5, [sp, #60]	; 0x3c
 802740c:	0e2d      	lsrs	r5, r5, #24
 802740e:	9506      	str	r5, [sp, #24]
 8027410:	b162      	cbz	r2, 802742c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8027412:	185d      	adds	r5, r3, r1
 8027414:	786d      	ldrb	r5, [r5, #1]
 8027416:	5c5b      	ldrb	r3, [r3, r1]
 8027418:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 802741c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027420:	9112      	str	r1, [sp, #72]	; 0x48
 8027422:	9310      	str	r3, [sp, #64]	; 0x40
 8027424:	0e09      	lsrs	r1, r1, #24
 8027426:	0e1b      	lsrs	r3, r3, #24
 8027428:	9108      	str	r1, [sp, #32]
 802742a:	9307      	str	r3, [sp, #28]
 802742c:	b2a4      	uxth	r4, r4
 802742e:	b292      	uxth	r2, r2
 8027430:	fb04 f502 	mul.w	r5, r4, r2
 8027434:	0124      	lsls	r4, r4, #4
 8027436:	1b66      	subs	r6, r4, r5
 8027438:	9b06      	ldr	r3, [sp, #24]
 802743a:	b2b6      	uxth	r6, r6
 802743c:	fb06 f103 	mul.w	r1, r6, r3
 8027440:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8027444:	b292      	uxth	r2, r2
 8027446:	f5c4 7380 	rsb	r3, r4, #256	; 0x100
 802744a:	1a9b      	subs	r3, r3, r2
 802744c:	b29b      	uxth	r3, r3
 802744e:	fb03 1100 	mla	r1, r3, r0, r1
 8027452:	9c07      	ldr	r4, [sp, #28]
 8027454:	fb02 1104 	mla	r1, r2, r4, r1
 8027458:	9c08      	ldr	r4, [sp, #32]
 802745a:	fb05 1104 	mla	r1, r5, r4, r1
 802745e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027462:	9109      	str	r1, [sp, #36]	; 0x24
 8027464:	2900      	cmp	r1, #0
 8027466:	f000 80d2 	beq.w	802760e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 802746a:	f007 14ff 	and.w	r4, r7, #16711935	; 0xff00ff
 802746e:	f407 417f 	and.w	r1, r7, #65280	; 0xff00
 8027472:	28ff      	cmp	r0, #255	; 0xff
 8027474:	940b      	str	r4, [sp, #44]	; 0x2c
 8027476:	910c      	str	r1, [sp, #48]	; 0x30
 8027478:	d01b      	beq.n	80274b2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802747a:	fb04 f400 	mul.w	r4, r4, r0
 802747e:	4627      	mov	r7, r4
 8027480:	fb01 fe00 	mul.w	lr, r1, r0
 8027484:	0a24      	lsrs	r4, r4, #8
 8027486:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802748a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802748e:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 8027492:	4427      	add	r7, r4
 8027494:	eb00 201e 	add.w	r0, r0, lr, lsr #8
 8027498:	0a3f      	lsrs	r7, r7, #8
 802749a:	0a00      	lsrs	r0, r0, #8
 802749c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80274a0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80274a4:	4307      	orrs	r7, r0
 80274a6:	f007 11ff 	and.w	r1, r7, #16711935	; 0xff00ff
 80274aa:	910b      	str	r1, [sp, #44]	; 0x2c
 80274ac:	f407 417f 	and.w	r1, r7, #65280	; 0xff00
 80274b0:	910c      	str	r1, [sp, #48]	; 0x30
 80274b2:	9806      	ldr	r0, [sp, #24]
 80274b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80274b6:	28ff      	cmp	r0, #255	; 0xff
 80274b8:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 80274bc:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80274c0:	d01a      	beq.n	80274f8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 80274c2:	fb07 f700 	mul.w	r7, r7, r0
 80274c6:	fb0e fe00 	mul.w	lr, lr, r0
 80274ca:	0a3c      	lsrs	r4, r7, #8
 80274cc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80274d0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80274d4:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 80274d8:	4427      	add	r7, r4
 80274da:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 80274de:	0a3f      	lsrs	r7, r7, #8
 80274e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80274e4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80274e8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80274ec:	ea47 0e0e 	orr.w	lr, r7, lr
 80274f0:	f00e 17ff 	and.w	r7, lr, #16711935	; 0xff00ff
 80274f4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80274f8:	9c07      	ldr	r4, [sp, #28]
 80274fa:	9910      	ldr	r1, [sp, #64]	; 0x40
 80274fc:	2cff      	cmp	r4, #255	; 0xff
 80274fe:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 8027502:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8027506:	d01b      	beq.n	8027540 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8027508:	fb00 f004 	mul.w	r0, r0, r4
 802750c:	fb0a fa04 	mul.w	sl, sl, r4
 8027510:	ea4f 2810 	mov.w	r8, r0, lsr #8
 8027514:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8027518:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802751c:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8027520:	4440      	add	r0, r8
 8027522:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8027526:	0a00      	lsrs	r0, r0, #8
 8027528:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802752c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027530:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027534:	ea40 0a0a 	orr.w	sl, r0, sl
 8027538:	f00a 10ff 	and.w	r0, sl, #16711935	; 0xff00ff
 802753c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027540:	9c08      	ldr	r4, [sp, #32]
 8027542:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027544:	2cff      	cmp	r4, #255	; 0xff
 8027546:	f001 18ff 	and.w	r8, r1, #16711935	; 0xff00ff
 802754a:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 802754e:	d01b      	beq.n	8027588 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8027550:	fb08 f804 	mul.w	r8, r8, r4
 8027554:	fb0b fb04 	mul.w	fp, fp, r4
 8027558:	ea4f 2418 	mov.w	r4, r8, lsr #8
 802755c:	f004 11ff 	and.w	r1, r4, #16711935	; 0xff00ff
 8027560:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8027564:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 8027568:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 802756c:	4488      	add	r8, r1
 802756e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027572:	0a24      	lsrs	r4, r4, #8
 8027574:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8027578:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802757c:	ea48 0b0b 	orr.w	fp, r8, fp
 8027580:	f00b 18ff 	and.w	r8, fp, #16711935	; 0xff00ff
 8027584:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027588:	9909      	ldr	r1, [sp, #36]	; 0x24
 802758a:	fb07 f706 	mul.w	r7, r7, r6
 802758e:	43c9      	mvns	r1, r1
 8027590:	fb0e f606 	mul.w	r6, lr, r6
 8027594:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027596:	f81c ec02 	ldrb.w	lr, [ip, #-2]
 802759a:	fb04 7703 	mla	r7, r4, r3, r7
 802759e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80275a0:	fb00 7702 	mla	r7, r0, r2, r7
 80275a4:	fb04 6603 	mla	r6, r4, r3, r6
 80275a8:	fb0a 6602 	mla	r6, sl, r2, r6
 80275ac:	f81c 3c03 	ldrb.w	r3, [ip, #-3]
 80275b0:	fb0b 6b05 	mla	fp, fp, r5, r6
 80275b4:	fb08 7805 	mla	r8, r8, r5, r7
 80275b8:	f81c 4c01 	ldrb.w	r4, [ip, #-1]
 80275bc:	b2c9      	uxtb	r1, r1
 80275be:	fb0e fe01 	mul.w	lr, lr, r1
 80275c2:	fb04 f401 	mul.w	r4, r4, r1
 80275c6:	fb03 f101 	mul.w	r1, r3, r1
 80275ca:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80275ce:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80275d2:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80275d6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80275da:	ea48 030b 	orr.w	r3, r8, fp
 80275de:	f10e 0201 	add.w	r2, lr, #1
 80275e2:	1c66      	adds	r6, r4, #1
 80275e4:	1c4d      	adds	r5, r1, #1
 80275e6:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80275ea:	0a18      	lsrs	r0, r3, #8
 80275ec:	0c1a      	lsrs	r2, r3, #16
 80275ee:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 80275f2:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 80275f6:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 80275fa:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80275fe:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027602:	f80c ec02 	strb.w	lr, [ip, #-2]
 8027606:	f80c 4c01 	strb.w	r4, [ip, #-1]
 802760a:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802760e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8027610:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8027612:	4499      	add	r9, r3
 8027614:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8027616:	4413      	add	r3, r2
 8027618:	9338      	str	r3, [sp, #224]	; 0xe0
 802761a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802761c:	4563      	cmp	r3, ip
 802761e:	d024      	beq.n	802766a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8027620:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8027622:	f10c 0c03 	add.w	ip, ip, #3
 8027626:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802762a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802762c:	ea4f 4229 	mov.w	r2, r9, asr #16
 8027630:	141b      	asrs	r3, r3, #16
 8027632:	fb01 2303 	mla	r3, r1, r3, r2
 8027636:	980e      	ldr	r0, [sp, #56]	; 0x38
 8027638:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802763a:	5cc2      	ldrb	r2, [r0, r3]
 802763c:	f3c9 3403 	ubfx	r4, r9, #12, #4
 8027640:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8027644:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8027646:	4403      	add	r3, r0
 8027648:	f3c2 3203 	ubfx	r2, r2, #12, #4
 802764c:	0e38      	lsrs	r0, r7, #24
 802764e:	2c00      	cmp	r4, #0
 8027650:	f47f aed7 	bne.w	8027402 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8027654:	2a00      	cmp	r2, #0
 8027656:	f43f aee9 	beq.w	802742c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802765a:	5c5b      	ldrb	r3, [r3, r1]
 802765c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802765e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8027662:	9310      	str	r3, [sp, #64]	; 0x40
 8027664:	0e1b      	lsrs	r3, r3, #24
 8027666:	9307      	str	r3, [sp, #28]
 8027668:	e6e0      	b.n	802742c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802766a:	469b      	mov	fp, r3
 802766c:	e665      	b.n	802733a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802766e:	2b00      	cmp	r3, #0
 8027670:	f77f ae63 	ble.w	802733a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8027674:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8027678:	ea4f 4228 	mov.w	r2, r8, asr #16
 802767c:	1439      	asrs	r1, r7, #16
 802767e:	2a00      	cmp	r2, #0
 8027680:	46d9      	mov	r9, fp
 8027682:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8027686:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8027688:	e9dd b539 	ldrd	fp, r5, [sp, #228]	; 0xe4
 802768c:	f3c8 3003 	ubfx	r0, r8, #12, #4
 8027690:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8027694:	f2c0 8141 	blt.w	802791a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 8027698:	1e73      	subs	r3, r6, #1
 802769a:	429a      	cmp	r2, r3
 802769c:	f280 813d 	bge.w	802791a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 80276a0:	2900      	cmp	r1, #0
 80276a2:	f2c0 813a 	blt.w	802791a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 80276a6:	f10c 33ff 	add.w	r3, ip, #4294967295
 80276aa:	4299      	cmp	r1, r3
 80276ac:	f280 8135 	bge.w	802791a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 80276b0:	b233      	sxth	r3, r6
 80276b2:	fb01 2203 	mla	r2, r1, r3, r2
 80276b6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80276b8:	930c      	str	r3, [sp, #48]	; 0x30
 80276ba:	5c8b      	ldrb	r3, [r1, r2]
 80276bc:	440a      	add	r2, r1
 80276be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80276c0:	4616      	mov	r6, r2
 80276c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80276c6:	930d      	str	r3, [sp, #52]	; 0x34
 80276c8:	0e1b      	lsrs	r3, r3, #24
 80276ca:	2800      	cmp	r0, #0
 80276cc:	f000 8153 	beq.w	8027976 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 80276d0:	f896 c001 	ldrb.w	ip, [r6, #1]
 80276d4:	f851 202c 	ldr.w	r2, [r1, ip, lsl #2]
 80276d8:	921f      	str	r2, [sp, #124]	; 0x7c
 80276da:	0e12      	lsrs	r2, r2, #24
 80276dc:	9214      	str	r2, [sp, #80]	; 0x50
 80276de:	f1be 0f00 	cmp.w	lr, #0
 80276e2:	f040 8155 	bne.w	8027990 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80276e6:	b280      	uxth	r0, r0
 80276e8:	fa1f fc8e 	uxth.w	ip, lr
 80276ec:	fb00 f20c 	mul.w	r2, r0, ip
 80276f0:	0106      	lsls	r6, r0, #4
 80276f2:	1ab0      	subs	r0, r6, r2
 80276f4:	b281      	uxth	r1, r0
 80276f6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80276f8:	ebc2 1c0c 	rsb	ip, r2, ip, lsl #4
 80276fc:	fb01 f000 	mul.w	r0, r1, r0
 8027700:	9117      	str	r1, [sp, #92]	; 0x5c
 8027702:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
 8027706:	fa1f f18c 	uxth.w	r1, ip
 802770a:	1a76      	subs	r6, r6, r1
 802770c:	b2b6      	uxth	r6, r6
 802770e:	9619      	str	r6, [sp, #100]	; 0x64
 8027710:	fb06 0603 	mla	r6, r6, r3, r0
 8027714:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027716:	9118      	str	r1, [sp, #96]	; 0x60
 8027718:	fb01 6600 	mla	r6, r1, r0, r6
 802771c:	9916      	ldr	r1, [sp, #88]	; 0x58
 802771e:	fb02 6601 	mla	r6, r2, r1, r6
 8027722:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8027726:	911a      	str	r1, [sp, #104]	; 0x68
 8027728:	2900      	cmp	r1, #0
 802772a:	f000 80e0 	beq.w	80278ee <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 802772e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027730:	2bff      	cmp	r3, #255	; 0xff
 8027732:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
 8027736:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802773a:	910d      	str	r1, [sp, #52]	; 0x34
 802773c:	901b      	str	r0, [sp, #108]	; 0x6c
 802773e:	d01c      	beq.n	802777a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 8027740:	fb01 f103 	mul.w	r1, r1, r3
 8027744:	fb00 f003 	mul.w	r0, r0, r3
 8027748:	460e      	mov	r6, r1
 802774a:	4603      	mov	r3, r0
 802774c:	0a09      	lsrs	r1, r1, #8
 802774e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027752:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8027756:	f500 7080 	add.w	r0, r0, #256	; 0x100
 802775a:	4431      	add	r1, r6
 802775c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027760:	0a09      	lsrs	r1, r1, #8
 8027762:	0a1b      	lsrs	r3, r3, #8
 8027764:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027768:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802776c:	430b      	orrs	r3, r1
 802776e:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8027772:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027776:	910d      	str	r1, [sp, #52]	; 0x34
 8027778:	931b      	str	r3, [sp, #108]	; 0x6c
 802777a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 802777c:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8027780:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 8027784:	9914      	ldr	r1, [sp, #80]	; 0x50
 8027786:	931c      	str	r3, [sp, #112]	; 0x70
 8027788:	29ff      	cmp	r1, #255	; 0xff
 802778a:	d019      	beq.n	80277c0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 802778c:	fb03 f301 	mul.w	r3, r3, r1
 8027790:	fb06 f601 	mul.w	r6, r6, r1
 8027794:	0a19      	lsrs	r1, r3, #8
 8027796:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 802779a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802779e:	f506 7380 	add.w	r3, r6, #256	; 0x100
 80277a2:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 80277a6:	4401      	add	r1, r0
 80277a8:	0a09      	lsrs	r1, r1, #8
 80277aa:	0a1b      	lsrs	r3, r3, #8
 80277ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80277b0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80277b4:	4319      	orrs	r1, r3
 80277b6:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 80277ba:	931c      	str	r3, [sp, #112]	; 0x70
 80277bc:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 80277c0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80277c2:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 80277c6:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80277ca:	9915      	ldr	r1, [sp, #84]	; 0x54
 80277cc:	930c      	str	r3, [sp, #48]	; 0x30
 80277ce:	29ff      	cmp	r1, #255	; 0xff
 80277d0:	901d      	str	r0, [sp, #116]	; 0x74
 80277d2:	d01a      	beq.n	802780a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x592>
 80277d4:	fb03 f301 	mul.w	r3, r3, r1
 80277d8:	fb00 fc01 	mul.w	ip, r0, r1
 80277dc:	0a19      	lsrs	r1, r3, #8
 80277de:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 80277e2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80277e6:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 80277ea:	4401      	add	r1, r0
 80277ec:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80277f0:	0a09      	lsrs	r1, r1, #8
 80277f2:	0a1b      	lsrs	r3, r3, #8
 80277f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80277f8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80277fc:	4319      	orrs	r1, r3
 80277fe:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8027802:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027806:	930c      	str	r3, [sp, #48]	; 0x30
 8027808:	911d      	str	r1, [sp, #116]	; 0x74
 802780a:	9921      	ldr	r1, [sp, #132]	; 0x84
 802780c:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8027810:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8027814:	9916      	ldr	r1, [sp, #88]	; 0x58
 8027816:	29ff      	cmp	r1, #255	; 0xff
 8027818:	d01c      	beq.n	8027854 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 802781a:	fb0c fc01 	mul.w	ip, ip, r1
 802781e:	fb0e fe01 	mul.w	lr, lr, r1
 8027822:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8027826:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802782a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802782e:	f50e 7180 	add.w	r1, lr, #256	; 0x100
 8027832:	4484      	add	ip, r0
 8027834:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8027838:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802783c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027840:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027844:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027848:	ea4c 0e0e 	orr.w	lr, ip, lr
 802784c:	f00e 1cff 	and.w	ip, lr, #16711935	; 0xff00ff
 8027850:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027854:	991a      	ldr	r1, [sp, #104]	; 0x68
 8027856:	981c      	ldr	r0, [sp, #112]	; 0x70
 8027858:	43c9      	mvns	r1, r1
 802785a:	911a      	str	r1, [sp, #104]	; 0x68
 802785c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802785e:	fb00 f001 	mul.w	r0, r0, r1
 8027862:	fb06 f301 	mul.w	r3, r6, r1
 8027866:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8027868:	990d      	ldr	r1, [sp, #52]	; 0x34
 802786a:	fb01 0006 	mla	r0, r1, r6, r0
 802786e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8027870:	fb01 3106 	mla	r1, r1, r6, r3
 8027874:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8027876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027878:	910d      	str	r1, [sp, #52]	; 0x34
 802787a:	fb03 0306 	mla	r3, r3, r6, r0
 802787e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8027880:	981d      	ldr	r0, [sp, #116]	; 0x74
 8027882:	fb0c 3302 	mla	r3, ip, r2, r3
 8027886:	fb00 1106 	mla	r1, r0, r6, r1
 802788a:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 802788e:	f899 0002 	ldrb.w	r0, [r9, #2]
 8027892:	fb0e 1e02 	mla	lr, lr, r2, r1
 8027896:	f899 2001 	ldrb.w	r2, [r9, #1]
 802789a:	f899 1000 	ldrb.w	r1, [r9]
 802789e:	fb00 f006 	mul.w	r0, r0, r6
 80278a2:	fb02 fc06 	mul.w	ip, r2, r6
 80278a6:	fb01 f106 	mul.w	r1, r1, r6
 80278aa:	0a1b      	lsrs	r3, r3, #8
 80278ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80278b0:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 80278b4:	1c46      	adds	r6, r0, #1
 80278b6:	f40e 437f 	and.w	r3, lr, #65280	; 0xff00
 80278ba:	4313      	orrs	r3, r2
 80278bc:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80278c0:	f10c 0201 	add.w	r2, ip, #1
 80278c4:	1c4e      	adds	r6, r1, #1
 80278c6:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 80278ca:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 80278ce:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 80278d2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80278d6:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80278da:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80278de:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80278e2:	f889 2001 	strb.w	r2, [r9, #1]
 80278e6:	f889 0002 	strb.w	r0, [r9, #2]
 80278ea:	f889 3000 	strb.w	r3, [r9]
 80278ee:	f1ba 0f00 	cmp.w	sl, #0
 80278f2:	f109 0903 	add.w	r9, r9, #3
 80278f6:	44d8      	add	r8, fp
 80278f8:	442f      	add	r7, r5
 80278fa:	dd2c      	ble.n	8027956 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6de>
 80278fc:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8027900:	ea4f 4228 	mov.w	r2, r8, asr #16
 8027904:	2a00      	cmp	r2, #0
 8027906:	f10a 3aff 	add.w	sl, sl, #4294967295
 802790a:	ea4f 4127 	mov.w	r1, r7, asr #16
 802790e:	f3c8 3003 	ubfx	r0, r8, #12, #4
 8027912:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8027916:	f6bf aebf 	bge.w	8027698 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802791a:	1c53      	adds	r3, r2, #1
 802791c:	d4e7      	bmi.n	80278ee <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 802791e:	42b3      	cmp	r3, r6
 8027920:	dce5      	bgt.n	80278ee <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8027922:	1c4b      	adds	r3, r1, #1
 8027924:	d4e3      	bmi.n	80278ee <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8027926:	4563      	cmp	r3, ip
 8027928:	dce1      	bgt.n	80278ee <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 802792a:	fa0f f38c 	sxth.w	r3, ip
 802792e:	b236      	sxth	r6, r6
 8027930:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8027934:	e9cd 6300 	strd	r6, r3, [sp]
 8027938:	e9cd 0e04 	strd	r0, lr, [sp, #16]
 802793c:	4649      	mov	r1, r9
 802793e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027940:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027942:	981e      	ldr	r0, [sp, #120]	; 0x78
 8027944:	f7ff fb08 	bl	8026f58 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8027948:	f1ba 0f00 	cmp.w	sl, #0
 802794c:	f109 0903 	add.w	r9, r9, #3
 8027950:	44d8      	add	r8, fp
 8027952:	442f      	add	r7, r5
 8027954:	dcd2      	bgt.n	80278fc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x684>
 8027956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027958:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 802795c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027960:	3301      	adds	r3, #1
 8027962:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027966:	449b      	add	fp, r3
 8027968:	e4e7      	b.n	802733a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802796a:	3b01      	subs	r3, #1
 802796c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8027970:	469a      	mov	sl, r3
 8027972:	9309      	str	r3, [sp, #36]	; 0x24
 8027974:	e683      	b.n	802767e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 8027976:	f1be 0f00 	cmp.w	lr, #0
 802797a:	f43f aeb4 	beq.w	80276e6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 802797e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027980:	5c72      	ldrb	r2, [r6, r1]
 8027982:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027984:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8027988:	9220      	str	r2, [sp, #128]	; 0x80
 802798a:	0e12      	lsrs	r2, r2, #24
 802798c:	9215      	str	r2, [sp, #84]	; 0x54
 802798e:	e6aa      	b.n	80276e6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 8027990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027992:	eb06 0c02 	add.w	ip, r6, r2
 8027996:	4632      	mov	r2, r6
 8027998:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802799a:	f89c c001 	ldrb.w	ip, [ip, #1]
 802799e:	5d92      	ldrb	r2, [r2, r6]
 80279a0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80279a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80279a8:	0e31      	lsrs	r1, r6, #24
 80279aa:	9220      	str	r2, [sp, #128]	; 0x80
 80279ac:	0e12      	lsrs	r2, r2, #24
 80279ae:	9621      	str	r6, [sp, #132]	; 0x84
 80279b0:	9116      	str	r1, [sp, #88]	; 0x58
 80279b2:	9215      	str	r2, [sp, #84]	; 0x54
 80279b4:	e697      	b.n	80276e6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 80279b6:	f43f acc0 	beq.w	802733a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 80279ba:	1e65      	subs	r5, r4, #1
 80279bc:	e4fe      	b.n	80273bc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 80279be:	bf00      	nop

080279c0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>:
 80279c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80279c4:	b087      	sub	sp, #28
 80279c6:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 80279ca:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	; 0x40
 80279ce:	ea6f 000b 	mvn.w	r0, fp
 80279d2:	e9dd 4712 	ldrd	r4, r7, [sp, #72]	; 0x48
 80279d6:	fb07 4c06 	mla	ip, r7, r6, r4
 80279da:	b2c0      	uxtb	r0, r0
 80279dc:	2f00      	cmp	r7, #0
 80279de:	9002      	str	r0, [sp, #8]
 80279e0:	eb02 0e0c 	add.w	lr, r2, ip
 80279e4:	f107 0801 	add.w	r8, r7, #1
 80279e8:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 80279ec:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80279f0:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 80279f4:	db02      	blt.n	80279fc <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x3c>
 80279f6:	45b9      	cmp	r9, r7
 80279f8:	f300 80a0 	bgt.w	8027b3c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x17c>
 80279fc:	468c      	mov	ip, r1
 80279fe:	460f      	mov	r7, r1
 8027a00:	780a      	ldrb	r2, [r1, #0]
 8027a02:	9203      	str	r2, [sp, #12]
 8027a04:	9201      	str	r2, [sp, #4]
 8027a06:	f1b8 0f00 	cmp.w	r8, #0
 8027a0a:	db01      	blt.n	8027a10 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x50>
 8027a0c:	45c1      	cmp	r9, r8
 8027a0e:	dc7b      	bgt.n	8027b08 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x148>
 8027a10:	460b      	mov	r3, r1
 8027a12:	4689      	mov	r9, r1
 8027a14:	f891 a000 	ldrb.w	sl, [r1]
 8027a18:	f8cd a014 	str.w	sl, [sp, #20]
 8027a1c:	2d0f      	cmp	r5, #15
 8027a1e:	f200 80cd 	bhi.w	8027bbc <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 8027a22:	280f      	cmp	r0, #15
 8027a24:	f200 80ca 	bhi.w	8027bbc <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 8027a28:	780a      	ldrb	r2, [r1, #0]
 8027a2a:	9204      	str	r2, [sp, #16]
 8027a2c:	b2aa      	uxth	r2, r5
 8027a2e:	b280      	uxth	r0, r0
 8027a30:	fb02 f500 	mul.w	r5, r2, r0
 8027a34:	0112      	lsls	r2, r2, #4
 8027a36:	f89c 8001 	ldrb.w	r8, [ip, #1]
 8027a3a:	f89c e002 	ldrb.w	lr, [ip, #2]
 8027a3e:	1b54      	subs	r4, r2, r5
 8027a40:	b2a4      	uxth	r4, r4
 8027a42:	fb04 f808 	mul.w	r8, r4, r8
 8027a46:	fb04 fe0e 	mul.w	lr, r4, lr
 8027a4a:	ebc5 1000 	rsb	r0, r5, r0, lsl #4
 8027a4e:	b280      	uxth	r0, r0
 8027a50:	9e01      	ldr	r6, [sp, #4]
 8027a52:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8027a56:	f897 c001 	ldrb.w	ip, [r7, #1]
 8027a5a:	1a12      	subs	r2, r2, r0
 8027a5c:	78bf      	ldrb	r7, [r7, #2]
 8027a5e:	b292      	uxth	r2, r2
 8027a60:	fb04 f406 	mul.w	r4, r4, r6
 8027a64:	fb02 8c0c 	mla	ip, r2, ip, r8
 8027a68:	fb02 e707 	mla	r7, r2, r7, lr
 8027a6c:	9e03      	ldr	r6, [sp, #12]
 8027a6e:	f899 8001 	ldrb.w	r8, [r9, #1]
 8027a72:	f899 e002 	ldrb.w	lr, [r9, #2]
 8027a76:	fb02 4206 	mla	r2, r2, r6, r4
 8027a7a:	fb00 cc08 	mla	ip, r0, r8, ip
 8027a7e:	fb00 770e 	mla	r7, r0, lr, r7
 8027a82:	f893 8001 	ldrb.w	r8, [r3, #1]
 8027a86:	f893 e002 	ldrb.w	lr, [r3, #2]
 8027a8a:	fb00 220a 	mla	r2, r0, sl, r2
 8027a8e:	fb05 c808 	mla	r8, r5, r8, ip
 8027a92:	fb05 7e0e 	mla	lr, r5, lr, r7
 8027a96:	9805      	ldr	r0, [sp, #20]
 8027a98:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 8027a9c:	fb05 2500 	mla	r5, r5, r0, r2
 8027aa0:	9a04      	ldr	r2, [sp, #16]
 8027aa2:	fa1f f38b 	uxth.w	r3, fp
 8027aa6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8027aaa:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8027aae:	fb12 f609 	smulbb	r6, r2, r9
 8027ab2:	fb1e fe03 	smulbb	lr, lr, r3
 8027ab6:	fb18 f803 	smulbb	r8, r8, r3
 8027aba:	784a      	ldrb	r2, [r1, #1]
 8027abc:	7888      	ldrb	r0, [r1, #2]
 8027abe:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8027ac2:	fb05 6503 	mla	r5, r5, r3, r6
 8027ac6:	fb02 8809 	mla	r8, r2, r9, r8
 8027aca:	fb00 e909 	mla	r9, r0, r9, lr
 8027ace:	b2ad      	uxth	r5, r5
 8027ad0:	fa1f f888 	uxth.w	r8, r8
 8027ad4:	fa1f f989 	uxth.w	r9, r9
 8027ad8:	f108 0001 	add.w	r0, r8, #1
 8027adc:	f109 0201 	add.w	r2, r9, #1
 8027ae0:	1c6b      	adds	r3, r5, #1
 8027ae2:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8027ae6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8027aea:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027aee:	ea4f 2828 	mov.w	r8, r8, asr #8
 8027af2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8027af6:	122d      	asrs	r5, r5, #8
 8027af8:	f881 8001 	strb.w	r8, [r1, #1]
 8027afc:	f881 9002 	strb.w	r9, [r1, #2]
 8027b00:	700d      	strb	r5, [r1, #0]
 8027b02:	b007      	add	sp, #28
 8027b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b08:	b388      	cbz	r0, 8027b6e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1ae>
 8027b0a:	2c00      	cmp	r4, #0
 8027b0c:	db44      	blt.n	8027b98 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d8>
 8027b0e:	42a6      	cmp	r6, r4
 8027b10:	dd42      	ble.n	8027b98 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d8>
 8027b12:	f81e 9006 	ldrb.w	r9, [lr, r6]
 8027b16:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8027b1a:	4499      	add	r9, r3
 8027b1c:	3401      	adds	r4, #1
 8027b1e:	f899 a000 	ldrb.w	sl, [r9]
 8027b22:	d435      	bmi.n	8027b90 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d0>
 8027b24:	42a6      	cmp	r6, r4
 8027b26:	dd33      	ble.n	8027b90 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d0>
 8027b28:	2d00      	cmp	r5, #0
 8027b2a:	d043      	beq.n	8027bb4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1f4>
 8027b2c:	4476      	add	r6, lr
 8027b2e:	7872      	ldrb	r2, [r6, #1]
 8027b30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027b34:	5c9c      	ldrb	r4, [r3, r2]
 8027b36:	4413      	add	r3, r2
 8027b38:	9405      	str	r4, [sp, #20]
 8027b3a:	e76f      	b.n	8027a1c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5c>
 8027b3c:	2c00      	cmp	r4, #0
 8027b3e:	db01      	blt.n	8027b44 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x184>
 8027b40:	42a6      	cmp	r6, r4
 8027b42:	dc1f      	bgt.n	8027b84 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1c4>
 8027b44:	460f      	mov	r7, r1
 8027b46:	783a      	ldrb	r2, [r7, #0]
 8027b48:	9203      	str	r2, [sp, #12]
 8027b4a:	1c62      	adds	r2, r4, #1
 8027b4c:	d40b      	bmi.n	8027b66 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a6>
 8027b4e:	4296      	cmp	r6, r2
 8027b50:	dd09      	ble.n	8027b66 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a6>
 8027b52:	b31d      	cbz	r5, 8027b9c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1dc>
 8027b54:	f89e c001 	ldrb.w	ip, [lr, #1]
 8027b58:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8027b5c:	f813 200c 	ldrb.w	r2, [r3, ip]
 8027b60:	449c      	add	ip, r3
 8027b62:	9201      	str	r2, [sp, #4]
 8027b64:	e74f      	b.n	8027a06 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x46>
 8027b66:	780a      	ldrb	r2, [r1, #0]
 8027b68:	468c      	mov	ip, r1
 8027b6a:	9201      	str	r2, [sp, #4]
 8027b6c:	e74b      	b.n	8027a06 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x46>
 8027b6e:	2d0f      	cmp	r5, #15
 8027b70:	f891 a000 	ldrb.w	sl, [r1]
 8027b74:	d822      	bhi.n	8027bbc <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 8027b76:	f8cd a010 	str.w	sl, [sp, #16]
 8027b7a:	460b      	mov	r3, r1
 8027b7c:	4689      	mov	r9, r1
 8027b7e:	f8cd a014 	str.w	sl, [sp, #20]
 8027b82:	e753      	b.n	8027a2c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x6c>
 8027b84:	f812 700c 	ldrb.w	r7, [r2, ip]
 8027b88:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8027b8c:	441f      	add	r7, r3
 8027b8e:	e7da      	b.n	8027b46 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x186>
 8027b90:	780b      	ldrb	r3, [r1, #0]
 8027b92:	9305      	str	r3, [sp, #20]
 8027b94:	460b      	mov	r3, r1
 8027b96:	e741      	b.n	8027a1c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5c>
 8027b98:	4689      	mov	r9, r1
 8027b9a:	e7bf      	b.n	8027b1c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x15c>
 8027b9c:	780a      	ldrb	r2, [r1, #0]
 8027b9e:	f1b8 0f00 	cmp.w	r8, #0
 8027ba2:	9201      	str	r2, [sp, #4]
 8027ba4:	468c      	mov	ip, r1
 8027ba6:	f6bf af31 	bge.w	8027a0c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x4c>
 8027baa:	460b      	mov	r3, r1
 8027bac:	4689      	mov	r9, r1
 8027bae:	9205      	str	r2, [sp, #20]
 8027bb0:	4692      	mov	sl, r2
 8027bb2:	e736      	b.n	8027a22 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x62>
 8027bb4:	780b      	ldrb	r3, [r1, #0]
 8027bb6:	9305      	str	r3, [sp, #20]
 8027bb8:	460b      	mov	r3, r1
 8027bba:	e732      	b.n	8027a22 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x62>
 8027bbc:	4b03      	ldr	r3, [pc, #12]	; (8027bcc <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x20c>)
 8027bbe:	4a04      	ldr	r2, [pc, #16]	; (8027bd0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x210>)
 8027bc0:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8027bc4:	4803      	ldr	r0, [pc, #12]	; (8027bd4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x214>)
 8027bc6:	f001 fb45 	bl	8029254 <__assert_func>
 8027bca:	bf00      	nop
 8027bcc:	0802c4f8 	.word	0x0802c4f8
 8027bd0:	0802cb70 	.word	0x0802cb70
 8027bd4:	0802c67c 	.word	0x0802c67c

08027bd8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027bdc:	ed2d 8b08 	vpush	{d8-d11}
 8027be0:	b095      	sub	sp, #84	; 0x54
 8027be2:	f89d 40bc 	ldrb.w	r4, [sp, #188]	; 0xbc
 8027be6:	9013      	str	r0, [sp, #76]	; 0x4c
 8027be8:	43e0      	mvns	r0, r4
 8027bea:	e9dd a727 	ldrd	sl, r7, [sp, #156]	; 0x9c
 8027bee:	eeb0 aa40 	vmov.f32	s20, s0
 8027bf2:	eef0 9a60 	vmov.f32	s19, s1
 8027bf6:	eeb0 9a41 	vmov.f32	s18, s2
 8027bfa:	eef0 8a62 	vmov.f32	s17, s5
 8027bfe:	eeb0 8a43 	vmov.f32	s16, s6
 8027c02:	eef0 ba44 	vmov.f32	s23, s8
 8027c06:	eeb0 ba64 	vmov.f32	s22, s9
 8027c0a:	eef0 aa45 	vmov.f32	s21, s10
 8027c0e:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8027c12:	9411      	str	r4, [sp, #68]	; 0x44
 8027c14:	469b      	mov	fp, r3
 8027c16:	e9dd 422b 	ldrd	r4, r2, [sp, #172]	; 0xac
 8027c1a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8027c1c:	6861      	ldr	r1, [r4, #4]
 8027c1e:	fb01 2303 	mla	r3, r1, r3, r2
 8027c22:	6821      	ldr	r1, [r4, #0]
 8027c24:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8027c26:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8027c28:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8027c2c:	6852      	ldr	r2, [r2, #4]
 8027c2e:	6824      	ldr	r4, [r4, #0]
 8027c30:	930d      	str	r3, [sp, #52]	; 0x34
 8027c32:	b2c3      	uxtb	r3, r0
 8027c34:	930b      	str	r3, [sp, #44]	; 0x2c
 8027c36:	1d13      	adds	r3, r2, #4
 8027c38:	940a      	str	r4, [sp, #40]	; 0x28
 8027c3a:	9308      	str	r3, [sp, #32]
 8027c3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027c3e:	2b00      	cmp	r3, #0
 8027c40:	dc02      	bgt.n	8027c48 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8027c42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027c44:	2b00      	cmp	r3, #0
 8027c46:	dd6c      	ble.n	8027d22 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8027c48:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027c4a:	f1bb 0f00 	cmp.w	fp, #0
 8027c4e:	e9d3 5e02 	ldrd	r5, lr, [r3, #8]
 8027c52:	b228      	sxth	r0, r5
 8027c54:	fa0f f68e 	sxth.w	r6, lr
 8027c58:	f340 8245 	ble.w	80280e6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 8027c5c:	e9dd 8929 	ldrd	r8, r9, [sp, #164]	; 0xa4
 8027c60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027c62:	1e44      	subs	r4, r0, #1
 8027c64:	f106 3cff 	add.w	ip, r6, #4294967295
 8027c68:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8027c6c:	ea5f 432a 	movs.w	r3, sl, asr #16
 8027c70:	ea4f 4127 	mov.w	r1, r7, asr #16
 8027c74:	d405      	bmi.n	8027c82 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8027c76:	42a3      	cmp	r3, r4
 8027c78:	da03      	bge.n	8027c82 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8027c7a:	2900      	cmp	r1, #0
 8027c7c:	db01      	blt.n	8027c82 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8027c7e:	4561      	cmp	r1, ip
 8027c80:	db54      	blt.n	8027d2c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8027c82:	f113 0e01 	adds.w	lr, r3, #1
 8027c86:	d407      	bmi.n	8027c98 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8027c88:	4586      	cmp	lr, r0
 8027c8a:	dc05      	bgt.n	8027c98 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8027c8c:	f111 0e01 	adds.w	lr, r1, #1
 8027c90:	d402      	bmi.n	8027c98 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8027c92:	45b6      	cmp	lr, r6
 8027c94:	f340 8189 	ble.w	8027faa <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8027c98:	f1bb 0b01 	subs.w	fp, fp, #1
 8027c9c:	44c2      	add	sl, r8
 8027c9e:	444f      	add	r7, r9
 8027ca0:	f102 0204 	add.w	r2, r2, #4
 8027ca4:	d1e2      	bne.n	8027c6c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8027ca6:	920d      	str	r2, [sp, #52]	; 0x34
 8027ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027caa:	2b00      	cmp	r3, #0
 8027cac:	dd39      	ble.n	8027d22 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8027cae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027cb2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027cb6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027cba:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027cbe:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027cc2:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8027cc6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027cca:	ee76 6a68 	vsub.f32	s13, s12, s17
 8027cce:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8027cd2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027cd6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027cda:	ee16 2a90 	vmov	r2, s13
 8027cde:	3b01      	subs	r3, #1
 8027ce0:	930e      	str	r3, [sp, #56]	; 0x38
 8027ce2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027ce4:	fb92 f3f3 	sdiv	r3, r2, r3
 8027ce8:	ee17 2a10 	vmov	r2, s14
 8027cec:	eeb0 7a48 	vmov.f32	s14, s16
 8027cf0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027cf4:	ee17 7a10 	vmov	r7, s14
 8027cf8:	eeb0 7a68 	vmov.f32	s14, s17
 8027cfc:	9329      	str	r3, [sp, #164]	; 0xa4
 8027cfe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027d00:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027d04:	fb92 f3f3 	sdiv	r3, r2, r3
 8027d08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027d0a:	932a      	str	r3, [sp, #168]	; 0xa8
 8027d0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027d0e:	ee17 aa10 	vmov	sl, s14
 8027d12:	eeb0 8a67 	vmov.f32	s16, s15
 8027d16:	eef0 8a46 	vmov.f32	s17, s12
 8027d1a:	bf14      	ite	ne
 8027d1c:	469b      	movne	fp, r3
 8027d1e:	4693      	moveq	fp, r2
 8027d20:	e78c      	b.n	8027c3c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8027d22:	b015      	add	sp, #84	; 0x54
 8027d24:	ecbd 8b08 	vpop	{d8-d11}
 8027d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d2c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8027d30:	920d      	str	r2, [sp, #52]	; 0x34
 8027d32:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8027d34:	f10b 32ff 	add.w	r2, fp, #4294967295
 8027d38:	fb01 a302 	mla	r3, r1, r2, sl
 8027d3c:	141b      	asrs	r3, r3, #16
 8027d3e:	9209      	str	r2, [sp, #36]	; 0x24
 8027d40:	f100 80d3 	bmi.w	8027eea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8027d44:	42a3      	cmp	r3, r4
 8027d46:	f280 80d0 	bge.w	8027eea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8027d4a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027d4c:	fb03 7302 	mla	r3, r3, r2, r7
 8027d50:	141b      	asrs	r3, r3, #16
 8027d52:	f100 80ca 	bmi.w	8027eea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8027d56:	3e01      	subs	r6, #1
 8027d58:	42b3      	cmp	r3, r6
 8027d5a:	f280 80c6 	bge.w	8027eea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8027d5e:	f1bb 0f00 	cmp.w	fp, #0
 8027d62:	dda1      	ble.n	8027ca8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8027d64:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8027d68:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8027d6c:	930c      	str	r3, [sp, #48]	; 0x30
 8027d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027d70:	f103 0804 	add.w	r8, r3, #4
 8027d74:	e08f      	b.n	8027e96 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8027d76:	7861      	ldrb	r1, [r4, #1]
 8027d78:	eb04 0c00 	add.w	ip, r4, r0
 8027d7c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027d80:	4431      	add	r1, r6
 8027d82:	2a00      	cmp	r2, #0
 8027d84:	f000 80a3 	beq.w	8027ece <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f6>
 8027d88:	5c20      	ldrb	r0, [r4, r0]
 8027d8a:	f89c c001 	ldrb.w	ip, [ip, #1]
 8027d8e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027d92:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8027d96:	4430      	add	r0, r6
 8027d98:	44b4      	add	ip, r6
 8027d9a:	b29b      	uxth	r3, r3
 8027d9c:	b292      	uxth	r2, r2
 8027d9e:	fb03 f402 	mul.w	r4, r3, r2
 8027da2:	011b      	lsls	r3, r3, #4
 8027da4:	f891 b001 	ldrb.w	fp, [r1, #1]
 8027da8:	1b1e      	subs	r6, r3, r4
 8027daa:	f891 9002 	ldrb.w	r9, [r1, #2]
 8027dae:	b2b6      	uxth	r6, r6
 8027db0:	7809      	ldrb	r1, [r1, #0]
 8027db2:	fb06 fb0b 	mul.w	fp, r6, fp
 8027db6:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8027dba:	b292      	uxth	r2, r2
 8027dbc:	fb06 f909 	mul.w	r9, r6, r9
 8027dc0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8027dc4:	fb06 f601 	mul.w	r6, r6, r1
 8027dc8:	1a9b      	subs	r3, r3, r2
 8027dca:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8027dce:	b29b      	uxth	r3, r3
 8027dd0:	f89e e002 	ldrb.w	lr, [lr, #2]
 8027dd4:	fb03 bb01 	mla	fp, r3, r1, fp
 8027dd8:	9908      	ldr	r1, [sp, #32]
 8027dda:	fb03 990e 	mla	r9, r3, lr, r9
 8027dde:	5d49      	ldrb	r1, [r1, r5]
 8027de0:	7885      	ldrb	r5, [r0, #2]
 8027de2:	fb03 6301 	mla	r3, r3, r1, r6
 8027de6:	f890 e001 	ldrb.w	lr, [r0, #1]
 8027dea:	fb02 9905 	mla	r9, r2, r5, r9
 8027dee:	7801      	ldrb	r1, [r0, #0]
 8027df0:	fb02 bb0e 	mla	fp, r2, lr, fp
 8027df4:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8027df8:	fb02 3301 	mla	r3, r2, r1, r3
 8027dfc:	f89c e001 	ldrb.w	lr, [ip, #1]
 8027e00:	fb04 9900 	mla	r9, r4, r0, r9
 8027e04:	f89c 1000 	ldrb.w	r1, [ip]
 8027e08:	fb04 bb0e 	mla	fp, r4, lr, fp
 8027e0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027e0e:	f818 cc04 	ldrb.w	ip, [r8, #-4]
 8027e12:	fb04 3301 	mla	r3, r4, r1, r3
 8027e16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8027e18:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8027e1c:	fb19 f902 	smulbb	r9, r9, r2
 8027e20:	fb1c fc01 	smulbb	ip, ip, r1
 8027e24:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8027e28:	f818 5c02 	ldrb.w	r5, [r8, #-2]
 8027e2c:	fb1b fb02 	smulbb	fp, fp, r2
 8027e30:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027e34:	f818 6c03 	ldrb.w	r6, [r8, #-3]
 8027e38:	fb05 9901 	mla	r9, r5, r1, r9
 8027e3c:	fb03 c302 	mla	r3, r3, r2, ip
 8027e40:	fb06 bb01 	mla	fp, r6, r1, fp
 8027e44:	fa1f f989 	uxth.w	r9, r9
 8027e48:	b29b      	uxth	r3, r3
 8027e4a:	f109 0101 	add.w	r1, r9, #1
 8027e4e:	1c5a      	adds	r2, r3, #1
 8027e50:	fa1f fb8b 	uxth.w	fp, fp
 8027e54:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8027e58:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027e5c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8027e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027e60:	f10b 0001 	add.w	r0, fp, #1
 8027e64:	3a01      	subs	r2, #1
 8027e66:	eb00 2b1b 	add.w	fp, r0, fp, lsr #8
 8027e6a:	448a      	add	sl, r1
 8027e6c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8027e6e:	9209      	str	r2, [sp, #36]	; 0x24
 8027e70:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8027e74:	ea4f 2929 	mov.w	r9, r9, asr #8
 8027e78:	121b      	asrs	r3, r3, #8
 8027e7a:	3201      	adds	r2, #1
 8027e7c:	f808 bc03 	strb.w	fp, [r8, #-3]
 8027e80:	f808 9c02 	strb.w	r9, [r8, #-2]
 8027e84:	f808 3c04 	strb.w	r3, [r8, #-4]
 8027e88:	440f      	add	r7, r1
 8027e8a:	f108 0804 	add.w	r8, r8, #4
 8027e8e:	d025      	beq.n	8027edc <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8027e90:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027e92:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8027e96:	ea4f 432a 	mov.w	r3, sl, asr #16
 8027e9a:	143c      	asrs	r4, r7, #16
 8027e9c:	fb00 3404 	mla	r4, r0, r4, r3
 8027ea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027ea2:	9e08      	ldr	r6, [sp, #32]
 8027ea4:	5d15      	ldrb	r5, [r2, r4]
 8027ea6:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8027eaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027eae:	4414      	add	r4, r2
 8027eb0:	eb06 0e05 	add.w	lr, r6, r5
 8027eb4:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8027eb8:	2b00      	cmp	r3, #0
 8027eba:	f47f af5c 	bne.w	8027d76 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8027ebe:	b14a      	cbz	r2, 8027ed4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027ec0:	5c20      	ldrb	r0, [r4, r0]
 8027ec2:	46f4      	mov	ip, lr
 8027ec4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027ec8:	4430      	add	r0, r6
 8027eca:	4671      	mov	r1, lr
 8027ecc:	e765      	b.n	8027d9a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027ece:	46f4      	mov	ip, lr
 8027ed0:	4670      	mov	r0, lr
 8027ed2:	e762      	b.n	8027d9a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027ed4:	46f4      	mov	ip, lr
 8027ed6:	4670      	mov	r0, lr
 8027ed8:	4671      	mov	r1, lr
 8027eda:	e75e      	b.n	8027d9a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027ede:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8027ee2:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8027ee6:	930d      	str	r3, [sp, #52]	; 0x34
 8027ee8:	e6de      	b.n	8027ca8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8027eea:	f1bb 0f00 	cmp.w	fp, #0
 8027eee:	f77f aedb 	ble.w	8027ca8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8027ef2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8027ef6:	ea4f 432a 	mov.w	r3, sl, asr #16
 8027efa:	1439      	asrs	r1, r7, #16
 8027efc:	4676      	mov	r6, lr
 8027efe:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8027f02:	f8dd 80b8 	ldr.w	r8, [sp, #184]	; 0xb8
 8027f06:	2b00      	cmp	r3, #0
 8027f08:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8027f0c:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8027f10:	db29      	blt.n	8027f66 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8027f12:	1e6c      	subs	r4, r5, #1
 8027f14:	42a3      	cmp	r3, r4
 8027f16:	da26      	bge.n	8027f66 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8027f18:	2900      	cmp	r1, #0
 8027f1a:	db24      	blt.n	8027f66 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8027f1c:	1e74      	subs	r4, r6, #1
 8027f1e:	42a1      	cmp	r1, r4
 8027f20:	da21      	bge.n	8027f66 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8027f22:	b22c      	sxth	r4, r5
 8027f24:	fb01 3304 	mla	r3, r1, r4, r3
 8027f28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8027f2a:	5ce9      	ldrb	r1, [r5, r3]
 8027f2c:	442b      	add	r3, r5
 8027f2e:	9d08      	ldr	r5, [sp, #32]
 8027f30:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027f34:	9112      	str	r1, [sp, #72]	; 0x48
 8027f36:	eb05 0c01 	add.w	ip, r5, r1
 8027f3a:	2800      	cmp	r0, #0
 8027f3c:	d04e      	beq.n	8027fdc <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8027f3e:	f893 e001 	ldrb.w	lr, [r3, #1]
 8027f42:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8027f46:	44ae      	add	lr, r5
 8027f48:	2a00      	cmp	r2, #0
 8027f4a:	f000 80c7 	beq.w	80280dc <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8027f4e:	1919      	adds	r1, r3, r4
 8027f50:	7849      	ldrb	r1, [r1, #1]
 8027f52:	5d1c      	ldrb	r4, [r3, r4]
 8027f54:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027f58:	186b      	adds	r3, r5, r1
 8027f5a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027f5e:	930c      	str	r3, [sp, #48]	; 0x30
 8027f60:	1963      	adds	r3, r4, r5
 8027f62:	9310      	str	r3, [sp, #64]	; 0x40
 8027f64:	e041      	b.n	8027fea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8027f66:	1c5c      	adds	r4, r3, #1
 8027f68:	d405      	bmi.n	8027f76 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8027f6a:	42ac      	cmp	r4, r5
 8027f6c:	dc03      	bgt.n	8027f76 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8027f6e:	1c4c      	adds	r4, r1, #1
 8027f70:	d401      	bmi.n	8027f76 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8027f72:	42b4      	cmp	r4, r6
 8027f74:	dd21      	ble.n	8027fba <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8027f76:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027f78:	f1b9 0f00 	cmp.w	r9, #0
 8027f7c:	449a      	add	sl, r3
 8027f7e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027f80:	f10b 0b04 	add.w	fp, fp, #4
 8027f84:	441f      	add	r7, r3
 8027f86:	dd07      	ble.n	8027f98 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8027f88:	e9d8 5602 	ldrd	r5, r6, [r8, #8]
 8027f8c:	f109 39ff 	add.w	r9, r9, #4294967295
 8027f90:	ea4f 432a 	mov.w	r3, sl, asr #16
 8027f94:	1439      	asrs	r1, r7, #16
 8027f96:	e7b6      	b.n	8027f06 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8027f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027f9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027f9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027fa0:	3301      	adds	r3, #1
 8027fa2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027fa6:	930d      	str	r3, [sp, #52]	; 0x34
 8027fa8:	e67e      	b.n	8027ca8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8027faa:	920d      	str	r2, [sp, #52]	; 0x34
 8027fac:	f10b 32ff 	add.w	r2, fp, #4294967295
 8027fb0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8027fb4:	4691      	mov	r9, r2
 8027fb6:	9209      	str	r2, [sp, #36]	; 0x24
 8027fb8:	e7a0      	b.n	8027efc <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8027fba:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027fbc:	b236      	sxth	r6, r6
 8027fbe:	b22d      	sxth	r5, r5
 8027fc0:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8027fc4:	e9cd 2405 	strd	r2, r4, [sp, #20]
 8027fc8:	9302      	str	r3, [sp, #8]
 8027fca:	e9cd 5600 	strd	r5, r6, [sp]
 8027fce:	9b08      	ldr	r3, [sp, #32]
 8027fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027fd2:	4659      	mov	r1, fp
 8027fd4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027fd6:	f7ff fcf3 	bl	80279c0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>
 8027fda:	e7cc      	b.n	8027f76 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8027fdc:	2a00      	cmp	r2, #0
 8027fde:	d173      	bne.n	80280c8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8027fe0:	46e6      	mov	lr, ip
 8027fe2:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8027fe6:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8027fea:	b283      	uxth	r3, r0
 8027fec:	b292      	uxth	r2, r2
 8027fee:	fb03 f002 	mul.w	r0, r3, r2
 8027ff2:	011b      	lsls	r3, r3, #4
 8027ff4:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8027ff8:	f89e 5002 	ldrb.w	r5, [lr, #2]
 8027ffc:	1a19      	subs	r1, r3, r0
 8027ffe:	b289      	uxth	r1, r1
 8028000:	f89e e000 	ldrb.w	lr, [lr]
 8028004:	fb01 f505 	mul.w	r5, r1, r5
 8028008:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 802800c:	fb01 f606 	mul.w	r6, r1, r6
 8028010:	b292      	uxth	r2, r2
 8028012:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8028016:	fb01 f40e 	mul.w	r4, r1, lr
 802801a:	1a9b      	subs	r3, r3, r2
 802801c:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8028020:	f89c e002 	ldrb.w	lr, [ip, #2]
 8028024:	b29b      	uxth	r3, r3
 8028026:	fb03 6601 	mla	r6, r3, r1, r6
 802802a:	fb03 5e0e 	mla	lr, r3, lr, r5
 802802e:	9908      	ldr	r1, [sp, #32]
 8028030:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028032:	5d49      	ldrb	r1, [r1, r5]
 8028034:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028036:	fb03 4301 	mla	r3, r3, r1, r4
 802803a:	f895 c001 	ldrb.w	ip, [r5, #1]
 802803e:	78ad      	ldrb	r5, [r5, #2]
 8028040:	fb02 6c0c 	mla	ip, r2, ip, r6
 8028044:	fb02 e505 	mla	r5, r2, r5, lr
 8028048:	990c      	ldr	r1, [sp, #48]	; 0x30
 802804a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802804c:	784e      	ldrb	r6, [r1, #1]
 802804e:	7824      	ldrb	r4, [r4, #0]
 8028050:	7889      	ldrb	r1, [r1, #2]
 8028052:	fb02 3204 	mla	r2, r2, r4, r3
 8028056:	fb00 cc06 	mla	ip, r0, r6, ip
 802805a:	fb00 5501 	mla	r5, r0, r1, r5
 802805e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028060:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8028062:	780b      	ldrb	r3, [r1, #0]
 8028064:	f89b 4000 	ldrb.w	r4, [fp]
 8028068:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 802806c:	fb00 2003 	mla	r0, r0, r3, r2
 8028070:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8028074:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8028078:	fb15 f501 	smulbb	r5, r5, r1
 802807c:	fb14 f406 	smulbb	r4, r4, r6
 8028080:	fb1c fc01 	smulbb	ip, ip, r1
 8028084:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8028088:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802808c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028090:	fb00 4001 	mla	r0, r0, r1, r4
 8028094:	fb03 5306 	mla	r3, r3, r6, r5
 8028098:	fb02 c106 	mla	r1, r2, r6, ip
 802809c:	b29b      	uxth	r3, r3
 802809e:	b280      	uxth	r0, r0
 80280a0:	b289      	uxth	r1, r1
 80280a2:	1c5a      	adds	r2, r3, #1
 80280a4:	1c4d      	adds	r5, r1, #1
 80280a6:	1c44      	adds	r4, r0, #1
 80280a8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80280ac:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 80280b0:	eb04 2310 	add.w	r3, r4, r0, lsr #8
 80280b4:	1209      	asrs	r1, r1, #8
 80280b6:	1212      	asrs	r2, r2, #8
 80280b8:	121b      	asrs	r3, r3, #8
 80280ba:	f88b 1001 	strb.w	r1, [fp, #1]
 80280be:	f88b 2002 	strb.w	r2, [fp, #2]
 80280c2:	f88b 3000 	strb.w	r3, [fp]
 80280c6:	e756      	b.n	8027f76 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80280c8:	5d1c      	ldrb	r4, [r3, r4]
 80280ca:	9b08      	ldr	r3, [sp, #32]
 80280cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80280d0:	18e3      	adds	r3, r4, r3
 80280d2:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80280d6:	9310      	str	r3, [sp, #64]	; 0x40
 80280d8:	46e6      	mov	lr, ip
 80280da:	e786      	b.n	8027fea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80280dc:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80280e0:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 80280e4:	e781      	b.n	8027fea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80280e6:	f43f addf 	beq.w	8027ca8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 80280ea:	1e44      	subs	r4, r0, #1
 80280ec:	e621      	b.n	8027d32 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80280ee:	bf00      	nop

080280f0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>:
 80280f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80280f4:	f9bd c028 	ldrsh.w	ip, [sp, #40]	; 0x28
 80280f8:	e9dd 640c 	ldrd	r6, r4, [sp, #48]	; 0x30
 80280fc:	fb04 6e0c 	mla	lr, r4, ip, r6
 8028100:	2c00      	cmp	r4, #0
 8028102:	461f      	mov	r7, r3
 8028104:	eb02 0a0e 	add.w	sl, r2, lr
 8028108:	f104 0801 	add.w	r8, r4, #1
 802810c:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8028110:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8028114:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8028118:	db01      	blt.n	802811e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x2e>
 802811a:	45a1      	cmp	r9, r4
 802811c:	dc6f      	bgt.n	80281fe <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x10e>
 802811e:	f891 b000 	ldrb.w	fp, [r1]
 8028122:	460b      	mov	r3, r1
 8028124:	465c      	mov	r4, fp
 8028126:	468e      	mov	lr, r1
 8028128:	f1b8 0f00 	cmp.w	r8, #0
 802812c:	db01      	blt.n	8028132 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x42>
 802812e:	45c1      	cmp	r9, r8
 8028130:	dc4a      	bgt.n	80281c8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xd8>
 8028132:	f891 9000 	ldrb.w	r9, [r1]
 8028136:	460f      	mov	r7, r1
 8028138:	46ca      	mov	sl, r9
 802813a:	4688      	mov	r8, r1
 802813c:	2d0f      	cmp	r5, #15
 802813e:	f200 8097 	bhi.w	8028270 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 8028142:	280f      	cmp	r0, #15
 8028144:	f200 8094 	bhi.w	8028270 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 8028148:	b2aa      	uxth	r2, r5
 802814a:	b280      	uxth	r0, r0
 802814c:	fb02 f600 	mul.w	r6, r2, r0
 8028150:	0112      	lsls	r2, r2, #4
 8028152:	1b95      	subs	r5, r2, r6
 8028154:	f893 c001 	ldrb.w	ip, [r3, #1]
 8028158:	789b      	ldrb	r3, [r3, #2]
 802815a:	b2ad      	uxth	r5, r5
 802815c:	ebc6 1000 	rsb	r0, r6, r0, lsl #4
 8028160:	fb05 f404 	mul.w	r4, r5, r4
 8028164:	fb05 fc0c 	mul.w	ip, r5, ip
 8028168:	fb05 f503 	mul.w	r5, r5, r3
 802816c:	b280      	uxth	r0, r0
 802816e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8028172:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8028176:	1a12      	subs	r2, r2, r0
 8028178:	f89e e002 	ldrb.w	lr, [lr, #2]
 802817c:	b292      	uxth	r2, r2
 802817e:	fb02 cc03 	mla	ip, r2, r3, ip
 8028182:	fb02 440b 	mla	r4, r2, fp, r4
 8028186:	fb02 520e 	mla	r2, r2, lr, r5
 802818a:	f898 3001 	ldrb.w	r3, [r8, #1]
 802818e:	f898 8002 	ldrb.w	r8, [r8, #2]
 8028192:	fb00 cc03 	mla	ip, r0, r3, ip
 8028196:	fb00 4909 	mla	r9, r0, r9, r4
 802819a:	fb00 2008 	mla	r0, r0, r8, r2
 802819e:	787b      	ldrb	r3, [r7, #1]
 80281a0:	78ba      	ldrb	r2, [r7, #2]
 80281a2:	fb06 9a0a 	mla	sl, r6, sl, r9
 80281a6:	fb06 c303 	mla	r3, r6, r3, ip
 80281aa:	fb06 0602 	mla	r6, r6, r2, r0
 80281ae:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80281b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80281b6:	0236      	lsls	r6, r6, #8
 80281b8:	ea43 030a 	orr.w	r3, r3, sl
 80281bc:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 80281c0:	4333      	orrs	r3, r6
 80281c2:	600b      	str	r3, [r1, #0]
 80281c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80281c8:	b378      	cbz	r0, 802822a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x13a>
 80281ca:	2e00      	cmp	r6, #0
 80281cc:	db3f      	blt.n	802824e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15e>
 80281ce:	45b4      	cmp	ip, r6
 80281d0:	dd3d      	ble.n	802824e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15e>
 80281d2:	f81a 800c 	ldrb.w	r8, [sl, ip]
 80281d6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80281da:	44b8      	add	r8, r7
 80281dc:	3601      	adds	r6, #1
 80281de:	f898 9000 	ldrb.w	r9, [r8]
 80281e2:	d430      	bmi.n	8028246 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x156>
 80281e4:	45b4      	cmp	ip, r6
 80281e6:	dd2e      	ble.n	8028246 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x156>
 80281e8:	2d00      	cmp	r5, #0
 80281ea:	d03d      	beq.n	8028268 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x178>
 80281ec:	44d4      	add	ip, sl
 80281ee:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80281f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80281f6:	f817 a002 	ldrb.w	sl, [r7, r2]
 80281fa:	4417      	add	r7, r2
 80281fc:	e79e      	b.n	802813c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x4c>
 80281fe:	2e00      	cmp	r6, #0
 8028200:	db01      	blt.n	8028206 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x116>
 8028202:	45b4      	cmp	ip, r6
 8028204:	dc19      	bgt.n	802823a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x14a>
 8028206:	468e      	mov	lr, r1
 8028208:	1c73      	adds	r3, r6, #1
 802820a:	f89e b000 	ldrb.w	fp, [lr]
 802820e:	d409      	bmi.n	8028224 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x134>
 8028210:	459c      	cmp	ip, r3
 8028212:	dd07      	ble.n	8028224 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x134>
 8028214:	b1ed      	cbz	r5, 8028252 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8028216:	f89a 3001 	ldrb.w	r3, [sl, #1]
 802821a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802821e:	5cfc      	ldrb	r4, [r7, r3]
 8028220:	443b      	add	r3, r7
 8028222:	e781      	b.n	8028128 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x38>
 8028224:	780c      	ldrb	r4, [r1, #0]
 8028226:	460b      	mov	r3, r1
 8028228:	e77e      	b.n	8028128 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x38>
 802822a:	2d0f      	cmp	r5, #15
 802822c:	f891 9000 	ldrb.w	r9, [r1]
 8028230:	d81e      	bhi.n	8028270 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 8028232:	460f      	mov	r7, r1
 8028234:	4688      	mov	r8, r1
 8028236:	46ca      	mov	sl, r9
 8028238:	e786      	b.n	8028148 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x58>
 802823a:	f812 e00e 	ldrb.w	lr, [r2, lr]
 802823e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8028242:	449e      	add	lr, r3
 8028244:	e7e0      	b.n	8028208 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x118>
 8028246:	f891 a000 	ldrb.w	sl, [r1]
 802824a:	460f      	mov	r7, r1
 802824c:	e776      	b.n	802813c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x4c>
 802824e:	4688      	mov	r8, r1
 8028250:	e7c4      	b.n	80281dc <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xec>
 8028252:	f1b8 0f00 	cmp.w	r8, #0
 8028256:	780c      	ldrb	r4, [r1, #0]
 8028258:	460b      	mov	r3, r1
 802825a:	f6bf af68 	bge.w	802812e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x3e>
 802825e:	460f      	mov	r7, r1
 8028260:	4688      	mov	r8, r1
 8028262:	46a2      	mov	sl, r4
 8028264:	46a1      	mov	r9, r4
 8028266:	e76c      	b.n	8028142 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 8028268:	f891 a000 	ldrb.w	sl, [r1]
 802826c:	460f      	mov	r7, r1
 802826e:	e768      	b.n	8028142 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 8028270:	4b03      	ldr	r3, [pc, #12]	; (8028280 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x190>)
 8028272:	4a04      	ldr	r2, [pc, #16]	; (8028284 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x194>)
 8028274:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8028278:	4803      	ldr	r0, [pc, #12]	; (8028288 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x198>)
 802827a:	f000 ffeb 	bl	8029254 <__assert_func>
 802827e:	bf00      	nop
 8028280:	0802c4f8 	.word	0x0802c4f8
 8028284:	0802cb70 	.word	0x0802cb70
 8028288:	0802c67c 	.word	0x0802c67c

0802828c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802828c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028290:	ed2d 8b0a 	vpush	{d8-d12}
 8028294:	eeb0 aa40 	vmov.f32	s20, s0
 8028298:	eef0 9a60 	vmov.f32	s19, s1
 802829c:	eeb0 9a41 	vmov.f32	s18, s2
 80282a0:	eef0 8a62 	vmov.f32	s17, s5
 80282a4:	eeb0 8a43 	vmov.f32	s16, s6
 80282a8:	eeb0 ca44 	vmov.f32	s24, s8
 80282ac:	eef0 ba64 	vmov.f32	s23, s9
 80282b0:	eeb0 ba45 	vmov.f32	s22, s10
 80282b4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80282b8:	b091      	sub	sp, #68	; 0x44
 80282ba:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 80282be:	e9dd 9525 	ldrd	r9, r5, [sp, #148]	; 0x94
 80282c2:	900f      	str	r0, [sp, #60]	; 0x3c
 80282c4:	4698      	mov	r8, r3
 80282c6:	e9dd 0229 	ldrd	r0, r2, [sp, #164]	; 0xa4
 80282ca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80282cc:	6841      	ldr	r1, [r0, #4]
 80282ce:	fb01 2303 	mla	r3, r1, r3, r2
 80282d2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80282d4:	6801      	ldr	r1, [r0, #0]
 80282d6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80282d8:	6852      	ldr	r2, [r2, #4]
 80282da:	6800      	ldr	r0, [r0, #0]
 80282dc:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
 80282e0:	1d13      	adds	r3, r2, #4
 80282e2:	9009      	str	r0, [sp, #36]	; 0x24
 80282e4:	930c      	str	r3, [sp, #48]	; 0x30
 80282e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80282e8:	2b00      	cmp	r3, #0
 80282ea:	dc02      	bgt.n	80282f2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80282ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80282ee:	2b00      	cmp	r3, #0
 80282f0:	dd66      	ble.n	80283c0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80282f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80282f4:	f1b8 0f00 	cmp.w	r8, #0
 80282f8:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 80282fc:	b221      	sxth	r1, r4
 80282fe:	fa0f f78e 	sxth.w	r7, lr
 8028302:	f340 81df 	ble.w	80286c4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8028306:	1e4e      	subs	r6, r1, #1
 8028308:	f107 3cff 	add.w	ip, r7, #4294967295
 802830c:	f8cd e01c 	str.w	lr, [sp, #28]
 8028310:	e9dd eb27 	ldrd	lr, fp, [sp, #156]	; 0x9c
 8028314:	ea5f 4329 	movs.w	r3, r9, asr #16
 8028318:	ea4f 4025 	mov.w	r0, r5, asr #16
 802831c:	d405      	bmi.n	802832a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802831e:	42b3      	cmp	r3, r6
 8028320:	da03      	bge.n	802832a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8028322:	2800      	cmp	r0, #0
 8028324:	db01      	blt.n	802832a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8028326:	4560      	cmp	r0, ip
 8028328:	db4f      	blt.n	80283ca <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802832a:	1c5a      	adds	r2, r3, #1
 802832c:	d406      	bmi.n	802833c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802832e:	428a      	cmp	r2, r1
 8028330:	dc04      	bgt.n	802833c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8028332:	1c42      	adds	r2, r0, #1
 8028334:	d402      	bmi.n	802833c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8028336:	42ba      	cmp	r2, r7
 8028338:	f340 8157 	ble.w	80285ea <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802833c:	f1b8 0801 	subs.w	r8, r8, #1
 8028340:	44f1      	add	r9, lr
 8028342:	445d      	add	r5, fp
 8028344:	f10a 0a04 	add.w	sl, sl, #4
 8028348:	d1e4      	bne.n	8028314 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802834a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802834c:	2b00      	cmp	r3, #0
 802834e:	dd37      	ble.n	80283c0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8028350:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8028354:	ee79 9aab 	vadd.f32	s19, s19, s23
 8028358:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802835c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8028360:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8028364:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028368:	ee76 6a68 	vsub.f32	s13, s12, s17
 802836c:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8028370:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028374:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028378:	ee16 2a90 	vmov	r2, s13
 802837c:	3b01      	subs	r3, #1
 802837e:	930a      	str	r3, [sp, #40]	; 0x28
 8028380:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028382:	fb92 f3f3 	sdiv	r3, r2, r3
 8028386:	ee17 2a10 	vmov	r2, s14
 802838a:	eeb0 7a48 	vmov.f32	s14, s16
 802838e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028392:	ee17 5a10 	vmov	r5, s14
 8028396:	eeb0 7a68 	vmov.f32	s14, s17
 802839a:	9327      	str	r3, [sp, #156]	; 0x9c
 802839c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802839e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80283a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80283a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80283a8:	9328      	str	r3, [sp, #160]	; 0xa0
 80283aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80283ac:	ee17 9a10 	vmov	r9, s14
 80283b0:	eeb0 8a67 	vmov.f32	s16, s15
 80283b4:	eef0 8a46 	vmov.f32	s17, s12
 80283b8:	bf14      	ite	ne
 80283ba:	4698      	movne	r8, r3
 80283bc:	4690      	moveq	r8, r2
 80283be:	e792      	b.n	80282e6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80283c0:	b011      	add	sp, #68	; 0x44
 80283c2:	ecbd 8b0a 	vpop	{d8-d12}
 80283c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80283ca:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80283ce:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80283d0:	f108 32ff 	add.w	r2, r8, #4294967295
 80283d4:	fb00 9302 	mla	r3, r0, r2, r9
 80283d8:	141b      	asrs	r3, r3, #16
 80283da:	9207      	str	r2, [sp, #28]
 80283dc:	f100 80a6 	bmi.w	802852c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80283e0:	42b3      	cmp	r3, r6
 80283e2:	f280 80a3 	bge.w	802852c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80283e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80283e8:	fb03 5302 	mla	r3, r3, r2, r5
 80283ec:	141b      	asrs	r3, r3, #16
 80283ee:	f100 809d 	bmi.w	802852c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80283f2:	3f01      	subs	r7, #1
 80283f4:	42bb      	cmp	r3, r7
 80283f6:	f280 8099 	bge.w	802852c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80283fa:	f1b8 0f00 	cmp.w	r8, #0
 80283fe:	dda4      	ble.n	802834a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8028400:	f8cd a020 	str.w	sl, [sp, #32]
 8028404:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8028408:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802840c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8028410:	e065      	b.n	80284de <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8028412:	f890 c001 	ldrb.w	ip, [r0, #1]
 8028416:	1844      	adds	r4, r0, r1
 8028418:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802841c:	44d4      	add	ip, sl
 802841e:	2a00      	cmp	r2, #0
 8028420:	d078      	beq.n	8028514 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8028422:	5c40      	ldrb	r0, [r0, r1]
 8028424:	7866      	ldrb	r6, [r4, #1]
 8028426:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802842a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802842e:	4450      	add	r0, sl
 8028430:	4456      	add	r6, sl
 8028432:	b29b      	uxth	r3, r3
 8028434:	b292      	uxth	r2, r2
 8028436:	fb03 f402 	mul.w	r4, r3, r2
 802843a:	011b      	lsls	r3, r3, #4
 802843c:	f89c 8000 	ldrb.w	r8, [ip]
 8028440:	f89c e001 	ldrb.w	lr, [ip, #1]
 8028444:	1b19      	subs	r1, r3, r4
 8028446:	f89c c002 	ldrb.w	ip, [ip, #2]
 802844a:	b289      	uxth	r1, r1
 802844c:	fb01 fe0e 	mul.w	lr, r1, lr
 8028450:	fb01 f808 	mul.w	r8, r1, r8
 8028454:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8028458:	fb01 f10c 	mul.w	r1, r1, ip
 802845c:	b292      	uxth	r2, r2
 802845e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8028462:	f81a b00b 	ldrb.w	fp, [sl, fp]
 8028466:	f897 c001 	ldrb.w	ip, [r7, #1]
 802846a:	1a9b      	subs	r3, r3, r2
 802846c:	78bf      	ldrb	r7, [r7, #2]
 802846e:	b29b      	uxth	r3, r3
 8028470:	fb03 880b 	mla	r8, r3, fp, r8
 8028474:	fb03 ec0c 	mla	ip, r3, ip, lr
 8028478:	fb03 1307 	mla	r3, r3, r7, r1
 802847c:	7881      	ldrb	r1, [r0, #2]
 802847e:	f890 b000 	ldrb.w	fp, [r0]
 8028482:	fb02 3301 	mla	r3, r2, r1, r3
 8028486:	f890 e001 	ldrb.w	lr, [r0, #1]
 802848a:	78b1      	ldrb	r1, [r6, #2]
 802848c:	fb02 880b 	mla	r8, r2, fp, r8
 8028490:	fb02 cc0e 	mla	ip, r2, lr, ip
 8028494:	fb04 3301 	mla	r3, r4, r1, r3
 8028498:	f896 b000 	ldrb.w	fp, [r6]
 802849c:	f896 e001 	ldrb.w	lr, [r6, #1]
 80284a0:	0219      	lsls	r1, r3, #8
 80284a2:	fb04 880b 	mla	r8, r4, fp, r8
 80284a6:	fb04 cc0e 	mla	ip, r4, lr, ip
 80284aa:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
 80284ae:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80284b0:	9a07      	ldr	r2, [sp, #28]
 80284b2:	4489      	add	r9, r1
 80284b4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80284b6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80284ba:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80284be:	ea48 080c 	orr.w	r8, r8, ip
 80284c2:	440d      	add	r5, r1
 80284c4:	9908      	ldr	r1, [sp, #32]
 80284c6:	3a01      	subs	r2, #1
 80284c8:	ea48 0303 	orr.w	r3, r8, r3
 80284cc:	9207      	str	r2, [sp, #28]
 80284ce:	f841 3b04 	str.w	r3, [r1], #4
 80284d2:	3201      	adds	r2, #1
 80284d4:	9108      	str	r1, [sp, #32]
 80284d6:	d024      	beq.n	8028522 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80284d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80284da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80284de:	ea4f 4329 	mov.w	r3, r9, asr #16
 80284e2:	1428      	asrs	r0, r5, #16
 80284e4:	fb01 3000 	mla	r0, r1, r0, r3
 80284e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80284ea:	f3c9 3303 	ubfx	r3, r9, #12, #4
 80284ee:	f812 b000 	ldrb.w	fp, [r2, r0]
 80284f2:	4410      	add	r0, r2
 80284f4:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80284f8:	eb0a 070b 	add.w	r7, sl, fp
 80284fc:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8028500:	2b00      	cmp	r3, #0
 8028502:	d186      	bne.n	8028412 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8028504:	b14a      	cbz	r2, 802851a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8028506:	5c40      	ldrb	r0, [r0, r1]
 8028508:	463e      	mov	r6, r7
 802850a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802850e:	4450      	add	r0, sl
 8028510:	46bc      	mov	ip, r7
 8028512:	e78e      	b.n	8028432 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8028514:	463e      	mov	r6, r7
 8028516:	4638      	mov	r0, r7
 8028518:	e78b      	b.n	8028432 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802851a:	463e      	mov	r6, r7
 802851c:	4638      	mov	r0, r7
 802851e:	46bc      	mov	ip, r7
 8028520:	e787      	b.n	8028432 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8028522:	e9dd a80d 	ldrd	sl, r8, [sp, #52]	; 0x34
 8028526:	eb0a 0a88 	add.w	sl, sl, r8, lsl #2
 802852a:	e70e      	b.n	802834a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802852c:	f1b8 0f00 	cmp.w	r8, #0
 8028530:	f77f af0b 	ble.w	802834a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8028534:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028538:	ea4f 4329 	mov.w	r3, r9, asr #16
 802853c:	1428      	asrs	r0, r5, #16
 802853e:	4677      	mov	r7, lr
 8028540:	46d0      	mov	r8, sl
 8028542:	f8cd a020 	str.w	sl, [sp, #32]
 8028546:	f8dd a0b0 	ldr.w	sl, [sp, #176]	; 0xb0
 802854a:	2b00      	cmp	r3, #0
 802854c:	f3c9 3103 	ubfx	r1, r9, #12, #4
 8028550:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8028554:	db28      	blt.n	80285a8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8028556:	1e66      	subs	r6, r4, #1
 8028558:	42b3      	cmp	r3, r6
 802855a:	da25      	bge.n	80285a8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802855c:	2800      	cmp	r0, #0
 802855e:	db23      	blt.n	80285a8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8028560:	1e7e      	subs	r6, r7, #1
 8028562:	42b0      	cmp	r0, r6
 8028564:	da20      	bge.n	80285a8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8028566:	b224      	sxth	r4, r4
 8028568:	fb00 3304 	mla	r3, r0, r4, r3
 802856c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802856e:	5cc7      	ldrb	r7, [r0, r3]
 8028570:	4403      	add	r3, r0
 8028572:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028574:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8028578:	eb00 0c07 	add.w	ip, r0, r7
 802857c:	2900      	cmp	r1, #0
 802857e:	d04a      	beq.n	8028616 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8028580:	785e      	ldrb	r6, [r3, #1]
 8028582:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8028586:	4406      	add	r6, r0
 8028588:	2a00      	cmp	r2, #0
 802858a:	f000 8098 	beq.w	80286be <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 802858e:	1918      	adds	r0, r3, r4
 8028590:	7840      	ldrb	r0, [r0, #1]
 8028592:	5d1c      	ldrb	r4, [r3, r4]
 8028594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028596:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802859a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802859e:	1818      	adds	r0, r3, r0
 80285a0:	18e3      	adds	r3, r4, r3
 80285a2:	900d      	str	r0, [sp, #52]	; 0x34
 80285a4:	930e      	str	r3, [sp, #56]	; 0x38
 80285a6:	e03b      	b.n	8028620 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80285a8:	1c5e      	adds	r6, r3, #1
 80285aa:	d405      	bmi.n	80285b8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80285ac:	42a6      	cmp	r6, r4
 80285ae:	dc03      	bgt.n	80285b8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80285b0:	1c46      	adds	r6, r0, #1
 80285b2:	d401      	bmi.n	80285b8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80285b4:	42be      	cmp	r6, r7
 80285b6:	dd1f      	ble.n	80285f8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80285b8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80285ba:	f1bb 0f00 	cmp.w	fp, #0
 80285be:	4499      	add	r9, r3
 80285c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80285c2:	f108 0804 	add.w	r8, r8, #4
 80285c6:	441d      	add	r5, r3
 80285c8:	dd07      	ble.n	80285da <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80285ca:	e9da 4702 	ldrd	r4, r7, [sl, #8]
 80285ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80285d2:	ea4f 4329 	mov.w	r3, r9, asr #16
 80285d6:	1428      	asrs	r0, r5, #16
 80285d8:	e7b7      	b.n	802854a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 80285da:	e9dd 3a07 	ldrd	r3, sl, [sp, #28]
 80285de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80285e2:	3301      	adds	r3, #1
 80285e4:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
 80285e8:	e6af      	b.n	802834a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80285ea:	f108 32ff 	add.w	r2, r8, #4294967295
 80285ee:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80285f2:	4693      	mov	fp, r2
 80285f4:	9207      	str	r2, [sp, #28]
 80285f6:	e7a2      	b.n	802853e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 80285f8:	b23f      	sxth	r7, r7
 80285fa:	b224      	sxth	r4, r4
 80285fc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8028600:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8028604:	e9cd 4700 	strd	r4, r7, [sp]
 8028608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802860a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802860c:	4641      	mov	r1, r8
 802860e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8028610:	f7ff fd6e 	bl	80280f0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>
 8028614:	e7d0      	b.n	80285b8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8028616:	2a00      	cmp	r2, #0
 8028618:	d147      	bne.n	80286aa <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41e>
 802861a:	4666      	mov	r6, ip
 802861c:	e9cd cc0d 	strd	ip, ip, [sp, #52]	; 0x34
 8028620:	b28b      	uxth	r3, r1
 8028622:	b292      	uxth	r2, r2
 8028624:	fb03 f002 	mul.w	r0, r3, r2
 8028628:	011b      	lsls	r3, r3, #4
 802862a:	f896 e000 	ldrb.w	lr, [r6]
 802862e:	7874      	ldrb	r4, [r6, #1]
 8028630:	1a19      	subs	r1, r3, r0
 8028632:	78b6      	ldrb	r6, [r6, #2]
 8028634:	b289      	uxth	r1, r1
 8028636:	fb01 f404 	mul.w	r4, r1, r4
 802863a:	fb01 fe0e 	mul.w	lr, r1, lr
 802863e:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8028642:	fb01 f106 	mul.w	r1, r1, r6
 8028646:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8028648:	b292      	uxth	r2, r2
 802864a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802864e:	5df7      	ldrb	r7, [r6, r7]
 8028650:	1a9b      	subs	r3, r3, r2
 8028652:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8028656:	f89c c002 	ldrb.w	ip, [ip, #2]
 802865a:	b29b      	uxth	r3, r3
 802865c:	fb03 4606 	mla	r6, r3, r6, r4
 8028660:	fb03 e707 	mla	r7, r3, r7, lr
 8028664:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028666:	fb03 130c 	mla	r3, r3, ip, r1
 802866a:	7861      	ldrb	r1, [r4, #1]
 802866c:	f894 c000 	ldrb.w	ip, [r4]
 8028670:	78a4      	ldrb	r4, [r4, #2]
 8028672:	fb02 6601 	mla	r6, r2, r1, r6
 8028676:	fb02 770c 	mla	r7, r2, ip, r7
 802867a:	fb02 3104 	mla	r1, r2, r4, r3
 802867e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028680:	7862      	ldrb	r2, [r4, #1]
 8028682:	7823      	ldrb	r3, [r4, #0]
 8028684:	78a4      	ldrb	r4, [r4, #2]
 8028686:	fb00 6602 	mla	r6, r0, r2, r6
 802868a:	fb00 7303 	mla	r3, r0, r3, r7
 802868e:	fb00 1204 	mla	r2, r0, r4, r1
 8028692:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028696:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802869a:	0212      	lsls	r2, r2, #8
 802869c:	4333      	orrs	r3, r6
 802869e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80286a2:	4313      	orrs	r3, r2
 80286a4:	f8c8 3000 	str.w	r3, [r8]
 80286a8:	e786      	b.n	80285b8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80286aa:	5d1c      	ldrb	r4, [r3, r4]
 80286ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80286ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80286b2:	18e3      	adds	r3, r4, r3
 80286b4:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80286b8:	930e      	str	r3, [sp, #56]	; 0x38
 80286ba:	4666      	mov	r6, ip
 80286bc:	e7b0      	b.n	8028620 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80286be:	e9cd cc0d 	strd	ip, ip, [sp, #52]	; 0x34
 80286c2:	e7ad      	b.n	8028620 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80286c4:	f43f ae41 	beq.w	802834a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80286c8:	1e4e      	subs	r6, r1, #1
 80286ca:	e680      	b.n	80283ce <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>

080286cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>:
 80286cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80286d0:	b087      	sub	sp, #28
 80286d2:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 80286d6:	e9dd 0412 	ldrd	r0, r4, [sp, #72]	; 0x48
 80286da:	fb04 070c 	mla	r7, r4, ip, r0
 80286de:	9100      	str	r1, [sp, #0]
 80286e0:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
 80286e4:	2c00      	cmp	r4, #0
 80286e6:	eb02 0b07 	add.w	fp, r2, r7
 80286ea:	f104 0501 	add.w	r5, r4, #1
 80286ee:	f9bd 8044 	ldrsh.w	r8, [sp, #68]	; 0x44
 80286f2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
 80286f6:	f89d 6054 	ldrb.w	r6, [sp, #84]	; 0x54
 80286fa:	9101      	str	r1, [sp, #4]
 80286fc:	db02      	blt.n	8028704 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x38>
 80286fe:	45a0      	cmp	r8, r4
 8028700:	f300 811a 	bgt.w	8028938 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x26c>
 8028704:	2700      	movs	r7, #0
 8028706:	46be      	mov	lr, r7
 8028708:	46b9      	mov	r9, r7
 802870a:	463c      	mov	r4, r7
 802870c:	2d00      	cmp	r5, #0
 802870e:	db02      	blt.n	8028716 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x4a>
 8028710:	45a8      	cmp	r8, r5
 8028712:	f300 812b 	bgt.w	802896c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2a0>
 8028716:	f04f 0c00 	mov.w	ip, #0
 802871a:	46e0      	mov	r8, ip
 802871c:	4665      	mov	r5, ip
 802871e:	f8cd c010 	str.w	ip, [sp, #16]
 8028722:	f1ba 0f0f 	cmp.w	sl, #15
 8028726:	f200 8167 	bhi.w	80289f8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 802872a:	2e0f      	cmp	r6, #15
 802872c:	f200 8164 	bhi.w	80289f8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 8028730:	b2b2      	uxth	r2, r6
 8028732:	fa1f f38a 	uxth.w	r3, sl
 8028736:	fb02 f603 	mul.w	r6, r2, r3
 802873a:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802873e:	b292      	uxth	r2, r2
 8028740:	fb02 fa08 	mul.w	sl, r2, r8
 8028744:	fb06 fb0c 	mul.w	fp, r6, ip
 8028748:	011b      	lsls	r3, r3, #4
 802874a:	1b98      	subs	r0, r3, r6
 802874c:	b280      	uxth	r0, r0
 802874e:	9002      	str	r0, [sp, #8]
 8028750:	fb00 f007 	mul.w	r0, r0, r7
 8028754:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8028758:	1a9b      	subs	r3, r3, r2
 802875a:	b29b      	uxth	r3, r3
 802875c:	fb03 000e 	mla	r0, r3, lr, r0
 8028760:	4450      	add	r0, sl
 8028762:	4458      	add	r0, fp
 8028764:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028768:	9003      	str	r0, [sp, #12]
 802876a:	2800      	cmp	r0, #0
 802876c:	f000 80e1 	beq.w	8028932 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x266>
 8028770:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8028774:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028778:	f009 1bff 	and.w	fp, r9, #16711935	; 0xff00ff
 802877c:	9105      	str	r1, [sp, #20]
 802877e:	d01d      	beq.n	80287bc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xf0>
 8028780:	fb0b fb0e 	mul.w	fp, fp, lr
 8028784:	fb01 fe0e 	mul.w	lr, r1, lr
 8028788:	ea4f 2a1b 	mov.w	sl, fp, lsr #8
 802878c:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 8028790:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028794:	f50e 7080 	add.w	r0, lr, #256	; 0x100
 8028798:	44d3      	add	fp, sl
 802879a:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 802879e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80287a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80287a6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80287aa:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80287ae:	ea4b 0e0e 	orr.w	lr, fp, lr
 80287b2:	f40e 417f 	and.w	r1, lr, #65280	; 0xff00
 80287b6:	f00e 1bff 	and.w	fp, lr, #16711935	; 0xff00ff
 80287ba:	9105      	str	r1, [sp, #20]
 80287bc:	2fff      	cmp	r7, #255	; 0xff
 80287be:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80287c2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80287c6:	d01b      	beq.n	8028800 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x134>
 80287c8:	fb0e fe07 	mul.w	lr, lr, r7
 80287cc:	fb04 f407 	mul.w	r4, r4, r7
 80287d0:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 80287d4:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 80287d8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80287dc:	f504 7080 	add.w	r0, r4, #256	; 0x100
 80287e0:	44d6      	add	lr, sl
 80287e2:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80287e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80287ea:	0a24      	lsrs	r4, r4, #8
 80287ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80287f0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80287f4:	ea4e 0404 	orr.w	r4, lr, r4
 80287f8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80287fc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028800:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8028804:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8028808:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802880c:	d019      	beq.n	8028842 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x176>
 802880e:	fb00 f008 	mul.w	r0, r0, r8
 8028812:	fb05 f508 	mul.w	r5, r5, r8
 8028816:	ea4f 2910 	mov.w	r9, r0, lsr #8
 802881a:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 802881e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8028822:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8028826:	4448      	add	r0, r9
 8028828:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 802882c:	0a00      	lsrs	r0, r0, #8
 802882e:	0a2d      	lsrs	r5, r5, #8
 8028830:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028834:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8028838:	4305      	orrs	r5, r0
 802883a:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 802883e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8028842:	9904      	ldr	r1, [sp, #16]
 8028844:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028848:	f001 1aff 	and.w	sl, r1, #16711935	; 0xff00ff
 802884c:	f401 497f 	and.w	r9, r1, #65280	; 0xff00
 8028850:	d01c      	beq.n	802888c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x1c0>
 8028852:	fb0a fa0c 	mul.w	sl, sl, ip
 8028856:	fb09 fc0c 	mul.w	ip, r9, ip
 802885a:	ea4f 281a 	mov.w	r8, sl, lsr #8
 802885e:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8028862:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028866:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802886a:	44c2      	add	sl, r8
 802886c:	eb07 2c1c 	add.w	ip, r7, ip, lsr #8
 8028870:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028874:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028878:	f00a 1aff 	and.w	sl, sl, #16711935	; 0xff00ff
 802887c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028880:	ea4a 090c 	orr.w	r9, sl, ip
 8028884:	f009 1aff 	and.w	sl, r9, #16711935	; 0xff00ff
 8028888:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802888c:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8028890:	9903      	ldr	r1, [sp, #12]
 8028892:	fb01 fc08 	mul.w	ip, r1, r8
 8028896:	f10c 0701 	add.w	r7, ip, #1
 802889a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802889e:	ea6f 2c17 	mvn.w	ip, r7, lsr #8
 80288a2:	9902      	ldr	r1, [sp, #8]
 80288a4:	fa5f f78c 	uxtb.w	r7, ip
 80288a8:	fb04 f401 	mul.w	r4, r4, r1
 80288ac:	fb0e fe01 	mul.w	lr, lr, r1
 80288b0:	9905      	ldr	r1, [sp, #20]
 80288b2:	fb0b ee03 	mla	lr, fp, r3, lr
 80288b6:	fb01 4303 	mla	r3, r1, r3, r4
 80288ba:	fb00 e002 	mla	r0, r0, r2, lr
 80288be:	fb05 3502 	mla	r5, r5, r2, r3
 80288c2:	fb0a 0a06 	mla	sl, sl, r6, r0
 80288c6:	fb09 5906 	mla	r9, r9, r6, r5
 80288ca:	ea4f 261a 	mov.w	r6, sl, lsr #8
 80288ce:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80288d2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80288d6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80288da:	ea46 0609 	orr.w	r6, r6, r9
 80288de:	b2f2      	uxtb	r2, r6
 80288e0:	f3c6 2307 	ubfx	r3, r6, #8, #8
 80288e4:	0c36      	lsrs	r6, r6, #16
 80288e6:	9900      	ldr	r1, [sp, #0]
 80288e8:	fb12 f408 	smulbb	r4, r2, r8
 80288ec:	fb13 f008 	smulbb	r0, r3, r8
 80288f0:	fb16 f808 	smulbb	r8, r6, r8
 80288f4:	780a      	ldrb	r2, [r1, #0]
 80288f6:	784b      	ldrb	r3, [r1, #1]
 80288f8:	788e      	ldrb	r6, [r1, #2]
 80288fa:	fb02 4207 	mla	r2, r2, r7, r4
 80288fe:	fb03 0307 	mla	r3, r3, r7, r0
 8028902:	fb06 8807 	mla	r8, r6, r7, r8
 8028906:	b292      	uxth	r2, r2
 8028908:	b29b      	uxth	r3, r3
 802890a:	fa1f f888 	uxth.w	r8, r8
 802890e:	1c54      	adds	r4, r2, #1
 8028910:	1c58      	adds	r0, r3, #1
 8028912:	f108 0701 	add.w	r7, r8, #1
 8028916:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 802891a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802891e:	eb07 2818 	add.w	r8, r7, r8, lsr #8
 8028922:	1212      	asrs	r2, r2, #8
 8028924:	121b      	asrs	r3, r3, #8
 8028926:	ea4f 2828 	mov.w	r8, r8, asr #8
 802892a:	700a      	strb	r2, [r1, #0]
 802892c:	704b      	strb	r3, [r1, #1]
 802892e:	f881 8002 	strb.w	r8, [r1, #2]
 8028932:	b007      	add	sp, #28
 8028934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028938:	2800      	cmp	r0, #0
 802893a:	db01      	blt.n	8028940 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x274>
 802893c:	4584      	cmp	ip, r0
 802893e:	dc40      	bgt.n	80289c2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2f6>
 8028940:	f04f 0e00 	mov.w	lr, #0
 8028944:	46f1      	mov	r9, lr
 8028946:	1c42      	adds	r2, r0, #1
 8028948:	d42b      	bmi.n	80289a2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2d6>
 802894a:	4594      	cmp	ip, r2
 802894c:	dd29      	ble.n	80289a2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2d6>
 802894e:	f1ba 0f00 	cmp.w	sl, #0
 8028952:	d005      	beq.n	8028960 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x294>
 8028954:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8028958:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 802895c:	0e27      	lsrs	r7, r4, #24
 802895e:	e6d5      	b.n	802870c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x40>
 8028960:	2d00      	cmp	r5, #0
 8028962:	db41      	blt.n	80289e8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x31c>
 8028964:	45a8      	cmp	r8, r5
 8028966:	dd3f      	ble.n	80289e8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x31c>
 8028968:	4657      	mov	r7, sl
 802896a:	4654      	mov	r4, sl
 802896c:	b1e6      	cbz	r6, 80289a8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2dc>
 802896e:	2800      	cmp	r0, #0
 8028970:	db32      	blt.n	80289d8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x30c>
 8028972:	4584      	cmp	ip, r0
 8028974:	dd30      	ble.n	80289d8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x30c>
 8028976:	f81b 200c 	ldrb.w	r2, [fp, ip]
 802897a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802897e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8028982:	3001      	adds	r0, #1
 8028984:	d423      	bmi.n	80289ce <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x302>
 8028986:	4584      	cmp	ip, r0
 8028988:	dd21      	ble.n	80289ce <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x302>
 802898a:	f1ba 0f00 	cmp.w	sl, #0
 802898e:	d027      	beq.n	80289e0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x314>
 8028990:	44dc      	add	ip, fp
 8028992:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8028996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802899a:	9304      	str	r3, [sp, #16]
 802899c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80289a0:	e6bf      	b.n	8028722 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x56>
 80289a2:	2700      	movs	r7, #0
 80289a4:	463c      	mov	r4, r7
 80289a6:	e6b1      	b.n	802870c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x40>
 80289a8:	f1ba 0f0f 	cmp.w	sl, #15
 80289ac:	d824      	bhi.n	80289f8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 80289ae:	fa1f f38a 	uxth.w	r3, sl
 80289b2:	4632      	mov	r2, r6
 80289b4:	46b3      	mov	fp, r6
 80289b6:	46b2      	mov	sl, r6
 80289b8:	9604      	str	r6, [sp, #16]
 80289ba:	4635      	mov	r5, r6
 80289bc:	46b4      	mov	ip, r6
 80289be:	46b0      	mov	r8, r6
 80289c0:	e6c2      	b.n	8028748 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x7c>
 80289c2:	5dd2      	ldrb	r2, [r2, r7]
 80289c4:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 80289c8:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 80289cc:	e7bb      	b.n	8028946 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x27a>
 80289ce:	f04f 0c00 	mov.w	ip, #0
 80289d2:	f8cd c010 	str.w	ip, [sp, #16]
 80289d6:	e6a4      	b.n	8028722 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x56>
 80289d8:	f04f 0800 	mov.w	r8, #0
 80289dc:	4645      	mov	r5, r8
 80289de:	e7d0      	b.n	8028982 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2b6>
 80289e0:	f8cd a010 	str.w	sl, [sp, #16]
 80289e4:	46d4      	mov	ip, sl
 80289e6:	e6a0      	b.n	802872a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x5e>
 80289e8:	4654      	mov	r4, sl
 80289ea:	f8cd a010 	str.w	sl, [sp, #16]
 80289ee:	4655      	mov	r5, sl
 80289f0:	46d4      	mov	ip, sl
 80289f2:	46d0      	mov	r8, sl
 80289f4:	4657      	mov	r7, sl
 80289f6:	e698      	b.n	802872a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x5e>
 80289f8:	4b03      	ldr	r3, [pc, #12]	; (8028a08 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x33c>)
 80289fa:	4a04      	ldr	r2, [pc, #16]	; (8028a0c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x340>)
 80289fc:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8028a00:	4803      	ldr	r0, [pc, #12]	; (8028a10 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x344>)
 8028a02:	f000 fc27 	bl	8029254 <__assert_func>
 8028a06:	bf00      	nop
 8028a08:	0802c4f8 	.word	0x0802c4f8
 8028a0c:	0802cb70 	.word	0x0802cb70
 8028a10:	0802c67c 	.word	0x0802c67c

08028a14 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a18:	ed2d 8b08 	vpush	{d8-d11}
 8028a1c:	b0a9      	sub	sp, #164	; 0xa4
 8028a1e:	e9dd ba3b 	ldrd	fp, sl, [sp, #236]	; 0xec
 8028a22:	eeb0 aa40 	vmov.f32	s20, s0
 8028a26:	46d9      	mov	r9, fp
 8028a28:	eef0 9a60 	vmov.f32	s19, s1
 8028a2c:	eeb0 9a41 	vmov.f32	s18, s2
 8028a30:	eef0 8a62 	vmov.f32	s17, s5
 8028a34:	eeb0 8a43 	vmov.f32	s16, s6
 8028a38:	eef0 ba44 	vmov.f32	s23, s8
 8028a3c:	eeb0 ba64 	vmov.f32	s22, s9
 8028a40:	eef0 aa45 	vmov.f32	s21, s10
 8028a44:	46d3      	mov	fp, sl
 8028a46:	9022      	str	r0, [sp, #136]	; 0x88
 8028a48:	983f      	ldr	r0, [sp, #252]	; 0xfc
 8028a4a:	9115      	str	r1, [sp, #84]	; 0x54
 8028a4c:	9218      	str	r2, [sp, #96]	; 0x60
 8028a4e:	6841      	ldr	r1, [r0, #4]
 8028a50:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8028a52:	469e      	mov	lr, r3
 8028a54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028a56:	6807      	ldr	r7, [r0, #0]
 8028a58:	fb01 2303 	mla	r3, r1, r3, r2
 8028a5c:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8028a5e:	9842      	ldr	r0, [sp, #264]	; 0x108
 8028a60:	6852      	ldr	r2, [r2, #4]
 8028a62:	f89d 110c 	ldrb.w	r1, [sp, #268]	; 0x10c
 8028a66:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8028a6a:	6800      	ldr	r0, [r0, #0]
 8028a6c:	1d13      	adds	r3, r2, #4
 8028a6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8028a70:	b28b      	uxth	r3, r1
 8028a72:	9123      	str	r1, [sp, #140]	; 0x8c
 8028a74:	9011      	str	r0, [sp, #68]	; 0x44
 8028a76:	9317      	str	r3, [sp, #92]	; 0x5c
 8028a78:	9712      	str	r7, [sp, #72]	; 0x48
 8028a7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8028a7c:	2b00      	cmp	r3, #0
 8028a7e:	dc02      	bgt.n	8028a86 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8028a80:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028a82:	2b00      	cmp	r3, #0
 8028a84:	dd68      	ble.n	8028b58 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8028a86:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8028a88:	f1be 0f00 	cmp.w	lr, #0
 8028a8c:	e9d3 5702 	ldrd	r5, r7, [r3, #8]
 8028a90:	b228      	sxth	r0, r5
 8028a92:	b23e      	sxth	r6, r7
 8028a94:	f340 83a0 	ble.w	80291d8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c4>
 8028a98:	e9dd 8a3d 	ldrd	r8, sl, [sp, #244]	; 0xf4
 8028a9c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8028a9e:	1e44      	subs	r4, r0, #1
 8028aa0:	f106 3cff 	add.w	ip, r6, #4294967295
 8028aa4:	9709      	str	r7, [sp, #36]	; 0x24
 8028aa6:	ea5f 4329 	movs.w	r3, r9, asr #16
 8028aaa:	ea4f 422b 	mov.w	r2, fp, asr #16
 8028aae:	d405      	bmi.n	8028abc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028ab0:	42a3      	cmp	r3, r4
 8028ab2:	da03      	bge.n	8028abc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028ab4:	2a00      	cmp	r2, #0
 8028ab6:	db01      	blt.n	8028abc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028ab8:	4562      	cmp	r2, ip
 8028aba:	db52      	blt.n	8028b62 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8028abc:	1c5f      	adds	r7, r3, #1
 8028abe:	d406      	bmi.n	8028ace <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8028ac0:	4287      	cmp	r7, r0
 8028ac2:	dc04      	bgt.n	8028ace <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8028ac4:	1c57      	adds	r7, r2, #1
 8028ac6:	d402      	bmi.n	8028ace <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8028ac8:	42b7      	cmp	r7, r6
 8028aca:	f340 835f 	ble.w	802918c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>
 8028ace:	f1be 0e01 	subs.w	lr, lr, #1
 8028ad2:	44c1      	add	r9, r8
 8028ad4:	44d3      	add	fp, sl
 8028ad6:	f101 0104 	add.w	r1, r1, #4
 8028ada:	d1e4      	bne.n	8028aa6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028adc:	9112      	str	r1, [sp, #72]	; 0x48
 8028ade:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8028ae0:	2b00      	cmp	r3, #0
 8028ae2:	dd39      	ble.n	8028b58 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8028ae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028ae8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028aec:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028af0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028af4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028af8:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8028afc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028b00:	ee76 6a68 	vsub.f32	s13, s12, s17
 8028b04:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8028b08:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028b0c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028b10:	ee16 2a90 	vmov	r2, s13
 8028b14:	3b01      	subs	r3, #1
 8028b16:	9315      	str	r3, [sp, #84]	; 0x54
 8028b18:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8028b1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8028b1e:	ee17 2a10 	vmov	r2, s14
 8028b22:	eeb0 7a48 	vmov.f32	s14, s16
 8028b26:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028b2a:	ee17 ba10 	vmov	fp, s14
 8028b2e:	eeb0 7a68 	vmov.f32	s14, s17
 8028b32:	933d      	str	r3, [sp, #244]	; 0xf4
 8028b34:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8028b36:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028b3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8028b3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8028b40:	933e      	str	r3, [sp, #248]	; 0xf8
 8028b42:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8028b44:	ee17 9a10 	vmov	r9, s14
 8028b48:	eeb0 8a67 	vmov.f32	s16, s15
 8028b4c:	eef0 8a46 	vmov.f32	s17, s12
 8028b50:	bf14      	ite	ne
 8028b52:	469e      	movne	lr, r3
 8028b54:	4696      	moveq	lr, r2
 8028b56:	e790      	b.n	8028a7a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8028b58:	b029      	add	sp, #164	; 0xa4
 8028b5a:	ecbd 8b08 	vpop	{d8-d11}
 8028b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028b62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8028b64:	9112      	str	r1, [sp, #72]	; 0x48
 8028b66:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8028b68:	f10e 32ff 	add.w	r2, lr, #4294967295
 8028b6c:	fb01 9302 	mla	r3, r1, r2, r9
 8028b70:	141b      	asrs	r3, r3, #16
 8028b72:	920a      	str	r2, [sp, #40]	; 0x28
 8028b74:	f100 816a 	bmi.w	8028e4c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8028b78:	42a3      	cmp	r3, r4
 8028b7a:	f280 8167 	bge.w	8028e4c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8028b7e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8028b80:	fb03 b302 	mla	r3, r3, r2, fp
 8028b84:	141b      	asrs	r3, r3, #16
 8028b86:	f100 8161 	bmi.w	8028e4c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8028b8a:	3e01      	subs	r6, #1
 8028b8c:	42b3      	cmp	r3, r6
 8028b8e:	f280 815d 	bge.w	8028e4c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8028b92:	f1be 0f00 	cmp.w	lr, #0
 8028b96:	dda2      	ble.n	8028ade <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8028b98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028b9a:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 8028b9e:	3304      	adds	r3, #4
 8028ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8028ba2:	f8cd b0f0 	str.w	fp, [sp, #240]	; 0xf0
 8028ba6:	4606      	mov	r6, r0
 8028ba8:	465b      	mov	r3, fp
 8028baa:	e12a      	b.n	8028e02 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8028bac:	785f      	ldrb	r7, [r3, #1]
 8028bae:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8028bb2:	9713      	str	r7, [sp, #76]	; 0x4c
 8028bb4:	0e3f      	lsrs	r7, r7, #24
 8028bb6:	970c      	str	r7, [sp, #48]	; 0x30
 8028bb8:	b16a      	cbz	r2, 8028bd6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028bba:	199f      	adds	r7, r3, r6
 8028bbc:	5d9b      	ldrb	r3, [r3, r6]
 8028bbe:	462e      	mov	r6, r5
 8028bc0:	787f      	ldrb	r7, [r7, #1]
 8028bc2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028bc6:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8028bca:	9314      	str	r3, [sp, #80]	; 0x50
 8028bcc:	9516      	str	r5, [sp, #88]	; 0x58
 8028bce:	0e1b      	lsrs	r3, r3, #24
 8028bd0:	0e2d      	lsrs	r5, r5, #24
 8028bd2:	950e      	str	r5, [sp, #56]	; 0x38
 8028bd4:	930d      	str	r3, [sp, #52]	; 0x34
 8028bd6:	fa1f fc81 	uxth.w	ip, r1
 8028bda:	b292      	uxth	r2, r2
 8028bdc:	fb0c f602 	mul.w	r6, ip, r2
 8028be0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8028be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028be6:	ebac 0706 	sub.w	r7, ip, r6
 8028bea:	b2bf      	uxth	r7, r7
 8028bec:	fb07 f103 	mul.w	r1, r7, r3
 8028bf0:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8028bf4:	b292      	uxth	r2, r2
 8028bf6:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8028bfa:	1a9b      	subs	r3, r3, r2
 8028bfc:	b29b      	uxth	r3, r3
 8028bfe:	fb03 1104 	mla	r1, r3, r4, r1
 8028c02:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028c04:	fb02 1105 	mla	r1, r2, r5, r1
 8028c08:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028c0a:	fb06 1105 	mla	r1, r6, r5, r1
 8028c0e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028c12:	2900      	cmp	r1, #0
 8028c14:	f000 80e3 	beq.w	8028dde <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8028c18:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8028c1c:	2cff      	cmp	r4, #255	; 0xff
 8028c1e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8028c22:	950f      	str	r5, [sp, #60]	; 0x3c
 8028c24:	9010      	str	r0, [sp, #64]	; 0x40
 8028c26:	d01e      	beq.n	8028c66 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8028c28:	fb00 f004 	mul.w	r0, r0, r4
 8028c2c:	fb05 fe04 	mul.w	lr, r5, r4
 8028c30:	4604      	mov	r4, r0
 8028c32:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8028c36:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8028c3a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028c3e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8028c42:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8028c46:	44e6      	add	lr, ip
 8028c48:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028c4c:	0a24      	lsrs	r4, r4, #8
 8028c4e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028c52:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028c56:	ea4e 0e04 	orr.w	lr, lr, r4
 8028c5a:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8028c5e:	900f      	str	r0, [sp, #60]	; 0x3c
 8028c60:	f40e 407f 	and.w	r0, lr, #65280	; 0xff00
 8028c64:	9010      	str	r0, [sp, #64]	; 0x40
 8028c66:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8028c68:	f000 1eff 	and.w	lr, r0, #16711935	; 0xff00ff
 8028c6c:	f400 487f 	and.w	r8, r0, #65280	; 0xff00
 8028c70:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028c72:	28ff      	cmp	r0, #255	; 0xff
 8028c74:	d01c      	beq.n	8028cb0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8028c76:	fb0e fe00 	mul.w	lr, lr, r0
 8028c7a:	fb08 f800 	mul.w	r8, r8, r0
 8028c7e:	ea4f 241e 	mov.w	r4, lr, lsr #8
 8028c82:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028c86:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8028c8a:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8028c8e:	44a6      	add	lr, r4
 8028c90:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8028c94:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028c98:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028c9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028ca0:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8028ca4:	ea4e 0808 	orr.w	r8, lr, r8
 8028ca8:	f008 1eff 	and.w	lr, r8, #16711935	; 0xff00ff
 8028cac:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8028cb0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8028cb2:	f000 1cff 	and.w	ip, r0, #16711935	; 0xff00ff
 8028cb6:	f400 4a7f 	and.w	sl, r0, #65280	; 0xff00
 8028cba:	980d      	ldr	r0, [sp, #52]	; 0x34
 8028cbc:	28ff      	cmp	r0, #255	; 0xff
 8028cbe:	d01c      	beq.n	8028cfa <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8028cc0:	fb0c fc00 	mul.w	ip, ip, r0
 8028cc4:	fb0a fa00 	mul.w	sl, sl, r0
 8028cc8:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8028ccc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028cd0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028cd4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8028cd8:	44a4      	add	ip, r4
 8028cda:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8028cde:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028ce2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028ce6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028cea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028cee:	ea4c 0a0a 	orr.w	sl, ip, sl
 8028cf2:	f00a 1cff 	and.w	ip, sl, #16711935	; 0xff00ff
 8028cf6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028cfa:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8028cfc:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8028d00:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8028d04:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028d06:	2cff      	cmp	r4, #255	; 0xff
 8028d08:	d019      	beq.n	8028d3e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8028d0a:	fb00 f004 	mul.w	r0, r0, r4
 8028d0e:	fb0b fb04 	mul.w	fp, fp, r4
 8028d12:	0a04      	lsrs	r4, r0, #8
 8028d14:	f004 15ff 	and.w	r5, r4, #16711935	; 0xff00ff
 8028d18:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8028d1c:	f50b 7480 	add.w	r4, fp, #256	; 0x100
 8028d20:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 8028d24:	4428      	add	r0, r5
 8028d26:	0a00      	lsrs	r0, r0, #8
 8028d28:	0a24      	lsrs	r4, r4, #8
 8028d2a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028d2e:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8028d32:	ea40 0b0b 	orr.w	fp, r0, fp
 8028d36:	f00b 10ff 	and.w	r0, fp, #16711935	; 0xff00ff
 8028d3a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8028d3e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8028d40:	fb0e fe07 	mul.w	lr, lr, r7
 8028d44:	fb01 f105 	mul.w	r1, r1, r5
 8028d48:	1c4c      	adds	r4, r1, #1
 8028d4a:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8028d4e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8028d52:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8028d54:	fb08 f707 	mul.w	r7, r8, r7
 8028d58:	fb04 ee03 	mla	lr, r4, r3, lr
 8028d5c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8028d5e:	fb0c ee02 	mla	lr, ip, r2, lr
 8028d62:	fb04 7703 	mla	r7, r4, r3, r7
 8028d66:	fb0a 7702 	mla	r7, sl, r2, r7
 8028d6a:	fb00 ee06 	mla	lr, r0, r6, lr
 8028d6e:	fb0b 7706 	mla	r7, fp, r6, r7
 8028d72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028d76:	0a3f      	lsrs	r7, r7, #8
 8028d78:	f407 437f 	and.w	r3, r7, #65280	; 0xff00
 8028d7c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028d80:	ea4e 0303 	orr.w	r3, lr, r3
 8028d84:	b2df      	uxtb	r7, r3
 8028d86:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8028d8a:	0c1b      	lsrs	r3, r3, #16
 8028d8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8028d8e:	fb17 f705 	smulbb	r7, r7, r5
 8028d92:	fb16 f605 	smulbb	r6, r6, r5
 8028d96:	fb13 f305 	smulbb	r3, r3, r5
 8028d9a:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 8028d9e:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 8028da2:	f814 cc02 	ldrb.w	ip, [r4, #-2]
 8028da6:	b2c9      	uxtb	r1, r1
 8028da8:	fb00 7001 	mla	r0, r0, r1, r7
 8028dac:	fb02 6201 	mla	r2, r2, r1, r6
 8028db0:	fb0c 3101 	mla	r1, ip, r1, r3
 8028db4:	b280      	uxth	r0, r0
 8028db6:	b292      	uxth	r2, r2
 8028db8:	b289      	uxth	r1, r1
 8028dba:	1c47      	adds	r7, r0, #1
 8028dbc:	1c56      	adds	r6, r2, #1
 8028dbe:	1c4b      	adds	r3, r1, #1
 8028dc0:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8028dc4:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8028dc8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028dcc:	1200      	asrs	r0, r0, #8
 8028dce:	1212      	asrs	r2, r2, #8
 8028dd0:	1209      	asrs	r1, r1, #8
 8028dd2:	f804 0c04 	strb.w	r0, [r4, #-4]
 8028dd6:	f804 2c03 	strb.w	r2, [r4, #-3]
 8028dda:	f804 1c02 	strb.w	r1, [r4, #-2]
 8028dde:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8028de0:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8028de2:	4491      	add	r9, r2
 8028de4:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8028de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028de8:	440a      	add	r2, r1
 8028dea:	923c      	str	r2, [sp, #240]	; 0xf0
 8028dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028dee:	3b01      	subs	r3, #1
 8028df0:	930a      	str	r3, [sp, #40]	; 0x28
 8028df2:	3204      	adds	r2, #4
 8028df4:	3301      	adds	r3, #1
 8028df6:	9209      	str	r2, [sp, #36]	; 0x24
 8028df8:	d021      	beq.n	8028e3e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8028dfa:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8028dfc:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8028e00:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8028e02:	ea4f 4229 	mov.w	r2, r9, asr #16
 8028e06:	141b      	asrs	r3, r3, #16
 8028e08:	fb06 2303 	mla	r3, r6, r3, r2
 8028e0c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8028e0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028e10:	5ce2      	ldrb	r2, [r4, r3]
 8028e12:	f3c9 3103 	ubfx	r1, r9, #12, #4
 8028e16:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 8028e1a:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8028e1c:	4423      	add	r3, r4
 8028e1e:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8028e22:	0e04      	lsrs	r4, r0, #24
 8028e24:	2900      	cmp	r1, #0
 8028e26:	f47f aec1 	bne.w	8028bac <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8028e2a:	2a00      	cmp	r2, #0
 8028e2c:	f43f aed3 	beq.w	8028bd6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028e30:	5d9b      	ldrb	r3, [r3, r6]
 8028e32:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028e36:	9314      	str	r3, [sp, #80]	; 0x50
 8028e38:	0e1b      	lsrs	r3, r3, #24
 8028e3a:	930d      	str	r3, [sp, #52]	; 0x34
 8028e3c:	e6cb      	b.n	8028bd6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028e3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028e40:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 8028e44:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 8028e48:	9312      	str	r3, [sp, #72]	; 0x48
 8028e4a:	e648      	b.n	8028ade <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8028e4c:	f1be 0f00 	cmp.w	lr, #0
 8028e50:	f77f ae45 	ble.w	8028ade <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8028e54:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8028e58:	ea4f 4329 	mov.w	r3, r9, asr #16
 8028e5c:	ea4f 422b 	mov.w	r2, fp, asr #16
 8028e60:	2b00      	cmp	r3, #0
 8028e62:	46be      	mov	lr, r7
 8028e64:	4629      	mov	r1, r5
 8028e66:	e9dd 653d 	ldrd	r6, r5, [sp, #244]	; 0xf4
 8028e6a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8028e6e:	9c42      	ldr	r4, [sp, #264]	; 0x108
 8028e70:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8028e74:	f3cb 3703 	ubfx	r7, fp, #12, #4
 8028e78:	f2c0 815d 	blt.w	8029136 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8028e7c:	f101 3cff 	add.w	ip, r1, #4294967295
 8028e80:	4563      	cmp	r3, ip
 8028e82:	f280 8158 	bge.w	8029136 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8028e86:	2a00      	cmp	r2, #0
 8028e88:	f2c0 8155 	blt.w	8029136 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8028e8c:	f10e 3cff 	add.w	ip, lr, #4294967295
 8028e90:	4562      	cmp	r2, ip
 8028e92:	f280 8150 	bge.w	8029136 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 8028e96:	fa0f fc81 	sxth.w	ip, r1
 8028e9a:	fb02 330c 	mla	r3, r2, ip, r3
 8028e9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8028ea0:	5cd1      	ldrb	r1, [r2, r3]
 8028ea2:	18d3      	adds	r3, r2, r3
 8028ea4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028ea6:	469e      	mov	lr, r3
 8028ea8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028eac:	0e19      	lsrs	r1, r3, #24
 8028eae:	9309      	str	r3, [sp, #36]	; 0x24
 8028eb0:	910f      	str	r1, [sp, #60]	; 0x3c
 8028eb2:	2800      	cmp	r0, #0
 8028eb4:	f000 8171 	beq.w	802919a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x786>
 8028eb8:	4671      	mov	r1, lr
 8028eba:	f89e e001 	ldrb.w	lr, [lr, #1]
 8028ebe:	4613      	mov	r3, r2
 8028ec0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8028ec4:	9224      	str	r2, [sp, #144]	; 0x90
 8028ec6:	0e12      	lsrs	r2, r2, #24
 8028ec8:	921a      	str	r2, [sp, #104]	; 0x68
 8028eca:	2f00      	cmp	r7, #0
 8028ecc:	f040 8171 	bne.w	80291b2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79e>
 8028ed0:	b280      	uxth	r0, r0
 8028ed2:	b2bf      	uxth	r7, r7
 8028ed4:	fb00 f207 	mul.w	r2, r0, r7
 8028ed8:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 8028edc:	ebac 0002 	sub.w	r0, ip, r2
 8028ee0:	b280      	uxth	r0, r0
 8028ee2:	4603      	mov	r3, r0
 8028ee4:	9010      	str	r0, [sp, #64]	; 0x40
 8028ee6:	981a      	ldr	r0, [sp, #104]	; 0x68
 8028ee8:	ebc2 1707 	rsb	r7, r2, r7, lsl #4
 8028eec:	fb03 f000 	mul.w	r0, r3, r0
 8028ef0:	fa1f fe87 	uxth.w	lr, r7
 8028ef4:	f5cc 7780 	rsb	r7, ip, #256	; 0x100
 8028ef8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028efa:	eba7 070e 	sub.w	r7, r7, lr
 8028efe:	b2bf      	uxth	r7, r7
 8028f00:	fb07 0003 	mla	r0, r7, r3, r0
 8028f04:	9719      	str	r7, [sp, #100]	; 0x64
 8028f06:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8028f08:	fb0e 0007 	mla	r0, lr, r7, r0
 8028f0c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8028f0e:	fb02 0007 	mla	r0, r2, r7, r0
 8028f12:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028f16:	900f      	str	r0, [sp, #60]	; 0x3c
 8028f18:	2800      	cmp	r0, #0
 8028f1a:	f000 80f6 	beq.w	802910a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8028f1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028f20:	2bff      	cmp	r3, #255	; 0xff
 8028f22:	f001 10ff 	and.w	r0, r1, #16711935	; 0xff00ff
 8028f26:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8028f2a:	901d      	str	r0, [sp, #116]	; 0x74
 8028f2c:	9109      	str	r1, [sp, #36]	; 0x24
 8028f2e:	d01b      	beq.n	8028f68 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x554>
 8028f30:	fb01 f103 	mul.w	r1, r1, r3
 8028f34:	fb00 f003 	mul.w	r0, r0, r3
 8028f38:	460b      	mov	r3, r1
 8028f3a:	0a01      	lsrs	r1, r0, #8
 8028f3c:	f100 1701 	add.w	r7, r0, #65537	; 0x10001
 8028f40:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028f44:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8028f48:	4439      	add	r1, r7
 8028f4a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8028f4e:	0a09      	lsrs	r1, r1, #8
 8028f50:	0a1b      	lsrs	r3, r3, #8
 8028f52:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028f56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028f5a:	430b      	orrs	r3, r1
 8028f5c:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8028f60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028f64:	911d      	str	r1, [sp, #116]	; 0x74
 8028f66:	9309      	str	r3, [sp, #36]	; 0x24
 8028f68:	9924      	ldr	r1, [sp, #144]	; 0x90
 8028f6a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8028f6c:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8028f70:	2fff      	cmp	r7, #255	; 0xff
 8028f72:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8028f76:	931e      	str	r3, [sp, #120]	; 0x78
 8028f78:	911f      	str	r1, [sp, #124]	; 0x7c
 8028f7a:	d01c      	beq.n	8028fb6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 8028f7c:	fb01 f107 	mul.w	r1, r1, r7
 8028f80:	fb03 f307 	mul.w	r3, r3, r7
 8028f84:	460f      	mov	r7, r1
 8028f86:	0a19      	lsrs	r1, r3, #8
 8028f88:	f103 1001 	add.w	r0, r3, #65537	; 0x10001
 8028f8c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028f90:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8028f94:	4401      	add	r1, r0
 8028f96:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8028f9a:	0a09      	lsrs	r1, r1, #8
 8028f9c:	0a1b      	lsrs	r3, r3, #8
 8028f9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028fa2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028fa6:	ea41 0003 	orr.w	r0, r1, r3
 8028faa:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8028fae:	931e      	str	r3, [sp, #120]	; 0x78
 8028fb0:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8028fb4:	931f      	str	r3, [sp, #124]	; 0x7c
 8028fb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028fb8:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 8028fbc:	f403 4c7f 	and.w	ip, r3, #65280	; 0xff00
 8028fc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8028fc2:	9120      	str	r1, [sp, #128]	; 0x80
 8028fc4:	2bff      	cmp	r3, #255	; 0xff
 8028fc6:	d01b      	beq.n	8029000 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8028fc8:	fb01 f103 	mul.w	r1, r1, r3
 8028fcc:	fb0c fc03 	mul.w	ip, ip, r3
 8028fd0:	0a08      	lsrs	r0, r1, #8
 8028fd2:	f50c 7380 	add.w	r3, ip, #256	; 0x100
 8028fd6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028fda:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
 8028fde:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028fe2:	4401      	add	r1, r0
 8028fe4:	0a09      	lsrs	r1, r1, #8
 8028fe6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028fea:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028fee:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028ff2:	ea41 0c0c 	orr.w	ip, r1, ip
 8028ff6:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8028ffa:	9320      	str	r3, [sp, #128]	; 0x80
 8028ffc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8029000:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8029002:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8029006:	f400 477f 	and.w	r7, r0, #65280	; 0xff00
 802900a:	981c      	ldr	r0, [sp, #112]	; 0x70
 802900c:	9321      	str	r3, [sp, #132]	; 0x84
 802900e:	28ff      	cmp	r0, #255	; 0xff
 8029010:	d019      	beq.n	8029046 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 8029012:	fb03 f300 	mul.w	r3, r3, r0
 8029016:	fb07 f700 	mul.w	r7, r7, r0
 802901a:	0a18      	lsrs	r0, r3, #8
 802901c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8029020:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8029024:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8029028:	4418      	add	r0, r3
 802902a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802902e:	0a00      	lsrs	r0, r0, #8
 8029030:	0a3f      	lsrs	r7, r7, #8
 8029032:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8029036:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802903a:	4307      	orrs	r7, r0
 802903c:	f007 13ff 	and.w	r3, r7, #16711935	; 0xff00ff
 8029040:	9321      	str	r3, [sp, #132]	; 0x84
 8029042:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8029046:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029048:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802904a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802904c:	fb01 f100 	mul.w	r1, r1, r0
 8029050:	4608      	mov	r0, r1
 8029052:	3101      	adds	r1, #1
 8029054:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8029058:	ea6f 2110 	mvn.w	r1, r0, lsr #8
 802905c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802905e:	9125      	str	r1, [sp, #148]	; 0x94
 8029060:	991e      	ldr	r1, [sp, #120]	; 0x78
 8029062:	fb01 f100 	mul.w	r1, r1, r0
 8029066:	910f      	str	r1, [sp, #60]	; 0x3c
 8029068:	991f      	ldr	r1, [sp, #124]	; 0x7c
 802906a:	fb01 f100 	mul.w	r1, r1, r0
 802906e:	9110      	str	r1, [sp, #64]	; 0x40
 8029070:	991d      	ldr	r1, [sp, #116]	; 0x74
 8029072:	4608      	mov	r0, r1
 8029074:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029076:	fb00 1103 	mla	r1, r0, r3, r1
 802907a:	910f      	str	r1, [sp, #60]	; 0x3c
 802907c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802907e:	4608      	mov	r0, r1
 8029080:	9910      	ldr	r1, [sp, #64]	; 0x40
 8029082:	fb00 1003 	mla	r0, r0, r3, r1
 8029086:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029088:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802908a:	fb0c 000e 	mla	r0, ip, lr, r0
 802908e:	fb03 110e 	mla	r1, r3, lr, r1
 8029092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8029094:	f89a c002 	ldrb.w	ip, [sl, #2]
 8029098:	fb03 1102 	mla	r1, r3, r2, r1
 802909c:	fb07 0302 	mla	r3, r7, r2, r0
 80290a0:	0a0a      	lsrs	r2, r1, #8
 80290a2:	0a1b      	lsrs	r3, r3, #8
 80290a4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80290a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80290ac:	4313      	orrs	r3, r2
 80290ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80290b0:	b2df      	uxtb	r7, r3
 80290b2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80290b6:	0c1b      	lsrs	r3, r3, #16
 80290b8:	fb17 f702 	smulbb	r7, r7, r2
 80290bc:	fb10 f002 	smulbb	r0, r0, r2
 80290c0:	fb13 f302 	smulbb	r3, r3, r2
 80290c4:	f89d e094 	ldrb.w	lr, [sp, #148]	; 0x94
 80290c8:	f89a 1000 	ldrb.w	r1, [sl]
 80290cc:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80290d0:	fb01 710e 	mla	r1, r1, lr, r7
 80290d4:	fb02 020e 	mla	r2, r2, lr, r0
 80290d8:	fb0c 330e 	mla	r3, ip, lr, r3
 80290dc:	b297      	uxth	r7, r2
 80290de:	fa1f fc81 	uxth.w	ip, r1
 80290e2:	b298      	uxth	r0, r3
 80290e4:	f10c 0101 	add.w	r1, ip, #1
 80290e8:	1c7a      	adds	r2, r7, #1
 80290ea:	1c43      	adds	r3, r0, #1
 80290ec:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 80290f0:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80290f4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80290f8:	1209      	asrs	r1, r1, #8
 80290fa:	1212      	asrs	r2, r2, #8
 80290fc:	121b      	asrs	r3, r3, #8
 80290fe:	f88a 1000 	strb.w	r1, [sl]
 8029102:	f88a 2001 	strb.w	r2, [sl, #1]
 8029106:	f88a 3002 	strb.w	r3, [sl, #2]
 802910a:	f1b8 0f00 	cmp.w	r8, #0
 802910e:	f10a 0a04 	add.w	sl, sl, #4
 8029112:	44b1      	add	r9, r6
 8029114:	44ab      	add	fp, r5
 8029116:	dd30      	ble.n	802917a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x766>
 8029118:	e9d4 1e02 	ldrd	r1, lr, [r4, #8]
 802911c:	ea4f 4329 	mov.w	r3, r9, asr #16
 8029120:	2b00      	cmp	r3, #0
 8029122:	f108 38ff 	add.w	r8, r8, #4294967295
 8029126:	ea4f 422b 	mov.w	r2, fp, asr #16
 802912a:	f3c9 3003 	ubfx	r0, r9, #12, #4
 802912e:	f3cb 3703 	ubfx	r7, fp, #12, #4
 8029132:	f6bf aea3 	bge.w	8028e7c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8029136:	f113 0c01 	adds.w	ip, r3, #1
 802913a:	d4e6      	bmi.n	802910a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 802913c:	458c      	cmp	ip, r1
 802913e:	dce4      	bgt.n	802910a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8029140:	f112 0c01 	adds.w	ip, r2, #1
 8029144:	d4e1      	bmi.n	802910a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 8029146:	45f4      	cmp	ip, lr
 8029148:	dcdf      	bgt.n	802910a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 802914a:	fa0f fe8e 	sxth.w	lr, lr
 802914e:	b209      	sxth	r1, r1
 8029150:	e9cd 1e00 	strd	r1, lr, [sp]
 8029154:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8029156:	e9cd 2003 	strd	r2, r0, [sp, #12]
 802915a:	e9cd 7105 	strd	r7, r1, [sp, #20]
 802915e:	9302      	str	r3, [sp, #8]
 8029160:	4651      	mov	r1, sl
 8029162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029164:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8029166:	9822      	ldr	r0, [sp, #136]	; 0x88
 8029168:	f7ff fab0 	bl	80286cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>
 802916c:	f1b8 0f00 	cmp.w	r8, #0
 8029170:	f10a 0a04 	add.w	sl, sl, #4
 8029174:	44b1      	add	r9, r6
 8029176:	44ab      	add	fp, r5
 8029178:	dcce      	bgt.n	8029118 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 802917a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802917c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802917e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8029182:	3301      	adds	r3, #1
 8029184:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8029188:	9312      	str	r3, [sp, #72]	; 0x48
 802918a:	e4a8      	b.n	8028ade <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 802918c:	9112      	str	r1, [sp, #72]	; 0x48
 802918e:	f10e 31ff 	add.w	r1, lr, #4294967295
 8029192:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8029194:	910a      	str	r1, [sp, #40]	; 0x28
 8029196:	4688      	mov	r8, r1
 8029198:	e662      	b.n	8028e60 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802919a:	2f00      	cmp	r7, #0
 802919c:	f43f ae98 	beq.w	8028ed0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 80291a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80291a2:	f81e 200c 	ldrb.w	r2, [lr, ip]
 80291a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80291aa:	0e13      	lsrs	r3, r2, #24
 80291ac:	9226      	str	r2, [sp, #152]	; 0x98
 80291ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80291b0:	e68e      	b.n	8028ed0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 80291b2:	eb01 0e0c 	add.w	lr, r1, ip
 80291b6:	f89e e001 	ldrb.w	lr, [lr, #1]
 80291ba:	f811 c00c 	ldrb.w	ip, [r1, ip]
 80291be:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 80291c2:	4611      	mov	r1, r2
 80291c4:	9227      	str	r2, [sp, #156]	; 0x9c
 80291c6:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80291ca:	4613      	mov	r3, r2
 80291cc:	9226      	str	r2, [sp, #152]	; 0x98
 80291ce:	0e0a      	lsrs	r2, r1, #24
 80291d0:	921c      	str	r2, [sp, #112]	; 0x70
 80291d2:	0e1a      	lsrs	r2, r3, #24
 80291d4:	921b      	str	r2, [sp, #108]	; 0x6c
 80291d6:	e67b      	b.n	8028ed0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 80291d8:	f43f ac81 	beq.w	8028ade <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80291dc:	1e44      	subs	r4, r0, #1
 80291de:	e4c2      	b.n	8028b66 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>

080291e0 <_GLOBAL__sub_I__ZN8touchgfx19GPU2DVectorRenderer5setupERKNS_6WidgetERKNS_4RectE>:
 80291e0:	2200      	movs	r2, #0
 80291e2:	4b02      	ldr	r3, [pc, #8]	; (80291ec <_GLOBAL__sub_I__ZN8touchgfx19GPU2DVectorRenderer5setupERKNS_6WidgetERKNS_4RectE+0xc>)
 80291e4:	e9c3 2200 	strd	r2, r2, [r3]
 80291e8:	4770      	bx	lr
 80291ea:	bf00      	nop
 80291ec:	20197ccc 	.word	0x20197ccc

080291f0 <__aeabi_atexit>:
 80291f0:	460b      	mov	r3, r1
 80291f2:	4601      	mov	r1, r0
 80291f4:	4618      	mov	r0, r3
 80291f6:	f000 b851 	b.w	802929c <__cxa_atexit>

080291fa <_ZdlPvj>:
 80291fa:	f000 b812 	b.w	8029222 <_ZdlPv>

080291fe <__cxa_guard_acquire>:
 80291fe:	6803      	ldr	r3, [r0, #0]
 8029200:	07db      	lsls	r3, r3, #31
 8029202:	d406      	bmi.n	8029212 <__cxa_guard_acquire+0x14>
 8029204:	7843      	ldrb	r3, [r0, #1]
 8029206:	b103      	cbz	r3, 802920a <__cxa_guard_acquire+0xc>
 8029208:	deff      	udf	#255	; 0xff
 802920a:	2301      	movs	r3, #1
 802920c:	7043      	strb	r3, [r0, #1]
 802920e:	4618      	mov	r0, r3
 8029210:	4770      	bx	lr
 8029212:	2000      	movs	r0, #0
 8029214:	4770      	bx	lr

08029216 <__cxa_guard_release>:
 8029216:	2301      	movs	r3, #1
 8029218:	6003      	str	r3, [r0, #0]
 802921a:	4770      	bx	lr

0802921c <__cxa_pure_virtual>:
 802921c:	b508      	push	{r3, lr}
 802921e:	f000 f80d 	bl	802923c <_ZSt9terminatev>

08029222 <_ZdlPv>:
 8029222:	f000 b88d 	b.w	8029340 <free>

08029226 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8029226:	b508      	push	{r3, lr}
 8029228:	4780      	blx	r0
 802922a:	f000 f80c 	bl	8029246 <abort>
	...

08029230 <_ZSt13get_terminatev>:
 8029230:	4b01      	ldr	r3, [pc, #4]	; (8029238 <_ZSt13get_terminatev+0x8>)
 8029232:	e8d3 0faf 	lda	r0, [r3]
 8029236:	4770      	bx	lr
 8029238:	200000c0 	.word	0x200000c0

0802923c <_ZSt9terminatev>:
 802923c:	b508      	push	{r3, lr}
 802923e:	f7ff fff7 	bl	8029230 <_ZSt13get_terminatev>
 8029242:	f7ff fff0 	bl	8029226 <_ZN10__cxxabiv111__terminateEPFvvE>

08029246 <abort>:
 8029246:	2006      	movs	r0, #6
 8029248:	b508      	push	{r3, lr}
 802924a:	f000 fd5d 	bl	8029d08 <raise>
 802924e:	2001      	movs	r0, #1
 8029250:	f7d8 ff40 	bl	80020d4 <_exit>

08029254 <__assert_func>:
 8029254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8029256:	4614      	mov	r4, r2
 8029258:	461a      	mov	r2, r3
 802925a:	4b09      	ldr	r3, [pc, #36]	; (8029280 <__assert_func+0x2c>)
 802925c:	4605      	mov	r5, r0
 802925e:	681b      	ldr	r3, [r3, #0]
 8029260:	68d8      	ldr	r0, [r3, #12]
 8029262:	b14c      	cbz	r4, 8029278 <__assert_func+0x24>
 8029264:	4b07      	ldr	r3, [pc, #28]	; (8029284 <__assert_func+0x30>)
 8029266:	9100      	str	r1, [sp, #0]
 8029268:	4907      	ldr	r1, [pc, #28]	; (8029288 <__assert_func+0x34>)
 802926a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802926e:	462b      	mov	r3, r5
 8029270:	f000 f828 	bl	80292c4 <fiprintf>
 8029274:	f7ff ffe7 	bl	8029246 <abort>
 8029278:	4b04      	ldr	r3, [pc, #16]	; (802928c <__assert_func+0x38>)
 802927a:	461c      	mov	r4, r3
 802927c:	e7f3      	b.n	8029266 <__assert_func+0x12>
 802927e:	bf00      	nop
 8029280:	200000c4 	.word	0x200000c4
 8029284:	0802d42e 	.word	0x0802d42e
 8029288:	0802d43b 	.word	0x0802d43b
 802928c:	0802d469 	.word	0x0802d469

08029290 <atexit>:
 8029290:	2300      	movs	r3, #0
 8029292:	4601      	mov	r1, r0
 8029294:	461a      	mov	r2, r3
 8029296:	4618      	mov	r0, r3
 8029298:	f000 be12 	b.w	8029ec0 <__register_exitproc>

0802929c <__cxa_atexit>:
 802929c:	b510      	push	{r4, lr}
 802929e:	4c05      	ldr	r4, [pc, #20]	; (80292b4 <__cxa_atexit+0x18>)
 80292a0:	4613      	mov	r3, r2
 80292a2:	b12c      	cbz	r4, 80292b0 <__cxa_atexit+0x14>
 80292a4:	460a      	mov	r2, r1
 80292a6:	4601      	mov	r1, r0
 80292a8:	2002      	movs	r0, #2
 80292aa:	f000 fe09 	bl	8029ec0 <__register_exitproc>
 80292ae:	bd10      	pop	{r4, pc}
 80292b0:	4620      	mov	r0, r4
 80292b2:	e7fc      	b.n	80292ae <__cxa_atexit+0x12>
 80292b4:	08029ec1 	.word	0x08029ec1

080292b8 <__errno>:
 80292b8:	4b01      	ldr	r3, [pc, #4]	; (80292c0 <__errno+0x8>)
 80292ba:	6818      	ldr	r0, [r3, #0]
 80292bc:	4770      	bx	lr
 80292be:	bf00      	nop
 80292c0:	200000c4 	.word	0x200000c4

080292c4 <fiprintf>:
 80292c4:	b40e      	push	{r1, r2, r3}
 80292c6:	b503      	push	{r0, r1, lr}
 80292c8:	ab03      	add	r3, sp, #12
 80292ca:	4601      	mov	r1, r0
 80292cc:	4805      	ldr	r0, [pc, #20]	; (80292e4 <fiprintf+0x20>)
 80292ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80292d2:	6800      	ldr	r0, [r0, #0]
 80292d4:	9301      	str	r3, [sp, #4]
 80292d6:	f000 f94d 	bl	8029574 <_vfiprintf_r>
 80292da:	b002      	add	sp, #8
 80292dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80292e0:	b003      	add	sp, #12
 80292e2:	4770      	bx	lr
 80292e4:	200000c4 	.word	0x200000c4

080292e8 <__libc_init_array>:
 80292e8:	b570      	push	{r4, r5, r6, lr}
 80292ea:	4d0d      	ldr	r5, [pc, #52]	; (8029320 <__libc_init_array+0x38>)
 80292ec:	2600      	movs	r6, #0
 80292ee:	4c0d      	ldr	r4, [pc, #52]	; (8029324 <__libc_init_array+0x3c>)
 80292f0:	1b64      	subs	r4, r4, r5
 80292f2:	10a4      	asrs	r4, r4, #2
 80292f4:	42a6      	cmp	r6, r4
 80292f6:	d109      	bne.n	802930c <__libc_init_array+0x24>
 80292f8:	4d0b      	ldr	r5, [pc, #44]	; (8029328 <__libc_init_array+0x40>)
 80292fa:	2600      	movs	r6, #0
 80292fc:	4c0b      	ldr	r4, [pc, #44]	; (802932c <__libc_init_array+0x44>)
 80292fe:	f001 f927 	bl	802a550 <_init>
 8029302:	1b64      	subs	r4, r4, r5
 8029304:	10a4      	asrs	r4, r4, #2
 8029306:	42a6      	cmp	r6, r4
 8029308:	d105      	bne.n	8029316 <__libc_init_array+0x2e>
 802930a:	bd70      	pop	{r4, r5, r6, pc}
 802930c:	f855 3b04 	ldr.w	r3, [r5], #4
 8029310:	3601      	adds	r6, #1
 8029312:	4798      	blx	r3
 8029314:	e7ee      	b.n	80292f4 <__libc_init_array+0xc>
 8029316:	f855 3b04 	ldr.w	r3, [r5], #4
 802931a:	3601      	adds	r6, #1
 802931c:	4798      	blx	r3
 802931e:	e7f2      	b.n	8029306 <__libc_init_array+0x1e>
 8029320:	0802d59c 	.word	0x0802d59c
 8029324:	0802d59c 	.word	0x0802d59c
 8029328:	0802d59c 	.word	0x0802d59c
 802932c:	0802d5b8 	.word	0x0802d5b8

08029330 <malloc>:
 8029330:	4b02      	ldr	r3, [pc, #8]	; (802933c <malloc+0xc>)
 8029332:	4601      	mov	r1, r0
 8029334:	6818      	ldr	r0, [r3, #0]
 8029336:	f000 b87f 	b.w	8029438 <_malloc_r>
 802933a:	bf00      	nop
 802933c:	200000c4 	.word	0x200000c4

08029340 <free>:
 8029340:	4b02      	ldr	r3, [pc, #8]	; (802934c <free+0xc>)
 8029342:	4601      	mov	r1, r0
 8029344:	6818      	ldr	r0, [r3, #0]
 8029346:	f000 b80b 	b.w	8029360 <_free_r>
 802934a:	bf00      	nop
 802934c:	200000c4 	.word	0x200000c4

08029350 <memset>:
 8029350:	4402      	add	r2, r0
 8029352:	4603      	mov	r3, r0
 8029354:	4293      	cmp	r3, r2
 8029356:	d100      	bne.n	802935a <memset+0xa>
 8029358:	4770      	bx	lr
 802935a:	f803 1b01 	strb.w	r1, [r3], #1
 802935e:	e7f9      	b.n	8029354 <memset+0x4>

08029360 <_free_r>:
 8029360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029362:	2900      	cmp	r1, #0
 8029364:	d043      	beq.n	80293ee <_free_r+0x8e>
 8029366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802936a:	1f0c      	subs	r4, r1, #4
 802936c:	9001      	str	r0, [sp, #4]
 802936e:	2b00      	cmp	r3, #0
 8029370:	bfb8      	it	lt
 8029372:	18e4      	addlt	r4, r4, r3
 8029374:	f001 f834 	bl	802a3e0 <__malloc_lock>
 8029378:	4a1e      	ldr	r2, [pc, #120]	; (80293f4 <_free_r+0x94>)
 802937a:	9801      	ldr	r0, [sp, #4]
 802937c:	6813      	ldr	r3, [r2, #0]
 802937e:	b933      	cbnz	r3, 802938e <_free_r+0x2e>
 8029380:	6063      	str	r3, [r4, #4]
 8029382:	6014      	str	r4, [r2, #0]
 8029384:	b003      	add	sp, #12
 8029386:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802938a:	f001 b82f 	b.w	802a3ec <__malloc_unlock>
 802938e:	42a3      	cmp	r3, r4
 8029390:	d908      	bls.n	80293a4 <_free_r+0x44>
 8029392:	6825      	ldr	r5, [r4, #0]
 8029394:	1961      	adds	r1, r4, r5
 8029396:	428b      	cmp	r3, r1
 8029398:	bf01      	itttt	eq
 802939a:	6819      	ldreq	r1, [r3, #0]
 802939c:	685b      	ldreq	r3, [r3, #4]
 802939e:	1949      	addeq	r1, r1, r5
 80293a0:	6021      	streq	r1, [r4, #0]
 80293a2:	e7ed      	b.n	8029380 <_free_r+0x20>
 80293a4:	461a      	mov	r2, r3
 80293a6:	685b      	ldr	r3, [r3, #4]
 80293a8:	b10b      	cbz	r3, 80293ae <_free_r+0x4e>
 80293aa:	42a3      	cmp	r3, r4
 80293ac:	d9fa      	bls.n	80293a4 <_free_r+0x44>
 80293ae:	6811      	ldr	r1, [r2, #0]
 80293b0:	1855      	adds	r5, r2, r1
 80293b2:	42a5      	cmp	r5, r4
 80293b4:	d10b      	bne.n	80293ce <_free_r+0x6e>
 80293b6:	6824      	ldr	r4, [r4, #0]
 80293b8:	4421      	add	r1, r4
 80293ba:	1854      	adds	r4, r2, r1
 80293bc:	6011      	str	r1, [r2, #0]
 80293be:	42a3      	cmp	r3, r4
 80293c0:	d1e0      	bne.n	8029384 <_free_r+0x24>
 80293c2:	681c      	ldr	r4, [r3, #0]
 80293c4:	685b      	ldr	r3, [r3, #4]
 80293c6:	4421      	add	r1, r4
 80293c8:	6053      	str	r3, [r2, #4]
 80293ca:	6011      	str	r1, [r2, #0]
 80293cc:	e7da      	b.n	8029384 <_free_r+0x24>
 80293ce:	d902      	bls.n	80293d6 <_free_r+0x76>
 80293d0:	230c      	movs	r3, #12
 80293d2:	6003      	str	r3, [r0, #0]
 80293d4:	e7d6      	b.n	8029384 <_free_r+0x24>
 80293d6:	6825      	ldr	r5, [r4, #0]
 80293d8:	1961      	adds	r1, r4, r5
 80293da:	428b      	cmp	r3, r1
 80293dc:	bf02      	ittt	eq
 80293de:	6819      	ldreq	r1, [r3, #0]
 80293e0:	685b      	ldreq	r3, [r3, #4]
 80293e2:	1949      	addeq	r1, r1, r5
 80293e4:	6063      	str	r3, [r4, #4]
 80293e6:	bf08      	it	eq
 80293e8:	6021      	streq	r1, [r4, #0]
 80293ea:	6054      	str	r4, [r2, #4]
 80293ec:	e7ca      	b.n	8029384 <_free_r+0x24>
 80293ee:	b003      	add	sp, #12
 80293f0:	bd30      	pop	{r4, r5, pc}
 80293f2:	bf00      	nop
 80293f4:	20197cd4 	.word	0x20197cd4

080293f8 <sbrk_aligned>:
 80293f8:	b570      	push	{r4, r5, r6, lr}
 80293fa:	4e0e      	ldr	r6, [pc, #56]	; (8029434 <sbrk_aligned+0x3c>)
 80293fc:	460c      	mov	r4, r1
 80293fe:	4605      	mov	r5, r0
 8029400:	6831      	ldr	r1, [r6, #0]
 8029402:	b911      	cbnz	r1, 802940a <sbrk_aligned+0x12>
 8029404:	f000 fc48 	bl	8029c98 <_sbrk_r>
 8029408:	6030      	str	r0, [r6, #0]
 802940a:	4621      	mov	r1, r4
 802940c:	4628      	mov	r0, r5
 802940e:	f000 fc43 	bl	8029c98 <_sbrk_r>
 8029412:	1c43      	adds	r3, r0, #1
 8029414:	d00a      	beq.n	802942c <sbrk_aligned+0x34>
 8029416:	1cc4      	adds	r4, r0, #3
 8029418:	f024 0403 	bic.w	r4, r4, #3
 802941c:	42a0      	cmp	r0, r4
 802941e:	d007      	beq.n	8029430 <sbrk_aligned+0x38>
 8029420:	1a21      	subs	r1, r4, r0
 8029422:	4628      	mov	r0, r5
 8029424:	f000 fc38 	bl	8029c98 <_sbrk_r>
 8029428:	3001      	adds	r0, #1
 802942a:	d101      	bne.n	8029430 <sbrk_aligned+0x38>
 802942c:	f04f 34ff 	mov.w	r4, #4294967295
 8029430:	4620      	mov	r0, r4
 8029432:	bd70      	pop	{r4, r5, r6, pc}
 8029434:	20197cd8 	.word	0x20197cd8

08029438 <_malloc_r>:
 8029438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802943c:	1ccd      	adds	r5, r1, #3
 802943e:	4607      	mov	r7, r0
 8029440:	f025 0503 	bic.w	r5, r5, #3
 8029444:	3508      	adds	r5, #8
 8029446:	2d0c      	cmp	r5, #12
 8029448:	bf38      	it	cc
 802944a:	250c      	movcc	r5, #12
 802944c:	2d00      	cmp	r5, #0
 802944e:	db01      	blt.n	8029454 <_malloc_r+0x1c>
 8029450:	42a9      	cmp	r1, r5
 8029452:	d905      	bls.n	8029460 <_malloc_r+0x28>
 8029454:	230c      	movs	r3, #12
 8029456:	2600      	movs	r6, #0
 8029458:	603b      	str	r3, [r7, #0]
 802945a:	4630      	mov	r0, r6
 802945c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029460:	4e2e      	ldr	r6, [pc, #184]	; (802951c <_malloc_r+0xe4>)
 8029462:	f000 ffbd 	bl	802a3e0 <__malloc_lock>
 8029466:	6833      	ldr	r3, [r6, #0]
 8029468:	461c      	mov	r4, r3
 802946a:	bb34      	cbnz	r4, 80294ba <_malloc_r+0x82>
 802946c:	4629      	mov	r1, r5
 802946e:	4638      	mov	r0, r7
 8029470:	f7ff ffc2 	bl	80293f8 <sbrk_aligned>
 8029474:	1c43      	adds	r3, r0, #1
 8029476:	4604      	mov	r4, r0
 8029478:	d14d      	bne.n	8029516 <_malloc_r+0xde>
 802947a:	6834      	ldr	r4, [r6, #0]
 802947c:	4626      	mov	r6, r4
 802947e:	2e00      	cmp	r6, #0
 8029480:	d140      	bne.n	8029504 <_malloc_r+0xcc>
 8029482:	6823      	ldr	r3, [r4, #0]
 8029484:	4631      	mov	r1, r6
 8029486:	4638      	mov	r0, r7
 8029488:	eb04 0803 	add.w	r8, r4, r3
 802948c:	f000 fc04 	bl	8029c98 <_sbrk_r>
 8029490:	4580      	cmp	r8, r0
 8029492:	d13a      	bne.n	802950a <_malloc_r+0xd2>
 8029494:	6821      	ldr	r1, [r4, #0]
 8029496:	3503      	adds	r5, #3
 8029498:	4638      	mov	r0, r7
 802949a:	1a6d      	subs	r5, r5, r1
 802949c:	f025 0503 	bic.w	r5, r5, #3
 80294a0:	3508      	adds	r5, #8
 80294a2:	2d0c      	cmp	r5, #12
 80294a4:	bf38      	it	cc
 80294a6:	250c      	movcc	r5, #12
 80294a8:	4629      	mov	r1, r5
 80294aa:	f7ff ffa5 	bl	80293f8 <sbrk_aligned>
 80294ae:	3001      	adds	r0, #1
 80294b0:	d02b      	beq.n	802950a <_malloc_r+0xd2>
 80294b2:	6823      	ldr	r3, [r4, #0]
 80294b4:	442b      	add	r3, r5
 80294b6:	6023      	str	r3, [r4, #0]
 80294b8:	e00e      	b.n	80294d8 <_malloc_r+0xa0>
 80294ba:	6822      	ldr	r2, [r4, #0]
 80294bc:	1b52      	subs	r2, r2, r5
 80294be:	d41e      	bmi.n	80294fe <_malloc_r+0xc6>
 80294c0:	2a0b      	cmp	r2, #11
 80294c2:	d916      	bls.n	80294f2 <_malloc_r+0xba>
 80294c4:	1961      	adds	r1, r4, r5
 80294c6:	42a3      	cmp	r3, r4
 80294c8:	6025      	str	r5, [r4, #0]
 80294ca:	bf18      	it	ne
 80294cc:	6059      	strne	r1, [r3, #4]
 80294ce:	6863      	ldr	r3, [r4, #4]
 80294d0:	bf08      	it	eq
 80294d2:	6031      	streq	r1, [r6, #0]
 80294d4:	5162      	str	r2, [r4, r5]
 80294d6:	604b      	str	r3, [r1, #4]
 80294d8:	f104 060b 	add.w	r6, r4, #11
 80294dc:	4638      	mov	r0, r7
 80294de:	f000 ff85 	bl	802a3ec <__malloc_unlock>
 80294e2:	1d23      	adds	r3, r4, #4
 80294e4:	f026 0607 	bic.w	r6, r6, #7
 80294e8:	1af2      	subs	r2, r6, r3
 80294ea:	d0b6      	beq.n	802945a <_malloc_r+0x22>
 80294ec:	1b9b      	subs	r3, r3, r6
 80294ee:	50a3      	str	r3, [r4, r2]
 80294f0:	e7b3      	b.n	802945a <_malloc_r+0x22>
 80294f2:	6862      	ldr	r2, [r4, #4]
 80294f4:	42a3      	cmp	r3, r4
 80294f6:	bf0c      	ite	eq
 80294f8:	6032      	streq	r2, [r6, #0]
 80294fa:	605a      	strne	r2, [r3, #4]
 80294fc:	e7ec      	b.n	80294d8 <_malloc_r+0xa0>
 80294fe:	4623      	mov	r3, r4
 8029500:	6864      	ldr	r4, [r4, #4]
 8029502:	e7b2      	b.n	802946a <_malloc_r+0x32>
 8029504:	4634      	mov	r4, r6
 8029506:	6876      	ldr	r6, [r6, #4]
 8029508:	e7b9      	b.n	802947e <_malloc_r+0x46>
 802950a:	230c      	movs	r3, #12
 802950c:	4638      	mov	r0, r7
 802950e:	603b      	str	r3, [r7, #0]
 8029510:	f000 ff6c 	bl	802a3ec <__malloc_unlock>
 8029514:	e7a1      	b.n	802945a <_malloc_r+0x22>
 8029516:	6025      	str	r5, [r4, #0]
 8029518:	e7de      	b.n	80294d8 <_malloc_r+0xa0>
 802951a:	bf00      	nop
 802951c:	20197cd4 	.word	0x20197cd4

08029520 <__sfputc_r>:
 8029520:	6893      	ldr	r3, [r2, #8]
 8029522:	3b01      	subs	r3, #1
 8029524:	2b00      	cmp	r3, #0
 8029526:	6093      	str	r3, [r2, #8]
 8029528:	b410      	push	{r4}
 802952a:	da08      	bge.n	802953e <__sfputc_r+0x1e>
 802952c:	6994      	ldr	r4, [r2, #24]
 802952e:	42a3      	cmp	r3, r4
 8029530:	db01      	blt.n	8029536 <__sfputc_r+0x16>
 8029532:	290a      	cmp	r1, #10
 8029534:	d103      	bne.n	802953e <__sfputc_r+0x1e>
 8029536:	f85d 4b04 	ldr.w	r4, [sp], #4
 802953a:	f000 bc01 	b.w	8029d40 <__swbuf_r>
 802953e:	6813      	ldr	r3, [r2, #0]
 8029540:	1c58      	adds	r0, r3, #1
 8029542:	6010      	str	r0, [r2, #0]
 8029544:	4608      	mov	r0, r1
 8029546:	7019      	strb	r1, [r3, #0]
 8029548:	f85d 4b04 	ldr.w	r4, [sp], #4
 802954c:	4770      	bx	lr

0802954e <__sfputs_r>:
 802954e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029550:	4606      	mov	r6, r0
 8029552:	460f      	mov	r7, r1
 8029554:	4614      	mov	r4, r2
 8029556:	18d5      	adds	r5, r2, r3
 8029558:	42ac      	cmp	r4, r5
 802955a:	d101      	bne.n	8029560 <__sfputs_r+0x12>
 802955c:	2000      	movs	r0, #0
 802955e:	e007      	b.n	8029570 <__sfputs_r+0x22>
 8029560:	463a      	mov	r2, r7
 8029562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029566:	4630      	mov	r0, r6
 8029568:	f7ff ffda 	bl	8029520 <__sfputc_r>
 802956c:	1c43      	adds	r3, r0, #1
 802956e:	d1f3      	bne.n	8029558 <__sfputs_r+0xa>
 8029570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08029574 <_vfiprintf_r>:
 8029574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029578:	460d      	mov	r5, r1
 802957a:	b09d      	sub	sp, #116	; 0x74
 802957c:	4614      	mov	r4, r2
 802957e:	4698      	mov	r8, r3
 8029580:	4606      	mov	r6, r0
 8029582:	b118      	cbz	r0, 802958c <_vfiprintf_r+0x18>
 8029584:	6983      	ldr	r3, [r0, #24]
 8029586:	b90b      	cbnz	r3, 802958c <_vfiprintf_r+0x18>
 8029588:	f000 fe16 	bl	802a1b8 <__sinit>
 802958c:	4b89      	ldr	r3, [pc, #548]	; (80297b4 <_vfiprintf_r+0x240>)
 802958e:	429d      	cmp	r5, r3
 8029590:	d11b      	bne.n	80295ca <_vfiprintf_r+0x56>
 8029592:	6875      	ldr	r5, [r6, #4]
 8029594:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029596:	07d9      	lsls	r1, r3, #31
 8029598:	d405      	bmi.n	80295a6 <_vfiprintf_r+0x32>
 802959a:	89ab      	ldrh	r3, [r5, #12]
 802959c:	059a      	lsls	r2, r3, #22
 802959e:	d402      	bmi.n	80295a6 <_vfiprintf_r+0x32>
 80295a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80295a2:	f000 fea7 	bl	802a2f4 <__retarget_lock_acquire_recursive>
 80295a6:	89ab      	ldrh	r3, [r5, #12]
 80295a8:	071b      	lsls	r3, r3, #28
 80295aa:	d501      	bpl.n	80295b0 <_vfiprintf_r+0x3c>
 80295ac:	692b      	ldr	r3, [r5, #16]
 80295ae:	b9eb      	cbnz	r3, 80295ec <_vfiprintf_r+0x78>
 80295b0:	4629      	mov	r1, r5
 80295b2:	4630      	mov	r0, r6
 80295b4:	f000 fc16 	bl	8029de4 <__swsetup_r>
 80295b8:	b1c0      	cbz	r0, 80295ec <_vfiprintf_r+0x78>
 80295ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80295bc:	07dc      	lsls	r4, r3, #31
 80295be:	d50e      	bpl.n	80295de <_vfiprintf_r+0x6a>
 80295c0:	f04f 30ff 	mov.w	r0, #4294967295
 80295c4:	b01d      	add	sp, #116	; 0x74
 80295c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80295ca:	4b7b      	ldr	r3, [pc, #492]	; (80297b8 <_vfiprintf_r+0x244>)
 80295cc:	429d      	cmp	r5, r3
 80295ce:	d101      	bne.n	80295d4 <_vfiprintf_r+0x60>
 80295d0:	68b5      	ldr	r5, [r6, #8]
 80295d2:	e7df      	b.n	8029594 <_vfiprintf_r+0x20>
 80295d4:	4b79      	ldr	r3, [pc, #484]	; (80297bc <_vfiprintf_r+0x248>)
 80295d6:	429d      	cmp	r5, r3
 80295d8:	bf08      	it	eq
 80295da:	68f5      	ldreq	r5, [r6, #12]
 80295dc:	e7da      	b.n	8029594 <_vfiprintf_r+0x20>
 80295de:	89ab      	ldrh	r3, [r5, #12]
 80295e0:	0598      	lsls	r0, r3, #22
 80295e2:	d4ed      	bmi.n	80295c0 <_vfiprintf_r+0x4c>
 80295e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80295e6:	f000 fe87 	bl	802a2f8 <__retarget_lock_release_recursive>
 80295ea:	e7e9      	b.n	80295c0 <_vfiprintf_r+0x4c>
 80295ec:	2300      	movs	r3, #0
 80295ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80295f2:	f04f 0901 	mov.w	r9, #1
 80295f6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80297c0 <_vfiprintf_r+0x24c>
 80295fa:	9309      	str	r3, [sp, #36]	; 0x24
 80295fc:	2320      	movs	r3, #32
 80295fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029602:	2330      	movs	r3, #48	; 0x30
 8029604:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029608:	4623      	mov	r3, r4
 802960a:	469a      	mov	sl, r3
 802960c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029610:	b10a      	cbz	r2, 8029616 <_vfiprintf_r+0xa2>
 8029612:	2a25      	cmp	r2, #37	; 0x25
 8029614:	d1f9      	bne.n	802960a <_vfiprintf_r+0x96>
 8029616:	ebba 0b04 	subs.w	fp, sl, r4
 802961a:	d00b      	beq.n	8029634 <_vfiprintf_r+0xc0>
 802961c:	465b      	mov	r3, fp
 802961e:	4622      	mov	r2, r4
 8029620:	4629      	mov	r1, r5
 8029622:	4630      	mov	r0, r6
 8029624:	f7ff ff93 	bl	802954e <__sfputs_r>
 8029628:	3001      	adds	r0, #1
 802962a:	f000 80aa 	beq.w	8029782 <_vfiprintf_r+0x20e>
 802962e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029630:	445a      	add	r2, fp
 8029632:	9209      	str	r2, [sp, #36]	; 0x24
 8029634:	f89a 3000 	ldrb.w	r3, [sl]
 8029638:	2b00      	cmp	r3, #0
 802963a:	f000 80a2 	beq.w	8029782 <_vfiprintf_r+0x20e>
 802963e:	2300      	movs	r3, #0
 8029640:	f04f 32ff 	mov.w	r2, #4294967295
 8029644:	f10a 0a01 	add.w	sl, sl, #1
 8029648:	9304      	str	r3, [sp, #16]
 802964a:	9307      	str	r3, [sp, #28]
 802964c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029650:	931a      	str	r3, [sp, #104]	; 0x68
 8029652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029656:	4654      	mov	r4, sl
 8029658:	2205      	movs	r2, #5
 802965a:	4859      	ldr	r0, [pc, #356]	; (80297c0 <_vfiprintf_r+0x24c>)
 802965c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029660:	f000 feb0 	bl	802a3c4 <memchr>
 8029664:	9a04      	ldr	r2, [sp, #16]
 8029666:	b9d8      	cbnz	r0, 80296a0 <_vfiprintf_r+0x12c>
 8029668:	06d1      	lsls	r1, r2, #27
 802966a:	bf44      	itt	mi
 802966c:	2320      	movmi	r3, #32
 802966e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029672:	0713      	lsls	r3, r2, #28
 8029674:	bf44      	itt	mi
 8029676:	232b      	movmi	r3, #43	; 0x2b
 8029678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802967c:	f89a 3000 	ldrb.w	r3, [sl]
 8029680:	2b2a      	cmp	r3, #42	; 0x2a
 8029682:	d015      	beq.n	80296b0 <_vfiprintf_r+0x13c>
 8029684:	9a07      	ldr	r2, [sp, #28]
 8029686:	4654      	mov	r4, sl
 8029688:	2000      	movs	r0, #0
 802968a:	f04f 0c0a 	mov.w	ip, #10
 802968e:	4621      	mov	r1, r4
 8029690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029694:	3b30      	subs	r3, #48	; 0x30
 8029696:	2b09      	cmp	r3, #9
 8029698:	d94e      	bls.n	8029738 <_vfiprintf_r+0x1c4>
 802969a:	b1b0      	cbz	r0, 80296ca <_vfiprintf_r+0x156>
 802969c:	9207      	str	r2, [sp, #28]
 802969e:	e014      	b.n	80296ca <_vfiprintf_r+0x156>
 80296a0:	eba0 0308 	sub.w	r3, r0, r8
 80296a4:	46a2      	mov	sl, r4
 80296a6:	fa09 f303 	lsl.w	r3, r9, r3
 80296aa:	4313      	orrs	r3, r2
 80296ac:	9304      	str	r3, [sp, #16]
 80296ae:	e7d2      	b.n	8029656 <_vfiprintf_r+0xe2>
 80296b0:	9b03      	ldr	r3, [sp, #12]
 80296b2:	1d19      	adds	r1, r3, #4
 80296b4:	681b      	ldr	r3, [r3, #0]
 80296b6:	2b00      	cmp	r3, #0
 80296b8:	9103      	str	r1, [sp, #12]
 80296ba:	bfbb      	ittet	lt
 80296bc:	425b      	neglt	r3, r3
 80296be:	f042 0202 	orrlt.w	r2, r2, #2
 80296c2:	9307      	strge	r3, [sp, #28]
 80296c4:	9307      	strlt	r3, [sp, #28]
 80296c6:	bfb8      	it	lt
 80296c8:	9204      	strlt	r2, [sp, #16]
 80296ca:	7823      	ldrb	r3, [r4, #0]
 80296cc:	2b2e      	cmp	r3, #46	; 0x2e
 80296ce:	d10c      	bne.n	80296ea <_vfiprintf_r+0x176>
 80296d0:	7863      	ldrb	r3, [r4, #1]
 80296d2:	2b2a      	cmp	r3, #42	; 0x2a
 80296d4:	d135      	bne.n	8029742 <_vfiprintf_r+0x1ce>
 80296d6:	9b03      	ldr	r3, [sp, #12]
 80296d8:	3402      	adds	r4, #2
 80296da:	1d1a      	adds	r2, r3, #4
 80296dc:	681b      	ldr	r3, [r3, #0]
 80296de:	2b00      	cmp	r3, #0
 80296e0:	9203      	str	r2, [sp, #12]
 80296e2:	bfb8      	it	lt
 80296e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80296e8:	9305      	str	r3, [sp, #20]
 80296ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80297d0 <_vfiprintf_r+0x25c>
 80296ee:	2203      	movs	r2, #3
 80296f0:	7821      	ldrb	r1, [r4, #0]
 80296f2:	4650      	mov	r0, sl
 80296f4:	f000 fe66 	bl	802a3c4 <memchr>
 80296f8:	b140      	cbz	r0, 802970c <_vfiprintf_r+0x198>
 80296fa:	2340      	movs	r3, #64	; 0x40
 80296fc:	eba0 000a 	sub.w	r0, r0, sl
 8029700:	3401      	adds	r4, #1
 8029702:	fa03 f000 	lsl.w	r0, r3, r0
 8029706:	9b04      	ldr	r3, [sp, #16]
 8029708:	4303      	orrs	r3, r0
 802970a:	9304      	str	r3, [sp, #16]
 802970c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029710:	2206      	movs	r2, #6
 8029712:	482c      	ldr	r0, [pc, #176]	; (80297c4 <_vfiprintf_r+0x250>)
 8029714:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029718:	f000 fe54 	bl	802a3c4 <memchr>
 802971c:	2800      	cmp	r0, #0
 802971e:	d03f      	beq.n	80297a0 <_vfiprintf_r+0x22c>
 8029720:	4b29      	ldr	r3, [pc, #164]	; (80297c8 <_vfiprintf_r+0x254>)
 8029722:	bb1b      	cbnz	r3, 802976c <_vfiprintf_r+0x1f8>
 8029724:	9b03      	ldr	r3, [sp, #12]
 8029726:	3307      	adds	r3, #7
 8029728:	f023 0307 	bic.w	r3, r3, #7
 802972c:	3308      	adds	r3, #8
 802972e:	9303      	str	r3, [sp, #12]
 8029730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029732:	443b      	add	r3, r7
 8029734:	9309      	str	r3, [sp, #36]	; 0x24
 8029736:	e767      	b.n	8029608 <_vfiprintf_r+0x94>
 8029738:	fb0c 3202 	mla	r2, ip, r2, r3
 802973c:	460c      	mov	r4, r1
 802973e:	2001      	movs	r0, #1
 8029740:	e7a5      	b.n	802968e <_vfiprintf_r+0x11a>
 8029742:	2300      	movs	r3, #0
 8029744:	3401      	adds	r4, #1
 8029746:	f04f 0c0a 	mov.w	ip, #10
 802974a:	4619      	mov	r1, r3
 802974c:	9305      	str	r3, [sp, #20]
 802974e:	4620      	mov	r0, r4
 8029750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029754:	3a30      	subs	r2, #48	; 0x30
 8029756:	2a09      	cmp	r2, #9
 8029758:	d903      	bls.n	8029762 <_vfiprintf_r+0x1ee>
 802975a:	2b00      	cmp	r3, #0
 802975c:	d0c5      	beq.n	80296ea <_vfiprintf_r+0x176>
 802975e:	9105      	str	r1, [sp, #20]
 8029760:	e7c3      	b.n	80296ea <_vfiprintf_r+0x176>
 8029762:	fb0c 2101 	mla	r1, ip, r1, r2
 8029766:	4604      	mov	r4, r0
 8029768:	2301      	movs	r3, #1
 802976a:	e7f0      	b.n	802974e <_vfiprintf_r+0x1da>
 802976c:	ab03      	add	r3, sp, #12
 802976e:	462a      	mov	r2, r5
 8029770:	a904      	add	r1, sp, #16
 8029772:	4630      	mov	r0, r6
 8029774:	9300      	str	r3, [sp, #0]
 8029776:	4b15      	ldr	r3, [pc, #84]	; (80297cc <_vfiprintf_r+0x258>)
 8029778:	e000      	b.n	802977c <_vfiprintf_r+0x208>
 802977a:	bf00      	nop
 802977c:	4607      	mov	r7, r0
 802977e:	1c78      	adds	r0, r7, #1
 8029780:	d1d6      	bne.n	8029730 <_vfiprintf_r+0x1bc>
 8029782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029784:	07d9      	lsls	r1, r3, #31
 8029786:	d405      	bmi.n	8029794 <_vfiprintf_r+0x220>
 8029788:	89ab      	ldrh	r3, [r5, #12]
 802978a:	059a      	lsls	r2, r3, #22
 802978c:	d402      	bmi.n	8029794 <_vfiprintf_r+0x220>
 802978e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029790:	f000 fdb2 	bl	802a2f8 <__retarget_lock_release_recursive>
 8029794:	89ab      	ldrh	r3, [r5, #12]
 8029796:	065b      	lsls	r3, r3, #25
 8029798:	f53f af12 	bmi.w	80295c0 <_vfiprintf_r+0x4c>
 802979c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802979e:	e711      	b.n	80295c4 <_vfiprintf_r+0x50>
 80297a0:	ab03      	add	r3, sp, #12
 80297a2:	462a      	mov	r2, r5
 80297a4:	a904      	add	r1, sp, #16
 80297a6:	4630      	mov	r0, r6
 80297a8:	9300      	str	r3, [sp, #0]
 80297aa:	4b08      	ldr	r3, [pc, #32]	; (80297cc <_vfiprintf_r+0x258>)
 80297ac:	f000 f882 	bl	80298b4 <_printf_i>
 80297b0:	e7e4      	b.n	802977c <_vfiprintf_r+0x208>
 80297b2:	bf00      	nop
 80297b4:	0802d53c 	.word	0x0802d53c
 80297b8:	0802d55c 	.word	0x0802d55c
 80297bc:	0802d51c 	.word	0x0802d51c
 80297c0:	0802d470 	.word	0x0802d470
 80297c4:	0802d47a 	.word	0x0802d47a
 80297c8:	00000000 	.word	0x00000000
 80297cc:	0802954f 	.word	0x0802954f
 80297d0:	0802d476 	.word	0x0802d476

080297d4 <_printf_common>:
 80297d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80297d8:	4616      	mov	r6, r2
 80297da:	4699      	mov	r9, r3
 80297dc:	688a      	ldr	r2, [r1, #8]
 80297de:	4607      	mov	r7, r0
 80297e0:	690b      	ldr	r3, [r1, #16]
 80297e2:	460c      	mov	r4, r1
 80297e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80297e8:	4293      	cmp	r3, r2
 80297ea:	bfb8      	it	lt
 80297ec:	4613      	movlt	r3, r2
 80297ee:	6033      	str	r3, [r6, #0]
 80297f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80297f4:	b10a      	cbz	r2, 80297fa <_printf_common+0x26>
 80297f6:	3301      	adds	r3, #1
 80297f8:	6033      	str	r3, [r6, #0]
 80297fa:	6823      	ldr	r3, [r4, #0]
 80297fc:	0699      	lsls	r1, r3, #26
 80297fe:	bf42      	ittt	mi
 8029800:	6833      	ldrmi	r3, [r6, #0]
 8029802:	3302      	addmi	r3, #2
 8029804:	6033      	strmi	r3, [r6, #0]
 8029806:	6825      	ldr	r5, [r4, #0]
 8029808:	f015 0506 	ands.w	r5, r5, #6
 802980c:	d106      	bne.n	802981c <_printf_common+0x48>
 802980e:	f104 0a19 	add.w	sl, r4, #25
 8029812:	68e3      	ldr	r3, [r4, #12]
 8029814:	6832      	ldr	r2, [r6, #0]
 8029816:	1a9b      	subs	r3, r3, r2
 8029818:	42ab      	cmp	r3, r5
 802981a:	dc29      	bgt.n	8029870 <_printf_common+0x9c>
 802981c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8029820:	1e13      	subs	r3, r2, #0
 8029822:	6822      	ldr	r2, [r4, #0]
 8029824:	bf18      	it	ne
 8029826:	2301      	movne	r3, #1
 8029828:	0692      	lsls	r2, r2, #26
 802982a:	d42e      	bmi.n	802988a <_printf_common+0xb6>
 802982c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8029830:	4649      	mov	r1, r9
 8029832:	4638      	mov	r0, r7
 8029834:	47c0      	blx	r8
 8029836:	3001      	adds	r0, #1
 8029838:	d021      	beq.n	802987e <_printf_common+0xaa>
 802983a:	6823      	ldr	r3, [r4, #0]
 802983c:	341a      	adds	r4, #26
 802983e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8029842:	f003 0306 	and.w	r3, r3, #6
 8029846:	6832      	ldr	r2, [r6, #0]
 8029848:	2600      	movs	r6, #0
 802984a:	2b04      	cmp	r3, #4
 802984c:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8029850:	bf08      	it	eq
 8029852:	1aad      	subeq	r5, r5, r2
 8029854:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8029858:	bf14      	ite	ne
 802985a:	2500      	movne	r5, #0
 802985c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029860:	4293      	cmp	r3, r2
 8029862:	bfc4      	itt	gt
 8029864:	1a9b      	subgt	r3, r3, r2
 8029866:	18ed      	addgt	r5, r5, r3
 8029868:	42b5      	cmp	r5, r6
 802986a:	d11a      	bne.n	80298a2 <_printf_common+0xce>
 802986c:	2000      	movs	r0, #0
 802986e:	e008      	b.n	8029882 <_printf_common+0xae>
 8029870:	2301      	movs	r3, #1
 8029872:	4652      	mov	r2, sl
 8029874:	4649      	mov	r1, r9
 8029876:	4638      	mov	r0, r7
 8029878:	47c0      	blx	r8
 802987a:	3001      	adds	r0, #1
 802987c:	d103      	bne.n	8029886 <_printf_common+0xb2>
 802987e:	f04f 30ff 	mov.w	r0, #4294967295
 8029882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029886:	3501      	adds	r5, #1
 8029888:	e7c3      	b.n	8029812 <_printf_common+0x3e>
 802988a:	18e1      	adds	r1, r4, r3
 802988c:	1c5a      	adds	r2, r3, #1
 802988e:	2030      	movs	r0, #48	; 0x30
 8029890:	3302      	adds	r3, #2
 8029892:	4422      	add	r2, r4
 8029894:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8029898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802989c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80298a0:	e7c4      	b.n	802982c <_printf_common+0x58>
 80298a2:	2301      	movs	r3, #1
 80298a4:	4622      	mov	r2, r4
 80298a6:	4649      	mov	r1, r9
 80298a8:	4638      	mov	r0, r7
 80298aa:	47c0      	blx	r8
 80298ac:	3001      	adds	r0, #1
 80298ae:	d0e6      	beq.n	802987e <_printf_common+0xaa>
 80298b0:	3601      	adds	r6, #1
 80298b2:	e7d9      	b.n	8029868 <_printf_common+0x94>

080298b4 <_printf_i>:
 80298b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80298b8:	7e0f      	ldrb	r7, [r1, #24]
 80298ba:	4691      	mov	r9, r2
 80298bc:	4680      	mov	r8, r0
 80298be:	460c      	mov	r4, r1
 80298c0:	2f78      	cmp	r7, #120	; 0x78
 80298c2:	469a      	mov	sl, r3
 80298c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80298c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80298ca:	d807      	bhi.n	80298dc <_printf_i+0x28>
 80298cc:	2f62      	cmp	r7, #98	; 0x62
 80298ce:	d80a      	bhi.n	80298e6 <_printf_i+0x32>
 80298d0:	2f00      	cmp	r7, #0
 80298d2:	f000 80d8 	beq.w	8029a86 <_printf_i+0x1d2>
 80298d6:	2f58      	cmp	r7, #88	; 0x58
 80298d8:	f000 80a3 	beq.w	8029a22 <_printf_i+0x16e>
 80298dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80298e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80298e4:	e03a      	b.n	802995c <_printf_i+0xa8>
 80298e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80298ea:	2b15      	cmp	r3, #21
 80298ec:	d8f6      	bhi.n	80298dc <_printf_i+0x28>
 80298ee:	a101      	add	r1, pc, #4	; (adr r1, 80298f4 <_printf_i+0x40>)
 80298f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80298f4:	0802994d 	.word	0x0802994d
 80298f8:	08029961 	.word	0x08029961
 80298fc:	080298dd 	.word	0x080298dd
 8029900:	080298dd 	.word	0x080298dd
 8029904:	080298dd 	.word	0x080298dd
 8029908:	080298dd 	.word	0x080298dd
 802990c:	08029961 	.word	0x08029961
 8029910:	080298dd 	.word	0x080298dd
 8029914:	080298dd 	.word	0x080298dd
 8029918:	080298dd 	.word	0x080298dd
 802991c:	080298dd 	.word	0x080298dd
 8029920:	08029a6d 	.word	0x08029a6d
 8029924:	08029991 	.word	0x08029991
 8029928:	08029a4f 	.word	0x08029a4f
 802992c:	080298dd 	.word	0x080298dd
 8029930:	080298dd 	.word	0x080298dd
 8029934:	08029a8f 	.word	0x08029a8f
 8029938:	080298dd 	.word	0x080298dd
 802993c:	08029991 	.word	0x08029991
 8029940:	080298dd 	.word	0x080298dd
 8029944:	080298dd 	.word	0x080298dd
 8029948:	08029a57 	.word	0x08029a57
 802994c:	682b      	ldr	r3, [r5, #0]
 802994e:	1d1a      	adds	r2, r3, #4
 8029950:	681b      	ldr	r3, [r3, #0]
 8029952:	602a      	str	r2, [r5, #0]
 8029954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802995c:	2301      	movs	r3, #1
 802995e:	e0a3      	b.n	8029aa8 <_printf_i+0x1f4>
 8029960:	6820      	ldr	r0, [r4, #0]
 8029962:	6829      	ldr	r1, [r5, #0]
 8029964:	0606      	lsls	r6, r0, #24
 8029966:	f101 0304 	add.w	r3, r1, #4
 802996a:	d50a      	bpl.n	8029982 <_printf_i+0xce>
 802996c:	680e      	ldr	r6, [r1, #0]
 802996e:	602b      	str	r3, [r5, #0]
 8029970:	2e00      	cmp	r6, #0
 8029972:	da03      	bge.n	802997c <_printf_i+0xc8>
 8029974:	232d      	movs	r3, #45	; 0x2d
 8029976:	4276      	negs	r6, r6
 8029978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802997c:	485e      	ldr	r0, [pc, #376]	; (8029af8 <_printf_i+0x244>)
 802997e:	230a      	movs	r3, #10
 8029980:	e019      	b.n	80299b6 <_printf_i+0x102>
 8029982:	680e      	ldr	r6, [r1, #0]
 8029984:	f010 0f40 	tst.w	r0, #64	; 0x40
 8029988:	602b      	str	r3, [r5, #0]
 802998a:	bf18      	it	ne
 802998c:	b236      	sxthne	r6, r6
 802998e:	e7ef      	b.n	8029970 <_printf_i+0xbc>
 8029990:	682b      	ldr	r3, [r5, #0]
 8029992:	6820      	ldr	r0, [r4, #0]
 8029994:	1d19      	adds	r1, r3, #4
 8029996:	6029      	str	r1, [r5, #0]
 8029998:	0601      	lsls	r1, r0, #24
 802999a:	d501      	bpl.n	80299a0 <_printf_i+0xec>
 802999c:	681e      	ldr	r6, [r3, #0]
 802999e:	e002      	b.n	80299a6 <_printf_i+0xf2>
 80299a0:	0646      	lsls	r6, r0, #25
 80299a2:	d5fb      	bpl.n	802999c <_printf_i+0xe8>
 80299a4:	881e      	ldrh	r6, [r3, #0]
 80299a6:	2f6f      	cmp	r7, #111	; 0x6f
 80299a8:	4853      	ldr	r0, [pc, #332]	; (8029af8 <_printf_i+0x244>)
 80299aa:	bf0c      	ite	eq
 80299ac:	2308      	moveq	r3, #8
 80299ae:	230a      	movne	r3, #10
 80299b0:	2100      	movs	r1, #0
 80299b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80299b6:	6865      	ldr	r5, [r4, #4]
 80299b8:	2d00      	cmp	r5, #0
 80299ba:	60a5      	str	r5, [r4, #8]
 80299bc:	bfa2      	ittt	ge
 80299be:	6821      	ldrge	r1, [r4, #0]
 80299c0:	f021 0104 	bicge.w	r1, r1, #4
 80299c4:	6021      	strge	r1, [r4, #0]
 80299c6:	b90e      	cbnz	r6, 80299cc <_printf_i+0x118>
 80299c8:	2d00      	cmp	r5, #0
 80299ca:	d04d      	beq.n	8029a68 <_printf_i+0x1b4>
 80299cc:	4615      	mov	r5, r2
 80299ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80299d2:	fb03 6711 	mls	r7, r3, r1, r6
 80299d6:	5dc7      	ldrb	r7, [r0, r7]
 80299d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80299dc:	4637      	mov	r7, r6
 80299de:	460e      	mov	r6, r1
 80299e0:	42bb      	cmp	r3, r7
 80299e2:	d9f4      	bls.n	80299ce <_printf_i+0x11a>
 80299e4:	2b08      	cmp	r3, #8
 80299e6:	d10b      	bne.n	8029a00 <_printf_i+0x14c>
 80299e8:	6823      	ldr	r3, [r4, #0]
 80299ea:	07de      	lsls	r6, r3, #31
 80299ec:	d508      	bpl.n	8029a00 <_printf_i+0x14c>
 80299ee:	6923      	ldr	r3, [r4, #16]
 80299f0:	6861      	ldr	r1, [r4, #4]
 80299f2:	4299      	cmp	r1, r3
 80299f4:	bfde      	ittt	le
 80299f6:	2330      	movle	r3, #48	; 0x30
 80299f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80299fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8029a00:	1b52      	subs	r2, r2, r5
 8029a02:	6122      	str	r2, [r4, #16]
 8029a04:	464b      	mov	r3, r9
 8029a06:	aa03      	add	r2, sp, #12
 8029a08:	4621      	mov	r1, r4
 8029a0a:	4640      	mov	r0, r8
 8029a0c:	f8cd a000 	str.w	sl, [sp]
 8029a10:	f7ff fee0 	bl	80297d4 <_printf_common>
 8029a14:	3001      	adds	r0, #1
 8029a16:	d14c      	bne.n	8029ab2 <_printf_i+0x1fe>
 8029a18:	f04f 30ff 	mov.w	r0, #4294967295
 8029a1c:	b004      	add	sp, #16
 8029a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029a22:	4835      	ldr	r0, [pc, #212]	; (8029af8 <_printf_i+0x244>)
 8029a24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8029a28:	6829      	ldr	r1, [r5, #0]
 8029a2a:	6823      	ldr	r3, [r4, #0]
 8029a2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8029a30:	6029      	str	r1, [r5, #0]
 8029a32:	061d      	lsls	r5, r3, #24
 8029a34:	d514      	bpl.n	8029a60 <_printf_i+0x1ac>
 8029a36:	07df      	lsls	r7, r3, #31
 8029a38:	bf44      	itt	mi
 8029a3a:	f043 0320 	orrmi.w	r3, r3, #32
 8029a3e:	6023      	strmi	r3, [r4, #0]
 8029a40:	b91e      	cbnz	r6, 8029a4a <_printf_i+0x196>
 8029a42:	6823      	ldr	r3, [r4, #0]
 8029a44:	f023 0320 	bic.w	r3, r3, #32
 8029a48:	6023      	str	r3, [r4, #0]
 8029a4a:	2310      	movs	r3, #16
 8029a4c:	e7b0      	b.n	80299b0 <_printf_i+0xfc>
 8029a4e:	6823      	ldr	r3, [r4, #0]
 8029a50:	f043 0320 	orr.w	r3, r3, #32
 8029a54:	6023      	str	r3, [r4, #0]
 8029a56:	2378      	movs	r3, #120	; 0x78
 8029a58:	4828      	ldr	r0, [pc, #160]	; (8029afc <_printf_i+0x248>)
 8029a5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8029a5e:	e7e3      	b.n	8029a28 <_printf_i+0x174>
 8029a60:	0659      	lsls	r1, r3, #25
 8029a62:	bf48      	it	mi
 8029a64:	b2b6      	uxthmi	r6, r6
 8029a66:	e7e6      	b.n	8029a36 <_printf_i+0x182>
 8029a68:	4615      	mov	r5, r2
 8029a6a:	e7bb      	b.n	80299e4 <_printf_i+0x130>
 8029a6c:	682b      	ldr	r3, [r5, #0]
 8029a6e:	6826      	ldr	r6, [r4, #0]
 8029a70:	1d18      	adds	r0, r3, #4
 8029a72:	6961      	ldr	r1, [r4, #20]
 8029a74:	6028      	str	r0, [r5, #0]
 8029a76:	0635      	lsls	r5, r6, #24
 8029a78:	681b      	ldr	r3, [r3, #0]
 8029a7a:	d501      	bpl.n	8029a80 <_printf_i+0x1cc>
 8029a7c:	6019      	str	r1, [r3, #0]
 8029a7e:	e002      	b.n	8029a86 <_printf_i+0x1d2>
 8029a80:	0670      	lsls	r0, r6, #25
 8029a82:	d5fb      	bpl.n	8029a7c <_printf_i+0x1c8>
 8029a84:	8019      	strh	r1, [r3, #0]
 8029a86:	2300      	movs	r3, #0
 8029a88:	4615      	mov	r5, r2
 8029a8a:	6123      	str	r3, [r4, #16]
 8029a8c:	e7ba      	b.n	8029a04 <_printf_i+0x150>
 8029a8e:	682b      	ldr	r3, [r5, #0]
 8029a90:	2100      	movs	r1, #0
 8029a92:	1d1a      	adds	r2, r3, #4
 8029a94:	602a      	str	r2, [r5, #0]
 8029a96:	681d      	ldr	r5, [r3, #0]
 8029a98:	6862      	ldr	r2, [r4, #4]
 8029a9a:	4628      	mov	r0, r5
 8029a9c:	f000 fc92 	bl	802a3c4 <memchr>
 8029aa0:	b108      	cbz	r0, 8029aa6 <_printf_i+0x1f2>
 8029aa2:	1b40      	subs	r0, r0, r5
 8029aa4:	6060      	str	r0, [r4, #4]
 8029aa6:	6863      	ldr	r3, [r4, #4]
 8029aa8:	6123      	str	r3, [r4, #16]
 8029aaa:	2300      	movs	r3, #0
 8029aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029ab0:	e7a8      	b.n	8029a04 <_printf_i+0x150>
 8029ab2:	6923      	ldr	r3, [r4, #16]
 8029ab4:	462a      	mov	r2, r5
 8029ab6:	4649      	mov	r1, r9
 8029ab8:	4640      	mov	r0, r8
 8029aba:	47d0      	blx	sl
 8029abc:	3001      	adds	r0, #1
 8029abe:	d0ab      	beq.n	8029a18 <_printf_i+0x164>
 8029ac0:	6823      	ldr	r3, [r4, #0]
 8029ac2:	079b      	lsls	r3, r3, #30
 8029ac4:	d413      	bmi.n	8029aee <_printf_i+0x23a>
 8029ac6:	68e0      	ldr	r0, [r4, #12]
 8029ac8:	9b03      	ldr	r3, [sp, #12]
 8029aca:	4298      	cmp	r0, r3
 8029acc:	bfb8      	it	lt
 8029ace:	4618      	movlt	r0, r3
 8029ad0:	e7a4      	b.n	8029a1c <_printf_i+0x168>
 8029ad2:	2301      	movs	r3, #1
 8029ad4:	4632      	mov	r2, r6
 8029ad6:	4649      	mov	r1, r9
 8029ad8:	4640      	mov	r0, r8
 8029ada:	47d0      	blx	sl
 8029adc:	3001      	adds	r0, #1
 8029ade:	d09b      	beq.n	8029a18 <_printf_i+0x164>
 8029ae0:	3501      	adds	r5, #1
 8029ae2:	68e3      	ldr	r3, [r4, #12]
 8029ae4:	9903      	ldr	r1, [sp, #12]
 8029ae6:	1a5b      	subs	r3, r3, r1
 8029ae8:	42ab      	cmp	r3, r5
 8029aea:	dcf2      	bgt.n	8029ad2 <_printf_i+0x21e>
 8029aec:	e7eb      	b.n	8029ac6 <_printf_i+0x212>
 8029aee:	2500      	movs	r5, #0
 8029af0:	f104 0619 	add.w	r6, r4, #25
 8029af4:	e7f5      	b.n	8029ae2 <_printf_i+0x22e>
 8029af6:	bf00      	nop
 8029af8:	0802d481 	.word	0x0802d481
 8029afc:	0802d492 	.word	0x0802d492

08029b00 <iprintf>:
 8029b00:	b40f      	push	{r0, r1, r2, r3}
 8029b02:	4b0a      	ldr	r3, [pc, #40]	; (8029b2c <iprintf+0x2c>)
 8029b04:	b513      	push	{r0, r1, r4, lr}
 8029b06:	681c      	ldr	r4, [r3, #0]
 8029b08:	b124      	cbz	r4, 8029b14 <iprintf+0x14>
 8029b0a:	69a3      	ldr	r3, [r4, #24]
 8029b0c:	b913      	cbnz	r3, 8029b14 <iprintf+0x14>
 8029b0e:	4620      	mov	r0, r4
 8029b10:	f000 fb52 	bl	802a1b8 <__sinit>
 8029b14:	ab05      	add	r3, sp, #20
 8029b16:	9a04      	ldr	r2, [sp, #16]
 8029b18:	68a1      	ldr	r1, [r4, #8]
 8029b1a:	4620      	mov	r0, r4
 8029b1c:	9301      	str	r3, [sp, #4]
 8029b1e:	f7ff fd29 	bl	8029574 <_vfiprintf_r>
 8029b22:	b002      	add	sp, #8
 8029b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029b28:	b004      	add	sp, #16
 8029b2a:	4770      	bx	lr
 8029b2c:	200000c4 	.word	0x200000c4

08029b30 <_puts_r>:
 8029b30:	b570      	push	{r4, r5, r6, lr}
 8029b32:	460e      	mov	r6, r1
 8029b34:	4605      	mov	r5, r0
 8029b36:	b118      	cbz	r0, 8029b40 <_puts_r+0x10>
 8029b38:	6983      	ldr	r3, [r0, #24]
 8029b3a:	b90b      	cbnz	r3, 8029b40 <_puts_r+0x10>
 8029b3c:	f000 fb3c 	bl	802a1b8 <__sinit>
 8029b40:	69ab      	ldr	r3, [r5, #24]
 8029b42:	68ac      	ldr	r4, [r5, #8]
 8029b44:	b913      	cbnz	r3, 8029b4c <_puts_r+0x1c>
 8029b46:	4628      	mov	r0, r5
 8029b48:	f000 fb36 	bl	802a1b8 <__sinit>
 8029b4c:	4b2c      	ldr	r3, [pc, #176]	; (8029c00 <_puts_r+0xd0>)
 8029b4e:	429c      	cmp	r4, r3
 8029b50:	d120      	bne.n	8029b94 <_puts_r+0x64>
 8029b52:	686c      	ldr	r4, [r5, #4]
 8029b54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8029b56:	07db      	lsls	r3, r3, #31
 8029b58:	d405      	bmi.n	8029b66 <_puts_r+0x36>
 8029b5a:	89a3      	ldrh	r3, [r4, #12]
 8029b5c:	0598      	lsls	r0, r3, #22
 8029b5e:	d402      	bmi.n	8029b66 <_puts_r+0x36>
 8029b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8029b62:	f000 fbc7 	bl	802a2f4 <__retarget_lock_acquire_recursive>
 8029b66:	89a3      	ldrh	r3, [r4, #12]
 8029b68:	0719      	lsls	r1, r3, #28
 8029b6a:	d51d      	bpl.n	8029ba8 <_puts_r+0x78>
 8029b6c:	6923      	ldr	r3, [r4, #16]
 8029b6e:	b1db      	cbz	r3, 8029ba8 <_puts_r+0x78>
 8029b70:	3e01      	subs	r6, #1
 8029b72:	68a3      	ldr	r3, [r4, #8]
 8029b74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8029b78:	3b01      	subs	r3, #1
 8029b7a:	60a3      	str	r3, [r4, #8]
 8029b7c:	bb39      	cbnz	r1, 8029bce <_puts_r+0x9e>
 8029b7e:	2b00      	cmp	r3, #0
 8029b80:	da38      	bge.n	8029bf4 <_puts_r+0xc4>
 8029b82:	4622      	mov	r2, r4
 8029b84:	210a      	movs	r1, #10
 8029b86:	4628      	mov	r0, r5
 8029b88:	f000 f8da 	bl	8029d40 <__swbuf_r>
 8029b8c:	3001      	adds	r0, #1
 8029b8e:	d011      	beq.n	8029bb4 <_puts_r+0x84>
 8029b90:	250a      	movs	r5, #10
 8029b92:	e011      	b.n	8029bb8 <_puts_r+0x88>
 8029b94:	4b1b      	ldr	r3, [pc, #108]	; (8029c04 <_puts_r+0xd4>)
 8029b96:	429c      	cmp	r4, r3
 8029b98:	d101      	bne.n	8029b9e <_puts_r+0x6e>
 8029b9a:	68ac      	ldr	r4, [r5, #8]
 8029b9c:	e7da      	b.n	8029b54 <_puts_r+0x24>
 8029b9e:	4b1a      	ldr	r3, [pc, #104]	; (8029c08 <_puts_r+0xd8>)
 8029ba0:	429c      	cmp	r4, r3
 8029ba2:	bf08      	it	eq
 8029ba4:	68ec      	ldreq	r4, [r5, #12]
 8029ba6:	e7d5      	b.n	8029b54 <_puts_r+0x24>
 8029ba8:	4621      	mov	r1, r4
 8029baa:	4628      	mov	r0, r5
 8029bac:	f000 f91a 	bl	8029de4 <__swsetup_r>
 8029bb0:	2800      	cmp	r0, #0
 8029bb2:	d0dd      	beq.n	8029b70 <_puts_r+0x40>
 8029bb4:	f04f 35ff 	mov.w	r5, #4294967295
 8029bb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8029bba:	07da      	lsls	r2, r3, #31
 8029bbc:	d405      	bmi.n	8029bca <_puts_r+0x9a>
 8029bbe:	89a3      	ldrh	r3, [r4, #12]
 8029bc0:	059b      	lsls	r3, r3, #22
 8029bc2:	d402      	bmi.n	8029bca <_puts_r+0x9a>
 8029bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8029bc6:	f000 fb97 	bl	802a2f8 <__retarget_lock_release_recursive>
 8029bca:	4628      	mov	r0, r5
 8029bcc:	bd70      	pop	{r4, r5, r6, pc}
 8029bce:	2b00      	cmp	r3, #0
 8029bd0:	da04      	bge.n	8029bdc <_puts_r+0xac>
 8029bd2:	69a2      	ldr	r2, [r4, #24]
 8029bd4:	429a      	cmp	r2, r3
 8029bd6:	dc06      	bgt.n	8029be6 <_puts_r+0xb6>
 8029bd8:	290a      	cmp	r1, #10
 8029bda:	d004      	beq.n	8029be6 <_puts_r+0xb6>
 8029bdc:	6823      	ldr	r3, [r4, #0]
 8029bde:	1c5a      	adds	r2, r3, #1
 8029be0:	6022      	str	r2, [r4, #0]
 8029be2:	7019      	strb	r1, [r3, #0]
 8029be4:	e7c5      	b.n	8029b72 <_puts_r+0x42>
 8029be6:	4622      	mov	r2, r4
 8029be8:	4628      	mov	r0, r5
 8029bea:	f000 f8a9 	bl	8029d40 <__swbuf_r>
 8029bee:	3001      	adds	r0, #1
 8029bf0:	d1bf      	bne.n	8029b72 <_puts_r+0x42>
 8029bf2:	e7df      	b.n	8029bb4 <_puts_r+0x84>
 8029bf4:	6823      	ldr	r3, [r4, #0]
 8029bf6:	250a      	movs	r5, #10
 8029bf8:	1c5a      	adds	r2, r3, #1
 8029bfa:	6022      	str	r2, [r4, #0]
 8029bfc:	701d      	strb	r5, [r3, #0]
 8029bfe:	e7db      	b.n	8029bb8 <_puts_r+0x88>
 8029c00:	0802d53c 	.word	0x0802d53c
 8029c04:	0802d55c 	.word	0x0802d55c
 8029c08:	0802d51c 	.word	0x0802d51c

08029c0c <puts>:
 8029c0c:	4b02      	ldr	r3, [pc, #8]	; (8029c18 <puts+0xc>)
 8029c0e:	4601      	mov	r1, r0
 8029c10:	6818      	ldr	r0, [r3, #0]
 8029c12:	f7ff bf8d 	b.w	8029b30 <_puts_r>
 8029c16:	bf00      	nop
 8029c18:	200000c4 	.word	0x200000c4

08029c1c <rand>:
 8029c1c:	4b16      	ldr	r3, [pc, #88]	; (8029c78 <rand+0x5c>)
 8029c1e:	b510      	push	{r4, lr}
 8029c20:	681c      	ldr	r4, [r3, #0]
 8029c22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8029c24:	b9b3      	cbnz	r3, 8029c54 <rand+0x38>
 8029c26:	2018      	movs	r0, #24
 8029c28:	f7ff fb82 	bl	8029330 <malloc>
 8029c2c:	63a0      	str	r0, [r4, #56]	; 0x38
 8029c2e:	b928      	cbnz	r0, 8029c3c <rand+0x20>
 8029c30:	4602      	mov	r2, r0
 8029c32:	4b12      	ldr	r3, [pc, #72]	; (8029c7c <rand+0x60>)
 8029c34:	214e      	movs	r1, #78	; 0x4e
 8029c36:	4812      	ldr	r0, [pc, #72]	; (8029c80 <rand+0x64>)
 8029c38:	f7ff fb0c 	bl	8029254 <__assert_func>
 8029c3c:	4a11      	ldr	r2, [pc, #68]	; (8029c84 <rand+0x68>)
 8029c3e:	4b12      	ldr	r3, [pc, #72]	; (8029c88 <rand+0x6c>)
 8029c40:	e9c0 2300 	strd	r2, r3, [r0]
 8029c44:	4b11      	ldr	r3, [pc, #68]	; (8029c8c <rand+0x70>)
 8029c46:	2201      	movs	r2, #1
 8029c48:	6083      	str	r3, [r0, #8]
 8029c4a:	230b      	movs	r3, #11
 8029c4c:	8183      	strh	r3, [r0, #12]
 8029c4e:	2300      	movs	r3, #0
 8029c50:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8029c54:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8029c56:	4a0e      	ldr	r2, [pc, #56]	; (8029c90 <rand+0x74>)
 8029c58:	6920      	ldr	r0, [r4, #16]
 8029c5a:	6963      	ldr	r3, [r4, #20]
 8029c5c:	490d      	ldr	r1, [pc, #52]	; (8029c94 <rand+0x78>)
 8029c5e:	4342      	muls	r2, r0
 8029c60:	fb01 2203 	mla	r2, r1, r3, r2
 8029c64:	fba0 0101 	umull	r0, r1, r0, r1
 8029c68:	1c43      	adds	r3, r0, #1
 8029c6a:	eb42 0001 	adc.w	r0, r2, r1
 8029c6e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8029c72:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8029c76:	bd10      	pop	{r4, pc}
 8029c78:	200000c4 	.word	0x200000c4
 8029c7c:	0802d4a8 	.word	0x0802d4a8
 8029c80:	0802d4bf 	.word	0x0802d4bf
 8029c84:	abcd330e 	.word	0xabcd330e
 8029c88:	e66d1234 	.word	0xe66d1234
 8029c8c:	0005deec 	.word	0x0005deec
 8029c90:	5851f42d 	.word	0x5851f42d
 8029c94:	4c957f2d 	.word	0x4c957f2d

08029c98 <_sbrk_r>:
 8029c98:	b538      	push	{r3, r4, r5, lr}
 8029c9a:	2300      	movs	r3, #0
 8029c9c:	4d05      	ldr	r5, [pc, #20]	; (8029cb4 <_sbrk_r+0x1c>)
 8029c9e:	4604      	mov	r4, r0
 8029ca0:	4608      	mov	r0, r1
 8029ca2:	602b      	str	r3, [r5, #0]
 8029ca4:	f7d8 fa8e 	bl	80021c4 <_sbrk>
 8029ca8:	1c43      	adds	r3, r0, #1
 8029caa:	d102      	bne.n	8029cb2 <_sbrk_r+0x1a>
 8029cac:	682b      	ldr	r3, [r5, #0]
 8029cae:	b103      	cbz	r3, 8029cb2 <_sbrk_r+0x1a>
 8029cb0:	6023      	str	r3, [r4, #0]
 8029cb2:	bd38      	pop	{r3, r4, r5, pc}
 8029cb4:	20197e78 	.word	0x20197e78

08029cb8 <_raise_r>:
 8029cb8:	291f      	cmp	r1, #31
 8029cba:	b538      	push	{r3, r4, r5, lr}
 8029cbc:	4604      	mov	r4, r0
 8029cbe:	460d      	mov	r5, r1
 8029cc0:	d904      	bls.n	8029ccc <_raise_r+0x14>
 8029cc2:	2316      	movs	r3, #22
 8029cc4:	6003      	str	r3, [r0, #0]
 8029cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8029cca:	bd38      	pop	{r3, r4, r5, pc}
 8029ccc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8029cce:	b112      	cbz	r2, 8029cd6 <_raise_r+0x1e>
 8029cd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029cd4:	b94b      	cbnz	r3, 8029cea <_raise_r+0x32>
 8029cd6:	4620      	mov	r0, r4
 8029cd8:	f000 f830 	bl	8029d3c <_getpid_r>
 8029cdc:	462a      	mov	r2, r5
 8029cde:	4601      	mov	r1, r0
 8029ce0:	4620      	mov	r0, r4
 8029ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029ce6:	f000 b817 	b.w	8029d18 <_kill_r>
 8029cea:	2b01      	cmp	r3, #1
 8029cec:	d00a      	beq.n	8029d04 <_raise_r+0x4c>
 8029cee:	1c59      	adds	r1, r3, #1
 8029cf0:	d103      	bne.n	8029cfa <_raise_r+0x42>
 8029cf2:	2316      	movs	r3, #22
 8029cf4:	6003      	str	r3, [r0, #0]
 8029cf6:	2001      	movs	r0, #1
 8029cf8:	e7e7      	b.n	8029cca <_raise_r+0x12>
 8029cfa:	2400      	movs	r4, #0
 8029cfc:	4628      	mov	r0, r5
 8029cfe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8029d02:	4798      	blx	r3
 8029d04:	2000      	movs	r0, #0
 8029d06:	e7e0      	b.n	8029cca <_raise_r+0x12>

08029d08 <raise>:
 8029d08:	4b02      	ldr	r3, [pc, #8]	; (8029d14 <raise+0xc>)
 8029d0a:	4601      	mov	r1, r0
 8029d0c:	6818      	ldr	r0, [r3, #0]
 8029d0e:	f7ff bfd3 	b.w	8029cb8 <_raise_r>
 8029d12:	bf00      	nop
 8029d14:	200000c4 	.word	0x200000c4

08029d18 <_kill_r>:
 8029d18:	b538      	push	{r3, r4, r5, lr}
 8029d1a:	2300      	movs	r3, #0
 8029d1c:	4d06      	ldr	r5, [pc, #24]	; (8029d38 <_kill_r+0x20>)
 8029d1e:	4604      	mov	r4, r0
 8029d20:	4608      	mov	r0, r1
 8029d22:	4611      	mov	r1, r2
 8029d24:	602b      	str	r3, [r5, #0]
 8029d26:	f7d8 f9c5 	bl	80020b4 <_kill>
 8029d2a:	1c43      	adds	r3, r0, #1
 8029d2c:	d102      	bne.n	8029d34 <_kill_r+0x1c>
 8029d2e:	682b      	ldr	r3, [r5, #0]
 8029d30:	b103      	cbz	r3, 8029d34 <_kill_r+0x1c>
 8029d32:	6023      	str	r3, [r4, #0]
 8029d34:	bd38      	pop	{r3, r4, r5, pc}
 8029d36:	bf00      	nop
 8029d38:	20197e78 	.word	0x20197e78

08029d3c <_getpid_r>:
 8029d3c:	f7d8 b9b2 	b.w	80020a4 <_getpid>

08029d40 <__swbuf_r>:
 8029d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029d42:	460e      	mov	r6, r1
 8029d44:	4614      	mov	r4, r2
 8029d46:	4605      	mov	r5, r0
 8029d48:	b118      	cbz	r0, 8029d52 <__swbuf_r+0x12>
 8029d4a:	6983      	ldr	r3, [r0, #24]
 8029d4c:	b90b      	cbnz	r3, 8029d52 <__swbuf_r+0x12>
 8029d4e:	f000 fa33 	bl	802a1b8 <__sinit>
 8029d52:	4b21      	ldr	r3, [pc, #132]	; (8029dd8 <__swbuf_r+0x98>)
 8029d54:	429c      	cmp	r4, r3
 8029d56:	d12b      	bne.n	8029db0 <__swbuf_r+0x70>
 8029d58:	686c      	ldr	r4, [r5, #4]
 8029d5a:	69a3      	ldr	r3, [r4, #24]
 8029d5c:	60a3      	str	r3, [r4, #8]
 8029d5e:	89a3      	ldrh	r3, [r4, #12]
 8029d60:	071a      	lsls	r2, r3, #28
 8029d62:	d52f      	bpl.n	8029dc4 <__swbuf_r+0x84>
 8029d64:	6923      	ldr	r3, [r4, #16]
 8029d66:	b36b      	cbz	r3, 8029dc4 <__swbuf_r+0x84>
 8029d68:	6923      	ldr	r3, [r4, #16]
 8029d6a:	b2f6      	uxtb	r6, r6
 8029d6c:	6820      	ldr	r0, [r4, #0]
 8029d6e:	4637      	mov	r7, r6
 8029d70:	1ac0      	subs	r0, r0, r3
 8029d72:	6963      	ldr	r3, [r4, #20]
 8029d74:	4283      	cmp	r3, r0
 8029d76:	dc04      	bgt.n	8029d82 <__swbuf_r+0x42>
 8029d78:	4621      	mov	r1, r4
 8029d7a:	4628      	mov	r0, r5
 8029d7c:	f000 f988 	bl	802a090 <_fflush_r>
 8029d80:	bb30      	cbnz	r0, 8029dd0 <__swbuf_r+0x90>
 8029d82:	68a3      	ldr	r3, [r4, #8]
 8029d84:	3001      	adds	r0, #1
 8029d86:	3b01      	subs	r3, #1
 8029d88:	60a3      	str	r3, [r4, #8]
 8029d8a:	6823      	ldr	r3, [r4, #0]
 8029d8c:	1c5a      	adds	r2, r3, #1
 8029d8e:	6022      	str	r2, [r4, #0]
 8029d90:	701e      	strb	r6, [r3, #0]
 8029d92:	6963      	ldr	r3, [r4, #20]
 8029d94:	4283      	cmp	r3, r0
 8029d96:	d004      	beq.n	8029da2 <__swbuf_r+0x62>
 8029d98:	89a3      	ldrh	r3, [r4, #12]
 8029d9a:	07db      	lsls	r3, r3, #31
 8029d9c:	d506      	bpl.n	8029dac <__swbuf_r+0x6c>
 8029d9e:	2e0a      	cmp	r6, #10
 8029da0:	d104      	bne.n	8029dac <__swbuf_r+0x6c>
 8029da2:	4621      	mov	r1, r4
 8029da4:	4628      	mov	r0, r5
 8029da6:	f000 f973 	bl	802a090 <_fflush_r>
 8029daa:	b988      	cbnz	r0, 8029dd0 <__swbuf_r+0x90>
 8029dac:	4638      	mov	r0, r7
 8029dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029db0:	4b0a      	ldr	r3, [pc, #40]	; (8029ddc <__swbuf_r+0x9c>)
 8029db2:	429c      	cmp	r4, r3
 8029db4:	d101      	bne.n	8029dba <__swbuf_r+0x7a>
 8029db6:	68ac      	ldr	r4, [r5, #8]
 8029db8:	e7cf      	b.n	8029d5a <__swbuf_r+0x1a>
 8029dba:	4b09      	ldr	r3, [pc, #36]	; (8029de0 <__swbuf_r+0xa0>)
 8029dbc:	429c      	cmp	r4, r3
 8029dbe:	bf08      	it	eq
 8029dc0:	68ec      	ldreq	r4, [r5, #12]
 8029dc2:	e7ca      	b.n	8029d5a <__swbuf_r+0x1a>
 8029dc4:	4621      	mov	r1, r4
 8029dc6:	4628      	mov	r0, r5
 8029dc8:	f000 f80c 	bl	8029de4 <__swsetup_r>
 8029dcc:	2800      	cmp	r0, #0
 8029dce:	d0cb      	beq.n	8029d68 <__swbuf_r+0x28>
 8029dd0:	f04f 37ff 	mov.w	r7, #4294967295
 8029dd4:	e7ea      	b.n	8029dac <__swbuf_r+0x6c>
 8029dd6:	bf00      	nop
 8029dd8:	0802d53c 	.word	0x0802d53c
 8029ddc:	0802d55c 	.word	0x0802d55c
 8029de0:	0802d51c 	.word	0x0802d51c

08029de4 <__swsetup_r>:
 8029de4:	4b32      	ldr	r3, [pc, #200]	; (8029eb0 <__swsetup_r+0xcc>)
 8029de6:	b570      	push	{r4, r5, r6, lr}
 8029de8:	681d      	ldr	r5, [r3, #0]
 8029dea:	4606      	mov	r6, r0
 8029dec:	460c      	mov	r4, r1
 8029dee:	b125      	cbz	r5, 8029dfa <__swsetup_r+0x16>
 8029df0:	69ab      	ldr	r3, [r5, #24]
 8029df2:	b913      	cbnz	r3, 8029dfa <__swsetup_r+0x16>
 8029df4:	4628      	mov	r0, r5
 8029df6:	f000 f9df 	bl	802a1b8 <__sinit>
 8029dfa:	4b2e      	ldr	r3, [pc, #184]	; (8029eb4 <__swsetup_r+0xd0>)
 8029dfc:	429c      	cmp	r4, r3
 8029dfe:	d10f      	bne.n	8029e20 <__swsetup_r+0x3c>
 8029e00:	686c      	ldr	r4, [r5, #4]
 8029e02:	89a3      	ldrh	r3, [r4, #12]
 8029e04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029e08:	0719      	lsls	r1, r3, #28
 8029e0a:	d42c      	bmi.n	8029e66 <__swsetup_r+0x82>
 8029e0c:	06dd      	lsls	r5, r3, #27
 8029e0e:	d411      	bmi.n	8029e34 <__swsetup_r+0x50>
 8029e10:	2309      	movs	r3, #9
 8029e12:	6033      	str	r3, [r6, #0]
 8029e14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8029e18:	f04f 30ff 	mov.w	r0, #4294967295
 8029e1c:	81a3      	strh	r3, [r4, #12]
 8029e1e:	e03e      	b.n	8029e9e <__swsetup_r+0xba>
 8029e20:	4b25      	ldr	r3, [pc, #148]	; (8029eb8 <__swsetup_r+0xd4>)
 8029e22:	429c      	cmp	r4, r3
 8029e24:	d101      	bne.n	8029e2a <__swsetup_r+0x46>
 8029e26:	68ac      	ldr	r4, [r5, #8]
 8029e28:	e7eb      	b.n	8029e02 <__swsetup_r+0x1e>
 8029e2a:	4b24      	ldr	r3, [pc, #144]	; (8029ebc <__swsetup_r+0xd8>)
 8029e2c:	429c      	cmp	r4, r3
 8029e2e:	bf08      	it	eq
 8029e30:	68ec      	ldreq	r4, [r5, #12]
 8029e32:	e7e6      	b.n	8029e02 <__swsetup_r+0x1e>
 8029e34:	0758      	lsls	r0, r3, #29
 8029e36:	d512      	bpl.n	8029e5e <__swsetup_r+0x7a>
 8029e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029e3a:	b141      	cbz	r1, 8029e4e <__swsetup_r+0x6a>
 8029e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029e40:	4299      	cmp	r1, r3
 8029e42:	d002      	beq.n	8029e4a <__swsetup_r+0x66>
 8029e44:	4630      	mov	r0, r6
 8029e46:	f7ff fa8b 	bl	8029360 <_free_r>
 8029e4a:	2300      	movs	r3, #0
 8029e4c:	6363      	str	r3, [r4, #52]	; 0x34
 8029e4e:	89a3      	ldrh	r3, [r4, #12]
 8029e50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8029e54:	81a3      	strh	r3, [r4, #12]
 8029e56:	2300      	movs	r3, #0
 8029e58:	6063      	str	r3, [r4, #4]
 8029e5a:	6923      	ldr	r3, [r4, #16]
 8029e5c:	6023      	str	r3, [r4, #0]
 8029e5e:	89a3      	ldrh	r3, [r4, #12]
 8029e60:	f043 0308 	orr.w	r3, r3, #8
 8029e64:	81a3      	strh	r3, [r4, #12]
 8029e66:	6923      	ldr	r3, [r4, #16]
 8029e68:	b94b      	cbnz	r3, 8029e7e <__swsetup_r+0x9a>
 8029e6a:	89a3      	ldrh	r3, [r4, #12]
 8029e6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8029e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029e74:	d003      	beq.n	8029e7e <__swsetup_r+0x9a>
 8029e76:	4621      	mov	r1, r4
 8029e78:	4630      	mov	r0, r6
 8029e7a:	f000 fa63 	bl	802a344 <__smakebuf_r>
 8029e7e:	89a0      	ldrh	r0, [r4, #12]
 8029e80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029e84:	f010 0301 	ands.w	r3, r0, #1
 8029e88:	d00a      	beq.n	8029ea0 <__swsetup_r+0xbc>
 8029e8a:	2300      	movs	r3, #0
 8029e8c:	60a3      	str	r3, [r4, #8]
 8029e8e:	6963      	ldr	r3, [r4, #20]
 8029e90:	425b      	negs	r3, r3
 8029e92:	61a3      	str	r3, [r4, #24]
 8029e94:	6923      	ldr	r3, [r4, #16]
 8029e96:	b943      	cbnz	r3, 8029eaa <__swsetup_r+0xc6>
 8029e98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8029e9c:	d1ba      	bne.n	8029e14 <__swsetup_r+0x30>
 8029e9e:	bd70      	pop	{r4, r5, r6, pc}
 8029ea0:	0781      	lsls	r1, r0, #30
 8029ea2:	bf58      	it	pl
 8029ea4:	6963      	ldrpl	r3, [r4, #20]
 8029ea6:	60a3      	str	r3, [r4, #8]
 8029ea8:	e7f4      	b.n	8029e94 <__swsetup_r+0xb0>
 8029eaa:	2000      	movs	r0, #0
 8029eac:	e7f7      	b.n	8029e9e <__swsetup_r+0xba>
 8029eae:	bf00      	nop
 8029eb0:	200000c4 	.word	0x200000c4
 8029eb4:	0802d53c 	.word	0x0802d53c
 8029eb8:	0802d55c 	.word	0x0802d55c
 8029ebc:	0802d51c 	.word	0x0802d51c

08029ec0 <__register_exitproc>:
 8029ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029ec4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8029f84 <__register_exitproc+0xc4>
 8029ec8:	4606      	mov	r6, r0
 8029eca:	461f      	mov	r7, r3
 8029ecc:	460d      	mov	r5, r1
 8029ece:	f8d8 0000 	ldr.w	r0, [r8]
 8029ed2:	4691      	mov	r9, r2
 8029ed4:	f000 fa0e 	bl	802a2f4 <__retarget_lock_acquire_recursive>
 8029ed8:	4b26      	ldr	r3, [pc, #152]	; (8029f74 <__register_exitproc+0xb4>)
 8029eda:	681c      	ldr	r4, [r3, #0]
 8029edc:	b934      	cbnz	r4, 8029eec <__register_exitproc+0x2c>
 8029ede:	4c26      	ldr	r4, [pc, #152]	; (8029f78 <__register_exitproc+0xb8>)
 8029ee0:	601c      	str	r4, [r3, #0]
 8029ee2:	4b26      	ldr	r3, [pc, #152]	; (8029f7c <__register_exitproc+0xbc>)
 8029ee4:	b113      	cbz	r3, 8029eec <__register_exitproc+0x2c>
 8029ee6:	681b      	ldr	r3, [r3, #0]
 8029ee8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8029eec:	6863      	ldr	r3, [r4, #4]
 8029eee:	2b1f      	cmp	r3, #31
 8029ef0:	dd07      	ble.n	8029f02 <__register_exitproc+0x42>
 8029ef2:	f8d8 0000 	ldr.w	r0, [r8]
 8029ef6:	f000 f9ff 	bl	802a2f8 <__retarget_lock_release_recursive>
 8029efa:	f04f 30ff 	mov.w	r0, #4294967295
 8029efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029f02:	b35e      	cbz	r6, 8029f5c <__register_exitproc+0x9c>
 8029f04:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8029f08:	b988      	cbnz	r0, 8029f2e <__register_exitproc+0x6e>
 8029f0a:	4b1d      	ldr	r3, [pc, #116]	; (8029f80 <__register_exitproc+0xc0>)
 8029f0c:	b923      	cbnz	r3, 8029f18 <__register_exitproc+0x58>
 8029f0e:	f8d8 0000 	ldr.w	r0, [r8]
 8029f12:	f000 f9f0 	bl	802a2f6 <__retarget_lock_release>
 8029f16:	e7f0      	b.n	8029efa <__register_exitproc+0x3a>
 8029f18:	f44f 7084 	mov.w	r0, #264	; 0x108
 8029f1c:	f7ff fa08 	bl	8029330 <malloc>
 8029f20:	2800      	cmp	r0, #0
 8029f22:	d0f4      	beq.n	8029f0e <__register_exitproc+0x4e>
 8029f24:	2300      	movs	r3, #0
 8029f26:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8029f2a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8029f2e:	6863      	ldr	r3, [r4, #4]
 8029f30:	2201      	movs	r2, #1
 8029f32:	2e02      	cmp	r6, #2
 8029f34:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8029f38:	fa02 f203 	lsl.w	r2, r2, r3
 8029f3c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8029f40:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8029f44:	ea43 0302 	orr.w	r3, r3, r2
 8029f48:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8029f4c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8029f50:	bf02      	ittt	eq
 8029f52:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8029f56:	4313      	orreq	r3, r2
 8029f58:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8029f5c:	6863      	ldr	r3, [r4, #4]
 8029f5e:	f8d8 0000 	ldr.w	r0, [r8]
 8029f62:	1c5a      	adds	r2, r3, #1
 8029f64:	3302      	adds	r3, #2
 8029f66:	6062      	str	r2, [r4, #4]
 8029f68:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8029f6c:	f000 f9c4 	bl	802a2f8 <__retarget_lock_release_recursive>
 8029f70:	2000      	movs	r0, #0
 8029f72:	e7c4      	b.n	8029efe <__register_exitproc+0x3e>
 8029f74:	20197e70 	.word	0x20197e70
 8029f78:	20197de4 	.word	0x20197de4
 8029f7c:	0802d4a4 	.word	0x0802d4a4
 8029f80:	08029331 	.word	0x08029331
 8029f84:	20000128 	.word	0x20000128

08029f88 <__sflush_r>:
 8029f88:	898a      	ldrh	r2, [r1, #12]
 8029f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029f8e:	4605      	mov	r5, r0
 8029f90:	0710      	lsls	r0, r2, #28
 8029f92:	460c      	mov	r4, r1
 8029f94:	d458      	bmi.n	802a048 <__sflush_r+0xc0>
 8029f96:	684b      	ldr	r3, [r1, #4]
 8029f98:	2b00      	cmp	r3, #0
 8029f9a:	dc05      	bgt.n	8029fa8 <__sflush_r+0x20>
 8029f9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8029f9e:	2b00      	cmp	r3, #0
 8029fa0:	dc02      	bgt.n	8029fa8 <__sflush_r+0x20>
 8029fa2:	2000      	movs	r0, #0
 8029fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029fa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029faa:	2e00      	cmp	r6, #0
 8029fac:	d0f9      	beq.n	8029fa2 <__sflush_r+0x1a>
 8029fae:	2300      	movs	r3, #0
 8029fb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8029fb4:	682f      	ldr	r7, [r5, #0]
 8029fb6:	602b      	str	r3, [r5, #0]
 8029fb8:	d032      	beq.n	802a020 <__sflush_r+0x98>
 8029fba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8029fbc:	89a3      	ldrh	r3, [r4, #12]
 8029fbe:	075a      	lsls	r2, r3, #29
 8029fc0:	d505      	bpl.n	8029fce <__sflush_r+0x46>
 8029fc2:	6863      	ldr	r3, [r4, #4]
 8029fc4:	1ac0      	subs	r0, r0, r3
 8029fc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8029fc8:	b10b      	cbz	r3, 8029fce <__sflush_r+0x46>
 8029fca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029fcc:	1ac0      	subs	r0, r0, r3
 8029fce:	2300      	movs	r3, #0
 8029fd0:	4602      	mov	r2, r0
 8029fd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029fd4:	4628      	mov	r0, r5
 8029fd6:	6a21      	ldr	r1, [r4, #32]
 8029fd8:	47b0      	blx	r6
 8029fda:	1c43      	adds	r3, r0, #1
 8029fdc:	89a3      	ldrh	r3, [r4, #12]
 8029fde:	d106      	bne.n	8029fee <__sflush_r+0x66>
 8029fe0:	6829      	ldr	r1, [r5, #0]
 8029fe2:	291d      	cmp	r1, #29
 8029fe4:	d82c      	bhi.n	802a040 <__sflush_r+0xb8>
 8029fe6:	4a29      	ldr	r2, [pc, #164]	; (802a08c <__sflush_r+0x104>)
 8029fe8:	40ca      	lsrs	r2, r1
 8029fea:	07d6      	lsls	r6, r2, #31
 8029fec:	d528      	bpl.n	802a040 <__sflush_r+0xb8>
 8029fee:	2200      	movs	r2, #0
 8029ff0:	04d9      	lsls	r1, r3, #19
 8029ff2:	6062      	str	r2, [r4, #4]
 8029ff4:	6922      	ldr	r2, [r4, #16]
 8029ff6:	6022      	str	r2, [r4, #0]
 8029ff8:	d504      	bpl.n	802a004 <__sflush_r+0x7c>
 8029ffa:	1c42      	adds	r2, r0, #1
 8029ffc:	d101      	bne.n	802a002 <__sflush_r+0x7a>
 8029ffe:	682b      	ldr	r3, [r5, #0]
 802a000:	b903      	cbnz	r3, 802a004 <__sflush_r+0x7c>
 802a002:	6560      	str	r0, [r4, #84]	; 0x54
 802a004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a006:	602f      	str	r7, [r5, #0]
 802a008:	2900      	cmp	r1, #0
 802a00a:	d0ca      	beq.n	8029fa2 <__sflush_r+0x1a>
 802a00c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a010:	4299      	cmp	r1, r3
 802a012:	d002      	beq.n	802a01a <__sflush_r+0x92>
 802a014:	4628      	mov	r0, r5
 802a016:	f7ff f9a3 	bl	8029360 <_free_r>
 802a01a:	2000      	movs	r0, #0
 802a01c:	6360      	str	r0, [r4, #52]	; 0x34
 802a01e:	e7c1      	b.n	8029fa4 <__sflush_r+0x1c>
 802a020:	6a21      	ldr	r1, [r4, #32]
 802a022:	2301      	movs	r3, #1
 802a024:	4628      	mov	r0, r5
 802a026:	47b0      	blx	r6
 802a028:	1c41      	adds	r1, r0, #1
 802a02a:	d1c7      	bne.n	8029fbc <__sflush_r+0x34>
 802a02c:	682b      	ldr	r3, [r5, #0]
 802a02e:	2b00      	cmp	r3, #0
 802a030:	d0c4      	beq.n	8029fbc <__sflush_r+0x34>
 802a032:	2b1d      	cmp	r3, #29
 802a034:	d001      	beq.n	802a03a <__sflush_r+0xb2>
 802a036:	2b16      	cmp	r3, #22
 802a038:	d101      	bne.n	802a03e <__sflush_r+0xb6>
 802a03a:	602f      	str	r7, [r5, #0]
 802a03c:	e7b1      	b.n	8029fa2 <__sflush_r+0x1a>
 802a03e:	89a3      	ldrh	r3, [r4, #12]
 802a040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a044:	81a3      	strh	r3, [r4, #12]
 802a046:	e7ad      	b.n	8029fa4 <__sflush_r+0x1c>
 802a048:	690f      	ldr	r7, [r1, #16]
 802a04a:	2f00      	cmp	r7, #0
 802a04c:	d0a9      	beq.n	8029fa2 <__sflush_r+0x1a>
 802a04e:	0793      	lsls	r3, r2, #30
 802a050:	680e      	ldr	r6, [r1, #0]
 802a052:	600f      	str	r7, [r1, #0]
 802a054:	bf0c      	ite	eq
 802a056:	694b      	ldreq	r3, [r1, #20]
 802a058:	2300      	movne	r3, #0
 802a05a:	eba6 0807 	sub.w	r8, r6, r7
 802a05e:	608b      	str	r3, [r1, #8]
 802a060:	f1b8 0f00 	cmp.w	r8, #0
 802a064:	dd9d      	ble.n	8029fa2 <__sflush_r+0x1a>
 802a066:	4643      	mov	r3, r8
 802a068:	463a      	mov	r2, r7
 802a06a:	6a21      	ldr	r1, [r4, #32]
 802a06c:	4628      	mov	r0, r5
 802a06e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802a070:	47b0      	blx	r6
 802a072:	2800      	cmp	r0, #0
 802a074:	dc06      	bgt.n	802a084 <__sflush_r+0xfc>
 802a076:	89a3      	ldrh	r3, [r4, #12]
 802a078:	f04f 30ff 	mov.w	r0, #4294967295
 802a07c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a080:	81a3      	strh	r3, [r4, #12]
 802a082:	e78f      	b.n	8029fa4 <__sflush_r+0x1c>
 802a084:	4407      	add	r7, r0
 802a086:	eba8 0800 	sub.w	r8, r8, r0
 802a08a:	e7e9      	b.n	802a060 <__sflush_r+0xd8>
 802a08c:	20400001 	.word	0x20400001

0802a090 <_fflush_r>:
 802a090:	b538      	push	{r3, r4, r5, lr}
 802a092:	690b      	ldr	r3, [r1, #16]
 802a094:	4605      	mov	r5, r0
 802a096:	460c      	mov	r4, r1
 802a098:	b913      	cbnz	r3, 802a0a0 <_fflush_r+0x10>
 802a09a:	2500      	movs	r5, #0
 802a09c:	4628      	mov	r0, r5
 802a09e:	bd38      	pop	{r3, r4, r5, pc}
 802a0a0:	b118      	cbz	r0, 802a0aa <_fflush_r+0x1a>
 802a0a2:	6983      	ldr	r3, [r0, #24]
 802a0a4:	b90b      	cbnz	r3, 802a0aa <_fflush_r+0x1a>
 802a0a6:	f000 f887 	bl	802a1b8 <__sinit>
 802a0aa:	4b14      	ldr	r3, [pc, #80]	; (802a0fc <_fflush_r+0x6c>)
 802a0ac:	429c      	cmp	r4, r3
 802a0ae:	d11b      	bne.n	802a0e8 <_fflush_r+0x58>
 802a0b0:	686c      	ldr	r4, [r5, #4]
 802a0b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a0b6:	2b00      	cmp	r3, #0
 802a0b8:	d0ef      	beq.n	802a09a <_fflush_r+0xa>
 802a0ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802a0bc:	07d0      	lsls	r0, r2, #31
 802a0be:	d404      	bmi.n	802a0ca <_fflush_r+0x3a>
 802a0c0:	0599      	lsls	r1, r3, #22
 802a0c2:	d402      	bmi.n	802a0ca <_fflush_r+0x3a>
 802a0c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a0c6:	f000 f915 	bl	802a2f4 <__retarget_lock_acquire_recursive>
 802a0ca:	4628      	mov	r0, r5
 802a0cc:	4621      	mov	r1, r4
 802a0ce:	f7ff ff5b 	bl	8029f88 <__sflush_r>
 802a0d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a0d4:	4605      	mov	r5, r0
 802a0d6:	07da      	lsls	r2, r3, #31
 802a0d8:	d4e0      	bmi.n	802a09c <_fflush_r+0xc>
 802a0da:	89a3      	ldrh	r3, [r4, #12]
 802a0dc:	059b      	lsls	r3, r3, #22
 802a0de:	d4dd      	bmi.n	802a09c <_fflush_r+0xc>
 802a0e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a0e2:	f000 f909 	bl	802a2f8 <__retarget_lock_release_recursive>
 802a0e6:	e7d9      	b.n	802a09c <_fflush_r+0xc>
 802a0e8:	4b05      	ldr	r3, [pc, #20]	; (802a100 <_fflush_r+0x70>)
 802a0ea:	429c      	cmp	r4, r3
 802a0ec:	d101      	bne.n	802a0f2 <_fflush_r+0x62>
 802a0ee:	68ac      	ldr	r4, [r5, #8]
 802a0f0:	e7df      	b.n	802a0b2 <_fflush_r+0x22>
 802a0f2:	4b04      	ldr	r3, [pc, #16]	; (802a104 <_fflush_r+0x74>)
 802a0f4:	429c      	cmp	r4, r3
 802a0f6:	bf08      	it	eq
 802a0f8:	68ec      	ldreq	r4, [r5, #12]
 802a0fa:	e7da      	b.n	802a0b2 <_fflush_r+0x22>
 802a0fc:	0802d53c 	.word	0x0802d53c
 802a100:	0802d55c 	.word	0x0802d55c
 802a104:	0802d51c 	.word	0x0802d51c

0802a108 <std>:
 802a108:	2300      	movs	r3, #0
 802a10a:	b510      	push	{r4, lr}
 802a10c:	4604      	mov	r4, r0
 802a10e:	6083      	str	r3, [r0, #8]
 802a110:	8181      	strh	r1, [r0, #12]
 802a112:	4619      	mov	r1, r3
 802a114:	6643      	str	r3, [r0, #100]	; 0x64
 802a116:	81c2      	strh	r2, [r0, #14]
 802a118:	2208      	movs	r2, #8
 802a11a:	6183      	str	r3, [r0, #24]
 802a11c:	e9c0 3300 	strd	r3, r3, [r0]
 802a120:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802a124:	305c      	adds	r0, #92	; 0x5c
 802a126:	f7ff f913 	bl	8029350 <memset>
 802a12a:	4b05      	ldr	r3, [pc, #20]	; (802a140 <std+0x38>)
 802a12c:	6224      	str	r4, [r4, #32]
 802a12e:	6263      	str	r3, [r4, #36]	; 0x24
 802a130:	4b04      	ldr	r3, [pc, #16]	; (802a144 <std+0x3c>)
 802a132:	62a3      	str	r3, [r4, #40]	; 0x28
 802a134:	4b04      	ldr	r3, [pc, #16]	; (802a148 <std+0x40>)
 802a136:	62e3      	str	r3, [r4, #44]	; 0x2c
 802a138:	4b04      	ldr	r3, [pc, #16]	; (802a14c <std+0x44>)
 802a13a:	6323      	str	r3, [r4, #48]	; 0x30
 802a13c:	bd10      	pop	{r4, pc}
 802a13e:	bf00      	nop
 802a140:	0802a3f9 	.word	0x0802a3f9
 802a144:	0802a41b 	.word	0x0802a41b
 802a148:	0802a453 	.word	0x0802a453
 802a14c:	0802a477 	.word	0x0802a477

0802a150 <_cleanup_r>:
 802a150:	4901      	ldr	r1, [pc, #4]	; (802a158 <_cleanup_r+0x8>)
 802a152:	f000 b8af 	b.w	802a2b4 <_fwalk_reent>
 802a156:	bf00      	nop
 802a158:	0802a091 	.word	0x0802a091

0802a15c <__sfmoreglue>:
 802a15c:	b570      	push	{r4, r5, r6, lr}
 802a15e:	2268      	movs	r2, #104	; 0x68
 802a160:	1e4d      	subs	r5, r1, #1
 802a162:	460e      	mov	r6, r1
 802a164:	4355      	muls	r5, r2
 802a166:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802a16a:	f7ff f965 	bl	8029438 <_malloc_r>
 802a16e:	4604      	mov	r4, r0
 802a170:	b140      	cbz	r0, 802a184 <__sfmoreglue+0x28>
 802a172:	2100      	movs	r1, #0
 802a174:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802a178:	e9c0 1600 	strd	r1, r6, [r0]
 802a17c:	300c      	adds	r0, #12
 802a17e:	60a0      	str	r0, [r4, #8]
 802a180:	f7ff f8e6 	bl	8029350 <memset>
 802a184:	4620      	mov	r0, r4
 802a186:	bd70      	pop	{r4, r5, r6, pc}

0802a188 <__sfp_lock_acquire>:
 802a188:	4801      	ldr	r0, [pc, #4]	; (802a190 <__sfp_lock_acquire+0x8>)
 802a18a:	f000 b8b3 	b.w	802a2f4 <__retarget_lock_acquire_recursive>
 802a18e:	bf00      	nop
 802a190:	20197e76 	.word	0x20197e76

0802a194 <__sfp_lock_release>:
 802a194:	4801      	ldr	r0, [pc, #4]	; (802a19c <__sfp_lock_release+0x8>)
 802a196:	f000 b8af 	b.w	802a2f8 <__retarget_lock_release_recursive>
 802a19a:	bf00      	nop
 802a19c:	20197e76 	.word	0x20197e76

0802a1a0 <__sinit_lock_acquire>:
 802a1a0:	4801      	ldr	r0, [pc, #4]	; (802a1a8 <__sinit_lock_acquire+0x8>)
 802a1a2:	f000 b8a7 	b.w	802a2f4 <__retarget_lock_acquire_recursive>
 802a1a6:	bf00      	nop
 802a1a8:	20197e77 	.word	0x20197e77

0802a1ac <__sinit_lock_release>:
 802a1ac:	4801      	ldr	r0, [pc, #4]	; (802a1b4 <__sinit_lock_release+0x8>)
 802a1ae:	f000 b8a3 	b.w	802a2f8 <__retarget_lock_release_recursive>
 802a1b2:	bf00      	nop
 802a1b4:	20197e77 	.word	0x20197e77

0802a1b8 <__sinit>:
 802a1b8:	b510      	push	{r4, lr}
 802a1ba:	4604      	mov	r4, r0
 802a1bc:	f7ff fff0 	bl	802a1a0 <__sinit_lock_acquire>
 802a1c0:	69a3      	ldr	r3, [r4, #24]
 802a1c2:	b11b      	cbz	r3, 802a1cc <__sinit+0x14>
 802a1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a1c8:	f7ff bff0 	b.w	802a1ac <__sinit_lock_release>
 802a1cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802a1d0:	6523      	str	r3, [r4, #80]	; 0x50
 802a1d2:	4620      	mov	r0, r4
 802a1d4:	4b12      	ldr	r3, [pc, #72]	; (802a220 <__sinit+0x68>)
 802a1d6:	4a13      	ldr	r2, [pc, #76]	; (802a224 <__sinit+0x6c>)
 802a1d8:	681b      	ldr	r3, [r3, #0]
 802a1da:	62a2      	str	r2, [r4, #40]	; 0x28
 802a1dc:	42a3      	cmp	r3, r4
 802a1de:	bf04      	itt	eq
 802a1e0:	2301      	moveq	r3, #1
 802a1e2:	61a3      	streq	r3, [r4, #24]
 802a1e4:	f000 f820 	bl	802a228 <__sfp>
 802a1e8:	6060      	str	r0, [r4, #4]
 802a1ea:	4620      	mov	r0, r4
 802a1ec:	f000 f81c 	bl	802a228 <__sfp>
 802a1f0:	60a0      	str	r0, [r4, #8]
 802a1f2:	4620      	mov	r0, r4
 802a1f4:	f000 f818 	bl	802a228 <__sfp>
 802a1f8:	2200      	movs	r2, #0
 802a1fa:	2104      	movs	r1, #4
 802a1fc:	60e0      	str	r0, [r4, #12]
 802a1fe:	6860      	ldr	r0, [r4, #4]
 802a200:	f7ff ff82 	bl	802a108 <std>
 802a204:	2201      	movs	r2, #1
 802a206:	2109      	movs	r1, #9
 802a208:	68a0      	ldr	r0, [r4, #8]
 802a20a:	f7ff ff7d 	bl	802a108 <std>
 802a20e:	2202      	movs	r2, #2
 802a210:	2112      	movs	r1, #18
 802a212:	68e0      	ldr	r0, [r4, #12]
 802a214:	f7ff ff78 	bl	802a108 <std>
 802a218:	2301      	movs	r3, #1
 802a21a:	61a3      	str	r3, [r4, #24]
 802a21c:	e7d2      	b.n	802a1c4 <__sinit+0xc>
 802a21e:	bf00      	nop
 802a220:	0802d46c 	.word	0x0802d46c
 802a224:	0802a151 	.word	0x0802a151

0802a228 <__sfp>:
 802a228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a22a:	4607      	mov	r7, r0
 802a22c:	f7ff ffac 	bl	802a188 <__sfp_lock_acquire>
 802a230:	4b1e      	ldr	r3, [pc, #120]	; (802a2ac <__sfp+0x84>)
 802a232:	681e      	ldr	r6, [r3, #0]
 802a234:	69b3      	ldr	r3, [r6, #24]
 802a236:	b913      	cbnz	r3, 802a23e <__sfp+0x16>
 802a238:	4630      	mov	r0, r6
 802a23a:	f7ff ffbd 	bl	802a1b8 <__sinit>
 802a23e:	3648      	adds	r6, #72	; 0x48
 802a240:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802a244:	3b01      	subs	r3, #1
 802a246:	d503      	bpl.n	802a250 <__sfp+0x28>
 802a248:	6833      	ldr	r3, [r6, #0]
 802a24a:	b30b      	cbz	r3, 802a290 <__sfp+0x68>
 802a24c:	6836      	ldr	r6, [r6, #0]
 802a24e:	e7f7      	b.n	802a240 <__sfp+0x18>
 802a250:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802a254:	b9d5      	cbnz	r5, 802a28c <__sfp+0x64>
 802a256:	4b16      	ldr	r3, [pc, #88]	; (802a2b0 <__sfp+0x88>)
 802a258:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802a25c:	6665      	str	r5, [r4, #100]	; 0x64
 802a25e:	60e3      	str	r3, [r4, #12]
 802a260:	f000 f847 	bl	802a2f2 <__retarget_lock_init_recursive>
 802a264:	f7ff ff96 	bl	802a194 <__sfp_lock_release>
 802a268:	2208      	movs	r2, #8
 802a26a:	4629      	mov	r1, r5
 802a26c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802a270:	6025      	str	r5, [r4, #0]
 802a272:	61a5      	str	r5, [r4, #24]
 802a274:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802a278:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802a27c:	f7ff f868 	bl	8029350 <memset>
 802a280:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802a284:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802a288:	4620      	mov	r0, r4
 802a28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a28c:	3468      	adds	r4, #104	; 0x68
 802a28e:	e7d9      	b.n	802a244 <__sfp+0x1c>
 802a290:	2104      	movs	r1, #4
 802a292:	4638      	mov	r0, r7
 802a294:	f7ff ff62 	bl	802a15c <__sfmoreglue>
 802a298:	4604      	mov	r4, r0
 802a29a:	6030      	str	r0, [r6, #0]
 802a29c:	2800      	cmp	r0, #0
 802a29e:	d1d5      	bne.n	802a24c <__sfp+0x24>
 802a2a0:	f7ff ff78 	bl	802a194 <__sfp_lock_release>
 802a2a4:	230c      	movs	r3, #12
 802a2a6:	603b      	str	r3, [r7, #0]
 802a2a8:	e7ee      	b.n	802a288 <__sfp+0x60>
 802a2aa:	bf00      	nop
 802a2ac:	0802d46c 	.word	0x0802d46c
 802a2b0:	ffff0001 	.word	0xffff0001

0802a2b4 <_fwalk_reent>:
 802a2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a2b8:	4606      	mov	r6, r0
 802a2ba:	4688      	mov	r8, r1
 802a2bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802a2c0:	2700      	movs	r7, #0
 802a2c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802a2c6:	f1b9 0901 	subs.w	r9, r9, #1
 802a2ca:	d505      	bpl.n	802a2d8 <_fwalk_reent+0x24>
 802a2cc:	6824      	ldr	r4, [r4, #0]
 802a2ce:	2c00      	cmp	r4, #0
 802a2d0:	d1f7      	bne.n	802a2c2 <_fwalk_reent+0xe>
 802a2d2:	4638      	mov	r0, r7
 802a2d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a2d8:	89ab      	ldrh	r3, [r5, #12]
 802a2da:	2b01      	cmp	r3, #1
 802a2dc:	d907      	bls.n	802a2ee <_fwalk_reent+0x3a>
 802a2de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802a2e2:	3301      	adds	r3, #1
 802a2e4:	d003      	beq.n	802a2ee <_fwalk_reent+0x3a>
 802a2e6:	4629      	mov	r1, r5
 802a2e8:	4630      	mov	r0, r6
 802a2ea:	47c0      	blx	r8
 802a2ec:	4307      	orrs	r7, r0
 802a2ee:	3568      	adds	r5, #104	; 0x68
 802a2f0:	e7e9      	b.n	802a2c6 <_fwalk_reent+0x12>

0802a2f2 <__retarget_lock_init_recursive>:
 802a2f2:	4770      	bx	lr

0802a2f4 <__retarget_lock_acquire_recursive>:
 802a2f4:	4770      	bx	lr

0802a2f6 <__retarget_lock_release>:
 802a2f6:	4770      	bx	lr

0802a2f8 <__retarget_lock_release_recursive>:
 802a2f8:	4770      	bx	lr

0802a2fa <__swhatbuf_r>:
 802a2fa:	b570      	push	{r4, r5, r6, lr}
 802a2fc:	460e      	mov	r6, r1
 802a2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a302:	b096      	sub	sp, #88	; 0x58
 802a304:	4614      	mov	r4, r2
 802a306:	2900      	cmp	r1, #0
 802a308:	461d      	mov	r5, r3
 802a30a:	da08      	bge.n	802a31e <__swhatbuf_r+0x24>
 802a30c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802a310:	2200      	movs	r2, #0
 802a312:	602a      	str	r2, [r5, #0]
 802a314:	061a      	lsls	r2, r3, #24
 802a316:	d410      	bmi.n	802a33a <__swhatbuf_r+0x40>
 802a318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a31c:	e00e      	b.n	802a33c <__swhatbuf_r+0x42>
 802a31e:	466a      	mov	r2, sp
 802a320:	f000 f8d0 	bl	802a4c4 <_fstat_r>
 802a324:	2800      	cmp	r0, #0
 802a326:	dbf1      	blt.n	802a30c <__swhatbuf_r+0x12>
 802a328:	9a01      	ldr	r2, [sp, #4]
 802a32a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802a32e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802a332:	425a      	negs	r2, r3
 802a334:	415a      	adcs	r2, r3
 802a336:	602a      	str	r2, [r5, #0]
 802a338:	e7ee      	b.n	802a318 <__swhatbuf_r+0x1e>
 802a33a:	2340      	movs	r3, #64	; 0x40
 802a33c:	2000      	movs	r0, #0
 802a33e:	6023      	str	r3, [r4, #0]
 802a340:	b016      	add	sp, #88	; 0x58
 802a342:	bd70      	pop	{r4, r5, r6, pc}

0802a344 <__smakebuf_r>:
 802a344:	898b      	ldrh	r3, [r1, #12]
 802a346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a348:	079d      	lsls	r5, r3, #30
 802a34a:	4606      	mov	r6, r0
 802a34c:	460c      	mov	r4, r1
 802a34e:	d507      	bpl.n	802a360 <__smakebuf_r+0x1c>
 802a350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802a354:	6023      	str	r3, [r4, #0]
 802a356:	6123      	str	r3, [r4, #16]
 802a358:	2301      	movs	r3, #1
 802a35a:	6163      	str	r3, [r4, #20]
 802a35c:	b002      	add	sp, #8
 802a35e:	bd70      	pop	{r4, r5, r6, pc}
 802a360:	ab01      	add	r3, sp, #4
 802a362:	466a      	mov	r2, sp
 802a364:	f7ff ffc9 	bl	802a2fa <__swhatbuf_r>
 802a368:	9900      	ldr	r1, [sp, #0]
 802a36a:	4605      	mov	r5, r0
 802a36c:	4630      	mov	r0, r6
 802a36e:	f7ff f863 	bl	8029438 <_malloc_r>
 802a372:	b948      	cbnz	r0, 802a388 <__smakebuf_r+0x44>
 802a374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a378:	059a      	lsls	r2, r3, #22
 802a37a:	d4ef      	bmi.n	802a35c <__smakebuf_r+0x18>
 802a37c:	f023 0303 	bic.w	r3, r3, #3
 802a380:	f043 0302 	orr.w	r3, r3, #2
 802a384:	81a3      	strh	r3, [r4, #12]
 802a386:	e7e3      	b.n	802a350 <__smakebuf_r+0xc>
 802a388:	4b0d      	ldr	r3, [pc, #52]	; (802a3c0 <__smakebuf_r+0x7c>)
 802a38a:	62b3      	str	r3, [r6, #40]	; 0x28
 802a38c:	89a3      	ldrh	r3, [r4, #12]
 802a38e:	6020      	str	r0, [r4, #0]
 802a390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a394:	6120      	str	r0, [r4, #16]
 802a396:	81a3      	strh	r3, [r4, #12]
 802a398:	9b00      	ldr	r3, [sp, #0]
 802a39a:	6163      	str	r3, [r4, #20]
 802a39c:	9b01      	ldr	r3, [sp, #4]
 802a39e:	b15b      	cbz	r3, 802a3b8 <__smakebuf_r+0x74>
 802a3a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a3a4:	4630      	mov	r0, r6
 802a3a6:	f000 f89f 	bl	802a4e8 <_isatty_r>
 802a3aa:	b128      	cbz	r0, 802a3b8 <__smakebuf_r+0x74>
 802a3ac:	89a3      	ldrh	r3, [r4, #12]
 802a3ae:	f023 0303 	bic.w	r3, r3, #3
 802a3b2:	f043 0301 	orr.w	r3, r3, #1
 802a3b6:	81a3      	strh	r3, [r4, #12]
 802a3b8:	89a0      	ldrh	r0, [r4, #12]
 802a3ba:	4305      	orrs	r5, r0
 802a3bc:	81a5      	strh	r5, [r4, #12]
 802a3be:	e7cd      	b.n	802a35c <__smakebuf_r+0x18>
 802a3c0:	0802a151 	.word	0x0802a151

0802a3c4 <memchr>:
 802a3c4:	b2c9      	uxtb	r1, r1
 802a3c6:	4402      	add	r2, r0
 802a3c8:	b510      	push	{r4, lr}
 802a3ca:	4290      	cmp	r0, r2
 802a3cc:	4603      	mov	r3, r0
 802a3ce:	d101      	bne.n	802a3d4 <memchr+0x10>
 802a3d0:	2300      	movs	r3, #0
 802a3d2:	e003      	b.n	802a3dc <memchr+0x18>
 802a3d4:	781c      	ldrb	r4, [r3, #0]
 802a3d6:	3001      	adds	r0, #1
 802a3d8:	428c      	cmp	r4, r1
 802a3da:	d1f6      	bne.n	802a3ca <memchr+0x6>
 802a3dc:	4618      	mov	r0, r3
 802a3de:	bd10      	pop	{r4, pc}

0802a3e0 <__malloc_lock>:
 802a3e0:	4801      	ldr	r0, [pc, #4]	; (802a3e8 <__malloc_lock+0x8>)
 802a3e2:	f7ff bf87 	b.w	802a2f4 <__retarget_lock_acquire_recursive>
 802a3e6:	bf00      	nop
 802a3e8:	20197e75 	.word	0x20197e75

0802a3ec <__malloc_unlock>:
 802a3ec:	4801      	ldr	r0, [pc, #4]	; (802a3f4 <__malloc_unlock+0x8>)
 802a3ee:	f7ff bf83 	b.w	802a2f8 <__retarget_lock_release_recursive>
 802a3f2:	bf00      	nop
 802a3f4:	20197e75 	.word	0x20197e75

0802a3f8 <__sread>:
 802a3f8:	b510      	push	{r4, lr}
 802a3fa:	460c      	mov	r4, r1
 802a3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a400:	f000 f894 	bl	802a52c <_read_r>
 802a404:	2800      	cmp	r0, #0
 802a406:	bfab      	itete	ge
 802a408:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802a40a:	89a3      	ldrhlt	r3, [r4, #12]
 802a40c:	181b      	addge	r3, r3, r0
 802a40e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802a412:	bfac      	ite	ge
 802a414:	6563      	strge	r3, [r4, #84]	; 0x54
 802a416:	81a3      	strhlt	r3, [r4, #12]
 802a418:	bd10      	pop	{r4, pc}

0802a41a <__swrite>:
 802a41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a41e:	461f      	mov	r7, r3
 802a420:	898b      	ldrh	r3, [r1, #12]
 802a422:	4605      	mov	r5, r0
 802a424:	460c      	mov	r4, r1
 802a426:	05db      	lsls	r3, r3, #23
 802a428:	4616      	mov	r6, r2
 802a42a:	d505      	bpl.n	802a438 <__swrite+0x1e>
 802a42c:	2302      	movs	r3, #2
 802a42e:	2200      	movs	r2, #0
 802a430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a434:	f000 f868 	bl	802a508 <_lseek_r>
 802a438:	89a3      	ldrh	r3, [r4, #12]
 802a43a:	4632      	mov	r2, r6
 802a43c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a440:	4628      	mov	r0, r5
 802a442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a446:	81a3      	strh	r3, [r4, #12]
 802a448:	463b      	mov	r3, r7
 802a44a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a44e:	f000 b817 	b.w	802a480 <_write_r>

0802a452 <__sseek>:
 802a452:	b510      	push	{r4, lr}
 802a454:	460c      	mov	r4, r1
 802a456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a45a:	f000 f855 	bl	802a508 <_lseek_r>
 802a45e:	1c43      	adds	r3, r0, #1
 802a460:	89a3      	ldrh	r3, [r4, #12]
 802a462:	bf15      	itete	ne
 802a464:	6560      	strne	r0, [r4, #84]	; 0x54
 802a466:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802a46a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802a46e:	81a3      	strheq	r3, [r4, #12]
 802a470:	bf18      	it	ne
 802a472:	81a3      	strhne	r3, [r4, #12]
 802a474:	bd10      	pop	{r4, pc}

0802a476 <__sclose>:
 802a476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a47a:	f000 b813 	b.w	802a4a4 <_close_r>
	...

0802a480 <_write_r>:
 802a480:	b538      	push	{r3, r4, r5, lr}
 802a482:	4604      	mov	r4, r0
 802a484:	4d06      	ldr	r5, [pc, #24]	; (802a4a0 <_write_r+0x20>)
 802a486:	4608      	mov	r0, r1
 802a488:	4611      	mov	r1, r2
 802a48a:	2200      	movs	r2, #0
 802a48c:	602a      	str	r2, [r5, #0]
 802a48e:	461a      	mov	r2, r3
 802a490:	f7d7 fe47 	bl	8002122 <_write>
 802a494:	1c43      	adds	r3, r0, #1
 802a496:	d102      	bne.n	802a49e <_write_r+0x1e>
 802a498:	682b      	ldr	r3, [r5, #0]
 802a49a:	b103      	cbz	r3, 802a49e <_write_r+0x1e>
 802a49c:	6023      	str	r3, [r4, #0]
 802a49e:	bd38      	pop	{r3, r4, r5, pc}
 802a4a0:	20197e78 	.word	0x20197e78

0802a4a4 <_close_r>:
 802a4a4:	b538      	push	{r3, r4, r5, lr}
 802a4a6:	2300      	movs	r3, #0
 802a4a8:	4d05      	ldr	r5, [pc, #20]	; (802a4c0 <_close_r+0x1c>)
 802a4aa:	4604      	mov	r4, r0
 802a4ac:	4608      	mov	r0, r1
 802a4ae:	602b      	str	r3, [r5, #0]
 802a4b0:	f7d7 fe53 	bl	800215a <_close>
 802a4b4:	1c43      	adds	r3, r0, #1
 802a4b6:	d102      	bne.n	802a4be <_close_r+0x1a>
 802a4b8:	682b      	ldr	r3, [r5, #0]
 802a4ba:	b103      	cbz	r3, 802a4be <_close_r+0x1a>
 802a4bc:	6023      	str	r3, [r4, #0]
 802a4be:	bd38      	pop	{r3, r4, r5, pc}
 802a4c0:	20197e78 	.word	0x20197e78

0802a4c4 <_fstat_r>:
 802a4c4:	b538      	push	{r3, r4, r5, lr}
 802a4c6:	2300      	movs	r3, #0
 802a4c8:	4d06      	ldr	r5, [pc, #24]	; (802a4e4 <_fstat_r+0x20>)
 802a4ca:	4604      	mov	r4, r0
 802a4cc:	4608      	mov	r0, r1
 802a4ce:	4611      	mov	r1, r2
 802a4d0:	602b      	str	r3, [r5, #0]
 802a4d2:	f7d7 fe4e 	bl	8002172 <_fstat>
 802a4d6:	1c43      	adds	r3, r0, #1
 802a4d8:	d102      	bne.n	802a4e0 <_fstat_r+0x1c>
 802a4da:	682b      	ldr	r3, [r5, #0]
 802a4dc:	b103      	cbz	r3, 802a4e0 <_fstat_r+0x1c>
 802a4de:	6023      	str	r3, [r4, #0]
 802a4e0:	bd38      	pop	{r3, r4, r5, pc}
 802a4e2:	bf00      	nop
 802a4e4:	20197e78 	.word	0x20197e78

0802a4e8 <_isatty_r>:
 802a4e8:	b538      	push	{r3, r4, r5, lr}
 802a4ea:	2300      	movs	r3, #0
 802a4ec:	4d05      	ldr	r5, [pc, #20]	; (802a504 <_isatty_r+0x1c>)
 802a4ee:	4604      	mov	r4, r0
 802a4f0:	4608      	mov	r0, r1
 802a4f2:	602b      	str	r3, [r5, #0]
 802a4f4:	f7d7 fe4d 	bl	8002192 <_isatty>
 802a4f8:	1c43      	adds	r3, r0, #1
 802a4fa:	d102      	bne.n	802a502 <_isatty_r+0x1a>
 802a4fc:	682b      	ldr	r3, [r5, #0]
 802a4fe:	b103      	cbz	r3, 802a502 <_isatty_r+0x1a>
 802a500:	6023      	str	r3, [r4, #0]
 802a502:	bd38      	pop	{r3, r4, r5, pc}
 802a504:	20197e78 	.word	0x20197e78

0802a508 <_lseek_r>:
 802a508:	b538      	push	{r3, r4, r5, lr}
 802a50a:	4604      	mov	r4, r0
 802a50c:	4d06      	ldr	r5, [pc, #24]	; (802a528 <_lseek_r+0x20>)
 802a50e:	4608      	mov	r0, r1
 802a510:	4611      	mov	r1, r2
 802a512:	2200      	movs	r2, #0
 802a514:	602a      	str	r2, [r5, #0]
 802a516:	461a      	mov	r2, r3
 802a518:	f7d7 fe46 	bl	80021a8 <_lseek>
 802a51c:	1c43      	adds	r3, r0, #1
 802a51e:	d102      	bne.n	802a526 <_lseek_r+0x1e>
 802a520:	682b      	ldr	r3, [r5, #0]
 802a522:	b103      	cbz	r3, 802a526 <_lseek_r+0x1e>
 802a524:	6023      	str	r3, [r4, #0]
 802a526:	bd38      	pop	{r3, r4, r5, pc}
 802a528:	20197e78 	.word	0x20197e78

0802a52c <_read_r>:
 802a52c:	b538      	push	{r3, r4, r5, lr}
 802a52e:	4604      	mov	r4, r0
 802a530:	4d06      	ldr	r5, [pc, #24]	; (802a54c <_read_r+0x20>)
 802a532:	4608      	mov	r0, r1
 802a534:	4611      	mov	r1, r2
 802a536:	2200      	movs	r2, #0
 802a538:	602a      	str	r2, [r5, #0]
 802a53a:	461a      	mov	r2, r3
 802a53c:	f7d7 fdd4 	bl	80020e8 <_read>
 802a540:	1c43      	adds	r3, r0, #1
 802a542:	d102      	bne.n	802a54a <_read_r+0x1e>
 802a544:	682b      	ldr	r3, [r5, #0]
 802a546:	b103      	cbz	r3, 802a54a <_read_r+0x1e>
 802a548:	6023      	str	r3, [r4, #0]
 802a54a:	bd38      	pop	{r3, r4, r5, pc}
 802a54c:	20197e78 	.word	0x20197e78

0802a550 <_init>:
 802a550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a552:	bf00      	nop
 802a554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a556:	bc08      	pop	{r3}
 802a558:	469e      	mov	lr, r3
 802a55a:	4770      	bx	lr

0802a55c <_fini>:
 802a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a55e:	bf00      	nop
 802a560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a562:	bc08      	pop	{r3}
 802a564:	469e      	mov	lr, r3
 802a566:	4770      	bx	lr
